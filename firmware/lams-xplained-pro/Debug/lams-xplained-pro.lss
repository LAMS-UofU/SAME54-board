
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ceb0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000ceb0  0000ceb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000680  20000000  0000ceb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020680  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020680  2**0
                  CONTENTS
  5 .bss          000010c0  20000680  0000d538  00020680  2**3
                  ALLOC
  6 .stack        00010000  20001740  0000e5f8  00020680  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000206aa  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004c32f  00000000  00000000  00020703  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006960  00000000  00000000  0006ca32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018b68  00000000  00000000  00073392  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011b8  00000000  00000000  0008befa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001630  00000000  00000000  0008d0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000405d6  00000000  00000000  0008e6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00025896  00000000  00000000  000cecb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012b269  00000000  00000000  000f454e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000047ec  00000000  00000000  0021f7b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 17 01 20 d5 02 00 00 d1 02 00 00 ed 38 00 00     @.. .........8..
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	1d 2f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ./..............
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	11 2e 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000680 	.word	0x20000680
     280:	00000000 	.word	0x00000000
     284:	0000ceb8 	.word	0x0000ceb8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000ceb8 	.word	0x0000ceb8
     2c4:	20000684 	.word	0x20000684
     2c8:	0000ceb8 	.word	0x0000ceb8
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000ceb8 	.word	0x0000ceb8
     33c:	20000680 	.word	0x20000680
     340:	20001740 	.word	0x20001740
     344:	20000680 	.word	0x20000680
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00007b9d 	.word	0x00007b9d
     354:	00004d29 	.word	0x00004d29

00000358 <sd_mmc_test_unit_ready>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_test_unit_ready(uint8_t slot)
{
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot)) {
     35c:	4b0a      	ldr	r3, [pc, #40]	; (388 <sd_mmc_test_unit_ready+0x30>)
     35e:	4798      	blx	r3
     360:	2801      	cmp	r0, #1
     362:	d00f      	beq.n	384 <sd_mmc_test_unit_ready+0x2c>
     364:	b120      	cbz	r0, 370 <sd_mmc_test_unit_ready+0x18>
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     366:	2802      	cmp	r0, #2
     368:	bf0c      	ite	eq
     36a:	2002      	moveq	r0, #2
     36c:	2001      	movne	r0, #1
     36e:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     370:	4620      	mov	r0, r4
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <sd_mmc_test_unit_ready+0x34>)
     374:	4798      	blx	r3
     376:	f000 0003 	and.w	r0, r0, #3
			return CTRL_NO_PRESENT;
     37a:	2800      	cmp	r0, #0
     37c:	bf14      	ite	ne
     37e:	2000      	movne	r0, #0
     380:	2002      	moveq	r0, #2
     382:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
     384:	2003      	movs	r0, #3
	}
}
     386:	bd10      	pop	{r4, pc}
     388:	00005c6d 	.word	0x00005c6d
     38c:	000062b5 	.word	0x000062b5

00000390 <sd_mmc_read_capacity>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     390:	b538      	push	{r3, r4, r5, lr}
     392:	4604      	mov	r4, r0
     394:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <sd_mmc_read_capacity+0x18>)
     398:	4798      	blx	r3
     39a:	0040      	lsls	r0, r0, #1
     39c:	3801      	subs	r0, #1
     39e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     3a0:	4620      	mov	r0, r4
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <sd_mmc_read_capacity+0x1c>)
     3a4:	4798      	blx	r3
}
     3a6:	bd38      	pop	{r3, r4, r5, pc}
     3a8:	000062d9 	.word	0x000062d9
     3ac:	00000359 	.word	0x00000359

000003b0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
dstatus_t disk_initialize(uint8_t drv)
{
     3b0:	b510      	push	{r4, lr}
     3b2:	4604      	mov	r4, r0
	int           i;
	ctrl_status_t mem_status;

	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i++) {
		mem_status = sd_mmc_test_unit_ready(drv);
     3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <disk_initialize+0x30>)
     3b6:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3b8:	2803      	cmp	r0, #3
     3ba:	d106      	bne.n	3ca <disk_initialize+0x1a>
		mem_status = sd_mmc_test_unit_ready(drv);
     3bc:	4620      	mov	r0, r4
     3be:	4b08      	ldr	r3, [pc, #32]	; (3e0 <disk_initialize+0x30>)
     3c0:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3c2:	2803      	cmp	r0, #3
     3c4:	d101      	bne.n	3ca <disk_initialize+0x1a>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
     3c6:	2001      	movs	r0, #1
     3c8:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
     3ca:	b938      	cbnz	r0, 3dc <disk_initialize+0x2c>
	}

	/* Check Write Protection Status */
	if (sd_mmc_is_write_protected(drv)) {
     3cc:	4620      	mov	r0, r4
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <disk_initialize+0x34>)
     3d0:	4798      	blx	r3
     3d2:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
     3d4:	bf14      	ite	ne
     3d6:	2004      	movne	r0, #4
     3d8:	2000      	moveq	r0, #0
     3da:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
     3dc:	2001      	movs	r0, #1
}
     3de:	bd10      	pop	{r4, pc}
     3e0:	00000359 	.word	0x00000359
     3e4:	000062fd 	.word	0x000062fd

000003e8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
dstatus_t disk_status(uint8_t drv)
{
     3e8:	b508      	push	{r3, lr}
	switch (sd_mmc_test_unit_ready(drv)) {
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <disk_status+0x18>)
     3ec:	4798      	blx	r3
     3ee:	b120      	cbz	r0, 3fa <disk_status+0x12>
	case CTRL_GOOD:
		return ERR_NONE;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
     3f0:	2802      	cmp	r0, #2
     3f2:	bf0c      	ite	eq
     3f4:	2003      	moveq	r0, #3
     3f6:	2001      	movne	r0, #1
     3f8:	bd08      	pop	{r3, pc}
		return ERR_NONE;
     3fa:	2000      	movs	r0, #0
	}
}
     3fc:	bd08      	pop	{r3, pc}
     3fe:	bf00      	nop
     400:	00000359 	.word	0x00000359

00000404 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_read(uint8_t drv, uint8_t *buff, uint32_t sector, uint8_t count)
{
     404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     408:	b083      	sub	sp, #12
     40a:	4683      	mov	fp, r0
     40c:	4688      	mov	r8, r1
     40e:	4614      	mov	r4, r2
     410:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     412:	a901      	add	r1, sp, #4
     414:	4b17      	ldr	r3, [pc, #92]	; (474 <disk_read+0x70>)
     416:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     418:	192e      	adds	r6, r5, r4
     41a:	9b01      	ldr	r3, [sp, #4]
     41c:	3301      	adds	r3, #1
     41e:	429e      	cmp	r6, r3
     420:	d901      	bls.n	426 <disk_read+0x22>
		return ERR_INVALID_ARG;
     422:	20f3      	movs	r0, #243	; 0xf3
     424:	e01f      	b.n	466 <disk_read+0x62>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
     426:	b30d      	cbz	r5, 46c <disk_read+0x68>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     428:	4f13      	ldr	r7, [pc, #76]	; (478 <disk_read+0x74>)
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     42a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 47c <disk_read+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     42e:	f8df a050 	ldr.w	sl, [pc, #80]	; 480 <disk_read+0x7c>
     432:	e00f      	b.n	454 <disk_read+0x50>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     434:	2101      	movs	r1, #1
     436:	4640      	mov	r0, r8
     438:	47c8      	blx	r9
     43a:	b998      	cbnz	r0, 464 <disk_read+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     43c:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     43e:	3000      	adds	r0, #0
     440:	bf18      	it	ne
     442:	2001      	movne	r0, #1
     444:	e000      	b.n	448 <disk_read+0x44>
     446:	2002      	movs	r0, #2
		if (sd_mmc_mem_2_ram(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     448:	b990      	cbnz	r0, 470 <disk_read+0x6c>
     44a:	3401      	adds	r4, #1
     44c:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     450:	42a6      	cmp	r6, r4
     452:	d008      	beq.n	466 <disk_read+0x62>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     454:	2201      	movs	r2, #1
     456:	4621      	mov	r1, r4
     458:	4658      	mov	r0, fp
     45a:	47b8      	blx	r7
     45c:	2800      	cmp	r0, #0
     45e:	d0e9      	beq.n	434 <disk_read+0x30>
     460:	2802      	cmp	r0, #2
     462:	d0f0      	beq.n	446 <disk_read+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     464:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     466:	b003      	add	sp, #12
     468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     46c:	2000      	movs	r0, #0
     46e:	e7fa      	b.n	466 <disk_read+0x62>
			return ERR_INVALID_DATA;
     470:	20ff      	movs	r0, #255	; 0xff
     472:	e7f8      	b.n	466 <disk_read+0x62>
     474:	00000391 	.word	0x00000391
     478:	00006375 	.word	0x00006375
     47c:	0000644d 	.word	0x0000644d
     480:	00006499 	.word	0x00006499

00000484 <disk_write>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_write(uint8_t drv, uint8_t const *buff, uint32_t sector, uint8_t count)
{
     484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     488:	b083      	sub	sp, #12
     48a:	4683      	mov	fp, r0
     48c:	4688      	mov	r8, r1
     48e:	4614      	mov	r4, r2
     490:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     492:	a901      	add	r1, sp, #4
     494:	4b17      	ldr	r3, [pc, #92]	; (4f4 <disk_write+0x70>)
     496:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     498:	192e      	adds	r6, r5, r4
     49a:	9b01      	ldr	r3, [sp, #4]
     49c:	3301      	adds	r3, #1
     49e:	429e      	cmp	r6, r3
     4a0:	d901      	bls.n	4a6 <disk_write+0x22>
		return ERR_INVALID_ARG;
     4a2:	20f3      	movs	r0, #243	; 0xf3
     4a4:	e01f      	b.n	4e6 <disk_write+0x62>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
     4a6:	b30d      	cbz	r5, 4ec <disk_write+0x68>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4a8:	4f13      	ldr	r7, [pc, #76]	; (4f8 <disk_write+0x74>)
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4fc <disk_write+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4ae:	f8df a050 	ldr.w	sl, [pc, #80]	; 500 <disk_write+0x7c>
     4b2:	e00f      	b.n	4d4 <disk_write+0x50>
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4b4:	2101      	movs	r1, #1
     4b6:	4640      	mov	r0, r8
     4b8:	47c8      	blx	r9
     4ba:	b998      	cbnz	r0, 4e4 <disk_write+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4bc:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     4be:	3000      	adds	r0, #0
     4c0:	bf18      	it	ne
     4c2:	2001      	movne	r0, #1
     4c4:	e000      	b.n	4c8 <disk_write+0x44>
     4c6:	2002      	movs	r0, #2
		if (sd_mmc_ram_2_mem(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     4c8:	b990      	cbnz	r0, 4f0 <disk_write+0x6c>
     4ca:	3401      	adds	r4, #1
     4cc:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     4d0:	42a6      	cmp	r6, r4
     4d2:	d008      	beq.n	4e6 <disk_write+0x62>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4d4:	2201      	movs	r2, #1
     4d6:	4621      	mov	r1, r4
     4d8:	4658      	mov	r0, fp
     4da:	47b8      	blx	r7
     4dc:	2800      	cmp	r0, #0
     4de:	d0e9      	beq.n	4b4 <disk_write+0x30>
     4e0:	2802      	cmp	r0, #2
     4e2:	d0f0      	beq.n	4c6 <disk_write+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     4e4:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     4e6:	b003      	add	sp, #12
     4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     4ec:	2000      	movs	r0, #0
     4ee:	e7fa      	b.n	4e6 <disk_write+0x62>
			return ERR_INVALID_DATA;
     4f0:	20ff      	movs	r0, #255	; 0xff
     4f2:	e7f8      	b.n	4e6 <disk_write+0x62>
     4f4:	00000391 	.word	0x00000391
     4f8:	00006509 	.word	0x00006509
     4fc:	000065a9 	.word	0x000065a9
     500:	000065f5 	.word	0x000065f5

00000504 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
     504:	b510      	push	{r4, lr}
     506:	b082      	sub	sp, #8
     508:	4614      	mov	r4, r2
	dstatus_t res = ERR_INVALID_ARG;

	switch (ctrl) {
     50a:	2903      	cmp	r1, #3
     50c:	d81a      	bhi.n	544 <disk_ioctl+0x40>
     50e:	e8df f001 	tbb	[pc, r1]
     512:	0712      	.short	0x0712
     514:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(unsigned long *)buff = 1;
     516:	2301      	movs	r3, #1
     518:	6013      	str	r3, [r2, #0]
		res                    = ERR_NONE;
     51a:	2000      	movs	r0, #0
	default:
		res = ERR_INVALID_ARG;
	}

	return res;
}
     51c:	b002      	add	sp, #8
     51e:	bd10      	pop	{r4, pc}
		sd_mmc_read_capacity(drv, &ul_last_sector_num);
     520:	a901      	add	r1, sp, #4
     522:	4b09      	ldr	r3, [pc, #36]	; (548 <disk_ioctl+0x44>)
     524:	4798      	blx	r3
		*(unsigned long *)buff = ul_last_sector_num + 1;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3301      	adds	r3, #1
     52a:	6023      	str	r3, [r4, #0]
		res = ERR_NONE;
     52c:	2000      	movs	r0, #0
	} break;
     52e:	e7f5      	b.n	51c <disk_ioctl+0x18>
		*(uint8_t *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
     530:	2000      	movs	r0, #0
     532:	7010      	strb	r0, [r2, #0]
	} break;
     534:	e7f2      	b.n	51c <disk_ioctl+0x18>
		if (sd_mmc_test_unit_ready(drv) == CTRL_GOOD) {
     536:	4b05      	ldr	r3, [pc, #20]	; (54c <disk_ioctl+0x48>)
     538:	4798      	blx	r3
     53a:	2800      	cmp	r0, #0
			res = ERR_NOT_READY;
     53c:	bf0c      	ite	eq
     53e:	2000      	moveq	r0, #0
     540:	20e3      	movne	r0, #227	; 0xe3
     542:	e7eb      	b.n	51c <disk_ioctl+0x18>
		res = ERR_INVALID_ARG;
     544:	20f3      	movs	r0, #243	; 0xf3
     546:	e7e9      	b.n	51c <disk_ioctl+0x18>
     548:	00000391 	.word	0x00000391
     54c:	00000359 	.word	0x00000359

00000550 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     550:	4b10      	ldr	r3, [pc, #64]	; (594 <STDIO_IO_PORT_init+0x44>)
     552:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     566:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     592:	4770      	bx	lr
     594:	41008000 	.word	0x41008000

00000598 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <STDIO_IO_CLOCK_init+0x1c>)
     59a:	2240      	movs	r2, #64	; 0x40
     59c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     5a0:	2243      	movs	r2, #67	; 0x43
     5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     5a6:	4a04      	ldr	r2, [pc, #16]	; (5b8 <STDIO_IO_CLOCK_init+0x20>)
     5a8:	6993      	ldr	r3, [r2, #24]
     5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     5ae:	6193      	str	r3, [r2, #24]
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	40001c00 	.word	0x40001c00
     5b8:	40000800 	.word	0x40000800

000005bc <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     5bc:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <STDIO_IO_init+0x18>)
     5c0:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     5c2:	2200      	movs	r2, #0
     5c4:	4904      	ldr	r1, [pc, #16]	; (5d8 <STDIO_IO_init+0x1c>)
     5c6:	4805      	ldr	r0, [pc, #20]	; (5dc <STDIO_IO_init+0x20>)
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <STDIO_IO_init+0x24>)
     5ca:	4798      	blx	r3
	STDIO_IO_PORT_init();
     5cc:	4b05      	ldr	r3, [pc, #20]	; (5e4 <STDIO_IO_init+0x28>)
     5ce:	4798      	blx	r3
     5d0:	bd08      	pop	{r3, pc}
     5d2:	bf00      	nop
     5d4:	00000599 	.word	0x00000599
     5d8:	41012000 	.word	0x41012000
     5dc:	200016d0 	.word	0x200016d0
     5e0:	00002c41 	.word	0x00002c41
     5e4:	00000551 	.word	0x00000551

000005e8 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     5e8:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ea:	4b72      	ldr	r3, [pc, #456]	; (7b4 <SDHC_IO_BUS_PORT_init+0x1cc>)
     5ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     5f0:	6099      	str	r1, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     5f6:	629a      	str	r2, [r3, #40]	; 0x28
     5f8:	4d6f      	ldr	r5, [pc, #444]	; (7b8 <SDHC_IO_BUS_PORT_init+0x1d0>)
     5fa:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fc:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5fe:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
     602:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     606:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60a:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     60e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     612:	f040 0001 	orr.w	r0, r0, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     616:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     61e:	f000 000f 	and.w	r0, r0, #15
	tmp |= PORT_PMUX_PMUXO(data);
     622:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     626:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     62e:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	629a      	str	r2, [r3, #40]	; 0x28
     632:	4e62      	ldr	r6, [pc, #392]	; (7bc <SDHC_IO_BUS_PORT_init+0x1d4>)
     634:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     636:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     638:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
     63c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     640:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     644:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     648:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     650:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     654:	f893 403a 	ldrb.w	r4, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     658:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     65c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     660:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     664:	f44f 2480 	mov.w	r4, #262144	; 0x40000
     668:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     66c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     670:	4f53      	ldr	r7, [pc, #332]	; (7c0 <SDHC_IO_BUS_PORT_init+0x1d8>)
     672:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     676:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     67a:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
     67e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     682:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     686:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     68a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68e:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     692:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69a:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     69e:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a2:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a6:	f44f 2400 	mov.w	r4, #524288	; 0x80000
     6aa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6b2:	3704      	adds	r7, #4
     6b4:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6b8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6bc:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
     6c0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     6c4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c8:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     6cc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d0:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6d8:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6dc:	f004 040f 	and.w	r4, r4, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6e0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e4:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6e8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6f0:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6f8:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
     6fc:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     700:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     704:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     708:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     710:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     714:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     718:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     71c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     720:	f883 40ba 	strb.w	r4, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     724:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     728:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     72c:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     730:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     734:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     738:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     73c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     740:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     748:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     74c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     750:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     754:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     75c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     760:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     764:	4817      	ldr	r0, [pc, #92]	; (7c4 <SDHC_IO_BUS_PORT_init+0x1dc>)
     766:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     76a:	4a17      	ldr	r2, [pc, #92]	; (7c8 <SDHC_IO_BUS_PORT_init+0x1e0>)
     76c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     770:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     774:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     778:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     77c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     784:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     788:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78c:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     790:	4a0e      	ldr	r2, [pc, #56]	; (7cc <SDHC_IO_BUS_PORT_init+0x1e4>)
     792:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     796:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     79a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     79e:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a2:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	gpio_set_pin_function(CARD_DETECT_0, GPIO_PIN_FUNCTION_OFF);
	
	gpio_set_pin_direction(WRITE_PROTECT_0, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(WRITE_PROTECT_0, GPIO_PULL_OFF);
	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);
}
     7ae:	bcf0      	pop	{r4, r5, r6, r7}
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	41008000 	.word	0x41008000
     7b8:	c0000020 	.word	0xc0000020
     7bc:	c0000010 	.word	0xc0000010
     7c0:	c0000004 	.word	0xc0000004
     7c4:	40020000 	.word	0x40020000
     7c8:	c0020010 	.word	0xc0020010
     7cc:	c0020020 	.word	0xc0020020

000007d0 <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     7d0:	4a05      	ldr	r2, [pc, #20]	; (7e8 <SDHC_IO_BUS_CLOCK_init+0x18>)
     7d2:	6913      	ldr	r3, [r2, #16]
     7d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     7d8:	6113      	str	r3, [r2, #16]
     7da:	4b04      	ldr	r3, [pc, #16]	; (7ec <SDHC_IO_BUS_CLOCK_init+0x1c>)
     7dc:	2240      	movs	r2, #64	; 0x40
     7de:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     7e6:	4770      	bx	lr
     7e8:	40000800 	.word	0x40000800
     7ec:	40001c00 	.word	0x40001c00

000007f0 <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     7f0:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     7f2:	4b05      	ldr	r3, [pc, #20]	; (808 <SDHC_IO_BUS_init+0x18>)
     7f4:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     7f6:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     7fa:	4804      	ldr	r0, [pc, #16]	; (80c <SDHC_IO_BUS_init+0x1c>)
     7fc:	4b04      	ldr	r3, [pc, #16]	; (810 <SDHC_IO_BUS_init+0x20>)
     7fe:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <SDHC_IO_BUS_init+0x24>)
     802:	4798      	blx	r3
     804:	bd08      	pop	{r3, pc}
     806:	bf00      	nop
     808:	000007d1 	.word	0x000007d1
     80c:	200016e0 	.word	0x200016e0
     810:	000028d5 	.word	0x000028d5
     814:	000005e9 	.word	0x000005e9

00000818 <GPIO_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	4b18      	ldr	r3, [pc, #96]	; (87c <GPIO_init+0x64>)
     81a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     81e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     822:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     82a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     82e:	4a14      	ldr	r2, [pc, #80]	; (880 <GPIO_init+0x68>)
     830:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     834:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     844:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     846:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     848:	4a0e      	ldr	r2, [pc, #56]	; (884 <GPIO_init+0x6c>)
     84a:	629a      	str	r2, [r3, #40]	; 0x28
     84c:	4a0e      	ldr	r2, [pc, #56]	; (888 <GPIO_init+0x70>)
     84e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     850:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
	tmp &= ~PORT_PINCFG_PMUXEN;
     854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     858:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	2240      	movs	r2, #64	; 0x40
     85e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     860:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     862:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     866:	629a      	str	r2, [r3, #40]	; 0x28
     868:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     86c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     872:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
     87a:	4770      	bx	lr
     87c:	41008000 	.word	0x41008000
     880:	c0000004 	.word	0xc0000004
     884:	40020000 	.word	0x40020000
     888:	c0020800 	.word	0xc0020800

0000088c <system_init>:
	gpio_set_pin_direction(LED_STATUS, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(LED_STATUS, GPIO_PIN_FUNCTION_OFF);
}

void system_init(void)
{
     88c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     88e:	4b08      	ldr	r3, [pc, #32]	; (8b0 <system_init+0x24>)
     890:	4798      	blx	r3
	init_mcu();

	GPIO_init();
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <system_init+0x28>)
     894:	4798      	blx	r3
	FATFS_CALENDAR_init();
     896:	4b08      	ldr	r3, [pc, #32]	; (8b8 <system_init+0x2c>)
     898:	4798      	blx	r3
	LIDAR_USART_init();
     89a:	4b08      	ldr	r3, [pc, #32]	; (8bc <system_init+0x30>)
     89c:	4798      	blx	r3
	STDIO_IO_init();
     89e:	4b08      	ldr	r3, [pc, #32]	; (8c0 <system_init+0x34>)
     8a0:	4798      	blx	r3
	SDHC_IO_BUS_init();
     8a2:	4b08      	ldr	r3, [pc, #32]	; (8c4 <system_init+0x38>)
     8a4:	4798      	blx	r3
	SERVO_PWM_init();
     8a6:	4b08      	ldr	r3, [pc, #32]	; (8c8 <system_init+0x3c>)
     8a8:	4798      	blx	r3
	LIDAR_PWM_init();
     8aa:	4b08      	ldr	r3, [pc, #32]	; (8cc <system_init+0x40>)
     8ac:	4798      	blx	r3
     8ae:	bd08      	pop	{r3, pc}
     8b0:	00002d71 	.word	0x00002d71
     8b4:	00000819 	.word	0x00000819
     8b8:	00000bf1 	.word	0x00000bf1
     8bc:	00003d61 	.word	0x00003d61
     8c0:	000005bd 	.word	0x000005bd
     8c4:	000007f1 	.word	0x000007f1
     8c8:	0000665d 	.word	0x0000665d
     8cc:	00003b85 	.word	0x00003b85

000008d0 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_LOAD) >> NVMCTRL_SEESTAT_LOAD_Pos;
}

static inline bool hri_nvmctrl_get_SEESTAT_BUSY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     8d4:	4a0b      	ldr	r2, [pc, #44]	; (904 <invert_seep_byte+0x34>)
     8d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     8d8:	f013 0f04 	tst.w	r3, #4
     8dc:	d1fb      	bne.n	8d6 <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
     8de:	4e0a      	ldr	r6, [pc, #40]	; (908 <invert_seep_byte+0x38>)
     8e0:	6833      	ldr	r3, [r6, #0]
     8e2:	5d1a      	ldrb	r2, [r3, r4]
     8e4:	4d09      	ldr	r5, [pc, #36]	; (90c <invert_seep_byte+0x3c>)
     8e6:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
     8e8:	4621      	mov	r1, r4
     8ea:	4809      	ldr	r0, [pc, #36]	; (910 <invert_seep_byte+0x40>)
     8ec:	4b09      	ldr	r3, [pc, #36]	; (914 <invert_seep_byte+0x44>)
     8ee:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
     8f0:	6832      	ldr	r2, [r6, #0]
     8f2:	782b      	ldrb	r3, [r5, #0]
     8f4:	fab3 f383 	clz	r3, r3
     8f8:	095b      	lsrs	r3, r3, #5
     8fa:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
     8fc:	4806      	ldr	r0, [pc, #24]	; (918 <invert_seep_byte+0x48>)
     8fe:	4b07      	ldr	r3, [pc, #28]	; (91c <invert_seep_byte+0x4c>)
     900:	4798      	blx	r3
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	41004000 	.word	0x41004000
     908:	20000000 	.word	0x20000000
     90c:	200016f8 	.word	0x200016f8
     910:	0000b4c4 	.word	0x0000b4c4
     914:	00007d95 	.word	0x00007d95
     918:	0000b4e8 	.word	0x0000b4e8
     91c:	00007e7d 	.word	0x00007e7d

00000920 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
     920:	b508      	push	{r3, lr}
     922:	4a0b      	ldr	r2, [pc, #44]	; (950 <verify_seep_signature+0x30>)
     924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     926:	f013 0f04 	tst.w	r3, #4
     92a:	d1fb      	bne.n	924 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK(mask)) >> NVMCTRL_SEESTAT_SBLK_Pos;
}

static inline hri_nvmctrl_seestat_reg_t hri_nvmctrl_read_SEESTAT_SBLK_bf(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
     92c:	4b08      	ldr	r3, [pc, #32]	; (950 <verify_seep_signature+0x30>)
     92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
     930:	f413 6f70 	tst.w	r3, #3840	; 0xf00
     934:	d008      	beq.n	948 <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
     936:	4b07      	ldr	r3, [pc, #28]	; (954 <verify_seep_signature+0x34>)
     938:	685b      	ldr	r3, [r3, #4]
     93a:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
     93c:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
     940:	bf18      	it	ne
     942:	f04f 30ff 	movne.w	r0, #4294967295
     946:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
     948:	4803      	ldr	r0, [pc, #12]	; (958 <verify_seep_signature+0x38>)
     94a:	4b04      	ldr	r3, [pc, #16]	; (95c <verify_seep_signature+0x3c>)
     94c:	4798      	blx	r3
     94e:	e7fe      	b.n	94e <verify_seep_signature+0x2e>
     950:	41004000 	.word	0x41004000
     954:	20000000 	.word	0x20000000
     958:	0000b51c 	.word	0x0000b51c
     95c:	00007e7d 	.word	0x00007e7d

00000960 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
     960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
     964:	b1c9      	cbz	r1, 99a <print_hex_array+0x3a>
     966:	460e      	mov	r6, r1
     968:	1e45      	subs	r5, r0, #1
     96a:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
     96c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 9b0 <print_hex_array+0x50>
     970:	4f0c      	ldr	r7, [pc, #48]	; (9a4 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
     972:	f8df 9038 	ldr.w	r9, [pc, #56]	; 9ac <print_hex_array+0x4c>
     976:	e003      	b.n	980 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
     978:	3401      	adds	r4, #1
     97a:	b2a4      	uxth	r4, r4
     97c:	42a6      	cmp	r6, r4
     97e:	d00c      	beq.n	99a <print_hex_array+0x3a>
		printf("%02d ", p[i]);
     980:	f815 1f01 	ldrb.w	r1, [r5, #1]!
     984:	4640      	mov	r0, r8
     986:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
     988:	f014 0f07 	tst.w	r4, #7
     98c:	d1f4      	bne.n	978 <print_hex_array+0x18>
     98e:	2c00      	cmp	r4, #0
     990:	d0f2      	beq.n	978 <print_hex_array+0x18>
			printf("\r\n");
     992:	4648      	mov	r0, r9
     994:	4b04      	ldr	r3, [pc, #16]	; (9a8 <print_hex_array+0x48>)
     996:	4798      	blx	r3
     998:	e7ee      	b.n	978 <print_hex_array+0x18>
	}
	printf("\r\n");
     99a:	4804      	ldr	r0, [pc, #16]	; (9ac <print_hex_array+0x4c>)
     99c:	4b02      	ldr	r3, [pc, #8]	; (9a8 <print_hex_array+0x48>)
     99e:	4798      	blx	r3
     9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     9a4:	00007d95 	.word	0x00007d95
     9a8:	00007e7d 	.word	0x00007e7d
     9ac:	0000b6b8 	.word	0x0000b6b8
     9b0:	0000b558 	.word	0x0000b558

000009b4 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
     9b4:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
     9b6:	4b19      	ldr	r3, [pc, #100]	; (a1c <EEPROM_init+0x68>)
     9b8:	4798      	blx	r3
     9ba:	b9d0      	cbnz	r0, 9f2 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
     9bc:	4818      	ldr	r0, [pc, #96]	; (a20 <EEPROM_init+0x6c>)
     9be:	4b19      	ldr	r3, [pc, #100]	; (a24 <EEPROM_init+0x70>)
     9c0:	4798      	blx	r3
     9c2:	4b19      	ldr	r3, [pc, #100]	; (a28 <EEPROM_init+0x74>)
     9c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ(mask)) >> NVMCTRL_SEESTAT_PSZ_Pos;
}

static inline hri_nvmctrl_seestat_reg_t hri_nvmctrl_read_SEESTAT_PSZ_bf(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
     9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
     9c8:	f3c2 4202 	ubfx	r2, r2, #16, #3
     9cc:	f3c1 2103 	ubfx	r1, r1, #8, #4
     9d0:	4816      	ldr	r0, [pc, #88]	; (a2c <EEPROM_init+0x78>)
     9d2:	4b17      	ldr	r3, [pc, #92]	; (a30 <EEPROM_init+0x7c>)
     9d4:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
     9d6:	2020      	movs	r0, #32
     9d8:	4b16      	ldr	r3, [pc, #88]	; (a34 <EEPROM_init+0x80>)
     9da:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
     9dc:	4b16      	ldr	r3, [pc, #88]	; (a38 <EEPROM_init+0x84>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	f893 3020 	ldrb.w	r3, [r3, #32]
     9e4:	b99b      	cbnz	r3, a0e <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     9ea:	4b14      	ldr	r3, [pc, #80]	; (a3c <EEPROM_init+0x88>)
     9ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     9f0:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
     9f2:	4813      	ldr	r0, [pc, #76]	; (a40 <EEPROM_init+0x8c>)
     9f4:	4b0b      	ldr	r3, [pc, #44]	; (a24 <EEPROM_init+0x70>)
     9f6:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     9f8:	4a0b      	ldr	r2, [pc, #44]	; (a28 <EEPROM_init+0x74>)
     9fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     9fc:	f013 0f04 	tst.w	r3, #4
     a00:	d1fb      	bne.n	9fa <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
     a02:	4b0d      	ldr	r3, [pc, #52]	; (a38 <EEPROM_init+0x84>)
     a04:	685b      	ldr	r3, [r3, #4]
     a06:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
     a0a:	601a      	str	r2, [r3, #0]
     a0c:	e7d9      	b.n	9c2 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     a12:	4b0a      	ldr	r3, [pc, #40]	; (a3c <EEPROM_init+0x88>)
     a14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     a18:	bd08      	pop	{r3, pc}
     a1a:	bf00      	nop
     a1c:	00000921 	.word	0x00000921
     a20:	0000b560 	.word	0x0000b560
     a24:	00007e7d 	.word	0x00007e7d
     a28:	41004000 	.word	0x41004000
     a2c:	0000b5c0 	.word	0x0000b5c0
     a30:	00007d95 	.word	0x00007d95
     a34:	000008d1 	.word	0x000008d1
     a38:	20000000 	.word	0x20000000
     a3c:	41008000 	.word	0x41008000
     a40:	0000b584 	.word	0x0000b584

00000a44 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
     a44:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
     a46:	4b0a      	ldr	r3, [pc, #40]	; (a70 <EEPROM_read+0x2c>)
     a48:	681a      	ldr	r2, [r3, #0]
     a4a:	3a01      	subs	r2, #1
     a4c:	4809      	ldr	r0, [pc, #36]	; (a74 <EEPROM_read+0x30>)
     a4e:	1e43      	subs	r3, r0, #1
     a50:	3063      	adds	r0, #99	; 0x63
     a52:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a56:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
     a5a:	4283      	cmp	r3, r0
     a5c:	d1f9      	bne.n	a52 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     a5e:	2164      	movs	r1, #100	; 0x64
     a60:	4805      	ldr	r0, [pc, #20]	; (a78 <EEPROM_read+0x34>)
     a62:	4b06      	ldr	r3, [pc, #24]	; (a7c <EEPROM_read+0x38>)
     a64:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     a66:	2164      	movs	r1, #100	; 0x64
     a68:	4802      	ldr	r0, [pc, #8]	; (a74 <EEPROM_read+0x30>)
     a6a:	4b05      	ldr	r3, [pc, #20]	; (a80 <EEPROM_read+0x3c>)
     a6c:	4798      	blx	r3
     a6e:	bd08      	pop	{r3, pc}
     a70:	20000000 	.word	0x20000000
     a74:	2000069c 	.word	0x2000069c
     a78:	0000b654 	.word	0x0000b654
     a7c:	00007d95 	.word	0x00007d95
     a80:	00000961 	.word	0x00000961

00000a84 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
     a84:	b530      	push	{r4, r5, lr}
     a86:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
     a88:	2300      	movs	r3, #0
     a8a:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
     a8c:	ac02      	add	r4, sp, #8
     a8e:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
     a92:	481a      	ldr	r0, [pc, #104]	; (afc <EEPROM_write+0x78>)
     a94:	4b1a      	ldr	r3, [pc, #104]	; (b00 <EEPROM_write+0x7c>)
     a96:	4798      	blx	r3
	scanf("%"PRIu32"", &ee_addr);
     a98:	4621      	mov	r1, r4
     a9a:	481a      	ldr	r0, [pc, #104]	; (b04 <EEPROM_write+0x80>)
     a9c:	4b1a      	ldr	r3, [pc, #104]	; (b08 <EEPROM_write+0x84>)
     a9e:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
     aa0:	9b00      	ldr	r3, [sp, #0]
     aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     aa6:	d224      	bcs.n	af2 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
     aa8:	4818      	ldr	r0, [pc, #96]	; (b0c <EEPROM_write+0x88>)
     aaa:	4d15      	ldr	r5, [pc, #84]	; (b00 <EEPROM_write+0x7c>)
     aac:	47a8      	blx	r5
	scanf("%"PRIu32"", &ee_data);
     aae:	a901      	add	r1, sp, #4
     ab0:	4814      	ldr	r0, [pc, #80]	; (b04 <EEPROM_write+0x80>)
     ab2:	4b15      	ldr	r3, [pc, #84]	; (b08 <EEPROM_write+0x84>)
     ab4:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
     ab6:	4c16      	ldr	r4, [pc, #88]	; (b10 <EEPROM_write+0x8c>)
     ab8:	6822      	ldr	r2, [r4, #0]
     aba:	9901      	ldr	r1, [sp, #4]
     abc:	9b00      	ldr	r3, [sp, #0]
     abe:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
     ac0:	9a00      	ldr	r2, [sp, #0]
     ac2:	9901      	ldr	r1, [sp, #4]
     ac4:	4813      	ldr	r0, [pc, #76]	; (b14 <EEPROM_write+0x90>)
     ac6:	47a8      	blx	r5
     ac8:	6822      	ldr	r2, [r4, #0]
     aca:	3a01      	subs	r2, #1
     acc:	4812      	ldr	r0, [pc, #72]	; (b18 <EEPROM_write+0x94>)
     ace:	1e43      	subs	r3, r0, #1
     ad0:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
     ad2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     ad6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
     ada:	4283      	cmp	r3, r0
     adc:	d1f9      	bne.n	ad2 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     ade:	2164      	movs	r1, #100	; 0x64
     ae0:	480e      	ldr	r0, [pc, #56]	; (b1c <EEPROM_write+0x98>)
     ae2:	4b07      	ldr	r3, [pc, #28]	; (b00 <EEPROM_write+0x7c>)
     ae4:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     ae6:	2164      	movs	r1, #100	; 0x64
     ae8:	480b      	ldr	r0, [pc, #44]	; (b18 <EEPROM_write+0x94>)
     aea:	4b0d      	ldr	r3, [pc, #52]	; (b20 <EEPROM_write+0x9c>)
     aec:	4798      	blx	r3
}
     aee:	b003      	add	sp, #12
     af0:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
     af2:	480c      	ldr	r0, [pc, #48]	; (b24 <EEPROM_write+0xa0>)
     af4:	4b0c      	ldr	r3, [pc, #48]	; (b28 <EEPROM_write+0xa4>)
     af6:	4798      	blx	r3
     af8:	e7f9      	b.n	aee <EEPROM_write+0x6a>
     afa:	bf00      	nop
     afc:	0000b67c 	.word	0x0000b67c
     b00:	00007d95 	.word	0x00007d95
     b04:	0000b690 	.word	0x0000b690
     b08:	00007ead 	.word	0x00007ead
     b0c:	0000b6bc 	.word	0x0000b6bc
     b10:	20000000 	.word	0x20000000
     b14:	0000b6d0 	.word	0x0000b6d0
     b18:	2000069c 	.word	0x2000069c
     b1c:	0000b654 	.word	0x0000b654
     b20:	00000961 	.word	0x00000961
     b24:	0000b694 	.word	0x0000b694
     b28:	00007e7d 	.word	0x00007e7d

00000b2c <EEPROM_menu>:
{
     b2c:	b570      	push	{r4, r5, r6, lr}
     b2e:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
     b30:	2300      	movs	r3, #0
     b32:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
     b34:	4e1b      	ldr	r6, [pc, #108]	; (ba4 <EEPROM_menu+0x78>)
     b36:	4d1c      	ldr	r5, [pc, #112]	; (ba8 <EEPROM_menu+0x7c>)
     b38:	4c1c      	ldr	r4, [pc, #112]	; (bac <EEPROM_menu+0x80>)
     b3a:	4631      	mov	r1, r6
     b3c:	4628      	mov	r0, r5
     b3e:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
     b40:	a901      	add	r1, sp, #4
     b42:	481b      	ldr	r0, [pc, #108]	; (bb0 <EEPROM_menu+0x84>)
     b44:	4b1b      	ldr	r3, [pc, #108]	; (bb4 <EEPROM_menu+0x88>)
     b46:	4798      	blx	r3
     b48:	b150      	cbz	r0, b60 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
     b4a:	9901      	ldr	r1, [sp, #4]
     b4c:	481a      	ldr	r0, [pc, #104]	; (bb8 <EEPROM_menu+0x8c>)
     b4e:	47a0      	blx	r4
		switch (user_selection) {
     b50:	9b01      	ldr	r3, [sp, #4]
     b52:	3b01      	subs	r3, #1
     b54:	2b03      	cmp	r3, #3
     b56:	d821      	bhi.n	b9c <EEPROM_menu+0x70>
     b58:	e8df f003 	tbb	[pc, r3]
     b5c:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
     b60:	4b16      	ldr	r3, [pc, #88]	; (bbc <EEPROM_menu+0x90>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	6858      	ldr	r0, [r3, #4]
     b66:	4b16      	ldr	r3, [pc, #88]	; (bc0 <EEPROM_menu+0x94>)
     b68:	4798      	blx	r3
     b6a:	e7ee      	b.n	b4a <EEPROM_menu+0x1e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     b6c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     b70:	4914      	ldr	r1, [pc, #80]	; (bc4 <EEPROM_menu+0x98>)
     b72:	68ca      	ldr	r2, [r1, #12]
     b74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <EEPROM_menu+0x9c>)
     b7a:	4313      	orrs	r3, r2
     b7c:	60cb      	str	r3, [r1, #12]
     b7e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     b82:	bf00      	nop
     b84:	e7fd      	b.n	b82 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
     b86:	4811      	ldr	r0, [pc, #68]	; (bcc <EEPROM_menu+0xa0>)
     b88:	4b11      	ldr	r3, [pc, #68]	; (bd0 <EEPROM_menu+0xa4>)
     b8a:	4798      	blx	r3
}
     b8c:	b002      	add	sp, #8
     b8e:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
     b90:	4b10      	ldr	r3, [pc, #64]	; (bd4 <EEPROM_menu+0xa8>)
     b92:	4798      	blx	r3
				break;
     b94:	e7d1      	b.n	b3a <EEPROM_menu+0xe>
				EEPROM_write();
     b96:	4b10      	ldr	r3, [pc, #64]	; (bd8 <EEPROM_menu+0xac>)
     b98:	4798      	blx	r3
				break;
     b9a:	e7ce      	b.n	b3a <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
     b9c:	480f      	ldr	r0, [pc, #60]	; (bdc <EEPROM_menu+0xb0>)
     b9e:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <EEPROM_menu+0xa4>)
     ba0:	4798      	blx	r3
				break;
     ba2:	e7ca      	b.n	b3a <EEPROM_menu+0xe>
     ba4:	20000008 	.word	0x20000008
     ba8:	0000b6e4 	.word	0x0000b6e4
     bac:	00007d95 	.word	0x00007d95
     bb0:	0000b690 	.word	0x0000b690
     bb4:	00007ead 	.word	0x00007ead
     bb8:	0000b6e8 	.word	0x0000b6e8
     bbc:	200004b0 	.word	0x200004b0
     bc0:	000079ad 	.word	0x000079ad
     bc4:	e000ed00 	.word	0xe000ed00
     bc8:	05fa0004 	.word	0x05fa0004
     bcc:	0000b704 	.word	0x0000b704
     bd0:	00007e7d 	.word	0x00007e7d
     bd4:	00000a45 	.word	0x00000a45
     bd8:	00000a85 	.word	0x00000a85
     bdc:	0000b720 	.word	0x0000b720

00000be0 <FATFS_CALENDAR_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     be0:	4a02      	ldr	r2, [pc, #8]	; (bec <FATFS_CALENDAR_CLOCK_init+0xc>)
     be2:	6953      	ldr	r3, [r2, #20]
     be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     be8:	6153      	str	r3, [r2, #20]
     bea:	4770      	bx	lr
     bec:	40000800 	.word	0x40000800

00000bf0 <FATFS_CALENDAR_init>:

/**
  *	Initializes calendar for FATFS
  */ 
void FATFS_CALENDAR_init(void)
{
     bf0:	b508      	push	{r3, lr}
	FATFS_CALENDAR_CLOCK_init();
     bf2:	4b03      	ldr	r3, [pc, #12]	; (c00 <FATFS_CALENDAR_init+0x10>)
     bf4:	4798      	blx	r3
	calendar_init(&CALENDER_INTERFACE, RTC);
     bf6:	4903      	ldr	r1, [pc, #12]	; (c04 <FATFS_CALENDAR_init+0x14>)
     bf8:	4803      	ldr	r0, [pc, #12]	; (c08 <FATFS_CALENDAR_init+0x18>)
     bfa:	4b04      	ldr	r3, [pc, #16]	; (c0c <FATFS_CALENDAR_init+0x1c>)
     bfc:	4798      	blx	r3
     bfe:	bd08      	pop	{r3, pc}
     c00:	00000be1 	.word	0x00000be1
     c04:	40002400 	.word	0x40002400
     c08:	200016fc 	.word	0x200016fc
     c0c:	000027c1 	.word	0x000027c1

00000c10 <get_fattime>:
 *		[15:11]  Hour (0..23)
 *		[10:5]   Minute (0..59)
 *		[4:0]    Second (0..59)
 */
DWORD get_fattime(void)
{
     c10:	b500      	push	{lr}
     c12:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct calendar_date_time datetime;
	
	calendar_get_date_time(&CALENDER_INTERFACE, &datetime);
     c14:	4669      	mov	r1, sp
     c16:	480f      	ldr	r0, [pc, #60]	; (c54 <get_fattime+0x44>)
     c18:	4b0f      	ldr	r3, [pc, #60]	; (c58 <get_fattime+0x48>)
     c1a:	4798      	blx	r3

	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     c1c:	f89d 0005 	ldrb.w	r0, [sp, #5]
     c20:	f89d 3004 	ldrb.w	r3, [sp, #4]
     c24:	041b      	lsls	r3, r3, #16
			 | (datetime.time.hour << 11) | (datetime.time.min << 5) | (datetime.time.sec << 0);
     c26:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
     c2a:	f89d 0000 	ldrb.w	r0, [sp]
     c2e:	4303      	orrs	r3, r0
     c30:	f89d 0002 	ldrb.w	r0, [sp, #2]
     c34:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
     c38:	f89d 0001 	ldrb.w	r0, [sp, #1]
     c3c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     c40:	f8bd 0006 	ldrh.w	r0, [sp, #6]
     c44:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
	return ul_time;
}
     c48:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
     c4c:	b003      	add	sp, #12
     c4e:	f85d fb04 	ldr.w	pc, [sp], #4
     c52:	bf00      	nop
     c54:	200016fc 	.word	0x200016fc
     c58:	00002805 	.word	0x00002805

00000c5c <FATFS_sd_status>:

/**
  *	Get SD status (disk 0)
  */ 
void FATFS_sd_status(void)
{
     c5c:	b510      	push	{r4, lr}
	DSTATUS status;
	FRESULT result;
	
	status = disk_initialize(0);
     c5e:	2000      	movs	r0, #0
     c60:	4b0a      	ldr	r3, [pc, #40]	; (c8c <FATFS_sd_status+0x30>)
     c62:	4798      	blx	r3
	printf("\r\nInit result = %u\r\n", status);
     c64:	4601      	mov	r1, r0
     c66:	480a      	ldr	r0, [pc, #40]	; (c90 <FATFS_sd_status+0x34>)
     c68:	4c0a      	ldr	r4, [pc, #40]	; (c94 <FATFS_sd_status+0x38>)
     c6a:	47a0      	blx	r4
	
	result = f_mount(&fatfs, "", 0);
     c6c:	2200      	movs	r2, #0
     c6e:	490a      	ldr	r1, [pc, #40]	; (c98 <FATFS_sd_status+0x3c>)
     c70:	480a      	ldr	r0, [pc, #40]	; (c9c <FATFS_sd_status+0x40>)
     c72:	4b0b      	ldr	r3, [pc, #44]	; (ca0 <FATFS_sd_status+0x44>)
     c74:	4798      	blx	r3
	printf("Mount result = %u\r\n", result);
     c76:	4601      	mov	r1, r0
     c78:	480a      	ldr	r0, [pc, #40]	; (ca4 <FATFS_sd_status+0x48>)
     c7a:	47a0      	blx	r4
	
	status = disk_status(0);
     c7c:	2000      	movs	r0, #0
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <FATFS_sd_status+0x4c>)
     c80:	4798      	blx	r3
	printf("Disk status = %u\r\n", status);
     c82:	4601      	mov	r1, r0
     c84:	4809      	ldr	r0, [pc, #36]	; (cac <FATFS_sd_status+0x50>)
     c86:	47a0      	blx	r4
     c88:	bd10      	pop	{r4, pc}
     c8a:	bf00      	nop
     c8c:	000003b1 	.word	0x000003b1
     c90:	0000b734 	.word	0x0000b734
     c94:	00007d95 	.word	0x00007d95
     c98:	0000c460 	.word	0x0000c460
     c9c:	20000700 	.word	0x20000700
     ca0:	00001e35 	.word	0x00001e35
     ca4:	0000b74c 	.word	0x0000b74c
     ca8:	000003e9 	.word	0x000003e9
     cac:	0000b760 	.word	0x0000b760

00000cb0 <FATFS_write_file>:

/**
  *	Write file given data
  */ 
void FATFS_write_file(TCHAR* filename, char* data, uint32_t data_length)
{
     cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     cb4:	b082      	sub	sp, #8
     cb6:	4606      	mov	r6, r0
     cb8:	4688      	mov	r8, r1
     cba:	4617      	mov	r7, r2
	UINT bytes_written;
	FRESULT result;
	DSTATUS status;
	
	/* initialize SD card connection */
	status = disk_initialize(0);
     cbc:	2000      	movs	r0, #0
     cbe:	4b1c      	ldr	r3, [pc, #112]	; (d30 <FATFS_write_file+0x80>)
     cc0:	4798      	blx	r3
	printf("\r\nInit result = %u\r\n", status);
     cc2:	4601      	mov	r1, r0
     cc4:	481b      	ldr	r0, [pc, #108]	; (d34 <FATFS_write_file+0x84>)
     cc6:	4d1c      	ldr	r5, [pc, #112]	; (d38 <FATFS_write_file+0x88>)
     cc8:	47a8      	blx	r5
	
	/* mount SD card */
	result = f_mount(&fatfs, "", 0);
     cca:	4c1c      	ldr	r4, [pc, #112]	; (d3c <FATFS_write_file+0x8c>)
     ccc:	2200      	movs	r2, #0
     cce:	491c      	ldr	r1, [pc, #112]	; (d40 <FATFS_write_file+0x90>)
     cd0:	4620      	mov	r0, r4
     cd2:	4b1c      	ldr	r3, [pc, #112]	; (d44 <FATFS_write_file+0x94>)
     cd4:	4798      	blx	r3
	printf("Mount result = %u\r\n", result);
     cd6:	4601      	mov	r1, r0
     cd8:	481b      	ldr	r0, [pc, #108]	; (d48 <FATFS_write_file+0x98>)
     cda:	47a8      	blx	r5
	
	/* create file */
	result = f_open(&fptr, filename, FA_WRITE | FA_CREATE_ALWAYS);
     cdc:	220a      	movs	r2, #10
     cde:	4631      	mov	r1, r6
     ce0:	f504 700d 	add.w	r0, r4, #564	; 0x234
     ce4:	4b19      	ldr	r3, [pc, #100]	; (d4c <FATFS_write_file+0x9c>)
     ce6:	4798      	blx	r3
	
	if (result == FR_OK) {
     ce8:	b990      	cbnz	r0, d10 <FATFS_write_file+0x60>
		f_write(&fptr, data, data_length, &bytes_written);
     cea:	f504 740d 	add.w	r4, r4, #564	; 0x234
     cee:	ab01      	add	r3, sp, #4
     cf0:	463a      	mov	r2, r7
     cf2:	4641      	mov	r1, r8
     cf4:	4620      	mov	r0, r4
     cf6:	4d16      	ldr	r5, [pc, #88]	; (d50 <FATFS_write_file+0xa0>)
     cf8:	47a8      	blx	r5
		result = f_close(&fptr);
     cfa:	4620      	mov	r0, r4
     cfc:	4b15      	ldr	r3, [pc, #84]	; (d54 <FATFS_write_file+0xa4>)
     cfe:	4798      	blx	r3
		if (result == FR_OK && bytes_written == data_length)
     d00:	b950      	cbnz	r0, d18 <FATFS_write_file+0x68>
     d02:	9b01      	ldr	r3, [sp, #4]
     d04:	429f      	cmp	r7, r3
     d06:	d107      	bne.n	d18 <FATFS_write_file+0x68>
			printf("SUCCESS!\r\n");
     d08:	4813      	ldr	r0, [pc, #76]	; (d58 <FATFS_write_file+0xa8>)
     d0a:	4b14      	ldr	r3, [pc, #80]	; (d5c <FATFS_write_file+0xac>)
     d0c:	4798      	blx	r3
     d0e:	e003      	b.n	d18 <FATFS_write_file+0x68>
     d10:	4601      	mov	r1, r0
	} else {
		printf("Failed to make file. file_result = %u\r\n", result);
     d12:	4813      	ldr	r0, [pc, #76]	; (d60 <FATFS_write_file+0xb0>)
     d14:	4b08      	ldr	r3, [pc, #32]	; (d38 <FATFS_write_file+0x88>)
     d16:	4798      	blx	r3
	}
	
	/* close file */
	fresult = f_close(&fptr);
     d18:	4812      	ldr	r0, [pc, #72]	; (d64 <FATFS_write_file+0xb4>)
     d1a:	4b0e      	ldr	r3, [pc, #56]	; (d54 <FATFS_write_file+0xa4>)
     d1c:	4798      	blx	r3
	
	/* unmount SD */
	f_mount(0, "", 0);
     d1e:	2200      	movs	r2, #0
     d20:	4907      	ldr	r1, [pc, #28]	; (d40 <FATFS_write_file+0x90>)
     d22:	4610      	mov	r0, r2
     d24:	4b07      	ldr	r3, [pc, #28]	; (d44 <FATFS_write_file+0x94>)
     d26:	4798      	blx	r3
}
     d28:	b002      	add	sp, #8
     d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d2e:	bf00      	nop
     d30:	000003b1 	.word	0x000003b1
     d34:	0000b734 	.word	0x0000b734
     d38:	00007d95 	.word	0x00007d95
     d3c:	20000700 	.word	0x20000700
     d40:	0000c460 	.word	0x0000c460
     d44:	00001e35 	.word	0x00001e35
     d48:	0000b74c 	.word	0x0000b74c
     d4c:	00001ea1 	.word	0x00001ea1
     d50:	000021b9 	.word	0x000021b9
     d54:	00002429 	.word	0x00002429
     d58:	0000b774 	.word	0x0000b774
     d5c:	00007e7d 	.word	0x00007e7d
     d60:	0000b780 	.word	0x0000b780
     d64:	20000934 	.word	0x20000934

00000d68 <FATFS_fresult_desc>:
/**
  *	Return string based on file result
  */
char* FATFS_fresult_desc(FRESULT res)
{
	switch (res) {
     d68:	3801      	subs	r0, #1
     d6a:	2812      	cmp	r0, #18
     d6c:	d82f      	bhi.n	dce <FATFS_fresult_desc+0x66>
     d6e:	e8df f000 	tbb	[pc, r0]
     d72:	0a30      	.short	0x0a30
     d74:	12100e0c 	.word	0x12100e0c
     d78:	1a181614 	.word	0x1a181614
     d7c:	22201e1c 	.word	0x22201e1c
     d80:	2a282624 	.word	0x2a282624
     d84:	2c          	.byte	0x2c
     d85:	00          	.byte	0x00
		case FR_DISK_ERR:			 return "Hard error occurred in the low level disk I/O layer";
		case FR_INT_ERR:			 return "Assertion failed";
     d86:	4814      	ldr	r0, [pc, #80]	; (dd8 <FATFS_fresult_desc+0x70>)
     d88:	4770      	bx	lr
		case FR_NOT_READY:			 return "Physical drive cannot work";
     d8a:	4814      	ldr	r0, [pc, #80]	; (ddc <FATFS_fresult_desc+0x74>)
     d8c:	4770      	bx	lr
		case FR_NO_FILE:			 return "Could not find file";
     d8e:	4814      	ldr	r0, [pc, #80]	; (de0 <FATFS_fresult_desc+0x78>)
     d90:	4770      	bx	lr
		case FR_NO_PATH:			 return "Could not find path";
     d92:	4814      	ldr	r0, [pc, #80]	; (de4 <FATFS_fresult_desc+0x7c>)
     d94:	4770      	bx	lr
		case FR_INVALID_NAME:		 return "Path name format invalid";
     d96:	4814      	ldr	r0, [pc, #80]	; (de8 <FATFS_fresult_desc+0x80>)
     d98:	4770      	bx	lr
		case FR_DENIED:				 return "Access denied due to prohibited access or directory full";
     d9a:	4814      	ldr	r0, [pc, #80]	; (dec <FATFS_fresult_desc+0x84>)
     d9c:	4770      	bx	lr
		case FR_EXIST:				 return "Access denied due to prohibited access";
     d9e:	4814      	ldr	r0, [pc, #80]	; (df0 <FATFS_fresult_desc+0x88>)
     da0:	4770      	bx	lr
		case FR_INVALID_OBJECT:		 return "The file/directory object is invalid";
     da2:	4814      	ldr	r0, [pc, #80]	; (df4 <FATFS_fresult_desc+0x8c>)
     da4:	4770      	bx	lr
		case FR_WRITE_PROTECTED:	 return "The physical drive is write protected";
     da6:	4814      	ldr	r0, [pc, #80]	; (df8 <FATFS_fresult_desc+0x90>)
     da8:	4770      	bx	lr
		case FR_INVALID_DRIVE:		 return "The logical drive number is invalid";
     daa:	4814      	ldr	r0, [pc, #80]	; (dfc <FATFS_fresult_desc+0x94>)
     dac:	4770      	bx	lr
		case FR_NOT_ENABLED:		 return "The volume has no work area";
     dae:	4814      	ldr	r0, [pc, #80]	; (e00 <FATFS_fresult_desc+0x98>)
     db0:	4770      	bx	lr
		case FR_NO_FILESYSTEM:		 return "There is no valid FAT volume";
     db2:	4814      	ldr	r0, [pc, #80]	; (e04 <FATFS_fresult_desc+0x9c>)
     db4:	4770      	bx	lr
		case FR_MKFS_ABORTED:		 return "The f_mkfs() aborted due to any parameter error";
     db6:	4814      	ldr	r0, [pc, #80]	; (e08 <FATFS_fresult_desc+0xa0>)
     db8:	4770      	bx	lr
		case FR_TIMEOUT:			 return "Could not get a grant to access the volume within defined period";
     dba:	4814      	ldr	r0, [pc, #80]	; (e0c <FATFS_fresult_desc+0xa4>)
     dbc:	4770      	bx	lr
		case FR_LOCKED:				 return "The operation is rejected according to the file sharing policy";
     dbe:	4814      	ldr	r0, [pc, #80]	; (e10 <FATFS_fresult_desc+0xa8>)
     dc0:	4770      	bx	lr
		case FR_NOT_ENOUGH_CORE:	 return "LFN working buffer could not be allocated";
     dc2:	4814      	ldr	r0, [pc, #80]	; (e14 <FATFS_fresult_desc+0xac>)
     dc4:	4770      	bx	lr
		case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_LOCK";
     dc6:	4814      	ldr	r0, [pc, #80]	; (e18 <FATFS_fresult_desc+0xb0>)
     dc8:	4770      	bx	lr
		case FR_INVALID_PARAMETER:	 return "Given parameter is invalid";
     dca:	4814      	ldr	r0, [pc, #80]	; (e1c <FATFS_fresult_desc+0xb4>)
     dcc:	4770      	bx	lr
		default:					 return "Success";
     dce:	4814      	ldr	r0, [pc, #80]	; (e20 <FATFS_fresult_desc+0xb8>)
     dd0:	4770      	bx	lr
		case FR_DISK_ERR:			 return "Hard error occurred in the low level disk I/O layer";
     dd2:	4814      	ldr	r0, [pc, #80]	; (e24 <FATFS_fresult_desc+0xbc>)
	}
	return 0;
}
     dd4:	4770      	bx	lr
     dd6:	bf00      	nop
     dd8:	0000b7dc 	.word	0x0000b7dc
     ddc:	0000b7f0 	.word	0x0000b7f0
     de0:	0000b80c 	.word	0x0000b80c
     de4:	0000b820 	.word	0x0000b820
     de8:	0000b834 	.word	0x0000b834
     dec:	0000b850 	.word	0x0000b850
     df0:	0000b88c 	.word	0x0000b88c
     df4:	0000b8b4 	.word	0x0000b8b4
     df8:	0000b8dc 	.word	0x0000b8dc
     dfc:	0000b904 	.word	0x0000b904
     e00:	0000b928 	.word	0x0000b928
     e04:	0000b944 	.word	0x0000b944
     e08:	0000b964 	.word	0x0000b964
     e0c:	0000b994 	.word	0x0000b994
     e10:	0000b9d8 	.word	0x0000b9d8
     e14:	0000ba18 	.word	0x0000ba18
     e18:	0000ba44 	.word	0x0000ba44
     e1c:	0000ba64 	.word	0x0000ba64
     e20:	0000ba80 	.word	0x0000ba80
     e24:	0000b7a8 	.word	0x0000b7a8

00000e28 <FATFS_dstatus_desc>:
/**
  *	Return string based on disk status
  */
char* FATFS_dstatus_desc(DSTATUS status)
{
	switch (status) {
     e28:	2802      	cmp	r0, #2
     e2a:	d006      	beq.n	e3a <FATFS_dstatus_desc+0x12>
     e2c:	2804      	cmp	r0, #4
     e2e:	d006      	beq.n	e3e <FATFS_dstatus_desc+0x16>
     e30:	2801      	cmp	r0, #1
		case STA_NOINIT:  return "Disk not initialized";
		case STA_NODISK:  return "No medium in the drive";
		case STA_PROTECT: return "Disk write protected";
	}
	return 0;
     e32:	4804      	ldr	r0, [pc, #16]	; (e44 <FATFS_dstatus_desc+0x1c>)
     e34:	bf18      	it	ne
     e36:	2000      	movne	r0, #0
     e38:	4770      	bx	lr
		case STA_NODISK:  return "No medium in the drive";
     e3a:	4803      	ldr	r0, [pc, #12]	; (e48 <FATFS_dstatus_desc+0x20>)
     e3c:	4770      	bx	lr
		case STA_PROTECT: return "Disk write protected";
     e3e:	4803      	ldr	r0, [pc, #12]	; (e4c <FATFS_dstatus_desc+0x24>)
}
     e40:	4770      	bx	lr
     e42:	bf00      	nop
     e44:	0000bafc 	.word	0x0000bafc
     e48:	0000bb14 	.word	0x0000bb14
     e4c:	0000bb2c 	.word	0x0000bb2c

00000e50 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     e50:	b13a      	cbz	r2, e62 <mem_cpy+0x12>
     e52:	3801      	subs	r0, #1
     e54:	188a      	adds	r2, r1, r2
		*d++ = *s++;
     e56:	f811 3b01 	ldrb.w	r3, [r1], #1
     e5a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
     e5e:	4291      	cmp	r1, r2
     e60:	d1f9      	bne.n	e56 <mem_cpy+0x6>
     e62:	4770      	bx	lr

00000e64 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     e64:	b122      	cbz	r2, e70 <mem_set+0xc>
     e66:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
     e68:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
     e6c:	4282      	cmp	r2, r0
     e6e:	d1fb      	bne.n	e68 <mem_set+0x4>
     e70:	4770      	bx	lr

00000e72 <ld_clust>:
	const BYTE* dir	/* Pointer to the SFN entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
     e72:	7eca      	ldrb	r2, [r1, #27]
     e74:	7e8b      	ldrb	r3, [r1, #26]
     e76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
     e7a:	7802      	ldrb	r2, [r0, #0]
     e7c:	2a03      	cmp	r2, #3
     e7e:	d001      	beq.n	e84 <ld_clust+0x12>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
     e80:	4618      	mov	r0, r3
     e82:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
     e84:	7d48      	ldrb	r0, [r1, #21]
     e86:	7d0a      	ldrb	r2, [r1, #20]
     e88:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
     e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
     e90:	e7f6      	b.n	e80 <ld_clust+0xe>

00000e92 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
     e92:	b470      	push	{r4, r5, r6}
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
     e94:	f101 0409 	add.w	r4, r1, #9
	if (dp->sect) {		/* Get SFN */
     e98:	6903      	ldr	r3, [r0, #16]
     e9a:	b363      	cbz	r3, ef6 <get_fileinfo+0x64>
		dir = dp->dir;
     e9c:	6945      	ldr	r5, [r0, #20]
     e9e:	1e68      	subs	r0, r5, #1
		i = 0;
     ea0:	2200      	movs	r2, #0
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     ea2:	262e      	movs	r6, #46	; 0x2e
     ea4:	e001      	b.n	eaa <get_fileinfo+0x18>
		while (i < 11) {		/* Copy name body and extension */
     ea6:	2a0b      	cmp	r2, #11
     ea8:	d00e      	beq.n	ec8 <get_fileinfo+0x36>
			c = (TCHAR)dir[i++];
     eaa:	3201      	adds	r2, #1
     eac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
     eb0:	2b20      	cmp	r3, #32
     eb2:	d0f8      	beq.n	ea6 <get_fileinfo+0x14>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
     eb4:	2b05      	cmp	r3, #5
     eb6:	bf08      	it	eq
     eb8:	23e5      	moveq	r3, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     eba:	2a09      	cmp	r2, #9
     ebc:	bf04      	itt	eq
     ebe:	7026      	strbeq	r6, [r4, #0]
     ec0:	3401      	addeq	r4, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
     ec2:	7023      	strb	r3, [r4, #0]
     ec4:	3401      	adds	r4, #1
     ec6:	e7ee      	b.n	ea6 <get_fileinfo+0x14>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     ec8:	7aeb      	ldrb	r3, [r5, #11]
     eca:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
     ecc:	7fea      	ldrb	r2, [r5, #31]
     ece:	7fab      	ldrb	r3, [r5, #30]
     ed0:	041b      	lsls	r3, r3, #16
     ed2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
     ed6:	7f2a      	ldrb	r2, [r5, #28]
     ed8:	4313      	orrs	r3, r2
     eda:	7f6a      	ldrb	r2, [r5, #29]
     edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     ee0:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
     ee2:	7e6a      	ldrb	r2, [r5, #25]
     ee4:	7e2b      	ldrb	r3, [r5, #24]
     ee6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     eea:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
     eec:	7dea      	ldrb	r2, [r5, #23]
     eee:	7dab      	ldrb	r3, [r5, #22]
     ef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     ef4:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
     ef6:	2300      	movs	r3, #0
     ef8:	7023      	strb	r3, [r4, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
     efa:	bc70      	pop	{r4, r5, r6}
     efc:	4770      	bx	lr

00000efe <get_ldnumber>:
	const char *sp;
	char c;
	TCHAR tc;
#endif

	if (*path) {	/* If the pointer is not a null */
     efe:	6801      	ldr	r1, [r0, #0]
     f00:	b1e9      	cbz	r1, f3e <get_ldnumber+0x40>
{
     f02:	b410      	push	{r4}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     f04:	780c      	ldrb	r4, [r1, #0]
     f06:	2c20      	cmp	r4, #32
     f08:	d911      	bls.n	f2e <get_ldnumber+0x30>
     f0a:	2c3a      	cmp	r4, #58	; 0x3a
     f0c:	d020      	beq.n	f50 <get_ldnumber+0x52>
     f0e:	460a      	mov	r2, r1
     f10:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     f14:	2b20      	cmp	r3, #32
     f16:	d90c      	bls.n	f32 <get_ldnumber+0x34>
     f18:	2b3a      	cmp	r3, #58	; 0x3a
     f1a:	d1f9      	bne.n	f10 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     f1c:	1c4b      	adds	r3, r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     f1e:	429a      	cmp	r2, r3
     f20:	d110      	bne.n	f44 <get_ldnumber+0x46>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     f22:	2c30      	cmp	r4, #48	; 0x30
     f24:	d111      	bne.n	f4a <get_ldnumber+0x4c>
					vol = (int)i;
					*path = ++tt;
     f26:	3102      	adds	r1, #2
     f28:	6001      	str	r1, [r0, #0]
					vol = (int)i;
     f2a:	2000      	movs	r0, #0
     f2c:	e005      	b.n	f3a <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     f2e:	4623      	mov	r3, r4
     f30:	460a      	mov	r2, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     f32:	2b3a      	cmp	r3, #58	; 0x3a
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     f34:	bf18      	it	ne
     f36:	2000      	movne	r0, #0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     f38:	d0f0      	beq.n	f1c <get_ldnumber+0x1e>
#endif
	}
	return vol;
}
     f3a:	bc10      	pop	{r4}
     f3c:	4770      	bx	lr
	int vol = -1;
     f3e:	f04f 30ff 	mov.w	r0, #4294967295
     f42:	4770      	bx	lr
     f44:	f04f 30ff 	mov.w	r0, #4294967295
     f48:	e7f7      	b.n	f3a <get_ldnumber+0x3c>
     f4a:	f04f 30ff 	mov.w	r0, #4294967295
     f4e:	e7f4      	b.n	f3a <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     f50:	460a      	mov	r2, r1
     f52:	e7e3      	b.n	f1c <get_ldnumber+0x1e>

00000f54 <sync_window>:
{
     f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
     f58:	7903      	ldrb	r3, [r0, #4]
     f5a:	b913      	cbnz	r3, f62 <sync_window+0xe>
	FRESULT res = FR_OK;
     f5c:	2000      	movs	r0, #0
     f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f62:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
     f64:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
     f66:	f100 0734 	add.w	r7, r0, #52	; 0x34
     f6a:	2301      	movs	r3, #1
     f6c:	462a      	mov	r2, r5
     f6e:	4639      	mov	r1, r7
     f70:	7840      	ldrb	r0, [r0, #1]
     f72:	4e13      	ldr	r6, [pc, #76]	; (fc0 <sync_window+0x6c>)
     f74:	47b0      	blx	r6
     f76:	b9d0      	cbnz	r0, fae <sync_window+0x5a>
			fs->wflag = 0;
     f78:	2300      	movs	r3, #0
     f7a:	7123      	strb	r3, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     f7e:	1aeb      	subs	r3, r5, r3
     f80:	69e2      	ldr	r2, [r4, #28]
     f82:	4293      	cmp	r3, r2
     f84:	d216      	bcs.n	fb4 <sync_window+0x60>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     f86:	78e6      	ldrb	r6, [r4, #3]
     f88:	2e01      	cmp	r6, #1
     f8a:	d916      	bls.n	fba <sync_window+0x66>
					disk_write(fs->drv, fs->win, wsect, 1);
     f8c:	f04f 0901 	mov.w	r9, #1
     f90:	f8df 802c 	ldr.w	r8, [pc, #44]	; fc0 <sync_window+0x6c>
					wsect += fs->fsize;
     f94:	69e3      	ldr	r3, [r4, #28]
     f96:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
     f98:	464b      	mov	r3, r9
     f9a:	462a      	mov	r2, r5
     f9c:	4639      	mov	r1, r7
     f9e:	7860      	ldrb	r0, [r4, #1]
     fa0:	47c0      	blx	r8
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     fa2:	3e01      	subs	r6, #1
     fa4:	2e01      	cmp	r6, #1
     fa6:	d1f5      	bne.n	f94 <sync_window+0x40>
	FRESULT res = FR_OK;
     fa8:	2000      	movs	r0, #0
     faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = FR_DISK_ERR;
     fae:	2001      	movs	r0, #1
     fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FRESULT res = FR_OK;
     fb4:	2000      	movs	r0, #0
     fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fba:	2000      	movs	r0, #0
}
     fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fc0:	00000485 	.word	0x00000485

00000fc4 <move_window>:
{
     fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
     fc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fc8:	428b      	cmp	r3, r1
     fca:	d015      	beq.n	ff8 <move_window+0x34>
     fcc:	4604      	mov	r4, r0
     fce:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
     fd0:	4b0a      	ldr	r3, [pc, #40]	; (ffc <move_window+0x38>)
     fd2:	4798      	blx	r3
		if (res == FR_OK) {			/* Fill sector window with new data */
     fd4:	4606      	mov	r6, r0
     fd6:	b108      	cbz	r0, fdc <move_window+0x18>
}
     fd8:	4630      	mov	r0, r6
     fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
     fdc:	2301      	movs	r3, #1
     fde:	462a      	mov	r2, r5
     fe0:	f104 0134 	add.w	r1, r4, #52	; 0x34
     fe4:	7860      	ldrb	r0, [r4, #1]
     fe6:	4f06      	ldr	r7, [pc, #24]	; (1000 <move_window+0x3c>)
     fe8:	47b8      	blx	r7
     fea:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
     fec:	bf1c      	itt	ne
     fee:	2601      	movne	r6, #1
     ff0:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
     ff4:	6325      	str	r5, [r4, #48]	; 0x30
     ff6:	e7ef      	b.n	fd8 <move_window+0x14>
	FRESULT res = FR_OK;
     ff8:	2600      	movs	r6, #0
     ffa:	e7ed      	b.n	fd8 <move_window+0x14>
     ffc:	00000f55 	.word	0x00000f55
    1000:	00000405 	.word	0x00000405

00001004 <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1004:	b510      	push	{r4, lr}
    1006:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
    1008:	2300      	movs	r3, #0
    100a:	7103      	strb	r3, [r0, #4]
    100c:	f04f 33ff 	mov.w	r3, #4294967295
    1010:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
    1012:	4b1d      	ldr	r3, [pc, #116]	; (1088 <check_fs+0x84>)
    1014:	4798      	blx	r3
    1016:	b108      	cbz	r0, 101c <check_fs+0x18>
		return 3;
    1018:	2003      	movs	r0, #3
    101a:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    101c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    1020:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    1024:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1028:	b21b      	sxth	r3, r3
    102a:	4a18      	ldr	r2, [pc, #96]	; (108c <check_fs+0x88>)
    102c:	4293      	cmp	r3, r2
    102e:	d001      	beq.n	1034 <check_fs+0x30>
		return 2;
    1030:	2002      	movs	r0, #2
    1032:	bd10      	pop	{r4, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
    1034:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
    1038:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    103c:	041b      	lsls	r3, r3, #16
    103e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1042:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
    1046:	4313      	orrs	r3, r2
    1048:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    104c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1050:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1054:	4a0e      	ldr	r2, [pc, #56]	; (1090 <check_fs+0x8c>)
    1056:	4293      	cmp	r3, r2
    1058:	d013      	beq.n	1082 <check_fs+0x7e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    105a:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
    105e:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    1062:	0400      	lsls	r0, r0, #16
    1064:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    1068:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
    106c:	4318      	orrs	r0, r3
    106e:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    1072:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1076:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
    107a:	1a80      	subs	r0, r0, r2
    107c:	bf18      	it	ne
    107e:	2001      	movne	r0, #1
    1080:	bd10      	pop	{r4, pc}
		return 0;
    1082:	2000      	movs	r0, #0
		return 0;

	return 1;
}
    1084:	bd10      	pop	{r4, pc}
    1086:	bf00      	nop
    1088:	00000fc5 	.word	0x00000fc5
    108c:	ffffaa55 	.word	0xffffaa55
    1090:	00544146 	.word	0x00544146

00001094 <validate>:
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */

	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    1094:	b1b0      	cbz	r0, 10c4 <validate+0x30>
{
    1096:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    1098:	6803      	ldr	r3, [r0, #0]
    109a:	b1ab      	cbz	r3, 10c8 <validate+0x34>
    109c:	7819      	ldrb	r1, [r3, #0]
    109e:	b909      	cbnz	r1, 10a4 <validate+0x10>
		return FR_INVALID_OBJECT;
    10a0:	2009      	movs	r0, #9
    10a2:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    10a4:	88d9      	ldrh	r1, [r3, #6]
    10a6:	8882      	ldrh	r2, [r0, #4]
    10a8:	4291      	cmp	r1, r2
    10aa:	d001      	beq.n	10b0 <validate+0x1c>
		return FR_INVALID_OBJECT;
    10ac:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
    10ae:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    10b0:	7858      	ldrb	r0, [r3, #1]
    10b2:	4b06      	ldr	r3, [pc, #24]	; (10cc <validate+0x38>)
    10b4:	4798      	blx	r3
    10b6:	f000 0001 	and.w	r0, r0, #1
		return FR_INVALID_OBJECT;
    10ba:	2800      	cmp	r0, #0
    10bc:	bf0c      	ite	eq
    10be:	2000      	moveq	r0, #0
    10c0:	2009      	movne	r0, #9
    10c2:	bd08      	pop	{r3, pc}
    10c4:	2009      	movs	r0, #9
    10c6:	4770      	bx	lr
    10c8:	2009      	movs	r0, #9
    10ca:	bd08      	pop	{r3, pc}
    10cc:	000003e9 	.word	0x000003e9

000010d0 <find_volume>:
{
    10d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10d4:	b085      	sub	sp, #20
    10d6:	4606      	mov	r6, r0
    10d8:	4617      	mov	r7, r2
	*rfs = 0;
    10da:	2300      	movs	r3, #0
    10dc:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
    10de:	4608      	mov	r0, r1
    10e0:	4b9b      	ldr	r3, [pc, #620]	; (1350 <find_volume+0x280>)
    10e2:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    10e4:	1e05      	subs	r5, r0, #0
    10e6:	f2c0 81a2 	blt.w	142e <find_volume+0x35e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
    10ea:	4b9a      	ldr	r3, [pc, #616]	; (1354 <find_volume+0x284>)
    10ec:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    10f0:	2c00      	cmp	r4, #0
    10f2:	f000 81a0 	beq.w	1436 <find_volume+0x366>
	*rfs = fs;							/* Return pointer to the file system object */
    10f6:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
    10f8:	7823      	ldrb	r3, [r4, #0]
    10fa:	b17b      	cbz	r3, 111c <find_volume+0x4c>
		stat = disk_status(fs->drv);
    10fc:	7860      	ldrb	r0, [r4, #1]
    10fe:	4b96      	ldr	r3, [pc, #600]	; (1358 <find_volume+0x288>)
    1100:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    1102:	f010 0f01 	tst.w	r0, #1
    1106:	d109      	bne.n	111c <find_volume+0x4c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    1108:	2f00      	cmp	r7, #0
    110a:	f000 8196 	beq.w	143a <find_volume+0x36a>
    110e:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
    1112:	2800      	cmp	r0, #0
    1114:	bf0c      	ite	eq
    1116:	2000      	moveq	r0, #0
    1118:	200a      	movne	r0, #10
    111a:	e189      	b.n	1430 <find_volume+0x360>
	fs->fs_type = 0;					/* Clear the file system object */
    111c:	2300      	movs	r3, #0
    111e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1120:	b2e8      	uxtb	r0, r5
    1122:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    1124:	4b8d      	ldr	r3, [pc, #564]	; (135c <find_volume+0x28c>)
    1126:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    1128:	f010 0f01 	tst.w	r0, #1
    112c:	d001      	beq.n	1132 <find_volume+0x62>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    112e:	2003      	movs	r0, #3
    1130:	e17e      	b.n	1430 <find_volume+0x360>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1132:	b127      	cbz	r7, 113e <find_volume+0x6e>
    1134:	f010 0f04 	tst.w	r0, #4
    1138:	d001      	beq.n	113e <find_volume+0x6e>
		return FR_WRITE_PROTECTED;
    113a:	200a      	movs	r0, #10
    113c:	e178      	b.n	1430 <find_volume+0x360>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
    113e:	2100      	movs	r1, #0
    1140:	4620      	mov	r0, r4
    1142:	4b87      	ldr	r3, [pc, #540]	; (1360 <find_volume+0x290>)
    1144:	4798      	blx	r3
    1146:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    1148:	2801      	cmp	r0, #1
    114a:	d006      	beq.n	115a <find_volume+0x8a>
	bsect = 0;
    114c:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    114e:	2b03      	cmp	r3, #3
    1150:	f000 8175 	beq.w	143e <find_volume+0x36e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1154:	b3a3      	cbz	r3, 11c0 <find_volume+0xf0>
    1156:	200d      	movs	r0, #13
    1158:	e16a      	b.n	1430 <find_volume+0x360>
    115a:	4623      	mov	r3, r4
    115c:	466d      	mov	r5, sp
    115e:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    1162:	4669      	mov	r1, sp
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    1164:	2700      	movs	r7, #0
    1166:	e005      	b.n	1174 <find_volume+0xa4>
    1168:	463a      	mov	r2, r7
    116a:	f841 2b04 	str.w	r2, [r1], #4
    116e:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    1170:	4283      	cmp	r3, r0
    1172:	d012      	beq.n	119a <find_volume+0xca>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    1174:	f893 21f6 	ldrb.w	r2, [r3, #502]	; 0x1f6
    1178:	2a00      	cmp	r2, #0
    117a:	d0f5      	beq.n	1168 <find_volume+0x98>
    117c:	f893 61fd 	ldrb.w	r6, [r3, #509]	; 0x1fd
    1180:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
    1184:	0412      	lsls	r2, r2, #16
    1186:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
    118a:	f893 61fa 	ldrb.w	r6, [r3, #506]	; 0x1fa
    118e:	4332      	orrs	r2, r6
    1190:	f893 61fb 	ldrb.w	r6, [r3, #507]	; 0x1fb
    1194:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    1198:	e7e7      	b.n	116a <find_volume+0x9a>
    119a:	af04      	add	r7, sp, #16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    119c:	f04f 0802 	mov.w	r8, #2
    11a0:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 1360 <find_volume+0x290>
    11a4:	e006      	b.n	11b4 <find_volume+0xe4>
    11a6:	4631      	mov	r1, r6
    11a8:	4620      	mov	r0, r4
    11aa:	47c8      	blx	r9
		} while (!LD2PT(vol) && fmt && ++i < 4);
    11ac:	4603      	mov	r3, r0
    11ae:	b138      	cbz	r0, 11c0 <find_volume+0xf0>
    11b0:	42af      	cmp	r7, r5
    11b2:	d0cc      	beq.n	114e <find_volume+0x7e>
			bsect = br[i];
    11b4:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    11b8:	2e00      	cmp	r6, #0
    11ba:	d1f4      	bne.n	11a6 <find_volume+0xd6>
    11bc:	4643      	mov	r3, r8
    11be:	e7f7      	b.n	11b0 <find_volume+0xe0>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    11c0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    11c4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    11c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    11cc:	b21b      	sxth	r3, r3
    11ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    11d2:	d001      	beq.n	11d8 <find_volume+0x108>
		return FR_NO_FILESYSTEM;
    11d4:	200d      	movs	r0, #13
    11d6:	e12b      	b.n	1430 <find_volume+0x360>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    11d8:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    11dc:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    11e0:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
    11e4:	d10d      	bne.n	1202 <find_volume+0x132>
    11e6:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    11ea:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    11ee:	0412      	lsls	r2, r2, #16
    11f0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    11f4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    11f8:	431a      	orrs	r2, r3
    11fa:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    11fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
    1202:	61e2      	str	r2, [r4, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    1204:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    1208:	70e1      	strb	r1, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    120a:	1e4b      	subs	r3, r1, #1
    120c:	b2db      	uxtb	r3, r3
    120e:	2b01      	cmp	r3, #1
    1210:	d901      	bls.n	1216 <find_volume+0x146>
		return FR_NO_FILESYSTEM;
    1212:	200d      	movs	r0, #13
    1214:	e10c      	b.n	1430 <find_volume+0x360>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    1216:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
    121a:	70a7      	strb	r7, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    121c:	b90f      	cbnz	r7, 1222 <find_volume+0x152>
		return FR_NO_FILESYSTEM;
    121e:	200d      	movs	r0, #13
    1220:	e106      	b.n	1430 <find_volume+0x360>
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    1222:	1e7b      	subs	r3, r7, #1
    1224:	423b      	tst	r3, r7
    1226:	d001      	beq.n	122c <find_volume+0x15c>
		return FR_NO_FILESYSTEM;
    1228:	200d      	movs	r0, #13
    122a:	e101      	b.n	1430 <find_volume+0x360>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    122c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    1230:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    1234:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1238:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    123a:	f010 0f0f 	tst.w	r0, #15
    123e:	f040 8100 	bne.w	1442 <find_volume+0x372>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    1242:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
    1246:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    124a:	ea53 2305 	orrs.w	r3, r3, r5, lsl #8
    124e:	d10d      	bne.n	126c <find_volume+0x19c>
    1250:	f894 5057 	ldrb.w	r5, [r4, #87]	; 0x57
    1254:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    1258:	041b      	lsls	r3, r3, #16
    125a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    125e:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
    1262:	432b      	orrs	r3, r5
    1264:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
    1268:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    126c:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
    1270:	f894 5042 	ldrb.w	r5, [r4, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    1274:	ea55 250e 	orrs.w	r5, r5, lr, lsl #8
    1278:	f000 80e5 	beq.w	1446 <find_volume+0x376>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    127c:	fb02 fc01 	mul.w	ip, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    1280:	eb05 1110 	add.w	r1, r5, r0, lsr #4
    1284:	eb01 0e0c 	add.w	lr, r1, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1288:	4573      	cmp	r3, lr
    128a:	f0c0 80de 	bcc.w	144a <find_volume+0x37a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    128e:	eba3 030e 	sub.w	r3, r3, lr
    1292:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1296:	2b00      	cmp	r3, #0
    1298:	f000 80d9 	beq.w	144e <find_volume+0x37e>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    129c:	f640 71f5 	movw	r1, #4085	; 0xff5
    12a0:	428b      	cmp	r3, r1
    12a2:	bf94      	ite	ls
    12a4:	2101      	movls	r1, #1
    12a6:	2102      	movhi	r1, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    12a8:	f64f 77f5 	movw	r7, #65525	; 0xfff5
    12ac:	42bb      	cmp	r3, r7
    12ae:	f200 80d8 	bhi.w	1462 <find_volume+0x392>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    12b2:	3302      	adds	r3, #2
    12b4:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    12b6:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    12b8:	4435      	add	r5, r6
    12ba:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    12bc:	eb0e 0706 	add.w	r7, lr, r6
    12c0:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (fmt == FS_FAT32) {
    12c2:	2903      	cmp	r1, #3
    12c4:	d129      	bne.n	131a <find_volume+0x24a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    12c6:	2800      	cmp	r0, #0
    12c8:	f040 80c3 	bne.w	1452 <find_volume+0x382>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    12cc:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    12d0:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    12d4:	0409      	lsls	r1, r1, #16
    12d6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    12da:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    12de:	4301      	orrs	r1, r0
    12e0:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    12e4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    12e8:	62a1      	str	r1, [r4, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    12ea:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    12ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    12f0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    12f4:	f0c0 80af 	bcc.w	1456 <find_volume+0x386>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    12f8:	f04f 33ff 	mov.w	r3, #4294967295
    12fc:	6123      	str	r3, [r4, #16]
    12fe:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
    1300:	2380      	movs	r3, #128	; 0x80
    1302:	7163      	strb	r3, [r4, #5]
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    1304:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    1308:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    130c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1310:	b21b      	sxth	r3, r3
    1312:	2b01      	cmp	r3, #1
    1314:	d026      	beq.n	1364 <find_volume+0x294>
    1316:	2103      	movs	r1, #3
    1318:	e077      	b.n	140a <find_volume+0x33a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    131a:	2800      	cmp	r0, #0
    131c:	f000 809d 	beq.w	145a <find_volume+0x38a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1320:	4465      	add	r5, ip
    1322:	62a5      	str	r5, [r4, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1324:	2902      	cmp	r1, #2
    1326:	bf0f      	iteee	eq
    1328:	005b      	lsleq	r3, r3, #1
    132a:	eb03 0043 	addne.w	r0, r3, r3, lsl #1
    132e:	f003 0301 	andne.w	r3, r3, #1
    1332:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    1336:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    133a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    133e:	f0c0 808e 	bcc.w	145e <find_volume+0x38e>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    1342:	f04f 33ff 	mov.w	r3, #4294967295
    1346:	6123      	str	r3, [r4, #16]
    1348:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
    134a:	2380      	movs	r3, #128	; 0x80
    134c:	7163      	strb	r3, [r4, #5]
    134e:	e05c      	b.n	140a <find_volume+0x33a>
    1350:	00000eff 	.word	0x00000eff
    1354:	20000990 	.word	0x20000990
    1358:	000003e9 	.word	0x000003e9
    135c:	000003b1 	.word	0x000003b1
    1360:	00001005 	.word	0x00001005
		&& move_window(fs, bsect + 1) == FR_OK)
    1364:	1c71      	adds	r1, r6, #1
    1366:	4620      	mov	r0, r4
    1368:	4b42      	ldr	r3, [pc, #264]	; (1474 <find_volume+0x3a4>)
    136a:	4798      	blx	r3
    136c:	2800      	cmp	r0, #0
    136e:	d156      	bne.n	141e <find_volume+0x34e>
		fs->fsi_flag = 0;
    1370:	2300      	movs	r3, #0
    1372:	7163      	strb	r3, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    1374:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    1378:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    137c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1380:	b21b      	sxth	r3, r3
    1382:	4a3d      	ldr	r2, [pc, #244]	; (1478 <find_volume+0x3a8>)
    1384:	4293      	cmp	r3, r2
    1386:	d14c      	bne.n	1422 <find_volume+0x352>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    1388:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    138c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    1390:	041b      	lsls	r3, r3, #16
    1392:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1396:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    139a:	4313      	orrs	r3, r2
    139c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    13a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    13a4:	4a35      	ldr	r2, [pc, #212]	; (147c <find_volume+0x3ac>)
    13a6:	4293      	cmp	r3, r2
    13a8:	d13d      	bne.n	1426 <find_volume+0x356>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    13aa:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
    13ae:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
    13b2:	041b      	lsls	r3, r3, #16
    13b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    13b8:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
    13bc:	4313      	orrs	r3, r2
    13be:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
    13c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    13c6:	4a2e      	ldr	r2, [pc, #184]	; (1480 <find_volume+0x3b0>)
    13c8:	4293      	cmp	r3, r2
    13ca:	d12e      	bne.n	142a <find_volume+0x35a>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    13cc:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
    13d0:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
    13d4:	041b      	lsls	r3, r3, #16
    13d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    13da:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
    13de:	4313      	orrs	r3, r2
    13e0:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
    13e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    13e8:	6123      	str	r3, [r4, #16]
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    13ea:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
    13ee:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
    13f2:	041b      	lsls	r3, r3, #16
    13f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    13f8:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
    13fc:	4313      	orrs	r3, r2
    13fe:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
    1402:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1406:	60e3      	str	r3, [r4, #12]
    1408:	2103      	movs	r1, #3
	fs->fs_type = fmt;	/* FAT sub-type */
    140a:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
    140c:	4a1d      	ldr	r2, [pc, #116]	; (1484 <find_volume+0x3b4>)
    140e:	8893      	ldrh	r3, [r2, #4]
    1410:	3301      	adds	r3, #1
    1412:	b29b      	uxth	r3, r3
    1414:	8093      	strh	r3, [r2, #4]
    1416:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Set current directory to root */
    1418:	2000      	movs	r0, #0
    141a:	6160      	str	r0, [r4, #20]
	return FR_OK;
    141c:	e008      	b.n	1430 <find_volume+0x360>
    141e:	2103      	movs	r1, #3
    1420:	e7f3      	b.n	140a <find_volume+0x33a>
    1422:	2103      	movs	r1, #3
    1424:	e7f1      	b.n	140a <find_volume+0x33a>
    1426:	2103      	movs	r1, #3
    1428:	e7ef      	b.n	140a <find_volume+0x33a>
    142a:	2103      	movs	r1, #3
    142c:	e7ed      	b.n	140a <find_volume+0x33a>
	if (vol < 0) return FR_INVALID_DRIVE;
    142e:	200b      	movs	r0, #11
}
    1430:	b005      	add	sp, #20
    1432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1436:	200c      	movs	r0, #12
    1438:	e7fa      	b.n	1430 <find_volume+0x360>
			return FR_OK;				/* The file system object is valid */
    143a:	2000      	movs	r0, #0
    143c:	e7f8      	b.n	1430 <find_volume+0x360>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    143e:	2001      	movs	r0, #1
    1440:	e7f6      	b.n	1430 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    1442:	200d      	movs	r0, #13
    1444:	e7f4      	b.n	1430 <find_volume+0x360>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    1446:	200d      	movs	r0, #13
    1448:	e7f2      	b.n	1430 <find_volume+0x360>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    144a:	200d      	movs	r0, #13
    144c:	e7f0      	b.n	1430 <find_volume+0x360>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    144e:	200d      	movs	r0, #13
    1450:	e7ee      	b.n	1430 <find_volume+0x360>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1452:	200d      	movs	r0, #13
    1454:	e7ec      	b.n	1430 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    1456:	200d      	movs	r0, #13
    1458:	e7ea      	b.n	1430 <find_volume+0x360>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    145a:	200d      	movs	r0, #13
    145c:	e7e8      	b.n	1430 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    145e:	200d      	movs	r0, #13
    1460:	e7e6      	b.n	1430 <find_volume+0x360>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1462:	3302      	adds	r3, #2
    1464:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    1466:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1468:	4435      	add	r5, r6
    146a:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    146c:	eb0e 0106 	add.w	r1, lr, r6
    1470:	62e1      	str	r1, [r4, #44]	; 0x2c
    1472:	e728      	b.n	12c6 <find_volume+0x1f6>
    1474:	00000fc5 	.word	0x00000fc5
    1478:	ffffaa55 	.word	0xffffaa55
    147c:	41615252 	.word	0x41615252
    1480:	61417272 	.word	0x61417272
    1484:	20000990 	.word	0x20000990

00001488 <sync_fs>:
{
    1488:	b538      	push	{r3, r4, r5, lr}
    148a:	4604      	mov	r4, r0
	res = sync_window(fs);
    148c:	4b2d      	ldr	r3, [pc, #180]	; (1544 <sync_fs+0xbc>)
    148e:	4798      	blx	r3
	if (res == FR_OK) {
    1490:	4603      	mov	r3, r0
    1492:	b950      	cbnz	r0, 14aa <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    1494:	7823      	ldrb	r3, [r4, #0]
    1496:	2b03      	cmp	r3, #3
    1498:	d009      	beq.n	14ae <sync_fs+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    149a:	2200      	movs	r2, #0
    149c:	4611      	mov	r1, r2
    149e:	7860      	ldrb	r0, [r4, #1]
    14a0:	4b29      	ldr	r3, [pc, #164]	; (1548 <sync_fs+0xc0>)
    14a2:	4798      	blx	r3
	res = sync_window(fs);
    14a4:	1c03      	adds	r3, r0, #0
    14a6:	bf18      	it	ne
    14a8:	2301      	movne	r3, #1
}
    14aa:	4618      	mov	r0, r3
    14ac:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    14ae:	7963      	ldrb	r3, [r4, #5]
    14b0:	2b01      	cmp	r3, #1
    14b2:	d1f2      	bne.n	149a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
    14b4:	f104 0534 	add.w	r5, r4, #52	; 0x34
    14b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    14bc:	2100      	movs	r1, #0
    14be:	4628      	mov	r0, r5
    14c0:	4b22      	ldr	r3, [pc, #136]	; (154c <sync_fs+0xc4>)
    14c2:	4798      	blx	r3
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    14c4:	2355      	movs	r3, #85	; 0x55
    14c6:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    14ca:	23aa      	movs	r3, #170	; 0xaa
    14cc:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    14d0:	2352      	movs	r3, #82	; 0x52
    14d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    14d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    14da:	2361      	movs	r3, #97	; 0x61
    14dc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    14e0:	2241      	movs	r2, #65	; 0x41
    14e2:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    14e6:	2172      	movs	r1, #114	; 0x72
    14e8:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
    14ec:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
    14f0:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
    14f4:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    14f8:	6923      	ldr	r3, [r4, #16]
    14fa:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    14fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
    1502:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
    1506:	0c1a      	lsrs	r2, r3, #16
    1508:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
    150c:	0e1b      	lsrs	r3, r3, #24
    150e:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    1512:	68e3      	ldr	r3, [r4, #12]
    1514:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    1518:	f3c3 2207 	ubfx	r2, r3, #8, #8
    151c:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
    1520:	0c1a      	lsrs	r2, r3, #16
    1522:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
    1526:	0e1b      	lsrs	r3, r3, #24
    1528:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
			fs->winsect = fs->volbase + 1;
    152c:	6a22      	ldr	r2, [r4, #32]
    152e:	3201      	adds	r2, #1
    1530:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    1532:	2301      	movs	r3, #1
    1534:	4629      	mov	r1, r5
    1536:	7860      	ldrb	r0, [r4, #1]
    1538:	4d05      	ldr	r5, [pc, #20]	; (1550 <sync_fs+0xc8>)
    153a:	47a8      	blx	r5
			fs->fsi_flag = 0;
    153c:	2300      	movs	r3, #0
    153e:	7163      	strb	r3, [r4, #5]
    1540:	e7ab      	b.n	149a <sync_fs+0x12>
    1542:	bf00      	nop
    1544:	00000f55 	.word	0x00000f55
    1548:	00000505 	.word	0x00000505
    154c:	00000e65 	.word	0x00000e65
    1550:	00000485 	.word	0x00000485

00001554 <clust2sect>:
	clst -= 2;
    1554:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    1556:	6983      	ldr	r3, [r0, #24]
    1558:	3b02      	subs	r3, #2
    155a:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
    155c:	bf3d      	ittte	cc
    155e:	7883      	ldrbcc	r3, [r0, #2]
    1560:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
    1562:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    1566:	2000      	movcs	r0, #0
}
    1568:	4770      	bx	lr
	...

0000156c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    156c:	2901      	cmp	r1, #1
    156e:	d969      	bls.n	1644 <get_fat+0xd8>
{
    1570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1572:	6983      	ldr	r3, [r0, #24]
    1574:	4299      	cmp	r1, r3
    1576:	d267      	bcs.n	1648 <get_fat+0xdc>
    1578:	460c      	mov	r4, r1
    157a:	4606      	mov	r6, r0
		switch (fs->fs_type) {
    157c:	7803      	ldrb	r3, [r0, #0]
    157e:	2b02      	cmp	r3, #2
    1580:	d02e      	beq.n	15e0 <get_fat+0x74>
    1582:	2b03      	cmp	r3, #3
    1584:	d040      	beq.n	1608 <get_fat+0x9c>
    1586:	2b01      	cmp	r3, #1
    1588:	d001      	beq.n	158e <get_fat+0x22>
			val = 1;	/* Internal error */
    158a:	2001      	movs	r0, #1
    158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
    158e:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    1592:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1594:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    1598:	4b2c      	ldr	r3, [pc, #176]	; (164c <get_fat+0xe0>)
    159a:	4798      	blx	r3
    159c:	b110      	cbz	r0, 15a4 <get_fat+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    159e:	f04f 30ff 	mov.w	r0, #4294967295
    15a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
    15a4:	1c6f      	adds	r7, r5, #1
    15a6:	f3c5 0508 	ubfx	r5, r5, #0, #9
    15aa:	4435      	add	r5, r6
    15ac:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    15b0:	6a71      	ldr	r1, [r6, #36]	; 0x24
    15b2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    15b6:	4630      	mov	r0, r6
    15b8:	4b24      	ldr	r3, [pc, #144]	; (164c <get_fat+0xe0>)
    15ba:	4798      	blx	r3
    15bc:	b110      	cbz	r0, 15c4 <get_fat+0x58>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    15be:	f04f 30ff 	mov.w	r0, #4294967295
    15c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc |= fs->win[bc % SS(fs)] << 8;
    15c4:	f3c7 0008 	ubfx	r0, r7, #0, #9
    15c8:	4430      	add	r0, r6
    15ca:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    15ce:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    15d2:	f014 0f01 	tst.w	r4, #1
    15d6:	bf14      	ite	ne
    15d8:	0900      	lsrne	r0, r0, #4
    15da:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
    15de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    15e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    15e2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    15e6:	4b19      	ldr	r3, [pc, #100]	; (164c <get_fat+0xe0>)
    15e8:	4798      	blx	r3
    15ea:	b110      	cbz	r0, 15f2 <get_fat+0x86>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    15ec:	f04f 30ff 	mov.w	r0, #4294967295
    15f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 2 % SS(fs)];
    15f2:	0060      	lsls	r0, r4, #1
    15f4:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
			val = LD_WORD(p);
    15f8:	4430      	add	r0, r6
    15fa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    15fe:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    1602:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
    1606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    1608:	6a41      	ldr	r1, [r0, #36]	; 0x24
    160a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    160e:	4b0f      	ldr	r3, [pc, #60]	; (164c <get_fat+0xe0>)
    1610:	4798      	blx	r3
    1612:	b110      	cbz	r0, 161a <get_fat+0xae>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1614:	f04f 30ff 	mov.w	r0, #4294967295
}
    1618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 4 % SS(fs)];
    161a:	00a0      	lsls	r0, r4, #2
    161c:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
    1620:	f100 0234 	add.w	r2, r0, #52	; 0x34
    1624:	4432      	add	r2, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
    1626:	78d1      	ldrb	r1, [r2, #3]
    1628:	7893      	ldrb	r3, [r2, #2]
    162a:	041b      	lsls	r3, r3, #16
    162c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    1630:	4430      	add	r0, r6
    1632:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    1636:	4318      	orrs	r0, r3
    1638:	7853      	ldrb	r3, [r2, #1]
    163a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    163e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
    1642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
    1644:	2001      	movs	r0, #1
    1646:	4770      	bx	lr
    1648:	2001      	movs	r0, #1
    164a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    164c:	00000fc5 	.word	0x00000fc5

00001650 <dir_sdi>:
{
    1650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1654:	4605      	mov	r5, r0
	dp->index = (WORD)idx;	/* Current index */
    1656:	80c1      	strh	r1, [r0, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
    1658:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    165a:	2c01      	cmp	r4, #1
    165c:	d046      	beq.n	16ec <dir_sdi+0x9c>
    165e:	460e      	mov	r6, r1
    1660:	6803      	ldr	r3, [r0, #0]
    1662:	699a      	ldr	r2, [r3, #24]
    1664:	4294      	cmp	r4, r2
    1666:	d302      	bcc.n	166e <dir_sdi+0x1e>
		return FR_INT_ERR;
    1668:	2002      	movs	r0, #2
    166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    166e:	b964      	cbnz	r4, 168a <dir_sdi+0x3a>
    1670:	781a      	ldrb	r2, [r3, #0]
    1672:	2a03      	cmp	r2, #3
    1674:	d005      	beq.n	1682 <dir_sdi+0x32>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    1676:	891a      	ldrh	r2, [r3, #8]
    1678:	4296      	cmp	r6, r2
    167a:	d30e      	bcc.n	169a <dir_sdi+0x4a>
			return FR_INT_ERR;
    167c:	2002      	movs	r0, #2
    167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = dp->fs->dirbase;
    1682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    1684:	2a00      	cmp	r2, #0
    1686:	d0f6      	beq.n	1676 <dir_sdi+0x26>
		clst = dp->fs->dirbase;
    1688:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    168a:	789f      	ldrb	r7, [r3, #2]
    168c:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
    168e:	42be      	cmp	r6, r7
    1690:	d31a      	bcc.n	16c8 <dir_sdi+0x78>
    1692:	1bf6      	subs	r6, r6, r7
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    1694:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1708 <dir_sdi+0xb8>
    1698:	e006      	b.n	16a8 <dir_sdi+0x58>
		sect = dp->fs->dirbase;
    169a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	dp->clust = clst;	/* Current cluster# */
    169c:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
    169e:	b9c0      	cbnz	r0, 16d2 <dir_sdi+0x82>
    16a0:	2002      	movs	r0, #2
}
    16a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16a6:	461e      	mov	r6, r3
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    16a8:	4621      	mov	r1, r4
    16aa:	6828      	ldr	r0, [r5, #0]
    16ac:	47c0      	blx	r8
    16ae:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    16b0:	f1b0 3fff 	cmp.w	r0, #4294967295
    16b4:	d01d      	beq.n	16f2 <dir_sdi+0xa2>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    16b6:	2801      	cmp	r0, #1
    16b8:	d91e      	bls.n	16f8 <dir_sdi+0xa8>
    16ba:	682b      	ldr	r3, [r5, #0]
    16bc:	699b      	ldr	r3, [r3, #24]
    16be:	4298      	cmp	r0, r3
    16c0:	d21d      	bcs.n	16fe <dir_sdi+0xae>
    16c2:	1bf3      	subs	r3, r6, r7
		while (idx >= ic) {	/* Follow cluster chain */
    16c4:	42be      	cmp	r6, r7
    16c6:	d2ee      	bcs.n	16a6 <dir_sdi+0x56>
		sect = clust2sect(dp->fs, clst);
    16c8:	4621      	mov	r1, r4
    16ca:	6828      	ldr	r0, [r5, #0]
    16cc:	4b0d      	ldr	r3, [pc, #52]	; (1704 <dir_sdi+0xb4>)
    16ce:	4798      	blx	r3
    16d0:	e7e4      	b.n	169c <dir_sdi+0x4c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    16d2:	eb00 1016 	add.w	r0, r0, r6, lsr #4
    16d6:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    16d8:	682b      	ldr	r3, [r5, #0]
    16da:	3334      	adds	r3, #52	; 0x34
    16dc:	f006 060f 	and.w	r6, r6, #15
    16e0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    16e4:	616e      	str	r6, [r5, #20]
	return FR_OK;
    16e6:	2000      	movs	r0, #0
    16e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
    16ec:	2002      	movs	r0, #2
    16ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    16f2:	2001      	movs	r0, #1
    16f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_INT_ERR;
    16f8:	2002      	movs	r0, #2
    16fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16fe:	2002      	movs	r0, #2
    1700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1704:	00001555 	.word	0x00001555
    1708:	0000156d 	.word	0x0000156d

0000170c <put_fat>:
{
    170c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1710:	2901      	cmp	r1, #1
    1712:	f240 808b 	bls.w	182c <put_fat+0x120>
    1716:	6983      	ldr	r3, [r0, #24]
    1718:	4299      	cmp	r1, r3
    171a:	d301      	bcc.n	1720 <put_fat+0x14>
		res = FR_INT_ERR;
    171c:	2702      	movs	r7, #2
    171e:	e086      	b.n	182e <put_fat+0x122>
    1720:	4616      	mov	r6, r2
    1722:	460c      	mov	r4, r1
    1724:	4605      	mov	r5, r0
		switch (fs->fs_type) {
    1726:	7803      	ldrb	r3, [r0, #0]
    1728:	2b02      	cmp	r3, #2
    172a:	d04c      	beq.n	17c6 <put_fat+0xba>
    172c:	2b03      	cmp	r3, #3
    172e:	d05e      	beq.n	17ee <put_fat+0xe2>
    1730:	2b01      	cmp	r3, #1
    1732:	d001      	beq.n	1738 <put_fat+0x2c>
			res = FR_INT_ERR;
    1734:	2702      	movs	r7, #2
    1736:	e07a      	b.n	182e <put_fat+0x122>
			bc = (UINT)clst; bc += bc / 2;
    1738:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    173c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    173e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
    1742:	4b3e      	ldr	r3, [pc, #248]	; (183c <put_fat+0x130>)
    1744:	4798      	blx	r3
			if (res != FR_OK) break;
    1746:	4607      	mov	r7, r0
    1748:	2800      	cmp	r0, #0
    174a:	d170      	bne.n	182e <put_fat+0x122>
			p = &fs->win[bc++ % SS(fs)];
    174c:	f108 0901 	add.w	r9, r8, #1
    1750:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1754:	f014 0f01 	tst.w	r4, #1
    1758:	d01c      	beq.n	1794 <put_fat+0x88>
    175a:	44a8      	add	r8, r5
    175c:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    1760:	f003 030f 	and.w	r3, r3, #15
    1764:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    1768:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
			fs->wflag = 1;
    176c:	2301      	movs	r3, #1
    176e:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1770:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1772:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    1776:	4628      	mov	r0, r5
    1778:	4b30      	ldr	r3, [pc, #192]	; (183c <put_fat+0x130>)
    177a:	4798      	blx	r3
			if (res != FR_OK) break;
    177c:	2800      	cmp	r0, #0
    177e:	d159      	bne.n	1834 <put_fat+0x128>
			p = &fs->win[bc % SS(fs)];
    1780:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1784:	f3c6 1207 	ubfx	r2, r6, #4, #8
    1788:	44a9      	add	r9, r5
    178a:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
			fs->wflag = 1;
    178e:	2301      	movs	r3, #1
    1790:	712b      	strb	r3, [r5, #4]
			break;
    1792:	e04c      	b.n	182e <put_fat+0x122>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1794:	44a8      	add	r8, r5
    1796:	f888 6034 	strb.w	r6, [r8, #52]	; 0x34
			fs->wflag = 1;
    179a:	2301      	movs	r3, #1
    179c:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    179e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    17a0:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    17a4:	4628      	mov	r0, r5
    17a6:	4b25      	ldr	r3, [pc, #148]	; (183c <put_fat+0x130>)
    17a8:	4798      	blx	r3
			if (res != FR_OK) break;
    17aa:	2800      	cmp	r0, #0
    17ac:	d144      	bne.n	1838 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    17ae:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    17b2:	eb05 0309 	add.w	r3, r5, r9
    17b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    17ba:	f023 030f 	bic.w	r3, r3, #15
    17be:	f3c6 2203 	ubfx	r2, r6, #8, #4
    17c2:	431a      	orrs	r2, r3
    17c4:	e7e0      	b.n	1788 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    17c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    17c8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    17cc:	4b1b      	ldr	r3, [pc, #108]	; (183c <put_fat+0x130>)
    17ce:	4798      	blx	r3
			if (res != FR_OK) break;
    17d0:	4607      	mov	r7, r0
    17d2:	bb60      	cbnz	r0, 182e <put_fat+0x122>
			p = &fs->win[clst * 2 % SS(fs)];
    17d4:	0063      	lsls	r3, r4, #1
    17d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
    17da:	442b      	add	r3, r5
    17dc:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
    17e0:	f3c6 2207 	ubfx	r2, r6, #8, #8
    17e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			fs->wflag = 1;
    17e8:	2301      	movs	r3, #1
    17ea:	712b      	strb	r3, [r5, #4]
			break;
    17ec:	e01f      	b.n	182e <put_fat+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    17ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    17f0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    17f4:	4b11      	ldr	r3, [pc, #68]	; (183c <put_fat+0x130>)
    17f6:	4798      	blx	r3
			if (res != FR_OK) break;
    17f8:	4607      	mov	r7, r0
    17fa:	b9c0      	cbnz	r0, 182e <put_fat+0x122>
			p = &fs->win[clst * 4 % SS(fs)];
    17fc:	00a1      	lsls	r1, r4, #2
    17fe:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
    1802:	f101 0334 	add.w	r3, r1, #52	; 0x34
    1806:	442b      	add	r3, r5
			val |= LD_DWORD(p) & 0xF0000000;
    1808:	78da      	ldrb	r2, [r3, #3]
    180a:	0612      	lsls	r2, r2, #24
    180c:	4429      	add	r1, r5
    180e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    1812:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
    1814:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    1818:	f3c2 2107 	ubfx	r1, r2, #8, #8
    181c:	7059      	strb	r1, [r3, #1]
    181e:	0c11      	lsrs	r1, r2, #16
    1820:	7099      	strb	r1, [r3, #2]
    1822:	0e12      	lsrs	r2, r2, #24
    1824:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
    1826:	2301      	movs	r3, #1
    1828:	712b      	strb	r3, [r5, #4]
			break;
    182a:	e000      	b.n	182e <put_fat+0x122>
		res = FR_INT_ERR;
    182c:	2702      	movs	r7, #2
}
    182e:	4638      	mov	r0, r7
    1830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1834:	4607      	mov	r7, r0
    1836:	e7fa      	b.n	182e <put_fat+0x122>
    1838:	4607      	mov	r7, r0
	return res;
    183a:	e7f8      	b.n	182e <put_fat+0x122>
    183c:	00000fc5 	.word	0x00000fc5

00001840 <create_chain>:
{
    1840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1844:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
    1846:	4688      	mov	r8, r1
    1848:	b941      	cbnz	r1, 185c <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
    184a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    184c:	b19e      	cbz	r6, 1876 <create_chain+0x36>
    184e:	6983      	ldr	r3, [r0, #24]
    1850:	429e      	cmp	r6, r3
    1852:	bf28      	it	cs
    1854:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
    1856:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1858:	4f2a      	ldr	r7, [pc, #168]	; (1904 <create_chain+0xc4>)
    185a:	e01a      	b.n	1892 <create_chain+0x52>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    185c:	4b29      	ldr	r3, [pc, #164]	; (1904 <create_chain+0xc4>)
    185e:	4798      	blx	r3
    1860:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
    1862:	2801      	cmp	r0, #1
    1864:	d943      	bls.n	18ee <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    1866:	f1b0 3fff 	cmp.w	r0, #4294967295
    186a:	d045      	beq.n	18f8 <create_chain+0xb8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    186c:	69aa      	ldr	r2, [r5, #24]
    186e:	4290      	cmp	r0, r2
    1870:	d342      	bcc.n	18f8 <create_chain+0xb8>
		scl = clst;
    1872:	4646      	mov	r6, r8
    1874:	e7ef      	b.n	1856 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1876:	2601      	movs	r6, #1
    1878:	e7ed      	b.n	1856 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    187a:	4621      	mov	r1, r4
    187c:	4628      	mov	r0, r5
    187e:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    1880:	4603      	mov	r3, r0
    1882:	b170      	cbz	r0, 18a2 <create_chain+0x62>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1884:	f1b0 3fff 	cmp.w	r0, #4294967295
    1888:	d036      	beq.n	18f8 <create_chain+0xb8>
    188a:	2801      	cmp	r0, #1
    188c:	d034      	beq.n	18f8 <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    188e:	42b4      	cmp	r4, r6
    1890:	d031      	beq.n	18f6 <create_chain+0xb6>
		ncl++;							/* Next cluster */
    1892:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    1894:	69ab      	ldr	r3, [r5, #24]
    1896:	429c      	cmp	r4, r3
    1898:	d3ef      	bcc.n	187a <create_chain+0x3a>
			if (ncl > scl) return 0;	/* No free cluster */
    189a:	2e01      	cmp	r6, #1
    189c:	d929      	bls.n	18f2 <create_chain+0xb2>
			ncl = 2;
    189e:	2402      	movs	r4, #2
    18a0:	e7eb      	b.n	187a <create_chain+0x3a>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    18a2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    18a6:	4621      	mov	r1, r4
    18a8:	4628      	mov	r0, r5
    18aa:	4b17      	ldr	r3, [pc, #92]	; (1908 <create_chain+0xc8>)
    18ac:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    18ae:	4603      	mov	r3, r0
    18b0:	b9b8      	cbnz	r0, 18e2 <create_chain+0xa2>
    18b2:	f1b8 0f00 	cmp.w	r8, #0
    18b6:	d10c      	bne.n	18d2 <create_chain+0x92>
		fs->last_clust = ncl;			/* Update FSINFO */
    18b8:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    18ba:	692b      	ldr	r3, [r5, #16]
    18bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    18c0:	d01d      	beq.n	18fe <create_chain+0xbe>
			fs->free_clust--;
    18c2:	3b01      	subs	r3, #1
    18c4:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    18c6:	796b      	ldrb	r3, [r5, #5]
    18c8:	f043 0301 	orr.w	r3, r3, #1
    18cc:	716b      	strb	r3, [r5, #5]
    18ce:	4623      	mov	r3, r4
    18d0:	e012      	b.n	18f8 <create_chain+0xb8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    18d2:	4622      	mov	r2, r4
    18d4:	4641      	mov	r1, r8
    18d6:	4628      	mov	r0, r5
    18d8:	4b0b      	ldr	r3, [pc, #44]	; (1908 <create_chain+0xc8>)
    18da:	4798      	blx	r3
	if (res == FR_OK) {
    18dc:	4603      	mov	r3, r0
    18de:	2800      	cmp	r0, #0
    18e0:	d0ea      	beq.n	18b8 <create_chain+0x78>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    18e2:	2b01      	cmp	r3, #1
    18e4:	bf0c      	ite	eq
    18e6:	f04f 33ff 	moveq.w	r3, #4294967295
    18ea:	2301      	movne	r3, #1
    18ec:	e004      	b.n	18f8 <create_chain+0xb8>
		if (cs < 2) return 1;			/* Invalid value */
    18ee:	2301      	movs	r3, #1
    18f0:	e002      	b.n	18f8 <create_chain+0xb8>
			if (ncl > scl) return 0;	/* No free cluster */
    18f2:	2300      	movs	r3, #0
    18f4:	e000      	b.n	18f8 <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    18f6:	2300      	movs	r3, #0
}
    18f8:	4618      	mov	r0, r3
    18fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18fe:	4623      	mov	r3, r4
    1900:	e7fa      	b.n	18f8 <create_chain+0xb8>
    1902:	bf00      	nop
    1904:	0000156d 	.word	0x0000156d
    1908:	0000170d 	.word	0x0000170d

0000190c <dir_next>:
{
    190c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
    1910:	88c4      	ldrh	r4, [r0, #6]
    1912:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    1914:	b2a3      	uxth	r3, r4
    1916:	b913      	cbnz	r3, 191e <dir_next+0x12>
		return FR_NO_FILE;
    1918:	2004      	movs	r0, #4
    191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    191e:	6903      	ldr	r3, [r0, #16]
    1920:	b913      	cbnz	r3, 1928 <dir_next+0x1c>
		return FR_NO_FILE;
    1922:	2004      	movs	r0, #4
    1924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1928:	460e      	mov	r6, r1
    192a:	4605      	mov	r5, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    192c:	f014 070f 	ands.w	r7, r4, #15
    1930:	d110      	bne.n	1954 <dir_next+0x48>
		dp->sect++;					/* Next sector */
    1932:	3301      	adds	r3, #1
    1934:	6103      	str	r3, [r0, #16]
		if (!dp->clust) {		/* Static table */
    1936:	68c1      	ldr	r1, [r0, #12]
    1938:	b931      	cbnz	r1, 1948 <dir_next+0x3c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    193a:	6803      	ldr	r3, [r0, #0]
    193c:	891b      	ldrh	r3, [r3, #8]
    193e:	429c      	cmp	r4, r3
    1940:	d308      	bcc.n	1954 <dir_next+0x48>
				return FR_NO_FILE;
    1942:	2004      	movs	r0, #4
    1944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1948:	6800      	ldr	r0, [r0, #0]
    194a:	7883      	ldrb	r3, [r0, #2]
    194c:	3b01      	subs	r3, #1
    194e:	ea13 1814 	ands.w	r8, r3, r4, lsr #4
    1952:	d008      	beq.n	1966 <dir_next+0x5a>
	dp->index = (WORD)i;	/* Current index */
    1954:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    1956:	682b      	ldr	r3, [r5, #0]
    1958:	3334      	adds	r3, #52	; 0x34
    195a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    195e:	616b      	str	r3, [r5, #20]
	return FR_OK;
    1960:	2000      	movs	r0, #0
    1962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    1966:	4b30      	ldr	r3, [pc, #192]	; (1a28 <dir_next+0x11c>)
    1968:	4798      	blx	r3
    196a:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    196c:	2801      	cmp	r0, #1
    196e:	d948      	bls.n	1a02 <dir_next+0xf6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1970:	f1b0 3fff 	cmp.w	r0, #4294967295
    1974:	d048      	beq.n	1a08 <dir_next+0xfc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    1976:	6828      	ldr	r0, [r5, #0]
    1978:	6983      	ldr	r3, [r0, #24]
    197a:	4599      	cmp	r9, r3
    197c:	d339      	bcc.n	19f2 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    197e:	b916      	cbnz	r6, 1986 <dir_next+0x7a>
    1980:	2004      	movs	r0, #4
    1982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    1986:	68e9      	ldr	r1, [r5, #12]
    1988:	4b28      	ldr	r3, [pc, #160]	; (1a2c <dir_next+0x120>)
    198a:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    198c:	4681      	mov	r9, r0
    198e:	b910      	cbnz	r0, 1996 <dir_next+0x8a>
    1990:	2007      	movs	r0, #7
    1992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    1996:	2801      	cmp	r0, #1
    1998:	d039      	beq.n	1a0e <dir_next+0x102>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    199a:	f1b0 3fff 	cmp.w	r0, #4294967295
    199e:	d039      	beq.n	1a14 <dir_next+0x108>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    19a0:	6828      	ldr	r0, [r5, #0]
    19a2:	4b23      	ldr	r3, [pc, #140]	; (1a30 <dir_next+0x124>)
    19a4:	4798      	blx	r3
    19a6:	2800      	cmp	r0, #0
    19a8:	d137      	bne.n	1a1a <dir_next+0x10e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    19aa:	6828      	ldr	r0, [r5, #0]
    19ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    19b0:	2100      	movs	r1, #0
    19b2:	3034      	adds	r0, #52	; 0x34
    19b4:	4b1f      	ldr	r3, [pc, #124]	; (1a34 <dir_next+0x128>)
    19b6:	4798      	blx	r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    19b8:	682e      	ldr	r6, [r5, #0]
    19ba:	4649      	mov	r1, r9
    19bc:	4630      	mov	r0, r6
    19be:	4b1e      	ldr	r3, [pc, #120]	; (1a38 <dir_next+0x12c>)
    19c0:	4798      	blx	r3
    19c2:	6330      	str	r0, [r6, #48]	; 0x30
						dp->fs->wflag = 1;
    19c4:	f04f 0a01 	mov.w	sl, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    19c8:	4e19      	ldr	r6, [pc, #100]	; (1a30 <dir_next+0x124>)
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    19ca:	682b      	ldr	r3, [r5, #0]
    19cc:	789a      	ldrb	r2, [r3, #2]
    19ce:	4590      	cmp	r8, r2
    19d0:	d20b      	bcs.n	19ea <dir_next+0xde>
						dp->fs->wflag = 1;
    19d2:	f883 a004 	strb.w	sl, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    19d6:	6828      	ldr	r0, [r5, #0]
    19d8:	47b0      	blx	r6
    19da:	bb08      	cbnz	r0, 1a20 <dir_next+0x114>
						dp->fs->winsect++;
    19dc:	682a      	ldr	r2, [r5, #0]
    19de:	6b13      	ldr	r3, [r2, #48]	; 0x30
    19e0:	3301      	adds	r3, #1
    19e2:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    19e4:	f108 0801 	add.w	r8, r8, #1
    19e8:	e7ef      	b.n	19ca <dir_next+0xbe>
					dp->fs->winsect -= c;						/* Rewind window offset */
    19ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    19ec:	eba2 0208 	sub.w	r2, r2, r8
    19f0:	631a      	str	r2, [r3, #48]	; 0x30
				dp->clust = clst;				/* Initialize data for new cluster */
    19f2:	f8c5 900c 	str.w	r9, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
    19f6:	4649      	mov	r1, r9
    19f8:	6828      	ldr	r0, [r5, #0]
    19fa:	4b0f      	ldr	r3, [pc, #60]	; (1a38 <dir_next+0x12c>)
    19fc:	4798      	blx	r3
    19fe:	6128      	str	r0, [r5, #16]
    1a00:	e7a8      	b.n	1954 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
    1a02:	2002      	movs	r0, #2
    1a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1a08:	2001      	movs	r0, #1
    1a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    1a0e:	2002      	movs	r0, #2
    1a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1a14:	2001      	movs	r0, #1
    1a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    1a1a:	2001      	movs	r0, #1
    1a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    1a20:	2001      	movs	r0, #1
}
    1a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a26:	bf00      	nop
    1a28:	0000156d 	.word	0x0000156d
    1a2c:	00001841 	.word	0x00001841
    1a30:	00000f55 	.word	0x00000f55
    1a34:	00000e65 	.word	0x00000e65
    1a38:	00001555 	.word	0x00001555

00001a3c <follow_path>:
{
    1a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a40:	4605      	mov	r5, r0
    1a42:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
    1a44:	780b      	ldrb	r3, [r1, #0]
    1a46:	2b2f      	cmp	r3, #47	; 0x2f
    1a48:	d00a      	beq.n	1a60 <follow_path+0x24>
    1a4a:	2b5c      	cmp	r3, #92	; 0x5c
    1a4c:	d008      	beq.n	1a60 <follow_path+0x24>
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
    1a4e:	6803      	ldr	r3, [r0, #0]
    1a50:	695b      	ldr	r3, [r3, #20]
    1a52:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1a54:	7823      	ldrb	r3, [r4, #0]
    1a56:	2b1f      	cmp	r3, #31
    1a58:	d906      	bls.n	1a68 <follow_path+0x2c>
		res = dir_next(dp, 0);		/* Next entry */
    1a5a:	f8df 8238 	ldr.w	r8, [pc, #568]	; 1c94 <follow_path+0x258>
    1a5e:	e085      	b.n	1b6c <follow_path+0x130>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
    1a60:	3401      	adds	r4, #1
    1a62:	2300      	movs	r3, #0
    1a64:	60ab      	str	r3, [r5, #8]
    1a66:	e7f5      	b.n	1a54 <follow_path+0x18>
		res = dir_sdi(dp, 0);
    1a68:	2100      	movs	r1, #0
    1a6a:	4628      	mov	r0, r5
    1a6c:	4b83      	ldr	r3, [pc, #524]	; (1c7c <follow_path+0x240>)
    1a6e:	4798      	blx	r3
    1a70:	4681      	mov	r9, r0
		dp->dir = 0;
    1a72:	2300      	movs	r3, #0
    1a74:	616b      	str	r3, [r5, #20]
    1a76:	e0e0      	b.n	1c3a <follow_path+0x1fe>
			sfn[i++] = c;
    1a78:	232e      	movs	r3, #46	; 0x2e
    1a7a:	703b      	strb	r3, [r7, #0]
			c = (BYTE)p[si++];
    1a7c:	7873      	ldrb	r3, [r6, #1]
			if (c != '.' || si >= 3) break;
    1a7e:	2b2e      	cmp	r3, #46	; 0x2e
    1a80:	d113      	bne.n	1aaa <follow_path+0x6e>
			sfn[i++] = c;
    1a82:	707b      	strb	r3, [r7, #1]
			c = (BYTE)p[si++];
    1a84:	78b3      	ldrb	r3, [r6, #2]
			if (c != '.' || si >= 3) break;
    1a86:	2b2e      	cmp	r3, #46	; 0x2e
    1a88:	d102      	bne.n	1a90 <follow_path+0x54>
    1a8a:	f04f 0906 	mov.w	r9, #6
    1a8e:	e0d4      	b.n	1c3a <follow_path+0x1fe>
			c = (BYTE)p[si++];
    1a90:	2403      	movs	r4, #3
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1a92:	2b2f      	cmp	r3, #47	; 0x2f
    1a94:	f000 80ba 	beq.w	1c0c <follow_path+0x1d0>
    1a98:	2b5c      	cmp	r3, #92	; 0x5c
    1a9a:	f000 80b7 	beq.w	1c0c <follow_path+0x1d0>
    1a9e:	2b20      	cmp	r3, #32
    1aa0:	f200 80c9 	bhi.w	1c36 <follow_path+0x1fa>
		*path = &p[si];									/* Return pointer to the next segment */
    1aa4:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1aa6:	2324      	movs	r3, #36	; 0x24
    1aa8:	e0b2      	b.n	1c10 <follow_path+0x1d4>
			c = (BYTE)p[si++];
    1aaa:	2402      	movs	r4, #2
    1aac:	e7f1      	b.n	1a92 <follow_path+0x56>
			b |= 3;						/* Eliminate NT flag */
    1aae:	f04c 0c03 	orr.w	ip, ip, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
    1ab2:	3b80      	subs	r3, #128	; 0x80
    1ab4:	4a72      	ldr	r2, [pc, #456]	; (1c80 <follow_path+0x244>)
    1ab6:	5cd3      	ldrb	r3, [r2, r3]
    1ab8:	e085      	b.n	1bc6 <follow_path+0x18a>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1aba:	2b00      	cmp	r3, #0
    1abc:	f040 80bb 	bne.w	1c36 <follow_path+0x1fa>
				if (IsLower(c)) {		/* ASCII small capital? */
    1ac0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    1ac4:	b2d2      	uxtb	r2, r2
    1ac6:	2a19      	cmp	r2, #25
    1ac8:	f200 8091 	bhi.w	1bee <follow_path+0x1b2>
					b |= 1; c -= 0x20;
    1acc:	f04c 0c01 	orr.w	ip, ip, #1
    1ad0:	3b20      	subs	r3, #32
    1ad2:	b2db      	uxtb	r3, r3
    1ad4:	e08b      	b.n	1bee <follow_path+0x1b2>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    1ad6:	783a      	ldrb	r2, [r7, #0]
    1ad8:	2ae5      	cmp	r2, #229	; 0xe5
    1ada:	bf04      	itt	eq
    1adc:	2205      	moveq	r2, #5
    1ade:	703a      	strbeq	r2, [r7, #0]
	if (ni == 8) b <<= 2;
    1ae0:	f1b9 0f08 	cmp.w	r9, #8
    1ae4:	bf04      	itt	eq
    1ae6:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
    1aea:	fa5f fc8c 	uxtbeq.w	ip, ip
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1aee:	f00c 0203 	and.w	r2, ip, #3
    1af2:	2a01      	cmp	r2, #1
    1af4:	bf08      	it	eq
    1af6:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1afa:	f00c 0c0c 	and.w	ip, ip, #12
    1afe:	f1bc 0f04 	cmp.w	ip, #4
    1b02:	bf08      	it	eq
    1b04:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    1b08:	72fb      	strb	r3, [r7, #11]
    1b0a:	e082      	b.n	1c12 <follow_path+0x1d6>
		res = dir_next(dp, 0);		/* Next entry */
    1b0c:	4659      	mov	r1, fp
    1b0e:	4628      	mov	r0, r5
    1b10:	47c0      	blx	r8
	} while (res == FR_OK);
    1b12:	4681      	mov	r9, r0
    1b14:	2800      	cmp	r0, #0
    1b16:	f040 8093 	bne.w	1c40 <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    1b1a:	6929      	ldr	r1, [r5, #16]
    1b1c:	6828      	ldr	r0, [r5, #0]
    1b1e:	47b0      	blx	r6
		if (res != FR_OK) break;
    1b20:	4681      	mov	r9, r0
    1b22:	2800      	cmp	r0, #0
    1b24:	f040 808c 	bne.w	1c40 <follow_path+0x204>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1b28:	6969      	ldr	r1, [r5, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1b2a:	780b      	ldrb	r3, [r1, #0]
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	f000 8097 	beq.w	1c60 <follow_path+0x224>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    1b32:	f891 a00b 	ldrb.w	sl, [r1, #11]
    1b36:	f01a 0f08 	tst.w	sl, #8
    1b3a:	d1e7      	bne.n	1b0c <follow_path+0xd0>
    1b3c:	69af      	ldr	r7, [r5, #24]
    1b3e:	f101 0c0b 	add.w	ip, r1, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    1b42:	463a      	mov	r2, r7
    1b44:	460b      	mov	r3, r1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1b46:	f813 eb01 	ldrb.w	lr, [r3], #1
    1b4a:	f812 0b01 	ldrb.w	r0, [r2], #1
    1b4e:	4586      	cmp	lr, r0
    1b50:	d1dc      	bne.n	1b0c <follow_path+0xd0>
    1b52:	459c      	cmp	ip, r3
    1b54:	d1f7      	bne.n	1b46 <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1b56:	7afb      	ldrb	r3, [r7, #11]
    1b58:	f013 0f04 	tst.w	r3, #4
    1b5c:	d16d      	bne.n	1c3a <follow_path+0x1fe>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1b5e:	f01a 0f10 	tst.w	sl, #16
    1b62:	d050      	beq.n	1c06 <follow_path+0x1ca>
			dp->sclust = ld_clust(dp->fs, dir);
    1b64:	6828      	ldr	r0, [r5, #0]
    1b66:	4b47      	ldr	r3, [pc, #284]	; (1c84 <follow_path+0x248>)
    1b68:	4798      	blx	r3
    1b6a:	60a8      	str	r0, [r5, #8]
    1b6c:	4626      	mov	r6, r4
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Skip duplicated separator */
    1b6e:	f814 3b01 	ldrb.w	r3, [r4], #1
    1b72:	2b2f      	cmp	r3, #47	; 0x2f
    1b74:	d0fa      	beq.n	1b6c <follow_path+0x130>
    1b76:	2b5c      	cmp	r3, #92	; 0x5c
    1b78:	d0f8      	beq.n	1b6c <follow_path+0x130>
	sfn = dp->fn;
    1b7a:	69af      	ldr	r7, [r5, #24]
	mem_set(sfn, ' ', 11);
    1b7c:	220b      	movs	r2, #11
    1b7e:	2120      	movs	r1, #32
    1b80:	4638      	mov	r0, r7
    1b82:	4b41      	ldr	r3, [pc, #260]	; (1c88 <follow_path+0x24c>)
    1b84:	4798      	blx	r3
	if (p[si] == '.') { /* Is this a dot entry? */
    1b86:	7833      	ldrb	r3, [r6, #0]
    1b88:	2b2e      	cmp	r3, #46	; 0x2e
    1b8a:	f43f af75 	beq.w	1a78 <follow_path+0x3c>
    1b8e:	f106 3eff 	add.w	lr, r6, #4294967295
    1b92:	2000      	movs	r0, #0
    1b94:	4604      	mov	r4, r0
    1b96:	f04f 0908 	mov.w	r9, #8
    1b9a:	4684      	mov	ip, r0
			i = 8; ni = 11;
    1b9c:	f04f 0b0b 	mov.w	fp, #11
	while (*str && *str != chr) str++;
    1ba0:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
		c = (BYTE)p[si++];
    1ba4:	3401      	adds	r4, #1
    1ba6:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1baa:	2b20      	cmp	r3, #32
    1bac:	d93b      	bls.n	1c26 <follow_path+0x1ea>
    1bae:	2b2f      	cmp	r3, #47	; 0x2f
    1bb0:	d03c      	beq.n	1c2c <follow_path+0x1f0>
    1bb2:	2b5c      	cmp	r3, #92	; 0x5c
    1bb4:	d03a      	beq.n	1c2c <follow_path+0x1f0>
		if (c == '.' || i >= ni) {
    1bb6:	2b2e      	cmp	r3, #46	; 0x2e
    1bb8:	d055      	beq.n	1c66 <follow_path+0x22a>
    1bba:	4581      	cmp	r9, r0
    1bbc:	d93b      	bls.n	1c36 <follow_path+0x1fa>
		if (c >= 0x80) {				/* Extended character? */
    1bbe:	f013 0f80 	tst.w	r3, #128	; 0x80
    1bc2:	f47f af74 	bne.w	1aae <follow_path+0x72>
	while (*str && *str != chr) str++;
    1bc6:	2b22      	cmp	r3, #34	; 0x22
    1bc8:	f43f af5f 	beq.w	1a8a <follow_path+0x4e>
    1bcc:	4652      	mov	r2, sl
    1bce:	492f      	ldr	r1, [pc, #188]	; (1c8c <follow_path+0x250>)
    1bd0:	4293      	cmp	r3, r2
    1bd2:	f43f af72 	beq.w	1aba <follow_path+0x7e>
    1bd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bda:	2a00      	cmp	r2, #0
    1bdc:	d1f8      	bne.n	1bd0 <follow_path+0x194>
			if (IsUpper(c)) {			/* ASCII large capital? */
    1bde:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1be2:	b2d2      	uxtb	r2, r2
    1be4:	2a19      	cmp	r2, #25
    1be6:	f63f af6b 	bhi.w	1ac0 <follow_path+0x84>
				b |= 2;
    1bea:	f04c 0c02 	orr.w	ip, ip, #2
			sfn[i++] = c;
    1bee:	543b      	strb	r3, [r7, r0]
    1bf0:	3001      	adds	r0, #1
    1bf2:	e7d7      	b.n	1ba4 <follow_path+0x168>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1bf4:	f003 0304 	and.w	r3, r3, #4
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	bf14      	ite	ne
    1bfc:	f04f 0904 	movne.w	r9, #4
    1c00:	f04f 0905 	moveq.w	r9, #5
    1c04:	e019      	b.n	1c3a <follow_path+0x1fe>
				res = FR_NO_PATH; break;
    1c06:	f04f 0905 	mov.w	r9, #5
    1c0a:	e016      	b.n	1c3a <follow_path+0x1fe>
		*path = &p[si];									/* Return pointer to the next segment */
    1c0c:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1c0e:	2320      	movs	r3, #32
    1c10:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1c12:	2100      	movs	r1, #0
    1c14:	4628      	mov	r0, r5
    1c16:	4b19      	ldr	r3, [pc, #100]	; (1c7c <follow_path+0x240>)
    1c18:	4798      	blx	r3
	if (res != FR_OK) return res;
    1c1a:	4681      	mov	r9, r0
    1c1c:	b980      	cbnz	r0, 1c40 <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    1c1e:	4e1c      	ldr	r6, [pc, #112]	; (1c90 <follow_path+0x254>)
		res = dir_next(dp, 0);		/* Next entry */
    1c20:	f04f 0b00 	mov.w	fp, #0
    1c24:	e779      	b.n	1b1a <follow_path+0xde>
	*path = &p[si];						/* Return pointer to the next segment */
    1c26:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1c28:	2304      	movs	r3, #4
    1c2a:	e001      	b.n	1c30 <follow_path+0x1f4>
	*path = &p[si];						/* Return pointer to the next segment */
    1c2c:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1c2e:	2300      	movs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1c30:	2800      	cmp	r0, #0
    1c32:	f47f af50 	bne.w	1ad6 <follow_path+0x9a>
			res = dir_find(dp);				/* Find an object with the sagment name */
    1c36:	f04f 0906 	mov.w	r9, #6
}
    1c3a:	4648      	mov	r0, r9
    1c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ns = dp->fn[NSFLAG];
    1c40:	69ab      	ldr	r3, [r5, #24]
    1c42:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
    1c44:	f1b9 0f04 	cmp.w	r9, #4
    1c48:	d1f7      	bne.n	1c3a <follow_path+0x1fe>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
    1c4a:	f013 0f20 	tst.w	r3, #32
    1c4e:	d0d1      	beq.n	1bf4 <follow_path+0x1b8>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
    1c50:	2200      	movs	r2, #0
    1c52:	60aa      	str	r2, [r5, #8]
    1c54:	616a      	str	r2, [r5, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    1c56:	f013 0f04 	tst.w	r3, #4
    1c5a:	d087      	beq.n	1b6c <follow_path+0x130>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
    1c5c:	4691      	mov	r9, r2
    1c5e:	e7ec      	b.n	1c3a <follow_path+0x1fe>
			ns = dp->fn[NSFLAG];
    1c60:	69ab      	ldr	r3, [r5, #24]
    1c62:	7adb      	ldrb	r3, [r3, #11]
    1c64:	e7f1      	b.n	1c4a <follow_path+0x20e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1c66:	f1b9 0f08 	cmp.w	r9, #8
    1c6a:	d1e4      	bne.n	1c36 <follow_path+0x1fa>
			b <<= 2; continue;
    1c6c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1c70:	fa5f fc8c 	uxtb.w	ip, ip
			i = 8; ni = 11;
    1c74:	4648      	mov	r0, r9
    1c76:	46d9      	mov	r9, fp
    1c78:	e794      	b.n	1ba4 <follow_path+0x168>
    1c7a:	bf00      	nop
    1c7c:	00001651 	.word	0x00001651
    1c80:	0000bb44 	.word	0x0000bb44
    1c84:	00000e73 	.word	0x00000e73
    1c88:	00000e65 	.word	0x00000e65
    1c8c:	0000bbf5 	.word	0x0000bbf5
    1c90:	00000fc5 	.word	0x00000fc5
    1c94:	0000190d 	.word	0x0000190d

00001c98 <dir_alloc>:
{
    1c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c9c:	4604      	mov	r4, r0
    1c9e:	4689      	mov	r9, r1
	res = dir_sdi(dp, 0);
    1ca0:	2100      	movs	r1, #0
    1ca2:	4b12      	ldr	r3, [pc, #72]	; (1cec <dir_alloc+0x54>)
    1ca4:	4798      	blx	r3
	if (res == FR_OK) {
    1ca6:	4603      	mov	r3, r0
    1ca8:	b9d0      	cbnz	r0, 1ce0 <dir_alloc+0x48>
    1caa:	2500      	movs	r5, #0
			res = move_window(dp->fs, dp->sect);
    1cac:	4e10      	ldr	r6, [pc, #64]	; (1cf0 <dir_alloc+0x58>)
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1cae:	f04f 0801 	mov.w	r8, #1
    1cb2:	4f10      	ldr	r7, [pc, #64]	; (1cf4 <dir_alloc+0x5c>)
    1cb4:	e007      	b.n	1cc6 <dir_alloc+0x2e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    1cb6:	3501      	adds	r5, #1
    1cb8:	454d      	cmp	r5, r9
    1cba:	d014      	beq.n	1ce6 <dir_alloc+0x4e>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1cbc:	4641      	mov	r1, r8
    1cbe:	4620      	mov	r0, r4
    1cc0:	47b8      	blx	r7
		} while (res == FR_OK);
    1cc2:	4603      	mov	r3, r0
    1cc4:	b960      	cbnz	r0, 1ce0 <dir_alloc+0x48>
			res = move_window(dp->fs, dp->sect);
    1cc6:	6921      	ldr	r1, [r4, #16]
    1cc8:	6820      	ldr	r0, [r4, #0]
    1cca:	47b0      	blx	r6
			if (res != FR_OK) break;
    1ccc:	4603      	mov	r3, r0
    1cce:	b938      	cbnz	r0, 1ce0 <dir_alloc+0x48>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    1cd0:	6962      	ldr	r2, [r4, #20]
    1cd2:	7812      	ldrb	r2, [r2, #0]
    1cd4:	2ae5      	cmp	r2, #229	; 0xe5
    1cd6:	d0ee      	beq.n	1cb6 <dir_alloc+0x1e>
    1cd8:	2a00      	cmp	r2, #0
    1cda:	d0ec      	beq.n	1cb6 <dir_alloc+0x1e>
				n = 0;					/* Not a blank entry. Restart to search */
    1cdc:	2500      	movs	r5, #0
    1cde:	e7ed      	b.n	1cbc <dir_alloc+0x24>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1ce0:	2b04      	cmp	r3, #4
    1ce2:	bf08      	it	eq
    1ce4:	2307      	moveq	r3, #7
}
    1ce6:	4618      	mov	r0, r3
    1ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cec:	00001651 	.word	0x00001651
    1cf0:	00000fc5 	.word	0x00000fc5
    1cf4:	0000190d 	.word	0x0000190d

00001cf8 <dir_register>:
{
    1cf8:	b538      	push	{r3, r4, r5, lr}
    1cfa:	4605      	mov	r5, r0
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
    1cfc:	2101      	movs	r1, #1
    1cfe:	4b0d      	ldr	r3, [pc, #52]	; (1d34 <dir_register+0x3c>)
    1d00:	4798      	blx	r3
	if (res == FR_OK) {				/* Set SFN entry */
    1d02:	4604      	mov	r4, r0
    1d04:	b108      	cbz	r0, 1d0a <dir_register+0x12>
}
    1d06:	4620      	mov	r0, r4
    1d08:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(dp->fs, dp->sect);
    1d0a:	6929      	ldr	r1, [r5, #16]
    1d0c:	6828      	ldr	r0, [r5, #0]
    1d0e:	4b0a      	ldr	r3, [pc, #40]	; (1d38 <dir_register+0x40>)
    1d10:	4798      	blx	r3
		if (res == FR_OK) {
    1d12:	4604      	mov	r4, r0
    1d14:	2800      	cmp	r0, #0
    1d16:	d1f6      	bne.n	1d06 <dir_register+0xe>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    1d18:	2220      	movs	r2, #32
    1d1a:	2100      	movs	r1, #0
    1d1c:	6968      	ldr	r0, [r5, #20]
    1d1e:	4b07      	ldr	r3, [pc, #28]	; (1d3c <dir_register+0x44>)
    1d20:	4798      	blx	r3
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1d22:	220b      	movs	r2, #11
    1d24:	69a9      	ldr	r1, [r5, #24]
    1d26:	6968      	ldr	r0, [r5, #20]
    1d28:	4b05      	ldr	r3, [pc, #20]	; (1d40 <dir_register+0x48>)
    1d2a:	4798      	blx	r3
			dp->fs->wflag = 1;
    1d2c:	682b      	ldr	r3, [r5, #0]
    1d2e:	2201      	movs	r2, #1
    1d30:	711a      	strb	r2, [r3, #4]
    1d32:	e7e8      	b.n	1d06 <dir_register+0xe>
    1d34:	00001c99 	.word	0x00001c99
    1d38:	00000fc5 	.word	0x00000fc5
    1d3c:	00000e65 	.word	0x00000e65
    1d40:	00000e51 	.word	0x00000e51

00001d44 <dir_read>:
{
    1d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d48:	4604      	mov	r4, r0
    1d4a:	4688      	mov	r8, r1
	res = FR_NO_FILE;
    1d4c:	f04f 0e04 	mov.w	lr, #4
		res = move_window(dp->fs, dp->sect);
    1d50:	4d16      	ldr	r5, [pc, #88]	; (1dac <dir_read+0x68>)
		res = dir_next(dp, 0);				/* Next entry */
    1d52:	2700      	movs	r7, #0
    1d54:	4e16      	ldr	r6, [pc, #88]	; (1db0 <dir_read+0x6c>)
	while (dp->sect) {
    1d56:	e004      	b.n	1d62 <dir_read+0x1e>
		res = dir_next(dp, 0);				/* Next entry */
    1d58:	4639      	mov	r1, r7
    1d5a:	4620      	mov	r0, r4
    1d5c:	47b0      	blx	r6
		if (res != FR_OK) break;
    1d5e:	4686      	mov	lr, r0
    1d60:	b9f0      	cbnz	r0, 1da0 <dir_read+0x5c>
	while (dp->sect) {
    1d62:	6921      	ldr	r1, [r4, #16]
    1d64:	b1b1      	cbz	r1, 1d94 <dir_read+0x50>
		res = move_window(dp->fs, dp->sect);
    1d66:	6820      	ldr	r0, [r4, #0]
    1d68:	47a8      	blx	r5
		if (res != FR_OK) break;
    1d6a:	4686      	mov	lr, r0
    1d6c:	b9c0      	cbnz	r0, 1da0 <dir_read+0x5c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1d6e:	6963      	ldr	r3, [r4, #20]
		c = dir[DIR_Name];
    1d70:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1d72:	b19a      	cbz	r2, 1d9c <dir_read+0x58>
		a = dir[DIR_Attr] & AM_MASK;
    1d74:	7adb      	ldrb	r3, [r3, #11]
    1d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
    1d7a:	2ae5      	cmp	r2, #229	; 0xe5
    1d7c:	d0ec      	beq.n	1d58 <dir_read+0x14>
    1d7e:	2b0f      	cmp	r3, #15
    1d80:	d0ea      	beq.n	1d58 <dir_read+0x14>
    1d82:	f023 0320 	bic.w	r3, r3, #32
    1d86:	2b08      	cmp	r3, #8
    1d88:	bf14      	ite	ne
    1d8a:	2300      	movne	r3, #0
    1d8c:	2301      	moveq	r3, #1
    1d8e:	4543      	cmp	r3, r8
    1d90:	d1e2      	bne.n	1d58 <dir_read+0x14>
    1d92:	e007      	b.n	1da4 <dir_read+0x60>
	if (res != FR_OK) dp->sect = 0;
    1d94:	f1be 0f00 	cmp.w	lr, #0
    1d98:	d004      	beq.n	1da4 <dir_read+0x60>
    1d9a:	e001      	b.n	1da0 <dir_read+0x5c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1d9c:	f04f 0e04 	mov.w	lr, #4
	if (res != FR_OK) dp->sect = 0;
    1da0:	2300      	movs	r3, #0
    1da2:	6123      	str	r3, [r4, #16]
}
    1da4:	4670      	mov	r0, lr
    1da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1daa:	bf00      	nop
    1dac:	00000fc5 	.word	0x00000fc5
    1db0:	0000190d 	.word	0x0000190d

00001db4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1db4:	2901      	cmp	r1, #1
    1db6:	d930      	bls.n	1e1a <remove_chain+0x66>
{
    1db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1dbc:	4604      	mov	r4, r0
    1dbe:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1dc0:	6983      	ldr	r3, [r0, #24]
    1dc2:	4299      	cmp	r1, r3
    1dc4:	d303      	bcc.n	1dce <remove_chain+0x1a>
		res = FR_INT_ERR;
    1dc6:	2202      	movs	r2, #2
}
    1dc8:	4610      	mov	r0, r2
    1dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1dce:	4f17      	ldr	r7, [pc, #92]	; (1e2c <remove_chain+0x78>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1dd0:	f04f 0900 	mov.w	r9, #0
    1dd4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1e30 <remove_chain+0x7c>
    1dd8:	e003      	b.n	1de2 <remove_chain+0x2e>
    1dda:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1ddc:	69a3      	ldr	r3, [r4, #24]
    1dde:	42ab      	cmp	r3, r5
    1de0:	d9f2      	bls.n	1dc8 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1de2:	4631      	mov	r1, r6
    1de4:	4620      	mov	r0, r4
    1de6:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
    1de8:	4605      	mov	r5, r0
    1dea:	b1c8      	cbz	r0, 1e20 <remove_chain+0x6c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1dec:	2801      	cmp	r0, #1
    1dee:	d019      	beq.n	1e24 <remove_chain+0x70>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1df0:	f1b0 3fff 	cmp.w	r0, #4294967295
    1df4:	d018      	beq.n	1e28 <remove_chain+0x74>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1df6:	464a      	mov	r2, r9
    1df8:	4631      	mov	r1, r6
    1dfa:	4620      	mov	r0, r4
    1dfc:	47c0      	blx	r8
			if (res != FR_OK) break;
    1dfe:	4602      	mov	r2, r0
    1e00:	2800      	cmp	r0, #0
    1e02:	d1e1      	bne.n	1dc8 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1e04:	6923      	ldr	r3, [r4, #16]
    1e06:	f1b3 3fff 	cmp.w	r3, #4294967295
    1e0a:	d0e6      	beq.n	1dda <remove_chain+0x26>
				fs->free_clust++;
    1e0c:	3301      	adds	r3, #1
    1e0e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
    1e10:	7963      	ldrb	r3, [r4, #5]
    1e12:	f043 0301 	orr.w	r3, r3, #1
    1e16:	7163      	strb	r3, [r4, #5]
    1e18:	e7df      	b.n	1dda <remove_chain+0x26>
		res = FR_INT_ERR;
    1e1a:	2202      	movs	r2, #2
}
    1e1c:	4610      	mov	r0, r2
    1e1e:	4770      	bx	lr
    1e20:	2200      	movs	r2, #0
    1e22:	e7d1      	b.n	1dc8 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1e24:	2202      	movs	r2, #2
    1e26:	e7cf      	b.n	1dc8 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1e28:	2201      	movs	r2, #1
    1e2a:	e7cd      	b.n	1dc8 <remove_chain+0x14>
    1e2c:	0000156d 	.word	0x0000156d
    1e30:	0000170d 	.word	0x0000170d

00001e34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1e34:	b510      	push	{r4, lr}
    1e36:	b084      	sub	sp, #16
    1e38:	9001      	str	r0, [sp, #4]
    1e3a:	9100      	str	r1, [sp, #0]
    1e3c:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1e3e:	a804      	add	r0, sp, #16
    1e40:	f840 1d04 	str.w	r1, [r0, #-4]!

	vol = get_ldnumber(&rp);
    1e44:	4b13      	ldr	r3, [pc, #76]	; (1e94 <f_mount+0x60>)
    1e46:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    1e48:	2800      	cmp	r0, #0
    1e4a:	db18      	blt.n	1e7e <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1e4c:	4b12      	ldr	r3, [pc, #72]	; (1e98 <f_mount+0x64>)
    1e4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
    1e52:	b10b      	cbz	r3, 1e58 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1e54:	2200      	movs	r2, #0
    1e56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    1e58:	9b01      	ldr	r3, [sp, #4]
    1e5a:	b1ab      	cbz	r3, 1e88 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
    1e5c:	2200      	movs	r2, #0
    1e5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1e60:	9b01      	ldr	r3, [sp, #4]
    1e62:	4a0d      	ldr	r2, [pc, #52]	; (1e98 <f_mount+0x64>)
    1e64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1e68:	b163      	cbz	r3, 1e84 <f_mount+0x50>
    1e6a:	2c01      	cmp	r4, #1
    1e6c:	d001      	beq.n	1e72 <f_mount+0x3e>
    1e6e:	2000      	movs	r0, #0
    1e70:	e006      	b.n	1e80 <f_mount+0x4c>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    1e72:	2200      	movs	r2, #0
    1e74:	4669      	mov	r1, sp
    1e76:	a801      	add	r0, sp, #4
    1e78:	4b08      	ldr	r3, [pc, #32]	; (1e9c <f_mount+0x68>)
    1e7a:	4798      	blx	r3
	LEAVE_FF(fs, res);
    1e7c:	e000      	b.n	1e80 <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
    1e7e:	200b      	movs	r0, #11
}
    1e80:	b004      	add	sp, #16
    1e82:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1e84:	2000      	movs	r0, #0
    1e86:	e7fb      	b.n	1e80 <f_mount+0x4c>
	FatFs[vol] = fs;					/* Register new fs object */
    1e88:	2300      	movs	r3, #0
    1e8a:	4a03      	ldr	r2, [pc, #12]	; (1e98 <f_mount+0x64>)
    1e8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1e90:	4618      	mov	r0, r3
    1e92:	e7f5      	b.n	1e80 <f_mount+0x4c>
    1e94:	00000eff 	.word	0x00000eff
    1e98:	20000990 	.word	0x20000990
    1e9c:	000010d1 	.word	0x000010d1

00001ea0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ea4:	b08e      	sub	sp, #56	; 0x38
    1ea6:	9101      	str	r1, [sp, #4]
	DEFINE_NAMEBUF;
#if !_FS_READONLY
	DWORD dw, cl;
#endif

	if (!fp) return FR_INVALID_OBJECT;
    1ea8:	2800      	cmp	r0, #0
    1eaa:	f000 80ac 	beq.w	2006 <f_open+0x166>
    1eae:	4604      	mov	r4, r0
    1eb0:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
    1eb2:	2300      	movs	r3, #0
    1eb4:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1eb6:	f002 021e 	and.w	r2, r2, #30
    1eba:	a901      	add	r1, sp, #4
    1ebc:	a806      	add	r0, sp, #24
    1ebe:	4b5c      	ldr	r3, [pc, #368]	; (2030 <f_open+0x190>)
    1ec0:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1ec2:	4606      	mov	r6, r0
    1ec4:	2800      	cmp	r0, #0
    1ec6:	f040 809f 	bne.w	2008 <f_open+0x168>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1eca:	f005 081f 	and.w	r8, r5, #31
		INIT_BUF(dj);
    1ece:	ab03      	add	r3, sp, #12
    1ed0:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&dj, path);	/* Follow the file path */
    1ed2:	9901      	ldr	r1, [sp, #4]
    1ed4:	a806      	add	r0, sp, #24
    1ed6:	4b57      	ldr	r3, [pc, #348]	; (2034 <f_open+0x194>)
    1ed8:	4798      	blx	r3
		dir = dj.dir;
    1eda:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1edc:	4603      	mov	r3, r0
    1ede:	2800      	cmp	r0, #0
    1ee0:	d139      	bne.n	1f56 <f_open+0xb6>
			if (!dir)	/* Default directory itself */
    1ee2:	2f00      	cmp	r7, #0
    1ee4:	f000 8094 	beq.w	2010 <f_open+0x170>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1ee8:	f015 0f1c 	tst.w	r5, #28
    1eec:	d148      	bne.n	1f80 <f_open+0xe0>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    1eee:	7afb      	ldrb	r3, [r7, #11]
    1ef0:	f013 0f10 	tst.w	r3, #16
    1ef4:	f040 8099 	bne.w	202a <f_open+0x18a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1ef8:	f015 0f02 	tst.w	r5, #2
    1efc:	d003      	beq.n	1f06 <f_open+0x66>
    1efe:	f013 0f01 	tst.w	r3, #1
    1f02:	f040 8090 	bne.w	2026 <f_open+0x186>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    1f06:	f015 0f08 	tst.w	r5, #8
    1f0a:	d001      	beq.n	1f10 <f_open+0x70>
				mode |= FA__WRITTEN;
    1f0c:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1f10:	9b06      	ldr	r3, [sp, #24]
    1f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1f14:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
    1f16:	6227      	str	r7, [r4, #32]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1f18:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
    1f1c:	f04f 0800 	mov.w	r8, #0
    1f20:	f884 8007 	strb.w	r8, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    1f24:	9d06      	ldr	r5, [sp, #24]
    1f26:	4639      	mov	r1, r7
    1f28:	4628      	mov	r0, r5
    1f2a:	4b43      	ldr	r3, [pc, #268]	; (2038 <f_open+0x198>)
    1f2c:	4798      	blx	r3
    1f2e:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    1f30:	7ffa      	ldrb	r2, [r7, #31]
    1f32:	7fbb      	ldrb	r3, [r7, #30]
    1f34:	041b      	lsls	r3, r3, #16
    1f36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1f3a:	7f3a      	ldrb	r2, [r7, #28]
    1f3c:	4313      	orrs	r3, r2
    1f3e:	7f7a      	ldrb	r2, [r7, #29]
    1f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1f44:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
    1f46:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->dsect = 0;
    1f4a:	f8c4 8018 	str.w	r8, [r4, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    1f4e:	6025      	str	r5, [r4, #0]
			fp->id = fp->fs->id;
    1f50:	88eb      	ldrh	r3, [r5, #6]
    1f52:	80a3      	strh	r3, [r4, #4]
    1f54:	e058      	b.n	2008 <f_open+0x168>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1f56:	f015 0f1c 	tst.w	r5, #28
    1f5a:	d004      	beq.n	1f66 <f_open+0xc6>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1f5c:	2804      	cmp	r0, #4
    1f5e:	d006      	beq.n	1f6e <f_open+0xce>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1f60:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1f64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		if (res == FR_OK) {
    1f66:	2b00      	cmp	r3, #0
    1f68:	d0d6      	beq.n	1f18 <f_open+0x78>
    1f6a:	461e      	mov	r6, r3
    1f6c:	e04c      	b.n	2008 <f_open+0x168>
					res = dir_register(&dj);
    1f6e:	a806      	add	r0, sp, #24
    1f70:	4b32      	ldr	r3, [pc, #200]	; (203c <f_open+0x19c>)
    1f72:	4798      	blx	r3
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1f74:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1f78:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1f7a:	b140      	cbz	r0, 1f8e <f_open+0xee>
					res = dir_register(&dj);
    1f7c:	4606      	mov	r6, r0
    1f7e:	e043      	b.n	2008 <f_open+0x168>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1f80:	7afb      	ldrb	r3, [r7, #11]
    1f82:	f013 0f11 	tst.w	r3, #17
    1f86:	d14a      	bne.n	201e <f_open+0x17e>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1f88:	f015 0f04 	tst.w	r5, #4
    1f8c:	d149      	bne.n	2022 <f_open+0x182>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1f8e:	f018 0f08 	tst.w	r8, #8
    1f92:	d0bd      	beq.n	1f10 <f_open+0x70>
				dw = GET_FATTIME();
    1f94:	4b2a      	ldr	r3, [pc, #168]	; (2040 <f_open+0x1a0>)
    1f96:	4798      	blx	r3
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
    1f98:	b2c1      	uxtb	r1, r0
    1f9a:	73b9      	strb	r1, [r7, #14]
    1f9c:	f3c0 2207 	ubfx	r2, r0, #8, #8
    1fa0:	73fa      	strb	r2, [r7, #15]
    1fa2:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1fa6:	743b      	strb	r3, [r7, #16]
    1fa8:	0e00      	lsrs	r0, r0, #24
    1faa:	7478      	strb	r0, [r7, #17]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
    1fac:	75b9      	strb	r1, [r7, #22]
    1fae:	75fa      	strb	r2, [r7, #23]
    1fb0:	763b      	strb	r3, [r7, #24]
    1fb2:	7678      	strb	r0, [r7, #25]
				dir[DIR_Attr] = 0;				/* Reset attribute */
    1fb4:	2500      	movs	r5, #0
    1fb6:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
    1fb8:	773d      	strb	r5, [r7, #28]
    1fba:	777d      	strb	r5, [r7, #29]
    1fbc:	77bd      	strb	r5, [r7, #30]
    1fbe:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get cluster chain */
    1fc0:	f8dd 9018 	ldr.w	r9, [sp, #24]
    1fc4:	4639      	mov	r1, r7
    1fc6:	4648      	mov	r0, r9
    1fc8:	4b1b      	ldr	r3, [pc, #108]	; (2038 <f_open+0x198>)
    1fca:	4798      	blx	r3
	ST_WORD(dir + DIR_FstClusLO, cl);
    1fcc:	76bd      	strb	r5, [r7, #26]
    1fce:	76fd      	strb	r5, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    1fd0:	753d      	strb	r5, [r7, #20]
    1fd2:	757d      	strb	r5, [r7, #21]
				dj.fs->wflag = 1;
    1fd4:	2301      	movs	r3, #1
    1fd6:	f889 3004 	strb.w	r3, [r9, #4]
				if (cl) {						/* Remove the cluster chain if exist */
    1fda:	4605      	mov	r5, r0
    1fdc:	2800      	cmp	r0, #0
    1fde:	d095      	beq.n	1f0c <f_open+0x6c>
					dw = dj.fs->winsect;
    1fe0:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
					res = remove_chain(dj.fs, cl);
    1fe4:	4601      	mov	r1, r0
    1fe6:	4648      	mov	r0, r9
    1fe8:	4b16      	ldr	r3, [pc, #88]	; (2044 <f_open+0x1a4>)
    1fea:	4798      	blx	r3
					if (res == FR_OK) {
    1fec:	b108      	cbz	r0, 1ff2 <f_open+0x152>
					res = remove_chain(dj.fs, cl);
    1fee:	4606      	mov	r6, r0
    1ff0:	e00a      	b.n	2008 <f_open+0x168>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1ff2:	9806      	ldr	r0, [sp, #24]
    1ff4:	3d01      	subs	r5, #1
    1ff6:	60c5      	str	r5, [r0, #12]
						res = move_window(dj.fs, dw);
    1ff8:	4651      	mov	r1, sl
    1ffa:	4b13      	ldr	r3, [pc, #76]	; (2048 <f_open+0x1a8>)
    1ffc:	4798      	blx	r3
		if (res == FR_OK) {
    1ffe:	2800      	cmp	r0, #0
    2000:	d084      	beq.n	1f0c <f_open+0x6c>
						res = move_window(dj.fs, dw);
    2002:	4606      	mov	r6, r0
    2004:	e000      	b.n	2008 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
    2006:	2609      	movs	r6, #9
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2008:	4630      	mov	r0, r6
    200a:	b00e      	add	sp, #56	; 0x38
    200c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2010:	f015 0f1c 	tst.w	r5, #28
    2014:	d101      	bne.n	201a <f_open+0x17a>
				res = FR_INVALID_NAME;
    2016:	2306      	movs	r3, #6
    2018:	e7a5      	b.n	1f66 <f_open+0xc6>
    201a:	2306      	movs	r3, #6
    201c:	e7a0      	b.n	1f60 <f_open+0xc0>
					res = FR_DENIED;
    201e:	2607      	movs	r6, #7
    2020:	e7f2      	b.n	2008 <f_open+0x168>
						res = FR_EXIST;
    2022:	2608      	movs	r6, #8
    2024:	e7f0      	b.n	2008 <f_open+0x168>
						res = FR_DENIED;
    2026:	2607      	movs	r6, #7
    2028:	e7ee      	b.n	2008 <f_open+0x168>
					res = FR_NO_FILE;
    202a:	2604      	movs	r6, #4
    202c:	e7ec      	b.n	2008 <f_open+0x168>
    202e:	bf00      	nop
    2030:	000010d1 	.word	0x000010d1
    2034:	00001a3d 	.word	0x00001a3d
    2038:	00000e73 	.word	0x00000e73
    203c:	00001cf9 	.word	0x00001cf9
    2040:	00000c11 	.word	0x00000c11
    2044:	00001db5 	.word	0x00001db5
    2048:	00000fc5 	.word	0x00000fc5

0000204c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2050:	b083      	sub	sp, #12
    2052:	4605      	mov	r5, r0
    2054:	4688      	mov	r8, r1
    2056:	4614      	mov	r4, r2
    2058:	4699      	mov	r9, r3
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;

	*br = 0;	/* Clear read byte counter */
    205a:	2300      	movs	r3, #0
    205c:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp);							/* Check validity */
    2060:	4b4f      	ldr	r3, [pc, #316]	; (21a0 <f_read+0x154>)
    2062:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2064:	9001      	str	r0, [sp, #4]
    2066:	b948      	cbnz	r0, 207c <f_read+0x30>
	if (fp->err)								/* Check error */
    2068:	79eb      	ldrb	r3, [r5, #7]
    206a:	2b00      	cmp	r3, #0
    206c:	f040 8096 	bne.w	219c <f_read+0x150>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    2070:	79ab      	ldrb	r3, [r5, #6]
    2072:	f013 0f01 	tst.w	r3, #1
    2076:	d105      	bne.n	2084 <f_read+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
    2078:	2307      	movs	r3, #7
    207a:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    207c:	9801      	ldr	r0, [sp, #4]
    207e:	b003      	add	sp, #12
    2080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->fsize - fp->fptr;
    2084:	68ee      	ldr	r6, [r5, #12]
    2086:	68ab      	ldr	r3, [r5, #8]
    2088:	1af6      	subs	r6, r6, r3
    208a:	42a6      	cmp	r6, r4
    208c:	bf28      	it	cs
    208e:	4626      	movcs	r6, r4
	for ( ;  btr;								/* Repeat until all data read */
    2090:	2e00      	cmp	r6, #0
    2092:	d140      	bne.n	2116 <f_read+0xca>
    2094:	e7f2      	b.n	207c <f_read+0x30>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    2096:	6969      	ldr	r1, [r5, #20]
    2098:	4b42      	ldr	r3, [pc, #264]	; (21a4 <f_read+0x158>)
    209a:	4798      	blx	r3
    209c:	e04b      	b.n	2136 <f_read+0xea>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    209e:	2302      	movs	r3, #2
    20a0:	71eb      	strb	r3, [r5, #7]
    20a2:	9301      	str	r3, [sp, #4]
    20a4:	e7ea      	b.n	207c <f_read+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    20a6:	2301      	movs	r3, #1
    20a8:	71eb      	strb	r3, [r5, #7]
    20aa:	9301      	str	r3, [sp, #4]
    20ac:	e7e6      	b.n	207c <f_read+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    20ae:	2302      	movs	r3, #2
    20b0:	71eb      	strb	r3, [r5, #7]
    20b2:	9301      	str	r3, [sp, #4]
    20b4:	e7e2      	b.n	207c <f_read+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    20b6:	2301      	movs	r3, #1
    20b8:	71eb      	strb	r3, [r5, #7]
    20ba:	9301      	str	r3, [sp, #4]
    20bc:	e7de      	b.n	207c <f_read+0x30>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    20be:	f44f 7200 	mov.w	r2, #512	; 0x200
    20c2:	3134      	adds	r1, #52	; 0x34
    20c4:	eb08 2040 	add.w	r0, r8, r0, lsl #9
    20c8:	4b37      	ldr	r3, [pc, #220]	; (21a8 <f_read+0x15c>)
    20ca:	4798      	blx	r3
    20cc:	e05f      	b.n	218e <f_read+0x142>
			fp->dsect = sect;
    20ce:	61ac      	str	r4, [r5, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    20d0:	68ac      	ldr	r4, [r5, #8]
    20d2:	f3c4 0408 	ubfx	r4, r4, #0, #9
    20d6:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
    20da:	42b4      	cmp	r4, r6
    20dc:	bf28      	it	cs
    20de:	4634      	movcs	r4, r6
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
    20e0:	69a9      	ldr	r1, [r5, #24]
    20e2:	6828      	ldr	r0, [r5, #0]
    20e4:	4b31      	ldr	r3, [pc, #196]	; (21ac <f_read+0x160>)
    20e6:	4798      	blx	r3
    20e8:	2800      	cmp	r0, #0
    20ea:	d153      	bne.n	2194 <f_read+0x148>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    20ec:	68a9      	ldr	r1, [r5, #8]
    20ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
    20f2:	3134      	adds	r1, #52	; 0x34
    20f4:	682b      	ldr	r3, [r5, #0]
    20f6:	4622      	mov	r2, r4
    20f8:	4419      	add	r1, r3
    20fa:	4640      	mov	r0, r8
    20fc:	4b2a      	ldr	r3, [pc, #168]	; (21a8 <f_read+0x15c>)
    20fe:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2100:	44a0      	add	r8, r4
    2102:	68ab      	ldr	r3, [r5, #8]
    2104:	4423      	add	r3, r4
    2106:	60ab      	str	r3, [r5, #8]
    2108:	f8d9 3000 	ldr.w	r3, [r9]
    210c:	4423      	add	r3, r4
    210e:	f8c9 3000 	str.w	r3, [r9]
	for ( ;  btr;								/* Repeat until all data read */
    2112:	1b36      	subs	r6, r6, r4
    2114:	d0b2      	beq.n	207c <f_read+0x30>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    2116:	68aa      	ldr	r2, [r5, #8]
    2118:	f3c2 0308 	ubfx	r3, r2, #0, #9
    211c:	2b00      	cmp	r3, #0
    211e:	d1d7      	bne.n	20d0 <f_read+0x84>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2120:	6828      	ldr	r0, [r5, #0]
    2122:	7883      	ldrb	r3, [r0, #2]
    2124:	3b01      	subs	r3, #1
    2126:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
    212a:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    212e:	d108      	bne.n	2142 <f_read+0xf6>
				if (fp->fptr == 0) {			/* On the top of the file? */
    2130:	2a00      	cmp	r2, #0
    2132:	d1b0      	bne.n	2096 <f_read+0x4a>
					clst = fp->sclust;			/* Follow from the origin */
    2134:	6928      	ldr	r0, [r5, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    2136:	2801      	cmp	r0, #1
    2138:	d9b1      	bls.n	209e <f_read+0x52>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    213a:	f1b0 3fff 	cmp.w	r0, #4294967295
    213e:	d0b2      	beq.n	20a6 <f_read+0x5a>
				fp->clust = clst;				/* Update current cluster */
    2140:	6168      	str	r0, [r5, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2142:	f8d5 a000 	ldr.w	sl, [r5]
    2146:	6969      	ldr	r1, [r5, #20]
    2148:	4650      	mov	r0, sl
    214a:	4b19      	ldr	r3, [pc, #100]	; (21b0 <f_read+0x164>)
    214c:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    214e:	4604      	mov	r4, r0
    2150:	2800      	cmp	r0, #0
    2152:	d0ac      	beq.n	20ae <f_read+0x62>
			sect += csect;
    2154:	443c      	add	r4, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
    2156:	ea5f 2b56 	movs.w	fp, r6, lsr #9
    215a:	d0b8      	beq.n	20ce <f_read+0x82>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    215c:	f89a 3002 	ldrb.w	r3, [sl, #2]
    2160:	eb07 020b 	add.w	r2, r7, fp
    2164:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    2166:	bf88      	it	hi
    2168:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
    216c:	fa5f f38b 	uxtb.w	r3, fp
    2170:	4622      	mov	r2, r4
    2172:	4641      	mov	r1, r8
    2174:	f89a 0001 	ldrb.w	r0, [sl, #1]
    2178:	4f0e      	ldr	r7, [pc, #56]	; (21b4 <f_read+0x168>)
    217a:	47b8      	blx	r7
    217c:	2800      	cmp	r0, #0
    217e:	d19a      	bne.n	20b6 <f_read+0x6a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    2180:	6829      	ldr	r1, [r5, #0]
    2182:	790b      	ldrb	r3, [r1, #4]
    2184:	b11b      	cbz	r3, 218e <f_read+0x142>
    2186:	6b08      	ldr	r0, [r1, #48]	; 0x30
    2188:	1b00      	subs	r0, r0, r4
    218a:	4583      	cmp	fp, r0
    218c:	d897      	bhi.n	20be <f_read+0x72>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    218e:	ea4f 244b 	mov.w	r4, fp, lsl #9
				continue;
    2192:	e7b5      	b.n	2100 <f_read+0xb4>
			ABORT(fp->fs, FR_DISK_ERR);
    2194:	2301      	movs	r3, #1
    2196:	71eb      	strb	r3, [r5, #7]
    2198:	9301      	str	r3, [sp, #4]
    219a:	e76f      	b.n	207c <f_read+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    219c:	9301      	str	r3, [sp, #4]
    219e:	e76d      	b.n	207c <f_read+0x30>
    21a0:	00001095 	.word	0x00001095
    21a4:	0000156d 	.word	0x0000156d
    21a8:	00000e51 	.word	0x00000e51
    21ac:	00000fc5 	.word	0x00000fc5
    21b0:	00001555 	.word	0x00001555
    21b4:	00000405 	.word	0x00000405

000021b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    21b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21bc:	b083      	sub	sp, #12
    21be:	4604      	mov	r4, r0
    21c0:	4689      	mov	r9, r1
    21c2:	4616      	mov	r6, r2
    21c4:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;

	*bw = 0;	/* Clear write byte counter */
    21c6:	2300      	movs	r3, #0
    21c8:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp);						/* Check validity */
    21cc:	4b69      	ldr	r3, [pc, #420]	; (2374 <f_write+0x1bc>)
    21ce:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    21d0:	9001      	str	r0, [sp, #4]
    21d2:	b948      	cbnz	r0, 21e8 <f_write+0x30>
	if (fp->err)							/* Check error */
    21d4:	79e3      	ldrb	r3, [r4, #7]
    21d6:	2b00      	cmp	r3, #0
    21d8:	f040 80c9 	bne.w	236e <f_write+0x1b6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    21dc:	79a3      	ldrb	r3, [r4, #6]
    21de:	f013 0f02 	tst.w	r3, #2
    21e2:	d105      	bne.n	21f0 <f_write+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
    21e4:	2307      	movs	r3, #7
    21e6:	9301      	str	r3, [sp, #4]

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    21e8:	9801      	ldr	r0, [sp, #4]
    21ea:	b003      	add	sp, #12
    21ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    21f0:	68a3      	ldr	r3, [r4, #8]
    21f2:	42f3      	cmn	r3, r6
    21f4:	d20d      	bcs.n	2212 <f_write+0x5a>
	for ( ;  btw;							/* Repeat until all data written */
    21f6:	2e00      	cmp	r6, #0
    21f8:	d163      	bne.n	22c2 <f_write+0x10a>
    21fa:	e00a      	b.n	2212 <f_write+0x5a>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    21fc:	2100      	movs	r1, #0
    21fe:	4b5e      	ldr	r3, [pc, #376]	; (2378 <f_write+0x1c0>)
    2200:	4798      	blx	r3
    2202:	4603      	mov	r3, r0
    2204:	e003      	b.n	220e <f_write+0x56>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2206:	6961      	ldr	r1, [r4, #20]
    2208:	4b5b      	ldr	r3, [pc, #364]	; (2378 <f_write+0x1c0>)
    220a:	4798      	blx	r3
    220c:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    220e:	2b00      	cmp	r3, #0
    2210:	d169      	bne.n	22e6 <f_write+0x12e>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2212:	68a3      	ldr	r3, [r4, #8]
    2214:	68e2      	ldr	r2, [r4, #12]
    2216:	4293      	cmp	r3, r2
    2218:	bf88      	it	hi
    221a:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    221c:	79a3      	ldrb	r3, [r4, #6]
    221e:	f043 0320 	orr.w	r3, r3, #32
    2222:	71a3      	strb	r3, [r4, #6]
	LEAVE_FF(fp->fs, FR_OK);
    2224:	e7e0      	b.n	21e8 <f_write+0x30>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2226:	2302      	movs	r3, #2
    2228:	71e3      	strb	r3, [r4, #7]
    222a:	9301      	str	r3, [sp, #4]
    222c:	e7dc      	b.n	21e8 <f_write+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    222e:	2301      	movs	r3, #1
    2230:	71e3      	strb	r3, [r4, #7]
    2232:	9301      	str	r3, [sp, #4]
    2234:	e7d8      	b.n	21e8 <f_write+0x30>
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    2236:	4b51      	ldr	r3, [pc, #324]	; (237c <f_write+0x1c4>)
    2238:	4798      	blx	r3
    223a:	2800      	cmp	r0, #0
    223c:	d061      	beq.n	2302 <f_write+0x14a>
				ABORT(fp->fs, FR_DISK_ERR);
    223e:	2301      	movs	r3, #1
    2240:	71e3      	strb	r3, [r4, #7]
    2242:	9301      	str	r3, [sp, #4]
    2244:	e7d0      	b.n	21e8 <f_write+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2246:	2302      	movs	r3, #2
    2248:	71e3      	strb	r3, [r4, #7]
    224a:	9301      	str	r3, [sp, #4]
    224c:	e7cc      	b.n	21e8 <f_write+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    224e:	2301      	movs	r3, #1
    2250:	71e3      	strb	r3, [r4, #7]
    2252:	9301      	str	r3, [sp, #4]
    2254:	e7c8      	b.n	21e8 <f_write+0x30>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2256:	f44f 7200 	mov.w	r2, #512	; 0x200
    225a:	eb09 2141 	add.w	r1, r9, r1, lsl #9
    225e:	3034      	adds	r0, #52	; 0x34
    2260:	4b47      	ldr	r3, [pc, #284]	; (2380 <f_write+0x1c8>)
    2262:	4798      	blx	r3
					fp->fs->wflag = 0;
    2264:	6823      	ldr	r3, [r4, #0]
    2266:	2200      	movs	r2, #0
    2268:	711a      	strb	r2, [r3, #4]
    226a:	e06e      	b.n	234a <f_write+0x192>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    226c:	68a2      	ldr	r2, [r4, #8]
    226e:	68e3      	ldr	r3, [r4, #12]
    2270:	429a      	cmp	r2, r3
    2272:	d26d      	bcs.n	2350 <f_write+0x198>
			fp->dsect = sect;
    2274:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2276:	68a5      	ldr	r5, [r4, #8]
    2278:	f3c5 0508 	ubfx	r5, r5, #0, #9
    227c:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
    2280:	42b5      	cmp	r5, r6
    2282:	bf28      	it	cs
    2284:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    2286:	69a1      	ldr	r1, [r4, #24]
    2288:	6820      	ldr	r0, [r4, #0]
    228a:	4b3e      	ldr	r3, [pc, #248]	; (2384 <f_write+0x1cc>)
    228c:	4798      	blx	r3
    228e:	2800      	cmp	r0, #0
    2290:	d169      	bne.n	2366 <f_write+0x1ae>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2292:	68a0      	ldr	r0, [r4, #8]
    2294:	f3c0 0008 	ubfx	r0, r0, #0, #9
    2298:	3034      	adds	r0, #52	; 0x34
    229a:	6823      	ldr	r3, [r4, #0]
    229c:	462a      	mov	r2, r5
    229e:	4649      	mov	r1, r9
    22a0:	4418      	add	r0, r3
    22a2:	4b37      	ldr	r3, [pc, #220]	; (2380 <f_write+0x1c8>)
    22a4:	4798      	blx	r3
		fp->fs->wflag = 1;
    22a6:	6823      	ldr	r3, [r4, #0]
    22a8:	2201      	movs	r2, #1
    22aa:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    22ac:	44a9      	add	r9, r5
    22ae:	68a3      	ldr	r3, [r4, #8]
    22b0:	442b      	add	r3, r5
    22b2:	60a3      	str	r3, [r4, #8]
    22b4:	f8d8 3000 	ldr.w	r3, [r8]
    22b8:	442b      	add	r3, r5
    22ba:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
    22be:	1b76      	subs	r6, r6, r5
    22c0:	d0a7      	beq.n	2212 <f_write+0x5a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    22c2:	68a2      	ldr	r2, [r4, #8]
    22c4:	f3c2 0308 	ubfx	r3, r2, #0, #9
    22c8:	2b00      	cmp	r3, #0
    22ca:	d1d4      	bne.n	2276 <f_write+0xbe>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    22cc:	6820      	ldr	r0, [r4, #0]
    22ce:	7883      	ldrb	r3, [r0, #2]
    22d0:	3b01      	subs	r3, #1
    22d2:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
    22d6:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    22da:	d10d      	bne.n	22f8 <f_write+0x140>
				if (fp->fptr == 0) {		/* On the top of the file? */
    22dc:	2a00      	cmp	r2, #0
    22de:	d192      	bne.n	2206 <f_write+0x4e>
					clst = fp->sclust;		/* Follow from the origin */
    22e0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    22e2:	2b00      	cmp	r3, #0
    22e4:	d08a      	beq.n	21fc <f_write+0x44>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    22e6:	2b01      	cmp	r3, #1
    22e8:	d09d      	beq.n	2226 <f_write+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    22ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    22ee:	d09e      	beq.n	222e <f_write+0x76>
				fp->clust = clst;			/* Update current cluster */
    22f0:	6163      	str	r3, [r4, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    22f2:	6922      	ldr	r2, [r4, #16]
    22f4:	b902      	cbnz	r2, 22f8 <f_write+0x140>
    22f6:	6123      	str	r3, [r4, #16]
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    22f8:	6820      	ldr	r0, [r4, #0]
    22fa:	6b02      	ldr	r2, [r0, #48]	; 0x30
    22fc:	69a3      	ldr	r3, [r4, #24]
    22fe:	429a      	cmp	r2, r3
    2300:	d099      	beq.n	2236 <f_write+0x7e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2302:	f8d4 a000 	ldr.w	sl, [r4]
    2306:	6961      	ldr	r1, [r4, #20]
    2308:	4650      	mov	r0, sl
    230a:	4b1f      	ldr	r3, [pc, #124]	; (2388 <f_write+0x1d0>)
    230c:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    230e:	4605      	mov	r5, r0
    2310:	2800      	cmp	r0, #0
    2312:	d098      	beq.n	2246 <f_write+0x8e>
			sect += csect;
    2314:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
    2316:	ea5f 2b56 	movs.w	fp, r6, lsr #9
    231a:	d0a7      	beq.n	226c <f_write+0xb4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    231c:	f89a 3002 	ldrb.w	r3, [sl, #2]
    2320:	eb07 020b 	add.w	r2, r7, fp
    2324:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    2326:	bf88      	it	hi
    2328:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    232c:	fa5f f38b 	uxtb.w	r3, fp
    2330:	462a      	mov	r2, r5
    2332:	4649      	mov	r1, r9
    2334:	f89a 0001 	ldrb.w	r0, [sl, #1]
    2338:	4f14      	ldr	r7, [pc, #80]	; (238c <f_write+0x1d4>)
    233a:	47b8      	blx	r7
    233c:	2800      	cmp	r0, #0
    233e:	d186      	bne.n	224e <f_write+0x96>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2340:	6820      	ldr	r0, [r4, #0]
    2342:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2344:	1b49      	subs	r1, r1, r5
    2346:	458b      	cmp	fp, r1
    2348:	d885      	bhi.n	2256 <f_write+0x9e>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    234a:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
    234e:	e7ad      	b.n	22ac <f_write+0xf4>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    2350:	4650      	mov	r0, sl
    2352:	4b0a      	ldr	r3, [pc, #40]	; (237c <f_write+0x1c4>)
    2354:	4798      	blx	r3
    2356:	b910      	cbnz	r0, 235e <f_write+0x1a6>
				fp->fs->winsect = sect;
    2358:	6823      	ldr	r3, [r4, #0]
    235a:	631d      	str	r5, [r3, #48]	; 0x30
    235c:	e78a      	b.n	2274 <f_write+0xbc>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    235e:	2301      	movs	r3, #1
    2360:	71e3      	strb	r3, [r4, #7]
    2362:	9301      	str	r3, [sp, #4]
    2364:	e740      	b.n	21e8 <f_write+0x30>
			ABORT(fp->fs, FR_DISK_ERR);
    2366:	2301      	movs	r3, #1
    2368:	71e3      	strb	r3, [r4, #7]
    236a:	9301      	str	r3, [sp, #4]
    236c:	e73c      	b.n	21e8 <f_write+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    236e:	9301      	str	r3, [sp, #4]
    2370:	e73a      	b.n	21e8 <f_write+0x30>
    2372:	bf00      	nop
    2374:	00001095 	.word	0x00001095
    2378:	00001841 	.word	0x00001841
    237c:	00000f55 	.word	0x00000f55
    2380:	00000e51 	.word	0x00000e51
    2384:	00000fc5 	.word	0x00000fc5
    2388:	00001555 	.word	0x00001555
    238c:	00000485 	.word	0x00000485

00002390 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2390:	b538      	push	{r3, r4, r5, lr}
    2392:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;

	res = validate(fp);					/* Check validity of the object */
    2394:	4b20      	ldr	r3, [pc, #128]	; (2418 <f_sync+0x88>)
    2396:	4798      	blx	r3
	if (res == FR_OK) {
    2398:	4603      	mov	r3, r0
    239a:	b918      	cbnz	r0, 23a4 <f_sync+0x14>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    239c:	79a2      	ldrb	r2, [r4, #6]
    239e:	f012 0f20 	tst.w	r2, #32
    23a2:	d101      	bne.n	23a8 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    23a4:	4618      	mov	r0, r3
    23a6:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
    23a8:	69e1      	ldr	r1, [r4, #28]
    23aa:	6820      	ldr	r0, [r4, #0]
    23ac:	4b1b      	ldr	r3, [pc, #108]	; (241c <f_sync+0x8c>)
    23ae:	4798      	blx	r3
			if (res == FR_OK) {
    23b0:	4603      	mov	r3, r0
    23b2:	2800      	cmp	r0, #0
    23b4:	d1f6      	bne.n	23a4 <f_sync+0x14>
				dir = fp->dir_ptr;
    23b6:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    23b8:	7aeb      	ldrb	r3, [r5, #11]
    23ba:	f043 0320 	orr.w	r3, r3, #32
    23be:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    23c0:	68e3      	ldr	r3, [r4, #12]
    23c2:	772b      	strb	r3, [r5, #28]
    23c4:	89a3      	ldrh	r3, [r4, #12]
    23c6:	0a1b      	lsrs	r3, r3, #8
    23c8:	776b      	strb	r3, [r5, #29]
    23ca:	89e3      	ldrh	r3, [r4, #14]
    23cc:	77ab      	strb	r3, [r5, #30]
    23ce:	7be3      	ldrb	r3, [r4, #15]
    23d0:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
    23d2:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusLO, cl);
    23d4:	76ab      	strb	r3, [r5, #26]
    23d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    23da:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    23dc:	0c1b      	lsrs	r3, r3, #16
    23de:	752b      	strb	r3, [r5, #20]
    23e0:	0a1b      	lsrs	r3, r3, #8
    23e2:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update modified time */
    23e4:	4b0e      	ldr	r3, [pc, #56]	; (2420 <f_sync+0x90>)
    23e6:	4798      	blx	r3
				ST_DWORD(dir + DIR_WrtTime, tm);
    23e8:	75a8      	strb	r0, [r5, #22]
    23ea:	f3c0 2307 	ubfx	r3, r0, #8, #8
    23ee:	75eb      	strb	r3, [r5, #23]
    23f0:	0c03      	lsrs	r3, r0, #16
    23f2:	762b      	strb	r3, [r5, #24]
    23f4:	0e00      	lsrs	r0, r0, #24
    23f6:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
    23f8:	2300      	movs	r3, #0
    23fa:	74ab      	strb	r3, [r5, #18]
    23fc:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
    23fe:	79a3      	ldrb	r3, [r4, #6]
    2400:	f023 0320 	bic.w	r3, r3, #32
    2404:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    2406:	6823      	ldr	r3, [r4, #0]
    2408:	2201      	movs	r2, #1
    240a:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
    240c:	6820      	ldr	r0, [r4, #0]
    240e:	4b05      	ldr	r3, [pc, #20]	; (2424 <f_sync+0x94>)
    2410:	4798      	blx	r3
    2412:	4603      	mov	r3, r0
    2414:	e7c6      	b.n	23a4 <f_sync+0x14>
    2416:	bf00      	nop
    2418:	00001095 	.word	0x00001095
    241c:	00000fc5 	.word	0x00000fc5
    2420:	00000c11 	.word	0x00000c11
    2424:	00001489 	.word	0x00001489

00002428 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2428:	b510      	push	{r4, lr}
    242a:	4604      	mov	r4, r0
	FRESULT res;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    242c:	4b07      	ldr	r3, [pc, #28]	; (244c <f_close+0x24>)
    242e:	4798      	blx	r3
	if (res == FR_OK)
    2430:	4603      	mov	r3, r0
    2432:	b108      	cbz	r0, 2438 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2434:	4618      	mov	r0, r3
    2436:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
    2438:	4620      	mov	r0, r4
    243a:	4b05      	ldr	r3, [pc, #20]	; (2450 <f_close+0x28>)
    243c:	4798      	blx	r3
		if (res == FR_OK) {
    243e:	4603      	mov	r3, r0
    2440:	2800      	cmp	r0, #0
    2442:	d1f7      	bne.n	2434 <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
    2444:	2200      	movs	r2, #0
    2446:	6022      	str	r2, [r4, #0]
    2448:	e7f4      	b.n	2434 <f_close+0xc>
    244a:	bf00      	nop
    244c:	00002391 	.word	0x00002391
    2450:	00001095 	.word	0x00001095

00002454 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2458:	4604      	mov	r4, r0
    245a:	460d      	mov	r5, r1
	DWORD clst, bcs, nsect, ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(fp);					/* Check validity of the object */
    245c:	4b47      	ldr	r3, [pc, #284]	; (257c <f_lseek+0x128>)
    245e:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2460:	4607      	mov	r7, r0
    2462:	2800      	cmp	r0, #0
    2464:	f040 8086 	bne.w	2574 <f_lseek+0x120>
	if (fp->err)						/* Check error */
    2468:	79e3      	ldrb	r3, [r4, #7]
    246a:	2b00      	cmp	r3, #0
    246c:	f040 8081 	bne.w	2572 <f_lseek+0x11e>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2470:	68e3      	ldr	r3, [r4, #12]
    2472:	42ab      	cmp	r3, r5
    2474:	d205      	bcs.n	2482 <f_lseek+0x2e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2476:	79a2      	ldrb	r2, [r4, #6]
    2478:	f002 0202 	and.w	r2, r2, #2
#endif
			) ofs = fp->fsize;
    247c:	2a00      	cmp	r2, #0
    247e:	bf08      	it	eq
    2480:	461d      	moveq	r5, r3

		ifptr = fp->fptr;
    2482:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
    2484:	2200      	movs	r2, #0
    2486:	60a2      	str	r2, [r4, #8]
		if (ofs) {
    2488:	2d00      	cmp	r5, #0
    248a:	d073      	beq.n	2574 <f_lseek+0x120>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    248c:	6820      	ldr	r0, [r4, #0]
    248e:	7886      	ldrb	r6, [r0, #2]
    2490:	0276      	lsls	r6, r6, #9
			if (ifptr > 0 &&
    2492:	b16b      	cbz	r3, 24b0 <f_lseek+0x5c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2494:	3b01      	subs	r3, #1
    2496:	1e6a      	subs	r2, r5, #1
    2498:	fbb2 f2f6 	udiv	r2, r2, r6
    249c:	fbb3 f1f6 	udiv	r1, r3, r6
			if (ifptr > 0 &&
    24a0:	428a      	cmp	r2, r1
    24a2:	d305      	bcc.n	24b0 <f_lseek+0x5c>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    24a4:	4272      	negs	r2, r6
    24a6:	4013      	ands	r3, r2
    24a8:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    24aa:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
    24ac:	6961      	ldr	r1, [r4, #20]
    24ae:	e002      	b.n	24b6 <f_lseek+0x62>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    24b0:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    24b2:	b149      	cbz	r1, 24c8 <f_lseek+0x74>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    24b4:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
    24b6:	2900      	cmp	r1, #0
    24b8:	d04a      	beq.n	2550 <f_lseek+0xfc>
				while (ofs > bcs) {						/* Cluster following loop */
    24ba:	42b5      	cmp	r5, r6
    24bc:	d931      	bls.n	2522 <f_lseek+0xce>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    24be:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2580 <f_lseek+0x12c>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    24c2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2588 <f_lseek+0x134>
    24c6:	e022      	b.n	250e <f_lseek+0xba>
					clst = create_chain(fp->fs, 0);
    24c8:	4b2d      	ldr	r3, [pc, #180]	; (2580 <f_lseek+0x12c>)
    24ca:	4798      	blx	r3
    24cc:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    24ce:	2801      	cmp	r0, #1
    24d0:	d004      	beq.n	24dc <f_lseek+0x88>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    24d2:	f1b0 3fff 	cmp.w	r0, #4294967295
    24d6:	d004      	beq.n	24e2 <f_lseek+0x8e>
					fp->sclust = clst;
    24d8:	6120      	str	r0, [r4, #16]
    24da:	e7eb      	b.n	24b4 <f_lseek+0x60>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    24dc:	2702      	movs	r7, #2
    24de:	71e7      	strb	r7, [r4, #7]
    24e0:	e048      	b.n	2574 <f_lseek+0x120>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    24e2:	2701      	movs	r7, #1
    24e4:	71e7      	strb	r7, [r4, #7]
    24e6:	e045      	b.n	2574 <f_lseek+0x120>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    24e8:	6820      	ldr	r0, [r4, #0]
    24ea:	47c0      	blx	r8
    24ec:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    24ee:	f1b1 3fff 	cmp.w	r1, #4294967295
    24f2:	d023      	beq.n	253c <f_lseek+0xe8>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    24f4:	2901      	cmp	r1, #1
    24f6:	d924      	bls.n	2542 <f_lseek+0xee>
    24f8:	6823      	ldr	r3, [r4, #0]
    24fa:	699b      	ldr	r3, [r3, #24]
    24fc:	4299      	cmp	r1, r3
    24fe:	d220      	bcs.n	2542 <f_lseek+0xee>
					fp->clust = clst;
    2500:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
    2502:	68a3      	ldr	r3, [r4, #8]
    2504:	4433      	add	r3, r6
    2506:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    2508:	1bad      	subs	r5, r5, r6
				while (ofs > bcs) {						/* Cluster following loop */
    250a:	42ae      	cmp	r6, r5
    250c:	d209      	bcs.n	2522 <f_lseek+0xce>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    250e:	79a3      	ldrb	r3, [r4, #6]
    2510:	f013 0f02 	tst.w	r3, #2
    2514:	d0e8      	beq.n	24e8 <f_lseek+0x94>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2516:	6820      	ldr	r0, [r4, #0]
    2518:	47c8      	blx	r9
						if (clst == 0) {				/* When disk gets full, clip file size */
    251a:	4601      	mov	r1, r0
    251c:	2800      	cmp	r0, #0
    251e:	d1e6      	bne.n	24ee <f_lseek+0x9a>
							ofs = bcs; break;
    2520:	4635      	mov	r5, r6
				}
				fp->fptr += ofs;
    2522:	68a3      	ldr	r3, [r4, #8]
    2524:	442b      	add	r3, r5
    2526:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    2528:	f3c5 0308 	ubfx	r3, r5, #0, #9
    252c:	b17b      	cbz	r3, 254e <f_lseek+0xfa>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    252e:	6820      	ldr	r0, [r4, #0]
    2530:	4b14      	ldr	r3, [pc, #80]	; (2584 <f_lseek+0x130>)
    2532:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2534:	b940      	cbnz	r0, 2548 <f_lseek+0xf4>
    2536:	2702      	movs	r7, #2
    2538:	71e7      	strb	r7, [r4, #7]
    253a:	e01b      	b.n	2574 <f_lseek+0x120>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    253c:	2701      	movs	r7, #1
    253e:	71e7      	strb	r7, [r4, #7]
    2540:	e018      	b.n	2574 <f_lseek+0x120>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2542:	2702      	movs	r7, #2
    2544:	71e7      	strb	r7, [r4, #7]
    2546:	e015      	b.n	2574 <f_lseek+0x120>
					nsect += ofs / SS(fp->fs);
    2548:	eb00 2155 	add.w	r1, r0, r5, lsr #9
    254c:	e000      	b.n	2550 <f_lseek+0xfc>
		fp->fptr = nsect = 0;
    254e:	2100      	movs	r1, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2550:	68a3      	ldr	r3, [r4, #8]
    2552:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2556:	b11a      	cbz	r2, 2560 <f_lseek+0x10c>
    2558:	69a2      	ldr	r2, [r4, #24]
    255a:	4291      	cmp	r1, r2
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    255c:	bf18      	it	ne
    255e:	61a1      	strne	r1, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2560:	68e2      	ldr	r2, [r4, #12]
    2562:	4293      	cmp	r3, r2
    2564:	d906      	bls.n	2574 <f_lseek+0x120>
			fp->fsize = fp->fptr;
    2566:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    2568:	79a3      	ldrb	r3, [r4, #6]
    256a:	f043 0320 	orr.w	r3, r3, #32
    256e:	71a3      	strb	r3, [r4, #6]
    2570:	e000      	b.n	2574 <f_lseek+0x120>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2572:	461f      	mov	r7, r3
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2574:	4638      	mov	r0, r7
    2576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    257a:	bf00      	nop
    257c:	00001095 	.word	0x00001095
    2580:	00001841 	.word	0x00001841
    2584:	00001555 	.word	0x00001555
    2588:	0000156d 	.word	0x0000156d

0000258c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    258c:	b510      	push	{r4, lr}
    258e:	b086      	sub	sp, #24
    2590:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;

	if (!dp) return FR_INVALID_OBJECT;
    2592:	2800      	cmp	r0, #0
    2594:	d02c      	beq.n	25f0 <f_opendir+0x64>
    2596:	4604      	mov	r4, r0

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
    2598:	2200      	movs	r2, #0
    259a:	a901      	add	r1, sp, #4
    259c:	a805      	add	r0, sp, #20
    259e:	4b1a      	ldr	r3, [pc, #104]	; (2608 <f_opendir+0x7c>)
    25a0:	4798      	blx	r3
	if (res == FR_OK) {
    25a2:	4603      	mov	r3, r0
    25a4:	b110      	cbz	r0, 25ac <f_opendir+0x20>
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    25a6:	2200      	movs	r2, #0
    25a8:	6022      	str	r2, [r4, #0]
    25aa:	e022      	b.n	25f2 <f_opendir+0x66>
		dp->fs = fs;
    25ac:	9b05      	ldr	r3, [sp, #20]
    25ae:	6023      	str	r3, [r4, #0]
		INIT_BUF(*dp);
    25b0:	ab02      	add	r3, sp, #8
    25b2:	61a3      	str	r3, [r4, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
    25b4:	9901      	ldr	r1, [sp, #4]
    25b6:	4620      	mov	r0, r4
    25b8:	4b14      	ldr	r3, [pc, #80]	; (260c <f_opendir+0x80>)
    25ba:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
    25bc:	4603      	mov	r3, r0
    25be:	b9e8      	cbnz	r0, 25fc <f_opendir+0x70>
			if (dp->dir) {						/* It is not the origin directory itself */
    25c0:	6961      	ldr	r1, [r4, #20]
    25c2:	b139      	cbz	r1, 25d4 <f_opendir+0x48>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
    25c4:	7acb      	ldrb	r3, [r1, #11]
    25c6:	f013 0f10 	tst.w	r3, #16
    25ca:	d00f      	beq.n	25ec <f_opendir+0x60>
					dp->sclust = ld_clust(fs, dp->dir);
    25cc:	9805      	ldr	r0, [sp, #20]
    25ce:	4b10      	ldr	r3, [pc, #64]	; (2610 <f_opendir+0x84>)
    25d0:	4798      	blx	r3
    25d2:	60a0      	str	r0, [r4, #8]
				dp->id = fs->id;
    25d4:	9b05      	ldr	r3, [sp, #20]
    25d6:	88db      	ldrh	r3, [r3, #6]
    25d8:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    25da:	2100      	movs	r1, #0
    25dc:	4620      	mov	r0, r4
    25de:	4b0d      	ldr	r3, [pc, #52]	; (2614 <f_opendir+0x88>)
    25e0:	4798      	blx	r3
    25e2:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    25e4:	2804      	cmp	r0, #4
    25e6:	d007      	beq.n	25f8 <f_opendir+0x6c>
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    25e8:	b11b      	cbz	r3, 25f2 <f_opendir+0x66>
    25ea:	e7dc      	b.n	25a6 <f_opendir+0x1a>
					res = FR_NO_PATH;
    25ec:	2305      	movs	r3, #5
    25ee:	e7da      	b.n	25a6 <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
    25f0:	2309      	movs	r3, #9

	LEAVE_FF(fs, res);
}
    25f2:	4618      	mov	r0, r3
    25f4:	b006      	add	sp, #24
    25f6:	bd10      	pop	{r4, pc}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    25f8:	2305      	movs	r3, #5
    25fa:	e7d4      	b.n	25a6 <f_opendir+0x1a>
    25fc:	2804      	cmp	r0, #4
    25fe:	bf14      	ite	ne
    2600:	4603      	movne	r3, r0
    2602:	2305      	moveq	r3, #5
    2604:	e7cf      	b.n	25a6 <f_opendir+0x1a>
    2606:	bf00      	nop
    2608:	000010d1 	.word	0x000010d1
    260c:	00001a3d 	.word	0x00001a3d
    2610:	00000e73 	.word	0x00000e73
    2614:	00001651 	.word	0x00001651

00002618 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2618:	b570      	push	{r4, r5, r6, lr}
    261a:	b084      	sub	sp, #16
    261c:	4604      	mov	r4, r0
    261e:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;

	res = validate(dp);						/* Check validity of the object */
    2620:	4b14      	ldr	r3, [pc, #80]	; (2674 <f_readdir+0x5c>)
    2622:	4798      	blx	r3
	if (res == FR_OK) {
    2624:	4605      	mov	r5, r0
    2626:	b950      	cbnz	r0, 263e <f_readdir+0x26>
		if (!fno) {
    2628:	b166      	cbz	r6, 2644 <f_readdir+0x2c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dp);
    262a:	ab01      	add	r3, sp, #4
    262c:	61a3      	str	r3, [r4, #24]
			res = dir_read(dp, 0);			/* Read an item */
    262e:	2100      	movs	r1, #0
    2630:	4620      	mov	r0, r4
    2632:	4b11      	ldr	r3, [pc, #68]	; (2678 <f_readdir+0x60>)
    2634:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of directory */
    2636:	2804      	cmp	r0, #4
    2638:	d00a      	beq.n	2650 <f_readdir+0x38>
				dp->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    263a:	b158      	cbz	r0, 2654 <f_readdir+0x3c>
			res = dir_read(dp, 0);			/* Read an item */
    263c:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
    263e:	4628      	mov	r0, r5
    2640:	b004      	add	sp, #16
    2642:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    2644:	2100      	movs	r1, #0
    2646:	4620      	mov	r0, r4
    2648:	4b0c      	ldr	r3, [pc, #48]	; (267c <f_readdir+0x64>)
    264a:	4798      	blx	r3
    264c:	4605      	mov	r5, r0
    264e:	e7f6      	b.n	263e <f_readdir+0x26>
				dp->sect = 0;
    2650:	2300      	movs	r3, #0
    2652:	6123      	str	r3, [r4, #16]
				get_fileinfo(dp, fno);		/* Get the object information */
    2654:	4631      	mov	r1, r6
    2656:	4620      	mov	r0, r4
    2658:	4b09      	ldr	r3, [pc, #36]	; (2680 <f_readdir+0x68>)
    265a:	4798      	blx	r3
				res = dir_next(dp, 0);		/* Increment index for next */
    265c:	2100      	movs	r1, #0
    265e:	4620      	mov	r0, r4
    2660:	4b08      	ldr	r3, [pc, #32]	; (2684 <f_readdir+0x6c>)
    2662:	4798      	blx	r3
				if (res == FR_NO_FILE) {
    2664:	2804      	cmp	r0, #4
    2666:	d001      	beq.n	266c <f_readdir+0x54>
				res = dir_next(dp, 0);		/* Increment index for next */
    2668:	4605      	mov	r5, r0
    266a:	e7e8      	b.n	263e <f_readdir+0x26>
					dp->sect = 0;
    266c:	2300      	movs	r3, #0
    266e:	6123      	str	r3, [r4, #16]
    2670:	e7e5      	b.n	263e <f_readdir+0x26>
    2672:	bf00      	nop
    2674:	00001095 	.word	0x00001095
    2678:	00001d45 	.word	0x00001d45
    267c:	00001651 	.word	0x00001651
    2680:	00000e93 	.word	0x00000e93
    2684:	0000190d 	.word	0x0000190d

00002688 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2688:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    268c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    268e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2690:	f3bf 8f5f 	dmb	sy
    2694:	4770      	bx	lr

00002696 <atomic_leave_critical>:
    2696:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    269a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    269c:	f383 8810 	msr	PRIMASK, r3
    26a0:	4770      	bx	lr
	...

000026a4 <get_secs_in_month>:
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
	uint32_t sec_in_month = 0;

	if (leap_year(year)) {
    26a4:	f010 0f03 	tst.w	r0, #3
    26a8:	d110      	bne.n	26cc <get_secs_in_month+0x28>
		switch (month) {
    26aa:	3901      	subs	r1, #1
    26ac:	290b      	cmp	r1, #11
    26ae:	d81e      	bhi.n	26ee <get_secs_in_month+0x4a>
    26b0:	e8df f001 	tbb	[pc, r1]
    26b4:	0a060806 	.word	0x0a060806
    26b8:	06060a06 	.word	0x06060a06
    26bc:	060a060a 	.word	0x060a060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    26c0:	480d      	ldr	r0, [pc, #52]	; (26f8 <get_secs_in_month+0x54>)
    26c2:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    26c4:	480d      	ldr	r0, [pc, #52]	; (26fc <get_secs_in_month+0x58>)
			break;
    26c6:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    26c8:	480d      	ldr	r0, [pc, #52]	; (2700 <get_secs_in_month+0x5c>)
			break;
    26ca:	4770      	bx	lr
		default:
			break;
		}
	} else {
		switch (month) {
    26cc:	3901      	subs	r1, #1
    26ce:	290b      	cmp	r1, #11
    26d0:	d80f      	bhi.n	26f2 <get_secs_in_month+0x4e>
    26d2:	e8df f001 	tbb	[pc, r1]
    26d6:	0806      	.short	0x0806
    26d8:	0a060a06 	.word	0x0a060a06
    26dc:	060a0606 	.word	0x060a0606
    26e0:	060a      	.short	0x060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    26e2:	4805      	ldr	r0, [pc, #20]	; (26f8 <get_secs_in_month+0x54>)
    26e4:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    26e6:	4807      	ldr	r0, [pc, #28]	; (2704 <get_secs_in_month+0x60>)
			break;
    26e8:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    26ea:	4805      	ldr	r0, [pc, #20]	; (2700 <get_secs_in_month+0x5c>)
			break;
    26ec:	4770      	bx	lr
	uint32_t sec_in_month = 0;
    26ee:	2000      	movs	r0, #0
    26f0:	4770      	bx	lr
    26f2:	2000      	movs	r0, #0
			break;
		}
	}

	return sec_in_month;
}
    26f4:	4770      	bx	lr
    26f6:	bf00      	nop
    26f8:	0028de80 	.word	0x0028de80
    26fc:	00263b80 	.word	0x00263b80
    2700:	00278d00 	.word	0x00278d00
    2704:	0024ea00 	.word	0x0024ea00

00002708 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    270c:	460c      	mov	r4, r1
    270e:	4690      	mov	r8, r2
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2710:	6986      	ldr	r6, [r0, #24]

	tmp = ts;

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2712:	4927      	ldr	r1, [pc, #156]	; (27b0 <convert_timestamp_to_datetime+0xa8>)
    2714:	4a27      	ldr	r2, [pc, #156]	; (27b4 <convert_timestamp_to_datetime+0xac>)
    2716:	b2b7      	uxth	r7, r6
    2718:	f007 0303 	and.w	r3, r7, #3
    271c:	2b00      	cmp	r3, #0
    271e:	bf0c      	ite	eq
    2720:	460b      	moveq	r3, r1
    2722:	4613      	movne	r3, r2

		if (tmp >= sec_in_year) {
    2724:	429c      	cmp	r4, r3
    2726:	d302      	bcc.n	272e <convert_timestamp_to_datetime+0x26>
			tmp -= sec_in_year;
    2728:	1ae4      	subs	r4, r4, r3
			tmp_year++;
    272a:	3601      	adds	r6, #1
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    272c:	e7f3      	b.n	2716 <convert_timestamp_to_datetime+0xe>
    272e:	2501      	movs	r5, #1
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2730:	f8df 9088 	ldr.w	r9, [pc, #136]	; 27bc <convert_timestamp_to_datetime+0xb4>
    2734:	4629      	mov	r1, r5
    2736:	4630      	mov	r0, r6
    2738:	47c8      	blx	r9

		if (tmp >= sec_in_month) {
    273a:	4284      	cmp	r4, r0
    273c:	d303      	bcc.n	2746 <convert_timestamp_to_datetime+0x3e>
			tmp -= sec_in_month;
    273e:	1a24      	subs	r4, r4, r0
			tmp_month++;
    2740:	3501      	adds	r5, #1
    2742:	b2ed      	uxtb	r5, r5
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2744:	e7f6      	b.n	2734 <convert_timestamp_to_datetime+0x2c>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    2746:	4b1c      	ldr	r3, [pc, #112]	; (27b8 <convert_timestamp_to_datetime+0xb0>)
    2748:	429c      	cmp	r4, r3
    274a:	bf98      	it	ls
    274c:	2101      	movls	r1, #1
    274e:	d909      	bls.n	2764 <convert_timestamp_to_datetime+0x5c>
    2750:	2101      	movs	r1, #1
    2752:	4b19      	ldr	r3, [pc, #100]	; (27b8 <convert_timestamp_to_datetime+0xb0>)
			tmp -= SECS_IN_DAY;
    2754:	f5a4 34a8 	sub.w	r4, r4, #86016	; 0x15000
    2758:	f5a4 74c0 	sub.w	r4, r4, #384	; 0x180
			tmp_day++;
    275c:	3101      	adds	r1, #1
    275e:	b2c9      	uxtb	r1, r1
		if (tmp >= SECS_IN_DAY) {
    2760:	429c      	cmp	r4, r3
    2762:	d8f7      	bhi.n	2754 <convert_timestamp_to_datetime+0x4c>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2764:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    2768:	bf38      	it	cc
    276a:	2200      	movcc	r2, #0
    276c:	d307      	bcc.n	277e <convert_timestamp_to_datetime+0x76>
    276e:	2200      	movs	r2, #0
			tmp -= SECS_IN_HOUR;
    2770:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
			tmp_hour++;
    2774:	3201      	adds	r2, #1
    2776:	b2d2      	uxtb	r2, r2
		if (tmp >= SECS_IN_HOUR) {
    2778:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    277c:	d2f8      	bcs.n	2770 <convert_timestamp_to_datetime+0x68>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    277e:	2c3b      	cmp	r4, #59	; 0x3b
    2780:	bf98      	it	ls
    2782:	2300      	movls	r3, #0
    2784:	d905      	bls.n	2792 <convert_timestamp_to_datetime+0x8a>
    2786:	2300      	movs	r3, #0
			tmp -= SECS_IN_MINUTE;
    2788:	3c3c      	subs	r4, #60	; 0x3c
			tmp_minutes++;
    278a:	3301      	adds	r3, #1
    278c:	b2db      	uxtb	r3, r3
		if (tmp >= SECS_IN_MINUTE) {
    278e:	2c3b      	cmp	r4, #59	; 0x3b
    2790:	d8fa      	bhi.n	2788 <convert_timestamp_to_datetime+0x80>
		} else {
			break;
		}
	}

	dt->date.year  = tmp_year;
    2792:	f8a8 7006 	strh.w	r7, [r8, #6]
	dt->date.month = tmp_month;
    2796:	f888 5005 	strb.w	r5, [r8, #5]
	dt->date.day   = tmp_day;
    279a:	f888 1004 	strb.w	r1, [r8, #4]
	dt->time.hour  = tmp_hour;
    279e:	f888 2002 	strb.w	r2, [r8, #2]
	dt->time.min   = tmp_minutes;
    27a2:	f888 3001 	strb.w	r3, [r8, #1]
	dt->time.sec   = tmp;
    27a6:	f888 4000 	strb.w	r4, [r8]

	return ERR_NONE;
}
    27aa:	2000      	movs	r0, #0
    27ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27b0:	01e28500 	.word	0x01e28500
    27b4:	01e13380 	.word	0x01e13380
    27b8:	0001517f 	.word	0x0001517f
    27bc:	000026a5 	.word	0x000026a5

000027c0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    27c0:	b538      	push	{r3, r4, r5, lr}
    27c2:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    27c4:	4604      	mov	r4, r0
    27c6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    27ca:	490b      	ldr	r1, [pc, #44]	; (27f8 <calendar_init+0x38>)
    27cc:	3000      	adds	r0, #0
    27ce:	bf18      	it	ne
    27d0:	2001      	movne	r0, #1
    27d2:	4b0a      	ldr	r3, [pc, #40]	; (27fc <calendar_init+0x3c>)
    27d4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    27d6:	6823      	ldr	r3, [r4, #0]
    27d8:	42ab      	cmp	r3, r5
    27da:	d008      	beq.n	27ee <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    27dc:	b94b      	cbnz	r3, 27f2 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    27de:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    27e0:	4620      	mov	r0, r4
    27e2:	4b07      	ldr	r3, [pc, #28]	; (2800 <calendar_init+0x40>)
    27e4:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    27e6:	f240 73b2 	movw	r3, #1970	; 0x7b2
    27ea:	61a3      	str	r3, [r4, #24]

	return ret;
    27ec:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
    27ee:	2000      	movs	r0, #0
    27f0:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
    27f2:	f06f 0011 	mvn.w	r0, #17
}
    27f6:	bd38      	pop	{r3, r4, r5, pc}
    27f8:	0000bc48 	.word	0x0000bc48
    27fc:	00002d05 	.word	0x00002d05
    2800:	00002e55 	.word	0x00002e55

00002804 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    2804:	b538      	push	{r3, r4, r5, lr}
    2806:	460d      	mov	r5, r1
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2808:	4604      	mov	r4, r0
    280a:	f240 223b 	movw	r2, #571	; 0x23b
    280e:	4908      	ldr	r1, [pc, #32]	; (2830 <calendar_get_date_time+0x2c>)
    2810:	3000      	adds	r0, #0
    2812:	bf18      	it	ne
    2814:	2001      	movne	r0, #1
    2816:	4b07      	ldr	r3, [pc, #28]	; (2834 <calendar_get_date_time+0x30>)
    2818:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    281a:	4620      	mov	r0, r4
    281c:	4b06      	ldr	r3, [pc, #24]	; (2838 <calendar_get_date_time+0x34>)
    281e:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    2820:	462a      	mov	r2, r5
    2822:	4601      	mov	r1, r0
    2824:	4620      	mov	r0, r4
    2826:	4b05      	ldr	r3, [pc, #20]	; (283c <calendar_get_date_time+0x38>)
    2828:	4798      	blx	r3

	return ERR_NONE;
}
    282a:	2000      	movs	r0, #0
    282c:	bd38      	pop	{r3, r4, r5, pc}
    282e:	bf00      	nop
    2830:	0000bc48 	.word	0x0000bc48
    2834:	00002d05 	.word	0x00002d05
    2838:	00002eed 	.word	0x00002eed
    283c:	00002709 	.word	0x00002709

00002840 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2840:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    2842:	4b02      	ldr	r3, [pc, #8]	; (284c <delay_init+0xc>)
    2844:	6018      	str	r0, [r3, #0]
    2846:	4b02      	ldr	r3, [pc, #8]	; (2850 <delay_init+0x10>)
    2848:	4798      	blx	r3
    284a:	bd08      	pop	{r3, pc}
    284c:	20000998 	.word	0x20000998
    2850:	00002d65 	.word	0x00002d65

00002854 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2854:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2856:	4b04      	ldr	r3, [pc, #16]	; (2868 <delay_ms+0x14>)
    2858:	681c      	ldr	r4, [r3, #0]
    285a:	4b04      	ldr	r3, [pc, #16]	; (286c <delay_ms+0x18>)
    285c:	4798      	blx	r3
    285e:	4601      	mov	r1, r0
    2860:	4620      	mov	r0, r4
    2862:	4b03      	ldr	r3, [pc, #12]	; (2870 <delay_ms+0x1c>)
    2864:	4798      	blx	r3
    2866:	bd10      	pop	{r4, pc}
    2868:	20000998 	.word	0x20000998
    286c:	00002d49 	.word	0x00002d49
    2870:	00002d69 	.word	0x00002d69

00002874 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2874:	b570      	push	{r4, r5, r6, lr}
    2876:	460d      	mov	r5, r1
    2878:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    287a:	4604      	mov	r4, r0
    287c:	b160      	cbz	r0, 2898 <io_write+0x24>
    287e:	1c08      	adds	r0, r1, #0
    2880:	bf18      	it	ne
    2882:	2001      	movne	r0, #1
    2884:	2234      	movs	r2, #52	; 0x34
    2886:	4905      	ldr	r1, [pc, #20]	; (289c <io_write+0x28>)
    2888:	4b05      	ldr	r3, [pc, #20]	; (28a0 <io_write+0x2c>)
    288a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    288c:	6823      	ldr	r3, [r4, #0]
    288e:	4632      	mov	r2, r6
    2890:	4629      	mov	r1, r5
    2892:	4620      	mov	r0, r4
    2894:	4798      	blx	r3
}
    2896:	bd70      	pop	{r4, r5, r6, pc}
    2898:	2000      	movs	r0, #0
    289a:	e7f3      	b.n	2884 <io_write+0x10>
    289c:	0000bc64 	.word	0x0000bc64
    28a0:	00002d05 	.word	0x00002d05

000028a4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    28a4:	b570      	push	{r4, r5, r6, lr}
    28a6:	460d      	mov	r5, r1
    28a8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    28aa:	4604      	mov	r4, r0
    28ac:	b160      	cbz	r0, 28c8 <io_read+0x24>
    28ae:	1c08      	adds	r0, r1, #0
    28b0:	bf18      	it	ne
    28b2:	2001      	movne	r0, #1
    28b4:	223d      	movs	r2, #61	; 0x3d
    28b6:	4905      	ldr	r1, [pc, #20]	; (28cc <io_read+0x28>)
    28b8:	4b05      	ldr	r3, [pc, #20]	; (28d0 <io_read+0x2c>)
    28ba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    28bc:	6863      	ldr	r3, [r4, #4]
    28be:	4632      	mov	r2, r6
    28c0:	4629      	mov	r1, r5
    28c2:	4620      	mov	r0, r4
    28c4:	4798      	blx	r3
}
    28c6:	bd70      	pop	{r4, r5, r6, pc}
    28c8:	2000      	movs	r0, #0
    28ca:	e7f3      	b.n	28b4 <io_read+0x10>
    28cc:	0000bc64 	.word	0x0000bc64
    28d0:	00002d05 	.word	0x00002d05

000028d4 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
    28d4:	b538      	push	{r3, r4, r5, lr}
    28d6:	460c      	mov	r4, r1
	ASSERT(mci && hw);
    28d8:	4605      	mov	r5, r0
    28da:	b158      	cbz	r0, 28f4 <mci_sync_init+0x20>
    28dc:	1c08      	adds	r0, r1, #0
    28de:	bf18      	it	ne
    28e0:	2001      	movne	r0, #1
    28e2:	2231      	movs	r2, #49	; 0x31
    28e4:	4904      	ldr	r1, [pc, #16]	; (28f8 <mci_sync_init+0x24>)
    28e6:	4b05      	ldr	r3, [pc, #20]	; (28fc <mci_sync_init+0x28>)
    28e8:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
    28ea:	4621      	mov	r1, r4
    28ec:	4628      	mov	r0, r5
    28ee:	4b04      	ldr	r3, [pc, #16]	; (2900 <mci_sync_init+0x2c>)
    28f0:	4798      	blx	r3
}
    28f2:	bd38      	pop	{r3, r4, r5, pc}
    28f4:	2000      	movs	r0, #0
    28f6:	e7f4      	b.n	28e2 <mci_sync_init+0xe>
    28f8:	0000bc78 	.word	0x0000bc78
    28fc:	00002d05 	.word	0x00002d05
    2900:	0000309d 	.word	0x0000309d

00002904 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
    2904:	b5f0      	push	{r4, r5, r6, r7, lr}
    2906:	b083      	sub	sp, #12
    2908:	460d      	mov	r5, r1
    290a:	4616      	mov	r6, r2
    290c:	461f      	mov	r7, r3
	ASSERT(mci);
    290e:	4604      	mov	r4, r0
    2910:	2244      	movs	r2, #68	; 0x44
    2912:	4908      	ldr	r1, [pc, #32]	; (2934 <mci_sync_select_device+0x30>)
    2914:	3000      	adds	r0, #0
    2916:	bf18      	it	ne
    2918:	2001      	movne	r0, #1
    291a:	4b07      	ldr	r3, [pc, #28]	; (2938 <mci_sync_select_device+0x34>)
    291c:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
    291e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2922:	9300      	str	r3, [sp, #0]
    2924:	463b      	mov	r3, r7
    2926:	4632      	mov	r2, r6
    2928:	4629      	mov	r1, r5
    292a:	4620      	mov	r0, r4
    292c:	4c03      	ldr	r4, [pc, #12]	; (293c <mci_sync_select_device+0x38>)
    292e:	47a0      	blx	r4
}
    2930:	b003      	add	sp, #12
    2932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2934:	0000bc78 	.word	0x0000bc78
    2938:	00002d05 	.word	0x00002d05
    293c:	00003105 	.word	0x00003105

00002940 <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
    2940:	b538      	push	{r3, r4, r5, lr}
    2942:	460d      	mov	r5, r1
	ASSERT(mci);
    2944:	4604      	mov	r4, r0
    2946:	224d      	movs	r2, #77	; 0x4d
    2948:	4905      	ldr	r1, [pc, #20]	; (2960 <mci_sync_deselect_device+0x20>)
    294a:	3000      	adds	r0, #0
    294c:	bf18      	it	ne
    294e:	2001      	movne	r0, #1
    2950:	4b04      	ldr	r3, [pc, #16]	; (2964 <mci_sync_deselect_device+0x24>)
    2952:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
    2954:	4629      	mov	r1, r5
    2956:	4620      	mov	r0, r4
    2958:	4b03      	ldr	r3, [pc, #12]	; (2968 <mci_sync_deselect_device+0x28>)
    295a:	4798      	blx	r3
}
    295c:	bd38      	pop	{r3, r4, r5, pc}
    295e:	bf00      	nop
    2960:	0000bc78 	.word	0x0000bc78
    2964:	00002d05 	.word	0x00002d05
    2968:	00003219 	.word	0x00003219

0000296c <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
    296c:	b538      	push	{r3, r4, r5, lr}
    296e:	460d      	mov	r5, r1
	ASSERT(mci);
    2970:	4604      	mov	r4, r0
    2972:	2256      	movs	r2, #86	; 0x56
    2974:	4905      	ldr	r1, [pc, #20]	; (298c <mci_sync_get_bus_width+0x20>)
    2976:	3000      	adds	r0, #0
    2978:	bf18      	it	ne
    297a:	2001      	movne	r0, #1
    297c:	4b04      	ldr	r3, [pc, #16]	; (2990 <mci_sync_get_bus_width+0x24>)
    297e:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
    2980:	4629      	mov	r1, r5
    2982:	4620      	mov	r0, r4
    2984:	4b03      	ldr	r3, [pc, #12]	; (2994 <mci_sync_get_bus_width+0x28>)
    2986:	4798      	blx	r3
}
    2988:	bd38      	pop	{r3, r4, r5, pc}
    298a:	bf00      	nop
    298c:	0000bc78 	.word	0x0000bc78
    2990:	00002d05 	.word	0x00002d05
    2994:	0000321d 	.word	0x0000321d

00002998 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    2998:	b510      	push	{r4, lr}
	ASSERT(mci);
    299a:	4604      	mov	r4, r0
    299c:	2260      	movs	r2, #96	; 0x60
    299e:	4905      	ldr	r1, [pc, #20]	; (29b4 <mci_sync_is_high_speed_capable+0x1c>)
    29a0:	3000      	adds	r0, #0
    29a2:	bf18      	it	ne
    29a4:	2001      	movne	r0, #1
    29a6:	4b04      	ldr	r3, [pc, #16]	; (29b8 <mci_sync_is_high_speed_capable+0x20>)
    29a8:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    29aa:	4620      	mov	r0, r4
    29ac:	4b03      	ldr	r3, [pc, #12]	; (29bc <mci_sync_is_high_speed_capable+0x24>)
    29ae:	4798      	blx	r3
}
    29b0:	bd10      	pop	{r4, pc}
    29b2:	bf00      	nop
    29b4:	0000bc78 	.word	0x0000bc78
    29b8:	00002d05 	.word	0x00002d05
    29bc:	00003227 	.word	0x00003227

000029c0 <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    29c0:	b510      	push	{r4, lr}
	ASSERT(mci);
    29c2:	4604      	mov	r4, r0
    29c4:	2269      	movs	r2, #105	; 0x69
    29c6:	4905      	ldr	r1, [pc, #20]	; (29dc <mci_sync_send_clock+0x1c>)
    29c8:	3000      	adds	r0, #0
    29ca:	bf18      	it	ne
    29cc:	2001      	movne	r0, #1
    29ce:	4b04      	ldr	r3, [pc, #16]	; (29e0 <mci_sync_send_clock+0x20>)
    29d0:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    29d2:	4620      	mov	r0, r4
    29d4:	4b03      	ldr	r3, [pc, #12]	; (29e4 <mci_sync_send_clock+0x24>)
    29d6:	4798      	blx	r3
    29d8:	bd10      	pop	{r4, pc}
    29da:	bf00      	nop
    29dc:	0000bc78 	.word	0x0000bc78
    29e0:	00002d05 	.word	0x00002d05
    29e4:	00003231 	.word	0x00003231

000029e8 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    29e8:	b570      	push	{r4, r5, r6, lr}
    29ea:	460d      	mov	r5, r1
    29ec:	4616      	mov	r6, r2
	ASSERT(mci);
    29ee:	4604      	mov	r4, r0
    29f0:	2272      	movs	r2, #114	; 0x72
    29f2:	4906      	ldr	r1, [pc, #24]	; (2a0c <mci_sync_send_cmd+0x24>)
    29f4:	3000      	adds	r0, #0
    29f6:	bf18      	it	ne
    29f8:	2001      	movne	r0, #1
    29fa:	4b05      	ldr	r3, [pc, #20]	; (2a10 <mci_sync_send_cmd+0x28>)
    29fc:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    29fe:	4632      	mov	r2, r6
    2a00:	4629      	mov	r1, r5
    2a02:	4620      	mov	r0, r4
    2a04:	4b03      	ldr	r3, [pc, #12]	; (2a14 <mci_sync_send_cmd+0x2c>)
    2a06:	4798      	blx	r3
}
    2a08:	bd70      	pop	{r4, r5, r6, pc}
    2a0a:	bf00      	nop
    2a0c:	0000bc78 	.word	0x0000bc78
    2a10:	00002d05 	.word	0x00002d05
    2a14:	00003271 	.word	0x00003271

00002a18 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    2a18:	b510      	push	{r4, lr}
	ASSERT(mci);
    2a1a:	4604      	mov	r4, r0
    2a1c:	227b      	movs	r2, #123	; 0x7b
    2a1e:	4905      	ldr	r1, [pc, #20]	; (2a34 <mci_sync_get_response+0x1c>)
    2a20:	3000      	adds	r0, #0
    2a22:	bf18      	it	ne
    2a24:	2001      	movne	r0, #1
    2a26:	4b04      	ldr	r3, [pc, #16]	; (2a38 <mci_sync_get_response+0x20>)
    2a28:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    2a2a:	4620      	mov	r0, r4
    2a2c:	4b03      	ldr	r3, [pc, #12]	; (2a3c <mci_sync_get_response+0x24>)
    2a2e:	4798      	blx	r3
}
    2a30:	bd10      	pop	{r4, pc}
    2a32:	bf00      	nop
    2a34:	0000bc78 	.word	0x0000bc78
    2a38:	00002d05 	.word	0x00002d05
    2a3c:	000032c5 	.word	0x000032c5

00002a40 <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    2a40:	b538      	push	{r3, r4, r5, lr}
    2a42:	460c      	mov	r4, r1
	ASSERT(mci && response);
    2a44:	4605      	mov	r5, r0
    2a46:	b158      	cbz	r0, 2a60 <mci_sync_get_response_128+0x20>
    2a48:	1c08      	adds	r0, r1, #0
    2a4a:	bf18      	it	ne
    2a4c:	2001      	movne	r0, #1
    2a4e:	2284      	movs	r2, #132	; 0x84
    2a50:	4904      	ldr	r1, [pc, #16]	; (2a64 <mci_sync_get_response_128+0x24>)
    2a52:	4b05      	ldr	r3, [pc, #20]	; (2a68 <mci_sync_get_response_128+0x28>)
    2a54:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    2a56:	4621      	mov	r1, r4
    2a58:	4628      	mov	r0, r5
    2a5a:	4b04      	ldr	r3, [pc, #16]	; (2a6c <mci_sync_get_response_128+0x2c>)
    2a5c:	4798      	blx	r3
    2a5e:	bd38      	pop	{r3, r4, r5, pc}
    2a60:	2000      	movs	r0, #0
    2a62:	e7f4      	b.n	2a4e <mci_sync_get_response_128+0xe>
    2a64:	0000bc78 	.word	0x0000bc78
    2a68:	00002d05 	.word	0x00002d05
    2a6c:	000032f1 	.word	0x000032f1

00002a70 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    2a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a72:	b083      	sub	sp, #12
    2a74:	460d      	mov	r5, r1
    2a76:	4616      	mov	r6, r2
    2a78:	461f      	mov	r7, r3
	ASSERT(mci);
    2a7a:	4604      	mov	r4, r0
    2a7c:	2290      	movs	r2, #144	; 0x90
    2a7e:	490a      	ldr	r1, [pc, #40]	; (2aa8 <mci_sync_adtc_start+0x38>)
    2a80:	3000      	adds	r0, #0
    2a82:	bf18      	it	ne
    2a84:	2001      	movne	r0, #1
    2a86:	4b09      	ldr	r3, [pc, #36]	; (2aac <mci_sync_adtc_start+0x3c>)
    2a88:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    2a8a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    2a8e:	9301      	str	r3, [sp, #4]
    2a90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    2a94:	9300      	str	r3, [sp, #0]
    2a96:	463b      	mov	r3, r7
    2a98:	4632      	mov	r2, r6
    2a9a:	4629      	mov	r1, r5
    2a9c:	4620      	mov	r0, r4
    2a9e:	4c04      	ldr	r4, [pc, #16]	; (2ab0 <mci_sync_adtc_start+0x40>)
    2aa0:	47a0      	blx	r4
}
    2aa2:	b003      	add	sp, #12
    2aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa6:	bf00      	nop
    2aa8:	0000bc78 	.word	0x0000bc78
    2aac:	00002d05 	.word	0x00002d05
    2ab0:	00003355 	.word	0x00003355

00002ab4 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	460c      	mov	r4, r1
    2ab8:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    2aba:	4605      	mov	r5, r0
    2abc:	b160      	cbz	r0, 2ad8 <mci_sync_start_read_blocks+0x24>
    2abe:	1c08      	adds	r0, r1, #0
    2ac0:	bf18      	it	ne
    2ac2:	2001      	movne	r0, #1
    2ac4:	22b5      	movs	r2, #181	; 0xb5
    2ac6:	4905      	ldr	r1, [pc, #20]	; (2adc <mci_sync_start_read_blocks+0x28>)
    2ac8:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <mci_sync_start_read_blocks+0x2c>)
    2aca:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    2acc:	4632      	mov	r2, r6
    2ace:	4621      	mov	r1, r4
    2ad0:	4628      	mov	r0, r5
    2ad2:	4b04      	ldr	r3, [pc, #16]	; (2ae4 <mci_sync_start_read_blocks+0x30>)
    2ad4:	4798      	blx	r3
}
    2ad6:	bd70      	pop	{r4, r5, r6, pc}
    2ad8:	2000      	movs	r0, #0
    2ada:	e7f3      	b.n	2ac4 <mci_sync_start_read_blocks+0x10>
    2adc:	0000bc78 	.word	0x0000bc78
    2ae0:	00002d05 	.word	0x00002d05
    2ae4:	000035c9 	.word	0x000035c9

00002ae8 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    2ae8:	b570      	push	{r4, r5, r6, lr}
    2aea:	460c      	mov	r4, r1
    2aec:	4616      	mov	r6, r2
	ASSERT(mci && src);
    2aee:	4605      	mov	r5, r0
    2af0:	b160      	cbz	r0, 2b0c <mci_sync_start_write_blocks+0x24>
    2af2:	1c08      	adds	r0, r1, #0
    2af4:	bf18      	it	ne
    2af6:	2001      	movne	r0, #1
    2af8:	22be      	movs	r2, #190	; 0xbe
    2afa:	4905      	ldr	r1, [pc, #20]	; (2b10 <mci_sync_start_write_blocks+0x28>)
    2afc:	4b05      	ldr	r3, [pc, #20]	; (2b14 <mci_sync_start_write_blocks+0x2c>)
    2afe:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    2b00:	4632      	mov	r2, r6
    2b02:	4621      	mov	r1, r4
    2b04:	4628      	mov	r0, r5
    2b06:	4b04      	ldr	r3, [pc, #16]	; (2b18 <mci_sync_start_write_blocks+0x30>)
    2b08:	4798      	blx	r3
}
    2b0a:	bd70      	pop	{r4, r5, r6, pc}
    2b0c:	2000      	movs	r0, #0
    2b0e:	e7f3      	b.n	2af8 <mci_sync_start_write_blocks+0x10>
    2b10:	0000bc78 	.word	0x0000bc78
    2b14:	00002d05 	.word	0x00002d05
    2b18:	0000364d 	.word	0x0000364d

00002b1c <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    2b1c:	b510      	push	{r4, lr}
	ASSERT(mci);
    2b1e:	4604      	mov	r4, r0
    2b20:	22c7      	movs	r2, #199	; 0xc7
    2b22:	4905      	ldr	r1, [pc, #20]	; (2b38 <mci_sync_wait_end_of_read_blocks+0x1c>)
    2b24:	3000      	adds	r0, #0
    2b26:	bf18      	it	ne
    2b28:	2001      	movne	r0, #1
    2b2a:	4b04      	ldr	r3, [pc, #16]	; (2b3c <mci_sync_wait_end_of_read_blocks+0x20>)
    2b2c:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    2b2e:	4620      	mov	r0, r4
    2b30:	4b03      	ldr	r3, [pc, #12]	; (2b40 <mci_sync_wait_end_of_read_blocks+0x24>)
    2b32:	4798      	blx	r3
}
    2b34:	bd10      	pop	{r4, pc}
    2b36:	bf00      	nop
    2b38:	0000bc78 	.word	0x0000bc78
    2b3c:	00002d05 	.word	0x00002d05
    2b40:	000036d1 	.word	0x000036d1

00002b44 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    2b44:	b510      	push	{r4, lr}
	ASSERT(mci);
    2b46:	4604      	mov	r4, r0
    2b48:	22d0      	movs	r2, #208	; 0xd0
    2b4a:	4905      	ldr	r1, [pc, #20]	; (2b60 <mci_sync_wait_end_of_write_blocks+0x1c>)
    2b4c:	3000      	adds	r0, #0
    2b4e:	bf18      	it	ne
    2b50:	2001      	movne	r0, #1
    2b52:	4b04      	ldr	r3, [pc, #16]	; (2b64 <mci_sync_wait_end_of_write_blocks+0x20>)
    2b54:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    2b56:	4620      	mov	r0, r4
    2b58:	4b03      	ldr	r3, [pc, #12]	; (2b68 <mci_sync_wait_end_of_write_blocks+0x24>)
    2b5a:	4798      	blx	r3
}
    2b5c:	bd10      	pop	{r4, pc}
    2b5e:	bf00      	nop
    2b60:	0000bc78 	.word	0x0000bc78
    2b64:	00002d05 	.word	0x00002d05
    2b68:	000036f9 	.word	0x000036f9

00002b6c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2b70:	460f      	mov	r7, r1
    2b72:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2b74:	4604      	mov	r4, r0
    2b76:	b328      	cbz	r0, 2bc4 <usart_sync_write+0x58>
    2b78:	b331      	cbz	r1, 2bc8 <usart_sync_write+0x5c>
    2b7a:	1c10      	adds	r0, r2, #0
    2b7c:	bf18      	it	ne
    2b7e:	2001      	movne	r0, #1
    2b80:	22f1      	movs	r2, #241	; 0xf1
    2b82:	4912      	ldr	r1, [pc, #72]	; (2bcc <usart_sync_write+0x60>)
    2b84:	4b12      	ldr	r3, [pc, #72]	; (2bd0 <usart_sync_write+0x64>)
    2b86:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    2b88:	3408      	adds	r4, #8
    2b8a:	4d12      	ldr	r5, [pc, #72]	; (2bd4 <usart_sync_write+0x68>)
    2b8c:	4620      	mov	r0, r4
    2b8e:	47a8      	blx	r5
    2b90:	2800      	cmp	r0, #0
    2b92:	d0fb      	beq.n	2b8c <usart_sync_write+0x20>
    2b94:	3f01      	subs	r7, #1
    2b96:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2b98:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2bdc <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    2b9c:	4d0d      	ldr	r5, [pc, #52]	; (2bd4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2b9e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2ba2:	4620      	mov	r0, r4
    2ba4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    2ba6:	4620      	mov	r0, r4
    2ba8:	47a8      	blx	r5
    2baa:	2800      	cmp	r0, #0
    2bac:	d0fb      	beq.n	2ba6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    2bae:	3601      	adds	r6, #1
    2bb0:	4546      	cmp	r6, r8
    2bb2:	d3f4      	bcc.n	2b9e <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    2bb4:	4d08      	ldr	r5, [pc, #32]	; (2bd8 <usart_sync_write+0x6c>)
    2bb6:	4620      	mov	r0, r4
    2bb8:	47a8      	blx	r5
    2bba:	2800      	cmp	r0, #0
    2bbc:	d0fb      	beq.n	2bb6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    2bbe:	4630      	mov	r0, r6
    2bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2bc4:	2000      	movs	r0, #0
    2bc6:	e7db      	b.n	2b80 <usart_sync_write+0x14>
    2bc8:	2000      	movs	r0, #0
    2bca:	e7d9      	b.n	2b80 <usart_sync_write+0x14>
    2bcc:	0000bc94 	.word	0x0000bc94
    2bd0:	00002d05 	.word	0x00002d05
    2bd4:	000038cf 	.word	0x000038cf
    2bd8:	000038d9 	.word	0x000038d9
    2bdc:	000038c1 	.word	0x000038c1

00002be0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2be4:	460f      	mov	r7, r1
    2be6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2be8:	4604      	mov	r4, r0
    2bea:	b1e0      	cbz	r0, 2c26 <usart_sync_read+0x46>
    2bec:	b1e9      	cbz	r1, 2c2a <usart_sync_read+0x4a>
    2bee:	1c10      	adds	r0, r2, #0
    2bf0:	bf18      	it	ne
    2bf2:	2001      	movne	r0, #1
    2bf4:	f44f 7286 	mov.w	r2, #268	; 0x10c
    2bf8:	490d      	ldr	r1, [pc, #52]	; (2c30 <usart_sync_read+0x50>)
    2bfa:	4b0e      	ldr	r3, [pc, #56]	; (2c34 <usart_sync_read+0x54>)
    2bfc:	4798      	blx	r3
    2bfe:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    2c00:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    2c02:	3408      	adds	r4, #8
    2c04:	4d0c      	ldr	r5, [pc, #48]	; (2c38 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2c06:	f8df 9034 	ldr.w	r9, [pc, #52]	; 2c3c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    2c0a:	4620      	mov	r0, r4
    2c0c:	47a8      	blx	r5
    2c0e:	2800      	cmp	r0, #0
    2c10:	d0fb      	beq.n	2c0a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2c12:	4620      	mov	r0, r4
    2c14:	47c8      	blx	r9
    2c16:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    2c1a:	3601      	adds	r6, #1
    2c1c:	4546      	cmp	r6, r8
    2c1e:	d3f4      	bcc.n	2c0a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    2c20:	4630      	mov	r0, r6
    2c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2c26:	2000      	movs	r0, #0
    2c28:	e7e4      	b.n	2bf4 <usart_sync_read+0x14>
    2c2a:	2000      	movs	r0, #0
    2c2c:	e7e2      	b.n	2bf4 <usart_sync_read+0x14>
    2c2e:	bf00      	nop
    2c30:	0000bc94 	.word	0x0000bc94
    2c34:	00002d05 	.word	0x00002d05
    2c38:	000038e3 	.word	0x000038e3
    2c3c:	000038c7 	.word	0x000038c7

00002c40 <usart_sync_init>:
{
    2c40:	b538      	push	{r3, r4, r5, lr}
    2c42:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2c44:	4604      	mov	r4, r0
    2c46:	b198      	cbz	r0, 2c70 <usart_sync_init+0x30>
    2c48:	1c08      	adds	r0, r1, #0
    2c4a:	bf18      	it	ne
    2c4c:	2001      	movne	r0, #1
    2c4e:	2234      	movs	r2, #52	; 0x34
    2c50:	4908      	ldr	r1, [pc, #32]	; (2c74 <usart_sync_init+0x34>)
    2c52:	4b09      	ldr	r3, [pc, #36]	; (2c78 <usart_sync_init+0x38>)
    2c54:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    2c56:	4629      	mov	r1, r5
    2c58:	f104 0008 	add.w	r0, r4, #8
    2c5c:	4b07      	ldr	r3, [pc, #28]	; (2c7c <usart_sync_init+0x3c>)
    2c5e:	4798      	blx	r3
	if (init_status) {
    2c60:	4603      	mov	r3, r0
    2c62:	b918      	cbnz	r0, 2c6c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    2c64:	4a06      	ldr	r2, [pc, #24]	; (2c80 <usart_sync_init+0x40>)
    2c66:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    2c68:	4a06      	ldr	r2, [pc, #24]	; (2c84 <usart_sync_init+0x44>)
    2c6a:	6022      	str	r2, [r4, #0]
}
    2c6c:	4618      	mov	r0, r3
    2c6e:	bd38      	pop	{r3, r4, r5, pc}
    2c70:	2000      	movs	r0, #0
    2c72:	e7ec      	b.n	2c4e <usart_sync_init+0xe>
    2c74:	0000bc94 	.word	0x0000bc94
    2c78:	00002d05 	.word	0x00002d05
    2c7c:	00003881 	.word	0x00003881
    2c80:	00002be1 	.word	0x00002be1
    2c84:	00002b6d 	.word	0x00002b6d

00002c88 <usart_sync_enable>:
{
    2c88:	b510      	push	{r4, lr}
	ASSERT(descr);
    2c8a:	4604      	mov	r4, r0
    2c8c:	2253      	movs	r2, #83	; 0x53
    2c8e:	4906      	ldr	r1, [pc, #24]	; (2ca8 <usart_sync_enable+0x20>)
    2c90:	3000      	adds	r0, #0
    2c92:	bf18      	it	ne
    2c94:	2001      	movne	r0, #1
    2c96:	4b05      	ldr	r3, [pc, #20]	; (2cac <usart_sync_enable+0x24>)
    2c98:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    2c9a:	f104 0008 	add.w	r0, r4, #8
    2c9e:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <usart_sync_enable+0x28>)
    2ca0:	4798      	blx	r3
}
    2ca2:	2000      	movs	r0, #0
    2ca4:	bd10      	pop	{r4, pc}
    2ca6:	bf00      	nop
    2ca8:	0000bc94 	.word	0x0000bc94
    2cac:	00002d05 	.word	0x00002d05
    2cb0:	000038ad 	.word	0x000038ad

00002cb4 <usart_sync_get_io_descriptor>:
{
    2cb4:	b538      	push	{r3, r4, r5, lr}
    2cb6:	460c      	mov	r4, r1
	ASSERT(descr && io);
    2cb8:	4605      	mov	r5, r0
    2cba:	b148      	cbz	r0, 2cd0 <usart_sync_get_io_descriptor+0x1c>
    2cbc:	1c08      	adds	r0, r1, #0
    2cbe:	bf18      	it	ne
    2cc0:	2001      	movne	r0, #1
    2cc2:	2269      	movs	r2, #105	; 0x69
    2cc4:	4903      	ldr	r1, [pc, #12]	; (2cd4 <usart_sync_get_io_descriptor+0x20>)
    2cc6:	4b04      	ldr	r3, [pc, #16]	; (2cd8 <usart_sync_get_io_descriptor+0x24>)
    2cc8:	4798      	blx	r3
	*io = &descr->io;
    2cca:	6025      	str	r5, [r4, #0]
}
    2ccc:	2000      	movs	r0, #0
    2cce:	bd38      	pop	{r3, r4, r5, pc}
    2cd0:	2000      	movs	r0, #0
    2cd2:	e7f6      	b.n	2cc2 <usart_sync_get_io_descriptor+0xe>
    2cd4:	0000bc94 	.word	0x0000bc94
    2cd8:	00002d05 	.word	0x00002d05

00002cdc <usart_sync_is_rx_not_empty>:
{
    2cdc:	b510      	push	{r4, lr}
	ASSERT(descr);
    2cde:	4604      	mov	r4, r0
    2ce0:	22d7      	movs	r2, #215	; 0xd7
    2ce2:	4905      	ldr	r1, [pc, #20]	; (2cf8 <usart_sync_is_rx_not_empty+0x1c>)
    2ce4:	3000      	adds	r0, #0
    2ce6:	bf18      	it	ne
    2ce8:	2001      	movne	r0, #1
    2cea:	4b04      	ldr	r3, [pc, #16]	; (2cfc <usart_sync_is_rx_not_empty+0x20>)
    2cec:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
    2cee:	f104 0008 	add.w	r0, r4, #8
    2cf2:	4b03      	ldr	r3, [pc, #12]	; (2d00 <usart_sync_is_rx_not_empty+0x24>)
    2cf4:	4798      	blx	r3
}
    2cf6:	bd10      	pop	{r4, pc}
    2cf8:	0000bc94 	.word	0x0000bc94
    2cfc:	00002d05 	.word	0x00002d05
    2d00:	000038e3 	.word	0x000038e3

00002d04 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2d04:	b900      	cbnz	r0, 2d08 <assert+0x4>
		__asm("BKPT #0");
    2d06:	be00      	bkpt	0x0000
    2d08:	4770      	bx	lr
	...

00002d0c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2d0c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2d0e:	4a06      	ldr	r2, [pc, #24]	; (2d28 <_sbrk+0x1c>)
    2d10:	6812      	ldr	r2, [r2, #0]
    2d12:	b122      	cbz	r2, 2d1e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2d14:	4a04      	ldr	r2, [pc, #16]	; (2d28 <_sbrk+0x1c>)
    2d16:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2d18:	4403      	add	r3, r0
    2d1a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2d1c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2d1e:	4903      	ldr	r1, [pc, #12]	; (2d2c <_sbrk+0x20>)
    2d20:	4a01      	ldr	r2, [pc, #4]	; (2d28 <_sbrk+0x1c>)
    2d22:	6011      	str	r1, [r2, #0]
    2d24:	e7f6      	b.n	2d14 <_sbrk+0x8>
    2d26:	bf00      	nop
    2d28:	2000099c 	.word	0x2000099c
    2d2c:	20011740 	.word	0x20011740

00002d30 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    2d30:	f04f 30ff 	mov.w	r0, #4294967295
    2d34:	4770      	bx	lr

00002d36 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    2d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2d3a:	604b      	str	r3, [r1, #4]

	return 0;
}
    2d3c:	2000      	movs	r0, #0
    2d3e:	4770      	bx	lr

00002d40 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    2d40:	2001      	movs	r0, #1
    2d42:	4770      	bx	lr

00002d44 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    2d44:	2000      	movs	r0, #0
    2d46:	4770      	bx	lr

00002d48 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    2d48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    2d4c:	00c3      	lsls	r3, r0, #3
    2d4e:	3302      	adds	r3, #2
    2d50:	4803      	ldr	r0, [pc, #12]	; (2d60 <_get_cycles_for_ms+0x18>)
    2d52:	fba0 2303 	umull	r2, r3, r0, r3
    2d56:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2d58:	2064      	movs	r0, #100	; 0x64
    2d5a:	fb00 f003 	mul.w	r0, r0, r3
    2d5e:	4770      	bx	lr
    2d60:	aaaaaaab 	.word	0xaaaaaaab

00002d64 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2d64:	4770      	bx	lr
	...

00002d68 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    2d68:	3901      	subs	r1, #1
    2d6a:	d8fd      	bhi.n	2d68 <_delay_cycles>
    2d6c:	4770      	bx	lr
    2d6e:	bf00      	nop

00002d70 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2d70:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2d72:	4a08      	ldr	r2, [pc, #32]	; (2d94 <_init_chip+0x24>)
    2d74:	8813      	ldrh	r3, [r2, #0]
    2d76:	b29b      	uxth	r3, r3
    2d78:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2d7a:	4b07      	ldr	r3, [pc, #28]	; (2d98 <_init_chip+0x28>)
    2d7c:	4798      	blx	r3
	_oscctrl_init_sources();
    2d7e:	4b07      	ldr	r3, [pc, #28]	; (2d9c <_init_chip+0x2c>)
    2d80:	4798      	blx	r3
	_mclk_init();
    2d82:	4b07      	ldr	r3, [pc, #28]	; (2da0 <_init_chip+0x30>)
    2d84:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2d86:	4b07      	ldr	r3, [pc, #28]	; (2da4 <_init_chip+0x34>)
    2d88:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2d8a:	f640 70ff 	movw	r0, #4095	; 0xfff
    2d8e:	4b06      	ldr	r3, [pc, #24]	; (2da8 <_init_chip+0x38>)
    2d90:	4798      	blx	r3
    2d92:	bd08      	pop	{r3, pc}
    2d94:	41004000 	.word	0x41004000
    2d98:	00002ddd 	.word	0x00002ddd
    2d9c:	00002df1 	.word	0x00002df1
    2da0:	00002dd1 	.word	0x00002dd1
    2da4:	00002e0d 	.word	0x00002e0d
    2da8:	00002dad 	.word	0x00002dad

00002dac <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2dac:	f010 0f01 	tst.w	r0, #1
    2db0:	d008      	beq.n	2dc4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2db2:	4a05      	ldr	r2, [pc, #20]	; (2dc8 <_gclk_init_generators_by_fref+0x1c>)
    2db4:	4b05      	ldr	r3, [pc, #20]	; (2dcc <_gclk_init_generators_by_fref+0x20>)
    2db6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2db8:	4619      	mov	r1, r3
    2dba:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2dbe:	684b      	ldr	r3, [r1, #4]
    2dc0:	4213      	tst	r3, r2
    2dc2:	d1fc      	bne.n	2dbe <_gclk_init_generators_by_fref+0x12>
    2dc4:	4770      	bx	lr
    2dc6:	bf00      	nop
    2dc8:	00010101 	.word	0x00010101
    2dcc:	40001c00 	.word	0x40001c00

00002dd0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2dd0:	2201      	movs	r2, #1
    2dd2:	4b01      	ldr	r3, [pc, #4]	; (2dd8 <_mclk_init+0x8>)
    2dd4:	715a      	strb	r2, [r3, #5]
    2dd6:	4770      	bx	lr
    2dd8:	40000800 	.word	0x40000800

00002ddc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2ddc:	4b03      	ldr	r3, [pc, #12]	; (2dec <_osc32kctrl_init_sources+0x10>)
    2dde:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2de0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2de4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2de6:	2201      	movs	r2, #1
    2de8:	741a      	strb	r2, [r3, #16]
    2dea:	4770      	bx	lr
    2dec:	40001400 	.word	0x40001400

00002df0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    2df0:	4a04      	ldr	r2, [pc, #16]	; (2e04 <_oscctrl_init_sources+0x14>)
    2df2:	4b05      	ldr	r3, [pc, #20]	; (2e08 <_oscctrl_init_sources+0x18>)
    2df4:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2df6:	461a      	mov	r2, r3
    2df8:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    2dfa:	f013 0f02 	tst.w	r3, #2
    2dfe:	d0fb      	beq.n	2df8 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2e00:	4770      	bx	lr
    2e02:	bf00      	nop
    2e04:	03002606 	.word	0x03002606
    2e08:	40001000 	.word	0x40001000

00002e0c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2e0c:	4770      	bx	lr
	...

00002e10 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2e10:	b500      	push	{lr}
    2e12:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2e14:	4b0d      	ldr	r3, [pc, #52]	; (2e4c <RAMECC_Handler+0x3c>)
    2e16:	789b      	ldrb	r3, [r3, #2]
    2e18:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2e1a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2e1c:	9b01      	ldr	r3, [sp, #4]
    2e1e:	f013 0f02 	tst.w	r3, #2
    2e22:	d006      	beq.n	2e32 <RAMECC_Handler+0x22>
    2e24:	4b0a      	ldr	r3, [pc, #40]	; (2e50 <RAMECC_Handler+0x40>)
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	b11b      	cbz	r3, 2e32 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2e2a:	4a08      	ldr	r2, [pc, #32]	; (2e4c <RAMECC_Handler+0x3c>)
    2e2c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2e2e:	4798      	blx	r3
    2e30:	e009      	b.n	2e46 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2e32:	9b01      	ldr	r3, [sp, #4]
    2e34:	f013 0f01 	tst.w	r3, #1
    2e38:	d005      	beq.n	2e46 <RAMECC_Handler+0x36>
    2e3a:	4b05      	ldr	r3, [pc, #20]	; (2e50 <RAMECC_Handler+0x40>)
    2e3c:	685b      	ldr	r3, [r3, #4]
    2e3e:	b113      	cbz	r3, 2e46 <RAMECC_Handler+0x36>
    2e40:	4a02      	ldr	r2, [pc, #8]	; (2e4c <RAMECC_Handler+0x3c>)
    2e42:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2e44:	4798      	blx	r3
	} else {
		return;
	}
}
    2e46:	b003      	add	sp, #12
    2e48:	f85d fb04 	ldr.w	pc, [sp], #4
    2e4c:	41020000 	.word	0x41020000
    2e50:	2000171c 	.word	0x2000171c

00002e54 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2e54:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2e56:	4604      	mov	r4, r0
    2e58:	2800      	cmp	r0, #0
    2e5a:	d03e      	beq.n	2eda <_calendar_init+0x86>
    2e5c:	6800      	ldr	r0, [r0, #0]
    2e5e:	3000      	adds	r0, #0
    2e60:	bf18      	it	ne
    2e62:	2001      	movne	r0, #1
    2e64:	222f      	movs	r2, #47	; 0x2f
    2e66:	491e      	ldr	r1, [pc, #120]	; (2ee0 <_calendar_init+0x8c>)
    2e68:	4b1e      	ldr	r3, [pc, #120]	; (2ee4 <_calendar_init+0x90>)
    2e6a:	4798      	blx	r3

	_rtc_dev = dev;
    2e6c:	4b1e      	ldr	r3, [pc, #120]	; (2ee8 <_calendar_init+0x94>)
    2e6e:	601c      	str	r4, [r3, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2e70:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e72:	f248 0103 	movw	r1, #32771	; 0x8003
    2e76:	6913      	ldr	r3, [r2, #16]
    2e78:	420b      	tst	r3, r1
    2e7a:	d1fc      	bne.n	2e76 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2e7c:	8813      	ldrh	r3, [r2, #0]
    2e7e:	f013 0f02 	tst.w	r3, #2
    2e82:	d00f      	beq.n	2ea4 <_calendar_init+0x50>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2e84:	8813      	ldrh	r3, [r2, #0]
    2e86:	f023 0302 	bic.w	r3, r3, #2
    2e8a:	041b      	lsls	r3, r3, #16
    2e8c:	0c1b      	lsrs	r3, r3, #16
    2e8e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e90:	f248 0103 	movw	r1, #32771	; 0x8003
    2e94:	6913      	ldr	r3, [r2, #16]
    2e96:	420b      	tst	r3, r1
    2e98:	d1fc      	bne.n	2e94 <_calendar_init+0x40>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    2e9a:	6822      	ldr	r2, [r4, #0]
    2e9c:	6913      	ldr	r3, [r2, #16]
    2e9e:	f013 0f02 	tst.w	r3, #2
    2ea2:	d1fb      	bne.n	2e9c <_calendar_init+0x48>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2ea4:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    2ea6:	8813      	ldrh	r3, [r2, #0]
    2ea8:	b29b      	uxth	r3, r3
    2eaa:	f043 0301 	orr.w	r3, r3, #1
    2eae:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2eb0:	6913      	ldr	r3, [r2, #16]
    2eb2:	f013 0f01 	tst.w	r3, #1
    2eb6:	d1fb      	bne.n	2eb0 <_calendar_init+0x5c>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2eb8:	6823      	ldr	r3, [r4, #0]
    2eba:	691a      	ldr	r2, [r3, #16]
    2ebc:	f012 0f01 	tst.w	r2, #1
    2ec0:	d1fb      	bne.n	2eba <_calendar_init+0x66>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2ec2:	f44f 4201 	mov.w	r2, #33024	; 0x8100
    2ec6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ec8:	f248 0103 	movw	r1, #32771	; 0x8003
    2ecc:	691a      	ldr	r2, [r3, #16]
    2ece:	420a      	tst	r2, r1
    2ed0:	d1fc      	bne.n	2ecc <_calendar_init+0x78>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    2ed2:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    2ed4:	2000      	movs	r0, #0
    2ed6:	6618      	str	r0, [r3, #96]	; 0x60
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
}
    2ed8:	bd10      	pop	{r4, pc}
    2eda:	2000      	movs	r0, #0
    2edc:	e7c2      	b.n	2e64 <_calendar_init+0x10>
    2ede:	bf00      	nop
    2ee0:	0000bcb0 	.word	0x0000bcb0
    2ee4:	00002d05 	.word	0x00002d05
    2ee8:	200009a0 	.word	0x200009a0

00002eec <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2eec:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2eee:	4604      	mov	r4, r0
    2ef0:	b170      	cbz	r0, 2f10 <_calendar_get_counter+0x24>
    2ef2:	6800      	ldr	r0, [r0, #0]
    2ef4:	3000      	adds	r0, #0
    2ef6:	bf18      	it	ne
    2ef8:	2001      	movne	r0, #1
    2efa:	2299      	movs	r2, #153	; 0x99
    2efc:	4905      	ldr	r1, [pc, #20]	; (2f14 <_calendar_get_counter+0x28>)
    2efe:	4b06      	ldr	r3, [pc, #24]	; (2f18 <_calendar_get_counter+0x2c>)
    2f00:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2f02:	6822      	ldr	r2, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f04:	6913      	ldr	r3, [r2, #16]
    2f06:	f013 0f08 	tst.w	r3, #8
    2f0a:	d1fb      	bne.n	2f04 <_calendar_get_counter+0x18>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    2f0c:	6990      	ldr	r0, [r2, #24]
}
    2f0e:	bd10      	pop	{r4, pc}
    2f10:	2000      	movs	r0, #0
    2f12:	e7f2      	b.n	2efa <_calendar_get_counter+0xe>
    2f14:	0000bcb0 	.word	0x0000bcb0
    2f18:	00002d05 	.word	0x00002d05

00002f1c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2f1c:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    2f1e:	4b0f      	ldr	r3, [pc, #60]	; (2f5c <RTC_Handler+0x40>)
    2f20:	681c      	ldr	r4, [r3, #0]
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2f22:	6822      	ldr	r2, [r4, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2f24:	8991      	ldrh	r1, [r2, #12]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    2f26:	8953      	ldrh	r3, [r2, #10]
    2f28:	b29b      	uxth	r3, r3
	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    2f2a:	400b      	ands	r3, r1
    2f2c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f30:	d103      	bne.n	2f3a <RTC_Handler+0x1e>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    2f32:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    2f36:	d108      	bne.n	2f4a <RTC_Handler+0x2e>
    2f38:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    2f3a:	6863      	ldr	r3, [r4, #4]
    2f3c:	4620      	mov	r0, r4
    2f3e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2f40:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2f42:	f44f 7280 	mov.w	r2, #256	; 0x100
    2f46:	819a      	strh	r2, [r3, #12]
    2f48:	bd10      	pop	{r4, pc}
		dev->callback_tamper(dev);
    2f4a:	68a3      	ldr	r3, [r4, #8]
    2f4c:	4620      	mov	r0, r4
    2f4e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    2f50:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    2f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f56:	819a      	strh	r2, [r3, #12]
}
    2f58:	e7ee      	b.n	2f38 <RTC_Handler+0x1c>
    2f5a:	bf00      	nop
    2f5c:	200009a0 	.word	0x200009a0

00002f60 <_mci_reset>:
 * \brief Reset the SDHC interface
 *
 * \param hw The pointer to MCI hardware instance
 */
static void _mci_reset(const void *const hw)
{
    2f60:	b510      	push	{r4, lr}
	ASSERT(hw);
    2f62:	4604      	mov	r4, r0
    2f64:	2234      	movs	r2, #52	; 0x34
    2f66:	4906      	ldr	r1, [pc, #24]	; (2f80 <_mci_reset+0x20>)
    2f68:	3000      	adds	r0, #0
    2f6a:	bf18      	it	ne
    2f6c:	2001      	movne	r0, #1
    2f6e:	4b05      	ldr	r3, [pc, #20]	; (2f84 <_mci_reset+0x24>)
    2f70:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    2f72:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2f76:	f043 0302 	orr.w	r3, r3, #2
    2f7a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    2f7e:	bd10      	pop	{r4, pc}
    2f80:	0000bcc8 	.word	0x0000bcc8
    2f84:	00002d05 	.word	0x00002d05

00002f88 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    2f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f8c:	4688      	mov	r8, r1
    2f8e:	4615      	mov	r5, r2
    2f90:	461f      	mov	r7, r3
	uint32_t sr;
	ASSERT(hw);
    2f92:	4604      	mov	r4, r0
    2f94:	1c06      	adds	r6, r0, #0
    2f96:	bf18      	it	ne
    2f98:	2601      	movne	r6, #1
    2f9a:	2299      	movs	r2, #153	; 0x99
    2f9c:	493c      	ldr	r1, [pc, #240]	; (3090 <_mci_send_cmd_execute+0x108>)
    2f9e:	4630      	mov	r0, r6
    2fa0:	4b3c      	ldr	r3, [pc, #240]	; (3094 <_mci_send_cmd_execute+0x10c>)
    2fa2:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    2fa4:	0229      	lsls	r1, r5, #8
    2fa6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    2faa:	ea41 0108 	orr.w	r1, r1, r8

	if (cmd & MCI_RESP_PRESENT) {
    2fae:	f415 7f80 	tst.w	r5, #256	; 0x100
    2fb2:	d004      	beq.n	2fbe <_mci_send_cmd_execute+0x36>

		if (cmd & MCI_RESP_136) {
    2fb4:	f415 6f00 	tst.w	r5, #2048	; 0x800
    2fb8:	d016      	beq.n	2fe8 <_mci_send_cmd_execute+0x60>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    2fba:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    2fbe:	f415 4f80 	tst.w	r5, #16384	; 0x4000
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    2fc2:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    2fc6:	bf14      	ite	ne
    2fc8:	f043 0310 	orrne.w	r3, r3, #16
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    2fcc:	f003 03ef 	andeq.w	r3, r3, #239	; 0xef
    2fd0:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    2fd4:	60a7      	str	r7, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    2fd6:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    2fd8:	81e3      	strh	r3, [r4, #14]

	/* Wait end of command */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (cmd & MCI_RESP_CRC) {
    2fda:	f405 5280 	and.w	r2, r5, #4096	; 0x1000
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    2fde:	f240 277f 	movw	r7, #639	; 0x27f
			if (sr
    2fe2:	f240 205d 	movw	r0, #605	; 0x25d
    2fe6:	e00d      	b.n	3004 <_mci_send_cmd_execute+0x7c>
		} else if (cmd & MCI_RESP_BUSY) {
    2fe8:	f415 5f00 	tst.w	r5, #8192	; 0x2000
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    2fec:	bf14      	ite	ne
    2fee:	f041 0103 	orrne.w	r1, r1, #3
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    2ff2:	f041 0102 	orreq.w	r1, r1, #2
    2ff6:	e7e2      	b.n	2fbe <_mci_send_cmd_execute+0x36>
			if (sr
    2ff8:	423b      	tst	r3, r7
    2ffa:	d116      	bne.n	302a <_mci_send_cmd_execute+0xa2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2ffc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    2ffe:	f013 0f01 	tst.w	r3, #1
    3002:	d11f      	bne.n	3044 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    3004:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3006:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    3008:	2a00      	cmp	r2, #0
    300a:	d0f5      	beq.n	2ff8 <_mci_send_cmd_execute+0x70>
			if (sr
    300c:	4203      	tst	r3, r0
    300e:	d0f5      	beq.n	2ffc <_mci_send_cmd_execute+0x74>
				_mci_reset(hw);
    3010:	4620      	mov	r0, r4
    3012:	4b21      	ldr	r3, [pc, #132]	; (3098 <_mci_send_cmd_execute+0x110>)
    3014:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    3016:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3018:	b29b      	uxth	r3, r3
    301a:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    301e:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    3022:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    3024:	2000      	movs	r0, #0
    3026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				_mci_reset(hw);
    302a:	4620      	mov	r0, r4
    302c:	4b1a      	ldr	r3, [pc, #104]	; (3098 <_mci_send_cmd_execute+0x110>)
    302e:	4798      	blx	r3
    3030:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3032:	b29b      	uxth	r3, r3
    3034:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    3038:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    303c:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    303e:	2000      	movs	r0, #0
    3040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    3044:	f011 0f20 	tst.w	r1, #32
    3048:	d104      	bne.n	3054 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    304a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    304c:	b29b      	uxth	r3, r3
    304e:	f043 0301 	orr.w	r3, r3, #1
    3052:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    3054:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    3058:	d102      	bne.n	3060 <_mci_send_cmd_execute+0xd8>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    305a:	2001      	movs	r0, #1
}
    305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(hw);
    3060:	227f      	movs	r2, #127	; 0x7f
    3062:	490b      	ldr	r1, [pc, #44]	; (3090 <_mci_send_cmd_execute+0x108>)
    3064:	4630      	mov	r0, r6
    3066:	4b0b      	ldr	r3, [pc, #44]	; (3094 <_mci_send_cmd_execute+0x10c>)
    3068:	4798      	blx	r3
	return ((Sdhc *)hw)->PSR.reg;
    306a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    306c:	f04f 33ff 	mov.w	r3, #4294967295
	} while (!(psr & SDHC_PSR_DATLL(1)));
    3070:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    3074:	d108      	bne.n	3088 <_mci_send_cmd_execute+0x100>
    3076:	6a62      	ldr	r2, [r4, #36]	; 0x24
		if (busy_wait-- == 0) {
    3078:	3b01      	subs	r3, #1
    307a:	d1f9      	bne.n	3070 <_mci_send_cmd_execute+0xe8>
			_mci_reset(hw);
    307c:	4620      	mov	r0, r4
    307e:	4b06      	ldr	r3, [pc, #24]	; (3098 <_mci_send_cmd_execute+0x110>)
    3080:	4798      	blx	r3
			return false;
    3082:	2000      	movs	r0, #0
    3084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
    3088:	2001      	movs	r0, #1
    308a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    308e:	bf00      	nop
    3090:	0000bcc8 	.word	0x0000bcc8
    3094:	00002d05 	.word	0x00002d05
    3098:	00002f61 	.word	0x00002f61

0000309c <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    309c:	b538      	push	{r3, r4, r5, lr}
    309e:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    30a0:	4605      	mov	r5, r0
    30a2:	b340      	cbz	r0, 30f6 <_mci_sync_init+0x5a>
    30a4:	1c08      	adds	r0, r1, #0
    30a6:	bf18      	it	ne
    30a8:	2001      	movne	r0, #1
    30aa:	22d8      	movs	r2, #216	; 0xd8
    30ac:	4913      	ldr	r1, [pc, #76]	; (30fc <_mci_sync_init+0x60>)
    30ae:	4b14      	ldr	r3, [pc, #80]	; (3100 <_mci_sync_init+0x64>)
    30b0:	4798      	blx	r3

	mci_dev->hw = hw;
    30b2:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    30b4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    30b8:	f043 0301 	orr.w	r3, r3, #1
    30bc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    30c0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    30c4:	f013 0f01 	tst.w	r3, #1
    30c8:	d1fa      	bne.n	30c0 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
    30ca:	230e      	movs	r3, #14
    30cc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    30d0:	230f      	movs	r3, #15
    30d2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    30d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    30d8:	b29b      	uxth	r3, r3
    30da:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    30de:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    30e2:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    30e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    30e6:	b29b      	uxth	r3, r3
    30e8:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    30ec:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    30f0:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    30f2:	2000      	movs	r0, #0
    30f4:	bd38      	pop	{r3, r4, r5, pc}
    30f6:	2000      	movs	r0, #0
    30f8:	e7d7      	b.n	30aa <_mci_sync_init+0xe>
    30fa:	bf00      	nop
    30fc:	0000bcc8 	.word	0x0000bcc8
    3100:	00002d05 	.word	0x00002d05

00003104 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    3104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3106:	4615      	mov	r5, r2
    3108:	461c      	mov	r4, r3
    310a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    310e:	4606      	mov	r6, r0
    3110:	b1d8      	cbz	r0, 314a <_mci_sync_select_device+0x46>
    3112:	6800      	ldr	r0, [r0, #0]
    3114:	3000      	adds	r0, #0
    3116:	bf18      	it	ne
    3118:	2001      	movne	r0, #1
    311a:	f44f 7280 	mov.w	r2, #256	; 0x100
    311e:	493a      	ldr	r1, [pc, #232]	; (3208 <_mci_sync_select_device+0x104>)
    3120:	4b3a      	ldr	r3, [pc, #232]	; (320c <_mci_sync_select_device+0x108>)
    3122:	4798      	blx	r3
	hw = mci_dev->hw;
    3124:	6833      	ldr	r3, [r6, #0]

	if (high_speed) {
    3126:	b197      	cbz	r7, 314e <_mci_sync_select_device+0x4a>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    3128:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    312c:	f042 0204 	orr.w	r2, r2, #4
    3130:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    3134:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    3136:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    313a:	d00f      	beq.n	315c <_mci_sync_select_device+0x58>
		_mci_set_speed(hw, clock, CONF_SDHC1_CLK_GEN_SEL);
	}

	switch (bus_width) {
    313c:	2c01      	cmp	r4, #1
    313e:	d053      	beq.n	31e8 <_mci_sync_select_device+0xe4>
    3140:	2c04      	cmp	r4, #4
    3142:	d059      	beq.n	31f8 <_mci_sync_select_device+0xf4>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    3144:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    3148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    314a:	2000      	movs	r0, #0
    314c:	e7e5      	b.n	311a <_mci_sync_select_device+0x16>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    314e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    3152:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    315a:	e7eb      	b.n	3134 <_mci_sync_select_device+0x30>
	tmp = ((Sdhc *)hw)->CCR.reg;
    315c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    315e:	f012 0f04 	tst.w	r2, #4
    3162:	d009      	beq.n	3178 <_mci_sync_select_device+0x74>
	return ((Sdhc *)hw)->PSR.reg;
    3164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    3166:	f012 0f03 	tst.w	r2, #3
    316a:	d1fb      	bne.n	3164 <_mci_sync_select_device+0x60>
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    316c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    316e:	f022 0204 	bic.w	r2, r2, #4
    3172:	0412      	lsls	r2, r2, #16
    3174:	0c12      	lsrs	r2, r2, #16
    3176:	859a      	strh	r2, [r3, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    3178:	6c59      	ldr	r1, [r3, #68]	; 0x44
    317a:	f3c1 4107 	ubfx	r1, r1, #16, #8
		clkbase = clkbase / 2;
    317e:	4824      	ldr	r0, [pc, #144]	; (3210 <_mci_sync_select_device+0x10c>)
    3180:	4a24      	ldr	r2, [pc, #144]	; (3214 <_mci_sync_select_device+0x110>)
    3182:	2900      	cmp	r1, #0
    3184:	bf18      	it	ne
    3186:	4602      	movne	r2, r0
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    3188:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    318a:	f021 0120 	bic.w	r1, r1, #32
    318e:	0409      	lsls	r1, r1, #16
    3190:	0c09      	lsrs	r1, r1, #16
    3192:	8599      	strh	r1, [r3, #44]	; 0x2c
		div = (clkbase / speed) / 2;
    3194:	fbb2 f2f5 	udiv	r2, r2, r5
    3198:	0852      	lsrs	r2, r2, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    319a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    319e:	f011 0f04 	tst.w	r1, #4
    31a2:	d002      	beq.n	31aa <_mci_sync_select_device+0xa6>
		div = 1;
    31a4:	2a00      	cmp	r2, #0
    31a6:	bf08      	it	eq
    31a8:	2201      	moveq	r2, #1
	tmp = ((Sdhc *)hw)->CCR.reg;
    31aa:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    31ac:	b2c9      	uxtb	r1, r1
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    31ae:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    31b2:	b289      	uxth	r1, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    31b4:	8599      	strh	r1, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    31b6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    31b8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    31bc:	0409      	lsls	r1, r1, #16
    31be:	0c09      	lsrs	r1, r1, #16
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    31c0:	0892      	lsrs	r2, r2, #2
    31c2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    31c6:	430a      	orrs	r2, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    31c8:	859a      	strh	r2, [r3, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    31ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    31cc:	b292      	uxth	r2, r2
    31ce:	f042 0201 	orr.w	r2, r2, #1
    31d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    31d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    31d6:	f012 0f02 	tst.w	r2, #2
    31da:	d0fb      	beq.n	31d4 <_mci_sync_select_device+0xd0>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    31dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    31de:	b292      	uxth	r2, r2
    31e0:	f042 0204 	orr.w	r2, r2, #4
    31e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    31e6:	e7a9      	b.n	313c <_mci_sync_select_device+0x38>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    31e8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    31ec:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    31f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    31f4:	2000      	movs	r0, #0
    31f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    31f8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    31fc:	f042 0202 	orr.w	r2, r2, #2
    3200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    3204:	2000      	movs	r0, #0
    3206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3208:	0000bcc8 	.word	0x0000bcc8
    320c:	00002d05 	.word	0x00002d05
    3210:	005b8d80 	.word	0x005b8d80
    3214:	00b71b00 	.word	0x00b71b00

00003218 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    3218:	2000      	movs	r0, #0
    321a:	4770      	bx	lr

0000321c <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    321c:	2900      	cmp	r1, #0

	default:
		/* Slot number wrong */
		return 0;
	}
}
    321e:	bf0c      	ite	eq
    3220:	2004      	moveq	r0, #4
    3222:	2000      	movne	r0, #0
    3224:	4770      	bx	lr

00003226 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    3226:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    3228:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    322a:	f3c0 5040 	ubfx	r0, r0, #21, #1
    322e:	4770      	bx	lr

00003230 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    3230:	b500      	push	{lr}
    3232:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    3234:	f240 1249 	movw	r2, #329	; 0x149
    3238:	490b      	ldr	r1, [pc, #44]	; (3268 <_mci_sync_send_clock+0x38>)
    323a:	3000      	adds	r0, #0
    323c:	bf18      	it	ne
    323e:	2001      	movne	r0, #1
    3240:	4b0a      	ldr	r3, [pc, #40]	; (326c <_mci_sync_send_clock+0x3c>)
    3242:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    3244:	2300      	movs	r3, #0
    3246:	9301      	str	r3, [sp, #4]
    3248:	9a01      	ldr	r2, [sp, #4]
    324a:	f241 3387 	movw	r3, #4999	; 0x1387
    324e:	429a      	cmp	r2, r3
    3250:	d806      	bhi.n	3260 <_mci_sync_send_clock+0x30>
    3252:	461a      	mov	r2, r3
    3254:	9b01      	ldr	r3, [sp, #4]
    3256:	3301      	adds	r3, #1
    3258:	9301      	str	r3, [sp, #4]
    325a:	9b01      	ldr	r3, [sp, #4]
    325c:	4293      	cmp	r3, r2
    325e:	d9f9      	bls.n	3254 <_mci_sync_send_clock+0x24>
		;
}
    3260:	b003      	add	sp, #12
    3262:	f85d fb04 	ldr.w	pc, [sp], #4
    3266:	bf00      	nop
    3268:	0000bcc8 	.word	0x0000bcc8
    326c:	00002d05 	.word	0x00002d05

00003270 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    3270:	b570      	push	{r4, r5, r6, lr}
    3272:	460d      	mov	r5, r1
    3274:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    3276:	4604      	mov	r4, r0
    3278:	b178      	cbz	r0, 329a <_mci_sync_send_cmd+0x2a>
    327a:	6800      	ldr	r0, [r0, #0]
    327c:	3000      	adds	r0, #0
    327e:	bf18      	it	ne
    3280:	2001      	movne	r0, #1
    3282:	f44f 72ab 	mov.w	r2, #342	; 0x156
    3286:	490c      	ldr	r1, [pc, #48]	; (32b8 <_mci_sync_send_cmd+0x48>)
    3288:	4b0c      	ldr	r3, [pc, #48]	; (32bc <_mci_sync_send_cmd+0x4c>)
    328a:	4798      	blx	r3
	hw = mci_dev->hw;
    328c:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    328e:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    3290:	f013 0f01 	tst.w	r3, #1
    3294:	d003      	beq.n	329e <_mci_sync_send_cmd+0x2e>
		return false;
    3296:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    3298:	bd70      	pop	{r4, r5, r6, pc}
    329a:	2000      	movs	r0, #0
    329c:	e7f1      	b.n	3282 <_mci_sync_send_cmd+0x12>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    329e:	8983      	ldrh	r3, [r0, #12]
    32a0:	f023 0301 	bic.w	r3, r3, #1
    32a4:	041b      	lsls	r3, r3, #16
    32a6:	0c1b      	lsrs	r3, r3, #16
    32a8:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    32aa:	2100      	movs	r1, #0
    32ac:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    32ae:	4633      	mov	r3, r6
    32b0:	462a      	mov	r2, r5
    32b2:	4c03      	ldr	r4, [pc, #12]	; (32c0 <_mci_sync_send_cmd+0x50>)
    32b4:	47a0      	blx	r4
    32b6:	bd70      	pop	{r4, r5, r6, pc}
    32b8:	0000bcc8 	.word	0x0000bcc8
    32bc:	00002d05 	.word	0x00002d05
    32c0:	00002f89 	.word	0x00002f89

000032c4 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    32c4:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    32c6:	4604      	mov	r4, r0
    32c8:	b158      	cbz	r0, 32e2 <_mci_sync_get_response+0x1e>
    32ca:	6800      	ldr	r0, [r0, #0]
    32cc:	3000      	adds	r0, #0
    32ce:	bf18      	it	ne
    32d0:	2001      	movne	r0, #1
    32d2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    32d6:	4904      	ldr	r1, [pc, #16]	; (32e8 <_mci_sync_get_response+0x24>)
    32d8:	4b04      	ldr	r3, [pc, #16]	; (32ec <_mci_sync_get_response+0x28>)
    32da:	4798      	blx	r3
	hw = mci_dev->hw;
    32dc:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    32de:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    32e0:	bd10      	pop	{r4, pc}
    32e2:	2000      	movs	r0, #0
    32e4:	e7f5      	b.n	32d2 <_mci_sync_get_response+0xe>
    32e6:	bf00      	nop
    32e8:	0000bcc8 	.word	0x0000bcc8
    32ec:	00002d05 	.word	0x00002d05

000032f0 <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    32f0:	b538      	push	{r3, r4, r5, lr}
    32f2:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    32f4:	4605      	mov	r5, r0
    32f6:	b160      	cbz	r0, 3312 <_mci_sync_get_response_128+0x22>
    32f8:	6800      	ldr	r0, [r0, #0]
    32fa:	3000      	adds	r0, #0
    32fc:	bf18      	it	ne
    32fe:	2001      	movne	r0, #1
    3300:	f240 1277 	movw	r2, #375	; 0x177
    3304:	4911      	ldr	r1, [pc, #68]	; (334c <_mci_sync_get_response_128+0x5c>)
    3306:	4b12      	ldr	r3, [pc, #72]	; (3350 <_mci_sync_get_response_128+0x60>)
    3308:	4798      	blx	r3
	hw = mci_dev->hw;
    330a:	682d      	ldr	r5, [r5, #0]
    330c:	2102      	movs	r1, #2
    330e:	2303      	movs	r3, #3
    3310:	e00b      	b.n	332a <_mci_sync_get_response_128+0x3a>
    3312:	2000      	movs	r0, #0
    3314:	e7f4      	b.n	3300 <_mci_sync_get_response_128+0x10>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    3316:	0c10      	lsrs	r0, r2, #16
    3318:	7020      	strb	r0, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    331a:	0a10      	lsrs	r0, r2, #8
    331c:	7060      	strb	r0, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    331e:	70a2      	strb	r2, [r4, #2]
		response++;
    3320:	3403      	adds	r4, #3
    3322:	3b01      	subs	r3, #1
    3324:	b2db      	uxtb	r3, r3
    3326:	3901      	subs	r1, #1
    3328:	b2c9      	uxtb	r1, r1
    332a:	1d1a      	adds	r2, r3, #4
    332c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
		if (i != 3) {
    3330:	2b03      	cmp	r3, #3
    3332:	d0f0      	beq.n	3316 <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    3334:	0e10      	lsrs	r0, r2, #24
    3336:	7020      	strb	r0, [r4, #0]
		*response = (response_32 >> 16) & 0xFF;
    3338:	0c10      	lsrs	r0, r2, #16
    333a:	7060      	strb	r0, [r4, #1]
		*response = (response_32 >> 8) & 0xFF;
    333c:	0a10      	lsrs	r0, r2, #8
    333e:	70a0      	strb	r0, [r4, #2]
		*response = (response_32 >> 0) & 0xFF;
    3340:	70e2      	strb	r2, [r4, #3]
		response++;
    3342:	3404      	adds	r4, #4
	for (int8_t i = 3; i >= 0; i--) {
    3344:	f011 0f80 	tst.w	r1, #128	; 0x80
    3348:	d0eb      	beq.n	3322 <_mci_sync_get_response_128+0x32>
    334a:	bd38      	pop	{r3, r4, r5, pc}
    334c:	0000bcc8 	.word	0x0000bcc8
    3350:	00002d05 	.word	0x00002d05

00003354 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    3354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3358:	460d      	mov	r5, r1
    335a:	4690      	mov	r8, r2
    335c:	461f      	mov	r7, r3
    335e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    3362:	4604      	mov	r4, r0
    3364:	2800      	cmp	r0, #0
    3366:	d032      	beq.n	33ce <_mci_sync_adtc_start+0x7a>
    3368:	6800      	ldr	r0, [r0, #0]
    336a:	3000      	adds	r0, #0
    336c:	bf18      	it	ne
    336e:	2001      	movne	r0, #1
    3370:	f240 1293 	movw	r2, #403	; 0x193
    3374:	4920      	ldr	r1, [pc, #128]	; (33f8 <_mci_sync_adtc_start+0xa4>)
    3376:	4b21      	ldr	r3, [pc, #132]	; (33fc <_mci_sync_adtc_start+0xa8>)
    3378:	4798      	blx	r3
	hw = mci_dev->hw;
    337a:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    337c:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    337e:	f013 0f01 	tst.w	r3, #1
    3382:	d12f      	bne.n	33e4 <_mci_sync_adtc_start+0x90>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    3384:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3386:	f013 0f02 	tst.w	r3, #2
    338a:	d12e      	bne.n	33ea <_mci_sync_adtc_start+0x96>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    338c:	f405 4300 	and.w	r3, r5, #32768	; 0x8000
		tmr = SDHC_TMR_DTDSEL_WRITE;
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
    3390:	2b00      	cmp	r3, #0
    3392:	bf14      	ite	ne
    3394:	2300      	movne	r3, #0
    3396:	2310      	moveq	r3, #16
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    3398:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    339c:	d104      	bne.n	33a8 <_mci_sync_adtc_start+0x54>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    339e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    33a2:	d016      	beq.n	33d2 <_mci_sync_adtc_start+0x7e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    33a4:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    33a8:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    33aa:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    33ac:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    33b0:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    33b2:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    33b4:	2200      	movs	r2, #0
    33b6:	2300      	movs	r3, #0
    33b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    33bc:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    33be:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    33c0:	4643      	mov	r3, r8
    33c2:	462a      	mov	r2, r5
    33c4:	2120      	movs	r1, #32
    33c6:	4c0e      	ldr	r4, [pc, #56]	; (3400 <_mci_sync_adtc_start+0xac>)
    33c8:	47a0      	blx	r4
    33ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ce:	2000      	movs	r0, #0
    33d0:	e7ce      	b.n	3370 <_mci_sync_adtc_start+0x1c>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    33d2:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    33d6:	d1e7      	bne.n	33a8 <_mci_sync_adtc_start+0x54>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    33d8:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    33dc:	d008      	beq.n	33f0 <_mci_sync_adtc_start+0x9c>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    33de:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    33e2:	e7e1      	b.n	33a8 <_mci_sync_adtc_start+0x54>
		return false;
    33e4:	2000      	movs	r0, #0
    33e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ea:	2000      	movs	r0, #0
    33ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    33f0:	2000      	movs	r0, #0
}
    33f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33f6:	bf00      	nop
    33f8:	0000bcc8 	.word	0x0000bcc8
    33fc:	00002d05 	.word	0x00002d05
    3400:	00002f89 	.word	0x00002f89

00003404 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    3404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3408:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    340a:	4605      	mov	r5, r0
    340c:	2800      	cmp	r0, #0
    340e:	d04d      	beq.n	34ac <_mci_sync_read_word+0xa8>
    3410:	6800      	ldr	r0, [r0, #0]
    3412:	3000      	adds	r0, #0
    3414:	bf18      	it	ne
    3416:	2001      	movne	r0, #1
    3418:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    341c:	4939      	ldr	r1, [pc, #228]	; (3504 <_mci_sync_read_word+0x100>)
    341e:	4b3a      	ldr	r3, [pc, #232]	; (3508 <_mci_sync_read_word+0x104>)
    3420:	4798      	blx	r3
	hw = mci_dev->hw;
    3422:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    3424:	8a2a      	ldrh	r2, [r5, #16]
    3426:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    342a:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    342e:	fb02 f808 	mul.w	r8, r2, r8
    3432:	ea4f 79e8 	mov.w	r9, r8, asr #31
    3436:	ebb8 0800 	subs.w	r8, r8, r0
    343a:	eb69 0901 	sbc.w	r9, r9, r1
    343e:	f1b9 0f00 	cmp.w	r9, #0
    3442:	bf08      	it	eq
    3444:	f1b8 0f04 	cmpeq.w	r8, #4
    3448:	d245      	bcs.n	34d6 <_mci_sync_read_word+0xd2>
    344a:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    344e:	b292      	uxth	r2, r2
    3450:	2300      	movs	r3, #0
    3452:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3510 <_mci_sync_read_word+0x10c>
    3456:	47c0      	blx	r8
    3458:	4313      	orrs	r3, r2
    345a:	d043      	beq.n	34e4 <_mci_sync_read_word+0xe0>
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    345c:	2e04      	cmp	r6, #4
    345e:	d02d      	beq.n	34bc <_mci_sync_read_word+0xb8>
	return ((Sdhc *)hw)->BDPR.reg;
    3460:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    3462:	1e72      	subs	r2, r6, #1
    3464:	2a02      	cmp	r2, #2
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    3466:	bf9c      	itt	ls
    3468:	b2db      	uxtbls	r3, r3
    346a:	603b      	strls	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    346c:	b2f6      	uxtb	r6, r6
    346e:	2700      	movs	r7, #0
    3470:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    3474:	18b6      	adds	r6, r6, r2
    3476:	415f      	adcs	r7, r3
    3478:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    347c:	8a2a      	ldrh	r2, [r5, #16]
    347e:	8a68      	ldrh	r0, [r5, #18]
    3480:	fba2 2300 	umull	r2, r3, r2, r0
    3484:	429f      	cmp	r7, r3
    3486:	bf08      	it	eq
    3488:	4296      	cmpeq	r6, r2
    348a:	d321      	bcc.n	34d0 <_mci_sync_read_word+0xcc>
	return ((Sdhc *)hw)->EISTR.reg;
    348c:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    348e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3492:	b9bb      	cbnz	r3, 34c4 <_mci_sync_read_word+0xc0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3494:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    3496:	f013 0f02 	tst.w	r3, #2
    349a:	d0f7      	beq.n	348c <_mci_sync_read_word+0x88>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    349c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    349e:	b29b      	uxth	r3, r3
    34a0:	f043 0302 	orr.w	r3, r3, #2
    34a4:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    34a6:	2001      	movs	r0, #1
    34a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    34ac:	2000      	movs	r0, #0
    34ae:	e7b3      	b.n	3418 <_mci_sync_read_word+0x14>
				_mci_reset(hw);
    34b0:	4620      	mov	r0, r4
    34b2:	4b16      	ldr	r3, [pc, #88]	; (350c <_mci_sync_read_word+0x108>)
    34b4:	4798      	blx	r3
				return false;
    34b6:	2000      	movs	r0, #0
    34b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    34bc:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    34be:	603b      	str	r3, [r7, #0]
    34c0:	2604      	movs	r6, #4
    34c2:	e7d3      	b.n	346c <_mci_sync_read_word+0x68>
			_mci_reset(hw);
    34c4:	4620      	mov	r0, r4
    34c6:	4b11      	ldr	r3, [pc, #68]	; (350c <_mci_sync_read_word+0x108>)
    34c8:	4798      	blx	r3
			return false;
    34ca:	2000      	movs	r0, #0
    34cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    34d0:	2001      	movs	r0, #1
    34d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    34d6:	b292      	uxth	r2, r2
    34d8:	2300      	movs	r3, #0
    34da:	4e0d      	ldr	r6, [pc, #52]	; (3510 <_mci_sync_read_word+0x10c>)
    34dc:	47b0      	blx	r6
    34de:	4313      	orrs	r3, r2
    34e0:	d1ec      	bne.n	34bc <_mci_sync_read_word+0xb8>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    34e2:	2604      	movs	r6, #4
	return ((Sdhc *)hw)->EISTR.reg;
    34e4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    34e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    34ea:	2b00      	cmp	r3, #0
    34ec:	d1e0      	bne.n	34b0 <_mci_sync_read_word+0xac>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    34ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    34f0:	f013 0f20 	tst.w	r3, #32
    34f4:	d0f6      	beq.n	34e4 <_mci_sync_read_word+0xe0>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    34f6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    34f8:	b29b      	uxth	r3, r3
    34fa:	f043 0320 	orr.w	r3, r3, #32
    34fe:	8623      	strh	r3, [r4, #48]	; 0x30
    3500:	e7ac      	b.n	345c <_mci_sync_read_word+0x58>
    3502:	bf00      	nop
    3504:	0000bcc8 	.word	0x0000bcc8
    3508:	00002d05 	.word	0x00002d05
    350c:	00002f61 	.word	0x00002f61
    3510:	00007525 	.word	0x00007525

00003514 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    3514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3516:	460e      	mov	r6, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    3518:	4605      	mov	r5, r0
    351a:	2800      	cmp	r0, #0
    351c:	d03d      	beq.n	359a <_mci_sync_write_word+0x86>
    351e:	6800      	ldr	r0, [r0, #0]
    3520:	3000      	adds	r0, #0
    3522:	bf18      	it	ne
    3524:	2001      	movne	r0, #1
    3526:	f240 220f 	movw	r2, #527	; 0x20f
    352a:	4923      	ldr	r1, [pc, #140]	; (35b8 <_mci_sync_write_word+0xa4>)
    352c:	4b23      	ldr	r3, [pc, #140]	; (35bc <_mci_sync_write_word+0xa8>)
    352e:	4798      	blx	r3
	hw = mci_dev->hw;
    3530:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    3532:	8a2a      	ldrh	r2, [r5, #16]
    3534:	2300      	movs	r3, #0
    3536:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    353a:	4f21      	ldr	r7, [pc, #132]	; (35c0 <_mci_sync_write_word+0xac>)
    353c:	47b8      	blx	r7
    353e:	4313      	orrs	r3, r2
    3540:	d10c      	bne.n	355c <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    3542:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    3544:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3548:	bb4b      	cbnz	r3, 359e <_mci_sync_write_word+0x8a>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    354a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    354c:	f013 0f10 	tst.w	r3, #16
    3550:	d0f7      	beq.n	3542 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    3552:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3554:	b29b      	uxth	r3, r3
    3556:	f043 0310 	orr.w	r3, r3, #16
    355a:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    355c:	6226      	str	r6, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    355e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    3562:	3204      	adds	r2, #4
    3564:	f143 0300 	adc.w	r3, r3, #0
    3568:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    356c:	8a28      	ldrh	r0, [r5, #16]
    356e:	8a6e      	ldrh	r6, [r5, #18]
    3570:	fba0 0106 	umull	r0, r1, r0, r6
    3574:	428b      	cmp	r3, r1
    3576:	bf08      	it	eq
    3578:	4282      	cmpeq	r2, r0
    357a:	d31a      	bcc.n	35b2 <_mci_sync_write_word+0x9e>
	return ((Sdhc *)hw)->EISTR.reg;
    357c:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    357e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3582:	b98b      	cbnz	r3, 35a8 <_mci_sync_write_word+0x94>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3584:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    3586:	f013 0f02 	tst.w	r3, #2
    358a:	d0f7      	beq.n	357c <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    358c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    358e:	b29b      	uxth	r3, r3
    3590:	f043 0302 	orr.w	r3, r3, #2
    3594:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    3596:	2001      	movs	r0, #1
    3598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    359a:	2000      	movs	r0, #0
    359c:	e7c3      	b.n	3526 <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    359e:	4620      	mov	r0, r4
    35a0:	4b08      	ldr	r3, [pc, #32]	; (35c4 <_mci_sync_write_word+0xb0>)
    35a2:	4798      	blx	r3
				return false;
    35a4:	2000      	movs	r0, #0
    35a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    35a8:	4620      	mov	r0, r4
    35aa:	4b06      	ldr	r3, [pc, #24]	; (35c4 <_mci_sync_write_word+0xb0>)
    35ac:	4798      	blx	r3
			return false;
    35ae:	2000      	movs	r0, #0
    35b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    35b2:	2001      	movs	r0, #1
}
    35b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35b6:	bf00      	nop
    35b8:	0000bcc8 	.word	0x0000bcc8
    35bc:	00002d05 	.word	0x00002d05
    35c0:	00007525 	.word	0x00007525
    35c4:	00002f61 	.word	0x00002f61

000035c8 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    35c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35cc:	460e      	mov	r6, r1
    35ce:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    35d0:	4607      	mov	r7, r0
    35d2:	b300      	cbz	r0, 3616 <_mci_sync_start_read_blocks+0x4e>
    35d4:	6800      	ldr	r0, [r0, #0]
    35d6:	3000      	adds	r0, #0
    35d8:	bf18      	it	ne
    35da:	2001      	movne	r0, #1
    35dc:	4d18      	ldr	r5, [pc, #96]	; (3640 <_mci_sync_start_read_blocks+0x78>)
    35de:	f240 223e 	movw	r2, #574	; 0x23e
    35e2:	4629      	mov	r1, r5
    35e4:	4c17      	ldr	r4, [pc, #92]	; (3644 <_mci_sync_start_read_blocks+0x7c>)
    35e6:	47a0      	blx	r4
	ASSERT(nb_block);
    35e8:	f240 223f 	movw	r2, #575	; 0x23f
    35ec:	4629      	mov	r1, r5
    35ee:	f118 0000 	adds.w	r0, r8, #0
    35f2:	bf18      	it	ne
    35f4:	2001      	movne	r0, #1
    35f6:	47a0      	blx	r4
	ASSERT(dst);
    35f8:	f44f 7210 	mov.w	r2, #576	; 0x240
    35fc:	4629      	mov	r1, r5
    35fe:	1c30      	adds	r0, r6, #0
    3600:	bf18      	it	ne
    3602:	2001      	movne	r0, #1
    3604:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    3606:	8a3d      	ldrh	r5, [r7, #16]
    3608:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    360c:	b1a5      	cbz	r5, 3638 <_mci_sync_start_read_blocks+0x70>
    360e:	2404      	movs	r4, #4
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    3610:	f8df 8034 	ldr.w	r8, [pc, #52]	; 3648 <_mci_sync_start_read_blocks+0x80>
    3614:	e004      	b.n	3620 <_mci_sync_start_read_blocks+0x58>
    3616:	2000      	movs	r0, #0
    3618:	e7e0      	b.n	35dc <_mci_sync_start_read_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    361a:	4426      	add	r6, r4
	while (nb_data) {
    361c:	1b2d      	subs	r5, r5, r4
    361e:	d00b      	beq.n	3638 <_mci_sync_start_read_blocks+0x70>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    3620:	4631      	mov	r1, r6
    3622:	4638      	mov	r0, r7
    3624:	47c0      	blx	r8
		if (nb_data < nbytes) {
    3626:	42ac      	cmp	r4, r5
    3628:	d9f7      	bls.n	361a <_mci_sync_start_read_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    362a:	8a3b      	ldrh	r3, [r7, #16]
    362c:	fb93 f2f4 	sdiv	r2, r3, r4
    3630:	fb04 3412 	mls	r4, r4, r2, r3
    3634:	b2e4      	uxtb	r4, r4
    3636:	e7f0      	b.n	361a <_mci_sync_start_read_blocks+0x52>
	}

	return true;
}
    3638:	2001      	movs	r0, #1
    363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    363e:	bf00      	nop
    3640:	0000bcc8 	.word	0x0000bcc8
    3644:	00002d05 	.word	0x00002d05
    3648:	00003405 	.word	0x00003405

0000364c <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3650:	460e      	mov	r6, r1
    3652:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    3654:	4607      	mov	r7, r0
    3656:	b300      	cbz	r0, 369a <_mci_sync_start_write_blocks+0x4e>
    3658:	6800      	ldr	r0, [r0, #0]
    365a:	3000      	adds	r0, #0
    365c:	bf18      	it	ne
    365e:	2001      	movne	r0, #1
    3660:	4d18      	ldr	r5, [pc, #96]	; (36c4 <_mci_sync_start_write_blocks+0x78>)
    3662:	f240 225a 	movw	r2, #602	; 0x25a
    3666:	4629      	mov	r1, r5
    3668:	4c17      	ldr	r4, [pc, #92]	; (36c8 <_mci_sync_start_write_blocks+0x7c>)
    366a:	47a0      	blx	r4
	ASSERT(nb_block);
    366c:	f240 225b 	movw	r2, #603	; 0x25b
    3670:	4629      	mov	r1, r5
    3672:	f118 0000 	adds.w	r0, r8, #0
    3676:	bf18      	it	ne
    3678:	2001      	movne	r0, #1
    367a:	47a0      	blx	r4
	ASSERT(src);
    367c:	f44f 7217 	mov.w	r2, #604	; 0x25c
    3680:	4629      	mov	r1, r5
    3682:	1c30      	adds	r0, r6, #0
    3684:	bf18      	it	ne
    3686:	2001      	movne	r0, #1
    3688:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    368a:	8a3d      	ldrh	r5, [r7, #16]
    368c:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    3690:	b1a5      	cbz	r5, 36bc <_mci_sync_start_write_blocks+0x70>
    3692:	2404      	movs	r4, #4
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    3694:	f8df 8034 	ldr.w	r8, [pc, #52]	; 36cc <_mci_sync_start_write_blocks+0x80>
    3698:	e004      	b.n	36a4 <_mci_sync_start_write_blocks+0x58>
    369a:	2000      	movs	r0, #0
    369c:	e7e0      	b.n	3660 <_mci_sync_start_write_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    369e:	4426      	add	r6, r4
	while (nb_data) {
    36a0:	1b2d      	subs	r5, r5, r4
    36a2:	d00b      	beq.n	36bc <_mci_sync_start_write_blocks+0x70>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    36a4:	6831      	ldr	r1, [r6, #0]
    36a6:	4638      	mov	r0, r7
    36a8:	47c0      	blx	r8
		if (nb_data < nbytes) {
    36aa:	42ac      	cmp	r4, r5
    36ac:	d9f7      	bls.n	369e <_mci_sync_start_write_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    36ae:	8a3b      	ldrh	r3, [r7, #16]
    36b0:	fb93 f2f4 	sdiv	r2, r3, r4
    36b4:	fb04 3412 	mls	r4, r4, r2, r3
    36b8:	b2e4      	uxtb	r4, r4
    36ba:	e7f0      	b.n	369e <_mci_sync_start_write_blocks+0x52>
	}

	return true;
}
    36bc:	2001      	movs	r0, #1
    36be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36c2:	bf00      	nop
    36c4:	0000bcc8 	.word	0x0000bcc8
    36c8:	00002d05 	.word	0x00002d05
    36cc:	00003515 	.word	0x00003515

000036d0 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    36d0:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    36d2:	b150      	cbz	r0, 36ea <_mci_sync_wait_end_of_read_blocks+0x1a>
    36d4:	6800      	ldr	r0, [r0, #0]
    36d6:	3000      	adds	r0, #0
    36d8:	bf18      	it	ne
    36da:	2001      	movne	r0, #1
    36dc:	f240 2271 	movw	r2, #625	; 0x271
    36e0:	4903      	ldr	r1, [pc, #12]	; (36f0 <_mci_sync_wait_end_of_read_blocks+0x20>)
    36e2:	4b04      	ldr	r3, [pc, #16]	; (36f4 <_mci_sync_wait_end_of_read_blocks+0x24>)
    36e4:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    36e6:	2001      	movs	r0, #1
    36e8:	bd08      	pop	{r3, pc}
    36ea:	2000      	movs	r0, #0
    36ec:	e7f6      	b.n	36dc <_mci_sync_wait_end_of_read_blocks+0xc>
    36ee:	bf00      	nop
    36f0:	0000bcc8 	.word	0x0000bcc8
    36f4:	00002d05 	.word	0x00002d05

000036f8 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    36f8:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    36fa:	b150      	cbz	r0, 3712 <_mci_sync_wait_end_of_write_blocks+0x1a>
    36fc:	6800      	ldr	r0, [r0, #0]
    36fe:	3000      	adds	r0, #0
    3700:	bf18      	it	ne
    3702:	2001      	movne	r0, #1
    3704:	f44f 721f 	mov.w	r2, #636	; 0x27c
    3708:	4903      	ldr	r1, [pc, #12]	; (3718 <_mci_sync_wait_end_of_write_blocks+0x20>)
    370a:	4b04      	ldr	r3, [pc, #16]	; (371c <_mci_sync_wait_end_of_write_blocks+0x24>)
    370c:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    370e:	2001      	movs	r0, #1
    3710:	bd08      	pop	{r3, pc}
    3712:	2000      	movs	r0, #0
    3714:	e7f6      	b.n	3704 <_mci_sync_wait_end_of_write_blocks+0xc>
    3716:	bf00      	nop
    3718:	0000bcc8 	.word	0x0000bcc8
    371c:	00002d05 	.word	0x00002d05

00003720 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3720:	b470      	push	{r4, r5, r6}
    3722:	b089      	sub	sp, #36	; 0x24
    3724:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3726:	466c      	mov	r4, sp
    3728:	4d0d      	ldr	r5, [pc, #52]	; (3760 <_sercom_get_hardware_index+0x40>)
    372a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    372c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    372e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3736:	9b00      	ldr	r3, [sp, #0]
    3738:	42b3      	cmp	r3, r6
    373a:	d00d      	beq.n	3758 <_sercom_get_hardware_index+0x38>
    373c:	4631      	mov	r1, r6
    373e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3740:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3742:	f853 2b04 	ldr.w	r2, [r3], #4
    3746:	428a      	cmp	r2, r1
    3748:	d007      	beq.n	375a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    374a:	3001      	adds	r0, #1
    374c:	2808      	cmp	r0, #8
    374e:	d1f8      	bne.n	3742 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    3750:	2000      	movs	r0, #0
}
    3752:	b009      	add	sp, #36	; 0x24
    3754:	bc70      	pop	{r4, r5, r6}
    3756:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3758:	2000      	movs	r0, #0
			return i;
    375a:	b2c0      	uxtb	r0, r0
    375c:	e7f9      	b.n	3752 <_sercom_get_hardware_index+0x32>
    375e:	bf00      	nop
    3760:	0000bce0 	.word	0x0000bce0

00003764 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3764:	b510      	push	{r4, lr}
    3766:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3768:	4b41      	ldr	r3, [pc, #260]	; (3870 <_usart_init+0x10c>)
    376a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    376c:	2800      	cmp	r0, #0
    376e:	d05c      	beq.n	382a <_usart_init+0xc6>
    3770:	2802      	cmp	r0, #2
    3772:	d05c      	beq.n	382e <_usart_init+0xca>
	ASSERT(false);
    3774:	f240 2247 	movw	r2, #583	; 0x247
    3778:	493e      	ldr	r1, [pc, #248]	; (3874 <_usart_init+0x110>)
    377a:	2000      	movs	r0, #0
    377c:	4b3e      	ldr	r3, [pc, #248]	; (3878 <_usart_init+0x114>)
    377e:	4798      	blx	r3
	return 0;
    3780:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3782:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3784:	f013 0f01 	tst.w	r3, #1
    3788:	d122      	bne.n	37d0 <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    378a:	004b      	lsls	r3, r1, #1
    378c:	185a      	adds	r2, r3, r1
    378e:	4b3b      	ldr	r3, [pc, #236]	; (387c <_usart_init+0x118>)
    3790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3796:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    379a:	69e3      	ldr	r3, [r4, #28]
    379c:	f013 0f03 	tst.w	r3, #3
    37a0:	d1fb      	bne.n	379a <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    37a2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    37a4:	f013 0f02 	tst.w	r3, #2
    37a8:	d00b      	beq.n	37c2 <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    37aa:	6823      	ldr	r3, [r4, #0]
    37ac:	f023 0302 	bic.w	r3, r3, #2
    37b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    37b2:	69e3      	ldr	r3, [r4, #28]
    37b4:	f013 0f03 	tst.w	r3, #3
    37b8:	d1fb      	bne.n	37b2 <_usart_init+0x4e>
    37ba:	69e3      	ldr	r3, [r4, #28]
    37bc:	f013 0f02 	tst.w	r3, #2
    37c0:	d1fb      	bne.n	37ba <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    37c2:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    37c6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    37c8:	69e3      	ldr	r3, [r4, #28]
    37ca:	f013 0f03 	tst.w	r3, #3
    37ce:	d1fb      	bne.n	37c8 <_usart_init+0x64>
    37d0:	69e3      	ldr	r3, [r4, #28]
    37d2:	f013 0f01 	tst.w	r3, #1
    37d6:	d1fb      	bne.n	37d0 <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    37d8:	460a      	mov	r2, r1
    37da:	004b      	lsls	r3, r1, #1
    37dc:	440b      	add	r3, r1
    37de:	4927      	ldr	r1, [pc, #156]	; (387c <_usart_init+0x118>)
    37e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    37e4:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    37e6:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    37e8:	69e3      	ldr	r3, [r4, #28]
    37ea:	f013 0f03 	tst.w	r3, #3
    37ee:	d1fb      	bne.n	37e8 <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    37f0:	0053      	lsls	r3, r2, #1
    37f2:	1899      	adds	r1, r3, r2
    37f4:	4b21      	ldr	r3, [pc, #132]	; (387c <_usart_init+0x118>)
    37f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    37fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    37fc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    37fe:	69e3      	ldr	r3, [r4, #28]
    3800:	f013 0f1f 	tst.w	r3, #31
    3804:	d1fb      	bne.n	37fe <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3806:	0053      	lsls	r3, r2, #1
    3808:	1899      	adds	r1, r3, r2
    380a:	4b1c      	ldr	r3, [pc, #112]	; (387c <_usart_init+0x118>)
    380c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3812:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3814:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3818:	d10b      	bne.n	3832 <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    381a:	0053      	lsls	r3, r2, #1
    381c:	1899      	adds	r1, r3, r2
    381e:	4b17      	ldr	r3, [pc, #92]	; (387c <_usart_init+0x118>)
    3820:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3824:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    3826:	81a3      	strh	r3, [r4, #12]
    3828:	e011      	b.n	384e <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    382a:	2100      	movs	r1, #0
    382c:	e7a9      	b.n	3782 <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
    382e:	2101      	movs	r1, #1
    3830:	e7a7      	b.n	3782 <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3832:	4b12      	ldr	r3, [pc, #72]	; (387c <_usart_init+0x118>)
    3834:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3838:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    383a:	89a1      	ldrh	r1, [r4, #12]
    383c:	f360 010c 	bfi	r1, r0, #0, #13
    3840:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3842:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    3846:	89a3      	ldrh	r3, [r4, #12]
    3848:	f361 334f 	bfi	r3, r1, #13, #3
    384c:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    384e:	4b0b      	ldr	r3, [pc, #44]	; (387c <_usart_init+0x118>)
    3850:	0051      	lsls	r1, r2, #1
    3852:	1888      	adds	r0, r1, r2
    3854:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3858:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    385c:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    385e:	440a      	add	r2, r1
    3860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3868:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    386c:	2000      	movs	r0, #0
    386e:	bd10      	pop	{r4, pc}
    3870:	00003721 	.word	0x00003721
    3874:	0000bd48 	.word	0x0000bd48
    3878:	00002d05 	.word	0x00002d05
    387c:	0000bce0 	.word	0x0000bce0

00003880 <_usart_sync_init>:
{
    3880:	b538      	push	{r3, r4, r5, lr}
    3882:	460c      	mov	r4, r1
	ASSERT(device);
    3884:	4605      	mov	r5, r0
    3886:	22bb      	movs	r2, #187	; 0xbb
    3888:	4905      	ldr	r1, [pc, #20]	; (38a0 <_usart_sync_init+0x20>)
    388a:	3000      	adds	r0, #0
    388c:	bf18      	it	ne
    388e:	2001      	movne	r0, #1
    3890:	4b04      	ldr	r3, [pc, #16]	; (38a4 <_usart_sync_init+0x24>)
    3892:	4798      	blx	r3
	device->hw = hw;
    3894:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    3896:	4620      	mov	r0, r4
    3898:	4b03      	ldr	r3, [pc, #12]	; (38a8 <_usart_sync_init+0x28>)
    389a:	4798      	blx	r3
}
    389c:	bd38      	pop	{r3, r4, r5, pc}
    389e:	bf00      	nop
    38a0:	0000bd48 	.word	0x0000bd48
    38a4:	00002d05 	.word	0x00002d05
    38a8:	00003765 	.word	0x00003765

000038ac <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    38ac:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    38ae:	6813      	ldr	r3, [r2, #0]
    38b0:	f043 0302 	orr.w	r3, r3, #2
    38b4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    38b6:	69d3      	ldr	r3, [r2, #28]
    38b8:	f013 0f03 	tst.w	r3, #3
    38bc:	d1fb      	bne.n	38b6 <_usart_sync_enable+0xa>
}
    38be:	4770      	bx	lr

000038c0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    38c0:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    38c2:	6299      	str	r1, [r3, #40]	; 0x28
    38c4:	4770      	bx	lr

000038c6 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    38c6:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    38c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    38ca:	b2c0      	uxtb	r0, r0
    38cc:	4770      	bx	lr

000038ce <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    38ce:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    38d0:	7e18      	ldrb	r0, [r3, #24]
}
    38d2:	f000 0001 	and.w	r0, r0, #1
    38d6:	4770      	bx	lr

000038d8 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    38d8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    38da:	7e18      	ldrb	r0, [r3, #24]
}
    38dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    38e0:	4770      	bx	lr

000038e2 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    38e2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    38e4:	7e18      	ldrb	r0, [r3, #24]
}
    38e6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    38ea:	4770      	bx	lr

000038ec <HardFault_Handler>:
  * and passes it to the handler written in C as a pointer. Also extracts the LR
  * value as the second parameter
  */
void HardFault_Handler(void)
{
	__asm volatile
    38ec:	f01e 0f04 	tst.w	lr, #4
    38f0:	bf0c      	ite	eq
    38f2:	f3ef 8008 	mrseq	r0, MSP
    38f6:	f3ef 8009 	mrsne	r0, PSP
    38fa:	4671      	mov	r1, lr
    38fc:	f000 b800 	b.w	3900 <HardFault_Handler_C>

00003900 <HardFault_Handler_C>:
/**
  * HardFault Handler in C, with stack frame location and LR value extracted from
  * assembly wrapper as input parameters. Same for all Cortex-M4 Processors.
  */
void HardFault_Handler_C(unsigned int * hardfault_args, unsigned int lr_value)
{	
    3900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3904:	b087      	sub	sp, #28
    3906:	9105      	str	r1, [sp, #20]
	unsigned int stacked_psr;
	uint32_t cfsr;
	uint32_t bus_fault_address;
	uint32_t memmanage_fault_address;
	
	bus_fault_address       = SCB->BFAR;
    3908:	4e38      	ldr	r6, [pc, #224]	; (39ec <HardFault_Handler_C+0xec>)
    390a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    390c:	9300      	str	r3, [sp, #0]
	memmanage_fault_address = SCB->MMFAR;
    390e:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3910:	9201      	str	r2, [sp, #4]
	cfsr                    = SCB->CFSR;
    3912:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	
	stacked_r0  = ((unsigned int) hardfault_args[0]);
    3914:	6804      	ldr	r4, [r0, #0]
	stacked_r1  = ((unsigned int) hardfault_args[1]);
    3916:	f8d0 b004 	ldr.w	fp, [r0, #4]
	stacked_r2  = ((unsigned int) hardfault_args[2]);
    391a:	f8d0 a008 	ldr.w	sl, [r0, #8]
	stacked_r3  = ((unsigned int) hardfault_args[3]);
    391e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	stacked_r12 = ((unsigned int) hardfault_args[4]);
    3922:	f8d0 8010 	ldr.w	r8, [r0, #16]
	stacked_lr  = ((unsigned int) hardfault_args[5]);
    3926:	6945      	ldr	r5, [r0, #20]
    3928:	9502      	str	r5, [sp, #8]
	stacked_pc  = ((unsigned int) hardfault_args[6]);
    392a:	6983      	ldr	r3, [r0, #24]
    392c:	9303      	str	r3, [sp, #12]
	stacked_psr = ((unsigned int) hardfault_args[7]);
    392e:	69c0      	ldr	r0, [r0, #28]
    3930:	9004      	str	r0, [sp, #16]
	
	printf("[HardFault]\r\n");
    3932:	482f      	ldr	r0, [pc, #188]	; (39f0 <HardFault_Handler_C+0xf0>)
    3934:	4d2f      	ldr	r5, [pc, #188]	; (39f4 <HardFault_Handler_C+0xf4>)
    3936:	47a8      	blx	r5
	printf(" | Stack frame:\r\n");
    3938:	482f      	ldr	r0, [pc, #188]	; (39f8 <HardFault_Handler_C+0xf8>)
    393a:	47a8      	blx	r5
	printf(" | | R0   = 0x%08X\r\n", (unsigned)stacked_r0);
    393c:	4621      	mov	r1, r4
    393e:	482f      	ldr	r0, [pc, #188]	; (39fc <HardFault_Handler_C+0xfc>)
    3940:	4c2f      	ldr	r4, [pc, #188]	; (3a00 <HardFault_Handler_C+0x100>)
    3942:	47a0      	blx	r4
	printf(" | | R1   = 0x%08X\r\n", (unsigned)stacked_r1);
    3944:	4659      	mov	r1, fp
    3946:	482f      	ldr	r0, [pc, #188]	; (3a04 <HardFault_Handler_C+0x104>)
    3948:	47a0      	blx	r4
	printf(" | | R2   = 0x%08X\r\n", (unsigned)stacked_r2);
    394a:	4651      	mov	r1, sl
    394c:	482e      	ldr	r0, [pc, #184]	; (3a08 <HardFault_Handler_C+0x108>)
    394e:	47a0      	blx	r4
	printf(" | | R3   = 0x%08X\r\n", (unsigned)stacked_r3);
    3950:	4649      	mov	r1, r9
    3952:	482e      	ldr	r0, [pc, #184]	; (3a0c <HardFault_Handler_C+0x10c>)
    3954:	47a0      	blx	r4
	printf(" | | R12  = 0x%08X\r\n", (unsigned)stacked_r12);
    3956:	4641      	mov	r1, r8
    3958:	482d      	ldr	r0, [pc, #180]	; (3a10 <HardFault_Handler_C+0x110>)
    395a:	47a0      	blx	r4
	printf(" | | LR   = 0x%08X\r\n", (unsigned)stacked_lr);
    395c:	9902      	ldr	r1, [sp, #8]
    395e:	482d      	ldr	r0, [pc, #180]	; (3a14 <HardFault_Handler_C+0x114>)
    3960:	47a0      	blx	r4
	printf(" | | PC   = 0x%08X\r\n", (unsigned)stacked_pc);
    3962:	9903      	ldr	r1, [sp, #12]
    3964:	482c      	ldr	r0, [pc, #176]	; (3a18 <HardFault_Handler_C+0x118>)
    3966:	47a0      	blx	r4
	printf(" | | PSR  = 0x%08X\r\n", (unsigned)stacked_psr);
    3968:	9904      	ldr	r1, [sp, #16]
    396a:	482c      	ldr	r0, [pc, #176]	; (3a1c <HardFault_Handler_C+0x11c>)
    396c:	47a0      	blx	r4
	printf(" | FSR/FAR:\r\n");
    396e:	482c      	ldr	r0, [pc, #176]	; (3a20 <HardFault_Handler_C+0x120>)
    3970:	47a8      	blx	r5
	
	printf(" | | Configurable Fault Status Register\r\n");
    3972:	482c      	ldr	r0, [pc, #176]	; (3a24 <HardFault_Handler_C+0x124>)
    3974:	47a8      	blx	r5
	printf(" | | | CFSR  = 0x%08X\r\n", (unsigned)cfsr);
    3976:	4639      	mov	r1, r7
    3978:	482b      	ldr	r0, [pc, #172]	; (3a28 <HardFault_Handler_C+0x128>)
    397a:	47a0      	blx	r4
	printf(" | | | | MemManage Status Register\r\n");
    397c:	482b      	ldr	r0, [pc, #172]	; (3a2c <HardFault_Handler_C+0x12c>)
    397e:	47a8      	blx	r5
	printf(" | | | | | MMFSR = 0x%02X\r\n", (unsigned)(cfsr & 0xFF));
    3980:	b2f9      	uxtb	r1, r7
    3982:	482b      	ldr	r0, [pc, #172]	; (3a30 <HardFault_Handler_C+0x130>)
    3984:	47a0      	blx	r4
	printf(" | | | | BusFault Status Register\r\n");
    3986:	482b      	ldr	r0, [pc, #172]	; (3a34 <HardFault_Handler_C+0x134>)
    3988:	47a8      	blx	r5
	printf(" | | | | | BFSR = 0x%02X\r\n", (unsigned)((cfsr >> 8) & 0xFF));
    398a:	f3c7 2107 	ubfx	r1, r7, #8, #8
    398e:	482a      	ldr	r0, [pc, #168]	; (3a38 <HardFault_Handler_C+0x138>)
    3990:	47a0      	blx	r4
	printf(" | | | | UsageFault Status Register\r\n");
    3992:	482a      	ldr	r0, [pc, #168]	; (3a3c <HardFault_Handler_C+0x13c>)
    3994:	47a8      	blx	r5
	printf(" | | | | | UFSR = 0x%02X\r\n", (unsigned)((cfsr >> 16) & 0xFF));
    3996:	f3c7 4107 	ubfx	r1, r7, #16, #8
    399a:	4829      	ldr	r0, [pc, #164]	; (3a40 <HardFault_Handler_C+0x140>)
    399c:	47a0      	blx	r4
	
	printf(" | | MemManage Address Register (validity: %X)\r\n", (unsigned)((cfsr >> 7) & 0x1));
    399e:	f3c7 11c0 	ubfx	r1, r7, #7, #1
    39a2:	4828      	ldr	r0, [pc, #160]	; (3a44 <HardFault_Handler_C+0x144>)
    39a4:	47a0      	blx	r4
	printf(" | | | MMFAR = 0x%08X\r\n", (unsigned)memmanage_fault_address);
    39a6:	9901      	ldr	r1, [sp, #4]
    39a8:	4827      	ldr	r0, [pc, #156]	; (3a48 <HardFault_Handler_C+0x148>)
    39aa:	47a0      	blx	r4
	printf(" | | BusFault Address Register  (validity: %X)\r\n", (unsigned)((cfsr >> 15) & 0x1));
    39ac:	f3c7 31c0 	ubfx	r1, r7, #15, #1
    39b0:	4826      	ldr	r0, [pc, #152]	; (3a4c <HardFault_Handler_C+0x14c>)
    39b2:	47a0      	blx	r4
	printf(" | | | BFAR = 0x%08X\r\n", (unsigned)bus_fault_address);
    39b4:	9900      	ldr	r1, [sp, #0]
    39b6:	4826      	ldr	r0, [pc, #152]	; (3a50 <HardFault_Handler_C+0x150>)
    39b8:	47a0      	blx	r4
	
	printf(" | | Hard Fault Status Register\r\n");
    39ba:	4826      	ldr	r0, [pc, #152]	; (3a54 <HardFault_Handler_C+0x154>)
    39bc:	47a8      	blx	r5
	printf(" | | | HFSR  = 0x%08X\r\n", (unsigned)SCB->HFSR);
    39be:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    39c0:	4825      	ldr	r0, [pc, #148]	; (3a58 <HardFault_Handler_C+0x158>)
    39c2:	47a0      	blx	r4
	
	printf(" | | DFSR = 0x%08X\r\n", (unsigned)SCB->DFSR);
    39c4:	6b31      	ldr	r1, [r6, #48]	; 0x30
    39c6:	4825      	ldr	r0, [pc, #148]	; (3a5c <HardFault_Handler_C+0x15c>)
    39c8:	47a0      	blx	r4
	printf(" | | AFSR = 0x%08X\r\n", (unsigned)SCB->AFSR);
    39ca:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    39cc:	4824      	ldr	r0, [pc, #144]	; (3a60 <HardFault_Handler_C+0x160>)
    39ce:	47a0      	blx	r4

	printf(" | Misc\r\n");
    39d0:	4824      	ldr	r0, [pc, #144]	; (3a64 <HardFault_Handler_C+0x164>)
    39d2:	47a8      	blx	r5
	printf(" | | LR/EXC_RETURN= 0x%04X\r\n", (unsigned)lr_value);
    39d4:	9905      	ldr	r1, [sp, #20]
    39d6:	4824      	ldr	r0, [pc, #144]	; (3a68 <HardFault_Handler_C+0x168>)
    39d8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    39da:	4f24      	ldr	r7, [pc, #144]	; (3a6c <HardFault_Handler_C+0x16c>)
    39dc:	2640      	movs	r6, #64	; 0x40
	
	while (1) {
		gpio_toggle_pin_level(LED_STATUS);
		delay_ms(BLINK_ERROR);
    39de:	2564      	movs	r5, #100	; 0x64
    39e0:	4c23      	ldr	r4, [pc, #140]	; (3a70 <HardFault_Handler_C+0x170>)
    39e2:	61fe      	str	r6, [r7, #28]
    39e4:	4628      	mov	r0, r5
    39e6:	47a0      	blx	r4
    39e8:	e7fb      	b.n	39e2 <HardFault_Handler_C+0xe2>
    39ea:	bf00      	nop
    39ec:	e000ed00 	.word	0xe000ed00
    39f0:	0000bd64 	.word	0x0000bd64
    39f4:	00007e7d 	.word	0x00007e7d
    39f8:	0000bd74 	.word	0x0000bd74
    39fc:	0000bd88 	.word	0x0000bd88
    3a00:	00007d95 	.word	0x00007d95
    3a04:	0000bda0 	.word	0x0000bda0
    3a08:	0000bdb8 	.word	0x0000bdb8
    3a0c:	0000bdd0 	.word	0x0000bdd0
    3a10:	0000bde8 	.word	0x0000bde8
    3a14:	0000be00 	.word	0x0000be00
    3a18:	0000be18 	.word	0x0000be18
    3a1c:	0000be30 	.word	0x0000be30
    3a20:	0000be48 	.word	0x0000be48
    3a24:	0000be58 	.word	0x0000be58
    3a28:	0000be84 	.word	0x0000be84
    3a2c:	0000be9c 	.word	0x0000be9c
    3a30:	0000bec0 	.word	0x0000bec0
    3a34:	0000bedc 	.word	0x0000bedc
    3a38:	0000bf00 	.word	0x0000bf00
    3a3c:	0000bf1c 	.word	0x0000bf1c
    3a40:	0000bf44 	.word	0x0000bf44
    3a44:	0000bf60 	.word	0x0000bf60
    3a48:	0000bf94 	.word	0x0000bf94
    3a4c:	0000bfac 	.word	0x0000bfac
    3a50:	0000bfe0 	.word	0x0000bfe0
    3a54:	0000bff8 	.word	0x0000bff8
    3a58:	0000c01c 	.word	0x0000c01c
    3a5c:	0000c034 	.word	0x0000c034
    3a60:	0000c04c 	.word	0x0000c04c
    3a64:	0000c064 	.word	0x0000c064
    3a68:	0000c070 	.word	0x0000c070
    3a6c:	41008000 	.word	0x41008000
    3a70:	00002855 	.word	0x00002855

00003a74 <SDMMC_init>:

/**
  *	Initializes SD MMC stack
  */
void SDMMC_init(void)
{
    3a74:	b508      	push	{r3, lr}
	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    3a76:	4903      	ldr	r1, [pc, #12]	; (3a84 <SDMMC_init+0x10>)
    3a78:	460a      	mov	r2, r1
    3a7a:	3104      	adds	r1, #4
    3a7c:	4802      	ldr	r0, [pc, #8]	; (3a88 <SDMMC_init+0x14>)
    3a7e:	4b03      	ldr	r3, [pc, #12]	; (3a8c <SDMMC_init+0x18>)
    3a80:	4798      	blx	r3
    3a82:	bd08      	pop	{r3, pc}
    3a84:	20000084 	.word	0x20000084
    3a88:	200016e0 	.word	0x200016e0
    3a8c:	00005c51 	.word	0x00005c51

00003a90 <SD_menu>:
1. Back to main menu\r\n \
2. Write file\r\n \
3. Get SD status\r\n";

void SD_menu(void)
{
    3a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a94:	f5ad 6dc1 	sub.w	sp, sp, #1544	; 0x608
	uint16_t user_selection = 0;
    3a98:	2400      	movs	r4, #0
    3a9a:	f8ad 4606 	strh.w	r4, [sp, #1542]	; 0x606
	TCHAR filename[FILENAME_MAX] = {0};
    3a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3aa2:	4621      	mov	r1, r4
    3aa4:	a881      	add	r0, sp, #516	; 0x204
    3aa6:	4d26      	ldr	r5, [pc, #152]	; (3b40 <SD_menu+0xb0>)
    3aa8:	47a8      	blx	r5
	char data[512] = {0};
    3aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
    3aae:	4621      	mov	r1, r4
    3ab0:	a801      	add	r0, sp, #4
    3ab2:	47a8      	blx	r5
	
	while (1) {
		printf("%s", sd_menu_txt);
    3ab4:	4e23      	ldr	r6, [pc, #140]	; (3b44 <SD_menu+0xb4>)
    3ab6:	4d24      	ldr	r5, [pc, #144]	; (3b48 <SD_menu+0xb8>)
    3ab8:	4c24      	ldr	r4, [pc, #144]	; (3b4c <SD_menu+0xbc>)
    3aba:	e004      	b.n	3ac6 <SD_menu+0x36>
		
		if (scanf("%hx", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    3abc:	4b24      	ldr	r3, [pc, #144]	; (3b50 <SD_menu+0xc0>)
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	6858      	ldr	r0, [r3, #4]
    3ac2:	4b24      	ldr	r3, [pc, #144]	; (3b54 <SD_menu+0xc4>)
    3ac4:	4798      	blx	r3
		printf("%s", sd_menu_txt);
    3ac6:	4631      	mov	r1, r6
    3ac8:	4628      	mov	r0, r5
    3aca:	47a0      	blx	r4
		if (scanf("%hx", &user_selection) == 0) {
    3acc:	f20d 6106 	addw	r1, sp, #1542	; 0x606
    3ad0:	4821      	ldr	r0, [pc, #132]	; (3b58 <SD_menu+0xc8>)
    3ad2:	4b22      	ldr	r3, [pc, #136]	; (3b5c <SD_menu+0xcc>)
    3ad4:	4798      	blx	r3
    3ad6:	2800      	cmp	r0, #0
    3ad8:	d0f0      	beq.n	3abc <SD_menu+0x2c>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    3ada:	f8bd 1606 	ldrh.w	r1, [sp, #1542]	; 0x606
    3ade:	4820      	ldr	r0, [pc, #128]	; (3b60 <SD_menu+0xd0>)
    3ae0:	47a0      	blx	r4
		
		switch (user_selection) {
    3ae2:	f8bd 3606 	ldrh.w	r3, [sp, #1542]	; 0x606
    3ae6:	2b02      	cmp	r3, #2
    3ae8:	d00a      	beq.n	3b00 <SD_menu+0x70>
    3aea:	2b03      	cmp	r3, #3
    3aec:	d022      	beq.n	3b34 <SD_menu+0xa4>
    3aee:	2b01      	cmp	r3, #1
    3af0:	d1e9      	bne.n	3ac6 <SD_menu+0x36>
			case 1:
			printf("\r\nReturning to main menu\r\n");
    3af2:	481c      	ldr	r0, [pc, #112]	; (3b64 <SD_menu+0xd4>)
    3af4:	4b1c      	ldr	r3, [pc, #112]	; (3b68 <SD_menu+0xd8>)
    3af6:	4798      	blx	r3
				printf("\r\nRetrieving SD status\r\n");
				FATFS_sd_status();
				break;
		}
	}
    3af8:	f50d 6dc1 	add.w	sp, sp, #1544	; 0x608
    3afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				printf("\r\nEnter filename >> ");
    3b00:	481a      	ldr	r0, [pc, #104]	; (3b6c <SD_menu+0xdc>)
    3b02:	47a0      	blx	r4
				scanf("%s", filename);
    3b04:	a981      	add	r1, sp, #516	; 0x204
    3b06:	4628      	mov	r0, r5
    3b08:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3b5c <SD_menu+0xcc>
    3b0c:	47c0      	blx	r8
				printf("%s\r\n", filename);
    3b0e:	4f18      	ldr	r7, [pc, #96]	; (3b70 <SD_menu+0xe0>)
    3b10:	a981      	add	r1, sp, #516	; 0x204
    3b12:	4638      	mov	r0, r7
    3b14:	47a0      	blx	r4
				printf("Enter data (no whitespace) >> ");
    3b16:	4817      	ldr	r0, [pc, #92]	; (3b74 <SD_menu+0xe4>)
    3b18:	47a0      	blx	r4
				scanf("%s", data);
    3b1a:	a901      	add	r1, sp, #4
    3b1c:	4628      	mov	r0, r5
    3b1e:	47c0      	blx	r8
				printf("%s\r\n", data);
    3b20:	a901      	add	r1, sp, #4
    3b22:	4638      	mov	r0, r7
    3b24:	47a0      	blx	r4
				FATFS_write_file(filename, data, 512);
    3b26:	f44f 7200 	mov.w	r2, #512	; 0x200
    3b2a:	a901      	add	r1, sp, #4
    3b2c:	a881      	add	r0, sp, #516	; 0x204
    3b2e:	4b12      	ldr	r3, [pc, #72]	; (3b78 <SD_menu+0xe8>)
    3b30:	4798      	blx	r3
				break;
    3b32:	e7c8      	b.n	3ac6 <SD_menu+0x36>
				printf("\r\nRetrieving SD status\r\n");
    3b34:	4811      	ldr	r0, [pc, #68]	; (3b7c <SD_menu+0xec>)
    3b36:	4b0c      	ldr	r3, [pc, #48]	; (3b68 <SD_menu+0xd8>)
    3b38:	4798      	blx	r3
				FATFS_sd_status();
    3b3a:	4b11      	ldr	r3, [pc, #68]	; (3b80 <SD_menu+0xf0>)
    3b3c:	4798      	blx	r3
				break;
    3b3e:	e7c2      	b.n	3ac6 <SD_menu+0x36>
    3b40:	00007c2d 	.word	0x00007c2d
    3b44:	2000008c 	.word	0x2000008c
    3b48:	0000b6e4 	.word	0x0000b6e4
    3b4c:	00007d95 	.word	0x00007d95
    3b50:	200004b0 	.word	0x200004b0
    3b54:	000079ad 	.word	0x000079ad
    3b58:	0000c090 	.word	0x0000c090
    3b5c:	00007ead 	.word	0x00007ead
    3b60:	0000b6e8 	.word	0x0000b6e8
    3b64:	0000b704 	.word	0x0000b704
    3b68:	00007e7d 	.word	0x00007e7d
    3b6c:	0000c094 	.word	0x0000c094
    3b70:	0000bab0 	.word	0x0000bab0
    3b74:	0000c0ac 	.word	0x0000c0ac
    3b78:	00000cb1 	.word	0x00000cb1
    3b7c:	0000c0cc 	.word	0x0000c0cc
    3b80:	00000c5d 	.word	0x00000c5d

00003b84 <LIDAR_PWM_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    3b84:	4a3b      	ldr	r2, [pc, #236]	; (3c74 <LIDAR_PWM_init+0xf0>)
    3b86:	69d3      	ldr	r3, [r2, #28]
    3b88:	f043 0320 	orr.w	r3, r3, #32
    3b8c:	61d3      	str	r3, [r2, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    3b8e:	2240      	movs	r2, #64	; 0x40
    3b90:	4b39      	ldr	r3, [pc, #228]	; (3c78 <LIDAR_PWM_init+0xf4>)
    3b92:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3b96:	4b39      	ldr	r3, [pc, #228]	; (3c7c <LIDAR_PWM_init+0xf8>)
    3b98:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    3b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3ba0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3ba4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3ba8:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3bac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3bb4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
    3bbc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3bc0:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3bc4:	f042 0204 	orr.w	r2, r2, #4
    3bc8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3bcc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3bd0:	4b2b      	ldr	r3, [pc, #172]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3bd2:	691b      	ldr	r3, [r3, #16]
void LIDAR_PWM_init(void)
{
	LIDAR_PWM_CLOCK_init();
	LIDAR_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    3bd4:	f013 0f01 	tst.w	r3, #1
    3bd8:	d11f      	bne.n	3c1a <LIDAR_PWM_init+0x96>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3bda:	4a29      	ldr	r2, [pc, #164]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3bdc:	6913      	ldr	r3, [r2, #16]
    3bde:	f013 0f03 	tst.w	r3, #3
    3be2:	d1fb      	bne.n	3bdc <LIDAR_PWM_init+0x58>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3be4:	4b26      	ldr	r3, [pc, #152]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3be6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    3be8:	f013 0f02 	tst.w	r3, #2
    3bec:	d00d      	beq.n	3c0a <LIDAR_PWM_init+0x86>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3bee:	4a24      	ldr	r2, [pc, #144]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3bf0:	6813      	ldr	r3, [r2, #0]
    3bf2:	f023 0302 	bic.w	r3, r3, #2
    3bf6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3bf8:	6913      	ldr	r3, [r2, #16]
    3bfa:	f013 0f03 	tst.w	r3, #3
    3bfe:	d1fb      	bne.n	3bf8 <LIDAR_PWM_init+0x74>
    3c00:	4a1f      	ldr	r2, [pc, #124]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3c02:	6913      	ldr	r3, [r2, #16]
    3c04:	f013 0f02 	tst.w	r3, #2
    3c08:	d1fb      	bne.n	3c02 <LIDAR_PWM_init+0x7e>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3c0a:	2201      	movs	r2, #1
    3c0c:	4b1c      	ldr	r3, [pc, #112]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3c0e:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c10:	461a      	mov	r2, r3
    3c12:	6913      	ldr	r3, [r2, #16]
    3c14:	f013 0f03 	tst.w	r3, #3
    3c18:	d1fb      	bne.n	3c12 <LIDAR_PWM_init+0x8e>
    3c1a:	4a19      	ldr	r2, [pc, #100]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3c1c:	6913      	ldr	r3, [r2, #16]
    3c1e:	f013 0f01 	tst.w	r3, #1
    3c22:	d1fb      	bne.n	3c1c <LIDAR_PWM_init+0x98>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3c24:	4a17      	ldr	r2, [pc, #92]	; (3c84 <LIDAR_PWM_init+0x100>)
    3c26:	4b16      	ldr	r3, [pc, #88]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3c28:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c2a:	461a      	mov	r2, r3
    3c2c:	6913      	ldr	r3, [r2, #16]
    3c2e:	f013 0f03 	tst.w	r3, #3
    3c32:	d1fb      	bne.n	3c2c <LIDAR_PWM_init+0xa8>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    3c34:	4b12      	ldr	r3, [pc, #72]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3c36:	2200      	movs	r2, #0
    3c38:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    3c3a:	22ff      	movs	r2, #255	; 0xff
    3c3c:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3c3e:	2203      	movs	r2, #3
    3c40:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3c42:	223c      	movs	r2, #60	; 0x3c
    3c44:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c46:	461a      	mov	r2, r3
    3c48:	6913      	ldr	r3, [r2, #16]
    3c4a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3c4e:	d1fb      	bne.n	3c48 <LIDAR_PWM_init+0xc4>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3c50:	2200      	movs	r2, #0
    3c52:	4b0b      	ldr	r3, [pc, #44]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3c54:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c56:	461a      	mov	r2, r3
    3c58:	6913      	ldr	r3, [r2, #16]
    3c5a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3c5e:	d1fb      	bne.n	3c58 <LIDAR_PWM_init+0xd4>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3c60:	4a07      	ldr	r2, [pc, #28]	; (3c80 <LIDAR_PWM_init+0xfc>)
    3c62:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3c64:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3c68:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c6a:	6913      	ldr	r3, [r2, #16]
    3c6c:	f013 0f03 	tst.w	r3, #3
    3c70:	d1fb      	bne.n	3c6a <LIDAR_PWM_init+0xe6>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
    3c72:	4770      	bx	lr
    3c74:	40000800 	.word	0x40000800
    3c78:	40001c00 	.word	0x40001c00
    3c7c:	41008000 	.word	0x41008000
    3c80:	42001400 	.word	0x42001400
    3c84:	12000310 	.word	0x12000310

00003c88 <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3c88:	4b19      	ldr	r3, [pc, #100]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3c8a:	691b      	ldr	r3, [r3, #16]
/**
  * Starts LiDAR PWM motor
  */ 
void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    3c8c:	f013 0f01 	tst.w	r3, #1
    3c90:	d117      	bne.n	3cc2 <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c92:	4a17      	ldr	r2, [pc, #92]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3c94:	6913      	ldr	r3, [r2, #16]
    3c96:	f013 0f03 	tst.w	r3, #3
    3c9a:	d1fb      	bne.n	3c94 <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3c9c:	4b14      	ldr	r3, [pc, #80]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3c9e:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    3ca0:	f013 0f02 	tst.w	r3, #2
    3ca4:	d00d      	beq.n	3cc2 <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3ca6:	4a12      	ldr	r2, [pc, #72]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3ca8:	6813      	ldr	r3, [r2, #0]
    3caa:	f023 0302 	bic.w	r3, r3, #2
    3cae:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3cb0:	6913      	ldr	r3, [r2, #16]
    3cb2:	f013 0f03 	tst.w	r3, #3
    3cb6:	d1fb      	bne.n	3cb0 <LIDAR_PWM_start+0x28>
    3cb8:	4a0d      	ldr	r2, [pc, #52]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3cba:	6913      	ldr	r3, [r2, #16]
    3cbc:	f013 0f02 	tst.w	r3, #2
    3cc0:	d1fb      	bne.n	3cba <LIDAR_PWM_start+0x32>
    3cc2:	4a0b      	ldr	r2, [pc, #44]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3cc4:	6913      	ldr	r3, [r2, #16]
    3cc6:	f013 0f01 	tst.w	r3, #1
    3cca:	d1fb      	bne.n	3cc4 <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3ccc:	2224      	movs	r2, #36	; 0x24
    3cce:	4b08      	ldr	r3, [pc, #32]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3cd0:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3cd2:	461a      	mov	r2, r3
    3cd4:	6913      	ldr	r3, [r2, #16]
    3cd6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3cda:	d1fb      	bne.n	3cd4 <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3cdc:	4a04      	ldr	r2, [pc, #16]	; (3cf0 <LIDAR_PWM_start+0x68>)
    3cde:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3ce0:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3ce4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3ce6:	6913      	ldr	r3, [r2, #16]
    3ce8:	f013 0f03 	tst.w	r3, #3
    3cec:	d1fb      	bne.n	3ce6 <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    3cee:	4770      	bx	lr
    3cf0:	42001400 	.word	0x42001400

00003cf4 <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3cf4:	4b19      	ldr	r3, [pc, #100]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3cf6:	691b      	ldr	r3, [r3, #16]
/**
  * Stops LiDAR PWM motor
  */ 
void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    3cf8:	f013 0f01 	tst.w	r3, #1
    3cfc:	d117      	bne.n	3d2e <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3cfe:	4a17      	ldr	r2, [pc, #92]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3d00:	6913      	ldr	r3, [r2, #16]
    3d02:	f013 0f03 	tst.w	r3, #3
    3d06:	d1fb      	bne.n	3d00 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3d08:	4b14      	ldr	r3, [pc, #80]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3d0a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    3d0c:	f013 0f02 	tst.w	r3, #2
    3d10:	d00d      	beq.n	3d2e <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3d12:	4a12      	ldr	r2, [pc, #72]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3d14:	6813      	ldr	r3, [r2, #0]
    3d16:	f023 0302 	bic.w	r3, r3, #2
    3d1a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3d1c:	6913      	ldr	r3, [r2, #16]
    3d1e:	f013 0f03 	tst.w	r3, #3
    3d22:	d1fb      	bne.n	3d1c <LIDAR_PWM_stop+0x28>
    3d24:	4a0d      	ldr	r2, [pc, #52]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3d26:	6913      	ldr	r3, [r2, #16]
    3d28:	f013 0f02 	tst.w	r3, #2
    3d2c:	d1fb      	bne.n	3d26 <LIDAR_PWM_stop+0x32>
    3d2e:	4a0b      	ldr	r2, [pc, #44]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3d30:	6913      	ldr	r3, [r2, #16]
    3d32:	f013 0f01 	tst.w	r3, #1
    3d36:	d1fb      	bne.n	3d30 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3d38:	2200      	movs	r2, #0
    3d3a:	4b08      	ldr	r3, [pc, #32]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3d3c:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3d3e:	461a      	mov	r2, r3
    3d40:	6913      	ldr	r3, [r2, #16]
    3d42:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3d46:	d1fb      	bne.n	3d40 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3d48:	4a04      	ldr	r2, [pc, #16]	; (3d5c <LIDAR_PWM_stop+0x68>)
    3d4a:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3d4c:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3d50:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3d52:	6913      	ldr	r3, [r2, #16]
    3d54:	f013 0f03 	tst.w	r3, #3
    3d58:	d1fb      	bne.n	3d52 <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    3d5a:	4770      	bx	lr
    3d5c:	42001400 	.word	0x42001400

00003d60 <LIDAR_USART_init>:

/**
  * Initializes USART for LiDAR
  */ 
void LIDAR_USART_init(void)
{
    3d60:	b510      	push	{r4, lr}
    3d62:	4b1b      	ldr	r3, [pc, #108]	; (3dd0 <LIDAR_USART_init+0x70>)
    3d64:	2240      	movs	r2, #64	; 0x40
    3d66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    3d6a:	2243      	movs	r2, #67	; 0x43
    3d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    3d70:	4a18      	ldr	r2, [pc, #96]	; (3dd4 <LIDAR_USART_init+0x74>)
    3d72:	6953      	ldr	r3, [r2, #20]
    3d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3d78:	6153      	str	r3, [r2, #20]
	LIDAR_USART_CLOCK_init();
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
    3d7a:	4c17      	ldr	r4, [pc, #92]	; (3dd8 <LIDAR_USART_init+0x78>)
    3d7c:	2200      	movs	r2, #0
    3d7e:	4917      	ldr	r1, [pc, #92]	; (3ddc <LIDAR_USART_init+0x7c>)
    3d80:	4620      	mov	r0, r4
    3d82:	4b17      	ldr	r3, [pc, #92]	; (3de0 <LIDAR_USART_init+0x80>)
    3d84:	4798      	blx	r3
	usart_sync_enable(&LIDAR_USART);
    3d86:	4620      	mov	r0, r4
    3d88:	4b16      	ldr	r3, [pc, #88]	; (3de4 <LIDAR_USART_init+0x84>)
    3d8a:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3d8c:	4b16      	ldr	r3, [pc, #88]	; (3de8 <LIDAR_USART_init+0x88>)
    3d8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    3d92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3d96:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3d9e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3da2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3da6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3daa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3dae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    3db2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3db6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3dbe:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3dc2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3dc6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3dca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    3dce:	bd10      	pop	{r4, pc}
    3dd0:	40001c00 	.word	0x40001c00
    3dd4:	40000800 	.word	0x40000800
    3dd8:	2000172c 	.word	0x2000172c
    3ddc:	40003000 	.word	0x40003000
    3de0:	00002c41 	.word	0x00002c41
    3de4:	00002c89 	.word	0x00002c89
    3de8:	41008000 	.word	0x41008000

00003dec <LIDAR_USART_send>:

/**
  * Sends data through USART to LiDAR
  */ 
void LIDAR_USART_send(uint8_t* message, uint16_t length)
{
    3dec:	b530      	push	{r4, r5, lr}
    3dee:	b083      	sub	sp, #12
    3df0:	4604      	mov	r4, r0
    3df2:	460d      	mov	r5, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    3df4:	a901      	add	r1, sp, #4
    3df6:	4805      	ldr	r0, [pc, #20]	; (3e0c <LIDAR_USART_send+0x20>)
    3df8:	4b05      	ldr	r3, [pc, #20]	; (3e10 <LIDAR_USART_send+0x24>)
    3dfa:	4798      	blx	r3
	
	io_write(io, message, length);
    3dfc:	462a      	mov	r2, r5
    3dfe:	4621      	mov	r1, r4
    3e00:	9801      	ldr	r0, [sp, #4]
    3e02:	4b04      	ldr	r3, [pc, #16]	; (3e14 <LIDAR_USART_send+0x28>)
    3e04:	4798      	blx	r3
}
    3e06:	b003      	add	sp, #12
    3e08:	bd30      	pop	{r4, r5, pc}
    3e0a:	bf00      	nop
    3e0c:	2000172c 	.word	0x2000172c
    3e10:	00002cb5 	.word	0x00002cb5
    3e14:	00002875 	.word	0x00002875

00003e18 <LIDAR_USART_read_byte>:
  * Reads received byte from LiDAR through USART
  * 
  * @return uint8_t : received byte
  */ 
uint8_t LIDAR_USART_read_byte(void)
{
    3e18:	b500      	push	{lr}
    3e1a:	b083      	sub	sp, #12
	uint8_t buf;
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    3e1c:	4669      	mov	r1, sp
    3e1e:	4807      	ldr	r0, [pc, #28]	; (3e3c <LIDAR_USART_read_byte+0x24>)
    3e20:	4b07      	ldr	r3, [pc, #28]	; (3e40 <LIDAR_USART_read_byte+0x28>)
    3e22:	4798      	blx	r3
	
	io_read(io, &buf, 1);
    3e24:	2201      	movs	r2, #1
    3e26:	f10d 0107 	add.w	r1, sp, #7
    3e2a:	9800      	ldr	r0, [sp, #0]
    3e2c:	4b05      	ldr	r3, [pc, #20]	; (3e44 <LIDAR_USART_read_byte+0x2c>)
    3e2e:	4798      	blx	r3
	return buf;
    3e30:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3e34:	b003      	add	sp, #12
    3e36:	f85d fb04 	ldr.w	pc, [sp], #4
    3e3a:	bf00      	nop
    3e3c:	2000172c 	.word	0x2000172c
    3e40:	00002cb5 	.word	0x00002cb5
    3e44:	000028a5 	.word	0x000028a5

00003e48 <LIDAR_process>:

/**
  * Process incoming data from LiDAR based on the request given.
  */ 
void LIDAR_process(void)
{
    3e48:	b538      	push	{r3, r4, r5, lr}
	unsigned data_idx;
	
	while (!usart_sync_is_rx_not_empty(&LIDAR_USART));
    3e4a:	4d5f      	ldr	r5, [pc, #380]	; (3fc8 <LIDAR_process+0x180>)
    3e4c:	4c5f      	ldr	r4, [pc, #380]	; (3fcc <LIDAR_process+0x184>)
    3e4e:	4628      	mov	r0, r5
    3e50:	47a0      	blx	r4
    3e52:	2800      	cmp	r0, #0
    3e54:	d0fb      	beq.n	3e4e <LIDAR_process+0x6>
	
	/* Process response descriptor */
	switch (byte_count) {
    3e56:	4b5e      	ldr	r3, [pc, #376]	; (3fd0 <LIDAR_process+0x188>)
    3e58:	681c      	ldr	r4, [r3, #0]
    3e5a:	2c06      	cmp	r4, #6
    3e5c:	d854      	bhi.n	3f08 <LIDAR_process+0xc0>
    3e5e:	e8df f004 	tbb	[pc, r4]
    3e62:	1004      	.short	0x1004
    3e64:	3e32261d 	.word	0x3e32261d
    3e68:	4a          	.byte	0x4a
    3e69:	00          	.byte	0x00
		case 0:
			resp_desc.start1 = LIDAR_USART_read_byte();
    3e6a:	4b5a      	ldr	r3, [pc, #360]	; (3fd4 <LIDAR_process+0x18c>)
    3e6c:	4798      	blx	r3
    3e6e:	4b5a      	ldr	r3, [pc, #360]	; (3fd8 <LIDAR_process+0x190>)
    3e70:	7018      	strb	r0, [r3, #0]
			/* check sync -- 0xA5 */
			if (resp_desc.start1 == 0xA5)
    3e72:	28a5      	cmp	r0, #165	; 0xa5
    3e74:	d000      	beq.n	3e78 <LIDAR_process+0x30>
    3e76:	bd38      	pop	{r3, r4, r5, pc}
				byte_count++;
    3e78:	4a55      	ldr	r2, [pc, #340]	; (3fd0 <LIDAR_process+0x188>)
    3e7a:	6813      	ldr	r3, [r2, #0]
    3e7c:	3301      	adds	r3, #1
    3e7e:	6013      	str	r3, [r2, #0]
    3e80:	bd38      	pop	{r3, r4, r5, pc}
			return;
		
		case 1:
			resp_desc.start2 = LIDAR_USART_read_byte();
    3e82:	4b54      	ldr	r3, [pc, #336]	; (3fd4 <LIDAR_process+0x18c>)
    3e84:	4798      	blx	r3
    3e86:	4b54      	ldr	r3, [pc, #336]	; (3fd8 <LIDAR_process+0x190>)
    3e88:	7058      	strb	r0, [r3, #1]
			/* check sync -- 0x5A */
			if (resp_desc.start2 != 0x5A)
    3e8a:	285a      	cmp	r0, #90	; 0x5a
				byte_count--;
    3e8c:	4a50      	ldr	r2, [pc, #320]	; (3fd0 <LIDAR_process+0x188>)
    3e8e:	6813      	ldr	r3, [r2, #0]
    3e90:	bf14      	ite	ne
    3e92:	f103 33ff 	addne.w	r3, r3, #4294967295
			else
				byte_count++;
    3e96:	3301      	addeq	r3, #1
    3e98:	6013      	str	r3, [r2, #0]
    3e9a:	bd38      	pop	{r3, r4, r5, pc}
			return;
		
		case 2:
			resp_desc.response_info = LIDAR_USART_read_byte();
    3e9c:	4b4d      	ldr	r3, [pc, #308]	; (3fd4 <LIDAR_process+0x18c>)
    3e9e:	4798      	blx	r3
    3ea0:	4b4d      	ldr	r3, [pc, #308]	; (3fd8 <LIDAR_process+0x190>)
    3ea2:	6058      	str	r0, [r3, #4]
			byte_count++;
    3ea4:	4a4a      	ldr	r2, [pc, #296]	; (3fd0 <LIDAR_process+0x188>)
    3ea6:	6813      	ldr	r3, [r2, #0]
    3ea8:	3301      	adds	r3, #1
    3eaa:	6013      	str	r3, [r2, #0]
			return;
    3eac:	bd38      	pop	{r3, r4, r5, pc}
		
		case 3:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    3eae:	4b49      	ldr	r3, [pc, #292]	; (3fd4 <LIDAR_process+0x18c>)
    3eb0:	4798      	blx	r3
    3eb2:	4a49      	ldr	r2, [pc, #292]	; (3fd8 <LIDAR_process+0x190>)
    3eb4:	6853      	ldr	r3, [r2, #4]
    3eb6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    3eba:	6053      	str	r3, [r2, #4]
			byte_count++;
    3ebc:	4a44      	ldr	r2, [pc, #272]	; (3fd0 <LIDAR_process+0x188>)
    3ebe:	6813      	ldr	r3, [r2, #0]
    3ec0:	3301      	adds	r3, #1
    3ec2:	6013      	str	r3, [r2, #0]
			return;
    3ec4:	bd38      	pop	{r3, r4, r5, pc}
		
		case 4:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    3ec6:	4b43      	ldr	r3, [pc, #268]	; (3fd4 <LIDAR_process+0x18c>)
    3ec8:	4798      	blx	r3
    3eca:	4a43      	ldr	r2, [pc, #268]	; (3fd8 <LIDAR_process+0x190>)
    3ecc:	6853      	ldr	r3, [r2, #4]
    3ece:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    3ed2:	6053      	str	r3, [r2, #4]
			byte_count++;
    3ed4:	4a3e      	ldr	r2, [pc, #248]	; (3fd0 <LIDAR_process+0x188>)
    3ed6:	6813      	ldr	r3, [r2, #0]
    3ed8:	3301      	adds	r3, #1
    3eda:	6013      	str	r3, [r2, #0]
			return;
    3edc:	bd38      	pop	{r3, r4, r5, pc}
		
		case 5:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    3ede:	4b3d      	ldr	r3, [pc, #244]	; (3fd4 <LIDAR_process+0x18c>)
    3ee0:	4798      	blx	r3
    3ee2:	4a3d      	ldr	r2, [pc, #244]	; (3fd8 <LIDAR_process+0x190>)
    3ee4:	6853      	ldr	r3, [r2, #4]
    3ee6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    3eea:	6053      	str	r3, [r2, #4]
			byte_count++;
    3eec:	4a38      	ldr	r2, [pc, #224]	; (3fd0 <LIDAR_process+0x188>)
    3eee:	6813      	ldr	r3, [r2, #0]
    3ef0:	3301      	adds	r3, #1
    3ef2:	6013      	str	r3, [r2, #0]
			return;
    3ef4:	bd38      	pop	{r3, r4, r5, pc}
		
		case 6:
			resp_desc.data_type = LIDAR_USART_read_byte();
    3ef6:	4b37      	ldr	r3, [pc, #220]	; (3fd4 <LIDAR_process+0x18c>)
    3ef8:	4798      	blx	r3
    3efa:	4b37      	ldr	r3, [pc, #220]	; (3fd8 <LIDAR_process+0x190>)
    3efc:	7218      	strb	r0, [r3, #8]
			byte_count++;
    3efe:	4a34      	ldr	r2, [pc, #208]	; (3fd0 <LIDAR_process+0x188>)
    3f00:	6813      	ldr	r3, [r2, #0]
    3f02:	3301      	adds	r3, #1
    3f04:	6013      	str	r3, [r2, #0]
			return;
    3f06:	bd38      	pop	{r3, r4, r5, pc}
		
        /* Process response data packets */
		default:
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    3f08:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    3f0a:	4b32      	ldr	r3, [pc, #200]	; (3fd4 <LIDAR_process+0x18c>)
    3f0c:	4798      	blx	r3
    3f0e:	4b33      	ldr	r3, [pc, #204]	; (3fdc <LIDAR_process+0x194>)
    3f10:	5518      	strb	r0, [r3, r4]
			if (lidar_request == LIDAR_EXPRESS_SCAN) {
    3f12:	4b33      	ldr	r3, [pc, #204]	; (3fe0 <LIDAR_process+0x198>)
    3f14:	7819      	ldrb	r1, [r3, #0]
    3f16:	2982      	cmp	r1, #130	; 0x82
    3f18:	d014      	beq.n	3f44 <LIDAR_process+0xfc>
						byte_count--;
						return;
					}
				}
			}
			byte_count++;
    3f1a:	4b2d      	ldr	r3, [pc, #180]	; (3fd0 <LIDAR_process+0x188>)
    3f1c:	681a      	ldr	r2, [r3, #0]
    3f1e:	3201      	adds	r2, #1
    3f20:	601a      	str	r2, [r3, #0]
	};
	
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    3f22:	4b2d      	ldr	r3, [pc, #180]	; (3fd8 <LIDAR_process+0x190>)
    3f24:	685b      	ldr	r3, [r3, #4]
    3f26:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3f2a:	3307      	adds	r3, #7
    3f2c:	429a      	cmp	r2, r3
    3f2e:	d1a2      	bne.n	3e76 <LIDAR_process+0x2e>
		switch(lidar_request) {
    3f30:	2959      	cmp	r1, #89	; 0x59
    3f32:	d046      	beq.n	3fc2 <LIDAR_process+0x17a>
    3f34:	d831      	bhi.n	3f9a <LIDAR_process+0x152>
    3f36:	2950      	cmp	r1, #80	; 0x50
    3f38:	d037      	beq.n	3faa <LIDAR_process+0x162>
    3f3a:	2952      	cmp	r1, #82	; 0x52
    3f3c:	d12c      	bne.n	3f98 <LIDAR_process+0x150>
			case LIDAR_GET_INFO:
				printf("%s\r\n", LIDAR_RES_get_info());
				break;

			case LIDAR_GET_HEALTH:
				LIDAR_RES_get_health();
    3f3e:	4b29      	ldr	r3, [pc, #164]	; (3fe4 <LIDAR_process+0x19c>)
    3f40:	4798      	blx	r3
				break;
    3f42:	e038      	b.n	3fb6 <LIDAR_process+0x16e>
                if (data_idx == 0) { 
    3f44:	b92c      	cbnz	r4, 3f52 <LIDAR_process+0x10a>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    3f46:	4b25      	ldr	r3, [pc, #148]	; (3fdc <LIDAR_process+0x194>)
    3f48:	781b      	ldrb	r3, [r3, #0]
    3f4a:	091b      	lsrs	r3, r3, #4
    3f4c:	2b0a      	cmp	r3, #10
    3f4e:	d192      	bne.n	3e76 <LIDAR_process+0x2e>
    3f50:	e001      	b.n	3f56 <LIDAR_process+0x10e>
				else if (data_idx == 1) {
    3f52:	2c01      	cmp	r4, #1
    3f54:	d016      	beq.n	3f84 <LIDAR_process+0x13c>
			byte_count++;
    3f56:	4b1e      	ldr	r3, [pc, #120]	; (3fd0 <LIDAR_process+0x188>)
    3f58:	681a      	ldr	r2, [r3, #0]
    3f5a:	3201      	adds	r2, #1
    3f5c:	601a      	str	r2, [r3, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    3f5e:	4b1e      	ldr	r3, [pc, #120]	; (3fd8 <LIDAR_process+0x190>)
    3f60:	685b      	ldr	r3, [r3, #4]
    3f62:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3f66:	3307      	adds	r3, #7
    3f68:	429a      	cmp	r2, r3
    3f6a:	d184      	bne.n	3e76 <LIDAR_process+0x2e>
				LIDAR_RES_express_scan();
    3f6c:	4b1e      	ldr	r3, [pc, #120]	; (3fe8 <LIDAR_process+0x1a0>)
    3f6e:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    3f70:	4b1e      	ldr	r3, [pc, #120]	; (3fec <LIDAR_process+0x1a4>)
    3f72:	681b      	ldr	r3, [r3, #0]
    3f74:	2b09      	cmp	r3, #9
    3f76:	f67f af7e 	bls.w	3e76 <LIDAR_process+0x2e>
					LIDAR_PWM_stop();
    3f7a:	4b1d      	ldr	r3, [pc, #116]	; (3ff0 <LIDAR_process+0x1a8>)
    3f7c:	4798      	blx	r3
					LIDAR_REQ_stop();
    3f7e:	4b1d      	ldr	r3, [pc, #116]	; (3ff4 <LIDAR_process+0x1ac>)
    3f80:	4798      	blx	r3
					break;
    3f82:	e018      	b.n	3fb6 <LIDAR_process+0x16e>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    3f84:	4b15      	ldr	r3, [pc, #84]	; (3fdc <LIDAR_process+0x194>)
    3f86:	785b      	ldrb	r3, [r3, #1]
    3f88:	091b      	lsrs	r3, r3, #4
    3f8a:	2b05      	cmp	r3, #5
    3f8c:	d0e3      	beq.n	3f56 <LIDAR_process+0x10e>
						byte_count--;
    3f8e:	4a10      	ldr	r2, [pc, #64]	; (3fd0 <LIDAR_process+0x188>)
    3f90:	6813      	ldr	r3, [r2, #0]
    3f92:	3b01      	subs	r3, #1
    3f94:	6013      	str	r3, [r2, #0]
						return;
    3f96:	bd38      	pop	{r3, r4, r5, pc}
    3f98:	bd38      	pop	{r3, r4, r5, pc}
		switch(lidar_request) {
    3f9a:	2982      	cmp	r1, #130	; 0x82
    3f9c:	d0e6      	beq.n	3f6c <LIDAR_process+0x124>
    3f9e:	2984      	cmp	r1, #132	; 0x84
    3fa0:	d102      	bne.n	3fa8 <LIDAR_process+0x160>
			case LIDAR_GET_SAMPLERATE:
				LIDAR_RES_get_samplerate();
				break;
			
			case LIDAR_GET_LIDAR_CONF:
				LIDAR_RES_get_lidar_conf();
    3fa2:	4b15      	ldr	r3, [pc, #84]	; (3ff8 <LIDAR_process+0x1b0>)
    3fa4:	4798      	blx	r3
				break;
    3fa6:	e006      	b.n	3fb6 <LIDAR_process+0x16e>
    3fa8:	bd38      	pop	{r3, r4, r5, pc}
				printf("%s\r\n", LIDAR_RES_get_info());
    3faa:	4b14      	ldr	r3, [pc, #80]	; (3ffc <LIDAR_process+0x1b4>)
    3fac:	4798      	blx	r3
    3fae:	4601      	mov	r1, r0
    3fb0:	4813      	ldr	r0, [pc, #76]	; (4000 <LIDAR_process+0x1b8>)
    3fb2:	4b14      	ldr	r3, [pc, #80]	; (4004 <LIDAR_process+0x1bc>)
    3fb4:	4798      	blx	r3

			default:
				return;
		};
		byte_count = 0;
    3fb6:	2300      	movs	r3, #0
    3fb8:	4a05      	ldr	r2, [pc, #20]	; (3fd0 <LIDAR_process+0x188>)
    3fba:	6013      	str	r3, [r2, #0]
		processing = 0;
    3fbc:	4a12      	ldr	r2, [pc, #72]	; (4008 <LIDAR_process+0x1c0>)
    3fbe:	7013      	strb	r3, [r2, #0]
		return;
    3fc0:	bd38      	pop	{r3, r4, r5, pc}
				LIDAR_RES_get_samplerate();
    3fc2:	4b12      	ldr	r3, [pc, #72]	; (400c <LIDAR_process+0x1c4>)
    3fc4:	4798      	blx	r3
				break;
    3fc6:	e7f6      	b.n	3fb6 <LIDAR_process+0x16e>
    3fc8:	2000172c 	.word	0x2000172c
    3fcc:	00002cdd 	.word	0x00002cdd
    3fd0:	20000a30 	.word	0x20000a30
    3fd4:	00003e19 	.word	0x00003e19
    3fd8:	20000d24 	.word	0x20000d24
    3fdc:	200009a4 	.word	0x200009a4
    3fe0:	20000a34 	.word	0x20000a34
    3fe4:	00004b19 	.word	0x00004b19
    3fe8:	000048dd 	.word	0x000048dd
    3fec:	20000a3c 	.word	0x20000a3c
    3ff0:	00003cf5 	.word	0x00003cf5
    3ff4:	00004449 	.word	0x00004449
    3ff8:	00004bad 	.word	0x00004bad
    3ffc:	00004a45 	.word	0x00004a45
    4000:	0000bab0 	.word	0x0000bab0
    4004:	00007d95 	.word	0x00007d95
    4008:	20000a40 	.word	0x20000a40
    400c:	00004b7d 	.word	0x00004b7d

00004010 <LIDAR_conf_scan_menu>:
{
    4010:	b570      	push	{r4, r5, r6, lr}
    4012:	b082      	sub	sp, #8
	uint16_t user_selection = 0;
    4014:	2300      	movs	r3, #0
    4016:	f8ad 3006 	strh.w	r3, [sp, #6]
		printf("%s", lidar_conf_scan_menu);
    401a:	4e16      	ldr	r6, [pc, #88]	; (4074 <LIDAR_conf_scan_menu+0x64>)
    401c:	4d16      	ldr	r5, [pc, #88]	; (4078 <LIDAR_conf_scan_menu+0x68>)
    401e:	4c17      	ldr	r4, [pc, #92]	; (407c <LIDAR_conf_scan_menu+0x6c>)
    4020:	4631      	mov	r1, r6
    4022:	4628      	mov	r0, r5
    4024:	47a0      	blx	r4
		if (scanf("%hx", &user_selection) == 0) {
    4026:	f10d 0106 	add.w	r1, sp, #6
    402a:	4815      	ldr	r0, [pc, #84]	; (4080 <LIDAR_conf_scan_menu+0x70>)
    402c:	4b15      	ldr	r3, [pc, #84]	; (4084 <LIDAR_conf_scan_menu+0x74>)
    402e:	4798      	blx	r3
    4030:	b160      	cbz	r0, 404c <LIDAR_conf_scan_menu+0x3c>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    4032:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    4036:	4814      	ldr	r0, [pc, #80]	; (4088 <LIDAR_conf_scan_menu+0x78>)
    4038:	47a0      	blx	r4
		switch (user_selection) {
    403a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    403e:	3b01      	subs	r3, #1
    4040:	2b03      	cmp	r3, #3
    4042:	d80d      	bhi.n	4060 <LIDAR_conf_scan_menu+0x50>
    4044:	e8df f003 	tbb	[pc, r3]
    4048:	0a120810 	.word	0x0a120810
			fflush(stdin);
    404c:	4b0f      	ldr	r3, [pc, #60]	; (408c <LIDAR_conf_scan_menu+0x7c>)
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	6858      	ldr	r0, [r3, #4]
    4052:	4b0f      	ldr	r3, [pc, #60]	; (4090 <LIDAR_conf_scan_menu+0x80>)
    4054:	4798      	blx	r3
			continue;
    4056:	e7e3      	b.n	4020 <LIDAR_conf_scan_menu+0x10>
			case 2: return SCAN_MODE_EXPRESS;
    4058:	2001      	movs	r0, #1
    405a:	e008      	b.n	406e <LIDAR_conf_scan_menu+0x5e>
			case 4: return SCAN_MODE_STABILITY;
    405c:	2003      	movs	r0, #3
    405e:	e006      	b.n	406e <LIDAR_conf_scan_menu+0x5e>
				printf("\r\nInvalid option\r\n");
    4060:	480c      	ldr	r0, [pc, #48]	; (4094 <LIDAR_conf_scan_menu+0x84>)
    4062:	4b0d      	ldr	r3, [pc, #52]	; (4098 <LIDAR_conf_scan_menu+0x88>)
    4064:	4798      	blx	r3
				break;
    4066:	e7db      	b.n	4020 <LIDAR_conf_scan_menu+0x10>
			case 1: return SCAN_MODE_STANDARD;
    4068:	2000      	movs	r0, #0
    406a:	e000      	b.n	406e <LIDAR_conf_scan_menu+0x5e>
			case 3: return SCAN_MODE_BOOST;
    406c:	2002      	movs	r0, #2
}
    406e:	b002      	add	sp, #8
    4070:	bd70      	pop	{r4, r5, r6, pc}
    4072:	bf00      	nop
    4074:	200000ec 	.word	0x200000ec
    4078:	0000b6e4 	.word	0x0000b6e4
    407c:	00007d95 	.word	0x00007d95
    4080:	0000c090 	.word	0x0000c090
    4084:	00007ead 	.word	0x00007ead
    4088:	0000b6e8 	.word	0x0000b6e8
    408c:	200004b0 	.word	0x200004b0
    4090:	000079ad 	.word	0x000079ad
    4094:	0000b720 	.word	0x0000b720
    4098:	00007e7d 	.word	0x00007e7d

0000409c <LIDAR_conf_menu>:
{
    409c:	b530      	push	{r4, r5, lr}
    409e:	b083      	sub	sp, #12
	uint16_t user_selection = 0;
    40a0:	2300      	movs	r3, #0
    40a2:	f8ad 3006 	strh.w	r3, [sp, #6]
		if (processing)
    40a6:	4c3a      	ldr	r4, [pc, #232]	; (4190 <LIDAR_conf_menu+0xf4>)
			printf("%s", lidar_conf_menu);
    40a8:	4d3a      	ldr	r5, [pc, #232]	; (4194 <LIDAR_conf_menu+0xf8>)
    40aa:	e001      	b.n	40b0 <LIDAR_conf_menu+0x14>
			LIDAR_process();
    40ac:	4b3a      	ldr	r3, [pc, #232]	; (4198 <LIDAR_conf_menu+0xfc>)
    40ae:	4798      	blx	r3
		if (processing)
    40b0:	7823      	ldrb	r3, [r4, #0]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d1fa      	bne.n	40ac <LIDAR_conf_menu+0x10>
			printf("%s", lidar_conf_menu);
    40b6:	4629      	mov	r1, r5
    40b8:	4838      	ldr	r0, [pc, #224]	; (419c <LIDAR_conf_menu+0x100>)
    40ba:	4b39      	ldr	r3, [pc, #228]	; (41a0 <LIDAR_conf_menu+0x104>)
    40bc:	4798      	blx	r3
			if (scanf("%hx", &user_selection) == 0) {
    40be:	f10d 0106 	add.w	r1, sp, #6
    40c2:	4838      	ldr	r0, [pc, #224]	; (41a4 <LIDAR_conf_menu+0x108>)
    40c4:	4b38      	ldr	r3, [pc, #224]	; (41a8 <LIDAR_conf_menu+0x10c>)
    40c6:	4798      	blx	r3
    40c8:	b178      	cbz	r0, 40ea <LIDAR_conf_menu+0x4e>
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    40ca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    40ce:	4837      	ldr	r0, [pc, #220]	; (41ac <LIDAR_conf_menu+0x110>)
    40d0:	4b33      	ldr	r3, [pc, #204]	; (41a0 <LIDAR_conf_menu+0x104>)
    40d2:	4798      	blx	r3
			switch (user_selection) {
    40d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    40d8:	3b01      	subs	r3, #1
    40da:	2b06      	cmp	r3, #6
    40dc:	d854      	bhi.n	4188 <LIDAR_conf_menu+0xec>
    40de:	e8df f003 	tbb	[pc, r3]
    40e2:	0f0a      	.short	0x0f0a
    40e4:	3d312519 	.word	0x3d312519
    40e8:	47          	.byte	0x47
    40e9:	00          	.byte	0x00
				fflush(stdin);
    40ea:	4b31      	ldr	r3, [pc, #196]	; (41b0 <LIDAR_conf_menu+0x114>)
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	6858      	ldr	r0, [r3, #4]
    40f0:	4b30      	ldr	r3, [pc, #192]	; (41b4 <LIDAR_conf_menu+0x118>)
    40f2:	4798      	blx	r3
				continue;
    40f4:	e7dc      	b.n	40b0 <LIDAR_conf_menu+0x14>
					printf("\r\nReturning to lidar menu\r\n");
    40f6:	4830      	ldr	r0, [pc, #192]	; (41b8 <LIDAR_conf_menu+0x11c>)
    40f8:	4b30      	ldr	r3, [pc, #192]	; (41bc <LIDAR_conf_menu+0x120>)
    40fa:	4798      	blx	r3
}
    40fc:	b003      	add	sp, #12
    40fe:	bd30      	pop	{r4, r5, pc}
					printf("\r\nRequesting LiDAR configuration mode count\r\n");
    4100:	482f      	ldr	r0, [pc, #188]	; (41c0 <LIDAR_conf_menu+0x124>)
    4102:	4b2e      	ldr	r3, [pc, #184]	; (41bc <LIDAR_conf_menu+0x120>)
    4104:	4798      	blx	r3
					LIDAR_REQ_get_lidar_conf(CONF_SCAN_MODE_COUNT, 0);
    4106:	2100      	movs	r1, #0
    4108:	2070      	movs	r0, #112	; 0x70
    410a:	4b2e      	ldr	r3, [pc, #184]	; (41c4 <LIDAR_conf_menu+0x128>)
    410c:	4798      	blx	r3
					processing = 1;
    410e:	2301      	movs	r3, #1
    4110:	7023      	strb	r3, [r4, #0]
					break;
    4112:	e7cd      	b.n	40b0 <LIDAR_conf_menu+0x14>
					printf("\r\nRequesting LiDAR sample duration of scan mode\r\n");
    4114:	482c      	ldr	r0, [pc, #176]	; (41c8 <LIDAR_conf_menu+0x12c>)
    4116:	4b29      	ldr	r3, [pc, #164]	; (41bc <LIDAR_conf_menu+0x120>)
    4118:	4798      	blx	r3
					LIDAR_REQ_get_lidar_conf(CONF_SCAN_MODE_US_PER_SAMPLE, LIDAR_conf_scan_menu());
    411a:	4b2c      	ldr	r3, [pc, #176]	; (41cc <LIDAR_conf_menu+0x130>)
    411c:	4798      	blx	r3
    411e:	4601      	mov	r1, r0
    4120:	2071      	movs	r0, #113	; 0x71
    4122:	4b28      	ldr	r3, [pc, #160]	; (41c4 <LIDAR_conf_menu+0x128>)
    4124:	4798      	blx	r3
					processing = 1;
    4126:	2301      	movs	r3, #1
    4128:	7023      	strb	r3, [r4, #0]
					break;
    412a:	e7c1      	b.n	40b0 <LIDAR_conf_menu+0x14>
					printf("\r\nRequesting LiDAR scan mode max distance\r\n");
    412c:	4828      	ldr	r0, [pc, #160]	; (41d0 <LIDAR_conf_menu+0x134>)
    412e:	4b23      	ldr	r3, [pc, #140]	; (41bc <LIDAR_conf_menu+0x120>)
    4130:	4798      	blx	r3
					LIDAR_REQ_get_lidar_conf(CONF_SCAN_MODE_MAX_DISTANCE, LIDAR_conf_scan_menu());
    4132:	4b26      	ldr	r3, [pc, #152]	; (41cc <LIDAR_conf_menu+0x130>)
    4134:	4798      	blx	r3
    4136:	4601      	mov	r1, r0
    4138:	2074      	movs	r0, #116	; 0x74
    413a:	4b22      	ldr	r3, [pc, #136]	; (41c4 <LIDAR_conf_menu+0x128>)
    413c:	4798      	blx	r3
					processing = 1;
    413e:	2301      	movs	r3, #1
    4140:	7023      	strb	r3, [r4, #0]
					break;
    4142:	e7b5      	b.n	40b0 <LIDAR_conf_menu+0x14>
					printf("\r\nRequesting LiDAR start force scan\r\n");
    4144:	4823      	ldr	r0, [pc, #140]	; (41d4 <LIDAR_conf_menu+0x138>)
    4146:	4b1d      	ldr	r3, [pc, #116]	; (41bc <LIDAR_conf_menu+0x120>)
    4148:	4798      	blx	r3
					LIDAR_REQ_get_lidar_conf(CONF_SCAN_MODE_ANS_TYPE, LIDAR_conf_scan_menu());
    414a:	4b20      	ldr	r3, [pc, #128]	; (41cc <LIDAR_conf_menu+0x130>)
    414c:	4798      	blx	r3
    414e:	4601      	mov	r1, r0
    4150:	2075      	movs	r0, #117	; 0x75
    4152:	4b1c      	ldr	r3, [pc, #112]	; (41c4 <LIDAR_conf_menu+0x128>)
    4154:	4798      	blx	r3
					processing = 1;
    4156:	2301      	movs	r3, #1
    4158:	7023      	strb	r3, [r4, #0]
					break;
    415a:	e7a9      	b.n	40b0 <LIDAR_conf_menu+0x14>
					printf("\r\nRequesting LiDAR answer command type for scan mode\r\n");
    415c:	481e      	ldr	r0, [pc, #120]	; (41d8 <LIDAR_conf_menu+0x13c>)
    415e:	4b17      	ldr	r3, [pc, #92]	; (41bc <LIDAR_conf_menu+0x120>)
    4160:	4798      	blx	r3
					LIDAR_REQ_get_lidar_conf(CONF_SCAN_MODE_TYPICAL, 0);
    4162:	2100      	movs	r1, #0
    4164:	207c      	movs	r0, #124	; 0x7c
    4166:	4b17      	ldr	r3, [pc, #92]	; (41c4 <LIDAR_conf_menu+0x128>)
    4168:	4798      	blx	r3
					processing = 1;
    416a:	2301      	movs	r3, #1
    416c:	7023      	strb	r3, [r4, #0]
					break;
    416e:	e79f      	b.n	40b0 <LIDAR_conf_menu+0x14>
					printf("\r\nRequesting LiDAR scan mode name\r\n");
    4170:	481a      	ldr	r0, [pc, #104]	; (41dc <LIDAR_conf_menu+0x140>)
    4172:	4b12      	ldr	r3, [pc, #72]	; (41bc <LIDAR_conf_menu+0x120>)
    4174:	4798      	blx	r3
					LIDAR_REQ_get_lidar_conf(CONF_SCAN_MODE_NAME, LIDAR_conf_scan_menu());
    4176:	4b15      	ldr	r3, [pc, #84]	; (41cc <LIDAR_conf_menu+0x130>)
    4178:	4798      	blx	r3
    417a:	4601      	mov	r1, r0
    417c:	207f      	movs	r0, #127	; 0x7f
    417e:	4b11      	ldr	r3, [pc, #68]	; (41c4 <LIDAR_conf_menu+0x128>)
    4180:	4798      	blx	r3
					processing = 1;
    4182:	2301      	movs	r3, #1
    4184:	7023      	strb	r3, [r4, #0]
					break;
    4186:	e793      	b.n	40b0 <LIDAR_conf_menu+0x14>
					printf("\r\nInvalid option\r\n");
    4188:	4815      	ldr	r0, [pc, #84]	; (41e0 <LIDAR_conf_menu+0x144>)
    418a:	4b0c      	ldr	r3, [pc, #48]	; (41bc <LIDAR_conf_menu+0x120>)
    418c:	4798      	blx	r3
					break;
    418e:	e78f      	b.n	40b0 <LIDAR_conf_menu+0x14>
    4190:	20000a40 	.word	0x20000a40
    4194:	20000148 	.word	0x20000148
    4198:	00003e49 	.word	0x00003e49
    419c:	0000b6e4 	.word	0x0000b6e4
    41a0:	00007d95 	.word	0x00007d95
    41a4:	0000c090 	.word	0x0000c090
    41a8:	00007ead 	.word	0x00007ead
    41ac:	0000b6e8 	.word	0x0000b6e8
    41b0:	200004b0 	.word	0x200004b0
    41b4:	000079ad 	.word	0x000079ad
    41b8:	0000c0e4 	.word	0x0000c0e4
    41bc:	00007e7d 	.word	0x00007e7d
    41c0:	0000c100 	.word	0x0000c100
    41c4:	000047c9 	.word	0x000047c9
    41c8:	0000c130 	.word	0x0000c130
    41cc:	00004011 	.word	0x00004011
    41d0:	0000c164 	.word	0x0000c164
    41d4:	0000c190 	.word	0x0000c190
    41d8:	0000c1b8 	.word	0x0000c1b8
    41dc:	0000c1f0 	.word	0x0000c1f0
    41e0:	0000b720 	.word	0x0000b720

000041e4 <LIDAR_express_scan_menu>:
{
    41e4:	b570      	push	{r4, r5, r6, lr}
    41e6:	b082      	sub	sp, #8
	uint16_t user_selection = 0;
    41e8:	2300      	movs	r3, #0
    41ea:	f8ad 3006 	strh.w	r3, [sp, #6]
		printf("%s", lidar_conf_scan_menu);
    41ee:	4e14      	ldr	r6, [pc, #80]	; (4240 <LIDAR_express_scan_menu+0x5c>)
    41f0:	4d14      	ldr	r5, [pc, #80]	; (4244 <LIDAR_express_scan_menu+0x60>)
    41f2:	4c15      	ldr	r4, [pc, #84]	; (4248 <LIDAR_express_scan_menu+0x64>)
    41f4:	4631      	mov	r1, r6
    41f6:	4628      	mov	r0, r5
    41f8:	47a0      	blx	r4
		if (scanf("%hx", &user_selection) == 0) {
    41fa:	f10d 0106 	add.w	r1, sp, #6
    41fe:	4813      	ldr	r0, [pc, #76]	; (424c <LIDAR_express_scan_menu+0x68>)
    4200:	4b13      	ldr	r3, [pc, #76]	; (4250 <LIDAR_express_scan_menu+0x6c>)
    4202:	4798      	blx	r3
    4204:	b178      	cbz	r0, 4226 <LIDAR_express_scan_menu+0x42>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    4206:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    420a:	4812      	ldr	r0, [pc, #72]	; (4254 <LIDAR_express_scan_menu+0x70>)
    420c:	47a0      	blx	r4
		switch (user_selection) {
    420e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4212:	2b02      	cmp	r3, #2
    4214:	d00d      	beq.n	4232 <LIDAR_express_scan_menu+0x4e>
    4216:	2b03      	cmp	r3, #3
    4218:	d010      	beq.n	423c <LIDAR_express_scan_menu+0x58>
    421a:	2b01      	cmp	r3, #1
    421c:	d00c      	beq.n	4238 <LIDAR_express_scan_menu+0x54>
			printf("\r\nInvalid option\r\n");
    421e:	480e      	ldr	r0, [pc, #56]	; (4258 <LIDAR_express_scan_menu+0x74>)
    4220:	4b0e      	ldr	r3, [pc, #56]	; (425c <LIDAR_express_scan_menu+0x78>)
    4222:	4798      	blx	r3
			break;
    4224:	e7e6      	b.n	41f4 <LIDAR_express_scan_menu+0x10>
			fflush(stdin);
    4226:	4b0e      	ldr	r3, [pc, #56]	; (4260 <LIDAR_express_scan_menu+0x7c>)
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	6858      	ldr	r0, [r3, #4]
    422c:	4b0d      	ldr	r3, [pc, #52]	; (4264 <LIDAR_express_scan_menu+0x80>)
    422e:	4798      	blx	r3
			continue;
    4230:	e7e0      	b.n	41f4 <LIDAR_express_scan_menu+0x10>
			case 2: return EXPRESS_SCAN_BOOST;
    4232:	2001      	movs	r0, #1
}
    4234:	b002      	add	sp, #8
    4236:	bd70      	pop	{r4, r5, r6, pc}
			case 1: return EXPRESS_SCAN_STANDARD;
    4238:	2000      	movs	r0, #0
    423a:	e7fb      	b.n	4234 <LIDAR_express_scan_menu+0x50>
			case 3: return EXPRESS_SCAN_STABILITY;
    423c:	2002      	movs	r0, #2
    423e:	e7f9      	b.n	4234 <LIDAR_express_scan_menu+0x50>
    4240:	200000ec 	.word	0x200000ec
    4244:	0000b6e4 	.word	0x0000b6e4
    4248:	00007d95 	.word	0x00007d95
    424c:	0000c090 	.word	0x0000c090
    4250:	00007ead 	.word	0x00007ead
    4254:	0000b6e8 	.word	0x0000b6e8
    4258:	0000b720 	.word	0x0000b720
    425c:	00007e7d 	.word	0x00007e7d
    4260:	200004b0 	.word	0x200004b0
    4264:	000079ad 	.word	0x000079ad

00004268 <LIDAR_menu>:
{
    4268:	b530      	push	{r4, r5, lr}
    426a:	b083      	sub	sp, #12
	uint16_t user_selection = 0;
    426c:	2300      	movs	r3, #0
    426e:	f8ad 3006 	strh.w	r3, [sp, #6]
		if (processing)
    4272:	4c4c      	ldr	r4, [pc, #304]	; (43a4 <LIDAR_menu+0x13c>)
			printf("%s", lidar_menu_txt);
    4274:	4d4c      	ldr	r5, [pc, #304]	; (43a8 <LIDAR_menu+0x140>)
    4276:	e001      	b.n	427c <LIDAR_menu+0x14>
			LIDAR_process();
    4278:	4b4c      	ldr	r3, [pc, #304]	; (43ac <LIDAR_menu+0x144>)
    427a:	4798      	blx	r3
		if (processing)
    427c:	7823      	ldrb	r3, [r4, #0]
    427e:	2b00      	cmp	r3, #0
    4280:	d1fa      	bne.n	4278 <LIDAR_menu+0x10>
			printf("%s", lidar_menu_txt);
    4282:	4629      	mov	r1, r5
    4284:	484a      	ldr	r0, [pc, #296]	; (43b0 <LIDAR_menu+0x148>)
    4286:	4b4b      	ldr	r3, [pc, #300]	; (43b4 <LIDAR_menu+0x14c>)
    4288:	4798      	blx	r3
			if (scanf("%hx", &user_selection) == 0) {
    428a:	f10d 0106 	add.w	r1, sp, #6
    428e:	484a      	ldr	r0, [pc, #296]	; (43b8 <LIDAR_menu+0x150>)
    4290:	4b4a      	ldr	r3, [pc, #296]	; (43bc <LIDAR_menu+0x154>)
    4292:	4798      	blx	r3
    4294:	b330      	cbz	r0, 42e4 <LIDAR_menu+0x7c>
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    4296:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    429a:	4849      	ldr	r0, [pc, #292]	; (43c0 <LIDAR_menu+0x158>)
    429c:	4b45      	ldr	r3, [pc, #276]	; (43b4 <LIDAR_menu+0x14c>)
    429e:	4798      	blx	r3
			switch (user_selection) {
    42a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    42a4:	3b01      	subs	r3, #1
    42a6:	2b0c      	cmp	r3, #12
    42a8:	d878      	bhi.n	439c <LIDAR_menu+0x134>
    42aa:	a201      	add	r2, pc, #4	; (adr r2, 42b0 <LIDAR_menu+0x48>)
    42ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    42b0:	000042f1 	.word	0x000042f1
    42b4:	000042fb 	.word	0x000042fb
    42b8:	00004307 	.word	0x00004307
    42bc:	00004313 	.word	0x00004313
    42c0:	00004323 	.word	0x00004323
    42c4:	00004333 	.word	0x00004333
    42c8:	00004343 	.word	0x00004343
    42cc:	00004357 	.word	0x00004357
    42d0:	00004367 	.word	0x00004367
    42d4:	00004377 	.word	0x00004377
    42d8:	00004387 	.word	0x00004387
    42dc:	00004397 	.word	0x00004397
    42e0:	0000427d 	.word	0x0000427d
				fflush(stdin);
    42e4:	4b37      	ldr	r3, [pc, #220]	; (43c4 <LIDAR_menu+0x15c>)
    42e6:	681b      	ldr	r3, [r3, #0]
    42e8:	6858      	ldr	r0, [r3, #4]
    42ea:	4b37      	ldr	r3, [pc, #220]	; (43c8 <LIDAR_menu+0x160>)
    42ec:	4798      	blx	r3
				continue;
    42ee:	e7c5      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nReturning to main menu\r\n");
    42f0:	4836      	ldr	r0, [pc, #216]	; (43cc <LIDAR_menu+0x164>)
    42f2:	4b37      	ldr	r3, [pc, #220]	; (43d0 <LIDAR_menu+0x168>)
    42f4:	4798      	blx	r3
}
    42f6:	b003      	add	sp, #12
    42f8:	bd30      	pop	{r4, r5, pc}
					printf("\r\nStarting LiDAR motor\r\n");
    42fa:	4836      	ldr	r0, [pc, #216]	; (43d4 <LIDAR_menu+0x16c>)
    42fc:	4b34      	ldr	r3, [pc, #208]	; (43d0 <LIDAR_menu+0x168>)
    42fe:	4798      	blx	r3
					LIDAR_PWM_start();
    4300:	4b35      	ldr	r3, [pc, #212]	; (43d8 <LIDAR_menu+0x170>)
    4302:	4798      	blx	r3
					break;
    4304:	e7ba      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nStopping LiDAR motor\r\n");
    4306:	4835      	ldr	r0, [pc, #212]	; (43dc <LIDAR_menu+0x174>)
    4308:	4b31      	ldr	r3, [pc, #196]	; (43d0 <LIDAR_menu+0x168>)
    430a:	4798      	blx	r3
					LIDAR_PWM_stop();
    430c:	4b34      	ldr	r3, [pc, #208]	; (43e0 <LIDAR_menu+0x178>)
    430e:	4798      	blx	r3
					break;
    4310:	e7b4      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRequesting LiDAR stop\r\n");
    4312:	4834      	ldr	r0, [pc, #208]	; (43e4 <LIDAR_menu+0x17c>)
    4314:	4b2e      	ldr	r3, [pc, #184]	; (43d0 <LIDAR_menu+0x168>)
    4316:	4798      	blx	r3
					LIDAR_REQ_stop();
    4318:	4b33      	ldr	r3, [pc, #204]	; (43e8 <LIDAR_menu+0x180>)
    431a:	4798      	blx	r3
					processing = 1;
    431c:	2301      	movs	r3, #1
    431e:	7023      	strb	r3, [r4, #0]
					break;
    4320:	e7ac      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRequesting LiDAR reset\r\n");
    4322:	4832      	ldr	r0, [pc, #200]	; (43ec <LIDAR_menu+0x184>)
    4324:	4b2a      	ldr	r3, [pc, #168]	; (43d0 <LIDAR_menu+0x168>)
    4326:	4798      	blx	r3
					LIDAR_REQ_reset();
    4328:	4b31      	ldr	r3, [pc, #196]	; (43f0 <LIDAR_menu+0x188>)
    432a:	4798      	blx	r3
					processing = 1;
    432c:	2301      	movs	r3, #1
    432e:	7023      	strb	r3, [r4, #0]
					break;
    4330:	e7a4      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRequesting LiDAR start scan\r\n");
    4332:	4830      	ldr	r0, [pc, #192]	; (43f4 <LIDAR_menu+0x18c>)
    4334:	4b26      	ldr	r3, [pc, #152]	; (43d0 <LIDAR_menu+0x168>)
    4336:	4798      	blx	r3
					LIDAR_REQ_scan();
    4338:	4b2f      	ldr	r3, [pc, #188]	; (43f8 <LIDAR_menu+0x190>)
    433a:	4798      	blx	r3
					processing = 1;
    433c:	2301      	movs	r3, #1
    433e:	7023      	strb	r3, [r4, #0]
					break;
    4340:	e79c      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRequesting LiDAR start express scan\r\n");
    4342:	482e      	ldr	r0, [pc, #184]	; (43fc <LIDAR_menu+0x194>)
    4344:	4b22      	ldr	r3, [pc, #136]	; (43d0 <LIDAR_menu+0x168>)
    4346:	4798      	blx	r3
					LIDAR_REQ_express_scan(LIDAR_express_scan_menu());
    4348:	4b2d      	ldr	r3, [pc, #180]	; (4400 <LIDAR_menu+0x198>)
    434a:	4798      	blx	r3
    434c:	4b2d      	ldr	r3, [pc, #180]	; (4404 <LIDAR_menu+0x19c>)
    434e:	4798      	blx	r3
					processing = 1;
    4350:	2301      	movs	r3, #1
    4352:	7023      	strb	r3, [r4, #0]
					break;
    4354:	e792      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRequesting LiDAR start force scan\r\n");
    4356:	482c      	ldr	r0, [pc, #176]	; (4408 <LIDAR_menu+0x1a0>)
    4358:	4b1d      	ldr	r3, [pc, #116]	; (43d0 <LIDAR_menu+0x168>)
    435a:	4798      	blx	r3
					LIDAR_REQ_force_scan();
    435c:	4b2b      	ldr	r3, [pc, #172]	; (440c <LIDAR_menu+0x1a4>)
    435e:	4798      	blx	r3
					processing = 1;
    4360:	2301      	movs	r3, #1
    4362:	7023      	strb	r3, [r4, #0]
					break;
    4364:	e78a      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRetrieving LiDAR info\r\n");
    4366:	482a      	ldr	r0, [pc, #168]	; (4410 <LIDAR_menu+0x1a8>)
    4368:	4b19      	ldr	r3, [pc, #100]	; (43d0 <LIDAR_menu+0x168>)
    436a:	4798      	blx	r3
					LIDAR_REQ_get_info();
    436c:	4b29      	ldr	r3, [pc, #164]	; (4414 <LIDAR_menu+0x1ac>)
    436e:	4798      	blx	r3
					processing = 1;
    4370:	2301      	movs	r3, #1
    4372:	7023      	strb	r3, [r4, #0]
					break;
    4374:	e782      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRetrieving LiDAR health\r\n");
    4376:	4828      	ldr	r0, [pc, #160]	; (4418 <LIDAR_menu+0x1b0>)
    4378:	4b15      	ldr	r3, [pc, #84]	; (43d0 <LIDAR_menu+0x168>)
    437a:	4798      	blx	r3
					LIDAR_REQ_get_health();
    437c:	4b27      	ldr	r3, [pc, #156]	; (441c <LIDAR_menu+0x1b4>)
    437e:	4798      	blx	r3
					processing = 1;
    4380:	2301      	movs	r3, #1
    4382:	7023      	strb	r3, [r4, #0]
					break;
    4384:	e77a      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nRetrieving LiDAR samplerates\r\n");
    4386:	4826      	ldr	r0, [pc, #152]	; (4420 <LIDAR_menu+0x1b8>)
    4388:	4b11      	ldr	r3, [pc, #68]	; (43d0 <LIDAR_menu+0x168>)
    438a:	4798      	blx	r3
					LIDAR_REQ_get_samplerate();
    438c:	4b25      	ldr	r3, [pc, #148]	; (4424 <LIDAR_menu+0x1bc>)
    438e:	4798      	blx	r3
					processing = 1;
    4390:	2301      	movs	r3, #1
    4392:	7023      	strb	r3, [r4, #0]
					break;
    4394:	e772      	b.n	427c <LIDAR_menu+0x14>
					LIDAR_conf_menu();
    4396:	4b24      	ldr	r3, [pc, #144]	; (4428 <LIDAR_menu+0x1c0>)
    4398:	4798      	blx	r3
					break;
    439a:	e76f      	b.n	427c <LIDAR_menu+0x14>
					printf("\r\nInvalid option\r\n");
    439c:	4823      	ldr	r0, [pc, #140]	; (442c <LIDAR_menu+0x1c4>)
    439e:	4b0c      	ldr	r3, [pc, #48]	; (43d0 <LIDAR_menu+0x168>)
    43a0:	4798      	blx	r3
					break;
    43a2:	e76b      	b.n	427c <LIDAR_menu+0x14>
    43a4:	20000a40 	.word	0x20000a40
    43a8:	20000218 	.word	0x20000218
    43ac:	00003e49 	.word	0x00003e49
    43b0:	0000b6e4 	.word	0x0000b6e4
    43b4:	00007d95 	.word	0x00007d95
    43b8:	0000c090 	.word	0x0000c090
    43bc:	00007ead 	.word	0x00007ead
    43c0:	0000b6e8 	.word	0x0000b6e8
    43c4:	200004b0 	.word	0x200004b0
    43c8:	000079ad 	.word	0x000079ad
    43cc:	0000b704 	.word	0x0000b704
    43d0:	00007e7d 	.word	0x00007e7d
    43d4:	0000c214 	.word	0x0000c214
    43d8:	00003c89 	.word	0x00003c89
    43dc:	0000c22c 	.word	0x0000c22c
    43e0:	00003cf5 	.word	0x00003cf5
    43e4:	0000c244 	.word	0x0000c244
    43e8:	00004449 	.word	0x00004449
    43ec:	0000c260 	.word	0x0000c260
    43f0:	000044a9 	.word	0x000044a9
    43f4:	0000c27c 	.word	0x0000c27c
    43f8:	00004519 	.word	0x00004519
    43fc:	0000c29c 	.word	0x0000c29c
    4400:	000041e5 	.word	0x000041e5
    4404:	00004585 	.word	0x00004585
    4408:	0000c190 	.word	0x0000c190
    440c:	00004631 	.word	0x00004631
    4410:	0000c2c4 	.word	0x0000c2c4
    4414:	0000469d 	.word	0x0000469d
    4418:	0000c2e0 	.word	0x0000c2e0
    441c:	00004701 	.word	0x00004701
    4420:	0000c2fc 	.word	0x0000c2fc
    4424:	00004765 	.word	0x00004765
    4428:	0000409d 	.word	0x0000409d
    442c:	0000b720 	.word	0x0000b720

00004430 <reset_print_buffer>:

/** 
  * Resets local print buffer.
  */
void reset_print_buffer(void)
{
    4430:	4a04      	ldr	r2, [pc, #16]	; (4444 <reset_print_buffer+0x14>)
    4432:	1e53      	subs	r3, r2, #1
    4434:	32ff      	adds	r2, #255	; 0xff
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
    4436:	2100      	movs	r1, #0
    4438:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    443c:	4293      	cmp	r3, r2
    443e:	d1fb      	bne.n	4438 <reset_print_buffer+0x8>
}
    4440:	4770      	bx	lr
    4442:	bf00      	nop
    4444:	20000d30 	.word	0x20000d30

00004448 <LIDAR_REQ_stop>:
{
    4448:	b530      	push	{r4, r5, lr}
    444a:	b083      	sub	sp, #12
	lidar_request = LIDAR_STOP;
    444c:	2525      	movs	r5, #37	; 0x25
    444e:	4b0d      	ldr	r3, [pc, #52]	; (4484 <LIDAR_REQ_stop+0x3c>)
    4450:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    4452:	2200      	movs	r2, #0
    4454:	4b0c      	ldr	r3, [pc, #48]	; (4488 <LIDAR_REQ_stop+0x40>)
    4456:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    4458:	4b0c      	ldr	r3, [pc, #48]	; (448c <LIDAR_REQ_stop+0x44>)
    445a:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    445c:	4c0c      	ldr	r4, [pc, #48]	; (4490 <LIDAR_REQ_stop+0x48>)
    445e:	9500      	str	r5, [sp, #0]
    4460:	23a5      	movs	r3, #165	; 0xa5
    4462:	4a0c      	ldr	r2, [pc, #48]	; (4494 <LIDAR_REQ_stop+0x4c>)
    4464:	f44f 7180 	mov.w	r1, #256	; 0x100
    4468:	4620      	mov	r0, r4
    446a:	4d0b      	ldr	r5, [pc, #44]	; (4498 <LIDAR_REQ_stop+0x50>)
    446c:	47a8      	blx	r5
    446e:	b281      	uxth	r1, r0
    4470:	4b0a      	ldr	r3, [pc, #40]	; (449c <LIDAR_REQ_stop+0x54>)
    4472:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    4474:	4620      	mov	r0, r4
    4476:	4b0a      	ldr	r3, [pc, #40]	; (44a0 <LIDAR_REQ_stop+0x58>)
    4478:	4798      	blx	r3
	delay_ms(100);
    447a:	2064      	movs	r0, #100	; 0x64
    447c:	4b09      	ldr	r3, [pc, #36]	; (44a4 <LIDAR_REQ_stop+0x5c>)
    447e:	4798      	blx	r3
}
    4480:	b003      	add	sp, #12
    4482:	bd30      	pop	{r4, r5, pc}
    4484:	20000a34 	.word	0x20000a34
    4488:	20000a30 	.word	0x20000a30
    448c:	00004431 	.word	0x00004431
    4490:	20000d30 	.word	0x20000d30
    4494:	0000c31c 	.word	0x0000c31c
    4498:	00008049 	.word	0x00008049
    449c:	20000a2c 	.word	0x20000a2c
    44a0:	00003ded 	.word	0x00003ded
    44a4:	00002855 	.word	0x00002855

000044a8 <LIDAR_REQ_reset>:
{
    44a8:	b530      	push	{r4, r5, lr}
    44aa:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR reset\r\n");
    44ac:	480f      	ldr	r0, [pc, #60]	; (44ec <LIDAR_REQ_reset+0x44>)
    44ae:	4b10      	ldr	r3, [pc, #64]	; (44f0 <LIDAR_REQ_reset+0x48>)
    44b0:	4798      	blx	r3
	lidar_request = LIDAR_RESET;
    44b2:	2540      	movs	r5, #64	; 0x40
    44b4:	4b0f      	ldr	r3, [pc, #60]	; (44f4 <LIDAR_REQ_reset+0x4c>)
    44b6:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    44b8:	2200      	movs	r2, #0
    44ba:	4b0f      	ldr	r3, [pc, #60]	; (44f8 <LIDAR_REQ_reset+0x50>)
    44bc:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    44be:	4b0f      	ldr	r3, [pc, #60]	; (44fc <LIDAR_REQ_reset+0x54>)
    44c0:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    44c2:	4c0f      	ldr	r4, [pc, #60]	; (4500 <LIDAR_REQ_reset+0x58>)
    44c4:	9500      	str	r5, [sp, #0]
    44c6:	23a5      	movs	r3, #165	; 0xa5
    44c8:	4a0e      	ldr	r2, [pc, #56]	; (4504 <LIDAR_REQ_reset+0x5c>)
    44ca:	f44f 7180 	mov.w	r1, #256	; 0x100
    44ce:	4620      	mov	r0, r4
    44d0:	4d0d      	ldr	r5, [pc, #52]	; (4508 <LIDAR_REQ_reset+0x60>)
    44d2:	47a8      	blx	r5
    44d4:	b281      	uxth	r1, r0
    44d6:	4b0d      	ldr	r3, [pc, #52]	; (450c <LIDAR_REQ_reset+0x64>)
    44d8:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    44da:	4620      	mov	r0, r4
    44dc:	4b0c      	ldr	r3, [pc, #48]	; (4510 <LIDAR_REQ_reset+0x68>)
    44de:	4798      	blx	r3
	delay_ms(500);
    44e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    44e4:	4b0b      	ldr	r3, [pc, #44]	; (4514 <LIDAR_REQ_reset+0x6c>)
    44e6:	4798      	blx	r3
}
    44e8:	b003      	add	sp, #12
    44ea:	bd30      	pop	{r4, r5, pc}
    44ec:	0000c260 	.word	0x0000c260
    44f0:	00007e7d 	.word	0x00007e7d
    44f4:	20000a34 	.word	0x20000a34
    44f8:	20000a30 	.word	0x20000a30
    44fc:	00004431 	.word	0x00004431
    4500:	20000d30 	.word	0x20000d30
    4504:	0000c31c 	.word	0x0000c31c
    4508:	00008049 	.word	0x00008049
    450c:	20000a2c 	.word	0x20000a2c
    4510:	00003ded 	.word	0x00003ded
    4514:	00002855 	.word	0x00002855

00004518 <LIDAR_REQ_scan>:
{
    4518:	b530      	push	{r4, r5, lr}
    451a:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR start scan\r\n");
    451c:	480e      	ldr	r0, [pc, #56]	; (4558 <LIDAR_REQ_scan+0x40>)
    451e:	4b0f      	ldr	r3, [pc, #60]	; (455c <LIDAR_REQ_scan+0x44>)
    4520:	4798      	blx	r3
	lidar_request = LIDAR_SCAN;
    4522:	2520      	movs	r5, #32
    4524:	4b0e      	ldr	r3, [pc, #56]	; (4560 <LIDAR_REQ_scan+0x48>)
    4526:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    4528:	2300      	movs	r3, #0
    452a:	4a0e      	ldr	r2, [pc, #56]	; (4564 <LIDAR_REQ_scan+0x4c>)
    452c:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    452e:	4a0e      	ldr	r2, [pc, #56]	; (4568 <LIDAR_REQ_scan+0x50>)
    4530:	6013      	str	r3, [r2, #0]
	reset_print_buffer();
    4532:	4b0e      	ldr	r3, [pc, #56]	; (456c <LIDAR_REQ_scan+0x54>)
    4534:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    4536:	4c0e      	ldr	r4, [pc, #56]	; (4570 <LIDAR_REQ_scan+0x58>)
    4538:	9500      	str	r5, [sp, #0]
    453a:	23a5      	movs	r3, #165	; 0xa5
    453c:	4a0d      	ldr	r2, [pc, #52]	; (4574 <LIDAR_REQ_scan+0x5c>)
    453e:	f44f 7180 	mov.w	r1, #256	; 0x100
    4542:	4620      	mov	r0, r4
    4544:	4d0c      	ldr	r5, [pc, #48]	; (4578 <LIDAR_REQ_scan+0x60>)
    4546:	47a8      	blx	r5
    4548:	b281      	uxth	r1, r0
    454a:	4b0c      	ldr	r3, [pc, #48]	; (457c <LIDAR_REQ_scan+0x64>)
    454c:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    454e:	4620      	mov	r0, r4
    4550:	4b0b      	ldr	r3, [pc, #44]	; (4580 <LIDAR_REQ_scan+0x68>)
    4552:	4798      	blx	r3
}
    4554:	b003      	add	sp, #12
    4556:	bd30      	pop	{r4, r5, pc}
    4558:	0000c27c 	.word	0x0000c27c
    455c:	00007e7d 	.word	0x00007e7d
    4560:	20000a34 	.word	0x20000a34
    4564:	20000a30 	.word	0x20000a30
    4568:	20000a3c 	.word	0x20000a3c
    456c:	00004431 	.word	0x00004431
    4570:	20000d30 	.word	0x20000d30
    4574:	0000c31c 	.word	0x0000c31c
    4578:	00008049 	.word	0x00008049
    457c:	20000a2c 	.word	0x20000a2c
    4580:	00003ded 	.word	0x00003ded

00004584 <LIDAR_REQ_express_scan>:
{	
    4584:	b530      	push	{r4, r5, lr}
    4586:	b087      	sub	sp, #28
    4588:	f88d 000f 	strb.w	r0, [sp, #15]
	char reserved_fields = 0;
    458c:	2300      	movs	r3, #0
    458e:	f88d 3017 	strb.w	r3, [sp, #23]
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_EXPRESS_SCAN ^ scan_mode ^ payload_size;
    4592:	f080 0022 	eor.w	r0, r0, #34	; 0x22
    4596:	f88d 0016 	strb.w	r0, [sp, #22]
	lidar_request = LIDAR_EXPRESS_SCAN;
    459a:	2582      	movs	r5, #130	; 0x82
    459c:	4a1a      	ldr	r2, [pc, #104]	; (4608 <LIDAR_REQ_express_scan+0x84>)
    459e:	7015      	strb	r5, [r2, #0]
	invalid_exp_scans = 0;
    45a0:	4a1a      	ldr	r2, [pc, #104]	; (460c <LIDAR_REQ_express_scan+0x88>)
    45a2:	6013      	str	r3, [r2, #0]
    scan_count = 0;
    45a4:	4a1a      	ldr	r2, [pc, #104]	; (4610 <LIDAR_REQ_express_scan+0x8c>)
    45a6:	6013      	str	r3, [r2, #0]
	byte_count = 0;
    45a8:	4a1a      	ldr	r2, [pc, #104]	; (4614 <LIDAR_REQ_express_scan+0x90>)
    45aa:	6013      	str	r3, [r2, #0]
	reset_print_buffer();
    45ac:	4b1a      	ldr	r3, [pc, #104]	; (4618 <LIDAR_REQ_express_scan+0x94>)
    45ae:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    45b0:	4c1a      	ldr	r4, [pc, #104]	; (461c <LIDAR_REQ_express_scan+0x98>)
    45b2:	2305      	movs	r3, #5
    45b4:	9301      	str	r3, [sp, #4]
    45b6:	9500      	str	r5, [sp, #0]
    45b8:	23a5      	movs	r3, #165	; 0xa5
    45ba:	4a19      	ldr	r2, [pc, #100]	; (4620 <LIDAR_REQ_express_scan+0x9c>)
    45bc:	f44f 7180 	mov.w	r1, #256	; 0x100
    45c0:	4620      	mov	r0, r4
    45c2:	4d18      	ldr	r5, [pc, #96]	; (4624 <LIDAR_REQ_express_scan+0xa0>)
    45c4:	47a8      	blx	r5
    45c6:	b281      	uxth	r1, r0
    45c8:	4b17      	ldr	r3, [pc, #92]	; (4628 <LIDAR_REQ_express_scan+0xa4>)
    45ca:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    45cc:	4620      	mov	r0, r4
    45ce:	4c17      	ldr	r4, [pc, #92]	; (462c <LIDAR_REQ_express_scan+0xa8>)
    45d0:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&scan_mode, 1);
    45d2:	2101      	movs	r1, #1
    45d4:	f10d 000f 	add.w	r0, sp, #15
    45d8:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    45da:	2101      	movs	r1, #1
    45dc:	f10d 0017 	add.w	r0, sp, #23
    45e0:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    45e2:	2101      	movs	r1, #1
    45e4:	f10d 0017 	add.w	r0, sp, #23
    45e8:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    45ea:	2101      	movs	r1, #1
    45ec:	f10d 0017 	add.w	r0, sp, #23
    45f0:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    45f2:	2101      	movs	r1, #1
    45f4:	f10d 0017 	add.w	r0, sp, #23
    45f8:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    45fa:	2101      	movs	r1, #1
    45fc:	f10d 0016 	add.w	r0, sp, #22
    4600:	47a0      	blx	r4
}
    4602:	b007      	add	sp, #28
    4604:	bd30      	pop	{r4, r5, pc}
    4606:	bf00      	nop
    4608:	20000a34 	.word	0x20000a34
    460c:	20000a38 	.word	0x20000a38
    4610:	20000a3c 	.word	0x20000a3c
    4614:	20000a30 	.word	0x20000a30
    4618:	00004431 	.word	0x00004431
    461c:	20000d30 	.word	0x20000d30
    4620:	0000c324 	.word	0x0000c324
    4624:	00008049 	.word	0x00008049
    4628:	20000a2c 	.word	0x20000a2c
    462c:	00003ded 	.word	0x00003ded

00004630 <LIDAR_REQ_force_scan>:
{
    4630:	b530      	push	{r4, r5, lr}
    4632:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR start force scan\r\n");
    4634:	480e      	ldr	r0, [pc, #56]	; (4670 <LIDAR_REQ_force_scan+0x40>)
    4636:	4b0f      	ldr	r3, [pc, #60]	; (4674 <LIDAR_REQ_force_scan+0x44>)
    4638:	4798      	blx	r3
	lidar_request = LIDAR_FORCE_SCAN;
    463a:	2521      	movs	r5, #33	; 0x21
    463c:	4b0e      	ldr	r3, [pc, #56]	; (4678 <LIDAR_REQ_force_scan+0x48>)
    463e:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    4640:	2300      	movs	r3, #0
    4642:	4a0e      	ldr	r2, [pc, #56]	; (467c <LIDAR_REQ_force_scan+0x4c>)
    4644:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    4646:	4a0e      	ldr	r2, [pc, #56]	; (4680 <LIDAR_REQ_force_scan+0x50>)
    4648:	6013      	str	r3, [r2, #0]
	reset_print_buffer();
    464a:	4b0e      	ldr	r3, [pc, #56]	; (4684 <LIDAR_REQ_force_scan+0x54>)
    464c:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    464e:	4c0e      	ldr	r4, [pc, #56]	; (4688 <LIDAR_REQ_force_scan+0x58>)
    4650:	9500      	str	r5, [sp, #0]
    4652:	23a5      	movs	r3, #165	; 0xa5
    4654:	4a0d      	ldr	r2, [pc, #52]	; (468c <LIDAR_REQ_force_scan+0x5c>)
    4656:	f44f 7180 	mov.w	r1, #256	; 0x100
    465a:	4620      	mov	r0, r4
    465c:	4d0c      	ldr	r5, [pc, #48]	; (4690 <LIDAR_REQ_force_scan+0x60>)
    465e:	47a8      	blx	r5
    4660:	b281      	uxth	r1, r0
    4662:	4b0c      	ldr	r3, [pc, #48]	; (4694 <LIDAR_REQ_force_scan+0x64>)
    4664:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    4666:	4620      	mov	r0, r4
    4668:	4b0b      	ldr	r3, [pc, #44]	; (4698 <LIDAR_REQ_force_scan+0x68>)
    466a:	4798      	blx	r3
}
    466c:	b003      	add	sp, #12
    466e:	bd30      	pop	{r4, r5, pc}
    4670:	0000c190 	.word	0x0000c190
    4674:	00007e7d 	.word	0x00007e7d
    4678:	20000a34 	.word	0x20000a34
    467c:	20000a30 	.word	0x20000a30
    4680:	20000a3c 	.word	0x20000a3c
    4684:	00004431 	.word	0x00004431
    4688:	20000d30 	.word	0x20000d30
    468c:	0000c31c 	.word	0x0000c31c
    4690:	00008049 	.word	0x00008049
    4694:	20000a2c 	.word	0x20000a2c
    4698:	00003ded 	.word	0x00003ded

0000469c <LIDAR_REQ_get_info>:
{
    469c:	b530      	push	{r4, r5, lr}
    469e:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR info\r\n");
    46a0:	480d      	ldr	r0, [pc, #52]	; (46d8 <LIDAR_REQ_get_info+0x3c>)
    46a2:	4b0e      	ldr	r3, [pc, #56]	; (46dc <LIDAR_REQ_get_info+0x40>)
    46a4:	4798      	blx	r3
	lidar_request = LIDAR_GET_INFO;
    46a6:	2550      	movs	r5, #80	; 0x50
    46a8:	4b0d      	ldr	r3, [pc, #52]	; (46e0 <LIDAR_REQ_get_info+0x44>)
    46aa:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    46ac:	2200      	movs	r2, #0
    46ae:	4b0d      	ldr	r3, [pc, #52]	; (46e4 <LIDAR_REQ_get_info+0x48>)
    46b0:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    46b2:	4b0d      	ldr	r3, [pc, #52]	; (46e8 <LIDAR_REQ_get_info+0x4c>)
    46b4:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    46b6:	4c0d      	ldr	r4, [pc, #52]	; (46ec <LIDAR_REQ_get_info+0x50>)
    46b8:	9500      	str	r5, [sp, #0]
    46ba:	23a5      	movs	r3, #165	; 0xa5
    46bc:	4a0c      	ldr	r2, [pc, #48]	; (46f0 <LIDAR_REQ_get_info+0x54>)
    46be:	f44f 7180 	mov.w	r1, #256	; 0x100
    46c2:	4620      	mov	r0, r4
    46c4:	4d0b      	ldr	r5, [pc, #44]	; (46f4 <LIDAR_REQ_get_info+0x58>)
    46c6:	47a8      	blx	r5
    46c8:	b281      	uxth	r1, r0
    46ca:	4b0b      	ldr	r3, [pc, #44]	; (46f8 <LIDAR_REQ_get_info+0x5c>)
    46cc:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    46ce:	4620      	mov	r0, r4
    46d0:	4b0a      	ldr	r3, [pc, #40]	; (46fc <LIDAR_REQ_get_info+0x60>)
    46d2:	4798      	blx	r3
}
    46d4:	b003      	add	sp, #12
    46d6:	bd30      	pop	{r4, r5, pc}
    46d8:	0000c32c 	.word	0x0000c32c
    46dc:	00007e7d 	.word	0x00007e7d
    46e0:	20000a34 	.word	0x20000a34
    46e4:	20000a30 	.word	0x20000a30
    46e8:	00004431 	.word	0x00004431
    46ec:	20000d30 	.word	0x20000d30
    46f0:	0000c31c 	.word	0x0000c31c
    46f4:	00008049 	.word	0x00008049
    46f8:	20000a2c 	.word	0x20000a2c
    46fc:	00003ded 	.word	0x00003ded

00004700 <LIDAR_REQ_get_health>:
{
    4700:	b530      	push	{r4, r5, lr}
    4702:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR health\r\n");
    4704:	480d      	ldr	r0, [pc, #52]	; (473c <LIDAR_REQ_get_health+0x3c>)
    4706:	4b0e      	ldr	r3, [pc, #56]	; (4740 <LIDAR_REQ_get_health+0x40>)
    4708:	4798      	blx	r3
	lidar_request = LIDAR_GET_HEALTH;
    470a:	2552      	movs	r5, #82	; 0x52
    470c:	4b0d      	ldr	r3, [pc, #52]	; (4744 <LIDAR_REQ_get_health+0x44>)
    470e:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    4710:	2200      	movs	r2, #0
    4712:	4b0d      	ldr	r3, [pc, #52]	; (4748 <LIDAR_REQ_get_health+0x48>)
    4714:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    4716:	4b0d      	ldr	r3, [pc, #52]	; (474c <LIDAR_REQ_get_health+0x4c>)
    4718:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    471a:	4c0d      	ldr	r4, [pc, #52]	; (4750 <LIDAR_REQ_get_health+0x50>)
    471c:	9500      	str	r5, [sp, #0]
    471e:	23a5      	movs	r3, #165	; 0xa5
    4720:	4a0c      	ldr	r2, [pc, #48]	; (4754 <LIDAR_REQ_get_health+0x54>)
    4722:	f44f 7180 	mov.w	r1, #256	; 0x100
    4726:	4620      	mov	r0, r4
    4728:	4d0b      	ldr	r5, [pc, #44]	; (4758 <LIDAR_REQ_get_health+0x58>)
    472a:	47a8      	blx	r5
    472c:	b281      	uxth	r1, r0
    472e:	4b0b      	ldr	r3, [pc, #44]	; (475c <LIDAR_REQ_get_health+0x5c>)
    4730:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    4732:	4620      	mov	r0, r4
    4734:	4b0a      	ldr	r3, [pc, #40]	; (4760 <LIDAR_REQ_get_health+0x60>)
    4736:	4798      	blx	r3
}
    4738:	b003      	add	sp, #12
    473a:	bd30      	pop	{r4, r5, pc}
    473c:	0000c348 	.word	0x0000c348
    4740:	00007e7d 	.word	0x00007e7d
    4744:	20000a34 	.word	0x20000a34
    4748:	20000a30 	.word	0x20000a30
    474c:	00004431 	.word	0x00004431
    4750:	20000d30 	.word	0x20000d30
    4754:	0000c31c 	.word	0x0000c31c
    4758:	00008049 	.word	0x00008049
    475c:	20000a2c 	.word	0x20000a2c
    4760:	00003ded 	.word	0x00003ded

00004764 <LIDAR_REQ_get_samplerate>:
{
    4764:	b530      	push	{r4, r5, lr}
    4766:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR samplerates\r\n");
    4768:	480d      	ldr	r0, [pc, #52]	; (47a0 <LIDAR_REQ_get_samplerate+0x3c>)
    476a:	4b0e      	ldr	r3, [pc, #56]	; (47a4 <LIDAR_REQ_get_samplerate+0x40>)
    476c:	4798      	blx	r3
	lidar_request = LIDAR_GET_SAMPLERATE;
    476e:	2559      	movs	r5, #89	; 0x59
    4770:	4b0d      	ldr	r3, [pc, #52]	; (47a8 <LIDAR_REQ_get_samplerate+0x44>)
    4772:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    4774:	2200      	movs	r2, #0
    4776:	4b0d      	ldr	r3, [pc, #52]	; (47ac <LIDAR_REQ_get_samplerate+0x48>)
    4778:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    477a:	4b0d      	ldr	r3, [pc, #52]	; (47b0 <LIDAR_REQ_get_samplerate+0x4c>)
    477c:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    477e:	4c0d      	ldr	r4, [pc, #52]	; (47b4 <LIDAR_REQ_get_samplerate+0x50>)
    4780:	9500      	str	r5, [sp, #0]
    4782:	23a5      	movs	r3, #165	; 0xa5
    4784:	4a0c      	ldr	r2, [pc, #48]	; (47b8 <LIDAR_REQ_get_samplerate+0x54>)
    4786:	f44f 7180 	mov.w	r1, #256	; 0x100
    478a:	4620      	mov	r0, r4
    478c:	4d0b      	ldr	r5, [pc, #44]	; (47bc <LIDAR_REQ_get_samplerate+0x58>)
    478e:	47a8      	blx	r5
    4790:	b281      	uxth	r1, r0
    4792:	4b0b      	ldr	r3, [pc, #44]	; (47c0 <LIDAR_REQ_get_samplerate+0x5c>)
    4794:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    4796:	4620      	mov	r0, r4
    4798:	4b0a      	ldr	r3, [pc, #40]	; (47c4 <LIDAR_REQ_get_samplerate+0x60>)
    479a:	4798      	blx	r3
}
    479c:	b003      	add	sp, #12
    479e:	bd30      	pop	{r4, r5, pc}
    47a0:	0000c364 	.word	0x0000c364
    47a4:	00007e7d 	.word	0x00007e7d
    47a8:	20000a34 	.word	0x20000a34
    47ac:	20000a30 	.word	0x20000a30
    47b0:	00004431 	.word	0x00004431
    47b4:	20000d30 	.word	0x20000d30
    47b8:	0000c31c 	.word	0x0000c31c
    47bc:	00008049 	.word	0x00008049
    47c0:	20000a2c 	.word	0x20000a2c
    47c4:	00003ded 	.word	0x00003ded

000047c8 <LIDAR_REQ_get_lidar_conf>:
{
    47c8:	b570      	push	{r4, r5, r6, lr}
    47ca:	b086      	sub	sp, #24
    47cc:	4605      	mov	r5, r0
    47ce:	460c      	mov	r4, r1
		printf("\r\nRequesting LiDAR configuration data\r\n");
    47d0:	4838      	ldr	r0, [pc, #224]	; (48b4 <LIDAR_REQ_get_lidar_conf+0xec>)
    47d2:	4b39      	ldr	r3, [pc, #228]	; (48b8 <LIDAR_REQ_get_lidar_conf+0xf0>)
    47d4:	4798      	blx	r3
	uint8_t payload[2] = {0};
    47d6:	2300      	movs	r3, #0
    47d8:	f8ad 3010 	strh.w	r3, [sp, #16]
		ctype[i] = conf_type << (i*8);
    47dc:	b2e3      	uxtb	r3, r4
    47de:	f88d 3014 	strb.w	r3, [sp, #20]
    47e2:	0222      	lsls	r2, r4, #8
    47e4:	f88d 2015 	strb.w	r2, [sp, #21]
    47e8:	0422      	lsls	r2, r4, #16
    47ea:	f88d 2016 	strb.w	r2, [sp, #22]
    47ee:	0622      	lsls	r2, r4, #24
    47f0:	f88d 2017 	strb.w	r2, [sp, #23]
	switch (conf_type) {
    47f4:	3c70      	subs	r4, #112	; 0x70
    47f6:	2c0f      	cmp	r4, #15
    47f8:	d855      	bhi.n	48a6 <LIDAR_REQ_get_lidar_conf+0xde>
    47fa:	e8df f004 	tbb	[pc, r4]
    47fe:	3808      	.short	0x3808
    4800:	463f5454 	.word	0x463f5454
    4804:	54545454 	.word	0x54545454
    4808:	54085454 	.word	0x54085454
    480c:	4d54      	.short	0x4d54
			payload_size = 0x4;
    480e:	2404      	movs	r4, #4
					payload_size ^ payload[0] ^ payload[1];
    4810:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4814:	f89d 1011 	ldrb.w	r1, [sp, #17]
    4818:	404a      	eors	r2, r1
    481a:	f082 0221 	eor.w	r2, r2, #33	; 0x21
    481e:	4053      	eors	r3, r2
    4820:	4063      	eors	r3, r4
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_GET_LIDAR_CONF ^ conf_type ^ 
    4822:	f88d 300f 	strb.w	r3, [sp, #15]
	lidar_request = LIDAR_GET_LIDAR_CONF;
    4826:	2684      	movs	r6, #132	; 0x84
    4828:	4b24      	ldr	r3, [pc, #144]	; (48bc <LIDAR_REQ_get_lidar_conf+0xf4>)
    482a:	701e      	strb	r6, [r3, #0]
	byte_count = 0;
    482c:	2200      	movs	r2, #0
    482e:	4b24      	ldr	r3, [pc, #144]	; (48c0 <LIDAR_REQ_get_lidar_conf+0xf8>)
    4830:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    4832:	4b24      	ldr	r3, [pc, #144]	; (48c4 <LIDAR_REQ_get_lidar_conf+0xfc>)
    4834:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE,
    4836:	4d24      	ldr	r5, [pc, #144]	; (48c8 <LIDAR_REQ_get_lidar_conf+0x100>)
    4838:	9401      	str	r4, [sp, #4]
    483a:	9600      	str	r6, [sp, #0]
    483c:	23a5      	movs	r3, #165	; 0xa5
    483e:	4a23      	ldr	r2, [pc, #140]	; (48cc <LIDAR_REQ_get_lidar_conf+0x104>)
    4840:	f44f 7180 	mov.w	r1, #256	; 0x100
    4844:	4628      	mov	r0, r5
    4846:	4e22      	ldr	r6, [pc, #136]	; (48d0 <LIDAR_REQ_get_lidar_conf+0x108>)
    4848:	47b0      	blx	r6
    484a:	b281      	uxth	r1, r0
    484c:	4b21      	ldr	r3, [pc, #132]	; (48d4 <LIDAR_REQ_get_lidar_conf+0x10c>)
    484e:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    4850:	4628      	mov	r0, r5
    4852:	4d21      	ldr	r5, [pc, #132]	; (48d8 <LIDAR_REQ_get_lidar_conf+0x110>)
    4854:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)ctype, 4);
    4856:	2104      	movs	r1, #4
    4858:	a805      	add	r0, sp, #20
    485a:	47a8      	blx	r5
	if (payload_size > 4) {
    485c:	2c04      	cmp	r4, #4
    485e:	d824      	bhi.n	48aa <LIDAR_REQ_get_lidar_conf+0xe2>
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    4860:	2101      	movs	r1, #1
    4862:	f10d 000f 	add.w	r0, sp, #15
    4866:	4b1c      	ldr	r3, [pc, #112]	; (48d8 <LIDAR_REQ_get_lidar_conf+0x110>)
    4868:	4798      	blx	r3
}
    486a:	b006      	add	sp, #24
    486c:	bd70      	pop	{r4, r5, r6, pc}
			payload[0] = scan_mode;
    486e:	f88d 5010 	strb.w	r5, [sp, #16]
			payload[1] = scan_mode >> 8;
    4872:	0a2d      	lsrs	r5, r5, #8
    4874:	f88d 5011 	strb.w	r5, [sp, #17]
			payload_size = 0x6;
    4878:	2406      	movs	r4, #6
			break;
    487a:	e7c9      	b.n	4810 <LIDAR_REQ_get_lidar_conf+0x48>
			payload[0] = scan_mode;
    487c:	f88d 5010 	strb.w	r5, [sp, #16]
			payload[1] = scan_mode >> 8;
    4880:	0a2d      	lsrs	r5, r5, #8
    4882:	f88d 5011 	strb.w	r5, [sp, #17]
			payload_size = 0x6;
    4886:	2406      	movs	r4, #6
			break;
    4888:	e7c2      	b.n	4810 <LIDAR_REQ_get_lidar_conf+0x48>
			payload[0] = scan_mode;
    488a:	f88d 5010 	strb.w	r5, [sp, #16]
			payload[1] = scan_mode >> 8;
    488e:	0a2d      	lsrs	r5, r5, #8
    4890:	f88d 5011 	strb.w	r5, [sp, #17]
			payload_size = 0x6;
    4894:	2406      	movs	r4, #6
			break;
    4896:	e7bb      	b.n	4810 <LIDAR_REQ_get_lidar_conf+0x48>
			payload[0] = scan_mode;
    4898:	f88d 5010 	strb.w	r5, [sp, #16]
			payload[1] = scan_mode >> 8;
    489c:	0a2d      	lsrs	r5, r5, #8
    489e:	f88d 5011 	strb.w	r5, [sp, #17]
			payload_size = 0x6;
    48a2:	2406      	movs	r4, #6
			break;
    48a4:	e7b4      	b.n	4810 <LIDAR_REQ_get_lidar_conf+0x48>
	char payload_size = 0x0;
    48a6:	2400      	movs	r4, #0
    48a8:	e7b2      	b.n	4810 <LIDAR_REQ_get_lidar_conf+0x48>
		LIDAR_USART_send((uint8_t *)payload, 2);	
    48aa:	2102      	movs	r1, #2
    48ac:	a804      	add	r0, sp, #16
    48ae:	47a8      	blx	r5
    48b0:	e7d6      	b.n	4860 <LIDAR_REQ_get_lidar_conf+0x98>
    48b2:	bf00      	nop
    48b4:	0000c384 	.word	0x0000c384
    48b8:	00007e7d 	.word	0x00007e7d
    48bc:	20000a34 	.word	0x20000a34
    48c0:	20000a30 	.word	0x20000a30
    48c4:	00004431 	.word	0x00004431
    48c8:	20000d30 	.word	0x20000d30
    48cc:	0000c324 	.word	0x0000c324
    48d0:	00008049 	.word	0x00008049
    48d4:	20000a2c 	.word	0x20000a2c
    48d8:	00003ded 	.word	0x00003ded

000048dc <LIDAR_RES_express_scan>:
  *						+3		major[7:0]
  *	
  *				Dense:	+0		distance[15:0]
  */
uint8_t LIDAR_RES_express_scan(void) 
{ 
    48dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t calc_checksum;
	uint8_t PAYLOAD_SIZE=(resp_desc.response_info & 0x3FFFFFFF), CABIN_START=4;
	uint16_t i, pos;
	
	uint8_t checksum = ((uint8_t)DATA_RESPONSE[1] << 4) | ((uint8_t)DATA_RESPONSE[0] & 0x0F);
    48de:	4b54      	ldr	r3, [pc, #336]	; (4a30 <LIDAR_RES_express_scan+0x154>)
    48e0:	785a      	ldrb	r2, [r3, #1]
    48e2:	781e      	ldrb	r6, [r3, #0]
    48e4:	f006 060f 	and.w	r6, r6, #15
    48e8:	ea46 1602 	orr.w	r6, r6, r2, lsl #4
    48ec:	b2f6      	uxtb	r6, r6
	uint16_t start_angle = (uint8_t)DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    48ee:	789c      	ldrb	r4, [r3, #2]
    48f0:	fa5f fe84 	uxtb.w	lr, r4
    48f4:	78df      	ldrb	r7, [r3, #3]
    48f6:	b2ff      	uxtb	r7, r7
	uint8_t S_flag = (uint8_t)DATA_RESPONSE[3] >> 7;
    48f8:	78dd      	ldrb	r5, [r3, #3]
    48fa:	b2ed      	uxtb	r5, r5

    /* Decrement byte count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= PAYLOAD_SIZE;
    48fc:	494d      	ldr	r1, [pc, #308]	; (4a34 <LIDAR_RES_express_scan+0x158>)
    48fe:	4b4e      	ldr	r3, [pc, #312]	; (4a38 <LIDAR_RES_express_scan+0x15c>)
    4900:	791b      	ldrb	r3, [r3, #4]
    4902:	680a      	ldr	r2, [r1, #0]
    4904:	1ad2      	subs	r2, r2, r3
    4906:	600a      	str	r2, [r1, #0]
	
	/* Check if data valid */
	calc_checksum = 0;
	for (i=2; i<PAYLOAD_SIZE; i++)
    4908:	b29b      	uxth	r3, r3
    490a:	2b02      	cmp	r3, #2
    490c:	d912      	bls.n	4934 <LIDAR_RES_express_scan+0x58>
    490e:	3b03      	subs	r3, #3
    4910:	b298      	uxth	r0, r3
    4912:	3003      	adds	r0, #3
    4914:	2302      	movs	r3, #2
    4916:	2200      	movs	r2, #0
		calc_checksum ^= DATA_RESPONSE[i];
    4918:	4c45      	ldr	r4, [pc, #276]	; (4a30 <LIDAR_RES_express_scan+0x154>)
    491a:	5ce1      	ldrb	r1, [r4, r3]
    491c:	404a      	eors	r2, r1
    491e:	3301      	adds	r3, #1
	for (i=2; i<PAYLOAD_SIZE; i++)
    4920:	4283      	cmp	r3, r0
    4922:	d1fa      	bne.n	491a <LIDAR_RES_express_scan+0x3e>
		
	if (checksum != calc_checksum) {
    4924:	4296      	cmp	r6, r2
    4926:	d007      	beq.n	4938 <LIDAR_RES_express_scan+0x5c>
		invalid_exp_scans++;
    4928:	4a44      	ldr	r2, [pc, #272]	; (4a3c <LIDAR_RES_express_scan+0x160>)
    492a:	6813      	ldr	r3, [r2, #0]
    492c:	3301      	adds	r3, #1
    492e:	6013      	str	r3, [r2, #0]
		return 0;
    4930:	2000      	movs	r0, #0
    4932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	calc_checksum = 0;
    4934:	2200      	movs	r2, #0
    4936:	e7f5      	b.n	4924 <LIDAR_RES_express_scan+0x48>
	uint16_t start_angle = (uint8_t)DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    4938:	023c      	lsls	r4, r7, #8
    493a:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
    493e:	ea44 040e 	orr.w	r4, r4, lr
	uint8_t S_flag = (uint8_t)DATA_RESPONSE[3] >> 7;
    4942:	09ed      	lsrs	r5, r5, #7
	}

    switch (resp_desc.data_type) {
    4944:	4b3c      	ldr	r3, [pc, #240]	; (4a38 <LIDAR_RES_express_scan+0x15c>)
    4946:	7a1b      	ldrb	r3, [r3, #8]
    4948:	2b84      	cmp	r3, #132	; 0x84
    494a:	d035      	beq.n	49b8 <LIDAR_RES_express_scan+0xdc>
    494c:	2b85      	cmp	r3, #133	; 0x85
    494e:	d05a      	beq.n	4a06 <LIDAR_RES_express_scan+0x12a>
    4950:	2b82      	cmp	r3, #130	; 0x82
    4952:	d001      	beq.n	4958 <LIDAR_RES_express_scan+0x7c>
											( (uint8_t)DATA_RESPONSE[pos+1]);
				dense_cabins[i].start_angle = start_angle;
			}
			break;
    }
	return 1;
    4954:	2001      	movs	r0, #1
}
    4956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4958:	4b39      	ldr	r3, [pc, #228]	; (4a40 <LIDAR_RES_express_scan+0x164>)
    495a:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
    switch (resp_desc.data_type) {
    495e:	2104      	movs	r1, #4
                legacy_cabins[i].distance1 =    ( (uint8_t)DATA_RESPONSE[pos+0] >> 1 ) |
    4960:	4a33      	ldr	r2, [pc, #204]	; (4a30 <LIDAR_RES_express_scan+0x154>)
				legacy_cabins[i].start_angle = start_angle;
    4962:	811c      	strh	r4, [r3, #8]
                legacy_cabins[i].distance1 =    ( (uint8_t)DATA_RESPONSE[pos+0] >> 1 ) |
    4964:	5c56      	ldrb	r6, [r2, r1]
    4966:	1c48      	adds	r0, r1, #1
												( (uint8_t)DATA_RESPONSE[pos+1] << 7 );
    4968:	5c10      	ldrb	r0, [r2, r0]
    496a:	01c0      	lsls	r0, r0, #7
                legacy_cabins[i].distance1 =    ( (uint8_t)DATA_RESPONSE[pos+0] >> 1 ) |
    496c:	ea40 0056 	orr.w	r0, r0, r6, lsr #1
    4970:	8098      	strh	r0, [r3, #4]
    4972:	1c8f      	adds	r7, r1, #2
				legacy_cabins[i].distance2 =	( (uint8_t)DATA_RESPONSE[pos+2] >> 1 ) |
    4974:	5dd6      	ldrb	r6, [r2, r7]
    4976:	1cc8      	adds	r0, r1, #3
												( (uint8_t)DATA_RESPONSE[pos+3] << 7 );
    4978:	5c10      	ldrb	r0, [r2, r0]
    497a:	01c0      	lsls	r0, r0, #7
				legacy_cabins[i].distance2 =	( (uint8_t)DATA_RESPONSE[pos+2] >> 1 ) |
    497c:	ea40 0056 	orr.w	r0, r0, r6, lsr #1
    4980:	80d8      	strh	r0, [r3, #6]
                legacy_cabins[i].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1 ) << 4) |
    4982:	5c50      	ldrb	r0, [r2, r1]
    4984:	f101 0e04 	add.w	lr, r1, #4
												( (uint8_t)DATA_RESPONSE[pos+4] & 0x0F );
    4988:	f812 600e 	ldrb.w	r6, [r2, lr]
                legacy_cabins[i].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1 ) << 4) |
    498c:	0100      	lsls	r0, r0, #4
    498e:	f000 0010 	and.w	r0, r0, #16
												( (uint8_t)DATA_RESPONSE[pos+4] & 0x0F );
    4992:	f006 060f 	and.w	r6, r6, #15
                legacy_cabins[i].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1 ) << 4) |
    4996:	4330      	orrs	r0, r6
    4998:	7058      	strb	r0, [r3, #1]
				legacy_cabins[i].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1 ) << 4) |
    499a:	5dd0      	ldrb	r0, [r2, r7]
												( (uint8_t)DATA_RESPONSE[pos+4] >> 4 );
    499c:	f812 600e 	ldrb.w	r6, [r2, lr]
				legacy_cabins[i].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1 ) << 4) |
    49a0:	0100      	lsls	r0, r0, #4
    49a2:	f000 0010 	and.w	r0, r0, #16
    49a6:	ea40 1016 	orr.w	r0, r0, r6, lsr #4
    49aa:	7098      	strb	r0, [r3, #2]
    49ac:	330a      	adds	r3, #10
    49ae:	3105      	adds	r1, #5
            for (i = 0; i < LEGACY_CABIN_COUNT; i++) {
    49b0:	42ab      	cmp	r3, r5
    49b2:	d1d6      	bne.n	4962 <LIDAR_RES_express_scan+0x86>
	return 1;
    49b4:	2001      	movs	r0, #1
    49b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49b8:	4e21      	ldr	r6, [pc, #132]	; (4a40 <LIDAR_RES_express_scan+0x164>)
    49ba:	f106 03a0 	add.w	r3, r6, #160	; 0xa0
    49be:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
    switch (resp_desc.data_type) {
    49c2:	2004      	movs	r0, #4
				ultra_cabins[i].predict2 =  ( (uint8_t)DATA_RESPONSE[pos+0] << 2 ) |
    49c4:	491a      	ldr	r1, [pc, #104]	; (4a30 <LIDAR_RES_express_scan+0x154>)
				ultra_cabins[i].S = S_flag;
    49c6:	701d      	strb	r5, [r3, #0]
				ultra_cabins[i].start_angle = start_angle;
    49c8:	805c      	strh	r4, [r3, #2]
				ultra_cabins[i].predict2 =  ( (uint8_t)DATA_RESPONSE[pos+0] << 2 ) |
    49ca:	f811 e000 	ldrb.w	lr, [r1, r0]
    49ce:	1c47      	adds	r7, r0, #1
										    ( (uint8_t)DATA_RESPONSE[pos+1] >> 6 );
    49d0:	5dca      	ldrb	r2, [r1, r7]
				ultra_cabins[i].predict2 =  ( (uint8_t)DATA_RESPONSE[pos+0] << 2 ) |
    49d2:	0992      	lsrs	r2, r2, #6
    49d4:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
    49d8:	80da      	strh	r2, [r3, #6]
				ultra_cabins[i].predict1 =  (((uint8_t)DATA_RESPONSE[pos+1] & 0x3F ) << 4 ) |
    49da:	5dca      	ldrb	r2, [r1, r7]
    49dc:	1c87      	adds	r7, r0, #2
										    ( (uint8_t)DATA_RESPONSE[pos+2] >> 4 );
    49de:	f811 e007 	ldrb.w	lr, [r1, r7]
				ultra_cabins[i].predict1 =  (((uint8_t)DATA_RESPONSE[pos+1] & 0x3F ) << 4 ) |
    49e2:	0112      	lsls	r2, r2, #4
    49e4:	f402 727c 	and.w	r2, r2, #1008	; 0x3f0
    49e8:	ea42 121e 	orr.w	r2, r2, lr, lsr #4
    49ec:	809a      	strh	r2, [r3, #4]
				ultra_cabins[i].major =     ( (uint8_t)DATA_RESPONSE[pos+2] << 8 ) |
    49ee:	5dcf      	ldrb	r7, [r1, r7]
    49f0:	1cc2      	adds	r2, r0, #3
											( (uint8_t)DATA_RESPONSE[pos+3] );
    49f2:	5c8a      	ldrb	r2, [r1, r2]
				ultra_cabins[i].major =     ( (uint8_t)DATA_RESPONSE[pos+2] << 8 ) |
    49f4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    49f8:	811a      	strh	r2, [r3, #8]
    49fa:	330a      	adds	r3, #10
    49fc:	3004      	adds	r0, #4
			for (i = 0; i < EXT_CABIN_COUNT; i++) {
    49fe:	42b3      	cmp	r3, r6
    4a00:	d1e1      	bne.n	49c6 <LIDAR_RES_express_scan+0xea>
	return 1;
    4a02:	2001      	movs	r0, #1
    4a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a06:	4f0e      	ldr	r7, [pc, #56]	; (4a40 <LIDAR_RES_express_scan+0x164>)
    4a08:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
    4a0c:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
    switch (resp_desc.data_type) {
    4a10:	2204      	movs	r2, #4
				dense_cabins[i].distance =  ( (uint8_t)DATA_RESPONSE[pos+0] << 8) |
    4a12:	4807      	ldr	r0, [pc, #28]	; (4a30 <LIDAR_RES_express_scan+0x154>)
				dense_cabins[i].S = S_flag;
    4a14:	701d      	strb	r5, [r3, #0]
				dense_cabins[i].distance =  ( (uint8_t)DATA_RESPONSE[pos+0] << 8) |
    4a16:	5c86      	ldrb	r6, [r0, r2]
    4a18:	1c51      	adds	r1, r2, #1
											( (uint8_t)DATA_RESPONSE[pos+1]);
    4a1a:	5c41      	ldrb	r1, [r0, r1]
				dense_cabins[i].distance =  ( (uint8_t)DATA_RESPONSE[pos+0] << 8) |
    4a1c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    4a20:	8099      	strh	r1, [r3, #4]
				dense_cabins[i].start_angle = start_angle;
    4a22:	805c      	strh	r4, [r3, #2]
    4a24:	3306      	adds	r3, #6
    4a26:	3202      	adds	r2, #2
			for (i = 0; i < DENSE_CABIN_COUNT; i++) {
    4a28:	42bb      	cmp	r3, r7
    4a2a:	d1f3      	bne.n	4a14 <LIDAR_RES_express_scan+0x138>
	return 1;
    4a2c:	2001      	movs	r0, #1
    4a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a30:	200009a4 	.word	0x200009a4
    4a34:	20000a30 	.word	0x20000a30
    4a38:	20000d24 	.word	0x20000d24
    4a3c:	20000a38 	.word	0x20000a38
    4a40:	20000e30 	.word	0x20000e30

00004a44 <LIDAR_RES_get_info>:
  *						+19 	serial_number[15]		
  * When converting serial_number to text from hex, the least significant byte 
  *	prints first.
  */
char* LIDAR_RES_get_info(void) 
{	
    4a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a48:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	uint8_t model_id 		 = DATA_RESPONSE[0];
    4a4c:	4b27      	ldr	r3, [pc, #156]	; (4aec <LIDAR_RES_get_info+0xa8>)
    4a4e:	f893 b000 	ldrb.w	fp, [r3]
    4a52:	fa5f fb8b 	uxtb.w	fp, fp
	uint8_t firmware_minor	 = DATA_RESPONSE[1];
    4a56:	f893 a001 	ldrb.w	sl, [r3, #1]
    4a5a:	fa5f fa8a 	uxtb.w	sl, sl
	uint8_t firmware_major	 = DATA_RESPONSE[2];
    4a5e:	f893 9002 	ldrb.w	r9, [r3, #2]
    4a62:	fa5f f989 	uxtb.w	r9, r9
	uint8_t hardware_version = DATA_RESPONSE[3];
    4a66:	f893 8003 	ldrb.w	r8, [r3, #3]
    4a6a:	fa5f f888 	uxtb.w	r8, r8
	char serial_number[16]	 = {0};
    4a6e:	2100      	movs	r1, #0
    4a70:	9180      	str	r1, [sp, #512]	; 0x200
    4a72:	9181      	str	r1, [sp, #516]	; 0x204
    4a74:	9182      	str	r1, [sp, #520]	; 0x208
    4a76:	9183      	str	r1, [sp, #524]	; 0x20c
	char tmp_info[512] = "";
    4a78:	9100      	str	r1, [sp, #0]
    4a7a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
    4a7e:	a801      	add	r0, sp, #4
    4a80:	4b1b      	ldr	r3, [pc, #108]	; (4af0 <LIDAR_RES_get_info+0xac>)
    4a82:	4798      	blx	r3
    4a84:	2404      	movs	r4, #4
	
	/** Get hexadecimal string output */
	int i;
	for (i=0; i<15; i++) {
		sprintf(&serial_number[i], "%02X", DATA_RESPONSE[i+4]);
    4a86:	4f19      	ldr	r7, [pc, #100]	; (4aec <LIDAR_RES_get_info+0xa8>)
    4a88:	4e1a      	ldr	r6, [pc, #104]	; (4af4 <LIDAR_RES_get_info+0xb0>)
    4a8a:	4d1b      	ldr	r5, [pc, #108]	; (4af8 <LIDAR_RES_get_info+0xb4>)
    4a8c:	5d3a      	ldrb	r2, [r7, r4]
    4a8e:	ab84      	add	r3, sp, #528	; 0x210
    4a90:	1918      	adds	r0, r3, r4
    4a92:	4631      	mov	r1, r6
    4a94:	3814      	subs	r0, #20
    4a96:	47a8      	blx	r5
    4a98:	3401      	adds	r4, #1
	for (i=0; i<15; i++) {
    4a9a:	2c13      	cmp	r4, #19
    4a9c:	d1f6      	bne.n	4a8c <LIDAR_RES_get_info+0x48>
	}
	
	/* Format string to print as header in .lam file */
	sprintf(tmp_info, "# RPLiDAR Model ID: %u\r\n", model_id);
    4a9e:	465a      	mov	r2, fp
    4aa0:	4916      	ldr	r1, [pc, #88]	; (4afc <LIDAR_RES_get_info+0xb8>)
    4aa2:	4668      	mov	r0, sp
    4aa4:	4d14      	ldr	r5, [pc, #80]	; (4af8 <LIDAR_RES_get_info+0xb4>)
    4aa6:	47a8      	blx	r5
	strcpy(info, tmp_info);
    4aa8:	4c15      	ldr	r4, [pc, #84]	; (4b00 <LIDAR_RES_get_info+0xbc>)
    4aaa:	4669      	mov	r1, sp
    4aac:	4620      	mov	r0, r4
    4aae:	4b15      	ldr	r3, [pc, #84]	; (4b04 <LIDAR_RES_get_info+0xc0>)
    4ab0:	4798      	blx	r3
	sprintf(tmp_info, "# RPLiDAR Firmware Version: %u.%u\r\n", firmware_major, firmware_minor);
    4ab2:	4653      	mov	r3, sl
    4ab4:	464a      	mov	r2, r9
    4ab6:	4914      	ldr	r1, [pc, #80]	; (4b08 <LIDAR_RES_get_info+0xc4>)
    4ab8:	4668      	mov	r0, sp
    4aba:	47a8      	blx	r5
	strcat(info, tmp_info);
    4abc:	4669      	mov	r1, sp
    4abe:	4620      	mov	r0, r4
    4ac0:	4e12      	ldr	r6, [pc, #72]	; (4b0c <LIDAR_RES_get_info+0xc8>)
    4ac2:	47b0      	blx	r6
	sprintf(tmp_info, "# Hardware Version: %u\r\n", hardware_version);
    4ac4:	4642      	mov	r2, r8
    4ac6:	4912      	ldr	r1, [pc, #72]	; (4b10 <LIDAR_RES_get_info+0xcc>)
    4ac8:	4668      	mov	r0, sp
    4aca:	47a8      	blx	r5
	strcat(info, tmp_info);
    4acc:	4669      	mov	r1, sp
    4ace:	4620      	mov	r0, r4
    4ad0:	47b0      	blx	r6
	sprintf(tmp_info, "# Serial Number: 0x%s\r\n", serial_number);
    4ad2:	aa80      	add	r2, sp, #512	; 0x200
    4ad4:	490f      	ldr	r1, [pc, #60]	; (4b14 <LIDAR_RES_get_info+0xd0>)
    4ad6:	4668      	mov	r0, sp
    4ad8:	47a8      	blx	r5
	strcat(info, tmp_info);
    4ada:	4669      	mov	r1, sp
    4adc:	4620      	mov	r0, r4
    4ade:	47b0      	blx	r6
	return info;
}
    4ae0:	4620      	mov	r0, r4
    4ae2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    4ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4aea:	bf00      	nop
    4aec:	200009a4 	.word	0x200009a4
    4af0:	00007c2d 	.word	0x00007c2d
    4af4:	0000c3ac 	.word	0x0000c3ac
    4af8:	000080b1 	.word	0x000080b1
    4afc:	0000c3b4 	.word	0x0000c3b4
    4b00:	20001100 	.word	0x20001100
    4b04:	000081b1 	.word	0x000081b1
    4b08:	0000c3d0 	.word	0x0000c3d0
    4b0c:	0000817f 	.word	0x0000817f
    4b10:	0000c3f4 	.word	0x0000c3f4
    4b14:	0000c410 	.word	0x0000c410

00004b18 <LIDAR_RES_get_health>:
  *		Order 8..0		+1		error_code[7:0]
  *						+2		error_code[15:8]	
  *	@return uint16_t : error_code
  */
uint16_t LIDAR_RES_get_health(void) 
{
    4b18:	b510      	push	{r4, lr}
	char* status;
	uint16_t error_code;  
	
	switch(DATA_RESPONSE[0]) {
    4b1a:	4b10      	ldr	r3, [pc, #64]	; (4b5c <LIDAR_RES_get_health+0x44>)
    4b1c:	781b      	ldrb	r3, [r3, #0]
    4b1e:	b2db      	uxtb	r3, r3
    4b20:	2b01      	cmp	r3, #1
    4b22:	d012      	beq.n	4b4a <LIDAR_RES_get_health+0x32>
    4b24:	b19b      	cbz	r3, 4b4e <LIDAR_RES_get_health+0x36>
		case 0: status = "GOOD"; break;
		case 1: status = "WARNING"; break;
		case 2: status = "ERROR"; break;
		default: status = "UNKNOWN"; break;
    4b26:	4a0e      	ldr	r2, [pc, #56]	; (4b60 <LIDAR_RES_get_health+0x48>)
    4b28:	490e      	ldr	r1, [pc, #56]	; (4b64 <LIDAR_RES_get_health+0x4c>)
    4b2a:	2b02      	cmp	r3, #2
    4b2c:	bf18      	it	ne
    4b2e:	4611      	movne	r1, r2
	}
	
	error_code = DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8);
    4b30:	4b0a      	ldr	r3, [pc, #40]	; (4b5c <LIDAR_RES_get_health+0x44>)
    4b32:	781c      	ldrb	r4, [r3, #0]
    4b34:	785b      	ldrb	r3, [r3, #1]
    4b36:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    4b3a:	b2a4      	uxth	r4, r4
	
    if (DEBUG) {
		if (error_code == 0)
    4b3c:	b14c      	cbz	r4, 4b52 <LIDAR_RES_get_health+0x3a>
			printf(" : LiDAR Health is %s!\r\n", status);
		else 
			printf(" : LiDAR Health is %s!\r\n : Error code: %u\r\n", 
    4b3e:	4622      	mov	r2, r4
    4b40:	4809      	ldr	r0, [pc, #36]	; (4b68 <LIDAR_RES_get_health+0x50>)
    4b42:	4b0a      	ldr	r3, [pc, #40]	; (4b6c <LIDAR_RES_get_health+0x54>)
    4b44:	4798      	blx	r3
				    status, error_code);
    }
	
	return error_code;
}
    4b46:	4620      	mov	r0, r4
    4b48:	bd10      	pop	{r4, pc}
		case 1: status = "WARNING"; break;
    4b4a:	4909      	ldr	r1, [pc, #36]	; (4b70 <LIDAR_RES_get_health+0x58>)
    4b4c:	e7f0      	b.n	4b30 <LIDAR_RES_get_health+0x18>
		case 0: status = "GOOD"; break;
    4b4e:	4909      	ldr	r1, [pc, #36]	; (4b74 <LIDAR_RES_get_health+0x5c>)
    4b50:	e7ee      	b.n	4b30 <LIDAR_RES_get_health+0x18>
			printf(" : LiDAR Health is %s!\r\n", status);
    4b52:	4809      	ldr	r0, [pc, #36]	; (4b78 <LIDAR_RES_get_health+0x60>)
    4b54:	4b05      	ldr	r3, [pc, #20]	; (4b6c <LIDAR_RES_get_health+0x54>)
    4b56:	4798      	blx	r3
    4b58:	e7f5      	b.n	4b46 <LIDAR_RES_get_health+0x2e>
    4b5a:	bf00      	nop
    4b5c:	200009a4 	.word	0x200009a4
    4b60:	0000c440 	.word	0x0000c440
    4b64:	0000c438 	.word	0x0000c438
    4b68:	0000c464 	.word	0x0000c464
    4b6c:	00007d95 	.word	0x00007d95
    4b70:	0000c430 	.word	0x0000c430
    4b74:	0000c428 	.word	0x0000c428
    4b78:	0000c448 	.word	0x0000c448

00004b7c <LIDAR_RES_get_samplerate>:
  *		Order 8..0		+1		Tstandard[15:8]
  *						+2		Texpress[7:0]
  *						+3		Texpress[15:8]	
  */
void LIDAR_RES_get_samplerate(void)
{
    4b7c:	b538      	push	{r3, r4, r5, lr}
    if (DEBUG) {
	    printf(" : Standard Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8));
    4b7e:	4c07      	ldr	r4, [pc, #28]	; (4b9c <LIDAR_RES_get_samplerate+0x20>)
    4b80:	7823      	ldrb	r3, [r4, #0]
    4b82:	7861      	ldrb	r1, [r4, #1]
	    printf(" : Standard Scan Samplerate: %u\r\n", 
    4b84:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    4b88:	4805      	ldr	r0, [pc, #20]	; (4ba0 <LIDAR_RES_get_samplerate+0x24>)
    4b8a:	4d06      	ldr	r5, [pc, #24]	; (4ba4 <LIDAR_RES_get_samplerate+0x28>)
    4b8c:	47a8      	blx	r5
		printf(" : Express Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[2] + ((unsigned)DATA_RESPONSE[3] << 8));
    4b8e:	78a3      	ldrb	r3, [r4, #2]
    4b90:	78e1      	ldrb	r1, [r4, #3]
		printf(" : Express Scan Samplerate: %u\r\n", 
    4b92:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    4b96:	4804      	ldr	r0, [pc, #16]	; (4ba8 <LIDAR_RES_get_samplerate+0x2c>)
    4b98:	47a8      	blx	r5
    4b9a:	bd38      	pop	{r3, r4, r5, pc}
    4b9c:	200009a4 	.word	0x200009a4
    4ba0:	0000c490 	.word	0x0000c490
    4ba4:	00007d95 	.word	0x00007d95
    4ba8:	0000c4b4 	.word	0x0000c4b4

00004bac <LIDAR_RES_get_lidar_conf>:
  *						+2		payload[1]
  *								...
  *						+(n+4)	payload[n]	
  */
void LIDAR_RES_get_lidar_conf(void)
{
    4bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bb0:	b082      	sub	sp, #8
	int i;
	uint32_t conf_type = (uint8_t)DATA_RESPONSE[0] | ((uint8_t)DATA_RESPONSE[1] << 8) |
    4bb2:	494d      	ldr	r1, [pc, #308]	; (4ce8 <LIDAR_RES_get_lidar_conf+0x13c>)
    4bb4:	780b      	ldrb	r3, [r1, #0]
    4bb6:	7848      	ldrb	r0, [r1, #1]
						 ((uint8_t)DATA_RESPONSE[2] << 16) | ((uint8_t)DATA_RESPONSE[3] << 24);
    4bb8:	788a      	ldrb	r2, [r1, #2]
    4bba:	78c9      	ldrb	r1, [r1, #3]
    4bbc:	0412      	lsls	r2, r2, #16
	uint32_t conf_type = (uint8_t)DATA_RESPONSE[0] | ((uint8_t)DATA_RESPONSE[1] << 8) |
    4bbe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4bc2:	4313      	orrs	r3, r2
						 ((uint8_t)DATA_RESPONSE[2] << 16) | ((uint8_t)DATA_RESPONSE[3] << 24);
    4bc4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	
	switch (conf_type) {
    4bc8:	3b70      	subs	r3, #112	; 0x70
    4bca:	2b0f      	cmp	r3, #15
    4bcc:	d83e      	bhi.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
    4bce:	e8df f003 	tbb	[pc, r3]
    4bd2:	4033      	.short	0x4033
    4bd4:	64523d3d 	.word	0x64523d3d
    4bd8:	3d3d3d3d 	.word	0x3d3d3d3d
    4bdc:	3d7f3d3d 	.word	0x3d7f3d3d
    4be0:	083d      	.short	0x083d
				printf(" : Typical scan mode id of LiDAR is %"PRIu16"\r\n", conf_data.resp1);
			conf_data.resp1 = conf_data.resp1;
			return;
		
		case CONF_SCAN_MODE_NAME:
			for (i=0; i<(resp_desc.response_info & 0x3FFFFFFF); i++)
    4be2:	4b42      	ldr	r3, [pc, #264]	; (4cec <LIDAR_RES_get_lidar_conf+0x140>)
    4be4:	685b      	ldr	r3, [r3, #4]
    4be6:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
    4bea:	d020      	beq.n	4c2e <LIDAR_RES_get_lidar_conf+0x82>
    4bec:	4d40      	ldr	r5, [pc, #256]	; (4cf0 <LIDAR_RES_get_lidar_conf+0x144>)
    4bee:	2400      	movs	r4, #0
				conf_data.resp3[i] = toupper(DATA_RESPONSE[i+4]);
    4bf0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4ce8 <LIDAR_RES_get_lidar_conf+0x13c>
    4bf4:	4f3f      	ldr	r7, [pc, #252]	; (4cf4 <LIDAR_RES_get_lidar_conf+0x148>)
			for (i=0; i<(resp_desc.response_info & 0x3FFFFFFF); i++)
    4bf6:	4e3d      	ldr	r6, [pc, #244]	; (4cec <LIDAR_RES_get_lidar_conf+0x140>)
    4bf8:	1d23      	adds	r3, r4, #4
				conf_data.resp3[i] = toupper(DATA_RESPONSE[i+4]);
    4bfa:	f818 3003 	ldrb.w	r3, [r8, r3]
    4bfe:	b2db      	uxtb	r3, r3
    4c00:	f88d 3007 	strb.w	r3, [sp, #7]
    4c04:	47b8      	blx	r7
    4c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4c0a:	4418      	add	r0, r3
    4c0c:	7843      	ldrb	r3, [r0, #1]
    4c0e:	f003 0303 	and.w	r3, r3, #3
    4c12:	2b02      	cmp	r3, #2
    4c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4c18:	bf0c      	ite	eq
    4c1a:	3b20      	subeq	r3, #32
    4c1c:	b2db      	uxtbne	r3, r3
    4c1e:	f805 3f01 	strb.w	r3, [r5, #1]!
			for (i=0; i<(resp_desc.response_info & 0x3FFFFFFF); i++)
    4c22:	3401      	adds	r4, #1
    4c24:	6873      	ldr	r3, [r6, #4]
    4c26:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    4c2a:	42a3      	cmp	r3, r4
    4c2c:	d8e4      	bhi.n	4bf8 <LIDAR_RES_get_lidar_conf+0x4c>
			if (DEBUG)
				printf(" : Specified scan mode name is %s\r\n", conf_data.resp3);
    4c2e:	4932      	ldr	r1, [pc, #200]	; (4cf8 <LIDAR_RES_get_lidar_conf+0x14c>)
    4c30:	4832      	ldr	r0, [pc, #200]	; (4cfc <LIDAR_RES_get_lidar_conf+0x150>)
    4c32:	4b33      	ldr	r3, [pc, #204]	; (4d00 <LIDAR_RES_get_lidar_conf+0x154>)
    4c34:	4798      	blx	r3
			return;
    4c36:	e009      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) | 
    4c38:	4b2b      	ldr	r3, [pc, #172]	; (4ce8 <LIDAR_RES_get_lidar_conf+0x13c>)
    4c3a:	7919      	ldrb	r1, [r3, #4]
								((uint8_t)DATA_RESPONSE[5] << 8) );
    4c3c:	795b      	ldrb	r3, [r3, #5]
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) | 
    4c3e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    4c42:	4b2d      	ldr	r3, [pc, #180]	; (4cf8 <LIDAR_RES_get_lidar_conf+0x14c>)
    4c44:	8019      	strh	r1, [r3, #0]
				printf(" : %u scan modes supported\r\n", conf_data.resp1);
    4c46:	482f      	ldr	r0, [pc, #188]	; (4d04 <LIDAR_RES_get_lidar_conf+0x158>)
    4c48:	4b2d      	ldr	r3, [pc, #180]	; (4d00 <LIDAR_RES_get_lidar_conf+0x154>)
    4c4a:	4798      	blx	r3
	}
    4c4c:	b002      	add	sp, #8
    4c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conf_data.resp2 = ( ((uint8_t)DATA_RESPONSE[4])       |
    4c52:	4a25      	ldr	r2, [pc, #148]	; (4ce8 <LIDAR_RES_get_lidar_conf+0x13c>)
    4c54:	7911      	ldrb	r1, [r2, #4]
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    4c56:	7950      	ldrb	r0, [r2, #5]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4c58:	7993      	ldrb	r3, [r2, #6]
								((uint8_t)DATA_RESPONSE[7] << 24) );
    4c5a:	79d2      	ldrb	r2, [r2, #7]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4c5c:	041b      	lsls	r3, r3, #16
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    4c5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4c62:	4319      	orrs	r1, r3
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4c64:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
			conf_data.resp2 = conf_data.resp2 / (1 << 8);
    4c68:	0a09      	lsrs	r1, r1, #8
    4c6a:	4b23      	ldr	r3, [pc, #140]	; (4cf8 <LIDAR_RES_get_lidar_conf+0x14c>)
    4c6c:	6019      	str	r1, [r3, #0]
				printf(" : Specified scan mode costs %"PRIu32" us per sample\r\n", conf_data.resp2);
    4c6e:	4826      	ldr	r0, [pc, #152]	; (4d08 <LIDAR_RES_get_lidar_conf+0x15c>)
    4c70:	4b23      	ldr	r3, [pc, #140]	; (4d00 <LIDAR_RES_get_lidar_conf+0x154>)
    4c72:	4798      	blx	r3
    4c74:	e7ea      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
			conf_data.resp2 = ( ((uint8_t)DATA_RESPONSE[4])       |
    4c76:	4a1c      	ldr	r2, [pc, #112]	; (4ce8 <LIDAR_RES_get_lidar_conf+0x13c>)
    4c78:	7911      	ldrb	r1, [r2, #4]
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    4c7a:	7950      	ldrb	r0, [r2, #5]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4c7c:	7993      	ldrb	r3, [r2, #6]
								((uint8_t)DATA_RESPONSE[7] << 24) );
    4c7e:	79d2      	ldrb	r2, [r2, #7]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4c80:	041b      	lsls	r3, r3, #16
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    4c82:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4c86:	4319      	orrs	r1, r3
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4c88:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
			conf_data.resp2 = conf_data.resp2 / (1 << 8);
    4c8c:	0a09      	lsrs	r1, r1, #8
    4c8e:	4b1a      	ldr	r3, [pc, #104]	; (4cf8 <LIDAR_RES_get_lidar_conf+0x14c>)
    4c90:	6019      	str	r1, [r3, #0]
				printf(" : Specified scan mode has a max measuring distance of %"PRIu32" m\r\n", conf_data.resp2);
    4c92:	481e      	ldr	r0, [pc, #120]	; (4d0c <LIDAR_RES_get_lidar_conf+0x160>)
    4c94:	4b1a      	ldr	r3, [pc, #104]	; (4d00 <LIDAR_RES_get_lidar_conf+0x154>)
    4c96:	4798      	blx	r3
    4c98:	e7d8      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
			conf_data.resp0 = (uint8_t)DATA_RESPONSE[4];
    4c9a:	4b13      	ldr	r3, [pc, #76]	; (4ce8 <LIDAR_RES_get_lidar_conf+0x13c>)
    4c9c:	7919      	ldrb	r1, [r3, #4]
    4c9e:	b2c9      	uxtb	r1, r1
    4ca0:	4b15      	ldr	r3, [pc, #84]	; (4cf8 <LIDAR_RES_get_lidar_conf+0x14c>)
    4ca2:	7019      	strb	r1, [r3, #0]
				switch (conf_data.resp0) {
    4ca4:	2982      	cmp	r1, #130	; 0x82
    4ca6:	d00b      	beq.n	4cc0 <LIDAR_RES_get_lidar_conf+0x114>
    4ca8:	2983      	cmp	r1, #131	; 0x83
    4caa:	d00d      	beq.n	4cc8 <LIDAR_RES_get_lidar_conf+0x11c>
    4cac:	2981      	cmp	r1, #129	; 0x81
    4cae:	d003      	beq.n	4cb8 <LIDAR_RES_get_lidar_conf+0x10c>
						printf(" : Specified scan mode returns data in unspecified format (0x%02X)\r\n", conf_data.resp0);
    4cb0:	4817      	ldr	r0, [pc, #92]	; (4d10 <LIDAR_RES_get_lidar_conf+0x164>)
    4cb2:	4b13      	ldr	r3, [pc, #76]	; (4d00 <LIDAR_RES_get_lidar_conf+0x154>)
    4cb4:	4798      	blx	r3
    4cb6:	e7c9      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
						printf(" : Specified scan mode returns data in rplidar_resp_measurement_node_t\r\n");
    4cb8:	4816      	ldr	r0, [pc, #88]	; (4d14 <LIDAR_RES_get_lidar_conf+0x168>)
    4cba:	4b17      	ldr	r3, [pc, #92]	; (4d18 <LIDAR_RES_get_lidar_conf+0x16c>)
    4cbc:	4798      	blx	r3
						break;
    4cbe:	e7c5      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
						printf(" : Specified scan mode returns data in capsuled format\r\n");
    4cc0:	4816      	ldr	r0, [pc, #88]	; (4d1c <LIDAR_RES_get_lidar_conf+0x170>)
    4cc2:	4b15      	ldr	r3, [pc, #84]	; (4d18 <LIDAR_RES_get_lidar_conf+0x16c>)
    4cc4:	4798      	blx	r3
						break;
    4cc6:	e7c1      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
						printf(" : Specified scan mode returns data in ultra capsuled format\r\n");
    4cc8:	4815      	ldr	r0, [pc, #84]	; (4d20 <LIDAR_RES_get_lidar_conf+0x174>)
    4cca:	4b13      	ldr	r3, [pc, #76]	; (4d18 <LIDAR_RES_get_lidar_conf+0x16c>)
    4ccc:	4798      	blx	r3
						break;
    4cce:	e7bd      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) |
    4cd0:	4b05      	ldr	r3, [pc, #20]	; (4ce8 <LIDAR_RES_get_lidar_conf+0x13c>)
    4cd2:	7919      	ldrb	r1, [r3, #4]
								((uint8_t)DATA_RESPONSE[5] << 8) );
    4cd4:	795b      	ldrb	r3, [r3, #5]
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) |
    4cd6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    4cda:	4b07      	ldr	r3, [pc, #28]	; (4cf8 <LIDAR_RES_get_lidar_conf+0x14c>)
    4cdc:	8019      	strh	r1, [r3, #0]
				printf(" : Typical scan mode id of LiDAR is %"PRIu16"\r\n", conf_data.resp1);
    4cde:	4811      	ldr	r0, [pc, #68]	; (4d24 <LIDAR_RES_get_lidar_conf+0x178>)
    4ce0:	4b07      	ldr	r3, [pc, #28]	; (4d00 <LIDAR_RES_get_lidar_conf+0x154>)
    4ce2:	4798      	blx	r3
			return;
    4ce4:	e7b2      	b.n	4c4c <LIDAR_RES_get_lidar_conf+0xa0>
    4ce6:	bf00      	nop
    4ce8:	200009a4 	.word	0x200009a4
    4cec:	20000d24 	.word	0x20000d24
    4cf0:	20000a43 	.word	0x20000a43
    4cf4:	00007bed 	.word	0x00007bed
    4cf8:	20000a44 	.word	0x20000a44
    4cfc:	0000c6a0 	.word	0x0000c6a0
    4d00:	00007d95 	.word	0x00007d95
    4d04:	0000c4d8 	.word	0x0000c4d8
    4d08:	0000c4f8 	.word	0x0000c4f8
    4d0c:	0000c52c 	.word	0x0000c52c
    4d10:	0000c62c 	.word	0x0000c62c
    4d14:	0000c56c 	.word	0x0000c56c
    4d18:	00007e7d 	.word	0x00007e7d
    4d1c:	0000c5b4 	.word	0x0000c5b4
    4d20:	0000c5ec 	.word	0x0000c5ec
    4d24:	0000c674 	.word	0x0000c674

00004d28 <main>:

/** 
  * Application entry point
  */ 
int main(void)
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	start_init();
    4d2c:	4b27      	ldr	r3, [pc, #156]	; (4dcc <main+0xa4>)
    4d2e:	4798      	blx	r3
	delay_init(0);
    4d30:	2000      	movs	r0, #0
    4d32:	4b27      	ldr	r3, [pc, #156]	; (4dd0 <main+0xa8>)
    4d34:	4798      	blx	r3
	
    status = STATUS_IDLE;
    4d36:	2000      	movs	r0, #0
    4d38:	4b26      	ldr	r3, [pc, #152]	; (4dd4 <main+0xac>)
    4d3a:	7018      	strb	r0, [r3, #0]
	SERVO_set_angle(0);
    4d3c:	4b26      	ldr	r3, [pc, #152]	; (4dd8 <main+0xb0>)
    4d3e:	4798      	blx	r3

	if (DEBUG) {
		printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
    4d40:	4826      	ldr	r0, [pc, #152]	; (4ddc <main+0xb4>)
    4d42:	4b27      	ldr	r3, [pc, #156]	; (4de0 <main+0xb8>)
    4d44:	4798      	blx	r3

		while (1) {
			uint32_t user_selection = 0;

			printf("%s", menu_txt);
    4d46:	4f27      	ldr	r7, [pc, #156]	; (4de4 <main+0xbc>)
    4d48:	4e27      	ldr	r6, [pc, #156]	; (4de8 <main+0xc0>)
    4d4a:	4d28      	ldr	r5, [pc, #160]	; (4dec <main+0xc4>)
    4d4c:	e004      	b.n	4d58 <main+0x30>
			
			if (scanf("%"PRIu32"", &user_selection) == 0) {
				/* If its not a number, flush stdin */
				fflush(stdin);
    4d4e:	4b28      	ldr	r3, [pc, #160]	; (4df0 <main+0xc8>)
    4d50:	681b      	ldr	r3, [r3, #0]
    4d52:	6858      	ldr	r0, [r3, #4]
    4d54:	4b27      	ldr	r3, [pc, #156]	; (4df4 <main+0xcc>)
    4d56:	4798      	blx	r3
			uint32_t user_selection = 0;
    4d58:	ac02      	add	r4, sp, #8
    4d5a:	2300      	movs	r3, #0
    4d5c:	f844 3d04 	str.w	r3, [r4, #-4]!
			printf("%s", menu_txt);
    4d60:	4639      	mov	r1, r7
    4d62:	4630      	mov	r0, r6
    4d64:	47a8      	blx	r5
			if (scanf("%"PRIu32"", &user_selection) == 0) {
    4d66:	4621      	mov	r1, r4
    4d68:	4823      	ldr	r0, [pc, #140]	; (4df8 <main+0xd0>)
    4d6a:	4b24      	ldr	r3, [pc, #144]	; (4dfc <main+0xd4>)
    4d6c:	4798      	blx	r3
    4d6e:	2800      	cmp	r0, #0
    4d70:	d0ed      	beq.n	4d4e <main+0x26>
				continue;
			}
			
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    4d72:	9901      	ldr	r1, [sp, #4]
    4d74:	4822      	ldr	r0, [pc, #136]	; (4e00 <main+0xd8>)
    4d76:	47a8      	blx	r5
			
			switch (user_selection) {
    4d78:	9b01      	ldr	r3, [sp, #4]
    4d7a:	3b01      	subs	r3, #1
    4d7c:	2b05      	cmp	r3, #5
    4d7e:	d820      	bhi.n	4dc2 <main+0x9a>
    4d80:	e8df f003 	tbb	[pc, r3]
    4d84:	16131003 	.word	0x16131003
    4d88:	1c19      	.short	0x1c19
  __ASM volatile ("dsb 0xF":::"memory");
    4d8a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4d8e:	491d      	ldr	r1, [pc, #116]	; (4e04 <main+0xdc>)
    4d90:	68ca      	ldr	r2, [r1, #12]
    4d92:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4d96:	4b1c      	ldr	r3, [pc, #112]	; (4e08 <main+0xe0>)
    4d98:	4313      	orrs	r3, r2
    4d9a:	60cb      	str	r3, [r1, #12]
    4d9c:	f3bf 8f4f 	dsb	sy
    __NOP();
    4da0:	bf00      	nop
    4da2:	e7fd      	b.n	4da0 <main+0x78>
				case 1:
					NVIC_SystemReset();
					break;
				
				case 2:
					EEPROM_menu();
    4da4:	4b19      	ldr	r3, [pc, #100]	; (4e0c <main+0xe4>)
    4da6:	4798      	blx	r3
					break;
    4da8:	e7d6      	b.n	4d58 <main+0x30>

				case 3:
					SERVO_menu();
    4daa:	4b19      	ldr	r3, [pc, #100]	; (4e10 <main+0xe8>)
    4dac:	4798      	blx	r3
					break;
    4dae:	e7d3      	b.n	4d58 <main+0x30>
				
				case 4:
					LIDAR_menu();
    4db0:	4b18      	ldr	r3, [pc, #96]	; (4e14 <main+0xec>)
    4db2:	4798      	blx	r3
					break;
    4db4:	e7d0      	b.n	4d58 <main+0x30>
				
				case 5:
					SD_menu();
    4db6:	4b18      	ldr	r3, [pc, #96]	; (4e18 <main+0xf0>)
    4db8:	4798      	blx	r3
					break;
    4dba:	e7cd      	b.n	4d58 <main+0x30>
				
				case 6:
					scan();
    4dbc:	4b17      	ldr	r3, [pc, #92]	; (4e1c <main+0xf4>)
    4dbe:	4798      	blx	r3
					break;
    4dc0:	e7ca      	b.n	4d58 <main+0x30>
				
				default:
					printf("\r\nInvalid option \r\n");
    4dc2:	4817      	ldr	r0, [pc, #92]	; (4e20 <main+0xf8>)
    4dc4:	4b06      	ldr	r3, [pc, #24]	; (4de0 <main+0xb8>)
    4dc6:	4798      	blx	r3
					break;
    4dc8:	e7c6      	b.n	4d58 <main+0x30>
    4dca:	bf00      	nop
    4dcc:	000068e1 	.word	0x000068e1
    4dd0:	00002841 	.word	0x00002841
    4dd4:	20001738 	.word	0x20001738
    4dd8:	00006751 	.word	0x00006751
    4ddc:	0000c6c4 	.word	0x0000c6c4
    4de0:	00007e7d 	.word	0x00007e7d
    4de4:	200003e0 	.word	0x200003e0
    4de8:	0000b6e4 	.word	0x0000b6e4
    4dec:	00007d95 	.word	0x00007d95
    4df0:	200004b0 	.word	0x200004b0
    4df4:	000079ad 	.word	0x000079ad
    4df8:	0000b690 	.word	0x0000b690
    4dfc:	00007ead 	.word	0x00007ead
    4e00:	0000b6e8 	.word	0x0000b6e8
    4e04:	e000ed00 	.word	0xe000ed00
    4e08:	05fa0004 	.word	0x05fa0004
    4e0c:	00000b2d 	.word	0x00000b2d
    4e10:	00006825 	.word	0x00006825
    4e14:	00004269 	.word	0x00004269
    4e18:	00003a91 	.word	0x00003a91
    4e1c:	00005369 	.word	0x00005369
    4e20:	0000c700 	.word	0x0000c700

00004e24 <scan_error>:
/**
  * Print any info based on the type of scan error and keep in infinite loop
  * while blinking light to symbolize error
  */ 
void scan_error(uint16_t error_code)
{
    4e24:	b508      	push	{r3, lr}
    4e26:	4604      	mov	r4, r0
    if (DEBUG)
		printf("\r\n[Scan Error]\r\n");
    4e28:	483d      	ldr	r0, [pc, #244]	; (4f20 <scan_error+0xfc>)
    4e2a:	4b3e      	ldr	r3, [pc, #248]	; (4f24 <scan_error+0x100>)
    4e2c:	4798      	blx	r3

	LIDAR_PWM_stop();
    4e2e:	4b3e      	ldr	r3, [pc, #248]	; (4f28 <scan_error+0x104>)
    4e30:	4798      	blx	r3

	status = STATUS_ERROR;
    4e32:	2202      	movs	r2, #2
    4e34:	4b3d      	ldr	r3, [pc, #244]	; (4f2c <scan_error+0x108>)
    4e36:	701a      	strb	r2, [r3, #0]
	
	if (DEBUG) {
		switch (error_code) {
    4e38:	2c08      	cmp	r4, #8
    4e3a:	d86c      	bhi.n	4f16 <scan_error+0xf2>
    4e3c:	e8df f004 	tbb	[pc, r4]
    4e40:	23170905 	.word	0x23170905
    4e44:	53473b2f 	.word	0x53473b2f
    4e48:	5f          	.byte	0x5f
    4e49:	00          	.byte	0x00
			case SCAN_ERR_TIMEOUT: 
				printf(" | Timeout Error\r\n");
    4e4a:	4839      	ldr	r0, [pc, #228]	; (4f30 <scan_error+0x10c>)
    4e4c:	4b35      	ldr	r3, [pc, #212]	; (4f24 <scan_error+0x100>)
    4e4e:	4798      	blx	r3
    4e50:	e7fe      	b.n	4e50 <scan_error+0x2c>
				break;
			case SCAN_ERR_OUT_OF_BOUNDS:
				printf(" | Out-of-Bounds Error\r\n");
    4e52:	4838      	ldr	r0, [pc, #224]	; (4f34 <scan_error+0x110>)
    4e54:	4b33      	ldr	r3, [pc, #204]	; (4f24 <scan_error+0x100>)
    4e56:	4798      	blx	r3
				printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
						byte_count, (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE);
    4e58:	4b37      	ldr	r3, [pc, #220]	; (4f38 <scan_error+0x114>)
    4e5a:	685a      	ldr	r2, [r3, #4]
    4e5c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
				printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
    4e60:	3207      	adds	r2, #7
    4e62:	4b36      	ldr	r3, [pc, #216]	; (4f3c <scan_error+0x118>)
    4e64:	6819      	ldr	r1, [r3, #0]
    4e66:	4836      	ldr	r0, [pc, #216]	; (4f40 <scan_error+0x11c>)
    4e68:	4b36      	ldr	r3, [pc, #216]	; (4f44 <scan_error+0x120>)
    4e6a:	4798      	blx	r3
				break;
    4e6c:	e7f0      	b.n	4e50 <scan_error+0x2c>
			case SCAN_ERR_DISK_INIT:
				printf(" | Disk Initialization Error\r\n");
    4e6e:	4836      	ldr	r0, [pc, #216]	; (4f48 <scan_error+0x124>)
    4e70:	4b2c      	ldr	r3, [pc, #176]	; (4f24 <scan_error+0x100>)
    4e72:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_dstatus_desc(dstatus));
    4e74:	4b35      	ldr	r3, [pc, #212]	; (4f4c <scan_error+0x128>)
    4e76:	7818      	ldrb	r0, [r3, #0]
    4e78:	4b35      	ldr	r3, [pc, #212]	; (4f50 <scan_error+0x12c>)
    4e7a:	4798      	blx	r3
    4e7c:	4601      	mov	r1, r0
    4e7e:	4835      	ldr	r0, [pc, #212]	; (4f54 <scan_error+0x130>)
    4e80:	4b30      	ldr	r3, [pc, #192]	; (4f44 <scan_error+0x120>)
    4e82:	4798      	blx	r3
				break;
    4e84:	e7e4      	b.n	4e50 <scan_error+0x2c>
			case SCAN_ERR_DISK_MOUNT:
				printf(" | Disk Mount Error\r\n");
    4e86:	4834      	ldr	r0, [pc, #208]	; (4f58 <scan_error+0x134>)
    4e88:	4b26      	ldr	r3, [pc, #152]	; (4f24 <scan_error+0x100>)
    4e8a:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4e8c:	4b2f      	ldr	r3, [pc, #188]	; (4f4c <scan_error+0x128>)
    4e8e:	7858      	ldrb	r0, [r3, #1]
    4e90:	4b32      	ldr	r3, [pc, #200]	; (4f5c <scan_error+0x138>)
    4e92:	4798      	blx	r3
    4e94:	4601      	mov	r1, r0
    4e96:	482f      	ldr	r0, [pc, #188]	; (4f54 <scan_error+0x130>)
    4e98:	4b2a      	ldr	r3, [pc, #168]	; (4f44 <scan_error+0x120>)
    4e9a:	4798      	blx	r3
				break;
    4e9c:	e7d8      	b.n	4e50 <scan_error+0x2c>
			case SCAN_ERR_FILE_CREATE:
				printf(" | File Create Error\r\n");
    4e9e:	4830      	ldr	r0, [pc, #192]	; (4f60 <scan_error+0x13c>)
    4ea0:	4b20      	ldr	r3, [pc, #128]	; (4f24 <scan_error+0x100>)
    4ea2:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4ea4:	4b29      	ldr	r3, [pc, #164]	; (4f4c <scan_error+0x128>)
    4ea6:	7858      	ldrb	r0, [r3, #1]
    4ea8:	4b2c      	ldr	r3, [pc, #176]	; (4f5c <scan_error+0x138>)
    4eaa:	4798      	blx	r3
    4eac:	4601      	mov	r1, r0
    4eae:	4829      	ldr	r0, [pc, #164]	; (4f54 <scan_error+0x130>)
    4eb0:	4b24      	ldr	r3, [pc, #144]	; (4f44 <scan_error+0x120>)
    4eb2:	4798      	blx	r3
				break;
    4eb4:	e7cc      	b.n	4e50 <scan_error+0x2c>
			case SCAN_ERR_FILE_WRITE:
				printf(" | File Write Error\r\n");
    4eb6:	482b      	ldr	r0, [pc, #172]	; (4f64 <scan_error+0x140>)
    4eb8:	4b1a      	ldr	r3, [pc, #104]	; (4f24 <scan_error+0x100>)
    4eba:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4ebc:	4b23      	ldr	r3, [pc, #140]	; (4f4c <scan_error+0x128>)
    4ebe:	7858      	ldrb	r0, [r3, #1]
    4ec0:	4b26      	ldr	r3, [pc, #152]	; (4f5c <scan_error+0x138>)
    4ec2:	4798      	blx	r3
    4ec4:	4601      	mov	r1, r0
    4ec6:	4823      	ldr	r0, [pc, #140]	; (4f54 <scan_error+0x130>)
    4ec8:	4b1e      	ldr	r3, [pc, #120]	; (4f44 <scan_error+0x120>)
    4eca:	4798      	blx	r3
				break;
    4ecc:	e7c0      	b.n	4e50 <scan_error+0x2c>
			case SCAN_ERR_FILE_CLOSE:
				printf(" | File Close Error\r\n");
    4ece:	4826      	ldr	r0, [pc, #152]	; (4f68 <scan_error+0x144>)
    4ed0:	4b14      	ldr	r3, [pc, #80]	; (4f24 <scan_error+0x100>)
    4ed2:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4ed4:	4b1d      	ldr	r3, [pc, #116]	; (4f4c <scan_error+0x128>)
    4ed6:	7858      	ldrb	r0, [r3, #1]
    4ed8:	4b20      	ldr	r3, [pc, #128]	; (4f5c <scan_error+0x138>)
    4eda:	4798      	blx	r3
    4edc:	4601      	mov	r1, r0
    4ede:	481d      	ldr	r0, [pc, #116]	; (4f54 <scan_error+0x130>)
    4ee0:	4b18      	ldr	r3, [pc, #96]	; (4f44 <scan_error+0x120>)
    4ee2:	4798      	blx	r3
				break;
    4ee4:	e7b4      	b.n	4e50 <scan_error+0x2c>
			case SCAN_ERR_NEW_FILENAME:
				printf(" | Error Generating New Filename\r\n");
    4ee6:	4821      	ldr	r0, [pc, #132]	; (4f6c <scan_error+0x148>)
    4ee8:	4b0e      	ldr	r3, [pc, #56]	; (4f24 <scan_error+0x100>)
    4eea:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4eec:	4b17      	ldr	r3, [pc, #92]	; (4f4c <scan_error+0x128>)
    4eee:	7858      	ldrb	r0, [r3, #1]
    4ef0:	4b1a      	ldr	r3, [pc, #104]	; (4f5c <scan_error+0x138>)
    4ef2:	4798      	blx	r3
    4ef4:	4601      	mov	r1, r0
    4ef6:	4817      	ldr	r0, [pc, #92]	; (4f54 <scan_error+0x130>)
    4ef8:	4b12      	ldr	r3, [pc, #72]	; (4f44 <scan_error+0x120>)
    4efa:	4798      	blx	r3
				break;
    4efc:	e7a8      	b.n	4e50 <scan_error+0x2c>
			case SCAN_ERR_FILE_FORMATTING:
				printf(" | Error Formatting Header of File\r\n");
    4efe:	481c      	ldr	r0, [pc, #112]	; (4f70 <scan_error+0x14c>)
    4f00:	4b08      	ldr	r3, [pc, #32]	; (4f24 <scan_error+0x100>)
    4f02:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4f04:	4b11      	ldr	r3, [pc, #68]	; (4f4c <scan_error+0x128>)
    4f06:	7858      	ldrb	r0, [r3, #1]
    4f08:	4b14      	ldr	r3, [pc, #80]	; (4f5c <scan_error+0x138>)
    4f0a:	4798      	blx	r3
    4f0c:	4601      	mov	r1, r0
    4f0e:	4811      	ldr	r0, [pc, #68]	; (4f54 <scan_error+0x130>)
    4f10:	4b0c      	ldr	r3, [pc, #48]	; (4f44 <scan_error+0x120>)
    4f12:	4798      	blx	r3
				break;
    4f14:	e79c      	b.n	4e50 <scan_error+0x2c>
			default:
				printf(" | Error code %u\r\n", error_code);
    4f16:	4621      	mov	r1, r4
    4f18:	4816      	ldr	r0, [pc, #88]	; (4f74 <scan_error+0x150>)
    4f1a:	4b0a      	ldr	r3, [pc, #40]	; (4f44 <scan_error+0x120>)
    4f1c:	4798      	blx	r3
    4f1e:	e797      	b.n	4e50 <scan_error+0x2c>
    4f20:	0000c714 	.word	0x0000c714
    4f24:	00007e7d 	.word	0x00007e7d
    4f28:	00003cf5 	.word	0x00003cf5
    4f2c:	20001738 	.word	0x20001738
    4f30:	0000c724 	.word	0x0000c724
    4f34:	0000c738 	.word	0x0000c738
    4f38:	20000d24 	.word	0x20000d24
    4f3c:	20000a30 	.word	0x20000a30
    4f40:	0000c750 	.word	0x0000c750
    4f44:	00007d95 	.word	0x00007d95
    4f48:	0000c798 	.word	0x0000c798
    4f4c:	20001300 	.word	0x20001300
    4f50:	00000e29 	.word	0x00000e29
    4f54:	0000c7b8 	.word	0x0000c7b8
    4f58:	0000c7c4 	.word	0x0000c7c4
    4f5c:	00000d69 	.word	0x00000d69
    4f60:	0000c7dc 	.word	0x0000c7dc
    4f64:	0000c7f4 	.word	0x0000c7f4
    4f68:	0000c80c 	.word	0x0000c80c
    4f6c:	0000c824 	.word	0x0000c824
    4f70:	0000c848 	.word	0x0000c848
    4f74:	0000c86c 	.word	0x0000c86c

00004f78 <write_print_buffer>:

/** 
  * Write contents of print buffer to SD and reset the print buffer
  */ 
void write_print_buffer(UINT data_length)
{
    4f78:	b570      	push	{r4, r5, r6, lr}
    4f7a:	4605      	mov	r5, r0
    fresult = f_write(&fptr, print_buffer, data_length, &bwritten);
    4f7c:	4c0d      	ldr	r4, [pc, #52]	; (4fb4 <write_print_buffer+0x3c>)
    4f7e:	1d23      	adds	r3, r4, #4
    4f80:	4602      	mov	r2, r0
    4f82:	f104 0108 	add.w	r1, r4, #8
    4f86:	f504 7084 	add.w	r0, r4, #264	; 0x108
    4f8a:	4e0b      	ldr	r6, [pc, #44]	; (4fb8 <write_print_buffer+0x40>)
    4f8c:	47b0      	blx	r6
    4f8e:	7060      	strb	r0, [r4, #1]
    if (!fresult && bwritten != data_length)
    4f90:	b910      	cbnz	r0, 4f98 <write_print_buffer+0x20>
    4f92:	6863      	ldr	r3, [r4, #4]
    4f94:	429d      	cmp	r5, r3
    4f96:	d109      	bne.n	4fac <write_print_buffer+0x34>
    4f98:	4a06      	ldr	r2, [pc, #24]	; (4fb4 <write_print_buffer+0x3c>)
    4f9a:	1dd3      	adds	r3, r2, #7
    4f9c:	f202 1207 	addw	r2, r2, #263	; 0x107
  */
void reset_print_buffer(void)
{
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
    4fa0:	2100      	movs	r1, #0
    4fa2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    4fa6:	4293      	cmp	r3, r2
    4fa8:	d1fb      	bne.n	4fa2 <write_print_buffer+0x2a>
}
    4faa:	bd70      	pop	{r4, r5, r6, pc}
        scan_error(SCAN_ERR_FILE_WRITE);
    4fac:	2005      	movs	r0, #5
    4fae:	4b03      	ldr	r3, [pc, #12]	; (4fbc <write_print_buffer+0x44>)
    4fb0:	4798      	blx	r3
    4fb2:	bf00      	nop
    4fb4:	20001300 	.word	0x20001300
    4fb8:	000021b9 	.word	0x000021b9
    4fbc:	00004e25 	.word	0x00004e25

00004fc0 <format_header_file_data>:
{
    4fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fc4:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    char read_characters[512] = {0};
    4fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
    4fcc:	2100      	movs	r1, #0
    4fce:	a806      	add	r0, sp, #24
    4fd0:	4b78      	ldr	r3, [pc, #480]	; (51b4 <format_header_file_data+0x1f4>)
    4fd2:	4798      	blx	r3
	UINT i, j, bytes_read = 0, longest_length = 0, line_length = 0, tmp_longest_line = 0;
    4fd4:	2100      	movs	r1, #0
    4fd6:	9105      	str	r1, [sp, #20]
	fresult = f_rewind(&fptr);
    4fd8:	4c77      	ldr	r4, [pc, #476]	; (51b8 <format_header_file_data+0x1f8>)
    4fda:	f504 7084 	add.w	r0, r4, #264	; 0x108
    4fde:	4b77      	ldr	r3, [pc, #476]	; (51bc <format_header_file_data+0x1fc>)
    4fe0:	4798      	blx	r3
    4fe2:	7060      	strb	r0, [r4, #1]
	if (fresult)
    4fe4:	bb18      	cbnz	r0, 502e <format_header_file_data+0x6e>
	fresult = f_read(&fptr, &read_characters, 512, &bytes_read);
    4fe6:	4c74      	ldr	r4, [pc, #464]	; (51b8 <format_header_file_data+0x1f8>)
    4fe8:	ab05      	add	r3, sp, #20
    4fea:	f44f 7200 	mov.w	r2, #512	; 0x200
    4fee:	a906      	add	r1, sp, #24
    4ff0:	f504 7084 	add.w	r0, r4, #264	; 0x108
    4ff4:	4d72      	ldr	r5, [pc, #456]	; (51c0 <format_header_file_data+0x200>)
    4ff6:	47a8      	blx	r5
    4ff8:	7060      	strb	r0, [r4, #1]
	if (fresult) 
    4ffa:	b9d8      	cbnz	r0, 5034 <format_header_file_data+0x74>
		printf("\r\nPre-formatted header:\r\n\r\n%s\r\n", read_characters);
    4ffc:	a906      	add	r1, sp, #24
    4ffe:	4871      	ldr	r0, [pc, #452]	; (51c4 <format_header_file_data+0x204>)
    5000:	4b71      	ldr	r3, [pc, #452]	; (51c8 <format_header_file_data+0x208>)
    5002:	4798      	blx	r3
	fresult = f_rewind(&fptr);
    5004:	4c6c      	ldr	r4, [pc, #432]	; (51b8 <format_header_file_data+0x1f8>)
    5006:	2100      	movs	r1, #0
    5008:	f504 7084 	add.w	r0, r4, #264	; 0x108
    500c:	4b6b      	ldr	r3, [pc, #428]	; (51bc <format_header_file_data+0x1fc>)
    500e:	4798      	blx	r3
    5010:	7060      	strb	r0, [r4, #1]
	if (fresult)
    5012:	b990      	cbnz	r0, 503a <format_header_file_data+0x7a>
	for (i = 0; i < bytes_read; i++) {
    5014:	9c05      	ldr	r4, [sp, #20]
    5016:	2c00      	cmp	r4, #0
    5018:	f000 80af 	beq.w	517a <format_header_file_data+0x1ba>
    501c:	f10d 0317 	add.w	r3, sp, #23
    5020:	aa86      	add	r2, sp, #536	; 0x218
    5022:	1910      	adds	r0, r2, r4
    5024:	f2a0 2001 	subw	r0, r0, #513	; 0x201
    5028:	2200      	movs	r2, #0
    502a:	9202      	str	r2, [sp, #8]
    502c:	e00f      	b.n	504e <format_header_file_data+0x8e>
		scan_error(SCAN_ERR_FILE_FORMATTING);
    502e:	2008      	movs	r0, #8
    5030:	4b66      	ldr	r3, [pc, #408]	; (51cc <format_header_file_data+0x20c>)
    5032:	4798      	blx	r3
		scan_error(SCAN_ERR_FILE_FORMATTING);
    5034:	2008      	movs	r0, #8
    5036:	4b65      	ldr	r3, [pc, #404]	; (51cc <format_header_file_data+0x20c>)
    5038:	4798      	blx	r3
		scan_error(fresult);
    503a:	4b64      	ldr	r3, [pc, #400]	; (51cc <format_header_file_data+0x20c>)
    503c:	4798      	blx	r3
    503e:	9902      	ldr	r1, [sp, #8]
    5040:	4291      	cmp	r1, r2
    5042:	bf38      	it	cc
    5044:	4611      	movcc	r1, r2
    5046:	9102      	str	r1, [sp, #8]
			tmp_longest_line = 0;
    5048:	2200      	movs	r2, #0
	for (i = 0; i < bytes_read; i++) {
    504a:	4283      	cmp	r3, r0
    504c:	d005      	beq.n	505a <format_header_file_data+0x9a>
		if (read_characters[i] == '\n') {
    504e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5052:	290a      	cmp	r1, #10
    5054:	d0f3      	beq.n	503e <format_header_file_data+0x7e>
		tmp_longest_line++;
    5056:	3201      	adds	r2, #1
    5058:	e7f7      	b.n	504a <format_header_file_data+0x8a>
		printf("bytes read = %u\r\n", bytes_read);
    505a:	4621      	mov	r1, r4
    505c:	485c      	ldr	r0, [pc, #368]	; (51d0 <format_header_file_data+0x210>)
    505e:	4c5a      	ldr	r4, [pc, #360]	; (51c8 <format_header_file_data+0x208>)
    5060:	47a0      	blx	r4
		printf("longest length = %u\r\n", longest_length);
    5062:	9d02      	ldr	r5, [sp, #8]
    5064:	4629      	mov	r1, r5
    5066:	485b      	ldr	r0, [pc, #364]	; (51d4 <format_header_file_data+0x214>)
    5068:	47a0      	blx	r4
		printf("\r\nFormatted header:\r\n\r\n");
    506a:	485b      	ldr	r0, [pc, #364]	; (51d8 <format_header_file_data+0x218>)
    506c:	4b5b      	ldr	r3, [pc, #364]	; (51dc <format_header_file_data+0x21c>)
    506e:	4798      	blx	r3
	for (i = 0; i < longest_length + 2; i++)
    5070:	1cab      	adds	r3, r5, #2
    5072:	9303      	str	r3, [sp, #12]
    5074:	f000 808f 	beq.w	5196 <format_header_file_data+0x1d6>
    5078:	2400      	movs	r4, #0
		strncat(print_buffer, "#", 1);
    507a:	4d59      	ldr	r5, [pc, #356]	; (51e0 <format_header_file_data+0x220>)
    507c:	4f59      	ldr	r7, [pc, #356]	; (51e4 <format_header_file_data+0x224>)
    507e:	4b5a      	ldr	r3, [pc, #360]	; (51e8 <format_header_file_data+0x228>)
    5080:	881e      	ldrh	r6, [r3, #0]
    5082:	4628      	mov	r0, r5
    5084:	47b8      	blx	r7
    5086:	522e      	strh	r6, [r5, r0]
	for (i = 0; i < longest_length + 2; i++)
    5088:	3401      	adds	r4, #1
    508a:	9b03      	ldr	r3, [sp, #12]
    508c:	429c      	cmp	r4, r3
    508e:	d3f8      	bcc.n	5082 <format_header_file_data+0xc2>
	strncat(print_buffer, "\r\n", 2);
    5090:	4c53      	ldr	r4, [pc, #332]	; (51e0 <format_header_file_data+0x220>)
    5092:	4620      	mov	r0, r4
    5094:	4b53      	ldr	r3, [pc, #332]	; (51e4 <format_header_file_data+0x224>)
    5096:	4798      	blx	r3
    5098:	1822      	adds	r2, r4, r0
    509a:	4b54      	ldr	r3, [pc, #336]	; (51ec <format_header_file_data+0x22c>)
    509c:	8819      	ldrh	r1, [r3, #0]
    509e:	789b      	ldrb	r3, [r3, #2]
    50a0:	5221      	strh	r1, [r4, r0]
    50a2:	7093      	strb	r3, [r2, #2]
	while (i != bytes_read) {
    50a4:	9b05      	ldr	r3, [sp, #20]
    50a6:	2b00      	cmp	r3, #0
    50a8:	d043      	beq.n	5132 <format_header_file_data+0x172>
    50aa:	f10d 0617 	add.w	r6, sp, #23
	for (i = 0; i < longest_length + 2; i++)
    50ae:	f04f 0b00 	mov.w	fp, #0
    50b2:	46da      	mov	sl, fp
			strncat(print_buffer, "#", 1);
    50b4:	4d4a      	ldr	r5, [pc, #296]	; (51e0 <format_header_file_data+0x220>)
    50b6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 51e4 <format_header_file_data+0x224>
    50ba:	e023      	b.n	5104 <format_header_file_data+0x144>
			for (j = 0; j < (longest_length - line_length - 1); j++) 
    50bc:	9b02      	ldr	r3, [sp, #8]
    50be:	eba3 070b 	sub.w	r7, r3, fp
    50c2:	3f01      	subs	r7, #1
    50c4:	d00a      	beq.n	50dc <format_header_file_data+0x11c>
    50c6:	2400      	movs	r4, #0
				strncat(print_buffer, " " , 1);
    50c8:	4b49      	ldr	r3, [pc, #292]	; (51f0 <format_header_file_data+0x230>)
    50ca:	f8b3 9000 	ldrh.w	r9, [r3]
    50ce:	4628      	mov	r0, r5
    50d0:	47c0      	blx	r8
    50d2:	f825 9000 	strh.w	r9, [r5, r0]
			for (j = 0; j < (longest_length - line_length - 1); j++) 
    50d6:	3401      	adds	r4, #1
    50d8:	42bc      	cmp	r4, r7
    50da:	d1f8      	bne.n	50ce <format_header_file_data+0x10e>
			strncat(print_buffer, "##", 2);
    50dc:	4628      	mov	r0, r5
    50de:	47c0      	blx	r8
    50e0:	182a      	adds	r2, r5, r0
    50e2:	4b44      	ldr	r3, [pc, #272]	; (51f4 <format_header_file_data+0x234>)
    50e4:	8819      	ldrh	r1, [r3, #0]
    50e6:	789b      	ldrb	r3, [r3, #2]
    50e8:	5229      	strh	r1, [r5, r0]
    50ea:	7093      	strb	r3, [r2, #2]
		strncat(print_buffer, &read_characters[i++], 1);
    50ec:	f10a 0a01 	add.w	sl, sl, #1
    50f0:	2201      	movs	r2, #1
    50f2:	9901      	ldr	r1, [sp, #4]
    50f4:	4628      	mov	r0, r5
    50f6:	4b40      	ldr	r3, [pc, #256]	; (51f8 <format_header_file_data+0x238>)
    50f8:	4798      	blx	r3
		line_length++;
    50fa:	f10b 0b01 	add.w	fp, fp, #1
	while (i != bytes_read) {
    50fe:	9b05      	ldr	r3, [sp, #20]
    5100:	4553      	cmp	r3, sl
    5102:	d016      	beq.n	5132 <format_header_file_data+0x172>
    5104:	3601      	adds	r6, #1
    5106:	9601      	str	r6, [sp, #4]
		if (read_characters[i] == '\r') {
    5108:	7833      	ldrb	r3, [r6, #0]
    510a:	2b0d      	cmp	r3, #13
    510c:	d0d6      	beq.n	50bc <format_header_file_data+0xfc>
		else if (read_characters[i] == '#') {
    510e:	2b23      	cmp	r3, #35	; 0x23
    5110:	d1ec      	bne.n	50ec <format_header_file_data+0x12c>
			strncat(print_buffer, "#", 1);
    5112:	4628      	mov	r0, r5
    5114:	47c0      	blx	r8
    5116:	4b34      	ldr	r3, [pc, #208]	; (51e8 <format_header_file_data+0x228>)
    5118:	881b      	ldrh	r3, [r3, #0]
    511a:	522b      	strh	r3, [r5, r0]
			if (DEBUG) printf("%s", print_buffer);
    511c:	4629      	mov	r1, r5
    511e:	4837      	ldr	r0, [pc, #220]	; (51fc <format_header_file_data+0x23c>)
    5120:	4b29      	ldr	r3, [pc, #164]	; (51c8 <format_header_file_data+0x208>)
    5122:	4798      	blx	r3
			write_print_buffer((UINT)strlen(print_buffer));
    5124:	4628      	mov	r0, r5
    5126:	47c0      	blx	r8
    5128:	4b35      	ldr	r3, [pc, #212]	; (5200 <format_header_file_data+0x240>)
    512a:	4798      	blx	r3
			line_length = 0;
    512c:	f04f 0b00 	mov.w	fp, #0
    5130:	e7dc      	b.n	50ec <format_header_file_data+0x12c>
	for (i = 0; i < longest_length + 2; i++)
    5132:	9b03      	ldr	r3, [sp, #12]
    5134:	b15b      	cbz	r3, 514e <format_header_file_data+0x18e>
    5136:	2400      	movs	r4, #0
		strncat(print_buffer, "#", 1);
    5138:	4d29      	ldr	r5, [pc, #164]	; (51e0 <format_header_file_data+0x220>)
    513a:	4f2a      	ldr	r7, [pc, #168]	; (51e4 <format_header_file_data+0x224>)
    513c:	4b2a      	ldr	r3, [pc, #168]	; (51e8 <format_header_file_data+0x228>)
    513e:	881e      	ldrh	r6, [r3, #0]
    5140:	4628      	mov	r0, r5
    5142:	47b8      	blx	r7
    5144:	522e      	strh	r6, [r5, r0]
	for (i = 0; i < longest_length + 2; i++)
    5146:	3401      	adds	r4, #1
    5148:	9b03      	ldr	r3, [sp, #12]
    514a:	429c      	cmp	r4, r3
    514c:	d1f8      	bne.n	5140 <format_header_file_data+0x180>
	strncat(print_buffer, "\r\n", 2);
    514e:	4c24      	ldr	r4, [pc, #144]	; (51e0 <format_header_file_data+0x220>)
    5150:	4620      	mov	r0, r4
    5152:	4d24      	ldr	r5, [pc, #144]	; (51e4 <format_header_file_data+0x224>)
    5154:	47a8      	blx	r5
    5156:	1822      	adds	r2, r4, r0
    5158:	4b24      	ldr	r3, [pc, #144]	; (51ec <format_header_file_data+0x22c>)
    515a:	8819      	ldrh	r1, [r3, #0]
    515c:	789b      	ldrb	r3, [r3, #2]
    515e:	5221      	strh	r1, [r4, r0]
    5160:	7093      	strb	r3, [r2, #2]
	if (DEBUG) printf("%s", print_buffer);
    5162:	4621      	mov	r1, r4
    5164:	4825      	ldr	r0, [pc, #148]	; (51fc <format_header_file_data+0x23c>)
    5166:	4b18      	ldr	r3, [pc, #96]	; (51c8 <format_header_file_data+0x208>)
    5168:	4798      	blx	r3
	write_print_buffer((UINT)strlen(print_buffer));
    516a:	4620      	mov	r0, r4
    516c:	47a8      	blx	r5
    516e:	4b24      	ldr	r3, [pc, #144]	; (5200 <format_header_file_data+0x240>)
    5170:	4798      	blx	r3
}
    5172:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
    5176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("bytes read = %u\r\n", bytes_read);
    517a:	2100      	movs	r1, #0
    517c:	4814      	ldr	r0, [pc, #80]	; (51d0 <format_header_file_data+0x210>)
    517e:	4d12      	ldr	r5, [pc, #72]	; (51c8 <format_header_file_data+0x208>)
    5180:	47a8      	blx	r5
		printf("longest length = %u\r\n", longest_length);
    5182:	2100      	movs	r1, #0
    5184:	4813      	ldr	r0, [pc, #76]	; (51d4 <format_header_file_data+0x214>)
    5186:	47a8      	blx	r5
		printf("\r\nFormatted header:\r\n\r\n");
    5188:	4813      	ldr	r0, [pc, #76]	; (51d8 <format_header_file_data+0x218>)
    518a:	4b14      	ldr	r3, [pc, #80]	; (51dc <format_header_file_data+0x21c>)
    518c:	4798      	blx	r3
    518e:	9402      	str	r4, [sp, #8]
	for (i = 0; i < longest_length + 2; i++)
    5190:	2302      	movs	r3, #2
    5192:	9303      	str	r3, [sp, #12]
    5194:	e770      	b.n	5078 <format_header_file_data+0xb8>
	strncat(print_buffer, "\r\n", 2);
    5196:	4c12      	ldr	r4, [pc, #72]	; (51e0 <format_header_file_data+0x220>)
    5198:	4620      	mov	r0, r4
    519a:	4b12      	ldr	r3, [pc, #72]	; (51e4 <format_header_file_data+0x224>)
    519c:	4798      	blx	r3
    519e:	1822      	adds	r2, r4, r0
    51a0:	4b12      	ldr	r3, [pc, #72]	; (51ec <format_header_file_data+0x22c>)
    51a2:	8819      	ldrh	r1, [r3, #0]
    51a4:	789b      	ldrb	r3, [r3, #2]
    51a6:	5221      	strh	r1, [r4, r0]
    51a8:	7093      	strb	r3, [r2, #2]
	while (i != bytes_read) {
    51aa:	9b05      	ldr	r3, [sp, #20]
    51ac:	2b00      	cmp	r3, #0
    51ae:	f47f af7c 	bne.w	50aa <format_header_file_data+0xea>
    51b2:	e7cc      	b.n	514e <format_header_file_data+0x18e>
    51b4:	00007c2d 	.word	0x00007c2d
    51b8:	20001300 	.word	0x20001300
    51bc:	00002455 	.word	0x00002455
    51c0:	0000204d 	.word	0x0000204d
    51c4:	0000c880 	.word	0x0000c880
    51c8:	00007d95 	.word	0x00007d95
    51cc:	00004e25 	.word	0x00004e25
    51d0:	0000c8a0 	.word	0x0000c8a0
    51d4:	0000c8b4 	.word	0x0000c8b4
    51d8:	0000c8cc 	.word	0x0000c8cc
    51dc:	00007e7d 	.word	0x00007e7d
    51e0:	20001308 	.word	0x20001308
    51e4:	000081c1 	.word	0x000081c1
    51e8:	0000c8e4 	.word	0x0000c8e4
    51ec:	0000bf18 	.word	0x0000bf18
    51f0:	0000cafc 	.word	0x0000cafc
    51f4:	0000c8e8 	.word	0x0000c8e8
    51f8:	000081d1 	.word	0x000081d1
    51fc:	0000b6e4 	.word	0x0000b6e4
    5200:	00004f79 	.word	0x00004f79

00005204 <process>:
 {
    5204:	b510      	push	{r4, lr}
     status = STATUS_PROCESSING;
    5206:	2201      	movs	r2, #1
    5208:	4b4d      	ldr	r3, [pc, #308]	; (5340 <process+0x13c>)
    520a:	701a      	strb	r2, [r3, #0]
     if (!usart_sync_is_rx_not_empty(&LIDAR_USART))
    520c:	484d      	ldr	r0, [pc, #308]	; (5344 <process+0x140>)
    520e:	4b4e      	ldr	r3, [pc, #312]	; (5348 <process+0x144>)
    5210:	4798      	blx	r3
    5212:	2800      	cmp	r0, #0
    5214:	f000 8090 	beq.w	5338 <process+0x134>
	switch (byte_count) {
    5218:	4b4c      	ldr	r3, [pc, #304]	; (534c <process+0x148>)
    521a:	681c      	ldr	r4, [r3, #0]
    521c:	2c06      	cmp	r4, #6
    521e:	d85c      	bhi.n	52da <process+0xd6>
    5220:	e8df f004 	tbb	[pc, r4]
    5224:	2a201204 	.word	0x2a201204
    5228:	4437      	.short	0x4437
    522a:	51          	.byte	0x51
    522b:	00          	.byte	0x00
			resp_desc.start1 = LIDAR_USART_read_byte();
    522c:	4b48      	ldr	r3, [pc, #288]	; (5350 <process+0x14c>)
    522e:	4798      	blx	r3
    5230:	4b48      	ldr	r3, [pc, #288]	; (5354 <process+0x150>)
    5232:	7018      	strb	r0, [r3, #0]
			if (resp_desc.start1 == 0xA5)
    5234:	28a5      	cmp	r0, #165	; 0xa5
    5236:	d001      	beq.n	523c <process+0x38>
			return PROCESSING;
    5238:	2000      	movs	r0, #0
    523a:	bd10      	pop	{r4, pc}
				byte_count++;
    523c:	4a43      	ldr	r2, [pc, #268]	; (534c <process+0x148>)
    523e:	6813      	ldr	r3, [r2, #0]
    5240:	3301      	adds	r3, #1
    5242:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    5244:	2000      	movs	r0, #0
    5246:	bd10      	pop	{r4, pc}
			resp_desc.start2 = LIDAR_USART_read_byte();
    5248:	4b41      	ldr	r3, [pc, #260]	; (5350 <process+0x14c>)
    524a:	4798      	blx	r3
    524c:	4b41      	ldr	r3, [pc, #260]	; (5354 <process+0x150>)
    524e:	7058      	strb	r0, [r3, #1]
			if (resp_desc.start2 != 0x5A)
    5250:	285a      	cmp	r0, #90	; 0x5a
				byte_count--;
    5252:	4a3e      	ldr	r2, [pc, #248]	; (534c <process+0x148>)
    5254:	6813      	ldr	r3, [r2, #0]
    5256:	bf14      	ite	ne
    5258:	f103 33ff 	addne.w	r3, r3, #4294967295
				byte_count++;
    525c:	3301      	addeq	r3, #1
    525e:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    5260:	2000      	movs	r0, #0
    5262:	bd10      	pop	{r4, pc}
			resp_desc.response_info = LIDAR_USART_read_byte();
    5264:	4b3a      	ldr	r3, [pc, #232]	; (5350 <process+0x14c>)
    5266:	4798      	blx	r3
    5268:	4b3a      	ldr	r3, [pc, #232]	; (5354 <process+0x150>)
    526a:	6058      	str	r0, [r3, #4]
			byte_count++;
    526c:	4a37      	ldr	r2, [pc, #220]	; (534c <process+0x148>)
    526e:	6813      	ldr	r3, [r2, #0]
    5270:	3301      	adds	r3, #1
    5272:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    5274:	2000      	movs	r0, #0
    5276:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    5278:	4b35      	ldr	r3, [pc, #212]	; (5350 <process+0x14c>)
    527a:	4798      	blx	r3
    527c:	4a35      	ldr	r2, [pc, #212]	; (5354 <process+0x150>)
    527e:	6853      	ldr	r3, [r2, #4]
    5280:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    5284:	6050      	str	r0, [r2, #4]
			byte_count++;
    5286:	4a31      	ldr	r2, [pc, #196]	; (534c <process+0x148>)
    5288:	6813      	ldr	r3, [r2, #0]
    528a:	3301      	adds	r3, #1
    528c:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    528e:	2000      	movs	r0, #0
    5290:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    5292:	4b2f      	ldr	r3, [pc, #188]	; (5350 <process+0x14c>)
    5294:	4798      	blx	r3
    5296:	4a2f      	ldr	r2, [pc, #188]	; (5354 <process+0x150>)
    5298:	6853      	ldr	r3, [r2, #4]
    529a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    529e:	6050      	str	r0, [r2, #4]
			byte_count++;
    52a0:	4a2a      	ldr	r2, [pc, #168]	; (534c <process+0x148>)
    52a2:	6813      	ldr	r3, [r2, #0]
    52a4:	3301      	adds	r3, #1
    52a6:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    52a8:	2000      	movs	r0, #0
    52aa:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    52ac:	4b28      	ldr	r3, [pc, #160]	; (5350 <process+0x14c>)
    52ae:	4798      	blx	r3
    52b0:	4a28      	ldr	r2, [pc, #160]	; (5354 <process+0x150>)
    52b2:	6853      	ldr	r3, [r2, #4]
    52b4:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    52b8:	6050      	str	r0, [r2, #4]
			byte_count++;
    52ba:	4a24      	ldr	r2, [pc, #144]	; (534c <process+0x148>)
    52bc:	6813      	ldr	r3, [r2, #0]
    52be:	3301      	adds	r3, #1
    52c0:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    52c2:	2000      	movs	r0, #0
    52c4:	bd10      	pop	{r4, pc}
			resp_desc.data_type = LIDAR_USART_read_byte();
    52c6:	4b22      	ldr	r3, [pc, #136]	; (5350 <process+0x14c>)
    52c8:	4798      	blx	r3
    52ca:	4b22      	ldr	r3, [pc, #136]	; (5354 <process+0x150>)
    52cc:	7218      	strb	r0, [r3, #8]
			byte_count++;
    52ce:	4a1f      	ldr	r2, [pc, #124]	; (534c <process+0x148>)
    52d0:	6813      	ldr	r3, [r2, #0]
    52d2:	3301      	adds	r3, #1
    52d4:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    52d6:	2000      	movs	r0, #0
    52d8:	bd10      	pop	{r4, pc}
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    52da:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    52dc:	4b1c      	ldr	r3, [pc, #112]	; (5350 <process+0x14c>)
    52de:	4798      	blx	r3
    52e0:	4b1d      	ldr	r3, [pc, #116]	; (5358 <process+0x154>)
    52e2:	5518      	strb	r0, [r3, r4]
			if (lidar_request == LIDAR_EXPRESS_SCAN) {
    52e4:	4b1d      	ldr	r3, [pc, #116]	; (535c <process+0x158>)
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	2b82      	cmp	r3, #130	; 0x82
    52ea:	d00d      	beq.n	5308 <process+0x104>
			byte_count++;
    52ec:	4b17      	ldr	r3, [pc, #92]	; (534c <process+0x148>)
    52ee:	681a      	ldr	r2, [r3, #0]
    52f0:	3201      	adds	r2, #1
    52f2:	601a      	str	r2, [r3, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    52f4:	4b17      	ldr	r3, [pc, #92]	; (5354 <process+0x150>)
    52f6:	685b      	ldr	r3, [r3, #4]
    52f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    52fc:	3307      	adds	r3, #7
    52fe:	429a      	cmp	r2, r3
    5300:	d01c      	beq.n	533c <process+0x138>
	} else if (byte_count > (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    5302:	d816      	bhi.n	5332 <process+0x12e>
	return PROCESSING;
    5304:	2000      	movs	r0, #0
}
    5306:	bd10      	pop	{r4, pc}
				if (data_idx == 0) {
    5308:	b934      	cbnz	r4, 5318 <process+0x114>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    530a:	4b13      	ldr	r3, [pc, #76]	; (5358 <process+0x154>)
    530c:	781b      	ldrb	r3, [r3, #0]
    530e:	091b      	lsrs	r3, r3, #4
    5310:	2b0a      	cmp	r3, #10
    5312:	d0eb      	beq.n	52ec <process+0xe8>
						return PROCESSING;
    5314:	2000      	movs	r0, #0
    5316:	bd10      	pop	{r4, pc}
				else if (data_idx == 1) {
    5318:	2c01      	cmp	r4, #1
    531a:	d1e7      	bne.n	52ec <process+0xe8>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    531c:	4b0e      	ldr	r3, [pc, #56]	; (5358 <process+0x154>)
    531e:	785b      	ldrb	r3, [r3, #1]
    5320:	091b      	lsrs	r3, r3, #4
    5322:	2b05      	cmp	r3, #5
    5324:	d0e2      	beq.n	52ec <process+0xe8>
						byte_count--;
    5326:	4a09      	ldr	r2, [pc, #36]	; (534c <process+0x148>)
    5328:	6813      	ldr	r3, [r2, #0]
    532a:	3b01      	subs	r3, #1
    532c:	6013      	str	r3, [r2, #0]
						return PROCESSING;
    532e:	2000      	movs	r0, #0
    5330:	bd10      	pop	{r4, pc}
		scan_error(1);
    5332:	2001      	movs	r0, #1
    5334:	4b0a      	ldr	r3, [pc, #40]	; (5360 <process+0x15c>)
    5336:	4798      	blx	r3
		return PROCESSING;
    5338:	2000      	movs	r0, #0
    533a:	bd10      	pop	{r4, pc}
		return COMPLETED;
    533c:	2001      	movs	r0, #1
    533e:	bd10      	pop	{r4, pc}
    5340:	20001738 	.word	0x20001738
    5344:	2000172c 	.word	0x2000172c
    5348:	00002cdd 	.word	0x00002cdd
    534c:	20000a30 	.word	0x20000a30
    5350:	00003e19 	.word	0x00003e19
    5354:	20000d24 	.word	0x20000d24
    5358:	200009a4 	.word	0x200009a4
    535c:	20000a34 	.word	0x20000a34
    5360:	00004e25 	.word	0x00004e25
    5364:	00000000 	.word	0x00000000

00005368 <scan>:
 {
    5368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    536c:	b095      	sub	sp, #84	; 0x54
	dstatus = disk_initialize(0);
    536e:	2000      	movs	r0, #0
    5370:	4b94      	ldr	r3, [pc, #592]	; (55c4 <scan+0x25c>)
    5372:	4798      	blx	r3
    5374:	4b94      	ldr	r3, [pc, #592]	; (55c8 <scan+0x260>)
    5376:	7018      	strb	r0, [r3, #0]
	if (dstatus)
    5378:	bb78      	cbnz	r0, 53da <scan+0x72>
	fresult = f_mount(&fatfs, path, 0);
    537a:	4c93      	ldr	r4, [pc, #588]	; (55c8 <scan+0x260>)
    537c:	2200      	movs	r2, #0
    537e:	4993      	ldr	r1, [pc, #588]	; (55cc <scan+0x264>)
    5380:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    5384:	4b92      	ldr	r3, [pc, #584]	; (55d0 <scan+0x268>)
    5386:	4798      	blx	r3
    5388:	7060      	strb	r0, [r4, #1]
	if (fresult)
    538a:	bb48      	cbnz	r0, 53e0 <scan+0x78>
	fresult = f_opendir(&fdir, path);
    538c:	498f      	ldr	r1, [pc, #572]	; (55cc <scan+0x264>)
    538e:	a80c      	add	r0, sp, #48	; 0x30
    5390:	4b90      	ldr	r3, [pc, #576]	; (55d4 <scan+0x26c>)
    5392:	4798      	blx	r3
    5394:	4b8c      	ldr	r3, [pc, #560]	; (55c8 <scan+0x260>)
    5396:	7058      	strb	r0, [r3, #1]
	if (fresult)
    5398:	bb28      	cbnz	r0, 53e6 <scan+0x7e>
    539a:	2500      	movs	r5, #0
		fresult = f_readdir(&fdir, &finfo);
    539c:	4c8a      	ldr	r4, [pc, #552]	; (55c8 <scan+0x260>)
    539e:	f504 7758 	add.w	r7, r4, #864	; 0x360
    53a2:	4e8d      	ldr	r6, [pc, #564]	; (55d8 <scan+0x270>)
    53a4:	4639      	mov	r1, r7
    53a6:	a80c      	add	r0, sp, #48	; 0x30
    53a8:	47b0      	blx	r6
    53aa:	7060      	strb	r0, [r4, #1]
		if (fresult || !finfo.fname[0])
    53ac:	b9f0      	cbnz	r0, 53ec <scan+0x84>
    53ae:	f894 3369 	ldrb.w	r3, [r4, #873]	; 0x369
    53b2:	b1db      	cbz	r3, 53ec <scan+0x84>
			lfilenum[i] = finfo.fname[i+4];
    53b4:	f894 336d 	ldrb.w	r3, [r4, #877]	; 0x36d
    53b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    53bc:	f894 336e 	ldrb.w	r3, [r4, #878]	; 0x36e
    53c0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    53c4:	f894 336f 	ldrb.w	r3, [r4, #879]	; 0x36f
    53c8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		filenum = atoi((char*)&lfilenum);
    53cc:	a80b      	add	r0, sp, #44	; 0x2c
    53ce:	4b83      	ldr	r3, [pc, #524]	; (55dc <scan+0x274>)
    53d0:	4798      	blx	r3
    53d2:	4285      	cmp	r5, r0
    53d4:	bfb8      	it	lt
    53d6:	4605      	movlt	r5, r0
    53d8:	e7e4      	b.n	53a4 <scan+0x3c>
		scan_error(SCAN_ERR_DISK_INIT);
    53da:	2002      	movs	r0, #2
    53dc:	4b80      	ldr	r3, [pc, #512]	; (55e0 <scan+0x278>)
    53de:	4798      	blx	r3
		scan_error(SCAN_ERR_DISK_MOUNT);
    53e0:	2003      	movs	r0, #3
    53e2:	4b7f      	ldr	r3, [pc, #508]	; (55e0 <scan+0x278>)
    53e4:	4798      	blx	r3
		scan_error(SCAN_ERR_NEW_FILENAME);
    53e6:	2007      	movs	r0, #7
    53e8:	4b7d      	ldr	r3, [pc, #500]	; (55e0 <scan+0x278>)
    53ea:	4798      	blx	r3
	sprintf(filename, "scan%03u.lam", highfilenum + 1);
    53ec:	4c76      	ldr	r4, [pc, #472]	; (55c8 <scan+0x260>)
    53ee:	f504 765e 	add.w	r6, r4, #888	; 0x378
    53f2:	1c6a      	adds	r2, r5, #1
    53f4:	497b      	ldr	r1, [pc, #492]	; (55e4 <scan+0x27c>)
    53f6:	4630      	mov	r0, r6
    53f8:	4b7b      	ldr	r3, [pc, #492]	; (55e8 <scan+0x280>)
    53fa:	4798      	blx	r3
	if (DEBUG) printf("\r\nWriting to %s\r\n", filename);
    53fc:	4631      	mov	r1, r6
    53fe:	487b      	ldr	r0, [pc, #492]	; (55ec <scan+0x284>)
    5400:	4b7b      	ldr	r3, [pc, #492]	; (55f0 <scan+0x288>)
    5402:	4798      	blx	r3
	fresult = f_open(&fptr, get_new_filename(), FA_READ | FA_WRITE | FA_CREATE_NEW);
    5404:	2207      	movs	r2, #7
    5406:	4631      	mov	r1, r6
    5408:	f504 7084 	add.w	r0, r4, #264	; 0x108
    540c:	4b79      	ldr	r3, [pc, #484]	; (55f4 <scan+0x28c>)
    540e:	4798      	blx	r3
    5410:	7060      	strb	r0, [r4, #1]
	if (fresult)
    5412:	2800      	cmp	r0, #0
    5414:	d15d      	bne.n	54d2 <scan+0x16a>
		printf("\r\nStarting scan\r\n");
    5416:	4878      	ldr	r0, [pc, #480]	; (55f8 <scan+0x290>)
    5418:	4b78      	ldr	r3, [pc, #480]	; (55fc <scan+0x294>)
    541a:	4798      	blx	r3
	LIDAR_REQ_reset();
    541c:	4b78      	ldr	r3, [pc, #480]	; (5600 <scan+0x298>)
    541e:	4798      	blx	r3
	delay_ms(500);
    5420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    5424:	4b77      	ldr	r3, [pc, #476]	; (5604 <scan+0x29c>)
    5426:	4798      	blx	r3
	LIDAR_REQ_get_health();
    5428:	4b77      	ldr	r3, [pc, #476]	; (5608 <scan+0x2a0>)
    542a:	4798      	blx	r3
	while (!process());
    542c:	4c77      	ldr	r4, [pc, #476]	; (560c <scan+0x2a4>)
    542e:	47a0      	blx	r4
    5430:	2800      	cmp	r0, #0
    5432:	d0fc      	beq.n	542e <scan+0xc6>
	error_code = LIDAR_RES_get_health();
    5434:	4b76      	ldr	r3, [pc, #472]	; (5610 <scan+0x2a8>)
    5436:	4798      	blx	r3
	if (error_code)
    5438:	4604      	mov	r4, r0
    543a:	2800      	cmp	r0, #0
    543c:	d14c      	bne.n	54d8 <scan+0x170>
	LIDAR_REQ_get_info();
    543e:	4b75      	ldr	r3, [pc, #468]	; (5614 <scan+0x2ac>)
    5440:	4798      	blx	r3
	while (!process());
    5442:	4d72      	ldr	r5, [pc, #456]	; (560c <scan+0x2a4>)
    5444:	47a8      	blx	r5
    5446:	2800      	cmp	r0, #0
    5448:	d0fc      	beq.n	5444 <scan+0xdc>
	info = LIDAR_RES_get_info();
    544a:	4b73      	ldr	r3, [pc, #460]	; (5618 <scan+0x2b0>)
    544c:	4798      	blx	r3
    544e:	4605      	mov	r5, r0
		printf(info);
    5450:	4b67      	ldr	r3, [pc, #412]	; (55f0 <scan+0x288>)
    5452:	4798      	blx	r3
	write_print_buffer(sprintf(print_buffer, "%s", info));
    5454:	462a      	mov	r2, r5
    5456:	4971      	ldr	r1, [pc, #452]	; (561c <scan+0x2b4>)
    5458:	4871      	ldr	r0, [pc, #452]	; (5620 <scan+0x2b8>)
    545a:	4b63      	ldr	r3, [pc, #396]	; (55e8 <scan+0x280>)
    545c:	4798      	blx	r3
    545e:	4b71      	ldr	r3, [pc, #452]	; (5624 <scan+0x2bc>)
    5460:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_NAME);
    5462:	217f      	movs	r1, #127	; 0x7f
    5464:	2001      	movs	r0, #1
    5466:	4b70      	ldr	r3, [pc, #448]	; (5628 <scan+0x2c0>)
    5468:	4798      	blx	r3
	while (!process());
    546a:	4d68      	ldr	r5, [pc, #416]	; (560c <scan+0x2a4>)
    546c:	47a8      	blx	r5
    546e:	2800      	cmp	r0, #0
    5470:	d0fc      	beq.n	546c <scan+0x104>
	LIDAR_RES_get_lidar_conf();
    5472:	4b6e      	ldr	r3, [pc, #440]	; (562c <scan+0x2c4>)
    5474:	4798      	blx	r3
	write_print_buffer(sprintf(print_buffer, "# Scan mode is \"%s\"\r\n", conf_data.resp3));
    5476:	4a6e      	ldr	r2, [pc, #440]	; (5630 <scan+0x2c8>)
    5478:	496e      	ldr	r1, [pc, #440]	; (5634 <scan+0x2cc>)
    547a:	4869      	ldr	r0, [pc, #420]	; (5620 <scan+0x2b8>)
    547c:	4b5a      	ldr	r3, [pc, #360]	; (55e8 <scan+0x280>)
    547e:	4798      	blx	r3
    5480:	4b68      	ldr	r3, [pc, #416]	; (5624 <scan+0x2bc>)
    5482:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_COUNT);
    5484:	2170      	movs	r1, #112	; 0x70
    5486:	2001      	movs	r0, #1
    5488:	4b67      	ldr	r3, [pc, #412]	; (5628 <scan+0x2c0>)
    548a:	4798      	blx	r3
	while (!process());
    548c:	4d5f      	ldr	r5, [pc, #380]	; (560c <scan+0x2a4>)
    548e:	47a8      	blx	r5
    5490:	2800      	cmp	r0, #0
    5492:	d0fc      	beq.n	548e <scan+0x126>
	LIDAR_RES_get_lidar_conf();
    5494:	4b65      	ldr	r3, [pc, #404]	; (562c <scan+0x2c4>)
    5496:	4798      	blx	r3
	conf_count.resp1 = conf_data.resp1;
    5498:	4b65      	ldr	r3, [pc, #404]	; (5630 <scan+0x2c8>)
    549a:	f8b3 8000 	ldrh.w	r8, [r3]
	write_print_buffer(sprintf(print_buffer, "# Alternative modes: ["));
    549e:	4d60      	ldr	r5, [pc, #384]	; (5620 <scan+0x2b8>)
    54a0:	4e65      	ldr	r6, [pc, #404]	; (5638 <scan+0x2d0>)
    54a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    54a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    54a6:	e896 0003 	ldmia.w	r6, {r0, r1}
    54aa:	f845 0b04 	str.w	r0, [r5], #4
    54ae:	f825 1b02 	strh.w	r1, [r5], #2
    54b2:	0c09      	lsrs	r1, r1, #16
    54b4:	7029      	strb	r1, [r5, #0]
    54b6:	2016      	movs	r0, #22
    54b8:	4b5a      	ldr	r3, [pc, #360]	; (5624 <scan+0x2bc>)
    54ba:	4798      	blx	r3
	for (i = 0; i < conf_count.resp1; i++) {
    54bc:	4647      	mov	r7, r8
    54be:	f1b8 0f00 	cmp.w	r8, #0
    54c2:	d027      	beq.n	5514 <scan+0x1ac>
    54c4:	2600      	movs	r6, #0
		LIDAR_REQ_get_lidar_conf(i, CONF_SCAN_MODE_NAME);
    54c6:	f8df 9160 	ldr.w	r9, [pc, #352]	; 5628 <scan+0x2c0>
		while (!process());
    54ca:	4d50      	ldr	r5, [pc, #320]	; (560c <scan+0x2a4>)
		write_print_buffer(sprintf(print_buffer, "\"%s\"", conf_data.resp3));
    54cc:	f8df 8150 	ldr.w	r8, [pc, #336]	; 5620 <scan+0x2b8>
    54d0:	e007      	b.n	54e2 <scan+0x17a>
		scan_error(SCAN_ERR_FILE_CREATE);
    54d2:	2004      	movs	r0, #4
    54d4:	4b42      	ldr	r3, [pc, #264]	; (55e0 <scan+0x278>)
    54d6:	4798      	blx	r3
		scan_error(error_code);
    54d8:	4b41      	ldr	r3, [pc, #260]	; (55e0 <scan+0x278>)
    54da:	4798      	blx	r3
	for (i = 0; i < conf_count.resp1; i++) {
    54dc:	3601      	adds	r6, #1
    54de:	42be      	cmp	r6, r7
    54e0:	d018      	beq.n	5514 <scan+0x1ac>
		LIDAR_REQ_get_lidar_conf(i, CONF_SCAN_MODE_NAME);
    54e2:	217f      	movs	r1, #127	; 0x7f
    54e4:	b2b0      	uxth	r0, r6
    54e6:	47c8      	blx	r9
		while (!process());
    54e8:	47a8      	blx	r5
    54ea:	2800      	cmp	r0, #0
    54ec:	d0fc      	beq.n	54e8 <scan+0x180>
		LIDAR_RES_get_lidar_conf();
    54ee:	4b4f      	ldr	r3, [pc, #316]	; (562c <scan+0x2c4>)
    54f0:	4798      	blx	r3
		write_print_buffer(sprintf(print_buffer, "\"%s\"", conf_data.resp3));
    54f2:	4a4f      	ldr	r2, [pc, #316]	; (5630 <scan+0x2c8>)
    54f4:	4951      	ldr	r1, [pc, #324]	; (563c <scan+0x2d4>)
    54f6:	4640      	mov	r0, r8
    54f8:	4b3b      	ldr	r3, [pc, #236]	; (55e8 <scan+0x280>)
    54fa:	4798      	blx	r3
    54fc:	4b49      	ldr	r3, [pc, #292]	; (5624 <scan+0x2bc>)
    54fe:	4798      	blx	r3
		if (i < (conf_count.resp1 - 1))
    5500:	1e7b      	subs	r3, r7, #1
    5502:	42b3      	cmp	r3, r6
    5504:	ddea      	ble.n	54dc <scan+0x174>
			write_print_buffer(sprintf(print_buffer, ","));
    5506:	232c      	movs	r3, #44	; 0x2c
    5508:	f8a8 3000 	strh.w	r3, [r8]
    550c:	2001      	movs	r0, #1
    550e:	4b45      	ldr	r3, [pc, #276]	; (5624 <scan+0x2bc>)
    5510:	4798      	blx	r3
    5512:	e7e3      	b.n	54dc <scan+0x174>
	write_print_buffer(sprintf(print_buffer, "]\r\n"));
    5514:	4a4a      	ldr	r2, [pc, #296]	; (5640 <scan+0x2d8>)
    5516:	4b2c      	ldr	r3, [pc, #176]	; (55c8 <scan+0x260>)
    5518:	609a      	str	r2, [r3, #8]
    551a:	2003      	movs	r0, #3
    551c:	4b41      	ldr	r3, [pc, #260]	; (5624 <scan+0x2bc>)
    551e:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_US_PER_SAMPLE);
    5520:	2171      	movs	r1, #113	; 0x71
    5522:	2001      	movs	r0, #1
    5524:	4b40      	ldr	r3, [pc, #256]	; (5628 <scan+0x2c0>)
    5526:	4798      	blx	r3
	while (!process());
    5528:	4d38      	ldr	r5, [pc, #224]	; (560c <scan+0x2a4>)
    552a:	47a8      	blx	r5
    552c:	2800      	cmp	r0, #0
    552e:	d0fc      	beq.n	552a <scan+0x1c2>
	LIDAR_RES_get_lidar_conf();
    5530:	4b3e      	ldr	r3, [pc, #248]	; (562c <scan+0x2c4>)
    5532:	4798      	blx	r3
	write_print_buffer(sprintf(print_buffer, "# Scan costs %"PRIu32"us per sample\r\n", conf_data.resp2));
    5534:	4b3e      	ldr	r3, [pc, #248]	; (5630 <scan+0x2c8>)
    5536:	681a      	ldr	r2, [r3, #0]
    5538:	4942      	ldr	r1, [pc, #264]	; (5644 <scan+0x2dc>)
    553a:	4839      	ldr	r0, [pc, #228]	; (5620 <scan+0x2b8>)
    553c:	4b2a      	ldr	r3, [pc, #168]	; (55e8 <scan+0x280>)
    553e:	4798      	blx	r3
    5540:	4b38      	ldr	r3, [pc, #224]	; (5624 <scan+0x2bc>)
    5542:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_MAX_DISTANCE);
    5544:	2174      	movs	r1, #116	; 0x74
    5546:	2001      	movs	r0, #1
    5548:	4b37      	ldr	r3, [pc, #220]	; (5628 <scan+0x2c0>)
    554a:	4798      	blx	r3
	while (!process());
    554c:	4d2f      	ldr	r5, [pc, #188]	; (560c <scan+0x2a4>)
    554e:	47a8      	blx	r5
    5550:	2800      	cmp	r0, #0
    5552:	d0fc      	beq.n	554e <scan+0x1e6>
	LIDAR_RES_get_lidar_conf();
    5554:	4b35      	ldr	r3, [pc, #212]	; (562c <scan+0x2c4>)
    5556:	4798      	blx	r3
	write_print_buffer(sprintf(print_buffer, "# Max measuring distance is %"PRIu32"m\r\n", conf_data.resp2));
    5558:	4f1b      	ldr	r7, [pc, #108]	; (55c8 <scan+0x260>)
    555a:	f107 0508 	add.w	r5, r7, #8
    555e:	4b34      	ldr	r3, [pc, #208]	; (5630 <scan+0x2c8>)
    5560:	681a      	ldr	r2, [r3, #0]
    5562:	4939      	ldr	r1, [pc, #228]	; (5648 <scan+0x2e0>)
    5564:	4628      	mov	r0, r5
    5566:	4b20      	ldr	r3, [pc, #128]	; (55e8 <scan+0x280>)
    5568:	4798      	blx	r3
    556a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 5624 <scan+0x2bc>
    556e:	47c0      	blx	r8
    return sprintf(print_buffer,
    5570:	4e36      	ldr	r6, [pc, #216]	; (564c <scan+0x2e4>)
    5572:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5576:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    557a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    557c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    557e:	e896 0003 	ldmia.w	r6, {r0, r1}
    5582:	e885 0003 	stmia.w	r5, {r0, r1}
	write_print_buffer(set_data_format(EXPRESS_SCAN_MODE));
    5586:	2037      	movs	r0, #55	; 0x37
    5588:	47c0      	blx	r8
	format_header_file_data();
    558a:	4b31      	ldr	r3, [pc, #196]	; (5650 <scan+0x2e8>)
    558c:	4798      	blx	r3
	LIDAR_PWM_start();
    558e:	4b31      	ldr	r3, [pc, #196]	; (5654 <scan+0x2ec>)
    5590:	4798      	blx	r3
	for (angle = 0; angle <= 180; angle+=2) {
    5592:	2300      	movs	r3, #0
    5594:	f8a7 3384 	strh.w	r3, [r7, #900]	; 0x384
				angle = (legacy_cabins[i].angle_value1 & 0x0F) / 8.0;
    5598:	4620      	mov	r0, r4
    559a:	e192      	b.n	58c2 <scan+0x55a>
					sd_scan_data[i].repeated_n++;
    559c:	4a2e      	ldr	r2, [pc, #184]	; (5658 <scan+0x2f0>)
    559e:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
    55a2:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
    55a6:	3301      	adds	r3, #1
    55a8:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
    55ac:	9609      	str	r6, [sp, #36]	; 0x24
    55ae:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 5664 <scan+0x2fc>
    55b2:	f10a 0ba0 	add.w	fp, sl, #160	; 0xa0
			distance = 0;
    55b6:	2300      	movs	r3, #0
    55b8:	2400      	movs	r4, #0
    55ba:	e9cd 3402 	strd	r3, r4, [sp, #8]
					distance += sqrt(pow((double)legacy_cabins[i].distance1, 2.0) + 
    55be:	4f27      	ldr	r7, [pc, #156]	; (565c <scan+0x2f4>)
				angle = (legacy_cabins[i].angle_value1 & 0x0F) / 8.0;
    55c0:	4e27      	ldr	r6, [pc, #156]	; (5660 <scan+0x2f8>)
    55c2:	e080      	b.n	56c6 <scan+0x35e>
    55c4:	000003b1 	.word	0x000003b1
    55c8:	20001300 	.word	0x20001300
    55cc:	0000c460 	.word	0x0000c460
    55d0:	00001e35 	.word	0x00001e35
    55d4:	0000258d 	.word	0x0000258d
    55d8:	00002619 	.word	0x00002619
    55dc:	00007835 	.word	0x00007835
    55e0:	00004e25 	.word	0x00004e25
    55e4:	0000c8ec 	.word	0x0000c8ec
    55e8:	000080b1 	.word	0x000080b1
    55ec:	0000c8fc 	.word	0x0000c8fc
    55f0:	00007d95 	.word	0x00007d95
    55f4:	00001ea1 	.word	0x00001ea1
    55f8:	0000c910 	.word	0x0000c910
    55fc:	00007e7d 	.word	0x00007e7d
    5600:	000044a9 	.word	0x000044a9
    5604:	00002855 	.word	0x00002855
    5608:	00004701 	.word	0x00004701
    560c:	00005205 	.word	0x00005205
    5610:	00004b19 	.word	0x00004b19
    5614:	0000469d 	.word	0x0000469d
    5618:	00004a45 	.word	0x00004a45
    561c:	0000b6e4 	.word	0x0000b6e4
    5620:	20001308 	.word	0x20001308
    5624:	00004f79 	.word	0x00004f79
    5628:	000047c9 	.word	0x000047c9
    562c:	00004bad 	.word	0x00004bad
    5630:	20000a44 	.word	0x20000a44
    5634:	0000c924 	.word	0x0000c924
    5638:	0000c93c 	.word	0x0000c93c
    563c:	0000c954 	.word	0x0000c954
    5640:	000a0d5d 	.word	0x000a0d5d
    5644:	0000c95c 	.word	0x0000c95c
    5648:	0000c97c 	.word	0x0000c97c
    564c:	0000c9a0 	.word	0x0000c9a0
    5650:	00004fc1 	.word	0x00004fc1
    5654:	00003c89 	.word	0x00003c89
    5658:	20000a54 	.word	0x20000a54
    565c:	00006e99 	.word	0x00006e99
    5660:	00006eb9 	.word	0x00006eb9
    5664:	20000e30 	.word	0x20000e30
					distance += sqrt(pow((double)legacy_cabins[i].distance1, 2.0) + 
    5668:	47b8      	blx	r7
    566a:	e9cd 0104 	strd	r0, r1, [sp, #16]
				angle = (legacy_cabins[i].angle_value1 & 0x0F) / 8.0;
    566e:	f89a 0001 	ldrb.w	r0, [sl, #1]
    5672:	f000 000f 	and.w	r0, r0, #15
    5676:	47b0      	blx	r6
    5678:	4c61      	ldr	r4, [pc, #388]	; (5800 <scan+0x498>)
    567a:	2200      	movs	r2, #0
    567c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    5680:	47a0      	blx	r4
    5682:	e9cd 0106 	strd	r0, r1, [sp, #24]
					distance += sqrt(pow((double)legacy_cabins[i].distance1, 2.0) + 
    5686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    568a:	4602      	mov	r2, r0
    568c:	460b      	mov	r3, r1
    568e:	47a0      	blx	r4
    5690:	e9cd 0104 	strd	r0, r1, [sp, #16]
									 pow(angle, 2.0) );
    5694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    5698:	4602      	mov	r2, r0
    569a:	460b      	mov	r3, r1
    569c:	47a0      	blx	r4
					distance += sqrt(pow((double)legacy_cabins[i].distance1, 2.0) + 
    569e:	4c59      	ldr	r4, [pc, #356]	; (5804 <scan+0x49c>)
    56a0:	4602      	mov	r2, r0
    56a2:	460b      	mov	r3, r1
    56a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    56a8:	47a0      	blx	r4
    56aa:	4b57      	ldr	r3, [pc, #348]	; (5808 <scan+0x4a0>)
    56ac:	4798      	blx	r3
    56ae:	4602      	mov	r2, r0
    56b0:	460b      	mov	r3, r1
    56b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    56b6:	47a0      	blx	r4
    56b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    56bc:	e008      	b.n	56d0 <scan+0x368>
    56be:	f10a 0a0a 	add.w	sl, sl, #10
			for (i = 0; i < LEGACY_CABIN_COUNT; i++) {
    56c2:	45da      	cmp	sl, fp
    56c4:	d02f      	beq.n	5726 <scan+0x3be>
    56c6:	46d0      	mov	r8, sl
				if (legacy_cabins[i].distance1 > 0)
    56c8:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    56cc:	2800      	cmp	r0, #0
    56ce:	d1cb      	bne.n	5668 <scan+0x300>
				if (legacy_cabins[i].distance2 > 0)
    56d0:	f8b8 0006 	ldrh.w	r0, [r8, #6]
    56d4:	2800      	cmp	r0, #0
    56d6:	d0f2      	beq.n	56be <scan+0x356>
					distance += sqrt(pow((double)legacy_cabins[i].distance2, 2.0) +
    56d8:	47b8      	blx	r7
    56da:	e9cd 0104 	strd	r0, r1, [sp, #16]
				angle = (legacy_cabins[i].angle_value2 & 0x0F) / 8;
    56de:	f898 0002 	ldrb.w	r0, [r8, #2]
    56e2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    56e6:	47b0      	blx	r6
    56e8:	4680      	mov	r8, r0
    56ea:	4689      	mov	r9, r1
					distance += sqrt(pow((double)legacy_cabins[i].distance2, 2.0) +
    56ec:	4c44      	ldr	r4, [pc, #272]	; (5800 <scan+0x498>)
    56ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    56f2:	4602      	mov	r2, r0
    56f4:	460b      	mov	r3, r1
    56f6:	47a0      	blx	r4
    56f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
									 pow(angle, 2.0) );
    56fc:	4642      	mov	r2, r8
    56fe:	464b      	mov	r3, r9
    5700:	4640      	mov	r0, r8
    5702:	4649      	mov	r1, r9
    5704:	47a0      	blx	r4
					distance += sqrt(pow((double)legacy_cabins[i].distance2, 2.0) +
    5706:	4c3f      	ldr	r4, [pc, #252]	; (5804 <scan+0x49c>)
    5708:	4602      	mov	r2, r0
    570a:	460b      	mov	r3, r1
    570c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5710:	47a0      	blx	r4
    5712:	4b3d      	ldr	r3, [pc, #244]	; (5808 <scan+0x4a0>)
    5714:	4798      	blx	r3
    5716:	4602      	mov	r2, r0
    5718:	460b      	mov	r3, r1
    571a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    571e:	47a0      	blx	r4
    5720:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5724:	e7cb      	b.n	56be <scan+0x356>
			distance /= (LEGACY_CABIN_COUNT * 2);
    5726:	2200      	movs	r2, #0
    5728:	4b38      	ldr	r3, [pc, #224]	; (580c <scan+0x4a4>)
    572a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    572e:	4c34      	ldr	r4, [pc, #208]	; (5800 <scan+0x498>)
    5730:	47a0      	blx	r4
    5732:	4604      	mov	r4, r0
    5734:	460d      	mov	r5, r1
			if (sd_scan_data[repeated_idx].repeated_n > 0) {
    5736:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5738:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    573c:	4a34      	ldr	r2, [pc, #208]	; (5810 <scan+0x4a8>)
    573e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5742:	bb0b      	cbnz	r3, 5788 <scan+0x420>
			distance_int = (uint16_t)distance;
    5744:	4f33      	ldr	r7, [pc, #204]	; (5814 <scan+0x4ac>)
    5746:	47b8      	blx	r7
			distance_precision = (uint16_t)((distance - distance_int) * pow(10, precision));
    5748:	b286      	uxth	r6, r0
    574a:	4630      	mov	r0, r6
    574c:	4b32      	ldr	r3, [pc, #200]	; (5818 <scan+0x4b0>)
    574e:	4798      	blx	r3
    5750:	4602      	mov	r2, r0
    5752:	460b      	mov	r3, r1
    5754:	4620      	mov	r0, r4
    5756:	4629      	mov	r1, r5
    5758:	4c30      	ldr	r4, [pc, #192]	; (581c <scan+0x4b4>)
    575a:	47a0      	blx	r4
    575c:	a326      	add	r3, pc, #152	; (adr r3, 57f8 <scan+0x490>)
    575e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5762:	4c27      	ldr	r4, [pc, #156]	; (5800 <scan+0x498>)
    5764:	47a0      	blx	r4
    5766:	47b8      	blx	r7
			sprintf(sd_scan_data[scan_count].distance, 
    5768:	4d2d      	ldr	r5, [pc, #180]	; (5820 <scan+0x4b8>)
    576a:	682c      	ldr	r4, [r5, #0]
    576c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    5770:	b283      	uxth	r3, r0
    5772:	4632      	mov	r2, r6
    5774:	492b      	ldr	r1, [pc, #172]	; (5824 <scan+0x4bc>)
    5776:	482c      	ldr	r0, [pc, #176]	; (5828 <scan+0x4c0>)
    5778:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    577c:	4c2b      	ldr	r4, [pc, #172]	; (582c <scan+0x4c4>)
    577e:	47a0      	blx	r4
			scan_count++;
    5780:	682b      	ldr	r3, [r5, #0]
    5782:	3301      	adds	r3, #1
    5784:	602b      	str	r3, [r5, #0]
    5786:	e0aa      	b.n	58de <scan+0x576>
				distance += strtod(sd_scan_data[scan_count].distance, NULL);
    5788:	4b25      	ldr	r3, [pc, #148]	; (5820 <scan+0x4b8>)
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    5790:	00d8      	lsls	r0, r3, #3
    5792:	3007      	adds	r0, #7
    5794:	4616      	mov	r6, r2
    5796:	2100      	movs	r1, #0
    5798:	4410      	add	r0, r2
    579a:	4b25      	ldr	r3, [pc, #148]	; (5830 <scan+0x4c8>)
    579c:	4798      	blx	r3
    579e:	4602      	mov	r2, r0
    57a0:	460b      	mov	r3, r1
    57a2:	4620      	mov	r0, r4
    57a4:	4629      	mov	r1, r5
    57a6:	4c17      	ldr	r4, [pc, #92]	; (5804 <scan+0x49c>)
    57a8:	47a0      	blx	r4
				distance /= 2.0;
    57aa:	4f15      	ldr	r7, [pc, #84]	; (5800 <scan+0x498>)
    57ac:	2200      	movs	r2, #0
    57ae:	4b21      	ldr	r3, [pc, #132]	; (5834 <scan+0x4cc>)
    57b0:	47b8      	blx	r7
    57b2:	4680      	mov	r8, r0
    57b4:	4689      	mov	r9, r1
				distance_int = (uint16_t)distance;
    57b6:	4d17      	ldr	r5, [pc, #92]	; (5814 <scan+0x4ac>)
    57b8:	47a8      	blx	r5
				distance_precision = (uint16_t)((distance - distance_int) * pow(10, precision));
    57ba:	b284      	uxth	r4, r0
    57bc:	4620      	mov	r0, r4
    57be:	4b16      	ldr	r3, [pc, #88]	; (5818 <scan+0x4b0>)
    57c0:	4798      	blx	r3
    57c2:	4602      	mov	r2, r0
    57c4:	460b      	mov	r3, r1
    57c6:	4640      	mov	r0, r8
    57c8:	4649      	mov	r1, r9
    57ca:	f8df 8050 	ldr.w	r8, [pc, #80]	; 581c <scan+0x4b4>
    57ce:	47c0      	blx	r8
    57d0:	a309      	add	r3, pc, #36	; (adr r3, 57f8 <scan+0x490>)
    57d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    57d6:	47b8      	blx	r7
    57d8:	47a8      	blx	r5
				sprintf(sd_scan_data[repeated_idx].distance,
    57da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    57dc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    57e0:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
    57e4:	b283      	uxth	r3, r0
    57e6:	4622      	mov	r2, r4
    57e8:	490e      	ldr	r1, [pc, #56]	; (5824 <scan+0x4bc>)
    57ea:	1df0      	adds	r0, r6, #7
    57ec:	4c0f      	ldr	r4, [pc, #60]	; (582c <scan+0x4c4>)
    57ee:	47a0      	blx	r4
    57f0:	e075      	b.n	58de <scan+0x576>
    57f2:	bf00      	nop
    57f4:	f3af 8000 	nop.w
    57f8:	00000000 	.word	0x00000000
    57fc:	416312d0 	.word	0x416312d0
    5800:	00006f85 	.word	0x00006f85
    5804:	00006c21 	.word	0x00006c21
    5808:	000069dd 	.word	0x000069dd
    580c:	3fa00000 	.word	0x3fa00000
    5810:	20000a54 	.word	0x20000a54
    5814:	000074e5 	.word	0x000074e5
    5818:	00006eb9 	.word	0x00006eb9
    581c:	00006c1d 	.word	0x00006c1d
    5820:	20000a3c 	.word	0x20000a3c
    5824:	0000c9ec 	.word	0x0000c9ec
    5828:	20000a5b 	.word	0x20000a5b
    582c:	000080b1 	.word	0x000080b1
    5830:	00008e29 	.word	0x00008e29
    5834:	3fe00000 	.word	0x3fe00000
	printf("\r\nAveraged Scan Data:\r\n");
    5838:	486f      	ldr	r0, [pc, #444]	; (59f8 <scan+0x690>)
    583a:	4b70      	ldr	r3, [pc, #448]	; (59fc <scan+0x694>)
    583c:	4798      	blx	r3
    583e:	4c70      	ldr	r4, [pc, #448]	; (5a00 <scan+0x698>)
    5840:	f504 7934 	add.w	r9, r4, #720	; 0x2d0
			printf("\t%u,%s,%s\t\t(repeated %u times)\r\n",
    5844:	f8df 822c 	ldr.w	r8, [pc, #556]	; 5a74 <scan+0x70c>
    5848:	4f6e      	ldr	r7, [pc, #440]	; (5a04 <scan+0x69c>)
			sprintf(print_buffer,
    584a:	4e6f      	ldr	r6, [pc, #444]	; (5a08 <scan+0x6a0>)
    584c:	f104 0520 	add.w	r5, r4, #32
			printf("\t%u,%s,%s\t\t(repeated %u times)\r\n",
    5850:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    5854:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    5858:	9300      	str	r3, [sp, #0]
    585a:	462b      	mov	r3, r5
    585c:	4622      	mov	r2, r4
    585e:	4640      	mov	r0, r8
    5860:	47b8      	blx	r7
			sprintf(print_buffer,
    5862:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5866:	9500      	str	r5, [sp, #0]
    5868:	4623      	mov	r3, r4
    586a:	4968      	ldr	r1, [pc, #416]	; (5a0c <scan+0x6a4>)
    586c:	4630      	mov	r0, r6
    586e:	4d68      	ldr	r5, [pc, #416]	; (5a10 <scan+0x6a8>)
    5870:	47a8      	blx	r5
		write_print_buffer (
    5872:	4b68      	ldr	r3, [pc, #416]	; (5a14 <scan+0x6ac>)
    5874:	4798      	blx	r3
    5876:	3448      	adds	r4, #72	; 0x48
	for (i = 0; i < MAX_SCANS; i++)
    5878:	454c      	cmp	r4, r9
    587a:	d1e7      	bne.n	584c <scan+0x4e4>
    587c:	4866      	ldr	r0, [pc, #408]	; (5a18 <scan+0x6b0>)
    587e:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
		sd_scan_data[i].repeated_n = 0;
    5882:	2200      	movs	r2, #0
    5884:	f800 2c26 	strb.w	r2, [r0, #-38]
		sd_scan_data[i].lidar_angle_int = 0;
    5888:	f820 2c24 	strh.w	r2, [r0, #-36]
		sd_scan_data[i].lidar_angle_precision = 0;
    588c:	f820 2c22 	strh.w	r2, [r0, #-34]
		sd_scan_data[i].servo_angle = 0;
    5890:	4603      	mov	r3, r0
    5892:	f803 2d20 	strb.w	r2, [r3, #-32]!
    5896:	4601      	mov	r1, r0
			sd_scan_data[i].distance[j] = '\0';		
    5898:	f803 2f01 	strb.w	r2, [r3, #1]!
			sd_scan_data[i].lidar_angle[j] = '\0';
    589c:	f801 2f01 	strb.w	r2, [r1, #1]!
		for (j = 0; j < 32; j++) {
    58a0:	4283      	cmp	r3, r0
    58a2:	d1f9      	bne.n	5898 <scan+0x530>
    58a4:	3048      	adds	r0, #72	; 0x48
	for (i = 0; i < MAX_SCANS; i++) {
    58a6:	42a0      	cmp	r0, r4
    58a8:	d1ec      	bne.n	5884 <scan+0x51c>
		scan_count = 0;
    58aa:	2200      	movs	r2, #0
    58ac:	4b5b      	ldr	r3, [pc, #364]	; (5a1c <scan+0x6b4>)
    58ae:	601a      	str	r2, [r3, #0]
	for (angle = 0; angle <= 180; angle+=2) {
    58b0:	4b5b      	ldr	r3, [pc, #364]	; (5a20 <scan+0x6b8>)
    58b2:	f8b3 0384 	ldrh.w	r0, [r3, #900]	; 0x384
    58b6:	3002      	adds	r0, #2
    58b8:	b280      	uxth	r0, r0
    58ba:	f8a3 0384 	strh.w	r0, [r3, #900]	; 0x384
    58be:	28b4      	cmp	r0, #180	; 0xb4
    58c0:	d87a      	bhi.n	59b8 <scan+0x650>
		SERVO_set_angle(angle);
    58c2:	4b58      	ldr	r3, [pc, #352]	; (5a24 <scan+0x6bc>)
    58c4:	4798      	blx	r3
		delay_ms(100);
    58c6:	2064      	movs	r0, #100	; 0x64
    58c8:	4b57      	ldr	r3, [pc, #348]	; (5a28 <scan+0x6c0>)
    58ca:	4798      	blx	r3
			printf("\r\nServo angle %u\r\n", angle);
    58cc:	4b54      	ldr	r3, [pc, #336]	; (5a20 <scan+0x6b8>)
    58ce:	f8b3 1384 	ldrh.w	r1, [r3, #900]	; 0x384
    58d2:	4856      	ldr	r0, [pc, #344]	; (5a2c <scan+0x6c4>)
    58d4:	4b4b      	ldr	r3, [pc, #300]	; (5a04 <scan+0x69c>)
    58d6:	4798      	blx	r3
		LIDAR_REQ_express_scan(EXPRESS_SCAN_MODE);
    58d8:	2000      	movs	r0, #0
    58da:	4b55      	ldr	r3, [pc, #340]	; (5a30 <scan+0x6c8>)
    58dc:	4798      	blx	r3
		while (scan_count < MAX_SCANS) {
    58de:	4d4f      	ldr	r5, [pc, #316]	; (5a1c <scan+0x6b4>)
			while (!process());
    58e0:	4c54      	ldr	r4, [pc, #336]	; (5a34 <scan+0x6cc>)
			if (LIDAR_RES_express_scan()) {
    58e2:	4e55      	ldr	r6, [pc, #340]	; (5a38 <scan+0x6d0>)
		while (scan_count < MAX_SCANS) {
    58e4:	682b      	ldr	r3, [r5, #0]
    58e6:	2b09      	cmp	r3, #9
    58e8:	d8a6      	bhi.n	5838 <scan+0x4d0>
			while (!process());
    58ea:	47a0      	blx	r4
    58ec:	2800      	cmp	r0, #0
    58ee:	d0fc      	beq.n	58ea <scan+0x582>
			if (LIDAR_RES_express_scan()) {
    58f0:	47b0      	blx	r6
    58f2:	2800      	cmp	r0, #0
    58f4:	d0f6      	beq.n	58e4 <scan+0x57c>
    int i, repeated_idx = scan_count;
    58f6:	4b49      	ldr	r3, [pc, #292]	; (5a1c <scan+0x6b4>)
    58f8:	681e      	ldr	r6, [r3, #0]
    58fa:	9609      	str	r6, [sp, #36]	; 0x24
	switch (resp_desc.data_type) {
    58fc:	4b4f      	ldr	r3, [pc, #316]	; (5a3c <scan+0x6d4>)
    58fe:	7a1b      	ldrb	r3, [r3, #8]
    5900:	2b82      	cmp	r3, #130	; 0x82
    5902:	d1ec      	bne.n	58de <scan+0x576>
			sd_scan_data[scan_count].servo_angle = servo_angle;
    5904:	4c4e      	ldr	r4, [pc, #312]	; (5a40 <scan+0x6d8>)
    5906:	00f5      	lsls	r5, r6, #3
    5908:	19ab      	adds	r3, r5, r6
    590a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
				average_cabins(angle);
    590e:	4a44      	ldr	r2, [pc, #272]	; (5a20 <scan+0x6b8>)
    5910:	f8b2 2384 	ldrh.w	r2, [r2, #900]	; 0x384
    5914:	719a      	strb	r2, [r3, #6]
			angle = legacy_cabins[0].start_angle / 64.0;
    5916:	f8df a160 	ldr.w	sl, [pc, #352]	; 5a78 <scan+0x710>
    591a:	4b4a      	ldr	r3, [pc, #296]	; (5a44 <scan+0x6dc>)
    591c:	8918      	ldrh	r0, [r3, #8]
    591e:	47d0      	blx	sl
    5920:	f8df 9158 	ldr.w	r9, [pc, #344]	; 5a7c <scan+0x714>
    5924:	2200      	movs	r2, #0
    5926:	4b48      	ldr	r3, [pc, #288]	; (5a48 <scan+0x6e0>)
    5928:	47c8      	blx	r9
    592a:	e9cd 0102 	strd	r0, r1, [sp, #8]
			angle_int = (uint16_t) angle;
    592e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 5a80 <scan+0x718>
    5932:	47c0      	blx	r8
    5934:	b287      	uxth	r7, r0
			angle_precision = (uint16_t)((angle - angle_int) * pow(10, precision));
    5936:	4638      	mov	r0, r7
    5938:	47d0      	blx	sl
    593a:	4602      	mov	r2, r0
    593c:	460b      	mov	r3, r1
    593e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5942:	f8df a140 	ldr.w	sl, [pc, #320]	; 5a84 <scan+0x71c>
    5946:	47d0      	blx	sl
    5948:	a329      	add	r3, pc, #164	; (adr r3, 59f0 <scan+0x688>)
    594a:	e9d3 2300 	ldrd	r2, r3, [r3]
    594e:	47c8      	blx	r9
    5950:	47c0      	blx	r8
    5952:	fa1f f880 	uxth.w	r8, r0
			sprintf(sd_scan_data[scan_count].lidar_angle,
    5956:	19a8      	adds	r0, r5, r6
    5958:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    595c:	4643      	mov	r3, r8
    595e:	463a      	mov	r2, r7
    5960:	493a      	ldr	r1, [pc, #232]	; (5a4c <scan+0x6e4>)
    5962:	3027      	adds	r0, #39	; 0x27
    5964:	4d2a      	ldr	r5, [pc, #168]	; (5a10 <scan+0x6a8>)
    5966:	47a8      	blx	r5
			sd_scan_data[scan_count].lidar_angle_int = angle_int;
    5968:	4b2c      	ldr	r3, [pc, #176]	; (5a1c <scan+0x6b4>)
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    5970:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    5974:	8067      	strh	r7, [r4, #2]
			sd_scan_data[scan_count].lidar_angle_precision = angle_precision;
    5976:	f8a4 8004 	strh.w	r8, [r4, #4]
			for (i = 0; i < scan_count; i++) {
    597a:	2b00      	cmp	r3, #0
    597c:	f43f ae17 	beq.w	55ae <scan+0x246>
    5980:	4c2f      	ldr	r4, [pc, #188]	; (5a40 <scan+0x6d8>)
    5982:	2600      	movs	r6, #0
				sprintf(tmp_char, "%u.%u", sd_scan_data[i].lidar_angle_int, sd_scan_data[i].lidar_angle_precision);
    5984:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 5a4c <scan+0x6e4>
    5988:	46a8      	mov	r8, r5
				if (!strcmp(tmp_char, sd_scan_data[scan_count].lidar_angle)) {
    598a:	4f24      	ldr	r7, [pc, #144]	; (5a1c <scan+0x6b4>)
				sprintf(tmp_char, "%u.%u", sd_scan_data[i].lidar_angle_int, sd_scan_data[i].lidar_angle_precision);
    598c:	88a3      	ldrh	r3, [r4, #4]
    598e:	8862      	ldrh	r2, [r4, #2]
    5990:	4649      	mov	r1, r9
    5992:	a80c      	add	r0, sp, #48	; 0x30
    5994:	47c0      	blx	r8
				if (!strcmp(tmp_char, sd_scan_data[scan_count].lidar_angle)) {
    5996:	683d      	ldr	r5, [r7, #0]
    5998:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
    599c:	4b2c      	ldr	r3, [pc, #176]	; (5a50 <scan+0x6e8>)
    599e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    59a2:	a80c      	add	r0, sp, #48	; 0x30
    59a4:	4b2b      	ldr	r3, [pc, #172]	; (5a54 <scan+0x6ec>)
    59a6:	4798      	blx	r3
    59a8:	2800      	cmp	r0, #0
    59aa:	f43f adf7 	beq.w	559c <scan+0x234>
			for (i = 0; i < scan_count; i++) {
    59ae:	3601      	adds	r6, #1
    59b0:	3448      	adds	r4, #72	; 0x48
    59b2:	42b5      	cmp	r5, r6
    59b4:	d8ea      	bhi.n	598c <scan+0x624>
    59b6:	e5fa      	b.n	55ae <scan+0x246>
	LIDAR_PWM_stop();
    59b8:	4b27      	ldr	r3, [pc, #156]	; (5a58 <scan+0x6f0>)
    59ba:	4798      	blx	r3
	LIDAR_REQ_stop();
    59bc:	4b27      	ldr	r3, [pc, #156]	; (5a5c <scan+0x6f4>)
    59be:	4798      	blx	r3
	delay_ms(50);
    59c0:	2032      	movs	r0, #50	; 0x32
    59c2:	4b19      	ldr	r3, [pc, #100]	; (5a28 <scan+0x6c0>)
    59c4:	4798      	blx	r3
	fresult = f_close(&fptr);
    59c6:	4c16      	ldr	r4, [pc, #88]	; (5a20 <scan+0x6b8>)
    59c8:	f504 7084 	add.w	r0, r4, #264	; 0x108
    59cc:	4b24      	ldr	r3, [pc, #144]	; (5a60 <scan+0x6f8>)
    59ce:	4798      	blx	r3
    59d0:	7060      	strb	r0, [r4, #1]
	if (fresult)
    59d2:	b950      	cbnz	r0, 59ea <scan+0x682>
	f_mount(0, "", 0);
    59d4:	2200      	movs	r2, #0
    59d6:	4923      	ldr	r1, [pc, #140]	; (5a64 <scan+0x6fc>)
    59d8:	4610      	mov	r0, r2
    59da:	4b23      	ldr	r3, [pc, #140]	; (5a68 <scan+0x700>)
    59dc:	4798      	blx	r3
	status = STATUS_IDLE;
    59de:	2200      	movs	r2, #0
    59e0:	4b22      	ldr	r3, [pc, #136]	; (5a6c <scan+0x704>)
    59e2:	701a      	strb	r2, [r3, #0]
 }
    59e4:	b015      	add	sp, #84	; 0x54
    59e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		scan_error(SCAN_ERR_FILE_CLOSE);
    59ea:	2006      	movs	r0, #6
    59ec:	4b20      	ldr	r3, [pc, #128]	; (5a70 <scan+0x708>)
    59ee:	4798      	blx	r3
    59f0:	00000000 	.word	0x00000000
    59f4:	416312d0 	.word	0x416312d0
    59f8:	0000c9f4 	.word	0x0000c9f4
    59fc:	00007e7d 	.word	0x00007e7d
    5a00:	20000a5b 	.word	0x20000a5b
    5a04:	00007d95 	.word	0x00007d95
    5a08:	20001308 	.word	0x20001308
    5a0c:	0000ca30 	.word	0x0000ca30
    5a10:	000080b1 	.word	0x000080b1
    5a14:	00004f79 	.word	0x00004f79
    5a18:	20000a7a 	.word	0x20000a7a
    5a1c:	20000a3c 	.word	0x20000a3c
    5a20:	20001300 	.word	0x20001300
    5a24:	00006751 	.word	0x00006751
    5a28:	00002855 	.word	0x00002855
    5a2c:	0000c9d8 	.word	0x0000c9d8
    5a30:	00004585 	.word	0x00004585
    5a34:	00005205 	.word	0x00005205
    5a38:	000048dd 	.word	0x000048dd
    5a3c:	20000d24 	.word	0x20000d24
    5a40:	20000a54 	.word	0x20000a54
    5a44:	20000e30 	.word	0x20000e30
    5a48:	3f900000 	.word	0x3f900000
    5a4c:	0000c9ec 	.word	0x0000c9ec
    5a50:	20000a7b 	.word	0x20000a7b
    5a54:	0000819d 	.word	0x0000819d
    5a58:	00003cf5 	.word	0x00003cf5
    5a5c:	00004449 	.word	0x00004449
    5a60:	00002429 	.word	0x00002429
    5a64:	0000c460 	.word	0x0000c460
    5a68:	00001e35 	.word	0x00001e35
    5a6c:	20001738 	.word	0x20001738
    5a70:	00004e25 	.word	0x00004e25
    5a74:	0000ca0c 	.word	0x0000ca0c
    5a78:	00006eb9 	.word	0x00006eb9
    5a7c:	00006f85 	.word	0x00006f85
    5a80:	000074e5 	.word	0x000074e5
    5a84:	00006c1d 	.word	0x00006c1d

00005a88 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    5a88:	b510      	push	{r4, lr}
    5a8a:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    5a8c:	4807      	ldr	r0, [pc, #28]	; (5aac <sd_mmc_configure_slot+0x24>)
    5a8e:	6804      	ldr	r4, [r0, #0]
	driver_select_device(
    5a90:	7b63      	ldrb	r3, [r4, #13]
    5a92:	6822      	ldr	r2, [r4, #0]
    5a94:	7901      	ldrb	r1, [r0, #4]
    5a96:	6880      	ldr	r0, [r0, #8]
    5a98:	7fa4      	ldrb	r4, [r4, #30]
    5a9a:	3400      	adds	r4, #0
    5a9c:	bf18      	it	ne
    5a9e:	2401      	movne	r4, #1
    5aa0:	9400      	str	r4, [sp, #0]
    5aa2:	4c03      	ldr	r4, [pc, #12]	; (5ab0 <sd_mmc_configure_slot+0x28>)
    5aa4:	47a0      	blx	r4
}
    5aa6:	b002      	add	sp, #8
    5aa8:	bd10      	pop	{r4, pc}
    5aaa:	bf00      	nop
    5aac:	20001688 	.word	0x20001688
    5ab0:	00002905 	.word	0x00002905

00005ab4 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    5ab4:	b108      	cbz	r0, 5aba <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    5ab6:	2004      	movs	r0, #4
    5ab8:	4770      	bx	lr
{
    5aba:	b530      	push	{r4, r5, lr}
    5abc:	b083      	sub	sp, #12
	if (_cd && _cd[slot].pin != -1) {
    5abe:	4b3a      	ldr	r3, [pc, #232]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5ac0:	68db      	ldr	r3, [r3, #12]
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	d041      	beq.n	5b4a <sd_mmc_select_slot+0x96>
    5ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
    5aca:	f1b3 3fff 	cmp.w	r3, #4294967295
    5ace:	d03c      	beq.n	5b4a <sd_mmc_select_slot+0x96>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    5ad0:	b2dd      	uxtb	r5, r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    5ad2:	a801      	add	r0, sp, #4
    5ad4:	4b35      	ldr	r3, [pc, #212]	; (5bac <sd_mmc_select_slot+0xf8>)
    5ad6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5ad8:	096b      	lsrs	r3, r5, #5
    5ada:	4935      	ldr	r1, [pc, #212]	; (5bb0 <sd_mmc_select_slot+0xfc>)
    5adc:	01db      	lsls	r3, r3, #7
    5ade:	18ca      	adds	r2, r1, r3
    5ae0:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5ae2:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5ae4:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5ae6:	405c      	eors	r4, r3
    5ae8:	400c      	ands	r4, r1
    5aea:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    5aec:	a801      	add	r0, sp, #4
    5aee:	4b31      	ldr	r3, [pc, #196]	; (5bb4 <sd_mmc_select_slot+0x100>)
    5af0:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    5af2:	f005 031f 	and.w	r3, r5, #31
    5af6:	2201      	movs	r2, #1
    5af8:	fa02 f303 	lsl.w	r3, r2, r3
    5afc:	4223      	tst	r3, r4
    5afe:	bf08      	it	eq
    5b00:	2200      	moveq	r2, #0
    5b02:	4b29      	ldr	r3, [pc, #164]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b04:	68db      	ldr	r3, [r3, #12]
    5b06:	885b      	ldrh	r3, [r3, #2]
    5b08:	429a      	cmp	r2, r3
    5b0a:	d004      	beq.n	5b16 <sd_mmc_select_slot+0x62>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    5b0c:	2204      	movs	r2, #4
    5b0e:	4b26      	ldr	r3, [pc, #152]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b10:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    5b12:	2002      	movs	r0, #2
    5b14:	e039      	b.n	5b8a <sd_mmc_select_slot+0xd6>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    5b16:	4b24      	ldr	r3, [pc, #144]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b18:	7e9b      	ldrb	r3, [r3, #26]
    5b1a:	2b04      	cmp	r3, #4
    5b1c:	d005      	beq.n	5b2a <sd_mmc_select_slot+0x76>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    5b1e:	2b01      	cmp	r3, #1
    5b20:	d008      	beq.n	5b34 <sd_mmc_select_slot+0x80>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    5b22:	2b03      	cmp	r3, #3
    5b24:	d117      	bne.n	5b56 <sd_mmc_select_slot+0xa2>
			return SD_MMC_ERR_UNUSABLE;
    5b26:	2003      	movs	r0, #3
    5b28:	e02f      	b.n	5b8a <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    5b2a:	2201      	movs	r2, #1
    5b2c:	4b1e      	ldr	r3, [pc, #120]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b2e:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    5b30:	2002      	movs	r0, #2
    5b32:	e02a      	b.n	5b8a <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    5b34:	4b1c      	ldr	r3, [pc, #112]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b36:	2202      	movs	r2, #2
    5b38:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    5b3a:	4a1f      	ldr	r2, [pc, #124]	; (5bb8 <sd_mmc_select_slot+0x104>)
    5b3c:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    5b3e:	2201      	movs	r2, #1
    5b40:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    5b42:	2200      	movs	r2, #0
    5b44:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    5b48:	e005      	b.n	5b56 <sd_mmc_select_slot+0xa2>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    5b4a:	4b17      	ldr	r3, [pc, #92]	; (5ba8 <sd_mmc_select_slot+0xf4>)
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    5b4c:	7e9b      	ldrb	r3, [r3, #26]
    5b4e:	3b03      	subs	r3, #3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    5b50:	b2db      	uxtb	r3, r3
    5b52:	2b01      	cmp	r3, #1
    5b54:	d91b      	bls.n	5b8e <sd_mmc_select_slot+0xda>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    5b56:	4b14      	ldr	r3, [pc, #80]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b58:	791b      	ldrb	r3, [r3, #4]
    5b5a:	b31b      	cbz	r3, 5ba4 <sd_mmc_select_slot+0xf0>
    5b5c:	4b12      	ldr	r3, [pc, #72]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b5e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    5b60:	fab0 f080 	clz	r0, r0
    5b64:	0940      	lsrs	r0, r0, #5
    5b66:	f240 422c 	movw	r2, #1068	; 0x42c
    5b6a:	4914      	ldr	r1, [pc, #80]	; (5bbc <sd_mmc_select_slot+0x108>)
    5b6c:	4b14      	ldr	r3, [pc, #80]	; (5bc0 <sd_mmc_select_slot+0x10c>)
    5b6e:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    5b70:	4c0d      	ldr	r4, [pc, #52]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b72:	2300      	movs	r3, #0
    5b74:	7123      	strb	r3, [r4, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    5b76:	f104 0310 	add.w	r3, r4, #16
    5b7a:	6023      	str	r3, [r4, #0]
	sd_mmc_configure_slot();
    5b7c:	4b11      	ldr	r3, [pc, #68]	; (5bc4 <sd_mmc_select_slot+0x110>)
    5b7e:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    5b80:	7ea0      	ldrb	r0, [r4, #26]
    5b82:	2802      	cmp	r0, #2
    5b84:	bf14      	ite	ne
    5b86:	2000      	movne	r0, #0
    5b88:	2001      	moveq	r0, #1
}
    5b8a:	b003      	add	sp, #12
    5b8c:	bd30      	pop	{r4, r5, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    5b8e:	4b06      	ldr	r3, [pc, #24]	; (5ba8 <sd_mmc_select_slot+0xf4>)
    5b90:	2202      	movs	r2, #2
    5b92:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    5b94:	4a08      	ldr	r2, [pc, #32]	; (5bb8 <sd_mmc_select_slot+0x104>)
    5b96:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    5b98:	2201      	movs	r2, #1
    5b9a:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    5b9c:	2200      	movs	r2, #0
    5b9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    5ba2:	e7d8      	b.n	5b56 <sd_mmc_select_slot+0xa2>
    5ba4:	2001      	movs	r0, #1
    5ba6:	e7de      	b.n	5b66 <sd_mmc_select_slot+0xb2>
    5ba8:	20001688 	.word	0x20001688
    5bac:	00002689 	.word	0x00002689
    5bb0:	41008000 	.word	0x41008000
    5bb4:	00002697 	.word	0x00002697
    5bb8:	00061a80 	.word	0x00061a80
    5bbc:	0000cad8 	.word	0x0000cad8
    5bc0:	00002d05 	.word	0x00002d05
    5bc4:	00005a89 	.word	0x00005a89

00005bc8 <sdio_cmd52>:
{
    5bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bcc:	4606      	mov	r6, r0
    5bce:	460f      	mov	r7, r1
    5bd0:	4614      	mov	r4, r2
    5bd2:	4698      	mov	r8, r3
    5bd4:	9d06      	ldr	r5, [sp, #24]
	ASSERT(io_data != NULL);
    5bd6:	f240 3276 	movw	r2, #886	; 0x376
    5bda:	4910      	ldr	r1, [pc, #64]	; (5c1c <sdio_cmd52+0x54>)
    5bdc:	1c28      	adds	r0, r5, #0
    5bde:	bf18      	it	ne
    5be0:	2001      	movne	r0, #1
    5be2:	4b0f      	ldr	r3, [pc, #60]	; (5c20 <sdio_cmd52+0x58>)
    5be4:	4798      	blx	r3
	                         | ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
    5be6:	0260      	lsls	r0, r4, #9
	if (!driver_send_cmd(sd_mmc_hal,
    5be8:	ea40 60c8 	orr.w	r0, r0, r8, lsl #27
    5bec:	ea40 7007 	orr.w	r0, r0, r7, lsl #28
    5bf0:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    5bf4:	782a      	ldrb	r2, [r5, #0]
	if (!driver_send_cmd(sd_mmc_hal,
    5bf6:	4302      	orrs	r2, r0
    5bf8:	f241 3134 	movw	r1, #4916	; 0x1334
    5bfc:	4b09      	ldr	r3, [pc, #36]	; (5c24 <sdio_cmd52+0x5c>)
    5bfe:	6898      	ldr	r0, [r3, #8]
    5c00:	4b09      	ldr	r3, [pc, #36]	; (5c28 <sdio_cmd52+0x60>)
    5c02:	4798      	blx	r3
    5c04:	4604      	mov	r4, r0
    5c06:	b910      	cbnz	r0, 5c0e <sdio_cmd52+0x46>
}
    5c08:	4620      	mov	r0, r4
    5c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    5c0e:	4b05      	ldr	r3, [pc, #20]	; (5c24 <sdio_cmd52+0x5c>)
    5c10:	6898      	ldr	r0, [r3, #8]
    5c12:	4b06      	ldr	r3, [pc, #24]	; (5c2c <sdio_cmd52+0x64>)
    5c14:	4798      	blx	r3
    5c16:	7028      	strb	r0, [r5, #0]
	return true;
    5c18:	e7f6      	b.n	5c08 <sdio_cmd52+0x40>
    5c1a:	bf00      	nop
    5c1c:	0000cad8 	.word	0x0000cad8
    5c20:	00002d05 	.word	0x00002d05
    5c24:	20001688 	.word	0x20001688
    5c28:	000029e9 	.word	0x000029e9
    5c2c:	00002a19 	.word	0x00002a19

00005c30 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    5c30:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    5c32:	4b05      	ldr	r3, [pc, #20]	; (5c48 <sd_mmc_deselect_slot+0x18>)
    5c34:	791b      	ldrb	r3, [r3, #4]
    5c36:	b103      	cbz	r3, 5c3a <sd_mmc_deselect_slot+0xa>
    5c38:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    5c3a:	2100      	movs	r1, #0
    5c3c:	4b02      	ldr	r3, [pc, #8]	; (5c48 <sd_mmc_deselect_slot+0x18>)
    5c3e:	6898      	ldr	r0, [r3, #8]
    5c40:	4b02      	ldr	r3, [pc, #8]	; (5c4c <sd_mmc_deselect_slot+0x1c>)
    5c42:	4798      	blx	r3
	}
}
    5c44:	e7f8      	b.n	5c38 <sd_mmc_deselect_slot+0x8>
    5c46:	bf00      	nop
    5c48:	20001688 	.word	0x20001688
    5c4c:	00002941 	.word	0x00002941

00005c50 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    5c50:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    5c52:	4b05      	ldr	r3, [pc, #20]	; (5c68 <sd_mmc_init+0x18>)
    5c54:	2404      	movs	r4, #4
    5c56:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    5c58:	24ff      	movs	r4, #255	; 0xff
    5c5a:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    5c5c:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    5c5e:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    5c60:	635a      	str	r2, [r3, #52]	; 0x34
}
    5c62:	bc10      	pop	{r4}
    5c64:	4770      	bx	lr
    5c66:	bf00      	nop
    5c68:	20001688 	.word	0x20001688

00005c6c <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    5c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c70:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    5c72:	4baa      	ldr	r3, [pc, #680]	; (5f1c <sd_mmc_check+0x2b0>)
    5c74:	4798      	blx	r3
    5c76:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    5c78:	2801      	cmp	r0, #1
    5c7a:	d005      	beq.n	5c88 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
    5c7c:	4ba8      	ldr	r3, [pc, #672]	; (5f20 <sd_mmc_check+0x2b4>)
    5c7e:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    5c80:	4620      	mov	r0, r4
    5c82:	b015      	add	sp, #84	; 0x54
    5c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
    5c88:	af14      	add	r7, sp, #80	; 0x50
    5c8a:	2308      	movs	r3, #8
    5c8c:	f807 3d45 	strb.w	r3, [r7, #-69]!
	sd_mmc_card->type    = CARD_TYPE_SD;
    5c90:	4ea4      	ldr	r6, [pc, #656]	; (5f24 <sd_mmc_check+0x2b8>)
    5c92:	6833      	ldr	r3, [r6, #0]
    5c94:	f04f 0801 	mov.w	r8, #1
    5c98:	f883 800b 	strb.w	r8, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    5c9c:	2500      	movs	r5, #0
    5c9e:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca     = 0;
    5ca0:	811d      	strh	r5, [r3, #8]
	driver_send_clock(sd_mmc_hal);
    5ca2:	68b0      	ldr	r0, [r6, #8]
    5ca4:	4ba0      	ldr	r3, [pc, #640]	; (5f28 <sd_mmc_check+0x2bc>)
    5ca6:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    5ca8:	9700      	str	r7, [sp, #0]
    5caa:	462b      	mov	r3, r5
    5cac:	2206      	movs	r2, #6
    5cae:	4629      	mov	r1, r5
    5cb0:	4640      	mov	r0, r8
    5cb2:	4f9e      	ldr	r7, [pc, #632]	; (5f2c <sd_mmc_check+0x2c0>)
    5cb4:	47b8      	blx	r7
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    5cb6:	462a      	mov	r2, r5
    5cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    5cbc:	68b0      	ldr	r0, [r6, #8]
    5cbe:	4b9c      	ldr	r3, [pc, #624]	; (5f30 <sd_mmc_check+0x2c4>)
    5cc0:	4798      	blx	r3
    5cc2:	b930      	cbnz	r0, 5cd2 <sd_mmc_check+0x66>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    5cc4:	4b97      	ldr	r3, [pc, #604]	; (5f24 <sd_mmc_check+0x2b8>)
    5cc6:	681b      	ldr	r3, [r3, #0]
    5cc8:	2403      	movs	r4, #3
    5cca:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    5ccc:	4b94      	ldr	r3, [pc, #592]	; (5f20 <sd_mmc_check+0x2b4>)
    5cce:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    5cd0:	e7d6      	b.n	5c80 <sd_mmc_check+0x14>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    5cd2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    5cd6:	f245 5108 	movw	r1, #21768	; 0x5508
    5cda:	68b0      	ldr	r0, [r6, #8]
    5cdc:	4b94      	ldr	r3, [pc, #592]	; (5f30 <sd_mmc_check+0x2c4>)
    5cde:	4798      	blx	r3
    5ce0:	2800      	cmp	r0, #0
    5ce2:	f040 80a4 	bne.w	5e2e <sd_mmc_check+0x1c2>
	*v2 = 0;
    5ce6:	f04f 0800 	mov.w	r8, #0
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    5cea:	2200      	movs	r2, #0
    5cec:	f244 5105 	movw	r1, #17669	; 0x4505
    5cf0:	4b8c      	ldr	r3, [pc, #560]	; (5f24 <sd_mmc_check+0x2b8>)
    5cf2:	6898      	ldr	r0, [r3, #8]
    5cf4:	4b8e      	ldr	r3, [pc, #568]	; (5f30 <sd_mmc_check+0x2c4>)
    5cf6:	4798      	blx	r3
    5cf8:	2800      	cmp	r0, #0
    5cfa:	f040 80a6 	bne.w	5e4a <sd_mmc_check+0x1de>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5cfe:	4b89      	ldr	r3, [pc, #548]	; (5f24 <sd_mmc_check+0x2b8>)
    5d00:	681b      	ldr	r3, [r3, #0]
    5d02:	7adb      	ldrb	r3, [r3, #11]
    5d04:	f013 0f01 	tst.w	r3, #1
    5d08:	f040 80c9 	bne.w	5e9e <sd_mmc_check+0x232>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    5d0c:	2200      	movs	r2, #0
    5d0e:	f245 1103 	movw	r1, #20739	; 0x5103
    5d12:	4b84      	ldr	r3, [pc, #528]	; (5f24 <sd_mmc_check+0x2b8>)
    5d14:	6898      	ldr	r0, [r3, #8]
    5d16:	4b86      	ldr	r3, [pc, #536]	; (5f30 <sd_mmc_check+0x2c4>)
    5d18:	4798      	blx	r3
    5d1a:	2800      	cmp	r0, #0
    5d1c:	d0d2      	beq.n	5cc4 <sd_mmc_check+0x58>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    5d1e:	4d81      	ldr	r5, [pc, #516]	; (5f24 <sd_mmc_check+0x2b8>)
    5d20:	682e      	ldr	r6, [r5, #0]
    5d22:	68a8      	ldr	r0, [r5, #8]
    5d24:	4b83      	ldr	r3, [pc, #524]	; (5f34 <sd_mmc_check+0x2c8>)
    5d26:	4798      	blx	r3
    5d28:	0c00      	lsrs	r0, r0, #16
    5d2a:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5d2c:	682b      	ldr	r3, [r5, #0]
    5d2e:	7ada      	ldrb	r2, [r3, #11]
    5d30:	f012 0f01 	tst.w	r2, #1
    5d34:	d03e      	beq.n	5db4 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    5d36:	891a      	ldrh	r2, [r3, #8]
    5d38:	0412      	lsls	r2, r2, #16
    5d3a:	f641 3109 	movw	r1, #6921	; 0x1b09
    5d3e:	68a8      	ldr	r0, [r5, #8]
    5d40:	4b7b      	ldr	r3, [pc, #492]	; (5f30 <sd_mmc_check+0x2c4>)
    5d42:	4798      	blx	r3
    5d44:	2800      	cmp	r0, #0
    5d46:	d0bd      	beq.n	5cc4 <sd_mmc_check+0x58>
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    5d48:	6829      	ldr	r1, [r5, #0]
    5d4a:	310e      	adds	r1, #14
    5d4c:	68a8      	ldr	r0, [r5, #8]
    5d4e:	4b7a      	ldr	r3, [pc, #488]	; (5f38 <sd_mmc_check+0x2cc>)
    5d50:	4798      	blx	r3
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    5d52:	682a      	ldr	r2, [r5, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    5d54:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    5d56:	4b79      	ldr	r3, [pc, #484]	; (5f3c <sd_mmc_check+0x2d0>)
    5d58:	f001 0007 	and.w	r0, r1, #7
	sd_mmc_card->clock = unit * mul * 1000;
    5d5c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    5d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5d64:	fb00 f005 	mul.w	r0, r0, r5
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    5d68:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    5d6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    5d70:	69db      	ldr	r3, [r3, #28]
    5d72:	fb03 f300 	mul.w	r3, r3, r0
    5d76:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    5d78:	7b93      	ldrb	r3, [r2, #14]
    5d7a:	099b      	lsrs	r3, r3, #6
    5d7c:	f040 80e2 	bne.w	5f44 <sd_mmc_check+0x2d8>
    5d80:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    5d82:	7d50      	ldrb	r0, [r2, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    5d84:	7d13      	ldrb	r3, [r2, #20]
    5d86:	029b      	lsls	r3, r3, #10
    5d88:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    5d8c:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    5d90:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    5d92:	7dd1      	ldrb	r1, [r2, #23]
    5d94:	0049      	lsls	r1, r1, #1
    5d96:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    5d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    5d9e:	3301      	adds	r3, #1
    5da0:	f001 0107 	and.w	r1, r1, #7
    5da4:	3102      	adds	r1, #2
		uint32_t blocknr
    5da6:	408b      	lsls	r3, r1
    5da8:	7cd1      	ldrb	r1, [r2, #19]
    5daa:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    5dae:	408b      	lsls	r3, r1
    5db0:	0a9b      	lsrs	r3, r3, #10
    5db2:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    5db4:	4b5b      	ldr	r3, [pc, #364]	; (5f24 <sd_mmc_check+0x2b8>)
    5db6:	681a      	ldr	r2, [r3, #0]
    5db8:	8912      	ldrh	r2, [r2, #8]
    5dba:	0412      	lsls	r2, r2, #16
    5dbc:	f243 1107 	movw	r1, #12551	; 0x3107
    5dc0:	6898      	ldr	r0, [r3, #8]
    5dc2:	4b5b      	ldr	r3, [pc, #364]	; (5f30 <sd_mmc_check+0x2c4>)
    5dc4:	4798      	blx	r3
    5dc6:	2800      	cmp	r0, #0
    5dc8:	f43f af7c 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5dcc:	4b55      	ldr	r3, [pc, #340]	; (5f24 <sd_mmc_check+0x2b8>)
    5dce:	681b      	ldr	r3, [r3, #0]
    5dd0:	7ada      	ldrb	r2, [r3, #11]
    5dd2:	f012 0f01 	tst.w	r2, #1
    5dd6:	f040 80c2 	bne.w	5f5e <sd_mmc_check+0x2f2>
	if (IS_SDIO()) {
    5dda:	4b52      	ldr	r3, [pc, #328]	; (5f24 <sd_mmc_check+0x2b8>)
    5ddc:	681b      	ldr	r3, [r3, #0]
    5dde:	7adb      	ldrb	r3, [r3, #11]
    5de0:	f013 0f04 	tst.w	r3, #4
    5de4:	f000 8152 	beq.w	608c <sd_mmc_check+0x420>
    5de8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    5dea:	2700      	movs	r7, #0
    5dec:	4e4f      	ldr	r6, [pc, #316]	; (5f2c <sd_mmc_check+0x2c0>)
    5dee:	f1a5 0309 	sub.w	r3, r5, #9
    5df2:	aa03      	add	r2, sp, #12
    5df4:	4413      	add	r3, r2
    5df6:	9300      	str	r3, [sp, #0]
    5df8:	463b      	mov	r3, r7
    5dfa:	462a      	mov	r2, r5
    5dfc:	4639      	mov	r1, r7
    5dfe:	4638      	mov	r0, r7
    5e00:	47b0      	blx	r6
		addr_old++;
    5e02:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    5e04:	2d0d      	cmp	r5, #13
    5e06:	d1f2      	bne.n	5dee <sd_mmc_check+0x182>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    5e08:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5e0c:	f89d 900c 	ldrb.w	r9, [sp, #12]
    5e10:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    5e14:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5e18:	eb09 4903 	add.w	r9, r9, r3, lsl #16
    5e1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e20:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
    5e24:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    5e26:	f04f 0800 	mov.w	r8, #0
    5e2a:	4f40      	ldr	r7, [pc, #256]	; (5f2c <sd_mmc_check+0x2c0>)
    5e2c:	e0ed      	b.n	600a <sd_mmc_check+0x39e>
	resp = driver_get_response(sd_mmc_hal);
    5e2e:	68b0      	ldr	r0, [r6, #8]
    5e30:	4b40      	ldr	r3, [pc, #256]	; (5f34 <sd_mmc_check+0x2c8>)
    5e32:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    5e34:	f1b0 3fff 	cmp.w	r0, #4294967295
    5e38:	f000 8227 	beq.w	628a <sd_mmc_check+0x61e>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    5e3c:	f3c0 000b 	ubfx	r0, r0, #0, #12
    5e40:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    5e44:	f47f af3e 	bne.w	5cc4 <sd_mmc_check+0x58>
    5e48:	e74f      	b.n	5cea <sd_mmc_check+0x7e>
	resp = driver_get_response(sd_mmc_hal);
    5e4a:	4b36      	ldr	r3, [pc, #216]	; (5f24 <sd_mmc_check+0x2b8>)
    5e4c:	6898      	ldr	r0, [r3, #8]
    5e4e:	4b39      	ldr	r3, [pc, #228]	; (5f34 <sd_mmc_check+0x2c8>)
    5e50:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    5e52:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    5e56:	f43f af52 	beq.w	5cfe <sd_mmc_check+0x92>
    5e5a:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    5e5e:	4e31      	ldr	r6, [pc, #196]	; (5f24 <sd_mmc_check+0x2b8>)
    5e60:	4f33      	ldr	r7, [pc, #204]	; (5f30 <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    5e62:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 5f34 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    5e66:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    5e6a:	f244 5105 	movw	r1, #17669	; 0x4505
    5e6e:	68b0      	ldr	r0, [r6, #8]
    5e70:	47b8      	blx	r7
    5e72:	2800      	cmp	r0, #0
    5e74:	f43f af26 	beq.w	5cc4 <sd_mmc_check+0x58>
		resp = driver_get_response(sd_mmc_hal);
    5e78:	68b0      	ldr	r0, [r6, #8]
    5e7a:	47c8      	blx	r9
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    5e7c:	2800      	cmp	r0, #0
    5e7e:	db02      	blt.n	5e86 <sd_mmc_check+0x21a>
		if (cmd5_retry-- == 0) {
    5e80:	3d01      	subs	r5, #1
    5e82:	d1f0      	bne.n	5e66 <sd_mmc_check+0x1fa>
    5e84:	e71e      	b.n	5cc4 <sd_mmc_check+0x58>
	if ((resp & OCR_SDIO_MP) > 0) {
    5e86:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    5e8a:	d104      	bne.n	5e96 <sd_mmc_check+0x22a>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    5e8c:	4b25      	ldr	r3, [pc, #148]	; (5f24 <sd_mmc_check+0x2b8>)
    5e8e:	681b      	ldr	r3, [r3, #0]
    5e90:	2204      	movs	r2, #4
    5e92:	72da      	strb	r2, [r3, #11]
    5e94:	e73a      	b.n	5d0c <sd_mmc_check+0xa0>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    5e96:	4b23      	ldr	r3, [pc, #140]	; (5f24 <sd_mmc_check+0x2b8>)
    5e98:	681b      	ldr	r3, [r3, #0]
    5e9a:	2205      	movs	r2, #5
    5e9c:	72da      	strb	r2, [r3, #11]
    5e9e:	f1b8 0f00 	cmp.w	r8, #0
    5ea2:	4b27      	ldr	r3, [pc, #156]	; (5f40 <sd_mmc_check+0x2d4>)
    5ea4:	bf14      	ite	ne
    5ea6:	4698      	movne	r8, r3
    5ea8:	f44f 18fc 	moveq.w	r8, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
    5eac:	f640 0635 	movw	r6, #2101	; 0x835
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    5eb0:	4d1c      	ldr	r5, [pc, #112]	; (5f24 <sd_mmc_check+0x2b8>)
    5eb2:	4f1f      	ldr	r7, [pc, #124]	; (5f30 <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    5eb4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 5f34 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    5eb8:	2200      	movs	r2, #0
    5eba:	f241 1137 	movw	r1, #4407	; 0x1137
    5ebe:	68a8      	ldr	r0, [r5, #8]
    5ec0:	47b8      	blx	r7
    5ec2:	b158      	cbz	r0, 5edc <sd_mmc_check+0x270>
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    5ec4:	4642      	mov	r2, r8
    5ec6:	f244 5129 	movw	r1, #17705	; 0x4529
    5eca:	68a8      	ldr	r0, [r5, #8]
    5ecc:	47b8      	blx	r7
    5ece:	b128      	cbz	r0, 5edc <sd_mmc_check+0x270>
		resp = driver_get_response(sd_mmc_hal);
    5ed0:	68a8      	ldr	r0, [r5, #8]
    5ed2:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
    5ed4:	2800      	cmp	r0, #0
    5ed6:	db06      	blt.n	5ee6 <sd_mmc_check+0x27a>
		if (retry-- == 0) {
    5ed8:	3e01      	subs	r6, #1
    5eda:	d1ed      	bne.n	5eb8 <sd_mmc_check+0x24c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    5edc:	4b11      	ldr	r3, [pc, #68]	; (5f24 <sd_mmc_check+0x2b8>)
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	2200      	movs	r2, #0
    5ee2:	72da      	strb	r2, [r3, #11]
    5ee4:	e6ee      	b.n	5cc4 <sd_mmc_check+0x58>
			if ((resp & OCR_CCS) != 0) {
    5ee6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    5eea:	d005      	beq.n	5ef8 <sd_mmc_check+0x28c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    5eec:	4b0d      	ldr	r3, [pc, #52]	; (5f24 <sd_mmc_check+0x2b8>)
    5eee:	681a      	ldr	r2, [r3, #0]
    5ef0:	7ad3      	ldrb	r3, [r2, #11]
    5ef2:	f043 0308 	orr.w	r3, r3, #8
    5ef6:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5ef8:	4b0a      	ldr	r3, [pc, #40]	; (5f24 <sd_mmc_check+0x2b8>)
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	7adb      	ldrb	r3, [r3, #11]
    5efe:	f013 0f01 	tst.w	r3, #1
    5f02:	f43f af03 	beq.w	5d0c <sd_mmc_check+0xa0>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    5f06:	2200      	movs	r2, #0
    5f08:	f645 3102 	movw	r1, #23298	; 0x5b02
    5f0c:	4b05      	ldr	r3, [pc, #20]	; (5f24 <sd_mmc_check+0x2b8>)
    5f0e:	6898      	ldr	r0, [r3, #8]
    5f10:	4b07      	ldr	r3, [pc, #28]	; (5f30 <sd_mmc_check+0x2c4>)
    5f12:	4798      	blx	r3
    5f14:	2800      	cmp	r0, #0
    5f16:	f47f aef9 	bne.w	5d0c <sd_mmc_check+0xa0>
    5f1a:	e6d3      	b.n	5cc4 <sd_mmc_check+0x58>
    5f1c:	00005ab5 	.word	0x00005ab5
    5f20:	00005c31 	.word	0x00005c31
    5f24:	20001688 	.word	0x20001688
    5f28:	000029c1 	.word	0x000029c1
    5f2c:	00005bc9 	.word	0x00005bc9
    5f30:	000029e9 	.word	0x000029e9
    5f34:	00002a19 	.word	0x00002a19
    5f38:	00002a41 	.word	0x00002a41
    5f3c:	0000ca3c 	.word	0x0000ca3c
    5f40:	401f8000 	.word	0x401f8000
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    5f44:	7dd1      	ldrb	r1, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    5f46:	7d90      	ldrb	r0, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    5f48:	7d53      	ldrb	r3, [r2, #21]
    5f4a:	041b      	lsls	r3, r3, #16
    5f4c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    5f50:	430b      	orrs	r3, r1
	value &= ((uint32_t)1 << size) - 1;
    5f52:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    5f56:	3301      	adds	r3, #1
    5f58:	025b      	lsls	r3, r3, #9
    5f5a:	6053      	str	r3, [r2, #4]
    5f5c:	e72a      	b.n	5db4 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    5f5e:	891a      	ldrh	r2, [r3, #8]
    5f60:	0412      	lsls	r2, r2, #16
    5f62:	f241 1137 	movw	r1, #4407	; 0x1137
    5f66:	4b9a      	ldr	r3, [pc, #616]	; (61d0 <sd_mmc_check+0x564>)
    5f68:	6898      	ldr	r0, [r3, #8]
    5f6a:	4b9a      	ldr	r3, [pc, #616]	; (61d4 <sd_mmc_check+0x568>)
    5f6c:	4798      	blx	r3
    5f6e:	2800      	cmp	r0, #0
    5f70:	f43f aea8 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    5f74:	2301      	movs	r3, #1
    5f76:	9301      	str	r3, [sp, #4]
    5f78:	9300      	str	r3, [sp, #0]
    5f7a:	2308      	movs	r3, #8
    5f7c:	2200      	movs	r2, #0
    5f7e:	4996      	ldr	r1, [pc, #600]	; (61d8 <sd_mmc_check+0x56c>)
    5f80:	4893      	ldr	r0, [pc, #588]	; (61d0 <sd_mmc_check+0x564>)
    5f82:	6880      	ldr	r0, [r0, #8]
    5f84:	4d95      	ldr	r5, [pc, #596]	; (61dc <sd_mmc_check+0x570>)
    5f86:	47a8      	blx	r5
    5f88:	2800      	cmp	r0, #0
    5f8a:	f43f ae9b 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    5f8e:	2201      	movs	r2, #1
    5f90:	a904      	add	r1, sp, #16
    5f92:	4b8f      	ldr	r3, [pc, #572]	; (61d0 <sd_mmc_check+0x564>)
    5f94:	6898      	ldr	r0, [r3, #8]
    5f96:	4b92      	ldr	r3, [pc, #584]	; (61e0 <sd_mmc_check+0x574>)
    5f98:	4798      	blx	r3
    5f9a:	2800      	cmp	r0, #0
    5f9c:	f43f ae92 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    5fa0:	4b8b      	ldr	r3, [pc, #556]	; (61d0 <sd_mmc_check+0x564>)
    5fa2:	6898      	ldr	r0, [r3, #8]
    5fa4:	4b8f      	ldr	r3, [pc, #572]	; (61e4 <sd_mmc_check+0x578>)
    5fa6:	4798      	blx	r3
    5fa8:	2800      	cmp	r0, #0
    5faa:	f43f ae8b 	beq.w	5cc4 <sd_mmc_check+0x58>
	switch (SD_SCR_SD_SPEC(scr)) {
    5fae:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5fb2:	f003 030f 	and.w	r3, r3, #15
    5fb6:	2b01      	cmp	r3, #1
    5fb8:	d00c      	beq.n	5fd4 <sd_mmc_check+0x368>
    5fba:	b133      	cbz	r3, 5fca <sd_mmc_check+0x35e>
    5fbc:	2b02      	cmp	r3, #2
    5fbe:	d00e      	beq.n	5fde <sd_mmc_check+0x372>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    5fc0:	4b83      	ldr	r3, [pc, #524]	; (61d0 <sd_mmc_check+0x564>)
    5fc2:	681b      	ldr	r3, [r3, #0]
    5fc4:	2210      	movs	r2, #16
    5fc6:	731a      	strb	r2, [r3, #12]
    5fc8:	e707      	b.n	5dda <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    5fca:	4b81      	ldr	r3, [pc, #516]	; (61d0 <sd_mmc_check+0x564>)
    5fcc:	681b      	ldr	r3, [r3, #0]
    5fce:	2210      	movs	r2, #16
    5fd0:	731a      	strb	r2, [r3, #12]
    5fd2:	e702      	b.n	5dda <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    5fd4:	4b7e      	ldr	r3, [pc, #504]	; (61d0 <sd_mmc_check+0x564>)
    5fd6:	681b      	ldr	r3, [r3, #0]
    5fd8:	221a      	movs	r2, #26
    5fda:	731a      	strb	r2, [r3, #12]
    5fdc:	e6fd      	b.n	5dda <sd_mmc_check+0x16e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    5fde:	f89d 3012 	ldrb.w	r3, [sp, #18]
    5fe2:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
    5fe4:	4b7a      	ldr	r3, [pc, #488]	; (61d0 <sd_mmc_check+0x564>)
    5fe6:	681b      	ldr	r3, [r3, #0]
    5fe8:	bf14      	ite	ne
    5fea:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
    5fec:	2220      	moveq	r2, #32
    5fee:	731a      	strb	r2, [r3, #12]
    5ff0:	e6f3      	b.n	5dda <sd_mmc_check+0x16e>
		if (buf[1] == 0) {
    5ff2:	f89d 3011 	ldrb.w	r3, [sp, #17]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	f43f ae64 	beq.w	5cc4 <sd_mmc_check+0x58>
		addr_new += buf[1] - 1;
    5ffc:	3302      	adds	r3, #2
    5ffe:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
    6000:	f509 7380 	add.w	r3, r9, #256	; 0x100
    6004:	429e      	cmp	r6, r3
    6006:	f63f ae5d 	bhi.w	5cc4 <sd_mmc_check+0x58>
	addr_new = addr_old;
    600a:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    600c:	ab04      	add	r3, sp, #16
    600e:	442b      	add	r3, r5
    6010:	9300      	str	r3, [sp, #0]
    6012:	4643      	mov	r3, r8
    6014:	19aa      	adds	r2, r5, r6
    6016:	4641      	mov	r1, r8
    6018:	4640      	mov	r0, r8
    601a:	47b8      	blx	r7
    601c:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    601e:	2d03      	cmp	r5, #3
    6020:	d1f4      	bne.n	600c <sd_mmc_check+0x3a0>
		if (buf[0] == SDIO_CISTPL_END) {
    6022:	f89d 3010 	ldrb.w	r3, [sp, #16]
    6026:	2bff      	cmp	r3, #255	; 0xff
    6028:	f43f ae4c 	beq.w	5cc4 <sd_mmc_check+0x58>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    602c:	2b22      	cmp	r3, #34	; 0x22
    602e:	d1e0      	bne.n	5ff2 <sd_mmc_check+0x386>
    6030:	f89d 3012 	ldrb.w	r3, [sp, #18]
    6034:	2b00      	cmp	r3, #0
    6036:	d1dc      	bne.n	5ff2 <sd_mmc_check+0x386>
    6038:	f106 0906 	add.w	r9, r6, #6
	addr_new -= 3;
    603c:	4635      	mov	r5, r6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    603e:	f04f 0800 	mov.w	r8, #0
    6042:	4f69      	ldr	r7, [pc, #420]	; (61e8 <sd_mmc_check+0x57c>)
    6044:	1bab      	subs	r3, r5, r6
    6046:	aa04      	add	r2, sp, #16
    6048:	4413      	add	r3, r2
    604a:	9300      	str	r3, [sp, #0]
    604c:	4643      	mov	r3, r8
    604e:	462a      	mov	r2, r5
    6050:	4641      	mov	r1, r8
    6052:	4640      	mov	r0, r8
    6054:	47b8      	blx	r7
		addr_new++;
    6056:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    6058:	45a9      	cmp	r9, r5
    605a:	d1f3      	bne.n	6044 <sd_mmc_check+0x3d8>
	tplfe_max_tran_speed = buf[5];
    605c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6060:	2b32      	cmp	r3, #50	; 0x32
    6062:	bf28      	it	cs
    6064:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
    6066:	4a5a      	ldr	r2, [pc, #360]	; (61d0 <sd_mmc_check+0x564>)
    6068:	6810      	ldr	r0, [r2, #0]
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    606a:	4a60      	ldr	r2, [pc, #384]	; (61ec <sd_mmc_check+0x580>)
    606c:	f003 0107 	and.w	r1, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
    6070:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
    6074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6078:	fb01 f105 	mul.w	r1, r1, r5
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    607c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    6080:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    6084:	69db      	ldr	r3, [r3, #28]
    6086:	fb03 f301 	mul.w	r3, r3, r1
    608a:	6003      	str	r3, [r0, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    608c:	4b50      	ldr	r3, [pc, #320]	; (61d0 <sd_mmc_check+0x564>)
    608e:	7919      	ldrb	r1, [r3, #4]
    6090:	6898      	ldr	r0, [r3, #8]
    6092:	4b57      	ldr	r3, [pc, #348]	; (61f0 <sd_mmc_check+0x584>)
    6094:	4798      	blx	r3
    6096:	2803      	cmp	r0, #3
    6098:	d926      	bls.n	60e8 <sd_mmc_check+0x47c>
		if (IS_SDIO()) {
    609a:	4b4d      	ldr	r3, [pc, #308]	; (61d0 <sd_mmc_check+0x564>)
    609c:	681b      	ldr	r3, [r3, #0]
    609e:	7adb      	ldrb	r3, [r3, #11]
    60a0:	f013 0f04 	tst.w	r3, #4
    60a4:	d14e      	bne.n	6144 <sd_mmc_check+0x4d8>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    60a6:	4b4a      	ldr	r3, [pc, #296]	; (61d0 <sd_mmc_check+0x564>)
    60a8:	681b      	ldr	r3, [r3, #0]
    60aa:	7ada      	ldrb	r2, [r3, #11]
    60ac:	f012 0f01 	tst.w	r2, #1
    60b0:	d018      	beq.n	60e4 <sd_mmc_check+0x478>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    60b2:	891a      	ldrh	r2, [r3, #8]
    60b4:	0412      	lsls	r2, r2, #16
    60b6:	f241 1137 	movw	r1, #4407	; 0x1137
    60ba:	4b45      	ldr	r3, [pc, #276]	; (61d0 <sd_mmc_check+0x564>)
    60bc:	6898      	ldr	r0, [r3, #8]
    60be:	4b45      	ldr	r3, [pc, #276]	; (61d4 <sd_mmc_check+0x568>)
    60c0:	4798      	blx	r3
    60c2:	2800      	cmp	r0, #0
    60c4:	f43f adfe 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    60c8:	2202      	movs	r2, #2
    60ca:	f241 1106 	movw	r1, #4358	; 0x1106
    60ce:	4b40      	ldr	r3, [pc, #256]	; (61d0 <sd_mmc_check+0x564>)
    60d0:	6898      	ldr	r0, [r3, #8]
    60d2:	4b40      	ldr	r3, [pc, #256]	; (61d4 <sd_mmc_check+0x568>)
    60d4:	4798      	blx	r3
    60d6:	2800      	cmp	r0, #0
    60d8:	f43f adf4 	beq.w	5cc4 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    60dc:	4b3c      	ldr	r3, [pc, #240]	; (61d0 <sd_mmc_check+0x564>)
    60de:	681b      	ldr	r3, [r3, #0]
    60e0:	2204      	movs	r2, #4
    60e2:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
    60e4:	4b43      	ldr	r3, [pc, #268]	; (61f4 <sd_mmc_check+0x588>)
    60e6:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    60e8:	4b39      	ldr	r3, [pc, #228]	; (61d0 <sd_mmc_check+0x564>)
    60ea:	6898      	ldr	r0, [r3, #8]
    60ec:	4b42      	ldr	r3, [pc, #264]	; (61f8 <sd_mmc_check+0x58c>)
    60ee:	4798      	blx	r3
    60f0:	b180      	cbz	r0, 6114 <sd_mmc_check+0x4a8>
		if (IS_SDIO()) {
    60f2:	4b37      	ldr	r3, [pc, #220]	; (61d0 <sd_mmc_check+0x564>)
    60f4:	681b      	ldr	r3, [r3, #0]
    60f6:	7adb      	ldrb	r3, [r3, #11]
    60f8:	f013 0f04 	tst.w	r3, #4
    60fc:	d143      	bne.n	6186 <sd_mmc_check+0x51a>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    60fe:	4b34      	ldr	r3, [pc, #208]	; (61d0 <sd_mmc_check+0x564>)
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	7ada      	ldrb	r2, [r3, #11]
    6104:	f012 0f01 	tst.w	r2, #1
    6108:	d002      	beq.n	6110 <sd_mmc_check+0x4a4>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    610a:	7b1b      	ldrb	r3, [r3, #12]
    610c:	2b10      	cmp	r3, #16
    610e:	d877      	bhi.n	6200 <sd_mmc_check+0x594>
		sd_mmc_configure_slot();
    6110:	4b38      	ldr	r3, [pc, #224]	; (61f4 <sd_mmc_check+0x588>)
    6112:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    6114:	4b2e      	ldr	r3, [pc, #184]	; (61d0 <sd_mmc_check+0x564>)
    6116:	681b      	ldr	r3, [r3, #0]
    6118:	7adb      	ldrb	r3, [r3, #11]
    611a:	f013 0f01 	tst.w	r3, #1
    611e:	d00a      	beq.n	6136 <sd_mmc_check+0x4ca>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    6120:	f44f 7200 	mov.w	r2, #512	; 0x200
    6124:	f241 1110 	movw	r1, #4368	; 0x1110
    6128:	4b29      	ldr	r3, [pc, #164]	; (61d0 <sd_mmc_check+0x564>)
    612a:	6898      	ldr	r0, [r3, #8]
    612c:	4b29      	ldr	r3, [pc, #164]	; (61d4 <sd_mmc_check+0x568>)
    612e:	4798      	blx	r3
	if (sd_mmc_mci_card_init()) {
    6130:	2800      	cmp	r0, #0
    6132:	f43f adc7 	beq.w	5cc4 <sd_mmc_check+0x58>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    6136:	4b26      	ldr	r3, [pc, #152]	; (61d0 <sd_mmc_check+0x564>)
    6138:	681b      	ldr	r3, [r3, #0]
    613a:	2200      	movs	r2, #0
    613c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    613e:	4b2f      	ldr	r3, [pc, #188]	; (61fc <sd_mmc_check+0x590>)
    6140:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    6142:	e59d      	b.n	5c80 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    6144:	ab04      	add	r3, sp, #16
    6146:	9300      	str	r3, [sp, #0]
    6148:	2300      	movs	r3, #0
    614a:	2208      	movs	r2, #8
    614c:	4619      	mov	r1, r3
    614e:	4618      	mov	r0, r3
    6150:	4d25      	ldr	r5, [pc, #148]	; (61e8 <sd_mmc_check+0x57c>)
    6152:	47a8      	blx	r5
    6154:	2800      	cmp	r0, #0
    6156:	f43f adb5 	beq.w	5cc4 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    615a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    615e:	2b00      	cmp	r3, #0
    6160:	daa1      	bge.n	60a6 <sd_mmc_check+0x43a>
	u8_value = SDIO_BUSWIDTH_4B;
    6162:	ab14      	add	r3, sp, #80	; 0x50
    6164:	2202      	movs	r2, #2
    6166:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    616a:	9300      	str	r3, [sp, #0]
    616c:	2301      	movs	r3, #1
    616e:	2207      	movs	r2, #7
    6170:	2100      	movs	r1, #0
    6172:	4618      	mov	r0, r3
    6174:	47a8      	blx	r5
    6176:	2800      	cmp	r0, #0
    6178:	f43f ada4 	beq.w	5cc4 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    617c:	4b14      	ldr	r3, [pc, #80]	; (61d0 <sd_mmc_check+0x564>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	2204      	movs	r2, #4
    6182:	735a      	strb	r2, [r3, #13]
    6184:	e78f      	b.n	60a6 <sd_mmc_check+0x43a>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    6186:	ab04      	add	r3, sp, #16
    6188:	9300      	str	r3, [sp, #0]
    618a:	2300      	movs	r3, #0
    618c:	2213      	movs	r2, #19
    618e:	4619      	mov	r1, r3
    6190:	4618      	mov	r0, r3
    6192:	4d15      	ldr	r5, [pc, #84]	; (61e8 <sd_mmc_check+0x57c>)
    6194:	47a8      	blx	r5
    6196:	2800      	cmp	r0, #0
    6198:	f43f ad94 	beq.w	5cc4 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    619c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    61a0:	f013 0f01 	tst.w	r3, #1
    61a4:	d0ab      	beq.n	60fe <sd_mmc_check+0x492>
	u8_value = SDIO_EHS;
    61a6:	ab14      	add	r3, sp, #80	; 0x50
    61a8:	2202      	movs	r2, #2
    61aa:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    61ae:	9300      	str	r3, [sp, #0]
    61b0:	2301      	movs	r3, #1
    61b2:	2213      	movs	r2, #19
    61b4:	2100      	movs	r1, #0
    61b6:	4618      	mov	r0, r3
    61b8:	47a8      	blx	r5
    61ba:	2800      	cmp	r0, #0
    61bc:	f43f ad82 	beq.w	5cc4 <sd_mmc_check+0x58>
	sd_mmc_card->high_speed = 1;
    61c0:	4b03      	ldr	r3, [pc, #12]	; (61d0 <sd_mmc_check+0x564>)
    61c2:	681b      	ldr	r3, [r3, #0]
    61c4:	2201      	movs	r2, #1
    61c6:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    61c8:	681a      	ldr	r2, [r3, #0]
    61ca:	0052      	lsls	r2, r2, #1
    61cc:	601a      	str	r2, [r3, #0]
    61ce:	e796      	b.n	60fe <sd_mmc_check+0x492>
    61d0:	20001688 	.word	0x20001688
    61d4:	000029e9 	.word	0x000029e9
    61d8:	00081133 	.word	0x00081133
    61dc:	00002a71 	.word	0x00002a71
    61e0:	00002ab5 	.word	0x00002ab5
    61e4:	00002b1d 	.word	0x00002b1d
    61e8:	00005bc9 	.word	0x00005bc9
    61ec:	0000ca3c 	.word	0x0000ca3c
    61f0:	0000296d 	.word	0x0000296d
    61f4:	00005a89 	.word	0x00005a89
    61f8:	00002999 	.word	0x00002999
    61fc:	00005c31 	.word	0x00005c31
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    6200:	2540      	movs	r5, #64	; 0x40
    6202:	462a      	mov	r2, r5
    6204:	2100      	movs	r1, #0
    6206:	a804      	add	r0, sp, #16
    6208:	4b21      	ldr	r3, [pc, #132]	; (6290 <sd_mmc_check+0x624>)
    620a:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    620c:	2301      	movs	r3, #1
    620e:	9301      	str	r3, [sp, #4]
    6210:	9300      	str	r3, [sp, #0]
    6212:	462b      	mov	r3, r5
    6214:	4a1f      	ldr	r2, [pc, #124]	; (6294 <sd_mmc_check+0x628>)
    6216:	4920      	ldr	r1, [pc, #128]	; (6298 <sd_mmc_check+0x62c>)
    6218:	4820      	ldr	r0, [pc, #128]	; (629c <sd_mmc_check+0x630>)
    621a:	6880      	ldr	r0, [r0, #8]
    621c:	4d20      	ldr	r5, [pc, #128]	; (62a0 <sd_mmc_check+0x634>)
    621e:	47a8      	blx	r5
    6220:	2800      	cmp	r0, #0
    6222:	f43f ad4f 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    6226:	2201      	movs	r2, #1
    6228:	a904      	add	r1, sp, #16
    622a:	4b1c      	ldr	r3, [pc, #112]	; (629c <sd_mmc_check+0x630>)
    622c:	6898      	ldr	r0, [r3, #8]
    622e:	4b1d      	ldr	r3, [pc, #116]	; (62a4 <sd_mmc_check+0x638>)
    6230:	4798      	blx	r3
    6232:	2800      	cmp	r0, #0
    6234:	f43f ad46 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    6238:	4b18      	ldr	r3, [pc, #96]	; (629c <sd_mmc_check+0x630>)
    623a:	6898      	ldr	r0, [r3, #8]
    623c:	4b1a      	ldr	r3, [pc, #104]	; (62a8 <sd_mmc_check+0x63c>)
    623e:	4798      	blx	r3
    6240:	2800      	cmp	r0, #0
    6242:	f43f ad3f 	beq.w	5cc4 <sd_mmc_check+0x58>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    6246:	4b15      	ldr	r3, [pc, #84]	; (629c <sd_mmc_check+0x630>)
    6248:	6898      	ldr	r0, [r3, #8]
    624a:	4b18      	ldr	r3, [pc, #96]	; (62ac <sd_mmc_check+0x640>)
    624c:	4798      	blx	r3
    624e:	f010 0f80 	tst.w	r0, #128	; 0x80
    6252:	f47f ad37 	bne.w	5cc4 <sd_mmc_check+0x58>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    6256:	f89d 3020 	ldrb.w	r3, [sp, #32]
    625a:	f003 030f 	and.w	r3, r3, #15
    625e:	2b0f      	cmp	r3, #15
    6260:	f43f af56 	beq.w	6110 <sd_mmc_check+0x4a4>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    6264:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    6268:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    626c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    6270:	f47f ad28 	bne.w	5cc4 <sd_mmc_check+0x58>
	driver_send_clock(sd_mmc_hal);
    6274:	4d09      	ldr	r5, [pc, #36]	; (629c <sd_mmc_check+0x630>)
    6276:	68a8      	ldr	r0, [r5, #8]
    6278:	4b0d      	ldr	r3, [pc, #52]	; (62b0 <sd_mmc_check+0x644>)
    627a:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    627c:	682b      	ldr	r3, [r5, #0]
    627e:	2201      	movs	r2, #1
    6280:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    6282:	681a      	ldr	r2, [r3, #0]
    6284:	0052      	lsls	r2, r2, #1
    6286:	601a      	str	r2, [r3, #0]
    6288:	e742      	b.n	6110 <sd_mmc_check+0x4a4>
	*v2 = 0;
    628a:	f04f 0800 	mov.w	r8, #0
    628e:	e52c      	b.n	5cea <sd_mmc_check+0x7e>
    6290:	00007c2d 	.word	0x00007c2d
    6294:	80ffff01 	.word	0x80ffff01
    6298:	00081106 	.word	0x00081106
    629c:	20001688 	.word	0x20001688
    62a0:	00002a71 	.word	0x00002a71
    62a4:	00002ab5 	.word	0x00002ab5
    62a8:	00002b1d 	.word	0x00002b1d
    62ac:	00002a19 	.word	0x00002a19
    62b0:	000029c1 	.word	0x000029c1

000062b4 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    62b4:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    62b6:	4b05      	ldr	r3, [pc, #20]	; (62cc <sd_mmc_get_type+0x18>)
    62b8:	4798      	blx	r3
    62ba:	b108      	cbz	r0, 62c0 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
    62bc:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    62be:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    62c0:	4b03      	ldr	r3, [pc, #12]	; (62d0 <sd_mmc_get_type+0x1c>)
    62c2:	4798      	blx	r3
	return sd_mmc_card->type;
    62c4:	4b03      	ldr	r3, [pc, #12]	; (62d4 <sd_mmc_get_type+0x20>)
    62c6:	681b      	ldr	r3, [r3, #0]
    62c8:	7ad8      	ldrb	r0, [r3, #11]
    62ca:	bd08      	pop	{r3, pc}
    62cc:	00005ab5 	.word	0x00005ab5
    62d0:	00005c31 	.word	0x00005c31
    62d4:	20001688 	.word	0x20001688

000062d8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    62d8:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    62da:	4b05      	ldr	r3, [pc, #20]	; (62f0 <sd_mmc_get_capacity+0x18>)
    62dc:	4798      	blx	r3
    62de:	b108      	cbz	r0, 62e4 <sd_mmc_get_capacity+0xc>
		return 0;
    62e0:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    62e2:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    62e4:	4b03      	ldr	r3, [pc, #12]	; (62f4 <sd_mmc_get_capacity+0x1c>)
    62e6:	4798      	blx	r3
	return sd_mmc_card->capacity;
    62e8:	4b03      	ldr	r3, [pc, #12]	; (62f8 <sd_mmc_get_capacity+0x20>)
    62ea:	681b      	ldr	r3, [r3, #0]
    62ec:	6858      	ldr	r0, [r3, #4]
    62ee:	bd08      	pop	{r3, pc}
    62f0:	00005ab5 	.word	0x00005ab5
    62f4:	00005c31 	.word	0x00005c31
    62f8:	20001688 	.word	0x20001688

000062fc <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    62fc:	4b19      	ldr	r3, [pc, #100]	; (6364 <sd_mmc_is_write_protected+0x68>)
    62fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6300:	2b00      	cmp	r3, #0
    6302:	d02b      	beq.n	635c <sd_mmc_is_write_protected+0x60>
{
    6304:	b570      	push	{r4, r5, r6, lr}
    6306:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    6308:	0085      	lsls	r5, r0, #2
    630a:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    630e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6312:	d025      	beq.n	6360 <sd_mmc_is_write_protected+0x64>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    6314:	b2de      	uxtb	r6, r3
	CRITICAL_SECTION_ENTER();
    6316:	a801      	add	r0, sp, #4
    6318:	4b13      	ldr	r3, [pc, #76]	; (6368 <sd_mmc_is_write_protected+0x6c>)
    631a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    631c:	0973      	lsrs	r3, r6, #5
    631e:	4913      	ldr	r1, [pc, #76]	; (636c <sd_mmc_is_write_protected+0x70>)
    6320:	01db      	lsls	r3, r3, #7
    6322:	18ca      	adds	r2, r1, r3
    6324:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6326:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6328:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    632a:	405c      	eors	r4, r3
    632c:	400c      	ands	r4, r1
    632e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    6330:	a801      	add	r0, sp, #4
    6332:	4b0f      	ldr	r3, [pc, #60]	; (6370 <sd_mmc_is_write_protected+0x74>)
    6334:	4798      	blx	r3
    6336:	f006 031f 	and.w	r3, r6, #31
    633a:	2201      	movs	r2, #1
    633c:	fa02 f303 	lsl.w	r3, r2, r3
    6340:	4223      	tst	r3, r4
    6342:	bf14      	ite	ne
    6344:	4610      	movne	r0, r2
    6346:	2000      	moveq	r0, #0
    6348:	4b06      	ldr	r3, [pc, #24]	; (6364 <sd_mmc_is_write_protected+0x68>)
    634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    634c:	441d      	add	r5, r3
    634e:	886b      	ldrh	r3, [r5, #2]
    6350:	4298      	cmp	r0, r3
    6352:	bf14      	ite	ne
    6354:	2000      	movne	r0, #0
    6356:	2001      	moveq	r0, #1
		return true;
	}
	return false;
}
    6358:	b002      	add	sp, #8
    635a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    635c:	2000      	movs	r0, #0
    635e:	4770      	bx	lr
    6360:	2000      	movs	r0, #0
    6362:	e7f9      	b.n	6358 <sd_mmc_is_write_protected+0x5c>
    6364:	20001688 	.word	0x20001688
    6368:	00002689 	.word	0x00002689
    636c:	41008000 	.word	0x41008000
    6370:	00002697 	.word	0x00002697

00006374 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    6374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6378:	b082      	sub	sp, #8
    637a:	468a      	mov	sl, r1
    637c:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    637e:	4b29      	ldr	r3, [pc, #164]	; (6424 <sd_mmc_init_read_blocks+0xb0>)
    6380:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    6382:	4680      	mov	r8, r0
    6384:	b118      	cbz	r0, 638e <sd_mmc_init_read_blocks+0x1a>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    6386:	4640      	mov	r0, r8
    6388:	b002      	add	sp, #8
    638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    638e:	4d26      	ldr	r5, [pc, #152]	; (6428 <sd_mmc_init_read_blocks+0xb4>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    6390:	4c26      	ldr	r4, [pc, #152]	; (642c <sd_mmc_init_read_blocks+0xb8>)
    6392:	4e27      	ldr	r6, [pc, #156]	; (6430 <sd_mmc_init_read_blocks+0xbc>)
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    6394:	4f27      	ldr	r7, [pc, #156]	; (6434 <sd_mmc_init_read_blocks+0xc0>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    6396:	6823      	ldr	r3, [r4, #0]
    6398:	891a      	ldrh	r2, [r3, #8]
    639a:	0412      	lsls	r2, r2, #16
    639c:	f241 110d 	movw	r1, #4365	; 0x110d
    63a0:	68a0      	ldr	r0, [r4, #8]
    63a2:	47b0      	blx	r6
    63a4:	b130      	cbz	r0, 63b4 <sd_mmc_init_read_blocks+0x40>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    63a6:	68a0      	ldr	r0, [r4, #8]
    63a8:	47b8      	blx	r7
    63aa:	f410 7f80 	tst.w	r0, #256	; 0x100
    63ae:	d118      	bne.n	63e2 <sd_mmc_init_read_blocks+0x6e>
		if (nec_timeout-- == 0) {
    63b0:	3d01      	subs	r5, #1
    63b2:	d1f0      	bne.n	6396 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
    63b4:	4b20      	ldr	r3, [pc, #128]	; (6438 <sd_mmc_init_read_blocks+0xc4>)
    63b6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    63b8:	f04f 0805 	mov.w	r8, #5
    63bc:	e7e3      	b.n	6386 <sd_mmc_init_read_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    63be:	4b1b      	ldr	r3, [pc, #108]	; (642c <sd_mmc_init_read_blocks+0xb8>)
    63c0:	6898      	ldr	r0, [r3, #8]
    63c2:	4b1c      	ldr	r3, [pc, #112]	; (6434 <sd_mmc_init_read_blocks+0xc0>)
    63c4:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    63c6:	4b1d      	ldr	r3, [pc, #116]	; (643c <sd_mmc_init_read_blocks+0xc8>)
    63c8:	4003      	ands	r3, r0
    63ca:	b92b      	cbnz	r3, 63d8 <sd_mmc_init_read_blocks+0x64>
	sd_mmc_nb_block_remaining  = nb_block;
    63cc:	4b17      	ldr	r3, [pc, #92]	; (642c <sd_mmc_init_read_blocks+0xb8>)
    63ce:	f8a3 9030 	strh.w	r9, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    63d2:	f8a3 9038 	strh.w	r9, [r3, #56]	; 0x38
	return SD_MMC_OK;
    63d6:	e7d6      	b.n	6386 <sd_mmc_init_read_blocks+0x12>
		sd_mmc_deselect_slot();
    63d8:	4b17      	ldr	r3, [pc, #92]	; (6438 <sd_mmc_init_read_blocks+0xc4>)
    63da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    63dc:	f04f 0805 	mov.w	r8, #5
    63e0:	e7d1      	b.n	6386 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    63e2:	4b17      	ldr	r3, [pc, #92]	; (6440 <sd_mmc_init_read_blocks+0xcc>)
    63e4:	4917      	ldr	r1, [pc, #92]	; (6444 <sd_mmc_init_read_blocks+0xd0>)
    63e6:	f1b9 0f01 	cmp.w	r9, #1
    63ea:	bf98      	it	ls
    63ec:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    63ee:	4b0f      	ldr	r3, [pc, #60]	; (642c <sd_mmc_init_read_blocks+0xb8>)
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	7adb      	ldrb	r3, [r3, #11]
    63f4:	f013 0f08 	tst.w	r3, #8
    63f8:	d101      	bne.n	63fe <sd_mmc_init_read_blocks+0x8a>
		arg = (start * SD_MMC_BLOCK_SIZE);
    63fa:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    63fe:	4b0b      	ldr	r3, [pc, #44]	; (642c <sd_mmc_init_read_blocks+0xb8>)
    6400:	6898      	ldr	r0, [r3, #8]
    6402:	2301      	movs	r3, #1
    6404:	9301      	str	r3, [sp, #4]
    6406:	f8cd 9000 	str.w	r9, [sp]
    640a:	f44f 7300 	mov.w	r3, #512	; 0x200
    640e:	4652      	mov	r2, sl
    6410:	4c0d      	ldr	r4, [pc, #52]	; (6448 <sd_mmc_init_read_blocks+0xd4>)
    6412:	47a0      	blx	r4
    6414:	2800      	cmp	r0, #0
    6416:	d1d2      	bne.n	63be <sd_mmc_init_read_blocks+0x4a>
		sd_mmc_deselect_slot();
    6418:	4b07      	ldr	r3, [pc, #28]	; (6438 <sd_mmc_init_read_blocks+0xc4>)
    641a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    641c:	f04f 0805 	mov.w	r8, #5
    6420:	e7b1      	b.n	6386 <sd_mmc_init_read_blocks+0x12>
    6422:	bf00      	nop
    6424:	00005ab5 	.word	0x00005ab5
    6428:	00030d41 	.word	0x00030d41
    642c:	20001688 	.word	0x20001688
    6430:	000029e9 	.word	0x000029e9
    6434:	00002a19 	.word	0x00002a19
    6438:	00005c31 	.word	0x00005c31
    643c:	e4580000 	.word	0xe4580000
    6440:	00081111 	.word	0x00081111
    6444:	00101112 	.word	0x00101112
    6448:	00002a71 	.word	0x00002a71

0000644c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    644c:	b570      	push	{r4, r5, r6, lr}
    644e:	4606      	mov	r6, r0
    6450:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    6452:	4d0d      	ldr	r5, [pc, #52]	; (6488 <sd_mmc_start_read_blocks+0x3c>)
    6454:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    6456:	f240 52a7 	movw	r2, #1447	; 0x5a7
    645a:	490c      	ldr	r1, [pc, #48]	; (648c <sd_mmc_start_read_blocks+0x40>)
    645c:	42a0      	cmp	r0, r4
    645e:	bf34      	ite	cc
    6460:	2000      	movcc	r0, #0
    6462:	2001      	movcs	r0, #1
    6464:	4b0a      	ldr	r3, [pc, #40]	; (6490 <sd_mmc_start_read_blocks+0x44>)
    6466:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    6468:	4622      	mov	r2, r4
    646a:	4631      	mov	r1, r6
    646c:	68a8      	ldr	r0, [r5, #8]
    646e:	4b09      	ldr	r3, [pc, #36]	; (6494 <sd_mmc_start_read_blocks+0x48>)
    6470:	4798      	blx	r3
    6472:	b918      	cbnz	r0, 647c <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    6474:	2200      	movs	r2, #0
    6476:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    6478:	2005      	movs	r0, #5
    647a:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    647c:	4a02      	ldr	r2, [pc, #8]	; (6488 <sd_mmc_start_read_blocks+0x3c>)
    647e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    6480:	1b1c      	subs	r4, r3, r4
    6482:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    6484:	2000      	movs	r0, #0
}
    6486:	bd70      	pop	{r4, r5, r6, pc}
    6488:	20001688 	.word	0x20001688
    648c:	0000cad8 	.word	0x0000cad8
    6490:	00002d05 	.word	0x00002d05
    6494:	00002ab5 	.word	0x00002ab5

00006498 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    6498:	b510      	push	{r4, lr}
    649a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    649c:	4b16      	ldr	r3, [pc, #88]	; (64f8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    649e:	6898      	ldr	r0, [r3, #8]
    64a0:	4b16      	ldr	r3, [pc, #88]	; (64fc <sd_mmc_wait_end_of_read_blocks+0x64>)
    64a2:	4798      	blx	r3
    64a4:	b908      	cbnz	r0, 64aa <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    64a6:	2005      	movs	r0, #5
    64a8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    64aa:	b194      	cbz	r4, 64d2 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    64ac:	2200      	movs	r2, #0
    64ae:	4b12      	ldr	r3, [pc, #72]	; (64f8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    64b0:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    64b2:	4b11      	ldr	r3, [pc, #68]	; (64f8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    64b4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    64b6:	2b01      	cmp	r3, #1
    64b8:	d011      	beq.n	64de <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    64ba:	2200      	movs	r2, #0
    64bc:	f243 110c 	movw	r1, #12556	; 0x310c
    64c0:	4b0d      	ldr	r3, [pc, #52]	; (64f8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    64c2:	6898      	ldr	r0, [r3, #8]
    64c4:	4b0e      	ldr	r3, [pc, #56]	; (6500 <sd_mmc_wait_end_of_read_blocks+0x68>)
    64c6:	4798      	blx	r3
    64c8:	b168      	cbz	r0, 64e6 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    64ca:	4b0e      	ldr	r3, [pc, #56]	; (6504 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    64cc:	4798      	blx	r3
	return SD_MMC_OK;
    64ce:	2000      	movs	r0, #0
    64d0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    64d2:	4b09      	ldr	r3, [pc, #36]	; (64f8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    64d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    64d6:	2b00      	cmp	r3, #0
    64d8:	d0eb      	beq.n	64b2 <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    64da:	2000      	movs	r0, #0
}
    64dc:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    64de:	4b09      	ldr	r3, [pc, #36]	; (6504 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    64e0:	4798      	blx	r3
		return SD_MMC_OK;
    64e2:	2000      	movs	r0, #0
    64e4:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    64e6:	2200      	movs	r2, #0
    64e8:	f243 110c 	movw	r1, #12556	; 0x310c
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    64ee:	6898      	ldr	r0, [r3, #8]
    64f0:	4b03      	ldr	r3, [pc, #12]	; (6500 <sd_mmc_wait_end_of_read_blocks+0x68>)
    64f2:	4798      	blx	r3
    64f4:	e7e9      	b.n	64ca <sd_mmc_wait_end_of_read_blocks+0x32>
    64f6:	bf00      	nop
    64f8:	20001688 	.word	0x20001688
    64fc:	00002b1d 	.word	0x00002b1d
    6500:	000029e9 	.word	0x000029e9
    6504:	00005c31 	.word	0x00005c31

00006508 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    6508:	b5f0      	push	{r4, r5, r6, r7, lr}
    650a:	b083      	sub	sp, #12
    650c:	4607      	mov	r7, r0
    650e:	460e      	mov	r6, r1
    6510:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    6512:	4b1c      	ldr	r3, [pc, #112]	; (6584 <sd_mmc_init_write_blocks+0x7c>)
    6514:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    6516:	4604      	mov	r4, r0
    6518:	b110      	cbz	r0, 6520 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    651a:	4620      	mov	r0, r4
    651c:	b003      	add	sp, #12
    651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    6520:	4638      	mov	r0, r7
    6522:	4b19      	ldr	r3, [pc, #100]	; (6588 <sd_mmc_init_write_blocks+0x80>)
    6524:	4798      	blx	r3
    6526:	b9d0      	cbnz	r0, 655e <sd_mmc_init_write_blocks+0x56>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    6528:	4b18      	ldr	r3, [pc, #96]	; (658c <sd_mmc_init_write_blocks+0x84>)
    652a:	4919      	ldr	r1, [pc, #100]	; (6590 <sd_mmc_init_write_blocks+0x88>)
    652c:	2d01      	cmp	r5, #1
    652e:	bf98      	it	ls
    6530:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    6532:	4b18      	ldr	r3, [pc, #96]	; (6594 <sd_mmc_init_write_blocks+0x8c>)
    6534:	681b      	ldr	r3, [r3, #0]
    6536:	7adb      	ldrb	r3, [r3, #11]
    6538:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
    653c:	bf08      	it	eq
    653e:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    6540:	4b14      	ldr	r3, [pc, #80]	; (6594 <sd_mmc_init_write_blocks+0x8c>)
    6542:	6898      	ldr	r0, [r3, #8]
    6544:	2301      	movs	r3, #1
    6546:	9301      	str	r3, [sp, #4]
    6548:	9500      	str	r5, [sp, #0]
    654a:	f44f 7300 	mov.w	r3, #512	; 0x200
    654e:	4632      	mov	r2, r6
    6550:	4e11      	ldr	r6, [pc, #68]	; (6598 <sd_mmc_init_write_blocks+0x90>)
    6552:	47b0      	blx	r6
    6554:	b938      	cbnz	r0, 6566 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    6556:	4b11      	ldr	r3, [pc, #68]	; (659c <sd_mmc_init_write_blocks+0x94>)
    6558:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    655a:	2405      	movs	r4, #5
    655c:	e7dd      	b.n	651a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    655e:	4b0f      	ldr	r3, [pc, #60]	; (659c <sd_mmc_init_write_blocks+0x94>)
    6560:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    6562:	2407      	movs	r4, #7
    6564:	e7d9      	b.n	651a <sd_mmc_init_write_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    6566:	4b0b      	ldr	r3, [pc, #44]	; (6594 <sd_mmc_init_write_blocks+0x8c>)
    6568:	6898      	ldr	r0, [r3, #8]
    656a:	4b0d      	ldr	r3, [pc, #52]	; (65a0 <sd_mmc_init_write_blocks+0x98>)
    656c:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    656e:	4b0d      	ldr	r3, [pc, #52]	; (65a4 <sd_mmc_init_write_blocks+0x9c>)
    6570:	4003      	ands	r3, r0
    6572:	b91b      	cbnz	r3, 657c <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    6574:	4b07      	ldr	r3, [pc, #28]	; (6594 <sd_mmc_init_write_blocks+0x8c>)
    6576:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    6578:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    657a:	e7ce      	b.n	651a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    657c:	4b07      	ldr	r3, [pc, #28]	; (659c <sd_mmc_init_write_blocks+0x94>)
    657e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    6580:	2405      	movs	r4, #5
    6582:	e7ca      	b.n	651a <sd_mmc_init_write_blocks+0x12>
    6584:	00005ab5 	.word	0x00005ab5
    6588:	000062fd 	.word	0x000062fd
    658c:	00089118 	.word	0x00089118
    6590:	00109119 	.word	0x00109119
    6594:	20001688 	.word	0x20001688
    6598:	00002a71 	.word	0x00002a71
    659c:	00005c31 	.word	0x00005c31
    65a0:	00002a19 	.word	0x00002a19
    65a4:	e4580000 	.word	0xe4580000

000065a8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    65a8:	b570      	push	{r4, r5, r6, lr}
    65aa:	4606      	mov	r6, r0
    65ac:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    65ae:	4d0d      	ldr	r5, [pc, #52]	; (65e4 <sd_mmc_start_write_blocks+0x3c>)
    65b0:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    65b2:	f240 52fa 	movw	r2, #1530	; 0x5fa
    65b6:	490c      	ldr	r1, [pc, #48]	; (65e8 <sd_mmc_start_write_blocks+0x40>)
    65b8:	42a0      	cmp	r0, r4
    65ba:	bf34      	ite	cc
    65bc:	2000      	movcc	r0, #0
    65be:	2001      	movcs	r0, #1
    65c0:	4b0a      	ldr	r3, [pc, #40]	; (65ec <sd_mmc_start_write_blocks+0x44>)
    65c2:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    65c4:	4622      	mov	r2, r4
    65c6:	4631      	mov	r1, r6
    65c8:	68a8      	ldr	r0, [r5, #8]
    65ca:	4b09      	ldr	r3, [pc, #36]	; (65f0 <sd_mmc_start_write_blocks+0x48>)
    65cc:	4798      	blx	r3
    65ce:	b918      	cbnz	r0, 65d8 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    65d0:	2200      	movs	r2, #0
    65d2:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    65d4:	2005      	movs	r0, #5
    65d6:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    65d8:	4a02      	ldr	r2, [pc, #8]	; (65e4 <sd_mmc_start_write_blocks+0x3c>)
    65da:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    65dc:	1b1c      	subs	r4, r3, r4
    65de:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    65e0:	2000      	movs	r0, #0
}
    65e2:	bd70      	pop	{r4, r5, r6, pc}
    65e4:	20001688 	.word	0x20001688
    65e8:	0000cad8 	.word	0x0000cad8
    65ec:	00002d05 	.word	0x00002d05
    65f0:	00002ae9 	.word	0x00002ae9

000065f4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    65f4:	b510      	push	{r4, lr}
    65f6:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    65f8:	4b14      	ldr	r3, [pc, #80]	; (664c <sd_mmc_wait_end_of_write_blocks+0x58>)
    65fa:	6898      	ldr	r0, [r3, #8]
    65fc:	4b14      	ldr	r3, [pc, #80]	; (6650 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    65fe:	4798      	blx	r3
    6600:	b908      	cbnz	r0, 6606 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    6602:	2005      	movs	r0, #5
    6604:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    6606:	b194      	cbz	r4, 662e <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    6608:	2200      	movs	r2, #0
    660a:	4b10      	ldr	r3, [pc, #64]	; (664c <sd_mmc_wait_end_of_write_blocks+0x58>)
    660c:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    660e:	4b0f      	ldr	r3, [pc, #60]	; (664c <sd_mmc_wait_end_of_write_blocks+0x58>)
    6610:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    6612:	2b01      	cmp	r3, #1
    6614:	d011      	beq.n	663a <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    6616:	2200      	movs	r2, #0
    6618:	f243 110c 	movw	r1, #12556	; 0x310c
    661c:	4b0b      	ldr	r3, [pc, #44]	; (664c <sd_mmc_wait_end_of_write_blocks+0x58>)
    661e:	6898      	ldr	r0, [r3, #8]
    6620:	4b0c      	ldr	r3, [pc, #48]	; (6654 <sd_mmc_wait_end_of_write_blocks+0x60>)
    6622:	4798      	blx	r3
    6624:	b968      	cbnz	r0, 6642 <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    6626:	4b0c      	ldr	r3, [pc, #48]	; (6658 <sd_mmc_wait_end_of_write_blocks+0x64>)
    6628:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    662a:	2005      	movs	r0, #5
    662c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    662e:	4b07      	ldr	r3, [pc, #28]	; (664c <sd_mmc_wait_end_of_write_blocks+0x58>)
    6630:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    6632:	2b00      	cmp	r3, #0
    6634:	d0eb      	beq.n	660e <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    6636:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    6638:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    663a:	4b07      	ldr	r3, [pc, #28]	; (6658 <sd_mmc_wait_end_of_write_blocks+0x64>)
    663c:	4798      	blx	r3
		return SD_MMC_OK;
    663e:	2000      	movs	r0, #0
    6640:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    6642:	4b05      	ldr	r3, [pc, #20]	; (6658 <sd_mmc_wait_end_of_write_blocks+0x64>)
    6644:	4798      	blx	r3
	return SD_MMC_OK;
    6646:	2000      	movs	r0, #0
    6648:	bd10      	pop	{r4, pc}
    664a:	bf00      	nop
    664c:	20001688 	.word	0x20001688
    6650:	00002b45 	.word	0x00002b45
    6654:	000029e9 	.word	0x000029e9
    6658:	00005c31 	.word	0x00005c31

0000665c <SERVO_PWM_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    665c:	4a36      	ldr	r2, [pc, #216]	; (6738 <SERVO_PWM_init+0xdc>)
    665e:	6953      	ldr	r3, [r2, #20]
    6660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6664:	6153      	str	r3, [r2, #20]
    6666:	2240      	movs	r2, #64	; 0x40
    6668:	4b34      	ldr	r3, [pc, #208]	; (673c <SERVO_PWM_init+0xe0>)
    666a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    666e:	4a34      	ldr	r2, [pc, #208]	; (6740 <SERVO_PWM_init+0xe4>)
    6670:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    6674:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6678:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    667c:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6680:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6684:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    668c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6690:	4b2c      	ldr	r3, [pc, #176]	; (6744 <SERVO_PWM_init+0xe8>)
    6692:	691b      	ldr	r3, [r3, #16]
void SERVO_PWM_init(void)
{
	SERVO_PWM_CLOCK_init();
	SERVO_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    6694:	f013 0f01 	tst.w	r3, #1
    6698:	d11f      	bne.n	66da <SERVO_PWM_init+0x7e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    669a:	4a2a      	ldr	r2, [pc, #168]	; (6744 <SERVO_PWM_init+0xe8>)
    669c:	6913      	ldr	r3, [r2, #16]
    669e:	f013 0f03 	tst.w	r3, #3
    66a2:	d1fb      	bne.n	669c <SERVO_PWM_init+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    66a4:	4b27      	ldr	r3, [pc, #156]	; (6744 <SERVO_PWM_init+0xe8>)
    66a6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    66a8:	f013 0f02 	tst.w	r3, #2
    66ac:	d00d      	beq.n	66ca <SERVO_PWM_init+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    66ae:	4a25      	ldr	r2, [pc, #148]	; (6744 <SERVO_PWM_init+0xe8>)
    66b0:	6813      	ldr	r3, [r2, #0]
    66b2:	f023 0302 	bic.w	r3, r3, #2
    66b6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66b8:	6913      	ldr	r3, [r2, #16]
    66ba:	f013 0f03 	tst.w	r3, #3
    66be:	d1fb      	bne.n	66b8 <SERVO_PWM_init+0x5c>
    66c0:	4a20      	ldr	r2, [pc, #128]	; (6744 <SERVO_PWM_init+0xe8>)
    66c2:	6913      	ldr	r3, [r2, #16]
    66c4:	f013 0f02 	tst.w	r3, #2
    66c8:	d1fb      	bne.n	66c2 <SERVO_PWM_init+0x66>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    66ca:	2201      	movs	r2, #1
    66cc:	4b1d      	ldr	r3, [pc, #116]	; (6744 <SERVO_PWM_init+0xe8>)
    66ce:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66d0:	461a      	mov	r2, r3
    66d2:	6913      	ldr	r3, [r2, #16]
    66d4:	f013 0f03 	tst.w	r3, #3
    66d8:	d1fb      	bne.n	66d2 <SERVO_PWM_init+0x76>
    66da:	4a1a      	ldr	r2, [pc, #104]	; (6744 <SERVO_PWM_init+0xe8>)
    66dc:	6913      	ldr	r3, [r2, #16]
    66de:	f013 0f01 	tst.w	r3, #1
    66e2:	d1fb      	bne.n	66dc <SERVO_PWM_init+0x80>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    66e4:	4a18      	ldr	r2, [pc, #96]	; (6748 <SERVO_PWM_init+0xec>)
    66e6:	4b17      	ldr	r3, [pc, #92]	; (6744 <SERVO_PWM_init+0xe8>)
    66e8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66ea:	461a      	mov	r2, r3
    66ec:	6913      	ldr	r3, [r2, #16]
    66ee:	f013 0f03 	tst.w	r3, #3
    66f2:	d1fb      	bne.n	66ec <SERVO_PWM_init+0x90>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    66f4:	4b13      	ldr	r3, [pc, #76]	; (6744 <SERVO_PWM_init+0xe8>)
    66f6:	2200      	movs	r2, #0
    66f8:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    66fa:	22ff      	movs	r2, #255	; 0xff
    66fc:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    66fe:	2203      	movs	r2, #3
    6700:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    6702:	f640 02e1 	movw	r2, #2273	; 0x8e1
    6706:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6708:	461a      	mov	r2, r3
    670a:	6913      	ldr	r3, [r2, #16]
    670c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6710:	d1fb      	bne.n	670a <SERVO_PWM_init+0xae>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    6712:	f240 1277 	movw	r2, #375	; 0x177
    6716:	4b0b      	ldr	r3, [pc, #44]	; (6744 <SERVO_PWM_init+0xe8>)
    6718:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    671a:	461a      	mov	r2, r3
    671c:	6913      	ldr	r3, [r2, #16]
    671e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6722:	d1fb      	bne.n	671c <SERVO_PWM_init+0xc0>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6724:	4a07      	ldr	r2, [pc, #28]	; (6744 <SERVO_PWM_init+0xe8>)
    6726:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    6728:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    672c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    672e:	6913      	ldr	r3, [r2, #16]
    6730:	f013 0f03 	tst.w	r3, #3
    6734:	d1fb      	bne.n	672e <SERVO_PWM_init+0xd2>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    6736:	4770      	bx	lr
    6738:	40000800 	.word	0x40000800
    673c:	40001c00 	.word	0x40001c00
    6740:	41008000 	.word	0x41008000
    6744:	40003c00 	.word	0x40003c00
    6748:	12000410 	.word	0x12000410
    674c:	00000000 	.word	0x00000000

00006750 <SERVO_set_angle>:
  * Sets servo position to given angle
  * 
  * @param int : angle to set servo to
  */ 
void SERVO_set_angle(int angle)
{
    6750:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    6752:	4b2b      	ldr	r3, [pc, #172]	; (6800 <SERVO_set_angle+0xb0>)
    6754:	4798      	blx	r3
    6756:	4c2b      	ldr	r4, [pc, #172]	; (6804 <SERVO_set_angle+0xb4>)
    6758:	2200      	movs	r2, #0
    675a:	4b2b      	ldr	r3, [pc, #172]	; (6808 <SERVO_set_angle+0xb8>)
    675c:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    675e:	4d2b      	ldr	r5, [pc, #172]	; (680c <SERVO_set_angle+0xbc>)
    6760:	2200      	movs	r2, #0
    6762:	4b2b      	ldr	r3, [pc, #172]	; (6810 <SERVO_set_angle+0xc0>)
    6764:	47a8      	blx	r5
    6766:	2200      	movs	r2, #0
    6768:	4b2a      	ldr	r3, [pc, #168]	; (6814 <SERVO_set_angle+0xc4>)
    676a:	4e2b      	ldr	r6, [pc, #172]	; (6818 <SERVO_set_angle+0xc8>)
    676c:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    676e:	a320      	add	r3, pc, #128	; (adr r3, 67f0 <SERVO_set_angle+0xa0>)
    6770:	e9d3 2300 	ldrd	r2, r3, [r3]
    6774:	47a8      	blx	r5
    6776:	a320      	add	r3, pc, #128	; (adr r3, 67f8 <SERVO_set_angle+0xa8>)
    6778:	e9d3 2300 	ldrd	r2, r3, [r3]
    677c:	47a0      	blx	r4
    677e:	4b27      	ldr	r3, [pc, #156]	; (681c <SERVO_set_angle+0xcc>)
    6780:	4798      	blx	r3
    6782:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6784:	4b26      	ldr	r3, [pc, #152]	; (6820 <SERVO_set_angle+0xd0>)
    6786:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    6788:	f013 0f01 	tst.w	r3, #1
    678c:	d117      	bne.n	67be <SERVO_set_angle+0x6e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    678e:	4a24      	ldr	r2, [pc, #144]	; (6820 <SERVO_set_angle+0xd0>)
    6790:	6913      	ldr	r3, [r2, #16]
    6792:	f013 0f03 	tst.w	r3, #3
    6796:	d1fb      	bne.n	6790 <SERVO_set_angle+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6798:	4b21      	ldr	r3, [pc, #132]	; (6820 <SERVO_set_angle+0xd0>)
    679a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    679c:	f013 0f02 	tst.w	r3, #2
    67a0:	d00d      	beq.n	67be <SERVO_set_angle+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    67a2:	4a1f      	ldr	r2, [pc, #124]	; (6820 <SERVO_set_angle+0xd0>)
    67a4:	6813      	ldr	r3, [r2, #0]
    67a6:	f023 0302 	bic.w	r3, r3, #2
    67aa:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    67ac:	6913      	ldr	r3, [r2, #16]
    67ae:	f013 0f03 	tst.w	r3, #3
    67b2:	d1fb      	bne.n	67ac <SERVO_set_angle+0x5c>
    67b4:	4a1a      	ldr	r2, [pc, #104]	; (6820 <SERVO_set_angle+0xd0>)
    67b6:	6913      	ldr	r3, [r2, #16]
    67b8:	f013 0f02 	tst.w	r3, #2
    67bc:	d1fb      	bne.n	67b6 <SERVO_set_angle+0x66>
    67be:	4a18      	ldr	r2, [pc, #96]	; (6820 <SERVO_set_angle+0xd0>)
    67c0:	6913      	ldr	r3, [r2, #16]
    67c2:	f013 0f01 	tst.w	r3, #1
    67c6:	d1fb      	bne.n	67c0 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    67c8:	4b15      	ldr	r3, [pc, #84]	; (6820 <SERVO_set_angle+0xd0>)
    67ca:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    67cc:	461a      	mov	r2, r3
    67ce:	6913      	ldr	r3, [r2, #16]
    67d0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    67d4:	d1fb      	bne.n	67ce <SERVO_set_angle+0x7e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    67d6:	4a12      	ldr	r2, [pc, #72]	; (6820 <SERVO_set_angle+0xd0>)
    67d8:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    67da:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    67de:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    67e0:	6913      	ldr	r3, [r2, #16]
    67e2:	f013 0f03 	tst.w	r3, #3
    67e6:	d1fb      	bne.n	67e0 <SERVO_set_angle+0x90>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
}
    67e8:	bd70      	pop	{r4, r5, r6, pc}
    67ea:	bf00      	nop
    67ec:	f3af 8000 	nop.w
    67f0:	00000000 	.word	0x00000000
    67f4:	40a1c200 	.word	0x40a1c200
    67f8:	00000000 	.word	0x00000000
    67fc:	40a7ac00 	.word	0x40a7ac00
    6800:	00006eb9 	.word	0x00006eb9
    6804:	000071d9 	.word	0x000071d9
    6808:	40668000 	.word	0x40668000
    680c:	00006f85 	.word	0x00006f85
    6810:	409f4000 	.word	0x409f4000
    6814:	407f4000 	.word	0x407f4000
    6818:	00006c21 	.word	0x00006c21
    681c:	000074e5 	.word	0x000074e5
    6820:	40003c00 	.word	0x40003c00

00006824 <SERVO_menu>:
/**
  * Menu for servo command options in order to test angle adjustments with
  * servo
  */ 
void SERVO_menu(void)
{
    6824:	b5f0      	push	{r4, r5, r6, r7, lr}
    6826:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
    6828:	2300      	movs	r3, #0
    682a:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    682c:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    682e:	4e1d      	ldr	r6, [pc, #116]	; (68a4 <SERVO_menu+0x80>)
    6830:	4d1d      	ldr	r5, [pc, #116]	; (68a8 <SERVO_menu+0x84>)
    6832:	4c1e      	ldr	r4, [pc, #120]	; (68ac <SERVO_menu+0x88>)
    6834:	e004      	b.n	6840 <SERVO_menu+0x1c>
		
		if (scanf("%"PRIu32"", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    6836:	4b1e      	ldr	r3, [pc, #120]	; (68b0 <SERVO_menu+0x8c>)
    6838:	681b      	ldr	r3, [r3, #0]
    683a:	6858      	ldr	r0, [r3, #4]
    683c:	4b1d      	ldr	r3, [pc, #116]	; (68b4 <SERVO_menu+0x90>)
    683e:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    6840:	4631      	mov	r1, r6
    6842:	4628      	mov	r0, r5
    6844:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
    6846:	a901      	add	r1, sp, #4
    6848:	481b      	ldr	r0, [pc, #108]	; (68b8 <SERVO_menu+0x94>)
    684a:	4b1c      	ldr	r3, [pc, #112]	; (68bc <SERVO_menu+0x98>)
    684c:	4798      	blx	r3
    684e:	2800      	cmp	r0, #0
    6850:	d0f1      	beq.n	6836 <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    6852:	9901      	ldr	r1, [sp, #4]
    6854:	481a      	ldr	r0, [pc, #104]	; (68c0 <SERVO_menu+0x9c>)
    6856:	47a0      	blx	r4
		
		switch (user_selection) {
    6858:	9b01      	ldr	r3, [sp, #4]
    685a:	2b01      	cmp	r3, #1
    685c:	d005      	beq.n	686a <SERVO_menu+0x46>
    685e:	2b02      	cmp	r3, #2
    6860:	d008      	beq.n	6874 <SERVO_menu+0x50>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
				SERVO_set_angle(servo_angle);
				break;
			
			default:
				printf("\r\nInvalid option\r\n");
    6862:	4818      	ldr	r0, [pc, #96]	; (68c4 <SERVO_menu+0xa0>)
    6864:	4b18      	ldr	r3, [pc, #96]	; (68c8 <SERVO_menu+0xa4>)
    6866:	4798      	blx	r3
				break;
    6868:	e7ea      	b.n	6840 <SERVO_menu+0x1c>
				printf("\r\nReturning to main menu\r\n");
    686a:	4818      	ldr	r0, [pc, #96]	; (68cc <SERVO_menu+0xa8>)
    686c:	4b16      	ldr	r3, [pc, #88]	; (68c8 <SERVO_menu+0xa4>)
    686e:	4798      	blx	r3
		}
	}
    6870:	b003      	add	sp, #12
    6872:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nEnter angle >> ");
    6874:	4816      	ldr	r0, [pc, #88]	; (68d0 <SERVO_menu+0xac>)
    6876:	47a0      	blx	r4
				scanf("%"PRIu32"", &servo_angle);
    6878:	4f0f      	ldr	r7, [pc, #60]	; (68b8 <SERVO_menu+0x94>)
    687a:	4669      	mov	r1, sp
    687c:	4638      	mov	r0, r7
    687e:	4b0f      	ldr	r3, [pc, #60]	; (68bc <SERVO_menu+0x98>)
    6880:	4798      	blx	r3
				printf("%"PRIu32"", servo_angle);
    6882:	9900      	ldr	r1, [sp, #0]
    6884:	4638      	mov	r0, r7
    6886:	47a0      	blx	r4
				if (servo_angle < 0 || servo_angle > 180) {
    6888:	9900      	ldr	r1, [sp, #0]
    688a:	29b4      	cmp	r1, #180	; 0xb4
    688c:	d903      	bls.n	6896 <SERVO_menu+0x72>
					printf("\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n");
    688e:	4811      	ldr	r0, [pc, #68]	; (68d4 <SERVO_menu+0xb0>)
    6890:	4b0d      	ldr	r3, [pc, #52]	; (68c8 <SERVO_menu+0xa4>)
    6892:	4798      	blx	r3
					break;
    6894:	e7d4      	b.n	6840 <SERVO_menu+0x1c>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
    6896:	4810      	ldr	r0, [pc, #64]	; (68d8 <SERVO_menu+0xb4>)
    6898:	47a0      	blx	r4
				SERVO_set_angle(servo_angle);
    689a:	9800      	ldr	r0, [sp, #0]
    689c:	4b0f      	ldr	r3, [pc, #60]	; (68dc <SERVO_menu+0xb8>)
    689e:	4798      	blx	r3
				break;
    68a0:	e7ce      	b.n	6840 <SERVO_menu+0x1c>
    68a2:	bf00      	nop
    68a4:	2000045c 	.word	0x2000045c
    68a8:	0000b6e4 	.word	0x0000b6e4
    68ac:	00007d95 	.word	0x00007d95
    68b0:	200004b0 	.word	0x200004b0
    68b4:	000079ad 	.word	0x000079ad
    68b8:	0000b690 	.word	0x0000b690
    68bc:	00007ead 	.word	0x00007ead
    68c0:	0000b6e8 	.word	0x0000b6e8
    68c4:	0000b720 	.word	0x0000b720
    68c8:	00007e7d 	.word	0x00007e7d
    68cc:	0000b704 	.word	0x0000b704
    68d0:	0000caec 	.word	0x0000caec
    68d4:	0000cb00 	.word	0x0000cb00
    68d8:	0000cb3c 	.word	0x0000cb3c
    68dc:	00006751 	.word	0x00006751

000068e0 <start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void start_init(void)
{
    68e0:	b508      	push	{r3, lr}
	system_init();
    68e2:	4b04      	ldr	r3, [pc, #16]	; (68f4 <start_init+0x14>)
    68e4:	4798      	blx	r3
	stdio_redirect_init();
    68e6:	4b04      	ldr	r3, [pc, #16]	; (68f8 <start_init+0x18>)
    68e8:	4798      	blx	r3
	SDMMC_init();
    68ea:	4b04      	ldr	r3, [pc, #16]	; (68fc <start_init+0x1c>)
    68ec:	4798      	blx	r3
	EEPROM_init();
    68ee:	4b04      	ldr	r3, [pc, #16]	; (6900 <start_init+0x20>)
    68f0:	4798      	blx	r3
    68f2:	bd08      	pop	{r3, pc}
    68f4:	0000088d 	.word	0x0000088d
    68f8:	00006905 	.word	0x00006905
    68fc:	00003a75 	.word	0x00003a75
    6900:	000009b5 	.word	0x000009b5

00006904 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    6904:	b510      	push	{r4, lr}
	usart_sync_enable(&STDIO_IO);
    6906:	4c04      	ldr	r4, [pc, #16]	; (6918 <stdio_redirect_init+0x14>)
    6908:	4620      	mov	r0, r4
    690a:	4b04      	ldr	r3, [pc, #16]	; (691c <stdio_redirect_init+0x18>)
    690c:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    690e:	4620      	mov	r0, r4
    6910:	4b03      	ldr	r3, [pc, #12]	; (6920 <stdio_redirect_init+0x1c>)
    6912:	4798      	blx	r3
    6914:	bd10      	pop	{r4, pc}
    6916:	bf00      	nop
    6918:	200016d0 	.word	0x200016d0
    691c:	00002c89 	.word	0x00002c89
    6920:	00006969 	.word	0x00006969

00006924 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    6924:	b940      	cbnz	r0, 6938 <_read+0x14>
{
    6926:	b508      	push	{r3, lr}
    6928:	460b      	mov	r3, r1
    692a:	4611      	mov	r1, r2
    692c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    692e:	4b04      	ldr	r3, [pc, #16]	; (6940 <_read+0x1c>)
    6930:	4798      	blx	r3
    6932:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    6936:	bd08      	pop	{r3, pc}
		return -1;
    6938:	f04f 30ff 	mov.w	r0, #4294967295
    693c:	4770      	bx	lr
    693e:	bf00      	nop
    6940:	00006995 	.word	0x00006995

00006944 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    6944:	3801      	subs	r0, #1
    6946:	2802      	cmp	r0, #2
    6948:	d808      	bhi.n	695c <_write+0x18>
{
    694a:	b508      	push	{r3, lr}
    694c:	460b      	mov	r3, r1
    694e:	4611      	mov	r1, r2
    6950:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    6952:	4b04      	ldr	r3, [pc, #16]	; (6964 <_write+0x20>)
    6954:	4798      	blx	r3
    6956:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    695a:	bd08      	pop	{r3, pc}
		return -1;
    695c:	f04f 30ff 	mov.w	r0, #4294967295
    6960:	4770      	bx	lr
    6962:	bf00      	nop
    6964:	000069b9 	.word	0x000069b9

00006968 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    6968:	b570      	push	{r4, r5, r6, lr}
    696a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    696c:	4d06      	ldr	r5, [pc, #24]	; (6988 <stdio_io_init+0x20>)
    696e:	682b      	ldr	r3, [r5, #0]
    6970:	2100      	movs	r1, #0
    6972:	6898      	ldr	r0, [r3, #8]
    6974:	4c05      	ldr	r4, [pc, #20]	; (698c <stdio_io_init+0x24>)
    6976:	47a0      	blx	r4
	setbuf(stdin, NULL);
    6978:	682b      	ldr	r3, [r5, #0]
    697a:	2100      	movs	r1, #0
    697c:	6858      	ldr	r0, [r3, #4]
    697e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    6980:	4b03      	ldr	r3, [pc, #12]	; (6990 <stdio_io_init+0x28>)
    6982:	601e      	str	r6, [r3, #0]
    6984:	bd70      	pop	{r4, r5, r6, pc}
    6986:	bf00      	nop
    6988:	200004b0 	.word	0x200004b0
    698c:	00007edd 	.word	0x00007edd
    6990:	200016c4 	.word	0x200016c4

00006994 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    6994:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    6996:	4b06      	ldr	r3, [pc, #24]	; (69b0 <stdio_io_read+0x1c>)
    6998:	681b      	ldr	r3, [r3, #0]
    699a:	b133      	cbz	r3, 69aa <stdio_io_read+0x16>
    699c:	460a      	mov	r2, r1
    699e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    69a0:	b292      	uxth	r2, r2
    69a2:	4618      	mov	r0, r3
    69a4:	4b03      	ldr	r3, [pc, #12]	; (69b4 <stdio_io_read+0x20>)
    69a6:	4798      	blx	r3
    69a8:	bd08      	pop	{r3, pc}
		return 0;
    69aa:	2000      	movs	r0, #0
}
    69ac:	bd08      	pop	{r3, pc}
    69ae:	bf00      	nop
    69b0:	200016c4 	.word	0x200016c4
    69b4:	000028a5 	.word	0x000028a5

000069b8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    69b8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    69ba:	4b06      	ldr	r3, [pc, #24]	; (69d4 <stdio_io_write+0x1c>)
    69bc:	681b      	ldr	r3, [r3, #0]
    69be:	b133      	cbz	r3, 69ce <stdio_io_write+0x16>
    69c0:	460a      	mov	r2, r1
    69c2:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    69c4:	b292      	uxth	r2, r2
    69c6:	4618      	mov	r0, r3
    69c8:	4b03      	ldr	r3, [pc, #12]	; (69d8 <stdio_io_write+0x20>)
    69ca:	4798      	blx	r3
    69cc:	bd08      	pop	{r3, pc}
		return 0;
    69ce:	2000      	movs	r0, #0
}
    69d0:	bd08      	pop	{r3, pc}
    69d2:	bf00      	nop
    69d4:	200016c4 	.word	0x200016c4
    69d8:	00002875 	.word	0x00002875

000069dc <sqrt>:
    69dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69e0:	b08b      	sub	sp, #44	; 0x2c
    69e2:	4604      	mov	r4, r0
    69e4:	460d      	mov	r5, r1
    69e6:	f000 f857 	bl	6a98 <__ieee754_sqrt>
    69ea:	4b29      	ldr	r3, [pc, #164]	; (6a90 <sqrt+0xb4>)
    69ec:	f993 a000 	ldrsb.w	sl, [r3]
    69f0:	f1ba 3fff 	cmp.w	sl, #4294967295
    69f4:	4606      	mov	r6, r0
    69f6:	460f      	mov	r7, r1
    69f8:	d012      	beq.n	6a20 <sqrt+0x44>
    69fa:	4622      	mov	r2, r4
    69fc:	462b      	mov	r3, r5
    69fe:	4620      	mov	r0, r4
    6a00:	4629      	mov	r1, r5
    6a02:	f000 fd59 	bl	74b8 <__aeabi_dcmpun>
    6a06:	4683      	mov	fp, r0
    6a08:	b950      	cbnz	r0, 6a20 <sqrt+0x44>
    6a0a:	f04f 0800 	mov.w	r8, #0
    6a0e:	f04f 0900 	mov.w	r9, #0
    6a12:	4642      	mov	r2, r8
    6a14:	464b      	mov	r3, r9
    6a16:	4620      	mov	r0, r4
    6a18:	4629      	mov	r1, r5
    6a1a:	f000 fd25 	bl	7468 <__aeabi_dcmplt>
    6a1e:	b920      	cbnz	r0, 6a2a <sqrt+0x4e>
    6a20:	4630      	mov	r0, r6
    6a22:	4639      	mov	r1, r7
    6a24:	b00b      	add	sp, #44	; 0x2c
    6a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a2a:	4b1a      	ldr	r3, [pc, #104]	; (6a94 <sqrt+0xb8>)
    6a2c:	f8cd b020 	str.w	fp, [sp, #32]
    6a30:	2201      	movs	r2, #1
    6a32:	e9cd 4504 	strd	r4, r5, [sp, #16]
    6a36:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6a3a:	e88d 000c 	stmia.w	sp, {r2, r3}
    6a3e:	f1ba 0f00 	cmp.w	sl, #0
    6a42:	d017      	beq.n	6a74 <sqrt+0x98>
    6a44:	4642      	mov	r2, r8
    6a46:	464b      	mov	r3, r9
    6a48:	4640      	mov	r0, r8
    6a4a:	4649      	mov	r1, r9
    6a4c:	f000 fbc4 	bl	71d8 <__aeabi_ddiv>
    6a50:	f1ba 0f02 	cmp.w	sl, #2
    6a54:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6a58:	d10e      	bne.n	6a78 <sqrt+0x9c>
    6a5a:	f000 feef 	bl	783c <__errno>
    6a5e:	2321      	movs	r3, #33	; 0x21
    6a60:	6003      	str	r3, [r0, #0]
    6a62:	9b08      	ldr	r3, [sp, #32]
    6a64:	b973      	cbnz	r3, 6a84 <sqrt+0xa8>
    6a66:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    6a6a:	4630      	mov	r0, r6
    6a6c:	4639      	mov	r1, r7
    6a6e:	b00b      	add	sp, #44	; 0x2c
    6a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a74:	e9cd 8906 	strd	r8, r9, [sp, #24]
    6a78:	4668      	mov	r0, sp
    6a7a:	f000 f8c9 	bl	6c10 <matherr>
    6a7e:	2800      	cmp	r0, #0
    6a80:	d1ef      	bne.n	6a62 <sqrt+0x86>
    6a82:	e7ea      	b.n	6a5a <sqrt+0x7e>
    6a84:	f000 feda 	bl	783c <__errno>
    6a88:	9b08      	ldr	r3, [sp, #32]
    6a8a:	6003      	str	r3, [r0, #0]
    6a8c:	e7eb      	b.n	6a66 <sqrt+0x8a>
    6a8e:	bf00      	nop
    6a90:	200004ac 	.word	0x200004ac
    6a94:	0000cb5c 	.word	0x0000cb5c

00006a98 <__ieee754_sqrt>:
    6a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a9c:	4f5b      	ldr	r7, [pc, #364]	; (6c0c <__ieee754_sqrt+0x174>)
    6a9e:	438f      	bics	r7, r1
    6aa0:	4605      	mov	r5, r0
    6aa2:	460c      	mov	r4, r1
    6aa4:	f000 8092 	beq.w	6bcc <__ieee754_sqrt+0x134>
    6aa8:	2900      	cmp	r1, #0
    6aaa:	460b      	mov	r3, r1
    6aac:	4602      	mov	r2, r0
    6aae:	dd6f      	ble.n	6b90 <__ieee754_sqrt+0xf8>
    6ab0:	150f      	asrs	r7, r1, #20
    6ab2:	d07b      	beq.n	6bac <__ieee754_sqrt+0x114>
    6ab4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    6ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6abc:	07f8      	lsls	r0, r7, #31
    6abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6ac2:	d45c      	bmi.n	6b7e <__ieee754_sqrt+0xe6>
    6ac4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    6ac8:	2600      	movs	r6, #0
    6aca:	440b      	add	r3, r1
    6acc:	107f      	asrs	r7, r7, #1
    6ace:	0052      	lsls	r2, r2, #1
    6ad0:	46b6      	mov	lr, r6
    6ad2:	2016      	movs	r0, #22
    6ad4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6ad8:	eb0e 0401 	add.w	r4, lr, r1
    6adc:	429c      	cmp	r4, r3
    6ade:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    6ae2:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6ae6:	dc03      	bgt.n	6af0 <__ieee754_sqrt+0x58>
    6ae8:	1b1b      	subs	r3, r3, r4
    6aea:	eb04 0e01 	add.w	lr, r4, r1
    6aee:	440e      	add	r6, r1
    6af0:	3801      	subs	r0, #1
    6af2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    6af6:	ea4f 0151 	mov.w	r1, r1, lsr #1
    6afa:	d1ed      	bne.n	6ad8 <__ieee754_sqrt+0x40>
    6afc:	4684      	mov	ip, r0
    6afe:	2420      	movs	r4, #32
    6b00:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    6b04:	e009      	b.n	6b1a <__ieee754_sqrt+0x82>
    6b06:	d020      	beq.n	6b4a <__ieee754_sqrt+0xb2>
    6b08:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    6b0c:	3c01      	subs	r4, #1
    6b0e:	ea4f 0151 	mov.w	r1, r1, lsr #1
    6b12:	442b      	add	r3, r5
    6b14:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6b18:	d020      	beq.n	6b5c <__ieee754_sqrt+0xc4>
    6b1a:	4573      	cmp	r3, lr
    6b1c:	eb01 050c 	add.w	r5, r1, ip
    6b20:	ddf1      	ble.n	6b06 <__ieee754_sqrt+0x6e>
    6b22:	2d00      	cmp	r5, #0
    6b24:	eb05 0c01 	add.w	ip, r5, r1
    6b28:	db09      	blt.n	6b3e <__ieee754_sqrt+0xa6>
    6b2a:	46f0      	mov	r8, lr
    6b2c:	4295      	cmp	r5, r2
    6b2e:	eba3 030e 	sub.w	r3, r3, lr
    6b32:	d900      	bls.n	6b36 <__ieee754_sqrt+0x9e>
    6b34:	3b01      	subs	r3, #1
    6b36:	1b52      	subs	r2, r2, r5
    6b38:	4408      	add	r0, r1
    6b3a:	46c6      	mov	lr, r8
    6b3c:	e7e4      	b.n	6b08 <__ieee754_sqrt+0x70>
    6b3e:	f1bc 0f00 	cmp.w	ip, #0
    6b42:	dbf2      	blt.n	6b2a <__ieee754_sqrt+0x92>
    6b44:	f10e 0801 	add.w	r8, lr, #1
    6b48:	e7f0      	b.n	6b2c <__ieee754_sqrt+0x94>
    6b4a:	4295      	cmp	r5, r2
    6b4c:	d8dc      	bhi.n	6b08 <__ieee754_sqrt+0x70>
    6b4e:	2d00      	cmp	r5, #0
    6b50:	eb05 0c01 	add.w	ip, r5, r1
    6b54:	db44      	blt.n	6be0 <__ieee754_sqrt+0x148>
    6b56:	4698      	mov	r8, r3
    6b58:	2300      	movs	r3, #0
    6b5a:	e7ec      	b.n	6b36 <__ieee754_sqrt+0x9e>
    6b5c:	4313      	orrs	r3, r2
    6b5e:	d113      	bne.n	6b88 <__ieee754_sqrt+0xf0>
    6b60:	0840      	lsrs	r0, r0, #1
    6b62:	1073      	asrs	r3, r6, #1
    6b64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    6b68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6b6c:	07f2      	lsls	r2, r6, #31
    6b6e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    6b72:	bf48      	it	mi
    6b74:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    6b78:	4649      	mov	r1, r9
    6b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b7e:	005b      	lsls	r3, r3, #1
    6b80:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    6b84:	0052      	lsls	r2, r2, #1
    6b86:	e79d      	b.n	6ac4 <__ieee754_sqrt+0x2c>
    6b88:	1c41      	adds	r1, r0, #1
    6b8a:	d02d      	beq.n	6be8 <__ieee754_sqrt+0x150>
    6b8c:	3001      	adds	r0, #1
    6b8e:	e7e7      	b.n	6b60 <__ieee754_sqrt+0xc8>
    6b90:	4606      	mov	r6, r0
    6b92:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    6b96:	433e      	orrs	r6, r7
    6b98:	d0ef      	beq.n	6b7a <__ieee754_sqrt+0xe2>
    6b9a:	bb69      	cbnz	r1, 6bf8 <__ieee754_sqrt+0x160>
    6b9c:	460f      	mov	r7, r1
    6b9e:	0ad3      	lsrs	r3, r2, #11
    6ba0:	3f15      	subs	r7, #21
    6ba2:	0552      	lsls	r2, r2, #21
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d0fa      	beq.n	6b9e <__ieee754_sqrt+0x106>
    6ba8:	02de      	lsls	r6, r3, #11
    6baa:	d420      	bmi.n	6bee <__ieee754_sqrt+0x156>
    6bac:	2400      	movs	r4, #0
    6bae:	e000      	b.n	6bb2 <__ieee754_sqrt+0x11a>
    6bb0:	4604      	mov	r4, r0
    6bb2:	005b      	lsls	r3, r3, #1
    6bb4:	02dd      	lsls	r5, r3, #11
    6bb6:	f104 0001 	add.w	r0, r4, #1
    6bba:	d5f9      	bpl.n	6bb0 <__ieee754_sqrt+0x118>
    6bbc:	f1c0 0120 	rsb	r1, r0, #32
    6bc0:	fa22 f101 	lsr.w	r1, r2, r1
    6bc4:	430b      	orrs	r3, r1
    6bc6:	1b3f      	subs	r7, r7, r4
    6bc8:	4082      	lsls	r2, r0
    6bca:	e773      	b.n	6ab4 <__ieee754_sqrt+0x1c>
    6bcc:	4602      	mov	r2, r0
    6bce:	460b      	mov	r3, r1
    6bd0:	f000 f9d8 	bl	6f84 <__aeabi_dmul>
    6bd4:	462a      	mov	r2, r5
    6bd6:	4623      	mov	r3, r4
    6bd8:	f000 f822 	bl	6c20 <__adddf3>
    6bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6be0:	f1bc 0f00 	cmp.w	ip, #0
    6be4:	daae      	bge.n	6b44 <__ieee754_sqrt+0xac>
    6be6:	e7b6      	b.n	6b56 <__ieee754_sqrt+0xbe>
    6be8:	3601      	adds	r6, #1
    6bea:	4620      	mov	r0, r4
    6bec:	e7b9      	b.n	6b62 <__ieee754_sqrt+0xca>
    6bee:	2000      	movs	r0, #0
    6bf0:	2120      	movs	r1, #32
    6bf2:	f04f 34ff 	mov.w	r4, #4294967295
    6bf6:	e7e3      	b.n	6bc0 <__ieee754_sqrt+0x128>
    6bf8:	4602      	mov	r2, r0
    6bfa:	460b      	mov	r3, r1
    6bfc:	f000 f80e 	bl	6c1c <__aeabi_dsub>
    6c00:	4602      	mov	r2, r0
    6c02:	460b      	mov	r3, r1
    6c04:	f000 fae8 	bl	71d8 <__aeabi_ddiv>
    6c08:	e7b7      	b.n	6b7a <__ieee754_sqrt+0xe2>
    6c0a:	bf00      	nop
    6c0c:	7ff00000 	.word	0x7ff00000

00006c10 <matherr>:
    6c10:	2000      	movs	r0, #0
    6c12:	4770      	bx	lr

00006c14 <__aeabi_drsub>:
    6c14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    6c18:	e002      	b.n	6c20 <__adddf3>
    6c1a:	bf00      	nop

00006c1c <__aeabi_dsub>:
    6c1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00006c20 <__adddf3>:
    6c20:	b530      	push	{r4, r5, lr}
    6c22:	ea4f 0441 	mov.w	r4, r1, lsl #1
    6c26:	ea4f 0543 	mov.w	r5, r3, lsl #1
    6c2a:	ea94 0f05 	teq	r4, r5
    6c2e:	bf08      	it	eq
    6c30:	ea90 0f02 	teqeq	r0, r2
    6c34:	bf1f      	itttt	ne
    6c36:	ea54 0c00 	orrsne.w	ip, r4, r0
    6c3a:	ea55 0c02 	orrsne.w	ip, r5, r2
    6c3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    6c42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6c46:	f000 80e2 	beq.w	6e0e <__adddf3+0x1ee>
    6c4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    6c4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    6c52:	bfb8      	it	lt
    6c54:	426d      	neglt	r5, r5
    6c56:	dd0c      	ble.n	6c72 <__adddf3+0x52>
    6c58:	442c      	add	r4, r5
    6c5a:	ea80 0202 	eor.w	r2, r0, r2
    6c5e:	ea81 0303 	eor.w	r3, r1, r3
    6c62:	ea82 0000 	eor.w	r0, r2, r0
    6c66:	ea83 0101 	eor.w	r1, r3, r1
    6c6a:	ea80 0202 	eor.w	r2, r0, r2
    6c6e:	ea81 0303 	eor.w	r3, r1, r3
    6c72:	2d36      	cmp	r5, #54	; 0x36
    6c74:	bf88      	it	hi
    6c76:	bd30      	pophi	{r4, r5, pc}
    6c78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6c7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6c80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6c84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6c88:	d002      	beq.n	6c90 <__adddf3+0x70>
    6c8a:	4240      	negs	r0, r0
    6c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6c90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6c94:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6c98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6c9c:	d002      	beq.n	6ca4 <__adddf3+0x84>
    6c9e:	4252      	negs	r2, r2
    6ca0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6ca4:	ea94 0f05 	teq	r4, r5
    6ca8:	f000 80a7 	beq.w	6dfa <__adddf3+0x1da>
    6cac:	f1a4 0401 	sub.w	r4, r4, #1
    6cb0:	f1d5 0e20 	rsbs	lr, r5, #32
    6cb4:	db0d      	blt.n	6cd2 <__adddf3+0xb2>
    6cb6:	fa02 fc0e 	lsl.w	ip, r2, lr
    6cba:	fa22 f205 	lsr.w	r2, r2, r5
    6cbe:	1880      	adds	r0, r0, r2
    6cc0:	f141 0100 	adc.w	r1, r1, #0
    6cc4:	fa03 f20e 	lsl.w	r2, r3, lr
    6cc8:	1880      	adds	r0, r0, r2
    6cca:	fa43 f305 	asr.w	r3, r3, r5
    6cce:	4159      	adcs	r1, r3
    6cd0:	e00e      	b.n	6cf0 <__adddf3+0xd0>
    6cd2:	f1a5 0520 	sub.w	r5, r5, #32
    6cd6:	f10e 0e20 	add.w	lr, lr, #32
    6cda:	2a01      	cmp	r2, #1
    6cdc:	fa03 fc0e 	lsl.w	ip, r3, lr
    6ce0:	bf28      	it	cs
    6ce2:	f04c 0c02 	orrcs.w	ip, ip, #2
    6ce6:	fa43 f305 	asr.w	r3, r3, r5
    6cea:	18c0      	adds	r0, r0, r3
    6cec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    6cf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6cf4:	d507      	bpl.n	6d06 <__adddf3+0xe6>
    6cf6:	f04f 0e00 	mov.w	lr, #0
    6cfa:	f1dc 0c00 	rsbs	ip, ip, #0
    6cfe:	eb7e 0000 	sbcs.w	r0, lr, r0
    6d02:	eb6e 0101 	sbc.w	r1, lr, r1
    6d06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    6d0a:	d31b      	bcc.n	6d44 <__adddf3+0x124>
    6d0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    6d10:	d30c      	bcc.n	6d2c <__adddf3+0x10c>
    6d12:	0849      	lsrs	r1, r1, #1
    6d14:	ea5f 0030 	movs.w	r0, r0, rrx
    6d18:	ea4f 0c3c 	mov.w	ip, ip, rrx
    6d1c:	f104 0401 	add.w	r4, r4, #1
    6d20:	ea4f 5244 	mov.w	r2, r4, lsl #21
    6d24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    6d28:	f080 809a 	bcs.w	6e60 <__adddf3+0x240>
    6d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6d30:	bf08      	it	eq
    6d32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6d36:	f150 0000 	adcs.w	r0, r0, #0
    6d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6d3e:	ea41 0105 	orr.w	r1, r1, r5
    6d42:	bd30      	pop	{r4, r5, pc}
    6d44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    6d48:	4140      	adcs	r0, r0
    6d4a:	eb41 0101 	adc.w	r1, r1, r1
    6d4e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6d52:	f1a4 0401 	sub.w	r4, r4, #1
    6d56:	d1e9      	bne.n	6d2c <__adddf3+0x10c>
    6d58:	f091 0f00 	teq	r1, #0
    6d5c:	bf04      	itt	eq
    6d5e:	4601      	moveq	r1, r0
    6d60:	2000      	moveq	r0, #0
    6d62:	fab1 f381 	clz	r3, r1
    6d66:	bf08      	it	eq
    6d68:	3320      	addeq	r3, #32
    6d6a:	f1a3 030b 	sub.w	r3, r3, #11
    6d6e:	f1b3 0220 	subs.w	r2, r3, #32
    6d72:	da0c      	bge.n	6d8e <__adddf3+0x16e>
    6d74:	320c      	adds	r2, #12
    6d76:	dd08      	ble.n	6d8a <__adddf3+0x16a>
    6d78:	f102 0c14 	add.w	ip, r2, #20
    6d7c:	f1c2 020c 	rsb	r2, r2, #12
    6d80:	fa01 f00c 	lsl.w	r0, r1, ip
    6d84:	fa21 f102 	lsr.w	r1, r1, r2
    6d88:	e00c      	b.n	6da4 <__adddf3+0x184>
    6d8a:	f102 0214 	add.w	r2, r2, #20
    6d8e:	bfd8      	it	le
    6d90:	f1c2 0c20 	rsble	ip, r2, #32
    6d94:	fa01 f102 	lsl.w	r1, r1, r2
    6d98:	fa20 fc0c 	lsr.w	ip, r0, ip
    6d9c:	bfdc      	itt	le
    6d9e:	ea41 010c 	orrle.w	r1, r1, ip
    6da2:	4090      	lslle	r0, r2
    6da4:	1ae4      	subs	r4, r4, r3
    6da6:	bfa2      	ittt	ge
    6da8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6dac:	4329      	orrge	r1, r5
    6dae:	bd30      	popge	{r4, r5, pc}
    6db0:	ea6f 0404 	mvn.w	r4, r4
    6db4:	3c1f      	subs	r4, #31
    6db6:	da1c      	bge.n	6df2 <__adddf3+0x1d2>
    6db8:	340c      	adds	r4, #12
    6dba:	dc0e      	bgt.n	6dda <__adddf3+0x1ba>
    6dbc:	f104 0414 	add.w	r4, r4, #20
    6dc0:	f1c4 0220 	rsb	r2, r4, #32
    6dc4:	fa20 f004 	lsr.w	r0, r0, r4
    6dc8:	fa01 f302 	lsl.w	r3, r1, r2
    6dcc:	ea40 0003 	orr.w	r0, r0, r3
    6dd0:	fa21 f304 	lsr.w	r3, r1, r4
    6dd4:	ea45 0103 	orr.w	r1, r5, r3
    6dd8:	bd30      	pop	{r4, r5, pc}
    6dda:	f1c4 040c 	rsb	r4, r4, #12
    6dde:	f1c4 0220 	rsb	r2, r4, #32
    6de2:	fa20 f002 	lsr.w	r0, r0, r2
    6de6:	fa01 f304 	lsl.w	r3, r1, r4
    6dea:	ea40 0003 	orr.w	r0, r0, r3
    6dee:	4629      	mov	r1, r5
    6df0:	bd30      	pop	{r4, r5, pc}
    6df2:	fa21 f004 	lsr.w	r0, r1, r4
    6df6:	4629      	mov	r1, r5
    6df8:	bd30      	pop	{r4, r5, pc}
    6dfa:	f094 0f00 	teq	r4, #0
    6dfe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    6e02:	bf06      	itte	eq
    6e04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    6e08:	3401      	addeq	r4, #1
    6e0a:	3d01      	subne	r5, #1
    6e0c:	e74e      	b.n	6cac <__adddf3+0x8c>
    6e0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6e12:	bf18      	it	ne
    6e14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6e18:	d029      	beq.n	6e6e <__adddf3+0x24e>
    6e1a:	ea94 0f05 	teq	r4, r5
    6e1e:	bf08      	it	eq
    6e20:	ea90 0f02 	teqeq	r0, r2
    6e24:	d005      	beq.n	6e32 <__adddf3+0x212>
    6e26:	ea54 0c00 	orrs.w	ip, r4, r0
    6e2a:	bf04      	itt	eq
    6e2c:	4619      	moveq	r1, r3
    6e2e:	4610      	moveq	r0, r2
    6e30:	bd30      	pop	{r4, r5, pc}
    6e32:	ea91 0f03 	teq	r1, r3
    6e36:	bf1e      	ittt	ne
    6e38:	2100      	movne	r1, #0
    6e3a:	2000      	movne	r0, #0
    6e3c:	bd30      	popne	{r4, r5, pc}
    6e3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    6e42:	d105      	bne.n	6e50 <__adddf3+0x230>
    6e44:	0040      	lsls	r0, r0, #1
    6e46:	4149      	adcs	r1, r1
    6e48:	bf28      	it	cs
    6e4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    6e4e:	bd30      	pop	{r4, r5, pc}
    6e50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    6e54:	bf3c      	itt	cc
    6e56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    6e5a:	bd30      	popcc	{r4, r5, pc}
    6e5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6e60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    6e64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6e68:	f04f 0000 	mov.w	r0, #0
    6e6c:	bd30      	pop	{r4, r5, pc}
    6e6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6e72:	bf1a      	itte	ne
    6e74:	4619      	movne	r1, r3
    6e76:	4610      	movne	r0, r2
    6e78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    6e7c:	bf1c      	itt	ne
    6e7e:	460b      	movne	r3, r1
    6e80:	4602      	movne	r2, r0
    6e82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6e86:	bf06      	itte	eq
    6e88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    6e8c:	ea91 0f03 	teqeq	r1, r3
    6e90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    6e94:	bd30      	pop	{r4, r5, pc}
    6e96:	bf00      	nop

00006e98 <__aeabi_ui2d>:
    6e98:	f090 0f00 	teq	r0, #0
    6e9c:	bf04      	itt	eq
    6e9e:	2100      	moveq	r1, #0
    6ea0:	4770      	bxeq	lr
    6ea2:	b530      	push	{r4, r5, lr}
    6ea4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6ea8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6eac:	f04f 0500 	mov.w	r5, #0
    6eb0:	f04f 0100 	mov.w	r1, #0
    6eb4:	e750      	b.n	6d58 <__adddf3+0x138>
    6eb6:	bf00      	nop

00006eb8 <__aeabi_i2d>:
    6eb8:	f090 0f00 	teq	r0, #0
    6ebc:	bf04      	itt	eq
    6ebe:	2100      	moveq	r1, #0
    6ec0:	4770      	bxeq	lr
    6ec2:	b530      	push	{r4, r5, lr}
    6ec4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6ec8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6ecc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    6ed0:	bf48      	it	mi
    6ed2:	4240      	negmi	r0, r0
    6ed4:	f04f 0100 	mov.w	r1, #0
    6ed8:	e73e      	b.n	6d58 <__adddf3+0x138>
    6eda:	bf00      	nop

00006edc <__aeabi_f2d>:
    6edc:	0042      	lsls	r2, r0, #1
    6ede:	ea4f 01e2 	mov.w	r1, r2, asr #3
    6ee2:	ea4f 0131 	mov.w	r1, r1, rrx
    6ee6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    6eea:	bf1f      	itttt	ne
    6eec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    6ef0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6ef4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    6ef8:	4770      	bxne	lr
    6efa:	f092 0f00 	teq	r2, #0
    6efe:	bf14      	ite	ne
    6f00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6f04:	4770      	bxeq	lr
    6f06:	b530      	push	{r4, r5, lr}
    6f08:	f44f 7460 	mov.w	r4, #896	; 0x380
    6f0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6f10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6f14:	e720      	b.n	6d58 <__adddf3+0x138>
    6f16:	bf00      	nop

00006f18 <__aeabi_ul2d>:
    6f18:	ea50 0201 	orrs.w	r2, r0, r1
    6f1c:	bf08      	it	eq
    6f1e:	4770      	bxeq	lr
    6f20:	b530      	push	{r4, r5, lr}
    6f22:	f04f 0500 	mov.w	r5, #0
    6f26:	e00a      	b.n	6f3e <__aeabi_l2d+0x16>

00006f28 <__aeabi_l2d>:
    6f28:	ea50 0201 	orrs.w	r2, r0, r1
    6f2c:	bf08      	it	eq
    6f2e:	4770      	bxeq	lr
    6f30:	b530      	push	{r4, r5, lr}
    6f32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    6f36:	d502      	bpl.n	6f3e <__aeabi_l2d+0x16>
    6f38:	4240      	negs	r0, r0
    6f3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6f3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6f42:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6f46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    6f4a:	f43f aedc 	beq.w	6d06 <__adddf3+0xe6>
    6f4e:	f04f 0203 	mov.w	r2, #3
    6f52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6f56:	bf18      	it	ne
    6f58:	3203      	addne	r2, #3
    6f5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6f5e:	bf18      	it	ne
    6f60:	3203      	addne	r2, #3
    6f62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    6f66:	f1c2 0320 	rsb	r3, r2, #32
    6f6a:	fa00 fc03 	lsl.w	ip, r0, r3
    6f6e:	fa20 f002 	lsr.w	r0, r0, r2
    6f72:	fa01 fe03 	lsl.w	lr, r1, r3
    6f76:	ea40 000e 	orr.w	r0, r0, lr
    6f7a:	fa21 f102 	lsr.w	r1, r1, r2
    6f7e:	4414      	add	r4, r2
    6f80:	e6c1      	b.n	6d06 <__adddf3+0xe6>
    6f82:	bf00      	nop

00006f84 <__aeabi_dmul>:
    6f84:	b570      	push	{r4, r5, r6, lr}
    6f86:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6f8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    6f8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6f92:	bf1d      	ittte	ne
    6f94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6f98:	ea94 0f0c 	teqne	r4, ip
    6f9c:	ea95 0f0c 	teqne	r5, ip
    6fa0:	f000 f8de 	bleq	7160 <__aeabi_dmul+0x1dc>
    6fa4:	442c      	add	r4, r5
    6fa6:	ea81 0603 	eor.w	r6, r1, r3
    6faa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    6fae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    6fb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    6fb6:	bf18      	it	ne
    6fb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    6fbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6fc4:	d038      	beq.n	7038 <__aeabi_dmul+0xb4>
    6fc6:	fba0 ce02 	umull	ip, lr, r0, r2
    6fca:	f04f 0500 	mov.w	r5, #0
    6fce:	fbe1 e502 	umlal	lr, r5, r1, r2
    6fd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    6fd6:	fbe0 e503 	umlal	lr, r5, r0, r3
    6fda:	f04f 0600 	mov.w	r6, #0
    6fde:	fbe1 5603 	umlal	r5, r6, r1, r3
    6fe2:	f09c 0f00 	teq	ip, #0
    6fe6:	bf18      	it	ne
    6fe8:	f04e 0e01 	orrne.w	lr, lr, #1
    6fec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    6ff0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6ff4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    6ff8:	d204      	bcs.n	7004 <__aeabi_dmul+0x80>
    6ffa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    6ffe:	416d      	adcs	r5, r5
    7000:	eb46 0606 	adc.w	r6, r6, r6
    7004:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    7008:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    700c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    7010:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    7014:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    7018:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    701c:	bf88      	it	hi
    701e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    7022:	d81e      	bhi.n	7062 <__aeabi_dmul+0xde>
    7024:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    7028:	bf08      	it	eq
    702a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    702e:	f150 0000 	adcs.w	r0, r0, #0
    7032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    7036:	bd70      	pop	{r4, r5, r6, pc}
    7038:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    703c:	ea46 0101 	orr.w	r1, r6, r1
    7040:	ea40 0002 	orr.w	r0, r0, r2
    7044:	ea81 0103 	eor.w	r1, r1, r3
    7048:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    704c:	bfc2      	ittt	gt
    704e:	ebd4 050c 	rsbsgt	r5, r4, ip
    7052:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    7056:	bd70      	popgt	{r4, r5, r6, pc}
    7058:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    705c:	f04f 0e00 	mov.w	lr, #0
    7060:	3c01      	subs	r4, #1
    7062:	f300 80ab 	bgt.w	71bc <__aeabi_dmul+0x238>
    7066:	f114 0f36 	cmn.w	r4, #54	; 0x36
    706a:	bfde      	ittt	le
    706c:	2000      	movle	r0, #0
    706e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    7072:	bd70      	pople	{r4, r5, r6, pc}
    7074:	f1c4 0400 	rsb	r4, r4, #0
    7078:	3c20      	subs	r4, #32
    707a:	da35      	bge.n	70e8 <__aeabi_dmul+0x164>
    707c:	340c      	adds	r4, #12
    707e:	dc1b      	bgt.n	70b8 <__aeabi_dmul+0x134>
    7080:	f104 0414 	add.w	r4, r4, #20
    7084:	f1c4 0520 	rsb	r5, r4, #32
    7088:	fa00 f305 	lsl.w	r3, r0, r5
    708c:	fa20 f004 	lsr.w	r0, r0, r4
    7090:	fa01 f205 	lsl.w	r2, r1, r5
    7094:	ea40 0002 	orr.w	r0, r0, r2
    7098:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    709c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    70a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    70a4:	fa21 f604 	lsr.w	r6, r1, r4
    70a8:	eb42 0106 	adc.w	r1, r2, r6
    70ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    70b0:	bf08      	it	eq
    70b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    70b6:	bd70      	pop	{r4, r5, r6, pc}
    70b8:	f1c4 040c 	rsb	r4, r4, #12
    70bc:	f1c4 0520 	rsb	r5, r4, #32
    70c0:	fa00 f304 	lsl.w	r3, r0, r4
    70c4:	fa20 f005 	lsr.w	r0, r0, r5
    70c8:	fa01 f204 	lsl.w	r2, r1, r4
    70cc:	ea40 0002 	orr.w	r0, r0, r2
    70d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    70d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    70d8:	f141 0100 	adc.w	r1, r1, #0
    70dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    70e0:	bf08      	it	eq
    70e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    70e6:	bd70      	pop	{r4, r5, r6, pc}
    70e8:	f1c4 0520 	rsb	r5, r4, #32
    70ec:	fa00 f205 	lsl.w	r2, r0, r5
    70f0:	ea4e 0e02 	orr.w	lr, lr, r2
    70f4:	fa20 f304 	lsr.w	r3, r0, r4
    70f8:	fa01 f205 	lsl.w	r2, r1, r5
    70fc:	ea43 0302 	orr.w	r3, r3, r2
    7100:	fa21 f004 	lsr.w	r0, r1, r4
    7104:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7108:	fa21 f204 	lsr.w	r2, r1, r4
    710c:	ea20 0002 	bic.w	r0, r0, r2
    7110:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    7114:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    7118:	bf08      	it	eq
    711a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    711e:	bd70      	pop	{r4, r5, r6, pc}
    7120:	f094 0f00 	teq	r4, #0
    7124:	d10f      	bne.n	7146 <__aeabi_dmul+0x1c2>
    7126:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    712a:	0040      	lsls	r0, r0, #1
    712c:	eb41 0101 	adc.w	r1, r1, r1
    7130:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7134:	bf08      	it	eq
    7136:	3c01      	subeq	r4, #1
    7138:	d0f7      	beq.n	712a <__aeabi_dmul+0x1a6>
    713a:	ea41 0106 	orr.w	r1, r1, r6
    713e:	f095 0f00 	teq	r5, #0
    7142:	bf18      	it	ne
    7144:	4770      	bxne	lr
    7146:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    714a:	0052      	lsls	r2, r2, #1
    714c:	eb43 0303 	adc.w	r3, r3, r3
    7150:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    7154:	bf08      	it	eq
    7156:	3d01      	subeq	r5, #1
    7158:	d0f7      	beq.n	714a <__aeabi_dmul+0x1c6>
    715a:	ea43 0306 	orr.w	r3, r3, r6
    715e:	4770      	bx	lr
    7160:	ea94 0f0c 	teq	r4, ip
    7164:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    7168:	bf18      	it	ne
    716a:	ea95 0f0c 	teqne	r5, ip
    716e:	d00c      	beq.n	718a <__aeabi_dmul+0x206>
    7170:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    7174:	bf18      	it	ne
    7176:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    717a:	d1d1      	bne.n	7120 <__aeabi_dmul+0x19c>
    717c:	ea81 0103 	eor.w	r1, r1, r3
    7180:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7184:	f04f 0000 	mov.w	r0, #0
    7188:	bd70      	pop	{r4, r5, r6, pc}
    718a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    718e:	bf06      	itte	eq
    7190:	4610      	moveq	r0, r2
    7192:	4619      	moveq	r1, r3
    7194:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    7198:	d019      	beq.n	71ce <__aeabi_dmul+0x24a>
    719a:	ea94 0f0c 	teq	r4, ip
    719e:	d102      	bne.n	71a6 <__aeabi_dmul+0x222>
    71a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    71a4:	d113      	bne.n	71ce <__aeabi_dmul+0x24a>
    71a6:	ea95 0f0c 	teq	r5, ip
    71aa:	d105      	bne.n	71b8 <__aeabi_dmul+0x234>
    71ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    71b0:	bf1c      	itt	ne
    71b2:	4610      	movne	r0, r2
    71b4:	4619      	movne	r1, r3
    71b6:	d10a      	bne.n	71ce <__aeabi_dmul+0x24a>
    71b8:	ea81 0103 	eor.w	r1, r1, r3
    71bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    71c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    71c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    71c8:	f04f 0000 	mov.w	r0, #0
    71cc:	bd70      	pop	{r4, r5, r6, pc}
    71ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    71d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    71d6:	bd70      	pop	{r4, r5, r6, pc}

000071d8 <__aeabi_ddiv>:
    71d8:	b570      	push	{r4, r5, r6, lr}
    71da:	f04f 0cff 	mov.w	ip, #255	; 0xff
    71de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    71e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    71e6:	bf1d      	ittte	ne
    71e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    71ec:	ea94 0f0c 	teqne	r4, ip
    71f0:	ea95 0f0c 	teqne	r5, ip
    71f4:	f000 f8a7 	bleq	7346 <__aeabi_ddiv+0x16e>
    71f8:	eba4 0405 	sub.w	r4, r4, r5
    71fc:	ea81 0e03 	eor.w	lr, r1, r3
    7200:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    7204:	ea4f 3101 	mov.w	r1, r1, lsl #12
    7208:	f000 8088 	beq.w	731c <__aeabi_ddiv+0x144>
    720c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    7210:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7214:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    7218:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    721c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    7220:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    7224:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    7228:	ea4f 2600 	mov.w	r6, r0, lsl #8
    722c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    7230:	429d      	cmp	r5, r3
    7232:	bf08      	it	eq
    7234:	4296      	cmpeq	r6, r2
    7236:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    723a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    723e:	d202      	bcs.n	7246 <__aeabi_ddiv+0x6e>
    7240:	085b      	lsrs	r3, r3, #1
    7242:	ea4f 0232 	mov.w	r2, r2, rrx
    7246:	1ab6      	subs	r6, r6, r2
    7248:	eb65 0503 	sbc.w	r5, r5, r3
    724c:	085b      	lsrs	r3, r3, #1
    724e:	ea4f 0232 	mov.w	r2, r2, rrx
    7252:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7256:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    725a:	ebb6 0e02 	subs.w	lr, r6, r2
    725e:	eb75 0e03 	sbcs.w	lr, r5, r3
    7262:	bf22      	ittt	cs
    7264:	1ab6      	subcs	r6, r6, r2
    7266:	4675      	movcs	r5, lr
    7268:	ea40 000c 	orrcs.w	r0, r0, ip
    726c:	085b      	lsrs	r3, r3, #1
    726e:	ea4f 0232 	mov.w	r2, r2, rrx
    7272:	ebb6 0e02 	subs.w	lr, r6, r2
    7276:	eb75 0e03 	sbcs.w	lr, r5, r3
    727a:	bf22      	ittt	cs
    727c:	1ab6      	subcs	r6, r6, r2
    727e:	4675      	movcs	r5, lr
    7280:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    7284:	085b      	lsrs	r3, r3, #1
    7286:	ea4f 0232 	mov.w	r2, r2, rrx
    728a:	ebb6 0e02 	subs.w	lr, r6, r2
    728e:	eb75 0e03 	sbcs.w	lr, r5, r3
    7292:	bf22      	ittt	cs
    7294:	1ab6      	subcs	r6, r6, r2
    7296:	4675      	movcs	r5, lr
    7298:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    729c:	085b      	lsrs	r3, r3, #1
    729e:	ea4f 0232 	mov.w	r2, r2, rrx
    72a2:	ebb6 0e02 	subs.w	lr, r6, r2
    72a6:	eb75 0e03 	sbcs.w	lr, r5, r3
    72aa:	bf22      	ittt	cs
    72ac:	1ab6      	subcs	r6, r6, r2
    72ae:	4675      	movcs	r5, lr
    72b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    72b4:	ea55 0e06 	orrs.w	lr, r5, r6
    72b8:	d018      	beq.n	72ec <__aeabi_ddiv+0x114>
    72ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
    72be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    72c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    72c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    72ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    72ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    72d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    72d6:	d1c0      	bne.n	725a <__aeabi_ddiv+0x82>
    72d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    72dc:	d10b      	bne.n	72f6 <__aeabi_ddiv+0x11e>
    72de:	ea41 0100 	orr.w	r1, r1, r0
    72e2:	f04f 0000 	mov.w	r0, #0
    72e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    72ea:	e7b6      	b.n	725a <__aeabi_ddiv+0x82>
    72ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    72f0:	bf04      	itt	eq
    72f2:	4301      	orreq	r1, r0
    72f4:	2000      	moveq	r0, #0
    72f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    72fa:	bf88      	it	hi
    72fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    7300:	f63f aeaf 	bhi.w	7062 <__aeabi_dmul+0xde>
    7304:	ebb5 0c03 	subs.w	ip, r5, r3
    7308:	bf04      	itt	eq
    730a:	ebb6 0c02 	subseq.w	ip, r6, r2
    730e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    7312:	f150 0000 	adcs.w	r0, r0, #0
    7316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    731a:	bd70      	pop	{r4, r5, r6, pc}
    731c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    7320:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    7324:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    7328:	bfc2      	ittt	gt
    732a:	ebd4 050c 	rsbsgt	r5, r4, ip
    732e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    7332:	bd70      	popgt	{r4, r5, r6, pc}
    7334:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7338:	f04f 0e00 	mov.w	lr, #0
    733c:	3c01      	subs	r4, #1
    733e:	e690      	b.n	7062 <__aeabi_dmul+0xde>
    7340:	ea45 0e06 	orr.w	lr, r5, r6
    7344:	e68d      	b.n	7062 <__aeabi_dmul+0xde>
    7346:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    734a:	ea94 0f0c 	teq	r4, ip
    734e:	bf08      	it	eq
    7350:	ea95 0f0c 	teqeq	r5, ip
    7354:	f43f af3b 	beq.w	71ce <__aeabi_dmul+0x24a>
    7358:	ea94 0f0c 	teq	r4, ip
    735c:	d10a      	bne.n	7374 <__aeabi_ddiv+0x19c>
    735e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    7362:	f47f af34 	bne.w	71ce <__aeabi_dmul+0x24a>
    7366:	ea95 0f0c 	teq	r5, ip
    736a:	f47f af25 	bne.w	71b8 <__aeabi_dmul+0x234>
    736e:	4610      	mov	r0, r2
    7370:	4619      	mov	r1, r3
    7372:	e72c      	b.n	71ce <__aeabi_dmul+0x24a>
    7374:	ea95 0f0c 	teq	r5, ip
    7378:	d106      	bne.n	7388 <__aeabi_ddiv+0x1b0>
    737a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    737e:	f43f aefd 	beq.w	717c <__aeabi_dmul+0x1f8>
    7382:	4610      	mov	r0, r2
    7384:	4619      	mov	r1, r3
    7386:	e722      	b.n	71ce <__aeabi_dmul+0x24a>
    7388:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    738c:	bf18      	it	ne
    738e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    7392:	f47f aec5 	bne.w	7120 <__aeabi_dmul+0x19c>
    7396:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    739a:	f47f af0d 	bne.w	71b8 <__aeabi_dmul+0x234>
    739e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    73a2:	f47f aeeb 	bne.w	717c <__aeabi_dmul+0x1f8>
    73a6:	e712      	b.n	71ce <__aeabi_dmul+0x24a>

000073a8 <__gedf2>:
    73a8:	f04f 3cff 	mov.w	ip, #4294967295
    73ac:	e006      	b.n	73bc <__cmpdf2+0x4>
    73ae:	bf00      	nop

000073b0 <__ledf2>:
    73b0:	f04f 0c01 	mov.w	ip, #1
    73b4:	e002      	b.n	73bc <__cmpdf2+0x4>
    73b6:	bf00      	nop

000073b8 <__cmpdf2>:
    73b8:	f04f 0c01 	mov.w	ip, #1
    73bc:	f84d cd04 	str.w	ip, [sp, #-4]!
    73c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    73c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    73c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    73cc:	bf18      	it	ne
    73ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    73d2:	d01b      	beq.n	740c <__cmpdf2+0x54>
    73d4:	b001      	add	sp, #4
    73d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    73da:	bf0c      	ite	eq
    73dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    73e0:	ea91 0f03 	teqne	r1, r3
    73e4:	bf02      	ittt	eq
    73e6:	ea90 0f02 	teqeq	r0, r2
    73ea:	2000      	moveq	r0, #0
    73ec:	4770      	bxeq	lr
    73ee:	f110 0f00 	cmn.w	r0, #0
    73f2:	ea91 0f03 	teq	r1, r3
    73f6:	bf58      	it	pl
    73f8:	4299      	cmppl	r1, r3
    73fa:	bf08      	it	eq
    73fc:	4290      	cmpeq	r0, r2
    73fe:	bf2c      	ite	cs
    7400:	17d8      	asrcs	r0, r3, #31
    7402:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    7406:	f040 0001 	orr.w	r0, r0, #1
    740a:	4770      	bx	lr
    740c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    7410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7414:	d102      	bne.n	741c <__cmpdf2+0x64>
    7416:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    741a:	d107      	bne.n	742c <__cmpdf2+0x74>
    741c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7424:	d1d6      	bne.n	73d4 <__cmpdf2+0x1c>
    7426:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    742a:	d0d3      	beq.n	73d4 <__cmpdf2+0x1c>
    742c:	f85d 0b04 	ldr.w	r0, [sp], #4
    7430:	4770      	bx	lr
    7432:	bf00      	nop

00007434 <__aeabi_cdrcmple>:
    7434:	4684      	mov	ip, r0
    7436:	4610      	mov	r0, r2
    7438:	4662      	mov	r2, ip
    743a:	468c      	mov	ip, r1
    743c:	4619      	mov	r1, r3
    743e:	4663      	mov	r3, ip
    7440:	e000      	b.n	7444 <__aeabi_cdcmpeq>
    7442:	bf00      	nop

00007444 <__aeabi_cdcmpeq>:
    7444:	b501      	push	{r0, lr}
    7446:	f7ff ffb7 	bl	73b8 <__cmpdf2>
    744a:	2800      	cmp	r0, #0
    744c:	bf48      	it	mi
    744e:	f110 0f00 	cmnmi.w	r0, #0
    7452:	bd01      	pop	{r0, pc}

00007454 <__aeabi_dcmpeq>:
    7454:	f84d ed08 	str.w	lr, [sp, #-8]!
    7458:	f7ff fff4 	bl	7444 <__aeabi_cdcmpeq>
    745c:	bf0c      	ite	eq
    745e:	2001      	moveq	r0, #1
    7460:	2000      	movne	r0, #0
    7462:	f85d fb08 	ldr.w	pc, [sp], #8
    7466:	bf00      	nop

00007468 <__aeabi_dcmplt>:
    7468:	f84d ed08 	str.w	lr, [sp, #-8]!
    746c:	f7ff ffea 	bl	7444 <__aeabi_cdcmpeq>
    7470:	bf34      	ite	cc
    7472:	2001      	movcc	r0, #1
    7474:	2000      	movcs	r0, #0
    7476:	f85d fb08 	ldr.w	pc, [sp], #8
    747a:	bf00      	nop

0000747c <__aeabi_dcmple>:
    747c:	f84d ed08 	str.w	lr, [sp, #-8]!
    7480:	f7ff ffe0 	bl	7444 <__aeabi_cdcmpeq>
    7484:	bf94      	ite	ls
    7486:	2001      	movls	r0, #1
    7488:	2000      	movhi	r0, #0
    748a:	f85d fb08 	ldr.w	pc, [sp], #8
    748e:	bf00      	nop

00007490 <__aeabi_dcmpge>:
    7490:	f84d ed08 	str.w	lr, [sp, #-8]!
    7494:	f7ff ffce 	bl	7434 <__aeabi_cdrcmple>
    7498:	bf94      	ite	ls
    749a:	2001      	movls	r0, #1
    749c:	2000      	movhi	r0, #0
    749e:	f85d fb08 	ldr.w	pc, [sp], #8
    74a2:	bf00      	nop

000074a4 <__aeabi_dcmpgt>:
    74a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    74a8:	f7ff ffc4 	bl	7434 <__aeabi_cdrcmple>
    74ac:	bf34      	ite	cc
    74ae:	2001      	movcc	r0, #1
    74b0:	2000      	movcs	r0, #0
    74b2:	f85d fb08 	ldr.w	pc, [sp], #8
    74b6:	bf00      	nop

000074b8 <__aeabi_dcmpun>:
    74b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    74bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    74c0:	d102      	bne.n	74c8 <__aeabi_dcmpun+0x10>
    74c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    74c6:	d10a      	bne.n	74de <__aeabi_dcmpun+0x26>
    74c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    74cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    74d0:	d102      	bne.n	74d8 <__aeabi_dcmpun+0x20>
    74d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    74d6:	d102      	bne.n	74de <__aeabi_dcmpun+0x26>
    74d8:	f04f 0000 	mov.w	r0, #0
    74dc:	4770      	bx	lr
    74de:	f04f 0001 	mov.w	r0, #1
    74e2:	4770      	bx	lr

000074e4 <__aeabi_d2uiz>:
    74e4:	004a      	lsls	r2, r1, #1
    74e6:	d211      	bcs.n	750c <__aeabi_d2uiz+0x28>
    74e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    74ec:	d211      	bcs.n	7512 <__aeabi_d2uiz+0x2e>
    74ee:	d50d      	bpl.n	750c <__aeabi_d2uiz+0x28>
    74f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    74f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    74f8:	d40e      	bmi.n	7518 <__aeabi_d2uiz+0x34>
    74fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    74fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7502:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    7506:	fa23 f002 	lsr.w	r0, r3, r2
    750a:	4770      	bx	lr
    750c:	f04f 0000 	mov.w	r0, #0
    7510:	4770      	bx	lr
    7512:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    7516:	d102      	bne.n	751e <__aeabi_d2uiz+0x3a>
    7518:	f04f 30ff 	mov.w	r0, #4294967295
    751c:	4770      	bx	lr
    751e:	f04f 0000 	mov.w	r0, #0
    7522:	4770      	bx	lr

00007524 <__aeabi_uldivmod>:
    7524:	b953      	cbnz	r3, 753c <__aeabi_uldivmod+0x18>
    7526:	b94a      	cbnz	r2, 753c <__aeabi_uldivmod+0x18>
    7528:	2900      	cmp	r1, #0
    752a:	bf08      	it	eq
    752c:	2800      	cmpeq	r0, #0
    752e:	bf1c      	itt	ne
    7530:	f04f 31ff 	movne.w	r1, #4294967295
    7534:	f04f 30ff 	movne.w	r0, #4294967295
    7538:	f000 b97a 	b.w	7830 <__aeabi_idiv0>
    753c:	f1ad 0c08 	sub.w	ip, sp, #8
    7540:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    7544:	f000 f806 	bl	7554 <__udivmoddi4>
    7548:	f8dd e004 	ldr.w	lr, [sp, #4]
    754c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7550:	b004      	add	sp, #16
    7552:	4770      	bx	lr

00007554 <__udivmoddi4>:
    7554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7558:	468c      	mov	ip, r1
    755a:	460d      	mov	r5, r1
    755c:	4604      	mov	r4, r0
    755e:	9e08      	ldr	r6, [sp, #32]
    7560:	2b00      	cmp	r3, #0
    7562:	d151      	bne.n	7608 <__udivmoddi4+0xb4>
    7564:	428a      	cmp	r2, r1
    7566:	4617      	mov	r7, r2
    7568:	d96d      	bls.n	7646 <__udivmoddi4+0xf2>
    756a:	fab2 fe82 	clz	lr, r2
    756e:	f1be 0f00 	cmp.w	lr, #0
    7572:	d00b      	beq.n	758c <__udivmoddi4+0x38>
    7574:	f1ce 0c20 	rsb	ip, lr, #32
    7578:	fa01 f50e 	lsl.w	r5, r1, lr
    757c:	fa20 fc0c 	lsr.w	ip, r0, ip
    7580:	fa02 f70e 	lsl.w	r7, r2, lr
    7584:	ea4c 0c05 	orr.w	ip, ip, r5
    7588:	fa00 f40e 	lsl.w	r4, r0, lr
    758c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    7590:	0c25      	lsrs	r5, r4, #16
    7592:	fbbc f8fa 	udiv	r8, ip, sl
    7596:	fa1f f987 	uxth.w	r9, r7
    759a:	fb0a cc18 	mls	ip, sl, r8, ip
    759e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    75a2:	fb08 f309 	mul.w	r3, r8, r9
    75a6:	42ab      	cmp	r3, r5
    75a8:	d90a      	bls.n	75c0 <__udivmoddi4+0x6c>
    75aa:	19ed      	adds	r5, r5, r7
    75ac:	f108 32ff 	add.w	r2, r8, #4294967295
    75b0:	f080 8123 	bcs.w	77fa <__udivmoddi4+0x2a6>
    75b4:	42ab      	cmp	r3, r5
    75b6:	f240 8120 	bls.w	77fa <__udivmoddi4+0x2a6>
    75ba:	f1a8 0802 	sub.w	r8, r8, #2
    75be:	443d      	add	r5, r7
    75c0:	1aed      	subs	r5, r5, r3
    75c2:	b2a4      	uxth	r4, r4
    75c4:	fbb5 f0fa 	udiv	r0, r5, sl
    75c8:	fb0a 5510 	mls	r5, sl, r0, r5
    75cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    75d0:	fb00 f909 	mul.w	r9, r0, r9
    75d4:	45a1      	cmp	r9, r4
    75d6:	d909      	bls.n	75ec <__udivmoddi4+0x98>
    75d8:	19e4      	adds	r4, r4, r7
    75da:	f100 33ff 	add.w	r3, r0, #4294967295
    75de:	f080 810a 	bcs.w	77f6 <__udivmoddi4+0x2a2>
    75e2:	45a1      	cmp	r9, r4
    75e4:	f240 8107 	bls.w	77f6 <__udivmoddi4+0x2a2>
    75e8:	3802      	subs	r0, #2
    75ea:	443c      	add	r4, r7
    75ec:	eba4 0409 	sub.w	r4, r4, r9
    75f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    75f4:	2100      	movs	r1, #0
    75f6:	2e00      	cmp	r6, #0
    75f8:	d061      	beq.n	76be <__udivmoddi4+0x16a>
    75fa:	fa24 f40e 	lsr.w	r4, r4, lr
    75fe:	2300      	movs	r3, #0
    7600:	6034      	str	r4, [r6, #0]
    7602:	6073      	str	r3, [r6, #4]
    7604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7608:	428b      	cmp	r3, r1
    760a:	d907      	bls.n	761c <__udivmoddi4+0xc8>
    760c:	2e00      	cmp	r6, #0
    760e:	d054      	beq.n	76ba <__udivmoddi4+0x166>
    7610:	2100      	movs	r1, #0
    7612:	e886 0021 	stmia.w	r6, {r0, r5}
    7616:	4608      	mov	r0, r1
    7618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    761c:	fab3 f183 	clz	r1, r3
    7620:	2900      	cmp	r1, #0
    7622:	f040 808e 	bne.w	7742 <__udivmoddi4+0x1ee>
    7626:	42ab      	cmp	r3, r5
    7628:	d302      	bcc.n	7630 <__udivmoddi4+0xdc>
    762a:	4282      	cmp	r2, r0
    762c:	f200 80fa 	bhi.w	7824 <__udivmoddi4+0x2d0>
    7630:	1a84      	subs	r4, r0, r2
    7632:	eb65 0503 	sbc.w	r5, r5, r3
    7636:	2001      	movs	r0, #1
    7638:	46ac      	mov	ip, r5
    763a:	2e00      	cmp	r6, #0
    763c:	d03f      	beq.n	76be <__udivmoddi4+0x16a>
    763e:	e886 1010 	stmia.w	r6, {r4, ip}
    7642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7646:	b912      	cbnz	r2, 764e <__udivmoddi4+0xfa>
    7648:	2701      	movs	r7, #1
    764a:	fbb7 f7f2 	udiv	r7, r7, r2
    764e:	fab7 fe87 	clz	lr, r7
    7652:	f1be 0f00 	cmp.w	lr, #0
    7656:	d134      	bne.n	76c2 <__udivmoddi4+0x16e>
    7658:	1beb      	subs	r3, r5, r7
    765a:	0c3a      	lsrs	r2, r7, #16
    765c:	fa1f fc87 	uxth.w	ip, r7
    7660:	2101      	movs	r1, #1
    7662:	fbb3 f8f2 	udiv	r8, r3, r2
    7666:	0c25      	lsrs	r5, r4, #16
    7668:	fb02 3318 	mls	r3, r2, r8, r3
    766c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    7670:	fb0c f308 	mul.w	r3, ip, r8
    7674:	42ab      	cmp	r3, r5
    7676:	d907      	bls.n	7688 <__udivmoddi4+0x134>
    7678:	19ed      	adds	r5, r5, r7
    767a:	f108 30ff 	add.w	r0, r8, #4294967295
    767e:	d202      	bcs.n	7686 <__udivmoddi4+0x132>
    7680:	42ab      	cmp	r3, r5
    7682:	f200 80d1 	bhi.w	7828 <__udivmoddi4+0x2d4>
    7686:	4680      	mov	r8, r0
    7688:	1aed      	subs	r5, r5, r3
    768a:	b2a3      	uxth	r3, r4
    768c:	fbb5 f0f2 	udiv	r0, r5, r2
    7690:	fb02 5510 	mls	r5, r2, r0, r5
    7694:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    7698:	fb0c fc00 	mul.w	ip, ip, r0
    769c:	45a4      	cmp	ip, r4
    769e:	d907      	bls.n	76b0 <__udivmoddi4+0x15c>
    76a0:	19e4      	adds	r4, r4, r7
    76a2:	f100 33ff 	add.w	r3, r0, #4294967295
    76a6:	d202      	bcs.n	76ae <__udivmoddi4+0x15a>
    76a8:	45a4      	cmp	ip, r4
    76aa:	f200 80b8 	bhi.w	781e <__udivmoddi4+0x2ca>
    76ae:	4618      	mov	r0, r3
    76b0:	eba4 040c 	sub.w	r4, r4, ip
    76b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    76b8:	e79d      	b.n	75f6 <__udivmoddi4+0xa2>
    76ba:	4631      	mov	r1, r6
    76bc:	4630      	mov	r0, r6
    76be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76c2:	f1ce 0420 	rsb	r4, lr, #32
    76c6:	fa05 f30e 	lsl.w	r3, r5, lr
    76ca:	fa07 f70e 	lsl.w	r7, r7, lr
    76ce:	fa20 f804 	lsr.w	r8, r0, r4
    76d2:	0c3a      	lsrs	r2, r7, #16
    76d4:	fa25 f404 	lsr.w	r4, r5, r4
    76d8:	ea48 0803 	orr.w	r8, r8, r3
    76dc:	fbb4 f1f2 	udiv	r1, r4, r2
    76e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    76e4:	fb02 4411 	mls	r4, r2, r1, r4
    76e8:	fa1f fc87 	uxth.w	ip, r7
    76ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    76f0:	fb01 f30c 	mul.w	r3, r1, ip
    76f4:	42ab      	cmp	r3, r5
    76f6:	fa00 f40e 	lsl.w	r4, r0, lr
    76fa:	d909      	bls.n	7710 <__udivmoddi4+0x1bc>
    76fc:	19ed      	adds	r5, r5, r7
    76fe:	f101 30ff 	add.w	r0, r1, #4294967295
    7702:	f080 808a 	bcs.w	781a <__udivmoddi4+0x2c6>
    7706:	42ab      	cmp	r3, r5
    7708:	f240 8087 	bls.w	781a <__udivmoddi4+0x2c6>
    770c:	3902      	subs	r1, #2
    770e:	443d      	add	r5, r7
    7710:	1aeb      	subs	r3, r5, r3
    7712:	fa1f f588 	uxth.w	r5, r8
    7716:	fbb3 f0f2 	udiv	r0, r3, r2
    771a:	fb02 3310 	mls	r3, r2, r0, r3
    771e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    7722:	fb00 f30c 	mul.w	r3, r0, ip
    7726:	42ab      	cmp	r3, r5
    7728:	d907      	bls.n	773a <__udivmoddi4+0x1e6>
    772a:	19ed      	adds	r5, r5, r7
    772c:	f100 38ff 	add.w	r8, r0, #4294967295
    7730:	d26f      	bcs.n	7812 <__udivmoddi4+0x2be>
    7732:	42ab      	cmp	r3, r5
    7734:	d96d      	bls.n	7812 <__udivmoddi4+0x2be>
    7736:	3802      	subs	r0, #2
    7738:	443d      	add	r5, r7
    773a:	1aeb      	subs	r3, r5, r3
    773c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    7740:	e78f      	b.n	7662 <__udivmoddi4+0x10e>
    7742:	f1c1 0720 	rsb	r7, r1, #32
    7746:	fa22 f807 	lsr.w	r8, r2, r7
    774a:	408b      	lsls	r3, r1
    774c:	fa05 f401 	lsl.w	r4, r5, r1
    7750:	ea48 0303 	orr.w	r3, r8, r3
    7754:	fa20 fe07 	lsr.w	lr, r0, r7
    7758:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    775c:	40fd      	lsrs	r5, r7
    775e:	ea4e 0e04 	orr.w	lr, lr, r4
    7762:	fbb5 f9fc 	udiv	r9, r5, ip
    7766:	ea4f 441e 	mov.w	r4, lr, lsr #16
    776a:	fb0c 5519 	mls	r5, ip, r9, r5
    776e:	fa1f f883 	uxth.w	r8, r3
    7772:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    7776:	fb09 f408 	mul.w	r4, r9, r8
    777a:	42ac      	cmp	r4, r5
    777c:	fa02 f201 	lsl.w	r2, r2, r1
    7780:	fa00 fa01 	lsl.w	sl, r0, r1
    7784:	d908      	bls.n	7798 <__udivmoddi4+0x244>
    7786:	18ed      	adds	r5, r5, r3
    7788:	f109 30ff 	add.w	r0, r9, #4294967295
    778c:	d243      	bcs.n	7816 <__udivmoddi4+0x2c2>
    778e:	42ac      	cmp	r4, r5
    7790:	d941      	bls.n	7816 <__udivmoddi4+0x2c2>
    7792:	f1a9 0902 	sub.w	r9, r9, #2
    7796:	441d      	add	r5, r3
    7798:	1b2d      	subs	r5, r5, r4
    779a:	fa1f fe8e 	uxth.w	lr, lr
    779e:	fbb5 f0fc 	udiv	r0, r5, ip
    77a2:	fb0c 5510 	mls	r5, ip, r0, r5
    77a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    77aa:	fb00 f808 	mul.w	r8, r0, r8
    77ae:	45a0      	cmp	r8, r4
    77b0:	d907      	bls.n	77c2 <__udivmoddi4+0x26e>
    77b2:	18e4      	adds	r4, r4, r3
    77b4:	f100 35ff 	add.w	r5, r0, #4294967295
    77b8:	d229      	bcs.n	780e <__udivmoddi4+0x2ba>
    77ba:	45a0      	cmp	r8, r4
    77bc:	d927      	bls.n	780e <__udivmoddi4+0x2ba>
    77be:	3802      	subs	r0, #2
    77c0:	441c      	add	r4, r3
    77c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    77c6:	eba4 0408 	sub.w	r4, r4, r8
    77ca:	fba0 8902 	umull	r8, r9, r0, r2
    77ce:	454c      	cmp	r4, r9
    77d0:	46c6      	mov	lr, r8
    77d2:	464d      	mov	r5, r9
    77d4:	d315      	bcc.n	7802 <__udivmoddi4+0x2ae>
    77d6:	d012      	beq.n	77fe <__udivmoddi4+0x2aa>
    77d8:	b156      	cbz	r6, 77f0 <__udivmoddi4+0x29c>
    77da:	ebba 030e 	subs.w	r3, sl, lr
    77de:	eb64 0405 	sbc.w	r4, r4, r5
    77e2:	fa04 f707 	lsl.w	r7, r4, r7
    77e6:	40cb      	lsrs	r3, r1
    77e8:	431f      	orrs	r7, r3
    77ea:	40cc      	lsrs	r4, r1
    77ec:	6037      	str	r7, [r6, #0]
    77ee:	6074      	str	r4, [r6, #4]
    77f0:	2100      	movs	r1, #0
    77f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77f6:	4618      	mov	r0, r3
    77f8:	e6f8      	b.n	75ec <__udivmoddi4+0x98>
    77fa:	4690      	mov	r8, r2
    77fc:	e6e0      	b.n	75c0 <__udivmoddi4+0x6c>
    77fe:	45c2      	cmp	sl, r8
    7800:	d2ea      	bcs.n	77d8 <__udivmoddi4+0x284>
    7802:	ebb8 0e02 	subs.w	lr, r8, r2
    7806:	eb69 0503 	sbc.w	r5, r9, r3
    780a:	3801      	subs	r0, #1
    780c:	e7e4      	b.n	77d8 <__udivmoddi4+0x284>
    780e:	4628      	mov	r0, r5
    7810:	e7d7      	b.n	77c2 <__udivmoddi4+0x26e>
    7812:	4640      	mov	r0, r8
    7814:	e791      	b.n	773a <__udivmoddi4+0x1e6>
    7816:	4681      	mov	r9, r0
    7818:	e7be      	b.n	7798 <__udivmoddi4+0x244>
    781a:	4601      	mov	r1, r0
    781c:	e778      	b.n	7710 <__udivmoddi4+0x1bc>
    781e:	3802      	subs	r0, #2
    7820:	443c      	add	r4, r7
    7822:	e745      	b.n	76b0 <__udivmoddi4+0x15c>
    7824:	4608      	mov	r0, r1
    7826:	e708      	b.n	763a <__udivmoddi4+0xe6>
    7828:	f1a8 0802 	sub.w	r8, r8, #2
    782c:	443d      	add	r5, r7
    782e:	e72b      	b.n	7688 <__udivmoddi4+0x134>

00007830 <__aeabi_idiv0>:
    7830:	4770      	bx	lr
    7832:	bf00      	nop

00007834 <atoi>:
    7834:	220a      	movs	r2, #10
    7836:	2100      	movs	r1, #0
    7838:	f001 bb9a 	b.w	8f70 <strtol>

0000783c <__errno>:
    783c:	4b01      	ldr	r3, [pc, #4]	; (7844 <__errno+0x8>)
    783e:	6818      	ldr	r0, [r3, #0]
    7840:	4770      	bx	lr
    7842:	bf00      	nop
    7844:	200004b0 	.word	0x200004b0

00007848 <__sflush_r>:
    7848:	898a      	ldrh	r2, [r1, #12]
    784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    784e:	4605      	mov	r5, r0
    7850:	0710      	lsls	r0, r2, #28
    7852:	460c      	mov	r4, r1
    7854:	d45a      	bmi.n	790c <__sflush_r+0xc4>
    7856:	684b      	ldr	r3, [r1, #4]
    7858:	2b00      	cmp	r3, #0
    785a:	dc05      	bgt.n	7868 <__sflush_r+0x20>
    785c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    785e:	2b00      	cmp	r3, #0
    7860:	dc02      	bgt.n	7868 <__sflush_r+0x20>
    7862:	2000      	movs	r0, #0
    7864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    786a:	2e00      	cmp	r6, #0
    786c:	d0f9      	beq.n	7862 <__sflush_r+0x1a>
    786e:	2300      	movs	r3, #0
    7870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    7874:	682f      	ldr	r7, [r5, #0]
    7876:	602b      	str	r3, [r5, #0]
    7878:	d033      	beq.n	78e2 <__sflush_r+0x9a>
    787a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    787c:	89a3      	ldrh	r3, [r4, #12]
    787e:	075a      	lsls	r2, r3, #29
    7880:	d505      	bpl.n	788e <__sflush_r+0x46>
    7882:	6863      	ldr	r3, [r4, #4]
    7884:	1ac0      	subs	r0, r0, r3
    7886:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7888:	b10b      	cbz	r3, 788e <__sflush_r+0x46>
    788a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    788c:	1ac0      	subs	r0, r0, r3
    788e:	2300      	movs	r3, #0
    7890:	4602      	mov	r2, r0
    7892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    7894:	6a21      	ldr	r1, [r4, #32]
    7896:	4628      	mov	r0, r5
    7898:	47b0      	blx	r6
    789a:	1c43      	adds	r3, r0, #1
    789c:	89a3      	ldrh	r3, [r4, #12]
    789e:	d106      	bne.n	78ae <__sflush_r+0x66>
    78a0:	6829      	ldr	r1, [r5, #0]
    78a2:	291d      	cmp	r1, #29
    78a4:	d84b      	bhi.n	793e <__sflush_r+0xf6>
    78a6:	4a2b      	ldr	r2, [pc, #172]	; (7954 <__sflush_r+0x10c>)
    78a8:	40ca      	lsrs	r2, r1
    78aa:	07d6      	lsls	r6, r2, #31
    78ac:	d547      	bpl.n	793e <__sflush_r+0xf6>
    78ae:	2200      	movs	r2, #0
    78b0:	6062      	str	r2, [r4, #4]
    78b2:	04d9      	lsls	r1, r3, #19
    78b4:	6922      	ldr	r2, [r4, #16]
    78b6:	6022      	str	r2, [r4, #0]
    78b8:	d504      	bpl.n	78c4 <__sflush_r+0x7c>
    78ba:	1c42      	adds	r2, r0, #1
    78bc:	d101      	bne.n	78c2 <__sflush_r+0x7a>
    78be:	682b      	ldr	r3, [r5, #0]
    78c0:	b903      	cbnz	r3, 78c4 <__sflush_r+0x7c>
    78c2:	6560      	str	r0, [r4, #84]	; 0x54
    78c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    78c6:	602f      	str	r7, [r5, #0]
    78c8:	2900      	cmp	r1, #0
    78ca:	d0ca      	beq.n	7862 <__sflush_r+0x1a>
    78cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    78d0:	4299      	cmp	r1, r3
    78d2:	d002      	beq.n	78da <__sflush_r+0x92>
    78d4:	4628      	mov	r0, r5
    78d6:	f000 f9b1 	bl	7c3c <_free_r>
    78da:	2000      	movs	r0, #0
    78dc:	6360      	str	r0, [r4, #52]	; 0x34
    78de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78e2:	6a21      	ldr	r1, [r4, #32]
    78e4:	2301      	movs	r3, #1
    78e6:	4628      	mov	r0, r5
    78e8:	47b0      	blx	r6
    78ea:	1c41      	adds	r1, r0, #1
    78ec:	d1c6      	bne.n	787c <__sflush_r+0x34>
    78ee:	682b      	ldr	r3, [r5, #0]
    78f0:	2b00      	cmp	r3, #0
    78f2:	d0c3      	beq.n	787c <__sflush_r+0x34>
    78f4:	2b1d      	cmp	r3, #29
    78f6:	d001      	beq.n	78fc <__sflush_r+0xb4>
    78f8:	2b16      	cmp	r3, #22
    78fa:	d101      	bne.n	7900 <__sflush_r+0xb8>
    78fc:	602f      	str	r7, [r5, #0]
    78fe:	e7b0      	b.n	7862 <__sflush_r+0x1a>
    7900:	89a3      	ldrh	r3, [r4, #12]
    7902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7906:	81a3      	strh	r3, [r4, #12]
    7908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    790c:	690f      	ldr	r7, [r1, #16]
    790e:	2f00      	cmp	r7, #0
    7910:	d0a7      	beq.n	7862 <__sflush_r+0x1a>
    7912:	0793      	lsls	r3, r2, #30
    7914:	680e      	ldr	r6, [r1, #0]
    7916:	bf08      	it	eq
    7918:	694b      	ldreq	r3, [r1, #20]
    791a:	600f      	str	r7, [r1, #0]
    791c:	bf18      	it	ne
    791e:	2300      	movne	r3, #0
    7920:	eba6 0807 	sub.w	r8, r6, r7
    7924:	608b      	str	r3, [r1, #8]
    7926:	f1b8 0f00 	cmp.w	r8, #0
    792a:	dd9a      	ble.n	7862 <__sflush_r+0x1a>
    792c:	4643      	mov	r3, r8
    792e:	463a      	mov	r2, r7
    7930:	6a21      	ldr	r1, [r4, #32]
    7932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7934:	4628      	mov	r0, r5
    7936:	47b0      	blx	r6
    7938:	2800      	cmp	r0, #0
    793a:	dc07      	bgt.n	794c <__sflush_r+0x104>
    793c:	89a3      	ldrh	r3, [r4, #12]
    793e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7942:	81a3      	strh	r3, [r4, #12]
    7944:	f04f 30ff 	mov.w	r0, #4294967295
    7948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    794c:	4407      	add	r7, r0
    794e:	eba8 0800 	sub.w	r8, r8, r0
    7952:	e7e8      	b.n	7926 <__sflush_r+0xde>
    7954:	20400001 	.word	0x20400001

00007958 <_fflush_r>:
    7958:	b538      	push	{r3, r4, r5, lr}
    795a:	690b      	ldr	r3, [r1, #16]
    795c:	4605      	mov	r5, r0
    795e:	460c      	mov	r4, r1
    7960:	b1db      	cbz	r3, 799a <_fflush_r+0x42>
    7962:	b118      	cbz	r0, 796c <_fflush_r+0x14>
    7964:	6983      	ldr	r3, [r0, #24]
    7966:	b90b      	cbnz	r3, 796c <_fflush_r+0x14>
    7968:	f000 f872 	bl	7a50 <__sinit>
    796c:	4b0c      	ldr	r3, [pc, #48]	; (79a0 <_fflush_r+0x48>)
    796e:	429c      	cmp	r4, r3
    7970:	d109      	bne.n	7986 <_fflush_r+0x2e>
    7972:	686c      	ldr	r4, [r5, #4]
    7974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7978:	b17b      	cbz	r3, 799a <_fflush_r+0x42>
    797a:	4621      	mov	r1, r4
    797c:	4628      	mov	r0, r5
    797e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7982:	f7ff bf61 	b.w	7848 <__sflush_r>
    7986:	4b07      	ldr	r3, [pc, #28]	; (79a4 <_fflush_r+0x4c>)
    7988:	429c      	cmp	r4, r3
    798a:	d101      	bne.n	7990 <_fflush_r+0x38>
    798c:	68ac      	ldr	r4, [r5, #8]
    798e:	e7f1      	b.n	7974 <_fflush_r+0x1c>
    7990:	4b05      	ldr	r3, [pc, #20]	; (79a8 <_fflush_r+0x50>)
    7992:	429c      	cmp	r4, r3
    7994:	bf08      	it	eq
    7996:	68ec      	ldreq	r4, [r5, #12]
    7998:	e7ec      	b.n	7974 <_fflush_r+0x1c>
    799a:	2000      	movs	r0, #0
    799c:	bd38      	pop	{r3, r4, r5, pc}
    799e:	bf00      	nop
    79a0:	0000cb84 	.word	0x0000cb84
    79a4:	0000cba4 	.word	0x0000cba4
    79a8:	0000cb64 	.word	0x0000cb64

000079ac <fflush>:
    79ac:	4601      	mov	r1, r0
    79ae:	b920      	cbnz	r0, 79ba <fflush+0xe>
    79b0:	4b04      	ldr	r3, [pc, #16]	; (79c4 <fflush+0x18>)
    79b2:	4905      	ldr	r1, [pc, #20]	; (79c8 <fflush+0x1c>)
    79b4:	6818      	ldr	r0, [r3, #0]
    79b6:	f000 b8d3 	b.w	7b60 <_fwalk_reent>
    79ba:	4b04      	ldr	r3, [pc, #16]	; (79cc <fflush+0x20>)
    79bc:	6818      	ldr	r0, [r3, #0]
    79be:	f7ff bfcb 	b.w	7958 <_fflush_r>
    79c2:	bf00      	nop
    79c4:	0000cbc4 	.word	0x0000cbc4
    79c8:	00007959 	.word	0x00007959
    79cc:	200004b0 	.word	0x200004b0

000079d0 <_cleanup_r>:
    79d0:	4901      	ldr	r1, [pc, #4]	; (79d8 <_cleanup_r+0x8>)
    79d2:	f000 b8c5 	b.w	7b60 <_fwalk_reent>
    79d6:	bf00      	nop
    79d8:	00007959 	.word	0x00007959

000079dc <std.isra.0>:
    79dc:	2300      	movs	r3, #0
    79de:	b510      	push	{r4, lr}
    79e0:	4604      	mov	r4, r0
    79e2:	6003      	str	r3, [r0, #0]
    79e4:	6043      	str	r3, [r0, #4]
    79e6:	6083      	str	r3, [r0, #8]
    79e8:	8181      	strh	r1, [r0, #12]
    79ea:	6643      	str	r3, [r0, #100]	; 0x64
    79ec:	81c2      	strh	r2, [r0, #14]
    79ee:	6103      	str	r3, [r0, #16]
    79f0:	6143      	str	r3, [r0, #20]
    79f2:	6183      	str	r3, [r0, #24]
    79f4:	4619      	mov	r1, r3
    79f6:	2208      	movs	r2, #8
    79f8:	305c      	adds	r0, #92	; 0x5c
    79fa:	f000 f917 	bl	7c2c <memset>
    79fe:	4b05      	ldr	r3, [pc, #20]	; (7a14 <std.isra.0+0x38>)
    7a00:	6263      	str	r3, [r4, #36]	; 0x24
    7a02:	4b05      	ldr	r3, [pc, #20]	; (7a18 <std.isra.0+0x3c>)
    7a04:	62a3      	str	r3, [r4, #40]	; 0x28
    7a06:	4b05      	ldr	r3, [pc, #20]	; (7a1c <std.isra.0+0x40>)
    7a08:	62e3      	str	r3, [r4, #44]	; 0x2c
    7a0a:	4b05      	ldr	r3, [pc, #20]	; (7a20 <std.isra.0+0x44>)
    7a0c:	6224      	str	r4, [r4, #32]
    7a0e:	6323      	str	r3, [r4, #48]	; 0x30
    7a10:	bd10      	pop	{r4, pc}
    7a12:	bf00      	nop
    7a14:	000080f9 	.word	0x000080f9
    7a18:	0000811b 	.word	0x0000811b
    7a1c:	00008153 	.word	0x00008153
    7a20:	00008177 	.word	0x00008177

00007a24 <__sfmoreglue>:
    7a24:	b570      	push	{r4, r5, r6, lr}
    7a26:	1e4a      	subs	r2, r1, #1
    7a28:	2568      	movs	r5, #104	; 0x68
    7a2a:	4355      	muls	r5, r2
    7a2c:	460e      	mov	r6, r1
    7a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    7a32:	f000 f951 	bl	7cd8 <_malloc_r>
    7a36:	4604      	mov	r4, r0
    7a38:	b140      	cbz	r0, 7a4c <__sfmoreglue+0x28>
    7a3a:	2100      	movs	r1, #0
    7a3c:	e880 0042 	stmia.w	r0, {r1, r6}
    7a40:	300c      	adds	r0, #12
    7a42:	60a0      	str	r0, [r4, #8]
    7a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
    7a48:	f000 f8f0 	bl	7c2c <memset>
    7a4c:	4620      	mov	r0, r4
    7a4e:	bd70      	pop	{r4, r5, r6, pc}

00007a50 <__sinit>:
    7a50:	6983      	ldr	r3, [r0, #24]
    7a52:	b510      	push	{r4, lr}
    7a54:	4604      	mov	r4, r0
    7a56:	bb33      	cbnz	r3, 7aa6 <__sinit+0x56>
    7a58:	6483      	str	r3, [r0, #72]	; 0x48
    7a5a:	64c3      	str	r3, [r0, #76]	; 0x4c
    7a5c:	6503      	str	r3, [r0, #80]	; 0x50
    7a5e:	4b12      	ldr	r3, [pc, #72]	; (7aa8 <__sinit+0x58>)
    7a60:	4a12      	ldr	r2, [pc, #72]	; (7aac <__sinit+0x5c>)
    7a62:	681b      	ldr	r3, [r3, #0]
    7a64:	6282      	str	r2, [r0, #40]	; 0x28
    7a66:	4298      	cmp	r0, r3
    7a68:	bf04      	itt	eq
    7a6a:	2301      	moveq	r3, #1
    7a6c:	6183      	streq	r3, [r0, #24]
    7a6e:	f000 f81f 	bl	7ab0 <__sfp>
    7a72:	6060      	str	r0, [r4, #4]
    7a74:	4620      	mov	r0, r4
    7a76:	f000 f81b 	bl	7ab0 <__sfp>
    7a7a:	60a0      	str	r0, [r4, #8]
    7a7c:	4620      	mov	r0, r4
    7a7e:	f000 f817 	bl	7ab0 <__sfp>
    7a82:	2200      	movs	r2, #0
    7a84:	60e0      	str	r0, [r4, #12]
    7a86:	2104      	movs	r1, #4
    7a88:	6860      	ldr	r0, [r4, #4]
    7a8a:	f7ff ffa7 	bl	79dc <std.isra.0>
    7a8e:	2201      	movs	r2, #1
    7a90:	2109      	movs	r1, #9
    7a92:	68a0      	ldr	r0, [r4, #8]
    7a94:	f7ff ffa2 	bl	79dc <std.isra.0>
    7a98:	2202      	movs	r2, #2
    7a9a:	2112      	movs	r1, #18
    7a9c:	68e0      	ldr	r0, [r4, #12]
    7a9e:	f7ff ff9d 	bl	79dc <std.isra.0>
    7aa2:	2301      	movs	r3, #1
    7aa4:	61a3      	str	r3, [r4, #24]
    7aa6:	bd10      	pop	{r4, pc}
    7aa8:	0000cbc4 	.word	0x0000cbc4
    7aac:	000079d1 	.word	0x000079d1

00007ab0 <__sfp>:
    7ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ab2:	4b1c      	ldr	r3, [pc, #112]	; (7b24 <__sfp+0x74>)
    7ab4:	681e      	ldr	r6, [r3, #0]
    7ab6:	69b3      	ldr	r3, [r6, #24]
    7ab8:	4607      	mov	r7, r0
    7aba:	b913      	cbnz	r3, 7ac2 <__sfp+0x12>
    7abc:	4630      	mov	r0, r6
    7abe:	f7ff ffc7 	bl	7a50 <__sinit>
    7ac2:	3648      	adds	r6, #72	; 0x48
    7ac4:	68b4      	ldr	r4, [r6, #8]
    7ac6:	6873      	ldr	r3, [r6, #4]
    7ac8:	3b01      	subs	r3, #1
    7aca:	d503      	bpl.n	7ad4 <__sfp+0x24>
    7acc:	6833      	ldr	r3, [r6, #0]
    7ace:	b133      	cbz	r3, 7ade <__sfp+0x2e>
    7ad0:	6836      	ldr	r6, [r6, #0]
    7ad2:	e7f7      	b.n	7ac4 <__sfp+0x14>
    7ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    7ad8:	b16d      	cbz	r5, 7af6 <__sfp+0x46>
    7ada:	3468      	adds	r4, #104	; 0x68
    7adc:	e7f4      	b.n	7ac8 <__sfp+0x18>
    7ade:	2104      	movs	r1, #4
    7ae0:	4638      	mov	r0, r7
    7ae2:	f7ff ff9f 	bl	7a24 <__sfmoreglue>
    7ae6:	6030      	str	r0, [r6, #0]
    7ae8:	2800      	cmp	r0, #0
    7aea:	d1f1      	bne.n	7ad0 <__sfp+0x20>
    7aec:	230c      	movs	r3, #12
    7aee:	603b      	str	r3, [r7, #0]
    7af0:	4604      	mov	r4, r0
    7af2:	4620      	mov	r0, r4
    7af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7afa:	81e3      	strh	r3, [r4, #14]
    7afc:	2301      	movs	r3, #1
    7afe:	81a3      	strh	r3, [r4, #12]
    7b00:	6665      	str	r5, [r4, #100]	; 0x64
    7b02:	6025      	str	r5, [r4, #0]
    7b04:	60a5      	str	r5, [r4, #8]
    7b06:	6065      	str	r5, [r4, #4]
    7b08:	6125      	str	r5, [r4, #16]
    7b0a:	6165      	str	r5, [r4, #20]
    7b0c:	61a5      	str	r5, [r4, #24]
    7b0e:	2208      	movs	r2, #8
    7b10:	4629      	mov	r1, r5
    7b12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7b16:	f000 f889 	bl	7c2c <memset>
    7b1a:	6365      	str	r5, [r4, #52]	; 0x34
    7b1c:	63a5      	str	r5, [r4, #56]	; 0x38
    7b1e:	64a5      	str	r5, [r4, #72]	; 0x48
    7b20:	64e5      	str	r5, [r4, #76]	; 0x4c
    7b22:	e7e6      	b.n	7af2 <__sfp+0x42>
    7b24:	0000cbc4 	.word	0x0000cbc4

00007b28 <_fwalk>:
    7b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b2c:	4688      	mov	r8, r1
    7b2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    7b32:	2600      	movs	r6, #0
    7b34:	b914      	cbnz	r4, 7b3c <_fwalk+0x14>
    7b36:	4630      	mov	r0, r6
    7b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b3c:	68a5      	ldr	r5, [r4, #8]
    7b3e:	6867      	ldr	r7, [r4, #4]
    7b40:	3f01      	subs	r7, #1
    7b42:	d501      	bpl.n	7b48 <_fwalk+0x20>
    7b44:	6824      	ldr	r4, [r4, #0]
    7b46:	e7f5      	b.n	7b34 <_fwalk+0xc>
    7b48:	89ab      	ldrh	r3, [r5, #12]
    7b4a:	2b01      	cmp	r3, #1
    7b4c:	d906      	bls.n	7b5c <_fwalk+0x34>
    7b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    7b52:	3301      	adds	r3, #1
    7b54:	d002      	beq.n	7b5c <_fwalk+0x34>
    7b56:	4628      	mov	r0, r5
    7b58:	47c0      	blx	r8
    7b5a:	4306      	orrs	r6, r0
    7b5c:	3568      	adds	r5, #104	; 0x68
    7b5e:	e7ef      	b.n	7b40 <_fwalk+0x18>

00007b60 <_fwalk_reent>:
    7b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b64:	4680      	mov	r8, r0
    7b66:	4689      	mov	r9, r1
    7b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
    7b6c:	2600      	movs	r6, #0
    7b6e:	b914      	cbnz	r4, 7b76 <_fwalk_reent+0x16>
    7b70:	4630      	mov	r0, r6
    7b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7b76:	68a5      	ldr	r5, [r4, #8]
    7b78:	6867      	ldr	r7, [r4, #4]
    7b7a:	3f01      	subs	r7, #1
    7b7c:	d501      	bpl.n	7b82 <_fwalk_reent+0x22>
    7b7e:	6824      	ldr	r4, [r4, #0]
    7b80:	e7f5      	b.n	7b6e <_fwalk_reent+0xe>
    7b82:	89ab      	ldrh	r3, [r5, #12]
    7b84:	2b01      	cmp	r3, #1
    7b86:	d907      	bls.n	7b98 <_fwalk_reent+0x38>
    7b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    7b8c:	3301      	adds	r3, #1
    7b8e:	d003      	beq.n	7b98 <_fwalk_reent+0x38>
    7b90:	4629      	mov	r1, r5
    7b92:	4640      	mov	r0, r8
    7b94:	47c8      	blx	r9
    7b96:	4306      	orrs	r6, r0
    7b98:	3568      	adds	r5, #104	; 0x68
    7b9a:	e7ee      	b.n	7b7a <_fwalk_reent+0x1a>

00007b9c <__libc_init_array>:
    7b9c:	b570      	push	{r4, r5, r6, lr}
    7b9e:	4e0d      	ldr	r6, [pc, #52]	; (7bd4 <__libc_init_array+0x38>)
    7ba0:	4c0d      	ldr	r4, [pc, #52]	; (7bd8 <__libc_init_array+0x3c>)
    7ba2:	1ba4      	subs	r4, r4, r6
    7ba4:	10a4      	asrs	r4, r4, #2
    7ba6:	2500      	movs	r5, #0
    7ba8:	42a5      	cmp	r5, r4
    7baa:	d109      	bne.n	7bc0 <__libc_init_array+0x24>
    7bac:	4e0b      	ldr	r6, [pc, #44]	; (7bdc <__libc_init_array+0x40>)
    7bae:	4c0c      	ldr	r4, [pc, #48]	; (7be0 <__libc_init_array+0x44>)
    7bb0:	f005 f96e 	bl	ce90 <_init>
    7bb4:	1ba4      	subs	r4, r4, r6
    7bb6:	10a4      	asrs	r4, r4, #2
    7bb8:	2500      	movs	r5, #0
    7bba:	42a5      	cmp	r5, r4
    7bbc:	d105      	bne.n	7bca <__libc_init_array+0x2e>
    7bbe:	bd70      	pop	{r4, r5, r6, pc}
    7bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    7bc4:	4798      	blx	r3
    7bc6:	3501      	adds	r5, #1
    7bc8:	e7ee      	b.n	7ba8 <__libc_init_array+0xc>
    7bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    7bce:	4798      	blx	r3
    7bd0:	3501      	adds	r5, #1
    7bd2:	e7f2      	b.n	7bba <__libc_init_array+0x1e>
    7bd4:	0000ce9c 	.word	0x0000ce9c
    7bd8:	0000ce9c 	.word	0x0000ce9c
    7bdc:	0000ce9c 	.word	0x0000ce9c
    7be0:	0000cea0 	.word	0x0000cea0

00007be4 <__locale_ctype_ptr_l>:
    7be4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    7be8:	4770      	bx	lr
	...

00007bec <__locale_ctype_ptr>:
    7bec:	4b04      	ldr	r3, [pc, #16]	; (7c00 <__locale_ctype_ptr+0x14>)
    7bee:	4a05      	ldr	r2, [pc, #20]	; (7c04 <__locale_ctype_ptr+0x18>)
    7bf0:	681b      	ldr	r3, [r3, #0]
    7bf2:	6a1b      	ldr	r3, [r3, #32]
    7bf4:	2b00      	cmp	r3, #0
    7bf6:	bf08      	it	eq
    7bf8:	4613      	moveq	r3, r2
    7bfa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    7bfe:	4770      	bx	lr
    7c00:	200004b0 	.word	0x200004b0
    7c04:	20000514 	.word	0x20000514

00007c08 <__ascii_mbtowc>:
    7c08:	b082      	sub	sp, #8
    7c0a:	b901      	cbnz	r1, 7c0e <__ascii_mbtowc+0x6>
    7c0c:	a901      	add	r1, sp, #4
    7c0e:	b142      	cbz	r2, 7c22 <__ascii_mbtowc+0x1a>
    7c10:	b14b      	cbz	r3, 7c26 <__ascii_mbtowc+0x1e>
    7c12:	7813      	ldrb	r3, [r2, #0]
    7c14:	600b      	str	r3, [r1, #0]
    7c16:	7812      	ldrb	r2, [r2, #0]
    7c18:	1c10      	adds	r0, r2, #0
    7c1a:	bf18      	it	ne
    7c1c:	2001      	movne	r0, #1
    7c1e:	b002      	add	sp, #8
    7c20:	4770      	bx	lr
    7c22:	4610      	mov	r0, r2
    7c24:	e7fb      	b.n	7c1e <__ascii_mbtowc+0x16>
    7c26:	f06f 0001 	mvn.w	r0, #1
    7c2a:	e7f8      	b.n	7c1e <__ascii_mbtowc+0x16>

00007c2c <memset>:
    7c2c:	4402      	add	r2, r0
    7c2e:	4603      	mov	r3, r0
    7c30:	4293      	cmp	r3, r2
    7c32:	d100      	bne.n	7c36 <memset+0xa>
    7c34:	4770      	bx	lr
    7c36:	f803 1b01 	strb.w	r1, [r3], #1
    7c3a:	e7f9      	b.n	7c30 <memset+0x4>

00007c3c <_free_r>:
    7c3c:	b538      	push	{r3, r4, r5, lr}
    7c3e:	4605      	mov	r5, r0
    7c40:	2900      	cmp	r1, #0
    7c42:	d045      	beq.n	7cd0 <_free_r+0x94>
    7c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7c48:	1f0c      	subs	r4, r1, #4
    7c4a:	2b00      	cmp	r3, #0
    7c4c:	bfb8      	it	lt
    7c4e:	18e4      	addlt	r4, r4, r3
    7c50:	f001 fe3d 	bl	98ce <__malloc_lock>
    7c54:	4a1f      	ldr	r2, [pc, #124]	; (7cd4 <_free_r+0x98>)
    7c56:	6813      	ldr	r3, [r2, #0]
    7c58:	4610      	mov	r0, r2
    7c5a:	b933      	cbnz	r3, 7c6a <_free_r+0x2e>
    7c5c:	6063      	str	r3, [r4, #4]
    7c5e:	6014      	str	r4, [r2, #0]
    7c60:	4628      	mov	r0, r5
    7c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7c66:	f001 be33 	b.w	98d0 <__malloc_unlock>
    7c6a:	42a3      	cmp	r3, r4
    7c6c:	d90c      	bls.n	7c88 <_free_r+0x4c>
    7c6e:	6821      	ldr	r1, [r4, #0]
    7c70:	1862      	adds	r2, r4, r1
    7c72:	4293      	cmp	r3, r2
    7c74:	bf04      	itt	eq
    7c76:	681a      	ldreq	r2, [r3, #0]
    7c78:	685b      	ldreq	r3, [r3, #4]
    7c7a:	6063      	str	r3, [r4, #4]
    7c7c:	bf04      	itt	eq
    7c7e:	1852      	addeq	r2, r2, r1
    7c80:	6022      	streq	r2, [r4, #0]
    7c82:	6004      	str	r4, [r0, #0]
    7c84:	e7ec      	b.n	7c60 <_free_r+0x24>
    7c86:	4613      	mov	r3, r2
    7c88:	685a      	ldr	r2, [r3, #4]
    7c8a:	b10a      	cbz	r2, 7c90 <_free_r+0x54>
    7c8c:	42a2      	cmp	r2, r4
    7c8e:	d9fa      	bls.n	7c86 <_free_r+0x4a>
    7c90:	6819      	ldr	r1, [r3, #0]
    7c92:	1858      	adds	r0, r3, r1
    7c94:	42a0      	cmp	r0, r4
    7c96:	d10b      	bne.n	7cb0 <_free_r+0x74>
    7c98:	6820      	ldr	r0, [r4, #0]
    7c9a:	4401      	add	r1, r0
    7c9c:	1858      	adds	r0, r3, r1
    7c9e:	4282      	cmp	r2, r0
    7ca0:	6019      	str	r1, [r3, #0]
    7ca2:	d1dd      	bne.n	7c60 <_free_r+0x24>
    7ca4:	6810      	ldr	r0, [r2, #0]
    7ca6:	6852      	ldr	r2, [r2, #4]
    7ca8:	605a      	str	r2, [r3, #4]
    7caa:	4401      	add	r1, r0
    7cac:	6019      	str	r1, [r3, #0]
    7cae:	e7d7      	b.n	7c60 <_free_r+0x24>
    7cb0:	d902      	bls.n	7cb8 <_free_r+0x7c>
    7cb2:	230c      	movs	r3, #12
    7cb4:	602b      	str	r3, [r5, #0]
    7cb6:	e7d3      	b.n	7c60 <_free_r+0x24>
    7cb8:	6820      	ldr	r0, [r4, #0]
    7cba:	1821      	adds	r1, r4, r0
    7cbc:	428a      	cmp	r2, r1
    7cbe:	bf04      	itt	eq
    7cc0:	6811      	ldreq	r1, [r2, #0]
    7cc2:	6852      	ldreq	r2, [r2, #4]
    7cc4:	6062      	str	r2, [r4, #4]
    7cc6:	bf04      	itt	eq
    7cc8:	1809      	addeq	r1, r1, r0
    7cca:	6021      	streq	r1, [r4, #0]
    7ccc:	605c      	str	r4, [r3, #4]
    7cce:	e7c7      	b.n	7c60 <_free_r+0x24>
    7cd0:	bd38      	pop	{r3, r4, r5, pc}
    7cd2:	bf00      	nop
    7cd4:	200016c8 	.word	0x200016c8

00007cd8 <_malloc_r>:
    7cd8:	b570      	push	{r4, r5, r6, lr}
    7cda:	1ccd      	adds	r5, r1, #3
    7cdc:	f025 0503 	bic.w	r5, r5, #3
    7ce0:	3508      	adds	r5, #8
    7ce2:	2d0c      	cmp	r5, #12
    7ce4:	bf38      	it	cc
    7ce6:	250c      	movcc	r5, #12
    7ce8:	2d00      	cmp	r5, #0
    7cea:	4606      	mov	r6, r0
    7cec:	db01      	blt.n	7cf2 <_malloc_r+0x1a>
    7cee:	42a9      	cmp	r1, r5
    7cf0:	d903      	bls.n	7cfa <_malloc_r+0x22>
    7cf2:	230c      	movs	r3, #12
    7cf4:	6033      	str	r3, [r6, #0]
    7cf6:	2000      	movs	r0, #0
    7cf8:	bd70      	pop	{r4, r5, r6, pc}
    7cfa:	f001 fde8 	bl	98ce <__malloc_lock>
    7cfe:	4a23      	ldr	r2, [pc, #140]	; (7d8c <_malloc_r+0xb4>)
    7d00:	6814      	ldr	r4, [r2, #0]
    7d02:	4621      	mov	r1, r4
    7d04:	b991      	cbnz	r1, 7d2c <_malloc_r+0x54>
    7d06:	4c22      	ldr	r4, [pc, #136]	; (7d90 <_malloc_r+0xb8>)
    7d08:	6823      	ldr	r3, [r4, #0]
    7d0a:	b91b      	cbnz	r3, 7d14 <_malloc_r+0x3c>
    7d0c:	4630      	mov	r0, r6
    7d0e:	f000 f8bd 	bl	7e8c <_sbrk_r>
    7d12:	6020      	str	r0, [r4, #0]
    7d14:	4629      	mov	r1, r5
    7d16:	4630      	mov	r0, r6
    7d18:	f000 f8b8 	bl	7e8c <_sbrk_r>
    7d1c:	1c43      	adds	r3, r0, #1
    7d1e:	d126      	bne.n	7d6e <_malloc_r+0x96>
    7d20:	230c      	movs	r3, #12
    7d22:	6033      	str	r3, [r6, #0]
    7d24:	4630      	mov	r0, r6
    7d26:	f001 fdd3 	bl	98d0 <__malloc_unlock>
    7d2a:	e7e4      	b.n	7cf6 <_malloc_r+0x1e>
    7d2c:	680b      	ldr	r3, [r1, #0]
    7d2e:	1b5b      	subs	r3, r3, r5
    7d30:	d41a      	bmi.n	7d68 <_malloc_r+0x90>
    7d32:	2b0b      	cmp	r3, #11
    7d34:	d90f      	bls.n	7d56 <_malloc_r+0x7e>
    7d36:	600b      	str	r3, [r1, #0]
    7d38:	50cd      	str	r5, [r1, r3]
    7d3a:	18cc      	adds	r4, r1, r3
    7d3c:	4630      	mov	r0, r6
    7d3e:	f001 fdc7 	bl	98d0 <__malloc_unlock>
    7d42:	f104 000b 	add.w	r0, r4, #11
    7d46:	1d23      	adds	r3, r4, #4
    7d48:	f020 0007 	bic.w	r0, r0, #7
    7d4c:	1ac3      	subs	r3, r0, r3
    7d4e:	d01b      	beq.n	7d88 <_malloc_r+0xb0>
    7d50:	425a      	negs	r2, r3
    7d52:	50e2      	str	r2, [r4, r3]
    7d54:	bd70      	pop	{r4, r5, r6, pc}
    7d56:	428c      	cmp	r4, r1
    7d58:	bf0d      	iteet	eq
    7d5a:	6863      	ldreq	r3, [r4, #4]
    7d5c:	684b      	ldrne	r3, [r1, #4]
    7d5e:	6063      	strne	r3, [r4, #4]
    7d60:	6013      	streq	r3, [r2, #0]
    7d62:	bf18      	it	ne
    7d64:	460c      	movne	r4, r1
    7d66:	e7e9      	b.n	7d3c <_malloc_r+0x64>
    7d68:	460c      	mov	r4, r1
    7d6a:	6849      	ldr	r1, [r1, #4]
    7d6c:	e7ca      	b.n	7d04 <_malloc_r+0x2c>
    7d6e:	1cc4      	adds	r4, r0, #3
    7d70:	f024 0403 	bic.w	r4, r4, #3
    7d74:	42a0      	cmp	r0, r4
    7d76:	d005      	beq.n	7d84 <_malloc_r+0xac>
    7d78:	1a21      	subs	r1, r4, r0
    7d7a:	4630      	mov	r0, r6
    7d7c:	f000 f886 	bl	7e8c <_sbrk_r>
    7d80:	3001      	adds	r0, #1
    7d82:	d0cd      	beq.n	7d20 <_malloc_r+0x48>
    7d84:	6025      	str	r5, [r4, #0]
    7d86:	e7d9      	b.n	7d3c <_malloc_r+0x64>
    7d88:	bd70      	pop	{r4, r5, r6, pc}
    7d8a:	bf00      	nop
    7d8c:	200016c8 	.word	0x200016c8
    7d90:	200016cc 	.word	0x200016cc

00007d94 <iprintf>:
    7d94:	b40f      	push	{r0, r1, r2, r3}
    7d96:	4b0a      	ldr	r3, [pc, #40]	; (7dc0 <iprintf+0x2c>)
    7d98:	b513      	push	{r0, r1, r4, lr}
    7d9a:	681c      	ldr	r4, [r3, #0]
    7d9c:	b124      	cbz	r4, 7da8 <iprintf+0x14>
    7d9e:	69a3      	ldr	r3, [r4, #24]
    7da0:	b913      	cbnz	r3, 7da8 <iprintf+0x14>
    7da2:	4620      	mov	r0, r4
    7da4:	f7ff fe54 	bl	7a50 <__sinit>
    7da8:	ab05      	add	r3, sp, #20
    7daa:	9a04      	ldr	r2, [sp, #16]
    7dac:	68a1      	ldr	r1, [r4, #8]
    7dae:	9301      	str	r3, [sp, #4]
    7db0:	4620      	mov	r0, r4
    7db2:	f002 fafd 	bl	a3b0 <_vfiprintf_r>
    7db6:	b002      	add	sp, #8
    7db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7dbc:	b004      	add	sp, #16
    7dbe:	4770      	bx	lr
    7dc0:	200004b0 	.word	0x200004b0

00007dc4 <_puts_r>:
    7dc4:	b570      	push	{r4, r5, r6, lr}
    7dc6:	460e      	mov	r6, r1
    7dc8:	4605      	mov	r5, r0
    7dca:	b118      	cbz	r0, 7dd4 <_puts_r+0x10>
    7dcc:	6983      	ldr	r3, [r0, #24]
    7dce:	b90b      	cbnz	r3, 7dd4 <_puts_r+0x10>
    7dd0:	f7ff fe3e 	bl	7a50 <__sinit>
    7dd4:	69ab      	ldr	r3, [r5, #24]
    7dd6:	68ac      	ldr	r4, [r5, #8]
    7dd8:	b913      	cbnz	r3, 7de0 <_puts_r+0x1c>
    7dda:	4628      	mov	r0, r5
    7ddc:	f7ff fe38 	bl	7a50 <__sinit>
    7de0:	4b23      	ldr	r3, [pc, #140]	; (7e70 <_puts_r+0xac>)
    7de2:	429c      	cmp	r4, r3
    7de4:	d117      	bne.n	7e16 <_puts_r+0x52>
    7de6:	686c      	ldr	r4, [r5, #4]
    7de8:	89a3      	ldrh	r3, [r4, #12]
    7dea:	071b      	lsls	r3, r3, #28
    7dec:	d51d      	bpl.n	7e2a <_puts_r+0x66>
    7dee:	6923      	ldr	r3, [r4, #16]
    7df0:	b1db      	cbz	r3, 7e2a <_puts_r+0x66>
    7df2:	3e01      	subs	r6, #1
    7df4:	68a3      	ldr	r3, [r4, #8]
    7df6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    7dfa:	3b01      	subs	r3, #1
    7dfc:	60a3      	str	r3, [r4, #8]
    7dfe:	b9e9      	cbnz	r1, 7e3c <_puts_r+0x78>
    7e00:	2b00      	cmp	r3, #0
    7e02:	da2e      	bge.n	7e62 <_puts_r+0x9e>
    7e04:	4622      	mov	r2, r4
    7e06:	210a      	movs	r1, #10
    7e08:	4628      	mov	r0, r5
    7e0a:	f001 f8c7 	bl	8f9c <__swbuf_r>
    7e0e:	3001      	adds	r0, #1
    7e10:	d011      	beq.n	7e36 <_puts_r+0x72>
    7e12:	200a      	movs	r0, #10
    7e14:	bd70      	pop	{r4, r5, r6, pc}
    7e16:	4b17      	ldr	r3, [pc, #92]	; (7e74 <_puts_r+0xb0>)
    7e18:	429c      	cmp	r4, r3
    7e1a:	d101      	bne.n	7e20 <_puts_r+0x5c>
    7e1c:	68ac      	ldr	r4, [r5, #8]
    7e1e:	e7e3      	b.n	7de8 <_puts_r+0x24>
    7e20:	4b15      	ldr	r3, [pc, #84]	; (7e78 <_puts_r+0xb4>)
    7e22:	429c      	cmp	r4, r3
    7e24:	bf08      	it	eq
    7e26:	68ec      	ldreq	r4, [r5, #12]
    7e28:	e7de      	b.n	7de8 <_puts_r+0x24>
    7e2a:	4621      	mov	r1, r4
    7e2c:	4628      	mov	r0, r5
    7e2e:	f001 f927 	bl	9080 <__swsetup_r>
    7e32:	2800      	cmp	r0, #0
    7e34:	d0dd      	beq.n	7df2 <_puts_r+0x2e>
    7e36:	f04f 30ff 	mov.w	r0, #4294967295
    7e3a:	bd70      	pop	{r4, r5, r6, pc}
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	da04      	bge.n	7e4a <_puts_r+0x86>
    7e40:	69a2      	ldr	r2, [r4, #24]
    7e42:	4293      	cmp	r3, r2
    7e44:	db06      	blt.n	7e54 <_puts_r+0x90>
    7e46:	290a      	cmp	r1, #10
    7e48:	d004      	beq.n	7e54 <_puts_r+0x90>
    7e4a:	6823      	ldr	r3, [r4, #0]
    7e4c:	1c5a      	adds	r2, r3, #1
    7e4e:	6022      	str	r2, [r4, #0]
    7e50:	7019      	strb	r1, [r3, #0]
    7e52:	e7cf      	b.n	7df4 <_puts_r+0x30>
    7e54:	4622      	mov	r2, r4
    7e56:	4628      	mov	r0, r5
    7e58:	f001 f8a0 	bl	8f9c <__swbuf_r>
    7e5c:	3001      	adds	r0, #1
    7e5e:	d1c9      	bne.n	7df4 <_puts_r+0x30>
    7e60:	e7e9      	b.n	7e36 <_puts_r+0x72>
    7e62:	6823      	ldr	r3, [r4, #0]
    7e64:	200a      	movs	r0, #10
    7e66:	1c5a      	adds	r2, r3, #1
    7e68:	6022      	str	r2, [r4, #0]
    7e6a:	7018      	strb	r0, [r3, #0]
    7e6c:	bd70      	pop	{r4, r5, r6, pc}
    7e6e:	bf00      	nop
    7e70:	0000cb84 	.word	0x0000cb84
    7e74:	0000cba4 	.word	0x0000cba4
    7e78:	0000cb64 	.word	0x0000cb64

00007e7c <puts>:
    7e7c:	4b02      	ldr	r3, [pc, #8]	; (7e88 <puts+0xc>)
    7e7e:	4601      	mov	r1, r0
    7e80:	6818      	ldr	r0, [r3, #0]
    7e82:	f7ff bf9f 	b.w	7dc4 <_puts_r>
    7e86:	bf00      	nop
    7e88:	200004b0 	.word	0x200004b0

00007e8c <_sbrk_r>:
    7e8c:	b538      	push	{r3, r4, r5, lr}
    7e8e:	4c06      	ldr	r4, [pc, #24]	; (7ea8 <_sbrk_r+0x1c>)
    7e90:	2300      	movs	r3, #0
    7e92:	4605      	mov	r5, r0
    7e94:	4608      	mov	r0, r1
    7e96:	6023      	str	r3, [r4, #0]
    7e98:	f7fa ff38 	bl	2d0c <_sbrk>
    7e9c:	1c43      	adds	r3, r0, #1
    7e9e:	d102      	bne.n	7ea6 <_sbrk_r+0x1a>
    7ea0:	6823      	ldr	r3, [r4, #0]
    7ea2:	b103      	cbz	r3, 7ea6 <_sbrk_r+0x1a>
    7ea4:	602b      	str	r3, [r5, #0]
    7ea6:	bd38      	pop	{r3, r4, r5, pc}
    7ea8:	2000173c 	.word	0x2000173c

00007eac <iscanf>:
    7eac:	b40f      	push	{r0, r1, r2, r3}
    7eae:	4b0a      	ldr	r3, [pc, #40]	; (7ed8 <iscanf+0x2c>)
    7eb0:	b513      	push	{r0, r1, r4, lr}
    7eb2:	681c      	ldr	r4, [r3, #0]
    7eb4:	b124      	cbz	r4, 7ec0 <iscanf+0x14>
    7eb6:	69a3      	ldr	r3, [r4, #24]
    7eb8:	b913      	cbnz	r3, 7ec0 <iscanf+0x14>
    7eba:	4620      	mov	r0, r4
    7ebc:	f7ff fdc8 	bl	7a50 <__sinit>
    7ec0:	ab05      	add	r3, sp, #20
    7ec2:	9a04      	ldr	r2, [sp, #16]
    7ec4:	6861      	ldr	r1, [r4, #4]
    7ec6:	9301      	str	r3, [sp, #4]
    7ec8:	4620      	mov	r0, r4
    7eca:	f002 fe71 	bl	abb0 <_vfiscanf_r>
    7ece:	b002      	add	sp, #8
    7ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ed4:	b004      	add	sp, #16
    7ed6:	4770      	bx	lr
    7ed8:	200004b0 	.word	0x200004b0

00007edc <setbuf>:
    7edc:	2900      	cmp	r1, #0
    7ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7ee2:	bf0c      	ite	eq
    7ee4:	2202      	moveq	r2, #2
    7ee6:	2200      	movne	r2, #0
    7ee8:	f000 b800 	b.w	7eec <setvbuf>

00007eec <setvbuf>:
    7eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7ef0:	461d      	mov	r5, r3
    7ef2:	4b51      	ldr	r3, [pc, #324]	; (8038 <setvbuf+0x14c>)
    7ef4:	681e      	ldr	r6, [r3, #0]
    7ef6:	4604      	mov	r4, r0
    7ef8:	460f      	mov	r7, r1
    7efa:	4690      	mov	r8, r2
    7efc:	b126      	cbz	r6, 7f08 <setvbuf+0x1c>
    7efe:	69b3      	ldr	r3, [r6, #24]
    7f00:	b913      	cbnz	r3, 7f08 <setvbuf+0x1c>
    7f02:	4630      	mov	r0, r6
    7f04:	f7ff fda4 	bl	7a50 <__sinit>
    7f08:	4b4c      	ldr	r3, [pc, #304]	; (803c <setvbuf+0x150>)
    7f0a:	429c      	cmp	r4, r3
    7f0c:	d152      	bne.n	7fb4 <setvbuf+0xc8>
    7f0e:	6874      	ldr	r4, [r6, #4]
    7f10:	f1b8 0f02 	cmp.w	r8, #2
    7f14:	d006      	beq.n	7f24 <setvbuf+0x38>
    7f16:	f1b8 0f01 	cmp.w	r8, #1
    7f1a:	f200 8089 	bhi.w	8030 <setvbuf+0x144>
    7f1e:	2d00      	cmp	r5, #0
    7f20:	f2c0 8086 	blt.w	8030 <setvbuf+0x144>
    7f24:	4621      	mov	r1, r4
    7f26:	4630      	mov	r0, r6
    7f28:	f7ff fd16 	bl	7958 <_fflush_r>
    7f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7f2e:	b141      	cbz	r1, 7f42 <setvbuf+0x56>
    7f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
    7f34:	4299      	cmp	r1, r3
    7f36:	d002      	beq.n	7f3e <setvbuf+0x52>
    7f38:	4630      	mov	r0, r6
    7f3a:	f7ff fe7f 	bl	7c3c <_free_r>
    7f3e:	2300      	movs	r3, #0
    7f40:	6363      	str	r3, [r4, #52]	; 0x34
    7f42:	2300      	movs	r3, #0
    7f44:	61a3      	str	r3, [r4, #24]
    7f46:	6063      	str	r3, [r4, #4]
    7f48:	89a3      	ldrh	r3, [r4, #12]
    7f4a:	061b      	lsls	r3, r3, #24
    7f4c:	d503      	bpl.n	7f56 <setvbuf+0x6a>
    7f4e:	6921      	ldr	r1, [r4, #16]
    7f50:	4630      	mov	r0, r6
    7f52:	f7ff fe73 	bl	7c3c <_free_r>
    7f56:	89a3      	ldrh	r3, [r4, #12]
    7f58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    7f5c:	f023 0303 	bic.w	r3, r3, #3
    7f60:	f1b8 0f02 	cmp.w	r8, #2
    7f64:	81a3      	strh	r3, [r4, #12]
    7f66:	d05d      	beq.n	8024 <setvbuf+0x138>
    7f68:	ab01      	add	r3, sp, #4
    7f6a:	466a      	mov	r2, sp
    7f6c:	4621      	mov	r1, r4
    7f6e:	4630      	mov	r0, r6
    7f70:	f001 fc36 	bl	97e0 <__swhatbuf_r>
    7f74:	89a3      	ldrh	r3, [r4, #12]
    7f76:	4318      	orrs	r0, r3
    7f78:	81a0      	strh	r0, [r4, #12]
    7f7a:	bb2d      	cbnz	r5, 7fc8 <setvbuf+0xdc>
    7f7c:	9d00      	ldr	r5, [sp, #0]
    7f7e:	4628      	mov	r0, r5
    7f80:	f001 fc92 	bl	98a8 <malloc>
    7f84:	4607      	mov	r7, r0
    7f86:	2800      	cmp	r0, #0
    7f88:	d14e      	bne.n	8028 <setvbuf+0x13c>
    7f8a:	f8dd 9000 	ldr.w	r9, [sp]
    7f8e:	45a9      	cmp	r9, r5
    7f90:	d13c      	bne.n	800c <setvbuf+0x120>
    7f92:	f04f 30ff 	mov.w	r0, #4294967295
    7f96:	89a3      	ldrh	r3, [r4, #12]
    7f98:	f043 0302 	orr.w	r3, r3, #2
    7f9c:	81a3      	strh	r3, [r4, #12]
    7f9e:	2300      	movs	r3, #0
    7fa0:	60a3      	str	r3, [r4, #8]
    7fa2:	f104 0347 	add.w	r3, r4, #71	; 0x47
    7fa6:	6023      	str	r3, [r4, #0]
    7fa8:	6123      	str	r3, [r4, #16]
    7faa:	2301      	movs	r3, #1
    7fac:	6163      	str	r3, [r4, #20]
    7fae:	b003      	add	sp, #12
    7fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7fb4:	4b22      	ldr	r3, [pc, #136]	; (8040 <setvbuf+0x154>)
    7fb6:	429c      	cmp	r4, r3
    7fb8:	d101      	bne.n	7fbe <setvbuf+0xd2>
    7fba:	68b4      	ldr	r4, [r6, #8]
    7fbc:	e7a8      	b.n	7f10 <setvbuf+0x24>
    7fbe:	4b21      	ldr	r3, [pc, #132]	; (8044 <setvbuf+0x158>)
    7fc0:	429c      	cmp	r4, r3
    7fc2:	bf08      	it	eq
    7fc4:	68f4      	ldreq	r4, [r6, #12]
    7fc6:	e7a3      	b.n	7f10 <setvbuf+0x24>
    7fc8:	2f00      	cmp	r7, #0
    7fca:	d0d8      	beq.n	7f7e <setvbuf+0x92>
    7fcc:	69b3      	ldr	r3, [r6, #24]
    7fce:	b913      	cbnz	r3, 7fd6 <setvbuf+0xea>
    7fd0:	4630      	mov	r0, r6
    7fd2:	f7ff fd3d 	bl	7a50 <__sinit>
    7fd6:	f1b8 0f01 	cmp.w	r8, #1
    7fda:	bf08      	it	eq
    7fdc:	89a3      	ldrheq	r3, [r4, #12]
    7fde:	6027      	str	r7, [r4, #0]
    7fe0:	bf04      	itt	eq
    7fe2:	f043 0301 	orreq.w	r3, r3, #1
    7fe6:	81a3      	strheq	r3, [r4, #12]
    7fe8:	89a3      	ldrh	r3, [r4, #12]
    7fea:	6127      	str	r7, [r4, #16]
    7fec:	f013 0008 	ands.w	r0, r3, #8
    7ff0:	6165      	str	r5, [r4, #20]
    7ff2:	d01b      	beq.n	802c <setvbuf+0x140>
    7ff4:	f013 0001 	ands.w	r0, r3, #1
    7ff8:	bf18      	it	ne
    7ffa:	426d      	negne	r5, r5
    7ffc:	f04f 0300 	mov.w	r3, #0
    8000:	bf1d      	ittte	ne
    8002:	60a3      	strne	r3, [r4, #8]
    8004:	61a5      	strne	r5, [r4, #24]
    8006:	4618      	movne	r0, r3
    8008:	60a5      	streq	r5, [r4, #8]
    800a:	e7d0      	b.n	7fae <setvbuf+0xc2>
    800c:	4648      	mov	r0, r9
    800e:	f001 fc4b 	bl	98a8 <malloc>
    8012:	4607      	mov	r7, r0
    8014:	2800      	cmp	r0, #0
    8016:	d0bc      	beq.n	7f92 <setvbuf+0xa6>
    8018:	89a3      	ldrh	r3, [r4, #12]
    801a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    801e:	81a3      	strh	r3, [r4, #12]
    8020:	464d      	mov	r5, r9
    8022:	e7d3      	b.n	7fcc <setvbuf+0xe0>
    8024:	2000      	movs	r0, #0
    8026:	e7b6      	b.n	7f96 <setvbuf+0xaa>
    8028:	46a9      	mov	r9, r5
    802a:	e7f5      	b.n	8018 <setvbuf+0x12c>
    802c:	60a0      	str	r0, [r4, #8]
    802e:	e7be      	b.n	7fae <setvbuf+0xc2>
    8030:	f04f 30ff 	mov.w	r0, #4294967295
    8034:	e7bb      	b.n	7fae <setvbuf+0xc2>
    8036:	bf00      	nop
    8038:	200004b0 	.word	0x200004b0
    803c:	0000cb84 	.word	0x0000cb84
    8040:	0000cba4 	.word	0x0000cba4
    8044:	0000cb64 	.word	0x0000cb64

00008048 <sniprintf>:
    8048:	b40c      	push	{r2, r3}
    804a:	b530      	push	{r4, r5, lr}
    804c:	4b17      	ldr	r3, [pc, #92]	; (80ac <sniprintf+0x64>)
    804e:	1e0c      	subs	r4, r1, #0
    8050:	b09d      	sub	sp, #116	; 0x74
    8052:	681d      	ldr	r5, [r3, #0]
    8054:	da08      	bge.n	8068 <sniprintf+0x20>
    8056:	238b      	movs	r3, #139	; 0x8b
    8058:	602b      	str	r3, [r5, #0]
    805a:	f04f 30ff 	mov.w	r0, #4294967295
    805e:	b01d      	add	sp, #116	; 0x74
    8060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8064:	b002      	add	sp, #8
    8066:	4770      	bx	lr
    8068:	f44f 7302 	mov.w	r3, #520	; 0x208
    806c:	f8ad 3014 	strh.w	r3, [sp, #20]
    8070:	bf14      	ite	ne
    8072:	f104 33ff 	addne.w	r3, r4, #4294967295
    8076:	4623      	moveq	r3, r4
    8078:	9304      	str	r3, [sp, #16]
    807a:	9307      	str	r3, [sp, #28]
    807c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8080:	9002      	str	r0, [sp, #8]
    8082:	9006      	str	r0, [sp, #24]
    8084:	f8ad 3016 	strh.w	r3, [sp, #22]
    8088:	9a20      	ldr	r2, [sp, #128]	; 0x80
    808a:	ab21      	add	r3, sp, #132	; 0x84
    808c:	a902      	add	r1, sp, #8
    808e:	4628      	mov	r0, r5
    8090:	9301      	str	r3, [sp, #4]
    8092:	f002 f871 	bl	a178 <_svfiprintf_r>
    8096:	1c43      	adds	r3, r0, #1
    8098:	bfbc      	itt	lt
    809a:	238b      	movlt	r3, #139	; 0x8b
    809c:	602b      	strlt	r3, [r5, #0]
    809e:	2c00      	cmp	r4, #0
    80a0:	d0dd      	beq.n	805e <sniprintf+0x16>
    80a2:	9b02      	ldr	r3, [sp, #8]
    80a4:	2200      	movs	r2, #0
    80a6:	701a      	strb	r2, [r3, #0]
    80a8:	e7d9      	b.n	805e <sniprintf+0x16>
    80aa:	bf00      	nop
    80ac:	200004b0 	.word	0x200004b0

000080b0 <siprintf>:
    80b0:	b40e      	push	{r1, r2, r3}
    80b2:	b500      	push	{lr}
    80b4:	b09c      	sub	sp, #112	; 0x70
    80b6:	f44f 7102 	mov.w	r1, #520	; 0x208
    80ba:	ab1d      	add	r3, sp, #116	; 0x74
    80bc:	f8ad 1014 	strh.w	r1, [sp, #20]
    80c0:	9002      	str	r0, [sp, #8]
    80c2:	9006      	str	r0, [sp, #24]
    80c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    80c8:	480a      	ldr	r0, [pc, #40]	; (80f4 <siprintf+0x44>)
    80ca:	9104      	str	r1, [sp, #16]
    80cc:	9107      	str	r1, [sp, #28]
    80ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    80d2:	f853 2b04 	ldr.w	r2, [r3], #4
    80d6:	f8ad 1016 	strh.w	r1, [sp, #22]
    80da:	6800      	ldr	r0, [r0, #0]
    80dc:	9301      	str	r3, [sp, #4]
    80de:	a902      	add	r1, sp, #8
    80e0:	f002 f84a 	bl	a178 <_svfiprintf_r>
    80e4:	9b02      	ldr	r3, [sp, #8]
    80e6:	2200      	movs	r2, #0
    80e8:	701a      	strb	r2, [r3, #0]
    80ea:	b01c      	add	sp, #112	; 0x70
    80ec:	f85d eb04 	ldr.w	lr, [sp], #4
    80f0:	b003      	add	sp, #12
    80f2:	4770      	bx	lr
    80f4:	200004b0 	.word	0x200004b0

000080f8 <__sread>:
    80f8:	b510      	push	{r4, lr}
    80fa:	460c      	mov	r4, r1
    80fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8100:	f002 fed6 	bl	aeb0 <_read_r>
    8104:	2800      	cmp	r0, #0
    8106:	bfab      	itete	ge
    8108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    810a:	89a3      	ldrhlt	r3, [r4, #12]
    810c:	181b      	addge	r3, r3, r0
    810e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    8112:	bfac      	ite	ge
    8114:	6563      	strge	r3, [r4, #84]	; 0x54
    8116:	81a3      	strhlt	r3, [r4, #12]
    8118:	bd10      	pop	{r4, pc}

0000811a <__swrite>:
    811a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    811e:	461f      	mov	r7, r3
    8120:	898b      	ldrh	r3, [r1, #12]
    8122:	05db      	lsls	r3, r3, #23
    8124:	4605      	mov	r5, r0
    8126:	460c      	mov	r4, r1
    8128:	4616      	mov	r6, r2
    812a:	d505      	bpl.n	8138 <__swrite+0x1e>
    812c:	2302      	movs	r3, #2
    812e:	2200      	movs	r2, #0
    8130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8134:	f001 fb42 	bl	97bc <_lseek_r>
    8138:	89a3      	ldrh	r3, [r4, #12]
    813a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    813e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    8142:	81a3      	strh	r3, [r4, #12]
    8144:	4632      	mov	r2, r6
    8146:	463b      	mov	r3, r7
    8148:	4628      	mov	r0, r5
    814a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    814e:	f000 bf85 	b.w	905c <_write_r>

00008152 <__sseek>:
    8152:	b510      	push	{r4, lr}
    8154:	460c      	mov	r4, r1
    8156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    815a:	f001 fb2f 	bl	97bc <_lseek_r>
    815e:	1c43      	adds	r3, r0, #1
    8160:	89a3      	ldrh	r3, [r4, #12]
    8162:	bf15      	itete	ne
    8164:	6560      	strne	r0, [r4, #84]	; 0x54
    8166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    816a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    816e:	81a3      	strheq	r3, [r4, #12]
    8170:	bf18      	it	ne
    8172:	81a3      	strhne	r3, [r4, #12]
    8174:	bd10      	pop	{r4, pc}

00008176 <__sclose>:
    8176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    817a:	f000 bfef 	b.w	915c <_close_r>

0000817e <strcat>:
    817e:	b510      	push	{r4, lr}
    8180:	4602      	mov	r2, r0
    8182:	4613      	mov	r3, r2
    8184:	3201      	adds	r2, #1
    8186:	781c      	ldrb	r4, [r3, #0]
    8188:	2c00      	cmp	r4, #0
    818a:	d1fa      	bne.n	8182 <strcat+0x4>
    818c:	3b01      	subs	r3, #1
    818e:	f811 2b01 	ldrb.w	r2, [r1], #1
    8192:	f803 2f01 	strb.w	r2, [r3, #1]!
    8196:	2a00      	cmp	r2, #0
    8198:	d1f9      	bne.n	818e <strcat+0x10>
    819a:	bd10      	pop	{r4, pc}

0000819c <strcmp>:
    819c:	f810 2b01 	ldrb.w	r2, [r0], #1
    81a0:	f811 3b01 	ldrb.w	r3, [r1], #1
    81a4:	2a01      	cmp	r2, #1
    81a6:	bf28      	it	cs
    81a8:	429a      	cmpcs	r2, r3
    81aa:	d0f7      	beq.n	819c <strcmp>
    81ac:	1ad0      	subs	r0, r2, r3
    81ae:	4770      	bx	lr

000081b0 <strcpy>:
    81b0:	4603      	mov	r3, r0
    81b2:	f811 2b01 	ldrb.w	r2, [r1], #1
    81b6:	f803 2b01 	strb.w	r2, [r3], #1
    81ba:	2a00      	cmp	r2, #0
    81bc:	d1f9      	bne.n	81b2 <strcpy+0x2>
    81be:	4770      	bx	lr

000081c0 <strlen>:
    81c0:	4603      	mov	r3, r0
    81c2:	f813 2b01 	ldrb.w	r2, [r3], #1
    81c6:	2a00      	cmp	r2, #0
    81c8:	d1fb      	bne.n	81c2 <strlen+0x2>
    81ca:	1a18      	subs	r0, r3, r0
    81cc:	3801      	subs	r0, #1
    81ce:	4770      	bx	lr

000081d0 <strncat>:
    81d0:	b530      	push	{r4, r5, lr}
    81d2:	4603      	mov	r3, r0
    81d4:	781c      	ldrb	r4, [r3, #0]
    81d6:	1c5d      	adds	r5, r3, #1
    81d8:	b944      	cbnz	r4, 81ec <strncat+0x1c>
    81da:	f112 32ff 	adds.w	r2, r2, #4294967295
    81de:	d304      	bcc.n	81ea <strncat+0x1a>
    81e0:	f811 4b01 	ldrb.w	r4, [r1], #1
    81e4:	f803 4b01 	strb.w	r4, [r3], #1
    81e8:	b914      	cbnz	r4, 81f0 <strncat+0x20>
    81ea:	bd30      	pop	{r4, r5, pc}
    81ec:	462b      	mov	r3, r5
    81ee:	e7f1      	b.n	81d4 <strncat+0x4>
    81f0:	2a00      	cmp	r2, #0
    81f2:	d1f2      	bne.n	81da <strncat+0xa>
    81f4:	701a      	strb	r2, [r3, #0]
    81f6:	e7f0      	b.n	81da <strncat+0xa>

000081f8 <sulp>:
    81f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81fc:	460f      	mov	r7, r1
    81fe:	4690      	mov	r8, r2
    8200:	f001 fe28 	bl	9e54 <__ulp>
    8204:	4604      	mov	r4, r0
    8206:	460d      	mov	r5, r1
    8208:	f1b8 0f00 	cmp.w	r8, #0
    820c:	d011      	beq.n	8232 <sulp+0x3a>
    820e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    8212:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    8216:	2b00      	cmp	r3, #0
    8218:	dd0b      	ble.n	8232 <sulp+0x3a>
    821a:	051b      	lsls	r3, r3, #20
    821c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
    8220:	2400      	movs	r4, #0
    8222:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
    8226:	4622      	mov	r2, r4
    8228:	462b      	mov	r3, r5
    822a:	f7fe feab 	bl	6f84 <__aeabi_dmul>
    822e:	4604      	mov	r4, r0
    8230:	460d      	mov	r5, r1
    8232:	4620      	mov	r0, r4
    8234:	4629      	mov	r1, r5
    8236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    823a:	0000      	movs	r0, r0
    823c:	0000      	movs	r0, r0
	...

00008240 <_strtod_l>:
    8240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8244:	4699      	mov	r9, r3
    8246:	b09f      	sub	sp, #124	; 0x7c
    8248:	2300      	movs	r3, #0
    824a:	4680      	mov	r8, r0
    824c:	4648      	mov	r0, r9
    824e:	460c      	mov	r4, r1
    8250:	9215      	str	r2, [sp, #84]	; 0x54
    8252:	931a      	str	r3, [sp, #104]	; 0x68
    8254:	f001 faaf 	bl	97b6 <__localeconv_l>
    8258:	4607      	mov	r7, r0
    825a:	6800      	ldr	r0, [r0, #0]
    825c:	f7ff ffb0 	bl	81c0 <strlen>
    8260:	f04f 0a00 	mov.w	sl, #0
    8264:	4605      	mov	r5, r0
    8266:	f04f 0b00 	mov.w	fp, #0
    826a:	9419      	str	r4, [sp, #100]	; 0x64
    826c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    826e:	781a      	ldrb	r2, [r3, #0]
    8270:	2a0d      	cmp	r2, #13
    8272:	d833      	bhi.n	82dc <_strtod_l+0x9c>
    8274:	2a09      	cmp	r2, #9
    8276:	d237      	bcs.n	82e8 <_strtod_l+0xa8>
    8278:	2a00      	cmp	r2, #0
    827a:	d03f      	beq.n	82fc <_strtod_l+0xbc>
    827c:	2300      	movs	r3, #0
    827e:	9309      	str	r3, [sp, #36]	; 0x24
    8280:	9e19      	ldr	r6, [sp, #100]	; 0x64
    8282:	7833      	ldrb	r3, [r6, #0]
    8284:	2b30      	cmp	r3, #48	; 0x30
    8286:	f040 8101 	bne.w	848c <_strtod_l+0x24c>
    828a:	7873      	ldrb	r3, [r6, #1]
    828c:	2b58      	cmp	r3, #88	; 0x58
    828e:	d001      	beq.n	8294 <_strtod_l+0x54>
    8290:	2b78      	cmp	r3, #120	; 0x78
    8292:	d16b      	bne.n	836c <_strtod_l+0x12c>
    8294:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8296:	9301      	str	r3, [sp, #4]
    8298:	ab1a      	add	r3, sp, #104	; 0x68
    829a:	9300      	str	r3, [sp, #0]
    829c:	f8cd 9008 	str.w	r9, [sp, #8]
    82a0:	ab1b      	add	r3, sp, #108	; 0x6c
    82a2:	4aaa      	ldr	r2, [pc, #680]	; (854c <_strtod_l+0x30c>)
    82a4:	a919      	add	r1, sp, #100	; 0x64
    82a6:	4640      	mov	r0, r8
    82a8:	f000 ffb2 	bl	9210 <__gethex>
    82ac:	f010 0407 	ands.w	r4, r0, #7
    82b0:	4605      	mov	r5, r0
    82b2:	d005      	beq.n	82c0 <_strtod_l+0x80>
    82b4:	2c06      	cmp	r4, #6
    82b6:	d12b      	bne.n	8310 <_strtod_l+0xd0>
    82b8:	3601      	adds	r6, #1
    82ba:	2300      	movs	r3, #0
    82bc:	9619      	str	r6, [sp, #100]	; 0x64
    82be:	9309      	str	r3, [sp, #36]	; 0x24
    82c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    82c2:	2b00      	cmp	r3, #0
    82c4:	f040 8599 	bne.w	8dfa <_strtod_l+0xbba>
    82c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    82ca:	b1e3      	cbz	r3, 8306 <_strtod_l+0xc6>
    82cc:	4652      	mov	r2, sl
    82ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    82d2:	4610      	mov	r0, r2
    82d4:	4619      	mov	r1, r3
    82d6:	b01f      	add	sp, #124	; 0x7c
    82d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82dc:	2a2b      	cmp	r2, #43	; 0x2b
    82de:	d006      	beq.n	82ee <_strtod_l+0xae>
    82e0:	2a2d      	cmp	r2, #45	; 0x2d
    82e2:	d013      	beq.n	830c <_strtod_l+0xcc>
    82e4:	2a20      	cmp	r2, #32
    82e6:	d1c9      	bne.n	827c <_strtod_l+0x3c>
    82e8:	3301      	adds	r3, #1
    82ea:	9319      	str	r3, [sp, #100]	; 0x64
    82ec:	e7be      	b.n	826c <_strtod_l+0x2c>
    82ee:	2200      	movs	r2, #0
    82f0:	9209      	str	r2, [sp, #36]	; 0x24
    82f2:	1c5a      	adds	r2, r3, #1
    82f4:	9219      	str	r2, [sp, #100]	; 0x64
    82f6:	785b      	ldrb	r3, [r3, #1]
    82f8:	2b00      	cmp	r3, #0
    82fa:	d1c1      	bne.n	8280 <_strtod_l+0x40>
    82fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    82fe:	9419      	str	r4, [sp, #100]	; 0x64
    8300:	2b00      	cmp	r3, #0
    8302:	f040 8578 	bne.w	8df6 <_strtod_l+0xbb6>
    8306:	4652      	mov	r2, sl
    8308:	465b      	mov	r3, fp
    830a:	e7e2      	b.n	82d2 <_strtod_l+0x92>
    830c:	2201      	movs	r2, #1
    830e:	e7ef      	b.n	82f0 <_strtod_l+0xb0>
    8310:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8312:	b13a      	cbz	r2, 8324 <_strtod_l+0xe4>
    8314:	2135      	movs	r1, #53	; 0x35
    8316:	a81c      	add	r0, sp, #112	; 0x70
    8318:	f001 fe89 	bl	a02e <__copybits>
    831c:	991a      	ldr	r1, [sp, #104]	; 0x68
    831e:	4640      	mov	r0, r8
    8320:	f001 fb0b 	bl	993a <_Bfree>
    8324:	3c01      	subs	r4, #1
    8326:	2c04      	cmp	r4, #4
    8328:	d808      	bhi.n	833c <_strtod_l+0xfc>
    832a:	e8df f004 	tbb	[pc, r4]
    832e:	030c      	.short	0x030c
    8330:	1a17      	.short	0x1a17
    8332:	0c          	.byte	0x0c
    8333:	00          	.byte	0x00
    8334:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    8338:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    833c:	0729      	lsls	r1, r5, #28
    833e:	d5bf      	bpl.n	82c0 <_strtod_l+0x80>
    8340:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
    8344:	e7bc      	b.n	82c0 <_strtod_l+0x80>
    8346:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8348:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    834a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    834e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    8352:	f202 4233 	addw	r2, r2, #1075	; 0x433
    8356:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
    835a:	e7ef      	b.n	833c <_strtod_l+0xfc>
    835c:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8558 <_strtod_l+0x318>
    8360:	e7ec      	b.n	833c <_strtod_l+0xfc>
    8362:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    8366:	f04f 3aff 	mov.w	sl, #4294967295
    836a:	e7e7      	b.n	833c <_strtod_l+0xfc>
    836c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    836e:	1c5a      	adds	r2, r3, #1
    8370:	9219      	str	r2, [sp, #100]	; 0x64
    8372:	785b      	ldrb	r3, [r3, #1]
    8374:	2b30      	cmp	r3, #48	; 0x30
    8376:	d0f9      	beq.n	836c <_strtod_l+0x12c>
    8378:	2b00      	cmp	r3, #0
    837a:	d0a1      	beq.n	82c0 <_strtod_l+0x80>
    837c:	2301      	movs	r3, #1
    837e:	9308      	str	r3, [sp, #32]
    8380:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8382:	930a      	str	r3, [sp, #40]	; 0x28
    8384:	2300      	movs	r3, #0
    8386:	9305      	str	r3, [sp, #20]
    8388:	9306      	str	r3, [sp, #24]
    838a:	9304      	str	r3, [sp, #16]
    838c:	220a      	movs	r2, #10
    838e:	9819      	ldr	r0, [sp, #100]	; 0x64
    8390:	7806      	ldrb	r6, [r0, #0]
    8392:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    8396:	b2d9      	uxtb	r1, r3
    8398:	2909      	cmp	r1, #9
    839a:	d979      	bls.n	8490 <_strtod_l+0x250>
    839c:	462a      	mov	r2, r5
    839e:	6839      	ldr	r1, [r7, #0]
    83a0:	f002 fe5c 	bl	b05c <strncmp>
    83a4:	2800      	cmp	r0, #0
    83a6:	f000 8085 	beq.w	84b4 <_strtod_l+0x274>
    83aa:	2000      	movs	r0, #0
    83ac:	9d04      	ldr	r5, [sp, #16]
    83ae:	4633      	mov	r3, r6
    83b0:	4602      	mov	r2, r0
    83b2:	4601      	mov	r1, r0
    83b4:	2b65      	cmp	r3, #101	; 0x65
    83b6:	d002      	beq.n	83be <_strtod_l+0x17e>
    83b8:	2b45      	cmp	r3, #69	; 0x45
    83ba:	f040 80ef 	bne.w	859c <_strtod_l+0x35c>
    83be:	b925      	cbnz	r5, 83ca <_strtod_l+0x18a>
    83c0:	b910      	cbnz	r0, 83c8 <_strtod_l+0x188>
    83c2:	9b08      	ldr	r3, [sp, #32]
    83c4:	2b00      	cmp	r3, #0
    83c6:	d099      	beq.n	82fc <_strtod_l+0xbc>
    83c8:	2500      	movs	r5, #0
    83ca:	9c19      	ldr	r4, [sp, #100]	; 0x64
    83cc:	1c63      	adds	r3, r4, #1
    83ce:	9319      	str	r3, [sp, #100]	; 0x64
    83d0:	7863      	ldrb	r3, [r4, #1]
    83d2:	2b2b      	cmp	r3, #43	; 0x2b
    83d4:	f000 80cf 	beq.w	8576 <_strtod_l+0x336>
    83d8:	2b2d      	cmp	r3, #45	; 0x2d
    83da:	f000 80d2 	beq.w	8582 <_strtod_l+0x342>
    83de:	2600      	movs	r6, #0
    83e0:	9607      	str	r6, [sp, #28]
    83e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
    83e6:	2e09      	cmp	r6, #9
    83e8:	f200 80d7 	bhi.w	859a <_strtod_l+0x35a>
    83ec:	2b30      	cmp	r3, #48	; 0x30
    83ee:	f000 80ca 	beq.w	8586 <_strtod_l+0x346>
    83f2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
    83f6:	2e08      	cmp	r6, #8
    83f8:	f200 80d0 	bhi.w	859c <_strtod_l+0x35c>
    83fc:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    8400:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8402:	f04f 0c0a 	mov.w	ip, #10
    8406:	461f      	mov	r7, r3
    8408:	9b19      	ldr	r3, [sp, #100]	; 0x64
    840a:	1c5e      	adds	r6, r3, #1
    840c:	9619      	str	r6, [sp, #100]	; 0x64
    840e:	785b      	ldrb	r3, [r3, #1]
    8410:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
    8414:	f1b9 0f09 	cmp.w	r9, #9
    8418:	f240 80ba 	bls.w	8590 <_strtod_l+0x350>
    841c:	1bf6      	subs	r6, r6, r7
    841e:	2e08      	cmp	r6, #8
    8420:	f644 691f 	movw	r9, #19999	; 0x4e1f
    8424:	dc02      	bgt.n	842c <_strtod_l+0x1ec>
    8426:	45f1      	cmp	r9, lr
    8428:	bfa8      	it	ge
    842a:	46f1      	movge	r9, lr
    842c:	9e07      	ldr	r6, [sp, #28]
    842e:	b10e      	cbz	r6, 8434 <_strtod_l+0x1f4>
    8430:	f1c9 0900 	rsb	r9, r9, #0
    8434:	2d00      	cmp	r5, #0
    8436:	f040 80d7 	bne.w	85e8 <_strtod_l+0x3a8>
    843a:	2800      	cmp	r0, #0
    843c:	f47f af40 	bne.w	82c0 <_strtod_l+0x80>
    8440:	9a08      	ldr	r2, [sp, #32]
    8442:	2a00      	cmp	r2, #0
    8444:	f47f af3c 	bne.w	82c0 <_strtod_l+0x80>
    8448:	2900      	cmp	r1, #0
    844a:	f47f af57 	bne.w	82fc <_strtod_l+0xbc>
    844e:	2b4e      	cmp	r3, #78	; 0x4e
    8450:	f000 80ad 	beq.w	85ae <_strtod_l+0x36e>
    8454:	f300 80a5 	bgt.w	85a2 <_strtod_l+0x362>
    8458:	2b49      	cmp	r3, #73	; 0x49
    845a:	f47f af4f 	bne.w	82fc <_strtod_l+0xbc>
    845e:	493c      	ldr	r1, [pc, #240]	; (8550 <_strtod_l+0x310>)
    8460:	a819      	add	r0, sp, #100	; 0x64
    8462:	f001 f905 	bl	9670 <__match>
    8466:	2800      	cmp	r0, #0
    8468:	f43f af48 	beq.w	82fc <_strtod_l+0xbc>
    846c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    846e:	4939      	ldr	r1, [pc, #228]	; (8554 <_strtod_l+0x314>)
    8470:	3b01      	subs	r3, #1
    8472:	a819      	add	r0, sp, #100	; 0x64
    8474:	9319      	str	r3, [sp, #100]	; 0x64
    8476:	f001 f8fb 	bl	9670 <__match>
    847a:	b910      	cbnz	r0, 8482 <_strtod_l+0x242>
    847c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    847e:	3301      	adds	r3, #1
    8480:	9319      	str	r3, [sp, #100]	; 0x64
    8482:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8558 <_strtod_l+0x318>
    8486:	f04f 0a00 	mov.w	sl, #0
    848a:	e719      	b.n	82c0 <_strtod_l+0x80>
    848c:	2300      	movs	r3, #0
    848e:	e776      	b.n	837e <_strtod_l+0x13e>
    8490:	9904      	ldr	r1, [sp, #16]
    8492:	2908      	cmp	r1, #8
    8494:	bfd5      	itete	le
    8496:	9906      	ldrle	r1, [sp, #24]
    8498:	9905      	ldrgt	r1, [sp, #20]
    849a:	fb02 3301 	mlale	r3, r2, r1, r3
    849e:	fb02 3301 	mlagt	r3, r2, r1, r3
    84a2:	bfd4      	ite	le
    84a4:	9306      	strle	r3, [sp, #24]
    84a6:	9305      	strgt	r3, [sp, #20]
    84a8:	9b04      	ldr	r3, [sp, #16]
    84aa:	3001      	adds	r0, #1
    84ac:	3301      	adds	r3, #1
    84ae:	9304      	str	r3, [sp, #16]
    84b0:	9019      	str	r0, [sp, #100]	; 0x64
    84b2:	e76c      	b.n	838e <_strtod_l+0x14e>
    84b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    84b6:	195a      	adds	r2, r3, r5
    84b8:	9219      	str	r2, [sp, #100]	; 0x64
    84ba:	9a04      	ldr	r2, [sp, #16]
    84bc:	5d5b      	ldrb	r3, [r3, r5]
    84be:	2a00      	cmp	r2, #0
    84c0:	d154      	bne.n	856c <_strtod_l+0x32c>
    84c2:	4610      	mov	r0, r2
    84c4:	2b30      	cmp	r3, #48	; 0x30
    84c6:	d02a      	beq.n	851e <_strtod_l+0x2de>
    84c8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
    84cc:	2a08      	cmp	r2, #8
    84ce:	f200 8499 	bhi.w	8e04 <_strtod_l+0xbc4>
    84d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    84d4:	920a      	str	r2, [sp, #40]	; 0x28
    84d6:	4602      	mov	r2, r0
    84d8:	2000      	movs	r0, #0
    84da:	4605      	mov	r5, r0
    84dc:	3b30      	subs	r3, #48	; 0x30
    84de:	f100 0101 	add.w	r1, r0, #1
    84e2:	d011      	beq.n	8508 <_strtod_l+0x2c8>
    84e4:	440a      	add	r2, r1
    84e6:	eb00 0c05 	add.w	ip, r0, r5
    84ea:	4629      	mov	r1, r5
    84ec:	260a      	movs	r6, #10
    84ee:	4561      	cmp	r1, ip
    84f0:	d11b      	bne.n	852a <_strtod_l+0x2ea>
    84f2:	4428      	add	r0, r5
    84f4:	2808      	cmp	r0, #8
    84f6:	f100 0501 	add.w	r5, r0, #1
    84fa:	dc2f      	bgt.n	855c <_strtod_l+0x31c>
    84fc:	9806      	ldr	r0, [sp, #24]
    84fe:	210a      	movs	r1, #10
    8500:	fb01 3300 	mla	r3, r1, r0, r3
    8504:	9306      	str	r3, [sp, #24]
    8506:	2100      	movs	r1, #0
    8508:	9b19      	ldr	r3, [sp, #100]	; 0x64
    850a:	1c58      	adds	r0, r3, #1
    850c:	9019      	str	r0, [sp, #100]	; 0x64
    850e:	785b      	ldrb	r3, [r3, #1]
    8510:	4608      	mov	r0, r1
    8512:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    8516:	2909      	cmp	r1, #9
    8518:	d9e0      	bls.n	84dc <_strtod_l+0x29c>
    851a:	2101      	movs	r1, #1
    851c:	e74a      	b.n	83b4 <_strtod_l+0x174>
    851e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8520:	1c5a      	adds	r2, r3, #1
    8522:	9219      	str	r2, [sp, #100]	; 0x64
    8524:	3001      	adds	r0, #1
    8526:	785b      	ldrb	r3, [r3, #1]
    8528:	e7cc      	b.n	84c4 <_strtod_l+0x284>
    852a:	3101      	adds	r1, #1
    852c:	f101 3eff 	add.w	lr, r1, #4294967295
    8530:	f1be 0f08 	cmp.w	lr, #8
    8534:	dc03      	bgt.n	853e <_strtod_l+0x2fe>
    8536:	9f06      	ldr	r7, [sp, #24]
    8538:	4377      	muls	r7, r6
    853a:	9706      	str	r7, [sp, #24]
    853c:	e7d7      	b.n	84ee <_strtod_l+0x2ae>
    853e:	2910      	cmp	r1, #16
    8540:	bfde      	ittt	le
    8542:	9f05      	ldrle	r7, [sp, #20]
    8544:	4377      	mulle	r7, r6
    8546:	9705      	strle	r7, [sp, #20]
    8548:	e7d1      	b.n	84ee <_strtod_l+0x2ae>
    854a:	bf00      	nop
    854c:	0000cbe0 	.word	0x0000cbe0
    8550:	0000cbd2 	.word	0x0000cbd2
    8554:	0000cbd5 	.word	0x0000cbd5
    8558:	7ff00000 	.word	0x7ff00000
    855c:	2d10      	cmp	r5, #16
    855e:	bfdf      	itttt	le
    8560:	9805      	ldrle	r0, [sp, #20]
    8562:	210a      	movle	r1, #10
    8564:	fb01 3300 	mlale	r3, r1, r0, r3
    8568:	9305      	strle	r3, [sp, #20]
    856a:	e7cc      	b.n	8506 <_strtod_l+0x2c6>
    856c:	4602      	mov	r2, r0
    856e:	9d04      	ldr	r5, [sp, #16]
    8570:	e7cf      	b.n	8512 <_strtod_l+0x2d2>
    8572:	2101      	movs	r1, #1
    8574:	e724      	b.n	83c0 <_strtod_l+0x180>
    8576:	2300      	movs	r3, #0
    8578:	9307      	str	r3, [sp, #28]
    857a:	1ca3      	adds	r3, r4, #2
    857c:	9319      	str	r3, [sp, #100]	; 0x64
    857e:	78a3      	ldrb	r3, [r4, #2]
    8580:	e72f      	b.n	83e2 <_strtod_l+0x1a2>
    8582:	2301      	movs	r3, #1
    8584:	e7f8      	b.n	8578 <_strtod_l+0x338>
    8586:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8588:	1c5e      	adds	r6, r3, #1
    858a:	9619      	str	r6, [sp, #100]	; 0x64
    858c:	785b      	ldrb	r3, [r3, #1]
    858e:	e72d      	b.n	83ec <_strtod_l+0x1ac>
    8590:	fb0c 3e0e 	mla	lr, ip, lr, r3
    8594:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
    8598:	e736      	b.n	8408 <_strtod_l+0x1c8>
    859a:	9419      	str	r4, [sp, #100]	; 0x64
    859c:	f04f 0900 	mov.w	r9, #0
    85a0:	e748      	b.n	8434 <_strtod_l+0x1f4>
    85a2:	2b69      	cmp	r3, #105	; 0x69
    85a4:	f43f af5b 	beq.w	845e <_strtod_l+0x21e>
    85a8:	2b6e      	cmp	r3, #110	; 0x6e
    85aa:	f47f aea7 	bne.w	82fc <_strtod_l+0xbc>
    85ae:	498c      	ldr	r1, [pc, #560]	; (87e0 <_strtod_l+0x5a0>)
    85b0:	a819      	add	r0, sp, #100	; 0x64
    85b2:	f001 f85d 	bl	9670 <__match>
    85b6:	2800      	cmp	r0, #0
    85b8:	f43f aea0 	beq.w	82fc <_strtod_l+0xbc>
    85bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    85be:	781b      	ldrb	r3, [r3, #0]
    85c0:	2b28      	cmp	r3, #40	; 0x28
    85c2:	d10e      	bne.n	85e2 <_strtod_l+0x3a2>
    85c4:	aa1c      	add	r2, sp, #112	; 0x70
    85c6:	4987      	ldr	r1, [pc, #540]	; (87e4 <_strtod_l+0x5a4>)
    85c8:	a819      	add	r0, sp, #100	; 0x64
    85ca:	f001 f864 	bl	9696 <__hexnan>
    85ce:	2805      	cmp	r0, #5
    85d0:	d107      	bne.n	85e2 <_strtod_l+0x3a2>
    85d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    85d4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    85d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
    85dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
    85e0:	e66e      	b.n	82c0 <_strtod_l+0x80>
    85e2:	f8df b210 	ldr.w	fp, [pc, #528]	; 87f4 <_strtod_l+0x5b4>
    85e6:	e74e      	b.n	8486 <_strtod_l+0x246>
    85e8:	9b04      	ldr	r3, [sp, #16]
    85ea:	9806      	ldr	r0, [sp, #24]
    85ec:	2b00      	cmp	r3, #0
    85ee:	bf08      	it	eq
    85f0:	462b      	moveq	r3, r5
    85f2:	2d10      	cmp	r5, #16
    85f4:	462c      	mov	r4, r5
    85f6:	eba9 0902 	sub.w	r9, r9, r2
    85fa:	bfa8      	it	ge
    85fc:	2410      	movge	r4, #16
    85fe:	9304      	str	r3, [sp, #16]
    8600:	f7fe fc4a 	bl	6e98 <__aeabi_ui2d>
    8604:	2c09      	cmp	r4, #9
    8606:	4682      	mov	sl, r0
    8608:	468b      	mov	fp, r1
    860a:	dd13      	ble.n	8634 <_strtod_l+0x3f4>
    860c:	4b76      	ldr	r3, [pc, #472]	; (87e8 <_strtod_l+0x5a8>)
    860e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8612:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    8616:	f7fe fcb5 	bl	6f84 <__aeabi_dmul>
    861a:	4606      	mov	r6, r0
    861c:	9805      	ldr	r0, [sp, #20]
    861e:	460f      	mov	r7, r1
    8620:	f7fe fc3a 	bl	6e98 <__aeabi_ui2d>
    8624:	4602      	mov	r2, r0
    8626:	460b      	mov	r3, r1
    8628:	4630      	mov	r0, r6
    862a:	4639      	mov	r1, r7
    862c:	f7fe faf8 	bl	6c20 <__adddf3>
    8630:	4682      	mov	sl, r0
    8632:	468b      	mov	fp, r1
    8634:	2d0f      	cmp	r5, #15
    8636:	dc36      	bgt.n	86a6 <_strtod_l+0x466>
    8638:	f1b9 0f00 	cmp.w	r9, #0
    863c:	f43f ae40 	beq.w	82c0 <_strtod_l+0x80>
    8640:	dd24      	ble.n	868c <_strtod_l+0x44c>
    8642:	f1b9 0f16 	cmp.w	r9, #22
    8646:	dc0b      	bgt.n	8660 <_strtod_l+0x420>
    8648:	4d67      	ldr	r5, [pc, #412]	; (87e8 <_strtod_l+0x5a8>)
    864a:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    864e:	e9d9 0100 	ldrd	r0, r1, [r9]
    8652:	4652      	mov	r2, sl
    8654:	465b      	mov	r3, fp
    8656:	f7fe fc95 	bl	6f84 <__aeabi_dmul>
    865a:	4682      	mov	sl, r0
    865c:	468b      	mov	fp, r1
    865e:	e62f      	b.n	82c0 <_strtod_l+0x80>
    8660:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    8664:	4599      	cmp	r9, r3
    8666:	dc1e      	bgt.n	86a6 <_strtod_l+0x466>
    8668:	4c5f      	ldr	r4, [pc, #380]	; (87e8 <_strtod_l+0x5a8>)
    866a:	f1c5 050f 	rsb	r5, r5, #15
    866e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    8672:	eba9 0505 	sub.w	r5, r9, r5
    8676:	4652      	mov	r2, sl
    8678:	465b      	mov	r3, fp
    867a:	e9d1 0100 	ldrd	r0, r1, [r1]
    867e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    8682:	f7fe fc7f 	bl	6f84 <__aeabi_dmul>
    8686:	e9d4 2300 	ldrd	r2, r3, [r4]
    868a:	e7e4      	b.n	8656 <_strtod_l+0x416>
    868c:	f119 0f16 	cmn.w	r9, #22
    8690:	db09      	blt.n	86a6 <_strtod_l+0x466>
    8692:	4d55      	ldr	r5, [pc, #340]	; (87e8 <_strtod_l+0x5a8>)
    8694:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
    8698:	e9d9 2300 	ldrd	r2, r3, [r9]
    869c:	4650      	mov	r0, sl
    869e:	4659      	mov	r1, fp
    86a0:	f7fe fd9a 	bl	71d8 <__aeabi_ddiv>
    86a4:	e7d9      	b.n	865a <_strtod_l+0x41a>
    86a6:	1b2c      	subs	r4, r5, r4
    86a8:	444c      	add	r4, r9
    86aa:	2c00      	cmp	r4, #0
    86ac:	dd73      	ble.n	8796 <_strtod_l+0x556>
    86ae:	f014 030f 	ands.w	r3, r4, #15
    86b2:	d00a      	beq.n	86ca <_strtod_l+0x48a>
    86b4:	494c      	ldr	r1, [pc, #304]	; (87e8 <_strtod_l+0x5a8>)
    86b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    86ba:	4652      	mov	r2, sl
    86bc:	465b      	mov	r3, fp
    86be:	e9d1 0100 	ldrd	r0, r1, [r1]
    86c2:	f7fe fc5f 	bl	6f84 <__aeabi_dmul>
    86c6:	4682      	mov	sl, r0
    86c8:	468b      	mov	fp, r1
    86ca:	f034 040f 	bics.w	r4, r4, #15
    86ce:	d054      	beq.n	877a <_strtod_l+0x53a>
    86d0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    86d4:	dd27      	ble.n	8726 <_strtod_l+0x4e6>
    86d6:	f04f 0900 	mov.w	r9, #0
    86da:	f8cd 9010 	str.w	r9, [sp, #16]
    86de:	f8cd 901c 	str.w	r9, [sp, #28]
    86e2:	f8cd 9018 	str.w	r9, [sp, #24]
    86e6:	2322      	movs	r3, #34	; 0x22
    86e8:	f8df b10c 	ldr.w	fp, [pc, #268]	; 87f8 <_strtod_l+0x5b8>
    86ec:	f8c8 3000 	str.w	r3, [r8]
    86f0:	f04f 0a00 	mov.w	sl, #0
    86f4:	9b07      	ldr	r3, [sp, #28]
    86f6:	2b00      	cmp	r3, #0
    86f8:	f43f ade2 	beq.w	82c0 <_strtod_l+0x80>
    86fc:	991a      	ldr	r1, [sp, #104]	; 0x68
    86fe:	4640      	mov	r0, r8
    8700:	f001 f91b 	bl	993a <_Bfree>
    8704:	9906      	ldr	r1, [sp, #24]
    8706:	4640      	mov	r0, r8
    8708:	f001 f917 	bl	993a <_Bfree>
    870c:	9904      	ldr	r1, [sp, #16]
    870e:	4640      	mov	r0, r8
    8710:	f001 f913 	bl	993a <_Bfree>
    8714:	9907      	ldr	r1, [sp, #28]
    8716:	4640      	mov	r0, r8
    8718:	f001 f90f 	bl	993a <_Bfree>
    871c:	4649      	mov	r1, r9
    871e:	4640      	mov	r0, r8
    8720:	f001 f90b 	bl	993a <_Bfree>
    8724:	e5cc      	b.n	82c0 <_strtod_l+0x80>
    8726:	2300      	movs	r3, #0
    8728:	4e30      	ldr	r6, [pc, #192]	; (87ec <_strtod_l+0x5ac>)
    872a:	1124      	asrs	r4, r4, #4
    872c:	4650      	mov	r0, sl
    872e:	4659      	mov	r1, fp
    8730:	461f      	mov	r7, r3
    8732:	2c01      	cmp	r4, #1
    8734:	dc24      	bgt.n	8780 <_strtod_l+0x540>
    8736:	b10b      	cbz	r3, 873c <_strtod_l+0x4fc>
    8738:	4682      	mov	sl, r0
    873a:	468b      	mov	fp, r1
    873c:	4b2b      	ldr	r3, [pc, #172]	; (87ec <_strtod_l+0x5ac>)
    873e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
    8742:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    8746:	4652      	mov	r2, sl
    8748:	465b      	mov	r3, fp
    874a:	e9d7 0100 	ldrd	r0, r1, [r7]
    874e:	f7fe fc19 	bl	6f84 <__aeabi_dmul>
    8752:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    8756:	468b      	mov	fp, r1
    8758:	460a      	mov	r2, r1
    875a:	0d1b      	lsrs	r3, r3, #20
    875c:	4924      	ldr	r1, [pc, #144]	; (87f0 <_strtod_l+0x5b0>)
    875e:	051b      	lsls	r3, r3, #20
    8760:	428b      	cmp	r3, r1
    8762:	4682      	mov	sl, r0
    8764:	d8b7      	bhi.n	86d6 <_strtod_l+0x496>
    8766:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    876a:	428b      	cmp	r3, r1
    876c:	bf86      	itte	hi
    876e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 87fc <_strtod_l+0x5bc>
    8772:	f04f 3aff 	movhi.w	sl, #4294967295
    8776:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
    877a:	2300      	movs	r3, #0
    877c:	9305      	str	r3, [sp, #20]
    877e:	e070      	b.n	8862 <_strtod_l+0x622>
    8780:	07e2      	lsls	r2, r4, #31
    8782:	d504      	bpl.n	878e <_strtod_l+0x54e>
    8784:	e9d6 2300 	ldrd	r2, r3, [r6]
    8788:	f7fe fbfc 	bl	6f84 <__aeabi_dmul>
    878c:	2301      	movs	r3, #1
    878e:	3701      	adds	r7, #1
    8790:	1064      	asrs	r4, r4, #1
    8792:	3608      	adds	r6, #8
    8794:	e7cd      	b.n	8732 <_strtod_l+0x4f2>
    8796:	d0f0      	beq.n	877a <_strtod_l+0x53a>
    8798:	4264      	negs	r4, r4
    879a:	f014 020f 	ands.w	r2, r4, #15
    879e:	d00a      	beq.n	87b6 <_strtod_l+0x576>
    87a0:	4b11      	ldr	r3, [pc, #68]	; (87e8 <_strtod_l+0x5a8>)
    87a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    87a6:	4650      	mov	r0, sl
    87a8:	4659      	mov	r1, fp
    87aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    87ae:	f7fe fd13 	bl	71d8 <__aeabi_ddiv>
    87b2:	4682      	mov	sl, r0
    87b4:	468b      	mov	fp, r1
    87b6:	1124      	asrs	r4, r4, #4
    87b8:	d0df      	beq.n	877a <_strtod_l+0x53a>
    87ba:	2c1f      	cmp	r4, #31
    87bc:	dd20      	ble.n	8800 <_strtod_l+0x5c0>
    87be:	f04f 0900 	mov.w	r9, #0
    87c2:	f8cd 9010 	str.w	r9, [sp, #16]
    87c6:	f8cd 901c 	str.w	r9, [sp, #28]
    87ca:	f8cd 9018 	str.w	r9, [sp, #24]
    87ce:	2322      	movs	r3, #34	; 0x22
    87d0:	f04f 0a00 	mov.w	sl, #0
    87d4:	f04f 0b00 	mov.w	fp, #0
    87d8:	f8c8 3000 	str.w	r3, [r8]
    87dc:	e78a      	b.n	86f4 <_strtod_l+0x4b4>
    87de:	bf00      	nop
    87e0:	0000cbdb 	.word	0x0000cbdb
    87e4:	0000cbf4 	.word	0x0000cbf4
    87e8:	0000cd60 	.word	0x0000cd60
    87ec:	0000cd38 	.word	0x0000cd38
    87f0:	7ca00000 	.word	0x7ca00000
    87f4:	fff80000 	.word	0xfff80000
    87f8:	7ff00000 	.word	0x7ff00000
    87fc:	7fefffff 	.word	0x7fefffff
    8800:	f014 0310 	ands.w	r3, r4, #16
    8804:	bf18      	it	ne
    8806:	236a      	movne	r3, #106	; 0x6a
    8808:	4e9f      	ldr	r6, [pc, #636]	; (8a88 <_strtod_l+0x848>)
    880a:	9305      	str	r3, [sp, #20]
    880c:	4650      	mov	r0, sl
    880e:	4659      	mov	r1, fp
    8810:	2300      	movs	r3, #0
    8812:	2c00      	cmp	r4, #0
    8814:	f300 8106 	bgt.w	8a24 <_strtod_l+0x7e4>
    8818:	b10b      	cbz	r3, 881e <_strtod_l+0x5de>
    881a:	4682      	mov	sl, r0
    881c:	468b      	mov	fp, r1
    881e:	9b05      	ldr	r3, [sp, #20]
    8820:	b1bb      	cbz	r3, 8852 <_strtod_l+0x612>
    8822:	f3cb 530a 	ubfx	r3, fp, #20, #11
    8826:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    882a:	2b00      	cmp	r3, #0
    882c:	4659      	mov	r1, fp
    882e:	dd10      	ble.n	8852 <_strtod_l+0x612>
    8830:	2b1f      	cmp	r3, #31
    8832:	f340 8101 	ble.w	8a38 <_strtod_l+0x7f8>
    8836:	2b34      	cmp	r3, #52	; 0x34
    8838:	bfde      	ittt	le
    883a:	3b20      	suble	r3, #32
    883c:	f04f 32ff 	movle.w	r2, #4294967295
    8840:	fa02 f303 	lslle.w	r3, r2, r3
    8844:	f04f 0a00 	mov.w	sl, #0
    8848:	bfcc      	ite	gt
    884a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
    884e:	ea03 0b01 	andle.w	fp, r3, r1
    8852:	2200      	movs	r2, #0
    8854:	2300      	movs	r3, #0
    8856:	4650      	mov	r0, sl
    8858:	4659      	mov	r1, fp
    885a:	f7fe fdfb 	bl	7454 <__aeabi_dcmpeq>
    885e:	2800      	cmp	r0, #0
    8860:	d1ad      	bne.n	87be <_strtod_l+0x57e>
    8862:	9b06      	ldr	r3, [sp, #24]
    8864:	9300      	str	r3, [sp, #0]
    8866:	9a04      	ldr	r2, [sp, #16]
    8868:	990a      	ldr	r1, [sp, #40]	; 0x28
    886a:	462b      	mov	r3, r5
    886c:	4640      	mov	r0, r8
    886e:	f001 f8b6 	bl	99de <__s2b>
    8872:	9007      	str	r0, [sp, #28]
    8874:	2800      	cmp	r0, #0
    8876:	f43f af2e 	beq.w	86d6 <_strtod_l+0x496>
    887a:	f1b9 0f00 	cmp.w	r9, #0
    887e:	f1c9 0300 	rsb	r3, r9, #0
    8882:	bfa8      	it	ge
    8884:	2300      	movge	r3, #0
    8886:	930e      	str	r3, [sp, #56]	; 0x38
    8888:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
    888c:	f04f 0900 	mov.w	r9, #0
    8890:	930f      	str	r3, [sp, #60]	; 0x3c
    8892:	f8cd 9010 	str.w	r9, [sp, #16]
    8896:	9b07      	ldr	r3, [sp, #28]
    8898:	4640      	mov	r0, r8
    889a:	6859      	ldr	r1, [r3, #4]
    889c:	f001 f819 	bl	98d2 <_Balloc>
    88a0:	9006      	str	r0, [sp, #24]
    88a2:	2800      	cmp	r0, #0
    88a4:	f43f af1f 	beq.w	86e6 <_strtod_l+0x4a6>
    88a8:	9b07      	ldr	r3, [sp, #28]
    88aa:	691a      	ldr	r2, [r3, #16]
    88ac:	3202      	adds	r2, #2
    88ae:	f103 010c 	add.w	r1, r3, #12
    88b2:	0092      	lsls	r2, r2, #2
    88b4:	300c      	adds	r0, #12
    88b6:	f000 ffff 	bl	98b8 <memcpy>
    88ba:	ab1c      	add	r3, sp, #112	; 0x70
    88bc:	9301      	str	r3, [sp, #4]
    88be:	ab1b      	add	r3, sp, #108	; 0x6c
    88c0:	9300      	str	r3, [sp, #0]
    88c2:	4652      	mov	r2, sl
    88c4:	465b      	mov	r3, fp
    88c6:	4640      	mov	r0, r8
    88c8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
    88cc:	f001 fb38 	bl	9f40 <__d2b>
    88d0:	901a      	str	r0, [sp, #104]	; 0x68
    88d2:	2800      	cmp	r0, #0
    88d4:	f43f af07 	beq.w	86e6 <_strtod_l+0x4a6>
    88d8:	2101      	movs	r1, #1
    88da:	4640      	mov	r0, r8
    88dc:	f001 f90b 	bl	9af6 <__i2b>
    88e0:	9004      	str	r0, [sp, #16]
    88e2:	4603      	mov	r3, r0
    88e4:	2800      	cmp	r0, #0
    88e6:	f43f aefe 	beq.w	86e6 <_strtod_l+0x4a6>
    88ea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    88ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    88ee:	2d00      	cmp	r5, #0
    88f0:	bfab      	itete	ge
    88f2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
    88f4:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
    88f6:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
    88f8:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
    88fa:	bfac      	ite	ge
    88fc:	195e      	addge	r6, r3, r5
    88fe:	1b5c      	sublt	r4, r3, r5
    8900:	9b05      	ldr	r3, [sp, #20]
    8902:	1aed      	subs	r5, r5, r3
    8904:	4415      	add	r5, r2
    8906:	4b61      	ldr	r3, [pc, #388]	; (8a8c <_strtod_l+0x84c>)
    8908:	3d01      	subs	r5, #1
    890a:	429d      	cmp	r5, r3
    890c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    8910:	f280 80a4 	bge.w	8a5c <_strtod_l+0x81c>
    8914:	1b5b      	subs	r3, r3, r5
    8916:	2b1f      	cmp	r3, #31
    8918:	eba2 0203 	sub.w	r2, r2, r3
    891c:	f04f 0701 	mov.w	r7, #1
    8920:	f300 8091 	bgt.w	8a46 <_strtod_l+0x806>
    8924:	fa07 f303 	lsl.w	r3, r7, r3
    8928:	9314      	str	r3, [sp, #80]	; 0x50
    892a:	2500      	movs	r5, #0
    892c:	18b7      	adds	r7, r6, r2
    892e:	9b05      	ldr	r3, [sp, #20]
    8930:	42be      	cmp	r6, r7
    8932:	4414      	add	r4, r2
    8934:	441c      	add	r4, r3
    8936:	4633      	mov	r3, r6
    8938:	bfa8      	it	ge
    893a:	463b      	movge	r3, r7
    893c:	42a3      	cmp	r3, r4
    893e:	bfa8      	it	ge
    8940:	4623      	movge	r3, r4
    8942:	2b00      	cmp	r3, #0
    8944:	bfc2      	ittt	gt
    8946:	1aff      	subgt	r7, r7, r3
    8948:	1ae4      	subgt	r4, r4, r3
    894a:	1af6      	subgt	r6, r6, r3
    894c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    894e:	b1bb      	cbz	r3, 8980 <_strtod_l+0x740>
    8950:	461a      	mov	r2, r3
    8952:	9904      	ldr	r1, [sp, #16]
    8954:	4640      	mov	r0, r8
    8956:	f001 f965 	bl	9c24 <__pow5mult>
    895a:	9004      	str	r0, [sp, #16]
    895c:	2800      	cmp	r0, #0
    895e:	f43f aec2 	beq.w	86e6 <_strtod_l+0x4a6>
    8962:	4601      	mov	r1, r0
    8964:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8966:	4640      	mov	r0, r8
    8968:	f001 f8ce 	bl	9b08 <__multiply>
    896c:	9008      	str	r0, [sp, #32]
    896e:	2800      	cmp	r0, #0
    8970:	f43f aeb9 	beq.w	86e6 <_strtod_l+0x4a6>
    8974:	991a      	ldr	r1, [sp, #104]	; 0x68
    8976:	4640      	mov	r0, r8
    8978:	f000 ffdf 	bl	993a <_Bfree>
    897c:	9b08      	ldr	r3, [sp, #32]
    897e:	931a      	str	r3, [sp, #104]	; 0x68
    8980:	2f00      	cmp	r7, #0
    8982:	dc6f      	bgt.n	8a64 <_strtod_l+0x824>
    8984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8986:	2b00      	cmp	r3, #0
    8988:	d175      	bne.n	8a76 <_strtod_l+0x836>
    898a:	2c00      	cmp	r4, #0
    898c:	dd08      	ble.n	89a0 <_strtod_l+0x760>
    898e:	4622      	mov	r2, r4
    8990:	9906      	ldr	r1, [sp, #24]
    8992:	4640      	mov	r0, r8
    8994:	f001 f994 	bl	9cc0 <__lshift>
    8998:	9006      	str	r0, [sp, #24]
    899a:	2800      	cmp	r0, #0
    899c:	f43f aea3 	beq.w	86e6 <_strtod_l+0x4a6>
    89a0:	2e00      	cmp	r6, #0
    89a2:	dd08      	ble.n	89b6 <_strtod_l+0x776>
    89a4:	4632      	mov	r2, r6
    89a6:	9904      	ldr	r1, [sp, #16]
    89a8:	4640      	mov	r0, r8
    89aa:	f001 f989 	bl	9cc0 <__lshift>
    89ae:	9004      	str	r0, [sp, #16]
    89b0:	2800      	cmp	r0, #0
    89b2:	f43f ae98 	beq.w	86e6 <_strtod_l+0x4a6>
    89b6:	9a06      	ldr	r2, [sp, #24]
    89b8:	991a      	ldr	r1, [sp, #104]	; 0x68
    89ba:	4640      	mov	r0, r8
    89bc:	f001 f9eb 	bl	9d96 <__mdiff>
    89c0:	4681      	mov	r9, r0
    89c2:	2800      	cmp	r0, #0
    89c4:	f43f ae8f 	beq.w	86e6 <_strtod_l+0x4a6>
    89c8:	2400      	movs	r4, #0
    89ca:	68c3      	ldr	r3, [r0, #12]
    89cc:	9904      	ldr	r1, [sp, #16]
    89ce:	60c4      	str	r4, [r0, #12]
    89d0:	9308      	str	r3, [sp, #32]
    89d2:	f001 f9c6 	bl	9d62 <__mcmp>
    89d6:	42a0      	cmp	r0, r4
    89d8:	da5a      	bge.n	8a90 <_strtod_l+0x850>
    89da:	9b08      	ldr	r3, [sp, #32]
    89dc:	b9f3      	cbnz	r3, 8a1c <_strtod_l+0x7dc>
    89de:	f1ba 0f00 	cmp.w	sl, #0
    89e2:	d11b      	bne.n	8a1c <_strtod_l+0x7dc>
    89e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
    89e8:	b9c3      	cbnz	r3, 8a1c <_strtod_l+0x7dc>
    89ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    89ee:	0d1b      	lsrs	r3, r3, #20
    89f0:	051b      	lsls	r3, r3, #20
    89f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    89f6:	d911      	bls.n	8a1c <_strtod_l+0x7dc>
    89f8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    89fc:	b91b      	cbnz	r3, 8a06 <_strtod_l+0x7c6>
    89fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
    8a02:	2b01      	cmp	r3, #1
    8a04:	dd0a      	ble.n	8a1c <_strtod_l+0x7dc>
    8a06:	4649      	mov	r1, r9
    8a08:	2201      	movs	r2, #1
    8a0a:	4640      	mov	r0, r8
    8a0c:	f001 f958 	bl	9cc0 <__lshift>
    8a10:	9904      	ldr	r1, [sp, #16]
    8a12:	4681      	mov	r9, r0
    8a14:	f001 f9a5 	bl	9d62 <__mcmp>
    8a18:	2800      	cmp	r0, #0
    8a1a:	dc6a      	bgt.n	8af2 <_strtod_l+0x8b2>
    8a1c:	9b05      	ldr	r3, [sp, #20]
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d174      	bne.n	8b0c <_strtod_l+0x8cc>
    8a22:	e66b      	b.n	86fc <_strtod_l+0x4bc>
    8a24:	07e2      	lsls	r2, r4, #31
    8a26:	d504      	bpl.n	8a32 <_strtod_l+0x7f2>
    8a28:	e9d6 2300 	ldrd	r2, r3, [r6]
    8a2c:	f7fe faaa 	bl	6f84 <__aeabi_dmul>
    8a30:	2301      	movs	r3, #1
    8a32:	1064      	asrs	r4, r4, #1
    8a34:	3608      	adds	r6, #8
    8a36:	e6ec      	b.n	8812 <_strtod_l+0x5d2>
    8a38:	f04f 32ff 	mov.w	r2, #4294967295
    8a3c:	fa02 f303 	lsl.w	r3, r2, r3
    8a40:	ea03 0a0a 	and.w	sl, r3, sl
    8a44:	e705      	b.n	8852 <_strtod_l+0x612>
    8a46:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
    8a4a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
    8a4e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
    8a52:	35e2      	adds	r5, #226	; 0xe2
    8a54:	fa07 f505 	lsl.w	r5, r7, r5
    8a58:	9714      	str	r7, [sp, #80]	; 0x50
    8a5a:	e767      	b.n	892c <_strtod_l+0x6ec>
    8a5c:	2301      	movs	r3, #1
    8a5e:	2500      	movs	r5, #0
    8a60:	9314      	str	r3, [sp, #80]	; 0x50
    8a62:	e763      	b.n	892c <_strtod_l+0x6ec>
    8a64:	463a      	mov	r2, r7
    8a66:	991a      	ldr	r1, [sp, #104]	; 0x68
    8a68:	4640      	mov	r0, r8
    8a6a:	f001 f929 	bl	9cc0 <__lshift>
    8a6e:	901a      	str	r0, [sp, #104]	; 0x68
    8a70:	2800      	cmp	r0, #0
    8a72:	d187      	bne.n	8984 <_strtod_l+0x744>
    8a74:	e637      	b.n	86e6 <_strtod_l+0x4a6>
    8a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8a78:	9906      	ldr	r1, [sp, #24]
    8a7a:	4640      	mov	r0, r8
    8a7c:	f001 f8d2 	bl	9c24 <__pow5mult>
    8a80:	9006      	str	r0, [sp, #24]
    8a82:	2800      	cmp	r0, #0
    8a84:	d181      	bne.n	898a <_strtod_l+0x74a>
    8a86:	e62e      	b.n	86e6 <_strtod_l+0x4a6>
    8a88:	0000cc08 	.word	0x0000cc08
    8a8c:	fffffc02 	.word	0xfffffc02
    8a90:	f040 8086 	bne.w	8ba0 <_strtod_l+0x960>
    8a94:	9a08      	ldr	r2, [sp, #32]
    8a96:	f3cb 0313 	ubfx	r3, fp, #0, #20
    8a9a:	b332      	cbz	r2, 8aea <_strtod_l+0x8aa>
    8a9c:	4aac      	ldr	r2, [pc, #688]	; (8d50 <_strtod_l+0xb10>)
    8a9e:	4293      	cmp	r3, r2
    8aa0:	4659      	mov	r1, fp
    8aa2:	d152      	bne.n	8b4a <_strtod_l+0x90a>
    8aa4:	9b05      	ldr	r3, [sp, #20]
    8aa6:	4650      	mov	r0, sl
    8aa8:	b1d3      	cbz	r3, 8ae0 <_strtod_l+0x8a0>
    8aaa:	4aaa      	ldr	r2, [pc, #680]	; (8d54 <_strtod_l+0xb14>)
    8aac:	400a      	ands	r2, r1
    8aae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
    8ab2:	f04f 34ff 	mov.w	r4, #4294967295
    8ab6:	d816      	bhi.n	8ae6 <_strtod_l+0x8a6>
    8ab8:	0d12      	lsrs	r2, r2, #20
    8aba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    8abe:	fa04 f303 	lsl.w	r3, r4, r3
    8ac2:	4283      	cmp	r3, r0
    8ac4:	d141      	bne.n	8b4a <_strtod_l+0x90a>
    8ac6:	4aa4      	ldr	r2, [pc, #656]	; (8d58 <_strtod_l+0xb18>)
    8ac8:	4291      	cmp	r1, r2
    8aca:	d102      	bne.n	8ad2 <_strtod_l+0x892>
    8acc:	3301      	adds	r3, #1
    8ace:	f43f ae0a 	beq.w	86e6 <_strtod_l+0x4a6>
    8ad2:	4ba0      	ldr	r3, [pc, #640]	; (8d54 <_strtod_l+0xb14>)
    8ad4:	400b      	ands	r3, r1
    8ad6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
    8ada:	f04f 0a00 	mov.w	sl, #0
    8ade:	e79d      	b.n	8a1c <_strtod_l+0x7dc>
    8ae0:	f04f 33ff 	mov.w	r3, #4294967295
    8ae4:	e7ed      	b.n	8ac2 <_strtod_l+0x882>
    8ae6:	4623      	mov	r3, r4
    8ae8:	e7eb      	b.n	8ac2 <_strtod_l+0x882>
    8aea:	bb73      	cbnz	r3, 8b4a <_strtod_l+0x90a>
    8aec:	f1ba 0f00 	cmp.w	sl, #0
    8af0:	d12b      	bne.n	8b4a <_strtod_l+0x90a>
    8af2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    8af6:	9a05      	ldr	r2, [sp, #20]
    8af8:	0d1b      	lsrs	r3, r3, #20
    8afa:	051b      	lsls	r3, r3, #20
    8afc:	b1e2      	cbz	r2, 8b38 <_strtod_l+0x8f8>
    8afe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    8b02:	dc19      	bgt.n	8b38 <_strtod_l+0x8f8>
    8b04:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    8b08:	f77f ae61 	ble.w	87ce <_strtod_l+0x58e>
    8b0c:	4b93      	ldr	r3, [pc, #588]	; (8d5c <_strtod_l+0xb1c>)
    8b0e:	930d      	str	r3, [sp, #52]	; 0x34
    8b10:	2300      	movs	r3, #0
    8b12:	930c      	str	r3, [sp, #48]	; 0x30
    8b14:	4650      	mov	r0, sl
    8b16:	4659      	mov	r1, fp
    8b18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    8b1c:	f7fe fa32 	bl	6f84 <__aeabi_dmul>
    8b20:	4682      	mov	sl, r0
    8b22:	468b      	mov	fp, r1
    8b24:	2900      	cmp	r1, #0
    8b26:	f47f ade9 	bne.w	86fc <_strtod_l+0x4bc>
    8b2a:	2800      	cmp	r0, #0
    8b2c:	f47f ade6 	bne.w	86fc <_strtod_l+0x4bc>
    8b30:	2322      	movs	r3, #34	; 0x22
    8b32:	f8c8 3000 	str.w	r3, [r8]
    8b36:	e5e1      	b.n	86fc <_strtod_l+0x4bc>
    8b38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    8b3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
    8b40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
    8b44:	f04f 3aff 	mov.w	sl, #4294967295
    8b48:	e768      	b.n	8a1c <_strtod_l+0x7dc>
    8b4a:	b19d      	cbz	r5, 8b74 <_strtod_l+0x934>
    8b4c:	ea15 0f0b 	tst.w	r5, fp
    8b50:	f43f af64 	beq.w	8a1c <_strtod_l+0x7dc>
    8b54:	9b08      	ldr	r3, [sp, #32]
    8b56:	9a05      	ldr	r2, [sp, #20]
    8b58:	4650      	mov	r0, sl
    8b5a:	4659      	mov	r1, fp
    8b5c:	b173      	cbz	r3, 8b7c <_strtod_l+0x93c>
    8b5e:	f7ff fb4b 	bl	81f8 <sulp>
    8b62:	4602      	mov	r2, r0
    8b64:	460b      	mov	r3, r1
    8b66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    8b6a:	f7fe f859 	bl	6c20 <__adddf3>
    8b6e:	4682      	mov	sl, r0
    8b70:	468b      	mov	fp, r1
    8b72:	e753      	b.n	8a1c <_strtod_l+0x7dc>
    8b74:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8b76:	ea13 0f0a 	tst.w	r3, sl
    8b7a:	e7e9      	b.n	8b50 <_strtod_l+0x910>
    8b7c:	f7ff fb3c 	bl	81f8 <sulp>
    8b80:	4602      	mov	r2, r0
    8b82:	460b      	mov	r3, r1
    8b84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    8b88:	f7fe f848 	bl	6c1c <__aeabi_dsub>
    8b8c:	2200      	movs	r2, #0
    8b8e:	2300      	movs	r3, #0
    8b90:	4682      	mov	sl, r0
    8b92:	468b      	mov	fp, r1
    8b94:	f7fe fc5e 	bl	7454 <__aeabi_dcmpeq>
    8b98:	2800      	cmp	r0, #0
    8b9a:	f47f ae18 	bne.w	87ce <_strtod_l+0x58e>
    8b9e:	e73d      	b.n	8a1c <_strtod_l+0x7dc>
    8ba0:	9904      	ldr	r1, [sp, #16]
    8ba2:	4648      	mov	r0, r9
    8ba4:	f001 fa1b 	bl	9fde <__ratio>
    8ba8:	2200      	movs	r2, #0
    8baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bae:	4606      	mov	r6, r0
    8bb0:	460f      	mov	r7, r1
    8bb2:	f7fe fc63 	bl	747c <__aeabi_dcmple>
    8bb6:	2800      	cmp	r0, #0
    8bb8:	d070      	beq.n	8c9c <_strtod_l+0xa5c>
    8bba:	9b08      	ldr	r3, [sp, #32]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d043      	beq.n	8c48 <_strtod_l+0xa08>
    8bc0:	4f67      	ldr	r7, [pc, #412]	; (8d60 <_strtod_l+0xb20>)
    8bc2:	2600      	movs	r6, #0
    8bc4:	4d66      	ldr	r5, [pc, #408]	; (8d60 <_strtod_l+0xb20>)
    8bc6:	4b63      	ldr	r3, [pc, #396]	; (8d54 <_strtod_l+0xb14>)
    8bc8:	ea0b 0303 	and.w	r3, fp, r3
    8bcc:	9314      	str	r3, [sp, #80]	; 0x50
    8bce:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8bd0:	4b64      	ldr	r3, [pc, #400]	; (8d64 <_strtod_l+0xb24>)
    8bd2:	429a      	cmp	r2, r3
    8bd4:	f040 80ce 	bne.w	8d74 <_strtod_l+0xb34>
    8bd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    8bdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
    8be0:	4650      	mov	r0, sl
    8be2:	4659      	mov	r1, fp
    8be4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    8be8:	f001 f934 	bl	9e54 <__ulp>
    8bec:	4602      	mov	r2, r0
    8bee:	460b      	mov	r3, r1
    8bf0:	4630      	mov	r0, r6
    8bf2:	4639      	mov	r1, r7
    8bf4:	f7fe f9c6 	bl	6f84 <__aeabi_dmul>
    8bf8:	4652      	mov	r2, sl
    8bfa:	465b      	mov	r3, fp
    8bfc:	f7fe f810 	bl	6c20 <__adddf3>
    8c00:	4a54      	ldr	r2, [pc, #336]	; (8d54 <_strtod_l+0xb14>)
    8c02:	4b59      	ldr	r3, [pc, #356]	; (8d68 <_strtod_l+0xb28>)
    8c04:	400a      	ands	r2, r1
    8c06:	429a      	cmp	r2, r3
    8c08:	4682      	mov	sl, r0
    8c0a:	d95d      	bls.n	8cc8 <_strtod_l+0xa88>
    8c0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c0e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    8c12:	429a      	cmp	r2, r3
    8c14:	d103      	bne.n	8c1e <_strtod_l+0x9de>
    8c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8c18:	3301      	adds	r3, #1
    8c1a:	f43f ad64 	beq.w	86e6 <_strtod_l+0x4a6>
    8c1e:	f8df b138 	ldr.w	fp, [pc, #312]	; 8d58 <_strtod_l+0xb18>
    8c22:	f04f 3aff 	mov.w	sl, #4294967295
    8c26:	991a      	ldr	r1, [sp, #104]	; 0x68
    8c28:	4640      	mov	r0, r8
    8c2a:	f000 fe86 	bl	993a <_Bfree>
    8c2e:	9906      	ldr	r1, [sp, #24]
    8c30:	4640      	mov	r0, r8
    8c32:	f000 fe82 	bl	993a <_Bfree>
    8c36:	9904      	ldr	r1, [sp, #16]
    8c38:	4640      	mov	r0, r8
    8c3a:	f000 fe7e 	bl	993a <_Bfree>
    8c3e:	4649      	mov	r1, r9
    8c40:	4640      	mov	r0, r8
    8c42:	f000 fe7a 	bl	993a <_Bfree>
    8c46:	e626      	b.n	8896 <_strtod_l+0x656>
    8c48:	f1ba 0f00 	cmp.w	sl, #0
    8c4c:	d118      	bne.n	8c80 <_strtod_l+0xa40>
    8c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
    8c52:	b9e3      	cbnz	r3, 8c8e <_strtod_l+0xa4e>
    8c54:	2200      	movs	r2, #0
    8c56:	4b42      	ldr	r3, [pc, #264]	; (8d60 <_strtod_l+0xb20>)
    8c58:	4630      	mov	r0, r6
    8c5a:	4639      	mov	r1, r7
    8c5c:	f7fe fc04 	bl	7468 <__aeabi_dcmplt>
    8c60:	b9c8      	cbnz	r0, 8c96 <_strtod_l+0xa56>
    8c62:	2200      	movs	r2, #0
    8c64:	4b41      	ldr	r3, [pc, #260]	; (8d6c <_strtod_l+0xb2c>)
    8c66:	4630      	mov	r0, r6
    8c68:	4639      	mov	r1, r7
    8c6a:	f7fe f98b 	bl	6f84 <__aeabi_dmul>
    8c6e:	4604      	mov	r4, r0
    8c70:	460d      	mov	r5, r1
    8c72:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    8c76:	9416      	str	r4, [sp, #88]	; 0x58
    8c78:	9317      	str	r3, [sp, #92]	; 0x5c
    8c7a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    8c7e:	e7a2      	b.n	8bc6 <_strtod_l+0x986>
    8c80:	f1ba 0f01 	cmp.w	sl, #1
    8c84:	d103      	bne.n	8c8e <_strtod_l+0xa4e>
    8c86:	f1bb 0f00 	cmp.w	fp, #0
    8c8a:	f43f ada0 	beq.w	87ce <_strtod_l+0x58e>
    8c8e:	2600      	movs	r6, #0
    8c90:	4f37      	ldr	r7, [pc, #220]	; (8d70 <_strtod_l+0xb30>)
    8c92:	2400      	movs	r4, #0
    8c94:	e796      	b.n	8bc4 <_strtod_l+0x984>
    8c96:	9c08      	ldr	r4, [sp, #32]
    8c98:	4d34      	ldr	r5, [pc, #208]	; (8d6c <_strtod_l+0xb2c>)
    8c9a:	e7ea      	b.n	8c72 <_strtod_l+0xa32>
    8c9c:	4b33      	ldr	r3, [pc, #204]	; (8d6c <_strtod_l+0xb2c>)
    8c9e:	2200      	movs	r2, #0
    8ca0:	4630      	mov	r0, r6
    8ca2:	4639      	mov	r1, r7
    8ca4:	f7fe f96e 	bl	6f84 <__aeabi_dmul>
    8ca8:	9b08      	ldr	r3, [sp, #32]
    8caa:	4604      	mov	r4, r0
    8cac:	460d      	mov	r5, r1
    8cae:	b933      	cbnz	r3, 8cbe <_strtod_l+0xa7e>
    8cb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    8cb4:	9010      	str	r0, [sp, #64]	; 0x40
    8cb6:	9311      	str	r3, [sp, #68]	; 0x44
    8cb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    8cbc:	e783      	b.n	8bc6 <_strtod_l+0x986>
    8cbe:	4602      	mov	r2, r0
    8cc0:	460b      	mov	r3, r1
    8cc2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8cc6:	e7f7      	b.n	8cb8 <_strtod_l+0xa78>
    8cc8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
    8ccc:	9b05      	ldr	r3, [sp, #20]
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d1a9      	bne.n	8c26 <_strtod_l+0x9e6>
    8cd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    8cd6:	0d1b      	lsrs	r3, r3, #20
    8cd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8cda:	051b      	lsls	r3, r3, #20
    8cdc:	429a      	cmp	r2, r3
    8cde:	465e      	mov	r6, fp
    8ce0:	d1a1      	bne.n	8c26 <_strtod_l+0x9e6>
    8ce2:	4629      	mov	r1, r5
    8ce4:	4620      	mov	r0, r4
    8ce6:	f002 fbc5 	bl	b474 <__aeabi_d2iz>
    8cea:	f7fe f8e5 	bl	6eb8 <__aeabi_i2d>
    8cee:	460b      	mov	r3, r1
    8cf0:	4602      	mov	r2, r0
    8cf2:	4629      	mov	r1, r5
    8cf4:	4620      	mov	r0, r4
    8cf6:	f7fd ff91 	bl	6c1c <__aeabi_dsub>
    8cfa:	9b08      	ldr	r3, [sp, #32]
    8cfc:	4604      	mov	r4, r0
    8cfe:	460d      	mov	r5, r1
    8d00:	b933      	cbnz	r3, 8d10 <_strtod_l+0xad0>
    8d02:	f1ba 0f00 	cmp.w	sl, #0
    8d06:	d103      	bne.n	8d10 <_strtod_l+0xad0>
    8d08:	f3cb 0613 	ubfx	r6, fp, #0, #20
    8d0c:	2e00      	cmp	r6, #0
    8d0e:	d06c      	beq.n	8dea <_strtod_l+0xbaa>
    8d10:	a30b      	add	r3, pc, #44	; (adr r3, 8d40 <_strtod_l+0xb00>)
    8d12:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d16:	4620      	mov	r0, r4
    8d18:	4629      	mov	r1, r5
    8d1a:	f7fe fba5 	bl	7468 <__aeabi_dcmplt>
    8d1e:	2800      	cmp	r0, #0
    8d20:	f47f acec 	bne.w	86fc <_strtod_l+0x4bc>
    8d24:	a308      	add	r3, pc, #32	; (adr r3, 8d48 <_strtod_l+0xb08>)
    8d26:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d2a:	4620      	mov	r0, r4
    8d2c:	4629      	mov	r1, r5
    8d2e:	f7fe fbb9 	bl	74a4 <__aeabi_dcmpgt>
    8d32:	2800      	cmp	r0, #0
    8d34:	f43f af77 	beq.w	8c26 <_strtod_l+0x9e6>
    8d38:	e4e0      	b.n	86fc <_strtod_l+0x4bc>
    8d3a:	bf00      	nop
    8d3c:	f3af 8000 	nop.w
    8d40:	94a03595 	.word	0x94a03595
    8d44:	3fdfffff 	.word	0x3fdfffff
    8d48:	35afe535 	.word	0x35afe535
    8d4c:	3fe00000 	.word	0x3fe00000
    8d50:	000fffff 	.word	0x000fffff
    8d54:	7ff00000 	.word	0x7ff00000
    8d58:	7fefffff 	.word	0x7fefffff
    8d5c:	39500000 	.word	0x39500000
    8d60:	3ff00000 	.word	0x3ff00000
    8d64:	7fe00000 	.word	0x7fe00000
    8d68:	7c9fffff 	.word	0x7c9fffff
    8d6c:	3fe00000 	.word	0x3fe00000
    8d70:	bff00000 	.word	0xbff00000
    8d74:	9b05      	ldr	r3, [sp, #20]
    8d76:	b313      	cbz	r3, 8dbe <_strtod_l+0xb7e>
    8d78:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8d7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    8d7e:	d81e      	bhi.n	8dbe <_strtod_l+0xb7e>
    8d80:	a325      	add	r3, pc, #148	; (adr r3, 8e18 <_strtod_l+0xbd8>)
    8d82:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d86:	4620      	mov	r0, r4
    8d88:	4629      	mov	r1, r5
    8d8a:	f7fe fb77 	bl	747c <__aeabi_dcmple>
    8d8e:	b190      	cbz	r0, 8db6 <_strtod_l+0xb76>
    8d90:	4629      	mov	r1, r5
    8d92:	4620      	mov	r0, r4
    8d94:	f7fe fba6 	bl	74e4 <__aeabi_d2uiz>
    8d98:	2800      	cmp	r0, #0
    8d9a:	bf08      	it	eq
    8d9c:	2001      	moveq	r0, #1
    8d9e:	f7fe f87b 	bl	6e98 <__aeabi_ui2d>
    8da2:	9b08      	ldr	r3, [sp, #32]
    8da4:	4604      	mov	r4, r0
    8da6:	460d      	mov	r5, r1
    8da8:	b9d3      	cbnz	r3, 8de0 <_strtod_l+0xba0>
    8daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    8dae:	9012      	str	r0, [sp, #72]	; 0x48
    8db0:	9313      	str	r3, [sp, #76]	; 0x4c
    8db2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    8db6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8db8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    8dbc:	1a9f      	subs	r7, r3, r2
    8dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    8dc2:	f001 f847 	bl	9e54 <__ulp>
    8dc6:	4602      	mov	r2, r0
    8dc8:	460b      	mov	r3, r1
    8dca:	4630      	mov	r0, r6
    8dcc:	4639      	mov	r1, r7
    8dce:	f7fe f8d9 	bl	6f84 <__aeabi_dmul>
    8dd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    8dd6:	f7fd ff23 	bl	6c20 <__adddf3>
    8dda:	4682      	mov	sl, r0
    8ddc:	468b      	mov	fp, r1
    8dde:	e775      	b.n	8ccc <_strtod_l+0xa8c>
    8de0:	4602      	mov	r2, r0
    8de2:	460b      	mov	r3, r1
    8de4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    8de8:	e7e3      	b.n	8db2 <_strtod_l+0xb72>
    8dea:	a30d      	add	r3, pc, #52	; (adr r3, 8e20 <_strtod_l+0xbe0>)
    8dec:	e9d3 2300 	ldrd	r2, r3, [r3]
    8df0:	f7fe fb3a 	bl	7468 <__aeabi_dcmplt>
    8df4:	e79d      	b.n	8d32 <_strtod_l+0xaf2>
    8df6:	2300      	movs	r3, #0
    8df8:	9309      	str	r3, [sp, #36]	; 0x24
    8dfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8dfe:	6013      	str	r3, [r2, #0]
    8e00:	f7ff ba62 	b.w	82c8 <_strtod_l+0x88>
    8e04:	2b65      	cmp	r3, #101	; 0x65
    8e06:	f04f 0200 	mov.w	r2, #0
    8e0a:	f43f abb2 	beq.w	8572 <_strtod_l+0x332>
    8e0e:	4615      	mov	r5, r2
    8e10:	2101      	movs	r1, #1
    8e12:	f7ff bad1 	b.w	83b8 <_strtod_l+0x178>
    8e16:	bf00      	nop
    8e18:	ffc00000 	.word	0xffc00000
    8e1c:	41dfffff 	.word	0x41dfffff
    8e20:	94a03595 	.word	0x94a03595
    8e24:	3fcfffff 	.word	0x3fcfffff

00008e28 <strtod>:
    8e28:	4b06      	ldr	r3, [pc, #24]	; (8e44 <strtod+0x1c>)
    8e2a:	4a07      	ldr	r2, [pc, #28]	; (8e48 <strtod+0x20>)
    8e2c:	b410      	push	{r4}
    8e2e:	681c      	ldr	r4, [r3, #0]
    8e30:	6a23      	ldr	r3, [r4, #32]
    8e32:	2b00      	cmp	r3, #0
    8e34:	bf08      	it	eq
    8e36:	4613      	moveq	r3, r2
    8e38:	460a      	mov	r2, r1
    8e3a:	4601      	mov	r1, r0
    8e3c:	4620      	mov	r0, r4
    8e3e:	bc10      	pop	{r4}
    8e40:	f7ff b9fe 	b.w	8240 <_strtod_l>
    8e44:	200004b0 	.word	0x200004b0
    8e48:	20000514 	.word	0x20000514

00008e4c <_strtol_l.isra.0>:
    8e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e50:	4680      	mov	r8, r0
    8e52:	4689      	mov	r9, r1
    8e54:	4692      	mov	sl, r2
    8e56:	461f      	mov	r7, r3
    8e58:	468b      	mov	fp, r1
    8e5a:	465d      	mov	r5, fp
    8e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
    8e62:	f7fe febf 	bl	7be4 <__locale_ctype_ptr_l>
    8e66:	4420      	add	r0, r4
    8e68:	7846      	ldrb	r6, [r0, #1]
    8e6a:	f016 0608 	ands.w	r6, r6, #8
    8e6e:	d10b      	bne.n	8e88 <_strtol_l.isra.0+0x3c>
    8e70:	2c2d      	cmp	r4, #45	; 0x2d
    8e72:	d10b      	bne.n	8e8c <_strtol_l.isra.0+0x40>
    8e74:	782c      	ldrb	r4, [r5, #0]
    8e76:	2601      	movs	r6, #1
    8e78:	f10b 0502 	add.w	r5, fp, #2
    8e7c:	b167      	cbz	r7, 8e98 <_strtol_l.isra.0+0x4c>
    8e7e:	2f10      	cmp	r7, #16
    8e80:	d114      	bne.n	8eac <_strtol_l.isra.0+0x60>
    8e82:	2c30      	cmp	r4, #48	; 0x30
    8e84:	d00a      	beq.n	8e9c <_strtol_l.isra.0+0x50>
    8e86:	e011      	b.n	8eac <_strtol_l.isra.0+0x60>
    8e88:	46ab      	mov	fp, r5
    8e8a:	e7e6      	b.n	8e5a <_strtol_l.isra.0+0xe>
    8e8c:	2c2b      	cmp	r4, #43	; 0x2b
    8e8e:	bf04      	itt	eq
    8e90:	782c      	ldrbeq	r4, [r5, #0]
    8e92:	f10b 0502 	addeq.w	r5, fp, #2
    8e96:	e7f1      	b.n	8e7c <_strtol_l.isra.0+0x30>
    8e98:	2c30      	cmp	r4, #48	; 0x30
    8e9a:	d127      	bne.n	8eec <_strtol_l.isra.0+0xa0>
    8e9c:	782b      	ldrb	r3, [r5, #0]
    8e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8ea2:	2b58      	cmp	r3, #88	; 0x58
    8ea4:	d14b      	bne.n	8f3e <_strtol_l.isra.0+0xf2>
    8ea6:	786c      	ldrb	r4, [r5, #1]
    8ea8:	2710      	movs	r7, #16
    8eaa:	3502      	adds	r5, #2
    8eac:	2e00      	cmp	r6, #0
    8eae:	bf0c      	ite	eq
    8eb0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    8eb4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    8eb8:	2200      	movs	r2, #0
    8eba:	fbb1 fef7 	udiv	lr, r1, r7
    8ebe:	4610      	mov	r0, r2
    8ec0:	fb07 1c1e 	mls	ip, r7, lr, r1
    8ec4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    8ec8:	2b09      	cmp	r3, #9
    8eca:	d811      	bhi.n	8ef0 <_strtol_l.isra.0+0xa4>
    8ecc:	461c      	mov	r4, r3
    8ece:	42a7      	cmp	r7, r4
    8ed0:	dd1d      	ble.n	8f0e <_strtol_l.isra.0+0xc2>
    8ed2:	1c53      	adds	r3, r2, #1
    8ed4:	d007      	beq.n	8ee6 <_strtol_l.isra.0+0x9a>
    8ed6:	4586      	cmp	lr, r0
    8ed8:	d316      	bcc.n	8f08 <_strtol_l.isra.0+0xbc>
    8eda:	d101      	bne.n	8ee0 <_strtol_l.isra.0+0x94>
    8edc:	45a4      	cmp	ip, r4
    8ede:	db13      	blt.n	8f08 <_strtol_l.isra.0+0xbc>
    8ee0:	fb00 4007 	mla	r0, r0, r7, r4
    8ee4:	2201      	movs	r2, #1
    8ee6:	f815 4b01 	ldrb.w	r4, [r5], #1
    8eea:	e7eb      	b.n	8ec4 <_strtol_l.isra.0+0x78>
    8eec:	270a      	movs	r7, #10
    8eee:	e7dd      	b.n	8eac <_strtol_l.isra.0+0x60>
    8ef0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    8ef4:	2b19      	cmp	r3, #25
    8ef6:	d801      	bhi.n	8efc <_strtol_l.isra.0+0xb0>
    8ef8:	3c37      	subs	r4, #55	; 0x37
    8efa:	e7e8      	b.n	8ece <_strtol_l.isra.0+0x82>
    8efc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    8f00:	2b19      	cmp	r3, #25
    8f02:	d804      	bhi.n	8f0e <_strtol_l.isra.0+0xc2>
    8f04:	3c57      	subs	r4, #87	; 0x57
    8f06:	e7e2      	b.n	8ece <_strtol_l.isra.0+0x82>
    8f08:	f04f 32ff 	mov.w	r2, #4294967295
    8f0c:	e7eb      	b.n	8ee6 <_strtol_l.isra.0+0x9a>
    8f0e:	1c53      	adds	r3, r2, #1
    8f10:	d108      	bne.n	8f24 <_strtol_l.isra.0+0xd8>
    8f12:	2322      	movs	r3, #34	; 0x22
    8f14:	f8c8 3000 	str.w	r3, [r8]
    8f18:	4608      	mov	r0, r1
    8f1a:	f1ba 0f00 	cmp.w	sl, #0
    8f1e:	d107      	bne.n	8f30 <_strtol_l.isra.0+0xe4>
    8f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f24:	b106      	cbz	r6, 8f28 <_strtol_l.isra.0+0xdc>
    8f26:	4240      	negs	r0, r0
    8f28:	f1ba 0f00 	cmp.w	sl, #0
    8f2c:	d00c      	beq.n	8f48 <_strtol_l.isra.0+0xfc>
    8f2e:	b122      	cbz	r2, 8f3a <_strtol_l.isra.0+0xee>
    8f30:	3d01      	subs	r5, #1
    8f32:	f8ca 5000 	str.w	r5, [sl]
    8f36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f3a:	464d      	mov	r5, r9
    8f3c:	e7f9      	b.n	8f32 <_strtol_l.isra.0+0xe6>
    8f3e:	2430      	movs	r4, #48	; 0x30
    8f40:	2f00      	cmp	r7, #0
    8f42:	d1b3      	bne.n	8eac <_strtol_l.isra.0+0x60>
    8f44:	2708      	movs	r7, #8
    8f46:	e7b1      	b.n	8eac <_strtol_l.isra.0+0x60>
    8f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008f4c <_strtol_r>:
    8f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8f4e:	4c06      	ldr	r4, [pc, #24]	; (8f68 <_strtol_r+0x1c>)
    8f50:	4d06      	ldr	r5, [pc, #24]	; (8f6c <_strtol_r+0x20>)
    8f52:	6824      	ldr	r4, [r4, #0]
    8f54:	6a24      	ldr	r4, [r4, #32]
    8f56:	2c00      	cmp	r4, #0
    8f58:	bf08      	it	eq
    8f5a:	462c      	moveq	r4, r5
    8f5c:	9400      	str	r4, [sp, #0]
    8f5e:	f7ff ff75 	bl	8e4c <_strtol_l.isra.0>
    8f62:	b003      	add	sp, #12
    8f64:	bd30      	pop	{r4, r5, pc}
    8f66:	bf00      	nop
    8f68:	200004b0 	.word	0x200004b0
    8f6c:	20000514 	.word	0x20000514

00008f70 <strtol>:
    8f70:	4b08      	ldr	r3, [pc, #32]	; (8f94 <strtol+0x24>)
    8f72:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8f74:	681c      	ldr	r4, [r3, #0]
    8f76:	4d08      	ldr	r5, [pc, #32]	; (8f98 <strtol+0x28>)
    8f78:	6a23      	ldr	r3, [r4, #32]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	bf08      	it	eq
    8f7e:	462b      	moveq	r3, r5
    8f80:	9300      	str	r3, [sp, #0]
    8f82:	4613      	mov	r3, r2
    8f84:	460a      	mov	r2, r1
    8f86:	4601      	mov	r1, r0
    8f88:	4620      	mov	r0, r4
    8f8a:	f7ff ff5f 	bl	8e4c <_strtol_l.isra.0>
    8f8e:	b003      	add	sp, #12
    8f90:	bd30      	pop	{r4, r5, pc}
    8f92:	bf00      	nop
    8f94:	200004b0 	.word	0x200004b0
    8f98:	20000514 	.word	0x20000514

00008f9c <__swbuf_r>:
    8f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f9e:	460e      	mov	r6, r1
    8fa0:	4614      	mov	r4, r2
    8fa2:	4605      	mov	r5, r0
    8fa4:	b118      	cbz	r0, 8fae <__swbuf_r+0x12>
    8fa6:	6983      	ldr	r3, [r0, #24]
    8fa8:	b90b      	cbnz	r3, 8fae <__swbuf_r+0x12>
    8faa:	f7fe fd51 	bl	7a50 <__sinit>
    8fae:	4b21      	ldr	r3, [pc, #132]	; (9034 <__swbuf_r+0x98>)
    8fb0:	429c      	cmp	r4, r3
    8fb2:	d12a      	bne.n	900a <__swbuf_r+0x6e>
    8fb4:	686c      	ldr	r4, [r5, #4]
    8fb6:	69a3      	ldr	r3, [r4, #24]
    8fb8:	60a3      	str	r3, [r4, #8]
    8fba:	89a3      	ldrh	r3, [r4, #12]
    8fbc:	071a      	lsls	r2, r3, #28
    8fbe:	d52e      	bpl.n	901e <__swbuf_r+0x82>
    8fc0:	6923      	ldr	r3, [r4, #16]
    8fc2:	b363      	cbz	r3, 901e <__swbuf_r+0x82>
    8fc4:	6923      	ldr	r3, [r4, #16]
    8fc6:	6820      	ldr	r0, [r4, #0]
    8fc8:	1ac0      	subs	r0, r0, r3
    8fca:	6963      	ldr	r3, [r4, #20]
    8fcc:	b2f6      	uxtb	r6, r6
    8fce:	4298      	cmp	r0, r3
    8fd0:	4637      	mov	r7, r6
    8fd2:	db04      	blt.n	8fde <__swbuf_r+0x42>
    8fd4:	4621      	mov	r1, r4
    8fd6:	4628      	mov	r0, r5
    8fd8:	f7fe fcbe 	bl	7958 <_fflush_r>
    8fdc:	bb28      	cbnz	r0, 902a <__swbuf_r+0x8e>
    8fde:	68a3      	ldr	r3, [r4, #8]
    8fe0:	3b01      	subs	r3, #1
    8fe2:	60a3      	str	r3, [r4, #8]
    8fe4:	6823      	ldr	r3, [r4, #0]
    8fe6:	1c5a      	adds	r2, r3, #1
    8fe8:	6022      	str	r2, [r4, #0]
    8fea:	701e      	strb	r6, [r3, #0]
    8fec:	6963      	ldr	r3, [r4, #20]
    8fee:	3001      	adds	r0, #1
    8ff0:	4298      	cmp	r0, r3
    8ff2:	d004      	beq.n	8ffe <__swbuf_r+0x62>
    8ff4:	89a3      	ldrh	r3, [r4, #12]
    8ff6:	07db      	lsls	r3, r3, #31
    8ff8:	d519      	bpl.n	902e <__swbuf_r+0x92>
    8ffa:	2e0a      	cmp	r6, #10
    8ffc:	d117      	bne.n	902e <__swbuf_r+0x92>
    8ffe:	4621      	mov	r1, r4
    9000:	4628      	mov	r0, r5
    9002:	f7fe fca9 	bl	7958 <_fflush_r>
    9006:	b190      	cbz	r0, 902e <__swbuf_r+0x92>
    9008:	e00f      	b.n	902a <__swbuf_r+0x8e>
    900a:	4b0b      	ldr	r3, [pc, #44]	; (9038 <__swbuf_r+0x9c>)
    900c:	429c      	cmp	r4, r3
    900e:	d101      	bne.n	9014 <__swbuf_r+0x78>
    9010:	68ac      	ldr	r4, [r5, #8]
    9012:	e7d0      	b.n	8fb6 <__swbuf_r+0x1a>
    9014:	4b09      	ldr	r3, [pc, #36]	; (903c <__swbuf_r+0xa0>)
    9016:	429c      	cmp	r4, r3
    9018:	bf08      	it	eq
    901a:	68ec      	ldreq	r4, [r5, #12]
    901c:	e7cb      	b.n	8fb6 <__swbuf_r+0x1a>
    901e:	4621      	mov	r1, r4
    9020:	4628      	mov	r0, r5
    9022:	f000 f82d 	bl	9080 <__swsetup_r>
    9026:	2800      	cmp	r0, #0
    9028:	d0cc      	beq.n	8fc4 <__swbuf_r+0x28>
    902a:	f04f 37ff 	mov.w	r7, #4294967295
    902e:	4638      	mov	r0, r7
    9030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9032:	bf00      	nop
    9034:	0000cb84 	.word	0x0000cb84
    9038:	0000cba4 	.word	0x0000cba4
    903c:	0000cb64 	.word	0x0000cb64

00009040 <__ascii_wctomb>:
    9040:	b149      	cbz	r1, 9056 <__ascii_wctomb+0x16>
    9042:	2aff      	cmp	r2, #255	; 0xff
    9044:	bf85      	ittet	hi
    9046:	238a      	movhi	r3, #138	; 0x8a
    9048:	6003      	strhi	r3, [r0, #0]
    904a:	700a      	strbls	r2, [r1, #0]
    904c:	f04f 30ff 	movhi.w	r0, #4294967295
    9050:	bf98      	it	ls
    9052:	2001      	movls	r0, #1
    9054:	4770      	bx	lr
    9056:	4608      	mov	r0, r1
    9058:	4770      	bx	lr
	...

0000905c <_write_r>:
    905c:	b538      	push	{r3, r4, r5, lr}
    905e:	4c07      	ldr	r4, [pc, #28]	; (907c <_write_r+0x20>)
    9060:	4605      	mov	r5, r0
    9062:	4608      	mov	r0, r1
    9064:	4611      	mov	r1, r2
    9066:	2200      	movs	r2, #0
    9068:	6022      	str	r2, [r4, #0]
    906a:	461a      	mov	r2, r3
    906c:	f7fd fc6a 	bl	6944 <_write>
    9070:	1c43      	adds	r3, r0, #1
    9072:	d102      	bne.n	907a <_write_r+0x1e>
    9074:	6823      	ldr	r3, [r4, #0]
    9076:	b103      	cbz	r3, 907a <_write_r+0x1e>
    9078:	602b      	str	r3, [r5, #0]
    907a:	bd38      	pop	{r3, r4, r5, pc}
    907c:	2000173c 	.word	0x2000173c

00009080 <__swsetup_r>:
    9080:	4b32      	ldr	r3, [pc, #200]	; (914c <__swsetup_r+0xcc>)
    9082:	b570      	push	{r4, r5, r6, lr}
    9084:	681d      	ldr	r5, [r3, #0]
    9086:	4606      	mov	r6, r0
    9088:	460c      	mov	r4, r1
    908a:	b125      	cbz	r5, 9096 <__swsetup_r+0x16>
    908c:	69ab      	ldr	r3, [r5, #24]
    908e:	b913      	cbnz	r3, 9096 <__swsetup_r+0x16>
    9090:	4628      	mov	r0, r5
    9092:	f7fe fcdd 	bl	7a50 <__sinit>
    9096:	4b2e      	ldr	r3, [pc, #184]	; (9150 <__swsetup_r+0xd0>)
    9098:	429c      	cmp	r4, r3
    909a:	d10f      	bne.n	90bc <__swsetup_r+0x3c>
    909c:	686c      	ldr	r4, [r5, #4]
    909e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    90a2:	b29a      	uxth	r2, r3
    90a4:	0715      	lsls	r5, r2, #28
    90a6:	d42c      	bmi.n	9102 <__swsetup_r+0x82>
    90a8:	06d0      	lsls	r0, r2, #27
    90aa:	d411      	bmi.n	90d0 <__swsetup_r+0x50>
    90ac:	2209      	movs	r2, #9
    90ae:	6032      	str	r2, [r6, #0]
    90b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    90b4:	81a3      	strh	r3, [r4, #12]
    90b6:	f04f 30ff 	mov.w	r0, #4294967295
    90ba:	bd70      	pop	{r4, r5, r6, pc}
    90bc:	4b25      	ldr	r3, [pc, #148]	; (9154 <__swsetup_r+0xd4>)
    90be:	429c      	cmp	r4, r3
    90c0:	d101      	bne.n	90c6 <__swsetup_r+0x46>
    90c2:	68ac      	ldr	r4, [r5, #8]
    90c4:	e7eb      	b.n	909e <__swsetup_r+0x1e>
    90c6:	4b24      	ldr	r3, [pc, #144]	; (9158 <__swsetup_r+0xd8>)
    90c8:	429c      	cmp	r4, r3
    90ca:	bf08      	it	eq
    90cc:	68ec      	ldreq	r4, [r5, #12]
    90ce:	e7e6      	b.n	909e <__swsetup_r+0x1e>
    90d0:	0751      	lsls	r1, r2, #29
    90d2:	d512      	bpl.n	90fa <__swsetup_r+0x7a>
    90d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    90d6:	b141      	cbz	r1, 90ea <__swsetup_r+0x6a>
    90d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    90dc:	4299      	cmp	r1, r3
    90de:	d002      	beq.n	90e6 <__swsetup_r+0x66>
    90e0:	4630      	mov	r0, r6
    90e2:	f7fe fdab 	bl	7c3c <_free_r>
    90e6:	2300      	movs	r3, #0
    90e8:	6363      	str	r3, [r4, #52]	; 0x34
    90ea:	89a3      	ldrh	r3, [r4, #12]
    90ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    90f0:	81a3      	strh	r3, [r4, #12]
    90f2:	2300      	movs	r3, #0
    90f4:	6063      	str	r3, [r4, #4]
    90f6:	6923      	ldr	r3, [r4, #16]
    90f8:	6023      	str	r3, [r4, #0]
    90fa:	89a3      	ldrh	r3, [r4, #12]
    90fc:	f043 0308 	orr.w	r3, r3, #8
    9100:	81a3      	strh	r3, [r4, #12]
    9102:	6923      	ldr	r3, [r4, #16]
    9104:	b94b      	cbnz	r3, 911a <__swsetup_r+0x9a>
    9106:	89a3      	ldrh	r3, [r4, #12]
    9108:	f403 7320 	and.w	r3, r3, #640	; 0x280
    910c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9110:	d003      	beq.n	911a <__swsetup_r+0x9a>
    9112:	4621      	mov	r1, r4
    9114:	4630      	mov	r0, r6
    9116:	f000 fb87 	bl	9828 <__smakebuf_r>
    911a:	89a2      	ldrh	r2, [r4, #12]
    911c:	f012 0301 	ands.w	r3, r2, #1
    9120:	d00c      	beq.n	913c <__swsetup_r+0xbc>
    9122:	2300      	movs	r3, #0
    9124:	60a3      	str	r3, [r4, #8]
    9126:	6963      	ldr	r3, [r4, #20]
    9128:	425b      	negs	r3, r3
    912a:	61a3      	str	r3, [r4, #24]
    912c:	6923      	ldr	r3, [r4, #16]
    912e:	b953      	cbnz	r3, 9146 <__swsetup_r+0xc6>
    9130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9134:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    9138:	d1ba      	bne.n	90b0 <__swsetup_r+0x30>
    913a:	bd70      	pop	{r4, r5, r6, pc}
    913c:	0792      	lsls	r2, r2, #30
    913e:	bf58      	it	pl
    9140:	6963      	ldrpl	r3, [r4, #20]
    9142:	60a3      	str	r3, [r4, #8]
    9144:	e7f2      	b.n	912c <__swsetup_r+0xac>
    9146:	2000      	movs	r0, #0
    9148:	e7f7      	b.n	913a <__swsetup_r+0xba>
    914a:	bf00      	nop
    914c:	200004b0 	.word	0x200004b0
    9150:	0000cb84 	.word	0x0000cb84
    9154:	0000cba4 	.word	0x0000cba4
    9158:	0000cb64 	.word	0x0000cb64

0000915c <_close_r>:
    915c:	b538      	push	{r3, r4, r5, lr}
    915e:	4c06      	ldr	r4, [pc, #24]	; (9178 <_close_r+0x1c>)
    9160:	2300      	movs	r3, #0
    9162:	4605      	mov	r5, r0
    9164:	4608      	mov	r0, r1
    9166:	6023      	str	r3, [r4, #0]
    9168:	f7f9 fde2 	bl	2d30 <_close>
    916c:	1c43      	adds	r3, r0, #1
    916e:	d102      	bne.n	9176 <_close_r+0x1a>
    9170:	6823      	ldr	r3, [r4, #0]
    9172:	b103      	cbz	r3, 9176 <_close_r+0x1a>
    9174:	602b      	str	r3, [r5, #0]
    9176:	bd38      	pop	{r3, r4, r5, pc}
    9178:	2000173c 	.word	0x2000173c

0000917c <rshift>:
    917c:	b5f0      	push	{r4, r5, r6, r7, lr}
    917e:	6906      	ldr	r6, [r0, #16]
    9180:	114b      	asrs	r3, r1, #5
    9182:	42b3      	cmp	r3, r6
    9184:	f100 0514 	add.w	r5, r0, #20
    9188:	da2b      	bge.n	91e2 <rshift+0x66>
    918a:	f011 011f 	ands.w	r1, r1, #31
    918e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    9192:	eb05 0283 	add.w	r2, r5, r3, lsl #2
    9196:	d108      	bne.n	91aa <rshift+0x2e>
    9198:	4629      	mov	r1, r5
    919a:	42b2      	cmp	r2, r6
    919c:	460b      	mov	r3, r1
    919e:	d210      	bcs.n	91c2 <rshift+0x46>
    91a0:	f852 3b04 	ldr.w	r3, [r2], #4
    91a4:	f841 3b04 	str.w	r3, [r1], #4
    91a8:	e7f7      	b.n	919a <rshift+0x1e>
    91aa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    91ae:	f1c1 0e20 	rsb	lr, r1, #32
    91b2:	3204      	adds	r2, #4
    91b4:	40cc      	lsrs	r4, r1
    91b6:	462b      	mov	r3, r5
    91b8:	42b2      	cmp	r2, r6
    91ba:	d308      	bcc.n	91ce <rshift+0x52>
    91bc:	601c      	str	r4, [r3, #0]
    91be:	b104      	cbz	r4, 91c2 <rshift+0x46>
    91c0:	3304      	adds	r3, #4
    91c2:	1b5b      	subs	r3, r3, r5
    91c4:	109b      	asrs	r3, r3, #2
    91c6:	6103      	str	r3, [r0, #16]
    91c8:	b903      	cbnz	r3, 91cc <rshift+0x50>
    91ca:	6143      	str	r3, [r0, #20]
    91cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91ce:	6817      	ldr	r7, [r2, #0]
    91d0:	fa07 f70e 	lsl.w	r7, r7, lr
    91d4:	433c      	orrs	r4, r7
    91d6:	f843 4b04 	str.w	r4, [r3], #4
    91da:	f852 4b04 	ldr.w	r4, [r2], #4
    91de:	40cc      	lsrs	r4, r1
    91e0:	e7ea      	b.n	91b8 <rshift+0x3c>
    91e2:	462b      	mov	r3, r5
    91e4:	e7ed      	b.n	91c2 <rshift+0x46>

000091e6 <__hexdig_fun>:
    91e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    91ea:	2b09      	cmp	r3, #9
    91ec:	d802      	bhi.n	91f4 <__hexdig_fun+0xe>
    91ee:	3820      	subs	r0, #32
    91f0:	b2c0      	uxtb	r0, r0
    91f2:	4770      	bx	lr
    91f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    91f8:	2b05      	cmp	r3, #5
    91fa:	d801      	bhi.n	9200 <__hexdig_fun+0x1a>
    91fc:	3847      	subs	r0, #71	; 0x47
    91fe:	e7f7      	b.n	91f0 <__hexdig_fun+0xa>
    9200:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    9204:	2b05      	cmp	r3, #5
    9206:	d801      	bhi.n	920c <__hexdig_fun+0x26>
    9208:	3827      	subs	r0, #39	; 0x27
    920a:	e7f1      	b.n	91f0 <__hexdig_fun+0xa>
    920c:	2000      	movs	r0, #0
    920e:	4770      	bx	lr

00009210 <__gethex>:
    9210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9214:	b08b      	sub	sp, #44	; 0x2c
    9216:	468a      	mov	sl, r1
    9218:	9002      	str	r0, [sp, #8]
    921a:	9816      	ldr	r0, [sp, #88]	; 0x58
    921c:	9306      	str	r3, [sp, #24]
    921e:	4690      	mov	r8, r2
    9220:	f000 fac9 	bl	97b6 <__localeconv_l>
    9224:	6803      	ldr	r3, [r0, #0]
    9226:	9303      	str	r3, [sp, #12]
    9228:	4618      	mov	r0, r3
    922a:	f7fe ffc9 	bl	81c0 <strlen>
    922e:	9b03      	ldr	r3, [sp, #12]
    9230:	9001      	str	r0, [sp, #4]
    9232:	4403      	add	r3, r0
    9234:	f04f 0b00 	mov.w	fp, #0
    9238:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    923c:	9307      	str	r3, [sp, #28]
    923e:	f8da 3000 	ldr.w	r3, [sl]
    9242:	3302      	adds	r3, #2
    9244:	461f      	mov	r7, r3
    9246:	f813 0b01 	ldrb.w	r0, [r3], #1
    924a:	2830      	cmp	r0, #48	; 0x30
    924c:	d06c      	beq.n	9328 <__gethex+0x118>
    924e:	f7ff ffca 	bl	91e6 <__hexdig_fun>
    9252:	4604      	mov	r4, r0
    9254:	2800      	cmp	r0, #0
    9256:	d16a      	bne.n	932e <__gethex+0x11e>
    9258:	9a01      	ldr	r2, [sp, #4]
    925a:	9903      	ldr	r1, [sp, #12]
    925c:	4638      	mov	r0, r7
    925e:	f001 fefd 	bl	b05c <strncmp>
    9262:	2800      	cmp	r0, #0
    9264:	d166      	bne.n	9334 <__gethex+0x124>
    9266:	9b01      	ldr	r3, [sp, #4]
    9268:	5cf8      	ldrb	r0, [r7, r3]
    926a:	18fe      	adds	r6, r7, r3
    926c:	f7ff ffbb 	bl	91e6 <__hexdig_fun>
    9270:	2800      	cmp	r0, #0
    9272:	d062      	beq.n	933a <__gethex+0x12a>
    9274:	4633      	mov	r3, r6
    9276:	7818      	ldrb	r0, [r3, #0]
    9278:	2830      	cmp	r0, #48	; 0x30
    927a:	461f      	mov	r7, r3
    927c:	f103 0301 	add.w	r3, r3, #1
    9280:	d0f9      	beq.n	9276 <__gethex+0x66>
    9282:	f7ff ffb0 	bl	91e6 <__hexdig_fun>
    9286:	fab0 f580 	clz	r5, r0
    928a:	096d      	lsrs	r5, r5, #5
    928c:	4634      	mov	r4, r6
    928e:	f04f 0b01 	mov.w	fp, #1
    9292:	463a      	mov	r2, r7
    9294:	4616      	mov	r6, r2
    9296:	3201      	adds	r2, #1
    9298:	7830      	ldrb	r0, [r6, #0]
    929a:	f7ff ffa4 	bl	91e6 <__hexdig_fun>
    929e:	2800      	cmp	r0, #0
    92a0:	d1f8      	bne.n	9294 <__gethex+0x84>
    92a2:	9a01      	ldr	r2, [sp, #4]
    92a4:	9903      	ldr	r1, [sp, #12]
    92a6:	4630      	mov	r0, r6
    92a8:	f001 fed8 	bl	b05c <strncmp>
    92ac:	b950      	cbnz	r0, 92c4 <__gethex+0xb4>
    92ae:	b954      	cbnz	r4, 92c6 <__gethex+0xb6>
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	18f4      	adds	r4, r6, r3
    92b4:	4622      	mov	r2, r4
    92b6:	4616      	mov	r6, r2
    92b8:	3201      	adds	r2, #1
    92ba:	7830      	ldrb	r0, [r6, #0]
    92bc:	f7ff ff93 	bl	91e6 <__hexdig_fun>
    92c0:	2800      	cmp	r0, #0
    92c2:	d1f8      	bne.n	92b6 <__gethex+0xa6>
    92c4:	b10c      	cbz	r4, 92ca <__gethex+0xba>
    92c6:	1ba4      	subs	r4, r4, r6
    92c8:	00a4      	lsls	r4, r4, #2
    92ca:	7833      	ldrb	r3, [r6, #0]
    92cc:	2b50      	cmp	r3, #80	; 0x50
    92ce:	d001      	beq.n	92d4 <__gethex+0xc4>
    92d0:	2b70      	cmp	r3, #112	; 0x70
    92d2:	d140      	bne.n	9356 <__gethex+0x146>
    92d4:	7873      	ldrb	r3, [r6, #1]
    92d6:	2b2b      	cmp	r3, #43	; 0x2b
    92d8:	d035      	beq.n	9346 <__gethex+0x136>
    92da:	2b2d      	cmp	r3, #45	; 0x2d
    92dc:	d02f      	beq.n	933e <__gethex+0x12e>
    92de:	1c71      	adds	r1, r6, #1
    92e0:	f04f 0900 	mov.w	r9, #0
    92e4:	7808      	ldrb	r0, [r1, #0]
    92e6:	f7ff ff7e 	bl	91e6 <__hexdig_fun>
    92ea:	1e43      	subs	r3, r0, #1
    92ec:	b2db      	uxtb	r3, r3
    92ee:	2b18      	cmp	r3, #24
    92f0:	d831      	bhi.n	9356 <__gethex+0x146>
    92f2:	f1a0 0210 	sub.w	r2, r0, #16
    92f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    92fa:	f7ff ff74 	bl	91e6 <__hexdig_fun>
    92fe:	1e43      	subs	r3, r0, #1
    9300:	b2db      	uxtb	r3, r3
    9302:	2b18      	cmp	r3, #24
    9304:	d922      	bls.n	934c <__gethex+0x13c>
    9306:	f1b9 0f00 	cmp.w	r9, #0
    930a:	d000      	beq.n	930e <__gethex+0xfe>
    930c:	4252      	negs	r2, r2
    930e:	4414      	add	r4, r2
    9310:	f8ca 1000 	str.w	r1, [sl]
    9314:	b30d      	cbz	r5, 935a <__gethex+0x14a>
    9316:	f1bb 0f00 	cmp.w	fp, #0
    931a:	bf14      	ite	ne
    931c:	2700      	movne	r7, #0
    931e:	2706      	moveq	r7, #6
    9320:	4638      	mov	r0, r7
    9322:	b00b      	add	sp, #44	; 0x2c
    9324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9328:	f10b 0b01 	add.w	fp, fp, #1
    932c:	e78a      	b.n	9244 <__gethex+0x34>
    932e:	2500      	movs	r5, #0
    9330:	462c      	mov	r4, r5
    9332:	e7ae      	b.n	9292 <__gethex+0x82>
    9334:	463e      	mov	r6, r7
    9336:	2501      	movs	r5, #1
    9338:	e7c7      	b.n	92ca <__gethex+0xba>
    933a:	4604      	mov	r4, r0
    933c:	e7fb      	b.n	9336 <__gethex+0x126>
    933e:	f04f 0901 	mov.w	r9, #1
    9342:	1cb1      	adds	r1, r6, #2
    9344:	e7ce      	b.n	92e4 <__gethex+0xd4>
    9346:	f04f 0900 	mov.w	r9, #0
    934a:	e7fa      	b.n	9342 <__gethex+0x132>
    934c:	230a      	movs	r3, #10
    934e:	fb03 0202 	mla	r2, r3, r2, r0
    9352:	3a10      	subs	r2, #16
    9354:	e7cf      	b.n	92f6 <__gethex+0xe6>
    9356:	4631      	mov	r1, r6
    9358:	e7da      	b.n	9310 <__gethex+0x100>
    935a:	1bf3      	subs	r3, r6, r7
    935c:	3b01      	subs	r3, #1
    935e:	4629      	mov	r1, r5
    9360:	2b07      	cmp	r3, #7
    9362:	dc49      	bgt.n	93f8 <__gethex+0x1e8>
    9364:	9802      	ldr	r0, [sp, #8]
    9366:	f000 fab4 	bl	98d2 <_Balloc>
    936a:	9b01      	ldr	r3, [sp, #4]
    936c:	f100 0914 	add.w	r9, r0, #20
    9370:	f04f 0b00 	mov.w	fp, #0
    9374:	f1c3 0301 	rsb	r3, r3, #1
    9378:	4605      	mov	r5, r0
    937a:	f8cd 9010 	str.w	r9, [sp, #16]
    937e:	46da      	mov	sl, fp
    9380:	9308      	str	r3, [sp, #32]
    9382:	42b7      	cmp	r7, r6
    9384:	d33b      	bcc.n	93fe <__gethex+0x1ee>
    9386:	9804      	ldr	r0, [sp, #16]
    9388:	f840 ab04 	str.w	sl, [r0], #4
    938c:	eba0 0009 	sub.w	r0, r0, r9
    9390:	1080      	asrs	r0, r0, #2
    9392:	6128      	str	r0, [r5, #16]
    9394:	0147      	lsls	r7, r0, #5
    9396:	4650      	mov	r0, sl
    9398:	f000 fb5f 	bl	9a5a <__hi0bits>
    939c:	f8d8 6000 	ldr.w	r6, [r8]
    93a0:	1a3f      	subs	r7, r7, r0
    93a2:	42b7      	cmp	r7, r6
    93a4:	dd64      	ble.n	9470 <__gethex+0x260>
    93a6:	1bbf      	subs	r7, r7, r6
    93a8:	4639      	mov	r1, r7
    93aa:	4628      	mov	r0, r5
    93ac:	f000 fe59 	bl	a062 <__any_on>
    93b0:	4682      	mov	sl, r0
    93b2:	b178      	cbz	r0, 93d4 <__gethex+0x1c4>
    93b4:	1e7b      	subs	r3, r7, #1
    93b6:	1159      	asrs	r1, r3, #5
    93b8:	f003 021f 	and.w	r2, r3, #31
    93bc:	f04f 0a01 	mov.w	sl, #1
    93c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
    93c4:	fa0a f202 	lsl.w	r2, sl, r2
    93c8:	420a      	tst	r2, r1
    93ca:	d003      	beq.n	93d4 <__gethex+0x1c4>
    93cc:	4553      	cmp	r3, sl
    93ce:	dc46      	bgt.n	945e <__gethex+0x24e>
    93d0:	f04f 0a02 	mov.w	sl, #2
    93d4:	4639      	mov	r1, r7
    93d6:	4628      	mov	r0, r5
    93d8:	f7ff fed0 	bl	917c <rshift>
    93dc:	443c      	add	r4, r7
    93de:	f8d8 3008 	ldr.w	r3, [r8, #8]
    93e2:	429c      	cmp	r4, r3
    93e4:	dd52      	ble.n	948c <__gethex+0x27c>
    93e6:	4629      	mov	r1, r5
    93e8:	9802      	ldr	r0, [sp, #8]
    93ea:	f000 faa6 	bl	993a <_Bfree>
    93ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
    93f0:	2300      	movs	r3, #0
    93f2:	6013      	str	r3, [r2, #0]
    93f4:	27a3      	movs	r7, #163	; 0xa3
    93f6:	e793      	b.n	9320 <__gethex+0x110>
    93f8:	3101      	adds	r1, #1
    93fa:	105b      	asrs	r3, r3, #1
    93fc:	e7b0      	b.n	9360 <__gethex+0x150>
    93fe:	1e73      	subs	r3, r6, #1
    9400:	9305      	str	r3, [sp, #20]
    9402:	9a07      	ldr	r2, [sp, #28]
    9404:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    9408:	4293      	cmp	r3, r2
    940a:	d018      	beq.n	943e <__gethex+0x22e>
    940c:	f1bb 0f20 	cmp.w	fp, #32
    9410:	d107      	bne.n	9422 <__gethex+0x212>
    9412:	9b04      	ldr	r3, [sp, #16]
    9414:	f8c3 a000 	str.w	sl, [r3]
    9418:	3304      	adds	r3, #4
    941a:	f04f 0a00 	mov.w	sl, #0
    941e:	9304      	str	r3, [sp, #16]
    9420:	46d3      	mov	fp, sl
    9422:	f816 0c01 	ldrb.w	r0, [r6, #-1]
    9426:	f7ff fede 	bl	91e6 <__hexdig_fun>
    942a:	f000 000f 	and.w	r0, r0, #15
    942e:	fa00 f00b 	lsl.w	r0, r0, fp
    9432:	ea4a 0a00 	orr.w	sl, sl, r0
    9436:	f10b 0b04 	add.w	fp, fp, #4
    943a:	9b05      	ldr	r3, [sp, #20]
    943c:	e00d      	b.n	945a <__gethex+0x24a>
    943e:	9b05      	ldr	r3, [sp, #20]
    9440:	9a08      	ldr	r2, [sp, #32]
    9442:	4413      	add	r3, r2
    9444:	429f      	cmp	r7, r3
    9446:	d8e1      	bhi.n	940c <__gethex+0x1fc>
    9448:	4618      	mov	r0, r3
    944a:	9a01      	ldr	r2, [sp, #4]
    944c:	9903      	ldr	r1, [sp, #12]
    944e:	9309      	str	r3, [sp, #36]	; 0x24
    9450:	f001 fe04 	bl	b05c <strncmp>
    9454:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9456:	2800      	cmp	r0, #0
    9458:	d1d8      	bne.n	940c <__gethex+0x1fc>
    945a:	461e      	mov	r6, r3
    945c:	e791      	b.n	9382 <__gethex+0x172>
    945e:	1eb9      	subs	r1, r7, #2
    9460:	4628      	mov	r0, r5
    9462:	f000 fdfe 	bl	a062 <__any_on>
    9466:	2800      	cmp	r0, #0
    9468:	d0b2      	beq.n	93d0 <__gethex+0x1c0>
    946a:	f04f 0a03 	mov.w	sl, #3
    946e:	e7b1      	b.n	93d4 <__gethex+0x1c4>
    9470:	da09      	bge.n	9486 <__gethex+0x276>
    9472:	1bf7      	subs	r7, r6, r7
    9474:	4629      	mov	r1, r5
    9476:	463a      	mov	r2, r7
    9478:	9802      	ldr	r0, [sp, #8]
    947a:	f000 fc21 	bl	9cc0 <__lshift>
    947e:	1be4      	subs	r4, r4, r7
    9480:	4605      	mov	r5, r0
    9482:	f100 0914 	add.w	r9, r0, #20
    9486:	f04f 0a00 	mov.w	sl, #0
    948a:	e7a8      	b.n	93de <__gethex+0x1ce>
    948c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9490:	4284      	cmp	r4, r0
    9492:	da6a      	bge.n	956a <__gethex+0x35a>
    9494:	1b04      	subs	r4, r0, r4
    9496:	42a6      	cmp	r6, r4
    9498:	dc2e      	bgt.n	94f8 <__gethex+0x2e8>
    949a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    949e:	2b02      	cmp	r3, #2
    94a0:	d022      	beq.n	94e8 <__gethex+0x2d8>
    94a2:	2b03      	cmp	r3, #3
    94a4:	d024      	beq.n	94f0 <__gethex+0x2e0>
    94a6:	2b01      	cmp	r3, #1
    94a8:	d115      	bne.n	94d6 <__gethex+0x2c6>
    94aa:	42a6      	cmp	r6, r4
    94ac:	d113      	bne.n	94d6 <__gethex+0x2c6>
    94ae:	2e01      	cmp	r6, #1
    94b0:	dc0b      	bgt.n	94ca <__gethex+0x2ba>
    94b2:	9a06      	ldr	r2, [sp, #24]
    94b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    94b8:	6013      	str	r3, [r2, #0]
    94ba:	2301      	movs	r3, #1
    94bc:	612b      	str	r3, [r5, #16]
    94be:	f8c9 3000 	str.w	r3, [r9]
    94c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    94c4:	2762      	movs	r7, #98	; 0x62
    94c6:	601d      	str	r5, [r3, #0]
    94c8:	e72a      	b.n	9320 <__gethex+0x110>
    94ca:	1e71      	subs	r1, r6, #1
    94cc:	4628      	mov	r0, r5
    94ce:	f000 fdc8 	bl	a062 <__any_on>
    94d2:	2800      	cmp	r0, #0
    94d4:	d1ed      	bne.n	94b2 <__gethex+0x2a2>
    94d6:	4629      	mov	r1, r5
    94d8:	9802      	ldr	r0, [sp, #8]
    94da:	f000 fa2e 	bl	993a <_Bfree>
    94de:	9a14      	ldr	r2, [sp, #80]	; 0x50
    94e0:	2300      	movs	r3, #0
    94e2:	6013      	str	r3, [r2, #0]
    94e4:	2750      	movs	r7, #80	; 0x50
    94e6:	e71b      	b.n	9320 <__gethex+0x110>
    94e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    94ea:	2b00      	cmp	r3, #0
    94ec:	d0e1      	beq.n	94b2 <__gethex+0x2a2>
    94ee:	e7f2      	b.n	94d6 <__gethex+0x2c6>
    94f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    94f2:	2b00      	cmp	r3, #0
    94f4:	d1dd      	bne.n	94b2 <__gethex+0x2a2>
    94f6:	e7ee      	b.n	94d6 <__gethex+0x2c6>
    94f8:	1e67      	subs	r7, r4, #1
    94fa:	f1ba 0f00 	cmp.w	sl, #0
    94fe:	d131      	bne.n	9564 <__gethex+0x354>
    9500:	b127      	cbz	r7, 950c <__gethex+0x2fc>
    9502:	4639      	mov	r1, r7
    9504:	4628      	mov	r0, r5
    9506:	f000 fdac 	bl	a062 <__any_on>
    950a:	4682      	mov	sl, r0
    950c:	117a      	asrs	r2, r7, #5
    950e:	2301      	movs	r3, #1
    9510:	f007 071f 	and.w	r7, r7, #31
    9514:	fa03 f707 	lsl.w	r7, r3, r7
    9518:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
    951c:	4621      	mov	r1, r4
    951e:	421f      	tst	r7, r3
    9520:	4628      	mov	r0, r5
    9522:	bf18      	it	ne
    9524:	f04a 0a02 	orrne.w	sl, sl, #2
    9528:	1b36      	subs	r6, r6, r4
    952a:	f7ff fe27 	bl	917c <rshift>
    952e:	f8d8 4004 	ldr.w	r4, [r8, #4]
    9532:	2702      	movs	r7, #2
    9534:	f1ba 0f00 	cmp.w	sl, #0
    9538:	d045      	beq.n	95c6 <__gethex+0x3b6>
    953a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    953e:	2b02      	cmp	r3, #2
    9540:	d015      	beq.n	956e <__gethex+0x35e>
    9542:	2b03      	cmp	r3, #3
    9544:	d017      	beq.n	9576 <__gethex+0x366>
    9546:	2b01      	cmp	r3, #1
    9548:	d109      	bne.n	955e <__gethex+0x34e>
    954a:	f01a 0f02 	tst.w	sl, #2
    954e:	d006      	beq.n	955e <__gethex+0x34e>
    9550:	f8d9 3000 	ldr.w	r3, [r9]
    9554:	ea4a 0a03 	orr.w	sl, sl, r3
    9558:	f01a 0f01 	tst.w	sl, #1
    955c:	d10e      	bne.n	957c <__gethex+0x36c>
    955e:	f047 0710 	orr.w	r7, r7, #16
    9562:	e030      	b.n	95c6 <__gethex+0x3b6>
    9564:	f04f 0a01 	mov.w	sl, #1
    9568:	e7d0      	b.n	950c <__gethex+0x2fc>
    956a:	2701      	movs	r7, #1
    956c:	e7e2      	b.n	9534 <__gethex+0x324>
    956e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9570:	f1c3 0301 	rsb	r3, r3, #1
    9574:	9315      	str	r3, [sp, #84]	; 0x54
    9576:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9578:	2b00      	cmp	r3, #0
    957a:	d0f0      	beq.n	955e <__gethex+0x34e>
    957c:	f8d5 9010 	ldr.w	r9, [r5, #16]
    9580:	f105 0314 	add.w	r3, r5, #20
    9584:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    9588:	eb03 010a 	add.w	r1, r3, sl
    958c:	2000      	movs	r0, #0
    958e:	681a      	ldr	r2, [r3, #0]
    9590:	f1b2 3fff 	cmp.w	r2, #4294967295
    9594:	d01c      	beq.n	95d0 <__gethex+0x3c0>
    9596:	3201      	adds	r2, #1
    9598:	601a      	str	r2, [r3, #0]
    959a:	2f02      	cmp	r7, #2
    959c:	f105 0314 	add.w	r3, r5, #20
    95a0:	d138      	bne.n	9614 <__gethex+0x404>
    95a2:	f8d8 2000 	ldr.w	r2, [r8]
    95a6:	3a01      	subs	r2, #1
    95a8:	4296      	cmp	r6, r2
    95aa:	d10a      	bne.n	95c2 <__gethex+0x3b2>
    95ac:	1171      	asrs	r1, r6, #5
    95ae:	2201      	movs	r2, #1
    95b0:	f006 061f 	and.w	r6, r6, #31
    95b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    95b8:	fa02 f606 	lsl.w	r6, r2, r6
    95bc:	421e      	tst	r6, r3
    95be:	bf18      	it	ne
    95c0:	4617      	movne	r7, r2
    95c2:	f047 0720 	orr.w	r7, r7, #32
    95c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    95c8:	601d      	str	r5, [r3, #0]
    95ca:	9b06      	ldr	r3, [sp, #24]
    95cc:	601c      	str	r4, [r3, #0]
    95ce:	e6a7      	b.n	9320 <__gethex+0x110>
    95d0:	f843 0b04 	str.w	r0, [r3], #4
    95d4:	4299      	cmp	r1, r3
    95d6:	d8da      	bhi.n	958e <__gethex+0x37e>
    95d8:	68ab      	ldr	r3, [r5, #8]
    95da:	4599      	cmp	r9, r3
    95dc:	db12      	blt.n	9604 <__gethex+0x3f4>
    95de:	6869      	ldr	r1, [r5, #4]
    95e0:	9802      	ldr	r0, [sp, #8]
    95e2:	3101      	adds	r1, #1
    95e4:	f000 f975 	bl	98d2 <_Balloc>
    95e8:	692a      	ldr	r2, [r5, #16]
    95ea:	3202      	adds	r2, #2
    95ec:	f105 010c 	add.w	r1, r5, #12
    95f0:	4683      	mov	fp, r0
    95f2:	0092      	lsls	r2, r2, #2
    95f4:	300c      	adds	r0, #12
    95f6:	f000 f95f 	bl	98b8 <memcpy>
    95fa:	4629      	mov	r1, r5
    95fc:	9802      	ldr	r0, [sp, #8]
    95fe:	f000 f99c 	bl	993a <_Bfree>
    9602:	465d      	mov	r5, fp
    9604:	692b      	ldr	r3, [r5, #16]
    9606:	1c5a      	adds	r2, r3, #1
    9608:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    960c:	612a      	str	r2, [r5, #16]
    960e:	2201      	movs	r2, #1
    9610:	615a      	str	r2, [r3, #20]
    9612:	e7c2      	b.n	959a <__gethex+0x38a>
    9614:	692a      	ldr	r2, [r5, #16]
    9616:	4591      	cmp	r9, r2
    9618:	da0b      	bge.n	9632 <__gethex+0x422>
    961a:	2101      	movs	r1, #1
    961c:	4628      	mov	r0, r5
    961e:	f7ff fdad 	bl	917c <rshift>
    9622:	f8d8 3008 	ldr.w	r3, [r8, #8]
    9626:	3401      	adds	r4, #1
    9628:	429c      	cmp	r4, r3
    962a:	f73f aedc 	bgt.w	93e6 <__gethex+0x1d6>
    962e:	2701      	movs	r7, #1
    9630:	e7c7      	b.n	95c2 <__gethex+0x3b2>
    9632:	f016 061f 	ands.w	r6, r6, #31
    9636:	d0fa      	beq.n	962e <__gethex+0x41e>
    9638:	449a      	add	sl, r3
    963a:	f1c6 0620 	rsb	r6, r6, #32
    963e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
    9642:	f000 fa0a 	bl	9a5a <__hi0bits>
    9646:	42b0      	cmp	r0, r6
    9648:	dbe7      	blt.n	961a <__gethex+0x40a>
    964a:	e7f0      	b.n	962e <__gethex+0x41e>

0000964c <L_shift>:
    964c:	f1c2 0208 	rsb	r2, r2, #8
    9650:	0092      	lsls	r2, r2, #2
    9652:	b570      	push	{r4, r5, r6, lr}
    9654:	f1c2 0620 	rsb	r6, r2, #32
    9658:	6843      	ldr	r3, [r0, #4]
    965a:	6804      	ldr	r4, [r0, #0]
    965c:	fa03 f506 	lsl.w	r5, r3, r6
    9660:	432c      	orrs	r4, r5
    9662:	40d3      	lsrs	r3, r2
    9664:	6004      	str	r4, [r0, #0]
    9666:	f840 3f04 	str.w	r3, [r0, #4]!
    966a:	4288      	cmp	r0, r1
    966c:	d3f4      	bcc.n	9658 <L_shift+0xc>
    966e:	bd70      	pop	{r4, r5, r6, pc}

00009670 <__match>:
    9670:	b530      	push	{r4, r5, lr}
    9672:	6803      	ldr	r3, [r0, #0]
    9674:	f811 4b01 	ldrb.w	r4, [r1], #1
    9678:	3301      	adds	r3, #1
    967a:	b914      	cbnz	r4, 9682 <__match+0x12>
    967c:	6003      	str	r3, [r0, #0]
    967e:	2001      	movs	r0, #1
    9680:	bd30      	pop	{r4, r5, pc}
    9682:	781a      	ldrb	r2, [r3, #0]
    9684:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
    9688:	2d19      	cmp	r5, #25
    968a:	bf98      	it	ls
    968c:	3220      	addls	r2, #32
    968e:	42a2      	cmp	r2, r4
    9690:	d0f0      	beq.n	9674 <__match+0x4>
    9692:	2000      	movs	r0, #0
    9694:	bd30      	pop	{r4, r5, pc}

00009696 <__hexnan>:
    9696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    969a:	680b      	ldr	r3, [r1, #0]
    969c:	6801      	ldr	r1, [r0, #0]
    969e:	115f      	asrs	r7, r3, #5
    96a0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    96a4:	f013 031f 	ands.w	r3, r3, #31
    96a8:	b087      	sub	sp, #28
    96aa:	bf18      	it	ne
    96ac:	3704      	addne	r7, #4
    96ae:	2500      	movs	r5, #0
    96b0:	1f3e      	subs	r6, r7, #4
    96b2:	4682      	mov	sl, r0
    96b4:	4690      	mov	r8, r2
    96b6:	9302      	str	r3, [sp, #8]
    96b8:	f847 5c04 	str.w	r5, [r7, #-4]
    96bc:	46b1      	mov	r9, r6
    96be:	4634      	mov	r4, r6
    96c0:	9501      	str	r5, [sp, #4]
    96c2:	46ab      	mov	fp, r5
    96c4:	784a      	ldrb	r2, [r1, #1]
    96c6:	1c4b      	adds	r3, r1, #1
    96c8:	9303      	str	r3, [sp, #12]
    96ca:	b342      	cbz	r2, 971e <__hexnan+0x88>
    96cc:	4610      	mov	r0, r2
    96ce:	9105      	str	r1, [sp, #20]
    96d0:	9204      	str	r2, [sp, #16]
    96d2:	f7ff fd88 	bl	91e6 <__hexdig_fun>
    96d6:	2800      	cmp	r0, #0
    96d8:	d143      	bne.n	9762 <__hexnan+0xcc>
    96da:	9a04      	ldr	r2, [sp, #16]
    96dc:	9905      	ldr	r1, [sp, #20]
    96de:	2a20      	cmp	r2, #32
    96e0:	d818      	bhi.n	9714 <__hexnan+0x7e>
    96e2:	9b01      	ldr	r3, [sp, #4]
    96e4:	459b      	cmp	fp, r3
    96e6:	dd13      	ble.n	9710 <__hexnan+0x7a>
    96e8:	454c      	cmp	r4, r9
    96ea:	d206      	bcs.n	96fa <__hexnan+0x64>
    96ec:	2d07      	cmp	r5, #7
    96ee:	dc04      	bgt.n	96fa <__hexnan+0x64>
    96f0:	462a      	mov	r2, r5
    96f2:	4649      	mov	r1, r9
    96f4:	4620      	mov	r0, r4
    96f6:	f7ff ffa9 	bl	964c <L_shift>
    96fa:	4544      	cmp	r4, r8
    96fc:	d944      	bls.n	9788 <__hexnan+0xf2>
    96fe:	2300      	movs	r3, #0
    9700:	f1a4 0904 	sub.w	r9, r4, #4
    9704:	f844 3c04 	str.w	r3, [r4, #-4]
    9708:	f8cd b004 	str.w	fp, [sp, #4]
    970c:	464c      	mov	r4, r9
    970e:	461d      	mov	r5, r3
    9710:	9903      	ldr	r1, [sp, #12]
    9712:	e7d7      	b.n	96c4 <__hexnan+0x2e>
    9714:	2a29      	cmp	r2, #41	; 0x29
    9716:	d14a      	bne.n	97ae <__hexnan+0x118>
    9718:	3102      	adds	r1, #2
    971a:	f8ca 1000 	str.w	r1, [sl]
    971e:	f1bb 0f00 	cmp.w	fp, #0
    9722:	d044      	beq.n	97ae <__hexnan+0x118>
    9724:	454c      	cmp	r4, r9
    9726:	d206      	bcs.n	9736 <__hexnan+0xa0>
    9728:	2d07      	cmp	r5, #7
    972a:	dc04      	bgt.n	9736 <__hexnan+0xa0>
    972c:	462a      	mov	r2, r5
    972e:	4649      	mov	r1, r9
    9730:	4620      	mov	r0, r4
    9732:	f7ff ff8b 	bl	964c <L_shift>
    9736:	4544      	cmp	r4, r8
    9738:	d928      	bls.n	978c <__hexnan+0xf6>
    973a:	4643      	mov	r3, r8
    973c:	f854 2b04 	ldr.w	r2, [r4], #4
    9740:	f843 2b04 	str.w	r2, [r3], #4
    9744:	42a6      	cmp	r6, r4
    9746:	d2f9      	bcs.n	973c <__hexnan+0xa6>
    9748:	2200      	movs	r2, #0
    974a:	f843 2b04 	str.w	r2, [r3], #4
    974e:	429e      	cmp	r6, r3
    9750:	d2fb      	bcs.n	974a <__hexnan+0xb4>
    9752:	6833      	ldr	r3, [r6, #0]
    9754:	b91b      	cbnz	r3, 975e <__hexnan+0xc8>
    9756:	4546      	cmp	r6, r8
    9758:	d127      	bne.n	97aa <__hexnan+0x114>
    975a:	2301      	movs	r3, #1
    975c:	6033      	str	r3, [r6, #0]
    975e:	2005      	movs	r0, #5
    9760:	e026      	b.n	97b0 <__hexnan+0x11a>
    9762:	3501      	adds	r5, #1
    9764:	2d08      	cmp	r5, #8
    9766:	f10b 0b01 	add.w	fp, fp, #1
    976a:	dd06      	ble.n	977a <__hexnan+0xe4>
    976c:	4544      	cmp	r4, r8
    976e:	d9cf      	bls.n	9710 <__hexnan+0x7a>
    9770:	2300      	movs	r3, #0
    9772:	f844 3c04 	str.w	r3, [r4, #-4]
    9776:	2501      	movs	r5, #1
    9778:	3c04      	subs	r4, #4
    977a:	6822      	ldr	r2, [r4, #0]
    977c:	f000 000f 	and.w	r0, r0, #15
    9780:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
    9784:	6020      	str	r0, [r4, #0]
    9786:	e7c3      	b.n	9710 <__hexnan+0x7a>
    9788:	2508      	movs	r5, #8
    978a:	e7c1      	b.n	9710 <__hexnan+0x7a>
    978c:	9b02      	ldr	r3, [sp, #8]
    978e:	2b00      	cmp	r3, #0
    9790:	d0df      	beq.n	9752 <__hexnan+0xbc>
    9792:	f04f 32ff 	mov.w	r2, #4294967295
    9796:	f1c3 0320 	rsb	r3, r3, #32
    979a:	fa22 f303 	lsr.w	r3, r2, r3
    979e:	f857 2c04 	ldr.w	r2, [r7, #-4]
    97a2:	401a      	ands	r2, r3
    97a4:	f847 2c04 	str.w	r2, [r7, #-4]
    97a8:	e7d3      	b.n	9752 <__hexnan+0xbc>
    97aa:	3e04      	subs	r6, #4
    97ac:	e7d1      	b.n	9752 <__hexnan+0xbc>
    97ae:	2004      	movs	r0, #4
    97b0:	b007      	add	sp, #28
    97b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000097b6 <__localeconv_l>:
    97b6:	30f0      	adds	r0, #240	; 0xf0
    97b8:	4770      	bx	lr
	...

000097bc <_lseek_r>:
    97bc:	b538      	push	{r3, r4, r5, lr}
    97be:	4c07      	ldr	r4, [pc, #28]	; (97dc <_lseek_r+0x20>)
    97c0:	4605      	mov	r5, r0
    97c2:	4608      	mov	r0, r1
    97c4:	4611      	mov	r1, r2
    97c6:	2200      	movs	r2, #0
    97c8:	6022      	str	r2, [r4, #0]
    97ca:	461a      	mov	r2, r3
    97cc:	f7f9 faba 	bl	2d44 <_lseek>
    97d0:	1c43      	adds	r3, r0, #1
    97d2:	d102      	bne.n	97da <_lseek_r+0x1e>
    97d4:	6823      	ldr	r3, [r4, #0]
    97d6:	b103      	cbz	r3, 97da <_lseek_r+0x1e>
    97d8:	602b      	str	r3, [r5, #0]
    97da:	bd38      	pop	{r3, r4, r5, pc}
    97dc:	2000173c 	.word	0x2000173c

000097e0 <__swhatbuf_r>:
    97e0:	b570      	push	{r4, r5, r6, lr}
    97e2:	460e      	mov	r6, r1
    97e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    97e8:	2900      	cmp	r1, #0
    97ea:	b090      	sub	sp, #64	; 0x40
    97ec:	4614      	mov	r4, r2
    97ee:	461d      	mov	r5, r3
    97f0:	da07      	bge.n	9802 <__swhatbuf_r+0x22>
    97f2:	2300      	movs	r3, #0
    97f4:	602b      	str	r3, [r5, #0]
    97f6:	89b3      	ldrh	r3, [r6, #12]
    97f8:	061a      	lsls	r2, r3, #24
    97fa:	d410      	bmi.n	981e <__swhatbuf_r+0x3e>
    97fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9800:	e00e      	b.n	9820 <__swhatbuf_r+0x40>
    9802:	aa01      	add	r2, sp, #4
    9804:	f001 fd7a 	bl	b2fc <_fstat_r>
    9808:	2800      	cmp	r0, #0
    980a:	dbf2      	blt.n	97f2 <__swhatbuf_r+0x12>
    980c:	9a02      	ldr	r2, [sp, #8]
    980e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    9812:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    9816:	425a      	negs	r2, r3
    9818:	415a      	adcs	r2, r3
    981a:	602a      	str	r2, [r5, #0]
    981c:	e7ee      	b.n	97fc <__swhatbuf_r+0x1c>
    981e:	2340      	movs	r3, #64	; 0x40
    9820:	2000      	movs	r0, #0
    9822:	6023      	str	r3, [r4, #0]
    9824:	b010      	add	sp, #64	; 0x40
    9826:	bd70      	pop	{r4, r5, r6, pc}

00009828 <__smakebuf_r>:
    9828:	898b      	ldrh	r3, [r1, #12]
    982a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    982c:	079d      	lsls	r5, r3, #30
    982e:	4606      	mov	r6, r0
    9830:	460c      	mov	r4, r1
    9832:	d507      	bpl.n	9844 <__smakebuf_r+0x1c>
    9834:	f104 0347 	add.w	r3, r4, #71	; 0x47
    9838:	6023      	str	r3, [r4, #0]
    983a:	6123      	str	r3, [r4, #16]
    983c:	2301      	movs	r3, #1
    983e:	6163      	str	r3, [r4, #20]
    9840:	b002      	add	sp, #8
    9842:	bd70      	pop	{r4, r5, r6, pc}
    9844:	ab01      	add	r3, sp, #4
    9846:	466a      	mov	r2, sp
    9848:	f7ff ffca 	bl	97e0 <__swhatbuf_r>
    984c:	9900      	ldr	r1, [sp, #0]
    984e:	4605      	mov	r5, r0
    9850:	4630      	mov	r0, r6
    9852:	f7fe fa41 	bl	7cd8 <_malloc_r>
    9856:	b948      	cbnz	r0, 986c <__smakebuf_r+0x44>
    9858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    985c:	059a      	lsls	r2, r3, #22
    985e:	d4ef      	bmi.n	9840 <__smakebuf_r+0x18>
    9860:	f023 0303 	bic.w	r3, r3, #3
    9864:	f043 0302 	orr.w	r3, r3, #2
    9868:	81a3      	strh	r3, [r4, #12]
    986a:	e7e3      	b.n	9834 <__smakebuf_r+0xc>
    986c:	4b0d      	ldr	r3, [pc, #52]	; (98a4 <__smakebuf_r+0x7c>)
    986e:	62b3      	str	r3, [r6, #40]	; 0x28
    9870:	89a3      	ldrh	r3, [r4, #12]
    9872:	6020      	str	r0, [r4, #0]
    9874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9878:	81a3      	strh	r3, [r4, #12]
    987a:	9b00      	ldr	r3, [sp, #0]
    987c:	6163      	str	r3, [r4, #20]
    987e:	9b01      	ldr	r3, [sp, #4]
    9880:	6120      	str	r0, [r4, #16]
    9882:	b15b      	cbz	r3, 989c <__smakebuf_r+0x74>
    9884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9888:	4630      	mov	r0, r6
    988a:	f001 fd49 	bl	b320 <_isatty_r>
    988e:	b128      	cbz	r0, 989c <__smakebuf_r+0x74>
    9890:	89a3      	ldrh	r3, [r4, #12]
    9892:	f023 0303 	bic.w	r3, r3, #3
    9896:	f043 0301 	orr.w	r3, r3, #1
    989a:	81a3      	strh	r3, [r4, #12]
    989c:	89a3      	ldrh	r3, [r4, #12]
    989e:	431d      	orrs	r5, r3
    98a0:	81a5      	strh	r5, [r4, #12]
    98a2:	e7cd      	b.n	9840 <__smakebuf_r+0x18>
    98a4:	000079d1 	.word	0x000079d1

000098a8 <malloc>:
    98a8:	4b02      	ldr	r3, [pc, #8]	; (98b4 <malloc+0xc>)
    98aa:	4601      	mov	r1, r0
    98ac:	6818      	ldr	r0, [r3, #0]
    98ae:	f7fe ba13 	b.w	7cd8 <_malloc_r>
    98b2:	bf00      	nop
    98b4:	200004b0 	.word	0x200004b0

000098b8 <memcpy>:
    98b8:	b510      	push	{r4, lr}
    98ba:	1e43      	subs	r3, r0, #1
    98bc:	440a      	add	r2, r1
    98be:	4291      	cmp	r1, r2
    98c0:	d100      	bne.n	98c4 <memcpy+0xc>
    98c2:	bd10      	pop	{r4, pc}
    98c4:	f811 4b01 	ldrb.w	r4, [r1], #1
    98c8:	f803 4f01 	strb.w	r4, [r3, #1]!
    98cc:	e7f7      	b.n	98be <memcpy+0x6>

000098ce <__malloc_lock>:
    98ce:	4770      	bx	lr

000098d0 <__malloc_unlock>:
    98d0:	4770      	bx	lr

000098d2 <_Balloc>:
    98d2:	b570      	push	{r4, r5, r6, lr}
    98d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    98d6:	4604      	mov	r4, r0
    98d8:	460e      	mov	r6, r1
    98da:	b93d      	cbnz	r5, 98ec <_Balloc+0x1a>
    98dc:	2010      	movs	r0, #16
    98de:	f7ff ffe3 	bl	98a8 <malloc>
    98e2:	6260      	str	r0, [r4, #36]	; 0x24
    98e4:	6045      	str	r5, [r0, #4]
    98e6:	6085      	str	r5, [r0, #8]
    98e8:	6005      	str	r5, [r0, #0]
    98ea:	60c5      	str	r5, [r0, #12]
    98ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
    98ee:	68eb      	ldr	r3, [r5, #12]
    98f0:	b183      	cbz	r3, 9914 <_Balloc+0x42>
    98f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    98f4:	68db      	ldr	r3, [r3, #12]
    98f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    98fa:	b9b8      	cbnz	r0, 992c <_Balloc+0x5a>
    98fc:	2101      	movs	r1, #1
    98fe:	fa01 f506 	lsl.w	r5, r1, r6
    9902:	1d6a      	adds	r2, r5, #5
    9904:	0092      	lsls	r2, r2, #2
    9906:	4620      	mov	r0, r4
    9908:	f000 fbcc 	bl	a0a4 <_calloc_r>
    990c:	b160      	cbz	r0, 9928 <_Balloc+0x56>
    990e:	6046      	str	r6, [r0, #4]
    9910:	6085      	str	r5, [r0, #8]
    9912:	e00e      	b.n	9932 <_Balloc+0x60>
    9914:	2221      	movs	r2, #33	; 0x21
    9916:	2104      	movs	r1, #4
    9918:	4620      	mov	r0, r4
    991a:	f000 fbc3 	bl	a0a4 <_calloc_r>
    991e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9920:	60e8      	str	r0, [r5, #12]
    9922:	68db      	ldr	r3, [r3, #12]
    9924:	2b00      	cmp	r3, #0
    9926:	d1e4      	bne.n	98f2 <_Balloc+0x20>
    9928:	2000      	movs	r0, #0
    992a:	bd70      	pop	{r4, r5, r6, pc}
    992c:	6802      	ldr	r2, [r0, #0]
    992e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    9932:	2300      	movs	r3, #0
    9934:	6103      	str	r3, [r0, #16]
    9936:	60c3      	str	r3, [r0, #12]
    9938:	bd70      	pop	{r4, r5, r6, pc}

0000993a <_Bfree>:
    993a:	b570      	push	{r4, r5, r6, lr}
    993c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    993e:	4606      	mov	r6, r0
    9940:	460d      	mov	r5, r1
    9942:	b93c      	cbnz	r4, 9954 <_Bfree+0x1a>
    9944:	2010      	movs	r0, #16
    9946:	f7ff ffaf 	bl	98a8 <malloc>
    994a:	6270      	str	r0, [r6, #36]	; 0x24
    994c:	6044      	str	r4, [r0, #4]
    994e:	6084      	str	r4, [r0, #8]
    9950:	6004      	str	r4, [r0, #0]
    9952:	60c4      	str	r4, [r0, #12]
    9954:	b13d      	cbz	r5, 9966 <_Bfree+0x2c>
    9956:	6a73      	ldr	r3, [r6, #36]	; 0x24
    9958:	686a      	ldr	r2, [r5, #4]
    995a:	68db      	ldr	r3, [r3, #12]
    995c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9960:	6029      	str	r1, [r5, #0]
    9962:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    9966:	bd70      	pop	{r4, r5, r6, pc}

00009968 <__multadd>:
    9968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    996c:	690d      	ldr	r5, [r1, #16]
    996e:	461f      	mov	r7, r3
    9970:	4606      	mov	r6, r0
    9972:	460c      	mov	r4, r1
    9974:	f101 0e14 	add.w	lr, r1, #20
    9978:	2300      	movs	r3, #0
    997a:	f8de 0000 	ldr.w	r0, [lr]
    997e:	b281      	uxth	r1, r0
    9980:	fb02 7101 	mla	r1, r2, r1, r7
    9984:	0c0f      	lsrs	r7, r1, #16
    9986:	0c00      	lsrs	r0, r0, #16
    9988:	fb02 7000 	mla	r0, r2, r0, r7
    998c:	b289      	uxth	r1, r1
    998e:	3301      	adds	r3, #1
    9990:	eb01 4100 	add.w	r1, r1, r0, lsl #16
    9994:	429d      	cmp	r5, r3
    9996:	ea4f 4710 	mov.w	r7, r0, lsr #16
    999a:	f84e 1b04 	str.w	r1, [lr], #4
    999e:	dcec      	bgt.n	997a <__multadd+0x12>
    99a0:	b1d7      	cbz	r7, 99d8 <__multadd+0x70>
    99a2:	68a3      	ldr	r3, [r4, #8]
    99a4:	429d      	cmp	r5, r3
    99a6:	db12      	blt.n	99ce <__multadd+0x66>
    99a8:	6861      	ldr	r1, [r4, #4]
    99aa:	4630      	mov	r0, r6
    99ac:	3101      	adds	r1, #1
    99ae:	f7ff ff90 	bl	98d2 <_Balloc>
    99b2:	6922      	ldr	r2, [r4, #16]
    99b4:	3202      	adds	r2, #2
    99b6:	f104 010c 	add.w	r1, r4, #12
    99ba:	4680      	mov	r8, r0
    99bc:	0092      	lsls	r2, r2, #2
    99be:	300c      	adds	r0, #12
    99c0:	f7ff ff7a 	bl	98b8 <memcpy>
    99c4:	4621      	mov	r1, r4
    99c6:	4630      	mov	r0, r6
    99c8:	f7ff ffb7 	bl	993a <_Bfree>
    99cc:	4644      	mov	r4, r8
    99ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    99d2:	3501      	adds	r5, #1
    99d4:	615f      	str	r7, [r3, #20]
    99d6:	6125      	str	r5, [r4, #16]
    99d8:	4620      	mov	r0, r4
    99da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000099de <__s2b>:
    99de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    99e2:	460c      	mov	r4, r1
    99e4:	4615      	mov	r5, r2
    99e6:	461f      	mov	r7, r3
    99e8:	2209      	movs	r2, #9
    99ea:	3308      	adds	r3, #8
    99ec:	4606      	mov	r6, r0
    99ee:	fb93 f3f2 	sdiv	r3, r3, r2
    99f2:	2100      	movs	r1, #0
    99f4:	2201      	movs	r2, #1
    99f6:	429a      	cmp	r2, r3
    99f8:	db20      	blt.n	9a3c <__s2b+0x5e>
    99fa:	4630      	mov	r0, r6
    99fc:	f7ff ff69 	bl	98d2 <_Balloc>
    9a00:	9b08      	ldr	r3, [sp, #32]
    9a02:	6143      	str	r3, [r0, #20]
    9a04:	2d09      	cmp	r5, #9
    9a06:	f04f 0301 	mov.w	r3, #1
    9a0a:	6103      	str	r3, [r0, #16]
    9a0c:	dd19      	ble.n	9a42 <__s2b+0x64>
    9a0e:	f104 0909 	add.w	r9, r4, #9
    9a12:	46c8      	mov	r8, r9
    9a14:	442c      	add	r4, r5
    9a16:	f818 3b01 	ldrb.w	r3, [r8], #1
    9a1a:	4601      	mov	r1, r0
    9a1c:	3b30      	subs	r3, #48	; 0x30
    9a1e:	220a      	movs	r2, #10
    9a20:	4630      	mov	r0, r6
    9a22:	f7ff ffa1 	bl	9968 <__multadd>
    9a26:	45a0      	cmp	r8, r4
    9a28:	d1f5      	bne.n	9a16 <__s2b+0x38>
    9a2a:	f1a5 0408 	sub.w	r4, r5, #8
    9a2e:	444c      	add	r4, r9
    9a30:	1b2d      	subs	r5, r5, r4
    9a32:	1963      	adds	r3, r4, r5
    9a34:	42bb      	cmp	r3, r7
    9a36:	db07      	blt.n	9a48 <__s2b+0x6a>
    9a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9a3c:	0052      	lsls	r2, r2, #1
    9a3e:	3101      	adds	r1, #1
    9a40:	e7d9      	b.n	99f6 <__s2b+0x18>
    9a42:	340a      	adds	r4, #10
    9a44:	2509      	movs	r5, #9
    9a46:	e7f3      	b.n	9a30 <__s2b+0x52>
    9a48:	f814 3b01 	ldrb.w	r3, [r4], #1
    9a4c:	4601      	mov	r1, r0
    9a4e:	3b30      	subs	r3, #48	; 0x30
    9a50:	220a      	movs	r2, #10
    9a52:	4630      	mov	r0, r6
    9a54:	f7ff ff88 	bl	9968 <__multadd>
    9a58:	e7eb      	b.n	9a32 <__s2b+0x54>

00009a5a <__hi0bits>:
    9a5a:	0c02      	lsrs	r2, r0, #16
    9a5c:	0412      	lsls	r2, r2, #16
    9a5e:	4603      	mov	r3, r0
    9a60:	b9b2      	cbnz	r2, 9a90 <__hi0bits+0x36>
    9a62:	0403      	lsls	r3, r0, #16
    9a64:	2010      	movs	r0, #16
    9a66:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    9a6a:	bf04      	itt	eq
    9a6c:	021b      	lsleq	r3, r3, #8
    9a6e:	3008      	addeq	r0, #8
    9a70:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    9a74:	bf04      	itt	eq
    9a76:	011b      	lsleq	r3, r3, #4
    9a78:	3004      	addeq	r0, #4
    9a7a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    9a7e:	bf04      	itt	eq
    9a80:	009b      	lsleq	r3, r3, #2
    9a82:	3002      	addeq	r0, #2
    9a84:	2b00      	cmp	r3, #0
    9a86:	db06      	blt.n	9a96 <__hi0bits+0x3c>
    9a88:	005b      	lsls	r3, r3, #1
    9a8a:	d503      	bpl.n	9a94 <__hi0bits+0x3a>
    9a8c:	3001      	adds	r0, #1
    9a8e:	4770      	bx	lr
    9a90:	2000      	movs	r0, #0
    9a92:	e7e8      	b.n	9a66 <__hi0bits+0xc>
    9a94:	2020      	movs	r0, #32
    9a96:	4770      	bx	lr

00009a98 <__lo0bits>:
    9a98:	6803      	ldr	r3, [r0, #0]
    9a9a:	f013 0207 	ands.w	r2, r3, #7
    9a9e:	4601      	mov	r1, r0
    9aa0:	d00b      	beq.n	9aba <__lo0bits+0x22>
    9aa2:	07da      	lsls	r2, r3, #31
    9aa4:	d423      	bmi.n	9aee <__lo0bits+0x56>
    9aa6:	0798      	lsls	r0, r3, #30
    9aa8:	bf49      	itett	mi
    9aaa:	085b      	lsrmi	r3, r3, #1
    9aac:	089b      	lsrpl	r3, r3, #2
    9aae:	2001      	movmi	r0, #1
    9ab0:	600b      	strmi	r3, [r1, #0]
    9ab2:	bf5c      	itt	pl
    9ab4:	600b      	strpl	r3, [r1, #0]
    9ab6:	2002      	movpl	r0, #2
    9ab8:	4770      	bx	lr
    9aba:	b298      	uxth	r0, r3
    9abc:	b9a8      	cbnz	r0, 9aea <__lo0bits+0x52>
    9abe:	0c1b      	lsrs	r3, r3, #16
    9ac0:	2010      	movs	r0, #16
    9ac2:	f013 0fff 	tst.w	r3, #255	; 0xff
    9ac6:	bf04      	itt	eq
    9ac8:	0a1b      	lsreq	r3, r3, #8
    9aca:	3008      	addeq	r0, #8
    9acc:	071a      	lsls	r2, r3, #28
    9ace:	bf04      	itt	eq
    9ad0:	091b      	lsreq	r3, r3, #4
    9ad2:	3004      	addeq	r0, #4
    9ad4:	079a      	lsls	r2, r3, #30
    9ad6:	bf04      	itt	eq
    9ad8:	089b      	lsreq	r3, r3, #2
    9ada:	3002      	addeq	r0, #2
    9adc:	07da      	lsls	r2, r3, #31
    9ade:	d402      	bmi.n	9ae6 <__lo0bits+0x4e>
    9ae0:	085b      	lsrs	r3, r3, #1
    9ae2:	d006      	beq.n	9af2 <__lo0bits+0x5a>
    9ae4:	3001      	adds	r0, #1
    9ae6:	600b      	str	r3, [r1, #0]
    9ae8:	4770      	bx	lr
    9aea:	4610      	mov	r0, r2
    9aec:	e7e9      	b.n	9ac2 <__lo0bits+0x2a>
    9aee:	2000      	movs	r0, #0
    9af0:	4770      	bx	lr
    9af2:	2020      	movs	r0, #32
    9af4:	4770      	bx	lr

00009af6 <__i2b>:
    9af6:	b510      	push	{r4, lr}
    9af8:	460c      	mov	r4, r1
    9afa:	2101      	movs	r1, #1
    9afc:	f7ff fee9 	bl	98d2 <_Balloc>
    9b00:	2201      	movs	r2, #1
    9b02:	6144      	str	r4, [r0, #20]
    9b04:	6102      	str	r2, [r0, #16]
    9b06:	bd10      	pop	{r4, pc}

00009b08 <__multiply>:
    9b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b0c:	4614      	mov	r4, r2
    9b0e:	690a      	ldr	r2, [r1, #16]
    9b10:	6923      	ldr	r3, [r4, #16]
    9b12:	429a      	cmp	r2, r3
    9b14:	bfb8      	it	lt
    9b16:	460b      	movlt	r3, r1
    9b18:	4689      	mov	r9, r1
    9b1a:	bfbc      	itt	lt
    9b1c:	46a1      	movlt	r9, r4
    9b1e:	461c      	movlt	r4, r3
    9b20:	f8d9 7010 	ldr.w	r7, [r9, #16]
    9b24:	f8d4 a010 	ldr.w	sl, [r4, #16]
    9b28:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9b2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    9b30:	eb07 060a 	add.w	r6, r7, sl
    9b34:	429e      	cmp	r6, r3
    9b36:	bfc8      	it	gt
    9b38:	3101      	addgt	r1, #1
    9b3a:	f7ff feca 	bl	98d2 <_Balloc>
    9b3e:	f100 0514 	add.w	r5, r0, #20
    9b42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    9b46:	462b      	mov	r3, r5
    9b48:	2200      	movs	r2, #0
    9b4a:	4543      	cmp	r3, r8
    9b4c:	d316      	bcc.n	9b7c <__multiply+0x74>
    9b4e:	f104 0214 	add.w	r2, r4, #20
    9b52:	f109 0114 	add.w	r1, r9, #20
    9b56:	eb02 038a 	add.w	r3, r2, sl, lsl #2
    9b5a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    9b5e:	9301      	str	r3, [sp, #4]
    9b60:	9c01      	ldr	r4, [sp, #4]
    9b62:	4294      	cmp	r4, r2
    9b64:	4613      	mov	r3, r2
    9b66:	d80c      	bhi.n	9b82 <__multiply+0x7a>
    9b68:	2e00      	cmp	r6, #0
    9b6a:	dd03      	ble.n	9b74 <__multiply+0x6c>
    9b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    9b70:	2b00      	cmp	r3, #0
    9b72:	d054      	beq.n	9c1e <__multiply+0x116>
    9b74:	6106      	str	r6, [r0, #16]
    9b76:	b003      	add	sp, #12
    9b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b7c:	f843 2b04 	str.w	r2, [r3], #4
    9b80:	e7e3      	b.n	9b4a <__multiply+0x42>
    9b82:	f8b3 a000 	ldrh.w	sl, [r3]
    9b86:	3204      	adds	r2, #4
    9b88:	f1ba 0f00 	cmp.w	sl, #0
    9b8c:	d020      	beq.n	9bd0 <__multiply+0xc8>
    9b8e:	46ae      	mov	lr, r5
    9b90:	4689      	mov	r9, r1
    9b92:	f04f 0c00 	mov.w	ip, #0
    9b96:	f859 4b04 	ldr.w	r4, [r9], #4
    9b9a:	f8be b000 	ldrh.w	fp, [lr]
    9b9e:	b2a3      	uxth	r3, r4
    9ba0:	fb0a b303 	mla	r3, sl, r3, fp
    9ba4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
    9ba8:	f8de 4000 	ldr.w	r4, [lr]
    9bac:	4463      	add	r3, ip
    9bae:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    9bb2:	fb0a c40b 	mla	r4, sl, fp, ip
    9bb6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    9bba:	b29b      	uxth	r3, r3
    9bbc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    9bc0:	454f      	cmp	r7, r9
    9bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    9bc6:	f84e 3b04 	str.w	r3, [lr], #4
    9bca:	d8e4      	bhi.n	9b96 <__multiply+0x8e>
    9bcc:	f8ce c000 	str.w	ip, [lr]
    9bd0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
    9bd4:	f1b9 0f00 	cmp.w	r9, #0
    9bd8:	d01f      	beq.n	9c1a <__multiply+0x112>
    9bda:	682b      	ldr	r3, [r5, #0]
    9bdc:	46ae      	mov	lr, r5
    9bde:	468c      	mov	ip, r1
    9be0:	f04f 0a00 	mov.w	sl, #0
    9be4:	f8bc 4000 	ldrh.w	r4, [ip]
    9be8:	f8be b002 	ldrh.w	fp, [lr, #2]
    9bec:	fb09 b404 	mla	r4, r9, r4, fp
    9bf0:	44a2      	add	sl, r4
    9bf2:	b29b      	uxth	r3, r3
    9bf4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    9bf8:	f84e 3b04 	str.w	r3, [lr], #4
    9bfc:	f85c 3b04 	ldr.w	r3, [ip], #4
    9c00:	f8be 4000 	ldrh.w	r4, [lr]
    9c04:	0c1b      	lsrs	r3, r3, #16
    9c06:	fb09 4303 	mla	r3, r9, r3, r4
    9c0a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
    9c0e:	4567      	cmp	r7, ip
    9c10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
    9c14:	d8e6      	bhi.n	9be4 <__multiply+0xdc>
    9c16:	f8ce 3000 	str.w	r3, [lr]
    9c1a:	3504      	adds	r5, #4
    9c1c:	e7a0      	b.n	9b60 <__multiply+0x58>
    9c1e:	3e01      	subs	r6, #1
    9c20:	e7a2      	b.n	9b68 <__multiply+0x60>
	...

00009c24 <__pow5mult>:
    9c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c28:	4615      	mov	r5, r2
    9c2a:	f012 0203 	ands.w	r2, r2, #3
    9c2e:	4606      	mov	r6, r0
    9c30:	460f      	mov	r7, r1
    9c32:	d007      	beq.n	9c44 <__pow5mult+0x20>
    9c34:	3a01      	subs	r2, #1
    9c36:	4c21      	ldr	r4, [pc, #132]	; (9cbc <__pow5mult+0x98>)
    9c38:	2300      	movs	r3, #0
    9c3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    9c3e:	f7ff fe93 	bl	9968 <__multadd>
    9c42:	4607      	mov	r7, r0
    9c44:	10ad      	asrs	r5, r5, #2
    9c46:	d035      	beq.n	9cb4 <__pow5mult+0x90>
    9c48:	6a74      	ldr	r4, [r6, #36]	; 0x24
    9c4a:	b93c      	cbnz	r4, 9c5c <__pow5mult+0x38>
    9c4c:	2010      	movs	r0, #16
    9c4e:	f7ff fe2b 	bl	98a8 <malloc>
    9c52:	6270      	str	r0, [r6, #36]	; 0x24
    9c54:	6044      	str	r4, [r0, #4]
    9c56:	6084      	str	r4, [r0, #8]
    9c58:	6004      	str	r4, [r0, #0]
    9c5a:	60c4      	str	r4, [r0, #12]
    9c5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    9c60:	f8d8 4008 	ldr.w	r4, [r8, #8]
    9c64:	b94c      	cbnz	r4, 9c7a <__pow5mult+0x56>
    9c66:	f240 2171 	movw	r1, #625	; 0x271
    9c6a:	4630      	mov	r0, r6
    9c6c:	f7ff ff43 	bl	9af6 <__i2b>
    9c70:	2300      	movs	r3, #0
    9c72:	f8c8 0008 	str.w	r0, [r8, #8]
    9c76:	4604      	mov	r4, r0
    9c78:	6003      	str	r3, [r0, #0]
    9c7a:	f04f 0800 	mov.w	r8, #0
    9c7e:	07eb      	lsls	r3, r5, #31
    9c80:	d50a      	bpl.n	9c98 <__pow5mult+0x74>
    9c82:	4639      	mov	r1, r7
    9c84:	4622      	mov	r2, r4
    9c86:	4630      	mov	r0, r6
    9c88:	f7ff ff3e 	bl	9b08 <__multiply>
    9c8c:	4639      	mov	r1, r7
    9c8e:	4681      	mov	r9, r0
    9c90:	4630      	mov	r0, r6
    9c92:	f7ff fe52 	bl	993a <_Bfree>
    9c96:	464f      	mov	r7, r9
    9c98:	106d      	asrs	r5, r5, #1
    9c9a:	d00b      	beq.n	9cb4 <__pow5mult+0x90>
    9c9c:	6820      	ldr	r0, [r4, #0]
    9c9e:	b938      	cbnz	r0, 9cb0 <__pow5mult+0x8c>
    9ca0:	4622      	mov	r2, r4
    9ca2:	4621      	mov	r1, r4
    9ca4:	4630      	mov	r0, r6
    9ca6:	f7ff ff2f 	bl	9b08 <__multiply>
    9caa:	6020      	str	r0, [r4, #0]
    9cac:	f8c0 8000 	str.w	r8, [r0]
    9cb0:	4604      	mov	r4, r0
    9cb2:	e7e4      	b.n	9c7e <__pow5mult+0x5a>
    9cb4:	4638      	mov	r0, r7
    9cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9cba:	bf00      	nop
    9cbc:	0000ce28 	.word	0x0000ce28

00009cc0 <__lshift>:
    9cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9cc4:	460c      	mov	r4, r1
    9cc6:	ea4f 1a62 	mov.w	sl, r2, asr #5
    9cca:	6923      	ldr	r3, [r4, #16]
    9ccc:	6849      	ldr	r1, [r1, #4]
    9cce:	eb0a 0903 	add.w	r9, sl, r3
    9cd2:	68a3      	ldr	r3, [r4, #8]
    9cd4:	4607      	mov	r7, r0
    9cd6:	4616      	mov	r6, r2
    9cd8:	f109 0501 	add.w	r5, r9, #1
    9cdc:	42ab      	cmp	r3, r5
    9cde:	db31      	blt.n	9d44 <__lshift+0x84>
    9ce0:	4638      	mov	r0, r7
    9ce2:	f7ff fdf6 	bl	98d2 <_Balloc>
    9ce6:	2200      	movs	r2, #0
    9ce8:	4680      	mov	r8, r0
    9cea:	f100 0314 	add.w	r3, r0, #20
    9cee:	4611      	mov	r1, r2
    9cf0:	4552      	cmp	r2, sl
    9cf2:	db2a      	blt.n	9d4a <__lshift+0x8a>
    9cf4:	6920      	ldr	r0, [r4, #16]
    9cf6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    9cfa:	f104 0114 	add.w	r1, r4, #20
    9cfe:	f016 021f 	ands.w	r2, r6, #31
    9d02:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    9d06:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
    9d0a:	d022      	beq.n	9d52 <__lshift+0x92>
    9d0c:	f1c2 0c20 	rsb	ip, r2, #32
    9d10:	2000      	movs	r0, #0
    9d12:	680e      	ldr	r6, [r1, #0]
    9d14:	4096      	lsls	r6, r2
    9d16:	4330      	orrs	r0, r6
    9d18:	f843 0b04 	str.w	r0, [r3], #4
    9d1c:	f851 0b04 	ldr.w	r0, [r1], #4
    9d20:	458e      	cmp	lr, r1
    9d22:	fa20 f00c 	lsr.w	r0, r0, ip
    9d26:	d8f4      	bhi.n	9d12 <__lshift+0x52>
    9d28:	6018      	str	r0, [r3, #0]
    9d2a:	b108      	cbz	r0, 9d30 <__lshift+0x70>
    9d2c:	f109 0502 	add.w	r5, r9, #2
    9d30:	3d01      	subs	r5, #1
    9d32:	4638      	mov	r0, r7
    9d34:	f8c8 5010 	str.w	r5, [r8, #16]
    9d38:	4621      	mov	r1, r4
    9d3a:	f7ff fdfe 	bl	993a <_Bfree>
    9d3e:	4640      	mov	r0, r8
    9d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9d44:	3101      	adds	r1, #1
    9d46:	005b      	lsls	r3, r3, #1
    9d48:	e7c8      	b.n	9cdc <__lshift+0x1c>
    9d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    9d4e:	3201      	adds	r2, #1
    9d50:	e7ce      	b.n	9cf0 <__lshift+0x30>
    9d52:	3b04      	subs	r3, #4
    9d54:	f851 2b04 	ldr.w	r2, [r1], #4
    9d58:	f843 2f04 	str.w	r2, [r3, #4]!
    9d5c:	458e      	cmp	lr, r1
    9d5e:	d8f9      	bhi.n	9d54 <__lshift+0x94>
    9d60:	e7e6      	b.n	9d30 <__lshift+0x70>

00009d62 <__mcmp>:
    9d62:	6903      	ldr	r3, [r0, #16]
    9d64:	690a      	ldr	r2, [r1, #16]
    9d66:	1a9b      	subs	r3, r3, r2
    9d68:	b530      	push	{r4, r5, lr}
    9d6a:	d10c      	bne.n	9d86 <__mcmp+0x24>
    9d6c:	0092      	lsls	r2, r2, #2
    9d6e:	3014      	adds	r0, #20
    9d70:	3114      	adds	r1, #20
    9d72:	1884      	adds	r4, r0, r2
    9d74:	4411      	add	r1, r2
    9d76:	f854 5d04 	ldr.w	r5, [r4, #-4]!
    9d7a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    9d7e:	4295      	cmp	r5, r2
    9d80:	d003      	beq.n	9d8a <__mcmp+0x28>
    9d82:	d305      	bcc.n	9d90 <__mcmp+0x2e>
    9d84:	2301      	movs	r3, #1
    9d86:	4618      	mov	r0, r3
    9d88:	bd30      	pop	{r4, r5, pc}
    9d8a:	42a0      	cmp	r0, r4
    9d8c:	d3f3      	bcc.n	9d76 <__mcmp+0x14>
    9d8e:	e7fa      	b.n	9d86 <__mcmp+0x24>
    9d90:	f04f 33ff 	mov.w	r3, #4294967295
    9d94:	e7f7      	b.n	9d86 <__mcmp+0x24>

00009d96 <__mdiff>:
    9d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d9a:	460d      	mov	r5, r1
    9d9c:	4607      	mov	r7, r0
    9d9e:	4611      	mov	r1, r2
    9da0:	4628      	mov	r0, r5
    9da2:	4614      	mov	r4, r2
    9da4:	f7ff ffdd 	bl	9d62 <__mcmp>
    9da8:	1e06      	subs	r6, r0, #0
    9daa:	d108      	bne.n	9dbe <__mdiff+0x28>
    9dac:	4631      	mov	r1, r6
    9dae:	4638      	mov	r0, r7
    9db0:	f7ff fd8f 	bl	98d2 <_Balloc>
    9db4:	2301      	movs	r3, #1
    9db6:	6103      	str	r3, [r0, #16]
    9db8:	6146      	str	r6, [r0, #20]
    9dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9dbe:	bfa4      	itt	ge
    9dc0:	4623      	movge	r3, r4
    9dc2:	462c      	movge	r4, r5
    9dc4:	4638      	mov	r0, r7
    9dc6:	6861      	ldr	r1, [r4, #4]
    9dc8:	bfa6      	itte	ge
    9dca:	461d      	movge	r5, r3
    9dcc:	2600      	movge	r6, #0
    9dce:	2601      	movlt	r6, #1
    9dd0:	f7ff fd7f 	bl	98d2 <_Balloc>
    9dd4:	692b      	ldr	r3, [r5, #16]
    9dd6:	60c6      	str	r6, [r0, #12]
    9dd8:	6926      	ldr	r6, [r4, #16]
    9dda:	f105 0914 	add.w	r9, r5, #20
    9dde:	f104 0214 	add.w	r2, r4, #20
    9de2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
    9de6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
    9dea:	f100 0514 	add.w	r5, r0, #20
    9dee:	f04f 0c00 	mov.w	ip, #0
    9df2:	f852 ab04 	ldr.w	sl, [r2], #4
    9df6:	f859 4b04 	ldr.w	r4, [r9], #4
    9dfa:	fa1c f18a 	uxtah	r1, ip, sl
    9dfe:	b2a3      	uxth	r3, r4
    9e00:	1ac9      	subs	r1, r1, r3
    9e02:	0c23      	lsrs	r3, r4, #16
    9e04:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
    9e08:	eb03 4321 	add.w	r3, r3, r1, asr #16
    9e0c:	b289      	uxth	r1, r1
    9e0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
    9e12:	45c8      	cmp	r8, r9
    9e14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    9e18:	4696      	mov	lr, r2
    9e1a:	f845 3b04 	str.w	r3, [r5], #4
    9e1e:	d8e8      	bhi.n	9df2 <__mdiff+0x5c>
    9e20:	45be      	cmp	lr, r7
    9e22:	d305      	bcc.n	9e30 <__mdiff+0x9a>
    9e24:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    9e28:	b18b      	cbz	r3, 9e4e <__mdiff+0xb8>
    9e2a:	6106      	str	r6, [r0, #16]
    9e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e30:	f85e 1b04 	ldr.w	r1, [lr], #4
    9e34:	fa1c f381 	uxtah	r3, ip, r1
    9e38:	141a      	asrs	r2, r3, #16
    9e3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    9e3e:	b29b      	uxth	r3, r3
    9e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    9e44:	ea4f 4c22 	mov.w	ip, r2, asr #16
    9e48:	f845 3b04 	str.w	r3, [r5], #4
    9e4c:	e7e8      	b.n	9e20 <__mdiff+0x8a>
    9e4e:	3e01      	subs	r6, #1
    9e50:	e7e8      	b.n	9e24 <__mdiff+0x8e>
	...

00009e54 <__ulp>:
    9e54:	4b10      	ldr	r3, [pc, #64]	; (9e98 <__ulp+0x44>)
    9e56:	400b      	ands	r3, r1
    9e58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	dd02      	ble.n	9e66 <__ulp+0x12>
    9e60:	2000      	movs	r0, #0
    9e62:	4619      	mov	r1, r3
    9e64:	4770      	bx	lr
    9e66:	425b      	negs	r3, r3
    9e68:	151b      	asrs	r3, r3, #20
    9e6a:	2b13      	cmp	r3, #19
    9e6c:	f04f 0000 	mov.w	r0, #0
    9e70:	f04f 0100 	mov.w	r1, #0
    9e74:	dc04      	bgt.n	9e80 <__ulp+0x2c>
    9e76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    9e7a:	fa42 f103 	asr.w	r1, r2, r3
    9e7e:	4770      	bx	lr
    9e80:	3b14      	subs	r3, #20
    9e82:	2b1e      	cmp	r3, #30
    9e84:	f04f 0201 	mov.w	r2, #1
    9e88:	bfda      	itte	le
    9e8a:	f1c3 031f 	rsble	r3, r3, #31
    9e8e:	fa02 f303 	lslle.w	r3, r2, r3
    9e92:	4613      	movgt	r3, r2
    9e94:	4618      	mov	r0, r3
    9e96:	4770      	bx	lr
    9e98:	7ff00000 	.word	0x7ff00000

00009e9c <__b2d>:
    9e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ea0:	6907      	ldr	r7, [r0, #16]
    9ea2:	f100 0914 	add.w	r9, r0, #20
    9ea6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
    9eaa:	f1a7 0804 	sub.w	r8, r7, #4
    9eae:	f857 6c04 	ldr.w	r6, [r7, #-4]
    9eb2:	4630      	mov	r0, r6
    9eb4:	f7ff fdd1 	bl	9a5a <__hi0bits>
    9eb8:	f1c0 0320 	rsb	r3, r0, #32
    9ebc:	280a      	cmp	r0, #10
    9ebe:	600b      	str	r3, [r1, #0]
    9ec0:	491e      	ldr	r1, [pc, #120]	; (9f3c <__b2d+0xa0>)
    9ec2:	dc17      	bgt.n	9ef4 <__b2d+0x58>
    9ec4:	f1c0 0e0b 	rsb	lr, r0, #11
    9ec8:	45c1      	cmp	r9, r8
    9eca:	fa26 f30e 	lsr.w	r3, r6, lr
    9ece:	bf38      	it	cc
    9ed0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
    9ed4:	ea43 0501 	orr.w	r5, r3, r1
    9ed8:	bf28      	it	cs
    9eda:	2200      	movcs	r2, #0
    9edc:	f100 0315 	add.w	r3, r0, #21
    9ee0:	fa06 f303 	lsl.w	r3, r6, r3
    9ee4:	fa22 f20e 	lsr.w	r2, r2, lr
    9ee8:	ea43 0402 	orr.w	r4, r3, r2
    9eec:	4620      	mov	r0, r4
    9eee:	4629      	mov	r1, r5
    9ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ef4:	45c1      	cmp	r9, r8
    9ef6:	bf3a      	itte	cc
    9ef8:	f1a7 0808 	subcc.w	r8, r7, #8
    9efc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
    9f00:	2200      	movcs	r2, #0
    9f02:	f1b0 030b 	subs.w	r3, r0, #11
    9f06:	d015      	beq.n	9f34 <__b2d+0x98>
    9f08:	409e      	lsls	r6, r3
    9f0a:	f1c3 0720 	rsb	r7, r3, #32
    9f0e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
    9f12:	fa22 f107 	lsr.w	r1, r2, r7
    9f16:	45c8      	cmp	r8, r9
    9f18:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
    9f1c:	ea46 0501 	orr.w	r5, r6, r1
    9f20:	bf8c      	ite	hi
    9f22:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
    9f26:	2100      	movls	r1, #0
    9f28:	fa02 f003 	lsl.w	r0, r2, r3
    9f2c:	40f9      	lsrs	r1, r7
    9f2e:	ea40 0401 	orr.w	r4, r0, r1
    9f32:	e7db      	b.n	9eec <__b2d+0x50>
    9f34:	ea46 0501 	orr.w	r5, r6, r1
    9f38:	4614      	mov	r4, r2
    9f3a:	e7d7      	b.n	9eec <__b2d+0x50>
    9f3c:	3ff00000 	.word	0x3ff00000

00009f40 <__d2b>:
    9f40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9f44:	2101      	movs	r1, #1
    9f46:	461c      	mov	r4, r3
    9f48:	4690      	mov	r8, r2
    9f4a:	9e08      	ldr	r6, [sp, #32]
    9f4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9f4e:	f7ff fcc0 	bl	98d2 <_Balloc>
    9f52:	f3c4 0213 	ubfx	r2, r4, #0, #20
    9f56:	f3c4 540a 	ubfx	r4, r4, #20, #11
    9f5a:	4607      	mov	r7, r0
    9f5c:	bb34      	cbnz	r4, 9fac <__d2b+0x6c>
    9f5e:	9201      	str	r2, [sp, #4]
    9f60:	f1b8 0f00 	cmp.w	r8, #0
    9f64:	d027      	beq.n	9fb6 <__d2b+0x76>
    9f66:	a802      	add	r0, sp, #8
    9f68:	f840 8d08 	str.w	r8, [r0, #-8]!
    9f6c:	f7ff fd94 	bl	9a98 <__lo0bits>
    9f70:	9900      	ldr	r1, [sp, #0]
    9f72:	b1f0      	cbz	r0, 9fb2 <__d2b+0x72>
    9f74:	9a01      	ldr	r2, [sp, #4]
    9f76:	f1c0 0320 	rsb	r3, r0, #32
    9f7a:	fa02 f303 	lsl.w	r3, r2, r3
    9f7e:	430b      	orrs	r3, r1
    9f80:	40c2      	lsrs	r2, r0
    9f82:	617b      	str	r3, [r7, #20]
    9f84:	9201      	str	r2, [sp, #4]
    9f86:	9b01      	ldr	r3, [sp, #4]
    9f88:	61bb      	str	r3, [r7, #24]
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	bf14      	ite	ne
    9f8e:	2102      	movne	r1, #2
    9f90:	2101      	moveq	r1, #1
    9f92:	6139      	str	r1, [r7, #16]
    9f94:	b1c4      	cbz	r4, 9fc8 <__d2b+0x88>
    9f96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
    9f9a:	4404      	add	r4, r0
    9f9c:	6034      	str	r4, [r6, #0]
    9f9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    9fa2:	6028      	str	r0, [r5, #0]
    9fa4:	4638      	mov	r0, r7
    9fa6:	b002      	add	sp, #8
    9fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    9fb0:	e7d5      	b.n	9f5e <__d2b+0x1e>
    9fb2:	6179      	str	r1, [r7, #20]
    9fb4:	e7e7      	b.n	9f86 <__d2b+0x46>
    9fb6:	a801      	add	r0, sp, #4
    9fb8:	f7ff fd6e 	bl	9a98 <__lo0bits>
    9fbc:	9b01      	ldr	r3, [sp, #4]
    9fbe:	617b      	str	r3, [r7, #20]
    9fc0:	2101      	movs	r1, #1
    9fc2:	6139      	str	r1, [r7, #16]
    9fc4:	3020      	adds	r0, #32
    9fc6:	e7e5      	b.n	9f94 <__d2b+0x54>
    9fc8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    9fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    9fd0:	6030      	str	r0, [r6, #0]
    9fd2:	6918      	ldr	r0, [r3, #16]
    9fd4:	f7ff fd41 	bl	9a5a <__hi0bits>
    9fd8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    9fdc:	e7e1      	b.n	9fa2 <__d2b+0x62>

00009fde <__ratio>:
    9fde:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    9fe2:	4688      	mov	r8, r1
    9fe4:	4669      	mov	r1, sp
    9fe6:	4681      	mov	r9, r0
    9fe8:	f7ff ff58 	bl	9e9c <__b2d>
    9fec:	460d      	mov	r5, r1
    9fee:	4604      	mov	r4, r0
    9ff0:	a901      	add	r1, sp, #4
    9ff2:	4640      	mov	r0, r8
    9ff4:	f7ff ff52 	bl	9e9c <__b2d>
    9ff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
    9ffc:	f8d8 2010 	ldr.w	r2, [r8, #16]
    a000:	9e00      	ldr	r6, [sp, #0]
    a002:	1a9a      	subs	r2, r3, r2
    a004:	9b01      	ldr	r3, [sp, #4]
    a006:	1af3      	subs	r3, r6, r3
    a008:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    a00c:	2b00      	cmp	r3, #0
    a00e:	bfd6      	itet	le
    a010:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
    a014:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
    a018:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
    a01c:	4602      	mov	r2, r0
    a01e:	460b      	mov	r3, r1
    a020:	4620      	mov	r0, r4
    a022:	4629      	mov	r1, r5
    a024:	f7fd f8d8 	bl	71d8 <__aeabi_ddiv>
    a028:	b002      	add	sp, #8
    a02a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0000a02e <__copybits>:
    a02e:	3901      	subs	r1, #1
    a030:	b510      	push	{r4, lr}
    a032:	1149      	asrs	r1, r1, #5
    a034:	6914      	ldr	r4, [r2, #16]
    a036:	3101      	adds	r1, #1
    a038:	f102 0314 	add.w	r3, r2, #20
    a03c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    a040:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    a044:	42a3      	cmp	r3, r4
    a046:	4602      	mov	r2, r0
    a048:	d303      	bcc.n	a052 <__copybits+0x24>
    a04a:	2300      	movs	r3, #0
    a04c:	428a      	cmp	r2, r1
    a04e:	d305      	bcc.n	a05c <__copybits+0x2e>
    a050:	bd10      	pop	{r4, pc}
    a052:	f853 2b04 	ldr.w	r2, [r3], #4
    a056:	f840 2b04 	str.w	r2, [r0], #4
    a05a:	e7f3      	b.n	a044 <__copybits+0x16>
    a05c:	f842 3b04 	str.w	r3, [r2], #4
    a060:	e7f4      	b.n	a04c <__copybits+0x1e>

0000a062 <__any_on>:
    a062:	f100 0214 	add.w	r2, r0, #20
    a066:	6900      	ldr	r0, [r0, #16]
    a068:	114b      	asrs	r3, r1, #5
    a06a:	4298      	cmp	r0, r3
    a06c:	b510      	push	{r4, lr}
    a06e:	db11      	blt.n	a094 <__any_on+0x32>
    a070:	dd0a      	ble.n	a088 <__any_on+0x26>
    a072:	f011 011f 	ands.w	r1, r1, #31
    a076:	d007      	beq.n	a088 <__any_on+0x26>
    a078:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    a07c:	fa24 f001 	lsr.w	r0, r4, r1
    a080:	fa00 f101 	lsl.w	r1, r0, r1
    a084:	428c      	cmp	r4, r1
    a086:	d10b      	bne.n	a0a0 <__any_on+0x3e>
    a088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a08c:	4293      	cmp	r3, r2
    a08e:	d803      	bhi.n	a098 <__any_on+0x36>
    a090:	2000      	movs	r0, #0
    a092:	bd10      	pop	{r4, pc}
    a094:	4603      	mov	r3, r0
    a096:	e7f7      	b.n	a088 <__any_on+0x26>
    a098:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    a09c:	2900      	cmp	r1, #0
    a09e:	d0f5      	beq.n	a08c <__any_on+0x2a>
    a0a0:	2001      	movs	r0, #1
    a0a2:	bd10      	pop	{r4, pc}

0000a0a4 <_calloc_r>:
    a0a4:	b538      	push	{r3, r4, r5, lr}
    a0a6:	fb02 f401 	mul.w	r4, r2, r1
    a0aa:	4621      	mov	r1, r4
    a0ac:	f7fd fe14 	bl	7cd8 <_malloc_r>
    a0b0:	4605      	mov	r5, r0
    a0b2:	b118      	cbz	r0, a0bc <_calloc_r+0x18>
    a0b4:	4622      	mov	r2, r4
    a0b6:	2100      	movs	r1, #0
    a0b8:	f7fd fdb8 	bl	7c2c <memset>
    a0bc:	4628      	mov	r0, r5
    a0be:	bd38      	pop	{r3, r4, r5, pc}

0000a0c0 <__ssputs_r>:
    a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a0c4:	688e      	ldr	r6, [r1, #8]
    a0c6:	429e      	cmp	r6, r3
    a0c8:	4682      	mov	sl, r0
    a0ca:	460c      	mov	r4, r1
    a0cc:	4691      	mov	r9, r2
    a0ce:	4698      	mov	r8, r3
    a0d0:	d835      	bhi.n	a13e <__ssputs_r+0x7e>
    a0d2:	898a      	ldrh	r2, [r1, #12]
    a0d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    a0d8:	d031      	beq.n	a13e <__ssputs_r+0x7e>
    a0da:	6825      	ldr	r5, [r4, #0]
    a0dc:	6909      	ldr	r1, [r1, #16]
    a0de:	1a6f      	subs	r7, r5, r1
    a0e0:	6965      	ldr	r5, [r4, #20]
    a0e2:	2302      	movs	r3, #2
    a0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a0e8:	fb95 f5f3 	sdiv	r5, r5, r3
    a0ec:	f108 0301 	add.w	r3, r8, #1
    a0f0:	443b      	add	r3, r7
    a0f2:	429d      	cmp	r5, r3
    a0f4:	bf38      	it	cc
    a0f6:	461d      	movcc	r5, r3
    a0f8:	0553      	lsls	r3, r2, #21
    a0fa:	d531      	bpl.n	a160 <__ssputs_r+0xa0>
    a0fc:	4629      	mov	r1, r5
    a0fe:	f7fd fdeb 	bl	7cd8 <_malloc_r>
    a102:	4606      	mov	r6, r0
    a104:	b950      	cbnz	r0, a11c <__ssputs_r+0x5c>
    a106:	230c      	movs	r3, #12
    a108:	f8ca 3000 	str.w	r3, [sl]
    a10c:	89a3      	ldrh	r3, [r4, #12]
    a10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a112:	81a3      	strh	r3, [r4, #12]
    a114:	f04f 30ff 	mov.w	r0, #4294967295
    a118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a11c:	463a      	mov	r2, r7
    a11e:	6921      	ldr	r1, [r4, #16]
    a120:	f7ff fbca 	bl	98b8 <memcpy>
    a124:	89a3      	ldrh	r3, [r4, #12]
    a126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    a12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a12e:	81a3      	strh	r3, [r4, #12]
    a130:	6126      	str	r6, [r4, #16]
    a132:	6165      	str	r5, [r4, #20]
    a134:	443e      	add	r6, r7
    a136:	1bed      	subs	r5, r5, r7
    a138:	6026      	str	r6, [r4, #0]
    a13a:	60a5      	str	r5, [r4, #8]
    a13c:	4646      	mov	r6, r8
    a13e:	4546      	cmp	r6, r8
    a140:	bf28      	it	cs
    a142:	4646      	movcs	r6, r8
    a144:	4632      	mov	r2, r6
    a146:	4649      	mov	r1, r9
    a148:	6820      	ldr	r0, [r4, #0]
    a14a:	f001 f949 	bl	b3e0 <memmove>
    a14e:	68a3      	ldr	r3, [r4, #8]
    a150:	1b9b      	subs	r3, r3, r6
    a152:	60a3      	str	r3, [r4, #8]
    a154:	6823      	ldr	r3, [r4, #0]
    a156:	441e      	add	r6, r3
    a158:	6026      	str	r6, [r4, #0]
    a15a:	2000      	movs	r0, #0
    a15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a160:	462a      	mov	r2, r5
    a162:	f001 f957 	bl	b414 <_realloc_r>
    a166:	4606      	mov	r6, r0
    a168:	2800      	cmp	r0, #0
    a16a:	d1e1      	bne.n	a130 <__ssputs_r+0x70>
    a16c:	6921      	ldr	r1, [r4, #16]
    a16e:	4650      	mov	r0, sl
    a170:	f7fd fd64 	bl	7c3c <_free_r>
    a174:	e7c7      	b.n	a106 <__ssputs_r+0x46>
	...

0000a178 <_svfiprintf_r>:
    a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a17c:	b09d      	sub	sp, #116	; 0x74
    a17e:	4680      	mov	r8, r0
    a180:	9303      	str	r3, [sp, #12]
    a182:	898b      	ldrh	r3, [r1, #12]
    a184:	061c      	lsls	r4, r3, #24
    a186:	460d      	mov	r5, r1
    a188:	4616      	mov	r6, r2
    a18a:	d50f      	bpl.n	a1ac <_svfiprintf_r+0x34>
    a18c:	690b      	ldr	r3, [r1, #16]
    a18e:	b96b      	cbnz	r3, a1ac <_svfiprintf_r+0x34>
    a190:	2140      	movs	r1, #64	; 0x40
    a192:	f7fd fda1 	bl	7cd8 <_malloc_r>
    a196:	6028      	str	r0, [r5, #0]
    a198:	6128      	str	r0, [r5, #16]
    a19a:	b928      	cbnz	r0, a1a8 <_svfiprintf_r+0x30>
    a19c:	230c      	movs	r3, #12
    a19e:	f8c8 3000 	str.w	r3, [r8]
    a1a2:	f04f 30ff 	mov.w	r0, #4294967295
    a1a6:	e0c5      	b.n	a334 <_svfiprintf_r+0x1bc>
    a1a8:	2340      	movs	r3, #64	; 0x40
    a1aa:	616b      	str	r3, [r5, #20]
    a1ac:	2300      	movs	r3, #0
    a1ae:	9309      	str	r3, [sp, #36]	; 0x24
    a1b0:	2320      	movs	r3, #32
    a1b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a1b6:	2330      	movs	r3, #48	; 0x30
    a1b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a1bc:	f04f 0b01 	mov.w	fp, #1
    a1c0:	4637      	mov	r7, r6
    a1c2:	463c      	mov	r4, r7
    a1c4:	f814 3b01 	ldrb.w	r3, [r4], #1
    a1c8:	2b00      	cmp	r3, #0
    a1ca:	d13c      	bne.n	a246 <_svfiprintf_r+0xce>
    a1cc:	ebb7 0a06 	subs.w	sl, r7, r6
    a1d0:	d00b      	beq.n	a1ea <_svfiprintf_r+0x72>
    a1d2:	4653      	mov	r3, sl
    a1d4:	4632      	mov	r2, r6
    a1d6:	4629      	mov	r1, r5
    a1d8:	4640      	mov	r0, r8
    a1da:	f7ff ff71 	bl	a0c0 <__ssputs_r>
    a1de:	3001      	adds	r0, #1
    a1e0:	f000 80a3 	beq.w	a32a <_svfiprintf_r+0x1b2>
    a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1e6:	4453      	add	r3, sl
    a1e8:	9309      	str	r3, [sp, #36]	; 0x24
    a1ea:	783b      	ldrb	r3, [r7, #0]
    a1ec:	2b00      	cmp	r3, #0
    a1ee:	f000 809c 	beq.w	a32a <_svfiprintf_r+0x1b2>
    a1f2:	2300      	movs	r3, #0
    a1f4:	f04f 32ff 	mov.w	r2, #4294967295
    a1f8:	9304      	str	r3, [sp, #16]
    a1fa:	9307      	str	r3, [sp, #28]
    a1fc:	9205      	str	r2, [sp, #20]
    a1fe:	9306      	str	r3, [sp, #24]
    a200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a204:	931a      	str	r3, [sp, #104]	; 0x68
    a206:	2205      	movs	r2, #5
    a208:	7821      	ldrb	r1, [r4, #0]
    a20a:	4850      	ldr	r0, [pc, #320]	; (a34c <_svfiprintf_r+0x1d4>)
    a20c:	f001 f898 	bl	b340 <memchr>
    a210:	1c67      	adds	r7, r4, #1
    a212:	9b04      	ldr	r3, [sp, #16]
    a214:	b9d8      	cbnz	r0, a24e <_svfiprintf_r+0xd6>
    a216:	06d9      	lsls	r1, r3, #27
    a218:	bf44      	itt	mi
    a21a:	2220      	movmi	r2, #32
    a21c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a220:	071a      	lsls	r2, r3, #28
    a222:	bf44      	itt	mi
    a224:	222b      	movmi	r2, #43	; 0x2b
    a226:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a22a:	7822      	ldrb	r2, [r4, #0]
    a22c:	2a2a      	cmp	r2, #42	; 0x2a
    a22e:	d016      	beq.n	a25e <_svfiprintf_r+0xe6>
    a230:	9a07      	ldr	r2, [sp, #28]
    a232:	2100      	movs	r1, #0
    a234:	200a      	movs	r0, #10
    a236:	4627      	mov	r7, r4
    a238:	3401      	adds	r4, #1
    a23a:	783b      	ldrb	r3, [r7, #0]
    a23c:	3b30      	subs	r3, #48	; 0x30
    a23e:	2b09      	cmp	r3, #9
    a240:	d951      	bls.n	a2e6 <_svfiprintf_r+0x16e>
    a242:	b1c9      	cbz	r1, a278 <_svfiprintf_r+0x100>
    a244:	e011      	b.n	a26a <_svfiprintf_r+0xf2>
    a246:	2b25      	cmp	r3, #37	; 0x25
    a248:	d0c0      	beq.n	a1cc <_svfiprintf_r+0x54>
    a24a:	4627      	mov	r7, r4
    a24c:	e7b9      	b.n	a1c2 <_svfiprintf_r+0x4a>
    a24e:	4a3f      	ldr	r2, [pc, #252]	; (a34c <_svfiprintf_r+0x1d4>)
    a250:	1a80      	subs	r0, r0, r2
    a252:	fa0b f000 	lsl.w	r0, fp, r0
    a256:	4318      	orrs	r0, r3
    a258:	9004      	str	r0, [sp, #16]
    a25a:	463c      	mov	r4, r7
    a25c:	e7d3      	b.n	a206 <_svfiprintf_r+0x8e>
    a25e:	9a03      	ldr	r2, [sp, #12]
    a260:	1d11      	adds	r1, r2, #4
    a262:	6812      	ldr	r2, [r2, #0]
    a264:	9103      	str	r1, [sp, #12]
    a266:	2a00      	cmp	r2, #0
    a268:	db01      	blt.n	a26e <_svfiprintf_r+0xf6>
    a26a:	9207      	str	r2, [sp, #28]
    a26c:	e004      	b.n	a278 <_svfiprintf_r+0x100>
    a26e:	4252      	negs	r2, r2
    a270:	f043 0302 	orr.w	r3, r3, #2
    a274:	9207      	str	r2, [sp, #28]
    a276:	9304      	str	r3, [sp, #16]
    a278:	783b      	ldrb	r3, [r7, #0]
    a27a:	2b2e      	cmp	r3, #46	; 0x2e
    a27c:	d10e      	bne.n	a29c <_svfiprintf_r+0x124>
    a27e:	787b      	ldrb	r3, [r7, #1]
    a280:	2b2a      	cmp	r3, #42	; 0x2a
    a282:	f107 0101 	add.w	r1, r7, #1
    a286:	d132      	bne.n	a2ee <_svfiprintf_r+0x176>
    a288:	9b03      	ldr	r3, [sp, #12]
    a28a:	1d1a      	adds	r2, r3, #4
    a28c:	681b      	ldr	r3, [r3, #0]
    a28e:	9203      	str	r2, [sp, #12]
    a290:	2b00      	cmp	r3, #0
    a292:	bfb8      	it	lt
    a294:	f04f 33ff 	movlt.w	r3, #4294967295
    a298:	3702      	adds	r7, #2
    a29a:	9305      	str	r3, [sp, #20]
    a29c:	4c2c      	ldr	r4, [pc, #176]	; (a350 <_svfiprintf_r+0x1d8>)
    a29e:	7839      	ldrb	r1, [r7, #0]
    a2a0:	2203      	movs	r2, #3
    a2a2:	4620      	mov	r0, r4
    a2a4:	f001 f84c 	bl	b340 <memchr>
    a2a8:	b138      	cbz	r0, a2ba <_svfiprintf_r+0x142>
    a2aa:	2340      	movs	r3, #64	; 0x40
    a2ac:	1b00      	subs	r0, r0, r4
    a2ae:	fa03 f000 	lsl.w	r0, r3, r0
    a2b2:	9b04      	ldr	r3, [sp, #16]
    a2b4:	4303      	orrs	r3, r0
    a2b6:	9304      	str	r3, [sp, #16]
    a2b8:	3701      	adds	r7, #1
    a2ba:	7839      	ldrb	r1, [r7, #0]
    a2bc:	4825      	ldr	r0, [pc, #148]	; (a354 <_svfiprintf_r+0x1dc>)
    a2be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    a2c2:	2206      	movs	r2, #6
    a2c4:	1c7e      	adds	r6, r7, #1
    a2c6:	f001 f83b 	bl	b340 <memchr>
    a2ca:	2800      	cmp	r0, #0
    a2cc:	d035      	beq.n	a33a <_svfiprintf_r+0x1c2>
    a2ce:	4b22      	ldr	r3, [pc, #136]	; (a358 <_svfiprintf_r+0x1e0>)
    a2d0:	b9fb      	cbnz	r3, a312 <_svfiprintf_r+0x19a>
    a2d2:	9b03      	ldr	r3, [sp, #12]
    a2d4:	3307      	adds	r3, #7
    a2d6:	f023 0307 	bic.w	r3, r3, #7
    a2da:	3308      	adds	r3, #8
    a2dc:	9303      	str	r3, [sp, #12]
    a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2e0:	444b      	add	r3, r9
    a2e2:	9309      	str	r3, [sp, #36]	; 0x24
    a2e4:	e76c      	b.n	a1c0 <_svfiprintf_r+0x48>
    a2e6:	fb00 3202 	mla	r2, r0, r2, r3
    a2ea:	2101      	movs	r1, #1
    a2ec:	e7a3      	b.n	a236 <_svfiprintf_r+0xbe>
    a2ee:	2300      	movs	r3, #0
    a2f0:	9305      	str	r3, [sp, #20]
    a2f2:	4618      	mov	r0, r3
    a2f4:	240a      	movs	r4, #10
    a2f6:	460f      	mov	r7, r1
    a2f8:	3101      	adds	r1, #1
    a2fa:	783a      	ldrb	r2, [r7, #0]
    a2fc:	3a30      	subs	r2, #48	; 0x30
    a2fe:	2a09      	cmp	r2, #9
    a300:	d903      	bls.n	a30a <_svfiprintf_r+0x192>
    a302:	2b00      	cmp	r3, #0
    a304:	d0ca      	beq.n	a29c <_svfiprintf_r+0x124>
    a306:	9005      	str	r0, [sp, #20]
    a308:	e7c8      	b.n	a29c <_svfiprintf_r+0x124>
    a30a:	fb04 2000 	mla	r0, r4, r0, r2
    a30e:	2301      	movs	r3, #1
    a310:	e7f1      	b.n	a2f6 <_svfiprintf_r+0x17e>
    a312:	ab03      	add	r3, sp, #12
    a314:	9300      	str	r3, [sp, #0]
    a316:	462a      	mov	r2, r5
    a318:	4b10      	ldr	r3, [pc, #64]	; (a35c <_svfiprintf_r+0x1e4>)
    a31a:	a904      	add	r1, sp, #16
    a31c:	4640      	mov	r0, r8
    a31e:	f3af 8000 	nop.w
    a322:	f1b0 3fff 	cmp.w	r0, #4294967295
    a326:	4681      	mov	r9, r0
    a328:	d1d9      	bne.n	a2de <_svfiprintf_r+0x166>
    a32a:	89ab      	ldrh	r3, [r5, #12]
    a32c:	065b      	lsls	r3, r3, #25
    a32e:	f53f af38 	bmi.w	a1a2 <_svfiprintf_r+0x2a>
    a332:	9809      	ldr	r0, [sp, #36]	; 0x24
    a334:	b01d      	add	sp, #116	; 0x74
    a336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a33a:	ab03      	add	r3, sp, #12
    a33c:	9300      	str	r3, [sp, #0]
    a33e:	462a      	mov	r2, r5
    a340:	4b06      	ldr	r3, [pc, #24]	; (a35c <_svfiprintf_r+0x1e4>)
    a342:	a904      	add	r1, sp, #16
    a344:	4640      	mov	r0, r8
    a346:	f000 f9bf 	bl	a6c8 <_printf_i>
    a34a:	e7ea      	b.n	a322 <_svfiprintf_r+0x1aa>
    a34c:	0000ce34 	.word	0x0000ce34
    a350:	0000ce3a 	.word	0x0000ce3a
    a354:	0000ce3e 	.word	0x0000ce3e
    a358:	00000000 	.word	0x00000000
    a35c:	0000a0c1 	.word	0x0000a0c1

0000a360 <__sfputc_r>:
    a360:	6893      	ldr	r3, [r2, #8]
    a362:	3b01      	subs	r3, #1
    a364:	2b00      	cmp	r3, #0
    a366:	b410      	push	{r4}
    a368:	6093      	str	r3, [r2, #8]
    a36a:	da08      	bge.n	a37e <__sfputc_r+0x1e>
    a36c:	6994      	ldr	r4, [r2, #24]
    a36e:	42a3      	cmp	r3, r4
    a370:	db02      	blt.n	a378 <__sfputc_r+0x18>
    a372:	b2cb      	uxtb	r3, r1
    a374:	2b0a      	cmp	r3, #10
    a376:	d102      	bne.n	a37e <__sfputc_r+0x1e>
    a378:	bc10      	pop	{r4}
    a37a:	f7fe be0f 	b.w	8f9c <__swbuf_r>
    a37e:	6813      	ldr	r3, [r2, #0]
    a380:	1c58      	adds	r0, r3, #1
    a382:	6010      	str	r0, [r2, #0]
    a384:	7019      	strb	r1, [r3, #0]
    a386:	b2c8      	uxtb	r0, r1
    a388:	bc10      	pop	{r4}
    a38a:	4770      	bx	lr

0000a38c <__sfputs_r>:
    a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a38e:	4606      	mov	r6, r0
    a390:	460f      	mov	r7, r1
    a392:	4614      	mov	r4, r2
    a394:	18d5      	adds	r5, r2, r3
    a396:	42ac      	cmp	r4, r5
    a398:	d101      	bne.n	a39e <__sfputs_r+0x12>
    a39a:	2000      	movs	r0, #0
    a39c:	e007      	b.n	a3ae <__sfputs_r+0x22>
    a39e:	463a      	mov	r2, r7
    a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
    a3a4:	4630      	mov	r0, r6
    a3a6:	f7ff ffdb 	bl	a360 <__sfputc_r>
    a3aa:	1c43      	adds	r3, r0, #1
    a3ac:	d1f3      	bne.n	a396 <__sfputs_r+0xa>
    a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a3b0 <_vfiprintf_r>:
    a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3b4:	b09d      	sub	sp, #116	; 0x74
    a3b6:	460c      	mov	r4, r1
    a3b8:	4617      	mov	r7, r2
    a3ba:	9303      	str	r3, [sp, #12]
    a3bc:	4606      	mov	r6, r0
    a3be:	b118      	cbz	r0, a3c8 <_vfiprintf_r+0x18>
    a3c0:	6983      	ldr	r3, [r0, #24]
    a3c2:	b90b      	cbnz	r3, a3c8 <_vfiprintf_r+0x18>
    a3c4:	f7fd fb44 	bl	7a50 <__sinit>
    a3c8:	4b7c      	ldr	r3, [pc, #496]	; (a5bc <_vfiprintf_r+0x20c>)
    a3ca:	429c      	cmp	r4, r3
    a3cc:	d157      	bne.n	a47e <_vfiprintf_r+0xce>
    a3ce:	6874      	ldr	r4, [r6, #4]
    a3d0:	89a3      	ldrh	r3, [r4, #12]
    a3d2:	0718      	lsls	r0, r3, #28
    a3d4:	d55d      	bpl.n	a492 <_vfiprintf_r+0xe2>
    a3d6:	6923      	ldr	r3, [r4, #16]
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d05a      	beq.n	a492 <_vfiprintf_r+0xe2>
    a3dc:	2300      	movs	r3, #0
    a3de:	9309      	str	r3, [sp, #36]	; 0x24
    a3e0:	2320      	movs	r3, #32
    a3e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a3e6:	2330      	movs	r3, #48	; 0x30
    a3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a3ec:	f04f 0b01 	mov.w	fp, #1
    a3f0:	46b8      	mov	r8, r7
    a3f2:	4645      	mov	r5, r8
    a3f4:	f815 3b01 	ldrb.w	r3, [r5], #1
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d155      	bne.n	a4a8 <_vfiprintf_r+0xf8>
    a3fc:	ebb8 0a07 	subs.w	sl, r8, r7
    a400:	d00b      	beq.n	a41a <_vfiprintf_r+0x6a>
    a402:	4653      	mov	r3, sl
    a404:	463a      	mov	r2, r7
    a406:	4621      	mov	r1, r4
    a408:	4630      	mov	r0, r6
    a40a:	f7ff ffbf 	bl	a38c <__sfputs_r>
    a40e:	3001      	adds	r0, #1
    a410:	f000 80c4 	beq.w	a59c <_vfiprintf_r+0x1ec>
    a414:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a416:	4453      	add	r3, sl
    a418:	9309      	str	r3, [sp, #36]	; 0x24
    a41a:	f898 3000 	ldrb.w	r3, [r8]
    a41e:	2b00      	cmp	r3, #0
    a420:	f000 80bc 	beq.w	a59c <_vfiprintf_r+0x1ec>
    a424:	2300      	movs	r3, #0
    a426:	f04f 32ff 	mov.w	r2, #4294967295
    a42a:	9304      	str	r3, [sp, #16]
    a42c:	9307      	str	r3, [sp, #28]
    a42e:	9205      	str	r2, [sp, #20]
    a430:	9306      	str	r3, [sp, #24]
    a432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a436:	931a      	str	r3, [sp, #104]	; 0x68
    a438:	2205      	movs	r2, #5
    a43a:	7829      	ldrb	r1, [r5, #0]
    a43c:	4860      	ldr	r0, [pc, #384]	; (a5c0 <_vfiprintf_r+0x210>)
    a43e:	f000 ff7f 	bl	b340 <memchr>
    a442:	f105 0801 	add.w	r8, r5, #1
    a446:	9b04      	ldr	r3, [sp, #16]
    a448:	2800      	cmp	r0, #0
    a44a:	d131      	bne.n	a4b0 <_vfiprintf_r+0x100>
    a44c:	06d9      	lsls	r1, r3, #27
    a44e:	bf44      	itt	mi
    a450:	2220      	movmi	r2, #32
    a452:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a456:	071a      	lsls	r2, r3, #28
    a458:	bf44      	itt	mi
    a45a:	222b      	movmi	r2, #43	; 0x2b
    a45c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a460:	782a      	ldrb	r2, [r5, #0]
    a462:	2a2a      	cmp	r2, #42	; 0x2a
    a464:	d02c      	beq.n	a4c0 <_vfiprintf_r+0x110>
    a466:	9a07      	ldr	r2, [sp, #28]
    a468:	2100      	movs	r1, #0
    a46a:	200a      	movs	r0, #10
    a46c:	46a8      	mov	r8, r5
    a46e:	3501      	adds	r5, #1
    a470:	f898 3000 	ldrb.w	r3, [r8]
    a474:	3b30      	subs	r3, #48	; 0x30
    a476:	2b09      	cmp	r3, #9
    a478:	d96d      	bls.n	a556 <_vfiprintf_r+0x1a6>
    a47a:	b371      	cbz	r1, a4da <_vfiprintf_r+0x12a>
    a47c:	e026      	b.n	a4cc <_vfiprintf_r+0x11c>
    a47e:	4b51      	ldr	r3, [pc, #324]	; (a5c4 <_vfiprintf_r+0x214>)
    a480:	429c      	cmp	r4, r3
    a482:	d101      	bne.n	a488 <_vfiprintf_r+0xd8>
    a484:	68b4      	ldr	r4, [r6, #8]
    a486:	e7a3      	b.n	a3d0 <_vfiprintf_r+0x20>
    a488:	4b4f      	ldr	r3, [pc, #316]	; (a5c8 <_vfiprintf_r+0x218>)
    a48a:	429c      	cmp	r4, r3
    a48c:	bf08      	it	eq
    a48e:	68f4      	ldreq	r4, [r6, #12]
    a490:	e79e      	b.n	a3d0 <_vfiprintf_r+0x20>
    a492:	4621      	mov	r1, r4
    a494:	4630      	mov	r0, r6
    a496:	f7fe fdf3 	bl	9080 <__swsetup_r>
    a49a:	2800      	cmp	r0, #0
    a49c:	d09e      	beq.n	a3dc <_vfiprintf_r+0x2c>
    a49e:	f04f 30ff 	mov.w	r0, #4294967295
    a4a2:	b01d      	add	sp, #116	; 0x74
    a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4a8:	2b25      	cmp	r3, #37	; 0x25
    a4aa:	d0a7      	beq.n	a3fc <_vfiprintf_r+0x4c>
    a4ac:	46a8      	mov	r8, r5
    a4ae:	e7a0      	b.n	a3f2 <_vfiprintf_r+0x42>
    a4b0:	4a43      	ldr	r2, [pc, #268]	; (a5c0 <_vfiprintf_r+0x210>)
    a4b2:	1a80      	subs	r0, r0, r2
    a4b4:	fa0b f000 	lsl.w	r0, fp, r0
    a4b8:	4318      	orrs	r0, r3
    a4ba:	9004      	str	r0, [sp, #16]
    a4bc:	4645      	mov	r5, r8
    a4be:	e7bb      	b.n	a438 <_vfiprintf_r+0x88>
    a4c0:	9a03      	ldr	r2, [sp, #12]
    a4c2:	1d11      	adds	r1, r2, #4
    a4c4:	6812      	ldr	r2, [r2, #0]
    a4c6:	9103      	str	r1, [sp, #12]
    a4c8:	2a00      	cmp	r2, #0
    a4ca:	db01      	blt.n	a4d0 <_vfiprintf_r+0x120>
    a4cc:	9207      	str	r2, [sp, #28]
    a4ce:	e004      	b.n	a4da <_vfiprintf_r+0x12a>
    a4d0:	4252      	negs	r2, r2
    a4d2:	f043 0302 	orr.w	r3, r3, #2
    a4d6:	9207      	str	r2, [sp, #28]
    a4d8:	9304      	str	r3, [sp, #16]
    a4da:	f898 3000 	ldrb.w	r3, [r8]
    a4de:	2b2e      	cmp	r3, #46	; 0x2e
    a4e0:	d110      	bne.n	a504 <_vfiprintf_r+0x154>
    a4e2:	f898 3001 	ldrb.w	r3, [r8, #1]
    a4e6:	2b2a      	cmp	r3, #42	; 0x2a
    a4e8:	f108 0101 	add.w	r1, r8, #1
    a4ec:	d137      	bne.n	a55e <_vfiprintf_r+0x1ae>
    a4ee:	9b03      	ldr	r3, [sp, #12]
    a4f0:	1d1a      	adds	r2, r3, #4
    a4f2:	681b      	ldr	r3, [r3, #0]
    a4f4:	9203      	str	r2, [sp, #12]
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	bfb8      	it	lt
    a4fa:	f04f 33ff 	movlt.w	r3, #4294967295
    a4fe:	f108 0802 	add.w	r8, r8, #2
    a502:	9305      	str	r3, [sp, #20]
    a504:	4d31      	ldr	r5, [pc, #196]	; (a5cc <_vfiprintf_r+0x21c>)
    a506:	f898 1000 	ldrb.w	r1, [r8]
    a50a:	2203      	movs	r2, #3
    a50c:	4628      	mov	r0, r5
    a50e:	f000 ff17 	bl	b340 <memchr>
    a512:	b140      	cbz	r0, a526 <_vfiprintf_r+0x176>
    a514:	2340      	movs	r3, #64	; 0x40
    a516:	1b40      	subs	r0, r0, r5
    a518:	fa03 f000 	lsl.w	r0, r3, r0
    a51c:	9b04      	ldr	r3, [sp, #16]
    a51e:	4303      	orrs	r3, r0
    a520:	9304      	str	r3, [sp, #16]
    a522:	f108 0801 	add.w	r8, r8, #1
    a526:	f898 1000 	ldrb.w	r1, [r8]
    a52a:	4829      	ldr	r0, [pc, #164]	; (a5d0 <_vfiprintf_r+0x220>)
    a52c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    a530:	2206      	movs	r2, #6
    a532:	f108 0701 	add.w	r7, r8, #1
    a536:	f000 ff03 	bl	b340 <memchr>
    a53a:	2800      	cmp	r0, #0
    a53c:	d034      	beq.n	a5a8 <_vfiprintf_r+0x1f8>
    a53e:	4b25      	ldr	r3, [pc, #148]	; (a5d4 <_vfiprintf_r+0x224>)
    a540:	bb03      	cbnz	r3, a584 <_vfiprintf_r+0x1d4>
    a542:	9b03      	ldr	r3, [sp, #12]
    a544:	3307      	adds	r3, #7
    a546:	f023 0307 	bic.w	r3, r3, #7
    a54a:	3308      	adds	r3, #8
    a54c:	9303      	str	r3, [sp, #12]
    a54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a550:	444b      	add	r3, r9
    a552:	9309      	str	r3, [sp, #36]	; 0x24
    a554:	e74c      	b.n	a3f0 <_vfiprintf_r+0x40>
    a556:	fb00 3202 	mla	r2, r0, r2, r3
    a55a:	2101      	movs	r1, #1
    a55c:	e786      	b.n	a46c <_vfiprintf_r+0xbc>
    a55e:	2300      	movs	r3, #0
    a560:	9305      	str	r3, [sp, #20]
    a562:	4618      	mov	r0, r3
    a564:	250a      	movs	r5, #10
    a566:	4688      	mov	r8, r1
    a568:	3101      	adds	r1, #1
    a56a:	f898 2000 	ldrb.w	r2, [r8]
    a56e:	3a30      	subs	r2, #48	; 0x30
    a570:	2a09      	cmp	r2, #9
    a572:	d903      	bls.n	a57c <_vfiprintf_r+0x1cc>
    a574:	2b00      	cmp	r3, #0
    a576:	d0c5      	beq.n	a504 <_vfiprintf_r+0x154>
    a578:	9005      	str	r0, [sp, #20]
    a57a:	e7c3      	b.n	a504 <_vfiprintf_r+0x154>
    a57c:	fb05 2000 	mla	r0, r5, r0, r2
    a580:	2301      	movs	r3, #1
    a582:	e7f0      	b.n	a566 <_vfiprintf_r+0x1b6>
    a584:	ab03      	add	r3, sp, #12
    a586:	9300      	str	r3, [sp, #0]
    a588:	4622      	mov	r2, r4
    a58a:	4b13      	ldr	r3, [pc, #76]	; (a5d8 <_vfiprintf_r+0x228>)
    a58c:	a904      	add	r1, sp, #16
    a58e:	4630      	mov	r0, r6
    a590:	f3af 8000 	nop.w
    a594:	f1b0 3fff 	cmp.w	r0, #4294967295
    a598:	4681      	mov	r9, r0
    a59a:	d1d8      	bne.n	a54e <_vfiprintf_r+0x19e>
    a59c:	89a3      	ldrh	r3, [r4, #12]
    a59e:	065b      	lsls	r3, r3, #25
    a5a0:	f53f af7d 	bmi.w	a49e <_vfiprintf_r+0xee>
    a5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    a5a6:	e77c      	b.n	a4a2 <_vfiprintf_r+0xf2>
    a5a8:	ab03      	add	r3, sp, #12
    a5aa:	9300      	str	r3, [sp, #0]
    a5ac:	4622      	mov	r2, r4
    a5ae:	4b0a      	ldr	r3, [pc, #40]	; (a5d8 <_vfiprintf_r+0x228>)
    a5b0:	a904      	add	r1, sp, #16
    a5b2:	4630      	mov	r0, r6
    a5b4:	f000 f888 	bl	a6c8 <_printf_i>
    a5b8:	e7ec      	b.n	a594 <_vfiprintf_r+0x1e4>
    a5ba:	bf00      	nop
    a5bc:	0000cb84 	.word	0x0000cb84
    a5c0:	0000ce34 	.word	0x0000ce34
    a5c4:	0000cba4 	.word	0x0000cba4
    a5c8:	0000cb64 	.word	0x0000cb64
    a5cc:	0000ce3a 	.word	0x0000ce3a
    a5d0:	0000ce3e 	.word	0x0000ce3e
    a5d4:	00000000 	.word	0x00000000
    a5d8:	0000a38d 	.word	0x0000a38d

0000a5dc <_printf_common>:
    a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5e0:	4691      	mov	r9, r2
    a5e2:	461f      	mov	r7, r3
    a5e4:	688a      	ldr	r2, [r1, #8]
    a5e6:	690b      	ldr	r3, [r1, #16]
    a5e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a5ec:	4293      	cmp	r3, r2
    a5ee:	bfb8      	it	lt
    a5f0:	4613      	movlt	r3, r2
    a5f2:	f8c9 3000 	str.w	r3, [r9]
    a5f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    a5fa:	4606      	mov	r6, r0
    a5fc:	460c      	mov	r4, r1
    a5fe:	b112      	cbz	r2, a606 <_printf_common+0x2a>
    a600:	3301      	adds	r3, #1
    a602:	f8c9 3000 	str.w	r3, [r9]
    a606:	6823      	ldr	r3, [r4, #0]
    a608:	0699      	lsls	r1, r3, #26
    a60a:	bf42      	ittt	mi
    a60c:	f8d9 3000 	ldrmi.w	r3, [r9]
    a610:	3302      	addmi	r3, #2
    a612:	f8c9 3000 	strmi.w	r3, [r9]
    a616:	6825      	ldr	r5, [r4, #0]
    a618:	f015 0506 	ands.w	r5, r5, #6
    a61c:	d107      	bne.n	a62e <_printf_common+0x52>
    a61e:	f104 0a19 	add.w	sl, r4, #25
    a622:	68e3      	ldr	r3, [r4, #12]
    a624:	f8d9 2000 	ldr.w	r2, [r9]
    a628:	1a9b      	subs	r3, r3, r2
    a62a:	429d      	cmp	r5, r3
    a62c:	db29      	blt.n	a682 <_printf_common+0xa6>
    a62e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    a632:	6822      	ldr	r2, [r4, #0]
    a634:	3300      	adds	r3, #0
    a636:	bf18      	it	ne
    a638:	2301      	movne	r3, #1
    a63a:	0692      	lsls	r2, r2, #26
    a63c:	d42e      	bmi.n	a69c <_printf_common+0xc0>
    a63e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    a642:	4639      	mov	r1, r7
    a644:	4630      	mov	r0, r6
    a646:	47c0      	blx	r8
    a648:	3001      	adds	r0, #1
    a64a:	d021      	beq.n	a690 <_printf_common+0xb4>
    a64c:	6823      	ldr	r3, [r4, #0]
    a64e:	68e5      	ldr	r5, [r4, #12]
    a650:	f8d9 2000 	ldr.w	r2, [r9]
    a654:	f003 0306 	and.w	r3, r3, #6
    a658:	2b04      	cmp	r3, #4
    a65a:	bf08      	it	eq
    a65c:	1aad      	subeq	r5, r5, r2
    a65e:	68a3      	ldr	r3, [r4, #8]
    a660:	6922      	ldr	r2, [r4, #16]
    a662:	bf0c      	ite	eq
    a664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    a668:	2500      	movne	r5, #0
    a66a:	4293      	cmp	r3, r2
    a66c:	bfc4      	itt	gt
    a66e:	1a9b      	subgt	r3, r3, r2
    a670:	18ed      	addgt	r5, r5, r3
    a672:	f04f 0900 	mov.w	r9, #0
    a676:	341a      	adds	r4, #26
    a678:	454d      	cmp	r5, r9
    a67a:	d11b      	bne.n	a6b4 <_printf_common+0xd8>
    a67c:	2000      	movs	r0, #0
    a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a682:	2301      	movs	r3, #1
    a684:	4652      	mov	r2, sl
    a686:	4639      	mov	r1, r7
    a688:	4630      	mov	r0, r6
    a68a:	47c0      	blx	r8
    a68c:	3001      	adds	r0, #1
    a68e:	d103      	bne.n	a698 <_printf_common+0xbc>
    a690:	f04f 30ff 	mov.w	r0, #4294967295
    a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a698:	3501      	adds	r5, #1
    a69a:	e7c2      	b.n	a622 <_printf_common+0x46>
    a69c:	18e1      	adds	r1, r4, r3
    a69e:	1c5a      	adds	r2, r3, #1
    a6a0:	2030      	movs	r0, #48	; 0x30
    a6a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    a6a6:	4422      	add	r2, r4
    a6a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    a6ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    a6b0:	3302      	adds	r3, #2
    a6b2:	e7c4      	b.n	a63e <_printf_common+0x62>
    a6b4:	2301      	movs	r3, #1
    a6b6:	4622      	mov	r2, r4
    a6b8:	4639      	mov	r1, r7
    a6ba:	4630      	mov	r0, r6
    a6bc:	47c0      	blx	r8
    a6be:	3001      	adds	r0, #1
    a6c0:	d0e6      	beq.n	a690 <_printf_common+0xb4>
    a6c2:	f109 0901 	add.w	r9, r9, #1
    a6c6:	e7d7      	b.n	a678 <_printf_common+0x9c>

0000a6c8 <_printf_i>:
    a6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a6cc:	4617      	mov	r7, r2
    a6ce:	7e0a      	ldrb	r2, [r1, #24]
    a6d0:	b085      	sub	sp, #20
    a6d2:	2a6e      	cmp	r2, #110	; 0x6e
    a6d4:	4698      	mov	r8, r3
    a6d6:	4606      	mov	r6, r0
    a6d8:	460c      	mov	r4, r1
    a6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a6dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    a6e0:	f000 80bc 	beq.w	a85c <_printf_i+0x194>
    a6e4:	d81a      	bhi.n	a71c <_printf_i+0x54>
    a6e6:	2a63      	cmp	r2, #99	; 0x63
    a6e8:	d02e      	beq.n	a748 <_printf_i+0x80>
    a6ea:	d80a      	bhi.n	a702 <_printf_i+0x3a>
    a6ec:	2a00      	cmp	r2, #0
    a6ee:	f000 80c8 	beq.w	a882 <_printf_i+0x1ba>
    a6f2:	2a58      	cmp	r2, #88	; 0x58
    a6f4:	f000 808a 	beq.w	a80c <_printf_i+0x144>
    a6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    a6fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    a700:	e02a      	b.n	a758 <_printf_i+0x90>
    a702:	2a64      	cmp	r2, #100	; 0x64
    a704:	d001      	beq.n	a70a <_printf_i+0x42>
    a706:	2a69      	cmp	r2, #105	; 0x69
    a708:	d1f6      	bne.n	a6f8 <_printf_i+0x30>
    a70a:	6821      	ldr	r1, [r4, #0]
    a70c:	681a      	ldr	r2, [r3, #0]
    a70e:	f011 0f80 	tst.w	r1, #128	; 0x80
    a712:	d023      	beq.n	a75c <_printf_i+0x94>
    a714:	1d11      	adds	r1, r2, #4
    a716:	6019      	str	r1, [r3, #0]
    a718:	6813      	ldr	r3, [r2, #0]
    a71a:	e027      	b.n	a76c <_printf_i+0xa4>
    a71c:	2a73      	cmp	r2, #115	; 0x73
    a71e:	f000 80b4 	beq.w	a88a <_printf_i+0x1c2>
    a722:	d808      	bhi.n	a736 <_printf_i+0x6e>
    a724:	2a6f      	cmp	r2, #111	; 0x6f
    a726:	d02a      	beq.n	a77e <_printf_i+0xb6>
    a728:	2a70      	cmp	r2, #112	; 0x70
    a72a:	d1e5      	bne.n	a6f8 <_printf_i+0x30>
    a72c:	680a      	ldr	r2, [r1, #0]
    a72e:	f042 0220 	orr.w	r2, r2, #32
    a732:	600a      	str	r2, [r1, #0]
    a734:	e003      	b.n	a73e <_printf_i+0x76>
    a736:	2a75      	cmp	r2, #117	; 0x75
    a738:	d021      	beq.n	a77e <_printf_i+0xb6>
    a73a:	2a78      	cmp	r2, #120	; 0x78
    a73c:	d1dc      	bne.n	a6f8 <_printf_i+0x30>
    a73e:	2278      	movs	r2, #120	; 0x78
    a740:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    a744:	496e      	ldr	r1, [pc, #440]	; (a900 <_printf_i+0x238>)
    a746:	e064      	b.n	a812 <_printf_i+0x14a>
    a748:	681a      	ldr	r2, [r3, #0]
    a74a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    a74e:	1d11      	adds	r1, r2, #4
    a750:	6019      	str	r1, [r3, #0]
    a752:	6813      	ldr	r3, [r2, #0]
    a754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    a758:	2301      	movs	r3, #1
    a75a:	e0a3      	b.n	a8a4 <_printf_i+0x1dc>
    a75c:	f011 0f40 	tst.w	r1, #64	; 0x40
    a760:	f102 0104 	add.w	r1, r2, #4
    a764:	6019      	str	r1, [r3, #0]
    a766:	d0d7      	beq.n	a718 <_printf_i+0x50>
    a768:	f9b2 3000 	ldrsh.w	r3, [r2]
    a76c:	2b00      	cmp	r3, #0
    a76e:	da03      	bge.n	a778 <_printf_i+0xb0>
    a770:	222d      	movs	r2, #45	; 0x2d
    a772:	425b      	negs	r3, r3
    a774:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    a778:	4962      	ldr	r1, [pc, #392]	; (a904 <_printf_i+0x23c>)
    a77a:	220a      	movs	r2, #10
    a77c:	e017      	b.n	a7ae <_printf_i+0xe6>
    a77e:	6820      	ldr	r0, [r4, #0]
    a780:	6819      	ldr	r1, [r3, #0]
    a782:	f010 0f80 	tst.w	r0, #128	; 0x80
    a786:	d003      	beq.n	a790 <_printf_i+0xc8>
    a788:	1d08      	adds	r0, r1, #4
    a78a:	6018      	str	r0, [r3, #0]
    a78c:	680b      	ldr	r3, [r1, #0]
    a78e:	e006      	b.n	a79e <_printf_i+0xd6>
    a790:	f010 0f40 	tst.w	r0, #64	; 0x40
    a794:	f101 0004 	add.w	r0, r1, #4
    a798:	6018      	str	r0, [r3, #0]
    a79a:	d0f7      	beq.n	a78c <_printf_i+0xc4>
    a79c:	880b      	ldrh	r3, [r1, #0]
    a79e:	4959      	ldr	r1, [pc, #356]	; (a904 <_printf_i+0x23c>)
    a7a0:	2a6f      	cmp	r2, #111	; 0x6f
    a7a2:	bf14      	ite	ne
    a7a4:	220a      	movne	r2, #10
    a7a6:	2208      	moveq	r2, #8
    a7a8:	2000      	movs	r0, #0
    a7aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    a7ae:	6865      	ldr	r5, [r4, #4]
    a7b0:	60a5      	str	r5, [r4, #8]
    a7b2:	2d00      	cmp	r5, #0
    a7b4:	f2c0 809c 	blt.w	a8f0 <_printf_i+0x228>
    a7b8:	6820      	ldr	r0, [r4, #0]
    a7ba:	f020 0004 	bic.w	r0, r0, #4
    a7be:	6020      	str	r0, [r4, #0]
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d13f      	bne.n	a844 <_printf_i+0x17c>
    a7c4:	2d00      	cmp	r5, #0
    a7c6:	f040 8095 	bne.w	a8f4 <_printf_i+0x22c>
    a7ca:	4675      	mov	r5, lr
    a7cc:	2a08      	cmp	r2, #8
    a7ce:	d10b      	bne.n	a7e8 <_printf_i+0x120>
    a7d0:	6823      	ldr	r3, [r4, #0]
    a7d2:	07da      	lsls	r2, r3, #31
    a7d4:	d508      	bpl.n	a7e8 <_printf_i+0x120>
    a7d6:	6923      	ldr	r3, [r4, #16]
    a7d8:	6862      	ldr	r2, [r4, #4]
    a7da:	429a      	cmp	r2, r3
    a7dc:	bfde      	ittt	le
    a7de:	2330      	movle	r3, #48	; 0x30
    a7e0:	f805 3c01 	strble.w	r3, [r5, #-1]
    a7e4:	f105 35ff 	addle.w	r5, r5, #4294967295
    a7e8:	ebae 0305 	sub.w	r3, lr, r5
    a7ec:	6123      	str	r3, [r4, #16]
    a7ee:	f8cd 8000 	str.w	r8, [sp]
    a7f2:	463b      	mov	r3, r7
    a7f4:	aa03      	add	r2, sp, #12
    a7f6:	4621      	mov	r1, r4
    a7f8:	4630      	mov	r0, r6
    a7fa:	f7ff feef 	bl	a5dc <_printf_common>
    a7fe:	3001      	adds	r0, #1
    a800:	d155      	bne.n	a8ae <_printf_i+0x1e6>
    a802:	f04f 30ff 	mov.w	r0, #4294967295
    a806:	b005      	add	sp, #20
    a808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a80c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    a810:	493c      	ldr	r1, [pc, #240]	; (a904 <_printf_i+0x23c>)
    a812:	6822      	ldr	r2, [r4, #0]
    a814:	6818      	ldr	r0, [r3, #0]
    a816:	f012 0f80 	tst.w	r2, #128	; 0x80
    a81a:	f100 0504 	add.w	r5, r0, #4
    a81e:	601d      	str	r5, [r3, #0]
    a820:	d001      	beq.n	a826 <_printf_i+0x15e>
    a822:	6803      	ldr	r3, [r0, #0]
    a824:	e002      	b.n	a82c <_printf_i+0x164>
    a826:	0655      	lsls	r5, r2, #25
    a828:	d5fb      	bpl.n	a822 <_printf_i+0x15a>
    a82a:	8803      	ldrh	r3, [r0, #0]
    a82c:	07d0      	lsls	r0, r2, #31
    a82e:	bf44      	itt	mi
    a830:	f042 0220 	orrmi.w	r2, r2, #32
    a834:	6022      	strmi	r2, [r4, #0]
    a836:	b91b      	cbnz	r3, a840 <_printf_i+0x178>
    a838:	6822      	ldr	r2, [r4, #0]
    a83a:	f022 0220 	bic.w	r2, r2, #32
    a83e:	6022      	str	r2, [r4, #0]
    a840:	2210      	movs	r2, #16
    a842:	e7b1      	b.n	a7a8 <_printf_i+0xe0>
    a844:	4675      	mov	r5, lr
    a846:	fbb3 f0f2 	udiv	r0, r3, r2
    a84a:	fb02 3310 	mls	r3, r2, r0, r3
    a84e:	5ccb      	ldrb	r3, [r1, r3]
    a850:	f805 3d01 	strb.w	r3, [r5, #-1]!
    a854:	4603      	mov	r3, r0
    a856:	2800      	cmp	r0, #0
    a858:	d1f5      	bne.n	a846 <_printf_i+0x17e>
    a85a:	e7b7      	b.n	a7cc <_printf_i+0x104>
    a85c:	6808      	ldr	r0, [r1, #0]
    a85e:	681a      	ldr	r2, [r3, #0]
    a860:	6949      	ldr	r1, [r1, #20]
    a862:	f010 0f80 	tst.w	r0, #128	; 0x80
    a866:	d004      	beq.n	a872 <_printf_i+0x1aa>
    a868:	1d10      	adds	r0, r2, #4
    a86a:	6018      	str	r0, [r3, #0]
    a86c:	6813      	ldr	r3, [r2, #0]
    a86e:	6019      	str	r1, [r3, #0]
    a870:	e007      	b.n	a882 <_printf_i+0x1ba>
    a872:	f010 0f40 	tst.w	r0, #64	; 0x40
    a876:	f102 0004 	add.w	r0, r2, #4
    a87a:	6018      	str	r0, [r3, #0]
    a87c:	6813      	ldr	r3, [r2, #0]
    a87e:	d0f6      	beq.n	a86e <_printf_i+0x1a6>
    a880:	8019      	strh	r1, [r3, #0]
    a882:	2300      	movs	r3, #0
    a884:	6123      	str	r3, [r4, #16]
    a886:	4675      	mov	r5, lr
    a888:	e7b1      	b.n	a7ee <_printf_i+0x126>
    a88a:	681a      	ldr	r2, [r3, #0]
    a88c:	1d11      	adds	r1, r2, #4
    a88e:	6019      	str	r1, [r3, #0]
    a890:	6815      	ldr	r5, [r2, #0]
    a892:	6862      	ldr	r2, [r4, #4]
    a894:	2100      	movs	r1, #0
    a896:	4628      	mov	r0, r5
    a898:	f000 fd52 	bl	b340 <memchr>
    a89c:	b108      	cbz	r0, a8a2 <_printf_i+0x1da>
    a89e:	1b40      	subs	r0, r0, r5
    a8a0:	6060      	str	r0, [r4, #4]
    a8a2:	6863      	ldr	r3, [r4, #4]
    a8a4:	6123      	str	r3, [r4, #16]
    a8a6:	2300      	movs	r3, #0
    a8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    a8ac:	e79f      	b.n	a7ee <_printf_i+0x126>
    a8ae:	6923      	ldr	r3, [r4, #16]
    a8b0:	462a      	mov	r2, r5
    a8b2:	4639      	mov	r1, r7
    a8b4:	4630      	mov	r0, r6
    a8b6:	47c0      	blx	r8
    a8b8:	3001      	adds	r0, #1
    a8ba:	d0a2      	beq.n	a802 <_printf_i+0x13a>
    a8bc:	6823      	ldr	r3, [r4, #0]
    a8be:	079b      	lsls	r3, r3, #30
    a8c0:	d507      	bpl.n	a8d2 <_printf_i+0x20a>
    a8c2:	2500      	movs	r5, #0
    a8c4:	f104 0919 	add.w	r9, r4, #25
    a8c8:	68e3      	ldr	r3, [r4, #12]
    a8ca:	9a03      	ldr	r2, [sp, #12]
    a8cc:	1a9b      	subs	r3, r3, r2
    a8ce:	429d      	cmp	r5, r3
    a8d0:	db05      	blt.n	a8de <_printf_i+0x216>
    a8d2:	68e0      	ldr	r0, [r4, #12]
    a8d4:	9b03      	ldr	r3, [sp, #12]
    a8d6:	4298      	cmp	r0, r3
    a8d8:	bfb8      	it	lt
    a8da:	4618      	movlt	r0, r3
    a8dc:	e793      	b.n	a806 <_printf_i+0x13e>
    a8de:	2301      	movs	r3, #1
    a8e0:	464a      	mov	r2, r9
    a8e2:	4639      	mov	r1, r7
    a8e4:	4630      	mov	r0, r6
    a8e6:	47c0      	blx	r8
    a8e8:	3001      	adds	r0, #1
    a8ea:	d08a      	beq.n	a802 <_printf_i+0x13a>
    a8ec:	3501      	adds	r5, #1
    a8ee:	e7eb      	b.n	a8c8 <_printf_i+0x200>
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	d1a7      	bne.n	a844 <_printf_i+0x17c>
    a8f4:	780b      	ldrb	r3, [r1, #0]
    a8f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    a8fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
    a8fe:	e765      	b.n	a7cc <_printf_i+0x104>
    a900:	0000ce56 	.word	0x0000ce56
    a904:	0000ce45 	.word	0x0000ce45

0000a908 <__svfiscanf_r>:
    a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a90c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    a910:	f10d 080c 	add.w	r8, sp, #12
    a914:	9301      	str	r3, [sp, #4]
    a916:	2300      	movs	r3, #0
    a918:	9346      	str	r3, [sp, #280]	; 0x118
    a91a:	9347      	str	r3, [sp, #284]	; 0x11c
    a91c:	4ba0      	ldr	r3, [pc, #640]	; (aba0 <__svfiscanf_r+0x298>)
    a91e:	93a2      	str	r3, [sp, #648]	; 0x288
    a920:	f8df 9284 	ldr.w	r9, [pc, #644]	; aba8 <__svfiscanf_r+0x2a0>
    a924:	4b9f      	ldr	r3, [pc, #636]	; (aba4 <__svfiscanf_r+0x29c>)
    a926:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    a92a:	4606      	mov	r6, r0
    a92c:	460c      	mov	r4, r1
    a92e:	93a3      	str	r3, [sp, #652]	; 0x28c
    a930:	4692      	mov	sl, r2
    a932:	270a      	movs	r7, #10
    a934:	f89a 3000 	ldrb.w	r3, [sl]
    a938:	2b00      	cmp	r3, #0
    a93a:	f000 812f 	beq.w	ab9c <__svfiscanf_r+0x294>
    a93e:	f7fd f955 	bl	7bec <__locale_ctype_ptr>
    a942:	f89a b000 	ldrb.w	fp, [sl]
    a946:	4458      	add	r0, fp
    a948:	7843      	ldrb	r3, [r0, #1]
    a94a:	f013 0308 	ands.w	r3, r3, #8
    a94e:	d143      	bne.n	a9d8 <__svfiscanf_r+0xd0>
    a950:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    a954:	f10a 0501 	add.w	r5, sl, #1
    a958:	f040 8099 	bne.w	aa8e <__svfiscanf_r+0x186>
    a95c:	9345      	str	r3, [sp, #276]	; 0x114
    a95e:	9343      	str	r3, [sp, #268]	; 0x10c
    a960:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a964:	2b2a      	cmp	r3, #42	; 0x2a
    a966:	d103      	bne.n	a970 <__svfiscanf_r+0x68>
    a968:	2310      	movs	r3, #16
    a96a:	9343      	str	r3, [sp, #268]	; 0x10c
    a96c:	f10a 0502 	add.w	r5, sl, #2
    a970:	7829      	ldrb	r1, [r5, #0]
    a972:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a976:	2a09      	cmp	r2, #9
    a978:	46aa      	mov	sl, r5
    a97a:	f105 0501 	add.w	r5, r5, #1
    a97e:	d941      	bls.n	aa04 <__svfiscanf_r+0xfc>
    a980:	2203      	movs	r2, #3
    a982:	4889      	ldr	r0, [pc, #548]	; (aba8 <__svfiscanf_r+0x2a0>)
    a984:	f000 fcdc 	bl	b340 <memchr>
    a988:	b138      	cbz	r0, a99a <__svfiscanf_r+0x92>
    a98a:	eba0 0309 	sub.w	r3, r0, r9
    a98e:	2001      	movs	r0, #1
    a990:	4098      	lsls	r0, r3
    a992:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    a994:	4318      	orrs	r0, r3
    a996:	9043      	str	r0, [sp, #268]	; 0x10c
    a998:	46aa      	mov	sl, r5
    a99a:	f89a 3000 	ldrb.w	r3, [sl]
    a99e:	2b67      	cmp	r3, #103	; 0x67
    a9a0:	f10a 0501 	add.w	r5, sl, #1
    a9a4:	d84a      	bhi.n	aa3c <__svfiscanf_r+0x134>
    a9a6:	2b65      	cmp	r3, #101	; 0x65
    a9a8:	f080 80b7 	bcs.w	ab1a <__svfiscanf_r+0x212>
    a9ac:	2b47      	cmp	r3, #71	; 0x47
    a9ae:	d82f      	bhi.n	aa10 <__svfiscanf_r+0x108>
    a9b0:	2b45      	cmp	r3, #69	; 0x45
    a9b2:	f080 80b2 	bcs.w	ab1a <__svfiscanf_r+0x212>
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	f000 8082 	beq.w	aac0 <__svfiscanf_r+0x1b8>
    a9bc:	2b25      	cmp	r3, #37	; 0x25
    a9be:	d066      	beq.n	aa8e <__svfiscanf_r+0x186>
    a9c0:	2303      	movs	r3, #3
    a9c2:	9349      	str	r3, [sp, #292]	; 0x124
    a9c4:	9744      	str	r7, [sp, #272]	; 0x110
    a9c6:	e045      	b.n	aa54 <__svfiscanf_r+0x14c>
    a9c8:	9947      	ldr	r1, [sp, #284]	; 0x11c
    a9ca:	3101      	adds	r1, #1
    a9cc:	9147      	str	r1, [sp, #284]	; 0x11c
    a9ce:	6861      	ldr	r1, [r4, #4]
    a9d0:	3301      	adds	r3, #1
    a9d2:	3901      	subs	r1, #1
    a9d4:	6061      	str	r1, [r4, #4]
    a9d6:	6023      	str	r3, [r4, #0]
    a9d8:	6863      	ldr	r3, [r4, #4]
    a9da:	2b00      	cmp	r3, #0
    a9dc:	dd0b      	ble.n	a9f6 <__svfiscanf_r+0xee>
    a9de:	f7fd f905 	bl	7bec <__locale_ctype_ptr>
    a9e2:	6823      	ldr	r3, [r4, #0]
    a9e4:	7819      	ldrb	r1, [r3, #0]
    a9e6:	4408      	add	r0, r1
    a9e8:	7841      	ldrb	r1, [r0, #1]
    a9ea:	070d      	lsls	r5, r1, #28
    a9ec:	d4ec      	bmi.n	a9c8 <__svfiscanf_r+0xc0>
    a9ee:	f10a 0501 	add.w	r5, sl, #1
    a9f2:	46aa      	mov	sl, r5
    a9f4:	e79e      	b.n	a934 <__svfiscanf_r+0x2c>
    a9f6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    a9f8:	4621      	mov	r1, r4
    a9fa:	4630      	mov	r0, r6
    a9fc:	4798      	blx	r3
    a9fe:	2800      	cmp	r0, #0
    aa00:	d0ed      	beq.n	a9de <__svfiscanf_r+0xd6>
    aa02:	e7f4      	b.n	a9ee <__svfiscanf_r+0xe6>
    aa04:	9b45      	ldr	r3, [sp, #276]	; 0x114
    aa06:	fb07 1303 	mla	r3, r7, r3, r1
    aa0a:	3b30      	subs	r3, #48	; 0x30
    aa0c:	9345      	str	r3, [sp, #276]	; 0x114
    aa0e:	e7af      	b.n	a970 <__svfiscanf_r+0x68>
    aa10:	2b5b      	cmp	r3, #91	; 0x5b
    aa12:	d061      	beq.n	aad8 <__svfiscanf_r+0x1d0>
    aa14:	d80c      	bhi.n	aa30 <__svfiscanf_r+0x128>
    aa16:	2b58      	cmp	r3, #88	; 0x58
    aa18:	d1d2      	bne.n	a9c0 <__svfiscanf_r+0xb8>
    aa1a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    aa1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    aa20:	9243      	str	r2, [sp, #268]	; 0x10c
    aa22:	2210      	movs	r2, #16
    aa24:	9244      	str	r2, [sp, #272]	; 0x110
    aa26:	2b6f      	cmp	r3, #111	; 0x6f
    aa28:	bfb4      	ite	lt
    aa2a:	2303      	movlt	r3, #3
    aa2c:	2304      	movge	r3, #4
    aa2e:	e010      	b.n	aa52 <__svfiscanf_r+0x14a>
    aa30:	2b63      	cmp	r3, #99	; 0x63
    aa32:	d05c      	beq.n	aaee <__svfiscanf_r+0x1e6>
    aa34:	2b64      	cmp	r3, #100	; 0x64
    aa36:	d1c3      	bne.n	a9c0 <__svfiscanf_r+0xb8>
    aa38:	9744      	str	r7, [sp, #272]	; 0x110
    aa3a:	e7f4      	b.n	aa26 <__svfiscanf_r+0x11e>
    aa3c:	2b70      	cmp	r3, #112	; 0x70
    aa3e:	d042      	beq.n	aac6 <__svfiscanf_r+0x1be>
    aa40:	d81d      	bhi.n	aa7e <__svfiscanf_r+0x176>
    aa42:	2b6e      	cmp	r3, #110	; 0x6e
    aa44:	d059      	beq.n	aafa <__svfiscanf_r+0x1f2>
    aa46:	d843      	bhi.n	aad0 <__svfiscanf_r+0x1c8>
    aa48:	2b69      	cmp	r3, #105	; 0x69
    aa4a:	d1b9      	bne.n	a9c0 <__svfiscanf_r+0xb8>
    aa4c:	2300      	movs	r3, #0
    aa4e:	9344      	str	r3, [sp, #272]	; 0x110
    aa50:	2303      	movs	r3, #3
    aa52:	9349      	str	r3, [sp, #292]	; 0x124
    aa54:	6863      	ldr	r3, [r4, #4]
    aa56:	2b00      	cmp	r3, #0
    aa58:	dd61      	ble.n	ab1e <__svfiscanf_r+0x216>
    aa5a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    aa5c:	0659      	lsls	r1, r3, #25
    aa5e:	d56f      	bpl.n	ab40 <__svfiscanf_r+0x238>
    aa60:	9b49      	ldr	r3, [sp, #292]	; 0x124
    aa62:	2b02      	cmp	r3, #2
    aa64:	dc7c      	bgt.n	ab60 <__svfiscanf_r+0x258>
    aa66:	ab01      	add	r3, sp, #4
    aa68:	4622      	mov	r2, r4
    aa6a:	a943      	add	r1, sp, #268	; 0x10c
    aa6c:	4630      	mov	r0, r6
    aa6e:	f000 f8c7 	bl	ac00 <_scanf_chars>
    aa72:	2801      	cmp	r0, #1
    aa74:	f000 8092 	beq.w	ab9c <__svfiscanf_r+0x294>
    aa78:	2802      	cmp	r0, #2
    aa7a:	d1ba      	bne.n	a9f2 <__svfiscanf_r+0xea>
    aa7c:	e01d      	b.n	aaba <__svfiscanf_r+0x1b2>
    aa7e:	2b75      	cmp	r3, #117	; 0x75
    aa80:	d0da      	beq.n	aa38 <__svfiscanf_r+0x130>
    aa82:	2b78      	cmp	r3, #120	; 0x78
    aa84:	d0c9      	beq.n	aa1a <__svfiscanf_r+0x112>
    aa86:	2b73      	cmp	r3, #115	; 0x73
    aa88:	d19a      	bne.n	a9c0 <__svfiscanf_r+0xb8>
    aa8a:	2302      	movs	r3, #2
    aa8c:	e7e1      	b.n	aa52 <__svfiscanf_r+0x14a>
    aa8e:	6863      	ldr	r3, [r4, #4]
    aa90:	2b00      	cmp	r3, #0
    aa92:	dd0c      	ble.n	aaae <__svfiscanf_r+0x1a6>
    aa94:	6823      	ldr	r3, [r4, #0]
    aa96:	781a      	ldrb	r2, [r3, #0]
    aa98:	4593      	cmp	fp, r2
    aa9a:	d17f      	bne.n	ab9c <__svfiscanf_r+0x294>
    aa9c:	3301      	adds	r3, #1
    aa9e:	6862      	ldr	r2, [r4, #4]
    aaa0:	6023      	str	r3, [r4, #0]
    aaa2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    aaa4:	3a01      	subs	r2, #1
    aaa6:	3301      	adds	r3, #1
    aaa8:	6062      	str	r2, [r4, #4]
    aaaa:	9347      	str	r3, [sp, #284]	; 0x11c
    aaac:	e7a1      	b.n	a9f2 <__svfiscanf_r+0xea>
    aaae:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    aab0:	4621      	mov	r1, r4
    aab2:	4630      	mov	r0, r6
    aab4:	4798      	blx	r3
    aab6:	2800      	cmp	r0, #0
    aab8:	d0ec      	beq.n	aa94 <__svfiscanf_r+0x18c>
    aaba:	9846      	ldr	r0, [sp, #280]	; 0x118
    aabc:	2800      	cmp	r0, #0
    aabe:	d163      	bne.n	ab88 <__svfiscanf_r+0x280>
    aac0:	f04f 30ff 	mov.w	r0, #4294967295
    aac4:	e066      	b.n	ab94 <__svfiscanf_r+0x28c>
    aac6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    aac8:	f042 0220 	orr.w	r2, r2, #32
    aacc:	9243      	str	r2, [sp, #268]	; 0x10c
    aace:	e7a4      	b.n	aa1a <__svfiscanf_r+0x112>
    aad0:	2308      	movs	r3, #8
    aad2:	9344      	str	r3, [sp, #272]	; 0x110
    aad4:	2304      	movs	r3, #4
    aad6:	e7bc      	b.n	aa52 <__svfiscanf_r+0x14a>
    aad8:	4629      	mov	r1, r5
    aada:	4640      	mov	r0, r8
    aadc:	f000 fa8e 	bl	affc <__sccl>
    aae0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    aae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aae6:	9343      	str	r3, [sp, #268]	; 0x10c
    aae8:	4605      	mov	r5, r0
    aaea:	2301      	movs	r3, #1
    aaec:	e7b1      	b.n	aa52 <__svfiscanf_r+0x14a>
    aaee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    aaf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aaf4:	9343      	str	r3, [sp, #268]	; 0x10c
    aaf6:	2300      	movs	r3, #0
    aaf8:	e7ab      	b.n	aa52 <__svfiscanf_r+0x14a>
    aafa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    aafc:	06d0      	lsls	r0, r2, #27
    aafe:	f53f af78 	bmi.w	a9f2 <__svfiscanf_r+0xea>
    ab02:	f012 0f01 	tst.w	r2, #1
    ab06:	9a01      	ldr	r2, [sp, #4]
    ab08:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    ab0a:	f102 0104 	add.w	r1, r2, #4
    ab0e:	9101      	str	r1, [sp, #4]
    ab10:	6812      	ldr	r2, [r2, #0]
    ab12:	bf14      	ite	ne
    ab14:	8013      	strhne	r3, [r2, #0]
    ab16:	6013      	streq	r3, [r2, #0]
    ab18:	e76b      	b.n	a9f2 <__svfiscanf_r+0xea>
    ab1a:	2305      	movs	r3, #5
    ab1c:	e799      	b.n	aa52 <__svfiscanf_r+0x14a>
    ab1e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    ab20:	4621      	mov	r1, r4
    ab22:	4630      	mov	r0, r6
    ab24:	4798      	blx	r3
    ab26:	2800      	cmp	r0, #0
    ab28:	d097      	beq.n	aa5a <__svfiscanf_r+0x152>
    ab2a:	e7c6      	b.n	aaba <__svfiscanf_r+0x1b2>
    ab2c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    ab2e:	3201      	adds	r2, #1
    ab30:	9247      	str	r2, [sp, #284]	; 0x11c
    ab32:	6862      	ldr	r2, [r4, #4]
    ab34:	3a01      	subs	r2, #1
    ab36:	2a00      	cmp	r2, #0
    ab38:	6062      	str	r2, [r4, #4]
    ab3a:	dd0a      	ble.n	ab52 <__svfiscanf_r+0x24a>
    ab3c:	3301      	adds	r3, #1
    ab3e:	6023      	str	r3, [r4, #0]
    ab40:	f7fd f854 	bl	7bec <__locale_ctype_ptr>
    ab44:	6823      	ldr	r3, [r4, #0]
    ab46:	781a      	ldrb	r2, [r3, #0]
    ab48:	4410      	add	r0, r2
    ab4a:	7842      	ldrb	r2, [r0, #1]
    ab4c:	0712      	lsls	r2, r2, #28
    ab4e:	d4ed      	bmi.n	ab2c <__svfiscanf_r+0x224>
    ab50:	e786      	b.n	aa60 <__svfiscanf_r+0x158>
    ab52:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    ab54:	4621      	mov	r1, r4
    ab56:	4630      	mov	r0, r6
    ab58:	4798      	blx	r3
    ab5a:	2800      	cmp	r0, #0
    ab5c:	d0f0      	beq.n	ab40 <__svfiscanf_r+0x238>
    ab5e:	e7ac      	b.n	aaba <__svfiscanf_r+0x1b2>
    ab60:	2b04      	cmp	r3, #4
    ab62:	dc06      	bgt.n	ab72 <__svfiscanf_r+0x26a>
    ab64:	ab01      	add	r3, sp, #4
    ab66:	4622      	mov	r2, r4
    ab68:	a943      	add	r1, sp, #268	; 0x10c
    ab6a:	4630      	mov	r0, r6
    ab6c:	f000 f8ac 	bl	acc8 <_scanf_i>
    ab70:	e77f      	b.n	aa72 <__svfiscanf_r+0x16a>
    ab72:	4b0e      	ldr	r3, [pc, #56]	; (abac <__svfiscanf_r+0x2a4>)
    ab74:	2b00      	cmp	r3, #0
    ab76:	f43f af3c 	beq.w	a9f2 <__svfiscanf_r+0xea>
    ab7a:	ab01      	add	r3, sp, #4
    ab7c:	4622      	mov	r2, r4
    ab7e:	a943      	add	r1, sp, #268	; 0x10c
    ab80:	4630      	mov	r0, r6
    ab82:	f3af 8000 	nop.w
    ab86:	e774      	b.n	aa72 <__svfiscanf_r+0x16a>
    ab88:	89a3      	ldrh	r3, [r4, #12]
    ab8a:	f013 0f40 	tst.w	r3, #64	; 0x40
    ab8e:	bf18      	it	ne
    ab90:	f04f 30ff 	movne.w	r0, #4294967295
    ab94:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab9c:	9846      	ldr	r0, [sp, #280]	; 0x118
    ab9e:	e7f9      	b.n	ab94 <__svfiscanf_r+0x28c>
    aba0:	0000b219 	.word	0x0000b219
    aba4:	0000aee9 	.word	0x0000aee9
    aba8:	0000ce3a 	.word	0x0000ce3a
    abac:	00000000 	.word	0x00000000

0000abb0 <_vfiscanf_r>:
    abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abb4:	460c      	mov	r4, r1
    abb6:	4616      	mov	r6, r2
    abb8:	461f      	mov	r7, r3
    abba:	4605      	mov	r5, r0
    abbc:	b118      	cbz	r0, abc6 <_vfiscanf_r+0x16>
    abbe:	6983      	ldr	r3, [r0, #24]
    abc0:	b90b      	cbnz	r3, abc6 <_vfiscanf_r+0x16>
    abc2:	f7fc ff45 	bl	7a50 <__sinit>
    abc6:	4b0b      	ldr	r3, [pc, #44]	; (abf4 <_vfiscanf_r+0x44>)
    abc8:	429c      	cmp	r4, r3
    abca:	d108      	bne.n	abde <_vfiscanf_r+0x2e>
    abcc:	686c      	ldr	r4, [r5, #4]
    abce:	463b      	mov	r3, r7
    abd0:	4632      	mov	r2, r6
    abd2:	4621      	mov	r1, r4
    abd4:	4628      	mov	r0, r5
    abd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    abda:	f7ff be95 	b.w	a908 <__svfiscanf_r>
    abde:	4b06      	ldr	r3, [pc, #24]	; (abf8 <_vfiscanf_r+0x48>)
    abe0:	429c      	cmp	r4, r3
    abe2:	d101      	bne.n	abe8 <_vfiscanf_r+0x38>
    abe4:	68ac      	ldr	r4, [r5, #8]
    abe6:	e7f2      	b.n	abce <_vfiscanf_r+0x1e>
    abe8:	4b04      	ldr	r3, [pc, #16]	; (abfc <_vfiscanf_r+0x4c>)
    abea:	429c      	cmp	r4, r3
    abec:	bf08      	it	eq
    abee:	68ec      	ldreq	r4, [r5, #12]
    abf0:	e7ed      	b.n	abce <_vfiscanf_r+0x1e>
    abf2:	bf00      	nop
    abf4:	0000cb84 	.word	0x0000cb84
    abf8:	0000cba4 	.word	0x0000cba4
    abfc:	0000cb64 	.word	0x0000cb64

0000ac00 <_scanf_chars>:
    ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac04:	4615      	mov	r5, r2
    ac06:	688a      	ldr	r2, [r1, #8]
    ac08:	4680      	mov	r8, r0
    ac0a:	460c      	mov	r4, r1
    ac0c:	b932      	cbnz	r2, ac1c <_scanf_chars+0x1c>
    ac0e:	698a      	ldr	r2, [r1, #24]
    ac10:	2a00      	cmp	r2, #0
    ac12:	bf0c      	ite	eq
    ac14:	2201      	moveq	r2, #1
    ac16:	f04f 32ff 	movne.w	r2, #4294967295
    ac1a:	608a      	str	r2, [r1, #8]
    ac1c:	6822      	ldr	r2, [r4, #0]
    ac1e:	06d1      	lsls	r1, r2, #27
    ac20:	bf5f      	itttt	pl
    ac22:	681a      	ldrpl	r2, [r3, #0]
    ac24:	1d11      	addpl	r1, r2, #4
    ac26:	6019      	strpl	r1, [r3, #0]
    ac28:	6817      	ldrpl	r7, [r2, #0]
    ac2a:	2600      	movs	r6, #0
    ac2c:	69a3      	ldr	r3, [r4, #24]
    ac2e:	b1db      	cbz	r3, ac68 <_scanf_chars+0x68>
    ac30:	2b01      	cmp	r3, #1
    ac32:	d107      	bne.n	ac44 <_scanf_chars+0x44>
    ac34:	682b      	ldr	r3, [r5, #0]
    ac36:	6962      	ldr	r2, [r4, #20]
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	5cd3      	ldrb	r3, [r2, r3]
    ac3c:	b9a3      	cbnz	r3, ac68 <_scanf_chars+0x68>
    ac3e:	2e00      	cmp	r6, #0
    ac40:	d132      	bne.n	aca8 <_scanf_chars+0xa8>
    ac42:	e006      	b.n	ac52 <_scanf_chars+0x52>
    ac44:	2b02      	cmp	r3, #2
    ac46:	d007      	beq.n	ac58 <_scanf_chars+0x58>
    ac48:	2e00      	cmp	r6, #0
    ac4a:	d12d      	bne.n	aca8 <_scanf_chars+0xa8>
    ac4c:	69a3      	ldr	r3, [r4, #24]
    ac4e:	2b01      	cmp	r3, #1
    ac50:	d12a      	bne.n	aca8 <_scanf_chars+0xa8>
    ac52:	2001      	movs	r0, #1
    ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac58:	f7fc ffc8 	bl	7bec <__locale_ctype_ptr>
    ac5c:	682b      	ldr	r3, [r5, #0]
    ac5e:	781b      	ldrb	r3, [r3, #0]
    ac60:	4418      	add	r0, r3
    ac62:	7843      	ldrb	r3, [r0, #1]
    ac64:	071b      	lsls	r3, r3, #28
    ac66:	d4ef      	bmi.n	ac48 <_scanf_chars+0x48>
    ac68:	6823      	ldr	r3, [r4, #0]
    ac6a:	06da      	lsls	r2, r3, #27
    ac6c:	bf5e      	ittt	pl
    ac6e:	682b      	ldrpl	r3, [r5, #0]
    ac70:	781b      	ldrbpl	r3, [r3, #0]
    ac72:	703b      	strbpl	r3, [r7, #0]
    ac74:	682a      	ldr	r2, [r5, #0]
    ac76:	686b      	ldr	r3, [r5, #4]
    ac78:	f102 0201 	add.w	r2, r2, #1
    ac7c:	602a      	str	r2, [r5, #0]
    ac7e:	68a2      	ldr	r2, [r4, #8]
    ac80:	f103 33ff 	add.w	r3, r3, #4294967295
    ac84:	f102 32ff 	add.w	r2, r2, #4294967295
    ac88:	606b      	str	r3, [r5, #4]
    ac8a:	f106 0601 	add.w	r6, r6, #1
    ac8e:	bf58      	it	pl
    ac90:	3701      	addpl	r7, #1
    ac92:	60a2      	str	r2, [r4, #8]
    ac94:	b142      	cbz	r2, aca8 <_scanf_chars+0xa8>
    ac96:	2b00      	cmp	r3, #0
    ac98:	dcc8      	bgt.n	ac2c <_scanf_chars+0x2c>
    ac9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    ac9e:	4629      	mov	r1, r5
    aca0:	4640      	mov	r0, r8
    aca2:	4798      	blx	r3
    aca4:	2800      	cmp	r0, #0
    aca6:	d0c1      	beq.n	ac2c <_scanf_chars+0x2c>
    aca8:	6823      	ldr	r3, [r4, #0]
    acaa:	f013 0310 	ands.w	r3, r3, #16
    acae:	d105      	bne.n	acbc <_scanf_chars+0xbc>
    acb0:	68e2      	ldr	r2, [r4, #12]
    acb2:	3201      	adds	r2, #1
    acb4:	60e2      	str	r2, [r4, #12]
    acb6:	69a2      	ldr	r2, [r4, #24]
    acb8:	b102      	cbz	r2, acbc <_scanf_chars+0xbc>
    acba:	703b      	strb	r3, [r7, #0]
    acbc:	6923      	ldr	r3, [r4, #16]
    acbe:	441e      	add	r6, r3
    acc0:	6126      	str	r6, [r4, #16]
    acc2:	2000      	movs	r0, #0
    acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000acc8 <_scanf_i>:
    acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    accc:	469a      	mov	sl, r3
    acce:	4b74      	ldr	r3, [pc, #464]	; (aea0 <_scanf_i+0x1d8>)
    acd0:	460c      	mov	r4, r1
    acd2:	4683      	mov	fp, r0
    acd4:	4616      	mov	r6, r2
    acd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    acda:	b087      	sub	sp, #28
    acdc:	ab03      	add	r3, sp, #12
    acde:	68a7      	ldr	r7, [r4, #8]
    ace0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ace4:	4b6f      	ldr	r3, [pc, #444]	; (aea4 <_scanf_i+0x1dc>)
    ace6:	69a1      	ldr	r1, [r4, #24]
    ace8:	4a6f      	ldr	r2, [pc, #444]	; (aea8 <_scanf_i+0x1e0>)
    acea:	2903      	cmp	r1, #3
    acec:	bf18      	it	ne
    acee:	461a      	movne	r2, r3
    acf0:	1e7b      	subs	r3, r7, #1
    acf2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    acf6:	bf84      	itt	hi
    acf8:	f240 135d 	movwhi	r3, #349	; 0x15d
    acfc:	60a3      	strhi	r3, [r4, #8]
    acfe:	6823      	ldr	r3, [r4, #0]
    ad00:	9200      	str	r2, [sp, #0]
    ad02:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    ad06:	bf88      	it	hi
    ad08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    ad0c:	f104 091c 	add.w	r9, r4, #28
    ad10:	6023      	str	r3, [r4, #0]
    ad12:	bf8c      	ite	hi
    ad14:	197f      	addhi	r7, r7, r5
    ad16:	2700      	movls	r7, #0
    ad18:	464b      	mov	r3, r9
    ad1a:	f04f 0800 	mov.w	r8, #0
    ad1e:	9301      	str	r3, [sp, #4]
    ad20:	6831      	ldr	r1, [r6, #0]
    ad22:	ab03      	add	r3, sp, #12
    ad24:	2202      	movs	r2, #2
    ad26:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    ad2a:	7809      	ldrb	r1, [r1, #0]
    ad2c:	f000 fb08 	bl	b340 <memchr>
    ad30:	9b01      	ldr	r3, [sp, #4]
    ad32:	b328      	cbz	r0, ad80 <_scanf_i+0xb8>
    ad34:	f1b8 0f01 	cmp.w	r8, #1
    ad38:	d156      	bne.n	ade8 <_scanf_i+0x120>
    ad3a:	6862      	ldr	r2, [r4, #4]
    ad3c:	b92a      	cbnz	r2, ad4a <_scanf_i+0x82>
    ad3e:	2208      	movs	r2, #8
    ad40:	6062      	str	r2, [r4, #4]
    ad42:	6822      	ldr	r2, [r4, #0]
    ad44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ad48:	6022      	str	r2, [r4, #0]
    ad4a:	6822      	ldr	r2, [r4, #0]
    ad4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    ad50:	6022      	str	r2, [r4, #0]
    ad52:	68a2      	ldr	r2, [r4, #8]
    ad54:	1e51      	subs	r1, r2, #1
    ad56:	60a1      	str	r1, [r4, #8]
    ad58:	b192      	cbz	r2, ad80 <_scanf_i+0xb8>
    ad5a:	6832      	ldr	r2, [r6, #0]
    ad5c:	1c51      	adds	r1, r2, #1
    ad5e:	6031      	str	r1, [r6, #0]
    ad60:	7812      	ldrb	r2, [r2, #0]
    ad62:	701a      	strb	r2, [r3, #0]
    ad64:	1c5d      	adds	r5, r3, #1
    ad66:	6873      	ldr	r3, [r6, #4]
    ad68:	3b01      	subs	r3, #1
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	6073      	str	r3, [r6, #4]
    ad6e:	dc06      	bgt.n	ad7e <_scanf_i+0xb6>
    ad70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    ad74:	4631      	mov	r1, r6
    ad76:	4658      	mov	r0, fp
    ad78:	4798      	blx	r3
    ad7a:	2800      	cmp	r0, #0
    ad7c:	d176      	bne.n	ae6c <_scanf_i+0x1a4>
    ad7e:	462b      	mov	r3, r5
    ad80:	f108 0801 	add.w	r8, r8, #1
    ad84:	f1b8 0f03 	cmp.w	r8, #3
    ad88:	d1c9      	bne.n	ad1e <_scanf_i+0x56>
    ad8a:	6862      	ldr	r2, [r4, #4]
    ad8c:	b90a      	cbnz	r2, ad92 <_scanf_i+0xca>
    ad8e:	220a      	movs	r2, #10
    ad90:	6062      	str	r2, [r4, #4]
    ad92:	6862      	ldr	r2, [r4, #4]
    ad94:	4945      	ldr	r1, [pc, #276]	; (aeac <_scanf_i+0x1e4>)
    ad96:	6960      	ldr	r0, [r4, #20]
    ad98:	9301      	str	r3, [sp, #4]
    ad9a:	1a89      	subs	r1, r1, r2
    ad9c:	f000 f92e 	bl	affc <__sccl>
    ada0:	9b01      	ldr	r3, [sp, #4]
    ada2:	f04f 0800 	mov.w	r8, #0
    ada6:	461d      	mov	r5, r3
    ada8:	68a3      	ldr	r3, [r4, #8]
    adaa:	2b00      	cmp	r3, #0
    adac:	d038      	beq.n	ae20 <_scanf_i+0x158>
    adae:	6831      	ldr	r1, [r6, #0]
    adb0:	6960      	ldr	r0, [r4, #20]
    adb2:	780a      	ldrb	r2, [r1, #0]
    adb4:	5c80      	ldrb	r0, [r0, r2]
    adb6:	2800      	cmp	r0, #0
    adb8:	d032      	beq.n	ae20 <_scanf_i+0x158>
    adba:	2a30      	cmp	r2, #48	; 0x30
    adbc:	6822      	ldr	r2, [r4, #0]
    adbe:	d121      	bne.n	ae04 <_scanf_i+0x13c>
    adc0:	0510      	lsls	r0, r2, #20
    adc2:	d51f      	bpl.n	ae04 <_scanf_i+0x13c>
    adc4:	f108 0801 	add.w	r8, r8, #1
    adc8:	b117      	cbz	r7, add0 <_scanf_i+0x108>
    adca:	3301      	adds	r3, #1
    adcc:	3f01      	subs	r7, #1
    adce:	60a3      	str	r3, [r4, #8]
    add0:	6873      	ldr	r3, [r6, #4]
    add2:	3b01      	subs	r3, #1
    add4:	2b00      	cmp	r3, #0
    add6:	6073      	str	r3, [r6, #4]
    add8:	dd1b      	ble.n	ae12 <_scanf_i+0x14a>
    adda:	6833      	ldr	r3, [r6, #0]
    addc:	3301      	adds	r3, #1
    adde:	6033      	str	r3, [r6, #0]
    ade0:	68a3      	ldr	r3, [r4, #8]
    ade2:	3b01      	subs	r3, #1
    ade4:	60a3      	str	r3, [r4, #8]
    ade6:	e7df      	b.n	ada8 <_scanf_i+0xe0>
    ade8:	f1b8 0f02 	cmp.w	r8, #2
    adec:	d1b1      	bne.n	ad52 <_scanf_i+0x8a>
    adee:	6822      	ldr	r2, [r4, #0]
    adf0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    adf4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    adf8:	d1c2      	bne.n	ad80 <_scanf_i+0xb8>
    adfa:	2110      	movs	r1, #16
    adfc:	6061      	str	r1, [r4, #4]
    adfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ae02:	e7a5      	b.n	ad50 <_scanf_i+0x88>
    ae04:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    ae08:	6022      	str	r2, [r4, #0]
    ae0a:	780b      	ldrb	r3, [r1, #0]
    ae0c:	702b      	strb	r3, [r5, #0]
    ae0e:	3501      	adds	r5, #1
    ae10:	e7de      	b.n	add0 <_scanf_i+0x108>
    ae12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    ae16:	4631      	mov	r1, r6
    ae18:	4658      	mov	r0, fp
    ae1a:	4798      	blx	r3
    ae1c:	2800      	cmp	r0, #0
    ae1e:	d0df      	beq.n	ade0 <_scanf_i+0x118>
    ae20:	6823      	ldr	r3, [r4, #0]
    ae22:	05d9      	lsls	r1, r3, #23
    ae24:	d50c      	bpl.n	ae40 <_scanf_i+0x178>
    ae26:	454d      	cmp	r5, r9
    ae28:	d908      	bls.n	ae3c <_scanf_i+0x174>
    ae2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    ae2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    ae32:	4632      	mov	r2, r6
    ae34:	4658      	mov	r0, fp
    ae36:	4798      	blx	r3
    ae38:	1e6f      	subs	r7, r5, #1
    ae3a:	463d      	mov	r5, r7
    ae3c:	454d      	cmp	r5, r9
    ae3e:	d02c      	beq.n	ae9a <_scanf_i+0x1d2>
    ae40:	6822      	ldr	r2, [r4, #0]
    ae42:	f012 0210 	ands.w	r2, r2, #16
    ae46:	d11e      	bne.n	ae86 <_scanf_i+0x1be>
    ae48:	702a      	strb	r2, [r5, #0]
    ae4a:	6863      	ldr	r3, [r4, #4]
    ae4c:	9e00      	ldr	r6, [sp, #0]
    ae4e:	4649      	mov	r1, r9
    ae50:	4658      	mov	r0, fp
    ae52:	47b0      	blx	r6
    ae54:	6822      	ldr	r2, [r4, #0]
    ae56:	f8da 3000 	ldr.w	r3, [sl]
    ae5a:	f012 0f20 	tst.w	r2, #32
    ae5e:	d008      	beq.n	ae72 <_scanf_i+0x1aa>
    ae60:	1d1a      	adds	r2, r3, #4
    ae62:	f8ca 2000 	str.w	r2, [sl]
    ae66:	681b      	ldr	r3, [r3, #0]
    ae68:	6018      	str	r0, [r3, #0]
    ae6a:	e009      	b.n	ae80 <_scanf_i+0x1b8>
    ae6c:	f04f 0800 	mov.w	r8, #0
    ae70:	e7d6      	b.n	ae20 <_scanf_i+0x158>
    ae72:	07d2      	lsls	r2, r2, #31
    ae74:	d5f4      	bpl.n	ae60 <_scanf_i+0x198>
    ae76:	1d1a      	adds	r2, r3, #4
    ae78:	f8ca 2000 	str.w	r2, [sl]
    ae7c:	681b      	ldr	r3, [r3, #0]
    ae7e:	8018      	strh	r0, [r3, #0]
    ae80:	68e3      	ldr	r3, [r4, #12]
    ae82:	3301      	adds	r3, #1
    ae84:	60e3      	str	r3, [r4, #12]
    ae86:	eba5 0509 	sub.w	r5, r5, r9
    ae8a:	44a8      	add	r8, r5
    ae8c:	6925      	ldr	r5, [r4, #16]
    ae8e:	4445      	add	r5, r8
    ae90:	6125      	str	r5, [r4, #16]
    ae92:	2000      	movs	r0, #0
    ae94:	b007      	add	sp, #28
    ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae9a:	2001      	movs	r0, #1
    ae9c:	e7fa      	b.n	ae94 <_scanf_i+0x1cc>
    ae9e:	bf00      	nop
    aea0:	0000ce68 	.word	0x0000ce68
    aea4:	0000b17d 	.word	0x0000b17d
    aea8:	00008f4d 	.word	0x00008f4d
    aeac:	0000ce84 	.word	0x0000ce84

0000aeb0 <_read_r>:
    aeb0:	b538      	push	{r3, r4, r5, lr}
    aeb2:	4c07      	ldr	r4, [pc, #28]	; (aed0 <_read_r+0x20>)
    aeb4:	4605      	mov	r5, r0
    aeb6:	4608      	mov	r0, r1
    aeb8:	4611      	mov	r1, r2
    aeba:	2200      	movs	r2, #0
    aebc:	6022      	str	r2, [r4, #0]
    aebe:	461a      	mov	r2, r3
    aec0:	f7fb fd30 	bl	6924 <_read>
    aec4:	1c43      	adds	r3, r0, #1
    aec6:	d102      	bne.n	aece <_read_r+0x1e>
    aec8:	6823      	ldr	r3, [r4, #0]
    aeca:	b103      	cbz	r3, aece <_read_r+0x1e>
    aecc:	602b      	str	r3, [r5, #0]
    aece:	bd38      	pop	{r3, r4, r5, pc}
    aed0:	2000173c 	.word	0x2000173c

0000aed4 <lflush>:
    aed4:	8983      	ldrh	r3, [r0, #12]
    aed6:	f003 0309 	and.w	r3, r3, #9
    aeda:	2b09      	cmp	r3, #9
    aedc:	d101      	bne.n	aee2 <lflush+0xe>
    aede:	f7fc bd65 	b.w	79ac <fflush>
    aee2:	2000      	movs	r0, #0
    aee4:	4770      	bx	lr
	...

0000aee8 <__srefill_r>:
    aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aeea:	460c      	mov	r4, r1
    aeec:	4605      	mov	r5, r0
    aeee:	b118      	cbz	r0, aef8 <__srefill_r+0x10>
    aef0:	6983      	ldr	r3, [r0, #24]
    aef2:	b90b      	cbnz	r3, aef8 <__srefill_r+0x10>
    aef4:	f7fc fdac 	bl	7a50 <__sinit>
    aef8:	4b3b      	ldr	r3, [pc, #236]	; (afe8 <__srefill_r+0x100>)
    aefa:	429c      	cmp	r4, r3
    aefc:	d10a      	bne.n	af14 <__srefill_r+0x2c>
    aefe:	686c      	ldr	r4, [r5, #4]
    af00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    af04:	2300      	movs	r3, #0
    af06:	6063      	str	r3, [r4, #4]
    af08:	b293      	uxth	r3, r2
    af0a:	069e      	lsls	r6, r3, #26
    af0c:	d50c      	bpl.n	af28 <__srefill_r+0x40>
    af0e:	f04f 30ff 	mov.w	r0, #4294967295
    af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af14:	4b35      	ldr	r3, [pc, #212]	; (afec <__srefill_r+0x104>)
    af16:	429c      	cmp	r4, r3
    af18:	d101      	bne.n	af1e <__srefill_r+0x36>
    af1a:	68ac      	ldr	r4, [r5, #8]
    af1c:	e7f0      	b.n	af00 <__srefill_r+0x18>
    af1e:	4b34      	ldr	r3, [pc, #208]	; (aff0 <__srefill_r+0x108>)
    af20:	429c      	cmp	r4, r3
    af22:	bf08      	it	eq
    af24:	68ec      	ldreq	r4, [r5, #12]
    af26:	e7eb      	b.n	af00 <__srefill_r+0x18>
    af28:	0758      	lsls	r0, r3, #29
    af2a:	d448      	bmi.n	afbe <__srefill_r+0xd6>
    af2c:	06d9      	lsls	r1, r3, #27
    af2e:	d405      	bmi.n	af3c <__srefill_r+0x54>
    af30:	2309      	movs	r3, #9
    af32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    af36:	602b      	str	r3, [r5, #0]
    af38:	81a2      	strh	r2, [r4, #12]
    af3a:	e7e8      	b.n	af0e <__srefill_r+0x26>
    af3c:	071a      	lsls	r2, r3, #28
    af3e:	d50b      	bpl.n	af58 <__srefill_r+0x70>
    af40:	4621      	mov	r1, r4
    af42:	4628      	mov	r0, r5
    af44:	f7fc fd08 	bl	7958 <_fflush_r>
    af48:	2800      	cmp	r0, #0
    af4a:	d1e0      	bne.n	af0e <__srefill_r+0x26>
    af4c:	89a3      	ldrh	r3, [r4, #12]
    af4e:	60a0      	str	r0, [r4, #8]
    af50:	f023 0308 	bic.w	r3, r3, #8
    af54:	81a3      	strh	r3, [r4, #12]
    af56:	61a0      	str	r0, [r4, #24]
    af58:	89a3      	ldrh	r3, [r4, #12]
    af5a:	f043 0304 	orr.w	r3, r3, #4
    af5e:	81a3      	strh	r3, [r4, #12]
    af60:	6923      	ldr	r3, [r4, #16]
    af62:	b91b      	cbnz	r3, af6c <__srefill_r+0x84>
    af64:	4621      	mov	r1, r4
    af66:	4628      	mov	r0, r5
    af68:	f7fe fc5e 	bl	9828 <__smakebuf_r>
    af6c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    af70:	b2be      	uxth	r6, r7
    af72:	07b3      	lsls	r3, r6, #30
    af74:	d00f      	beq.n	af96 <__srefill_r+0xae>
    af76:	2301      	movs	r3, #1
    af78:	81a3      	strh	r3, [r4, #12]
    af7a:	4b1e      	ldr	r3, [pc, #120]	; (aff4 <__srefill_r+0x10c>)
    af7c:	491e      	ldr	r1, [pc, #120]	; (aff8 <__srefill_r+0x110>)
    af7e:	6818      	ldr	r0, [r3, #0]
    af80:	f006 0609 	and.w	r6, r6, #9
    af84:	f7fc fdd0 	bl	7b28 <_fwalk>
    af88:	2e09      	cmp	r6, #9
    af8a:	81a7      	strh	r7, [r4, #12]
    af8c:	d103      	bne.n	af96 <__srefill_r+0xae>
    af8e:	4621      	mov	r1, r4
    af90:	4628      	mov	r0, r5
    af92:	f7fc fc59 	bl	7848 <__sflush_r>
    af96:	6922      	ldr	r2, [r4, #16]
    af98:	6022      	str	r2, [r4, #0]
    af9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    af9c:	6963      	ldr	r3, [r4, #20]
    af9e:	6a21      	ldr	r1, [r4, #32]
    afa0:	4628      	mov	r0, r5
    afa2:	47b0      	blx	r6
    afa4:	2800      	cmp	r0, #0
    afa6:	6060      	str	r0, [r4, #4]
    afa8:	dc1c      	bgt.n	afe4 <__srefill_r+0xfc>
    afaa:	89a3      	ldrh	r3, [r4, #12]
    afac:	bf17      	itett	ne
    afae:	2200      	movne	r2, #0
    afb0:	f043 0320 	orreq.w	r3, r3, #32
    afb4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    afb8:	6062      	strne	r2, [r4, #4]
    afba:	81a3      	strh	r3, [r4, #12]
    afbc:	e7a7      	b.n	af0e <__srefill_r+0x26>
    afbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    afc0:	2900      	cmp	r1, #0
    afc2:	d0cd      	beq.n	af60 <__srefill_r+0x78>
    afc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    afc8:	4299      	cmp	r1, r3
    afca:	d002      	beq.n	afd2 <__srefill_r+0xea>
    afcc:	4628      	mov	r0, r5
    afce:	f7fc fe35 	bl	7c3c <_free_r>
    afd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    afd4:	6063      	str	r3, [r4, #4]
    afd6:	2000      	movs	r0, #0
    afd8:	6360      	str	r0, [r4, #52]	; 0x34
    afda:	2b00      	cmp	r3, #0
    afdc:	d0c0      	beq.n	af60 <__srefill_r+0x78>
    afde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    afe0:	6023      	str	r3, [r4, #0]
    afe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afe4:	2000      	movs	r0, #0
    afe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afe8:	0000cb84 	.word	0x0000cb84
    afec:	0000cba4 	.word	0x0000cba4
    aff0:	0000cb64 	.word	0x0000cb64
    aff4:	0000cbc4 	.word	0x0000cbc4
    aff8:	0000aed5 	.word	0x0000aed5

0000affc <__sccl>:
    affc:	b570      	push	{r4, r5, r6, lr}
    affe:	780b      	ldrb	r3, [r1, #0]
    b000:	2b5e      	cmp	r3, #94	; 0x5e
    b002:	bf13      	iteet	ne
    b004:	1c4a      	addne	r2, r1, #1
    b006:	1c8a      	addeq	r2, r1, #2
    b008:	784b      	ldrbeq	r3, [r1, #1]
    b00a:	2100      	movne	r1, #0
    b00c:	bf08      	it	eq
    b00e:	2101      	moveq	r1, #1
    b010:	1e44      	subs	r4, r0, #1
    b012:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    b016:	f804 1f01 	strb.w	r1, [r4, #1]!
    b01a:	42a5      	cmp	r5, r4
    b01c:	d1fb      	bne.n	b016 <__sccl+0x1a>
    b01e:	b913      	cbnz	r3, b026 <__sccl+0x2a>
    b020:	3a01      	subs	r2, #1
    b022:	4610      	mov	r0, r2
    b024:	bd70      	pop	{r4, r5, r6, pc}
    b026:	f081 0401 	eor.w	r4, r1, #1
    b02a:	54c4      	strb	r4, [r0, r3]
    b02c:	4611      	mov	r1, r2
    b02e:	780d      	ldrb	r5, [r1, #0]
    b030:	2d2d      	cmp	r5, #45	; 0x2d
    b032:	f101 0201 	add.w	r2, r1, #1
    b036:	d006      	beq.n	b046 <__sccl+0x4a>
    b038:	2d5d      	cmp	r5, #93	; 0x5d
    b03a:	d0f2      	beq.n	b022 <__sccl+0x26>
    b03c:	b90d      	cbnz	r5, b042 <__sccl+0x46>
    b03e:	460a      	mov	r2, r1
    b040:	e7ef      	b.n	b022 <__sccl+0x26>
    b042:	462b      	mov	r3, r5
    b044:	e7f1      	b.n	b02a <__sccl+0x2e>
    b046:	784e      	ldrb	r6, [r1, #1]
    b048:	2e5d      	cmp	r6, #93	; 0x5d
    b04a:	d0fa      	beq.n	b042 <__sccl+0x46>
    b04c:	42b3      	cmp	r3, r6
    b04e:	dcf8      	bgt.n	b042 <__sccl+0x46>
    b050:	3102      	adds	r1, #2
    b052:	3301      	adds	r3, #1
    b054:	429e      	cmp	r6, r3
    b056:	54c4      	strb	r4, [r0, r3]
    b058:	dcfb      	bgt.n	b052 <__sccl+0x56>
    b05a:	e7e8      	b.n	b02e <__sccl+0x32>

0000b05c <strncmp>:
    b05c:	b510      	push	{r4, lr}
    b05e:	b16a      	cbz	r2, b07c <strncmp+0x20>
    b060:	3901      	subs	r1, #1
    b062:	1884      	adds	r4, r0, r2
    b064:	f810 3b01 	ldrb.w	r3, [r0], #1
    b068:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    b06c:	4293      	cmp	r3, r2
    b06e:	d103      	bne.n	b078 <strncmp+0x1c>
    b070:	42a0      	cmp	r0, r4
    b072:	d001      	beq.n	b078 <strncmp+0x1c>
    b074:	2b00      	cmp	r3, #0
    b076:	d1f5      	bne.n	b064 <strncmp+0x8>
    b078:	1a98      	subs	r0, r3, r2
    b07a:	bd10      	pop	{r4, pc}
    b07c:	4610      	mov	r0, r2
    b07e:	bd10      	pop	{r4, pc}

0000b080 <_strtoul_l.isra.0>:
    b080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b084:	4680      	mov	r8, r0
    b086:	4689      	mov	r9, r1
    b088:	4692      	mov	sl, r2
    b08a:	461e      	mov	r6, r3
    b08c:	460f      	mov	r7, r1
    b08e:	463d      	mov	r5, r7
    b090:	9808      	ldr	r0, [sp, #32]
    b092:	f815 4b01 	ldrb.w	r4, [r5], #1
    b096:	f7fc fda5 	bl	7be4 <__locale_ctype_ptr_l>
    b09a:	4420      	add	r0, r4
    b09c:	7843      	ldrb	r3, [r0, #1]
    b09e:	f013 0308 	ands.w	r3, r3, #8
    b0a2:	d10a      	bne.n	b0ba <_strtoul_l.isra.0+0x3a>
    b0a4:	2c2d      	cmp	r4, #45	; 0x2d
    b0a6:	d10a      	bne.n	b0be <_strtoul_l.isra.0+0x3e>
    b0a8:	782c      	ldrb	r4, [r5, #0]
    b0aa:	2301      	movs	r3, #1
    b0ac:	1cbd      	adds	r5, r7, #2
    b0ae:	b15e      	cbz	r6, b0c8 <_strtoul_l.isra.0+0x48>
    b0b0:	2e10      	cmp	r6, #16
    b0b2:	d113      	bne.n	b0dc <_strtoul_l.isra.0+0x5c>
    b0b4:	2c30      	cmp	r4, #48	; 0x30
    b0b6:	d009      	beq.n	b0cc <_strtoul_l.isra.0+0x4c>
    b0b8:	e010      	b.n	b0dc <_strtoul_l.isra.0+0x5c>
    b0ba:	462f      	mov	r7, r5
    b0bc:	e7e7      	b.n	b08e <_strtoul_l.isra.0+0xe>
    b0be:	2c2b      	cmp	r4, #43	; 0x2b
    b0c0:	bf04      	itt	eq
    b0c2:	782c      	ldrbeq	r4, [r5, #0]
    b0c4:	1cbd      	addeq	r5, r7, #2
    b0c6:	e7f2      	b.n	b0ae <_strtoul_l.isra.0+0x2e>
    b0c8:	2c30      	cmp	r4, #48	; 0x30
    b0ca:	d125      	bne.n	b118 <_strtoul_l.isra.0+0x98>
    b0cc:	782a      	ldrb	r2, [r5, #0]
    b0ce:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    b0d2:	2a58      	cmp	r2, #88	; 0x58
    b0d4:	d14a      	bne.n	b16c <_strtoul_l.isra.0+0xec>
    b0d6:	786c      	ldrb	r4, [r5, #1]
    b0d8:	2610      	movs	r6, #16
    b0da:	3502      	adds	r5, #2
    b0dc:	f04f 31ff 	mov.w	r1, #4294967295
    b0e0:	2700      	movs	r7, #0
    b0e2:	fbb1 f1f6 	udiv	r1, r1, r6
    b0e6:	fb06 fe01 	mul.w	lr, r6, r1
    b0ea:	ea6f 0e0e 	mvn.w	lr, lr
    b0ee:	4638      	mov	r0, r7
    b0f0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    b0f4:	2a09      	cmp	r2, #9
    b0f6:	d811      	bhi.n	b11c <_strtoul_l.isra.0+0x9c>
    b0f8:	4614      	mov	r4, r2
    b0fa:	42a6      	cmp	r6, r4
    b0fc:	dd1d      	ble.n	b13a <_strtoul_l.isra.0+0xba>
    b0fe:	2f00      	cmp	r7, #0
    b100:	db18      	blt.n	b134 <_strtoul_l.isra.0+0xb4>
    b102:	4281      	cmp	r1, r0
    b104:	d316      	bcc.n	b134 <_strtoul_l.isra.0+0xb4>
    b106:	d101      	bne.n	b10c <_strtoul_l.isra.0+0x8c>
    b108:	45a6      	cmp	lr, r4
    b10a:	db13      	blt.n	b134 <_strtoul_l.isra.0+0xb4>
    b10c:	fb00 4006 	mla	r0, r0, r6, r4
    b110:	2701      	movs	r7, #1
    b112:	f815 4b01 	ldrb.w	r4, [r5], #1
    b116:	e7eb      	b.n	b0f0 <_strtoul_l.isra.0+0x70>
    b118:	260a      	movs	r6, #10
    b11a:	e7df      	b.n	b0dc <_strtoul_l.isra.0+0x5c>
    b11c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    b120:	2a19      	cmp	r2, #25
    b122:	d801      	bhi.n	b128 <_strtoul_l.isra.0+0xa8>
    b124:	3c37      	subs	r4, #55	; 0x37
    b126:	e7e8      	b.n	b0fa <_strtoul_l.isra.0+0x7a>
    b128:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    b12c:	2a19      	cmp	r2, #25
    b12e:	d804      	bhi.n	b13a <_strtoul_l.isra.0+0xba>
    b130:	3c57      	subs	r4, #87	; 0x57
    b132:	e7e2      	b.n	b0fa <_strtoul_l.isra.0+0x7a>
    b134:	f04f 37ff 	mov.w	r7, #4294967295
    b138:	e7eb      	b.n	b112 <_strtoul_l.isra.0+0x92>
    b13a:	2f00      	cmp	r7, #0
    b13c:	da09      	bge.n	b152 <_strtoul_l.isra.0+0xd2>
    b13e:	2322      	movs	r3, #34	; 0x22
    b140:	f8c8 3000 	str.w	r3, [r8]
    b144:	f04f 30ff 	mov.w	r0, #4294967295
    b148:	f1ba 0f00 	cmp.w	sl, #0
    b14c:	d107      	bne.n	b15e <_strtoul_l.isra.0+0xde>
    b14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b152:	b103      	cbz	r3, b156 <_strtoul_l.isra.0+0xd6>
    b154:	4240      	negs	r0, r0
    b156:	f1ba 0f00 	cmp.w	sl, #0
    b15a:	d00c      	beq.n	b176 <_strtoul_l.isra.0+0xf6>
    b15c:	b127      	cbz	r7, b168 <_strtoul_l.isra.0+0xe8>
    b15e:	3d01      	subs	r5, #1
    b160:	f8ca 5000 	str.w	r5, [sl]
    b164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b168:	464d      	mov	r5, r9
    b16a:	e7f9      	b.n	b160 <_strtoul_l.isra.0+0xe0>
    b16c:	2430      	movs	r4, #48	; 0x30
    b16e:	2e00      	cmp	r6, #0
    b170:	d1b4      	bne.n	b0dc <_strtoul_l.isra.0+0x5c>
    b172:	2608      	movs	r6, #8
    b174:	e7b2      	b.n	b0dc <_strtoul_l.isra.0+0x5c>
    b176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000b17c <_strtoul_r>:
    b17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b17e:	4c06      	ldr	r4, [pc, #24]	; (b198 <_strtoul_r+0x1c>)
    b180:	4d06      	ldr	r5, [pc, #24]	; (b19c <_strtoul_r+0x20>)
    b182:	6824      	ldr	r4, [r4, #0]
    b184:	6a24      	ldr	r4, [r4, #32]
    b186:	2c00      	cmp	r4, #0
    b188:	bf08      	it	eq
    b18a:	462c      	moveq	r4, r5
    b18c:	9400      	str	r4, [sp, #0]
    b18e:	f7ff ff77 	bl	b080 <_strtoul_l.isra.0>
    b192:	b003      	add	sp, #12
    b194:	bd30      	pop	{r4, r5, pc}
    b196:	bf00      	nop
    b198:	200004b0 	.word	0x200004b0
    b19c:	20000514 	.word	0x20000514

0000b1a0 <__submore>:
    b1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1a4:	460c      	mov	r4, r1
    b1a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    b1a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b1ac:	4299      	cmp	r1, r3
    b1ae:	d11e      	bne.n	b1ee <__submore+0x4e>
    b1b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b1b4:	f7fc fd90 	bl	7cd8 <_malloc_r>
    b1b8:	b918      	cbnz	r0, b1c2 <__submore+0x22>
    b1ba:	f04f 30ff 	mov.w	r0, #4294967295
    b1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b1c6:	63a3      	str	r3, [r4, #56]	; 0x38
    b1c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    b1cc:	6360      	str	r0, [r4, #52]	; 0x34
    b1ce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    b1d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    b1d6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    b1da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    b1de:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    b1e2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    b1e6:	6020      	str	r0, [r4, #0]
    b1e8:	2000      	movs	r0, #0
    b1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b1ee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b1f0:	0077      	lsls	r7, r6, #1
    b1f2:	463a      	mov	r2, r7
    b1f4:	f000 f90e 	bl	b414 <_realloc_r>
    b1f8:	4605      	mov	r5, r0
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d0dd      	beq.n	b1ba <__submore+0x1a>
    b1fe:	eb00 0806 	add.w	r8, r0, r6
    b202:	4601      	mov	r1, r0
    b204:	4632      	mov	r2, r6
    b206:	4640      	mov	r0, r8
    b208:	f7fe fb56 	bl	98b8 <memcpy>
    b20c:	f8c4 8000 	str.w	r8, [r4]
    b210:	6365      	str	r5, [r4, #52]	; 0x34
    b212:	63a7      	str	r7, [r4, #56]	; 0x38
    b214:	e7e8      	b.n	b1e8 <__submore+0x48>
	...

0000b218 <_ungetc_r>:
    b218:	1c4b      	adds	r3, r1, #1
    b21a:	b570      	push	{r4, r5, r6, lr}
    b21c:	4606      	mov	r6, r0
    b21e:	460d      	mov	r5, r1
    b220:	4614      	mov	r4, r2
    b222:	d103      	bne.n	b22c <_ungetc_r+0x14>
    b224:	f04f 35ff 	mov.w	r5, #4294967295
    b228:	4628      	mov	r0, r5
    b22a:	bd70      	pop	{r4, r5, r6, pc}
    b22c:	b118      	cbz	r0, b236 <_ungetc_r+0x1e>
    b22e:	6983      	ldr	r3, [r0, #24]
    b230:	b90b      	cbnz	r3, b236 <_ungetc_r+0x1e>
    b232:	f7fc fc0d 	bl	7a50 <__sinit>
    b236:	4b2e      	ldr	r3, [pc, #184]	; (b2f0 <_ungetc_r+0xd8>)
    b238:	429c      	cmp	r4, r3
    b23a:	d12c      	bne.n	b296 <_ungetc_r+0x7e>
    b23c:	6874      	ldr	r4, [r6, #4]
    b23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b242:	f023 0320 	bic.w	r3, r3, #32
    b246:	81a3      	strh	r3, [r4, #12]
    b248:	b29b      	uxth	r3, r3
    b24a:	0759      	lsls	r1, r3, #29
    b24c:	d413      	bmi.n	b276 <_ungetc_r+0x5e>
    b24e:	06da      	lsls	r2, r3, #27
    b250:	d5e8      	bpl.n	b224 <_ungetc_r+0xc>
    b252:	071b      	lsls	r3, r3, #28
    b254:	d50b      	bpl.n	b26e <_ungetc_r+0x56>
    b256:	4621      	mov	r1, r4
    b258:	4630      	mov	r0, r6
    b25a:	f7fc fb7d 	bl	7958 <_fflush_r>
    b25e:	2800      	cmp	r0, #0
    b260:	d1e0      	bne.n	b224 <_ungetc_r+0xc>
    b262:	89a3      	ldrh	r3, [r4, #12]
    b264:	60a0      	str	r0, [r4, #8]
    b266:	f023 0308 	bic.w	r3, r3, #8
    b26a:	81a3      	strh	r3, [r4, #12]
    b26c:	61a0      	str	r0, [r4, #24]
    b26e:	89a3      	ldrh	r3, [r4, #12]
    b270:	f043 0304 	orr.w	r3, r3, #4
    b274:	81a3      	strh	r3, [r4, #12]
    b276:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b278:	6862      	ldr	r2, [r4, #4]
    b27a:	b2ed      	uxtb	r5, r5
    b27c:	b1e3      	cbz	r3, b2b8 <_ungetc_r+0xa0>
    b27e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b280:	429a      	cmp	r2, r3
    b282:	da12      	bge.n	b2aa <_ungetc_r+0x92>
    b284:	6823      	ldr	r3, [r4, #0]
    b286:	1e5a      	subs	r2, r3, #1
    b288:	6022      	str	r2, [r4, #0]
    b28a:	f803 5c01 	strb.w	r5, [r3, #-1]
    b28e:	6863      	ldr	r3, [r4, #4]
    b290:	3301      	adds	r3, #1
    b292:	6063      	str	r3, [r4, #4]
    b294:	e7c8      	b.n	b228 <_ungetc_r+0x10>
    b296:	4b17      	ldr	r3, [pc, #92]	; (b2f4 <_ungetc_r+0xdc>)
    b298:	429c      	cmp	r4, r3
    b29a:	d101      	bne.n	b2a0 <_ungetc_r+0x88>
    b29c:	68b4      	ldr	r4, [r6, #8]
    b29e:	e7ce      	b.n	b23e <_ungetc_r+0x26>
    b2a0:	4b15      	ldr	r3, [pc, #84]	; (b2f8 <_ungetc_r+0xe0>)
    b2a2:	429c      	cmp	r4, r3
    b2a4:	bf08      	it	eq
    b2a6:	68f4      	ldreq	r4, [r6, #12]
    b2a8:	e7c9      	b.n	b23e <_ungetc_r+0x26>
    b2aa:	4621      	mov	r1, r4
    b2ac:	4630      	mov	r0, r6
    b2ae:	f7ff ff77 	bl	b1a0 <__submore>
    b2b2:	2800      	cmp	r0, #0
    b2b4:	d0e6      	beq.n	b284 <_ungetc_r+0x6c>
    b2b6:	e7b5      	b.n	b224 <_ungetc_r+0xc>
    b2b8:	6921      	ldr	r1, [r4, #16]
    b2ba:	6823      	ldr	r3, [r4, #0]
    b2bc:	b151      	cbz	r1, b2d4 <_ungetc_r+0xbc>
    b2be:	4299      	cmp	r1, r3
    b2c0:	d208      	bcs.n	b2d4 <_ungetc_r+0xbc>
    b2c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    b2c6:	428d      	cmp	r5, r1
    b2c8:	d104      	bne.n	b2d4 <_ungetc_r+0xbc>
    b2ca:	3b01      	subs	r3, #1
    b2cc:	3201      	adds	r2, #1
    b2ce:	6023      	str	r3, [r4, #0]
    b2d0:	6062      	str	r2, [r4, #4]
    b2d2:	e7a9      	b.n	b228 <_ungetc_r+0x10>
    b2d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    b2d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b2da:	6363      	str	r3, [r4, #52]	; 0x34
    b2dc:	2303      	movs	r3, #3
    b2de:	63a3      	str	r3, [r4, #56]	; 0x38
    b2e0:	4623      	mov	r3, r4
    b2e2:	6422      	str	r2, [r4, #64]	; 0x40
    b2e4:	f803 5f46 	strb.w	r5, [r3, #70]!
    b2e8:	6023      	str	r3, [r4, #0]
    b2ea:	2301      	movs	r3, #1
    b2ec:	e7d1      	b.n	b292 <_ungetc_r+0x7a>
    b2ee:	bf00      	nop
    b2f0:	0000cb84 	.word	0x0000cb84
    b2f4:	0000cba4 	.word	0x0000cba4
    b2f8:	0000cb64 	.word	0x0000cb64

0000b2fc <_fstat_r>:
    b2fc:	b538      	push	{r3, r4, r5, lr}
    b2fe:	4c07      	ldr	r4, [pc, #28]	; (b31c <_fstat_r+0x20>)
    b300:	2300      	movs	r3, #0
    b302:	4605      	mov	r5, r0
    b304:	4608      	mov	r0, r1
    b306:	4611      	mov	r1, r2
    b308:	6023      	str	r3, [r4, #0]
    b30a:	f7f7 fd14 	bl	2d36 <_fstat>
    b30e:	1c43      	adds	r3, r0, #1
    b310:	d102      	bne.n	b318 <_fstat_r+0x1c>
    b312:	6823      	ldr	r3, [r4, #0]
    b314:	b103      	cbz	r3, b318 <_fstat_r+0x1c>
    b316:	602b      	str	r3, [r5, #0]
    b318:	bd38      	pop	{r3, r4, r5, pc}
    b31a:	bf00      	nop
    b31c:	2000173c 	.word	0x2000173c

0000b320 <_isatty_r>:
    b320:	b538      	push	{r3, r4, r5, lr}
    b322:	4c06      	ldr	r4, [pc, #24]	; (b33c <_isatty_r+0x1c>)
    b324:	2300      	movs	r3, #0
    b326:	4605      	mov	r5, r0
    b328:	4608      	mov	r0, r1
    b32a:	6023      	str	r3, [r4, #0]
    b32c:	f7f7 fd08 	bl	2d40 <_isatty>
    b330:	1c43      	adds	r3, r0, #1
    b332:	d102      	bne.n	b33a <_isatty_r+0x1a>
    b334:	6823      	ldr	r3, [r4, #0]
    b336:	b103      	cbz	r3, b33a <_isatty_r+0x1a>
    b338:	602b      	str	r3, [r5, #0]
    b33a:	bd38      	pop	{r3, r4, r5, pc}
    b33c:	2000173c 	.word	0x2000173c

0000b340 <memchr>:
    b340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b344:	2a10      	cmp	r2, #16
    b346:	db2b      	blt.n	b3a0 <memchr+0x60>
    b348:	f010 0f07 	tst.w	r0, #7
    b34c:	d008      	beq.n	b360 <memchr+0x20>
    b34e:	f810 3b01 	ldrb.w	r3, [r0], #1
    b352:	3a01      	subs	r2, #1
    b354:	428b      	cmp	r3, r1
    b356:	d02d      	beq.n	b3b4 <memchr+0x74>
    b358:	f010 0f07 	tst.w	r0, #7
    b35c:	b342      	cbz	r2, b3b0 <memchr+0x70>
    b35e:	d1f6      	bne.n	b34e <memchr+0xe>
    b360:	b4f0      	push	{r4, r5, r6, r7}
    b362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b36a:	f022 0407 	bic.w	r4, r2, #7
    b36e:	f07f 0700 	mvns.w	r7, #0
    b372:	2300      	movs	r3, #0
    b374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b378:	3c08      	subs	r4, #8
    b37a:	ea85 0501 	eor.w	r5, r5, r1
    b37e:	ea86 0601 	eor.w	r6, r6, r1
    b382:	fa85 f547 	uadd8	r5, r5, r7
    b386:	faa3 f587 	sel	r5, r3, r7
    b38a:	fa86 f647 	uadd8	r6, r6, r7
    b38e:	faa5 f687 	sel	r6, r5, r7
    b392:	b98e      	cbnz	r6, b3b8 <memchr+0x78>
    b394:	d1ee      	bne.n	b374 <memchr+0x34>
    b396:	bcf0      	pop	{r4, r5, r6, r7}
    b398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b39c:	f002 0207 	and.w	r2, r2, #7
    b3a0:	b132      	cbz	r2, b3b0 <memchr+0x70>
    b3a2:	f810 3b01 	ldrb.w	r3, [r0], #1
    b3a6:	3a01      	subs	r2, #1
    b3a8:	ea83 0301 	eor.w	r3, r3, r1
    b3ac:	b113      	cbz	r3, b3b4 <memchr+0x74>
    b3ae:	d1f8      	bne.n	b3a2 <memchr+0x62>
    b3b0:	2000      	movs	r0, #0
    b3b2:	4770      	bx	lr
    b3b4:	3801      	subs	r0, #1
    b3b6:	4770      	bx	lr
    b3b8:	2d00      	cmp	r5, #0
    b3ba:	bf06      	itte	eq
    b3bc:	4635      	moveq	r5, r6
    b3be:	3803      	subeq	r0, #3
    b3c0:	3807      	subne	r0, #7
    b3c2:	f015 0f01 	tst.w	r5, #1
    b3c6:	d107      	bne.n	b3d8 <memchr+0x98>
    b3c8:	3001      	adds	r0, #1
    b3ca:	f415 7f80 	tst.w	r5, #256	; 0x100
    b3ce:	bf02      	ittt	eq
    b3d0:	3001      	addeq	r0, #1
    b3d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b3d6:	3001      	addeq	r0, #1
    b3d8:	bcf0      	pop	{r4, r5, r6, r7}
    b3da:	3801      	subs	r0, #1
    b3dc:	4770      	bx	lr
    b3de:	bf00      	nop

0000b3e0 <memmove>:
    b3e0:	4288      	cmp	r0, r1
    b3e2:	b510      	push	{r4, lr}
    b3e4:	eb01 0302 	add.w	r3, r1, r2
    b3e8:	d803      	bhi.n	b3f2 <memmove+0x12>
    b3ea:	1e42      	subs	r2, r0, #1
    b3ec:	4299      	cmp	r1, r3
    b3ee:	d10c      	bne.n	b40a <memmove+0x2a>
    b3f0:	bd10      	pop	{r4, pc}
    b3f2:	4298      	cmp	r0, r3
    b3f4:	d2f9      	bcs.n	b3ea <memmove+0xa>
    b3f6:	1881      	adds	r1, r0, r2
    b3f8:	1ad2      	subs	r2, r2, r3
    b3fa:	42d3      	cmn	r3, r2
    b3fc:	d100      	bne.n	b400 <memmove+0x20>
    b3fe:	bd10      	pop	{r4, pc}
    b400:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    b404:	f801 4d01 	strb.w	r4, [r1, #-1]!
    b408:	e7f7      	b.n	b3fa <memmove+0x1a>
    b40a:	f811 4b01 	ldrb.w	r4, [r1], #1
    b40e:	f802 4f01 	strb.w	r4, [r2, #1]!
    b412:	e7eb      	b.n	b3ec <memmove+0xc>

0000b414 <_realloc_r>:
    b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b416:	4607      	mov	r7, r0
    b418:	4614      	mov	r4, r2
    b41a:	460e      	mov	r6, r1
    b41c:	b921      	cbnz	r1, b428 <_realloc_r+0x14>
    b41e:	4611      	mov	r1, r2
    b420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b424:	f7fc bc58 	b.w	7cd8 <_malloc_r>
    b428:	b922      	cbnz	r2, b434 <_realloc_r+0x20>
    b42a:	f7fc fc07 	bl	7c3c <_free_r>
    b42e:	4625      	mov	r5, r4
    b430:	4628      	mov	r0, r5
    b432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b434:	f000 f814 	bl	b460 <_malloc_usable_size_r>
    b438:	4284      	cmp	r4, r0
    b43a:	d90f      	bls.n	b45c <_realloc_r+0x48>
    b43c:	4621      	mov	r1, r4
    b43e:	4638      	mov	r0, r7
    b440:	f7fc fc4a 	bl	7cd8 <_malloc_r>
    b444:	4605      	mov	r5, r0
    b446:	2800      	cmp	r0, #0
    b448:	d0f2      	beq.n	b430 <_realloc_r+0x1c>
    b44a:	4631      	mov	r1, r6
    b44c:	4622      	mov	r2, r4
    b44e:	f7fe fa33 	bl	98b8 <memcpy>
    b452:	4631      	mov	r1, r6
    b454:	4638      	mov	r0, r7
    b456:	f7fc fbf1 	bl	7c3c <_free_r>
    b45a:	e7e9      	b.n	b430 <_realloc_r+0x1c>
    b45c:	4635      	mov	r5, r6
    b45e:	e7e7      	b.n	b430 <_realloc_r+0x1c>

0000b460 <_malloc_usable_size_r>:
    b460:	f851 0c04 	ldr.w	r0, [r1, #-4]
    b464:	2800      	cmp	r0, #0
    b466:	f1a0 0004 	sub.w	r0, r0, #4
    b46a:	bfbc      	itt	lt
    b46c:	580b      	ldrlt	r3, [r1, r0]
    b46e:	18c0      	addlt	r0, r0, r3
    b470:	4770      	bx	lr
	...

0000b474 <__aeabi_d2iz>:
    b474:	ea4f 0241 	mov.w	r2, r1, lsl #1
    b478:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b47c:	d215      	bcs.n	b4aa <__aeabi_d2iz+0x36>
    b47e:	d511      	bpl.n	b4a4 <__aeabi_d2iz+0x30>
    b480:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b484:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b488:	d912      	bls.n	b4b0 <__aeabi_d2iz+0x3c>
    b48a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b48e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b492:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b496:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b49a:	fa23 f002 	lsr.w	r0, r3, r2
    b49e:	bf18      	it	ne
    b4a0:	4240      	negne	r0, r0
    b4a2:	4770      	bx	lr
    b4a4:	f04f 0000 	mov.w	r0, #0
    b4a8:	4770      	bx	lr
    b4aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b4ae:	d105      	bne.n	b4bc <__aeabi_d2iz+0x48>
    b4b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    b4b4:	bf08      	it	eq
    b4b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    b4ba:	4770      	bx	lr
    b4bc:	f04f 0000 	mov.w	r0, #0
    b4c0:	4770      	bx	lr
    b4c2:	bf00      	nop
    b4c4:	61440a0d 	.word	0x61440a0d
    b4c8:	61206174 	.word	0x61206174
    b4cc:	65742074 	.word	0x65742074
    b4d0:	61207473 	.word	0x61207473
    b4d4:	65726464 	.word	0x65726464
    b4d8:	25207373 	.word	0x25207373
    b4dc:	73692064 	.word	0x73692064
    b4e0:	25203d20 	.word	0x25203d20
    b4e4:	000a0d64 	.word	0x000a0d64
    b4e8:	6e490a0d 	.word	0x6e490a0d
    b4ec:	74726576 	.word	0x74726576
    b4f0:	74206465 	.word	0x74206465
    b4f4:	64206568 	.word	0x64206568
    b4f8:	20617461 	.word	0x20617461
    b4fc:	74207461 	.word	0x74207461
    b500:	20747365 	.word	0x20747365
    b504:	72646461 	.word	0x72646461
    b508:	20737365 	.word	0x20737365
    b50c:	20646e61 	.word	0x20646e61
    b510:	74697277 	.word	0x74697277
    b514:	0d6e6574 	.word	0x0d6e6574
    b518:	00000000 	.word	0x00000000
    b51c:	6c500a0d 	.word	0x6c500a0d
    b520:	65736165 	.word	0x65736165
    b524:	6e6f6320 	.word	0x6e6f6320
    b528:	75676966 	.word	0x75676966
    b52c:	53206572 	.word	0x53206572
    b530:	204b4c42 	.word	0x204b4c42
    b534:	65737566 	.word	0x65737566
    b538:	206f7420 	.word	0x206f7420
    b53c:	6f6c6c61 	.word	0x6f6c6c61
    b540:	65746163 	.word	0x65746163
    b544:	616d5320 	.word	0x616d5320
    b548:	45457472 	.word	0x45457472
    b54c:	4d4f5250 	.word	0x4d4f5250
    b550:	65726120 	.word	0x65726120
    b554:	00000d61 	.word	0x00000d61
    b558:	64323025 	.word	0x64323025
    b55c:	00000020 	.word	0x00000020
    b560:	6d530a0d 	.word	0x6d530a0d
    b564:	45747261 	.word	0x45747261
    b568:	4f525045 	.word	0x4f525045
    b56c:	6f63204d 	.word	0x6f63204d
    b570:	6961746e 	.word	0x6961746e
    b574:	7620736e 	.word	0x7620736e
    b578:	64696c61 	.word	0x64696c61
    b57c:	74616420 	.word	0x74616420
    b580:	000d2061 	.word	0x000d2061
    b584:	74530a0d 	.word	0x74530a0d
    b588:	6e69726f 	.word	0x6e69726f
    b58c:	69732067 	.word	0x69732067
    b590:	74616e67 	.word	0x74616e67
    b594:	20657275 	.word	0x20657275
    b598:	53206f74 	.word	0x53206f74
    b59c:	7472616d 	.word	0x7472616d
    b5a0:	52504545 	.word	0x52504545
    b5a4:	61204d4f 	.word	0x61204d4f
    b5a8:	65726464 	.word	0x65726464
    b5ac:	30207373 	.word	0x30207373
    b5b0:	20303078 	.word	0x20303078
    b5b4:	30206f74 	.word	0x30206f74
    b5b8:	0d333078 	.word	0x0d333078
    b5bc:	00000000 	.word	0x00000000
    b5c0:	75460a0d 	.word	0x75460a0d
    b5c4:	76206573 	.word	0x76206573
    b5c8:	65756c61 	.word	0x65756c61
    b5cc:	6f662073 	.word	0x6f662073
    b5d0:	42532072 	.word	0x42532072
    b5d4:	3d204b4c 	.word	0x3d204b4c
    b5d8:	2c642520 	.word	0x2c642520
    b5dc:	5a535020 	.word	0x5a535020
    b5e0:	25203d20 	.word	0x25203d20
    b5e4:	53202e64 	.word	0x53202e64
    b5e8:	74206565 	.word	0x74206565
    b5ec:	74206568 	.word	0x74206568
    b5f0:	656c6261 	.word	0x656c6261
    b5f4:	6d532720 	.word	0x6d532720
    b5f8:	45747261 	.word	0x45747261
    b5fc:	4f525045 	.word	0x4f525045
    b600:	6956204d 	.word	0x6956204d
    b604:	61757472 	.word	0x61757472
    b608:	0909206c 	.word	0x0909206c
    b60c:	657a6953 	.word	0x657a6953
    b610:	206e6920 	.word	0x206e6920
    b614:	65747942 	.word	0x65747942
    b618:	69202773 	.word	0x69202773
    b61c:	6874206e 	.word	0x6874206e
    b620:	61442065 	.word	0x61442065
    b624:	68736174 	.word	0x68736174
    b628:	20746565 	.word	0x20746565
    b62c:	63206f74 	.word	0x63206f74
    b630:	75636c61 	.word	0x75636c61
    b634:	6574616c 	.word	0x6574616c
    b638:	746f7420 	.word	0x746f7420
    b63c:	61206c61 	.word	0x61206c61
    b640:	6c696176 	.word	0x6c696176
    b644:	656c6261 	.word	0x656c6261
    b648:	74796220 	.word	0x74796220
    b64c:	0d207365 	.word	0x0d207365
    b650:	0000000a 	.word	0x0000000a
    b654:	45450a0d 	.word	0x45450a0d
    b658:	4d4f5250 	.word	0x4d4f5250
    b65c:	74614420 	.word	0x74614420
    b660:	74612061 	.word	0x74612061
    b664:	72696620 	.word	0x72696620
    b668:	25207473 	.word	0x25207473
    b66c:	6f6c2064 	.word	0x6f6c2064
    b670:	69746163 	.word	0x69746163
    b674:	3a736e6f 	.word	0x3a736e6f
    b678:	000a0d20 	.word	0x000a0d20
    b67c:	6e450a0d 	.word	0x6e450a0d
    b680:	20726574 	.word	0x20726574
    b684:	72646461 	.word	0x72646461
    b688:	20737365 	.word	0x20737365
    b68c:	00203e3e 	.word	0x00203e3e
    b690:	00756c25 	.word	0x00756c25
    b694:	52450a0d 	.word	0x52450a0d
    b698:	3a524f52 	.word	0x3a524f52
    b69c:	64644120 	.word	0x64644120
    b6a0:	73736572 	.word	0x73736572
    b6a4:	766e6920 	.word	0x766e6920
    b6a8:	64696c61 	.word	0x64696c61
    b6ac:	7254202e 	.word	0x7254202e
    b6b0:	67612079 	.word	0x67612079
    b6b4:	206e6961 	.word	0x206e6961
    b6b8:	0000000d 	.word	0x0000000d
    b6bc:	6e450a0d 	.word	0x6e450a0d
    b6c0:	20726574 	.word	0x20726574
    b6c4:	61746164 	.word	0x61746164
    b6c8:	203e3e20 	.word	0x203e3e20
    b6cc:	00000000 	.word	0x00000000
    b6d0:	72570a0d 	.word	0x72570a0d
    b6d4:	65747469 	.word	0x65747469
    b6d8:	6425206e 	.word	0x6425206e
    b6dc:	20746120 	.word	0x20746120
    b6e0:	00006425 	.word	0x00006425
    b6e4:	00007325 	.word	0x00007325
    b6e8:	65530a0d 	.word	0x65530a0d
    b6ec:	7463656c 	.word	0x7463656c
    b6f0:	6f206465 	.word	0x6f206465
    b6f4:	6f697470 	.word	0x6f697470
    b6f8:	7369206e 	.word	0x7369206e
    b6fc:	0d642520 	.word	0x0d642520
    b700:	0000000a 	.word	0x0000000a
    b704:	65520a0d 	.word	0x65520a0d
    b708:	6e727574 	.word	0x6e727574
    b70c:	20676e69 	.word	0x20676e69
    b710:	6d206f74 	.word	0x6d206f74
    b714:	206e6961 	.word	0x206e6961
    b718:	756e656d 	.word	0x756e656d
    b71c:	0000000d 	.word	0x0000000d
    b720:	6e490a0d 	.word	0x6e490a0d
    b724:	696c6176 	.word	0x696c6176
    b728:	706f2064 	.word	0x706f2064
    b72c:	6e6f6974 	.word	0x6e6f6974
    b730:	0000000d 	.word	0x0000000d
    b734:	6e490a0d 	.word	0x6e490a0d
    b738:	72207469 	.word	0x72207469
    b73c:	6c757365 	.word	0x6c757365
    b740:	203d2074 	.word	0x203d2074
    b744:	0a0d7525 	.word	0x0a0d7525
    b748:	00000000 	.word	0x00000000
    b74c:	6e756f4d 	.word	0x6e756f4d
    b750:	65722074 	.word	0x65722074
    b754:	746c7573 	.word	0x746c7573
    b758:	25203d20 	.word	0x25203d20
    b75c:	000a0d75 	.word	0x000a0d75
    b760:	6b736944 	.word	0x6b736944
    b764:	61747320 	.word	0x61747320
    b768:	20737574 	.word	0x20737574
    b76c:	7525203d 	.word	0x7525203d
    b770:	00000a0d 	.word	0x00000a0d
    b774:	43435553 	.word	0x43435553
    b778:	21535345 	.word	0x21535345
    b77c:	0000000d 	.word	0x0000000d
    b780:	6c696146 	.word	0x6c696146
    b784:	74206465 	.word	0x74206465
    b788:	616d206f 	.word	0x616d206f
    b78c:	6620656b 	.word	0x6620656b
    b790:	2e656c69 	.word	0x2e656c69
    b794:	6c696620 	.word	0x6c696620
    b798:	65725f65 	.word	0x65725f65
    b79c:	746c7573 	.word	0x746c7573
    b7a0:	25203d20 	.word	0x25203d20
    b7a4:	000a0d75 	.word	0x000a0d75
    b7a8:	64726148 	.word	0x64726148
    b7ac:	72726520 	.word	0x72726520
    b7b0:	6f20726f 	.word	0x6f20726f
    b7b4:	72756363 	.word	0x72756363
    b7b8:	20646572 	.word	0x20646572
    b7bc:	74206e69 	.word	0x74206e69
    b7c0:	6c206568 	.word	0x6c206568
    b7c4:	6c20776f 	.word	0x6c20776f
    b7c8:	6c657665 	.word	0x6c657665
    b7cc:	73696420 	.word	0x73696420
    b7d0:	2f49206b 	.word	0x2f49206b
    b7d4:	616c204f 	.word	0x616c204f
    b7d8:	00726579 	.word	0x00726579
    b7dc:	65737341 	.word	0x65737341
    b7e0:	6f697472 	.word	0x6f697472
    b7e4:	6166206e 	.word	0x6166206e
    b7e8:	64656c69 	.word	0x64656c69
    b7ec:	00000000 	.word	0x00000000
    b7f0:	73796850 	.word	0x73796850
    b7f4:	6c616369 	.word	0x6c616369
    b7f8:	69726420 	.word	0x69726420
    b7fc:	63206576 	.word	0x63206576
    b800:	6f6e6e61 	.word	0x6f6e6e61
    b804:	6f772074 	.word	0x6f772074
    b808:	00006b72 	.word	0x00006b72
    b80c:	6c756f43 	.word	0x6c756f43
    b810:	6f6e2064 	.word	0x6f6e2064
    b814:	69662074 	.word	0x69662074
    b818:	6620646e 	.word	0x6620646e
    b81c:	00656c69 	.word	0x00656c69
    b820:	6c756f43 	.word	0x6c756f43
    b824:	6f6e2064 	.word	0x6f6e2064
    b828:	69662074 	.word	0x69662074
    b82c:	7020646e 	.word	0x7020646e
    b830:	00687461 	.word	0x00687461
    b834:	68746150 	.word	0x68746150
    b838:	6d616e20 	.word	0x6d616e20
    b83c:	6f662065 	.word	0x6f662065
    b840:	74616d72 	.word	0x74616d72
    b844:	766e6920 	.word	0x766e6920
    b848:	64696c61 	.word	0x64696c61
    b84c:	00000000 	.word	0x00000000
    b850:	65636341 	.word	0x65636341
    b854:	64207373 	.word	0x64207373
    b858:	65696e65 	.word	0x65696e65
    b85c:	75642064 	.word	0x75642064
    b860:	6f742065 	.word	0x6f742065
    b864:	6f727020 	.word	0x6f727020
    b868:	69626968 	.word	0x69626968
    b86c:	20646574 	.word	0x20646574
    b870:	65636361 	.word	0x65636361
    b874:	6f207373 	.word	0x6f207373
    b878:	69642072 	.word	0x69642072
    b87c:	74636572 	.word	0x74636572
    b880:	2079726f 	.word	0x2079726f
    b884:	6c6c7566 	.word	0x6c6c7566
    b888:	00000000 	.word	0x00000000
    b88c:	65636341 	.word	0x65636341
    b890:	64207373 	.word	0x64207373
    b894:	65696e65 	.word	0x65696e65
    b898:	75642064 	.word	0x75642064
    b89c:	6f742065 	.word	0x6f742065
    b8a0:	6f727020 	.word	0x6f727020
    b8a4:	69626968 	.word	0x69626968
    b8a8:	20646574 	.word	0x20646574
    b8ac:	65636361 	.word	0x65636361
    b8b0:	00007373 	.word	0x00007373
    b8b4:	20656854 	.word	0x20656854
    b8b8:	656c6966 	.word	0x656c6966
    b8bc:	7269642f 	.word	0x7269642f
    b8c0:	6f746365 	.word	0x6f746365
    b8c4:	6f207972 	.word	0x6f207972
    b8c8:	63656a62 	.word	0x63656a62
    b8cc:	73692074 	.word	0x73692074
    b8d0:	766e6920 	.word	0x766e6920
    b8d4:	64696c61 	.word	0x64696c61
    b8d8:	00000000 	.word	0x00000000
    b8dc:	20656854 	.word	0x20656854
    b8e0:	73796870 	.word	0x73796870
    b8e4:	6c616369 	.word	0x6c616369
    b8e8:	69726420 	.word	0x69726420
    b8ec:	69206576 	.word	0x69206576
    b8f0:	72772073 	.word	0x72772073
    b8f4:	20657469 	.word	0x20657469
    b8f8:	746f7270 	.word	0x746f7270
    b8fc:	65746365 	.word	0x65746365
    b900:	00000064 	.word	0x00000064
    b904:	20656854 	.word	0x20656854
    b908:	69676f6c 	.word	0x69676f6c
    b90c:	206c6163 	.word	0x206c6163
    b910:	76697264 	.word	0x76697264
    b914:	756e2065 	.word	0x756e2065
    b918:	7265626d 	.word	0x7265626d
    b91c:	20736920 	.word	0x20736920
    b920:	61766e69 	.word	0x61766e69
    b924:	0064696c 	.word	0x0064696c
    b928:	20656854 	.word	0x20656854
    b92c:	756c6f76 	.word	0x756c6f76
    b930:	6820656d 	.word	0x6820656d
    b934:	6e207361 	.word	0x6e207361
    b938:	6f77206f 	.word	0x6f77206f
    b93c:	61206b72 	.word	0x61206b72
    b940:	00616572 	.word	0x00616572
    b944:	72656854 	.word	0x72656854
    b948:	73692065 	.word	0x73692065
    b94c:	206f6e20 	.word	0x206f6e20
    b950:	696c6176 	.word	0x696c6176
    b954:	41462064 	.word	0x41462064
    b958:	6f762054 	.word	0x6f762054
    b95c:	656d756c 	.word	0x656d756c
    b960:	00000000 	.word	0x00000000
    b964:	20656854 	.word	0x20656854
    b968:	6b6d5f66 	.word	0x6b6d5f66
    b96c:	29287366 	.word	0x29287366
    b970:	6f626120 	.word	0x6f626120
    b974:	64657472 	.word	0x64657472
    b978:	65756420 	.word	0x65756420
    b97c:	206f7420 	.word	0x206f7420
    b980:	20796e61 	.word	0x20796e61
    b984:	61726170 	.word	0x61726170
    b988:	6574656d 	.word	0x6574656d
    b98c:	72652072 	.word	0x72652072
    b990:	00726f72 	.word	0x00726f72
    b994:	6c756f43 	.word	0x6c756f43
    b998:	6f6e2064 	.word	0x6f6e2064
    b99c:	65672074 	.word	0x65672074
    b9a0:	20612074 	.word	0x20612074
    b9a4:	6e617267 	.word	0x6e617267
    b9a8:	6f742074 	.word	0x6f742074
    b9ac:	63636120 	.word	0x63636120
    b9b0:	20737365 	.word	0x20737365
    b9b4:	20656874 	.word	0x20656874
    b9b8:	756c6f76 	.word	0x756c6f76
    b9bc:	7720656d 	.word	0x7720656d
    b9c0:	69687469 	.word	0x69687469
    b9c4:	6564206e 	.word	0x6564206e
    b9c8:	656e6966 	.word	0x656e6966
    b9cc:	65702064 	.word	0x65702064
    b9d0:	646f6972 	.word	0x646f6972
    b9d4:	00000000 	.word	0x00000000
    b9d8:	20656854 	.word	0x20656854
    b9dc:	7265706f 	.word	0x7265706f
    b9e0:	6f697461 	.word	0x6f697461
    b9e4:	7369206e 	.word	0x7369206e
    b9e8:	6a657220 	.word	0x6a657220
    b9ec:	65746365 	.word	0x65746365
    b9f0:	63612064 	.word	0x63612064
    b9f4:	64726f63 	.word	0x64726f63
    b9f8:	20676e69 	.word	0x20676e69
    b9fc:	74206f74 	.word	0x74206f74
    ba00:	66206568 	.word	0x66206568
    ba04:	20656c69 	.word	0x20656c69
    ba08:	72616873 	.word	0x72616873
    ba0c:	20676e69 	.word	0x20676e69
    ba10:	696c6f70 	.word	0x696c6f70
    ba14:	00007963 	.word	0x00007963
    ba18:	204e464c 	.word	0x204e464c
    ba1c:	6b726f77 	.word	0x6b726f77
    ba20:	20676e69 	.word	0x20676e69
    ba24:	66667562 	.word	0x66667562
    ba28:	63207265 	.word	0x63207265
    ba2c:	646c756f 	.word	0x646c756f
    ba30:	746f6e20 	.word	0x746f6e20
    ba34:	20656220 	.word	0x20656220
    ba38:	6f6c6c61 	.word	0x6f6c6c61
    ba3c:	65746163 	.word	0x65746163
    ba40:	00000064 	.word	0x00000064
    ba44:	626d754e 	.word	0x626d754e
    ba48:	6f207265 	.word	0x6f207265
    ba4c:	706f2066 	.word	0x706f2066
    ba50:	66206e65 	.word	0x66206e65
    ba54:	73656c69 	.word	0x73656c69
    ba58:	5f203e20 	.word	0x5f203e20
    ba5c:	4c5f5346 	.word	0x4c5f5346
    ba60:	004b434f 	.word	0x004b434f
    ba64:	65766947 	.word	0x65766947
    ba68:	6170206e 	.word	0x6170206e
    ba6c:	656d6172 	.word	0x656d6172
    ba70:	20726574 	.word	0x20726574
    ba74:	69207369 	.word	0x69207369
    ba78:	6c61766e 	.word	0x6c61766e
    ba7c:	00006469 	.word	0x00006469
    ba80:	63637553 	.word	0x63637553
    ba84:	00737365 	.word	0x00737365
    ba88:	63256325 	.word	0x63256325
    ba8c:	63256325 	.word	0x63256325
    ba90:	25206325 	.word	0x25206325
    ba94:	30252f75 	.word	0x30252f75
    ba98:	252f7532 	.word	0x252f7532
    ba9c:	20753230 	.word	0x20753230
    baa0:	75323025 	.word	0x75323025
    baa4:	3230253a 	.word	0x3230253a
    baa8:	39252075 	.word	0x39252075
    baac:	2020756c 	.word	0x2020756c
    bab0:	0a0d7325 	.word	0x0a0d7325
    bab4:	00000000 	.word	0x00000000
    bab8:	20753425 	.word	0x20753425
    babc:	656c6946 	.word	0x656c6946
    bac0:	2c297328 	.word	0x2c297328
    bac4:	6c303125 	.word	0x6c303125
    bac8:	79622075 	.word	0x79622075
    bacc:	20736574 	.word	0x20736574
    bad0:	61746f74 	.word	0x61746f74
    bad4:	34250a6c 	.word	0x34250a6c
    bad8:	69442075 	.word	0x69442075
    badc:	29732872 	.word	0x29732872
    bae0:	00000000 	.word	0x00000000
    bae4:	3125202c 	.word	0x3125202c
    bae8:	20756c30 	.word	0x20756c30
    baec:	65747962 	.word	0x65747962
    baf0:	72662073 	.word	0x72662073
    baf4:	0a0d6565 	.word	0x0a0d6565
    baf8:	00000000 	.word	0x00000000
    bafc:	6b736944 	.word	0x6b736944
    bb00:	746f6e20 	.word	0x746f6e20
    bb04:	696e6920 	.word	0x696e6920
    bb08:	6c616974 	.word	0x6c616974
    bb0c:	64657a69 	.word	0x64657a69
    bb10:	00000000 	.word	0x00000000
    bb14:	6d206f4e 	.word	0x6d206f4e
    bb18:	75696465 	.word	0x75696465
    bb1c:	6e69206d 	.word	0x6e69206d
    bb20:	65687420 	.word	0x65687420
    bb24:	69726420 	.word	0x69726420
    bb28:	00006576 	.word	0x00006576
    bb2c:	6b736944 	.word	0x6b736944
    bb30:	69727720 	.word	0x69727720
    bb34:	70206574 	.word	0x70206574
    bb38:	65746f72 	.word	0x65746f72
    bb3c:	64657463 	.word	0x64657463
    bb40:	00000000 	.word	0x00000000

0000bb44 <ExCvt>:
    bb44:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
    bb54:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    bb64:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    bb74:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    bb84:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    bb94:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    bba4:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    bbb4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000bbc4 <vst.4938>:
    bbc4:	02000400 00800100 00200040 00080010     ........@. .....
    bbd4:	00020004 00000000                       ........

0000bbdc <cst.4939>:
    bbdc:	40008000 10002000 40000800 10002000     ...@. .....@. ..
    bbec:	04000800 00000200 2c2b2a22 3d3c3b3a     ........"*+,:;<=
    bbfc:	5d5b3f3e 00007f7c 2c2b2a22 3c3b3a2e     >?[]|..."*+,.:;<
    bc0c:	5b3f3e3d 007f7c5d 4d90feeb 534f4453     =>?[]|.....MSDOS
    bc1c:	00302e35 4e204f4e 20454d41 46202020     5.0.NO NAME    F
    bc2c:	32335441 00202020 4e204f4e 20454d41     AT32   .NO NAME 
    bc3c:	46202020 20205441 00202020 682f2e2e        FAT     .../h
    bc4c:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
    bc5c:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
    bc6c:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    bc7c:	732f6c61 682f6372 6d5f6c61 735f6963     al/src/hal_mci_s
    bc8c:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    bc9c:	682f6372 755f6c61 74726173 6e79735f     rc/hal_usart_syn
    bcac:	00632e63 682f2e2e 722f6c70 682f6374     c.c.../hpl/rtc/h
    bcbc:	725f6c70 632e6374 00000000 682f2e2e     pl_rtc.c....../h
    bccc:	732f6c70 2f636864 5f6c7068 63686473     pl/sdhc/hpl_sdhc
    bcdc:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
    bcec:	41014000 43000000 43000400 43000800     .@.A...C...C...C
    bcfc:	43000c00                                ...C

0000bd00 <_usarts>:
    bd00:	00000000 40100004 00030000 00700002     .......@......p.
    bd10:	0000d8ad 00000000 00000002 40100004     ...............@
    bd20:	00030000 00700002 0000d8ad 00000000     ......p.........

0000bd30 <_i2cms>:
	...
    bd48:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    bd58:	65735f6c 6d6f6372 0000632e 7261485b     l_sercom.c..[Har
    bd68:	75614664 0d5d746c 00000000 53207c20     dFault]..... | S
    bd78:	6b636174 61726620 0d3a656d 00000000     tack frame:.....
    bd88:	7c207c20 20305220 203d2020 30257830      | | R0   = 0x%0
    bd98:	0a0d5838 00000000 7c207c20 20315220     8X...... | | R1 
    bda8:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    bdb8:	7c207c20 20325220 203d2020 30257830      | | R2   = 0x%0
    bdc8:	0a0d5838 00000000 7c207c20 20335220     8X...... | | R3 
    bdd8:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    bde8:	7c207c20 32315220 203d2020 30257830      | | R12  = 0x%0
    bdf8:	0a0d5838 00000000 7c207c20 20524c20     8X...... | | LR 
    be08:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    be18:	7c207c20 20435020 203d2020 30257830      | | PC   = 0x%0
    be28:	0a0d5838 00000000 7c207c20 52535020     8X...... | | PSR
    be38:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    be48:	46207c20 462f5253 0d3a5241 00000000      | FSR/FAR:.....
    be58:	7c207c20 6e6f4320 75676966 6c626172      | | Configurabl
    be68:	61462065 20746c75 74617453 52207375     e Fault Status R
    be78:	73696765 0d726574 00000000 7c207c20     egister..... | |
    be88:	43207c20 20525346 30203d20 38302578      | CFSR  = 0x%08
    be98:	000a0d58 7c207c20 7c207c20 6d654d20     X... | | | | Mem
    bea8:	616e614d 53206567 75746174 65522073     Manage Status Re
    beb8:	74736967 000d7265 7c207c20 7c207c20     gister.. | | | |
    bec8:	4d207c20 5253464d 30203d20 32302578      | MMFSR = 0x%02
    bed8:	000a0d58 7c207c20 7c207c20 73754220     X... | | | | Bus
    bee8:	6c756146 74532074 73757461 67655220     Fault Status Reg
    bef8:	65747369 00000d72 7c207c20 7c207c20     ister... | | | |
    bf08:	42207c20 20525346 7830203d 58323025      | BFSR = 0x%02X
    bf18:	00000a0d 7c207c20 7c207c20 61735520     .... | | | | Usa
    bf28:	61466567 20746c75 74617453 52207375     geFault Status R
    bf38:	73696765 0d726574 00000000 7c207c20     egister..... | |
    bf48:	7c207c20 55207c20 20525346 7830203d      | | | UFSR = 0x
    bf58:	58323025 00000a0d 7c207c20 6d654d20     %02X.... | | Mem
    bf68:	616e614d 41206567 65726464 52207373     Manage Address R
    bf78:	73696765 20726574 6c617628 74696469     egister (validit
    bf88:	25203a79 0a0d2958 00000000 7c207c20     y: %X)...... | |
    bf98:	4d207c20 5241464d 30203d20 38302578      | MMFAR = 0x%08
    bfa8:	000a0d58 7c207c20 73754220 6c756146     X... | | BusFaul
    bfb8:	64412074 73657264 65522073 74736967     t Address Regist
    bfc8:	20207265 6c617628 74696469 25203a79     er  (validity: %
    bfd8:	0a0d2958 00000000 7c207c20 42207c20     X)...... | | | B
    bfe8:	20524146 7830203d 58383025 00000a0d     FAR = 0x%08X....
    bff8:	7c207c20 72614820 61462064 20746c75      | | Hard Fault 
    c008:	74617453 52207375 73696765 0d726574     Status Register.
    c018:	00000000 7c207c20 48207c20 20525346     .... | | | HFSR 
    c028:	30203d20 38302578 000a0d58 7c207c20      = 0x%08X... | |
    c038:	53464420 203d2052 30257830 0a0d5838      DFSR = 0x%08X..
    c048:	00000000 7c207c20 53464120 203d2052     .... | | AFSR = 
    c058:	30257830 0a0d5838 00000000 4d207c20     0x%08X...... | M
    c068:	0d637369 00000000 7c207c20 2f524c20     isc..... | | LR/
    c078:	5f435845 55544552 203d4e52 30257830     EXC_RETURN= 0x%0
    c088:	0a0d5834 00000000 00786825 6e450a0d     4X......%hx...En
    c098:	20726574 656c6966 656d616e 203e3e20     ter filename >> 
    c0a8:	00000000 65746e45 61642072 28206174     ....Enter data (
    c0b8:	77206f6e 65746968 63617073 3e202965     no whitespace) >
    c0c8:	0000203e 65520a0d 65697274 676e6976     > ....Retrieving
    c0d8:	20445320 74617473 000d7375 65520a0d      SD status....Re
    c0e8:	6e727574 20676e69 6c206f74 72616469     turning to lidar
    c0f8:	6e656d20 00000d75 65520a0d 73657571      menu.....Reques
    c108:	676e6974 44694c20 63205241 69666e6f     ting LiDAR confi
    c118:	61727567 6e6f6974 646f6d20 6f632065     guration mode co
    c128:	0d746e75 00000000 65520a0d 73657571     unt.......Reques
    c138:	676e6974 44694c20 73205241 6c706d61     ting LiDAR sampl
    c148:	75642065 69746172 6f206e6f 63732066     e duration of sc
    c158:	6d206e61 0d65646f 00000000 65520a0d     an mode.......Re
    c168:	73657571 676e6974 44694c20 73205241     questing LiDAR s
    c178:	206e6163 65646f6d 78616d20 73696420     can mode max dis
    c188:	636e6174 00000d65 65520a0d 73657571     tance.....Reques
    c198:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    c1a8:	726f6620 73206563 0d6e6163 00000000      force scan.....
    c1b8:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    c1c8:	61205241 6577736e 6f632072 6e616d6d     AR answer comman
    c1d8:	79742064 66206570 7320726f 206e6163     d type for scan 
    c1e8:	65646f6d 0000000d 65520a0d 73657571     mode......Reques
    c1f8:	676e6974 44694c20 73205241 206e6163     ting LiDAR scan 
    c208:	65646f6d 6d616e20 00000d65 74530a0d     mode name.....St
    c218:	69747261 4c20676e 52414469 746f6d20     arting LiDAR mot
    c228:	000d726f 74530a0d 6970706f 4c20676e     or....Stopping L
    c238:	52414469 746f6d20 000d726f 65520a0d     iDAR motor....Re
    c248:	73657571 676e6974 44694c20 73205241     questing LiDAR s
    c258:	0d706f74 00000000 65520a0d 73657571     top.......Reques
    c268:	676e6974 44694c20 72205241 74657365     ting LiDAR reset
    c278:	0000000d 65520a0d 73657571 676e6974     ......Requesting
    c288:	44694c20 73205241 74726174 61637320      LiDAR start sca
    c298:	00000d6e 65520a0d 73657571 676e6974     n.....Requesting
    c2a8:	44694c20 73205241 74726174 70786520      LiDAR start exp
    c2b8:	73736572 61637320 00000d6e 65520a0d     ress scan.....Re
    c2c8:	65697274 676e6976 44694c20 69205241     trieving LiDAR i
    c2d8:	0d6f666e 00000000 65520a0d 65697274     nfo.......Retrie
    c2e8:	676e6976 44694c20 68205241 746c6165     ving LiDAR healt
    c2f8:	00000d68 65520a0d 65697274 676e6976     h.....Retrieving
    c308:	44694c20 73205241 6c706d61 74617265      LiDAR samplerat
    c318:	000d7365 63256325 00000000 63256325     es..%c%c....%c%c
    c328:	00006325 65520a0d 73657571 676e6974     %c....Requesting
    c338:	44694c20 69205241 0d6f666e 00000000      LiDAR info.....
    c348:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    c358:	68205241 746c6165 00000d68 65520a0d     AR health.....Re
    c368:	73657571 676e6974 44694c20 73205241     questing LiDAR s
    c378:	6c706d61 74617265 000d7365 65520a0d     amplerates....Re
    c388:	73657571 676e6974 44694c20 63205241     questing LiDAR c
    c398:	69666e6f 61727567 6e6f6974 74616420     onfiguration dat
    c3a8:	00000d61 58323025 00000000 50522023     a...%02X....# RP
    c3b8:	4144694c 6f4d2052 206c6564 203a4449     LiDAR Model ID: 
    c3c8:	0a0d7525 00000000 50522023 4144694c     %u......# RPLiDA
    c3d8:	69462052 61776d72 56206572 69737265     R Firmware Versi
    c3e8:	203a6e6f 252e7525 000a0d75 61482023     on: %u.%u...# Ha
    c3f8:	61776472 56206572 69737265 203a6e6f     rdware Version: 
    c408:	0a0d7525 00000000 65532023 6c616972     %u......# Serial
    c418:	6d754e20 3a726562 25783020 000a0d73      Number: 0x%s...
    c428:	444f4f47 00000000 4e524157 00474e49     GOOD....WARNING.
    c438:	4f525245 00000052 4e4b4e55 004e574f     ERROR...UNKNOWN.
    c448:	4c203a20 52414469 61654820 2068746c      : LiDAR Health 
    c458:	25207369 0a0d2173 00000000 4c203a20     is %s!...... : L
    c468:	52414469 61654820 2068746c 25207369     iDAR Health is %
    c478:	0a0d2173 45203a20 726f7272 646f6320     s!.. : Error cod
    c488:	25203a65 000a0d75 53203a20 646e6174     e: %u... : Stand
    c498:	20647261 6e616353 6d615320 72656c70     ard Scan Sampler
    c4a8:	3a657461 0d752520 0000000a 45203a20     ate: %u..... : E
    c4b8:	65727078 53207373 206e6163 706d6153     xpress Scan Samp
    c4c8:	6172656c 203a6574 0a0d7525 00000000     lerate: %u......
    c4d8:	25203a20 63732075 6d206e61 7365646f      : %u scan modes
    c4e8:	70757320 74726f70 0a0d6465 00000000      supported......
    c4f8:	53203a20 69636570 64656966 61637320      : Specified sca
    c508:	6f6d206e 63206564 7374736f 756c2520     n mode costs %lu
    c518:	20737520 20726570 706d6173 0a0d656c      us per sample..
    c528:	00000000 53203a20 69636570 64656966     .... : Specified
    c538:	61637320 6f6d206e 68206564 61207361      scan mode has a
    c548:	78616d20 61656d20 69727573 6420676e      max measuring d
    c558:	61747369 2065636e 2520666f 6d20756c     istance of %lu m
    c568:	00000a0d 53203a20 69636570 64656966     .... : Specified
    c578:	61637320 6f6d206e 72206564 72757465      scan mode retur
    c588:	6420736e 20617461 72206e69 64696c70     ns data in rplid
    c598:	725f7261 5f707365 7361656d 6d657275     ar_resp_measurem
    c5a8:	5f746e65 65646f6e 000d745f 53203a20     ent_node_t.. : S
    c5b8:	69636570 64656966 61637320 6f6d206e     pecified scan mo
    c5c8:	72206564 72757465 6420736e 20617461     de returns data 
    c5d8:	63206e69 75737061 2064656c 6d726f66     in capsuled form
    c5e8:	000d7461 53203a20 69636570 64656966     at.. : Specified
    c5f8:	61637320 6f6d206e 72206564 72757465      scan mode retur
    c608:	6420736e 20617461 75206e69 6172746c     ns data in ultra
    c618:	70616320 656c7573 6f662064 74616d72      capsuled format
    c628:	0000000d 53203a20 69636570 64656966     .... : Specified
    c638:	61637320 6f6d206e 72206564 72757465      scan mode retur
    c648:	6420736e 20617461 75206e69 6570736e     ns data in unspe
    c658:	69666963 66206465 616d726f 30282074     cified format (0
    c668:	32302578 0a0d2958 00000000 54203a20     x%02X)...... : T
    c678:	63697079 73206c61 206e6163 65646f6d     ypical scan mode
    c688:	20646920 4c20666f 52414469 20736920      id of LiDAR is 
    c698:	0d756825 0000000a 53203a20 69636570     %hu..... : Speci
    c6a8:	64656966 61637320 6f6d206e 6e206564     fied scan mode n
    c6b8:	20656d61 25207369 000a0d73 0a0d0a0d     ame is %s.......
    c6c8:	3d3d3d3d 3d3d3d3d 4144694c 75412052     ========LiDAR Au
    c6d8:	616d6f74 20646574 7070614d 20676e69     tomated Mapping 
    c6e8:	74737953 28206d65 534d414c 3d3d3d29     System (LAMS)===
    c6f8:	3d3d3d3d 00000d3d 6e490a0d 696c6176     =====.....Invali
    c708:	706f2064 6e6f6974 00000d20 535b0a0d     d option .....[S
    c718:	206e6163 6f727245 000d5d72 54207c20     can Error].. | T
    c728:	6f656d69 45207475 726f7272 0000000d     imeout Error....
    c738:	4f207c20 6f2d7475 6f422d66 73646e75      | Out-of-Bounds
    c748:	72724520 000d726f 7c207c20 74796220      Error.. | | byt
    c758:	6f632065 20746e75 756c2528 65772029     e count (%lu) we
    c768:	7020746e 20747361 20656874 70736572     nt past the resp
    c778:	65736e6f 73656420 70697263 20726f74     onse descriptor 
    c788:	696d696c 25282074 0d29756c 0000000a     limit (%lu).....
    c798:	44207c20 206b7369 74696e49 696c6169      | Disk Initiali
    c7a8:	6974617a 45206e6f 726f7272 0000000d     zation Error....
    c7b8:	7c207c20 0d732520 0000000a 44207c20      | | %s..... | D
    c7c8:	206b7369 6e756f4d 72452074 0d726f72     isk Mount Error.
    c7d8:	00000000 46207c20 20656c69 61657243     .... | File Crea
    c7e8:	45206574 726f7272 0000000d 46207c20     te Error.... | F
    c7f8:	20656c69 74697257 72452065 0d726f72     ile Write Error.
    c808:	00000000 46207c20 20656c69 736f6c43     .... | File Clos
    c818:	72452065 0d726f72 00000000 45207c20     e Error..... | E
    c828:	726f7272 6e654720 74617265 20676e69     rror Generating 
    c838:	2077654e 656c6946 656d616e 0000000d     New Filename....
    c848:	45207c20 726f7272 726f4620 7474616d      | Error Formatt
    c858:	20676e69 64616548 6f207265 69462066     ing Header of Fi
    c868:	000d656c 45207c20 726f7272 646f6320     le.. | Error cod
    c878:	75252065 00000a0d 72500a0d 6f662d65     e %u......Pre-fo
    c888:	74616d72 20646574 64616568 0d3a7265     rmatted header:.
    c898:	250a0d0a 000a0d73 65747962 65722073     ...%s...bytes re
    c8a8:	3d206461 0d752520 0000000a 676e6f6c     ad = %u.....long
    c8b8:	20747365 676e656c 3d206874 0d752520     est length = %u.
    c8c8:	0000000a 6f460a0d 74616d72 20646574     ......Formatted 
    c8d8:	64616568 0d3a7265 00000d0a 00000023     header:.....#...
    c8e8:	00002323 6e616373 75333025 6d616c2e     ##..scan%03u.lam
    c8f8:	00000000 72570a0d 6e697469 6f742067     ......Writing to
    c908:	0d732520 0000000a 74530a0d 69747261      %s.......Starti
    c918:	7320676e 0d6e6163 00000000 63532023     ng scan.....# Sc
    c928:	6d206e61 2065646f 22207369 0d227325     an mode is "%s".
    c938:	0000000a 6c412023 6e726574 76697461     ....# Alternativ
    c948:	6f6d2065 3a736564 00005b20 22732522     e modes: [.."%s"
    c958:	00000000 63532023 63206e61 7374736f     ....# Scan costs
    c968:	756c2520 70207375 73207265 6c706d61      %luus per sampl
    c978:	000a0d65 614d2023 656d2078 72757361     e...# Max measur
    c988:	20676e69 74736964 65636e61 20736920     ing distance is 
    c998:	6d756c25 00000a0d 69462023 6620656c     %lum....# File f
    c9a8:	616d726f 5b203a74 56524553 4e41204f     ormat: [SERVO AN
    c9b8:	5d454c47 49445b2c 4e415453 2c5d4543     GLE],[DISTANCE],
    c9c8:	44494c5b 41205241 454c474e 000a0d5d     [LIDAR ANGLE]...
    c9d8:	65530a0d 206f7672 6c676e61 75252065     ..Servo angle %u
    c9e8:	00000a0d 252e7525 00000075 76410a0d     ....%u.%u.....Av
    c9f8:	67617265 53206465 206e6163 61746144     eraged Scan Data
    ca08:	00000d3a 2c752509 252c7325 28090973     :....%u,%s,%s..(
    ca18:	65706572 64657461 20752520 656d6974     repeated %u time
    ca28:	0a0d2973 00000000 2c752509 252c7325     s).......%u,%s,%
    ca38:	000a0d73                                s...

0000ca3c <sd_mmc_trans_units>:
    ca3c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000ca58 <sd_trans_multipliers>:
    ca58:	00000000 0000000a 0000000c 0000000d     ................
    ca68:	0000000f 00000014 00000019 0000001e     ................
    ca78:	00000023 00000028 0000002d 00000032     #...(...-...2...
    ca88:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000ca98 <mmc_trans_multipliers>:
    ca98:	00000000 0000000a 0000000c 0000000d     ................
    caa8:	0000000f 00000014 0000001a 0000001e     ................
    cab8:	00000023 00000028 0000002d 00000034     #...(...-...4...
    cac8:	00000037 0000003c 00000046 00000050     7...<...F...P...
    cad8:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    cae8:	0000632e 6e450a0d 20726574 6c676e61     .c....Enter angl
    caf8:	3e3e2065 00000020 52450a0d 3a524f52     e >> .....ERROR:
    cb08:	766e4920 64696c61 676e6120 202e656c      Invalid angle. 
    cb18:	6c676e41 756d2065 62207473 65622065     Angle must be be
    cb28:	65657774 2030206e 20646e61 0d303831     tween 0 and 180.
    cb38:	00000000 65530a0d 6e697474 65732067     ......Setting se
    cb48:	206f7672 6c676e61 6f742065 6c302520     rvo angle to %0l
    cb58:	000a0d75 74727173 00000000              u...sqrt....

0000cb64 <__sf_fake_stderr>:
	...

0000cb84 <__sf_fake_stdin>:
	...

0000cba4 <__sf_fake_stdout>:
	...

0000cbc4 <_global_impure_ptr>:
    cbc4:	200004b4 4f500043 00584953 666e002e     ... C.POSIX...nf
    cbd4:	696e6900 61007974 0000006e              .inity.an...

0000cbe0 <fpi.6129>:
    cbe0:	00000035 fffffbce 000003cb 00000001     5...............
    cbf0:	00000000                                ....

0000cbf4 <fpinan.6165>:
    cbf4:	00000034 fffffbce 000003cb 00000001     4...............
    cc04:	00000000                                ....

0000cc08 <tinytens>:
    cc08:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    cc18:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    cc28:	64ac6f43 11680628                       Co.d(.h.

0000cc30 <_ctype_>:
    cc30:	20202000 20202020 28282020 20282828     .         ((((( 
    cc40:	20202020 20202020 20202020 20202020                     
    cc50:	10108820 10101010 10101010 10101010      ...............
    cc60:	04040410 04040404 10040404 10101010     ................
    cc70:	41411010 41414141 01010101 01010101     ..AAAAAA........
    cc80:	01010101 01010101 01010101 10101010     ................
    cc90:	42421010 42424242 02020202 02020202     ..BBBBBB........
    cca0:	02020202 02020202 02020202 10101010     ................
    ccb0:	00000020 00000000 00000000 00000000      ...............
	...

0000cd38 <__mprec_bigtens>:
    cd38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    cd48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    cd58:	7f73bf3c 75154fdd                       <.s..O.u

0000cd60 <__mprec_tens>:
    cd60:	00000000 3ff00000 00000000 40240000     .......?......$@
    cd70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    cd80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    cd90:	00000000 412e8480 00000000 416312d0     .......A......cA
    cda0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    cdb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    cdc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    cdd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    cde0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    cdf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    ce00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    ce10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    ce20:	79d99db4 44ea7843                       ...yCx.D

0000ce28 <p05.6047>:
    ce28:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    ce38:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    ce48:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    ce58:	35343332 39383736 64636261 00006665     23456789abcdef..
    ce68:	0000ce86 0000ce89 0000ce8c 61462d41     ............A-Fa
    ce78:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    ce88:	00303000 00005878                       .00.xX..

0000ce90 <_init>:
    ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce92:	bf00      	nop
    ce94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ce96:	bc08      	pop	{r3}
    ce98:	469e      	mov	lr, r3
    ce9a:	4770      	bx	lr

0000ce9c <__init_array_start>:
    ce9c:	00000289 	.word	0x00000289

0000cea0 <_fini>:
    cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cea2:	bf00      	nop
    cea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cea6:	bc08      	pop	{r3}
    cea8:	469e      	mov	lr, r3
    ceaa:	4770      	bx	lr

0000ceac <__fini_array_start>:
    ceac:	00000265 	.word	0x00000265
