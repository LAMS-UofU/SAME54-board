
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009e3c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00009e3c  00009e3c  00019e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004c0  20000000  00009e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000204c0  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000204c0  2**0
                  CONTENTS
  5 .bss          00000e18  200004c0  0000a308  000204c0  2**3
                  ALLOC
  6 .stack        00010000  200012d8  0000b120  000204c0  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000204ea  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004d39c  00000000  00000000  00020543  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006a39  00000000  00000000  0006d8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018712  00000000  00000000  00074318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001198  00000000  00000000  0008ca2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001608  00000000  00000000  0008dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00040739  00000000  00000000  0008f1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002634c  00000000  00000000  000cf903  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00129c53  00000000  00000000  000f5c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00004074  00000000  00000000  0021f8a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 12 01 20 d5 02 00 00 d1 02 00 00 35 35 00 00     ... ........55..
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	bd 36 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .6..............
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	65 2b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     e+..............
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	59 2a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     Y*..............
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004c0 	.word	0x200004c0
     280:	00000000 	.word	0x00000000
     284:	00009e44 	.word	0x00009e44

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00009e44 	.word	0x00009e44
     2c4:	200004c4 	.word	0x200004c4
     2c8:	00009e44 	.word	0x00009e44
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00009e44 	.word	0x00009e44
     33c:	200004c0 	.word	0x200004c0
     340:	200012d8 	.word	0x200012d8
     344:	200004c0 	.word	0x200004c0
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00006b75 	.word	0x00006b75
     354:	0000466d 	.word	0x0000466d

00000358 <sd_mmc_test_unit_ready>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_test_unit_ready(uint8_t slot)
{
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot)) {
     35c:	4b0a      	ldr	r3, [pc, #40]	; (388 <sd_mmc_test_unit_ready+0x30>)
     35e:	4798      	blx	r3
     360:	2801      	cmp	r0, #1
     362:	d00f      	beq.n	384 <sd_mmc_test_unit_ready+0x2c>
     364:	b120      	cbz	r0, 370 <sd_mmc_test_unit_ready+0x18>
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     366:	2802      	cmp	r0, #2
     368:	bf0c      	ite	eq
     36a:	2002      	moveq	r0, #2
     36c:	2001      	movne	r0, #1
     36e:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     370:	4620      	mov	r0, r4
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <sd_mmc_test_unit_ready+0x34>)
     374:	4798      	blx	r3
     376:	f000 0003 	and.w	r0, r0, #3
			return CTRL_NO_PRESENT;
     37a:	2800      	cmp	r0, #0
     37c:	bf14      	ite	ne
     37e:	2000      	movne	r0, #0
     380:	2002      	moveq	r0, #2
     382:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
     384:	2003      	movs	r0, #3
	}
}
     386:	bd10      	pop	{r4, pc}
     388:	00004fc9 	.word	0x00004fc9
     38c:	00005611 	.word	0x00005611

00000390 <sd_mmc_read_capacity>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     390:	b538      	push	{r3, r4, r5, lr}
     392:	4604      	mov	r4, r0
     394:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <sd_mmc_read_capacity+0x18>)
     398:	4798      	blx	r3
     39a:	0040      	lsls	r0, r0, #1
     39c:	3801      	subs	r0, #1
     39e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     3a0:	4620      	mov	r0, r4
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <sd_mmc_read_capacity+0x1c>)
     3a4:	4798      	blx	r3
}
     3a6:	bd38      	pop	{r3, r4, r5, pc}
     3a8:	00005635 	.word	0x00005635
     3ac:	00000359 	.word	0x00000359

000003b0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
dstatus_t disk_initialize(uint8_t drv)
{
     3b0:	b510      	push	{r4, lr}
     3b2:	4604      	mov	r4, r0
	int           i;
	ctrl_status_t mem_status;

	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i++) {
		mem_status = sd_mmc_test_unit_ready(drv);
     3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <disk_initialize+0x30>)
     3b6:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3b8:	2803      	cmp	r0, #3
     3ba:	d106      	bne.n	3ca <disk_initialize+0x1a>
		mem_status = sd_mmc_test_unit_ready(drv);
     3bc:	4620      	mov	r0, r4
     3be:	4b08      	ldr	r3, [pc, #32]	; (3e0 <disk_initialize+0x30>)
     3c0:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3c2:	2803      	cmp	r0, #3
     3c4:	d101      	bne.n	3ca <disk_initialize+0x1a>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
     3c6:	2001      	movs	r0, #1
     3c8:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
     3ca:	b938      	cbnz	r0, 3dc <disk_initialize+0x2c>
	}

	/* Check Write Protection Status */
	if (sd_mmc_is_write_protected(drv)) {
     3cc:	4620      	mov	r0, r4
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <disk_initialize+0x34>)
     3d0:	4798      	blx	r3
     3d2:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
     3d4:	bf14      	ite	ne
     3d6:	2004      	movne	r0, #4
     3d8:	2000      	moveq	r0, #0
     3da:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
     3dc:	2001      	movs	r0, #1
}
     3de:	bd10      	pop	{r4, pc}
     3e0:	00000359 	.word	0x00000359
     3e4:	00005659 	.word	0x00005659

000003e8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
dstatus_t disk_status(uint8_t drv)
{
     3e8:	b508      	push	{r3, lr}
	switch (sd_mmc_test_unit_ready(drv)) {
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <disk_status+0x18>)
     3ec:	4798      	blx	r3
     3ee:	b120      	cbz	r0, 3fa <disk_status+0x12>
	case CTRL_GOOD:
		return ERR_NONE;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
     3f0:	2802      	cmp	r0, #2
     3f2:	bf0c      	ite	eq
     3f4:	2003      	moveq	r0, #3
     3f6:	2001      	movne	r0, #1
     3f8:	bd08      	pop	{r3, pc}
		return ERR_NONE;
     3fa:	2000      	movs	r0, #0
	}
}
     3fc:	bd08      	pop	{r3, pc}
     3fe:	bf00      	nop
     400:	00000359 	.word	0x00000359

00000404 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_read(uint8_t drv, uint8_t *buff, uint32_t sector, uint8_t count)
{
     404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     408:	b083      	sub	sp, #12
     40a:	4683      	mov	fp, r0
     40c:	4688      	mov	r8, r1
     40e:	4614      	mov	r4, r2
     410:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     412:	a901      	add	r1, sp, #4
     414:	4b17      	ldr	r3, [pc, #92]	; (474 <disk_read+0x70>)
     416:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     418:	192e      	adds	r6, r5, r4
     41a:	9b01      	ldr	r3, [sp, #4]
     41c:	3301      	adds	r3, #1
     41e:	429e      	cmp	r6, r3
     420:	d901      	bls.n	426 <disk_read+0x22>
		return ERR_INVALID_ARG;
     422:	20f3      	movs	r0, #243	; 0xf3
     424:	e01f      	b.n	466 <disk_read+0x62>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
     426:	b30d      	cbz	r5, 46c <disk_read+0x68>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     428:	4f13      	ldr	r7, [pc, #76]	; (478 <disk_read+0x74>)
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     42a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 47c <disk_read+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     42e:	f8df a050 	ldr.w	sl, [pc, #80]	; 480 <disk_read+0x7c>
     432:	e00f      	b.n	454 <disk_read+0x50>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     434:	2101      	movs	r1, #1
     436:	4640      	mov	r0, r8
     438:	47c8      	blx	r9
     43a:	b998      	cbnz	r0, 464 <disk_read+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     43c:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     43e:	3000      	adds	r0, #0
     440:	bf18      	it	ne
     442:	2001      	movne	r0, #1
     444:	e000      	b.n	448 <disk_read+0x44>
     446:	2002      	movs	r0, #2
		if (sd_mmc_mem_2_ram(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     448:	b990      	cbnz	r0, 470 <disk_read+0x6c>
     44a:	3401      	adds	r4, #1
     44c:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     450:	42a6      	cmp	r6, r4
     452:	d008      	beq.n	466 <disk_read+0x62>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     454:	2201      	movs	r2, #1
     456:	4621      	mov	r1, r4
     458:	4658      	mov	r0, fp
     45a:	47b8      	blx	r7
     45c:	2800      	cmp	r0, #0
     45e:	d0e9      	beq.n	434 <disk_read+0x30>
     460:	2802      	cmp	r0, #2
     462:	d0f0      	beq.n	446 <disk_read+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     464:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     466:	b003      	add	sp, #12
     468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     46c:	2000      	movs	r0, #0
     46e:	e7fa      	b.n	466 <disk_read+0x62>
			return ERR_INVALID_DATA;
     470:	20ff      	movs	r0, #255	; 0xff
     472:	e7f8      	b.n	466 <disk_read+0x62>
     474:	00000391 	.word	0x00000391
     478:	000056d1 	.word	0x000056d1
     47c:	000057a9 	.word	0x000057a9
     480:	000057f5 	.word	0x000057f5

00000484 <disk_write>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_write(uint8_t drv, uint8_t const *buff, uint32_t sector, uint8_t count)
{
     484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     488:	b083      	sub	sp, #12
     48a:	4683      	mov	fp, r0
     48c:	4688      	mov	r8, r1
     48e:	4614      	mov	r4, r2
     490:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     492:	a901      	add	r1, sp, #4
     494:	4b17      	ldr	r3, [pc, #92]	; (4f4 <disk_write+0x70>)
     496:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     498:	192e      	adds	r6, r5, r4
     49a:	9b01      	ldr	r3, [sp, #4]
     49c:	3301      	adds	r3, #1
     49e:	429e      	cmp	r6, r3
     4a0:	d901      	bls.n	4a6 <disk_write+0x22>
		return ERR_INVALID_ARG;
     4a2:	20f3      	movs	r0, #243	; 0xf3
     4a4:	e01f      	b.n	4e6 <disk_write+0x62>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
     4a6:	b30d      	cbz	r5, 4ec <disk_write+0x68>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4a8:	4f13      	ldr	r7, [pc, #76]	; (4f8 <disk_write+0x74>)
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4fc <disk_write+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4ae:	f8df a050 	ldr.w	sl, [pc, #80]	; 500 <disk_write+0x7c>
     4b2:	e00f      	b.n	4d4 <disk_write+0x50>
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4b4:	2101      	movs	r1, #1
     4b6:	4640      	mov	r0, r8
     4b8:	47c8      	blx	r9
     4ba:	b998      	cbnz	r0, 4e4 <disk_write+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4bc:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     4be:	3000      	adds	r0, #0
     4c0:	bf18      	it	ne
     4c2:	2001      	movne	r0, #1
     4c4:	e000      	b.n	4c8 <disk_write+0x44>
     4c6:	2002      	movs	r0, #2
		if (sd_mmc_ram_2_mem(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     4c8:	b990      	cbnz	r0, 4f0 <disk_write+0x6c>
     4ca:	3401      	adds	r4, #1
     4cc:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     4d0:	42a6      	cmp	r6, r4
     4d2:	d008      	beq.n	4e6 <disk_write+0x62>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4d4:	2201      	movs	r2, #1
     4d6:	4621      	mov	r1, r4
     4d8:	4658      	mov	r0, fp
     4da:	47b8      	blx	r7
     4dc:	2800      	cmp	r0, #0
     4de:	d0e9      	beq.n	4b4 <disk_write+0x30>
     4e0:	2802      	cmp	r0, #2
     4e2:	d0f0      	beq.n	4c6 <disk_write+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     4e4:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     4e6:	b003      	add	sp, #12
     4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     4ec:	2000      	movs	r0, #0
     4ee:	e7fa      	b.n	4e6 <disk_write+0x62>
			return ERR_INVALID_DATA;
     4f0:	20ff      	movs	r0, #255	; 0xff
     4f2:	e7f8      	b.n	4e6 <disk_write+0x62>
     4f4:	00000391 	.word	0x00000391
     4f8:	00005865 	.word	0x00005865
     4fc:	00005905 	.word	0x00005905
     500:	00005951 	.word	0x00005951

00000504 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
     504:	b510      	push	{r4, lr}
     506:	b082      	sub	sp, #8
     508:	4614      	mov	r4, r2
	dstatus_t res = ERR_INVALID_ARG;

	switch (ctrl) {
     50a:	2903      	cmp	r1, #3
     50c:	d81a      	bhi.n	544 <disk_ioctl+0x40>
     50e:	e8df f001 	tbb	[pc, r1]
     512:	0712      	.short	0x0712
     514:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(unsigned long *)buff = 1;
     516:	2301      	movs	r3, #1
     518:	6013      	str	r3, [r2, #0]
		res                    = ERR_NONE;
     51a:	2000      	movs	r0, #0
	default:
		res = ERR_INVALID_ARG;
	}

	return res;
}
     51c:	b002      	add	sp, #8
     51e:	bd10      	pop	{r4, pc}
		sd_mmc_read_capacity(drv, &ul_last_sector_num);
     520:	a901      	add	r1, sp, #4
     522:	4b09      	ldr	r3, [pc, #36]	; (548 <disk_ioctl+0x44>)
     524:	4798      	blx	r3
		*(unsigned long *)buff = ul_last_sector_num + 1;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3301      	adds	r3, #1
     52a:	6023      	str	r3, [r4, #0]
		res = ERR_NONE;
     52c:	2000      	movs	r0, #0
	} break;
     52e:	e7f5      	b.n	51c <disk_ioctl+0x18>
		*(uint8_t *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
     530:	2000      	movs	r0, #0
     532:	7010      	strb	r0, [r2, #0]
	} break;
     534:	e7f2      	b.n	51c <disk_ioctl+0x18>
		if (sd_mmc_test_unit_ready(drv) == CTRL_GOOD) {
     536:	4b05      	ldr	r3, [pc, #20]	; (54c <disk_ioctl+0x48>)
     538:	4798      	blx	r3
     53a:	2800      	cmp	r0, #0
			res = ERR_NOT_READY;
     53c:	bf0c      	ite	eq
     53e:	2000      	moveq	r0, #0
     540:	20e3      	movne	r0, #227	; 0xe3
     542:	e7eb      	b.n	51c <disk_ioctl+0x18>
		res = ERR_INVALID_ARG;
     544:	20f3      	movs	r0, #243	; 0xf3
     546:	e7e9      	b.n	51c <disk_ioctl+0x18>
     548:	00000391 	.word	0x00000391
     54c:	00000359 	.word	0x00000359

00000550 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     550:	4b10      	ldr	r3, [pc, #64]	; (594 <STDIO_IO_PORT_init+0x44>)
     552:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     566:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     592:	4770      	bx	lr
     594:	41008000 	.word	0x41008000

00000598 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <STDIO_IO_CLOCK_init+0x1c>)
     59a:	2240      	movs	r2, #64	; 0x40
     59c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     5a0:	2243      	movs	r2, #67	; 0x43
     5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     5a6:	4a04      	ldr	r2, [pc, #16]	; (5b8 <STDIO_IO_CLOCK_init+0x20>)
     5a8:	6993      	ldr	r3, [r2, #24]
     5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     5ae:	6193      	str	r3, [r2, #24]
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	40001c00 	.word	0x40001c00
     5b8:	40000800 	.word	0x40000800

000005bc <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     5bc:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <STDIO_IO_init+0x18>)
     5c0:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     5c2:	2200      	movs	r2, #0
     5c4:	4904      	ldr	r1, [pc, #16]	; (5d8 <STDIO_IO_init+0x1c>)
     5c6:	4805      	ldr	r0, [pc, #20]	; (5dc <STDIO_IO_init+0x20>)
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <STDIO_IO_init+0x24>)
     5ca:	4798      	blx	r3
	STDIO_IO_PORT_init();
     5cc:	4b05      	ldr	r3, [pc, #20]	; (5e4 <STDIO_IO_init+0x28>)
     5ce:	4798      	blx	r3
     5d0:	bd08      	pop	{r3, pc}
     5d2:	bf00      	nop
     5d4:	00000599 	.word	0x00000599
     5d8:	41012000 	.word	0x41012000
     5dc:	20001260 	.word	0x20001260
     5e0:	0000288d 	.word	0x0000288d
     5e4:	00000551 	.word	0x00000551

000005e8 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     5e8:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ea:	4b72      	ldr	r3, [pc, #456]	; (7b4 <SDHC_IO_BUS_PORT_init+0x1cc>)
     5ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     5f0:	6099      	str	r1, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     5f6:	629a      	str	r2, [r3, #40]	; 0x28
     5f8:	4d6f      	ldr	r5, [pc, #444]	; (7b8 <SDHC_IO_BUS_PORT_init+0x1d0>)
     5fa:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fc:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5fe:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
     602:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     606:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60a:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     60e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     612:	f040 0001 	orr.w	r0, r0, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     616:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     61e:	f000 000f 	and.w	r0, r0, #15
	tmp |= PORT_PMUX_PMUXO(data);
     622:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     626:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     62e:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	629a      	str	r2, [r3, #40]	; 0x28
     632:	4e62      	ldr	r6, [pc, #392]	; (7bc <SDHC_IO_BUS_PORT_init+0x1d4>)
     634:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     636:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     638:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
     63c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     640:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     644:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     648:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     650:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     654:	f893 403a 	ldrb.w	r4, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     658:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     65c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     660:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     664:	f44f 2480 	mov.w	r4, #262144	; 0x40000
     668:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     66c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     670:	4f53      	ldr	r7, [pc, #332]	; (7c0 <SDHC_IO_BUS_PORT_init+0x1d8>)
     672:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     676:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     67a:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
     67e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     682:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     686:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     68a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68e:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     692:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69a:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     69e:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a2:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a6:	f44f 2400 	mov.w	r4, #524288	; 0x80000
     6aa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6b2:	3704      	adds	r7, #4
     6b4:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6b8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6bc:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
     6c0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     6c4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c8:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     6cc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d0:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6d8:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6dc:	f004 040f 	and.w	r4, r4, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6e0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e4:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6e8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6f0:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6f8:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
     6fc:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     700:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     704:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     708:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     710:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     714:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     718:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     71c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     720:	f883 40ba 	strb.w	r4, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     724:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     728:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     72c:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     730:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     734:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     738:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     73c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     740:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     748:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     74c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     750:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     754:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     75c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     760:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     764:	4817      	ldr	r0, [pc, #92]	; (7c4 <SDHC_IO_BUS_PORT_init+0x1dc>)
     766:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     76a:	4a17      	ldr	r2, [pc, #92]	; (7c8 <SDHC_IO_BUS_PORT_init+0x1e0>)
     76c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     770:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     774:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     778:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     77c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     784:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     788:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78c:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     790:	4a0e      	ldr	r2, [pc, #56]	; (7cc <SDHC_IO_BUS_PORT_init+0x1e4>)
     792:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     796:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     79a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     79e:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a2:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	gpio_set_pin_function(CARD_DETECT_0, GPIO_PIN_FUNCTION_OFF);
	
	gpio_set_pin_direction(WRITE_PROTECT_0, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(WRITE_PROTECT_0, GPIO_PULL_OFF);
	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);
}
     7ae:	bcf0      	pop	{r4, r5, r6, r7}
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	41008000 	.word	0x41008000
     7b8:	c0000020 	.word	0xc0000020
     7bc:	c0000010 	.word	0xc0000010
     7c0:	c0000004 	.word	0xc0000004
     7c4:	40020000 	.word	0x40020000
     7c8:	c0020010 	.word	0xc0020010
     7cc:	c0020020 	.word	0xc0020020

000007d0 <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     7d0:	4a05      	ldr	r2, [pc, #20]	; (7e8 <SDHC_IO_BUS_CLOCK_init+0x18>)
     7d2:	6913      	ldr	r3, [r2, #16]
     7d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     7d8:	6113      	str	r3, [r2, #16]
     7da:	4b04      	ldr	r3, [pc, #16]	; (7ec <SDHC_IO_BUS_CLOCK_init+0x1c>)
     7dc:	2240      	movs	r2, #64	; 0x40
     7de:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     7e6:	4770      	bx	lr
     7e8:	40000800 	.word	0x40000800
     7ec:	40001c00 	.word	0x40001c00

000007f0 <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     7f0:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     7f2:	4b05      	ldr	r3, [pc, #20]	; (808 <SDHC_IO_BUS_init+0x18>)
     7f4:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     7f6:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     7fa:	4804      	ldr	r0, [pc, #16]	; (80c <SDHC_IO_BUS_init+0x1c>)
     7fc:	4b04      	ldr	r3, [pc, #16]	; (810 <SDHC_IO_BUS_init+0x20>)
     7fe:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <SDHC_IO_BUS_init+0x24>)
     802:	4798      	blx	r3
     804:	bd08      	pop	{r3, pc}
     806:	bf00      	nop
     808:	000007d1 	.word	0x000007d1
     80c:	20001270 	.word	0x20001270
     810:	00002521 	.word	0x00002521
     814:	000005e9 	.word	0x000005e9

00000818 <GPIO_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	4b18      	ldr	r3, [pc, #96]	; (87c <GPIO_init+0x64>)
     81a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     81e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     822:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     82a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     82e:	4a14      	ldr	r2, [pc, #80]	; (880 <GPIO_init+0x68>)
     830:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     834:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     844:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     846:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     848:	4a0e      	ldr	r2, [pc, #56]	; (884 <GPIO_init+0x6c>)
     84a:	629a      	str	r2, [r3, #40]	; 0x28
     84c:	4a0e      	ldr	r2, [pc, #56]	; (888 <GPIO_init+0x70>)
     84e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     850:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
	tmp &= ~PORT_PINCFG_PMUXEN;
     854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     858:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	2240      	movs	r2, #64	; 0x40
     85e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     860:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     862:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     866:	629a      	str	r2, [r3, #40]	; 0x28
     868:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     86c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     872:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
     87a:	4770      	bx	lr
     87c:	41008000 	.word	0x41008000
     880:	c0000004 	.word	0xc0000004
     884:	40020000 	.word	0x40020000
     888:	c0020800 	.word	0xc0020800

0000088c <system_init>:
	gpio_set_pin_direction(LED_STATUS, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(LED_STATUS, GPIO_PIN_FUNCTION_OFF);
}

void system_init(void)
{
     88c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     88e:	4b08      	ldr	r3, [pc, #32]	; (8b0 <system_init+0x24>)
     890:	4798      	blx	r3
	init_mcu();

	GPIO_init();
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <system_init+0x28>)
     894:	4798      	blx	r3
	FATFS_CALENDAR_init();
     896:	4b08      	ldr	r3, [pc, #32]	; (8b8 <system_init+0x2c>)
     898:	4798      	blx	r3
	LIDAR_USART_init();
     89a:	4b08      	ldr	r3, [pc, #32]	; (8bc <system_init+0x30>)
     89c:	4798      	blx	r3
	STDIO_IO_init();
     89e:	4b08      	ldr	r3, [pc, #32]	; (8c0 <system_init+0x34>)
     8a0:	4798      	blx	r3
	SDHC_IO_BUS_init();
     8a2:	4b08      	ldr	r3, [pc, #32]	; (8c4 <system_init+0x38>)
     8a4:	4798      	blx	r3
	SERVO_PWM_init();
     8a6:	4b08      	ldr	r3, [pc, #32]	; (8c8 <system_init+0x3c>)
     8a8:	4798      	blx	r3
	LIDAR_PWM_init();
     8aa:	4b08      	ldr	r3, [pc, #32]	; (8cc <system_init+0x40>)
     8ac:	4798      	blx	r3
     8ae:	bd08      	pop	{r3, pc}
     8b0:	000029b9 	.word	0x000029b9
     8b4:	00000819 	.word	0x00000819
     8b8:	00000bf1 	.word	0x00000bf1
     8bc:	00003a31 	.word	0x00003a31
     8c0:	000005bd 	.word	0x000005bd
     8c4:	000007f1 	.word	0x000007f1
     8c8:	000059b9 	.word	0x000059b9
     8cc:	00003855 	.word	0x00003855

000008d0 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_LOAD) >> NVMCTRL_SEESTAT_LOAD_Pos;
}

static inline bool hri_nvmctrl_get_SEESTAT_BUSY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     8d4:	4a0b      	ldr	r2, [pc, #44]	; (904 <invert_seep_byte+0x34>)
     8d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     8d8:	f013 0f04 	tst.w	r3, #4
     8dc:	d1fb      	bne.n	8d6 <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
     8de:	4e0a      	ldr	r6, [pc, #40]	; (908 <invert_seep_byte+0x38>)
     8e0:	6833      	ldr	r3, [r6, #0]
     8e2:	5d1a      	ldrb	r2, [r3, r4]
     8e4:	4d09      	ldr	r5, [pc, #36]	; (90c <invert_seep_byte+0x3c>)
     8e6:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
     8e8:	4621      	mov	r1, r4
     8ea:	4809      	ldr	r0, [pc, #36]	; (910 <invert_seep_byte+0x40>)
     8ec:	4b09      	ldr	r3, [pc, #36]	; (914 <invert_seep_byte+0x44>)
     8ee:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
     8f0:	6832      	ldr	r2, [r6, #0]
     8f2:	782b      	ldrb	r3, [r5, #0]
     8f4:	fab3 f383 	clz	r3, r3
     8f8:	095b      	lsrs	r3, r3, #5
     8fa:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
     8fc:	4806      	ldr	r0, [pc, #24]	; (918 <invert_seep_byte+0x48>)
     8fe:	4b07      	ldr	r3, [pc, #28]	; (91c <invert_seep_byte+0x4c>)
     900:	4798      	blx	r3
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	41004000 	.word	0x41004000
     908:	20000000 	.word	0x20000000
     90c:	20001288 	.word	0x20001288
     910:	00008958 	.word	0x00008958
     914:	00006d25 	.word	0x00006d25
     918:	0000897c 	.word	0x0000897c
     91c:	00006e0d 	.word	0x00006e0d

00000920 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
     920:	b508      	push	{r3, lr}
     922:	4a0b      	ldr	r2, [pc, #44]	; (950 <verify_seep_signature+0x30>)
     924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     926:	f013 0f04 	tst.w	r3, #4
     92a:	d1fb      	bne.n	924 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK(mask)) >> NVMCTRL_SEESTAT_SBLK_Pos;
}

static inline hri_nvmctrl_seestat_reg_t hri_nvmctrl_read_SEESTAT_SBLK_bf(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
     92c:	4b08      	ldr	r3, [pc, #32]	; (950 <verify_seep_signature+0x30>)
     92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
     930:	f413 6f70 	tst.w	r3, #3840	; 0xf00
     934:	d008      	beq.n	948 <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
     936:	4b07      	ldr	r3, [pc, #28]	; (954 <verify_seep_signature+0x34>)
     938:	685b      	ldr	r3, [r3, #4]
     93a:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
     93c:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
     940:	bf18      	it	ne
     942:	f04f 30ff 	movne.w	r0, #4294967295
     946:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
     948:	4803      	ldr	r0, [pc, #12]	; (958 <verify_seep_signature+0x38>)
     94a:	4b04      	ldr	r3, [pc, #16]	; (95c <verify_seep_signature+0x3c>)
     94c:	4798      	blx	r3
     94e:	e7fe      	b.n	94e <verify_seep_signature+0x2e>
     950:	41004000 	.word	0x41004000
     954:	20000000 	.word	0x20000000
     958:	000089b0 	.word	0x000089b0
     95c:	00006e0d 	.word	0x00006e0d

00000960 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
     960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
     964:	b1c9      	cbz	r1, 99a <print_hex_array+0x3a>
     966:	460e      	mov	r6, r1
     968:	1e45      	subs	r5, r0, #1
     96a:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
     96c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 9b0 <print_hex_array+0x50>
     970:	4f0c      	ldr	r7, [pc, #48]	; (9a4 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
     972:	f8df 9038 	ldr.w	r9, [pc, #56]	; 9ac <print_hex_array+0x4c>
     976:	e003      	b.n	980 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
     978:	3401      	adds	r4, #1
     97a:	b2a4      	uxth	r4, r4
     97c:	42a6      	cmp	r6, r4
     97e:	d00c      	beq.n	99a <print_hex_array+0x3a>
		printf("%02d ", p[i]);
     980:	f815 1f01 	ldrb.w	r1, [r5, #1]!
     984:	4640      	mov	r0, r8
     986:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
     988:	f014 0f07 	tst.w	r4, #7
     98c:	d1f4      	bne.n	978 <print_hex_array+0x18>
     98e:	2c00      	cmp	r4, #0
     990:	d0f2      	beq.n	978 <print_hex_array+0x18>
			printf("\r\n");
     992:	4648      	mov	r0, r9
     994:	4b04      	ldr	r3, [pc, #16]	; (9a8 <print_hex_array+0x48>)
     996:	4798      	blx	r3
     998:	e7ee      	b.n	978 <print_hex_array+0x18>
	}
	printf("\r\n");
     99a:	4804      	ldr	r0, [pc, #16]	; (9ac <print_hex_array+0x4c>)
     99c:	4b02      	ldr	r3, [pc, #8]	; (9a8 <print_hex_array+0x48>)
     99e:	4798      	blx	r3
     9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     9a4:	00006d25 	.word	0x00006d25
     9a8:	00006e0d 	.word	0x00006e0d
     9ac:	00008b4c 	.word	0x00008b4c
     9b0:	000089ec 	.word	0x000089ec

000009b4 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
     9b4:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
     9b6:	4b19      	ldr	r3, [pc, #100]	; (a1c <EEPROM_init+0x68>)
     9b8:	4798      	blx	r3
     9ba:	b9d0      	cbnz	r0, 9f2 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
     9bc:	4818      	ldr	r0, [pc, #96]	; (a20 <EEPROM_init+0x6c>)
     9be:	4b19      	ldr	r3, [pc, #100]	; (a24 <EEPROM_init+0x70>)
     9c0:	4798      	blx	r3
     9c2:	4b19      	ldr	r3, [pc, #100]	; (a28 <EEPROM_init+0x74>)
     9c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ(mask)) >> NVMCTRL_SEESTAT_PSZ_Pos;
}

static inline hri_nvmctrl_seestat_reg_t hri_nvmctrl_read_SEESTAT_PSZ_bf(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
     9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
     9c8:	f3c2 4202 	ubfx	r2, r2, #16, #3
     9cc:	f3c1 2103 	ubfx	r1, r1, #8, #4
     9d0:	4816      	ldr	r0, [pc, #88]	; (a2c <EEPROM_init+0x78>)
     9d2:	4b17      	ldr	r3, [pc, #92]	; (a30 <EEPROM_init+0x7c>)
     9d4:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
     9d6:	2020      	movs	r0, #32
     9d8:	4b16      	ldr	r3, [pc, #88]	; (a34 <EEPROM_init+0x80>)
     9da:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
     9dc:	4b16      	ldr	r3, [pc, #88]	; (a38 <EEPROM_init+0x84>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	f893 3020 	ldrb.w	r3, [r3, #32]
     9e4:	b99b      	cbnz	r3, a0e <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     9ea:	4b14      	ldr	r3, [pc, #80]	; (a3c <EEPROM_init+0x88>)
     9ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     9f0:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
     9f2:	4813      	ldr	r0, [pc, #76]	; (a40 <EEPROM_init+0x8c>)
     9f4:	4b0b      	ldr	r3, [pc, #44]	; (a24 <EEPROM_init+0x70>)
     9f6:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     9f8:	4a0b      	ldr	r2, [pc, #44]	; (a28 <EEPROM_init+0x74>)
     9fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     9fc:	f013 0f04 	tst.w	r3, #4
     a00:	d1fb      	bne.n	9fa <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
     a02:	4b0d      	ldr	r3, [pc, #52]	; (a38 <EEPROM_init+0x84>)
     a04:	685b      	ldr	r3, [r3, #4]
     a06:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
     a0a:	601a      	str	r2, [r3, #0]
     a0c:	e7d9      	b.n	9c2 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     a12:	4b0a      	ldr	r3, [pc, #40]	; (a3c <EEPROM_init+0x88>)
     a14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     a18:	bd08      	pop	{r3, pc}
     a1a:	bf00      	nop
     a1c:	00000921 	.word	0x00000921
     a20:	000089f4 	.word	0x000089f4
     a24:	00006e0d 	.word	0x00006e0d
     a28:	41004000 	.word	0x41004000
     a2c:	00008a54 	.word	0x00008a54
     a30:	00006d25 	.word	0x00006d25
     a34:	000008d1 	.word	0x000008d1
     a38:	20000000 	.word	0x20000000
     a3c:	41008000 	.word	0x41008000
     a40:	00008a18 	.word	0x00008a18

00000a44 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
     a44:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
     a46:	4b0a      	ldr	r3, [pc, #40]	; (a70 <EEPROM_read+0x2c>)
     a48:	681a      	ldr	r2, [r3, #0]
     a4a:	3a01      	subs	r2, #1
     a4c:	4809      	ldr	r0, [pc, #36]	; (a74 <EEPROM_read+0x30>)
     a4e:	1e43      	subs	r3, r0, #1
     a50:	3063      	adds	r0, #99	; 0x63
     a52:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a56:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
     a5a:	4283      	cmp	r3, r0
     a5c:	d1f9      	bne.n	a52 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     a5e:	2164      	movs	r1, #100	; 0x64
     a60:	4805      	ldr	r0, [pc, #20]	; (a78 <EEPROM_read+0x34>)
     a62:	4b06      	ldr	r3, [pc, #24]	; (a7c <EEPROM_read+0x38>)
     a64:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     a66:	2164      	movs	r1, #100	; 0x64
     a68:	4802      	ldr	r0, [pc, #8]	; (a74 <EEPROM_read+0x30>)
     a6a:	4b05      	ldr	r3, [pc, #20]	; (a80 <EEPROM_read+0x3c>)
     a6c:	4798      	blx	r3
     a6e:	bd08      	pop	{r3, pc}
     a70:	20000000 	.word	0x20000000
     a74:	200004dc 	.word	0x200004dc
     a78:	00008ae8 	.word	0x00008ae8
     a7c:	00006d25 	.word	0x00006d25
     a80:	00000961 	.word	0x00000961

00000a84 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
     a84:	b530      	push	{r4, r5, lr}
     a86:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
     a88:	2300      	movs	r3, #0
     a8a:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
     a8c:	ac02      	add	r4, sp, #8
     a8e:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
     a92:	481a      	ldr	r0, [pc, #104]	; (afc <EEPROM_write+0x78>)
     a94:	4b1a      	ldr	r3, [pc, #104]	; (b00 <EEPROM_write+0x7c>)
     a96:	4798      	blx	r3
	scanf("%"PRIu32"", &ee_addr);
     a98:	4621      	mov	r1, r4
     a9a:	481a      	ldr	r0, [pc, #104]	; (b04 <EEPROM_write+0x80>)
     a9c:	4b1a      	ldr	r3, [pc, #104]	; (b08 <EEPROM_write+0x84>)
     a9e:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
     aa0:	9b00      	ldr	r3, [sp, #0]
     aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     aa6:	d224      	bcs.n	af2 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
     aa8:	4818      	ldr	r0, [pc, #96]	; (b0c <EEPROM_write+0x88>)
     aaa:	4d15      	ldr	r5, [pc, #84]	; (b00 <EEPROM_write+0x7c>)
     aac:	47a8      	blx	r5
	scanf("%"PRIu32"", &ee_data);
     aae:	a901      	add	r1, sp, #4
     ab0:	4814      	ldr	r0, [pc, #80]	; (b04 <EEPROM_write+0x80>)
     ab2:	4b15      	ldr	r3, [pc, #84]	; (b08 <EEPROM_write+0x84>)
     ab4:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
     ab6:	4c16      	ldr	r4, [pc, #88]	; (b10 <EEPROM_write+0x8c>)
     ab8:	6822      	ldr	r2, [r4, #0]
     aba:	9901      	ldr	r1, [sp, #4]
     abc:	9b00      	ldr	r3, [sp, #0]
     abe:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
     ac0:	9a00      	ldr	r2, [sp, #0]
     ac2:	9901      	ldr	r1, [sp, #4]
     ac4:	4813      	ldr	r0, [pc, #76]	; (b14 <EEPROM_write+0x90>)
     ac6:	47a8      	blx	r5
     ac8:	6822      	ldr	r2, [r4, #0]
     aca:	3a01      	subs	r2, #1
     acc:	4812      	ldr	r0, [pc, #72]	; (b18 <EEPROM_write+0x94>)
     ace:	1e43      	subs	r3, r0, #1
     ad0:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
     ad2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     ad6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
     ada:	4283      	cmp	r3, r0
     adc:	d1f9      	bne.n	ad2 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     ade:	2164      	movs	r1, #100	; 0x64
     ae0:	480e      	ldr	r0, [pc, #56]	; (b1c <EEPROM_write+0x98>)
     ae2:	4b07      	ldr	r3, [pc, #28]	; (b00 <EEPROM_write+0x7c>)
     ae4:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     ae6:	2164      	movs	r1, #100	; 0x64
     ae8:	480b      	ldr	r0, [pc, #44]	; (b18 <EEPROM_write+0x94>)
     aea:	4b0d      	ldr	r3, [pc, #52]	; (b20 <EEPROM_write+0x9c>)
     aec:	4798      	blx	r3
}
     aee:	b003      	add	sp, #12
     af0:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
     af2:	480c      	ldr	r0, [pc, #48]	; (b24 <EEPROM_write+0xa0>)
     af4:	4b0c      	ldr	r3, [pc, #48]	; (b28 <EEPROM_write+0xa4>)
     af6:	4798      	blx	r3
     af8:	e7f9      	b.n	aee <EEPROM_write+0x6a>
     afa:	bf00      	nop
     afc:	00008b10 	.word	0x00008b10
     b00:	00006d25 	.word	0x00006d25
     b04:	00008b24 	.word	0x00008b24
     b08:	00006e3d 	.word	0x00006e3d
     b0c:	00008b50 	.word	0x00008b50
     b10:	20000000 	.word	0x20000000
     b14:	00008b64 	.word	0x00008b64
     b18:	200004dc 	.word	0x200004dc
     b1c:	00008ae8 	.word	0x00008ae8
     b20:	00000961 	.word	0x00000961
     b24:	00008b28 	.word	0x00008b28
     b28:	00006e0d 	.word	0x00006e0d

00000b2c <EEPROM_menu>:
{
     b2c:	b570      	push	{r4, r5, r6, lr}
     b2e:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
     b30:	2300      	movs	r3, #0
     b32:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
     b34:	4e1b      	ldr	r6, [pc, #108]	; (ba4 <EEPROM_menu+0x78>)
     b36:	4d1c      	ldr	r5, [pc, #112]	; (ba8 <EEPROM_menu+0x7c>)
     b38:	4c1c      	ldr	r4, [pc, #112]	; (bac <EEPROM_menu+0x80>)
     b3a:	4631      	mov	r1, r6
     b3c:	4628      	mov	r0, r5
     b3e:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
     b40:	a901      	add	r1, sp, #4
     b42:	481b      	ldr	r0, [pc, #108]	; (bb0 <EEPROM_menu+0x84>)
     b44:	4b1b      	ldr	r3, [pc, #108]	; (bb4 <EEPROM_menu+0x88>)
     b46:	4798      	blx	r3
     b48:	b150      	cbz	r0, b60 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
     b4a:	9901      	ldr	r1, [sp, #4]
     b4c:	481a      	ldr	r0, [pc, #104]	; (bb8 <EEPROM_menu+0x8c>)
     b4e:	47a0      	blx	r4
		switch (user_selection) {
     b50:	9b01      	ldr	r3, [sp, #4]
     b52:	3b01      	subs	r3, #1
     b54:	2b03      	cmp	r3, #3
     b56:	d821      	bhi.n	b9c <EEPROM_menu+0x70>
     b58:	e8df f003 	tbb	[pc, r3]
     b5c:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
     b60:	4b16      	ldr	r3, [pc, #88]	; (bbc <EEPROM_menu+0x90>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	6858      	ldr	r0, [r3, #4]
     b66:	4b16      	ldr	r3, [pc, #88]	; (bc0 <EEPROM_menu+0x94>)
     b68:	4798      	blx	r3
     b6a:	e7ee      	b.n	b4a <EEPROM_menu+0x1e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     b6c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     b70:	4914      	ldr	r1, [pc, #80]	; (bc4 <EEPROM_menu+0x98>)
     b72:	68ca      	ldr	r2, [r1, #12]
     b74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <EEPROM_menu+0x9c>)
     b7a:	4313      	orrs	r3, r2
     b7c:	60cb      	str	r3, [r1, #12]
     b7e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     b82:	bf00      	nop
     b84:	e7fd      	b.n	b82 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
     b86:	4811      	ldr	r0, [pc, #68]	; (bcc <EEPROM_menu+0xa0>)
     b88:	4b11      	ldr	r3, [pc, #68]	; (bd0 <EEPROM_menu+0xa4>)
     b8a:	4798      	blx	r3
}
     b8c:	b002      	add	sp, #8
     b8e:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
     b90:	4b10      	ldr	r3, [pc, #64]	; (bd4 <EEPROM_menu+0xa8>)
     b92:	4798      	blx	r3
				break;
     b94:	e7d1      	b.n	b3a <EEPROM_menu+0xe>
				EEPROM_write();
     b96:	4b10      	ldr	r3, [pc, #64]	; (bd8 <EEPROM_menu+0xac>)
     b98:	4798      	blx	r3
				break;
     b9a:	e7ce      	b.n	b3a <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
     b9c:	480f      	ldr	r0, [pc, #60]	; (bdc <EEPROM_menu+0xb0>)
     b9e:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <EEPROM_menu+0xa4>)
     ba0:	4798      	blx	r3
				break;
     ba2:	e7ca      	b.n	b3a <EEPROM_menu+0xe>
     ba4:	20000008 	.word	0x20000008
     ba8:	00008b78 	.word	0x00008b78
     bac:	00006d25 	.word	0x00006d25
     bb0:	00008b24 	.word	0x00008b24
     bb4:	00006e3d 	.word	0x00006e3d
     bb8:	00008b7c 	.word	0x00008b7c
     bbc:	200002f0 	.word	0x200002f0
     bc0:	00006985 	.word	0x00006985
     bc4:	e000ed00 	.word	0xe000ed00
     bc8:	05fa0004 	.word	0x05fa0004
     bcc:	00008b98 	.word	0x00008b98
     bd0:	00006e0d 	.word	0x00006e0d
     bd4:	00000a45 	.word	0x00000a45
     bd8:	00000a85 	.word	0x00000a85
     bdc:	00008bb4 	.word	0x00008bb4

00000be0 <FATFS_CALENDAR_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     be0:	4a02      	ldr	r2, [pc, #8]	; (bec <FATFS_CALENDAR_CLOCK_init+0xc>)
     be2:	6953      	ldr	r3, [r2, #20]
     be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     be8:	6153      	str	r3, [r2, #20]
     bea:	4770      	bx	lr
     bec:	40000800 	.word	0x40000800

00000bf0 <FATFS_CALENDAR_init>:
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}

void FATFS_CALENDAR_init(void)
{
     bf0:	b508      	push	{r3, lr}
	FATFS_CALENDAR_CLOCK_init();
     bf2:	4b03      	ldr	r3, [pc, #12]	; (c00 <FATFS_CALENDAR_init+0x10>)
     bf4:	4798      	blx	r3
	calendar_init(&CALENDER_INTERFACE, RTC);
     bf6:	4903      	ldr	r1, [pc, #12]	; (c04 <FATFS_CALENDAR_init+0x14>)
     bf8:	4803      	ldr	r0, [pc, #12]	; (c08 <FATFS_CALENDAR_init+0x18>)
     bfa:	4b04      	ldr	r3, [pc, #16]	; (c0c <FATFS_CALENDAR_init+0x1c>)
     bfc:	4798      	blx	r3
     bfe:	bd08      	pop	{r3, pc}
     c00:	00000be1 	.word	0x00000be1
     c04:	40002400 	.word	0x40002400
     c08:	2000128c 	.word	0x2000128c
     c0c:	00002421 	.word	0x00002421

00000c10 <FATFS_sd_status>:
  *		(1) Drive not initialized
  *		(2) No medium in the drive
  *		(3) Write protected
  */
void FATFS_sd_status(void)
{
     c10:	b510      	push	{r4, lr}
	DSTATUS status;
	FRESULT result;
	
	status = disk_initialize(0);
     c12:	2000      	movs	r0, #0
     c14:	4b0a      	ldr	r3, [pc, #40]	; (c40 <FATFS_sd_status+0x30>)
     c16:	4798      	blx	r3
	printf("\r\nInit result = %u\r\n", status);
     c18:	4601      	mov	r1, r0
     c1a:	480a      	ldr	r0, [pc, #40]	; (c44 <FATFS_sd_status+0x34>)
     c1c:	4c0a      	ldr	r4, [pc, #40]	; (c48 <FATFS_sd_status+0x38>)
     c1e:	47a0      	blx	r4
	
	result = f_mount(&fatfs, "", 0);
     c20:	2200      	movs	r2, #0
     c22:	490a      	ldr	r1, [pc, #40]	; (c4c <FATFS_sd_status+0x3c>)
     c24:	480a      	ldr	r0, [pc, #40]	; (c50 <FATFS_sd_status+0x40>)
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <FATFS_sd_status+0x44>)
     c28:	4798      	blx	r3
	printf("Mount result = %u\r\n", result);
     c2a:	4601      	mov	r1, r0
     c2c:	480a      	ldr	r0, [pc, #40]	; (c58 <FATFS_sd_status+0x48>)
     c2e:	47a0      	blx	r4
	
	status = disk_status(0);
     c30:	2000      	movs	r0, #0
     c32:	4b0a      	ldr	r3, [pc, #40]	; (c5c <FATFS_sd_status+0x4c>)
     c34:	4798      	blx	r3
	printf("Disk status = %u\r\n", status);
     c36:	4601      	mov	r1, r0
     c38:	4809      	ldr	r0, [pc, #36]	; (c60 <FATFS_sd_status+0x50>)
     c3a:	47a0      	blx	r4
     c3c:	bd10      	pop	{r4, pc}
     c3e:	bf00      	nop
     c40:	000003b1 	.word	0x000003b1
     c44:	00008ed0 	.word	0x00008ed0
     c48:	00006d25 	.word	0x00006d25
     c4c:	0000986c 	.word	0x0000986c
     c50:	20000544 	.word	0x20000544
     c54:	00001d39 	.word	0x00001d39
     c58:	00008ee8 	.word	0x00008ee8
     c5c:	000003e9 	.word	0x000003e9
     c60:	00008efc 	.word	0x00008efc

00000c64 <FATFS_write_file>:
}

void FATFS_write_file(TCHAR* filename, char* data, uint32_t data_length)
{
     c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c68:	b082      	sub	sp, #8
     c6a:	4606      	mov	r6, r0
     c6c:	4688      	mov	r8, r1
     c6e:	4617      	mov	r7, r2
	UINT bytes_written;
	FRESULT result;
	DSTATUS status;
	
	/* initialize SD card connection */
	status = disk_initialize(0);
     c70:	2000      	movs	r0, #0
     c72:	4b18      	ldr	r3, [pc, #96]	; (cd4 <FATFS_write_file+0x70>)
     c74:	4798      	blx	r3
	printf("\r\nInit result = %u\r\n", status);
     c76:	4601      	mov	r1, r0
     c78:	4817      	ldr	r0, [pc, #92]	; (cd8 <FATFS_write_file+0x74>)
     c7a:	4d18      	ldr	r5, [pc, #96]	; (cdc <FATFS_write_file+0x78>)
     c7c:	47a8      	blx	r5
	
	/* mount SD card */
	result = f_mount(&fatfs, "", 0);
     c7e:	4c18      	ldr	r4, [pc, #96]	; (ce0 <FATFS_write_file+0x7c>)
     c80:	2200      	movs	r2, #0
     c82:	4918      	ldr	r1, [pc, #96]	; (ce4 <FATFS_write_file+0x80>)
     c84:	1d20      	adds	r0, r4, #4
     c86:	4b18      	ldr	r3, [pc, #96]	; (ce8 <FATFS_write_file+0x84>)
     c88:	4798      	blx	r3
	printf("Mount result = %u\r\n", result);
     c8a:	4601      	mov	r1, r0
     c8c:	4817      	ldr	r0, [pc, #92]	; (cec <FATFS_write_file+0x88>)
     c8e:	47a8      	blx	r5
	
	/* create file */
	result = f_open(&fptr, filename, FA_WRITE | FA_CREATE_ALWAYS);
     c90:	220a      	movs	r2, #10
     c92:	4631      	mov	r1, r6
     c94:	f504 700e 	add.w	r0, r4, #568	; 0x238
     c98:	4b15      	ldr	r3, [pc, #84]	; (cf0 <FATFS_write_file+0x8c>)
     c9a:	4798      	blx	r3
	
	if (result == FR_OK) {
     c9c:	b990      	cbnz	r0, cc4 <FATFS_write_file+0x60>
		f_write(&fptr, data, data_length, &bytes_written);
     c9e:	f504 740e 	add.w	r4, r4, #568	; 0x238
     ca2:	ab01      	add	r3, sp, #4
     ca4:	463a      	mov	r2, r7
     ca6:	4641      	mov	r1, r8
     ca8:	4620      	mov	r0, r4
     caa:	4d12      	ldr	r5, [pc, #72]	; (cf4 <FATFS_write_file+0x90>)
     cac:	47a8      	blx	r5
		result = f_close(&fptr);
     cae:	4620      	mov	r0, r4
     cb0:	4b11      	ldr	r3, [pc, #68]	; (cf8 <FATFS_write_file+0x94>)
     cb2:	4798      	blx	r3
		if (result == FR_OK && bytes_written == data_length)
     cb4:	b950      	cbnz	r0, ccc <FATFS_write_file+0x68>
     cb6:	9b01      	ldr	r3, [sp, #4]
     cb8:	429f      	cmp	r7, r3
     cba:	d107      	bne.n	ccc <FATFS_write_file+0x68>
			printf("SUCCESS!\r\n");
     cbc:	480f      	ldr	r0, [pc, #60]	; (cfc <FATFS_write_file+0x98>)
     cbe:	4b10      	ldr	r3, [pc, #64]	; (d00 <FATFS_write_file+0x9c>)
     cc0:	4798      	blx	r3
     cc2:	e003      	b.n	ccc <FATFS_write_file+0x68>
     cc4:	4601      	mov	r1, r0
	} else {
		printf("Failed to make file. file_result = %u\r\n", result);
     cc6:	480f      	ldr	r0, [pc, #60]	; (d04 <FATFS_write_file+0xa0>)
     cc8:	4b04      	ldr	r3, [pc, #16]	; (cdc <FATFS_write_file+0x78>)
     cca:	4798      	blx	r3
	}
}
     ccc:	b002      	add	sp, #8
     cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     cd2:	bf00      	nop
     cd4:	000003b1 	.word	0x000003b1
     cd8:	00008ed0 	.word	0x00008ed0
     cdc:	00006d25 	.word	0x00006d25
     ce0:	20000540 	.word	0x20000540
     ce4:	0000986c 	.word	0x0000986c
     ce8:	00001d39 	.word	0x00001d39
     cec:	00008ee8 	.word	0x00008ee8
     cf0:	00001da5 	.word	0x00001da5
     cf4:	00001f51 	.word	0x00001f51
     cf8:	000021c1 	.word	0x000021c1
     cfc:	00008f10 	.word	0x00008f10
     d00:	00006e0d 	.word	0x00006e0d
     d04:	00008f1c 	.word	0x00008f1c

00000d08 <get_fattime>:
 *		[15:11]  Hour (0..23)
 *		[10:5]   Minute (0..59)
 *		[4:0]    Second (0..59)
 */
DWORD get_fattime(void)
{
     d08:	b500      	push	{lr}
     d0a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct calendar_date_time datetime;
	
	calendar_get_date_time(&CALENDER_INTERFACE, &datetime);
     d0c:	4669      	mov	r1, sp
     d0e:	480f      	ldr	r0, [pc, #60]	; (d4c <get_fattime+0x44>)
     d10:	4b0f      	ldr	r3, [pc, #60]	; (d50 <get_fattime+0x48>)
     d12:	4798      	blx	r3

	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     d14:	f89d 0005 	ldrb.w	r0, [sp, #5]
     d18:	f89d 3004 	ldrb.w	r3, [sp, #4]
     d1c:	041b      	lsls	r3, r3, #16
			 | (datetime.time.hour << 11) | (datetime.time.min << 5) | (datetime.time.sec << 0);
     d1e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
     d22:	f89d 0000 	ldrb.w	r0, [sp]
     d26:	4303      	orrs	r3, r0
     d28:	f89d 0002 	ldrb.w	r0, [sp, #2]
     d2c:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
     d30:	f89d 0001 	ldrb.w	r0, [sp, #1]
     d34:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     d38:	f8bd 0006 	ldrh.w	r0, [sp, #6]
     d3c:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
	return ul_time;
}
     d40:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
     d44:	b003      	add	sp, #12
     d46:	f85d fb04 	ldr.w	pc, [sp], #4
     d4a:	bf00      	nop
     d4c:	2000128c 	.word	0x2000128c
     d50:	00002465 	.word	0x00002465

00000d54 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     d54:	b13a      	cbz	r2, d66 <mem_cpy+0x12>
     d56:	3801      	subs	r0, #1
     d58:	188a      	adds	r2, r1, r2
		*d++ = *s++;
     d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
     d5e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
     d62:	4291      	cmp	r1, r2
     d64:	d1f9      	bne.n	d5a <mem_cpy+0x6>
     d66:	4770      	bx	lr

00000d68 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     d68:	b122      	cbz	r2, d74 <mem_set+0xc>
     d6a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
     d6c:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
     d70:	4282      	cmp	r2, r0
     d72:	d1fb      	bne.n	d6c <mem_set+0x4>
     d74:	4770      	bx	lr

00000d76 <ld_clust>:
	const BYTE* dir	/* Pointer to the SFN entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
     d76:	7eca      	ldrb	r2, [r1, #27]
     d78:	7e8b      	ldrb	r3, [r1, #26]
     d7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
     d7e:	7802      	ldrb	r2, [r0, #0]
     d80:	2a03      	cmp	r2, #3
     d82:	d001      	beq.n	d88 <ld_clust+0x12>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
     d84:	4618      	mov	r0, r3
     d86:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
     d88:	7d48      	ldrb	r0, [r1, #21]
     d8a:	7d0a      	ldrb	r2, [r1, #20]
     d8c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
     d90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
     d94:	e7f6      	b.n	d84 <ld_clust+0xe>

00000d96 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
     d96:	b470      	push	{r4, r5, r6}
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
     d98:	f101 0409 	add.w	r4, r1, #9
	if (dp->sect) {		/* Get SFN */
     d9c:	6903      	ldr	r3, [r0, #16]
     d9e:	b363      	cbz	r3, dfa <get_fileinfo+0x64>
		dir = dp->dir;
     da0:	6945      	ldr	r5, [r0, #20]
     da2:	1e68      	subs	r0, r5, #1
		i = 0;
     da4:	2200      	movs	r2, #0
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     da6:	262e      	movs	r6, #46	; 0x2e
     da8:	e001      	b.n	dae <get_fileinfo+0x18>
		while (i < 11) {		/* Copy name body and extension */
     daa:	2a0b      	cmp	r2, #11
     dac:	d00e      	beq.n	dcc <get_fileinfo+0x36>
			c = (TCHAR)dir[i++];
     dae:	3201      	adds	r2, #1
     db0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
     db4:	2b20      	cmp	r3, #32
     db6:	d0f8      	beq.n	daa <get_fileinfo+0x14>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
     db8:	2b05      	cmp	r3, #5
     dba:	bf08      	it	eq
     dbc:	23e5      	moveq	r3, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     dbe:	2a09      	cmp	r2, #9
     dc0:	bf04      	itt	eq
     dc2:	7026      	strbeq	r6, [r4, #0]
     dc4:	3401      	addeq	r4, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
     dc6:	7023      	strb	r3, [r4, #0]
     dc8:	3401      	adds	r4, #1
     dca:	e7ee      	b.n	daa <get_fileinfo+0x14>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     dcc:	7aeb      	ldrb	r3, [r5, #11]
     dce:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
     dd0:	7fea      	ldrb	r2, [r5, #31]
     dd2:	7fab      	ldrb	r3, [r5, #30]
     dd4:	041b      	lsls	r3, r3, #16
     dd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
     dda:	7f2a      	ldrb	r2, [r5, #28]
     ddc:	4313      	orrs	r3, r2
     dde:	7f6a      	ldrb	r2, [r5, #29]
     de0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     de4:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
     de6:	7e6a      	ldrb	r2, [r5, #25]
     de8:	7e2b      	ldrb	r3, [r5, #24]
     dea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     dee:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
     df0:	7dea      	ldrb	r2, [r5, #23]
     df2:	7dab      	ldrb	r3, [r5, #22]
     df4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     df8:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
     dfa:	2300      	movs	r3, #0
     dfc:	7023      	strb	r3, [r4, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
     dfe:	bc70      	pop	{r4, r5, r6}
     e00:	4770      	bx	lr

00000e02 <get_ldnumber>:
	const char *sp;
	char c;
	TCHAR tc;
#endif

	if (*path) {	/* If the pointer is not a null */
     e02:	6801      	ldr	r1, [r0, #0]
     e04:	b1e9      	cbz	r1, e42 <get_ldnumber+0x40>
{
     e06:	b410      	push	{r4}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     e08:	780c      	ldrb	r4, [r1, #0]
     e0a:	2c20      	cmp	r4, #32
     e0c:	d911      	bls.n	e32 <get_ldnumber+0x30>
     e0e:	2c3a      	cmp	r4, #58	; 0x3a
     e10:	d020      	beq.n	e54 <get_ldnumber+0x52>
     e12:	460a      	mov	r2, r1
     e14:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     e18:	2b20      	cmp	r3, #32
     e1a:	d90c      	bls.n	e36 <get_ldnumber+0x34>
     e1c:	2b3a      	cmp	r3, #58	; 0x3a
     e1e:	d1f9      	bne.n	e14 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     e20:	1c4b      	adds	r3, r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     e22:	429a      	cmp	r2, r3
     e24:	d110      	bne.n	e48 <get_ldnumber+0x46>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     e26:	2c30      	cmp	r4, #48	; 0x30
     e28:	d111      	bne.n	e4e <get_ldnumber+0x4c>
					vol = (int)i;
					*path = ++tt;
     e2a:	3102      	adds	r1, #2
     e2c:	6001      	str	r1, [r0, #0]
					vol = (int)i;
     e2e:	2000      	movs	r0, #0
     e30:	e005      	b.n	e3e <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     e32:	4623      	mov	r3, r4
     e34:	460a      	mov	r2, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     e36:	2b3a      	cmp	r3, #58	; 0x3a
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     e38:	bf18      	it	ne
     e3a:	2000      	movne	r0, #0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     e3c:	d0f0      	beq.n	e20 <get_ldnumber+0x1e>
#endif
	}
	return vol;
}
     e3e:	bc10      	pop	{r4}
     e40:	4770      	bx	lr
	int vol = -1;
     e42:	f04f 30ff 	mov.w	r0, #4294967295
     e46:	4770      	bx	lr
     e48:	f04f 30ff 	mov.w	r0, #4294967295
     e4c:	e7f7      	b.n	e3e <get_ldnumber+0x3c>
     e4e:	f04f 30ff 	mov.w	r0, #4294967295
     e52:	e7f4      	b.n	e3e <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     e54:	460a      	mov	r2, r1
     e56:	e7e3      	b.n	e20 <get_ldnumber+0x1e>

00000e58 <sync_window>:
{
     e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
     e5c:	7903      	ldrb	r3, [r0, #4]
     e5e:	b913      	cbnz	r3, e66 <sync_window+0xe>
	FRESULT res = FR_OK;
     e60:	2000      	movs	r0, #0
     e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e66:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
     e68:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
     e6a:	f100 0734 	add.w	r7, r0, #52	; 0x34
     e6e:	2301      	movs	r3, #1
     e70:	462a      	mov	r2, r5
     e72:	4639      	mov	r1, r7
     e74:	7840      	ldrb	r0, [r0, #1]
     e76:	4e13      	ldr	r6, [pc, #76]	; (ec4 <sync_window+0x6c>)
     e78:	47b0      	blx	r6
     e7a:	b9d0      	cbnz	r0, eb2 <sync_window+0x5a>
			fs->wflag = 0;
     e7c:	2300      	movs	r3, #0
     e7e:	7123      	strb	r3, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e82:	1aeb      	subs	r3, r5, r3
     e84:	69e2      	ldr	r2, [r4, #28]
     e86:	4293      	cmp	r3, r2
     e88:	d216      	bcs.n	eb8 <sync_window+0x60>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     e8a:	78e6      	ldrb	r6, [r4, #3]
     e8c:	2e01      	cmp	r6, #1
     e8e:	d916      	bls.n	ebe <sync_window+0x66>
					disk_write(fs->drv, fs->win, wsect, 1);
     e90:	f04f 0901 	mov.w	r9, #1
     e94:	f8df 802c 	ldr.w	r8, [pc, #44]	; ec4 <sync_window+0x6c>
					wsect += fs->fsize;
     e98:	69e3      	ldr	r3, [r4, #28]
     e9a:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
     e9c:	464b      	mov	r3, r9
     e9e:	462a      	mov	r2, r5
     ea0:	4639      	mov	r1, r7
     ea2:	7860      	ldrb	r0, [r4, #1]
     ea4:	47c0      	blx	r8
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     ea6:	3e01      	subs	r6, #1
     ea8:	2e01      	cmp	r6, #1
     eaa:	d1f5      	bne.n	e98 <sync_window+0x40>
	FRESULT res = FR_OK;
     eac:	2000      	movs	r0, #0
     eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = FR_DISK_ERR;
     eb2:	2001      	movs	r0, #1
     eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FRESULT res = FR_OK;
     eb8:	2000      	movs	r0, #0
     eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ebe:	2000      	movs	r0, #0
}
     ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ec4:	00000485 	.word	0x00000485

00000ec8 <move_window>:
{
     ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
     eca:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ecc:	428b      	cmp	r3, r1
     ece:	d015      	beq.n	efc <move_window+0x34>
     ed0:	4604      	mov	r4, r0
     ed2:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
     ed4:	4b0a      	ldr	r3, [pc, #40]	; (f00 <move_window+0x38>)
     ed6:	4798      	blx	r3
		if (res == FR_OK) {			/* Fill sector window with new data */
     ed8:	4606      	mov	r6, r0
     eda:	b108      	cbz	r0, ee0 <move_window+0x18>
}
     edc:	4630      	mov	r0, r6
     ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
     ee0:	2301      	movs	r3, #1
     ee2:	462a      	mov	r2, r5
     ee4:	f104 0134 	add.w	r1, r4, #52	; 0x34
     ee8:	7860      	ldrb	r0, [r4, #1]
     eea:	4f06      	ldr	r7, [pc, #24]	; (f04 <move_window+0x3c>)
     eec:	47b8      	blx	r7
     eee:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
     ef0:	bf1c      	itt	ne
     ef2:	2601      	movne	r6, #1
     ef4:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
     ef8:	6325      	str	r5, [r4, #48]	; 0x30
     efa:	e7ef      	b.n	edc <move_window+0x14>
	FRESULT res = FR_OK;
     efc:	2600      	movs	r6, #0
     efe:	e7ed      	b.n	edc <move_window+0x14>
     f00:	00000e59 	.word	0x00000e59
     f04:	00000405 	.word	0x00000405

00000f08 <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     f08:	b510      	push	{r4, lr}
     f0a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     f0c:	2300      	movs	r3, #0
     f0e:	7103      	strb	r3, [r0, #4]
     f10:	f04f 33ff 	mov.w	r3, #4294967295
     f14:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     f16:	4b1d      	ldr	r3, [pc, #116]	; (f8c <check_fs+0x84>)
     f18:	4798      	blx	r3
     f1a:	b108      	cbz	r0, f20 <check_fs+0x18>
		return 3;
     f1c:	2003      	movs	r0, #3
     f1e:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     f20:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
     f24:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
     f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     f2c:	b21b      	sxth	r3, r3
     f2e:	4a18      	ldr	r2, [pc, #96]	; (f90 <check_fs+0x88>)
     f30:	4293      	cmp	r3, r2
     f32:	d001      	beq.n	f38 <check_fs+0x30>
		return 2;
     f34:	2002      	movs	r0, #2
     f36:	bd10      	pop	{r4, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     f38:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
     f3c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
     f40:	041b      	lsls	r3, r3, #16
     f42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
     f46:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
     f4a:	4313      	orrs	r3, r2
     f4c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
     f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     f54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f58:	4a0e      	ldr	r2, [pc, #56]	; (f94 <check_fs+0x8c>)
     f5a:	4293      	cmp	r3, r2
     f5c:	d013      	beq.n	f86 <check_fs+0x7e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     f5e:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
     f62:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
     f66:	0400      	lsls	r0, r0, #16
     f68:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
     f6c:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
     f70:	4318      	orrs	r0, r3
     f72:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
     f76:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
     f7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
     f7e:	1a80      	subs	r0, r0, r2
     f80:	bf18      	it	ne
     f82:	2001      	movne	r0, #1
     f84:	bd10      	pop	{r4, pc}
		return 0;
     f86:	2000      	movs	r0, #0
		return 0;

	return 1;
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	bf00      	nop
     f8c:	00000ec9 	.word	0x00000ec9
     f90:	ffffaa55 	.word	0xffffaa55
     f94:	00544146 	.word	0x00544146

00000f98 <validate>:
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */

	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     f98:	b1b0      	cbz	r0, fc8 <validate+0x30>
{
     f9a:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     f9c:	6803      	ldr	r3, [r0, #0]
     f9e:	b1ab      	cbz	r3, fcc <validate+0x34>
     fa0:	7819      	ldrb	r1, [r3, #0]
     fa2:	b909      	cbnz	r1, fa8 <validate+0x10>
		return FR_INVALID_OBJECT;
     fa4:	2009      	movs	r0, #9
     fa6:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     fa8:	88d9      	ldrh	r1, [r3, #6]
     faa:	8882      	ldrh	r2, [r0, #4]
     fac:	4291      	cmp	r1, r2
     fae:	d001      	beq.n	fb4 <validate+0x1c>
		return FR_INVALID_OBJECT;
     fb0:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
     fb2:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     fb4:	7858      	ldrb	r0, [r3, #1]
     fb6:	4b06      	ldr	r3, [pc, #24]	; (fd0 <validate+0x38>)
     fb8:	4798      	blx	r3
     fba:	f000 0001 	and.w	r0, r0, #1
		return FR_INVALID_OBJECT;
     fbe:	2800      	cmp	r0, #0
     fc0:	bf0c      	ite	eq
     fc2:	2000      	moveq	r0, #0
     fc4:	2009      	movne	r0, #9
     fc6:	bd08      	pop	{r3, pc}
     fc8:	2009      	movs	r0, #9
     fca:	4770      	bx	lr
     fcc:	2009      	movs	r0, #9
     fce:	bd08      	pop	{r3, pc}
     fd0:	000003e9 	.word	0x000003e9

00000fd4 <find_volume>:
{
     fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     fd8:	b085      	sub	sp, #20
     fda:	4606      	mov	r6, r0
     fdc:	4617      	mov	r7, r2
	*rfs = 0;
     fde:	2300      	movs	r3, #0
     fe0:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
     fe2:	4608      	mov	r0, r1
     fe4:	4b9b      	ldr	r3, [pc, #620]	; (1254 <find_volume+0x280>)
     fe6:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
     fe8:	1e05      	subs	r5, r0, #0
     fea:	f2c0 81a2 	blt.w	1332 <find_volume+0x35e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
     fee:	4b9a      	ldr	r3, [pc, #616]	; (1258 <find_volume+0x284>)
     ff0:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     ff4:	2c00      	cmp	r4, #0
     ff6:	f000 81a0 	beq.w	133a <find_volume+0x366>
	*rfs = fs;							/* Return pointer to the file system object */
     ffa:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
     ffc:	7823      	ldrb	r3, [r4, #0]
     ffe:	b17b      	cbz	r3, 1020 <find_volume+0x4c>
		stat = disk_status(fs->drv);
    1000:	7860      	ldrb	r0, [r4, #1]
    1002:	4b96      	ldr	r3, [pc, #600]	; (125c <find_volume+0x288>)
    1004:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    1006:	f010 0f01 	tst.w	r0, #1
    100a:	d109      	bne.n	1020 <find_volume+0x4c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    100c:	2f00      	cmp	r7, #0
    100e:	f000 8196 	beq.w	133e <find_volume+0x36a>
    1012:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
    1016:	2800      	cmp	r0, #0
    1018:	bf0c      	ite	eq
    101a:	2000      	moveq	r0, #0
    101c:	200a      	movne	r0, #10
    101e:	e189      	b.n	1334 <find_volume+0x360>
	fs->fs_type = 0;					/* Clear the file system object */
    1020:	2300      	movs	r3, #0
    1022:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1024:	b2e8      	uxtb	r0, r5
    1026:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    1028:	4b8d      	ldr	r3, [pc, #564]	; (1260 <find_volume+0x28c>)
    102a:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    102c:	f010 0f01 	tst.w	r0, #1
    1030:	d001      	beq.n	1036 <find_volume+0x62>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    1032:	2003      	movs	r0, #3
    1034:	e17e      	b.n	1334 <find_volume+0x360>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1036:	b127      	cbz	r7, 1042 <find_volume+0x6e>
    1038:	f010 0f04 	tst.w	r0, #4
    103c:	d001      	beq.n	1042 <find_volume+0x6e>
		return FR_WRITE_PROTECTED;
    103e:	200a      	movs	r0, #10
    1040:	e178      	b.n	1334 <find_volume+0x360>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
    1042:	2100      	movs	r1, #0
    1044:	4620      	mov	r0, r4
    1046:	4b87      	ldr	r3, [pc, #540]	; (1264 <find_volume+0x290>)
    1048:	4798      	blx	r3
    104a:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    104c:	2801      	cmp	r0, #1
    104e:	d006      	beq.n	105e <find_volume+0x8a>
	bsect = 0;
    1050:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1052:	2b03      	cmp	r3, #3
    1054:	f000 8175 	beq.w	1342 <find_volume+0x36e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1058:	b3a3      	cbz	r3, 10c4 <find_volume+0xf0>
    105a:	200d      	movs	r0, #13
    105c:	e16a      	b.n	1334 <find_volume+0x360>
    105e:	4623      	mov	r3, r4
    1060:	466d      	mov	r5, sp
    1062:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    1066:	4669      	mov	r1, sp
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    1068:	2700      	movs	r7, #0
    106a:	e005      	b.n	1078 <find_volume+0xa4>
    106c:	463a      	mov	r2, r7
    106e:	f841 2b04 	str.w	r2, [r1], #4
    1072:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    1074:	4283      	cmp	r3, r0
    1076:	d012      	beq.n	109e <find_volume+0xca>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    1078:	f893 21f6 	ldrb.w	r2, [r3, #502]	; 0x1f6
    107c:	2a00      	cmp	r2, #0
    107e:	d0f5      	beq.n	106c <find_volume+0x98>
    1080:	f893 61fd 	ldrb.w	r6, [r3, #509]	; 0x1fd
    1084:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
    1088:	0412      	lsls	r2, r2, #16
    108a:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
    108e:	f893 61fa 	ldrb.w	r6, [r3, #506]	; 0x1fa
    1092:	4332      	orrs	r2, r6
    1094:	f893 61fb 	ldrb.w	r6, [r3, #507]	; 0x1fb
    1098:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    109c:	e7e7      	b.n	106e <find_volume+0x9a>
    109e:	af04      	add	r7, sp, #16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    10a0:	f04f 0802 	mov.w	r8, #2
    10a4:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 1264 <find_volume+0x290>
    10a8:	e006      	b.n	10b8 <find_volume+0xe4>
    10aa:	4631      	mov	r1, r6
    10ac:	4620      	mov	r0, r4
    10ae:	47c8      	blx	r9
		} while (!LD2PT(vol) && fmt && ++i < 4);
    10b0:	4603      	mov	r3, r0
    10b2:	b138      	cbz	r0, 10c4 <find_volume+0xf0>
    10b4:	42af      	cmp	r7, r5
    10b6:	d0cc      	beq.n	1052 <find_volume+0x7e>
			bsect = br[i];
    10b8:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    10bc:	2e00      	cmp	r6, #0
    10be:	d1f4      	bne.n	10aa <find_volume+0xd6>
    10c0:	4643      	mov	r3, r8
    10c2:	e7f7      	b.n	10b4 <find_volume+0xe0>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    10c4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    10c8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    10cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    10d0:	b21b      	sxth	r3, r3
    10d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    10d6:	d001      	beq.n	10dc <find_volume+0x108>
		return FR_NO_FILESYSTEM;
    10d8:	200d      	movs	r0, #13
    10da:	e12b      	b.n	1334 <find_volume+0x360>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    10dc:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    10e0:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    10e4:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
    10e8:	d10d      	bne.n	1106 <find_volume+0x132>
    10ea:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    10ee:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    10f2:	0412      	lsls	r2, r2, #16
    10f4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    10f8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    10fc:	431a      	orrs	r2, r3
    10fe:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    1102:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
    1106:	61e2      	str	r2, [r4, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    1108:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    110c:	70e1      	strb	r1, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    110e:	1e4b      	subs	r3, r1, #1
    1110:	b2db      	uxtb	r3, r3
    1112:	2b01      	cmp	r3, #1
    1114:	d901      	bls.n	111a <find_volume+0x146>
		return FR_NO_FILESYSTEM;
    1116:	200d      	movs	r0, #13
    1118:	e10c      	b.n	1334 <find_volume+0x360>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    111a:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
    111e:	70a7      	strb	r7, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    1120:	b90f      	cbnz	r7, 1126 <find_volume+0x152>
		return FR_NO_FILESYSTEM;
    1122:	200d      	movs	r0, #13
    1124:	e106      	b.n	1334 <find_volume+0x360>
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    1126:	1e7b      	subs	r3, r7, #1
    1128:	423b      	tst	r3, r7
    112a:	d001      	beq.n	1130 <find_volume+0x15c>
		return FR_NO_FILESYSTEM;
    112c:	200d      	movs	r0, #13
    112e:	e101      	b.n	1334 <find_volume+0x360>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1130:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    1134:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    1138:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    113c:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    113e:	f010 0f0f 	tst.w	r0, #15
    1142:	f040 8100 	bne.w	1346 <find_volume+0x372>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    1146:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
    114a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    114e:	ea53 2305 	orrs.w	r3, r3, r5, lsl #8
    1152:	d10d      	bne.n	1170 <find_volume+0x19c>
    1154:	f894 5057 	ldrb.w	r5, [r4, #87]	; 0x57
    1158:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    115c:	041b      	lsls	r3, r3, #16
    115e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    1162:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
    1166:	432b      	orrs	r3, r5
    1168:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
    116c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    1170:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
    1174:	f894 5042 	ldrb.w	r5, [r4, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    1178:	ea55 250e 	orrs.w	r5, r5, lr, lsl #8
    117c:	f000 80e5 	beq.w	134a <find_volume+0x376>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    1180:	fb02 fc01 	mul.w	ip, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    1184:	eb05 1110 	add.w	r1, r5, r0, lsr #4
    1188:	eb01 0e0c 	add.w	lr, r1, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    118c:	4573      	cmp	r3, lr
    118e:	f0c0 80de 	bcc.w	134e <find_volume+0x37a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1192:	eba3 030e 	sub.w	r3, r3, lr
    1196:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    119a:	2b00      	cmp	r3, #0
    119c:	f000 80d9 	beq.w	1352 <find_volume+0x37e>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    11a0:	f640 71f5 	movw	r1, #4085	; 0xff5
    11a4:	428b      	cmp	r3, r1
    11a6:	bf94      	ite	ls
    11a8:	2101      	movls	r1, #1
    11aa:	2102      	movhi	r1, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    11ac:	f64f 77f5 	movw	r7, #65525	; 0xfff5
    11b0:	42bb      	cmp	r3, r7
    11b2:	f200 80d8 	bhi.w	1366 <find_volume+0x392>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    11b6:	3302      	adds	r3, #2
    11b8:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    11ba:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    11bc:	4435      	add	r5, r6
    11be:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    11c0:	eb0e 0706 	add.w	r7, lr, r6
    11c4:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (fmt == FS_FAT32) {
    11c6:	2903      	cmp	r1, #3
    11c8:	d129      	bne.n	121e <find_volume+0x24a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    11ca:	2800      	cmp	r0, #0
    11cc:	f040 80c3 	bne.w	1356 <find_volume+0x382>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    11d0:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    11d4:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    11d8:	0409      	lsls	r1, r1, #16
    11da:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    11de:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    11e2:	4301      	orrs	r1, r0
    11e4:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    11e8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    11ec:	62a1      	str	r1, [r4, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    11ee:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    11f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    11f4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    11f8:	f0c0 80af 	bcc.w	135a <find_volume+0x386>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    11fc:	f04f 33ff 	mov.w	r3, #4294967295
    1200:	6123      	str	r3, [r4, #16]
    1202:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
    1204:	2380      	movs	r3, #128	; 0x80
    1206:	7163      	strb	r3, [r4, #5]
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    1208:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    120c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1214:	b21b      	sxth	r3, r3
    1216:	2b01      	cmp	r3, #1
    1218:	d026      	beq.n	1268 <find_volume+0x294>
    121a:	2103      	movs	r1, #3
    121c:	e077      	b.n	130e <find_volume+0x33a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    121e:	2800      	cmp	r0, #0
    1220:	f000 809d 	beq.w	135e <find_volume+0x38a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1224:	4465      	add	r5, ip
    1226:	62a5      	str	r5, [r4, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1228:	2902      	cmp	r1, #2
    122a:	bf0f      	iteee	eq
    122c:	005b      	lsleq	r3, r3, #1
    122e:	eb03 0043 	addne.w	r0, r3, r3, lsl #1
    1232:	f003 0301 	andne.w	r3, r3, #1
    1236:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    123a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    123e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    1242:	f0c0 808e 	bcc.w	1362 <find_volume+0x38e>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    1246:	f04f 33ff 	mov.w	r3, #4294967295
    124a:	6123      	str	r3, [r4, #16]
    124c:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
    124e:	2380      	movs	r3, #128	; 0x80
    1250:	7163      	strb	r3, [r4, #5]
    1252:	e05c      	b.n	130e <find_volume+0x33a>
    1254:	00000e03 	.word	0x00000e03
    1258:	200007d4 	.word	0x200007d4
    125c:	000003e9 	.word	0x000003e9
    1260:	000003b1 	.word	0x000003b1
    1264:	00000f09 	.word	0x00000f09
		&& move_window(fs, bsect + 1) == FR_OK)
    1268:	1c71      	adds	r1, r6, #1
    126a:	4620      	mov	r0, r4
    126c:	4b42      	ldr	r3, [pc, #264]	; (1378 <find_volume+0x3a4>)
    126e:	4798      	blx	r3
    1270:	2800      	cmp	r0, #0
    1272:	d156      	bne.n	1322 <find_volume+0x34e>
		fs->fsi_flag = 0;
    1274:	2300      	movs	r3, #0
    1276:	7163      	strb	r3, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    1278:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    127c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    1280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1284:	b21b      	sxth	r3, r3
    1286:	4a3d      	ldr	r2, [pc, #244]	; (137c <find_volume+0x3a8>)
    1288:	4293      	cmp	r3, r2
    128a:	d14c      	bne.n	1326 <find_volume+0x352>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    128c:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    1290:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    1294:	041b      	lsls	r3, r3, #16
    1296:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    129a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    129e:	4313      	orrs	r3, r2
    12a0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    12a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    12a8:	4a35      	ldr	r2, [pc, #212]	; (1380 <find_volume+0x3ac>)
    12aa:	4293      	cmp	r3, r2
    12ac:	d13d      	bne.n	132a <find_volume+0x356>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    12ae:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
    12b2:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
    12b6:	041b      	lsls	r3, r3, #16
    12b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    12bc:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
    12c0:	4313      	orrs	r3, r2
    12c2:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
    12c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    12ca:	4a2e      	ldr	r2, [pc, #184]	; (1384 <find_volume+0x3b0>)
    12cc:	4293      	cmp	r3, r2
    12ce:	d12e      	bne.n	132e <find_volume+0x35a>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    12d0:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
    12d4:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
    12d8:	041b      	lsls	r3, r3, #16
    12da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    12de:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
    12e2:	4313      	orrs	r3, r2
    12e4:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
    12e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    12ec:	6123      	str	r3, [r4, #16]
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    12ee:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
    12f2:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
    12f6:	041b      	lsls	r3, r3, #16
    12f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    12fc:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
    1300:	4313      	orrs	r3, r2
    1302:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
    1306:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    130a:	60e3      	str	r3, [r4, #12]
    130c:	2103      	movs	r1, #3
	fs->fs_type = fmt;	/* FAT sub-type */
    130e:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
    1310:	4a1d      	ldr	r2, [pc, #116]	; (1388 <find_volume+0x3b4>)
    1312:	8893      	ldrh	r3, [r2, #4]
    1314:	3301      	adds	r3, #1
    1316:	b29b      	uxth	r3, r3
    1318:	8093      	strh	r3, [r2, #4]
    131a:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Set current directory to root */
    131c:	2000      	movs	r0, #0
    131e:	6160      	str	r0, [r4, #20]
	return FR_OK;
    1320:	e008      	b.n	1334 <find_volume+0x360>
    1322:	2103      	movs	r1, #3
    1324:	e7f3      	b.n	130e <find_volume+0x33a>
    1326:	2103      	movs	r1, #3
    1328:	e7f1      	b.n	130e <find_volume+0x33a>
    132a:	2103      	movs	r1, #3
    132c:	e7ef      	b.n	130e <find_volume+0x33a>
    132e:	2103      	movs	r1, #3
    1330:	e7ed      	b.n	130e <find_volume+0x33a>
	if (vol < 0) return FR_INVALID_DRIVE;
    1332:	200b      	movs	r0, #11
}
    1334:	b005      	add	sp, #20
    1336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    133a:	200c      	movs	r0, #12
    133c:	e7fa      	b.n	1334 <find_volume+0x360>
			return FR_OK;				/* The file system object is valid */
    133e:	2000      	movs	r0, #0
    1340:	e7f8      	b.n	1334 <find_volume+0x360>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1342:	2001      	movs	r0, #1
    1344:	e7f6      	b.n	1334 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    1346:	200d      	movs	r0, #13
    1348:	e7f4      	b.n	1334 <find_volume+0x360>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    134a:	200d      	movs	r0, #13
    134c:	e7f2      	b.n	1334 <find_volume+0x360>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    134e:	200d      	movs	r0, #13
    1350:	e7f0      	b.n	1334 <find_volume+0x360>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1352:	200d      	movs	r0, #13
    1354:	e7ee      	b.n	1334 <find_volume+0x360>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1356:	200d      	movs	r0, #13
    1358:	e7ec      	b.n	1334 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    135a:	200d      	movs	r0, #13
    135c:	e7ea      	b.n	1334 <find_volume+0x360>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    135e:	200d      	movs	r0, #13
    1360:	e7e8      	b.n	1334 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    1362:	200d      	movs	r0, #13
    1364:	e7e6      	b.n	1334 <find_volume+0x360>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1366:	3302      	adds	r3, #2
    1368:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    136a:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    136c:	4435      	add	r5, r6
    136e:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    1370:	eb0e 0106 	add.w	r1, lr, r6
    1374:	62e1      	str	r1, [r4, #44]	; 0x2c
    1376:	e728      	b.n	11ca <find_volume+0x1f6>
    1378:	00000ec9 	.word	0x00000ec9
    137c:	ffffaa55 	.word	0xffffaa55
    1380:	41615252 	.word	0x41615252
    1384:	61417272 	.word	0x61417272
    1388:	200007d4 	.word	0x200007d4

0000138c <sync_fs>:
{
    138c:	b538      	push	{r3, r4, r5, lr}
    138e:	4604      	mov	r4, r0
	res = sync_window(fs);
    1390:	4b2d      	ldr	r3, [pc, #180]	; (1448 <sync_fs+0xbc>)
    1392:	4798      	blx	r3
	if (res == FR_OK) {
    1394:	4603      	mov	r3, r0
    1396:	b950      	cbnz	r0, 13ae <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    1398:	7823      	ldrb	r3, [r4, #0]
    139a:	2b03      	cmp	r3, #3
    139c:	d009      	beq.n	13b2 <sync_fs+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    139e:	2200      	movs	r2, #0
    13a0:	4611      	mov	r1, r2
    13a2:	7860      	ldrb	r0, [r4, #1]
    13a4:	4b29      	ldr	r3, [pc, #164]	; (144c <sync_fs+0xc0>)
    13a6:	4798      	blx	r3
	res = sync_window(fs);
    13a8:	1c03      	adds	r3, r0, #0
    13aa:	bf18      	it	ne
    13ac:	2301      	movne	r3, #1
}
    13ae:	4618      	mov	r0, r3
    13b0:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    13b2:	7963      	ldrb	r3, [r4, #5]
    13b4:	2b01      	cmp	r3, #1
    13b6:	d1f2      	bne.n	139e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
    13b8:	f104 0534 	add.w	r5, r4, #52	; 0x34
    13bc:	f44f 7200 	mov.w	r2, #512	; 0x200
    13c0:	2100      	movs	r1, #0
    13c2:	4628      	mov	r0, r5
    13c4:	4b22      	ldr	r3, [pc, #136]	; (1450 <sync_fs+0xc4>)
    13c6:	4798      	blx	r3
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    13c8:	2355      	movs	r3, #85	; 0x55
    13ca:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    13ce:	23aa      	movs	r3, #170	; 0xaa
    13d0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    13d4:	2352      	movs	r3, #82	; 0x52
    13d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    13da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    13de:	2361      	movs	r3, #97	; 0x61
    13e0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    13e4:	2241      	movs	r2, #65	; 0x41
    13e6:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    13ea:	2172      	movs	r1, #114	; 0x72
    13ec:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
    13f0:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
    13f4:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
    13f8:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    13fc:	6923      	ldr	r3, [r4, #16]
    13fe:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    1402:	f3c3 2207 	ubfx	r2, r3, #8, #8
    1406:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
    140a:	0c1a      	lsrs	r2, r3, #16
    140c:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
    1410:	0e1b      	lsrs	r3, r3, #24
    1412:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    1416:	68e3      	ldr	r3, [r4, #12]
    1418:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    141c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    1420:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
    1424:	0c1a      	lsrs	r2, r3, #16
    1426:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
    142a:	0e1b      	lsrs	r3, r3, #24
    142c:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
			fs->winsect = fs->volbase + 1;
    1430:	6a22      	ldr	r2, [r4, #32]
    1432:	3201      	adds	r2, #1
    1434:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    1436:	2301      	movs	r3, #1
    1438:	4629      	mov	r1, r5
    143a:	7860      	ldrb	r0, [r4, #1]
    143c:	4d05      	ldr	r5, [pc, #20]	; (1454 <sync_fs+0xc8>)
    143e:	47a8      	blx	r5
			fs->fsi_flag = 0;
    1440:	2300      	movs	r3, #0
    1442:	7163      	strb	r3, [r4, #5]
    1444:	e7ab      	b.n	139e <sync_fs+0x12>
    1446:	bf00      	nop
    1448:	00000e59 	.word	0x00000e59
    144c:	00000505 	.word	0x00000505
    1450:	00000d69 	.word	0x00000d69
    1454:	00000485 	.word	0x00000485

00001458 <clust2sect>:
	clst -= 2;
    1458:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    145a:	6983      	ldr	r3, [r0, #24]
    145c:	3b02      	subs	r3, #2
    145e:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
    1460:	bf3d      	ittte	cc
    1462:	7883      	ldrbcc	r3, [r0, #2]
    1464:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
    1466:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    146a:	2000      	movcs	r0, #0
}
    146c:	4770      	bx	lr
	...

00001470 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1470:	2901      	cmp	r1, #1
    1472:	d969      	bls.n	1548 <get_fat+0xd8>
{
    1474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1476:	6983      	ldr	r3, [r0, #24]
    1478:	4299      	cmp	r1, r3
    147a:	d267      	bcs.n	154c <get_fat+0xdc>
    147c:	460c      	mov	r4, r1
    147e:	4606      	mov	r6, r0
		switch (fs->fs_type) {
    1480:	7803      	ldrb	r3, [r0, #0]
    1482:	2b02      	cmp	r3, #2
    1484:	d02e      	beq.n	14e4 <get_fat+0x74>
    1486:	2b03      	cmp	r3, #3
    1488:	d040      	beq.n	150c <get_fat+0x9c>
    148a:	2b01      	cmp	r3, #1
    148c:	d001      	beq.n	1492 <get_fat+0x22>
			val = 1;	/* Internal error */
    148e:	2001      	movs	r0, #1
    1490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
    1492:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    1496:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1498:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    149c:	4b2c      	ldr	r3, [pc, #176]	; (1550 <get_fat+0xe0>)
    149e:	4798      	blx	r3
    14a0:	b110      	cbz	r0, 14a8 <get_fat+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    14a2:	f04f 30ff 	mov.w	r0, #4294967295
    14a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
    14a8:	1c6f      	adds	r7, r5, #1
    14aa:	f3c5 0508 	ubfx	r5, r5, #0, #9
    14ae:	4435      	add	r5, r6
    14b0:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    14b4:	6a71      	ldr	r1, [r6, #36]	; 0x24
    14b6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    14ba:	4630      	mov	r0, r6
    14bc:	4b24      	ldr	r3, [pc, #144]	; (1550 <get_fat+0xe0>)
    14be:	4798      	blx	r3
    14c0:	b110      	cbz	r0, 14c8 <get_fat+0x58>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    14c2:	f04f 30ff 	mov.w	r0, #4294967295
    14c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc |= fs->win[bc % SS(fs)] << 8;
    14c8:	f3c7 0008 	ubfx	r0, r7, #0, #9
    14cc:	4430      	add	r0, r6
    14ce:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    14d2:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    14d6:	f014 0f01 	tst.w	r4, #1
    14da:	bf14      	ite	ne
    14dc:	0900      	lsrne	r0, r0, #4
    14de:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
    14e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    14e4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    14e6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    14ea:	4b19      	ldr	r3, [pc, #100]	; (1550 <get_fat+0xe0>)
    14ec:	4798      	blx	r3
    14ee:	b110      	cbz	r0, 14f6 <get_fat+0x86>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    14f0:	f04f 30ff 	mov.w	r0, #4294967295
    14f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 2 % SS(fs)];
    14f6:	0060      	lsls	r0, r4, #1
    14f8:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
			val = LD_WORD(p);
    14fc:	4430      	add	r0, r6
    14fe:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    1502:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    1506:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
    150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    150c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    150e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    1512:	4b0f      	ldr	r3, [pc, #60]	; (1550 <get_fat+0xe0>)
    1514:	4798      	blx	r3
    1516:	b110      	cbz	r0, 151e <get_fat+0xae>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1518:	f04f 30ff 	mov.w	r0, #4294967295
}
    151c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 4 % SS(fs)];
    151e:	00a0      	lsls	r0, r4, #2
    1520:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
    1524:	f100 0234 	add.w	r2, r0, #52	; 0x34
    1528:	4432      	add	r2, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
    152a:	78d1      	ldrb	r1, [r2, #3]
    152c:	7893      	ldrb	r3, [r2, #2]
    152e:	041b      	lsls	r3, r3, #16
    1530:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    1534:	4430      	add	r0, r6
    1536:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    153a:	4318      	orrs	r0, r3
    153c:	7853      	ldrb	r3, [r2, #1]
    153e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1542:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
    1546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
    1548:	2001      	movs	r0, #1
    154a:	4770      	bx	lr
    154c:	2001      	movs	r0, #1
    154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1550:	00000ec9 	.word	0x00000ec9

00001554 <dir_sdi>:
{
    1554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1558:	4605      	mov	r5, r0
	dp->index = (WORD)idx;	/* Current index */
    155a:	80c1      	strh	r1, [r0, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
    155c:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    155e:	2c01      	cmp	r4, #1
    1560:	d046      	beq.n	15f0 <dir_sdi+0x9c>
    1562:	460e      	mov	r6, r1
    1564:	6803      	ldr	r3, [r0, #0]
    1566:	699a      	ldr	r2, [r3, #24]
    1568:	4294      	cmp	r4, r2
    156a:	d302      	bcc.n	1572 <dir_sdi+0x1e>
		return FR_INT_ERR;
    156c:	2002      	movs	r0, #2
    156e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1572:	b964      	cbnz	r4, 158e <dir_sdi+0x3a>
    1574:	781a      	ldrb	r2, [r3, #0]
    1576:	2a03      	cmp	r2, #3
    1578:	d005      	beq.n	1586 <dir_sdi+0x32>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    157a:	891a      	ldrh	r2, [r3, #8]
    157c:	4296      	cmp	r6, r2
    157e:	d30e      	bcc.n	159e <dir_sdi+0x4a>
			return FR_INT_ERR;
    1580:	2002      	movs	r0, #2
    1582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = dp->fs->dirbase;
    1586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    1588:	2a00      	cmp	r2, #0
    158a:	d0f6      	beq.n	157a <dir_sdi+0x26>
		clst = dp->fs->dirbase;
    158c:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    158e:	789f      	ldrb	r7, [r3, #2]
    1590:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
    1592:	42be      	cmp	r6, r7
    1594:	d31a      	bcc.n	15cc <dir_sdi+0x78>
    1596:	1bf6      	subs	r6, r6, r7
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    1598:	f8df 8070 	ldr.w	r8, [pc, #112]	; 160c <dir_sdi+0xb8>
    159c:	e006      	b.n	15ac <dir_sdi+0x58>
		sect = dp->fs->dirbase;
    159e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	dp->clust = clst;	/* Current cluster# */
    15a0:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
    15a2:	b9c0      	cbnz	r0, 15d6 <dir_sdi+0x82>
    15a4:	2002      	movs	r0, #2
}
    15a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15aa:	461e      	mov	r6, r3
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    15ac:	4621      	mov	r1, r4
    15ae:	6828      	ldr	r0, [r5, #0]
    15b0:	47c0      	blx	r8
    15b2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    15b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    15b8:	d01d      	beq.n	15f6 <dir_sdi+0xa2>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    15ba:	2801      	cmp	r0, #1
    15bc:	d91e      	bls.n	15fc <dir_sdi+0xa8>
    15be:	682b      	ldr	r3, [r5, #0]
    15c0:	699b      	ldr	r3, [r3, #24]
    15c2:	4298      	cmp	r0, r3
    15c4:	d21d      	bcs.n	1602 <dir_sdi+0xae>
    15c6:	1bf3      	subs	r3, r6, r7
		while (idx >= ic) {	/* Follow cluster chain */
    15c8:	42be      	cmp	r6, r7
    15ca:	d2ee      	bcs.n	15aa <dir_sdi+0x56>
		sect = clust2sect(dp->fs, clst);
    15cc:	4621      	mov	r1, r4
    15ce:	6828      	ldr	r0, [r5, #0]
    15d0:	4b0d      	ldr	r3, [pc, #52]	; (1608 <dir_sdi+0xb4>)
    15d2:	4798      	blx	r3
    15d4:	e7e4      	b.n	15a0 <dir_sdi+0x4c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    15d6:	eb00 1016 	add.w	r0, r0, r6, lsr #4
    15da:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    15dc:	682b      	ldr	r3, [r5, #0]
    15de:	3334      	adds	r3, #52	; 0x34
    15e0:	f006 060f 	and.w	r6, r6, #15
    15e4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    15e8:	616e      	str	r6, [r5, #20]
	return FR_OK;
    15ea:	2000      	movs	r0, #0
    15ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
    15f0:	2002      	movs	r0, #2
    15f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    15f6:	2001      	movs	r0, #1
    15f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_INT_ERR;
    15fc:	2002      	movs	r0, #2
    15fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1602:	2002      	movs	r0, #2
    1604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1608:	00001459 	.word	0x00001459
    160c:	00001471 	.word	0x00001471

00001610 <put_fat>:
{
    1610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1614:	2901      	cmp	r1, #1
    1616:	f240 808b 	bls.w	1730 <put_fat+0x120>
    161a:	6983      	ldr	r3, [r0, #24]
    161c:	4299      	cmp	r1, r3
    161e:	d301      	bcc.n	1624 <put_fat+0x14>
		res = FR_INT_ERR;
    1620:	2702      	movs	r7, #2
    1622:	e086      	b.n	1732 <put_fat+0x122>
    1624:	4616      	mov	r6, r2
    1626:	460c      	mov	r4, r1
    1628:	4605      	mov	r5, r0
		switch (fs->fs_type) {
    162a:	7803      	ldrb	r3, [r0, #0]
    162c:	2b02      	cmp	r3, #2
    162e:	d04c      	beq.n	16ca <put_fat+0xba>
    1630:	2b03      	cmp	r3, #3
    1632:	d05e      	beq.n	16f2 <put_fat+0xe2>
    1634:	2b01      	cmp	r3, #1
    1636:	d001      	beq.n	163c <put_fat+0x2c>
			res = FR_INT_ERR;
    1638:	2702      	movs	r7, #2
    163a:	e07a      	b.n	1732 <put_fat+0x122>
			bc = (UINT)clst; bc += bc / 2;
    163c:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1640:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1642:	eb01 2158 	add.w	r1, r1, r8, lsr #9
    1646:	4b3e      	ldr	r3, [pc, #248]	; (1740 <put_fat+0x130>)
    1648:	4798      	blx	r3
			if (res != FR_OK) break;
    164a:	4607      	mov	r7, r0
    164c:	2800      	cmp	r0, #0
    164e:	d170      	bne.n	1732 <put_fat+0x122>
			p = &fs->win[bc++ % SS(fs)];
    1650:	f108 0901 	add.w	r9, r8, #1
    1654:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1658:	f014 0f01 	tst.w	r4, #1
    165c:	d01c      	beq.n	1698 <put_fat+0x88>
    165e:	44a8      	add	r8, r5
    1660:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    1664:	f003 030f 	and.w	r3, r3, #15
    1668:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    166c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
			fs->wflag = 1;
    1670:	2301      	movs	r3, #1
    1672:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1674:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1676:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    167a:	4628      	mov	r0, r5
    167c:	4b30      	ldr	r3, [pc, #192]	; (1740 <put_fat+0x130>)
    167e:	4798      	blx	r3
			if (res != FR_OK) break;
    1680:	2800      	cmp	r0, #0
    1682:	d159      	bne.n	1738 <put_fat+0x128>
			p = &fs->win[bc % SS(fs)];
    1684:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1688:	f3c6 1207 	ubfx	r2, r6, #4, #8
    168c:	44a9      	add	r9, r5
    168e:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
			fs->wflag = 1;
    1692:	2301      	movs	r3, #1
    1694:	712b      	strb	r3, [r5, #4]
			break;
    1696:	e04c      	b.n	1732 <put_fat+0x122>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1698:	44a8      	add	r8, r5
    169a:	f888 6034 	strb.w	r6, [r8, #52]	; 0x34
			fs->wflag = 1;
    169e:	2301      	movs	r3, #1
    16a0:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    16a2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    16a4:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    16a8:	4628      	mov	r0, r5
    16aa:	4b25      	ldr	r3, [pc, #148]	; (1740 <put_fat+0x130>)
    16ac:	4798      	blx	r3
			if (res != FR_OK) break;
    16ae:	2800      	cmp	r0, #0
    16b0:	d144      	bne.n	173c <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    16b2:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    16b6:	eb05 0309 	add.w	r3, r5, r9
    16ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    16be:	f023 030f 	bic.w	r3, r3, #15
    16c2:	f3c6 2203 	ubfx	r2, r6, #8, #4
    16c6:	431a      	orrs	r2, r3
    16c8:	e7e0      	b.n	168c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    16ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
    16cc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    16d0:	4b1b      	ldr	r3, [pc, #108]	; (1740 <put_fat+0x130>)
    16d2:	4798      	blx	r3
			if (res != FR_OK) break;
    16d4:	4607      	mov	r7, r0
    16d6:	bb60      	cbnz	r0, 1732 <put_fat+0x122>
			p = &fs->win[clst * 2 % SS(fs)];
    16d8:	0063      	lsls	r3, r4, #1
    16da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
    16de:	442b      	add	r3, r5
    16e0:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
    16e4:	f3c6 2207 	ubfx	r2, r6, #8, #8
    16e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			fs->wflag = 1;
    16ec:	2301      	movs	r3, #1
    16ee:	712b      	strb	r3, [r5, #4]
			break;
    16f0:	e01f      	b.n	1732 <put_fat+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    16f2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    16f4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    16f8:	4b11      	ldr	r3, [pc, #68]	; (1740 <put_fat+0x130>)
    16fa:	4798      	blx	r3
			if (res != FR_OK) break;
    16fc:	4607      	mov	r7, r0
    16fe:	b9c0      	cbnz	r0, 1732 <put_fat+0x122>
			p = &fs->win[clst * 4 % SS(fs)];
    1700:	00a1      	lsls	r1, r4, #2
    1702:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
    1706:	f101 0334 	add.w	r3, r1, #52	; 0x34
    170a:	442b      	add	r3, r5
			val |= LD_DWORD(p) & 0xF0000000;
    170c:	78da      	ldrb	r2, [r3, #3]
    170e:	0612      	lsls	r2, r2, #24
    1710:	4429      	add	r1, r5
    1712:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    1716:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
    1718:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    171c:	f3c2 2107 	ubfx	r1, r2, #8, #8
    1720:	7059      	strb	r1, [r3, #1]
    1722:	0c11      	lsrs	r1, r2, #16
    1724:	7099      	strb	r1, [r3, #2]
    1726:	0e12      	lsrs	r2, r2, #24
    1728:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
    172a:	2301      	movs	r3, #1
    172c:	712b      	strb	r3, [r5, #4]
			break;
    172e:	e000      	b.n	1732 <put_fat+0x122>
		res = FR_INT_ERR;
    1730:	2702      	movs	r7, #2
}
    1732:	4638      	mov	r0, r7
    1734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1738:	4607      	mov	r7, r0
    173a:	e7fa      	b.n	1732 <put_fat+0x122>
    173c:	4607      	mov	r7, r0
	return res;
    173e:	e7f8      	b.n	1732 <put_fat+0x122>
    1740:	00000ec9 	.word	0x00000ec9

00001744 <create_chain>:
{
    1744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1748:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
    174a:	4688      	mov	r8, r1
    174c:	b941      	cbnz	r1, 1760 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
    174e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1750:	b19e      	cbz	r6, 177a <create_chain+0x36>
    1752:	6983      	ldr	r3, [r0, #24]
    1754:	429e      	cmp	r6, r3
    1756:	bf28      	it	cs
    1758:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
    175a:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    175c:	4f2a      	ldr	r7, [pc, #168]	; (1808 <create_chain+0xc4>)
    175e:	e01a      	b.n	1796 <create_chain+0x52>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1760:	4b29      	ldr	r3, [pc, #164]	; (1808 <create_chain+0xc4>)
    1762:	4798      	blx	r3
    1764:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
    1766:	2801      	cmp	r0, #1
    1768:	d943      	bls.n	17f2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    176a:	f1b0 3fff 	cmp.w	r0, #4294967295
    176e:	d045      	beq.n	17fc <create_chain+0xb8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1770:	69aa      	ldr	r2, [r5, #24]
    1772:	4290      	cmp	r0, r2
    1774:	d342      	bcc.n	17fc <create_chain+0xb8>
		scl = clst;
    1776:	4646      	mov	r6, r8
    1778:	e7ef      	b.n	175a <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    177a:	2601      	movs	r6, #1
    177c:	e7ed      	b.n	175a <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    177e:	4621      	mov	r1, r4
    1780:	4628      	mov	r0, r5
    1782:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    1784:	4603      	mov	r3, r0
    1786:	b170      	cbz	r0, 17a6 <create_chain+0x62>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1788:	f1b0 3fff 	cmp.w	r0, #4294967295
    178c:	d036      	beq.n	17fc <create_chain+0xb8>
    178e:	2801      	cmp	r0, #1
    1790:	d034      	beq.n	17fc <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    1792:	42b4      	cmp	r4, r6
    1794:	d031      	beq.n	17fa <create_chain+0xb6>
		ncl++;							/* Next cluster */
    1796:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    1798:	69ab      	ldr	r3, [r5, #24]
    179a:	429c      	cmp	r4, r3
    179c:	d3ef      	bcc.n	177e <create_chain+0x3a>
			if (ncl > scl) return 0;	/* No free cluster */
    179e:	2e01      	cmp	r6, #1
    17a0:	d929      	bls.n	17f6 <create_chain+0xb2>
			ncl = 2;
    17a2:	2402      	movs	r4, #2
    17a4:	e7eb      	b.n	177e <create_chain+0x3a>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    17a6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    17aa:	4621      	mov	r1, r4
    17ac:	4628      	mov	r0, r5
    17ae:	4b17      	ldr	r3, [pc, #92]	; (180c <create_chain+0xc8>)
    17b0:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    17b2:	4603      	mov	r3, r0
    17b4:	b9b8      	cbnz	r0, 17e6 <create_chain+0xa2>
    17b6:	f1b8 0f00 	cmp.w	r8, #0
    17ba:	d10c      	bne.n	17d6 <create_chain+0x92>
		fs->last_clust = ncl;			/* Update FSINFO */
    17bc:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    17be:	692b      	ldr	r3, [r5, #16]
    17c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    17c4:	d01d      	beq.n	1802 <create_chain+0xbe>
			fs->free_clust--;
    17c6:	3b01      	subs	r3, #1
    17c8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    17ca:	796b      	ldrb	r3, [r5, #5]
    17cc:	f043 0301 	orr.w	r3, r3, #1
    17d0:	716b      	strb	r3, [r5, #5]
    17d2:	4623      	mov	r3, r4
    17d4:	e012      	b.n	17fc <create_chain+0xb8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    17d6:	4622      	mov	r2, r4
    17d8:	4641      	mov	r1, r8
    17da:	4628      	mov	r0, r5
    17dc:	4b0b      	ldr	r3, [pc, #44]	; (180c <create_chain+0xc8>)
    17de:	4798      	blx	r3
	if (res == FR_OK) {
    17e0:	4603      	mov	r3, r0
    17e2:	2800      	cmp	r0, #0
    17e4:	d0ea      	beq.n	17bc <create_chain+0x78>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    17e6:	2b01      	cmp	r3, #1
    17e8:	bf0c      	ite	eq
    17ea:	f04f 33ff 	moveq.w	r3, #4294967295
    17ee:	2301      	movne	r3, #1
    17f0:	e004      	b.n	17fc <create_chain+0xb8>
		if (cs < 2) return 1;			/* Invalid value */
    17f2:	2301      	movs	r3, #1
    17f4:	e002      	b.n	17fc <create_chain+0xb8>
			if (ncl > scl) return 0;	/* No free cluster */
    17f6:	2300      	movs	r3, #0
    17f8:	e000      	b.n	17fc <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    17fa:	2300      	movs	r3, #0
}
    17fc:	4618      	mov	r0, r3
    17fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1802:	4623      	mov	r3, r4
    1804:	e7fa      	b.n	17fc <create_chain+0xb8>
    1806:	bf00      	nop
    1808:	00001471 	.word	0x00001471
    180c:	00001611 	.word	0x00001611

00001810 <dir_next>:
{
    1810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
    1814:	88c4      	ldrh	r4, [r0, #6]
    1816:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    1818:	b2a3      	uxth	r3, r4
    181a:	b913      	cbnz	r3, 1822 <dir_next+0x12>
		return FR_NO_FILE;
    181c:	2004      	movs	r0, #4
    181e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    1822:	6903      	ldr	r3, [r0, #16]
    1824:	b913      	cbnz	r3, 182c <dir_next+0x1c>
		return FR_NO_FILE;
    1826:	2004      	movs	r0, #4
    1828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    182c:	460e      	mov	r6, r1
    182e:	4605      	mov	r5, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    1830:	f014 070f 	ands.w	r7, r4, #15
    1834:	d110      	bne.n	1858 <dir_next+0x48>
		dp->sect++;					/* Next sector */
    1836:	3301      	adds	r3, #1
    1838:	6103      	str	r3, [r0, #16]
		if (!dp->clust) {		/* Static table */
    183a:	68c1      	ldr	r1, [r0, #12]
    183c:	b931      	cbnz	r1, 184c <dir_next+0x3c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    183e:	6803      	ldr	r3, [r0, #0]
    1840:	891b      	ldrh	r3, [r3, #8]
    1842:	429c      	cmp	r4, r3
    1844:	d308      	bcc.n	1858 <dir_next+0x48>
				return FR_NO_FILE;
    1846:	2004      	movs	r0, #4
    1848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    184c:	6800      	ldr	r0, [r0, #0]
    184e:	7883      	ldrb	r3, [r0, #2]
    1850:	3b01      	subs	r3, #1
    1852:	ea13 1814 	ands.w	r8, r3, r4, lsr #4
    1856:	d008      	beq.n	186a <dir_next+0x5a>
	dp->index = (WORD)i;	/* Current index */
    1858:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    185a:	682b      	ldr	r3, [r5, #0]
    185c:	3334      	adds	r3, #52	; 0x34
    185e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    1862:	616b      	str	r3, [r5, #20]
	return FR_OK;
    1864:	2000      	movs	r0, #0
    1866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    186a:	4b30      	ldr	r3, [pc, #192]	; (192c <dir_next+0x11c>)
    186c:	4798      	blx	r3
    186e:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    1870:	2801      	cmp	r0, #1
    1872:	d948      	bls.n	1906 <dir_next+0xf6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1874:	f1b0 3fff 	cmp.w	r0, #4294967295
    1878:	d048      	beq.n	190c <dir_next+0xfc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    187a:	6828      	ldr	r0, [r5, #0]
    187c:	6983      	ldr	r3, [r0, #24]
    187e:	4599      	cmp	r9, r3
    1880:	d339      	bcc.n	18f6 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    1882:	b916      	cbnz	r6, 188a <dir_next+0x7a>
    1884:	2004      	movs	r0, #4
    1886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    188a:	68e9      	ldr	r1, [r5, #12]
    188c:	4b28      	ldr	r3, [pc, #160]	; (1930 <dir_next+0x120>)
    188e:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1890:	4681      	mov	r9, r0
    1892:	b910      	cbnz	r0, 189a <dir_next+0x8a>
    1894:	2007      	movs	r0, #7
    1896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    189a:	2801      	cmp	r0, #1
    189c:	d039      	beq.n	1912 <dir_next+0x102>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    189e:	f1b0 3fff 	cmp.w	r0, #4294967295
    18a2:	d039      	beq.n	1918 <dir_next+0x108>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    18a4:	6828      	ldr	r0, [r5, #0]
    18a6:	4b23      	ldr	r3, [pc, #140]	; (1934 <dir_next+0x124>)
    18a8:	4798      	blx	r3
    18aa:	2800      	cmp	r0, #0
    18ac:	d137      	bne.n	191e <dir_next+0x10e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    18ae:	6828      	ldr	r0, [r5, #0]
    18b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    18b4:	2100      	movs	r1, #0
    18b6:	3034      	adds	r0, #52	; 0x34
    18b8:	4b1f      	ldr	r3, [pc, #124]	; (1938 <dir_next+0x128>)
    18ba:	4798      	blx	r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    18bc:	682e      	ldr	r6, [r5, #0]
    18be:	4649      	mov	r1, r9
    18c0:	4630      	mov	r0, r6
    18c2:	4b1e      	ldr	r3, [pc, #120]	; (193c <dir_next+0x12c>)
    18c4:	4798      	blx	r3
    18c6:	6330      	str	r0, [r6, #48]	; 0x30
						dp->fs->wflag = 1;
    18c8:	f04f 0a01 	mov.w	sl, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    18cc:	4e19      	ldr	r6, [pc, #100]	; (1934 <dir_next+0x124>)
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    18ce:	682b      	ldr	r3, [r5, #0]
    18d0:	789a      	ldrb	r2, [r3, #2]
    18d2:	4590      	cmp	r8, r2
    18d4:	d20b      	bcs.n	18ee <dir_next+0xde>
						dp->fs->wflag = 1;
    18d6:	f883 a004 	strb.w	sl, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    18da:	6828      	ldr	r0, [r5, #0]
    18dc:	47b0      	blx	r6
    18de:	bb08      	cbnz	r0, 1924 <dir_next+0x114>
						dp->fs->winsect++;
    18e0:	682a      	ldr	r2, [r5, #0]
    18e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    18e4:	3301      	adds	r3, #1
    18e6:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    18e8:	f108 0801 	add.w	r8, r8, #1
    18ec:	e7ef      	b.n	18ce <dir_next+0xbe>
					dp->fs->winsect -= c;						/* Rewind window offset */
    18ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    18f0:	eba2 0208 	sub.w	r2, r2, r8
    18f4:	631a      	str	r2, [r3, #48]	; 0x30
				dp->clust = clst;				/* Initialize data for new cluster */
    18f6:	f8c5 900c 	str.w	r9, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
    18fa:	4649      	mov	r1, r9
    18fc:	6828      	ldr	r0, [r5, #0]
    18fe:	4b0f      	ldr	r3, [pc, #60]	; (193c <dir_next+0x12c>)
    1900:	4798      	blx	r3
    1902:	6128      	str	r0, [r5, #16]
    1904:	e7a8      	b.n	1858 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
    1906:	2002      	movs	r0, #2
    1908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    190c:	2001      	movs	r0, #1
    190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    1912:	2002      	movs	r0, #2
    1914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1918:	2001      	movs	r0, #1
    191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    191e:	2001      	movs	r0, #1
    1920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    1924:	2001      	movs	r0, #1
}
    1926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    192a:	bf00      	nop
    192c:	00001471 	.word	0x00001471
    1930:	00001745 	.word	0x00001745
    1934:	00000e59 	.word	0x00000e59
    1938:	00000d69 	.word	0x00000d69
    193c:	00001459 	.word	0x00001459

00001940 <follow_path>:
{
    1940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1944:	4605      	mov	r5, r0
    1946:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
    1948:	780b      	ldrb	r3, [r1, #0]
    194a:	2b2f      	cmp	r3, #47	; 0x2f
    194c:	d00a      	beq.n	1964 <follow_path+0x24>
    194e:	2b5c      	cmp	r3, #92	; 0x5c
    1950:	d008      	beq.n	1964 <follow_path+0x24>
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
    1952:	6803      	ldr	r3, [r0, #0]
    1954:	695b      	ldr	r3, [r3, #20]
    1956:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1958:	7823      	ldrb	r3, [r4, #0]
    195a:	2b1f      	cmp	r3, #31
    195c:	d906      	bls.n	196c <follow_path+0x2c>
		res = dir_next(dp, 0);		/* Next entry */
    195e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 1b98 <follow_path+0x258>
    1962:	e085      	b.n	1a70 <follow_path+0x130>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
    1964:	3401      	adds	r4, #1
    1966:	2300      	movs	r3, #0
    1968:	60ab      	str	r3, [r5, #8]
    196a:	e7f5      	b.n	1958 <follow_path+0x18>
		res = dir_sdi(dp, 0);
    196c:	2100      	movs	r1, #0
    196e:	4628      	mov	r0, r5
    1970:	4b83      	ldr	r3, [pc, #524]	; (1b80 <follow_path+0x240>)
    1972:	4798      	blx	r3
    1974:	4681      	mov	r9, r0
		dp->dir = 0;
    1976:	2300      	movs	r3, #0
    1978:	616b      	str	r3, [r5, #20]
    197a:	e0e0      	b.n	1b3e <follow_path+0x1fe>
			sfn[i++] = c;
    197c:	232e      	movs	r3, #46	; 0x2e
    197e:	703b      	strb	r3, [r7, #0]
			c = (BYTE)p[si++];
    1980:	7873      	ldrb	r3, [r6, #1]
			if (c != '.' || si >= 3) break;
    1982:	2b2e      	cmp	r3, #46	; 0x2e
    1984:	d113      	bne.n	19ae <follow_path+0x6e>
			sfn[i++] = c;
    1986:	707b      	strb	r3, [r7, #1]
			c = (BYTE)p[si++];
    1988:	78b3      	ldrb	r3, [r6, #2]
			if (c != '.' || si >= 3) break;
    198a:	2b2e      	cmp	r3, #46	; 0x2e
    198c:	d102      	bne.n	1994 <follow_path+0x54>
    198e:	f04f 0906 	mov.w	r9, #6
    1992:	e0d4      	b.n	1b3e <follow_path+0x1fe>
			c = (BYTE)p[si++];
    1994:	2403      	movs	r4, #3
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1996:	2b2f      	cmp	r3, #47	; 0x2f
    1998:	f000 80ba 	beq.w	1b10 <follow_path+0x1d0>
    199c:	2b5c      	cmp	r3, #92	; 0x5c
    199e:	f000 80b7 	beq.w	1b10 <follow_path+0x1d0>
    19a2:	2b20      	cmp	r3, #32
    19a4:	f200 80c9 	bhi.w	1b3a <follow_path+0x1fa>
		*path = &p[si];									/* Return pointer to the next segment */
    19a8:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    19aa:	2324      	movs	r3, #36	; 0x24
    19ac:	e0b2      	b.n	1b14 <follow_path+0x1d4>
			c = (BYTE)p[si++];
    19ae:	2402      	movs	r4, #2
    19b0:	e7f1      	b.n	1996 <follow_path+0x56>
			b |= 3;						/* Eliminate NT flag */
    19b2:	f04c 0c03 	orr.w	ip, ip, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
    19b6:	3b80      	subs	r3, #128	; 0x80
    19b8:	4a72      	ldr	r2, [pc, #456]	; (1b84 <follow_path+0x244>)
    19ba:	5cd3      	ldrb	r3, [r2, r3]
    19bc:	e085      	b.n	1aca <follow_path+0x18a>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    19be:	2b00      	cmp	r3, #0
    19c0:	f040 80bb 	bne.w	1b3a <follow_path+0x1fa>
				if (IsLower(c)) {		/* ASCII small capital? */
    19c4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    19c8:	b2d2      	uxtb	r2, r2
    19ca:	2a19      	cmp	r2, #25
    19cc:	f200 8091 	bhi.w	1af2 <follow_path+0x1b2>
					b |= 1; c -= 0x20;
    19d0:	f04c 0c01 	orr.w	ip, ip, #1
    19d4:	3b20      	subs	r3, #32
    19d6:	b2db      	uxtb	r3, r3
    19d8:	e08b      	b.n	1af2 <follow_path+0x1b2>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    19da:	783a      	ldrb	r2, [r7, #0]
    19dc:	2ae5      	cmp	r2, #229	; 0xe5
    19de:	bf04      	itt	eq
    19e0:	2205      	moveq	r2, #5
    19e2:	703a      	strbeq	r2, [r7, #0]
	if (ni == 8) b <<= 2;
    19e4:	f1b9 0f08 	cmp.w	r9, #8
    19e8:	bf04      	itt	eq
    19ea:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
    19ee:	fa5f fc8c 	uxtbeq.w	ip, ip
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    19f2:	f00c 0203 	and.w	r2, ip, #3
    19f6:	2a01      	cmp	r2, #1
    19f8:	bf08      	it	eq
    19fa:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    19fe:	f00c 0c0c 	and.w	ip, ip, #12
    1a02:	f1bc 0f04 	cmp.w	ip, #4
    1a06:	bf08      	it	eq
    1a08:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    1a0c:	72fb      	strb	r3, [r7, #11]
    1a0e:	e082      	b.n	1b16 <follow_path+0x1d6>
		res = dir_next(dp, 0);		/* Next entry */
    1a10:	4659      	mov	r1, fp
    1a12:	4628      	mov	r0, r5
    1a14:	47c0      	blx	r8
	} while (res == FR_OK);
    1a16:	4681      	mov	r9, r0
    1a18:	2800      	cmp	r0, #0
    1a1a:	f040 8093 	bne.w	1b44 <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    1a1e:	6929      	ldr	r1, [r5, #16]
    1a20:	6828      	ldr	r0, [r5, #0]
    1a22:	47b0      	blx	r6
		if (res != FR_OK) break;
    1a24:	4681      	mov	r9, r0
    1a26:	2800      	cmp	r0, #0
    1a28:	f040 808c 	bne.w	1b44 <follow_path+0x204>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1a2c:	6969      	ldr	r1, [r5, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1a2e:	780b      	ldrb	r3, [r1, #0]
    1a30:	2b00      	cmp	r3, #0
    1a32:	f000 8097 	beq.w	1b64 <follow_path+0x224>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    1a36:	f891 a00b 	ldrb.w	sl, [r1, #11]
    1a3a:	f01a 0f08 	tst.w	sl, #8
    1a3e:	d1e7      	bne.n	1a10 <follow_path+0xd0>
    1a40:	69af      	ldr	r7, [r5, #24]
    1a42:	f101 0c0b 	add.w	ip, r1, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    1a46:	463a      	mov	r2, r7
    1a48:	460b      	mov	r3, r1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1a4a:	f813 eb01 	ldrb.w	lr, [r3], #1
    1a4e:	f812 0b01 	ldrb.w	r0, [r2], #1
    1a52:	4586      	cmp	lr, r0
    1a54:	d1dc      	bne.n	1a10 <follow_path+0xd0>
    1a56:	459c      	cmp	ip, r3
    1a58:	d1f7      	bne.n	1a4a <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1a5a:	7afb      	ldrb	r3, [r7, #11]
    1a5c:	f013 0f04 	tst.w	r3, #4
    1a60:	d16d      	bne.n	1b3e <follow_path+0x1fe>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1a62:	f01a 0f10 	tst.w	sl, #16
    1a66:	d050      	beq.n	1b0a <follow_path+0x1ca>
			dp->sclust = ld_clust(dp->fs, dir);
    1a68:	6828      	ldr	r0, [r5, #0]
    1a6a:	4b47      	ldr	r3, [pc, #284]	; (1b88 <follow_path+0x248>)
    1a6c:	4798      	blx	r3
    1a6e:	60a8      	str	r0, [r5, #8]
    1a70:	4626      	mov	r6, r4
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Skip duplicated separator */
    1a72:	f814 3b01 	ldrb.w	r3, [r4], #1
    1a76:	2b2f      	cmp	r3, #47	; 0x2f
    1a78:	d0fa      	beq.n	1a70 <follow_path+0x130>
    1a7a:	2b5c      	cmp	r3, #92	; 0x5c
    1a7c:	d0f8      	beq.n	1a70 <follow_path+0x130>
	sfn = dp->fn;
    1a7e:	69af      	ldr	r7, [r5, #24]
	mem_set(sfn, ' ', 11);
    1a80:	220b      	movs	r2, #11
    1a82:	2120      	movs	r1, #32
    1a84:	4638      	mov	r0, r7
    1a86:	4b41      	ldr	r3, [pc, #260]	; (1b8c <follow_path+0x24c>)
    1a88:	4798      	blx	r3
	if (p[si] == '.') { /* Is this a dot entry? */
    1a8a:	7833      	ldrb	r3, [r6, #0]
    1a8c:	2b2e      	cmp	r3, #46	; 0x2e
    1a8e:	f43f af75 	beq.w	197c <follow_path+0x3c>
    1a92:	f106 3eff 	add.w	lr, r6, #4294967295
    1a96:	2000      	movs	r0, #0
    1a98:	4604      	mov	r4, r0
    1a9a:	f04f 0908 	mov.w	r9, #8
    1a9e:	4684      	mov	ip, r0
			i = 8; ni = 11;
    1aa0:	f04f 0b0b 	mov.w	fp, #11
	while (*str && *str != chr) str++;
    1aa4:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
		c = (BYTE)p[si++];
    1aa8:	3401      	adds	r4, #1
    1aaa:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1aae:	2b20      	cmp	r3, #32
    1ab0:	d93b      	bls.n	1b2a <follow_path+0x1ea>
    1ab2:	2b2f      	cmp	r3, #47	; 0x2f
    1ab4:	d03c      	beq.n	1b30 <follow_path+0x1f0>
    1ab6:	2b5c      	cmp	r3, #92	; 0x5c
    1ab8:	d03a      	beq.n	1b30 <follow_path+0x1f0>
		if (c == '.' || i >= ni) {
    1aba:	2b2e      	cmp	r3, #46	; 0x2e
    1abc:	d055      	beq.n	1b6a <follow_path+0x22a>
    1abe:	4581      	cmp	r9, r0
    1ac0:	d93b      	bls.n	1b3a <follow_path+0x1fa>
		if (c >= 0x80) {				/* Extended character? */
    1ac2:	f013 0f80 	tst.w	r3, #128	; 0x80
    1ac6:	f47f af74 	bne.w	19b2 <follow_path+0x72>
	while (*str && *str != chr) str++;
    1aca:	2b22      	cmp	r3, #34	; 0x22
    1acc:	f43f af5f 	beq.w	198e <follow_path+0x4e>
    1ad0:	4652      	mov	r2, sl
    1ad2:	492f      	ldr	r1, [pc, #188]	; (1b90 <follow_path+0x250>)
    1ad4:	4293      	cmp	r3, r2
    1ad6:	f43f af72 	beq.w	19be <follow_path+0x7e>
    1ada:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1ade:	2a00      	cmp	r2, #0
    1ae0:	d1f8      	bne.n	1ad4 <follow_path+0x194>
			if (IsUpper(c)) {			/* ASCII large capital? */
    1ae2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1ae6:	b2d2      	uxtb	r2, r2
    1ae8:	2a19      	cmp	r2, #25
    1aea:	f63f af6b 	bhi.w	19c4 <follow_path+0x84>
				b |= 2;
    1aee:	f04c 0c02 	orr.w	ip, ip, #2
			sfn[i++] = c;
    1af2:	543b      	strb	r3, [r7, r0]
    1af4:	3001      	adds	r0, #1
    1af6:	e7d7      	b.n	1aa8 <follow_path+0x168>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1af8:	f003 0304 	and.w	r3, r3, #4
    1afc:	2b00      	cmp	r3, #0
    1afe:	bf14      	ite	ne
    1b00:	f04f 0904 	movne.w	r9, #4
    1b04:	f04f 0905 	moveq.w	r9, #5
    1b08:	e019      	b.n	1b3e <follow_path+0x1fe>
				res = FR_NO_PATH; break;
    1b0a:	f04f 0905 	mov.w	r9, #5
    1b0e:	e016      	b.n	1b3e <follow_path+0x1fe>
		*path = &p[si];									/* Return pointer to the next segment */
    1b10:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1b12:	2320      	movs	r3, #32
    1b14:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1b16:	2100      	movs	r1, #0
    1b18:	4628      	mov	r0, r5
    1b1a:	4b19      	ldr	r3, [pc, #100]	; (1b80 <follow_path+0x240>)
    1b1c:	4798      	blx	r3
	if (res != FR_OK) return res;
    1b1e:	4681      	mov	r9, r0
    1b20:	b980      	cbnz	r0, 1b44 <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    1b22:	4e1c      	ldr	r6, [pc, #112]	; (1b94 <follow_path+0x254>)
		res = dir_next(dp, 0);		/* Next entry */
    1b24:	f04f 0b00 	mov.w	fp, #0
    1b28:	e779      	b.n	1a1e <follow_path+0xde>
	*path = &p[si];						/* Return pointer to the next segment */
    1b2a:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1b2c:	2304      	movs	r3, #4
    1b2e:	e001      	b.n	1b34 <follow_path+0x1f4>
	*path = &p[si];						/* Return pointer to the next segment */
    1b30:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1b32:	2300      	movs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1b34:	2800      	cmp	r0, #0
    1b36:	f47f af50 	bne.w	19da <follow_path+0x9a>
			res = dir_find(dp);				/* Find an object with the sagment name */
    1b3a:	f04f 0906 	mov.w	r9, #6
}
    1b3e:	4648      	mov	r0, r9
    1b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ns = dp->fn[NSFLAG];
    1b44:	69ab      	ldr	r3, [r5, #24]
    1b46:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
    1b48:	f1b9 0f04 	cmp.w	r9, #4
    1b4c:	d1f7      	bne.n	1b3e <follow_path+0x1fe>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
    1b4e:	f013 0f20 	tst.w	r3, #32
    1b52:	d0d1      	beq.n	1af8 <follow_path+0x1b8>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
    1b54:	2200      	movs	r2, #0
    1b56:	60aa      	str	r2, [r5, #8]
    1b58:	616a      	str	r2, [r5, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    1b5a:	f013 0f04 	tst.w	r3, #4
    1b5e:	d087      	beq.n	1a70 <follow_path+0x130>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
    1b60:	4691      	mov	r9, r2
    1b62:	e7ec      	b.n	1b3e <follow_path+0x1fe>
			ns = dp->fn[NSFLAG];
    1b64:	69ab      	ldr	r3, [r5, #24]
    1b66:	7adb      	ldrb	r3, [r3, #11]
    1b68:	e7f1      	b.n	1b4e <follow_path+0x20e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1b6a:	f1b9 0f08 	cmp.w	r9, #8
    1b6e:	d1e4      	bne.n	1b3a <follow_path+0x1fa>
			b <<= 2; continue;
    1b70:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1b74:	fa5f fc8c 	uxtb.w	ip, ip
			i = 8; ni = 11;
    1b78:	4648      	mov	r0, r9
    1b7a:	46d9      	mov	r9, fp
    1b7c:	e794      	b.n	1aa8 <follow_path+0x168>
    1b7e:	bf00      	nop
    1b80:	00001555 	.word	0x00001555
    1b84:	00008fb8 	.word	0x00008fb8
    1b88:	00000d77 	.word	0x00000d77
    1b8c:	00000d69 	.word	0x00000d69
    1b90:	00009069 	.word	0x00009069
    1b94:	00000ec9 	.word	0x00000ec9
    1b98:	00001811 	.word	0x00001811

00001b9c <dir_alloc>:
{
    1b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ba0:	4604      	mov	r4, r0
    1ba2:	4689      	mov	r9, r1
	res = dir_sdi(dp, 0);
    1ba4:	2100      	movs	r1, #0
    1ba6:	4b12      	ldr	r3, [pc, #72]	; (1bf0 <dir_alloc+0x54>)
    1ba8:	4798      	blx	r3
	if (res == FR_OK) {
    1baa:	4603      	mov	r3, r0
    1bac:	b9d0      	cbnz	r0, 1be4 <dir_alloc+0x48>
    1bae:	2500      	movs	r5, #0
			res = move_window(dp->fs, dp->sect);
    1bb0:	4e10      	ldr	r6, [pc, #64]	; (1bf4 <dir_alloc+0x58>)
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1bb2:	f04f 0801 	mov.w	r8, #1
    1bb6:	4f10      	ldr	r7, [pc, #64]	; (1bf8 <dir_alloc+0x5c>)
    1bb8:	e007      	b.n	1bca <dir_alloc+0x2e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    1bba:	3501      	adds	r5, #1
    1bbc:	454d      	cmp	r5, r9
    1bbe:	d014      	beq.n	1bea <dir_alloc+0x4e>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1bc0:	4641      	mov	r1, r8
    1bc2:	4620      	mov	r0, r4
    1bc4:	47b8      	blx	r7
		} while (res == FR_OK);
    1bc6:	4603      	mov	r3, r0
    1bc8:	b960      	cbnz	r0, 1be4 <dir_alloc+0x48>
			res = move_window(dp->fs, dp->sect);
    1bca:	6921      	ldr	r1, [r4, #16]
    1bcc:	6820      	ldr	r0, [r4, #0]
    1bce:	47b0      	blx	r6
			if (res != FR_OK) break;
    1bd0:	4603      	mov	r3, r0
    1bd2:	b938      	cbnz	r0, 1be4 <dir_alloc+0x48>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    1bd4:	6962      	ldr	r2, [r4, #20]
    1bd6:	7812      	ldrb	r2, [r2, #0]
    1bd8:	2ae5      	cmp	r2, #229	; 0xe5
    1bda:	d0ee      	beq.n	1bba <dir_alloc+0x1e>
    1bdc:	2a00      	cmp	r2, #0
    1bde:	d0ec      	beq.n	1bba <dir_alloc+0x1e>
				n = 0;					/* Not a blank entry. Restart to search */
    1be0:	2500      	movs	r5, #0
    1be2:	e7ed      	b.n	1bc0 <dir_alloc+0x24>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1be4:	2b04      	cmp	r3, #4
    1be6:	bf08      	it	eq
    1be8:	2307      	moveq	r3, #7
}
    1bea:	4618      	mov	r0, r3
    1bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1bf0:	00001555 	.word	0x00001555
    1bf4:	00000ec9 	.word	0x00000ec9
    1bf8:	00001811 	.word	0x00001811

00001bfc <dir_register>:
{
    1bfc:	b538      	push	{r3, r4, r5, lr}
    1bfe:	4605      	mov	r5, r0
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
    1c00:	2101      	movs	r1, #1
    1c02:	4b0d      	ldr	r3, [pc, #52]	; (1c38 <dir_register+0x3c>)
    1c04:	4798      	blx	r3
	if (res == FR_OK) {				/* Set SFN entry */
    1c06:	4604      	mov	r4, r0
    1c08:	b108      	cbz	r0, 1c0e <dir_register+0x12>
}
    1c0a:	4620      	mov	r0, r4
    1c0c:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(dp->fs, dp->sect);
    1c0e:	6929      	ldr	r1, [r5, #16]
    1c10:	6828      	ldr	r0, [r5, #0]
    1c12:	4b0a      	ldr	r3, [pc, #40]	; (1c3c <dir_register+0x40>)
    1c14:	4798      	blx	r3
		if (res == FR_OK) {
    1c16:	4604      	mov	r4, r0
    1c18:	2800      	cmp	r0, #0
    1c1a:	d1f6      	bne.n	1c0a <dir_register+0xe>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    1c1c:	2220      	movs	r2, #32
    1c1e:	2100      	movs	r1, #0
    1c20:	6968      	ldr	r0, [r5, #20]
    1c22:	4b07      	ldr	r3, [pc, #28]	; (1c40 <dir_register+0x44>)
    1c24:	4798      	blx	r3
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1c26:	220b      	movs	r2, #11
    1c28:	69a9      	ldr	r1, [r5, #24]
    1c2a:	6968      	ldr	r0, [r5, #20]
    1c2c:	4b05      	ldr	r3, [pc, #20]	; (1c44 <dir_register+0x48>)
    1c2e:	4798      	blx	r3
			dp->fs->wflag = 1;
    1c30:	682b      	ldr	r3, [r5, #0]
    1c32:	2201      	movs	r2, #1
    1c34:	711a      	strb	r2, [r3, #4]
    1c36:	e7e8      	b.n	1c0a <dir_register+0xe>
    1c38:	00001b9d 	.word	0x00001b9d
    1c3c:	00000ec9 	.word	0x00000ec9
    1c40:	00000d69 	.word	0x00000d69
    1c44:	00000d55 	.word	0x00000d55

00001c48 <dir_read>:
{
    1c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c4c:	4604      	mov	r4, r0
    1c4e:	4688      	mov	r8, r1
	res = FR_NO_FILE;
    1c50:	f04f 0e04 	mov.w	lr, #4
		res = move_window(dp->fs, dp->sect);
    1c54:	4d16      	ldr	r5, [pc, #88]	; (1cb0 <dir_read+0x68>)
		res = dir_next(dp, 0);				/* Next entry */
    1c56:	2700      	movs	r7, #0
    1c58:	4e16      	ldr	r6, [pc, #88]	; (1cb4 <dir_read+0x6c>)
	while (dp->sect) {
    1c5a:	e004      	b.n	1c66 <dir_read+0x1e>
		res = dir_next(dp, 0);				/* Next entry */
    1c5c:	4639      	mov	r1, r7
    1c5e:	4620      	mov	r0, r4
    1c60:	47b0      	blx	r6
		if (res != FR_OK) break;
    1c62:	4686      	mov	lr, r0
    1c64:	b9f0      	cbnz	r0, 1ca4 <dir_read+0x5c>
	while (dp->sect) {
    1c66:	6921      	ldr	r1, [r4, #16]
    1c68:	b1b1      	cbz	r1, 1c98 <dir_read+0x50>
		res = move_window(dp->fs, dp->sect);
    1c6a:	6820      	ldr	r0, [r4, #0]
    1c6c:	47a8      	blx	r5
		if (res != FR_OK) break;
    1c6e:	4686      	mov	lr, r0
    1c70:	b9c0      	cbnz	r0, 1ca4 <dir_read+0x5c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1c72:	6963      	ldr	r3, [r4, #20]
		c = dir[DIR_Name];
    1c74:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1c76:	b19a      	cbz	r2, 1ca0 <dir_read+0x58>
		a = dir[DIR_Attr] & AM_MASK;
    1c78:	7adb      	ldrb	r3, [r3, #11]
    1c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
    1c7e:	2ae5      	cmp	r2, #229	; 0xe5
    1c80:	d0ec      	beq.n	1c5c <dir_read+0x14>
    1c82:	2b0f      	cmp	r3, #15
    1c84:	d0ea      	beq.n	1c5c <dir_read+0x14>
    1c86:	f023 0320 	bic.w	r3, r3, #32
    1c8a:	2b08      	cmp	r3, #8
    1c8c:	bf14      	ite	ne
    1c8e:	2300      	movne	r3, #0
    1c90:	2301      	moveq	r3, #1
    1c92:	4543      	cmp	r3, r8
    1c94:	d1e2      	bne.n	1c5c <dir_read+0x14>
    1c96:	e007      	b.n	1ca8 <dir_read+0x60>
	if (res != FR_OK) dp->sect = 0;
    1c98:	f1be 0f00 	cmp.w	lr, #0
    1c9c:	d004      	beq.n	1ca8 <dir_read+0x60>
    1c9e:	e001      	b.n	1ca4 <dir_read+0x5c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1ca0:	f04f 0e04 	mov.w	lr, #4
	if (res != FR_OK) dp->sect = 0;
    1ca4:	2300      	movs	r3, #0
    1ca6:	6123      	str	r3, [r4, #16]
}
    1ca8:	4670      	mov	r0, lr
    1caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cae:	bf00      	nop
    1cb0:	00000ec9 	.word	0x00000ec9
    1cb4:	00001811 	.word	0x00001811

00001cb8 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1cb8:	2901      	cmp	r1, #1
    1cba:	d930      	bls.n	1d1e <remove_chain+0x66>
{
    1cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc0:	4604      	mov	r4, r0
    1cc2:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1cc4:	6983      	ldr	r3, [r0, #24]
    1cc6:	4299      	cmp	r1, r3
    1cc8:	d303      	bcc.n	1cd2 <remove_chain+0x1a>
		res = FR_INT_ERR;
    1cca:	2202      	movs	r2, #2
}
    1ccc:	4610      	mov	r0, r2
    1cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1cd2:	4f17      	ldr	r7, [pc, #92]	; (1d30 <remove_chain+0x78>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1cd4:	f04f 0900 	mov.w	r9, #0
    1cd8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1d34 <remove_chain+0x7c>
    1cdc:	e003      	b.n	1ce6 <remove_chain+0x2e>
    1cde:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1ce0:	69a3      	ldr	r3, [r4, #24]
    1ce2:	42ab      	cmp	r3, r5
    1ce4:	d9f2      	bls.n	1ccc <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1ce6:	4631      	mov	r1, r6
    1ce8:	4620      	mov	r0, r4
    1cea:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
    1cec:	4605      	mov	r5, r0
    1cee:	b1c8      	cbz	r0, 1d24 <remove_chain+0x6c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1cf0:	2801      	cmp	r0, #1
    1cf2:	d019      	beq.n	1d28 <remove_chain+0x70>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1cf4:	f1b0 3fff 	cmp.w	r0, #4294967295
    1cf8:	d018      	beq.n	1d2c <remove_chain+0x74>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1cfa:	464a      	mov	r2, r9
    1cfc:	4631      	mov	r1, r6
    1cfe:	4620      	mov	r0, r4
    1d00:	47c0      	blx	r8
			if (res != FR_OK) break;
    1d02:	4602      	mov	r2, r0
    1d04:	2800      	cmp	r0, #0
    1d06:	d1e1      	bne.n	1ccc <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1d08:	6923      	ldr	r3, [r4, #16]
    1d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
    1d0e:	d0e6      	beq.n	1cde <remove_chain+0x26>
				fs->free_clust++;
    1d10:	3301      	adds	r3, #1
    1d12:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
    1d14:	7963      	ldrb	r3, [r4, #5]
    1d16:	f043 0301 	orr.w	r3, r3, #1
    1d1a:	7163      	strb	r3, [r4, #5]
    1d1c:	e7df      	b.n	1cde <remove_chain+0x26>
		res = FR_INT_ERR;
    1d1e:	2202      	movs	r2, #2
}
    1d20:	4610      	mov	r0, r2
    1d22:	4770      	bx	lr
    1d24:	2200      	movs	r2, #0
    1d26:	e7d1      	b.n	1ccc <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1d28:	2202      	movs	r2, #2
    1d2a:	e7cf      	b.n	1ccc <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1d2c:	2201      	movs	r2, #1
    1d2e:	e7cd      	b.n	1ccc <remove_chain+0x14>
    1d30:	00001471 	.word	0x00001471
    1d34:	00001611 	.word	0x00001611

00001d38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1d38:	b510      	push	{r4, lr}
    1d3a:	b084      	sub	sp, #16
    1d3c:	9001      	str	r0, [sp, #4]
    1d3e:	9100      	str	r1, [sp, #0]
    1d40:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1d42:	a804      	add	r0, sp, #16
    1d44:	f840 1d04 	str.w	r1, [r0, #-4]!

	vol = get_ldnumber(&rp);
    1d48:	4b13      	ldr	r3, [pc, #76]	; (1d98 <f_mount+0x60>)
    1d4a:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    1d4c:	2800      	cmp	r0, #0
    1d4e:	db18      	blt.n	1d82 <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1d50:	4b12      	ldr	r3, [pc, #72]	; (1d9c <f_mount+0x64>)
    1d52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
    1d56:	b10b      	cbz	r3, 1d5c <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1d58:	2200      	movs	r2, #0
    1d5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    1d5c:	9b01      	ldr	r3, [sp, #4]
    1d5e:	b1ab      	cbz	r3, 1d8c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
    1d60:	2200      	movs	r2, #0
    1d62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1d64:	9b01      	ldr	r3, [sp, #4]
    1d66:	4a0d      	ldr	r2, [pc, #52]	; (1d9c <f_mount+0x64>)
    1d68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1d6c:	b163      	cbz	r3, 1d88 <f_mount+0x50>
    1d6e:	2c01      	cmp	r4, #1
    1d70:	d001      	beq.n	1d76 <f_mount+0x3e>
    1d72:	2000      	movs	r0, #0
    1d74:	e006      	b.n	1d84 <f_mount+0x4c>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    1d76:	2200      	movs	r2, #0
    1d78:	4669      	mov	r1, sp
    1d7a:	a801      	add	r0, sp, #4
    1d7c:	4b08      	ldr	r3, [pc, #32]	; (1da0 <f_mount+0x68>)
    1d7e:	4798      	blx	r3
	LEAVE_FF(fs, res);
    1d80:	e000      	b.n	1d84 <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
    1d82:	200b      	movs	r0, #11
}
    1d84:	b004      	add	sp, #16
    1d86:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1d88:	2000      	movs	r0, #0
    1d8a:	e7fb      	b.n	1d84 <f_mount+0x4c>
	FatFs[vol] = fs;					/* Register new fs object */
    1d8c:	2300      	movs	r3, #0
    1d8e:	4a03      	ldr	r2, [pc, #12]	; (1d9c <f_mount+0x64>)
    1d90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1d94:	4618      	mov	r0, r3
    1d96:	e7f5      	b.n	1d84 <f_mount+0x4c>
    1d98:	00000e03 	.word	0x00000e03
    1d9c:	200007d4 	.word	0x200007d4
    1da0:	00000fd5 	.word	0x00000fd5

00001da4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1da8:	b08e      	sub	sp, #56	; 0x38
    1daa:	9101      	str	r1, [sp, #4]
	DEFINE_NAMEBUF;
#if !_FS_READONLY
	DWORD dw, cl;
#endif

	if (!fp) return FR_INVALID_OBJECT;
    1dac:	2800      	cmp	r0, #0
    1dae:	f000 80ac 	beq.w	1f0a <f_open+0x166>
    1db2:	4604      	mov	r4, r0
    1db4:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
    1db6:	2300      	movs	r3, #0
    1db8:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1dba:	f002 021e 	and.w	r2, r2, #30
    1dbe:	a901      	add	r1, sp, #4
    1dc0:	a806      	add	r0, sp, #24
    1dc2:	4b5c      	ldr	r3, [pc, #368]	; (1f34 <f_open+0x190>)
    1dc4:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1dc6:	4606      	mov	r6, r0
    1dc8:	2800      	cmp	r0, #0
    1dca:	f040 809f 	bne.w	1f0c <f_open+0x168>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1dce:	f005 081f 	and.w	r8, r5, #31
		INIT_BUF(dj);
    1dd2:	ab03      	add	r3, sp, #12
    1dd4:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&dj, path);	/* Follow the file path */
    1dd6:	9901      	ldr	r1, [sp, #4]
    1dd8:	a806      	add	r0, sp, #24
    1dda:	4b57      	ldr	r3, [pc, #348]	; (1f38 <f_open+0x194>)
    1ddc:	4798      	blx	r3
		dir = dj.dir;
    1dde:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1de0:	4603      	mov	r3, r0
    1de2:	2800      	cmp	r0, #0
    1de4:	d139      	bne.n	1e5a <f_open+0xb6>
			if (!dir)	/* Default directory itself */
    1de6:	2f00      	cmp	r7, #0
    1de8:	f000 8094 	beq.w	1f14 <f_open+0x170>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1dec:	f015 0f1c 	tst.w	r5, #28
    1df0:	d148      	bne.n	1e84 <f_open+0xe0>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    1df2:	7afb      	ldrb	r3, [r7, #11]
    1df4:	f013 0f10 	tst.w	r3, #16
    1df8:	f040 8099 	bne.w	1f2e <f_open+0x18a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1dfc:	f015 0f02 	tst.w	r5, #2
    1e00:	d003      	beq.n	1e0a <f_open+0x66>
    1e02:	f013 0f01 	tst.w	r3, #1
    1e06:	f040 8090 	bne.w	1f2a <f_open+0x186>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    1e0a:	f015 0f08 	tst.w	r5, #8
    1e0e:	d001      	beq.n	1e14 <f_open+0x70>
				mode |= FA__WRITTEN;
    1e10:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1e14:	9b06      	ldr	r3, [sp, #24]
    1e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1e18:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
    1e1a:	6227      	str	r7, [r4, #32]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1e1c:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
    1e20:	f04f 0800 	mov.w	r8, #0
    1e24:	f884 8007 	strb.w	r8, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    1e28:	9d06      	ldr	r5, [sp, #24]
    1e2a:	4639      	mov	r1, r7
    1e2c:	4628      	mov	r0, r5
    1e2e:	4b43      	ldr	r3, [pc, #268]	; (1f3c <f_open+0x198>)
    1e30:	4798      	blx	r3
    1e32:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    1e34:	7ffa      	ldrb	r2, [r7, #31]
    1e36:	7fbb      	ldrb	r3, [r7, #30]
    1e38:	041b      	lsls	r3, r3, #16
    1e3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1e3e:	7f3a      	ldrb	r2, [r7, #28]
    1e40:	4313      	orrs	r3, r2
    1e42:	7f7a      	ldrb	r2, [r7, #29]
    1e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1e48:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
    1e4a:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->dsect = 0;
    1e4e:	f8c4 8018 	str.w	r8, [r4, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    1e52:	6025      	str	r5, [r4, #0]
			fp->id = fp->fs->id;
    1e54:	88eb      	ldrh	r3, [r5, #6]
    1e56:	80a3      	strh	r3, [r4, #4]
    1e58:	e058      	b.n	1f0c <f_open+0x168>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1e5a:	f015 0f1c 	tst.w	r5, #28
    1e5e:	d004      	beq.n	1e6a <f_open+0xc6>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1e60:	2804      	cmp	r0, #4
    1e62:	d006      	beq.n	1e72 <f_open+0xce>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1e64:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1e68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		if (res == FR_OK) {
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d0d6      	beq.n	1e1c <f_open+0x78>
    1e6e:	461e      	mov	r6, r3
    1e70:	e04c      	b.n	1f0c <f_open+0x168>
					res = dir_register(&dj);
    1e72:	a806      	add	r0, sp, #24
    1e74:	4b32      	ldr	r3, [pc, #200]	; (1f40 <f_open+0x19c>)
    1e76:	4798      	blx	r3
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1e78:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1e7c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1e7e:	b140      	cbz	r0, 1e92 <f_open+0xee>
					res = dir_register(&dj);
    1e80:	4606      	mov	r6, r0
    1e82:	e043      	b.n	1f0c <f_open+0x168>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1e84:	7afb      	ldrb	r3, [r7, #11]
    1e86:	f013 0f11 	tst.w	r3, #17
    1e8a:	d14a      	bne.n	1f22 <f_open+0x17e>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1e8c:	f015 0f04 	tst.w	r5, #4
    1e90:	d149      	bne.n	1f26 <f_open+0x182>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1e92:	f018 0f08 	tst.w	r8, #8
    1e96:	d0bd      	beq.n	1e14 <f_open+0x70>
				dw = GET_FATTIME();
    1e98:	4b2a      	ldr	r3, [pc, #168]	; (1f44 <f_open+0x1a0>)
    1e9a:	4798      	blx	r3
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
    1e9c:	b2c1      	uxtb	r1, r0
    1e9e:	73b9      	strb	r1, [r7, #14]
    1ea0:	f3c0 2207 	ubfx	r2, r0, #8, #8
    1ea4:	73fa      	strb	r2, [r7, #15]
    1ea6:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1eaa:	743b      	strb	r3, [r7, #16]
    1eac:	0e00      	lsrs	r0, r0, #24
    1eae:	7478      	strb	r0, [r7, #17]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
    1eb0:	75b9      	strb	r1, [r7, #22]
    1eb2:	75fa      	strb	r2, [r7, #23]
    1eb4:	763b      	strb	r3, [r7, #24]
    1eb6:	7678      	strb	r0, [r7, #25]
				dir[DIR_Attr] = 0;				/* Reset attribute */
    1eb8:	2500      	movs	r5, #0
    1eba:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
    1ebc:	773d      	strb	r5, [r7, #28]
    1ebe:	777d      	strb	r5, [r7, #29]
    1ec0:	77bd      	strb	r5, [r7, #30]
    1ec2:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get cluster chain */
    1ec4:	f8dd 9018 	ldr.w	r9, [sp, #24]
    1ec8:	4639      	mov	r1, r7
    1eca:	4648      	mov	r0, r9
    1ecc:	4b1b      	ldr	r3, [pc, #108]	; (1f3c <f_open+0x198>)
    1ece:	4798      	blx	r3
	ST_WORD(dir + DIR_FstClusLO, cl);
    1ed0:	76bd      	strb	r5, [r7, #26]
    1ed2:	76fd      	strb	r5, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    1ed4:	753d      	strb	r5, [r7, #20]
    1ed6:	757d      	strb	r5, [r7, #21]
				dj.fs->wflag = 1;
    1ed8:	2301      	movs	r3, #1
    1eda:	f889 3004 	strb.w	r3, [r9, #4]
				if (cl) {						/* Remove the cluster chain if exist */
    1ede:	4605      	mov	r5, r0
    1ee0:	2800      	cmp	r0, #0
    1ee2:	d095      	beq.n	1e10 <f_open+0x6c>
					dw = dj.fs->winsect;
    1ee4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
					res = remove_chain(dj.fs, cl);
    1ee8:	4601      	mov	r1, r0
    1eea:	4648      	mov	r0, r9
    1eec:	4b16      	ldr	r3, [pc, #88]	; (1f48 <f_open+0x1a4>)
    1eee:	4798      	blx	r3
					if (res == FR_OK) {
    1ef0:	b108      	cbz	r0, 1ef6 <f_open+0x152>
					res = remove_chain(dj.fs, cl);
    1ef2:	4606      	mov	r6, r0
    1ef4:	e00a      	b.n	1f0c <f_open+0x168>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1ef6:	9806      	ldr	r0, [sp, #24]
    1ef8:	3d01      	subs	r5, #1
    1efa:	60c5      	str	r5, [r0, #12]
						res = move_window(dj.fs, dw);
    1efc:	4651      	mov	r1, sl
    1efe:	4b13      	ldr	r3, [pc, #76]	; (1f4c <f_open+0x1a8>)
    1f00:	4798      	blx	r3
		if (res == FR_OK) {
    1f02:	2800      	cmp	r0, #0
    1f04:	d084      	beq.n	1e10 <f_open+0x6c>
						res = move_window(dj.fs, dw);
    1f06:	4606      	mov	r6, r0
    1f08:	e000      	b.n	1f0c <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
    1f0a:	2609      	movs	r6, #9
		}
	}

	LEAVE_FF(dj.fs, res);
}
    1f0c:	4630      	mov	r0, r6
    1f0e:	b00e      	add	sp, #56	; 0x38
    1f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1f14:	f015 0f1c 	tst.w	r5, #28
    1f18:	d101      	bne.n	1f1e <f_open+0x17a>
				res = FR_INVALID_NAME;
    1f1a:	2306      	movs	r3, #6
    1f1c:	e7a5      	b.n	1e6a <f_open+0xc6>
    1f1e:	2306      	movs	r3, #6
    1f20:	e7a0      	b.n	1e64 <f_open+0xc0>
					res = FR_DENIED;
    1f22:	2607      	movs	r6, #7
    1f24:	e7f2      	b.n	1f0c <f_open+0x168>
						res = FR_EXIST;
    1f26:	2608      	movs	r6, #8
    1f28:	e7f0      	b.n	1f0c <f_open+0x168>
						res = FR_DENIED;
    1f2a:	2607      	movs	r6, #7
    1f2c:	e7ee      	b.n	1f0c <f_open+0x168>
					res = FR_NO_FILE;
    1f2e:	2604      	movs	r6, #4
    1f30:	e7ec      	b.n	1f0c <f_open+0x168>
    1f32:	bf00      	nop
    1f34:	00000fd5 	.word	0x00000fd5
    1f38:	00001941 	.word	0x00001941
    1f3c:	00000d77 	.word	0x00000d77
    1f40:	00001bfd 	.word	0x00001bfd
    1f44:	00000d09 	.word	0x00000d09
    1f48:	00001cb9 	.word	0x00001cb9
    1f4c:	00000ec9 	.word	0x00000ec9

00001f50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f54:	b083      	sub	sp, #12
    1f56:	4604      	mov	r4, r0
    1f58:	4689      	mov	r9, r1
    1f5a:	4616      	mov	r6, r2
    1f5c:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;

	*bw = 0;	/* Clear write byte counter */
    1f5e:	2300      	movs	r3, #0
    1f60:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp);						/* Check validity */
    1f64:	4b69      	ldr	r3, [pc, #420]	; (210c <f_write+0x1bc>)
    1f66:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1f68:	9001      	str	r0, [sp, #4]
    1f6a:	b948      	cbnz	r0, 1f80 <f_write+0x30>
	if (fp->err)							/* Check error */
    1f6c:	79e3      	ldrb	r3, [r4, #7]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	f040 80c9 	bne.w	2106 <f_write+0x1b6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1f74:	79a3      	ldrb	r3, [r4, #6]
    1f76:	f013 0f02 	tst.w	r3, #2
    1f7a:	d105      	bne.n	1f88 <f_write+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
    1f7c:	2307      	movs	r3, #7
    1f7e:	9301      	str	r3, [sp, #4]

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    1f80:	9801      	ldr	r0, [sp, #4]
    1f82:	b003      	add	sp, #12
    1f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1f88:	68a3      	ldr	r3, [r4, #8]
    1f8a:	42f3      	cmn	r3, r6
    1f8c:	d20d      	bcs.n	1faa <f_write+0x5a>
	for ( ;  btw;							/* Repeat until all data written */
    1f8e:	2e00      	cmp	r6, #0
    1f90:	d163      	bne.n	205a <f_write+0x10a>
    1f92:	e00a      	b.n	1faa <f_write+0x5a>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1f94:	2100      	movs	r1, #0
    1f96:	4b5e      	ldr	r3, [pc, #376]	; (2110 <f_write+0x1c0>)
    1f98:	4798      	blx	r3
    1f9a:	4603      	mov	r3, r0
    1f9c:	e003      	b.n	1fa6 <f_write+0x56>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1f9e:	6961      	ldr	r1, [r4, #20]
    1fa0:	4b5b      	ldr	r3, [pc, #364]	; (2110 <f_write+0x1c0>)
    1fa2:	4798      	blx	r3
    1fa4:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d169      	bne.n	207e <f_write+0x12e>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    1faa:	68a3      	ldr	r3, [r4, #8]
    1fac:	68e2      	ldr	r2, [r4, #12]
    1fae:	4293      	cmp	r3, r2
    1fb0:	bf88      	it	hi
    1fb2:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    1fb4:	79a3      	ldrb	r3, [r4, #6]
    1fb6:	f043 0320 	orr.w	r3, r3, #32
    1fba:	71a3      	strb	r3, [r4, #6]
	LEAVE_FF(fp->fs, FR_OK);
    1fbc:	e7e0      	b.n	1f80 <f_write+0x30>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1fbe:	2302      	movs	r3, #2
    1fc0:	71e3      	strb	r3, [r4, #7]
    1fc2:	9301      	str	r3, [sp, #4]
    1fc4:	e7dc      	b.n	1f80 <f_write+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1fc6:	2301      	movs	r3, #1
    1fc8:	71e3      	strb	r3, [r4, #7]
    1fca:	9301      	str	r3, [sp, #4]
    1fcc:	e7d8      	b.n	1f80 <f_write+0x30>
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    1fce:	4b51      	ldr	r3, [pc, #324]	; (2114 <f_write+0x1c4>)
    1fd0:	4798      	blx	r3
    1fd2:	2800      	cmp	r0, #0
    1fd4:	d061      	beq.n	209a <f_write+0x14a>
				ABORT(fp->fs, FR_DISK_ERR);
    1fd6:	2301      	movs	r3, #1
    1fd8:	71e3      	strb	r3, [r4, #7]
    1fda:	9301      	str	r3, [sp, #4]
    1fdc:	e7d0      	b.n	1f80 <f_write+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1fde:	2302      	movs	r3, #2
    1fe0:	71e3      	strb	r3, [r4, #7]
    1fe2:	9301      	str	r3, [sp, #4]
    1fe4:	e7cc      	b.n	1f80 <f_write+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    1fe6:	2301      	movs	r3, #1
    1fe8:	71e3      	strb	r3, [r4, #7]
    1fea:	9301      	str	r3, [sp, #4]
    1fec:	e7c8      	b.n	1f80 <f_write+0x30>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    1fee:	f44f 7200 	mov.w	r2, #512	; 0x200
    1ff2:	eb09 2141 	add.w	r1, r9, r1, lsl #9
    1ff6:	3034      	adds	r0, #52	; 0x34
    1ff8:	4b47      	ldr	r3, [pc, #284]	; (2118 <f_write+0x1c8>)
    1ffa:	4798      	blx	r3
					fp->fs->wflag = 0;
    1ffc:	6823      	ldr	r3, [r4, #0]
    1ffe:	2200      	movs	r2, #0
    2000:	711a      	strb	r2, [r3, #4]
    2002:	e06e      	b.n	20e2 <f_write+0x192>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2004:	68a2      	ldr	r2, [r4, #8]
    2006:	68e3      	ldr	r3, [r4, #12]
    2008:	429a      	cmp	r2, r3
    200a:	d26d      	bcs.n	20e8 <f_write+0x198>
			fp->dsect = sect;
    200c:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    200e:	68a5      	ldr	r5, [r4, #8]
    2010:	f3c5 0508 	ubfx	r5, r5, #0, #9
    2014:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
    2018:	42b5      	cmp	r5, r6
    201a:	bf28      	it	cs
    201c:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    201e:	69a1      	ldr	r1, [r4, #24]
    2020:	6820      	ldr	r0, [r4, #0]
    2022:	4b3e      	ldr	r3, [pc, #248]	; (211c <f_write+0x1cc>)
    2024:	4798      	blx	r3
    2026:	2800      	cmp	r0, #0
    2028:	d169      	bne.n	20fe <f_write+0x1ae>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    202a:	68a0      	ldr	r0, [r4, #8]
    202c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    2030:	3034      	adds	r0, #52	; 0x34
    2032:	6823      	ldr	r3, [r4, #0]
    2034:	462a      	mov	r2, r5
    2036:	4649      	mov	r1, r9
    2038:	4418      	add	r0, r3
    203a:	4b37      	ldr	r3, [pc, #220]	; (2118 <f_write+0x1c8>)
    203c:	4798      	blx	r3
		fp->fs->wflag = 1;
    203e:	6823      	ldr	r3, [r4, #0]
    2040:	2201      	movs	r2, #1
    2042:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2044:	44a9      	add	r9, r5
    2046:	68a3      	ldr	r3, [r4, #8]
    2048:	442b      	add	r3, r5
    204a:	60a3      	str	r3, [r4, #8]
    204c:	f8d8 3000 	ldr.w	r3, [r8]
    2050:	442b      	add	r3, r5
    2052:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
    2056:	1b76      	subs	r6, r6, r5
    2058:	d0a7      	beq.n	1faa <f_write+0x5a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    205a:	68a2      	ldr	r2, [r4, #8]
    205c:	f3c2 0308 	ubfx	r3, r2, #0, #9
    2060:	2b00      	cmp	r3, #0
    2062:	d1d4      	bne.n	200e <f_write+0xbe>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2064:	6820      	ldr	r0, [r4, #0]
    2066:	7883      	ldrb	r3, [r0, #2]
    2068:	3b01      	subs	r3, #1
    206a:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
    206e:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    2072:	d10d      	bne.n	2090 <f_write+0x140>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2074:	2a00      	cmp	r2, #0
    2076:	d192      	bne.n	1f9e <f_write+0x4e>
					clst = fp->sclust;		/* Follow from the origin */
    2078:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    207a:	2b00      	cmp	r3, #0
    207c:	d08a      	beq.n	1f94 <f_write+0x44>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    207e:	2b01      	cmp	r3, #1
    2080:	d09d      	beq.n	1fbe <f_write+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2082:	f1b3 3fff 	cmp.w	r3, #4294967295
    2086:	d09e      	beq.n	1fc6 <f_write+0x76>
				fp->clust = clst;			/* Update current cluster */
    2088:	6163      	str	r3, [r4, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    208a:	6922      	ldr	r2, [r4, #16]
    208c:	b902      	cbnz	r2, 2090 <f_write+0x140>
    208e:	6123      	str	r3, [r4, #16]
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    2090:	6820      	ldr	r0, [r4, #0]
    2092:	6b02      	ldr	r2, [r0, #48]	; 0x30
    2094:	69a3      	ldr	r3, [r4, #24]
    2096:	429a      	cmp	r2, r3
    2098:	d099      	beq.n	1fce <f_write+0x7e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    209a:	f8d4 a000 	ldr.w	sl, [r4]
    209e:	6961      	ldr	r1, [r4, #20]
    20a0:	4650      	mov	r0, sl
    20a2:	4b1f      	ldr	r3, [pc, #124]	; (2120 <f_write+0x1d0>)
    20a4:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    20a6:	4605      	mov	r5, r0
    20a8:	2800      	cmp	r0, #0
    20aa:	d098      	beq.n	1fde <f_write+0x8e>
			sect += csect;
    20ac:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
    20ae:	ea5f 2b56 	movs.w	fp, r6, lsr #9
    20b2:	d0a7      	beq.n	2004 <f_write+0xb4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    20b4:	f89a 3002 	ldrb.w	r3, [sl, #2]
    20b8:	eb07 020b 	add.w	r2, r7, fp
    20bc:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    20be:	bf88      	it	hi
    20c0:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    20c4:	fa5f f38b 	uxtb.w	r3, fp
    20c8:	462a      	mov	r2, r5
    20ca:	4649      	mov	r1, r9
    20cc:	f89a 0001 	ldrb.w	r0, [sl, #1]
    20d0:	4f14      	ldr	r7, [pc, #80]	; (2124 <f_write+0x1d4>)
    20d2:	47b8      	blx	r7
    20d4:	2800      	cmp	r0, #0
    20d6:	d186      	bne.n	1fe6 <f_write+0x96>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    20d8:	6820      	ldr	r0, [r4, #0]
    20da:	6b01      	ldr	r1, [r0, #48]	; 0x30
    20dc:	1b49      	subs	r1, r1, r5
    20de:	458b      	cmp	fp, r1
    20e0:	d885      	bhi.n	1fee <f_write+0x9e>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    20e2:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
    20e6:	e7ad      	b.n	2044 <f_write+0xf4>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    20e8:	4650      	mov	r0, sl
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <f_write+0x1c4>)
    20ec:	4798      	blx	r3
    20ee:	b910      	cbnz	r0, 20f6 <f_write+0x1a6>
				fp->fs->winsect = sect;
    20f0:	6823      	ldr	r3, [r4, #0]
    20f2:	631d      	str	r5, [r3, #48]	; 0x30
    20f4:	e78a      	b.n	200c <f_write+0xbc>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    20f6:	2301      	movs	r3, #1
    20f8:	71e3      	strb	r3, [r4, #7]
    20fa:	9301      	str	r3, [sp, #4]
    20fc:	e740      	b.n	1f80 <f_write+0x30>
			ABORT(fp->fs, FR_DISK_ERR);
    20fe:	2301      	movs	r3, #1
    2100:	71e3      	strb	r3, [r4, #7]
    2102:	9301      	str	r3, [sp, #4]
    2104:	e73c      	b.n	1f80 <f_write+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2106:	9301      	str	r3, [sp, #4]
    2108:	e73a      	b.n	1f80 <f_write+0x30>
    210a:	bf00      	nop
    210c:	00000f99 	.word	0x00000f99
    2110:	00001745 	.word	0x00001745
    2114:	00000e59 	.word	0x00000e59
    2118:	00000d55 	.word	0x00000d55
    211c:	00000ec9 	.word	0x00000ec9
    2120:	00001459 	.word	0x00001459
    2124:	00000485 	.word	0x00000485

00002128 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2128:	b538      	push	{r3, r4, r5, lr}
    212a:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;

	res = validate(fp);					/* Check validity of the object */
    212c:	4b20      	ldr	r3, [pc, #128]	; (21b0 <f_sync+0x88>)
    212e:	4798      	blx	r3
	if (res == FR_OK) {
    2130:	4603      	mov	r3, r0
    2132:	b918      	cbnz	r0, 213c <f_sync+0x14>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    2134:	79a2      	ldrb	r2, [r4, #6]
    2136:	f012 0f20 	tst.w	r2, #32
    213a:	d101      	bne.n	2140 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    213c:	4618      	mov	r0, r3
    213e:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
    2140:	69e1      	ldr	r1, [r4, #28]
    2142:	6820      	ldr	r0, [r4, #0]
    2144:	4b1b      	ldr	r3, [pc, #108]	; (21b4 <f_sync+0x8c>)
    2146:	4798      	blx	r3
			if (res == FR_OK) {
    2148:	4603      	mov	r3, r0
    214a:	2800      	cmp	r0, #0
    214c:	d1f6      	bne.n	213c <f_sync+0x14>
				dir = fp->dir_ptr;
    214e:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2150:	7aeb      	ldrb	r3, [r5, #11]
    2152:	f043 0320 	orr.w	r3, r3, #32
    2156:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    2158:	68e3      	ldr	r3, [r4, #12]
    215a:	772b      	strb	r3, [r5, #28]
    215c:	89a3      	ldrh	r3, [r4, #12]
    215e:	0a1b      	lsrs	r3, r3, #8
    2160:	776b      	strb	r3, [r5, #29]
    2162:	89e3      	ldrh	r3, [r4, #14]
    2164:	77ab      	strb	r3, [r5, #30]
    2166:	7be3      	ldrb	r3, [r4, #15]
    2168:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
    216a:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusLO, cl);
    216c:	76ab      	strb	r3, [r5, #26]
    216e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    2172:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    2174:	0c1b      	lsrs	r3, r3, #16
    2176:	752b      	strb	r3, [r5, #20]
    2178:	0a1b      	lsrs	r3, r3, #8
    217a:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update modified time */
    217c:	4b0e      	ldr	r3, [pc, #56]	; (21b8 <f_sync+0x90>)
    217e:	4798      	blx	r3
				ST_DWORD(dir + DIR_WrtTime, tm);
    2180:	75a8      	strb	r0, [r5, #22]
    2182:	f3c0 2307 	ubfx	r3, r0, #8, #8
    2186:	75eb      	strb	r3, [r5, #23]
    2188:	0c03      	lsrs	r3, r0, #16
    218a:	762b      	strb	r3, [r5, #24]
    218c:	0e00      	lsrs	r0, r0, #24
    218e:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
    2190:	2300      	movs	r3, #0
    2192:	74ab      	strb	r3, [r5, #18]
    2194:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
    2196:	79a3      	ldrb	r3, [r4, #6]
    2198:	f023 0320 	bic.w	r3, r3, #32
    219c:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    219e:	6823      	ldr	r3, [r4, #0]
    21a0:	2201      	movs	r2, #1
    21a2:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
    21a4:	6820      	ldr	r0, [r4, #0]
    21a6:	4b05      	ldr	r3, [pc, #20]	; (21bc <f_sync+0x94>)
    21a8:	4798      	blx	r3
    21aa:	4603      	mov	r3, r0
    21ac:	e7c6      	b.n	213c <f_sync+0x14>
    21ae:	bf00      	nop
    21b0:	00000f99 	.word	0x00000f99
    21b4:	00000ec9 	.word	0x00000ec9
    21b8:	00000d09 	.word	0x00000d09
    21bc:	0000138d 	.word	0x0000138d

000021c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    21c0:	b510      	push	{r4, lr}
    21c2:	4604      	mov	r4, r0
	FRESULT res;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    21c4:	4b07      	ldr	r3, [pc, #28]	; (21e4 <f_close+0x24>)
    21c6:	4798      	blx	r3
	if (res == FR_OK)
    21c8:	4603      	mov	r3, r0
    21ca:	b108      	cbz	r0, 21d0 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    21cc:	4618      	mov	r0, r3
    21ce:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
    21d0:	4620      	mov	r0, r4
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <f_close+0x28>)
    21d4:	4798      	blx	r3
		if (res == FR_OK) {
    21d6:	4603      	mov	r3, r0
    21d8:	2800      	cmp	r0, #0
    21da:	d1f7      	bne.n	21cc <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
    21dc:	2200      	movs	r2, #0
    21de:	6022      	str	r2, [r4, #0]
    21e0:	e7f4      	b.n	21cc <f_close+0xc>
    21e2:	bf00      	nop
    21e4:	00002129 	.word	0x00002129
    21e8:	00000f99 	.word	0x00000f99

000021ec <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    21ec:	b510      	push	{r4, lr}
    21ee:	b086      	sub	sp, #24
    21f0:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;

	if (!dp) return FR_INVALID_OBJECT;
    21f2:	2800      	cmp	r0, #0
    21f4:	d02c      	beq.n	2250 <f_opendir+0x64>
    21f6:	4604      	mov	r4, r0

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
    21f8:	2200      	movs	r2, #0
    21fa:	a901      	add	r1, sp, #4
    21fc:	a805      	add	r0, sp, #20
    21fe:	4b1a      	ldr	r3, [pc, #104]	; (2268 <f_opendir+0x7c>)
    2200:	4798      	blx	r3
	if (res == FR_OK) {
    2202:	4603      	mov	r3, r0
    2204:	b110      	cbz	r0, 220c <f_opendir+0x20>
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    2206:	2200      	movs	r2, #0
    2208:	6022      	str	r2, [r4, #0]
    220a:	e022      	b.n	2252 <f_opendir+0x66>
		dp->fs = fs;
    220c:	9b05      	ldr	r3, [sp, #20]
    220e:	6023      	str	r3, [r4, #0]
		INIT_BUF(*dp);
    2210:	ab02      	add	r3, sp, #8
    2212:	61a3      	str	r3, [r4, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
    2214:	9901      	ldr	r1, [sp, #4]
    2216:	4620      	mov	r0, r4
    2218:	4b14      	ldr	r3, [pc, #80]	; (226c <f_opendir+0x80>)
    221a:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
    221c:	4603      	mov	r3, r0
    221e:	b9e8      	cbnz	r0, 225c <f_opendir+0x70>
			if (dp->dir) {						/* It is not the origin directory itself */
    2220:	6961      	ldr	r1, [r4, #20]
    2222:	b139      	cbz	r1, 2234 <f_opendir+0x48>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
    2224:	7acb      	ldrb	r3, [r1, #11]
    2226:	f013 0f10 	tst.w	r3, #16
    222a:	d00f      	beq.n	224c <f_opendir+0x60>
					dp->sclust = ld_clust(fs, dp->dir);
    222c:	9805      	ldr	r0, [sp, #20]
    222e:	4b10      	ldr	r3, [pc, #64]	; (2270 <f_opendir+0x84>)
    2230:	4798      	blx	r3
    2232:	60a0      	str	r0, [r4, #8]
				dp->id = fs->id;
    2234:	9b05      	ldr	r3, [sp, #20]
    2236:	88db      	ldrh	r3, [r3, #6]
    2238:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    223a:	2100      	movs	r1, #0
    223c:	4620      	mov	r0, r4
    223e:	4b0d      	ldr	r3, [pc, #52]	; (2274 <f_opendir+0x88>)
    2240:	4798      	blx	r3
    2242:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2244:	2804      	cmp	r0, #4
    2246:	d007      	beq.n	2258 <f_opendir+0x6c>
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    2248:	b11b      	cbz	r3, 2252 <f_opendir+0x66>
    224a:	e7dc      	b.n	2206 <f_opendir+0x1a>
					res = FR_NO_PATH;
    224c:	2305      	movs	r3, #5
    224e:	e7da      	b.n	2206 <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
    2250:	2309      	movs	r3, #9

	LEAVE_FF(fs, res);
}
    2252:	4618      	mov	r0, r3
    2254:	b006      	add	sp, #24
    2256:	bd10      	pop	{r4, pc}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2258:	2305      	movs	r3, #5
    225a:	e7d4      	b.n	2206 <f_opendir+0x1a>
    225c:	2804      	cmp	r0, #4
    225e:	bf14      	ite	ne
    2260:	4603      	movne	r3, r0
    2262:	2305      	moveq	r3, #5
    2264:	e7cf      	b.n	2206 <f_opendir+0x1a>
    2266:	bf00      	nop
    2268:	00000fd5 	.word	0x00000fd5
    226c:	00001941 	.word	0x00001941
    2270:	00000d77 	.word	0x00000d77
    2274:	00001555 	.word	0x00001555

00002278 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2278:	b570      	push	{r4, r5, r6, lr}
    227a:	b084      	sub	sp, #16
    227c:	4604      	mov	r4, r0
    227e:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;

	res = validate(dp);						/* Check validity of the object */
    2280:	4b14      	ldr	r3, [pc, #80]	; (22d4 <f_readdir+0x5c>)
    2282:	4798      	blx	r3
	if (res == FR_OK) {
    2284:	4605      	mov	r5, r0
    2286:	b950      	cbnz	r0, 229e <f_readdir+0x26>
		if (!fno) {
    2288:	b166      	cbz	r6, 22a4 <f_readdir+0x2c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dp);
    228a:	ab01      	add	r3, sp, #4
    228c:	61a3      	str	r3, [r4, #24]
			res = dir_read(dp, 0);			/* Read an item */
    228e:	2100      	movs	r1, #0
    2290:	4620      	mov	r0, r4
    2292:	4b11      	ldr	r3, [pc, #68]	; (22d8 <f_readdir+0x60>)
    2294:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of directory */
    2296:	2804      	cmp	r0, #4
    2298:	d00a      	beq.n	22b0 <f_readdir+0x38>
				dp->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    229a:	b158      	cbz	r0, 22b4 <f_readdir+0x3c>
			res = dir_read(dp, 0);			/* Read an item */
    229c:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
    229e:	4628      	mov	r0, r5
    22a0:	b004      	add	sp, #16
    22a2:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    22a4:	2100      	movs	r1, #0
    22a6:	4620      	mov	r0, r4
    22a8:	4b0c      	ldr	r3, [pc, #48]	; (22dc <f_readdir+0x64>)
    22aa:	4798      	blx	r3
    22ac:	4605      	mov	r5, r0
    22ae:	e7f6      	b.n	229e <f_readdir+0x26>
				dp->sect = 0;
    22b0:	2300      	movs	r3, #0
    22b2:	6123      	str	r3, [r4, #16]
				get_fileinfo(dp, fno);		/* Get the object information */
    22b4:	4631      	mov	r1, r6
    22b6:	4620      	mov	r0, r4
    22b8:	4b09      	ldr	r3, [pc, #36]	; (22e0 <f_readdir+0x68>)
    22ba:	4798      	blx	r3
				res = dir_next(dp, 0);		/* Increment index for next */
    22bc:	2100      	movs	r1, #0
    22be:	4620      	mov	r0, r4
    22c0:	4b08      	ldr	r3, [pc, #32]	; (22e4 <f_readdir+0x6c>)
    22c2:	4798      	blx	r3
				if (res == FR_NO_FILE) {
    22c4:	2804      	cmp	r0, #4
    22c6:	d001      	beq.n	22cc <f_readdir+0x54>
				res = dir_next(dp, 0);		/* Increment index for next */
    22c8:	4605      	mov	r5, r0
    22ca:	e7e8      	b.n	229e <f_readdir+0x26>
					dp->sect = 0;
    22cc:	2300      	movs	r3, #0
    22ce:	6123      	str	r3, [r4, #16]
    22d0:	e7e5      	b.n	229e <f_readdir+0x26>
    22d2:	bf00      	nop
    22d4:	00000f99 	.word	0x00000f99
    22d8:	00001c49 	.word	0x00001c49
    22dc:	00001555 	.word	0x00001555
    22e0:	00000d97 	.word	0x00000d97
    22e4:	00001811 	.word	0x00001811

000022e8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    22e8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    22ec:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    22ee:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    22f0:	f3bf 8f5f 	dmb	sy
    22f4:	4770      	bx	lr

000022f6 <atomic_leave_critical>:
    22f6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    22fa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    22fc:	f383 8810 	msr	PRIMASK, r3
    2300:	4770      	bx	lr
	...

00002304 <get_secs_in_month>:
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
	uint32_t sec_in_month = 0;

	if (leap_year(year)) {
    2304:	f010 0f03 	tst.w	r0, #3
    2308:	d110      	bne.n	232c <get_secs_in_month+0x28>
		switch (month) {
    230a:	3901      	subs	r1, #1
    230c:	290b      	cmp	r1, #11
    230e:	d81e      	bhi.n	234e <get_secs_in_month+0x4a>
    2310:	e8df f001 	tbb	[pc, r1]
    2314:	0a060806 	.word	0x0a060806
    2318:	06060a06 	.word	0x06060a06
    231c:	060a060a 	.word	0x060a060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2320:	480d      	ldr	r0, [pc, #52]	; (2358 <get_secs_in_month+0x54>)
    2322:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    2324:	480d      	ldr	r0, [pc, #52]	; (235c <get_secs_in_month+0x58>)
			break;
    2326:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2328:	480d      	ldr	r0, [pc, #52]	; (2360 <get_secs_in_month+0x5c>)
			break;
    232a:	4770      	bx	lr
		default:
			break;
		}
	} else {
		switch (month) {
    232c:	3901      	subs	r1, #1
    232e:	290b      	cmp	r1, #11
    2330:	d80f      	bhi.n	2352 <get_secs_in_month+0x4e>
    2332:	e8df f001 	tbb	[pc, r1]
    2336:	0806      	.short	0x0806
    2338:	0a060a06 	.word	0x0a060a06
    233c:	060a0606 	.word	0x060a0606
    2340:	060a      	.short	0x060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2342:	4805      	ldr	r0, [pc, #20]	; (2358 <get_secs_in_month+0x54>)
    2344:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2346:	4807      	ldr	r0, [pc, #28]	; (2364 <get_secs_in_month+0x60>)
			break;
    2348:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    234a:	4805      	ldr	r0, [pc, #20]	; (2360 <get_secs_in_month+0x5c>)
			break;
    234c:	4770      	bx	lr
	uint32_t sec_in_month = 0;
    234e:	2000      	movs	r0, #0
    2350:	4770      	bx	lr
    2352:	2000      	movs	r0, #0
			break;
		}
	}

	return sec_in_month;
}
    2354:	4770      	bx	lr
    2356:	bf00      	nop
    2358:	0028de80 	.word	0x0028de80
    235c:	00263b80 	.word	0x00263b80
    2360:	00278d00 	.word	0x00278d00
    2364:	0024ea00 	.word	0x0024ea00

00002368 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    236c:	460c      	mov	r4, r1
    236e:	4690      	mov	r8, r2
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2370:	6986      	ldr	r6, [r0, #24]

	tmp = ts;

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2372:	4927      	ldr	r1, [pc, #156]	; (2410 <convert_timestamp_to_datetime+0xa8>)
    2374:	4a27      	ldr	r2, [pc, #156]	; (2414 <convert_timestamp_to_datetime+0xac>)
    2376:	b2b7      	uxth	r7, r6
    2378:	f007 0303 	and.w	r3, r7, #3
    237c:	2b00      	cmp	r3, #0
    237e:	bf0c      	ite	eq
    2380:	460b      	moveq	r3, r1
    2382:	4613      	movne	r3, r2

		if (tmp >= sec_in_year) {
    2384:	429c      	cmp	r4, r3
    2386:	d302      	bcc.n	238e <convert_timestamp_to_datetime+0x26>
			tmp -= sec_in_year;
    2388:	1ae4      	subs	r4, r4, r3
			tmp_year++;
    238a:	3601      	adds	r6, #1
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    238c:	e7f3      	b.n	2376 <convert_timestamp_to_datetime+0xe>
    238e:	2501      	movs	r5, #1
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2390:	f8df 9088 	ldr.w	r9, [pc, #136]	; 241c <convert_timestamp_to_datetime+0xb4>
    2394:	4629      	mov	r1, r5
    2396:	4630      	mov	r0, r6
    2398:	47c8      	blx	r9

		if (tmp >= sec_in_month) {
    239a:	4284      	cmp	r4, r0
    239c:	d303      	bcc.n	23a6 <convert_timestamp_to_datetime+0x3e>
			tmp -= sec_in_month;
    239e:	1a24      	subs	r4, r4, r0
			tmp_month++;
    23a0:	3501      	adds	r5, #1
    23a2:	b2ed      	uxtb	r5, r5
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    23a4:	e7f6      	b.n	2394 <convert_timestamp_to_datetime+0x2c>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    23a6:	4b1c      	ldr	r3, [pc, #112]	; (2418 <convert_timestamp_to_datetime+0xb0>)
    23a8:	429c      	cmp	r4, r3
    23aa:	bf98      	it	ls
    23ac:	2101      	movls	r1, #1
    23ae:	d909      	bls.n	23c4 <convert_timestamp_to_datetime+0x5c>
    23b0:	2101      	movs	r1, #1
    23b2:	4b19      	ldr	r3, [pc, #100]	; (2418 <convert_timestamp_to_datetime+0xb0>)
			tmp -= SECS_IN_DAY;
    23b4:	f5a4 34a8 	sub.w	r4, r4, #86016	; 0x15000
    23b8:	f5a4 74c0 	sub.w	r4, r4, #384	; 0x180
			tmp_day++;
    23bc:	3101      	adds	r1, #1
    23be:	b2c9      	uxtb	r1, r1
		if (tmp >= SECS_IN_DAY) {
    23c0:	429c      	cmp	r4, r3
    23c2:	d8f7      	bhi.n	23b4 <convert_timestamp_to_datetime+0x4c>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    23c4:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    23c8:	bf38      	it	cc
    23ca:	2200      	movcc	r2, #0
    23cc:	d307      	bcc.n	23de <convert_timestamp_to_datetime+0x76>
    23ce:	2200      	movs	r2, #0
			tmp -= SECS_IN_HOUR;
    23d0:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
			tmp_hour++;
    23d4:	3201      	adds	r2, #1
    23d6:	b2d2      	uxtb	r2, r2
		if (tmp >= SECS_IN_HOUR) {
    23d8:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    23dc:	d2f8      	bcs.n	23d0 <convert_timestamp_to_datetime+0x68>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    23de:	2c3b      	cmp	r4, #59	; 0x3b
    23e0:	bf98      	it	ls
    23e2:	2300      	movls	r3, #0
    23e4:	d905      	bls.n	23f2 <convert_timestamp_to_datetime+0x8a>
    23e6:	2300      	movs	r3, #0
			tmp -= SECS_IN_MINUTE;
    23e8:	3c3c      	subs	r4, #60	; 0x3c
			tmp_minutes++;
    23ea:	3301      	adds	r3, #1
    23ec:	b2db      	uxtb	r3, r3
		if (tmp >= SECS_IN_MINUTE) {
    23ee:	2c3b      	cmp	r4, #59	; 0x3b
    23f0:	d8fa      	bhi.n	23e8 <convert_timestamp_to_datetime+0x80>
		} else {
			break;
		}
	}

	dt->date.year  = tmp_year;
    23f2:	f8a8 7006 	strh.w	r7, [r8, #6]
	dt->date.month = tmp_month;
    23f6:	f888 5005 	strb.w	r5, [r8, #5]
	dt->date.day   = tmp_day;
    23fa:	f888 1004 	strb.w	r1, [r8, #4]
	dt->time.hour  = tmp_hour;
    23fe:	f888 2002 	strb.w	r2, [r8, #2]
	dt->time.min   = tmp_minutes;
    2402:	f888 3001 	strb.w	r3, [r8, #1]
	dt->time.sec   = tmp;
    2406:	f888 4000 	strb.w	r4, [r8]

	return ERR_NONE;
}
    240a:	2000      	movs	r0, #0
    240c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2410:	01e28500 	.word	0x01e28500
    2414:	01e13380 	.word	0x01e13380
    2418:	0001517f 	.word	0x0001517f
    241c:	00002305 	.word	0x00002305

00002420 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2420:	b538      	push	{r3, r4, r5, lr}
    2422:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    2424:	4604      	mov	r4, r0
    2426:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    242a:	490b      	ldr	r1, [pc, #44]	; (2458 <calendar_init+0x38>)
    242c:	3000      	adds	r0, #0
    242e:	bf18      	it	ne
    2430:	2001      	movne	r0, #1
    2432:	4b0a      	ldr	r3, [pc, #40]	; (245c <calendar_init+0x3c>)
    2434:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2436:	6823      	ldr	r3, [r4, #0]
    2438:	42ab      	cmp	r3, r5
    243a:	d008      	beq.n	244e <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    243c:	b94b      	cbnz	r3, 2452 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    243e:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    2440:	4620      	mov	r0, r4
    2442:	4b07      	ldr	r3, [pc, #28]	; (2460 <calendar_init+0x40>)
    2444:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    2446:	f240 73b2 	movw	r3, #1970	; 0x7b2
    244a:	61a3      	str	r3, [r4, #24]

	return ret;
    244c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
    244e:	2000      	movs	r0, #0
    2450:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
    2452:	f06f 0011 	mvn.w	r0, #17
}
    2456:	bd38      	pop	{r3, r4, r5, pc}
    2458:	000090bc 	.word	0x000090bc
    245c:	00002951 	.word	0x00002951
    2460:	00002a9d 	.word	0x00002a9d

00002464 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    2464:	b538      	push	{r3, r4, r5, lr}
    2466:	460d      	mov	r5, r1
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2468:	4604      	mov	r4, r0
    246a:	f240 223b 	movw	r2, #571	; 0x23b
    246e:	4908      	ldr	r1, [pc, #32]	; (2490 <calendar_get_date_time+0x2c>)
    2470:	3000      	adds	r0, #0
    2472:	bf18      	it	ne
    2474:	2001      	movne	r0, #1
    2476:	4b07      	ldr	r3, [pc, #28]	; (2494 <calendar_get_date_time+0x30>)
    2478:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    247a:	4620      	mov	r0, r4
    247c:	4b06      	ldr	r3, [pc, #24]	; (2498 <calendar_get_date_time+0x34>)
    247e:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    2480:	462a      	mov	r2, r5
    2482:	4601      	mov	r1, r0
    2484:	4620      	mov	r0, r4
    2486:	4b05      	ldr	r3, [pc, #20]	; (249c <calendar_get_date_time+0x38>)
    2488:	4798      	blx	r3

	return ERR_NONE;
}
    248a:	2000      	movs	r0, #0
    248c:	bd38      	pop	{r3, r4, r5, pc}
    248e:	bf00      	nop
    2490:	000090bc 	.word	0x000090bc
    2494:	00002951 	.word	0x00002951
    2498:	00002b35 	.word	0x00002b35
    249c:	00002369 	.word	0x00002369

000024a0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    24a0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    24a2:	4b04      	ldr	r3, [pc, #16]	; (24b4 <delay_ms+0x14>)
    24a4:	681c      	ldr	r4, [r3, #0]
    24a6:	4b04      	ldr	r3, [pc, #16]	; (24b8 <delay_ms+0x18>)
    24a8:	4798      	blx	r3
    24aa:	4601      	mov	r1, r0
    24ac:	4620      	mov	r0, r4
    24ae:	4b03      	ldr	r3, [pc, #12]	; (24bc <delay_ms+0x1c>)
    24b0:	4798      	blx	r3
    24b2:	bd10      	pop	{r4, pc}
    24b4:	200007dc 	.word	0x200007dc
    24b8:	00002995 	.word	0x00002995
    24bc:	000029b1 	.word	0x000029b1

000024c0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    24c0:	b570      	push	{r4, r5, r6, lr}
    24c2:	460d      	mov	r5, r1
    24c4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    24c6:	4604      	mov	r4, r0
    24c8:	b160      	cbz	r0, 24e4 <io_write+0x24>
    24ca:	1c08      	adds	r0, r1, #0
    24cc:	bf18      	it	ne
    24ce:	2001      	movne	r0, #1
    24d0:	2234      	movs	r2, #52	; 0x34
    24d2:	4905      	ldr	r1, [pc, #20]	; (24e8 <io_write+0x28>)
    24d4:	4b05      	ldr	r3, [pc, #20]	; (24ec <io_write+0x2c>)
    24d6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    24d8:	6823      	ldr	r3, [r4, #0]
    24da:	4632      	mov	r2, r6
    24dc:	4629      	mov	r1, r5
    24de:	4620      	mov	r0, r4
    24e0:	4798      	blx	r3
}
    24e2:	bd70      	pop	{r4, r5, r6, pc}
    24e4:	2000      	movs	r0, #0
    24e6:	e7f3      	b.n	24d0 <io_write+0x10>
    24e8:	000090d8 	.word	0x000090d8
    24ec:	00002951 	.word	0x00002951

000024f0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	460d      	mov	r5, r1
    24f4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    24f6:	4604      	mov	r4, r0
    24f8:	b160      	cbz	r0, 2514 <io_read+0x24>
    24fa:	1c08      	adds	r0, r1, #0
    24fc:	bf18      	it	ne
    24fe:	2001      	movne	r0, #1
    2500:	223d      	movs	r2, #61	; 0x3d
    2502:	4905      	ldr	r1, [pc, #20]	; (2518 <io_read+0x28>)
    2504:	4b05      	ldr	r3, [pc, #20]	; (251c <io_read+0x2c>)
    2506:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    2508:	6863      	ldr	r3, [r4, #4]
    250a:	4632      	mov	r2, r6
    250c:	4629      	mov	r1, r5
    250e:	4620      	mov	r0, r4
    2510:	4798      	blx	r3
}
    2512:	bd70      	pop	{r4, r5, r6, pc}
    2514:	2000      	movs	r0, #0
    2516:	e7f3      	b.n	2500 <io_read+0x10>
    2518:	000090d8 	.word	0x000090d8
    251c:	00002951 	.word	0x00002951

00002520 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
    2520:	b538      	push	{r3, r4, r5, lr}
    2522:	460c      	mov	r4, r1
	ASSERT(mci && hw);
    2524:	4605      	mov	r5, r0
    2526:	b158      	cbz	r0, 2540 <mci_sync_init+0x20>
    2528:	1c08      	adds	r0, r1, #0
    252a:	bf18      	it	ne
    252c:	2001      	movne	r0, #1
    252e:	2231      	movs	r2, #49	; 0x31
    2530:	4904      	ldr	r1, [pc, #16]	; (2544 <mci_sync_init+0x24>)
    2532:	4b05      	ldr	r3, [pc, #20]	; (2548 <mci_sync_init+0x28>)
    2534:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
    2536:	4621      	mov	r1, r4
    2538:	4628      	mov	r0, r5
    253a:	4b04      	ldr	r3, [pc, #16]	; (254c <mci_sync_init+0x2c>)
    253c:	4798      	blx	r3
}
    253e:	bd38      	pop	{r3, r4, r5, pc}
    2540:	2000      	movs	r0, #0
    2542:	e7f4      	b.n	252e <mci_sync_init+0xe>
    2544:	000090ec 	.word	0x000090ec
    2548:	00002951 	.word	0x00002951
    254c:	00002ce5 	.word	0x00002ce5

00002550 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
    2550:	b5f0      	push	{r4, r5, r6, r7, lr}
    2552:	b083      	sub	sp, #12
    2554:	460d      	mov	r5, r1
    2556:	4616      	mov	r6, r2
    2558:	461f      	mov	r7, r3
	ASSERT(mci);
    255a:	4604      	mov	r4, r0
    255c:	2244      	movs	r2, #68	; 0x44
    255e:	4908      	ldr	r1, [pc, #32]	; (2580 <mci_sync_select_device+0x30>)
    2560:	3000      	adds	r0, #0
    2562:	bf18      	it	ne
    2564:	2001      	movne	r0, #1
    2566:	4b07      	ldr	r3, [pc, #28]	; (2584 <mci_sync_select_device+0x34>)
    2568:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
    256a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    256e:	9300      	str	r3, [sp, #0]
    2570:	463b      	mov	r3, r7
    2572:	4632      	mov	r2, r6
    2574:	4629      	mov	r1, r5
    2576:	4620      	mov	r0, r4
    2578:	4c03      	ldr	r4, [pc, #12]	; (2588 <mci_sync_select_device+0x38>)
    257a:	47a0      	blx	r4
}
    257c:	b003      	add	sp, #12
    257e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2580:	000090ec 	.word	0x000090ec
    2584:	00002951 	.word	0x00002951
    2588:	00002d4d 	.word	0x00002d4d

0000258c <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
    258c:	b538      	push	{r3, r4, r5, lr}
    258e:	460d      	mov	r5, r1
	ASSERT(mci);
    2590:	4604      	mov	r4, r0
    2592:	224d      	movs	r2, #77	; 0x4d
    2594:	4905      	ldr	r1, [pc, #20]	; (25ac <mci_sync_deselect_device+0x20>)
    2596:	3000      	adds	r0, #0
    2598:	bf18      	it	ne
    259a:	2001      	movne	r0, #1
    259c:	4b04      	ldr	r3, [pc, #16]	; (25b0 <mci_sync_deselect_device+0x24>)
    259e:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
    25a0:	4629      	mov	r1, r5
    25a2:	4620      	mov	r0, r4
    25a4:	4b03      	ldr	r3, [pc, #12]	; (25b4 <mci_sync_deselect_device+0x28>)
    25a6:	4798      	blx	r3
}
    25a8:	bd38      	pop	{r3, r4, r5, pc}
    25aa:	bf00      	nop
    25ac:	000090ec 	.word	0x000090ec
    25b0:	00002951 	.word	0x00002951
    25b4:	00002e61 	.word	0x00002e61

000025b8 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
    25b8:	b538      	push	{r3, r4, r5, lr}
    25ba:	460d      	mov	r5, r1
	ASSERT(mci);
    25bc:	4604      	mov	r4, r0
    25be:	2256      	movs	r2, #86	; 0x56
    25c0:	4905      	ldr	r1, [pc, #20]	; (25d8 <mci_sync_get_bus_width+0x20>)
    25c2:	3000      	adds	r0, #0
    25c4:	bf18      	it	ne
    25c6:	2001      	movne	r0, #1
    25c8:	4b04      	ldr	r3, [pc, #16]	; (25dc <mci_sync_get_bus_width+0x24>)
    25ca:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
    25cc:	4629      	mov	r1, r5
    25ce:	4620      	mov	r0, r4
    25d0:	4b03      	ldr	r3, [pc, #12]	; (25e0 <mci_sync_get_bus_width+0x28>)
    25d2:	4798      	blx	r3
}
    25d4:	bd38      	pop	{r3, r4, r5, pc}
    25d6:	bf00      	nop
    25d8:	000090ec 	.word	0x000090ec
    25dc:	00002951 	.word	0x00002951
    25e0:	00002e65 	.word	0x00002e65

000025e4 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    25e4:	b510      	push	{r4, lr}
	ASSERT(mci);
    25e6:	4604      	mov	r4, r0
    25e8:	2260      	movs	r2, #96	; 0x60
    25ea:	4905      	ldr	r1, [pc, #20]	; (2600 <mci_sync_is_high_speed_capable+0x1c>)
    25ec:	3000      	adds	r0, #0
    25ee:	bf18      	it	ne
    25f0:	2001      	movne	r0, #1
    25f2:	4b04      	ldr	r3, [pc, #16]	; (2604 <mci_sync_is_high_speed_capable+0x20>)
    25f4:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    25f6:	4620      	mov	r0, r4
    25f8:	4b03      	ldr	r3, [pc, #12]	; (2608 <mci_sync_is_high_speed_capable+0x24>)
    25fa:	4798      	blx	r3
}
    25fc:	bd10      	pop	{r4, pc}
    25fe:	bf00      	nop
    2600:	000090ec 	.word	0x000090ec
    2604:	00002951 	.word	0x00002951
    2608:	00002e6f 	.word	0x00002e6f

0000260c <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    260c:	b510      	push	{r4, lr}
	ASSERT(mci);
    260e:	4604      	mov	r4, r0
    2610:	2269      	movs	r2, #105	; 0x69
    2612:	4905      	ldr	r1, [pc, #20]	; (2628 <mci_sync_send_clock+0x1c>)
    2614:	3000      	adds	r0, #0
    2616:	bf18      	it	ne
    2618:	2001      	movne	r0, #1
    261a:	4b04      	ldr	r3, [pc, #16]	; (262c <mci_sync_send_clock+0x20>)
    261c:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    261e:	4620      	mov	r0, r4
    2620:	4b03      	ldr	r3, [pc, #12]	; (2630 <mci_sync_send_clock+0x24>)
    2622:	4798      	blx	r3
    2624:	bd10      	pop	{r4, pc}
    2626:	bf00      	nop
    2628:	000090ec 	.word	0x000090ec
    262c:	00002951 	.word	0x00002951
    2630:	00002e79 	.word	0x00002e79

00002634 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	460d      	mov	r5, r1
    2638:	4616      	mov	r6, r2
	ASSERT(mci);
    263a:	4604      	mov	r4, r0
    263c:	2272      	movs	r2, #114	; 0x72
    263e:	4906      	ldr	r1, [pc, #24]	; (2658 <mci_sync_send_cmd+0x24>)
    2640:	3000      	adds	r0, #0
    2642:	bf18      	it	ne
    2644:	2001      	movne	r0, #1
    2646:	4b05      	ldr	r3, [pc, #20]	; (265c <mci_sync_send_cmd+0x28>)
    2648:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    264a:	4632      	mov	r2, r6
    264c:	4629      	mov	r1, r5
    264e:	4620      	mov	r0, r4
    2650:	4b03      	ldr	r3, [pc, #12]	; (2660 <mci_sync_send_cmd+0x2c>)
    2652:	4798      	blx	r3
}
    2654:	bd70      	pop	{r4, r5, r6, pc}
    2656:	bf00      	nop
    2658:	000090ec 	.word	0x000090ec
    265c:	00002951 	.word	0x00002951
    2660:	00002eb9 	.word	0x00002eb9

00002664 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    2664:	b510      	push	{r4, lr}
	ASSERT(mci);
    2666:	4604      	mov	r4, r0
    2668:	227b      	movs	r2, #123	; 0x7b
    266a:	4905      	ldr	r1, [pc, #20]	; (2680 <mci_sync_get_response+0x1c>)
    266c:	3000      	adds	r0, #0
    266e:	bf18      	it	ne
    2670:	2001      	movne	r0, #1
    2672:	4b04      	ldr	r3, [pc, #16]	; (2684 <mci_sync_get_response+0x20>)
    2674:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    2676:	4620      	mov	r0, r4
    2678:	4b03      	ldr	r3, [pc, #12]	; (2688 <mci_sync_get_response+0x24>)
    267a:	4798      	blx	r3
}
    267c:	bd10      	pop	{r4, pc}
    267e:	bf00      	nop
    2680:	000090ec 	.word	0x000090ec
    2684:	00002951 	.word	0x00002951
    2688:	00002f0d 	.word	0x00002f0d

0000268c <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    268c:	b538      	push	{r3, r4, r5, lr}
    268e:	460c      	mov	r4, r1
	ASSERT(mci && response);
    2690:	4605      	mov	r5, r0
    2692:	b158      	cbz	r0, 26ac <mci_sync_get_response_128+0x20>
    2694:	1c08      	adds	r0, r1, #0
    2696:	bf18      	it	ne
    2698:	2001      	movne	r0, #1
    269a:	2284      	movs	r2, #132	; 0x84
    269c:	4904      	ldr	r1, [pc, #16]	; (26b0 <mci_sync_get_response_128+0x24>)
    269e:	4b05      	ldr	r3, [pc, #20]	; (26b4 <mci_sync_get_response_128+0x28>)
    26a0:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    26a2:	4621      	mov	r1, r4
    26a4:	4628      	mov	r0, r5
    26a6:	4b04      	ldr	r3, [pc, #16]	; (26b8 <mci_sync_get_response_128+0x2c>)
    26a8:	4798      	blx	r3
    26aa:	bd38      	pop	{r3, r4, r5, pc}
    26ac:	2000      	movs	r0, #0
    26ae:	e7f4      	b.n	269a <mci_sync_get_response_128+0xe>
    26b0:	000090ec 	.word	0x000090ec
    26b4:	00002951 	.word	0x00002951
    26b8:	00002f39 	.word	0x00002f39

000026bc <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    26bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26be:	b083      	sub	sp, #12
    26c0:	460d      	mov	r5, r1
    26c2:	4616      	mov	r6, r2
    26c4:	461f      	mov	r7, r3
	ASSERT(mci);
    26c6:	4604      	mov	r4, r0
    26c8:	2290      	movs	r2, #144	; 0x90
    26ca:	490a      	ldr	r1, [pc, #40]	; (26f4 <mci_sync_adtc_start+0x38>)
    26cc:	3000      	adds	r0, #0
    26ce:	bf18      	it	ne
    26d0:	2001      	movne	r0, #1
    26d2:	4b09      	ldr	r3, [pc, #36]	; (26f8 <mci_sync_adtc_start+0x3c>)
    26d4:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    26d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    26da:	9301      	str	r3, [sp, #4]
    26dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    26e0:	9300      	str	r3, [sp, #0]
    26e2:	463b      	mov	r3, r7
    26e4:	4632      	mov	r2, r6
    26e6:	4629      	mov	r1, r5
    26e8:	4620      	mov	r0, r4
    26ea:	4c04      	ldr	r4, [pc, #16]	; (26fc <mci_sync_adtc_start+0x40>)
    26ec:	47a0      	blx	r4
}
    26ee:	b003      	add	sp, #12
    26f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26f2:	bf00      	nop
    26f4:	000090ec 	.word	0x000090ec
    26f8:	00002951 	.word	0x00002951
    26fc:	00002f9d 	.word	0x00002f9d

00002700 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    2700:	b570      	push	{r4, r5, r6, lr}
    2702:	460c      	mov	r4, r1
    2704:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    2706:	4605      	mov	r5, r0
    2708:	b160      	cbz	r0, 2724 <mci_sync_start_read_blocks+0x24>
    270a:	1c08      	adds	r0, r1, #0
    270c:	bf18      	it	ne
    270e:	2001      	movne	r0, #1
    2710:	22b5      	movs	r2, #181	; 0xb5
    2712:	4905      	ldr	r1, [pc, #20]	; (2728 <mci_sync_start_read_blocks+0x28>)
    2714:	4b05      	ldr	r3, [pc, #20]	; (272c <mci_sync_start_read_blocks+0x2c>)
    2716:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    2718:	4632      	mov	r2, r6
    271a:	4621      	mov	r1, r4
    271c:	4628      	mov	r0, r5
    271e:	4b04      	ldr	r3, [pc, #16]	; (2730 <mci_sync_start_read_blocks+0x30>)
    2720:	4798      	blx	r3
}
    2722:	bd70      	pop	{r4, r5, r6, pc}
    2724:	2000      	movs	r0, #0
    2726:	e7f3      	b.n	2710 <mci_sync_start_read_blocks+0x10>
    2728:	000090ec 	.word	0x000090ec
    272c:	00002951 	.word	0x00002951
    2730:	00003211 	.word	0x00003211

00002734 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	460c      	mov	r4, r1
    2738:	4616      	mov	r6, r2
	ASSERT(mci && src);
    273a:	4605      	mov	r5, r0
    273c:	b160      	cbz	r0, 2758 <mci_sync_start_write_blocks+0x24>
    273e:	1c08      	adds	r0, r1, #0
    2740:	bf18      	it	ne
    2742:	2001      	movne	r0, #1
    2744:	22be      	movs	r2, #190	; 0xbe
    2746:	4905      	ldr	r1, [pc, #20]	; (275c <mci_sync_start_write_blocks+0x28>)
    2748:	4b05      	ldr	r3, [pc, #20]	; (2760 <mci_sync_start_write_blocks+0x2c>)
    274a:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    274c:	4632      	mov	r2, r6
    274e:	4621      	mov	r1, r4
    2750:	4628      	mov	r0, r5
    2752:	4b04      	ldr	r3, [pc, #16]	; (2764 <mci_sync_start_write_blocks+0x30>)
    2754:	4798      	blx	r3
}
    2756:	bd70      	pop	{r4, r5, r6, pc}
    2758:	2000      	movs	r0, #0
    275a:	e7f3      	b.n	2744 <mci_sync_start_write_blocks+0x10>
    275c:	000090ec 	.word	0x000090ec
    2760:	00002951 	.word	0x00002951
    2764:	00003295 	.word	0x00003295

00002768 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    2768:	b510      	push	{r4, lr}
	ASSERT(mci);
    276a:	4604      	mov	r4, r0
    276c:	22c7      	movs	r2, #199	; 0xc7
    276e:	4905      	ldr	r1, [pc, #20]	; (2784 <mci_sync_wait_end_of_read_blocks+0x1c>)
    2770:	3000      	adds	r0, #0
    2772:	bf18      	it	ne
    2774:	2001      	movne	r0, #1
    2776:	4b04      	ldr	r3, [pc, #16]	; (2788 <mci_sync_wait_end_of_read_blocks+0x20>)
    2778:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    277a:	4620      	mov	r0, r4
    277c:	4b03      	ldr	r3, [pc, #12]	; (278c <mci_sync_wait_end_of_read_blocks+0x24>)
    277e:	4798      	blx	r3
}
    2780:	bd10      	pop	{r4, pc}
    2782:	bf00      	nop
    2784:	000090ec 	.word	0x000090ec
    2788:	00002951 	.word	0x00002951
    278c:	00003319 	.word	0x00003319

00002790 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    2790:	b510      	push	{r4, lr}
	ASSERT(mci);
    2792:	4604      	mov	r4, r0
    2794:	22d0      	movs	r2, #208	; 0xd0
    2796:	4905      	ldr	r1, [pc, #20]	; (27ac <mci_sync_wait_end_of_write_blocks+0x1c>)
    2798:	3000      	adds	r0, #0
    279a:	bf18      	it	ne
    279c:	2001      	movne	r0, #1
    279e:	4b04      	ldr	r3, [pc, #16]	; (27b0 <mci_sync_wait_end_of_write_blocks+0x20>)
    27a0:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    27a2:	4620      	mov	r0, r4
    27a4:	4b03      	ldr	r3, [pc, #12]	; (27b4 <mci_sync_wait_end_of_write_blocks+0x24>)
    27a6:	4798      	blx	r3
}
    27a8:	bd10      	pop	{r4, pc}
    27aa:	bf00      	nop
    27ac:	000090ec 	.word	0x000090ec
    27b0:	00002951 	.word	0x00002951
    27b4:	00003341 	.word	0x00003341

000027b8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    27b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    27bc:	460f      	mov	r7, r1
    27be:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    27c0:	4604      	mov	r4, r0
    27c2:	b328      	cbz	r0, 2810 <usart_sync_write+0x58>
    27c4:	b331      	cbz	r1, 2814 <usart_sync_write+0x5c>
    27c6:	1c10      	adds	r0, r2, #0
    27c8:	bf18      	it	ne
    27ca:	2001      	movne	r0, #1
    27cc:	22f1      	movs	r2, #241	; 0xf1
    27ce:	4912      	ldr	r1, [pc, #72]	; (2818 <usart_sync_write+0x60>)
    27d0:	4b12      	ldr	r3, [pc, #72]	; (281c <usart_sync_write+0x64>)
    27d2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    27d4:	3408      	adds	r4, #8
    27d6:	4d12      	ldr	r5, [pc, #72]	; (2820 <usart_sync_write+0x68>)
    27d8:	4620      	mov	r0, r4
    27da:	47a8      	blx	r5
    27dc:	2800      	cmp	r0, #0
    27de:	d0fb      	beq.n	27d8 <usart_sync_write+0x20>
    27e0:	3f01      	subs	r7, #1
    27e2:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    27e4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2828 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    27e8:	4d0d      	ldr	r5, [pc, #52]	; (2820 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    27ea:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    27ee:	4620      	mov	r0, r4
    27f0:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    27f2:	4620      	mov	r0, r4
    27f4:	47a8      	blx	r5
    27f6:	2800      	cmp	r0, #0
    27f8:	d0fb      	beq.n	27f2 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    27fa:	3601      	adds	r6, #1
    27fc:	4546      	cmp	r6, r8
    27fe:	d3f4      	bcc.n	27ea <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    2800:	4d08      	ldr	r5, [pc, #32]	; (2824 <usart_sync_write+0x6c>)
    2802:	4620      	mov	r0, r4
    2804:	47a8      	blx	r5
    2806:	2800      	cmp	r0, #0
    2808:	d0fb      	beq.n	2802 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    280a:	4630      	mov	r0, r6
    280c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2810:	2000      	movs	r0, #0
    2812:	e7db      	b.n	27cc <usart_sync_write+0x14>
    2814:	2000      	movs	r0, #0
    2816:	e7d9      	b.n	27cc <usart_sync_write+0x14>
    2818:	00009108 	.word	0x00009108
    281c:	00002951 	.word	0x00002951
    2820:	00003517 	.word	0x00003517
    2824:	00003521 	.word	0x00003521
    2828:	00003509 	.word	0x00003509

0000282c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    282c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2830:	460f      	mov	r7, r1
    2832:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2834:	4604      	mov	r4, r0
    2836:	b1e0      	cbz	r0, 2872 <usart_sync_read+0x46>
    2838:	b1e9      	cbz	r1, 2876 <usart_sync_read+0x4a>
    283a:	1c10      	adds	r0, r2, #0
    283c:	bf18      	it	ne
    283e:	2001      	movne	r0, #1
    2840:	f44f 7286 	mov.w	r2, #268	; 0x10c
    2844:	490d      	ldr	r1, [pc, #52]	; (287c <usart_sync_read+0x50>)
    2846:	4b0e      	ldr	r3, [pc, #56]	; (2880 <usart_sync_read+0x54>)
    2848:	4798      	blx	r3
    284a:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    284c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    284e:	3408      	adds	r4, #8
    2850:	4d0c      	ldr	r5, [pc, #48]	; (2884 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2852:	f8df 9034 	ldr.w	r9, [pc, #52]	; 2888 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    2856:	4620      	mov	r0, r4
    2858:	47a8      	blx	r5
    285a:	2800      	cmp	r0, #0
    285c:	d0fb      	beq.n	2856 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    285e:	4620      	mov	r0, r4
    2860:	47c8      	blx	r9
    2862:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    2866:	3601      	adds	r6, #1
    2868:	4546      	cmp	r6, r8
    286a:	d3f4      	bcc.n	2856 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    286c:	4630      	mov	r0, r6
    286e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2872:	2000      	movs	r0, #0
    2874:	e7e4      	b.n	2840 <usart_sync_read+0x14>
    2876:	2000      	movs	r0, #0
    2878:	e7e2      	b.n	2840 <usart_sync_read+0x14>
    287a:	bf00      	nop
    287c:	00009108 	.word	0x00009108
    2880:	00002951 	.word	0x00002951
    2884:	0000352b 	.word	0x0000352b
    2888:	0000350f 	.word	0x0000350f

0000288c <usart_sync_init>:
{
    288c:	b538      	push	{r3, r4, r5, lr}
    288e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2890:	4604      	mov	r4, r0
    2892:	b198      	cbz	r0, 28bc <usart_sync_init+0x30>
    2894:	1c08      	adds	r0, r1, #0
    2896:	bf18      	it	ne
    2898:	2001      	movne	r0, #1
    289a:	2234      	movs	r2, #52	; 0x34
    289c:	4908      	ldr	r1, [pc, #32]	; (28c0 <usart_sync_init+0x34>)
    289e:	4b09      	ldr	r3, [pc, #36]	; (28c4 <usart_sync_init+0x38>)
    28a0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    28a2:	4629      	mov	r1, r5
    28a4:	f104 0008 	add.w	r0, r4, #8
    28a8:	4b07      	ldr	r3, [pc, #28]	; (28c8 <usart_sync_init+0x3c>)
    28aa:	4798      	blx	r3
	if (init_status) {
    28ac:	4603      	mov	r3, r0
    28ae:	b918      	cbnz	r0, 28b8 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    28b0:	4a06      	ldr	r2, [pc, #24]	; (28cc <usart_sync_init+0x40>)
    28b2:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    28b4:	4a06      	ldr	r2, [pc, #24]	; (28d0 <usart_sync_init+0x44>)
    28b6:	6022      	str	r2, [r4, #0]
}
    28b8:	4618      	mov	r0, r3
    28ba:	bd38      	pop	{r3, r4, r5, pc}
    28bc:	2000      	movs	r0, #0
    28be:	e7ec      	b.n	289a <usart_sync_init+0xe>
    28c0:	00009108 	.word	0x00009108
    28c4:	00002951 	.word	0x00002951
    28c8:	000034c9 	.word	0x000034c9
    28cc:	0000282d 	.word	0x0000282d
    28d0:	000027b9 	.word	0x000027b9

000028d4 <usart_sync_enable>:
{
    28d4:	b510      	push	{r4, lr}
	ASSERT(descr);
    28d6:	4604      	mov	r4, r0
    28d8:	2253      	movs	r2, #83	; 0x53
    28da:	4906      	ldr	r1, [pc, #24]	; (28f4 <usart_sync_enable+0x20>)
    28dc:	3000      	adds	r0, #0
    28de:	bf18      	it	ne
    28e0:	2001      	movne	r0, #1
    28e2:	4b05      	ldr	r3, [pc, #20]	; (28f8 <usart_sync_enable+0x24>)
    28e4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    28e6:	f104 0008 	add.w	r0, r4, #8
    28ea:	4b04      	ldr	r3, [pc, #16]	; (28fc <usart_sync_enable+0x28>)
    28ec:	4798      	blx	r3
}
    28ee:	2000      	movs	r0, #0
    28f0:	bd10      	pop	{r4, pc}
    28f2:	bf00      	nop
    28f4:	00009108 	.word	0x00009108
    28f8:	00002951 	.word	0x00002951
    28fc:	000034f5 	.word	0x000034f5

00002900 <usart_sync_get_io_descriptor>:
{
    2900:	b538      	push	{r3, r4, r5, lr}
    2902:	460c      	mov	r4, r1
	ASSERT(descr && io);
    2904:	4605      	mov	r5, r0
    2906:	b148      	cbz	r0, 291c <usart_sync_get_io_descriptor+0x1c>
    2908:	1c08      	adds	r0, r1, #0
    290a:	bf18      	it	ne
    290c:	2001      	movne	r0, #1
    290e:	2269      	movs	r2, #105	; 0x69
    2910:	4903      	ldr	r1, [pc, #12]	; (2920 <usart_sync_get_io_descriptor+0x20>)
    2912:	4b04      	ldr	r3, [pc, #16]	; (2924 <usart_sync_get_io_descriptor+0x24>)
    2914:	4798      	blx	r3
	*io = &descr->io;
    2916:	6025      	str	r5, [r4, #0]
}
    2918:	2000      	movs	r0, #0
    291a:	bd38      	pop	{r3, r4, r5, pc}
    291c:	2000      	movs	r0, #0
    291e:	e7f6      	b.n	290e <usart_sync_get_io_descriptor+0xe>
    2920:	00009108 	.word	0x00009108
    2924:	00002951 	.word	0x00002951

00002928 <usart_sync_is_rx_not_empty>:
{
    2928:	b510      	push	{r4, lr}
	ASSERT(descr);
    292a:	4604      	mov	r4, r0
    292c:	22d7      	movs	r2, #215	; 0xd7
    292e:	4905      	ldr	r1, [pc, #20]	; (2944 <usart_sync_is_rx_not_empty+0x1c>)
    2930:	3000      	adds	r0, #0
    2932:	bf18      	it	ne
    2934:	2001      	movne	r0, #1
    2936:	4b04      	ldr	r3, [pc, #16]	; (2948 <usart_sync_is_rx_not_empty+0x20>)
    2938:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
    293a:	f104 0008 	add.w	r0, r4, #8
    293e:	4b03      	ldr	r3, [pc, #12]	; (294c <usart_sync_is_rx_not_empty+0x24>)
    2940:	4798      	blx	r3
}
    2942:	bd10      	pop	{r4, pc}
    2944:	00009108 	.word	0x00009108
    2948:	00002951 	.word	0x00002951
    294c:	0000352b 	.word	0x0000352b

00002950 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2950:	b900      	cbnz	r0, 2954 <assert+0x4>
		__asm("BKPT #0");
    2952:	be00      	bkpt	0x0000
    2954:	4770      	bx	lr
	...

00002958 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2958:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    295a:	4a06      	ldr	r2, [pc, #24]	; (2974 <_sbrk+0x1c>)
    295c:	6812      	ldr	r2, [r2, #0]
    295e:	b122      	cbz	r2, 296a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2960:	4a04      	ldr	r2, [pc, #16]	; (2974 <_sbrk+0x1c>)
    2962:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2964:	4403      	add	r3, r0
    2966:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2968:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    296a:	4903      	ldr	r1, [pc, #12]	; (2978 <_sbrk+0x20>)
    296c:	4a01      	ldr	r2, [pc, #4]	; (2974 <_sbrk+0x1c>)
    296e:	6011      	str	r1, [r2, #0]
    2970:	e7f6      	b.n	2960 <_sbrk+0x8>
    2972:	bf00      	nop
    2974:	200007e0 	.word	0x200007e0
    2978:	200112d8 	.word	0x200112d8

0000297c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    297c:	f04f 30ff 	mov.w	r0, #4294967295
    2980:	4770      	bx	lr

00002982 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    2982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2986:	604b      	str	r3, [r1, #4]

	return 0;
}
    2988:	2000      	movs	r0, #0
    298a:	4770      	bx	lr

0000298c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    298c:	2001      	movs	r0, #1
    298e:	4770      	bx	lr

00002990 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    2990:	2000      	movs	r0, #0
    2992:	4770      	bx	lr

00002994 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    2994:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    2998:	00c3      	lsls	r3, r0, #3
    299a:	3302      	adds	r3, #2
    299c:	4803      	ldr	r0, [pc, #12]	; (29ac <_get_cycles_for_ms+0x18>)
    299e:	fba0 2303 	umull	r2, r3, r0, r3
    29a2:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    29a4:	2064      	movs	r0, #100	; 0x64
    29a6:	fb00 f003 	mul.w	r0, r0, r3
    29aa:	4770      	bx	lr
    29ac:	aaaaaaab 	.word	0xaaaaaaab

000029b0 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    29b0:	3901      	subs	r1, #1
    29b2:	d8fd      	bhi.n	29b0 <_delay_cycles>
    29b4:	4770      	bx	lr
    29b6:	bf00      	nop

000029b8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    29b8:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    29ba:	4a08      	ldr	r2, [pc, #32]	; (29dc <_init_chip+0x24>)
    29bc:	8813      	ldrh	r3, [r2, #0]
    29be:	b29b      	uxth	r3, r3
    29c0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    29c2:	4b07      	ldr	r3, [pc, #28]	; (29e0 <_init_chip+0x28>)
    29c4:	4798      	blx	r3
	_oscctrl_init_sources();
    29c6:	4b07      	ldr	r3, [pc, #28]	; (29e4 <_init_chip+0x2c>)
    29c8:	4798      	blx	r3
	_mclk_init();
    29ca:	4b07      	ldr	r3, [pc, #28]	; (29e8 <_init_chip+0x30>)
    29cc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    29ce:	4b07      	ldr	r3, [pc, #28]	; (29ec <_init_chip+0x34>)
    29d0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    29d2:	f640 70ff 	movw	r0, #4095	; 0xfff
    29d6:	4b06      	ldr	r3, [pc, #24]	; (29f0 <_init_chip+0x38>)
    29d8:	4798      	blx	r3
    29da:	bd08      	pop	{r3, pc}
    29dc:	41004000 	.word	0x41004000
    29e0:	00002a25 	.word	0x00002a25
    29e4:	00002a39 	.word	0x00002a39
    29e8:	00002a19 	.word	0x00002a19
    29ec:	00002a55 	.word	0x00002a55
    29f0:	000029f5 	.word	0x000029f5

000029f4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    29f4:	f010 0f01 	tst.w	r0, #1
    29f8:	d008      	beq.n	2a0c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    29fa:	4a05      	ldr	r2, [pc, #20]	; (2a10 <_gclk_init_generators_by_fref+0x1c>)
    29fc:	4b05      	ldr	r3, [pc, #20]	; (2a14 <_gclk_init_generators_by_fref+0x20>)
    29fe:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2a00:	4619      	mov	r1, r3
    2a02:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2a06:	684b      	ldr	r3, [r1, #4]
    2a08:	4213      	tst	r3, r2
    2a0a:	d1fc      	bne.n	2a06 <_gclk_init_generators_by_fref+0x12>
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop
    2a10:	00010101 	.word	0x00010101
    2a14:	40001c00 	.word	0x40001c00

00002a18 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2a18:	2201      	movs	r2, #1
    2a1a:	4b01      	ldr	r3, [pc, #4]	; (2a20 <_mclk_init+0x8>)
    2a1c:	715a      	strb	r2, [r3, #5]
    2a1e:	4770      	bx	lr
    2a20:	40000800 	.word	0x40000800

00002a24 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2a24:	4b03      	ldr	r3, [pc, #12]	; (2a34 <_osc32kctrl_init_sources+0x10>)
    2a26:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2a28:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2a2c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2a2e:	2201      	movs	r2, #1
    2a30:	741a      	strb	r2, [r3, #16]
    2a32:	4770      	bx	lr
    2a34:	40001400 	.word	0x40001400

00002a38 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    2a38:	4a04      	ldr	r2, [pc, #16]	; (2a4c <_oscctrl_init_sources+0x14>)
    2a3a:	4b05      	ldr	r3, [pc, #20]	; (2a50 <_oscctrl_init_sources+0x18>)
    2a3c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2a3e:	461a      	mov	r2, r3
    2a40:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    2a42:	f013 0f02 	tst.w	r3, #2
    2a46:	d0fb      	beq.n	2a40 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2a48:	4770      	bx	lr
    2a4a:	bf00      	nop
    2a4c:	03002606 	.word	0x03002606
    2a50:	40001000 	.word	0x40001000

00002a54 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2a54:	4770      	bx	lr
	...

00002a58 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2a58:	b500      	push	{lr}
    2a5a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2a5c:	4b0d      	ldr	r3, [pc, #52]	; (2a94 <RAMECC_Handler+0x3c>)
    2a5e:	789b      	ldrb	r3, [r3, #2]
    2a60:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2a62:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2a64:	9b01      	ldr	r3, [sp, #4]
    2a66:	f013 0f02 	tst.w	r3, #2
    2a6a:	d006      	beq.n	2a7a <RAMECC_Handler+0x22>
    2a6c:	4b0a      	ldr	r3, [pc, #40]	; (2a98 <RAMECC_Handler+0x40>)
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	b11b      	cbz	r3, 2a7a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2a72:	4a08      	ldr	r2, [pc, #32]	; (2a94 <RAMECC_Handler+0x3c>)
    2a74:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2a76:	4798      	blx	r3
    2a78:	e009      	b.n	2a8e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2a7a:	9b01      	ldr	r3, [sp, #4]
    2a7c:	f013 0f01 	tst.w	r3, #1
    2a80:	d005      	beq.n	2a8e <RAMECC_Handler+0x36>
    2a82:	4b05      	ldr	r3, [pc, #20]	; (2a98 <RAMECC_Handler+0x40>)
    2a84:	685b      	ldr	r3, [r3, #4]
    2a86:	b113      	cbz	r3, 2a8e <RAMECC_Handler+0x36>
    2a88:	4a02      	ldr	r2, [pc, #8]	; (2a94 <RAMECC_Handler+0x3c>)
    2a8a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2a8c:	4798      	blx	r3
	} else {
		return;
	}
}
    2a8e:	b003      	add	sp, #12
    2a90:	f85d fb04 	ldr.w	pc, [sp], #4
    2a94:	41020000 	.word	0x41020000
    2a98:	200012ac 	.word	0x200012ac

00002a9c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2a9c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2a9e:	4604      	mov	r4, r0
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d03e      	beq.n	2b22 <_calendar_init+0x86>
    2aa4:	6800      	ldr	r0, [r0, #0]
    2aa6:	3000      	adds	r0, #0
    2aa8:	bf18      	it	ne
    2aaa:	2001      	movne	r0, #1
    2aac:	222f      	movs	r2, #47	; 0x2f
    2aae:	491e      	ldr	r1, [pc, #120]	; (2b28 <_calendar_init+0x8c>)
    2ab0:	4b1e      	ldr	r3, [pc, #120]	; (2b2c <_calendar_init+0x90>)
    2ab2:	4798      	blx	r3

	_rtc_dev = dev;
    2ab4:	4b1e      	ldr	r3, [pc, #120]	; (2b30 <_calendar_init+0x94>)
    2ab6:	601c      	str	r4, [r3, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2ab8:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2aba:	f248 0103 	movw	r1, #32771	; 0x8003
    2abe:	6913      	ldr	r3, [r2, #16]
    2ac0:	420b      	tst	r3, r1
    2ac2:	d1fc      	bne.n	2abe <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2ac4:	8813      	ldrh	r3, [r2, #0]
    2ac6:	f013 0f02 	tst.w	r3, #2
    2aca:	d00f      	beq.n	2aec <_calendar_init+0x50>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2acc:	8813      	ldrh	r3, [r2, #0]
    2ace:	f023 0302 	bic.w	r3, r3, #2
    2ad2:	041b      	lsls	r3, r3, #16
    2ad4:	0c1b      	lsrs	r3, r3, #16
    2ad6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ad8:	f248 0103 	movw	r1, #32771	; 0x8003
    2adc:	6913      	ldr	r3, [r2, #16]
    2ade:	420b      	tst	r3, r1
    2ae0:	d1fc      	bne.n	2adc <_calendar_init+0x40>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    2ae2:	6822      	ldr	r2, [r4, #0]
    2ae4:	6913      	ldr	r3, [r2, #16]
    2ae6:	f013 0f02 	tst.w	r3, #2
    2aea:	d1fb      	bne.n	2ae4 <_calendar_init+0x48>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2aec:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    2aee:	8813      	ldrh	r3, [r2, #0]
    2af0:	b29b      	uxth	r3, r3
    2af2:	f043 0301 	orr.w	r3, r3, #1
    2af6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2af8:	6913      	ldr	r3, [r2, #16]
    2afa:	f013 0f01 	tst.w	r3, #1
    2afe:	d1fb      	bne.n	2af8 <_calendar_init+0x5c>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2b00:	6823      	ldr	r3, [r4, #0]
    2b02:	691a      	ldr	r2, [r3, #16]
    2b04:	f012 0f01 	tst.w	r2, #1
    2b08:	d1fb      	bne.n	2b02 <_calendar_init+0x66>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2b0a:	f44f 4201 	mov.w	r2, #33024	; 0x8100
    2b0e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b10:	f248 0103 	movw	r1, #32771	; 0x8003
    2b14:	691a      	ldr	r2, [r3, #16]
    2b16:	420a      	tst	r2, r1
    2b18:	d1fc      	bne.n	2b14 <_calendar_init+0x78>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    2b1a:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    2b1c:	2000      	movs	r0, #0
    2b1e:	6618      	str	r0, [r3, #96]	; 0x60
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
}
    2b20:	bd10      	pop	{r4, pc}
    2b22:	2000      	movs	r0, #0
    2b24:	e7c2      	b.n	2aac <_calendar_init+0x10>
    2b26:	bf00      	nop
    2b28:	00009124 	.word	0x00009124
    2b2c:	00002951 	.word	0x00002951
    2b30:	200007e4 	.word	0x200007e4

00002b34 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2b34:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2b36:	4604      	mov	r4, r0
    2b38:	b170      	cbz	r0, 2b58 <_calendar_get_counter+0x24>
    2b3a:	6800      	ldr	r0, [r0, #0]
    2b3c:	3000      	adds	r0, #0
    2b3e:	bf18      	it	ne
    2b40:	2001      	movne	r0, #1
    2b42:	2299      	movs	r2, #153	; 0x99
    2b44:	4905      	ldr	r1, [pc, #20]	; (2b5c <_calendar_get_counter+0x28>)
    2b46:	4b06      	ldr	r3, [pc, #24]	; (2b60 <_calendar_get_counter+0x2c>)
    2b48:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2b4a:	6822      	ldr	r2, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b4c:	6913      	ldr	r3, [r2, #16]
    2b4e:	f013 0f08 	tst.w	r3, #8
    2b52:	d1fb      	bne.n	2b4c <_calendar_get_counter+0x18>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    2b54:	6990      	ldr	r0, [r2, #24]
}
    2b56:	bd10      	pop	{r4, pc}
    2b58:	2000      	movs	r0, #0
    2b5a:	e7f2      	b.n	2b42 <_calendar_get_counter+0xe>
    2b5c:	00009124 	.word	0x00009124
    2b60:	00002951 	.word	0x00002951

00002b64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2b64:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    2b66:	4b0f      	ldr	r3, [pc, #60]	; (2ba4 <RTC_Handler+0x40>)
    2b68:	681c      	ldr	r4, [r3, #0]
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2b6a:	6822      	ldr	r2, [r4, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2b6c:	8991      	ldrh	r1, [r2, #12]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    2b6e:	8953      	ldrh	r3, [r2, #10]
    2b70:	b29b      	uxth	r3, r3
	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    2b72:	400b      	ands	r3, r1
    2b74:	f413 7f80 	tst.w	r3, #256	; 0x100
    2b78:	d103      	bne.n	2b82 <RTC_Handler+0x1e>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    2b7a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    2b7e:	d108      	bne.n	2b92 <RTC_Handler+0x2e>
    2b80:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    2b82:	6863      	ldr	r3, [r4, #4]
    2b84:	4620      	mov	r0, r4
    2b86:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2b88:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2b8e:	819a      	strh	r2, [r3, #12]
    2b90:	bd10      	pop	{r4, pc}
		dev->callback_tamper(dev);
    2b92:	68a3      	ldr	r3, [r4, #8]
    2b94:	4620      	mov	r0, r4
    2b96:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    2b98:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    2b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2b9e:	819a      	strh	r2, [r3, #12]
}
    2ba0:	e7ee      	b.n	2b80 <RTC_Handler+0x1c>
    2ba2:	bf00      	nop
    2ba4:	200007e4 	.word	0x200007e4

00002ba8 <_mci_reset>:
 * \brief Reset the SDHC interface
 *
 * \param hw The pointer to MCI hardware instance
 */
static void _mci_reset(const void *const hw)
{
    2ba8:	b510      	push	{r4, lr}
	ASSERT(hw);
    2baa:	4604      	mov	r4, r0
    2bac:	2234      	movs	r2, #52	; 0x34
    2bae:	4906      	ldr	r1, [pc, #24]	; (2bc8 <_mci_reset+0x20>)
    2bb0:	3000      	adds	r0, #0
    2bb2:	bf18      	it	ne
    2bb4:	2001      	movne	r0, #1
    2bb6:	4b05      	ldr	r3, [pc, #20]	; (2bcc <_mci_reset+0x24>)
    2bb8:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    2bba:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2bbe:	f043 0302 	orr.w	r3, r3, #2
    2bc2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    2bc6:	bd10      	pop	{r4, pc}
    2bc8:	0000913c 	.word	0x0000913c
    2bcc:	00002951 	.word	0x00002951

00002bd0 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    2bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bd4:	4688      	mov	r8, r1
    2bd6:	4615      	mov	r5, r2
    2bd8:	461f      	mov	r7, r3
	uint32_t sr;
	ASSERT(hw);
    2bda:	4604      	mov	r4, r0
    2bdc:	1c06      	adds	r6, r0, #0
    2bde:	bf18      	it	ne
    2be0:	2601      	movne	r6, #1
    2be2:	2299      	movs	r2, #153	; 0x99
    2be4:	493c      	ldr	r1, [pc, #240]	; (2cd8 <_mci_send_cmd_execute+0x108>)
    2be6:	4630      	mov	r0, r6
    2be8:	4b3c      	ldr	r3, [pc, #240]	; (2cdc <_mci_send_cmd_execute+0x10c>)
    2bea:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    2bec:	0229      	lsls	r1, r5, #8
    2bee:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    2bf2:	ea41 0108 	orr.w	r1, r1, r8

	if (cmd & MCI_RESP_PRESENT) {
    2bf6:	f415 7f80 	tst.w	r5, #256	; 0x100
    2bfa:	d004      	beq.n	2c06 <_mci_send_cmd_execute+0x36>

		if (cmd & MCI_RESP_136) {
    2bfc:	f415 6f00 	tst.w	r5, #2048	; 0x800
    2c00:	d016      	beq.n	2c30 <_mci_send_cmd_execute+0x60>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    2c02:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    2c06:	f415 4f80 	tst.w	r5, #16384	; 0x4000
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    2c0a:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    2c0e:	bf14      	ite	ne
    2c10:	f043 0310 	orrne.w	r3, r3, #16
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    2c14:	f003 03ef 	andeq.w	r3, r3, #239	; 0xef
    2c18:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    2c1c:	60a7      	str	r7, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    2c1e:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    2c20:	81e3      	strh	r3, [r4, #14]

	/* Wait end of command */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (cmd & MCI_RESP_CRC) {
    2c22:	f405 5280 	and.w	r2, r5, #4096	; 0x1000
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    2c26:	f240 277f 	movw	r7, #639	; 0x27f
			if (sr
    2c2a:	f240 205d 	movw	r0, #605	; 0x25d
    2c2e:	e00d      	b.n	2c4c <_mci_send_cmd_execute+0x7c>
		} else if (cmd & MCI_RESP_BUSY) {
    2c30:	f415 5f00 	tst.w	r5, #8192	; 0x2000
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    2c34:	bf14      	ite	ne
    2c36:	f041 0103 	orrne.w	r1, r1, #3
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    2c3a:	f041 0102 	orreq.w	r1, r1, #2
    2c3e:	e7e2      	b.n	2c06 <_mci_send_cmd_execute+0x36>
			if (sr
    2c40:	423b      	tst	r3, r7
    2c42:	d116      	bne.n	2c72 <_mci_send_cmd_execute+0xa2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2c44:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    2c46:	f013 0f01 	tst.w	r3, #1
    2c4a:	d11f      	bne.n	2c8c <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    2c4c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2c4e:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    2c50:	2a00      	cmp	r2, #0
    2c52:	d0f5      	beq.n	2c40 <_mci_send_cmd_execute+0x70>
			if (sr
    2c54:	4203      	tst	r3, r0
    2c56:	d0f5      	beq.n	2c44 <_mci_send_cmd_execute+0x74>
				_mci_reset(hw);
    2c58:	4620      	mov	r0, r4
    2c5a:	4b21      	ldr	r3, [pc, #132]	; (2ce0 <_mci_send_cmd_execute+0x110>)
    2c5c:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    2c5e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2c60:	b29b      	uxth	r3, r3
    2c62:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2c66:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2c6a:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2c6c:	2000      	movs	r0, #0
    2c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				_mci_reset(hw);
    2c72:	4620      	mov	r0, r4
    2c74:	4b1a      	ldr	r3, [pc, #104]	; (2ce0 <_mci_send_cmd_execute+0x110>)
    2c76:	4798      	blx	r3
    2c78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2c7a:	b29b      	uxth	r3, r3
    2c7c:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2c80:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2c84:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2c86:	2000      	movs	r0, #0
    2c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2c8c:	f011 0f20 	tst.w	r1, #32
    2c90:	d104      	bne.n	2c9c <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    2c92:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2c94:	b29b      	uxth	r3, r3
    2c96:	f043 0301 	orr.w	r3, r3, #1
    2c9a:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2c9c:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2ca0:	d102      	bne.n	2ca8 <_mci_send_cmd_execute+0xd8>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    2ca2:	2001      	movs	r0, #1
}
    2ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(hw);
    2ca8:	227f      	movs	r2, #127	; 0x7f
    2caa:	490b      	ldr	r1, [pc, #44]	; (2cd8 <_mci_send_cmd_execute+0x108>)
    2cac:	4630      	mov	r0, r6
    2cae:	4b0b      	ldr	r3, [pc, #44]	; (2cdc <_mci_send_cmd_execute+0x10c>)
    2cb0:	4798      	blx	r3
	return ((Sdhc *)hw)->PSR.reg;
    2cb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2cb4:	f04f 33ff 	mov.w	r3, #4294967295
	} while (!(psr & SDHC_PSR_DATLL(1)));
    2cb8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    2cbc:	d108      	bne.n	2cd0 <_mci_send_cmd_execute+0x100>
    2cbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
		if (busy_wait-- == 0) {
    2cc0:	3b01      	subs	r3, #1
    2cc2:	d1f9      	bne.n	2cb8 <_mci_send_cmd_execute+0xe8>
			_mci_reset(hw);
    2cc4:	4620      	mov	r0, r4
    2cc6:	4b06      	ldr	r3, [pc, #24]	; (2ce0 <_mci_send_cmd_execute+0x110>)
    2cc8:	4798      	blx	r3
			return false;
    2cca:	2000      	movs	r0, #0
    2ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
    2cd0:	2001      	movs	r0, #1
    2cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cd6:	bf00      	nop
    2cd8:	0000913c 	.word	0x0000913c
    2cdc:	00002951 	.word	0x00002951
    2ce0:	00002ba9 	.word	0x00002ba9

00002ce4 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    2ce4:	b538      	push	{r3, r4, r5, lr}
    2ce6:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2ce8:	4605      	mov	r5, r0
    2cea:	b340      	cbz	r0, 2d3e <_mci_sync_init+0x5a>
    2cec:	1c08      	adds	r0, r1, #0
    2cee:	bf18      	it	ne
    2cf0:	2001      	movne	r0, #1
    2cf2:	22d8      	movs	r2, #216	; 0xd8
    2cf4:	4913      	ldr	r1, [pc, #76]	; (2d44 <_mci_sync_init+0x60>)
    2cf6:	4b14      	ldr	r3, [pc, #80]	; (2d48 <_mci_sync_init+0x64>)
    2cf8:	4798      	blx	r3

	mci_dev->hw = hw;
    2cfa:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    2cfc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2d00:	f043 0301 	orr.w	r3, r3, #1
    2d04:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    2d08:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    2d0c:	f013 0f01 	tst.w	r3, #1
    2d10:	d1fa      	bne.n	2d08 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
    2d12:	230e      	movs	r3, #14
    2d14:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    2d18:	230f      	movs	r3, #15
    2d1a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    2d1e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2d20:	b29b      	uxth	r3, r3
    2d22:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d26:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2d2a:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    2d2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2d2e:	b29b      	uxth	r3, r3
    2d30:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2d34:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2d38:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    2d3a:	2000      	movs	r0, #0
    2d3c:	bd38      	pop	{r3, r4, r5, pc}
    2d3e:	2000      	movs	r0, #0
    2d40:	e7d7      	b.n	2cf2 <_mci_sync_init+0xe>
    2d42:	bf00      	nop
    2d44:	0000913c 	.word	0x0000913c
    2d48:	00002951 	.word	0x00002951

00002d4c <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    2d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d4e:	4615      	mov	r5, r2
    2d50:	461c      	mov	r4, r3
    2d52:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    2d56:	4606      	mov	r6, r0
    2d58:	b1d8      	cbz	r0, 2d92 <_mci_sync_select_device+0x46>
    2d5a:	6800      	ldr	r0, [r0, #0]
    2d5c:	3000      	adds	r0, #0
    2d5e:	bf18      	it	ne
    2d60:	2001      	movne	r0, #1
    2d62:	f44f 7280 	mov.w	r2, #256	; 0x100
    2d66:	493a      	ldr	r1, [pc, #232]	; (2e50 <_mci_sync_select_device+0x104>)
    2d68:	4b3a      	ldr	r3, [pc, #232]	; (2e54 <_mci_sync_select_device+0x108>)
    2d6a:	4798      	blx	r3
	hw = mci_dev->hw;
    2d6c:	6833      	ldr	r3, [r6, #0]

	if (high_speed) {
    2d6e:	b197      	cbz	r7, 2d96 <_mci_sync_select_device+0x4a>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    2d70:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2d74:	f042 0204 	orr.w	r2, r2, #4
    2d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    2d7c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    2d7e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    2d82:	d00f      	beq.n	2da4 <_mci_sync_select_device+0x58>
		_mci_set_speed(hw, clock, CONF_SDHC1_CLK_GEN_SEL);
	}

	switch (bus_width) {
    2d84:	2c01      	cmp	r4, #1
    2d86:	d053      	beq.n	2e30 <_mci_sync_select_device+0xe4>
    2d88:	2c04      	cmp	r4, #4
    2d8a:	d059      	beq.n	2e40 <_mci_sync_select_device+0xf4>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    2d8c:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    2d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d92:	2000      	movs	r0, #0
    2d94:	e7e5      	b.n	2d62 <_mci_sync_select_device+0x16>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    2d96:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2d9a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2da2:	e7eb      	b.n	2d7c <_mci_sync_select_device+0x30>
	tmp = ((Sdhc *)hw)->CCR.reg;
    2da4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    2da6:	f012 0f04 	tst.w	r2, #4
    2daa:	d009      	beq.n	2dc0 <_mci_sync_select_device+0x74>
	return ((Sdhc *)hw)->PSR.reg;
    2dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2dae:	f012 0f03 	tst.w	r2, #3
    2db2:	d1fb      	bne.n	2dac <_mci_sync_select_device+0x60>
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    2db4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2db6:	f022 0204 	bic.w	r2, r2, #4
    2dba:	0412      	lsls	r2, r2, #16
    2dbc:	0c12      	lsrs	r2, r2, #16
    2dbe:	859a      	strh	r2, [r3, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2dc0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2dc2:	f3c1 4107 	ubfx	r1, r1, #16, #8
		clkbase = clkbase / 2;
    2dc6:	4824      	ldr	r0, [pc, #144]	; (2e58 <_mci_sync_select_device+0x10c>)
    2dc8:	4a24      	ldr	r2, [pc, #144]	; (2e5c <_mci_sync_select_device+0x110>)
    2dca:	2900      	cmp	r1, #0
    2dcc:	bf18      	it	ne
    2dce:	4602      	movne	r2, r0
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    2dd0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    2dd2:	f021 0120 	bic.w	r1, r1, #32
    2dd6:	0409      	lsls	r1, r1, #16
    2dd8:	0c09      	lsrs	r1, r1, #16
    2dda:	8599      	strh	r1, [r3, #44]	; 0x2c
		div = (clkbase / speed) / 2;
    2ddc:	fbb2 f2f5 	udiv	r2, r2, r5
    2de0:	0852      	lsrs	r2, r2, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    2de2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    2de6:	f011 0f04 	tst.w	r1, #4
    2dea:	d002      	beq.n	2df2 <_mci_sync_select_device+0xa6>
		div = 1;
    2dec:	2a00      	cmp	r2, #0
    2dee:	bf08      	it	eq
    2df0:	2201      	moveq	r2, #1
	tmp = ((Sdhc *)hw)->CCR.reg;
    2df2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    2df4:	b2c9      	uxtb	r1, r1
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    2df6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    2dfa:	b289      	uxth	r1, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    2dfc:	8599      	strh	r1, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2dfe:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    2e00:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    2e04:	0409      	lsls	r1, r1, #16
    2e06:	0c09      	lsrs	r1, r1, #16
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    2e08:	0892      	lsrs	r2, r2, #2
    2e0a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    2e0e:	430a      	orrs	r2, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    2e10:	859a      	strh	r2, [r3, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    2e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2e14:	b292      	uxth	r2, r2
    2e16:	f042 0201 	orr.w	r2, r2, #1
    2e1a:	859a      	strh	r2, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2e1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    2e1e:	f012 0f02 	tst.w	r2, #2
    2e22:	d0fb      	beq.n	2e1c <_mci_sync_select_device+0xd0>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    2e24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2e26:	b292      	uxth	r2, r2
    2e28:	f042 0204 	orr.w	r2, r2, #4
    2e2c:	859a      	strh	r2, [r3, #44]	; 0x2c
    2e2e:	e7a9      	b.n	2d84 <_mci_sync_select_device+0x38>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    2e30:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2e34:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    2e38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    2e3c:	2000      	movs	r0, #0
    2e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    2e40:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2e44:	f042 0202 	orr.w	r2, r2, #2
    2e48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2e4c:	2000      	movs	r0, #0
    2e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e50:	0000913c 	.word	0x0000913c
    2e54:	00002951 	.word	0x00002951
    2e58:	005b8d80 	.word	0x005b8d80
    2e5c:	00b71b00 	.word	0x00b71b00

00002e60 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2e60:	2000      	movs	r0, #0
    2e62:	4770      	bx	lr

00002e64 <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    2e64:	2900      	cmp	r1, #0

	default:
		/* Slot number wrong */
		return 0;
	}
}
    2e66:	bf0c      	ite	eq
    2e68:	2004      	moveq	r0, #4
    2e6a:	2000      	movne	r0, #0
    2e6c:	4770      	bx	lr

00002e6e <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    2e6e:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2e70:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2e72:	f3c0 5040 	ubfx	r0, r0, #21, #1
    2e76:	4770      	bx	lr

00002e78 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    2e78:	b500      	push	{lr}
    2e7a:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    2e7c:	f240 1249 	movw	r2, #329	; 0x149
    2e80:	490b      	ldr	r1, [pc, #44]	; (2eb0 <_mci_sync_send_clock+0x38>)
    2e82:	3000      	adds	r0, #0
    2e84:	bf18      	it	ne
    2e86:	2001      	movne	r0, #1
    2e88:	4b0a      	ldr	r3, [pc, #40]	; (2eb4 <_mci_sync_send_clock+0x3c>)
    2e8a:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    2e8c:	2300      	movs	r3, #0
    2e8e:	9301      	str	r3, [sp, #4]
    2e90:	9a01      	ldr	r2, [sp, #4]
    2e92:	f241 3387 	movw	r3, #4999	; 0x1387
    2e96:	429a      	cmp	r2, r3
    2e98:	d806      	bhi.n	2ea8 <_mci_sync_send_clock+0x30>
    2e9a:	461a      	mov	r2, r3
    2e9c:	9b01      	ldr	r3, [sp, #4]
    2e9e:	3301      	adds	r3, #1
    2ea0:	9301      	str	r3, [sp, #4]
    2ea2:	9b01      	ldr	r3, [sp, #4]
    2ea4:	4293      	cmp	r3, r2
    2ea6:	d9f9      	bls.n	2e9c <_mci_sync_send_clock+0x24>
		;
}
    2ea8:	b003      	add	sp, #12
    2eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    2eae:	bf00      	nop
    2eb0:	0000913c 	.word	0x0000913c
    2eb4:	00002951 	.word	0x00002951

00002eb8 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    2eb8:	b570      	push	{r4, r5, r6, lr}
    2eba:	460d      	mov	r5, r1
    2ebc:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2ebe:	4604      	mov	r4, r0
    2ec0:	b178      	cbz	r0, 2ee2 <_mci_sync_send_cmd+0x2a>
    2ec2:	6800      	ldr	r0, [r0, #0]
    2ec4:	3000      	adds	r0, #0
    2ec6:	bf18      	it	ne
    2ec8:	2001      	movne	r0, #1
    2eca:	f44f 72ab 	mov.w	r2, #342	; 0x156
    2ece:	490c      	ldr	r1, [pc, #48]	; (2f00 <_mci_sync_send_cmd+0x48>)
    2ed0:	4b0c      	ldr	r3, [pc, #48]	; (2f04 <_mci_sync_send_cmd+0x4c>)
    2ed2:	4798      	blx	r3
	hw = mci_dev->hw;
    2ed4:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2ed6:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    2ed8:	f013 0f01 	tst.w	r3, #1
    2edc:	d003      	beq.n	2ee6 <_mci_sync_send_cmd+0x2e>
		return false;
    2ede:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    2ee2:	2000      	movs	r0, #0
    2ee4:	e7f1      	b.n	2eca <_mci_sync_send_cmd+0x12>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    2ee6:	8983      	ldrh	r3, [r0, #12]
    2ee8:	f023 0301 	bic.w	r3, r3, #1
    2eec:	041b      	lsls	r3, r3, #16
    2eee:	0c1b      	lsrs	r3, r3, #16
    2ef0:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    2ef2:	2100      	movs	r1, #0
    2ef4:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    2ef6:	4633      	mov	r3, r6
    2ef8:	462a      	mov	r2, r5
    2efa:	4c03      	ldr	r4, [pc, #12]	; (2f08 <_mci_sync_send_cmd+0x50>)
    2efc:	47a0      	blx	r4
    2efe:	bd70      	pop	{r4, r5, r6, pc}
    2f00:	0000913c 	.word	0x0000913c
    2f04:	00002951 	.word	0x00002951
    2f08:	00002bd1 	.word	0x00002bd1

00002f0c <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    2f0c:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2f0e:	4604      	mov	r4, r0
    2f10:	b158      	cbz	r0, 2f2a <_mci_sync_get_response+0x1e>
    2f12:	6800      	ldr	r0, [r0, #0]
    2f14:	3000      	adds	r0, #0
    2f16:	bf18      	it	ne
    2f18:	2001      	movne	r0, #1
    2f1a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    2f1e:	4904      	ldr	r1, [pc, #16]	; (2f30 <_mci_sync_get_response+0x24>)
    2f20:	4b04      	ldr	r3, [pc, #16]	; (2f34 <_mci_sync_get_response+0x28>)
    2f22:	4798      	blx	r3
	hw = mci_dev->hw;
    2f24:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    2f26:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    2f28:	bd10      	pop	{r4, pc}
    2f2a:	2000      	movs	r0, #0
    2f2c:	e7f5      	b.n	2f1a <_mci_sync_get_response+0xe>
    2f2e:	bf00      	nop
    2f30:	0000913c 	.word	0x0000913c
    2f34:	00002951 	.word	0x00002951

00002f38 <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    2f38:	b538      	push	{r3, r4, r5, lr}
    2f3a:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2f3c:	4605      	mov	r5, r0
    2f3e:	b160      	cbz	r0, 2f5a <_mci_sync_get_response_128+0x22>
    2f40:	6800      	ldr	r0, [r0, #0]
    2f42:	3000      	adds	r0, #0
    2f44:	bf18      	it	ne
    2f46:	2001      	movne	r0, #1
    2f48:	f240 1277 	movw	r2, #375	; 0x177
    2f4c:	4911      	ldr	r1, [pc, #68]	; (2f94 <_mci_sync_get_response_128+0x5c>)
    2f4e:	4b12      	ldr	r3, [pc, #72]	; (2f98 <_mci_sync_get_response_128+0x60>)
    2f50:	4798      	blx	r3
	hw = mci_dev->hw;
    2f52:	682d      	ldr	r5, [r5, #0]
    2f54:	2102      	movs	r1, #2
    2f56:	2303      	movs	r3, #3
    2f58:	e00b      	b.n	2f72 <_mci_sync_get_response_128+0x3a>
    2f5a:	2000      	movs	r0, #0
    2f5c:	e7f4      	b.n	2f48 <_mci_sync_get_response_128+0x10>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    2f5e:	0c10      	lsrs	r0, r2, #16
    2f60:	7020      	strb	r0, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    2f62:	0a10      	lsrs	r0, r2, #8
    2f64:	7060      	strb	r0, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    2f66:	70a2      	strb	r2, [r4, #2]
		response++;
    2f68:	3403      	adds	r4, #3
    2f6a:	3b01      	subs	r3, #1
    2f6c:	b2db      	uxtb	r3, r3
    2f6e:	3901      	subs	r1, #1
    2f70:	b2c9      	uxtb	r1, r1
    2f72:	1d1a      	adds	r2, r3, #4
    2f74:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
		if (i != 3) {
    2f78:	2b03      	cmp	r3, #3
    2f7a:	d0f0      	beq.n	2f5e <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    2f7c:	0e10      	lsrs	r0, r2, #24
    2f7e:	7020      	strb	r0, [r4, #0]
		*response = (response_32 >> 16) & 0xFF;
    2f80:	0c10      	lsrs	r0, r2, #16
    2f82:	7060      	strb	r0, [r4, #1]
		*response = (response_32 >> 8) & 0xFF;
    2f84:	0a10      	lsrs	r0, r2, #8
    2f86:	70a0      	strb	r0, [r4, #2]
		*response = (response_32 >> 0) & 0xFF;
    2f88:	70e2      	strb	r2, [r4, #3]
		response++;
    2f8a:	3404      	adds	r4, #4
	for (int8_t i = 3; i >= 0; i--) {
    2f8c:	f011 0f80 	tst.w	r1, #128	; 0x80
    2f90:	d0eb      	beq.n	2f6a <_mci_sync_get_response_128+0x32>
    2f92:	bd38      	pop	{r3, r4, r5, pc}
    2f94:	0000913c 	.word	0x0000913c
    2f98:	00002951 	.word	0x00002951

00002f9c <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    2f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fa0:	460d      	mov	r5, r1
    2fa2:	4690      	mov	r8, r2
    2fa4:	461f      	mov	r7, r3
    2fa6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2faa:	4604      	mov	r4, r0
    2fac:	2800      	cmp	r0, #0
    2fae:	d032      	beq.n	3016 <_mci_sync_adtc_start+0x7a>
    2fb0:	6800      	ldr	r0, [r0, #0]
    2fb2:	3000      	adds	r0, #0
    2fb4:	bf18      	it	ne
    2fb6:	2001      	movne	r0, #1
    2fb8:	f240 1293 	movw	r2, #403	; 0x193
    2fbc:	4920      	ldr	r1, [pc, #128]	; (3040 <_mci_sync_adtc_start+0xa4>)
    2fbe:	4b21      	ldr	r3, [pc, #132]	; (3044 <_mci_sync_adtc_start+0xa8>)
    2fc0:	4798      	blx	r3
	hw = mci_dev->hw;
    2fc2:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2fc4:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    2fc6:	f013 0f01 	tst.w	r3, #1
    2fca:	d12f      	bne.n	302c <_mci_sync_adtc_start+0x90>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    2fcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2fce:	f013 0f02 	tst.w	r3, #2
    2fd2:	d12e      	bne.n	3032 <_mci_sync_adtc_start+0x96>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    2fd4:	f405 4300 	and.w	r3, r5, #32768	; 0x8000
		tmr = SDHC_TMR_DTDSEL_WRITE;
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
    2fd8:	2b00      	cmp	r3, #0
    2fda:	bf14      	ite	ne
    2fdc:	2300      	movne	r3, #0
    2fde:	2310      	moveq	r3, #16
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    2fe0:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    2fe4:	d104      	bne.n	2ff0 <_mci_sync_adtc_start+0x54>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    2fe6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    2fea:	d016      	beq.n	301a <_mci_sync_adtc_start+0x7e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    2fec:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    2ff0:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    2ff2:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    2ff4:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    2ff8:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    2ffa:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    2ffc:	2200      	movs	r2, #0
    2ffe:	2300      	movs	r3, #0
    3000:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    3004:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    3006:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    3008:	4643      	mov	r3, r8
    300a:	462a      	mov	r2, r5
    300c:	2120      	movs	r1, #32
    300e:	4c0e      	ldr	r4, [pc, #56]	; (3048 <_mci_sync_adtc_start+0xac>)
    3010:	47a0      	blx	r4
    3012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3016:	2000      	movs	r0, #0
    3018:	e7ce      	b.n	2fb8 <_mci_sync_adtc_start+0x1c>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    301a:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    301e:	d1e7      	bne.n	2ff0 <_mci_sync_adtc_start+0x54>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    3020:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    3024:	d008      	beq.n	3038 <_mci_sync_adtc_start+0x9c>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    3026:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    302a:	e7e1      	b.n	2ff0 <_mci_sync_adtc_start+0x54>
		return false;
    302c:	2000      	movs	r0, #0
    302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3032:	2000      	movs	r0, #0
    3034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    3038:	2000      	movs	r0, #0
}
    303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    303e:	bf00      	nop
    3040:	0000913c 	.word	0x0000913c
    3044:	00002951 	.word	0x00002951
    3048:	00002bd1 	.word	0x00002bd1

0000304c <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3050:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    3052:	4605      	mov	r5, r0
    3054:	2800      	cmp	r0, #0
    3056:	d04d      	beq.n	30f4 <_mci_sync_read_word+0xa8>
    3058:	6800      	ldr	r0, [r0, #0]
    305a:	3000      	adds	r0, #0
    305c:	bf18      	it	ne
    305e:	2001      	movne	r0, #1
    3060:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    3064:	4939      	ldr	r1, [pc, #228]	; (314c <_mci_sync_read_word+0x100>)
    3066:	4b3a      	ldr	r3, [pc, #232]	; (3150 <_mci_sync_read_word+0x104>)
    3068:	4798      	blx	r3
	hw = mci_dev->hw;
    306a:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    306c:	8a2a      	ldrh	r2, [r5, #16]
    306e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    3072:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    3076:	fb02 f808 	mul.w	r8, r2, r8
    307a:	ea4f 79e8 	mov.w	r9, r8, asr #31
    307e:	ebb8 0800 	subs.w	r8, r8, r0
    3082:	eb69 0901 	sbc.w	r9, r9, r1
    3086:	f1b9 0f00 	cmp.w	r9, #0
    308a:	bf08      	it	eq
    308c:	f1b8 0f04 	cmpeq.w	r8, #4
    3090:	d245      	bcs.n	311e <_mci_sync_read_word+0xd2>
    3092:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    3096:	b292      	uxth	r2, r2
    3098:	2300      	movs	r3, #0
    309a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3158 <_mci_sync_read_word+0x10c>
    309e:	47c0      	blx	r8
    30a0:	4313      	orrs	r3, r2
    30a2:	d043      	beq.n	312c <_mci_sync_read_word+0xe0>
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    30a4:	2e04      	cmp	r6, #4
    30a6:	d02d      	beq.n	3104 <_mci_sync_read_word+0xb8>
	return ((Sdhc *)hw)->BDPR.reg;
    30a8:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    30aa:	1e72      	subs	r2, r6, #1
    30ac:	2a02      	cmp	r2, #2
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    30ae:	bf9c      	itt	ls
    30b0:	b2db      	uxtbls	r3, r3
    30b2:	603b      	strls	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    30b4:	b2f6      	uxtb	r6, r6
    30b6:	2700      	movs	r7, #0
    30b8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    30bc:	18b6      	adds	r6, r6, r2
    30be:	415f      	adcs	r7, r3
    30c0:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    30c4:	8a2a      	ldrh	r2, [r5, #16]
    30c6:	8a68      	ldrh	r0, [r5, #18]
    30c8:	fba2 2300 	umull	r2, r3, r2, r0
    30cc:	429f      	cmp	r7, r3
    30ce:	bf08      	it	eq
    30d0:	4296      	cmpeq	r6, r2
    30d2:	d321      	bcc.n	3118 <_mci_sync_read_word+0xcc>
	return ((Sdhc *)hw)->EISTR.reg;
    30d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    30d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    30da:	b9bb      	cbnz	r3, 310c <_mci_sync_read_word+0xc0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    30dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    30de:	f013 0f02 	tst.w	r3, #2
    30e2:	d0f7      	beq.n	30d4 <_mci_sync_read_word+0x88>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    30e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    30e6:	b29b      	uxth	r3, r3
    30e8:	f043 0302 	orr.w	r3, r3, #2
    30ec:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    30ee:	2001      	movs	r0, #1
    30f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30f4:	2000      	movs	r0, #0
    30f6:	e7b3      	b.n	3060 <_mci_sync_read_word+0x14>
				_mci_reset(hw);
    30f8:	4620      	mov	r0, r4
    30fa:	4b16      	ldr	r3, [pc, #88]	; (3154 <_mci_sync_read_word+0x108>)
    30fc:	4798      	blx	r3
				return false;
    30fe:	2000      	movs	r0, #0
    3100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    3104:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    3106:	603b      	str	r3, [r7, #0]
    3108:	2604      	movs	r6, #4
    310a:	e7d3      	b.n	30b4 <_mci_sync_read_word+0x68>
			_mci_reset(hw);
    310c:	4620      	mov	r0, r4
    310e:	4b11      	ldr	r3, [pc, #68]	; (3154 <_mci_sync_read_word+0x108>)
    3110:	4798      	blx	r3
			return false;
    3112:	2000      	movs	r0, #0
    3114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    3118:	2001      	movs	r0, #1
    311a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    311e:	b292      	uxth	r2, r2
    3120:	2300      	movs	r3, #0
    3122:	4e0d      	ldr	r6, [pc, #52]	; (3158 <_mci_sync_read_word+0x10c>)
    3124:	47b0      	blx	r6
    3126:	4313      	orrs	r3, r2
    3128:	d1ec      	bne.n	3104 <_mci_sync_read_word+0xb8>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    312a:	2604      	movs	r6, #4
	return ((Sdhc *)hw)->EISTR.reg;
    312c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    312e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3132:	2b00      	cmp	r3, #0
    3134:	d1e0      	bne.n	30f8 <_mci_sync_read_word+0xac>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3136:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    3138:	f013 0f20 	tst.w	r3, #32
    313c:	d0f6      	beq.n	312c <_mci_sync_read_word+0xe0>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    313e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3140:	b29b      	uxth	r3, r3
    3142:	f043 0320 	orr.w	r3, r3, #32
    3146:	8623      	strh	r3, [r4, #48]	; 0x30
    3148:	e7ac      	b.n	30a4 <_mci_sync_read_word+0x58>
    314a:	bf00      	nop
    314c:	0000913c 	.word	0x0000913c
    3150:	00002951 	.word	0x00002951
    3154:	00002ba9 	.word	0x00002ba9
    3158:	00006509 	.word	0x00006509

0000315c <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    315e:	460e      	mov	r6, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    3160:	4605      	mov	r5, r0
    3162:	2800      	cmp	r0, #0
    3164:	d03d      	beq.n	31e2 <_mci_sync_write_word+0x86>
    3166:	6800      	ldr	r0, [r0, #0]
    3168:	3000      	adds	r0, #0
    316a:	bf18      	it	ne
    316c:	2001      	movne	r0, #1
    316e:	f240 220f 	movw	r2, #527	; 0x20f
    3172:	4923      	ldr	r1, [pc, #140]	; (3200 <_mci_sync_write_word+0xa4>)
    3174:	4b23      	ldr	r3, [pc, #140]	; (3204 <_mci_sync_write_word+0xa8>)
    3176:	4798      	blx	r3
	hw = mci_dev->hw;
    3178:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    317a:	8a2a      	ldrh	r2, [r5, #16]
    317c:	2300      	movs	r3, #0
    317e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    3182:	4f21      	ldr	r7, [pc, #132]	; (3208 <_mci_sync_write_word+0xac>)
    3184:	47b8      	blx	r7
    3186:	4313      	orrs	r3, r2
    3188:	d10c      	bne.n	31a4 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    318a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    318c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3190:	bb4b      	cbnz	r3, 31e6 <_mci_sync_write_word+0x8a>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3192:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    3194:	f013 0f10 	tst.w	r3, #16
    3198:	d0f7      	beq.n	318a <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    319a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    319c:	b29b      	uxth	r3, r3
    319e:	f043 0310 	orr.w	r3, r3, #16
    31a2:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    31a4:	6226      	str	r6, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    31a6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    31aa:	3204      	adds	r2, #4
    31ac:	f143 0300 	adc.w	r3, r3, #0
    31b0:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    31b4:	8a28      	ldrh	r0, [r5, #16]
    31b6:	8a6e      	ldrh	r6, [r5, #18]
    31b8:	fba0 0106 	umull	r0, r1, r0, r6
    31bc:	428b      	cmp	r3, r1
    31be:	bf08      	it	eq
    31c0:	4282      	cmpeq	r2, r0
    31c2:	d31a      	bcc.n	31fa <_mci_sync_write_word+0x9e>
	return ((Sdhc *)hw)->EISTR.reg;
    31c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    31c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    31ca:	b98b      	cbnz	r3, 31f0 <_mci_sync_write_word+0x94>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    31cc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    31ce:	f013 0f02 	tst.w	r3, #2
    31d2:	d0f7      	beq.n	31c4 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    31d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    31d6:	b29b      	uxth	r3, r3
    31d8:	f043 0302 	orr.w	r3, r3, #2
    31dc:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    31de:	2001      	movs	r0, #1
    31e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31e2:	2000      	movs	r0, #0
    31e4:	e7c3      	b.n	316e <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    31e6:	4620      	mov	r0, r4
    31e8:	4b08      	ldr	r3, [pc, #32]	; (320c <_mci_sync_write_word+0xb0>)
    31ea:	4798      	blx	r3
				return false;
    31ec:	2000      	movs	r0, #0
    31ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    31f0:	4620      	mov	r0, r4
    31f2:	4b06      	ldr	r3, [pc, #24]	; (320c <_mci_sync_write_word+0xb0>)
    31f4:	4798      	blx	r3
			return false;
    31f6:	2000      	movs	r0, #0
    31f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    31fa:	2001      	movs	r0, #1
}
    31fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31fe:	bf00      	nop
    3200:	0000913c 	.word	0x0000913c
    3204:	00002951 	.word	0x00002951
    3208:	00006509 	.word	0x00006509
    320c:	00002ba9 	.word	0x00002ba9

00003210 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    3210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3214:	460e      	mov	r6, r1
    3216:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    3218:	4607      	mov	r7, r0
    321a:	b300      	cbz	r0, 325e <_mci_sync_start_read_blocks+0x4e>
    321c:	6800      	ldr	r0, [r0, #0]
    321e:	3000      	adds	r0, #0
    3220:	bf18      	it	ne
    3222:	2001      	movne	r0, #1
    3224:	4d18      	ldr	r5, [pc, #96]	; (3288 <_mci_sync_start_read_blocks+0x78>)
    3226:	f240 223e 	movw	r2, #574	; 0x23e
    322a:	4629      	mov	r1, r5
    322c:	4c17      	ldr	r4, [pc, #92]	; (328c <_mci_sync_start_read_blocks+0x7c>)
    322e:	47a0      	blx	r4
	ASSERT(nb_block);
    3230:	f240 223f 	movw	r2, #575	; 0x23f
    3234:	4629      	mov	r1, r5
    3236:	f118 0000 	adds.w	r0, r8, #0
    323a:	bf18      	it	ne
    323c:	2001      	movne	r0, #1
    323e:	47a0      	blx	r4
	ASSERT(dst);
    3240:	f44f 7210 	mov.w	r2, #576	; 0x240
    3244:	4629      	mov	r1, r5
    3246:	1c30      	adds	r0, r6, #0
    3248:	bf18      	it	ne
    324a:	2001      	movne	r0, #1
    324c:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    324e:	8a3d      	ldrh	r5, [r7, #16]
    3250:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    3254:	b1a5      	cbz	r5, 3280 <_mci_sync_start_read_blocks+0x70>
    3256:	2404      	movs	r4, #4
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    3258:	f8df 8034 	ldr.w	r8, [pc, #52]	; 3290 <_mci_sync_start_read_blocks+0x80>
    325c:	e004      	b.n	3268 <_mci_sync_start_read_blocks+0x58>
    325e:	2000      	movs	r0, #0
    3260:	e7e0      	b.n	3224 <_mci_sync_start_read_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    3262:	4426      	add	r6, r4
	while (nb_data) {
    3264:	1b2d      	subs	r5, r5, r4
    3266:	d00b      	beq.n	3280 <_mci_sync_start_read_blocks+0x70>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    3268:	4631      	mov	r1, r6
    326a:	4638      	mov	r0, r7
    326c:	47c0      	blx	r8
		if (nb_data < nbytes) {
    326e:	42ac      	cmp	r4, r5
    3270:	d9f7      	bls.n	3262 <_mci_sync_start_read_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    3272:	8a3b      	ldrh	r3, [r7, #16]
    3274:	fb93 f2f4 	sdiv	r2, r3, r4
    3278:	fb04 3412 	mls	r4, r4, r2, r3
    327c:	b2e4      	uxtb	r4, r4
    327e:	e7f0      	b.n	3262 <_mci_sync_start_read_blocks+0x52>
	}

	return true;
}
    3280:	2001      	movs	r0, #1
    3282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3286:	bf00      	nop
    3288:	0000913c 	.word	0x0000913c
    328c:	00002951 	.word	0x00002951
    3290:	0000304d 	.word	0x0000304d

00003294 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    3294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3298:	460e      	mov	r6, r1
    329a:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    329c:	4607      	mov	r7, r0
    329e:	b300      	cbz	r0, 32e2 <_mci_sync_start_write_blocks+0x4e>
    32a0:	6800      	ldr	r0, [r0, #0]
    32a2:	3000      	adds	r0, #0
    32a4:	bf18      	it	ne
    32a6:	2001      	movne	r0, #1
    32a8:	4d18      	ldr	r5, [pc, #96]	; (330c <_mci_sync_start_write_blocks+0x78>)
    32aa:	f240 225a 	movw	r2, #602	; 0x25a
    32ae:	4629      	mov	r1, r5
    32b0:	4c17      	ldr	r4, [pc, #92]	; (3310 <_mci_sync_start_write_blocks+0x7c>)
    32b2:	47a0      	blx	r4
	ASSERT(nb_block);
    32b4:	f240 225b 	movw	r2, #603	; 0x25b
    32b8:	4629      	mov	r1, r5
    32ba:	f118 0000 	adds.w	r0, r8, #0
    32be:	bf18      	it	ne
    32c0:	2001      	movne	r0, #1
    32c2:	47a0      	blx	r4
	ASSERT(src);
    32c4:	f44f 7217 	mov.w	r2, #604	; 0x25c
    32c8:	4629      	mov	r1, r5
    32ca:	1c30      	adds	r0, r6, #0
    32cc:	bf18      	it	ne
    32ce:	2001      	movne	r0, #1
    32d0:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    32d2:	8a3d      	ldrh	r5, [r7, #16]
    32d4:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    32d8:	b1a5      	cbz	r5, 3304 <_mci_sync_start_write_blocks+0x70>
    32da:	2404      	movs	r4, #4
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    32dc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 3314 <_mci_sync_start_write_blocks+0x80>
    32e0:	e004      	b.n	32ec <_mci_sync_start_write_blocks+0x58>
    32e2:	2000      	movs	r0, #0
    32e4:	e7e0      	b.n	32a8 <_mci_sync_start_write_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    32e6:	4426      	add	r6, r4
	while (nb_data) {
    32e8:	1b2d      	subs	r5, r5, r4
    32ea:	d00b      	beq.n	3304 <_mci_sync_start_write_blocks+0x70>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    32ec:	6831      	ldr	r1, [r6, #0]
    32ee:	4638      	mov	r0, r7
    32f0:	47c0      	blx	r8
		if (nb_data < nbytes) {
    32f2:	42ac      	cmp	r4, r5
    32f4:	d9f7      	bls.n	32e6 <_mci_sync_start_write_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    32f6:	8a3b      	ldrh	r3, [r7, #16]
    32f8:	fb93 f2f4 	sdiv	r2, r3, r4
    32fc:	fb04 3412 	mls	r4, r4, r2, r3
    3300:	b2e4      	uxtb	r4, r4
    3302:	e7f0      	b.n	32e6 <_mci_sync_start_write_blocks+0x52>
	}

	return true;
}
    3304:	2001      	movs	r0, #1
    3306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    330a:	bf00      	nop
    330c:	0000913c 	.word	0x0000913c
    3310:	00002951 	.word	0x00002951
    3314:	0000315d 	.word	0x0000315d

00003318 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    3318:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    331a:	b150      	cbz	r0, 3332 <_mci_sync_wait_end_of_read_blocks+0x1a>
    331c:	6800      	ldr	r0, [r0, #0]
    331e:	3000      	adds	r0, #0
    3320:	bf18      	it	ne
    3322:	2001      	movne	r0, #1
    3324:	f240 2271 	movw	r2, #625	; 0x271
    3328:	4903      	ldr	r1, [pc, #12]	; (3338 <_mci_sync_wait_end_of_read_blocks+0x20>)
    332a:	4b04      	ldr	r3, [pc, #16]	; (333c <_mci_sync_wait_end_of_read_blocks+0x24>)
    332c:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    332e:	2001      	movs	r0, #1
    3330:	bd08      	pop	{r3, pc}
    3332:	2000      	movs	r0, #0
    3334:	e7f6      	b.n	3324 <_mci_sync_wait_end_of_read_blocks+0xc>
    3336:	bf00      	nop
    3338:	0000913c 	.word	0x0000913c
    333c:	00002951 	.word	0x00002951

00003340 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    3340:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    3342:	b150      	cbz	r0, 335a <_mci_sync_wait_end_of_write_blocks+0x1a>
    3344:	6800      	ldr	r0, [r0, #0]
    3346:	3000      	adds	r0, #0
    3348:	bf18      	it	ne
    334a:	2001      	movne	r0, #1
    334c:	f44f 721f 	mov.w	r2, #636	; 0x27c
    3350:	4903      	ldr	r1, [pc, #12]	; (3360 <_mci_sync_wait_end_of_write_blocks+0x20>)
    3352:	4b04      	ldr	r3, [pc, #16]	; (3364 <_mci_sync_wait_end_of_write_blocks+0x24>)
    3354:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    3356:	2001      	movs	r0, #1
    3358:	bd08      	pop	{r3, pc}
    335a:	2000      	movs	r0, #0
    335c:	e7f6      	b.n	334c <_mci_sync_wait_end_of_write_blocks+0xc>
    335e:	bf00      	nop
    3360:	0000913c 	.word	0x0000913c
    3364:	00002951 	.word	0x00002951

00003368 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3368:	b470      	push	{r4, r5, r6}
    336a:	b089      	sub	sp, #36	; 0x24
    336c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    336e:	466c      	mov	r4, sp
    3370:	4d0d      	ldr	r5, [pc, #52]	; (33a8 <_sercom_get_hardware_index+0x40>)
    3372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3376:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    337a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    337e:	9b00      	ldr	r3, [sp, #0]
    3380:	42b3      	cmp	r3, r6
    3382:	d00d      	beq.n	33a0 <_sercom_get_hardware_index+0x38>
    3384:	4631      	mov	r1, r6
    3386:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3388:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    338a:	f853 2b04 	ldr.w	r2, [r3], #4
    338e:	428a      	cmp	r2, r1
    3390:	d007      	beq.n	33a2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3392:	3001      	adds	r0, #1
    3394:	2808      	cmp	r0, #8
    3396:	d1f8      	bne.n	338a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    3398:	2000      	movs	r0, #0
}
    339a:	b009      	add	sp, #36	; 0x24
    339c:	bc70      	pop	{r4, r5, r6}
    339e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    33a0:	2000      	movs	r0, #0
			return i;
    33a2:	b2c0      	uxtb	r0, r0
    33a4:	e7f9      	b.n	339a <_sercom_get_hardware_index+0x32>
    33a6:	bf00      	nop
    33a8:	00009154 	.word	0x00009154

000033ac <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    33ac:	b510      	push	{r4, lr}
    33ae:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    33b0:	4b41      	ldr	r3, [pc, #260]	; (34b8 <_usart_init+0x10c>)
    33b2:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    33b4:	2800      	cmp	r0, #0
    33b6:	d05c      	beq.n	3472 <_usart_init+0xc6>
    33b8:	2802      	cmp	r0, #2
    33ba:	d05c      	beq.n	3476 <_usart_init+0xca>
	ASSERT(false);
    33bc:	f240 2247 	movw	r2, #583	; 0x247
    33c0:	493e      	ldr	r1, [pc, #248]	; (34bc <_usart_init+0x110>)
    33c2:	2000      	movs	r0, #0
    33c4:	4b3e      	ldr	r3, [pc, #248]	; (34c0 <_usart_init+0x114>)
    33c6:	4798      	blx	r3
	return 0;
    33c8:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    33ca:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    33cc:	f013 0f01 	tst.w	r3, #1
    33d0:	d122      	bne.n	3418 <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    33d2:	004b      	lsls	r3, r1, #1
    33d4:	185a      	adds	r2, r3, r1
    33d6:	4b3b      	ldr	r3, [pc, #236]	; (34c4 <_usart_init+0x118>)
    33d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    33dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    33de:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    33e2:	69e3      	ldr	r3, [r4, #28]
    33e4:	f013 0f03 	tst.w	r3, #3
    33e8:	d1fb      	bne.n	33e2 <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    33ea:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    33ec:	f013 0f02 	tst.w	r3, #2
    33f0:	d00b      	beq.n	340a <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    33f2:	6823      	ldr	r3, [r4, #0]
    33f4:	f023 0302 	bic.w	r3, r3, #2
    33f8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    33fa:	69e3      	ldr	r3, [r4, #28]
    33fc:	f013 0f03 	tst.w	r3, #3
    3400:	d1fb      	bne.n	33fa <_usart_init+0x4e>
    3402:	69e3      	ldr	r3, [r4, #28]
    3404:	f013 0f02 	tst.w	r3, #2
    3408:	d1fb      	bne.n	3402 <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    340a:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    340e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3410:	69e3      	ldr	r3, [r4, #28]
    3412:	f013 0f03 	tst.w	r3, #3
    3416:	d1fb      	bne.n	3410 <_usart_init+0x64>
    3418:	69e3      	ldr	r3, [r4, #28]
    341a:	f013 0f01 	tst.w	r3, #1
    341e:	d1fb      	bne.n	3418 <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3420:	460a      	mov	r2, r1
    3422:	004b      	lsls	r3, r1, #1
    3424:	440b      	add	r3, r1
    3426:	4927      	ldr	r1, [pc, #156]	; (34c4 <_usart_init+0x118>)
    3428:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    342c:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    342e:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3430:	69e3      	ldr	r3, [r4, #28]
    3432:	f013 0f03 	tst.w	r3, #3
    3436:	d1fb      	bne.n	3430 <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3438:	0053      	lsls	r3, r2, #1
    343a:	1899      	adds	r1, r3, r2
    343c:	4b21      	ldr	r3, [pc, #132]	; (34c4 <_usart_init+0x118>)
    343e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3444:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3446:	69e3      	ldr	r3, [r4, #28]
    3448:	f013 0f1f 	tst.w	r3, #31
    344c:	d1fb      	bne.n	3446 <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    344e:	0053      	lsls	r3, r2, #1
    3450:	1899      	adds	r1, r3, r2
    3452:	4b1c      	ldr	r3, [pc, #112]	; (34c4 <_usart_init+0x118>)
    3454:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    345a:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    345c:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3460:	d10b      	bne.n	347a <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3462:	0053      	lsls	r3, r2, #1
    3464:	1899      	adds	r1, r3, r2
    3466:	4b17      	ldr	r3, [pc, #92]	; (34c4 <_usart_init+0x118>)
    3468:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    346c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    346e:	81a3      	strh	r3, [r4, #12]
    3470:	e011      	b.n	3496 <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3472:	2100      	movs	r1, #0
    3474:	e7a9      	b.n	33ca <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
    3476:	2101      	movs	r1, #1
    3478:	e7a7      	b.n	33ca <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    347a:	4b12      	ldr	r3, [pc, #72]	; (34c4 <_usart_init+0x118>)
    347c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3480:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    3482:	89a1      	ldrh	r1, [r4, #12]
    3484:	f360 010c 	bfi	r1, r0, #0, #13
    3488:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    348a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    348e:	89a3      	ldrh	r3, [r4, #12]
    3490:	f361 334f 	bfi	r3, r1, #13, #3
    3494:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3496:	4b0b      	ldr	r3, [pc, #44]	; (34c4 <_usart_init+0x118>)
    3498:	0051      	lsls	r1, r2, #1
    349a:	1888      	adds	r0, r1, r2
    349c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    34a0:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    34a4:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    34a6:	440a      	add	r2, r1
    34a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    34ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    34b0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    34b4:	2000      	movs	r0, #0
    34b6:	bd10      	pop	{r4, pc}
    34b8:	00003369 	.word	0x00003369
    34bc:	000091bc 	.word	0x000091bc
    34c0:	00002951 	.word	0x00002951
    34c4:	00009154 	.word	0x00009154

000034c8 <_usart_sync_init>:
{
    34c8:	b538      	push	{r3, r4, r5, lr}
    34ca:	460c      	mov	r4, r1
	ASSERT(device);
    34cc:	4605      	mov	r5, r0
    34ce:	22bb      	movs	r2, #187	; 0xbb
    34d0:	4905      	ldr	r1, [pc, #20]	; (34e8 <_usart_sync_init+0x20>)
    34d2:	3000      	adds	r0, #0
    34d4:	bf18      	it	ne
    34d6:	2001      	movne	r0, #1
    34d8:	4b04      	ldr	r3, [pc, #16]	; (34ec <_usart_sync_init+0x24>)
    34da:	4798      	blx	r3
	device->hw = hw;
    34dc:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    34de:	4620      	mov	r0, r4
    34e0:	4b03      	ldr	r3, [pc, #12]	; (34f0 <_usart_sync_init+0x28>)
    34e2:	4798      	blx	r3
}
    34e4:	bd38      	pop	{r3, r4, r5, pc}
    34e6:	bf00      	nop
    34e8:	000091bc 	.word	0x000091bc
    34ec:	00002951 	.word	0x00002951
    34f0:	000033ad 	.word	0x000033ad

000034f4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    34f4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    34f6:	6813      	ldr	r3, [r2, #0]
    34f8:	f043 0302 	orr.w	r3, r3, #2
    34fc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    34fe:	69d3      	ldr	r3, [r2, #28]
    3500:	f013 0f03 	tst.w	r3, #3
    3504:	d1fb      	bne.n	34fe <_usart_sync_enable+0xa>
}
    3506:	4770      	bx	lr

00003508 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3508:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    350a:	6299      	str	r1, [r3, #40]	; 0x28
    350c:	4770      	bx	lr

0000350e <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    350e:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    3510:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3512:	b2c0      	uxtb	r0, r0
    3514:	4770      	bx	lr

00003516 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3516:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3518:	7e18      	ldrb	r0, [r3, #24]
}
    351a:	f000 0001 	and.w	r0, r0, #1
    351e:	4770      	bx	lr

00003520 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3520:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3522:	7e18      	ldrb	r0, [r3, #24]
}
    3524:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3528:	4770      	bx	lr

0000352a <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    352a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    352c:	7e18      	ldrb	r0, [r3, #24]
}
    352e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3532:	4770      	bx	lr

00003534 <HardFault_Handler>:
  * and passes it to the handler written in C as a pointer. Also extracts the LR
  * value as the second parameter
  */
void HardFault_Handler(void)
{
	__asm volatile
    3534:	f01e 0f04 	tst.w	lr, #4
    3538:	bf0c      	ite	eq
    353a:	f3ef 8008 	mrseq	r0, MSP
    353e:	f3ef 8009 	mrsne	r0, PSP
    3542:	4671      	mov	r1, lr
    3544:	f000 b800 	b.w	3548 <HardFault_Handler_C>

00003548 <HardFault_Handler_C>:
/**
  * HardFault Handler in C, with stack frame location and LR value extracted from
  * assembly wrapper as input parameters. Same for all Cortex-M4 Processors.
  */
void HardFault_Handler_C(unsigned int * hardfault_args, unsigned int lr_value)
{	
    3548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    354c:	b087      	sub	sp, #28
    354e:	9105      	str	r1, [sp, #20]
	unsigned int stacked_psr;
	uint32_t cfsr;
	uint32_t bus_fault_address;
	uint32_t memmanage_fault_address;
	
	bus_fault_address       = SCB->BFAR;
    3550:	4e38      	ldr	r6, [pc, #224]	; (3634 <HardFault_Handler_C+0xec>)
    3552:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3554:	9300      	str	r3, [sp, #0]
	memmanage_fault_address = SCB->MMFAR;
    3556:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3558:	9201      	str	r2, [sp, #4]
	cfsr                    = SCB->CFSR;
    355a:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	
	stacked_r0  = ((unsigned int) hardfault_args[0]);
    355c:	6804      	ldr	r4, [r0, #0]
	stacked_r1  = ((unsigned int) hardfault_args[1]);
    355e:	f8d0 b004 	ldr.w	fp, [r0, #4]
	stacked_r2  = ((unsigned int) hardfault_args[2]);
    3562:	f8d0 a008 	ldr.w	sl, [r0, #8]
	stacked_r3  = ((unsigned int) hardfault_args[3]);
    3566:	f8d0 900c 	ldr.w	r9, [r0, #12]
	stacked_r12 = ((unsigned int) hardfault_args[4]);
    356a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	stacked_lr  = ((unsigned int) hardfault_args[5]);
    356e:	6945      	ldr	r5, [r0, #20]
    3570:	9502      	str	r5, [sp, #8]
	stacked_pc  = ((unsigned int) hardfault_args[6]);
    3572:	6983      	ldr	r3, [r0, #24]
    3574:	9303      	str	r3, [sp, #12]
	stacked_psr = ((unsigned int) hardfault_args[7]);
    3576:	69c0      	ldr	r0, [r0, #28]
    3578:	9004      	str	r0, [sp, #16]
	
	printf("[HardFault]\r\n");
    357a:	482f      	ldr	r0, [pc, #188]	; (3638 <HardFault_Handler_C+0xf0>)
    357c:	4d2f      	ldr	r5, [pc, #188]	; (363c <HardFault_Handler_C+0xf4>)
    357e:	47a8      	blx	r5
	printf(" | Stack frame:\r\n");
    3580:	482f      	ldr	r0, [pc, #188]	; (3640 <HardFault_Handler_C+0xf8>)
    3582:	47a8      	blx	r5
	printf(" | | R0   = 0x%08X\r\n", (unsigned)stacked_r0);
    3584:	4621      	mov	r1, r4
    3586:	482f      	ldr	r0, [pc, #188]	; (3644 <HardFault_Handler_C+0xfc>)
    3588:	4c2f      	ldr	r4, [pc, #188]	; (3648 <HardFault_Handler_C+0x100>)
    358a:	47a0      	blx	r4
	printf(" | | R1   = 0x%08X\r\n", (unsigned)stacked_r1);
    358c:	4659      	mov	r1, fp
    358e:	482f      	ldr	r0, [pc, #188]	; (364c <HardFault_Handler_C+0x104>)
    3590:	47a0      	blx	r4
	printf(" | | R2   = 0x%08X\r\n", (unsigned)stacked_r2);
    3592:	4651      	mov	r1, sl
    3594:	482e      	ldr	r0, [pc, #184]	; (3650 <HardFault_Handler_C+0x108>)
    3596:	47a0      	blx	r4
	printf(" | | R3   = 0x%08X\r\n", (unsigned)stacked_r3);
    3598:	4649      	mov	r1, r9
    359a:	482e      	ldr	r0, [pc, #184]	; (3654 <HardFault_Handler_C+0x10c>)
    359c:	47a0      	blx	r4
	printf(" | | R12  = 0x%08X\r\n", (unsigned)stacked_r12);
    359e:	4641      	mov	r1, r8
    35a0:	482d      	ldr	r0, [pc, #180]	; (3658 <HardFault_Handler_C+0x110>)
    35a2:	47a0      	blx	r4
	printf(" | | LR   = 0x%08X\r\n", (unsigned)stacked_lr);
    35a4:	9902      	ldr	r1, [sp, #8]
    35a6:	482d      	ldr	r0, [pc, #180]	; (365c <HardFault_Handler_C+0x114>)
    35a8:	47a0      	blx	r4
	printf(" | | PC   = 0x%08X\r\n", (unsigned)stacked_pc);
    35aa:	9903      	ldr	r1, [sp, #12]
    35ac:	482c      	ldr	r0, [pc, #176]	; (3660 <HardFault_Handler_C+0x118>)
    35ae:	47a0      	blx	r4
	printf(" | | PSR  = 0x%08X\r\n", (unsigned)stacked_psr);
    35b0:	9904      	ldr	r1, [sp, #16]
    35b2:	482c      	ldr	r0, [pc, #176]	; (3664 <HardFault_Handler_C+0x11c>)
    35b4:	47a0      	blx	r4
	printf(" | FSR/FAR:\r\n");
    35b6:	482c      	ldr	r0, [pc, #176]	; (3668 <HardFault_Handler_C+0x120>)
    35b8:	47a8      	blx	r5
	
	printf(" | | Configurable Fault Status Register\r\n");
    35ba:	482c      	ldr	r0, [pc, #176]	; (366c <HardFault_Handler_C+0x124>)
    35bc:	47a8      	blx	r5
	printf(" | | | CFSR  = 0x%08X\r\n", (unsigned)cfsr);
    35be:	4639      	mov	r1, r7
    35c0:	482b      	ldr	r0, [pc, #172]	; (3670 <HardFault_Handler_C+0x128>)
    35c2:	47a0      	blx	r4
	printf(" | | | | MemManage Status Register\r\n");
    35c4:	482b      	ldr	r0, [pc, #172]	; (3674 <HardFault_Handler_C+0x12c>)
    35c6:	47a8      	blx	r5
	printf(" | | | | | MMFSR = 0x%02X\r\n", (unsigned)(cfsr & 0xFF));
    35c8:	b2f9      	uxtb	r1, r7
    35ca:	482b      	ldr	r0, [pc, #172]	; (3678 <HardFault_Handler_C+0x130>)
    35cc:	47a0      	blx	r4
	printf(" | | | | BusFault Status Register\r\n");
    35ce:	482b      	ldr	r0, [pc, #172]	; (367c <HardFault_Handler_C+0x134>)
    35d0:	47a8      	blx	r5
	printf(" | | | | | BFSR = 0x%02X\r\n", (unsigned)((cfsr >> 8) & 0xFF));
    35d2:	f3c7 2107 	ubfx	r1, r7, #8, #8
    35d6:	482a      	ldr	r0, [pc, #168]	; (3680 <HardFault_Handler_C+0x138>)
    35d8:	47a0      	blx	r4
	printf(" | | | | UsageFault Status Register\r\n");
    35da:	482a      	ldr	r0, [pc, #168]	; (3684 <HardFault_Handler_C+0x13c>)
    35dc:	47a8      	blx	r5
	printf(" | | | | | UFSR = 0x%02X\r\n", (unsigned)((cfsr >> 16) & 0xFF));
    35de:	f3c7 4107 	ubfx	r1, r7, #16, #8
    35e2:	4829      	ldr	r0, [pc, #164]	; (3688 <HardFault_Handler_C+0x140>)
    35e4:	47a0      	blx	r4
	
	printf(" | | MemManage Address Register (validity: %X)\r\n", (unsigned)((cfsr >> 7) & 0x1));
    35e6:	f3c7 11c0 	ubfx	r1, r7, #7, #1
    35ea:	4828      	ldr	r0, [pc, #160]	; (368c <HardFault_Handler_C+0x144>)
    35ec:	47a0      	blx	r4
	printf(" | | | MMFAR = 0x%08X\r\n", (unsigned)memmanage_fault_address);
    35ee:	9901      	ldr	r1, [sp, #4]
    35f0:	4827      	ldr	r0, [pc, #156]	; (3690 <HardFault_Handler_C+0x148>)
    35f2:	47a0      	blx	r4
	printf(" | | BusFault Address Register  (validity: %X)\r\n", (unsigned)((cfsr >> 15) & 0x1));
    35f4:	f3c7 31c0 	ubfx	r1, r7, #15, #1
    35f8:	4826      	ldr	r0, [pc, #152]	; (3694 <HardFault_Handler_C+0x14c>)
    35fa:	47a0      	blx	r4
	printf(" | | | BFAR = 0x%08X\r\n", (unsigned)bus_fault_address);
    35fc:	9900      	ldr	r1, [sp, #0]
    35fe:	4826      	ldr	r0, [pc, #152]	; (3698 <HardFault_Handler_C+0x150>)
    3600:	47a0      	blx	r4
	
	printf(" | | Hard Fault Status Register\r\n");
    3602:	4826      	ldr	r0, [pc, #152]	; (369c <HardFault_Handler_C+0x154>)
    3604:	47a8      	blx	r5
	printf(" | | | HFSR  = 0x%08X\r\n", (unsigned)SCB->HFSR);
    3606:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    3608:	4825      	ldr	r0, [pc, #148]	; (36a0 <HardFault_Handler_C+0x158>)
    360a:	47a0      	blx	r4
	
	printf(" | | DFSR = 0x%08X\r\n", (unsigned)SCB->DFSR);
    360c:	6b31      	ldr	r1, [r6, #48]	; 0x30
    360e:	4825      	ldr	r0, [pc, #148]	; (36a4 <HardFault_Handler_C+0x15c>)
    3610:	47a0      	blx	r4
	printf(" | | AFSR = 0x%08X\r\n", (unsigned)SCB->AFSR);
    3612:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    3614:	4824      	ldr	r0, [pc, #144]	; (36a8 <HardFault_Handler_C+0x160>)
    3616:	47a0      	blx	r4

	printf(" | Misc\r\n");
    3618:	4824      	ldr	r0, [pc, #144]	; (36ac <HardFault_Handler_C+0x164>)
    361a:	47a8      	blx	r5
	printf(" | | LR/EXC_RETURN= 0x%04X\r\n", (unsigned)lr_value);
    361c:	9905      	ldr	r1, [sp, #20]
    361e:	4824      	ldr	r0, [pc, #144]	; (36b0 <HardFault_Handler_C+0x168>)
    3620:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    3622:	4f24      	ldr	r7, [pc, #144]	; (36b4 <HardFault_Handler_C+0x16c>)
    3624:	2640      	movs	r6, #64	; 0x40
	
	while (1) {
		gpio_toggle_pin_level(LED_STATUS);
		delay_ms(BLINK_ERROR);
    3626:	2564      	movs	r5, #100	; 0x64
    3628:	4c23      	ldr	r4, [pc, #140]	; (36b8 <HardFault_Handler_C+0x170>)
    362a:	61fe      	str	r6, [r7, #28]
    362c:	4628      	mov	r0, r5
    362e:	47a0      	blx	r4
    3630:	e7fb      	b.n	362a <HardFault_Handler_C+0xe2>
    3632:	bf00      	nop
    3634:	e000ed00 	.word	0xe000ed00
    3638:	000091d8 	.word	0x000091d8
    363c:	00006e0d 	.word	0x00006e0d
    3640:	000091e8 	.word	0x000091e8
    3644:	000091fc 	.word	0x000091fc
    3648:	00006d25 	.word	0x00006d25
    364c:	00009214 	.word	0x00009214
    3650:	0000922c 	.word	0x0000922c
    3654:	00009244 	.word	0x00009244
    3658:	0000925c 	.word	0x0000925c
    365c:	00009274 	.word	0x00009274
    3660:	0000928c 	.word	0x0000928c
    3664:	000092a4 	.word	0x000092a4
    3668:	000092bc 	.word	0x000092bc
    366c:	000092cc 	.word	0x000092cc
    3670:	000092f8 	.word	0x000092f8
    3674:	00009310 	.word	0x00009310
    3678:	00009334 	.word	0x00009334
    367c:	00009350 	.word	0x00009350
    3680:	00009374 	.word	0x00009374
    3684:	00009390 	.word	0x00009390
    3688:	000093b8 	.word	0x000093b8
    368c:	000093d4 	.word	0x000093d4
    3690:	00009408 	.word	0x00009408
    3694:	00009420 	.word	0x00009420
    3698:	00009454 	.word	0x00009454
    369c:	0000946c 	.word	0x0000946c
    36a0:	00009490 	.word	0x00009490
    36a4:	000094a8 	.word	0x000094a8
    36a8:	000094c0 	.word	0x000094c0
    36ac:	000094d8 	.word	0x000094d8
    36b0:	000094e4 	.word	0x000094e4
    36b4:	41008000 	.word	0x41008000
    36b8:	000024a1 	.word	0x000024a1

000036bc <SysTick_Handler>:
/**
  *	SysTick Handler
  */
void SysTick_Handler(void)
{
	systick_count++;
    36bc:	4a1b      	ldr	r2, [pc, #108]	; (372c <SysTick_Handler+0x70>)
    36be:	6813      	ldr	r3, [r2, #0]
    36c0:	3301      	adds	r3, #1
    36c2:	6013      	str	r3, [r2, #0]
	
	/* LIDAR STOP and RESET requests/responses */
	if (lidar_timer > 0) {
    36c4:	4b1a      	ldr	r3, [pc, #104]	; (3730 <SysTick_Handler+0x74>)
    36c6:	881b      	ldrh	r3, [r3, #0]
    36c8:	b29b      	uxth	r3, r3
    36ca:	b123      	cbz	r3, 36d6 <SysTick_Handler+0x1a>
		//if (DEBUG) {
			//printf("lidar_timer = %u\r\n", lidar_timer);
		//}
		lidar_timer--;
    36cc:	4a18      	ldr	r2, [pc, #96]	; (3730 <SysTick_Handler+0x74>)
    36ce:	8813      	ldrh	r3, [r2, #0]
    36d0:	3b01      	subs	r3, #1
    36d2:	b29b      	uxth	r3, r3
    36d4:	8013      	strh	r3, [r2, #0]
	}
	
	switch (status) {
    36d6:	4b17      	ldr	r3, [pc, #92]	; (3734 <SysTick_Handler+0x78>)
    36d8:	781b      	ldrb	r3, [r3, #0]
    36da:	b2db      	uxtb	r3, r3
    36dc:	2b01      	cmp	r3, #1
    36de:	d007      	beq.n	36f0 <SysTick_Handler+0x34>
    36e0:	b113      	cbz	r3, 36e8 <SysTick_Handler+0x2c>
    36e2:	2b02      	cmp	r3, #2
    36e4:	d013      	beq.n	370e <SysTick_Handler+0x52>
    36e6:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36e8:	2240      	movs	r2, #64	; 0x40
    36ea:	4b13      	ldr	r3, [pc, #76]	; (3738 <SysTick_Handler+0x7c>)
    36ec:	619a      	str	r2, [r3, #24]
    36ee:	4770      	bx	lr
		case STATUS_IDLE: /* Solid light */
			gpio_set_pin_level(LED_STATUS, true);
			break;
		case STATUS_PROCESSING:
			if (systick_count % BLINK_PROCESSING == 0)
    36f0:	4b0e      	ldr	r3, [pc, #56]	; (372c <SysTick_Handler+0x70>)
    36f2:	681a      	ldr	r2, [r3, #0]
    36f4:	4b11      	ldr	r3, [pc, #68]	; (373c <SysTick_Handler+0x80>)
    36f6:	fba3 1302 	umull	r1, r3, r3, r2
    36fa:	095b      	lsrs	r3, r3, #5
    36fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3700:	fb01 2313 	mls	r3, r1, r3, r2
    3704:	b983      	cbnz	r3, 3728 <SysTick_Handler+0x6c>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    3706:	2240      	movs	r2, #64	; 0x40
    3708:	4b0b      	ldr	r3, [pc, #44]	; (3738 <SysTick_Handler+0x7c>)
    370a:	61da      	str	r2, [r3, #28]
    370c:	4770      	bx	lr
				gpio_toggle_pin_level(LED_STATUS);
			break;
		case STATUS_ERROR:
			if (systick_count % BLINK_ERROR == 0)
    370e:	4b07      	ldr	r3, [pc, #28]	; (372c <SysTick_Handler+0x70>)
    3710:	681a      	ldr	r2, [r3, #0]
    3712:	4b0b      	ldr	r3, [pc, #44]	; (3740 <SysTick_Handler+0x84>)
    3714:	fba3 1302 	umull	r1, r3, r3, r2
    3718:	095b      	lsrs	r3, r3, #5
    371a:	2164      	movs	r1, #100	; 0x64
    371c:	fb01 2313 	mls	r3, r1, r3, r2
    3720:	b913      	cbnz	r3, 3728 <SysTick_Handler+0x6c>
    3722:	2240      	movs	r2, #64	; 0x40
    3724:	4b04      	ldr	r3, [pc, #16]	; (3738 <SysTick_Handler+0x7c>)
    3726:	61da      	str	r2, [r3, #28]
    3728:	4770      	bx	lr
    372a:	bf00      	nop
    372c:	200007e8 	.word	0x200007e8
    3730:	200012c8 	.word	0x200012c8
    3734:	200012d1 	.word	0x200012d1
    3738:	41008000 	.word	0x41008000
    373c:	10624dd3 	.word	0x10624dd3
    3740:	51eb851f 	.word	0x51eb851f

00003744 <SDMMC_init>:

/**
  *	Initializes SD MMC stack
  */
void SDMMC_init(void)
{
    3744:	b508      	push	{r3, lr}
	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    3746:	4903      	ldr	r1, [pc, #12]	; (3754 <SDMMC_init+0x10>)
    3748:	460a      	mov	r2, r1
    374a:	3104      	adds	r1, #4
    374c:	4802      	ldr	r0, [pc, #8]	; (3758 <SDMMC_init+0x14>)
    374e:	4b03      	ldr	r3, [pc, #12]	; (375c <SDMMC_init+0x18>)
    3750:	4798      	blx	r3
    3752:	bd08      	pop	{r3, pc}
    3754:	20000084 	.word	0x20000084
    3758:	20001270 	.word	0x20001270
    375c:	00004fad 	.word	0x00004fad

00003760 <SD_menu>:
1. Back to main menu\r\n \
2. Write file\r\n \
3. Get SD status\r\n";

void SD_menu(void)
{
    3760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3764:	f5ad 6dc1 	sub.w	sp, sp, #1544	; 0x608
	uint16_t user_selection = 0;
    3768:	2400      	movs	r4, #0
    376a:	f8ad 4606 	strh.w	r4, [sp, #1542]	; 0x606
	TCHAR filename[FILENAME_MAX] = {0};
    376e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3772:	4621      	mov	r1, r4
    3774:	a881      	add	r0, sp, #516	; 0x204
    3776:	4d26      	ldr	r5, [pc, #152]	; (3810 <SD_menu+0xb0>)
    3778:	47a8      	blx	r5
	char data[512] = {0};
    377a:	f44f 7200 	mov.w	r2, #512	; 0x200
    377e:	4621      	mov	r1, r4
    3780:	a801      	add	r0, sp, #4
    3782:	47a8      	blx	r5
	
	while (1) {
		printf("%s", sd_menu_txt);
    3784:	4e23      	ldr	r6, [pc, #140]	; (3814 <SD_menu+0xb4>)
    3786:	4d24      	ldr	r5, [pc, #144]	; (3818 <SD_menu+0xb8>)
    3788:	4c24      	ldr	r4, [pc, #144]	; (381c <SD_menu+0xbc>)
    378a:	e004      	b.n	3796 <SD_menu+0x36>
		
		if (scanf("%hx", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    378c:	4b24      	ldr	r3, [pc, #144]	; (3820 <SD_menu+0xc0>)
    378e:	681b      	ldr	r3, [r3, #0]
    3790:	6858      	ldr	r0, [r3, #4]
    3792:	4b24      	ldr	r3, [pc, #144]	; (3824 <SD_menu+0xc4>)
    3794:	4798      	blx	r3
		printf("%s", sd_menu_txt);
    3796:	4631      	mov	r1, r6
    3798:	4628      	mov	r0, r5
    379a:	47a0      	blx	r4
		if (scanf("%hx", &user_selection) == 0) {
    379c:	f20d 6106 	addw	r1, sp, #1542	; 0x606
    37a0:	4821      	ldr	r0, [pc, #132]	; (3828 <SD_menu+0xc8>)
    37a2:	4b22      	ldr	r3, [pc, #136]	; (382c <SD_menu+0xcc>)
    37a4:	4798      	blx	r3
    37a6:	2800      	cmp	r0, #0
    37a8:	d0f0      	beq.n	378c <SD_menu+0x2c>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    37aa:	f8bd 1606 	ldrh.w	r1, [sp, #1542]	; 0x606
    37ae:	4820      	ldr	r0, [pc, #128]	; (3830 <SD_menu+0xd0>)
    37b0:	47a0      	blx	r4
		
		switch (user_selection) {
    37b2:	f8bd 3606 	ldrh.w	r3, [sp, #1542]	; 0x606
    37b6:	2b02      	cmp	r3, #2
    37b8:	d00a      	beq.n	37d0 <SD_menu+0x70>
    37ba:	2b03      	cmp	r3, #3
    37bc:	d022      	beq.n	3804 <SD_menu+0xa4>
    37be:	2b01      	cmp	r3, #1
    37c0:	d1e9      	bne.n	3796 <SD_menu+0x36>
			case 1:
			printf("\r\nReturning to main menu\r\n");
    37c2:	481c      	ldr	r0, [pc, #112]	; (3834 <SD_menu+0xd4>)
    37c4:	4b1c      	ldr	r3, [pc, #112]	; (3838 <SD_menu+0xd8>)
    37c6:	4798      	blx	r3
				printf("\r\nRetrieving SD status\r\n");
				FATFS_sd_status();
				break;
		}
	}
    37c8:	f50d 6dc1 	add.w	sp, sp, #1544	; 0x608
    37cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				printf("\r\nEnter filename >> ");
    37d0:	481a      	ldr	r0, [pc, #104]	; (383c <SD_menu+0xdc>)
    37d2:	47a0      	blx	r4
				scanf("%s", filename);
    37d4:	a981      	add	r1, sp, #516	; 0x204
    37d6:	4628      	mov	r0, r5
    37d8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 382c <SD_menu+0xcc>
    37dc:	47c0      	blx	r8
				printf("%s\r\n", filename);
    37de:	4f18      	ldr	r7, [pc, #96]	; (3840 <SD_menu+0xe0>)
    37e0:	a981      	add	r1, sp, #516	; 0x204
    37e2:	4638      	mov	r0, r7
    37e4:	47a0      	blx	r4
				printf("Enter data >> ");
    37e6:	4817      	ldr	r0, [pc, #92]	; (3844 <SD_menu+0xe4>)
    37e8:	47a0      	blx	r4
				scanf("%s", data);
    37ea:	a901      	add	r1, sp, #4
    37ec:	4628      	mov	r0, r5
    37ee:	47c0      	blx	r8
				printf("%s\r\n", data);
    37f0:	a901      	add	r1, sp, #4
    37f2:	4638      	mov	r0, r7
    37f4:	47a0      	blx	r4
				FATFS_write_file(filename, data, 512);
    37f6:	f44f 7200 	mov.w	r2, #512	; 0x200
    37fa:	a901      	add	r1, sp, #4
    37fc:	a881      	add	r0, sp, #516	; 0x204
    37fe:	4b12      	ldr	r3, [pc, #72]	; (3848 <SD_menu+0xe8>)
    3800:	4798      	blx	r3
				break;
    3802:	e7c8      	b.n	3796 <SD_menu+0x36>
				printf("\r\nRetrieving SD status\r\n");
    3804:	4811      	ldr	r0, [pc, #68]	; (384c <SD_menu+0xec>)
    3806:	4b0c      	ldr	r3, [pc, #48]	; (3838 <SD_menu+0xd8>)
    3808:	4798      	blx	r3
				FATFS_sd_status();
    380a:	4b11      	ldr	r3, [pc, #68]	; (3850 <SD_menu+0xf0>)
    380c:	4798      	blx	r3
				break;
    380e:	e7c2      	b.n	3796 <SD_menu+0x36>
    3810:	00006bbd 	.word	0x00006bbd
    3814:	2000008c 	.word	0x2000008c
    3818:	00008b78 	.word	0x00008b78
    381c:	00006d25 	.word	0x00006d25
    3820:	200002f0 	.word	0x200002f0
    3824:	00006985 	.word	0x00006985
    3828:	00009504 	.word	0x00009504
    382c:	00006e3d 	.word	0x00006e3d
    3830:	00008b7c 	.word	0x00008b7c
    3834:	00008b98 	.word	0x00008b98
    3838:	00006e0d 	.word	0x00006e0d
    383c:	00009508 	.word	0x00009508
    3840:	00008f6c 	.word	0x00008f6c
    3844:	00009520 	.word	0x00009520
    3848:	00000c65 	.word	0x00000c65
    384c:	00009530 	.word	0x00009530
    3850:	00000c11 	.word	0x00000c11

00003854 <LIDAR_PWM_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    3854:	4a3b      	ldr	r2, [pc, #236]	; (3944 <LIDAR_PWM_init+0xf0>)
    3856:	69d3      	ldr	r3, [r2, #28]
    3858:	f043 0320 	orr.w	r3, r3, #32
    385c:	61d3      	str	r3, [r2, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    385e:	2240      	movs	r2, #64	; 0x40
    3860:	4b39      	ldr	r3, [pc, #228]	; (3948 <LIDAR_PWM_init+0xf4>)
    3862:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3866:	4b39      	ldr	r3, [pc, #228]	; (394c <LIDAR_PWM_init+0xf8>)
    3868:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    386c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3870:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3874:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3878:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    387c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3884:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3888:	f44f 7100 	mov.w	r1, #512	; 0x200
    388c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3890:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3894:	f042 0204 	orr.w	r2, r2, #4
    3898:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    389c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    38a0:	4b2b      	ldr	r3, [pc, #172]	; (3950 <LIDAR_PWM_init+0xfc>)
    38a2:	691b      	ldr	r3, [r3, #16]
void LIDAR_PWM_init(void)
{
	LIDAR_PWM_CLOCK_init();
	LIDAR_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    38a4:	f013 0f01 	tst.w	r3, #1
    38a8:	d11f      	bne.n	38ea <LIDAR_PWM_init+0x96>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38aa:	4a29      	ldr	r2, [pc, #164]	; (3950 <LIDAR_PWM_init+0xfc>)
    38ac:	6913      	ldr	r3, [r2, #16]
    38ae:	f013 0f03 	tst.w	r3, #3
    38b2:	d1fb      	bne.n	38ac <LIDAR_PWM_init+0x58>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    38b4:	4b26      	ldr	r3, [pc, #152]	; (3950 <LIDAR_PWM_init+0xfc>)
    38b6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    38b8:	f013 0f02 	tst.w	r3, #2
    38bc:	d00d      	beq.n	38da <LIDAR_PWM_init+0x86>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    38be:	4a24      	ldr	r2, [pc, #144]	; (3950 <LIDAR_PWM_init+0xfc>)
    38c0:	6813      	ldr	r3, [r2, #0]
    38c2:	f023 0302 	bic.w	r3, r3, #2
    38c6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38c8:	6913      	ldr	r3, [r2, #16]
    38ca:	f013 0f03 	tst.w	r3, #3
    38ce:	d1fb      	bne.n	38c8 <LIDAR_PWM_init+0x74>
    38d0:	4a1f      	ldr	r2, [pc, #124]	; (3950 <LIDAR_PWM_init+0xfc>)
    38d2:	6913      	ldr	r3, [r2, #16]
    38d4:	f013 0f02 	tst.w	r3, #2
    38d8:	d1fb      	bne.n	38d2 <LIDAR_PWM_init+0x7e>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    38da:	2201      	movs	r2, #1
    38dc:	4b1c      	ldr	r3, [pc, #112]	; (3950 <LIDAR_PWM_init+0xfc>)
    38de:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38e0:	461a      	mov	r2, r3
    38e2:	6913      	ldr	r3, [r2, #16]
    38e4:	f013 0f03 	tst.w	r3, #3
    38e8:	d1fb      	bne.n	38e2 <LIDAR_PWM_init+0x8e>
    38ea:	4a19      	ldr	r2, [pc, #100]	; (3950 <LIDAR_PWM_init+0xfc>)
    38ec:	6913      	ldr	r3, [r2, #16]
    38ee:	f013 0f01 	tst.w	r3, #1
    38f2:	d1fb      	bne.n	38ec <LIDAR_PWM_init+0x98>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    38f4:	4a17      	ldr	r2, [pc, #92]	; (3954 <LIDAR_PWM_init+0x100>)
    38f6:	4b16      	ldr	r3, [pc, #88]	; (3950 <LIDAR_PWM_init+0xfc>)
    38f8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38fa:	461a      	mov	r2, r3
    38fc:	6913      	ldr	r3, [r2, #16]
    38fe:	f013 0f03 	tst.w	r3, #3
    3902:	d1fb      	bne.n	38fc <LIDAR_PWM_init+0xa8>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    3904:	4b12      	ldr	r3, [pc, #72]	; (3950 <LIDAR_PWM_init+0xfc>)
    3906:	2200      	movs	r2, #0
    3908:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    390a:	22ff      	movs	r2, #255	; 0xff
    390c:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    390e:	2203      	movs	r2, #3
    3910:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3912:	223c      	movs	r2, #60	; 0x3c
    3914:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3916:	461a      	mov	r2, r3
    3918:	6913      	ldr	r3, [r2, #16]
    391a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    391e:	d1fb      	bne.n	3918 <LIDAR_PWM_init+0xc4>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3920:	2200      	movs	r2, #0
    3922:	4b0b      	ldr	r3, [pc, #44]	; (3950 <LIDAR_PWM_init+0xfc>)
    3924:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3926:	461a      	mov	r2, r3
    3928:	6913      	ldr	r3, [r2, #16]
    392a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    392e:	d1fb      	bne.n	3928 <LIDAR_PWM_init+0xd4>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3930:	4a07      	ldr	r2, [pc, #28]	; (3950 <LIDAR_PWM_init+0xfc>)
    3932:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3934:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3938:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    393a:	6913      	ldr	r3, [r2, #16]
    393c:	f013 0f03 	tst.w	r3, #3
    3940:	d1fb      	bne.n	393a <LIDAR_PWM_init+0xe6>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
    3942:	4770      	bx	lr
    3944:	40000800 	.word	0x40000800
    3948:	40001c00 	.word	0x40001c00
    394c:	41008000 	.word	0x41008000
    3950:	42001400 	.word	0x42001400
    3954:	12000310 	.word	0x12000310

00003958 <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3958:	4b19      	ldr	r3, [pc, #100]	; (39c0 <LIDAR_PWM_start+0x68>)
    395a:	691b      	ldr	r3, [r3, #16]
/**
  * Starts LiDAR PWM motor
  */ 
void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    395c:	f013 0f01 	tst.w	r3, #1
    3960:	d117      	bne.n	3992 <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3962:	4a17      	ldr	r2, [pc, #92]	; (39c0 <LIDAR_PWM_start+0x68>)
    3964:	6913      	ldr	r3, [r2, #16]
    3966:	f013 0f03 	tst.w	r3, #3
    396a:	d1fb      	bne.n	3964 <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    396c:	4b14      	ldr	r3, [pc, #80]	; (39c0 <LIDAR_PWM_start+0x68>)
    396e:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    3970:	f013 0f02 	tst.w	r3, #2
    3974:	d00d      	beq.n	3992 <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3976:	4a12      	ldr	r2, [pc, #72]	; (39c0 <LIDAR_PWM_start+0x68>)
    3978:	6813      	ldr	r3, [r2, #0]
    397a:	f023 0302 	bic.w	r3, r3, #2
    397e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3980:	6913      	ldr	r3, [r2, #16]
    3982:	f013 0f03 	tst.w	r3, #3
    3986:	d1fb      	bne.n	3980 <LIDAR_PWM_start+0x28>
    3988:	4a0d      	ldr	r2, [pc, #52]	; (39c0 <LIDAR_PWM_start+0x68>)
    398a:	6913      	ldr	r3, [r2, #16]
    398c:	f013 0f02 	tst.w	r3, #2
    3990:	d1fb      	bne.n	398a <LIDAR_PWM_start+0x32>
    3992:	4a0b      	ldr	r2, [pc, #44]	; (39c0 <LIDAR_PWM_start+0x68>)
    3994:	6913      	ldr	r3, [r2, #16]
    3996:	f013 0f01 	tst.w	r3, #1
    399a:	d1fb      	bne.n	3994 <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    399c:	2224      	movs	r2, #36	; 0x24
    399e:	4b08      	ldr	r3, [pc, #32]	; (39c0 <LIDAR_PWM_start+0x68>)
    39a0:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    39a2:	461a      	mov	r2, r3
    39a4:	6913      	ldr	r3, [r2, #16]
    39a6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    39aa:	d1fb      	bne.n	39a4 <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39ac:	4a04      	ldr	r2, [pc, #16]	; (39c0 <LIDAR_PWM_start+0x68>)
    39ae:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    39b0:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    39b4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    39b6:	6913      	ldr	r3, [r2, #16]
    39b8:	f013 0f03 	tst.w	r3, #3
    39bc:	d1fb      	bne.n	39b6 <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    39be:	4770      	bx	lr
    39c0:	42001400 	.word	0x42001400

000039c4 <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    39c4:	4b19      	ldr	r3, [pc, #100]	; (3a2c <LIDAR_PWM_stop+0x68>)
    39c6:	691b      	ldr	r3, [r3, #16]
/**
  * Stops LiDAR PWM motor
  */ 
void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    39c8:	f013 0f01 	tst.w	r3, #1
    39cc:	d117      	bne.n	39fe <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    39ce:	4a17      	ldr	r2, [pc, #92]	; (3a2c <LIDAR_PWM_stop+0x68>)
    39d0:	6913      	ldr	r3, [r2, #16]
    39d2:	f013 0f03 	tst.w	r3, #3
    39d6:	d1fb      	bne.n	39d0 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39d8:	4b14      	ldr	r3, [pc, #80]	; (3a2c <LIDAR_PWM_stop+0x68>)
    39da:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    39dc:	f013 0f02 	tst.w	r3, #2
    39e0:	d00d      	beq.n	39fe <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    39e2:	4a12      	ldr	r2, [pc, #72]	; (3a2c <LIDAR_PWM_stop+0x68>)
    39e4:	6813      	ldr	r3, [r2, #0]
    39e6:	f023 0302 	bic.w	r3, r3, #2
    39ea:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    39ec:	6913      	ldr	r3, [r2, #16]
    39ee:	f013 0f03 	tst.w	r3, #3
    39f2:	d1fb      	bne.n	39ec <LIDAR_PWM_stop+0x28>
    39f4:	4a0d      	ldr	r2, [pc, #52]	; (3a2c <LIDAR_PWM_stop+0x68>)
    39f6:	6913      	ldr	r3, [r2, #16]
    39f8:	f013 0f02 	tst.w	r3, #2
    39fc:	d1fb      	bne.n	39f6 <LIDAR_PWM_stop+0x32>
    39fe:	4a0b      	ldr	r2, [pc, #44]	; (3a2c <LIDAR_PWM_stop+0x68>)
    3a00:	6913      	ldr	r3, [r2, #16]
    3a02:	f013 0f01 	tst.w	r3, #1
    3a06:	d1fb      	bne.n	3a00 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3a08:	2200      	movs	r2, #0
    3a0a:	4b08      	ldr	r3, [pc, #32]	; (3a2c <LIDAR_PWM_stop+0x68>)
    3a0c:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a0e:	461a      	mov	r2, r3
    3a10:	6913      	ldr	r3, [r2, #16]
    3a12:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3a16:	d1fb      	bne.n	3a10 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3a18:	4a04      	ldr	r2, [pc, #16]	; (3a2c <LIDAR_PWM_stop+0x68>)
    3a1a:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3a1c:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3a20:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a22:	6913      	ldr	r3, [r2, #16]
    3a24:	f013 0f03 	tst.w	r3, #3
    3a28:	d1fb      	bne.n	3a22 <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    3a2a:	4770      	bx	lr
    3a2c:	42001400 	.word	0x42001400

00003a30 <LIDAR_USART_init>:

/**
  * Initializes USART for LiDAR
  */ 
void LIDAR_USART_init(void)
{
    3a30:	b510      	push	{r4, lr}
    3a32:	4b1b      	ldr	r3, [pc, #108]	; (3aa0 <LIDAR_USART_init+0x70>)
    3a34:	2240      	movs	r2, #64	; 0x40
    3a36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    3a3a:	2243      	movs	r2, #67	; 0x43
    3a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    3a40:	4a18      	ldr	r2, [pc, #96]	; (3aa4 <LIDAR_USART_init+0x74>)
    3a42:	6953      	ldr	r3, [r2, #20]
    3a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3a48:	6153      	str	r3, [r2, #20]
	LIDAR_USART_CLOCK_init();
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
    3a4a:	4c17      	ldr	r4, [pc, #92]	; (3aa8 <LIDAR_USART_init+0x78>)
    3a4c:	2200      	movs	r2, #0
    3a4e:	4917      	ldr	r1, [pc, #92]	; (3aac <LIDAR_USART_init+0x7c>)
    3a50:	4620      	mov	r0, r4
    3a52:	4b17      	ldr	r3, [pc, #92]	; (3ab0 <LIDAR_USART_init+0x80>)
    3a54:	4798      	blx	r3
	usart_sync_enable(&LIDAR_USART);
    3a56:	4620      	mov	r0, r4
    3a58:	4b16      	ldr	r3, [pc, #88]	; (3ab4 <LIDAR_USART_init+0x84>)
    3a5a:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3a5c:	4b16      	ldr	r3, [pc, #88]	; (3ab8 <LIDAR_USART_init+0x88>)
    3a5e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    3a62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3a66:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3a6e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3a72:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3a76:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3a7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3a7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    3a82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3a86:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3a8e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3a92:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3a96:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3a9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    3a9e:	bd10      	pop	{r4, pc}
    3aa0:	40001c00 	.word	0x40001c00
    3aa4:	40000800 	.word	0x40000800
    3aa8:	200012bc 	.word	0x200012bc
    3aac:	40003000 	.word	0x40003000
    3ab0:	0000288d 	.word	0x0000288d
    3ab4:	000028d5 	.word	0x000028d5
    3ab8:	41008000 	.word	0x41008000

00003abc <LIDAR_USART_send>:

/**
  * Sends data through USART to LiDAR
  */ 
void LIDAR_USART_send(uint8_t* message, uint16_t length)
{
    3abc:	b530      	push	{r4, r5, lr}
    3abe:	b083      	sub	sp, #12
    3ac0:	4604      	mov	r4, r0
    3ac2:	460d      	mov	r5, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    3ac4:	a901      	add	r1, sp, #4
    3ac6:	4805      	ldr	r0, [pc, #20]	; (3adc <LIDAR_USART_send+0x20>)
    3ac8:	4b05      	ldr	r3, [pc, #20]	; (3ae0 <LIDAR_USART_send+0x24>)
    3aca:	4798      	blx	r3
	
	io_write(io, message, length);
    3acc:	462a      	mov	r2, r5
    3ace:	4621      	mov	r1, r4
    3ad0:	9801      	ldr	r0, [sp, #4]
    3ad2:	4b04      	ldr	r3, [pc, #16]	; (3ae4 <LIDAR_USART_send+0x28>)
    3ad4:	4798      	blx	r3
}
    3ad6:	b003      	add	sp, #12
    3ad8:	bd30      	pop	{r4, r5, pc}
    3ada:	bf00      	nop
    3adc:	200012bc 	.word	0x200012bc
    3ae0:	00002901 	.word	0x00002901
    3ae4:	000024c1 	.word	0x000024c1

00003ae8 <LIDAR_USART_read_byte>:
  * Reads received byte from LiDAR through USART
  * 
  * @return uint8_t : received byte
  */ 
uint8_t LIDAR_USART_read_byte(void)
{
    3ae8:	b500      	push	{lr}
    3aea:	b083      	sub	sp, #12
	uint8_t buf;
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    3aec:	4669      	mov	r1, sp
    3aee:	4807      	ldr	r0, [pc, #28]	; (3b0c <LIDAR_USART_read_byte+0x24>)
    3af0:	4b07      	ldr	r3, [pc, #28]	; (3b10 <LIDAR_USART_read_byte+0x28>)
    3af2:	4798      	blx	r3
	
	io_read(io, &buf, 1);
    3af4:	2201      	movs	r2, #1
    3af6:	f10d 0107 	add.w	r1, sp, #7
    3afa:	9800      	ldr	r0, [sp, #0]
    3afc:	4b05      	ldr	r3, [pc, #20]	; (3b14 <LIDAR_USART_read_byte+0x2c>)
    3afe:	4798      	blx	r3
	return buf;
}
    3b00:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3b04:	b003      	add	sp, #12
    3b06:	f85d fb04 	ldr.w	pc, [sp], #4
    3b0a:	bf00      	nop
    3b0c:	200012bc 	.word	0x200012bc
    3b10:	00002901 	.word	0x00002901
    3b14:	000024f1 	.word	0x000024f1

00003b18 <LIDAR_menu>:
/**
  * Menu for LiDAR command options in order to test and see printouts for each
  * of the requests and responses
  */ 
void LIDAR_menu(void)
{
    3b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b1c:	b086      	sub	sp, #24
	uint16_t user_selection = 0;
    3b1e:	2300      	movs	r3, #0
    3b20:	f8ad 3016 	strh.w	r3, [sp, #22]
	while (1) {
		if (processing)
    3b24:	4e8e      	ldr	r6, [pc, #568]	; (3d60 <LIDAR_menu+0x248>)
			LIDAR_process();
		else {
			printf("%s", lidar_menu_txt);
    3b26:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 3dd0 <LIDAR_menu+0x2b8>
    3b2a:	4f8e      	ldr	r7, [pc, #568]	; (3d64 <LIDAR_menu+0x24c>)
    3b2c:	e0f5      	b.n	3d1a <LIDAR_menu+0x202>
void LIDAR_process(void)
{
	unsigned data_idx;
	
	/* STOP and RESET requests */
	if (lidar_timing) {
    3b2e:	4b8e      	ldr	r3, [pc, #568]	; (3d68 <LIDAR_menu+0x250>)
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	b163      	cbz	r3, 3b4e <LIDAR_menu+0x36>
		switch (lidar_request) {
    3b34:	4b8d      	ldr	r3, [pc, #564]	; (3d6c <LIDAR_menu+0x254>)
    3b36:	781b      	ldrb	r3, [r3, #0]
    3b38:	2b25      	cmp	r3, #37	; 0x25
    3b3a:	d005      	beq.n	3b48 <LIDAR_menu+0x30>
    3b3c:	2b40      	cmp	r3, #64	; 0x40
    3b3e:	f040 80ec 	bne.w	3d1a <LIDAR_menu+0x202>
			case LIDAR_STOP:
				LIDAR_RES_stop();
				break;
			case LIDAR_RESET:
				LIDAR_RES_reset();
    3b42:	4b8b      	ldr	r3, [pc, #556]	; (3d70 <LIDAR_menu+0x258>)
    3b44:	4798      	blx	r3
    3b46:	e0e8      	b.n	3d1a <LIDAR_menu+0x202>
				LIDAR_RES_stop();
    3b48:	4b8a      	ldr	r3, [pc, #552]	; (3d74 <LIDAR_menu+0x25c>)
    3b4a:	4798      	blx	r3
    3b4c:	e0e5      	b.n	3d1a <LIDAR_menu+0x202>
				break;
		};
		return;
	}
	
	while (!usart_sync_is_rx_not_empty(&LIDAR_USART));
    3b4e:	4d8a      	ldr	r5, [pc, #552]	; (3d78 <LIDAR_menu+0x260>)
    3b50:	4c8a      	ldr	r4, [pc, #552]	; (3d7c <LIDAR_menu+0x264>)
    3b52:	4628      	mov	r0, r5
    3b54:	47a0      	blx	r4
    3b56:	2800      	cmp	r0, #0
    3b58:	d0fb      	beq.n	3b52 <LIDAR_menu+0x3a>
	
	/* Process response descriptor */
	switch (byte_count) {
    3b5a:	4b89      	ldr	r3, [pc, #548]	; (3d80 <LIDAR_menu+0x268>)
    3b5c:	681c      	ldr	r4, [r3, #0]
    3b5e:	2c06      	cmp	r4, #6
    3b60:	d84d      	bhi.n	3bfe <LIDAR_menu+0xe6>
    3b62:	e8df f004 	tbb	[pc, r4]
    3b66:	0d04      	.short	0x0d04
    3b68:	372b1f16 	.word	0x372b1f16
    3b6c:	43          	.byte	0x43
    3b6d:	00          	.byte	0x00
		case 0:
			resp_desc.start1 = LIDAR_USART_read_byte();
    3b6e:	4b85      	ldr	r3, [pc, #532]	; (3d84 <LIDAR_menu+0x26c>)
    3b70:	4798      	blx	r3
    3b72:	4b85      	ldr	r3, [pc, #532]	; (3d88 <LIDAR_menu+0x270>)
    3b74:	7018      	strb	r0, [r3, #0]
			byte_count++;
    3b76:	4a82      	ldr	r2, [pc, #520]	; (3d80 <LIDAR_menu+0x268>)
    3b78:	6813      	ldr	r3, [r2, #0]
    3b7a:	3301      	adds	r3, #1
    3b7c:	6013      	str	r3, [r2, #0]
    3b7e:	e0cc      	b.n	3d1a <LIDAR_menu+0x202>
			return;
		
		case 1:
			resp_desc.start2 = LIDAR_USART_read_byte();
    3b80:	4b80      	ldr	r3, [pc, #512]	; (3d84 <LIDAR_menu+0x26c>)
    3b82:	4798      	blx	r3
    3b84:	4b80      	ldr	r3, [pc, #512]	; (3d88 <LIDAR_menu+0x270>)
    3b86:	7058      	strb	r0, [r3, #1]
			byte_count++;
    3b88:	4a7d      	ldr	r2, [pc, #500]	; (3d80 <LIDAR_menu+0x268>)
    3b8a:	6813      	ldr	r3, [r2, #0]
    3b8c:	3301      	adds	r3, #1
    3b8e:	6013      	str	r3, [r2, #0]
    3b90:	e0c3      	b.n	3d1a <LIDAR_menu+0x202>
			return;
		
		case 2:
			resp_desc.response_info = LIDAR_USART_read_byte();
    3b92:	4b7c      	ldr	r3, [pc, #496]	; (3d84 <LIDAR_menu+0x26c>)
    3b94:	4798      	blx	r3
    3b96:	4b7c      	ldr	r3, [pc, #496]	; (3d88 <LIDAR_menu+0x270>)
    3b98:	6058      	str	r0, [r3, #4]
			byte_count++;
    3b9a:	4a79      	ldr	r2, [pc, #484]	; (3d80 <LIDAR_menu+0x268>)
    3b9c:	6813      	ldr	r3, [r2, #0]
    3b9e:	3301      	adds	r3, #1
    3ba0:	6013      	str	r3, [r2, #0]
    3ba2:	e0ba      	b.n	3d1a <LIDAR_menu+0x202>
			return;
		
		case 3:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    3ba4:	4b77      	ldr	r3, [pc, #476]	; (3d84 <LIDAR_menu+0x26c>)
    3ba6:	4798      	blx	r3
    3ba8:	4a77      	ldr	r2, [pc, #476]	; (3d88 <LIDAR_menu+0x270>)
    3baa:	6853      	ldr	r3, [r2, #4]
    3bac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    3bb0:	6053      	str	r3, [r2, #4]
			byte_count++;
    3bb2:	4a73      	ldr	r2, [pc, #460]	; (3d80 <LIDAR_menu+0x268>)
    3bb4:	6813      	ldr	r3, [r2, #0]
    3bb6:	3301      	adds	r3, #1
    3bb8:	6013      	str	r3, [r2, #0]
    3bba:	e0ae      	b.n	3d1a <LIDAR_menu+0x202>
			return;
		
		case 4:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    3bbc:	4b71      	ldr	r3, [pc, #452]	; (3d84 <LIDAR_menu+0x26c>)
    3bbe:	4798      	blx	r3
    3bc0:	4a71      	ldr	r2, [pc, #452]	; (3d88 <LIDAR_menu+0x270>)
    3bc2:	6853      	ldr	r3, [r2, #4]
    3bc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    3bc8:	6053      	str	r3, [r2, #4]
			byte_count++;
    3bca:	4a6d      	ldr	r2, [pc, #436]	; (3d80 <LIDAR_menu+0x268>)
    3bcc:	6813      	ldr	r3, [r2, #0]
    3bce:	3301      	adds	r3, #1
    3bd0:	6013      	str	r3, [r2, #0]
    3bd2:	e0a2      	b.n	3d1a <LIDAR_menu+0x202>
			return;
		
		case 5:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    3bd4:	4b6b      	ldr	r3, [pc, #428]	; (3d84 <LIDAR_menu+0x26c>)
    3bd6:	4798      	blx	r3
    3bd8:	4a6b      	ldr	r2, [pc, #428]	; (3d88 <LIDAR_menu+0x270>)
    3bda:	6853      	ldr	r3, [r2, #4]
    3bdc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    3be0:	6053      	str	r3, [r2, #4]
			byte_count++;
    3be2:	4a67      	ldr	r2, [pc, #412]	; (3d80 <LIDAR_menu+0x268>)
    3be4:	6813      	ldr	r3, [r2, #0]
    3be6:	3301      	adds	r3, #1
    3be8:	6013      	str	r3, [r2, #0]
    3bea:	e096      	b.n	3d1a <LIDAR_menu+0x202>
			return;
		
		case 6:
			resp_desc.data_type = LIDAR_USART_read_byte();
    3bec:	4b65      	ldr	r3, [pc, #404]	; (3d84 <LIDAR_menu+0x26c>)
    3bee:	4798      	blx	r3
    3bf0:	4b65      	ldr	r3, [pc, #404]	; (3d88 <LIDAR_menu+0x270>)
    3bf2:	7218      	strb	r0, [r3, #8]
			byte_count++;
    3bf4:	4a62      	ldr	r2, [pc, #392]	; (3d80 <LIDAR_menu+0x268>)
    3bf6:	6813      	ldr	r3, [r2, #0]
    3bf8:	3301      	adds	r3, #1
    3bfa:	6013      	str	r3, [r2, #0]
    3bfc:	e08d      	b.n	3d1a <LIDAR_menu+0x202>
			return;
		
        /* Process response data packets */
		default:
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    3bfe:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    3c00:	4b60      	ldr	r3, [pc, #384]	; (3d84 <LIDAR_menu+0x26c>)
    3c02:	4798      	blx	r3
    3c04:	4b61      	ldr	r3, [pc, #388]	; (3d8c <LIDAR_menu+0x274>)
    3c06:	5518      	strb	r0, [r3, r4]
			if (lidar_request == LIDAR_EXPRESS_SCAN) {
    3c08:	4b58      	ldr	r3, [pc, #352]	; (3d6c <LIDAR_menu+0x254>)
    3c0a:	7819      	ldrb	r1, [r3, #0]
    3c0c:	2982      	cmp	r1, #130	; 0x82
    3c0e:	d016      	beq.n	3c3e <LIDAR_menu+0x126>
						byte_count--;
						return;
					}
				}
			}
			byte_count++;
    3c10:	4b5b      	ldr	r3, [pc, #364]	; (3d80 <LIDAR_menu+0x268>)
    3c12:	681a      	ldr	r2, [r3, #0]
    3c14:	3201      	adds	r2, #1
    3c16:	601a      	str	r2, [r3, #0]
	};
	
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    3c18:	4b5b      	ldr	r3, [pc, #364]	; (3d88 <LIDAR_menu+0x270>)
    3c1a:	685b      	ldr	r3, [r3, #4]
    3c1c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3c20:	3307      	adds	r3, #7
    3c22:	429a      	cmp	r2, r3
    3c24:	d179      	bne.n	3d1a <LIDAR_menu+0x202>
		switch(lidar_request) {
    3c26:	2950      	cmp	r1, #80	; 0x50
    3c28:	d068      	beq.n	3cfc <LIDAR_menu+0x1e4>
    3c2a:	d948      	bls.n	3cbe <LIDAR_menu+0x1a6>
    3c2c:	2959      	cmp	r1, #89	; 0x59
    3c2e:	d06c      	beq.n	3d0a <LIDAR_menu+0x1f2>
    3c30:	2982      	cmp	r1, #130	; 0x82
    3c32:	d018      	beq.n	3c66 <LIDAR_menu+0x14e>
    3c34:	2952      	cmp	r1, #82	; 0x52
    3c36:	d170      	bne.n	3d1a <LIDAR_menu+0x202>
			case LIDAR_GET_INFO:
				LIDAR_RES_get_info();
				break;

			case LIDAR_GET_HEALTH:
				LIDAR_RES_get_health();
    3c38:	4b55      	ldr	r3, [pc, #340]	; (3d90 <LIDAR_menu+0x278>)
    3c3a:	4798      	blx	r3
    3c3c:	e060      	b.n	3d00 <LIDAR_menu+0x1e8>
                if (data_idx == 0) { 
    3c3e:	b92c      	cbnz	r4, 3c4c <LIDAR_menu+0x134>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    3c40:	4b52      	ldr	r3, [pc, #328]	; (3d8c <LIDAR_menu+0x274>)
    3c42:	781b      	ldrb	r3, [r3, #0]
    3c44:	091b      	lsrs	r3, r3, #4
    3c46:	2b0a      	cmp	r3, #10
    3c48:	d167      	bne.n	3d1a <LIDAR_menu+0x202>
    3c4a:	e001      	b.n	3c50 <LIDAR_menu+0x138>
				else if (data_idx == 1) {
    3c4c:	2c01      	cmp	r4, #1
    3c4e:	d02c      	beq.n	3caa <LIDAR_menu+0x192>
			byte_count++;
    3c50:	4b4b      	ldr	r3, [pc, #300]	; (3d80 <LIDAR_menu+0x268>)
    3c52:	681a      	ldr	r2, [r3, #0]
    3c54:	3201      	adds	r2, #1
    3c56:	601a      	str	r2, [r3, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    3c58:	4b4b      	ldr	r3, [pc, #300]	; (3d88 <LIDAR_menu+0x270>)
    3c5a:	685b      	ldr	r3, [r3, #4]
    3c5c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3c60:	3307      	adds	r3, #7
    3c62:	4293      	cmp	r3, r2
    3c64:	d159      	bne.n	3d1a <LIDAR_menu+0x202>
				LIDAR_RES_express_scan();
    3c66:	4b4b      	ldr	r3, [pc, #300]	; (3d94 <LIDAR_menu+0x27c>)
    3c68:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    3c6a:	4b4b      	ldr	r3, [pc, #300]	; (3d98 <LIDAR_menu+0x280>)
    3c6c:	681b      	ldr	r3, [r3, #0]
    3c6e:	2b3f      	cmp	r3, #63	; 0x3f
    3c70:	d953      	bls.n	3d1a <LIDAR_menu+0x202>
					LIDAR_PWM_stop();
    3c72:	4b4a      	ldr	r3, [pc, #296]	; (3d9c <LIDAR_menu+0x284>)
    3c74:	4798      	blx	r3
					LIDAR_REQ_stop();
    3c76:	4b4a      	ldr	r3, [pc, #296]	; (3da0 <LIDAR_menu+0x288>)
    3c78:	4798      	blx	r3
    3c7a:	4c4a      	ldr	r4, [pc, #296]	; (3da4 <LIDAR_menu+0x28c>)
  *	Prints cabin data
  */ 	
void LIDAR_print_cabins(void) 
{
	int i;
	for (i=0; i<MAX_SCANS; i++) {
    3c7c:	2500      	movs	r5, #0
		printf("{\"C[%04u]\":{\"S\":%u,\"SA\":%u,\"A1\":%u,\"A2\":%u,\"D1\":%u,\"D2\":%u}}\r\n",
    3c7e:	f8df a154 	ldr.w	sl, [pc, #340]	; 3dd4 <LIDAR_menu+0x2bc>
    3c82:	f8df 913c 	ldr.w	r9, [pc, #316]	; 3dc0 <LIDAR_menu+0x2a8>
    3c86:	8923      	ldrh	r3, [r4, #8]
    3c88:	7822      	ldrb	r2, [r4, #0]
    3c8a:	88e1      	ldrh	r1, [r4, #6]
    3c8c:	9103      	str	r1, [sp, #12]
    3c8e:	88a1      	ldrh	r1, [r4, #4]
    3c90:	9102      	str	r1, [sp, #8]
    3c92:	78a1      	ldrb	r1, [r4, #2]
    3c94:	9101      	str	r1, [sp, #4]
    3c96:	7861      	ldrb	r1, [r4, #1]
    3c98:	9100      	str	r1, [sp, #0]
    3c9a:	4629      	mov	r1, r5
    3c9c:	4650      	mov	r0, sl
    3c9e:	47c8      	blx	r9
	for (i=0; i<MAX_SCANS; i++) {
    3ca0:	3501      	adds	r5, #1
    3ca2:	340a      	adds	r4, #10
    3ca4:	2d40      	cmp	r5, #64	; 0x40
    3ca6:	d1ee      	bne.n	3c86 <LIDAR_menu+0x16e>
    3ca8:	e02a      	b.n	3d00 <LIDAR_menu+0x1e8>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    3caa:	4b38      	ldr	r3, [pc, #224]	; (3d8c <LIDAR_menu+0x274>)
    3cac:	785b      	ldrb	r3, [r3, #1]
    3cae:	091b      	lsrs	r3, r3, #4
    3cb0:	2b05      	cmp	r3, #5
    3cb2:	d0cd      	beq.n	3c50 <LIDAR_menu+0x138>
						byte_count--;
    3cb4:	4a32      	ldr	r2, [pc, #200]	; (3d80 <LIDAR_menu+0x268>)
    3cb6:	6813      	ldr	r3, [r2, #0]
    3cb8:	3b01      	subs	r3, #1
    3cba:	6013      	str	r3, [r2, #0]
    3cbc:	e02d      	b.n	3d1a <LIDAR_menu+0x202>
		switch(lidar_request) {
    3cbe:	3920      	subs	r1, #32
    3cc0:	2901      	cmp	r1, #1
    3cc2:	d82a      	bhi.n	3d1a <LIDAR_menu+0x202>
				LIDAR_RES_scan();
    3cc4:	4b38      	ldr	r3, [pc, #224]	; (3da8 <LIDAR_menu+0x290>)
    3cc6:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    3cc8:	4b33      	ldr	r3, [pc, #204]	; (3d98 <LIDAR_menu+0x280>)
    3cca:	681b      	ldr	r3, [r3, #0]
    3ccc:	2b3f      	cmp	r3, #63	; 0x3f
    3cce:	d924      	bls.n	3d1a <LIDAR_menu+0x202>
					LIDAR_PWM_stop();
    3cd0:	4b32      	ldr	r3, [pc, #200]	; (3d9c <LIDAR_menu+0x284>)
    3cd2:	4798      	blx	r3
					LIDAR_REQ_stop();
    3cd4:	4b32      	ldr	r3, [pc, #200]	; (3da0 <LIDAR_menu+0x288>)
    3cd6:	4798      	blx	r3
    3cd8:	4c34      	ldr	r4, [pc, #208]	; (3dac <LIDAR_menu+0x294>)
	for (i=0; i<MAX_SCANS; i++) {
    3cda:	2500      	movs	r5, #0
		printf("{\"S[%04u]\":{\"Q\":%u,\"A\":%u,\"D\"%u}}\r\n",
    3cdc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 3dd8 <LIDAR_menu+0x2c0>
    3ce0:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 3dc0 <LIDAR_menu+0x2a8>
    3ce4:	8863      	ldrh	r3, [r4, #2]
    3ce6:	7822      	ldrb	r2, [r4, #0]
    3ce8:	88a1      	ldrh	r1, [r4, #4]
    3cea:	9100      	str	r1, [sp, #0]
    3cec:	4629      	mov	r1, r5
    3cee:	4650      	mov	r0, sl
    3cf0:	47c8      	blx	r9
	for (i=0; i<MAX_SCANS; i++) {
    3cf2:	3501      	adds	r5, #1
    3cf4:	3406      	adds	r4, #6
    3cf6:	2d40      	cmp	r5, #64	; 0x40
    3cf8:	d1f4      	bne.n	3ce4 <LIDAR_menu+0x1cc>
    3cfa:	e001      	b.n	3d00 <LIDAR_menu+0x1e8>
				LIDAR_RES_get_info();
    3cfc:	4b2c      	ldr	r3, [pc, #176]	; (3db0 <LIDAR_menu+0x298>)
    3cfe:	4798      	blx	r3
		byte_count = 0;
    3d00:	2300      	movs	r3, #0
    3d02:	4a1f      	ldr	r2, [pc, #124]	; (3d80 <LIDAR_menu+0x268>)
    3d04:	6013      	str	r3, [r2, #0]
		processing = 0;
    3d06:	7033      	strb	r3, [r6, #0]
    3d08:	e007      	b.n	3d1a <LIDAR_menu+0x202>
				LIDAR_RES_get_samplerate();
    3d0a:	4b2a      	ldr	r3, [pc, #168]	; (3db4 <LIDAR_menu+0x29c>)
    3d0c:	4798      	blx	r3
    3d0e:	e7f7      	b.n	3d00 <LIDAR_menu+0x1e8>
				fflush(stdin);
    3d10:	4b29      	ldr	r3, [pc, #164]	; (3db8 <LIDAR_menu+0x2a0>)
    3d12:	681b      	ldr	r3, [r3, #0]
    3d14:	6858      	ldr	r0, [r3, #4]
    3d16:	4b29      	ldr	r3, [pc, #164]	; (3dbc <LIDAR_menu+0x2a4>)
    3d18:	4798      	blx	r3
		if (processing)
    3d1a:	7833      	ldrb	r3, [r6, #0]
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	f47f af06 	bne.w	3b2e <LIDAR_menu+0x16>
			printf("%s", lidar_menu_txt);
    3d22:	4641      	mov	r1, r8
    3d24:	4638      	mov	r0, r7
    3d26:	4b26      	ldr	r3, [pc, #152]	; (3dc0 <LIDAR_menu+0x2a8>)
    3d28:	4798      	blx	r3
			if (scanf("%hx", &user_selection) == 0) {
    3d2a:	f10d 0116 	add.w	r1, sp, #22
    3d2e:	4825      	ldr	r0, [pc, #148]	; (3dc4 <LIDAR_menu+0x2ac>)
    3d30:	4b25      	ldr	r3, [pc, #148]	; (3dc8 <LIDAR_menu+0x2b0>)
    3d32:	4798      	blx	r3
    3d34:	2800      	cmp	r0, #0
    3d36:	d0eb      	beq.n	3d10 <LIDAR_menu+0x1f8>
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    3d38:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    3d3c:	4823      	ldr	r0, [pc, #140]	; (3dcc <LIDAR_menu+0x2b4>)
    3d3e:	4b20      	ldr	r3, [pc, #128]	; (3dc0 <LIDAR_menu+0x2a8>)
    3d40:	4798      	blx	r3
			switch (user_selection) {
    3d42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3d46:	3b01      	subs	r3, #1
    3d48:	2b0a      	cmp	r3, #10
    3d4a:	f200 8099 	bhi.w	3e80 <LIDAR_menu+0x368>
    3d4e:	e8df f003 	tbb	[pc, r3]
    3d52:	4b45      	.short	0x4b45
    3d54:	675f5751 	.word	0x675f5751
    3d58:	877f776f 	.word	0x877f776f
    3d5c:	8f          	.byte	0x8f
    3d5d:	00          	.byte	0x00
    3d5e:	bf00      	nop
    3d60:	2000086c 	.word	0x2000086c
    3d64:	00008b78 	.word	0x00008b78
    3d68:	200012d0 	.word	0x200012d0
    3d6c:	20000874 	.word	0x20000874
    3d70:	0000433d 	.word	0x0000433d
    3d74:	0000430d 	.word	0x0000430d
    3d78:	200012bc 	.word	0x200012bc
    3d7c:	00002929 	.word	0x00002929
    3d80:	20000870 	.word	0x20000870
    3d84:	00003ae9 	.word	0x00003ae9
    3d88:	20000c80 	.word	0x20000c80
    3d8c:	200007ec 	.word	0x200007ec
    3d90:	000045d9 	.word	0x000045d9
    3d94:	00004411 	.word	0x00004411
    3d98:	2000087c 	.word	0x2000087c
    3d9c:	000039c5 	.word	0x000039c5
    3da0:	00003efd 	.word	0x00003efd
    3da4:	20000a00 	.word	0x20000a00
    3da8:	0000436d 	.word	0x0000436d
    3dac:	20000880 	.word	0x20000880
    3db0:	00004505 	.word	0x00004505
    3db4:	0000463d 	.word	0x0000463d
    3db8:	200002f0 	.word	0x200002f0
    3dbc:	00006985 	.word	0x00006985
    3dc0:	00006d25 	.word	0x00006d25
    3dc4:	00009504 	.word	0x00009504
    3dc8:	00006e3d 	.word	0x00006e3d
    3dcc:	00008b7c 	.word	0x00008b7c
    3dd0:	200000ec 	.word	0x200000ec
    3dd4:	0000956c 	.word	0x0000956c
    3dd8:	00009548 	.word	0x00009548
					printf("\r\nReturning to main menu\r\n");
    3ddc:	482a      	ldr	r0, [pc, #168]	; (3e88 <LIDAR_menu+0x370>)
    3dde:	4b2b      	ldr	r3, [pc, #172]	; (3e8c <LIDAR_menu+0x374>)
    3de0:	4798      	blx	r3
}
    3de2:	b006      	add	sp, #24
    3de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					printf("\r\nStarting LiDAR motor\r\n");
    3de8:	4829      	ldr	r0, [pc, #164]	; (3e90 <LIDAR_menu+0x378>)
    3dea:	4b28      	ldr	r3, [pc, #160]	; (3e8c <LIDAR_menu+0x374>)
    3dec:	4798      	blx	r3
					LIDAR_PWM_start();
    3dee:	4b29      	ldr	r3, [pc, #164]	; (3e94 <LIDAR_menu+0x37c>)
    3df0:	4798      	blx	r3
					break;
    3df2:	e792      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nStopping LiDAR motor\r\n");
    3df4:	4828      	ldr	r0, [pc, #160]	; (3e98 <LIDAR_menu+0x380>)
    3df6:	4b25      	ldr	r3, [pc, #148]	; (3e8c <LIDAR_menu+0x374>)
    3df8:	4798      	blx	r3
					LIDAR_PWM_stop();
    3dfa:	4b28      	ldr	r3, [pc, #160]	; (3e9c <LIDAR_menu+0x384>)
    3dfc:	4798      	blx	r3
					break;
    3dfe:	e78c      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR stop\r\n");
    3e00:	4827      	ldr	r0, [pc, #156]	; (3ea0 <LIDAR_menu+0x388>)
    3e02:	4b22      	ldr	r3, [pc, #136]	; (3e8c <LIDAR_menu+0x374>)
    3e04:	4798      	blx	r3
					LIDAR_REQ_stop();
    3e06:	4b27      	ldr	r3, [pc, #156]	; (3ea4 <LIDAR_menu+0x38c>)
    3e08:	4798      	blx	r3
					processing = 1;
    3e0a:	2301      	movs	r3, #1
    3e0c:	7033      	strb	r3, [r6, #0]
					break;
    3e0e:	e784      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR reset\r\n");
    3e10:	4825      	ldr	r0, [pc, #148]	; (3ea8 <LIDAR_menu+0x390>)
    3e12:	4b1e      	ldr	r3, [pc, #120]	; (3e8c <LIDAR_menu+0x374>)
    3e14:	4798      	blx	r3
					LIDAR_REQ_reset();
    3e16:	4b25      	ldr	r3, [pc, #148]	; (3eac <LIDAR_menu+0x394>)
    3e18:	4798      	blx	r3
					processing = 1;
    3e1a:	2301      	movs	r3, #1
    3e1c:	7033      	strb	r3, [r6, #0]
					break;
    3e1e:	e77c      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR start scan\r\n");
    3e20:	4823      	ldr	r0, [pc, #140]	; (3eb0 <LIDAR_menu+0x398>)
    3e22:	4b1a      	ldr	r3, [pc, #104]	; (3e8c <LIDAR_menu+0x374>)
    3e24:	4798      	blx	r3
					LIDAR_REQ_scan();
    3e26:	4b23      	ldr	r3, [pc, #140]	; (3eb4 <LIDAR_menu+0x39c>)
    3e28:	4798      	blx	r3
					processing = 1;
    3e2a:	2301      	movs	r3, #1
    3e2c:	7033      	strb	r3, [r6, #0]
					break;
    3e2e:	e774      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR start express scan\r\n");
    3e30:	4821      	ldr	r0, [pc, #132]	; (3eb8 <LIDAR_menu+0x3a0>)
    3e32:	4b16      	ldr	r3, [pc, #88]	; (3e8c <LIDAR_menu+0x374>)
    3e34:	4798      	blx	r3
					LIDAR_REQ_express_scan();
    3e36:	4b21      	ldr	r3, [pc, #132]	; (3ebc <LIDAR_menu+0x3a4>)
    3e38:	4798      	blx	r3
					processing = 1;
    3e3a:	2301      	movs	r3, #1
    3e3c:	7033      	strb	r3, [r6, #0]
					break;
    3e3e:	e76c      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR start force scan\r\n");
    3e40:	481f      	ldr	r0, [pc, #124]	; (3ec0 <LIDAR_menu+0x3a8>)
    3e42:	4b12      	ldr	r3, [pc, #72]	; (3e8c <LIDAR_menu+0x374>)
    3e44:	4798      	blx	r3
					LIDAR_REQ_force_scan();
    3e46:	4b1f      	ldr	r3, [pc, #124]	; (3ec4 <LIDAR_menu+0x3ac>)
    3e48:	4798      	blx	r3
					processing = 1;
    3e4a:	2301      	movs	r3, #1
    3e4c:	7033      	strb	r3, [r6, #0]
					break;
    3e4e:	e764      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRetrieving LiDAR info\r\n");
    3e50:	481d      	ldr	r0, [pc, #116]	; (3ec8 <LIDAR_menu+0x3b0>)
    3e52:	4b0e      	ldr	r3, [pc, #56]	; (3e8c <LIDAR_menu+0x374>)
    3e54:	4798      	blx	r3
					LIDAR_REQ_get_info();
    3e56:	4b1d      	ldr	r3, [pc, #116]	; (3ecc <LIDAR_menu+0x3b4>)
    3e58:	4798      	blx	r3
					processing = 1;
    3e5a:	2301      	movs	r3, #1
    3e5c:	7033      	strb	r3, [r6, #0]
					break;
    3e5e:	e75c      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRetrieving LiDAR health\r\n");
    3e60:	481b      	ldr	r0, [pc, #108]	; (3ed0 <LIDAR_menu+0x3b8>)
    3e62:	4b0a      	ldr	r3, [pc, #40]	; (3e8c <LIDAR_menu+0x374>)
    3e64:	4798      	blx	r3
					LIDAR_REQ_get_health();
    3e66:	4b1b      	ldr	r3, [pc, #108]	; (3ed4 <LIDAR_menu+0x3bc>)
    3e68:	4798      	blx	r3
					processing = 1;
    3e6a:	2301      	movs	r3, #1
    3e6c:	7033      	strb	r3, [r6, #0]
					break;
    3e6e:	e754      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nRetrieving LiDAR samplerates\r\n");
    3e70:	4819      	ldr	r0, [pc, #100]	; (3ed8 <LIDAR_menu+0x3c0>)
    3e72:	4b06      	ldr	r3, [pc, #24]	; (3e8c <LIDAR_menu+0x374>)
    3e74:	4798      	blx	r3
					LIDAR_REQ_get_samplerate();
    3e76:	4b19      	ldr	r3, [pc, #100]	; (3edc <LIDAR_menu+0x3c4>)
    3e78:	4798      	blx	r3
					processing = 1;
    3e7a:	2301      	movs	r3, #1
    3e7c:	7033      	strb	r3, [r6, #0]
					break;
    3e7e:	e74c      	b.n	3d1a <LIDAR_menu+0x202>
					printf("\r\nInvalid option\r\n");
    3e80:	4817      	ldr	r0, [pc, #92]	; (3ee0 <LIDAR_menu+0x3c8>)
    3e82:	4b02      	ldr	r3, [pc, #8]	; (3e8c <LIDAR_menu+0x374>)
    3e84:	4798      	blx	r3
					break;
    3e86:	e748      	b.n	3d1a <LIDAR_menu+0x202>
    3e88:	00008b98 	.word	0x00008b98
    3e8c:	00006e0d 	.word	0x00006e0d
    3e90:	000095ac 	.word	0x000095ac
    3e94:	00003959 	.word	0x00003959
    3e98:	000095c4 	.word	0x000095c4
    3e9c:	000039c5 	.word	0x000039c5
    3ea0:	000095dc 	.word	0x000095dc
    3ea4:	00003efd 	.word	0x00003efd
    3ea8:	000095f8 	.word	0x000095f8
    3eac:	00003f75 	.word	0x00003f75
    3eb0:	00009614 	.word	0x00009614
    3eb4:	00003ff1 	.word	0x00003ff1
    3eb8:	00009634 	.word	0x00009634
    3ebc:	0000406d 	.word	0x0000406d
    3ec0:	0000965c 	.word	0x0000965c
    3ec4:	00004135 	.word	0x00004135
    3ec8:	00009684 	.word	0x00009684
    3ecc:	000041b1 	.word	0x000041b1
    3ed0:	000096a0 	.word	0x000096a0
    3ed4:	00004225 	.word	0x00004225
    3ed8:	000096bc 	.word	0x000096bc
    3edc:	00004299 	.word	0x00004299
    3ee0:	00008bb4 	.word	0x00008bb4

00003ee4 <LIDAR_reset_print_buffer>:

/** 
  * Resets local print buffer.
  */
void LIDAR_reset_print_buffer(void)
{
    3ee4:	4a04      	ldr	r2, [pc, #16]	; (3ef8 <LIDAR_reset_print_buffer+0x14>)
    3ee6:	1e53      	subs	r3, r2, #1
    3ee8:	32ff      	adds	r2, #255	; 0xff
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
    3eea:	2100      	movs	r1, #0
    3eec:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    3ef0:	4293      	cmp	r3, r2
    3ef2:	d1fb      	bne.n	3eec <LIDAR_reset_print_buffer+0x8>
}
    3ef4:	4770      	bx	lr
    3ef6:	bf00      	nop
    3ef8:	20000c8c 	.word	0x20000c8c

00003efc <LIDAR_REQ_stop>:
{
    3efc:	b530      	push	{r4, r5, lr}
    3efe:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR stop\r\n");
    3f00:	4810      	ldr	r0, [pc, #64]	; (3f44 <LIDAR_REQ_stop+0x48>)
    3f02:	4b11      	ldr	r3, [pc, #68]	; (3f48 <LIDAR_REQ_stop+0x4c>)
    3f04:	4798      	blx	r3
	lidar_request = LIDAR_STOP;
    3f06:	2525      	movs	r5, #37	; 0x25
    3f08:	4b10      	ldr	r3, [pc, #64]	; (3f4c <LIDAR_REQ_stop+0x50>)
    3f0a:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3f0c:	2200      	movs	r2, #0
    3f0e:	4b10      	ldr	r3, [pc, #64]	; (3f50 <LIDAR_REQ_stop+0x54>)
    3f10:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    3f12:	4b10      	ldr	r3, [pc, #64]	; (3f54 <LIDAR_REQ_stop+0x58>)
    3f14:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3f16:	4c10      	ldr	r4, [pc, #64]	; (3f58 <LIDAR_REQ_stop+0x5c>)
    3f18:	9500      	str	r5, [sp, #0]
    3f1a:	23a5      	movs	r3, #165	; 0xa5
    3f1c:	4a0f      	ldr	r2, [pc, #60]	; (3f5c <LIDAR_REQ_stop+0x60>)
    3f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3f22:	4620      	mov	r0, r4
    3f24:	4d0e      	ldr	r5, [pc, #56]	; (3f60 <LIDAR_REQ_stop+0x64>)
    3f26:	47a8      	blx	r5
    3f28:	b281      	uxth	r1, r0
    3f2a:	4b0e      	ldr	r3, [pc, #56]	; (3f64 <LIDAR_REQ_stop+0x68>)
    3f2c:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3f2e:	4620      	mov	r0, r4
    3f30:	4b0d      	ldr	r3, [pc, #52]	; (3f68 <LIDAR_REQ_stop+0x6c>)
    3f32:	4798      	blx	r3
		lidar_timer = 1;
    3f34:	2301      	movs	r3, #1
    3f36:	4a0d      	ldr	r2, [pc, #52]	; (3f6c <LIDAR_REQ_stop+0x70>)
    3f38:	8013      	strh	r3, [r2, #0]
		lidar_timing = 1;	
    3f3a:	4a0d      	ldr	r2, [pc, #52]	; (3f70 <LIDAR_REQ_stop+0x74>)
    3f3c:	7013      	strb	r3, [r2, #0]
}
    3f3e:	b003      	add	sp, #12
    3f40:	bd30      	pop	{r4, r5, pc}
    3f42:	bf00      	nop
    3f44:	000095dc 	.word	0x000095dc
    3f48:	00006e0d 	.word	0x00006e0d
    3f4c:	20000874 	.word	0x20000874
    3f50:	20000870 	.word	0x20000870
    3f54:	00003ee5 	.word	0x00003ee5
    3f58:	20000c8c 	.word	0x20000c8c
    3f5c:	000096dc 	.word	0x000096dc
    3f60:	00006fd9 	.word	0x00006fd9
    3f64:	2000086e 	.word	0x2000086e
    3f68:	00003abd 	.word	0x00003abd
    3f6c:	200012c8 	.word	0x200012c8
    3f70:	200012d0 	.word	0x200012d0

00003f74 <LIDAR_REQ_reset>:
{
    3f74:	b530      	push	{r4, r5, lr}
    3f76:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR reset\r\n");
    3f78:	4811      	ldr	r0, [pc, #68]	; (3fc0 <LIDAR_REQ_reset+0x4c>)
    3f7a:	4b12      	ldr	r3, [pc, #72]	; (3fc4 <LIDAR_REQ_reset+0x50>)
    3f7c:	4798      	blx	r3
	lidar_request = LIDAR_RESET;
    3f7e:	2540      	movs	r5, #64	; 0x40
    3f80:	4b11      	ldr	r3, [pc, #68]	; (3fc8 <LIDAR_REQ_reset+0x54>)
    3f82:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3f84:	2200      	movs	r2, #0
    3f86:	4b11      	ldr	r3, [pc, #68]	; (3fcc <LIDAR_REQ_reset+0x58>)
    3f88:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    3f8a:	4b11      	ldr	r3, [pc, #68]	; (3fd0 <LIDAR_REQ_reset+0x5c>)
    3f8c:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3f8e:	4c11      	ldr	r4, [pc, #68]	; (3fd4 <LIDAR_REQ_reset+0x60>)
    3f90:	9500      	str	r5, [sp, #0]
    3f92:	23a5      	movs	r3, #165	; 0xa5
    3f94:	4a10      	ldr	r2, [pc, #64]	; (3fd8 <LIDAR_REQ_reset+0x64>)
    3f96:	f44f 7180 	mov.w	r1, #256	; 0x100
    3f9a:	4620      	mov	r0, r4
    3f9c:	4d0f      	ldr	r5, [pc, #60]	; (3fdc <LIDAR_REQ_reset+0x68>)
    3f9e:	47a8      	blx	r5
    3fa0:	b281      	uxth	r1, r0
    3fa2:	4b0f      	ldr	r3, [pc, #60]	; (3fe0 <LIDAR_REQ_reset+0x6c>)
    3fa4:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3fa6:	4620      	mov	r0, r4
    3fa8:	4b0e      	ldr	r3, [pc, #56]	; (3fe4 <LIDAR_REQ_reset+0x70>)
    3faa:	4798      	blx	r3
		lidar_timer = 1000;
    3fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3fb0:	4b0d      	ldr	r3, [pc, #52]	; (3fe8 <LIDAR_REQ_reset+0x74>)
    3fb2:	801a      	strh	r2, [r3, #0]
		lidar_timing = 1;
    3fb4:	2201      	movs	r2, #1
    3fb6:	4b0d      	ldr	r3, [pc, #52]	; (3fec <LIDAR_REQ_reset+0x78>)
    3fb8:	701a      	strb	r2, [r3, #0]
}
    3fba:	b003      	add	sp, #12
    3fbc:	bd30      	pop	{r4, r5, pc}
    3fbe:	bf00      	nop
    3fc0:	000095f8 	.word	0x000095f8
    3fc4:	00006e0d 	.word	0x00006e0d
    3fc8:	20000874 	.word	0x20000874
    3fcc:	20000870 	.word	0x20000870
    3fd0:	00003ee5 	.word	0x00003ee5
    3fd4:	20000c8c 	.word	0x20000c8c
    3fd8:	000096dc 	.word	0x000096dc
    3fdc:	00006fd9 	.word	0x00006fd9
    3fe0:	2000086e 	.word	0x2000086e
    3fe4:	00003abd 	.word	0x00003abd
    3fe8:	200012c8 	.word	0x200012c8
    3fec:	200012d0 	.word	0x200012d0

00003ff0 <LIDAR_REQ_scan>:
{
    3ff0:	b530      	push	{r4, r5, lr}
    3ff2:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR start scan\r\n");
    3ff4:	4810      	ldr	r0, [pc, #64]	; (4038 <LIDAR_REQ_scan+0x48>)
    3ff6:	4b11      	ldr	r3, [pc, #68]	; (403c <LIDAR_REQ_scan+0x4c>)
    3ff8:	4798      	blx	r3
	start_time = systick_count;
    3ffa:	4b11      	ldr	r3, [pc, #68]	; (4040 <LIDAR_REQ_scan+0x50>)
    3ffc:	681a      	ldr	r2, [r3, #0]
    3ffe:	4b11      	ldr	r3, [pc, #68]	; (4044 <LIDAR_REQ_scan+0x54>)
    4000:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_SCAN;
    4002:	2520      	movs	r5, #32
    4004:	4b10      	ldr	r3, [pc, #64]	; (4048 <LIDAR_REQ_scan+0x58>)
    4006:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    4008:	2300      	movs	r3, #0
    400a:	4a10      	ldr	r2, [pc, #64]	; (404c <LIDAR_REQ_scan+0x5c>)
    400c:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    400e:	4a10      	ldr	r2, [pc, #64]	; (4050 <LIDAR_REQ_scan+0x60>)
    4010:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    4012:	4b10      	ldr	r3, [pc, #64]	; (4054 <LIDAR_REQ_scan+0x64>)
    4014:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    4016:	4c10      	ldr	r4, [pc, #64]	; (4058 <LIDAR_REQ_scan+0x68>)
    4018:	9500      	str	r5, [sp, #0]
    401a:	23a5      	movs	r3, #165	; 0xa5
    401c:	4a0f      	ldr	r2, [pc, #60]	; (405c <LIDAR_REQ_scan+0x6c>)
    401e:	f44f 7180 	mov.w	r1, #256	; 0x100
    4022:	4620      	mov	r0, r4
    4024:	4d0e      	ldr	r5, [pc, #56]	; (4060 <LIDAR_REQ_scan+0x70>)
    4026:	47a8      	blx	r5
    4028:	b281      	uxth	r1, r0
    402a:	4b0e      	ldr	r3, [pc, #56]	; (4064 <LIDAR_REQ_scan+0x74>)
    402c:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    402e:	4620      	mov	r0, r4
    4030:	4b0d      	ldr	r3, [pc, #52]	; (4068 <LIDAR_REQ_scan+0x78>)
    4032:	4798      	blx	r3
}
    4034:	b003      	add	sp, #12
    4036:	bd30      	pop	{r4, r5, pc}
    4038:	00009614 	.word	0x00009614
    403c:	00006e0d 	.word	0x00006e0d
    4040:	200007e8 	.word	0x200007e8
    4044:	200012cc 	.word	0x200012cc
    4048:	20000874 	.word	0x20000874
    404c:	20000870 	.word	0x20000870
    4050:	2000087c 	.word	0x2000087c
    4054:	00003ee5 	.word	0x00003ee5
    4058:	20000c8c 	.word	0x20000c8c
    405c:	000096dc 	.word	0x000096dc
    4060:	00006fd9 	.word	0x00006fd9
    4064:	2000086e 	.word	0x2000086e
    4068:	00003abd 	.word	0x00003abd

0000406c <LIDAR_REQ_express_scan>:
{	
    406c:	b530      	push	{r4, r5, lr}
    406e:	b085      	sub	sp, #20
		printf("\r\nRequesting LiDAR start express scan\r\n");
    4070:	4822      	ldr	r0, [pc, #136]	; (40fc <LIDAR_REQ_express_scan+0x90>)
    4072:	4b23      	ldr	r3, [pc, #140]	; (4100 <LIDAR_REQ_express_scan+0x94>)
    4074:	4798      	blx	r3
	start_time = systick_count;
    4076:	4b23      	ldr	r3, [pc, #140]	; (4104 <LIDAR_REQ_express_scan+0x98>)
    4078:	681a      	ldr	r2, [r3, #0]
    407a:	4b23      	ldr	r3, [pc, #140]	; (4108 <LIDAR_REQ_express_scan+0x9c>)
    407c:	601a      	str	r2, [r3, #0]
	char working_mode = 0;
    407e:	2300      	movs	r3, #0
    4080:	f88d 300f 	strb.w	r3, [sp, #15]
	char reserved_fields = 0;
    4084:	f88d 300e 	strb.w	r3, [sp, #14]
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_EXPRESS_SCAN ^ payload_size;
    4088:	2222      	movs	r2, #34	; 0x22
    408a:	f88d 200d 	strb.w	r2, [sp, #13]
	lidar_request = LIDAR_EXPRESS_SCAN;
    408e:	2582      	movs	r5, #130	; 0x82
    4090:	4a1e      	ldr	r2, [pc, #120]	; (410c <LIDAR_REQ_express_scan+0xa0>)
    4092:	7015      	strb	r5, [r2, #0]
	invalid_exp_scans = 0;
    4094:	4a1e      	ldr	r2, [pc, #120]	; (4110 <LIDAR_REQ_express_scan+0xa4>)
    4096:	6013      	str	r3, [r2, #0]
    scan_count = 0;
    4098:	4a1e      	ldr	r2, [pc, #120]	; (4114 <LIDAR_REQ_express_scan+0xa8>)
    409a:	6013      	str	r3, [r2, #0]
	byte_count = 0;
    409c:	4a1e      	ldr	r2, [pc, #120]	; (4118 <LIDAR_REQ_express_scan+0xac>)
    409e:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    40a0:	4b1e      	ldr	r3, [pc, #120]	; (411c <LIDAR_REQ_express_scan+0xb0>)
    40a2:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    40a4:	4c1e      	ldr	r4, [pc, #120]	; (4120 <LIDAR_REQ_express_scan+0xb4>)
    40a6:	2305      	movs	r3, #5
    40a8:	9301      	str	r3, [sp, #4]
    40aa:	9500      	str	r5, [sp, #0]
    40ac:	23a5      	movs	r3, #165	; 0xa5
    40ae:	4a1d      	ldr	r2, [pc, #116]	; (4124 <LIDAR_REQ_express_scan+0xb8>)
    40b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    40b4:	4620      	mov	r0, r4
    40b6:	4d1c      	ldr	r5, [pc, #112]	; (4128 <LIDAR_REQ_express_scan+0xbc>)
    40b8:	47a8      	blx	r5
    40ba:	b281      	uxth	r1, r0
    40bc:	4b1b      	ldr	r3, [pc, #108]	; (412c <LIDAR_REQ_express_scan+0xc0>)
    40be:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    40c0:	4620      	mov	r0, r4
    40c2:	4c1b      	ldr	r4, [pc, #108]	; (4130 <LIDAR_REQ_express_scan+0xc4>)
    40c4:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&working_mode, 1);
    40c6:	2101      	movs	r1, #1
    40c8:	f10d 000f 	add.w	r0, sp, #15
    40cc:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    40ce:	2101      	movs	r1, #1
    40d0:	f10d 000e 	add.w	r0, sp, #14
    40d4:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    40d6:	2101      	movs	r1, #1
    40d8:	f10d 000e 	add.w	r0, sp, #14
    40dc:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    40de:	2101      	movs	r1, #1
    40e0:	f10d 000e 	add.w	r0, sp, #14
    40e4:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    40e6:	2101      	movs	r1, #1
    40e8:	f10d 000e 	add.w	r0, sp, #14
    40ec:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    40ee:	2101      	movs	r1, #1
    40f0:	f10d 000d 	add.w	r0, sp, #13
    40f4:	47a0      	blx	r4
}
    40f6:	b005      	add	sp, #20
    40f8:	bd30      	pop	{r4, r5, pc}
    40fa:	bf00      	nop
    40fc:	00009634 	.word	0x00009634
    4100:	00006e0d 	.word	0x00006e0d
    4104:	200007e8 	.word	0x200007e8
    4108:	200012cc 	.word	0x200012cc
    410c:	20000874 	.word	0x20000874
    4110:	20000878 	.word	0x20000878
    4114:	2000087c 	.word	0x2000087c
    4118:	20000870 	.word	0x20000870
    411c:	00003ee5 	.word	0x00003ee5
    4120:	20000c8c 	.word	0x20000c8c
    4124:	000096e4 	.word	0x000096e4
    4128:	00006fd9 	.word	0x00006fd9
    412c:	2000086e 	.word	0x2000086e
    4130:	00003abd 	.word	0x00003abd

00004134 <LIDAR_REQ_force_scan>:
{
    4134:	b530      	push	{r4, r5, lr}
    4136:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR start force scan\r\n");
    4138:	4810      	ldr	r0, [pc, #64]	; (417c <LIDAR_REQ_force_scan+0x48>)
    413a:	4b11      	ldr	r3, [pc, #68]	; (4180 <LIDAR_REQ_force_scan+0x4c>)
    413c:	4798      	blx	r3
	start_time = systick_count;
    413e:	4b11      	ldr	r3, [pc, #68]	; (4184 <LIDAR_REQ_force_scan+0x50>)
    4140:	681a      	ldr	r2, [r3, #0]
    4142:	4b11      	ldr	r3, [pc, #68]	; (4188 <LIDAR_REQ_force_scan+0x54>)
    4144:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_FORCE_SCAN;
    4146:	2521      	movs	r5, #33	; 0x21
    4148:	4b10      	ldr	r3, [pc, #64]	; (418c <LIDAR_REQ_force_scan+0x58>)
    414a:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    414c:	2300      	movs	r3, #0
    414e:	4a10      	ldr	r2, [pc, #64]	; (4190 <LIDAR_REQ_force_scan+0x5c>)
    4150:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    4152:	4a10      	ldr	r2, [pc, #64]	; (4194 <LIDAR_REQ_force_scan+0x60>)
    4154:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    4156:	4b10      	ldr	r3, [pc, #64]	; (4198 <LIDAR_REQ_force_scan+0x64>)
    4158:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    415a:	4c10      	ldr	r4, [pc, #64]	; (419c <LIDAR_REQ_force_scan+0x68>)
    415c:	9500      	str	r5, [sp, #0]
    415e:	23a5      	movs	r3, #165	; 0xa5
    4160:	4a0f      	ldr	r2, [pc, #60]	; (41a0 <LIDAR_REQ_force_scan+0x6c>)
    4162:	f44f 7180 	mov.w	r1, #256	; 0x100
    4166:	4620      	mov	r0, r4
    4168:	4d0e      	ldr	r5, [pc, #56]	; (41a4 <LIDAR_REQ_force_scan+0x70>)
    416a:	47a8      	blx	r5
    416c:	b281      	uxth	r1, r0
    416e:	4b0e      	ldr	r3, [pc, #56]	; (41a8 <LIDAR_REQ_force_scan+0x74>)
    4170:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    4172:	4620      	mov	r0, r4
    4174:	4b0d      	ldr	r3, [pc, #52]	; (41ac <LIDAR_REQ_force_scan+0x78>)
    4176:	4798      	blx	r3
}
    4178:	b003      	add	sp, #12
    417a:	bd30      	pop	{r4, r5, pc}
    417c:	0000965c 	.word	0x0000965c
    4180:	00006e0d 	.word	0x00006e0d
    4184:	200007e8 	.word	0x200007e8
    4188:	200012cc 	.word	0x200012cc
    418c:	20000874 	.word	0x20000874
    4190:	20000870 	.word	0x20000870
    4194:	2000087c 	.word	0x2000087c
    4198:	00003ee5 	.word	0x00003ee5
    419c:	20000c8c 	.word	0x20000c8c
    41a0:	000096dc 	.word	0x000096dc
    41a4:	00006fd9 	.word	0x00006fd9
    41a8:	2000086e 	.word	0x2000086e
    41ac:	00003abd 	.word	0x00003abd

000041b0 <LIDAR_REQ_get_info>:
{
    41b0:	b530      	push	{r4, r5, lr}
    41b2:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR info\r\n");
    41b4:	480f      	ldr	r0, [pc, #60]	; (41f4 <LIDAR_REQ_get_info+0x44>)
    41b6:	4b10      	ldr	r3, [pc, #64]	; (41f8 <LIDAR_REQ_get_info+0x48>)
    41b8:	4798      	blx	r3
	start_time = systick_count;
    41ba:	4b10      	ldr	r3, [pc, #64]	; (41fc <LIDAR_REQ_get_info+0x4c>)
    41bc:	681a      	ldr	r2, [r3, #0]
    41be:	4b10      	ldr	r3, [pc, #64]	; (4200 <LIDAR_REQ_get_info+0x50>)
    41c0:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_GET_INFO;
    41c2:	2550      	movs	r5, #80	; 0x50
    41c4:	4b0f      	ldr	r3, [pc, #60]	; (4204 <LIDAR_REQ_get_info+0x54>)
    41c6:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    41c8:	2200      	movs	r2, #0
    41ca:	4b0f      	ldr	r3, [pc, #60]	; (4208 <LIDAR_REQ_get_info+0x58>)
    41cc:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    41ce:	4b0f      	ldr	r3, [pc, #60]	; (420c <LIDAR_REQ_get_info+0x5c>)
    41d0:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    41d2:	4c0f      	ldr	r4, [pc, #60]	; (4210 <LIDAR_REQ_get_info+0x60>)
    41d4:	9500      	str	r5, [sp, #0]
    41d6:	23a5      	movs	r3, #165	; 0xa5
    41d8:	4a0e      	ldr	r2, [pc, #56]	; (4214 <LIDAR_REQ_get_info+0x64>)
    41da:	f44f 7180 	mov.w	r1, #256	; 0x100
    41de:	4620      	mov	r0, r4
    41e0:	4d0d      	ldr	r5, [pc, #52]	; (4218 <LIDAR_REQ_get_info+0x68>)
    41e2:	47a8      	blx	r5
    41e4:	b281      	uxth	r1, r0
    41e6:	4b0d      	ldr	r3, [pc, #52]	; (421c <LIDAR_REQ_get_info+0x6c>)
    41e8:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    41ea:	4620      	mov	r0, r4
    41ec:	4b0c      	ldr	r3, [pc, #48]	; (4220 <LIDAR_REQ_get_info+0x70>)
    41ee:	4798      	blx	r3
}
    41f0:	b003      	add	sp, #12
    41f2:	bd30      	pop	{r4, r5, pc}
    41f4:	000096ec 	.word	0x000096ec
    41f8:	00006e0d 	.word	0x00006e0d
    41fc:	200007e8 	.word	0x200007e8
    4200:	200012cc 	.word	0x200012cc
    4204:	20000874 	.word	0x20000874
    4208:	20000870 	.word	0x20000870
    420c:	00003ee5 	.word	0x00003ee5
    4210:	20000c8c 	.word	0x20000c8c
    4214:	000096dc 	.word	0x000096dc
    4218:	00006fd9 	.word	0x00006fd9
    421c:	2000086e 	.word	0x2000086e
    4220:	00003abd 	.word	0x00003abd

00004224 <LIDAR_REQ_get_health>:
{
    4224:	b530      	push	{r4, r5, lr}
    4226:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR health\r\n");
    4228:	480f      	ldr	r0, [pc, #60]	; (4268 <LIDAR_REQ_get_health+0x44>)
    422a:	4b10      	ldr	r3, [pc, #64]	; (426c <LIDAR_REQ_get_health+0x48>)
    422c:	4798      	blx	r3
	start_time = systick_count;
    422e:	4b10      	ldr	r3, [pc, #64]	; (4270 <LIDAR_REQ_get_health+0x4c>)
    4230:	681a      	ldr	r2, [r3, #0]
    4232:	4b10      	ldr	r3, [pc, #64]	; (4274 <LIDAR_REQ_get_health+0x50>)
    4234:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_GET_HEALTH;
    4236:	2552      	movs	r5, #82	; 0x52
    4238:	4b0f      	ldr	r3, [pc, #60]	; (4278 <LIDAR_REQ_get_health+0x54>)
    423a:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    423c:	2200      	movs	r2, #0
    423e:	4b0f      	ldr	r3, [pc, #60]	; (427c <LIDAR_REQ_get_health+0x58>)
    4240:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    4242:	4b0f      	ldr	r3, [pc, #60]	; (4280 <LIDAR_REQ_get_health+0x5c>)
    4244:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    4246:	4c0f      	ldr	r4, [pc, #60]	; (4284 <LIDAR_REQ_get_health+0x60>)
    4248:	9500      	str	r5, [sp, #0]
    424a:	23a5      	movs	r3, #165	; 0xa5
    424c:	4a0e      	ldr	r2, [pc, #56]	; (4288 <LIDAR_REQ_get_health+0x64>)
    424e:	f44f 7180 	mov.w	r1, #256	; 0x100
    4252:	4620      	mov	r0, r4
    4254:	4d0d      	ldr	r5, [pc, #52]	; (428c <LIDAR_REQ_get_health+0x68>)
    4256:	47a8      	blx	r5
    4258:	b281      	uxth	r1, r0
    425a:	4b0d      	ldr	r3, [pc, #52]	; (4290 <LIDAR_REQ_get_health+0x6c>)
    425c:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    425e:	4620      	mov	r0, r4
    4260:	4b0c      	ldr	r3, [pc, #48]	; (4294 <LIDAR_REQ_get_health+0x70>)
    4262:	4798      	blx	r3
}
    4264:	b003      	add	sp, #12
    4266:	bd30      	pop	{r4, r5, pc}
    4268:	00009708 	.word	0x00009708
    426c:	00006e0d 	.word	0x00006e0d
    4270:	200007e8 	.word	0x200007e8
    4274:	200012cc 	.word	0x200012cc
    4278:	20000874 	.word	0x20000874
    427c:	20000870 	.word	0x20000870
    4280:	00003ee5 	.word	0x00003ee5
    4284:	20000c8c 	.word	0x20000c8c
    4288:	000096dc 	.word	0x000096dc
    428c:	00006fd9 	.word	0x00006fd9
    4290:	2000086e 	.word	0x2000086e
    4294:	00003abd 	.word	0x00003abd

00004298 <LIDAR_REQ_get_samplerate>:
{
    4298:	b530      	push	{r4, r5, lr}
    429a:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR samplerates\r\n");
    429c:	480f      	ldr	r0, [pc, #60]	; (42dc <LIDAR_REQ_get_samplerate+0x44>)
    429e:	4b10      	ldr	r3, [pc, #64]	; (42e0 <LIDAR_REQ_get_samplerate+0x48>)
    42a0:	4798      	blx	r3
	start_time = systick_count;
    42a2:	4b10      	ldr	r3, [pc, #64]	; (42e4 <LIDAR_REQ_get_samplerate+0x4c>)
    42a4:	681a      	ldr	r2, [r3, #0]
    42a6:	4b10      	ldr	r3, [pc, #64]	; (42e8 <LIDAR_REQ_get_samplerate+0x50>)
    42a8:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_GET_SAMPLERATE;
    42aa:	2559      	movs	r5, #89	; 0x59
    42ac:	4b0f      	ldr	r3, [pc, #60]	; (42ec <LIDAR_REQ_get_samplerate+0x54>)
    42ae:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    42b0:	2200      	movs	r2, #0
    42b2:	4b0f      	ldr	r3, [pc, #60]	; (42f0 <LIDAR_REQ_get_samplerate+0x58>)
    42b4:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    42b6:	4b0f      	ldr	r3, [pc, #60]	; (42f4 <LIDAR_REQ_get_samplerate+0x5c>)
    42b8:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    42ba:	4c0f      	ldr	r4, [pc, #60]	; (42f8 <LIDAR_REQ_get_samplerate+0x60>)
    42bc:	9500      	str	r5, [sp, #0]
    42be:	23a5      	movs	r3, #165	; 0xa5
    42c0:	4a0e      	ldr	r2, [pc, #56]	; (42fc <LIDAR_REQ_get_samplerate+0x64>)
    42c2:	f44f 7180 	mov.w	r1, #256	; 0x100
    42c6:	4620      	mov	r0, r4
    42c8:	4d0d      	ldr	r5, [pc, #52]	; (4300 <LIDAR_REQ_get_samplerate+0x68>)
    42ca:	47a8      	blx	r5
    42cc:	b281      	uxth	r1, r0
    42ce:	4b0d      	ldr	r3, [pc, #52]	; (4304 <LIDAR_REQ_get_samplerate+0x6c>)
    42d0:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    42d2:	4620      	mov	r0, r4
    42d4:	4b0c      	ldr	r3, [pc, #48]	; (4308 <LIDAR_REQ_get_samplerate+0x70>)
    42d6:	4798      	blx	r3
}
    42d8:	b003      	add	sp, #12
    42da:	bd30      	pop	{r4, r5, pc}
    42dc:	00009724 	.word	0x00009724
    42e0:	00006e0d 	.word	0x00006e0d
    42e4:	200007e8 	.word	0x200007e8
    42e8:	200012cc 	.word	0x200012cc
    42ec:	20000874 	.word	0x20000874
    42f0:	20000870 	.word	0x20000870
    42f4:	00003ee5 	.word	0x00003ee5
    42f8:	20000c8c 	.word	0x20000c8c
    42fc:	000096dc 	.word	0x000096dc
    4300:	00006fd9 	.word	0x00006fd9
    4304:	2000086e 	.word	0x2000086e
    4308:	00003abd 	.word	0x00003abd

0000430c <LIDAR_RES_stop>:

/** 
  * "STOP" request has no response.
  */
void LIDAR_RES_stop(void) 
{
    430c:	b508      	push	{r3, lr}
	if (!lidar_timer) {
    430e:	4b06      	ldr	r3, [pc, #24]	; (4328 <LIDAR_RES_stop+0x1c>)
    4310:	881b      	ldrh	r3, [r3, #0]
    4312:	b29b      	uxth	r3, r3
    4314:	b103      	cbz	r3, 4318 <LIDAR_RES_stop+0xc>
    4316:	bd08      	pop	{r3, pc}
		lidar_timing = 0;
    4318:	4a04      	ldr	r2, [pc, #16]	; (432c <LIDAR_RES_stop+0x20>)
    431a:	7013      	strb	r3, [r2, #0]
		processing = 0;
    431c:	4a04      	ldr	r2, [pc, #16]	; (4330 <LIDAR_RES_stop+0x24>)
    431e:	7013      	strb	r3, [r2, #0]
		if (DEBUG) 
			printf("LiDAR stopped\r\n");
    4320:	4804      	ldr	r0, [pc, #16]	; (4334 <LIDAR_RES_stop+0x28>)
    4322:	4b05      	ldr	r3, [pc, #20]	; (4338 <LIDAR_RES_stop+0x2c>)
    4324:	4798      	blx	r3
	}
}
    4326:	e7f6      	b.n	4316 <LIDAR_RES_stop+0xa>
    4328:	200012c8 	.word	0x200012c8
    432c:	200012d0 	.word	0x200012d0
    4330:	2000086c 	.word	0x2000086c
    4334:	00009744 	.word	0x00009744
    4338:	00006e0d 	.word	0x00006e0d

0000433c <LIDAR_RES_reset>:
  *           RP LIDAR System.\r\n
  *           Firmware Ver 1.27 - rc9, HW Ver 5\r\n
  *           Model: 28\r\n
  */
void LIDAR_RES_reset(void) 
{   
    433c:	b508      	push	{r3, lr}
	if (!lidar_timer) {
    433e:	4b06      	ldr	r3, [pc, #24]	; (4358 <LIDAR_RES_reset+0x1c>)
    4340:	881b      	ldrh	r3, [r3, #0]
    4342:	b29b      	uxth	r3, r3
    4344:	b103      	cbz	r3, 4348 <LIDAR_RES_reset+0xc>
    4346:	bd08      	pop	{r3, pc}
		lidar_timing = 0;
    4348:	4a04      	ldr	r2, [pc, #16]	; (435c <LIDAR_RES_reset+0x20>)
    434a:	7013      	strb	r3, [r2, #0]
		processing = 0;
    434c:	4a04      	ldr	r2, [pc, #16]	; (4360 <LIDAR_RES_reset+0x24>)
    434e:	7013      	strb	r3, [r2, #0]
		if (DEBUG) 
			printf("LiDAR reset\r\n");
    4350:	4804      	ldr	r0, [pc, #16]	; (4364 <LIDAR_RES_reset+0x28>)
    4352:	4b05      	ldr	r3, [pc, #20]	; (4368 <LIDAR_RES_reset+0x2c>)
    4354:	4798      	blx	r3
			
	}
}
    4356:	e7f6      	b.n	4346 <LIDAR_RES_reset+0xa>
    4358:	200012c8 	.word	0x200012c8
    435c:	200012d0 	.word	0x200012d0
    4360:	2000086c 	.word	0x2000086c
    4364:	00009754 	.word	0x00009754
    4368:	00006e0d 	.word	0x00006e0d

0000436c <LIDAR_RES_scan>:
  *						+2		angle_q6[14:7]
  *						+3		distance_q2[7:0]
  *						+4		distance_q2[15:8]
  */
void LIDAR_RES_scan(void) 
{
    436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* check[0] - start
	   check[1] - ~start
	   check[2] - check	 */
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    4370:	4a21      	ldr	r2, [pc, #132]	; (43f8 <LIDAR_RES_scan+0x8c>)
    4372:	7813      	ldrb	r3, [r2, #0]
    4374:	7850      	ldrb	r0, [r2, #1]
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    4376:	7855      	ldrb	r5, [r2, #1]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    4378:	7891      	ldrb	r1, [r2, #2]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    437a:	78d4      	ldrb	r4, [r2, #3]
    437c:	7916      	ldrb	r6, [r2, #4]
	
	/* Decrement byte_count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= 5;
    437e:	4f1f      	ldr	r7, [pc, #124]	; (43fc <LIDAR_RES_scan+0x90>)
    4380:	683a      	ldr	r2, [r7, #0]
    4382:	3a05      	subs	r2, #5
    4384:	603a      	str	r2, [r7, #0]
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    4386:	005b      	lsls	r3, r3, #1
    4388:	f003 0306 	and.w	r3, r3, #6
    438c:	f000 0201 	and.w	r2, r0, #1
    4390:	4313      	orrs	r3, r2
	
	/* Checking: check=1, ~start=0, start=1 */
	if (check == 0x5 || check == 0x6) {
    4392:	3b05      	subs	r3, #5
    4394:	b2db      	uxtb	r3, r3
    4396:	2b01      	cmp	r3, #1
    4398:	d906      	bls.n	43a8 <LIDAR_RES_scan+0x3c>
		scans[scan_count].angle = angle;
		scans[scan_count++].distance = distance;
	}
	
    if (DEBUG)
        if (scan_count % 16 == 0)
    439a:	4b19      	ldr	r3, [pc, #100]	; (4400 <LIDAR_RES_scan+0x94>)
    439c:	6819      	ldr	r1, [r3, #0]
    439e:	f011 0f0f 	tst.w	r1, #15
    43a2:	d023      	beq.n	43ec <LIDAR_RES_scan+0x80>
    43a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43a8:	b2ed      	uxtb	r5, r5
    43aa:	b2c9      	uxtb	r1, r1
    43ac:	b2e4      	uxtb	r4, r4
    43ae:	b2f6      	uxtb	r6, r6
		scans[scan_count].quality = DATA_RESPONSE[0] >> 2;
    43b0:	f8df c04c 	ldr.w	ip, [pc, #76]	; 4400 <LIDAR_RES_scan+0x94>
    43b4:	f8dc 0000 	ldr.w	r0, [ip]
    43b8:	4b0f      	ldr	r3, [pc, #60]	; (43f8 <LIDAR_RES_scan+0x8c>)
    43ba:	f893 e000 	ldrb.w	lr, [r3]
    43be:	4b11      	ldr	r3, [pc, #68]	; (4404 <LIDAR_RES_scan+0x98>)
    43c0:	0042      	lsls	r2, r0, #1
    43c2:	1817      	adds	r7, r2, r0
    43c4:	007f      	lsls	r7, r7, #1
    43c6:	eb03 0807 	add.w	r8, r3, r7
    43ca:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    43ce:	f803 e007 	strb.w	lr, [r3, r7]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    43d2:	01c9      	lsls	r1, r1, #7
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    43d4:	eb01 0555 	add.w	r5, r1, r5, lsr #1
		scans[scan_count].angle = angle;
    43d8:	f8a8 5002 	strh.w	r5, [r8, #2]
		scans[scan_count++].distance = distance;
    43dc:	1c41      	adds	r1, r0, #1
    43de:	f8cc 1000 	str.w	r1, [ip]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    43e2:	eb04 2406 	add.w	r4, r4, r6, lsl #8
		scans[scan_count++].distance = distance;
    43e6:	f8a8 4004 	strh.w	r4, [r8, #4]
    43ea:	e7d6      	b.n	439a <LIDAR_RES_scan+0x2e>
            printf("gathered %0"PRIu32"/%0d scans...\r\n", scan_count, MAX_SCANS);
    43ec:	2240      	movs	r2, #64	; 0x40
    43ee:	4806      	ldr	r0, [pc, #24]	; (4408 <LIDAR_RES_scan+0x9c>)
    43f0:	4b06      	ldr	r3, [pc, #24]	; (440c <LIDAR_RES_scan+0xa0>)
    43f2:	4798      	blx	r3
    else {
	    printf("Invalid response: C=%u, !S=%u, S=%u\r\n",
		        (check >> 3), ((check >> 2) & 0x1), (check & 0x1));
	}
    */
}
    43f4:	e7d6      	b.n	43a4 <LIDAR_RES_scan+0x38>
    43f6:	bf00      	nop
    43f8:	200007ec 	.word	0x200007ec
    43fc:	20000870 	.word	0x20000870
    4400:	2000087c 	.word	0x2000087c
    4404:	20000880 	.word	0x20000880
    4408:	00009764 	.word	0x00009764
    440c:	00006d25 	.word	0x00006d25

00004410 <LIDAR_RES_express_scan>:
  *						+2		distance2[6:0], angle_val2[4] (sign)
  *						+3		distance2[14:7]
  *						+4		angle_val2[3:0], angle_val1[3:0]
  */
void LIDAR_RES_express_scan(void) 
{ 
    4410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t calc_checksum;
	uint8_t PAYLOAD_SIZE=84, CABIN_COUNT=16, CABIN_START=4, CABIN_BYTE_COUNT=5;
	uint16_t i, pos;
	
	uint8_t checksum = ((uint8_t)DATA_RESPONSE[1] << 4) | ((uint8_t)DATA_RESPONSE[0] & 0x0F);
    4412:	4b35      	ldr	r3, [pc, #212]	; (44e8 <LIDAR_RES_express_scan+0xd8>)
    4414:	785a      	ldrb	r2, [r3, #1]
    4416:	781c      	ldrb	r4, [r3, #0]
    4418:	f004 040f 	and.w	r4, r4, #15
    441c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    4420:	b2e4      	uxtb	r4, r4
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    4422:	f893 e002 	ldrb.w	lr, [r3, #2]
    4426:	fa5f fe8e 	uxtb.w	lr, lr
    442a:	78df      	ldrb	r7, [r3, #3]
    442c:	b2ff      	uxtb	r7, r7
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    442e:	78db      	ldrb	r3, [r3, #3]
    4430:	b2dd      	uxtb	r5, r3
	
    /* Decrement byte count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= PAYLOAD_SIZE;
    4432:	4a2e      	ldr	r2, [pc, #184]	; (44ec <LIDAR_RES_express_scan+0xdc>)
    4434:	6813      	ldr	r3, [r2, #0]
    4436:	3b54      	subs	r3, #84	; 0x54
    4438:	6013      	str	r3, [r2, #0]
    443a:	2302      	movs	r3, #2
	
	/* Check if data valid */
	calc_checksum = 0;
    443c:	2200      	movs	r2, #0
	for (i=2; i<PAYLOAD_SIZE; i++)
		calc_checksum ^= DATA_RESPONSE[i];
    443e:	482a      	ldr	r0, [pc, #168]	; (44e8 <LIDAR_RES_express_scan+0xd8>)
    4440:	5cc1      	ldrb	r1, [r0, r3]
    4442:	404a      	eors	r2, r1
    4444:	3301      	adds	r3, #1
	for (i=2; i<PAYLOAD_SIZE; i++)
    4446:	2b54      	cmp	r3, #84	; 0x54
    4448:	d1fa      	bne.n	4440 <LIDAR_RES_express_scan+0x30>
		
	if (checksum != calc_checksum) {
    444a:	4294      	cmp	r4, r2
    444c:	d004      	beq.n	4458 <LIDAR_RES_express_scan+0x48>
			printf("First 8: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
					DATA_RESPONSE[0], DATA_RESPONSE[1], DATA_RESPONSE[2], DATA_RESPONSE[3], 
					DATA_RESPONSE[4], DATA_RESPONSE[5], DATA_RESPONSE[6], DATA_RESPONSE[7]);
		}
        */
		invalid_exp_scans++;
    444e:	4a28      	ldr	r2, [pc, #160]	; (44f0 <LIDAR_RES_express_scan+0xe0>)
    4450:	6813      	ldr	r3, [r2, #0]
    4452:	3301      	adds	r3, #1
    4454:	6013      	str	r3, [r2, #0]
		return;
    4456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    4458:	09ed      	lsrs	r5, r5, #7
    445a:	4b26      	ldr	r3, [pc, #152]	; (44f4 <LIDAR_RES_express_scan+0xe4>)
    445c:	681e      	ldr	r6, [r3, #0]
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    445e:	023c      	lsls	r4, r7, #8
    4460:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
    4464:	ea44 040e 	orr.w	r4, r4, lr
    4468:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    446c:	4b22      	ldr	r3, [pc, #136]	; (44f8 <LIDAR_RES_express_scan+0xe8>)
    446e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    4472:	2105      	movs	r1, #5
	}
	
	for (i=0; i<CABIN_COUNT; i++) {
		pos = CABIN_START+(CABIN_BYTE_COUNT*i);
		cabins[scan_count].S = S_flag;
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    4474:	4a1c      	ldr	r2, [pc, #112]	; (44e8 <LIDAR_RES_express_scan+0xd8>)
		cabins[scan_count].S = S_flag;
    4476:	701d      	strb	r5, [r3, #0]
    4478:	f101 3eff 	add.w	lr, r1, #4294967295
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    447c:	f812 700e 	ldrb.w	r7, [r2, lr]
											((uint8_t)DATA_RESPONSE[pos+1] << 7);
    4480:	5c50      	ldrb	r0, [r2, r1]
    4482:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    4484:	ea40 0057 	orr.w	r0, r0, r7, lsr #1
    4488:	8098      	strh	r0, [r3, #4]
    448a:	1c4f      	adds	r7, r1, #1
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    448c:	f812 c007 	ldrb.w	ip, [r2, r7]
    4490:	1c88      	adds	r0, r1, #2
											((uint8_t)DATA_RESPONSE[pos+3] << 7);
    4492:	5c10      	ldrb	r0, [r2, r0]
    4494:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    4496:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    449a:	80d8      	strh	r0, [r3, #6]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    449c:	f812 000e 	ldrb.w	r0, [r2, lr]
    44a0:	f101 0e03 	add.w	lr, r1, #3
											((uint8_t)DATA_RESPONSE[pos+4] >> 4);
    44a4:	f812 c00e 	ldrb.w	ip, [r2, lr]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    44a8:	0100      	lsls	r0, r0, #4
    44aa:	f000 0010 	and.w	r0, r0, #16
    44ae:	ea40 101c 	orr.w	r0, r0, ip, lsr #4
    44b2:	7058      	strb	r0, [r3, #1]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    44b4:	5dd0      	ldrb	r0, [r2, r7]
											(DATA_RESPONSE[pos+4] & 0x0F);
    44b6:	f812 700e 	ldrb.w	r7, [r2, lr]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    44ba:	0100      	lsls	r0, r0, #4
    44bc:	f000 0010 	and.w	r0, r0, #16
											(DATA_RESPONSE[pos+4] & 0x0F);
    44c0:	f007 070f 	and.w	r7, r7, #15
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    44c4:	4338      	orrs	r0, r7
    44c6:	7098      	strb	r0, [r3, #2]
		cabins[scan_count++].start_angle = start_angle;
    44c8:	811c      	strh	r4, [r3, #8]
    44ca:	330a      	adds	r3, #10
    44cc:	3105      	adds	r1, #5
	for (i=0; i<CABIN_COUNT; i++) {
    44ce:	2955      	cmp	r1, #85	; 0x55
    44d0:	d1d1      	bne.n	4476 <LIDAR_RES_express_scan+0x66>
    44d2:	f106 0210 	add.w	r2, r6, #16
    44d6:	4b07      	ldr	r3, [pc, #28]	; (44f4 <LIDAR_RES_express_scan+0xe4>)
    44d8:	601a      	str	r2, [r3, #0]
	}
	
    if (DEBUG)
	    printf("%0"PRIu32" invalid scans -- gathered %0"PRIu32"/%0d scans...\r\n", 
    44da:	2340      	movs	r3, #64	; 0x40
    44dc:	4904      	ldr	r1, [pc, #16]	; (44f0 <LIDAR_RES_express_scan+0xe0>)
    44de:	6809      	ldr	r1, [r1, #0]
    44e0:	4806      	ldr	r0, [pc, #24]	; (44fc <LIDAR_RES_express_scan+0xec>)
    44e2:	4c07      	ldr	r4, [pc, #28]	; (4500 <LIDAR_RES_express_scan+0xf0>)
    44e4:	47a0      	blx	r4
    44e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44e8:	200007ec 	.word	0x200007ec
    44ec:	20000870 	.word	0x20000870
    44f0:	20000878 	.word	0x20000878
    44f4:	2000087c 	.word	0x2000087c
    44f8:	20000a00 	.word	0x20000a00
    44fc:	00009784 	.word	0x00009784
    4500:	00006d25 	.word	0x00006d25

00004504 <LIDAR_RES_get_info>:
  *						+19 	serial_number[15]		
  * When converting serial_number to text from hex, the least significant byte 
  *	prints first.
  */
char* LIDAR_RES_get_info(void) 
{	
    4504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4508:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	uint8_t model_id 		 = DATA_RESPONSE[0];
    450c:	4b27      	ldr	r3, [pc, #156]	; (45ac <LIDAR_RES_get_info+0xa8>)
    450e:	f893 b000 	ldrb.w	fp, [r3]
    4512:	fa5f fb8b 	uxtb.w	fp, fp
	uint8_t firmware_minor	 = DATA_RESPONSE[1];
    4516:	f893 a001 	ldrb.w	sl, [r3, #1]
    451a:	fa5f fa8a 	uxtb.w	sl, sl
	uint8_t firmware_major	 = DATA_RESPONSE[2];
    451e:	f893 9002 	ldrb.w	r9, [r3, #2]
    4522:	fa5f f989 	uxtb.w	r9, r9
	uint8_t hardware_version = DATA_RESPONSE[3];
    4526:	f893 8003 	ldrb.w	r8, [r3, #3]
    452a:	fa5f f888 	uxtb.w	r8, r8
	char serial_number[16]	 = {0};
    452e:	2100      	movs	r1, #0
    4530:	9180      	str	r1, [sp, #512]	; 0x200
    4532:	9181      	str	r1, [sp, #516]	; 0x204
    4534:	9182      	str	r1, [sp, #520]	; 0x208
    4536:	9183      	str	r1, [sp, #524]	; 0x20c
	char tmp_info[512] = "";
    4538:	9100      	str	r1, [sp, #0]
    453a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
    453e:	a801      	add	r0, sp, #4
    4540:	4b1b      	ldr	r3, [pc, #108]	; (45b0 <LIDAR_RES_get_info+0xac>)
    4542:	4798      	blx	r3
    4544:	2413      	movs	r4, #19
	
	/** Get hexadecimal string output */
	int i, j=0;
	for (i=15; i>=0; i--) {
		sprintf(&serial_number[j++], "%02X", DATA_RESPONSE[i+4]);
    4546:	4f19      	ldr	r7, [pc, #100]	; (45ac <LIDAR_RES_get_info+0xa8>)
    4548:	4e1a      	ldr	r6, [pc, #104]	; (45b4 <LIDAR_RES_get_info+0xb0>)
    454a:	4d1b      	ldr	r5, [pc, #108]	; (45b8 <LIDAR_RES_get_info+0xb4>)
    454c:	5d3a      	ldrb	r2, [r7, r4]
    454e:	ab84      	add	r3, sp, #528	; 0x210
    4550:	1b18      	subs	r0, r3, r4
    4552:	4631      	mov	r1, r6
    4554:	3003      	adds	r0, #3
    4556:	47a8      	blx	r5
    4558:	3c01      	subs	r4, #1
	for (i=15; i>=0; i--) {
    455a:	2c03      	cmp	r4, #3
    455c:	d1f6      	bne.n	454c <LIDAR_RES_get_info+0x48>
	}
	
	/* Format string to print as header in .lam file */
	sprintf(tmp_info, "# RPLiDAR Model ID: %u\r\n", model_id);
    455e:	465a      	mov	r2, fp
    4560:	4916      	ldr	r1, [pc, #88]	; (45bc <LIDAR_RES_get_info+0xb8>)
    4562:	4668      	mov	r0, sp
    4564:	4d14      	ldr	r5, [pc, #80]	; (45b8 <LIDAR_RES_get_info+0xb4>)
    4566:	47a8      	blx	r5
	strcpy(info, tmp_info);
    4568:	4c15      	ldr	r4, [pc, #84]	; (45c0 <LIDAR_RES_get_info+0xbc>)
    456a:	4669      	mov	r1, sp
    456c:	4620      	mov	r0, r4
    456e:	4b15      	ldr	r3, [pc, #84]	; (45c4 <LIDAR_RES_get_info+0xc0>)
    4570:	4798      	blx	r3
	sprintf(tmp_info, "# RPLiDAR Firmware Version: %u.%u\r\n", firmware_major, firmware_minor);
    4572:	4653      	mov	r3, sl
    4574:	464a      	mov	r2, r9
    4576:	4914      	ldr	r1, [pc, #80]	; (45c8 <LIDAR_RES_get_info+0xc4>)
    4578:	4668      	mov	r0, sp
    457a:	47a8      	blx	r5
	strcat(info, tmp_info);
    457c:	4669      	mov	r1, sp
    457e:	4620      	mov	r0, r4
    4580:	4e12      	ldr	r6, [pc, #72]	; (45cc <LIDAR_RES_get_info+0xc8>)
    4582:	47b0      	blx	r6
	sprintf(tmp_info, "# Hardware Version: %u\r\n", hardware_version);
    4584:	4642      	mov	r2, r8
    4586:	4912      	ldr	r1, [pc, #72]	; (45d0 <LIDAR_RES_get_info+0xcc>)
    4588:	4668      	mov	r0, sp
    458a:	47a8      	blx	r5
	strcat(info, tmp_info);
    458c:	4669      	mov	r1, sp
    458e:	4620      	mov	r0, r4
    4590:	47b0      	blx	r6
	sprintf(tmp_info, "# Serial Number: 0x%s\r\n", serial_number);
    4592:	aa80      	add	r2, sp, #512	; 0x200
    4594:	490f      	ldr	r1, [pc, #60]	; (45d4 <LIDAR_RES_get_info+0xd0>)
    4596:	4668      	mov	r0, sp
    4598:	47a8      	blx	r5
	strcat(info, tmp_info);
    459a:	4669      	mov	r1, sp
    459c:	4620      	mov	r0, r4
    459e:	47b0      	blx	r6
	return info;
}
    45a0:	4620      	mov	r0, r4
    45a2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    45a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45aa:	bf00      	nop
    45ac:	200007ec 	.word	0x200007ec
    45b0:	00006bbd 	.word	0x00006bbd
    45b4:	000097b8 	.word	0x000097b8
    45b8:	00007041 	.word	0x00007041
    45bc:	000097c0 	.word	0x000097c0
    45c0:	20000d8c 	.word	0x20000d8c
    45c4:	0000712d 	.word	0x0000712d
    45c8:	000097dc 	.word	0x000097dc
    45cc:	0000710f 	.word	0x0000710f
    45d0:	00009800 	.word	0x00009800
    45d4:	0000981c 	.word	0x0000981c

000045d8 <LIDAR_RES_get_health>:
  *		Order 8..0		+1		error_code[7:0]
  *						+2		error_code[15:8]	
  *	@return uint16_t : error_code
  */
uint16_t LIDAR_RES_get_health(void) 
{
    45d8:	b510      	push	{r4, lr}
	char* status;
	uint16_t error_code;  
	
	switch(DATA_RESPONSE[0]) {
    45da:	4b10      	ldr	r3, [pc, #64]	; (461c <LIDAR_RES_get_health+0x44>)
    45dc:	781b      	ldrb	r3, [r3, #0]
    45de:	b2db      	uxtb	r3, r3
    45e0:	2b01      	cmp	r3, #1
    45e2:	d012      	beq.n	460a <LIDAR_RES_get_health+0x32>
    45e4:	b19b      	cbz	r3, 460e <LIDAR_RES_get_health+0x36>
		case 0: status = "GOOD"; break;
		case 1: status = "WARNING"; break;
		case 2: status = "ERROR"; break;
		default: status = "UNKNOWN"; break;
    45e6:	4a0e      	ldr	r2, [pc, #56]	; (4620 <LIDAR_RES_get_health+0x48>)
    45e8:	490e      	ldr	r1, [pc, #56]	; (4624 <LIDAR_RES_get_health+0x4c>)
    45ea:	2b02      	cmp	r3, #2
    45ec:	bf18      	it	ne
    45ee:	4611      	movne	r1, r2
	}
	
	error_code = DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8);
    45f0:	4b0a      	ldr	r3, [pc, #40]	; (461c <LIDAR_RES_get_health+0x44>)
    45f2:	781c      	ldrb	r4, [r3, #0]
    45f4:	785b      	ldrb	r3, [r3, #1]
    45f6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    45fa:	b2a4      	uxth	r4, r4
	
    if (DEBUG) {
		if (error_code == 0)
    45fc:	b14c      	cbz	r4, 4612 <LIDAR_RES_get_health+0x3a>
			printf(" : LiDAR Health is %s!\r\n", status);
		else 
			printf(" : LiDAR Health is %s!\r\n : Error code: %u\r\n", 
    45fe:	4622      	mov	r2, r4
    4600:	4809      	ldr	r0, [pc, #36]	; (4628 <LIDAR_RES_get_health+0x50>)
    4602:	4b0a      	ldr	r3, [pc, #40]	; (462c <LIDAR_RES_get_health+0x54>)
    4604:	4798      	blx	r3
				    status, error_code);
    }
	
	return error_code;
}
    4606:	4620      	mov	r0, r4
    4608:	bd10      	pop	{r4, pc}
		case 1: status = "WARNING"; break;
    460a:	4909      	ldr	r1, [pc, #36]	; (4630 <LIDAR_RES_get_health+0x58>)
    460c:	e7f0      	b.n	45f0 <LIDAR_RES_get_health+0x18>
		case 0: status = "GOOD"; break;
    460e:	4909      	ldr	r1, [pc, #36]	; (4634 <LIDAR_RES_get_health+0x5c>)
    4610:	e7ee      	b.n	45f0 <LIDAR_RES_get_health+0x18>
			printf(" : LiDAR Health is %s!\r\n", status);
    4612:	4809      	ldr	r0, [pc, #36]	; (4638 <LIDAR_RES_get_health+0x60>)
    4614:	4b05      	ldr	r3, [pc, #20]	; (462c <LIDAR_RES_get_health+0x54>)
    4616:	4798      	blx	r3
    4618:	e7f5      	b.n	4606 <LIDAR_RES_get_health+0x2e>
    461a:	bf00      	nop
    461c:	200007ec 	.word	0x200007ec
    4620:	0000984c 	.word	0x0000984c
    4624:	00009844 	.word	0x00009844
    4628:	00009870 	.word	0x00009870
    462c:	00006d25 	.word	0x00006d25
    4630:	0000983c 	.word	0x0000983c
    4634:	00009834 	.word	0x00009834
    4638:	00009854 	.word	0x00009854

0000463c <LIDAR_RES_get_samplerate>:
  *		Order 8..0		+1		Tstandard[15:8]
  *						+2		Texpress[7:0]
  *						+3		Texpress[15:8]	
  */
void LIDAR_RES_get_samplerate(void)
{
    463c:	b538      	push	{r3, r4, r5, lr}
    if (DEBUG) {
	    printf(" : Standard Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8));
    463e:	4c07      	ldr	r4, [pc, #28]	; (465c <LIDAR_RES_get_samplerate+0x20>)
    4640:	7823      	ldrb	r3, [r4, #0]
    4642:	7861      	ldrb	r1, [r4, #1]
	    printf(" : Standard Scan Samplerate: %u\r\n", 
    4644:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    4648:	4805      	ldr	r0, [pc, #20]	; (4660 <LIDAR_RES_get_samplerate+0x24>)
    464a:	4d06      	ldr	r5, [pc, #24]	; (4664 <LIDAR_RES_get_samplerate+0x28>)
    464c:	47a8      	blx	r5
		printf(" : Express Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[2] + ((unsigned)DATA_RESPONSE[3] << 8));
    464e:	78a3      	ldrb	r3, [r4, #2]
    4650:	78e1      	ldrb	r1, [r4, #3]
		printf(" : Express Scan Samplerate: %u\r\n", 
    4652:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    4656:	4804      	ldr	r0, [pc, #16]	; (4668 <LIDAR_RES_get_samplerate+0x2c>)
    4658:	47a8      	blx	r5
    465a:	bd38      	pop	{r3, r4, r5, pc}
    465c:	200007ec 	.word	0x200007ec
    4660:	0000989c 	.word	0x0000989c
    4664:	00006d25 	.word	0x00006d25
    4668:	000098c0 	.word	0x000098c0

0000466c <main>:

/** 
  * Application entry point
  */ 
int main(void)
{
    466c:	b580      	push	{r7, lr}
    466e:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	start_init();
    4670:	4b2b      	ldr	r3, [pc, #172]	; (4720 <main+0xb4>)
    4672:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4674:	4b2b      	ldr	r3, [pc, #172]	; (4724 <main+0xb8>)
    4676:	f642 62df 	movw	r2, #11999	; 0x2edf
    467a:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    467c:	21e0      	movs	r1, #224	; 0xe0
    467e:	4a2a      	ldr	r2, [pc, #168]	; (4728 <main+0xbc>)
    4680:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    4684:	2000      	movs	r0, #0
    4686:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4688:	2207      	movs	r2, #7
    468a:	601a      	str	r2, [r3, #0]
	
	if (SYSTICK_EN)
		SysTick_Config(12000UL); /* 12M ticks/second / 1k ticks/second = 12000 */
	
	status = STATUS_IDLE;
    468c:	4b27      	ldr	r3, [pc, #156]	; (472c <main+0xc0>)
    468e:	7018      	strb	r0, [r3, #0]
	
	SERVO_set_angle(0);
    4690:	4b27      	ldr	r3, [pc, #156]	; (4730 <main+0xc4>)
    4692:	4798      	blx	r3

	if (DEBUG) {
		printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
    4694:	4827      	ldr	r0, [pc, #156]	; (4734 <main+0xc8>)
    4696:	4b28      	ldr	r3, [pc, #160]	; (4738 <main+0xcc>)
    4698:	4798      	blx	r3

		while (1) {
			uint32_t user_selection = 0;

			printf("%s", menu_txt);
    469a:	4f28      	ldr	r7, [pc, #160]	; (473c <main+0xd0>)
    469c:	4e28      	ldr	r6, [pc, #160]	; (4740 <main+0xd4>)
    469e:	4d29      	ldr	r5, [pc, #164]	; (4744 <main+0xd8>)
    46a0:	e004      	b.n	46ac <main+0x40>
			
			if (scanf("%"PRIu32"", &user_selection) == 0) {
				/* If its not a number, flush stdin */
				fflush(stdin);
    46a2:	4b29      	ldr	r3, [pc, #164]	; (4748 <main+0xdc>)
    46a4:	681b      	ldr	r3, [r3, #0]
    46a6:	6858      	ldr	r0, [r3, #4]
    46a8:	4b28      	ldr	r3, [pc, #160]	; (474c <main+0xe0>)
    46aa:	4798      	blx	r3
			uint32_t user_selection = 0;
    46ac:	ac02      	add	r4, sp, #8
    46ae:	2300      	movs	r3, #0
    46b0:	f844 3d04 	str.w	r3, [r4, #-4]!
			printf("%s", menu_txt);
    46b4:	4639      	mov	r1, r7
    46b6:	4630      	mov	r0, r6
    46b8:	47a8      	blx	r5
			if (scanf("%"PRIu32"", &user_selection) == 0) {
    46ba:	4621      	mov	r1, r4
    46bc:	4824      	ldr	r0, [pc, #144]	; (4750 <main+0xe4>)
    46be:	4b25      	ldr	r3, [pc, #148]	; (4754 <main+0xe8>)
    46c0:	4798      	blx	r3
    46c2:	2800      	cmp	r0, #0
    46c4:	d0ed      	beq.n	46a2 <main+0x36>
				continue;
			}
			
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    46c6:	9901      	ldr	r1, [sp, #4]
    46c8:	4823      	ldr	r0, [pc, #140]	; (4758 <main+0xec>)
    46ca:	47a8      	blx	r5
			
			switch (user_selection) {
    46cc:	9b01      	ldr	r3, [sp, #4]
    46ce:	3b01      	subs	r3, #1
    46d0:	2b05      	cmp	r3, #5
    46d2:	d820      	bhi.n	4716 <main+0xaa>
    46d4:	e8df f003 	tbb	[pc, r3]
    46d8:	16131003 	.word	0x16131003
    46dc:	1c19      	.short	0x1c19
  __ASM volatile ("dsb 0xF":::"memory");
    46de:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    46e2:	4911      	ldr	r1, [pc, #68]	; (4728 <main+0xbc>)
    46e4:	68ca      	ldr	r2, [r1, #12]
    46e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    46ea:	4b1c      	ldr	r3, [pc, #112]	; (475c <main+0xf0>)
    46ec:	4313      	orrs	r3, r2
    46ee:	60cb      	str	r3, [r1, #12]
    46f0:	f3bf 8f4f 	dsb	sy
    __NOP();
    46f4:	bf00      	nop
    46f6:	e7fd      	b.n	46f4 <main+0x88>
				case 1:
					NVIC_SystemReset();
					break;
				
				case 2:
					EEPROM_menu();
    46f8:	4b19      	ldr	r3, [pc, #100]	; (4760 <main+0xf4>)
    46fa:	4798      	blx	r3
					break;
    46fc:	e7d6      	b.n	46ac <main+0x40>

				case 3:
					SERVO_menu();
    46fe:	4b19      	ldr	r3, [pc, #100]	; (4764 <main+0xf8>)
    4700:	4798      	blx	r3
					break;
    4702:	e7d3      	b.n	46ac <main+0x40>
				
				case 4:
					LIDAR_menu();
    4704:	4b18      	ldr	r3, [pc, #96]	; (4768 <main+0xfc>)
    4706:	4798      	blx	r3
					break;
    4708:	e7d0      	b.n	46ac <main+0x40>
				
				case 5:
					SD_menu();
    470a:	4b18      	ldr	r3, [pc, #96]	; (476c <main+0x100>)
    470c:	4798      	blx	r3
					break;
    470e:	e7cd      	b.n	46ac <main+0x40>
				
				case 6:
					scan();
    4710:	4b17      	ldr	r3, [pc, #92]	; (4770 <main+0x104>)
    4712:	4798      	blx	r3
					break;
    4714:	e7ca      	b.n	46ac <main+0x40>
				
				default:
					printf("\r\nInvalid option \r\n");
    4716:	4817      	ldr	r0, [pc, #92]	; (4774 <main+0x108>)
    4718:	4b07      	ldr	r3, [pc, #28]	; (4738 <main+0xcc>)
    471a:	4798      	blx	r3
					break;
    471c:	e7c6      	b.n	46ac <main+0x40>
    471e:	bf00      	nop
    4720:	00005c39 	.word	0x00005c39
    4724:	e000e010 	.word	0xe000e010
    4728:	e000ed00 	.word	0xe000ed00
    472c:	200012d1 	.word	0x200012d1
    4730:	00005aa9 	.word	0x00005aa9
    4734:	000098e4 	.word	0x000098e4
    4738:	00006e0d 	.word	0x00006e0d
    473c:	20000224 	.word	0x20000224
    4740:	00008b78 	.word	0x00008b78
    4744:	00006d25 	.word	0x00006d25
    4748:	200002f0 	.word	0x200002f0
    474c:	00006985 	.word	0x00006985
    4750:	00008b24 	.word	0x00008b24
    4754:	00006e3d 	.word	0x00006e3d
    4758:	00008b7c 	.word	0x00008b7c
    475c:	05fa0004 	.word	0x05fa0004
    4760:	00000b2d 	.word	0x00000b2d
    4764:	00005b7d 	.word	0x00005b7d
    4768:	00003b19 	.word	0x00003b19
    476c:	00003761 	.word	0x00003761
    4770:	00004b05 	.word	0x00004b05
    4774:	00009920 	.word	0x00009920

00004778 <file_result_error>:
/**
  *	Return string based on file result
  */
char* file_result_error(void)
{
	switch (fresult) {
    4778:	4b1c      	ldr	r3, [pc, #112]	; (47ec <file_result_error+0x74>)
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	3b01      	subs	r3, #1
    477e:	2b12      	cmp	r3, #18
    4780:	d82f      	bhi.n	47e2 <file_result_error+0x6a>
    4782:	e8df f003 	tbb	[pc, r3]
    4786:	0a30      	.short	0x0a30
    4788:	12100e0c 	.word	0x12100e0c
    478c:	1a181614 	.word	0x1a181614
    4790:	22201e1c 	.word	0x22201e1c
    4794:	2a282624 	.word	0x2a282624
    4798:	2c          	.byte	0x2c
    4799:	00          	.byte	0x00
		case FR_DISK_ERR:			 return "Hard error occurred in the low level disk I/O layer";
		case FR_INT_ERR:			 return "Assertion failed";
    479a:	4815      	ldr	r0, [pc, #84]	; (47f0 <file_result_error+0x78>)
    479c:	4770      	bx	lr
		case FR_NOT_READY:			 return "Physical drive cannot work";
    479e:	4815      	ldr	r0, [pc, #84]	; (47f4 <file_result_error+0x7c>)
    47a0:	4770      	bx	lr
		case FR_NO_FILE:			 return "Could not find file";
    47a2:	4815      	ldr	r0, [pc, #84]	; (47f8 <file_result_error+0x80>)
    47a4:	4770      	bx	lr
		case FR_NO_PATH:			 return "Could not find path";
    47a6:	4815      	ldr	r0, [pc, #84]	; (47fc <file_result_error+0x84>)
    47a8:	4770      	bx	lr
		case FR_INVALID_NAME:		 return "Path name format invalid";
    47aa:	4815      	ldr	r0, [pc, #84]	; (4800 <file_result_error+0x88>)
    47ac:	4770      	bx	lr
		case FR_DENIED:				 return "Access denied due to prohibited access or directory full";
    47ae:	4815      	ldr	r0, [pc, #84]	; (4804 <file_result_error+0x8c>)
    47b0:	4770      	bx	lr
		case FR_EXIST:				 return "Access denied due to prohibited access";
    47b2:	4815      	ldr	r0, [pc, #84]	; (4808 <file_result_error+0x90>)
    47b4:	4770      	bx	lr
		case FR_INVALID_OBJECT:		 return "The file/directory object is invalid";
    47b6:	4815      	ldr	r0, [pc, #84]	; (480c <file_result_error+0x94>)
    47b8:	4770      	bx	lr
		case FR_WRITE_PROTECTED:	 return "The physical drive is write protected";
    47ba:	4815      	ldr	r0, [pc, #84]	; (4810 <file_result_error+0x98>)
    47bc:	4770      	bx	lr
		case FR_INVALID_DRIVE:		 return "The logical drive number is invalid";
    47be:	4815      	ldr	r0, [pc, #84]	; (4814 <file_result_error+0x9c>)
    47c0:	4770      	bx	lr
		case FR_NOT_ENABLED:		 return "The volume has no work area";
    47c2:	4815      	ldr	r0, [pc, #84]	; (4818 <file_result_error+0xa0>)
    47c4:	4770      	bx	lr
		case FR_NO_FILESYSTEM:		 return "There is no valid FAT volume";
    47c6:	4815      	ldr	r0, [pc, #84]	; (481c <file_result_error+0xa4>)
    47c8:	4770      	bx	lr
		case FR_MKFS_ABORTED:		 return "The f_mkfs() aborted due to any parameter error";
    47ca:	4815      	ldr	r0, [pc, #84]	; (4820 <file_result_error+0xa8>)
    47cc:	4770      	bx	lr
		case FR_TIMEOUT:			 return "Could not get a grant to access the volume within defined period";
    47ce:	4815      	ldr	r0, [pc, #84]	; (4824 <file_result_error+0xac>)
    47d0:	4770      	bx	lr
		case FR_LOCKED:				 return "The operation is rejected according to the file sharing policy";
    47d2:	4815      	ldr	r0, [pc, #84]	; (4828 <file_result_error+0xb0>)
    47d4:	4770      	bx	lr
		case FR_NOT_ENOUGH_CORE:	 return "LFN working buffer could not be allocated";
    47d6:	4815      	ldr	r0, [pc, #84]	; (482c <file_result_error+0xb4>)
    47d8:	4770      	bx	lr
		case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_LOCK";
    47da:	4815      	ldr	r0, [pc, #84]	; (4830 <file_result_error+0xb8>)
    47dc:	4770      	bx	lr
		case FR_INVALID_PARAMETER:	 return "Given parameter is invalid";
    47de:	4815      	ldr	r0, [pc, #84]	; (4834 <file_result_error+0xbc>)
    47e0:	4770      	bx	lr
		default:					 return "Disk write ok...should not have reached here";
    47e2:	4815      	ldr	r0, [pc, #84]	; (4838 <file_result_error+0xc0>)
    47e4:	4770      	bx	lr
		case FR_DISK_ERR:			 return "Hard error occurred in the low level disk I/O layer";
    47e6:	4815      	ldr	r0, [pc, #84]	; (483c <file_result_error+0xc4>)
	}
	return 0;
}
    47e8:	4770      	bx	lr
    47ea:	bf00      	nop
    47ec:	20000f8c 	.word	0x20000f8c
    47f0:	00008bfc 	.word	0x00008bfc
    47f4:	00008c10 	.word	0x00008c10
    47f8:	00008c2c 	.word	0x00008c2c
    47fc:	00008c40 	.word	0x00008c40
    4800:	00008c54 	.word	0x00008c54
    4804:	00008c70 	.word	0x00008c70
    4808:	00008cac 	.word	0x00008cac
    480c:	00008cd4 	.word	0x00008cd4
    4810:	00008cfc 	.word	0x00008cfc
    4814:	00008d24 	.word	0x00008d24
    4818:	00008d48 	.word	0x00008d48
    481c:	00008d64 	.word	0x00008d64
    4820:	00008d84 	.word	0x00008d84
    4824:	00008db4 	.word	0x00008db4
    4828:	00008df8 	.word	0x00008df8
    482c:	00008e38 	.word	0x00008e38
    4830:	00008e64 	.word	0x00008e64
    4834:	00008e84 	.word	0x00008e84
    4838:	00008ea0 	.word	0x00008ea0
    483c:	00008bc8 	.word	0x00008bc8

00004840 <scan_error>:
{
    4840:	b508      	push	{r3, lr}
    4842:	4604      	mov	r4, r0
	printf("\r\n[Scan Error]\r\n");
    4844:	4836      	ldr	r0, [pc, #216]	; (4920 <scan_error+0xe0>)
    4846:	4b37      	ldr	r3, [pc, #220]	; (4924 <scan_error+0xe4>)
    4848:	4798      	blx	r3
	LIDAR_PWM_stop();
    484a:	4b37      	ldr	r3, [pc, #220]	; (4928 <scan_error+0xe8>)
    484c:	4798      	blx	r3
	status = STATUS_ERROR;
    484e:	2202      	movs	r2, #2
    4850:	4b36      	ldr	r3, [pc, #216]	; (492c <scan_error+0xec>)
    4852:	701a      	strb	r2, [r3, #0]
	switch (error_code) {
    4854:	2c07      	cmp	r4, #7
    4856:	d85e      	bhi.n	4916 <scan_error+0xd6>
    4858:	e8df f004 	tbb	[pc, r4]
    485c:	2b160804 	.word	0x2b160804
    4860:	53493f35 	.word	0x53493f35
			printf(" | Timeout Error\r\n");
    4864:	4832      	ldr	r0, [pc, #200]	; (4930 <scan_error+0xf0>)
    4866:	4b2f      	ldr	r3, [pc, #188]	; (4924 <scan_error+0xe4>)
    4868:	4798      	blx	r3
    486a:	e7fe      	b.n	486a <scan_error+0x2a>
			printf(" | Out-of-Bounds Error\r\n");
    486c:	4831      	ldr	r0, [pc, #196]	; (4934 <scan_error+0xf4>)
    486e:	4b2d      	ldr	r3, [pc, #180]	; (4924 <scan_error+0xe4>)
    4870:	4798      	blx	r3
			printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
    4872:	4b31      	ldr	r3, [pc, #196]	; (4938 <scan_error+0xf8>)
    4874:	6819      	ldr	r1, [r3, #0]
					byte_count, (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE);
    4876:	4b31      	ldr	r3, [pc, #196]	; (493c <scan_error+0xfc>)
    4878:	685a      	ldr	r2, [r3, #4]
    487a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
			printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
    487e:	3207      	adds	r2, #7
    4880:	482f      	ldr	r0, [pc, #188]	; (4940 <scan_error+0x100>)
    4882:	4b30      	ldr	r3, [pc, #192]	; (4944 <scan_error+0x104>)
    4884:	4798      	blx	r3
			break;
    4886:	e7f0      	b.n	486a <scan_error+0x2a>
			printf(" | Disk Initialization Error\r\n");
    4888:	482f      	ldr	r0, [pc, #188]	; (4948 <scan_error+0x108>)
    488a:	4b26      	ldr	r3, [pc, #152]	; (4924 <scan_error+0xe4>)
    488c:	4798      	blx	r3
	switch (dstatus) {
    488e:	4b2f      	ldr	r3, [pc, #188]	; (494c <scan_error+0x10c>)
    4890:	785b      	ldrb	r3, [r3, #1]
    4892:	2b02      	cmp	r3, #2
    4894:	d009      	beq.n	48aa <scan_error+0x6a>
    4896:	2b04      	cmp	r3, #4
    4898:	d009      	beq.n	48ae <scan_error+0x6e>
	return 0;
    489a:	2b01      	cmp	r3, #1
    489c:	492c      	ldr	r1, [pc, #176]	; (4950 <scan_error+0x110>)
    489e:	bf18      	it	ne
    48a0:	2100      	movne	r1, #0
			printf(" | | %s\r\n", disk_status_error());
    48a2:	482c      	ldr	r0, [pc, #176]	; (4954 <scan_error+0x114>)
    48a4:	4b27      	ldr	r3, [pc, #156]	; (4944 <scan_error+0x104>)
    48a6:	4798      	blx	r3
			break;
    48a8:	e7df      	b.n	486a <scan_error+0x2a>
		case STA_NODISK:  return "No medium in the drive";
    48aa:	492b      	ldr	r1, [pc, #172]	; (4958 <scan_error+0x118>)
    48ac:	e7f9      	b.n	48a2 <scan_error+0x62>
		case STA_PROTECT: return "Disk write protected";
    48ae:	492b      	ldr	r1, [pc, #172]	; (495c <scan_error+0x11c>)
    48b0:	e7f7      	b.n	48a2 <scan_error+0x62>
			printf(" | Disk Mount Error\r\n");
    48b2:	482b      	ldr	r0, [pc, #172]	; (4960 <scan_error+0x120>)
    48b4:	4b1b      	ldr	r3, [pc, #108]	; (4924 <scan_error+0xe4>)
    48b6:	4798      	blx	r3
			printf(" | | %s\r\n", file_result_error());
    48b8:	4b2a      	ldr	r3, [pc, #168]	; (4964 <scan_error+0x124>)
    48ba:	4798      	blx	r3
    48bc:	4601      	mov	r1, r0
    48be:	4825      	ldr	r0, [pc, #148]	; (4954 <scan_error+0x114>)
    48c0:	4b20      	ldr	r3, [pc, #128]	; (4944 <scan_error+0x104>)
    48c2:	4798      	blx	r3
			break;
    48c4:	e7d1      	b.n	486a <scan_error+0x2a>
			printf(" | File Create Error\r\n");
    48c6:	4828      	ldr	r0, [pc, #160]	; (4968 <scan_error+0x128>)
    48c8:	4b16      	ldr	r3, [pc, #88]	; (4924 <scan_error+0xe4>)
    48ca:	4798      	blx	r3
			printf(" | | %s\r\n", file_result_error());
    48cc:	4b25      	ldr	r3, [pc, #148]	; (4964 <scan_error+0x124>)
    48ce:	4798      	blx	r3
    48d0:	4601      	mov	r1, r0
    48d2:	4820      	ldr	r0, [pc, #128]	; (4954 <scan_error+0x114>)
    48d4:	4b1b      	ldr	r3, [pc, #108]	; (4944 <scan_error+0x104>)
    48d6:	4798      	blx	r3
			break;
    48d8:	e7c7      	b.n	486a <scan_error+0x2a>
			printf(" | File Write Error\r\n");
    48da:	4824      	ldr	r0, [pc, #144]	; (496c <scan_error+0x12c>)
    48dc:	4b11      	ldr	r3, [pc, #68]	; (4924 <scan_error+0xe4>)
    48de:	4798      	blx	r3
			printf(" | | %s\r\n", file_result_error());
    48e0:	4b20      	ldr	r3, [pc, #128]	; (4964 <scan_error+0x124>)
    48e2:	4798      	blx	r3
    48e4:	4601      	mov	r1, r0
    48e6:	481b      	ldr	r0, [pc, #108]	; (4954 <scan_error+0x114>)
    48e8:	4b16      	ldr	r3, [pc, #88]	; (4944 <scan_error+0x104>)
    48ea:	4798      	blx	r3
			break;
    48ec:	e7bd      	b.n	486a <scan_error+0x2a>
			printf(" | File Close Error\r\n");
    48ee:	4820      	ldr	r0, [pc, #128]	; (4970 <scan_error+0x130>)
    48f0:	4b0c      	ldr	r3, [pc, #48]	; (4924 <scan_error+0xe4>)
    48f2:	4798      	blx	r3
			printf(" | | %s\r\n", file_result_error());
    48f4:	4b1b      	ldr	r3, [pc, #108]	; (4964 <scan_error+0x124>)
    48f6:	4798      	blx	r3
    48f8:	4601      	mov	r1, r0
    48fa:	4816      	ldr	r0, [pc, #88]	; (4954 <scan_error+0x114>)
    48fc:	4b11      	ldr	r3, [pc, #68]	; (4944 <scan_error+0x104>)
    48fe:	4798      	blx	r3
			break;
    4900:	e7b3      	b.n	486a <scan_error+0x2a>
			printf(" | Error Generating New Filename\r\n");
    4902:	481c      	ldr	r0, [pc, #112]	; (4974 <scan_error+0x134>)
    4904:	4b07      	ldr	r3, [pc, #28]	; (4924 <scan_error+0xe4>)
    4906:	4798      	blx	r3
			printf(" | | %s\r\n", file_result_error());
    4908:	4b16      	ldr	r3, [pc, #88]	; (4964 <scan_error+0x124>)
    490a:	4798      	blx	r3
    490c:	4601      	mov	r1, r0
    490e:	4811      	ldr	r0, [pc, #68]	; (4954 <scan_error+0x114>)
    4910:	4b0c      	ldr	r3, [pc, #48]	; (4944 <scan_error+0x104>)
    4912:	4798      	blx	r3
			break;
    4914:	e7a9      	b.n	486a <scan_error+0x2a>
			printf(" | Error code %u\r\n", error_code);
    4916:	4621      	mov	r1, r4
    4918:	4817      	ldr	r0, [pc, #92]	; (4978 <scan_error+0x138>)
    491a:	4b0a      	ldr	r3, [pc, #40]	; (4944 <scan_error+0x104>)
    491c:	4798      	blx	r3
    491e:	e7a4      	b.n	486a <scan_error+0x2a>
    4920:	0000997c 	.word	0x0000997c
    4924:	00006e0d 	.word	0x00006e0d
    4928:	000039c5 	.word	0x000039c5
    492c:	200012d1 	.word	0x200012d1
    4930:	0000998c 	.word	0x0000998c
    4934:	000099a0 	.word	0x000099a0
    4938:	20000870 	.word	0x20000870
    493c:	20000c80 	.word	0x20000c80
    4940:	000099b8 	.word	0x000099b8
    4944:	00006d25 	.word	0x00006d25
    4948:	00009a00 	.word	0x00009a00
    494c:	20000f8c 	.word	0x20000f8c
    4950:	00009934 	.word	0x00009934
    4954:	00009a20 	.word	0x00009a20
    4958:	0000994c 	.word	0x0000994c
    495c:	00009964 	.word	0x00009964
    4960:	00009a2c 	.word	0x00009a2c
    4964:	00004779 	.word	0x00004779
    4968:	00009a44 	.word	0x00009a44
    496c:	00009a5c 	.word	0x00009a5c
    4970:	00009a74 	.word	0x00009a74
    4974:	00009a8c 	.word	0x00009a8c
    4978:	00009ab0 	.word	0x00009ab0

0000497c <process>:
	status = STATUS_PROCESSING; 
    497c:	2201      	movs	r2, #1
    497e:	4b57      	ldr	r3, [pc, #348]	; (4adc <process+0x160>)
    4980:	701a      	strb	r2, [r3, #0]
	if (lidar_request == LIDAR_STOP || 
    4982:	4b57      	ldr	r3, [pc, #348]	; (4ae0 <process+0x164>)
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	2b25      	cmp	r3, #37	; 0x25
    4988:	d012      	beq.n	49b0 <process+0x34>
    498a:	2b40      	cmp	r3, #64	; 0x40
    498c:	d010      	beq.n	49b0 <process+0x34>
{
    498e:	b510      	push	{r4, lr}
	if (!usart_sync_is_rx_not_empty(&LIDAR_USART))
    4990:	4854      	ldr	r0, [pc, #336]	; (4ae4 <process+0x168>)
    4992:	4b55      	ldr	r3, [pc, #340]	; (4ae8 <process+0x16c>)
    4994:	4798      	blx	r3
    4996:	2800      	cmp	r0, #0
    4998:	f000 809c 	beq.w	4ad4 <process+0x158>
	switch (byte_count) {
    499c:	4b53      	ldr	r3, [pc, #332]	; (4aec <process+0x170>)
    499e:	681b      	ldr	r3, [r3, #0]
    49a0:	2b06      	cmp	r3, #6
    49a2:	d862      	bhi.n	4a6a <process+0xee>
    49a4:	e8df f003 	tbb	[pc, r3]
    49a8:	3026180a 	.word	0x3026180a
    49ac:	4a3d      	.short	0x4a3d
    49ae:	57          	.byte	0x57
    49af:	00          	.byte	0x00
		if (lidar_timing) 
    49b0:	4b4f      	ldr	r3, [pc, #316]	; (4af0 <process+0x174>)
    49b2:	7818      	ldrb	r0, [r3, #0]
			return PROCESSING;
    49b4:	fab0 f080 	clz	r0, r0
    49b8:	0940      	lsrs	r0, r0, #5
    49ba:	4770      	bx	lr
			resp_desc.start1 = LIDAR_USART_read_byte();
    49bc:	4b4d      	ldr	r3, [pc, #308]	; (4af4 <process+0x178>)
    49be:	4798      	blx	r3
    49c0:	4b4d      	ldr	r3, [pc, #308]	; (4af8 <process+0x17c>)
    49c2:	7018      	strb	r0, [r3, #0]
			if (resp_desc.start1 == 0xA5)
    49c4:	28a5      	cmp	r0, #165	; 0xa5
    49c6:	d001      	beq.n	49cc <process+0x50>
			return PROCESSING;
    49c8:	2000      	movs	r0, #0
    49ca:	bd10      	pop	{r4, pc}
				byte_count++;
    49cc:	4a47      	ldr	r2, [pc, #284]	; (4aec <process+0x170>)
    49ce:	6813      	ldr	r3, [r2, #0]
    49d0:	3301      	adds	r3, #1
    49d2:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    49d4:	2000      	movs	r0, #0
    49d6:	bd10      	pop	{r4, pc}
			resp_desc.start2 = LIDAR_USART_read_byte();
    49d8:	4b46      	ldr	r3, [pc, #280]	; (4af4 <process+0x178>)
    49da:	4798      	blx	r3
    49dc:	4b46      	ldr	r3, [pc, #280]	; (4af8 <process+0x17c>)
    49de:	7058      	strb	r0, [r3, #1]
			if (resp_desc.start2 != 0x5A)
    49e0:	285a      	cmp	r0, #90	; 0x5a
				byte_count--;
    49e2:	4a42      	ldr	r2, [pc, #264]	; (4aec <process+0x170>)
    49e4:	6813      	ldr	r3, [r2, #0]
    49e6:	bf14      	ite	ne
    49e8:	f103 33ff 	addne.w	r3, r3, #4294967295
				byte_count++;
    49ec:	3301      	addeq	r3, #1
    49ee:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    49f0:	2000      	movs	r0, #0
    49f2:	bd10      	pop	{r4, pc}
			resp_desc.response_info = LIDAR_USART_read_byte();
    49f4:	4b3f      	ldr	r3, [pc, #252]	; (4af4 <process+0x178>)
    49f6:	4798      	blx	r3
    49f8:	4b3f      	ldr	r3, [pc, #252]	; (4af8 <process+0x17c>)
    49fa:	6058      	str	r0, [r3, #4]
			byte_count++;
    49fc:	4a3b      	ldr	r2, [pc, #236]	; (4aec <process+0x170>)
    49fe:	6813      	ldr	r3, [r2, #0]
    4a00:	3301      	adds	r3, #1
    4a02:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4a04:	2000      	movs	r0, #0
    4a06:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    4a08:	4b3a      	ldr	r3, [pc, #232]	; (4af4 <process+0x178>)
    4a0a:	4798      	blx	r3
    4a0c:	4a3a      	ldr	r2, [pc, #232]	; (4af8 <process+0x17c>)
    4a0e:	6853      	ldr	r3, [r2, #4]
    4a10:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    4a14:	6050      	str	r0, [r2, #4]
			byte_count++;
    4a16:	4a35      	ldr	r2, [pc, #212]	; (4aec <process+0x170>)
    4a18:	6813      	ldr	r3, [r2, #0]
    4a1a:	3301      	adds	r3, #1
    4a1c:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4a1e:	2000      	movs	r0, #0
    4a20:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    4a22:	4b34      	ldr	r3, [pc, #208]	; (4af4 <process+0x178>)
    4a24:	4798      	blx	r3
    4a26:	4a34      	ldr	r2, [pc, #208]	; (4af8 <process+0x17c>)
    4a28:	6853      	ldr	r3, [r2, #4]
    4a2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    4a2e:	6050      	str	r0, [r2, #4]
			byte_count++;
    4a30:	4a2e      	ldr	r2, [pc, #184]	; (4aec <process+0x170>)
    4a32:	6813      	ldr	r3, [r2, #0]
    4a34:	3301      	adds	r3, #1
    4a36:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4a38:	2000      	movs	r0, #0
    4a3a:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    4a3c:	4b2d      	ldr	r3, [pc, #180]	; (4af4 <process+0x178>)
    4a3e:	4798      	blx	r3
    4a40:	4a2d      	ldr	r2, [pc, #180]	; (4af8 <process+0x17c>)
    4a42:	6853      	ldr	r3, [r2, #4]
    4a44:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4a48:	6050      	str	r0, [r2, #4]
			byte_count++;
    4a4a:	4a28      	ldr	r2, [pc, #160]	; (4aec <process+0x170>)
    4a4c:	6813      	ldr	r3, [r2, #0]
    4a4e:	3301      	adds	r3, #1
    4a50:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4a52:	2000      	movs	r0, #0
    4a54:	bd10      	pop	{r4, pc}
			resp_desc.data_type = LIDAR_USART_read_byte();
    4a56:	4b27      	ldr	r3, [pc, #156]	; (4af4 <process+0x178>)
    4a58:	4798      	blx	r3
    4a5a:	4b27      	ldr	r3, [pc, #156]	; (4af8 <process+0x17c>)
    4a5c:	7218      	strb	r0, [r3, #8]
			byte_count++;
    4a5e:	4a23      	ldr	r2, [pc, #140]	; (4aec <process+0x170>)
    4a60:	6813      	ldr	r3, [r2, #0]
    4a62:	3301      	adds	r3, #1
    4a64:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4a66:	2000      	movs	r0, #0
    4a68:	bd10      	pop	{r4, pc}
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    4a6a:	4b20      	ldr	r3, [pc, #128]	; (4aec <process+0x170>)
    4a6c:	681c      	ldr	r4, [r3, #0]
    4a6e:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    4a70:	4b20      	ldr	r3, [pc, #128]	; (4af4 <process+0x178>)
    4a72:	4798      	blx	r3
    4a74:	4b21      	ldr	r3, [pc, #132]	; (4afc <process+0x180>)
    4a76:	5518      	strb	r0, [r3, r4]
			if (lidar_request == LIDAR_EXPRESS_SCAN) {
    4a78:	4b19      	ldr	r3, [pc, #100]	; (4ae0 <process+0x164>)
    4a7a:	781b      	ldrb	r3, [r3, #0]
    4a7c:	2b82      	cmp	r3, #130	; 0x82
    4a7e:	d011      	beq.n	4aa4 <process+0x128>
			byte_count++;
    4a80:	4a1a      	ldr	r2, [pc, #104]	; (4aec <process+0x170>)
    4a82:	6813      	ldr	r3, [r2, #0]
    4a84:	3301      	adds	r3, #1
    4a86:	6013      	str	r3, [r2, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    4a88:	4b1b      	ldr	r3, [pc, #108]	; (4af8 <process+0x17c>)
    4a8a:	685b      	ldr	r3, [r3, #4]
    4a8c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    4a90:	3307      	adds	r3, #7
    4a92:	6812      	ldr	r2, [r2, #0]
    4a94:	4293      	cmp	r3, r2
    4a96:	d01f      	beq.n	4ad8 <process+0x15c>
	} else if (byte_count > (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    4a98:	4a14      	ldr	r2, [pc, #80]	; (4aec <process+0x170>)
    4a9a:	6812      	ldr	r2, [r2, #0]
    4a9c:	4293      	cmp	r3, r2
    4a9e:	d316      	bcc.n	4ace <process+0x152>
	return PROCESSING;
    4aa0:	2000      	movs	r0, #0
}
    4aa2:	bd10      	pop	{r4, pc}
				if (data_idx == 0) {
    4aa4:	b934      	cbnz	r4, 4ab4 <process+0x138>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    4aa6:	4b15      	ldr	r3, [pc, #84]	; (4afc <process+0x180>)
    4aa8:	781b      	ldrb	r3, [r3, #0]
    4aaa:	091b      	lsrs	r3, r3, #4
    4aac:	2b0a      	cmp	r3, #10
    4aae:	d0e7      	beq.n	4a80 <process+0x104>
						return PROCESSING;
    4ab0:	2000      	movs	r0, #0
    4ab2:	bd10      	pop	{r4, pc}
				else if (data_idx == 1) {
    4ab4:	2c01      	cmp	r4, #1
    4ab6:	d1e3      	bne.n	4a80 <process+0x104>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    4ab8:	4b10      	ldr	r3, [pc, #64]	; (4afc <process+0x180>)
    4aba:	785b      	ldrb	r3, [r3, #1]
    4abc:	091b      	lsrs	r3, r3, #4
    4abe:	2b05      	cmp	r3, #5
    4ac0:	d0de      	beq.n	4a80 <process+0x104>
						byte_count--;
    4ac2:	4a0a      	ldr	r2, [pc, #40]	; (4aec <process+0x170>)
    4ac4:	6813      	ldr	r3, [r2, #0]
    4ac6:	3b01      	subs	r3, #1
    4ac8:	6013      	str	r3, [r2, #0]
						return PROCESSING;
    4aca:	2000      	movs	r0, #0
    4acc:	bd10      	pop	{r4, pc}
		scan_error(1);
    4ace:	2001      	movs	r0, #1
    4ad0:	4b0b      	ldr	r3, [pc, #44]	; (4b00 <process+0x184>)
    4ad2:	4798      	blx	r3
		return PROCESSING;
    4ad4:	2000      	movs	r0, #0
    4ad6:	bd10      	pop	{r4, pc}
		return COMPLETED;
    4ad8:	2001      	movs	r0, #1
    4ada:	bd10      	pop	{r4, pc}
    4adc:	200012d1 	.word	0x200012d1
    4ae0:	20000874 	.word	0x20000874
    4ae4:	200012bc 	.word	0x200012bc
    4ae8:	00002929 	.word	0x00002929
    4aec:	20000870 	.word	0x20000870
    4af0:	200012d0 	.word	0x200012d0
    4af4:	00003ae9 	.word	0x00003ae9
    4af8:	20000c80 	.word	0x20000c80
    4afc:	200007ec 	.word	0x200007ec
    4b00:	00004841 	.word	0x00004841

00004b04 <scan>:
{
    4b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b08:	b09b      	sub	sp, #108	; 0x6c
	dstatus = disk_initialize(0);
    4b0a:	2000      	movs	r0, #0
    4b0c:	4b8e      	ldr	r3, [pc, #568]	; (4d48 <scan+0x244>)
    4b0e:	4798      	blx	r3
    4b10:	4b8e      	ldr	r3, [pc, #568]	; (4d4c <scan+0x248>)
    4b12:	7058      	strb	r0, [r3, #1]
	if (dstatus)
    4b14:	b110      	cbz	r0, 4b1c <scan+0x18>
		scan_error(SCAN_ERR_DISK_INIT);
    4b16:	2002      	movs	r0, #2
    4b18:	4b8d      	ldr	r3, [pc, #564]	; (4d50 <scan+0x24c>)
    4b1a:	4798      	blx	r3
	fresult = f_mount(&fatfs, path, 0);
    4b1c:	4c8b      	ldr	r4, [pc, #556]	; (4d4c <scan+0x248>)
    4b1e:	2200      	movs	r2, #0
    4b20:	498c      	ldr	r1, [pc, #560]	; (4d54 <scan+0x250>)
    4b22:	1d20      	adds	r0, r4, #4
    4b24:	4b8c      	ldr	r3, [pc, #560]	; (4d58 <scan+0x254>)
    4b26:	4798      	blx	r3
    4b28:	7020      	strb	r0, [r4, #0]
	if (fresult)
    4b2a:	b110      	cbz	r0, 4b32 <scan+0x2e>
		scan_error(SCAN_ERR_DISK_MOUNT);
    4b2c:	2003      	movs	r0, #3
    4b2e:	4b88      	ldr	r3, [pc, #544]	; (4d50 <scan+0x24c>)
    4b30:	4798      	blx	r3
		printf("\r\nPress button to start\r\n");
    4b32:	488a      	ldr	r0, [pc, #552]	; (4d5c <scan+0x258>)
    4b34:	4b8a      	ldr	r3, [pc, #552]	; (4d60 <scan+0x25c>)
    4b36:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    4b38:	4f8a      	ldr	r7, [pc, #552]	; (4d64 <scan+0x260>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4b3a:	4d8b      	ldr	r5, [pc, #556]	; (4d68 <scan+0x264>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    4b3c:	4e8b      	ldr	r6, [pc, #556]	; (4d6c <scan+0x268>)
	CRITICAL_SECTION_ENTER();
    4b3e:	a808      	add	r0, sp, #32
    4b40:	47b8      	blx	r7
    4b42:	682a      	ldr	r2, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4b44:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4b46:	692c      	ldr	r4, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4b48:	405c      	eors	r4, r3
    4b4a:	4014      	ands	r4, r2
    4b4c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    4b4e:	a808      	add	r0, sp, #32
    4b50:	47b0      	blx	r6
	while (!gpio_get_pin_level(START_BTN));
    4b52:	f014 6f00 	tst.w	r4, #134217728	; 0x8000000
    4b56:	d0f2      	beq.n	4b3e <scan+0x3a>
	char *path = "";
	TCHAR lfilenum[3];
	DIR fdir;
	int i, filenum, highfilenum = 0;
	
	fresult = f_opendir(&fdir, path);
    4b58:	497e      	ldr	r1, [pc, #504]	; (4d54 <scan+0x250>)
    4b5a:	a809      	add	r0, sp, #36	; 0x24
    4b5c:	4b84      	ldr	r3, [pc, #528]	; (4d70 <scan+0x26c>)
    4b5e:	4798      	blx	r3
    4b60:	4b7a      	ldr	r3, [pc, #488]	; (4d4c <scan+0x248>)
    4b62:	7018      	strb	r0, [r3, #0]
	if (fresult)
    4b64:	b110      	cbz	r0, 4b6c <scan+0x68>
		scan_error(SCAN_ERR_NEW_FILENAME);
    4b66:	2007      	movs	r0, #7
    4b68:	4b79      	ldr	r3, [pc, #484]	; (4d50 <scan+0x24c>)
    4b6a:	4798      	blx	r3
	if (fresult)
    4b6c:	2600      	movs	r6, #0
	
	while (1) {
		fresult = f_readdir(&fdir, &finfo);
    4b6e:	4c77      	ldr	r4, [pc, #476]	; (4d4c <scan+0x248>)
    4b70:	f504 770e 	add.w	r7, r4, #568	; 0x238
    4b74:	4d7f      	ldr	r5, [pc, #508]	; (4d74 <scan+0x270>)
    4b76:	4639      	mov	r1, r7
    4b78:	a809      	add	r0, sp, #36	; 0x24
    4b7a:	47a8      	blx	r5
    4b7c:	7020      	strb	r0, [r4, #0]
		if (fresult || !finfo.fname[0])
    4b7e:	b9a8      	cbnz	r0, 4bac <scan+0xa8>
    4b80:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
    4b84:	b193      	cbz	r3, 4bac <scan+0xa8>
			break;
			
		/* shift right 4 to cut of "scan" */
		for (i=0; i<3; i++)
			lfilenum[i] = finfo.fname[i+4];
    4b86:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
    4b8a:	f88d 301c 	strb.w	r3, [sp, #28]
    4b8e:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
    4b92:	f88d 301d 	strb.w	r3, [sp, #29]
    4b96:	f894 3247 	ldrb.w	r3, [r4, #583]	; 0x247
    4b9a:	f88d 301e 	strb.w	r3, [sp, #30]
		filenum = atoi((char*)&lfilenum);
    4b9e:	a807      	add	r0, sp, #28
    4ba0:	4b75      	ldr	r3, [pc, #468]	; (4d78 <scan+0x274>)
    4ba2:	4798      	blx	r3
    4ba4:	4286      	cmp	r6, r0
    4ba6:	bfb8      	it	lt
    4ba8:	4606      	movlt	r6, r0
    4baa:	e7e4      	b.n	4b76 <scan+0x72>
		/* check if higher for highest scan number */
		if (filenum > highfilenum) 
			highfilenum = filenum;	
	}
	
	sprintf(filename, "scan%03u.lam", highfilenum + 1);
    4bac:	4c67      	ldr	r4, [pc, #412]	; (4d4c <scan+0x248>)
    4bae:	f504 7514 	add.w	r5, r4, #592	; 0x250
    4bb2:	1c72      	adds	r2, r6, #1
    4bb4:	4971      	ldr	r1, [pc, #452]	; (4d7c <scan+0x278>)
    4bb6:	4628      	mov	r0, r5
    4bb8:	4b71      	ldr	r3, [pc, #452]	; (4d80 <scan+0x27c>)
    4bba:	4798      	blx	r3
	if (DEBUG) printf("\r\nWriting to %s\r\n", filename);
    4bbc:	4629      	mov	r1, r5
    4bbe:	4871      	ldr	r0, [pc, #452]	; (4d84 <scan+0x280>)
    4bc0:	4b71      	ldr	r3, [pc, #452]	; (4d88 <scan+0x284>)
    4bc2:	4798      	blx	r3
	fresult = f_open(&fptr, get_new_filename(), FA_WRITE | FA_CREATE_ALWAYS);
    4bc4:	220a      	movs	r2, #10
    4bc6:	4629      	mov	r1, r5
    4bc8:	f504 7017 	add.w	r0, r4, #604	; 0x25c
    4bcc:	4b6f      	ldr	r3, [pc, #444]	; (4d8c <scan+0x288>)
    4bce:	4798      	blx	r3
    4bd0:	7020      	strb	r0, [r4, #0]
	if (fresult)
    4bd2:	b110      	cbz	r0, 4bda <scan+0xd6>
		scan_error(SCAN_ERR_FILE_CREATE);
    4bd4:	2004      	movs	r0, #4
    4bd6:	4b5e      	ldr	r3, [pc, #376]	; (4d50 <scan+0x24c>)
    4bd8:	4798      	blx	r3
		printf("\r\nStarting scan\r\n");
    4bda:	486d      	ldr	r0, [pc, #436]	; (4d90 <scan+0x28c>)
    4bdc:	4b60      	ldr	r3, [pc, #384]	; (4d60 <scan+0x25c>)
    4bde:	4798      	blx	r3
	LIDAR_REQ_reset();
    4be0:	4b6c      	ldr	r3, [pc, #432]	; (4d94 <scan+0x290>)
    4be2:	4798      	blx	r3
	while (!process()) {
    4be4:	4d6c      	ldr	r5, [pc, #432]	; (4d98 <scan+0x294>)
		LIDAR_RES_reset();
    4be6:	4c6d      	ldr	r4, [pc, #436]	; (4d9c <scan+0x298>)
	while (!process()) {
    4be8:	e000      	b.n	4bec <scan+0xe8>
		LIDAR_RES_reset();
    4bea:	47a0      	blx	r4
	while (!process()) {
    4bec:	47a8      	blx	r5
    4bee:	2800      	cmp	r0, #0
    4bf0:	d0fb      	beq.n	4bea <scan+0xe6>
	LIDAR_REQ_get_health();
    4bf2:	4b6b      	ldr	r3, [pc, #428]	; (4da0 <scan+0x29c>)
    4bf4:	4798      	blx	r3
	while (!process());
    4bf6:	4c68      	ldr	r4, [pc, #416]	; (4d98 <scan+0x294>)
    4bf8:	47a0      	blx	r4
    4bfa:	2800      	cmp	r0, #0
    4bfc:	d0fc      	beq.n	4bf8 <scan+0xf4>
	error_code = LIDAR_RES_get_health();
    4bfe:	4b69      	ldr	r3, [pc, #420]	; (4da4 <scan+0x2a0>)
    4c00:	4798      	blx	r3
	if (error_code)
    4c02:	b108      	cbz	r0, 4c08 <scan+0x104>
		scan_error(error_code);
    4c04:	4b52      	ldr	r3, [pc, #328]	; (4d50 <scan+0x24c>)
    4c06:	4798      	blx	r3
	LIDAR_REQ_get_info();
    4c08:	4b67      	ldr	r3, [pc, #412]	; (4da8 <scan+0x2a4>)
    4c0a:	4798      	blx	r3
	while (!process());
    4c0c:	4c62      	ldr	r4, [pc, #392]	; (4d98 <scan+0x294>)
    4c0e:	47a0      	blx	r4
    4c10:	2800      	cmp	r0, #0
    4c12:	d0fc      	beq.n	4c0e <scan+0x10a>
	info = LIDAR_RES_get_info();
    4c14:	4b65      	ldr	r3, [pc, #404]	; (4dac <scan+0x2a8>)
    4c16:	4798      	blx	r3
    4c18:	4606      	mov	r6, r0
		printf(info);
    4c1a:	4b5b      	ldr	r3, [pc, #364]	; (4d88 <scan+0x284>)
    4c1c:	4798      	blx	r3
    4c1e:	1e72      	subs	r2, r6, #1
	uint32_t data_length = 0;
    4c20:	2400      	movs	r4, #0
	uint8_t count = 0;
    4c22:	4623      	mov	r3, r4
		if (info[data_length++] == '\n')
    4c24:	3401      	adds	r4, #1
    4c26:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    4c2a:	290a      	cmp	r1, #10
			count++;
    4c2c:	bf04      	itt	eq
    4c2e:	3301      	addeq	r3, #1
    4c30:	b2db      	uxtbeq	r3, r3
	while (count != 4) 		/* 4 '\n' in info */
    4c32:	2b04      	cmp	r3, #4
    4c34:	d1f6      	bne.n	4c24 <scan+0x120>
	fresult = f_write(&fptr, info, data_length, &bwritten);
    4c36:	4d45      	ldr	r5, [pc, #276]	; (4d4c <scan+0x248>)
    4c38:	f505 7320 	add.w	r3, r5, #640	; 0x280
    4c3c:	4622      	mov	r2, r4
    4c3e:	4631      	mov	r1, r6
    4c40:	f505 7017 	add.w	r0, r5, #604	; 0x25c
    4c44:	4e5a      	ldr	r6, [pc, #360]	; (4db0 <scan+0x2ac>)
    4c46:	47b0      	blx	r6
    4c48:	7028      	strb	r0, [r5, #0]
	if (!fresult && bwritten != data_length)
    4c4a:	b930      	cbnz	r0, 4c5a <scan+0x156>
    4c4c:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
    4c50:	429c      	cmp	r4, r3
    4c52:	d002      	beq.n	4c5a <scan+0x156>
		scan_error(SCAN_ERR_FILE_WRITE);
    4c54:	2005      	movs	r0, #5
    4c56:	4b3e      	ldr	r3, [pc, #248]	; (4d50 <scan+0x24c>)
    4c58:	4798      	blx	r3
	LIDAR_PWM_start();
    4c5a:	4b56      	ldr	r3, [pc, #344]	; (4db4 <scan+0x2b0>)
    4c5c:	4798      	blx	r3
	LIDAR_REQ_express_scan();
    4c5e:	4b56      	ldr	r3, [pc, #344]	; (4db8 <scan+0x2b4>)
    4c60:	4798      	blx	r3
	for (angle = 0; angle <= 20; angle++) {
    4c62:	2000      	movs	r0, #0
    4c64:	4b39      	ldr	r3, [pc, #228]	; (4d4c <scan+0x248>)
    4c66:	f8c3 0284 	str.w	r0, [r3, #644]	; 0x284
		SERVO_set_angle(angle);
    4c6a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 4dd8 <scan+0x2d4>
		sprintf(data, 
    4c6e:	461e      	mov	r6, r3
		fresult = f_write(&fptr, data, data_length, &bwritten);
    4c70:	f503 7b20 	add.w	fp, r3, #640	; 0x280
    4c74:	e033      	b.n	4cde <scan+0x1da>
    4c76:	350a      	adds	r5, #10
	for (i=0; i<MAX_SCANS; i++) {
    4c78:	45a9      	cmp	r9, r5
    4c7a:	d029      	beq.n	4cd0 <scan+0x1cc>
		sprintf(data, 
    4c7c:	782b      	ldrb	r3, [r5, #0]
    4c7e:	88ea      	ldrh	r2, [r5, #6]
    4c80:	9204      	str	r2, [sp, #16]
    4c82:	88aa      	ldrh	r2, [r5, #4]
    4c84:	9203      	str	r2, [sp, #12]
    4c86:	78aa      	ldrb	r2, [r5, #2]
    4c88:	9202      	str	r2, [sp, #8]
    4c8a:	786a      	ldrb	r2, [r5, #1]
    4c8c:	9201      	str	r2, [sp, #4]
    4c8e:	892a      	ldrh	r2, [r5, #8]
    4c90:	9200      	str	r2, [sp, #0]
    4c92:	f8d6 2284 	ldr.w	r2, [r6, #644]	; 0x284
    4c96:	4641      	mov	r1, r8
    4c98:	a809      	add	r0, sp, #36	; 0x24
    4c9a:	4c39      	ldr	r4, [pc, #228]	; (4d80 <scan+0x27c>)
    4c9c:	47a0      	blx	r4
    4c9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
		data_length = 0;
    4ca2:	2400      	movs	r4, #0
		while(data[data_length++] != '\n');
    4ca4:	3401      	adds	r4, #1
    4ca6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4caa:	2a0a      	cmp	r2, #10
    4cac:	d1fa      	bne.n	4ca4 <scan+0x1a0>
		fresult = f_write(&fptr, data, data_length, &bwritten);
    4cae:	465b      	mov	r3, fp
    4cb0:	4622      	mov	r2, r4
    4cb2:	a909      	add	r1, sp, #36	; 0x24
    4cb4:	f506 7017 	add.w	r0, r6, #604	; 0x25c
    4cb8:	4f3d      	ldr	r7, [pc, #244]	; (4db0 <scan+0x2ac>)
    4cba:	47b8      	blx	r7
    4cbc:	7030      	strb	r0, [r6, #0]
		if (!fresult && bwritten != data_length)
    4cbe:	2800      	cmp	r0, #0
    4cc0:	d1d9      	bne.n	4c76 <scan+0x172>
    4cc2:	f8d6 3280 	ldr.w	r3, [r6, #640]	; 0x280
    4cc6:	429c      	cmp	r4, r3
    4cc8:	d0d5      	beq.n	4c76 <scan+0x172>
			scan_error(SCAN_ERR_FILE_WRITE);
    4cca:	2005      	movs	r0, #5
    4ccc:	4b20      	ldr	r3, [pc, #128]	; (4d50 <scan+0x24c>)
    4cce:	4798      	blx	r3
	for (angle = 0; angle <= 20; angle++) {
    4cd0:	f8d6 0284 	ldr.w	r0, [r6, #644]	; 0x284
    4cd4:	3001      	adds	r0, #1
    4cd6:	f8c6 0284 	str.w	r0, [r6, #644]	; 0x284
    4cda:	2814      	cmp	r0, #20
    4cdc:	dc15      	bgt.n	4d0a <scan+0x206>
		SERVO_set_angle(angle);
    4cde:	47d0      	blx	sl
		while (scan_count < MAX_SCANS) {
    4ce0:	4b36      	ldr	r3, [pc, #216]	; (4dbc <scan+0x2b8>)
    4ce2:	681b      	ldr	r3, [r3, #0]
    4ce4:	2b3f      	cmp	r3, #63	; 0x3f
    4ce6:	d80a      	bhi.n	4cfe <scan+0x1fa>
			while (!process());
    4ce8:	4c2b      	ldr	r4, [pc, #172]	; (4d98 <scan+0x294>)
			LIDAR_RES_express_scan();
    4cea:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 4ddc <scan+0x2d8>
		while (scan_count < MAX_SCANS) {
    4cee:	4d33      	ldr	r5, [pc, #204]	; (4dbc <scan+0x2b8>)
			while (!process());
    4cf0:	47a0      	blx	r4
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d0fc      	beq.n	4cf0 <scan+0x1ec>
			LIDAR_RES_express_scan();
    4cf6:	47c0      	blx	r8
		while (scan_count < MAX_SCANS) {
    4cf8:	682b      	ldr	r3, [r5, #0]
    4cfa:	2b3f      	cmp	r3, #63	; 0x3f
    4cfc:	d9f8      	bls.n	4cf0 <scan+0x1ec>
    4cfe:	4d30      	ldr	r5, [pc, #192]	; (4dc0 <scan+0x2bc>)
    4d00:	f505 7920 	add.w	r9, r5, #640	; 0x280
		sprintf(data, 
    4d04:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4de0 <scan+0x2dc>
    4d08:	e7b8      	b.n	4c7c <scan+0x178>
	LIDAR_PWM_stop();
    4d0a:	4b2e      	ldr	r3, [pc, #184]	; (4dc4 <scan+0x2c0>)
    4d0c:	4798      	blx	r3
	LIDAR_REQ_stop();
    4d0e:	4b2e      	ldr	r3, [pc, #184]	; (4dc8 <scan+0x2c4>)
    4d10:	4798      	blx	r3
	while (!process()) {
    4d12:	4d21      	ldr	r5, [pc, #132]	; (4d98 <scan+0x294>)
		LIDAR_RES_stop();
    4d14:	4c2d      	ldr	r4, [pc, #180]	; (4dcc <scan+0x2c8>)
	while (!process()) {
    4d16:	47a8      	blx	r5
    4d18:	b908      	cbnz	r0, 4d1e <scan+0x21a>
		LIDAR_RES_stop();
    4d1a:	47a0      	blx	r4
    4d1c:	e7fb      	b.n	4d16 <scan+0x212>
	fresult = f_close(&fptr);
    4d1e:	4c0b      	ldr	r4, [pc, #44]	; (4d4c <scan+0x248>)
    4d20:	f504 7017 	add.w	r0, r4, #604	; 0x25c
    4d24:	4b2a      	ldr	r3, [pc, #168]	; (4dd0 <scan+0x2cc>)
    4d26:	4798      	blx	r3
    4d28:	7020      	strb	r0, [r4, #0]
	if (fresult)
    4d2a:	b110      	cbz	r0, 4d32 <scan+0x22e>
		scan_error(SCAN_ERR_FILE_CLOSE);
    4d2c:	2006      	movs	r0, #6
    4d2e:	4b08      	ldr	r3, [pc, #32]	; (4d50 <scan+0x24c>)
    4d30:	4798      	blx	r3
	f_mount(0, "", 0);
    4d32:	2200      	movs	r2, #0
    4d34:	4907      	ldr	r1, [pc, #28]	; (4d54 <scan+0x250>)
    4d36:	4610      	mov	r0, r2
    4d38:	4b07      	ldr	r3, [pc, #28]	; (4d58 <scan+0x254>)
    4d3a:	4798      	blx	r3
	status = STATUS_IDLE;
    4d3c:	2200      	movs	r2, #0
    4d3e:	4b25      	ldr	r3, [pc, #148]	; (4dd4 <scan+0x2d0>)
    4d40:	701a      	strb	r2, [r3, #0]
}
    4d42:	b01b      	add	sp, #108	; 0x6c
    4d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d48:	000003b1 	.word	0x000003b1
    4d4c:	20000f8c 	.word	0x20000f8c
    4d50:	00004841 	.word	0x00004841
    4d54:	0000986c 	.word	0x0000986c
    4d58:	00001d39 	.word	0x00001d39
    4d5c:	00009ac4 	.word	0x00009ac4
    4d60:	00006e0d 	.word	0x00006e0d
    4d64:	000022e9 	.word	0x000022e9
    4d68:	41008000 	.word	0x41008000
    4d6c:	000022f7 	.word	0x000022f7
    4d70:	000021ed 	.word	0x000021ed
    4d74:	00002279 	.word	0x00002279
    4d78:	00006819 	.word	0x00006819
    4d7c:	00009ae0 	.word	0x00009ae0
    4d80:	00007041 	.word	0x00007041
    4d84:	00009af0 	.word	0x00009af0
    4d88:	00006d25 	.word	0x00006d25
    4d8c:	00001da5 	.word	0x00001da5
    4d90:	00009b04 	.word	0x00009b04
    4d94:	00003f75 	.word	0x00003f75
    4d98:	0000497d 	.word	0x0000497d
    4d9c:	0000433d 	.word	0x0000433d
    4da0:	00004225 	.word	0x00004225
    4da4:	000045d9 	.word	0x000045d9
    4da8:	000041b1 	.word	0x000041b1
    4dac:	00004505 	.word	0x00004505
    4db0:	00001f51 	.word	0x00001f51
    4db4:	00003959 	.word	0x00003959
    4db8:	0000406d 	.word	0x0000406d
    4dbc:	2000087c 	.word	0x2000087c
    4dc0:	20000a00 	.word	0x20000a00
    4dc4:	000039c5 	.word	0x000039c5
    4dc8:	00003efd 	.word	0x00003efd
    4dcc:	0000430d 	.word	0x0000430d
    4dd0:	000021c1 	.word	0x000021c1
    4dd4:	200012d1 	.word	0x200012d1
    4dd8:	00005aa9 	.word	0x00005aa9
    4ddc:	00004411 	.word	0x00004411
    4de0:	00009b18 	.word	0x00009b18

00004de4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    4de4:	b510      	push	{r4, lr}
    4de6:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    4de8:	4807      	ldr	r0, [pc, #28]	; (4e08 <sd_mmc_configure_slot+0x24>)
    4dea:	6804      	ldr	r4, [r0, #0]
	driver_select_device(
    4dec:	7b63      	ldrb	r3, [r4, #13]
    4dee:	6822      	ldr	r2, [r4, #0]
    4df0:	7901      	ldrb	r1, [r0, #4]
    4df2:	6880      	ldr	r0, [r0, #8]
    4df4:	7fa4      	ldrb	r4, [r4, #30]
    4df6:	3400      	adds	r4, #0
    4df8:	bf18      	it	ne
    4dfa:	2401      	movne	r4, #1
    4dfc:	9400      	str	r4, [sp, #0]
    4dfe:	4c03      	ldr	r4, [pc, #12]	; (4e0c <sd_mmc_configure_slot+0x28>)
    4e00:	47a0      	blx	r4
}
    4e02:	b002      	add	sp, #8
    4e04:	bd10      	pop	{r4, pc}
    4e06:	bf00      	nop
    4e08:	20001214 	.word	0x20001214
    4e0c:	00002551 	.word	0x00002551

00004e10 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    4e10:	b108      	cbz	r0, 4e16 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    4e12:	2004      	movs	r0, #4
    4e14:	4770      	bx	lr
{
    4e16:	b530      	push	{r4, r5, lr}
    4e18:	b083      	sub	sp, #12
	if (_cd && _cd[slot].pin != -1) {
    4e1a:	4b3a      	ldr	r3, [pc, #232]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4e1c:	68db      	ldr	r3, [r3, #12]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d041      	beq.n	4ea6 <sd_mmc_select_slot+0x96>
    4e22:	f9b3 3000 	ldrsh.w	r3, [r3]
    4e26:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e2a:	d03c      	beq.n	4ea6 <sd_mmc_select_slot+0x96>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    4e2c:	b2dd      	uxtb	r5, r3
	CRITICAL_SECTION_ENTER();
    4e2e:	a801      	add	r0, sp, #4
    4e30:	4b35      	ldr	r3, [pc, #212]	; (4f08 <sd_mmc_select_slot+0xf8>)
    4e32:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4e34:	096b      	lsrs	r3, r5, #5
    4e36:	4935      	ldr	r1, [pc, #212]	; (4f0c <sd_mmc_select_slot+0xfc>)
    4e38:	01db      	lsls	r3, r3, #7
    4e3a:	18ca      	adds	r2, r1, r3
    4e3c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4e3e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4e40:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4e42:	405c      	eors	r4, r3
    4e44:	400c      	ands	r4, r1
    4e46:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    4e48:	a801      	add	r0, sp, #4
    4e4a:	4b31      	ldr	r3, [pc, #196]	; (4f10 <sd_mmc_select_slot+0x100>)
    4e4c:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    4e4e:	f005 031f 	and.w	r3, r5, #31
    4e52:	2201      	movs	r2, #1
    4e54:	fa02 f303 	lsl.w	r3, r2, r3
    4e58:	4223      	tst	r3, r4
    4e5a:	bf08      	it	eq
    4e5c:	2200      	moveq	r2, #0
    4e5e:	4b29      	ldr	r3, [pc, #164]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4e60:	68db      	ldr	r3, [r3, #12]
    4e62:	885b      	ldrh	r3, [r3, #2]
    4e64:	429a      	cmp	r2, r3
    4e66:	d004      	beq.n	4e72 <sd_mmc_select_slot+0x62>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4e68:	2204      	movs	r2, #4
    4e6a:	4b26      	ldr	r3, [pc, #152]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4e6c:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    4e6e:	2002      	movs	r0, #2
    4e70:	e039      	b.n	4ee6 <sd_mmc_select_slot+0xd6>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    4e72:	4b24      	ldr	r3, [pc, #144]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4e74:	7e9b      	ldrb	r3, [r3, #26]
    4e76:	2b04      	cmp	r3, #4
    4e78:	d005      	beq.n	4e86 <sd_mmc_select_slot+0x76>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    4e7a:	2b01      	cmp	r3, #1
    4e7c:	d008      	beq.n	4e90 <sd_mmc_select_slot+0x80>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    4e7e:	2b03      	cmp	r3, #3
    4e80:	d117      	bne.n	4eb2 <sd_mmc_select_slot+0xa2>
			return SD_MMC_ERR_UNUSABLE;
    4e82:	2003      	movs	r0, #3
    4e84:	e02f      	b.n	4ee6 <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    4e86:	2201      	movs	r2, #1
    4e88:	4b1e      	ldr	r3, [pc, #120]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4e8a:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    4e8c:	2002      	movs	r0, #2
    4e8e:	e02a      	b.n	4ee6 <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    4e90:	4b1c      	ldr	r3, [pc, #112]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4e92:	2202      	movs	r2, #2
    4e94:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    4e96:	4a1f      	ldr	r2, [pc, #124]	; (4f14 <sd_mmc_select_slot+0x104>)
    4e98:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    4e9a:	2201      	movs	r2, #1
    4e9c:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    4e9e:	2200      	movs	r2, #0
    4ea0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4ea4:	e005      	b.n	4eb2 <sd_mmc_select_slot+0xa2>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    4ea6:	4b17      	ldr	r3, [pc, #92]	; (4f04 <sd_mmc_select_slot+0xf4>)
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    4ea8:	7e9b      	ldrb	r3, [r3, #26]
    4eaa:	3b03      	subs	r3, #3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    4eac:	b2db      	uxtb	r3, r3
    4eae:	2b01      	cmp	r3, #1
    4eb0:	d91b      	bls.n	4eea <sd_mmc_select_slot+0xda>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    4eb2:	4b14      	ldr	r3, [pc, #80]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4eb4:	791b      	ldrb	r3, [r3, #4]
    4eb6:	b31b      	cbz	r3, 4f00 <sd_mmc_select_slot+0xf0>
    4eb8:	4b12      	ldr	r3, [pc, #72]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4eba:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    4ebc:	fab0 f080 	clz	r0, r0
    4ec0:	0940      	lsrs	r0, r0, #5
    4ec2:	f240 422c 	movw	r2, #1068	; 0x42c
    4ec6:	4914      	ldr	r1, [pc, #80]	; (4f18 <sd_mmc_select_slot+0x108>)
    4ec8:	4b14      	ldr	r3, [pc, #80]	; (4f1c <sd_mmc_select_slot+0x10c>)
    4eca:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    4ecc:	4c0d      	ldr	r4, [pc, #52]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4ece:	2300      	movs	r3, #0
    4ed0:	7123      	strb	r3, [r4, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    4ed2:	f104 0310 	add.w	r3, r4, #16
    4ed6:	6023      	str	r3, [r4, #0]
	sd_mmc_configure_slot();
    4ed8:	4b11      	ldr	r3, [pc, #68]	; (4f20 <sd_mmc_select_slot+0x110>)
    4eda:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    4edc:	7ea0      	ldrb	r0, [r4, #26]
    4ede:	2802      	cmp	r0, #2
    4ee0:	bf14      	ite	ne
    4ee2:	2000      	movne	r0, #0
    4ee4:	2001      	moveq	r0, #1
}
    4ee6:	b003      	add	sp, #12
    4ee8:	bd30      	pop	{r4, r5, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    4eea:	4b06      	ldr	r3, [pc, #24]	; (4f04 <sd_mmc_select_slot+0xf4>)
    4eec:	2202      	movs	r2, #2
    4eee:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    4ef0:	4a08      	ldr	r2, [pc, #32]	; (4f14 <sd_mmc_select_slot+0x104>)
    4ef2:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    4ef4:	2201      	movs	r2, #1
    4ef6:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    4ef8:	2200      	movs	r2, #0
    4efa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4efe:	e7d8      	b.n	4eb2 <sd_mmc_select_slot+0xa2>
    4f00:	2001      	movs	r0, #1
    4f02:	e7de      	b.n	4ec2 <sd_mmc_select_slot+0xb2>
    4f04:	20001214 	.word	0x20001214
    4f08:	000022e9 	.word	0x000022e9
    4f0c:	41008000 	.word	0x41008000
    4f10:	000022f7 	.word	0x000022f7
    4f14:	00061a80 	.word	0x00061a80
    4f18:	00009bcc 	.word	0x00009bcc
    4f1c:	00002951 	.word	0x00002951
    4f20:	00004de5 	.word	0x00004de5

00004f24 <sdio_cmd52>:
{
    4f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f28:	4606      	mov	r6, r0
    4f2a:	460f      	mov	r7, r1
    4f2c:	4614      	mov	r4, r2
    4f2e:	4698      	mov	r8, r3
    4f30:	9d06      	ldr	r5, [sp, #24]
	ASSERT(io_data != NULL);
    4f32:	f240 3276 	movw	r2, #886	; 0x376
    4f36:	4910      	ldr	r1, [pc, #64]	; (4f78 <sdio_cmd52+0x54>)
    4f38:	1c28      	adds	r0, r5, #0
    4f3a:	bf18      	it	ne
    4f3c:	2001      	movne	r0, #1
    4f3e:	4b0f      	ldr	r3, [pc, #60]	; (4f7c <sdio_cmd52+0x58>)
    4f40:	4798      	blx	r3
	                         | ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
    4f42:	0260      	lsls	r0, r4, #9
	if (!driver_send_cmd(sd_mmc_hal,
    4f44:	ea40 60c8 	orr.w	r0, r0, r8, lsl #27
    4f48:	ea40 7007 	orr.w	r0, r0, r7, lsl #28
    4f4c:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    4f50:	782a      	ldrb	r2, [r5, #0]
	if (!driver_send_cmd(sd_mmc_hal,
    4f52:	4302      	orrs	r2, r0
    4f54:	f241 3134 	movw	r1, #4916	; 0x1334
    4f58:	4b09      	ldr	r3, [pc, #36]	; (4f80 <sdio_cmd52+0x5c>)
    4f5a:	6898      	ldr	r0, [r3, #8]
    4f5c:	4b09      	ldr	r3, [pc, #36]	; (4f84 <sdio_cmd52+0x60>)
    4f5e:	4798      	blx	r3
    4f60:	4604      	mov	r4, r0
    4f62:	b910      	cbnz	r0, 4f6a <sdio_cmd52+0x46>
}
    4f64:	4620      	mov	r0, r4
    4f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    4f6a:	4b05      	ldr	r3, [pc, #20]	; (4f80 <sdio_cmd52+0x5c>)
    4f6c:	6898      	ldr	r0, [r3, #8]
    4f6e:	4b06      	ldr	r3, [pc, #24]	; (4f88 <sdio_cmd52+0x64>)
    4f70:	4798      	blx	r3
    4f72:	7028      	strb	r0, [r5, #0]
	return true;
    4f74:	e7f6      	b.n	4f64 <sdio_cmd52+0x40>
    4f76:	bf00      	nop
    4f78:	00009bcc 	.word	0x00009bcc
    4f7c:	00002951 	.word	0x00002951
    4f80:	20001214 	.word	0x20001214
    4f84:	00002635 	.word	0x00002635
    4f88:	00002665 	.word	0x00002665

00004f8c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    4f8c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    4f8e:	4b05      	ldr	r3, [pc, #20]	; (4fa4 <sd_mmc_deselect_slot+0x18>)
    4f90:	791b      	ldrb	r3, [r3, #4]
    4f92:	b103      	cbz	r3, 4f96 <sd_mmc_deselect_slot+0xa>
    4f94:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    4f96:	2100      	movs	r1, #0
    4f98:	4b02      	ldr	r3, [pc, #8]	; (4fa4 <sd_mmc_deselect_slot+0x18>)
    4f9a:	6898      	ldr	r0, [r3, #8]
    4f9c:	4b02      	ldr	r3, [pc, #8]	; (4fa8 <sd_mmc_deselect_slot+0x1c>)
    4f9e:	4798      	blx	r3
	}
}
    4fa0:	e7f8      	b.n	4f94 <sd_mmc_deselect_slot+0x8>
    4fa2:	bf00      	nop
    4fa4:	20001214 	.word	0x20001214
    4fa8:	0000258d 	.word	0x0000258d

00004fac <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    4fac:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4fae:	4b05      	ldr	r3, [pc, #20]	; (4fc4 <sd_mmc_init+0x18>)
    4fb0:	2404      	movs	r4, #4
    4fb2:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    4fb4:	24ff      	movs	r4, #255	; 0xff
    4fb6:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    4fb8:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    4fba:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    4fbc:	635a      	str	r2, [r3, #52]	; 0x34
}
    4fbe:	bc10      	pop	{r4}
    4fc0:	4770      	bx	lr
    4fc2:	bf00      	nop
    4fc4:	20001214 	.word	0x20001214

00004fc8 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    4fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4fcc:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4fce:	4baa      	ldr	r3, [pc, #680]	; (5278 <sd_mmc_check+0x2b0>)
    4fd0:	4798      	blx	r3
    4fd2:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    4fd4:	2801      	cmp	r0, #1
    4fd6:	d005      	beq.n	4fe4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
    4fd8:	4ba8      	ldr	r3, [pc, #672]	; (527c <sd_mmc_check+0x2b4>)
    4fda:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    4fdc:	4620      	mov	r0, r4
    4fde:	b015      	add	sp, #84	; 0x54
    4fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
    4fe4:	af14      	add	r7, sp, #80	; 0x50
    4fe6:	2308      	movs	r3, #8
    4fe8:	f807 3d45 	strb.w	r3, [r7, #-69]!
	sd_mmc_card->type    = CARD_TYPE_SD;
    4fec:	4ea4      	ldr	r6, [pc, #656]	; (5280 <sd_mmc_check+0x2b8>)
    4fee:	6833      	ldr	r3, [r6, #0]
    4ff0:	f04f 0801 	mov.w	r8, #1
    4ff4:	f883 800b 	strb.w	r8, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    4ff8:	2500      	movs	r5, #0
    4ffa:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca     = 0;
    4ffc:	811d      	strh	r5, [r3, #8]
	driver_send_clock(sd_mmc_hal);
    4ffe:	68b0      	ldr	r0, [r6, #8]
    5000:	4ba0      	ldr	r3, [pc, #640]	; (5284 <sd_mmc_check+0x2bc>)
    5002:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    5004:	9700      	str	r7, [sp, #0]
    5006:	462b      	mov	r3, r5
    5008:	2206      	movs	r2, #6
    500a:	4629      	mov	r1, r5
    500c:	4640      	mov	r0, r8
    500e:	4f9e      	ldr	r7, [pc, #632]	; (5288 <sd_mmc_check+0x2c0>)
    5010:	47b8      	blx	r7
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    5012:	462a      	mov	r2, r5
    5014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    5018:	68b0      	ldr	r0, [r6, #8]
    501a:	4b9c      	ldr	r3, [pc, #624]	; (528c <sd_mmc_check+0x2c4>)
    501c:	4798      	blx	r3
    501e:	b930      	cbnz	r0, 502e <sd_mmc_check+0x66>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    5020:	4b97      	ldr	r3, [pc, #604]	; (5280 <sd_mmc_check+0x2b8>)
    5022:	681b      	ldr	r3, [r3, #0]
    5024:	2403      	movs	r4, #3
    5026:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    5028:	4b94      	ldr	r3, [pc, #592]	; (527c <sd_mmc_check+0x2b4>)
    502a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    502c:	e7d6      	b.n	4fdc <sd_mmc_check+0x14>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    502e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    5032:	f245 5108 	movw	r1, #21768	; 0x5508
    5036:	68b0      	ldr	r0, [r6, #8]
    5038:	4b94      	ldr	r3, [pc, #592]	; (528c <sd_mmc_check+0x2c4>)
    503a:	4798      	blx	r3
    503c:	2800      	cmp	r0, #0
    503e:	f040 80a4 	bne.w	518a <sd_mmc_check+0x1c2>
	*v2 = 0;
    5042:	f04f 0800 	mov.w	r8, #0
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    5046:	2200      	movs	r2, #0
    5048:	f244 5105 	movw	r1, #17669	; 0x4505
    504c:	4b8c      	ldr	r3, [pc, #560]	; (5280 <sd_mmc_check+0x2b8>)
    504e:	6898      	ldr	r0, [r3, #8]
    5050:	4b8e      	ldr	r3, [pc, #568]	; (528c <sd_mmc_check+0x2c4>)
    5052:	4798      	blx	r3
    5054:	2800      	cmp	r0, #0
    5056:	f040 80a6 	bne.w	51a6 <sd_mmc_check+0x1de>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    505a:	4b89      	ldr	r3, [pc, #548]	; (5280 <sd_mmc_check+0x2b8>)
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	7adb      	ldrb	r3, [r3, #11]
    5060:	f013 0f01 	tst.w	r3, #1
    5064:	f040 80c9 	bne.w	51fa <sd_mmc_check+0x232>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    5068:	2200      	movs	r2, #0
    506a:	f245 1103 	movw	r1, #20739	; 0x5103
    506e:	4b84      	ldr	r3, [pc, #528]	; (5280 <sd_mmc_check+0x2b8>)
    5070:	6898      	ldr	r0, [r3, #8]
    5072:	4b86      	ldr	r3, [pc, #536]	; (528c <sd_mmc_check+0x2c4>)
    5074:	4798      	blx	r3
    5076:	2800      	cmp	r0, #0
    5078:	d0d2      	beq.n	5020 <sd_mmc_check+0x58>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    507a:	4d81      	ldr	r5, [pc, #516]	; (5280 <sd_mmc_check+0x2b8>)
    507c:	682e      	ldr	r6, [r5, #0]
    507e:	68a8      	ldr	r0, [r5, #8]
    5080:	4b83      	ldr	r3, [pc, #524]	; (5290 <sd_mmc_check+0x2c8>)
    5082:	4798      	blx	r3
    5084:	0c00      	lsrs	r0, r0, #16
    5086:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5088:	682b      	ldr	r3, [r5, #0]
    508a:	7ada      	ldrb	r2, [r3, #11]
    508c:	f012 0f01 	tst.w	r2, #1
    5090:	d03e      	beq.n	5110 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    5092:	891a      	ldrh	r2, [r3, #8]
    5094:	0412      	lsls	r2, r2, #16
    5096:	f641 3109 	movw	r1, #6921	; 0x1b09
    509a:	68a8      	ldr	r0, [r5, #8]
    509c:	4b7b      	ldr	r3, [pc, #492]	; (528c <sd_mmc_check+0x2c4>)
    509e:	4798      	blx	r3
    50a0:	2800      	cmp	r0, #0
    50a2:	d0bd      	beq.n	5020 <sd_mmc_check+0x58>
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    50a4:	6829      	ldr	r1, [r5, #0]
    50a6:	310e      	adds	r1, #14
    50a8:	68a8      	ldr	r0, [r5, #8]
    50aa:	4b7a      	ldr	r3, [pc, #488]	; (5294 <sd_mmc_check+0x2cc>)
    50ac:	4798      	blx	r3
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    50ae:	682a      	ldr	r2, [r5, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    50b0:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    50b2:	4b79      	ldr	r3, [pc, #484]	; (5298 <sd_mmc_check+0x2d0>)
    50b4:	f001 0007 	and.w	r0, r1, #7
	sd_mmc_card->clock = unit * mul * 1000;
    50b8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    50bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    50c0:	fb00 f005 	mul.w	r0, r0, r5
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    50c4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    50c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    50cc:	69db      	ldr	r3, [r3, #28]
    50ce:	fb03 f300 	mul.w	r3, r3, r0
    50d2:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    50d4:	7b93      	ldrb	r3, [r2, #14]
    50d6:	099b      	lsrs	r3, r3, #6
    50d8:	f040 80e2 	bne.w	52a0 <sd_mmc_check+0x2d8>
    50dc:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    50de:	7d50      	ldrb	r0, [r2, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    50e0:	7d13      	ldrb	r3, [r2, #20]
    50e2:	029b      	lsls	r3, r3, #10
    50e4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    50e8:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    50ec:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    50ee:	7dd1      	ldrb	r1, [r2, #23]
    50f0:	0049      	lsls	r1, r1, #1
    50f2:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    50f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    50fa:	3301      	adds	r3, #1
    50fc:	f001 0107 	and.w	r1, r1, #7
    5100:	3102      	adds	r1, #2
		uint32_t blocknr
    5102:	408b      	lsls	r3, r1
    5104:	7cd1      	ldrb	r1, [r2, #19]
    5106:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    510a:	408b      	lsls	r3, r1
    510c:	0a9b      	lsrs	r3, r3, #10
    510e:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    5110:	4b5b      	ldr	r3, [pc, #364]	; (5280 <sd_mmc_check+0x2b8>)
    5112:	681a      	ldr	r2, [r3, #0]
    5114:	8912      	ldrh	r2, [r2, #8]
    5116:	0412      	lsls	r2, r2, #16
    5118:	f243 1107 	movw	r1, #12551	; 0x3107
    511c:	6898      	ldr	r0, [r3, #8]
    511e:	4b5b      	ldr	r3, [pc, #364]	; (528c <sd_mmc_check+0x2c4>)
    5120:	4798      	blx	r3
    5122:	2800      	cmp	r0, #0
    5124:	f43f af7c 	beq.w	5020 <sd_mmc_check+0x58>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5128:	4b55      	ldr	r3, [pc, #340]	; (5280 <sd_mmc_check+0x2b8>)
    512a:	681b      	ldr	r3, [r3, #0]
    512c:	7ada      	ldrb	r2, [r3, #11]
    512e:	f012 0f01 	tst.w	r2, #1
    5132:	f040 80c2 	bne.w	52ba <sd_mmc_check+0x2f2>
	if (IS_SDIO()) {
    5136:	4b52      	ldr	r3, [pc, #328]	; (5280 <sd_mmc_check+0x2b8>)
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	7adb      	ldrb	r3, [r3, #11]
    513c:	f013 0f04 	tst.w	r3, #4
    5140:	f000 8152 	beq.w	53e8 <sd_mmc_check+0x420>
    5144:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    5146:	2700      	movs	r7, #0
    5148:	4e4f      	ldr	r6, [pc, #316]	; (5288 <sd_mmc_check+0x2c0>)
    514a:	f1a5 0309 	sub.w	r3, r5, #9
    514e:	aa03      	add	r2, sp, #12
    5150:	4413      	add	r3, r2
    5152:	9300      	str	r3, [sp, #0]
    5154:	463b      	mov	r3, r7
    5156:	462a      	mov	r2, r5
    5158:	4639      	mov	r1, r7
    515a:	4638      	mov	r0, r7
    515c:	47b0      	blx	r6
		addr_old++;
    515e:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    5160:	2d0d      	cmp	r5, #13
    5162:	d1f2      	bne.n	514a <sd_mmc_check+0x182>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    5164:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5168:	f89d 900c 	ldrb.w	r9, [sp, #12]
    516c:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    5170:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5174:	eb09 4903 	add.w	r9, r9, r3, lsl #16
    5178:	f89d 300f 	ldrb.w	r3, [sp, #15]
    517c:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
    5180:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    5182:	f04f 0800 	mov.w	r8, #0
    5186:	4f40      	ldr	r7, [pc, #256]	; (5288 <sd_mmc_check+0x2c0>)
    5188:	e0ed      	b.n	5366 <sd_mmc_check+0x39e>
	resp = driver_get_response(sd_mmc_hal);
    518a:	68b0      	ldr	r0, [r6, #8]
    518c:	4b40      	ldr	r3, [pc, #256]	; (5290 <sd_mmc_check+0x2c8>)
    518e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    5190:	f1b0 3fff 	cmp.w	r0, #4294967295
    5194:	f000 8227 	beq.w	55e6 <sd_mmc_check+0x61e>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    5198:	f3c0 000b 	ubfx	r0, r0, #0, #12
    519c:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    51a0:	f47f af3e 	bne.w	5020 <sd_mmc_check+0x58>
    51a4:	e74f      	b.n	5046 <sd_mmc_check+0x7e>
	resp = driver_get_response(sd_mmc_hal);
    51a6:	4b36      	ldr	r3, [pc, #216]	; (5280 <sd_mmc_check+0x2b8>)
    51a8:	6898      	ldr	r0, [r3, #8]
    51aa:	4b39      	ldr	r3, [pc, #228]	; (5290 <sd_mmc_check+0x2c8>)
    51ac:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    51ae:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    51b2:	f43f af52 	beq.w	505a <sd_mmc_check+0x92>
    51b6:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    51ba:	4e31      	ldr	r6, [pc, #196]	; (5280 <sd_mmc_check+0x2b8>)
    51bc:	4f33      	ldr	r7, [pc, #204]	; (528c <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    51be:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 5290 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    51c2:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    51c6:	f244 5105 	movw	r1, #17669	; 0x4505
    51ca:	68b0      	ldr	r0, [r6, #8]
    51cc:	47b8      	blx	r7
    51ce:	2800      	cmp	r0, #0
    51d0:	f43f af26 	beq.w	5020 <sd_mmc_check+0x58>
		resp = driver_get_response(sd_mmc_hal);
    51d4:	68b0      	ldr	r0, [r6, #8]
    51d6:	47c8      	blx	r9
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    51d8:	2800      	cmp	r0, #0
    51da:	db02      	blt.n	51e2 <sd_mmc_check+0x21a>
		if (cmd5_retry-- == 0) {
    51dc:	3d01      	subs	r5, #1
    51de:	d1f0      	bne.n	51c2 <sd_mmc_check+0x1fa>
    51e0:	e71e      	b.n	5020 <sd_mmc_check+0x58>
	if ((resp & OCR_SDIO_MP) > 0) {
    51e2:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    51e6:	d104      	bne.n	51f2 <sd_mmc_check+0x22a>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    51e8:	4b25      	ldr	r3, [pc, #148]	; (5280 <sd_mmc_check+0x2b8>)
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	2204      	movs	r2, #4
    51ee:	72da      	strb	r2, [r3, #11]
    51f0:	e73a      	b.n	5068 <sd_mmc_check+0xa0>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    51f2:	4b23      	ldr	r3, [pc, #140]	; (5280 <sd_mmc_check+0x2b8>)
    51f4:	681b      	ldr	r3, [r3, #0]
    51f6:	2205      	movs	r2, #5
    51f8:	72da      	strb	r2, [r3, #11]
    51fa:	f1b8 0f00 	cmp.w	r8, #0
    51fe:	4b27      	ldr	r3, [pc, #156]	; (529c <sd_mmc_check+0x2d4>)
    5200:	bf14      	ite	ne
    5202:	4698      	movne	r8, r3
    5204:	f44f 18fc 	moveq.w	r8, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
    5208:	f640 0635 	movw	r6, #2101	; 0x835
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    520c:	4d1c      	ldr	r5, [pc, #112]	; (5280 <sd_mmc_check+0x2b8>)
    520e:	4f1f      	ldr	r7, [pc, #124]	; (528c <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    5210:	f8df 907c 	ldr.w	r9, [pc, #124]	; 5290 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    5214:	2200      	movs	r2, #0
    5216:	f241 1137 	movw	r1, #4407	; 0x1137
    521a:	68a8      	ldr	r0, [r5, #8]
    521c:	47b8      	blx	r7
    521e:	b158      	cbz	r0, 5238 <sd_mmc_check+0x270>
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    5220:	4642      	mov	r2, r8
    5222:	f244 5129 	movw	r1, #17705	; 0x4529
    5226:	68a8      	ldr	r0, [r5, #8]
    5228:	47b8      	blx	r7
    522a:	b128      	cbz	r0, 5238 <sd_mmc_check+0x270>
		resp = driver_get_response(sd_mmc_hal);
    522c:	68a8      	ldr	r0, [r5, #8]
    522e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
    5230:	2800      	cmp	r0, #0
    5232:	db06      	blt.n	5242 <sd_mmc_check+0x27a>
		if (retry-- == 0) {
    5234:	3e01      	subs	r6, #1
    5236:	d1ed      	bne.n	5214 <sd_mmc_check+0x24c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    5238:	4b11      	ldr	r3, [pc, #68]	; (5280 <sd_mmc_check+0x2b8>)
    523a:	681b      	ldr	r3, [r3, #0]
    523c:	2200      	movs	r2, #0
    523e:	72da      	strb	r2, [r3, #11]
    5240:	e6ee      	b.n	5020 <sd_mmc_check+0x58>
			if ((resp & OCR_CCS) != 0) {
    5242:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    5246:	d005      	beq.n	5254 <sd_mmc_check+0x28c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    5248:	4b0d      	ldr	r3, [pc, #52]	; (5280 <sd_mmc_check+0x2b8>)
    524a:	681a      	ldr	r2, [r3, #0]
    524c:	7ad3      	ldrb	r3, [r2, #11]
    524e:	f043 0308 	orr.w	r3, r3, #8
    5252:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5254:	4b0a      	ldr	r3, [pc, #40]	; (5280 <sd_mmc_check+0x2b8>)
    5256:	681b      	ldr	r3, [r3, #0]
    5258:	7adb      	ldrb	r3, [r3, #11]
    525a:	f013 0f01 	tst.w	r3, #1
    525e:	f43f af03 	beq.w	5068 <sd_mmc_check+0xa0>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    5262:	2200      	movs	r2, #0
    5264:	f645 3102 	movw	r1, #23298	; 0x5b02
    5268:	4b05      	ldr	r3, [pc, #20]	; (5280 <sd_mmc_check+0x2b8>)
    526a:	6898      	ldr	r0, [r3, #8]
    526c:	4b07      	ldr	r3, [pc, #28]	; (528c <sd_mmc_check+0x2c4>)
    526e:	4798      	blx	r3
    5270:	2800      	cmp	r0, #0
    5272:	f47f aef9 	bne.w	5068 <sd_mmc_check+0xa0>
    5276:	e6d3      	b.n	5020 <sd_mmc_check+0x58>
    5278:	00004e11 	.word	0x00004e11
    527c:	00004f8d 	.word	0x00004f8d
    5280:	20001214 	.word	0x20001214
    5284:	0000260d 	.word	0x0000260d
    5288:	00004f25 	.word	0x00004f25
    528c:	00002635 	.word	0x00002635
    5290:	00002665 	.word	0x00002665
    5294:	0000268d 	.word	0x0000268d
    5298:	00009b30 	.word	0x00009b30
    529c:	401f8000 	.word	0x401f8000
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    52a0:	7dd1      	ldrb	r1, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    52a2:	7d90      	ldrb	r0, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    52a4:	7d53      	ldrb	r3, [r2, #21]
    52a6:	041b      	lsls	r3, r3, #16
    52a8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    52ac:	430b      	orrs	r3, r1
	value &= ((uint32_t)1 << size) - 1;
    52ae:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    52b2:	3301      	adds	r3, #1
    52b4:	025b      	lsls	r3, r3, #9
    52b6:	6053      	str	r3, [r2, #4]
    52b8:	e72a      	b.n	5110 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    52ba:	891a      	ldrh	r2, [r3, #8]
    52bc:	0412      	lsls	r2, r2, #16
    52be:	f241 1137 	movw	r1, #4407	; 0x1137
    52c2:	4b9a      	ldr	r3, [pc, #616]	; (552c <sd_mmc_check+0x564>)
    52c4:	6898      	ldr	r0, [r3, #8]
    52c6:	4b9a      	ldr	r3, [pc, #616]	; (5530 <sd_mmc_check+0x568>)
    52c8:	4798      	blx	r3
    52ca:	2800      	cmp	r0, #0
    52cc:	f43f aea8 	beq.w	5020 <sd_mmc_check+0x58>
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    52d0:	2301      	movs	r3, #1
    52d2:	9301      	str	r3, [sp, #4]
    52d4:	9300      	str	r3, [sp, #0]
    52d6:	2308      	movs	r3, #8
    52d8:	2200      	movs	r2, #0
    52da:	4996      	ldr	r1, [pc, #600]	; (5534 <sd_mmc_check+0x56c>)
    52dc:	4893      	ldr	r0, [pc, #588]	; (552c <sd_mmc_check+0x564>)
    52de:	6880      	ldr	r0, [r0, #8]
    52e0:	4d95      	ldr	r5, [pc, #596]	; (5538 <sd_mmc_check+0x570>)
    52e2:	47a8      	blx	r5
    52e4:	2800      	cmp	r0, #0
    52e6:	f43f ae9b 	beq.w	5020 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    52ea:	2201      	movs	r2, #1
    52ec:	a904      	add	r1, sp, #16
    52ee:	4b8f      	ldr	r3, [pc, #572]	; (552c <sd_mmc_check+0x564>)
    52f0:	6898      	ldr	r0, [r3, #8]
    52f2:	4b92      	ldr	r3, [pc, #584]	; (553c <sd_mmc_check+0x574>)
    52f4:	4798      	blx	r3
    52f6:	2800      	cmp	r0, #0
    52f8:	f43f ae92 	beq.w	5020 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    52fc:	4b8b      	ldr	r3, [pc, #556]	; (552c <sd_mmc_check+0x564>)
    52fe:	6898      	ldr	r0, [r3, #8]
    5300:	4b8f      	ldr	r3, [pc, #572]	; (5540 <sd_mmc_check+0x578>)
    5302:	4798      	blx	r3
    5304:	2800      	cmp	r0, #0
    5306:	f43f ae8b 	beq.w	5020 <sd_mmc_check+0x58>
	switch (SD_SCR_SD_SPEC(scr)) {
    530a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    530e:	f003 030f 	and.w	r3, r3, #15
    5312:	2b01      	cmp	r3, #1
    5314:	d00c      	beq.n	5330 <sd_mmc_check+0x368>
    5316:	b133      	cbz	r3, 5326 <sd_mmc_check+0x35e>
    5318:	2b02      	cmp	r3, #2
    531a:	d00e      	beq.n	533a <sd_mmc_check+0x372>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    531c:	4b83      	ldr	r3, [pc, #524]	; (552c <sd_mmc_check+0x564>)
    531e:	681b      	ldr	r3, [r3, #0]
    5320:	2210      	movs	r2, #16
    5322:	731a      	strb	r2, [r3, #12]
    5324:	e707      	b.n	5136 <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    5326:	4b81      	ldr	r3, [pc, #516]	; (552c <sd_mmc_check+0x564>)
    5328:	681b      	ldr	r3, [r3, #0]
    532a:	2210      	movs	r2, #16
    532c:	731a      	strb	r2, [r3, #12]
    532e:	e702      	b.n	5136 <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    5330:	4b7e      	ldr	r3, [pc, #504]	; (552c <sd_mmc_check+0x564>)
    5332:	681b      	ldr	r3, [r3, #0]
    5334:	221a      	movs	r2, #26
    5336:	731a      	strb	r2, [r3, #12]
    5338:	e6fd      	b.n	5136 <sd_mmc_check+0x16e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    533a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    533e:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
    5340:	4b7a      	ldr	r3, [pc, #488]	; (552c <sd_mmc_check+0x564>)
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	bf14      	ite	ne
    5346:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
    5348:	2220      	moveq	r2, #32
    534a:	731a      	strb	r2, [r3, #12]
    534c:	e6f3      	b.n	5136 <sd_mmc_check+0x16e>
		if (buf[1] == 0) {
    534e:	f89d 3011 	ldrb.w	r3, [sp, #17]
    5352:	2b00      	cmp	r3, #0
    5354:	f43f ae64 	beq.w	5020 <sd_mmc_check+0x58>
		addr_new += buf[1] - 1;
    5358:	3302      	adds	r3, #2
    535a:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
    535c:	f509 7380 	add.w	r3, r9, #256	; 0x100
    5360:	429e      	cmp	r6, r3
    5362:	f63f ae5d 	bhi.w	5020 <sd_mmc_check+0x58>
	addr_new = addr_old;
    5366:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    5368:	ab04      	add	r3, sp, #16
    536a:	442b      	add	r3, r5
    536c:	9300      	str	r3, [sp, #0]
    536e:	4643      	mov	r3, r8
    5370:	19aa      	adds	r2, r5, r6
    5372:	4641      	mov	r1, r8
    5374:	4640      	mov	r0, r8
    5376:	47b8      	blx	r7
    5378:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    537a:	2d03      	cmp	r5, #3
    537c:	d1f4      	bne.n	5368 <sd_mmc_check+0x3a0>
		if (buf[0] == SDIO_CISTPL_END) {
    537e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5382:	2bff      	cmp	r3, #255	; 0xff
    5384:	f43f ae4c 	beq.w	5020 <sd_mmc_check+0x58>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    5388:	2b22      	cmp	r3, #34	; 0x22
    538a:	d1e0      	bne.n	534e <sd_mmc_check+0x386>
    538c:	f89d 3012 	ldrb.w	r3, [sp, #18]
    5390:	2b00      	cmp	r3, #0
    5392:	d1dc      	bne.n	534e <sd_mmc_check+0x386>
    5394:	f106 0906 	add.w	r9, r6, #6
	addr_new -= 3;
    5398:	4635      	mov	r5, r6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    539a:	f04f 0800 	mov.w	r8, #0
    539e:	4f69      	ldr	r7, [pc, #420]	; (5544 <sd_mmc_check+0x57c>)
    53a0:	1bab      	subs	r3, r5, r6
    53a2:	aa04      	add	r2, sp, #16
    53a4:	4413      	add	r3, r2
    53a6:	9300      	str	r3, [sp, #0]
    53a8:	4643      	mov	r3, r8
    53aa:	462a      	mov	r2, r5
    53ac:	4641      	mov	r1, r8
    53ae:	4640      	mov	r0, r8
    53b0:	47b8      	blx	r7
		addr_new++;
    53b2:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    53b4:	45a9      	cmp	r9, r5
    53b6:	d1f3      	bne.n	53a0 <sd_mmc_check+0x3d8>
	tplfe_max_tran_speed = buf[5];
    53b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    53bc:	2b32      	cmp	r3, #50	; 0x32
    53be:	bf28      	it	cs
    53c0:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
    53c2:	4a5a      	ldr	r2, [pc, #360]	; (552c <sd_mmc_check+0x564>)
    53c4:	6810      	ldr	r0, [r2, #0]
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    53c6:	4a60      	ldr	r2, [pc, #384]	; (5548 <sd_mmc_check+0x580>)
    53c8:	f003 0107 	and.w	r1, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
    53cc:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
    53d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    53d4:	fb01 f105 	mul.w	r1, r1, r5
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    53d8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    53dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    53e0:	69db      	ldr	r3, [r3, #28]
    53e2:	fb03 f301 	mul.w	r3, r3, r1
    53e6:	6003      	str	r3, [r0, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    53e8:	4b50      	ldr	r3, [pc, #320]	; (552c <sd_mmc_check+0x564>)
    53ea:	7919      	ldrb	r1, [r3, #4]
    53ec:	6898      	ldr	r0, [r3, #8]
    53ee:	4b57      	ldr	r3, [pc, #348]	; (554c <sd_mmc_check+0x584>)
    53f0:	4798      	blx	r3
    53f2:	2803      	cmp	r0, #3
    53f4:	d926      	bls.n	5444 <sd_mmc_check+0x47c>
		if (IS_SDIO()) {
    53f6:	4b4d      	ldr	r3, [pc, #308]	; (552c <sd_mmc_check+0x564>)
    53f8:	681b      	ldr	r3, [r3, #0]
    53fa:	7adb      	ldrb	r3, [r3, #11]
    53fc:	f013 0f04 	tst.w	r3, #4
    5400:	d14e      	bne.n	54a0 <sd_mmc_check+0x4d8>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    5402:	4b4a      	ldr	r3, [pc, #296]	; (552c <sd_mmc_check+0x564>)
    5404:	681b      	ldr	r3, [r3, #0]
    5406:	7ada      	ldrb	r2, [r3, #11]
    5408:	f012 0f01 	tst.w	r2, #1
    540c:	d018      	beq.n	5440 <sd_mmc_check+0x478>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    540e:	891a      	ldrh	r2, [r3, #8]
    5410:	0412      	lsls	r2, r2, #16
    5412:	f241 1137 	movw	r1, #4407	; 0x1137
    5416:	4b45      	ldr	r3, [pc, #276]	; (552c <sd_mmc_check+0x564>)
    5418:	6898      	ldr	r0, [r3, #8]
    541a:	4b45      	ldr	r3, [pc, #276]	; (5530 <sd_mmc_check+0x568>)
    541c:	4798      	blx	r3
    541e:	2800      	cmp	r0, #0
    5420:	f43f adfe 	beq.w	5020 <sd_mmc_check+0x58>
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    5424:	2202      	movs	r2, #2
    5426:	f241 1106 	movw	r1, #4358	; 0x1106
    542a:	4b40      	ldr	r3, [pc, #256]	; (552c <sd_mmc_check+0x564>)
    542c:	6898      	ldr	r0, [r3, #8]
    542e:	4b40      	ldr	r3, [pc, #256]	; (5530 <sd_mmc_check+0x568>)
    5430:	4798      	blx	r3
    5432:	2800      	cmp	r0, #0
    5434:	f43f adf4 	beq.w	5020 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    5438:	4b3c      	ldr	r3, [pc, #240]	; (552c <sd_mmc_check+0x564>)
    543a:	681b      	ldr	r3, [r3, #0]
    543c:	2204      	movs	r2, #4
    543e:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
    5440:	4b43      	ldr	r3, [pc, #268]	; (5550 <sd_mmc_check+0x588>)
    5442:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    5444:	4b39      	ldr	r3, [pc, #228]	; (552c <sd_mmc_check+0x564>)
    5446:	6898      	ldr	r0, [r3, #8]
    5448:	4b42      	ldr	r3, [pc, #264]	; (5554 <sd_mmc_check+0x58c>)
    544a:	4798      	blx	r3
    544c:	b180      	cbz	r0, 5470 <sd_mmc_check+0x4a8>
		if (IS_SDIO()) {
    544e:	4b37      	ldr	r3, [pc, #220]	; (552c <sd_mmc_check+0x564>)
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	7adb      	ldrb	r3, [r3, #11]
    5454:	f013 0f04 	tst.w	r3, #4
    5458:	d143      	bne.n	54e2 <sd_mmc_check+0x51a>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    545a:	4b34      	ldr	r3, [pc, #208]	; (552c <sd_mmc_check+0x564>)
    545c:	681b      	ldr	r3, [r3, #0]
    545e:	7ada      	ldrb	r2, [r3, #11]
    5460:	f012 0f01 	tst.w	r2, #1
    5464:	d002      	beq.n	546c <sd_mmc_check+0x4a4>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    5466:	7b1b      	ldrb	r3, [r3, #12]
    5468:	2b10      	cmp	r3, #16
    546a:	d877      	bhi.n	555c <sd_mmc_check+0x594>
		sd_mmc_configure_slot();
    546c:	4b38      	ldr	r3, [pc, #224]	; (5550 <sd_mmc_check+0x588>)
    546e:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5470:	4b2e      	ldr	r3, [pc, #184]	; (552c <sd_mmc_check+0x564>)
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	7adb      	ldrb	r3, [r3, #11]
    5476:	f013 0f01 	tst.w	r3, #1
    547a:	d00a      	beq.n	5492 <sd_mmc_check+0x4ca>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    547c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5480:	f241 1110 	movw	r1, #4368	; 0x1110
    5484:	4b29      	ldr	r3, [pc, #164]	; (552c <sd_mmc_check+0x564>)
    5486:	6898      	ldr	r0, [r3, #8]
    5488:	4b29      	ldr	r3, [pc, #164]	; (5530 <sd_mmc_check+0x568>)
    548a:	4798      	blx	r3
	if (sd_mmc_mci_card_init()) {
    548c:	2800      	cmp	r0, #0
    548e:	f43f adc7 	beq.w	5020 <sd_mmc_check+0x58>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    5492:	4b26      	ldr	r3, [pc, #152]	; (552c <sd_mmc_check+0x564>)
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	2200      	movs	r2, #0
    5498:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    549a:	4b2f      	ldr	r3, [pc, #188]	; (5558 <sd_mmc_check+0x590>)
    549c:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    549e:	e59d      	b.n	4fdc <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    54a0:	ab04      	add	r3, sp, #16
    54a2:	9300      	str	r3, [sp, #0]
    54a4:	2300      	movs	r3, #0
    54a6:	2208      	movs	r2, #8
    54a8:	4619      	mov	r1, r3
    54aa:	4618      	mov	r0, r3
    54ac:	4d25      	ldr	r5, [pc, #148]	; (5544 <sd_mmc_check+0x57c>)
    54ae:	47a8      	blx	r5
    54b0:	2800      	cmp	r0, #0
    54b2:	f43f adb5 	beq.w	5020 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    54b6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    54ba:	2b00      	cmp	r3, #0
    54bc:	daa1      	bge.n	5402 <sd_mmc_check+0x43a>
	u8_value = SDIO_BUSWIDTH_4B;
    54be:	ab14      	add	r3, sp, #80	; 0x50
    54c0:	2202      	movs	r2, #2
    54c2:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    54c6:	9300      	str	r3, [sp, #0]
    54c8:	2301      	movs	r3, #1
    54ca:	2207      	movs	r2, #7
    54cc:	2100      	movs	r1, #0
    54ce:	4618      	mov	r0, r3
    54d0:	47a8      	blx	r5
    54d2:	2800      	cmp	r0, #0
    54d4:	f43f ada4 	beq.w	5020 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    54d8:	4b14      	ldr	r3, [pc, #80]	; (552c <sd_mmc_check+0x564>)
    54da:	681b      	ldr	r3, [r3, #0]
    54dc:	2204      	movs	r2, #4
    54de:	735a      	strb	r2, [r3, #13]
    54e0:	e78f      	b.n	5402 <sd_mmc_check+0x43a>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    54e2:	ab04      	add	r3, sp, #16
    54e4:	9300      	str	r3, [sp, #0]
    54e6:	2300      	movs	r3, #0
    54e8:	2213      	movs	r2, #19
    54ea:	4619      	mov	r1, r3
    54ec:	4618      	mov	r0, r3
    54ee:	4d15      	ldr	r5, [pc, #84]	; (5544 <sd_mmc_check+0x57c>)
    54f0:	47a8      	blx	r5
    54f2:	2800      	cmp	r0, #0
    54f4:	f43f ad94 	beq.w	5020 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    54f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    54fc:	f013 0f01 	tst.w	r3, #1
    5500:	d0ab      	beq.n	545a <sd_mmc_check+0x492>
	u8_value = SDIO_EHS;
    5502:	ab14      	add	r3, sp, #80	; 0x50
    5504:	2202      	movs	r2, #2
    5506:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    550a:	9300      	str	r3, [sp, #0]
    550c:	2301      	movs	r3, #1
    550e:	2213      	movs	r2, #19
    5510:	2100      	movs	r1, #0
    5512:	4618      	mov	r0, r3
    5514:	47a8      	blx	r5
    5516:	2800      	cmp	r0, #0
    5518:	f43f ad82 	beq.w	5020 <sd_mmc_check+0x58>
	sd_mmc_card->high_speed = 1;
    551c:	4b03      	ldr	r3, [pc, #12]	; (552c <sd_mmc_check+0x564>)
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	2201      	movs	r2, #1
    5522:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    5524:	681a      	ldr	r2, [r3, #0]
    5526:	0052      	lsls	r2, r2, #1
    5528:	601a      	str	r2, [r3, #0]
    552a:	e796      	b.n	545a <sd_mmc_check+0x492>
    552c:	20001214 	.word	0x20001214
    5530:	00002635 	.word	0x00002635
    5534:	00081133 	.word	0x00081133
    5538:	000026bd 	.word	0x000026bd
    553c:	00002701 	.word	0x00002701
    5540:	00002769 	.word	0x00002769
    5544:	00004f25 	.word	0x00004f25
    5548:	00009b30 	.word	0x00009b30
    554c:	000025b9 	.word	0x000025b9
    5550:	00004de5 	.word	0x00004de5
    5554:	000025e5 	.word	0x000025e5
    5558:	00004f8d 	.word	0x00004f8d
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    555c:	2540      	movs	r5, #64	; 0x40
    555e:	462a      	mov	r2, r5
    5560:	2100      	movs	r1, #0
    5562:	a804      	add	r0, sp, #16
    5564:	4b21      	ldr	r3, [pc, #132]	; (55ec <sd_mmc_check+0x624>)
    5566:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    5568:	2301      	movs	r3, #1
    556a:	9301      	str	r3, [sp, #4]
    556c:	9300      	str	r3, [sp, #0]
    556e:	462b      	mov	r3, r5
    5570:	4a1f      	ldr	r2, [pc, #124]	; (55f0 <sd_mmc_check+0x628>)
    5572:	4920      	ldr	r1, [pc, #128]	; (55f4 <sd_mmc_check+0x62c>)
    5574:	4820      	ldr	r0, [pc, #128]	; (55f8 <sd_mmc_check+0x630>)
    5576:	6880      	ldr	r0, [r0, #8]
    5578:	4d20      	ldr	r5, [pc, #128]	; (55fc <sd_mmc_check+0x634>)
    557a:	47a8      	blx	r5
    557c:	2800      	cmp	r0, #0
    557e:	f43f ad4f 	beq.w	5020 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    5582:	2201      	movs	r2, #1
    5584:	a904      	add	r1, sp, #16
    5586:	4b1c      	ldr	r3, [pc, #112]	; (55f8 <sd_mmc_check+0x630>)
    5588:	6898      	ldr	r0, [r3, #8]
    558a:	4b1d      	ldr	r3, [pc, #116]	; (5600 <sd_mmc_check+0x638>)
    558c:	4798      	blx	r3
    558e:	2800      	cmp	r0, #0
    5590:	f43f ad46 	beq.w	5020 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    5594:	4b18      	ldr	r3, [pc, #96]	; (55f8 <sd_mmc_check+0x630>)
    5596:	6898      	ldr	r0, [r3, #8]
    5598:	4b1a      	ldr	r3, [pc, #104]	; (5604 <sd_mmc_check+0x63c>)
    559a:	4798      	blx	r3
    559c:	2800      	cmp	r0, #0
    559e:	f43f ad3f 	beq.w	5020 <sd_mmc_check+0x58>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    55a2:	4b15      	ldr	r3, [pc, #84]	; (55f8 <sd_mmc_check+0x630>)
    55a4:	6898      	ldr	r0, [r3, #8]
    55a6:	4b18      	ldr	r3, [pc, #96]	; (5608 <sd_mmc_check+0x640>)
    55a8:	4798      	blx	r3
    55aa:	f010 0f80 	tst.w	r0, #128	; 0x80
    55ae:	f47f ad37 	bne.w	5020 <sd_mmc_check+0x58>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    55b2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    55b6:	f003 030f 	and.w	r3, r3, #15
    55ba:	2b0f      	cmp	r3, #15
    55bc:	f43f af56 	beq.w	546c <sd_mmc_check+0x4a4>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    55c0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    55c4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    55c8:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    55cc:	f47f ad28 	bne.w	5020 <sd_mmc_check+0x58>
	driver_send_clock(sd_mmc_hal);
    55d0:	4d09      	ldr	r5, [pc, #36]	; (55f8 <sd_mmc_check+0x630>)
    55d2:	68a8      	ldr	r0, [r5, #8]
    55d4:	4b0d      	ldr	r3, [pc, #52]	; (560c <sd_mmc_check+0x644>)
    55d6:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    55d8:	682b      	ldr	r3, [r5, #0]
    55da:	2201      	movs	r2, #1
    55dc:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    55de:	681a      	ldr	r2, [r3, #0]
    55e0:	0052      	lsls	r2, r2, #1
    55e2:	601a      	str	r2, [r3, #0]
    55e4:	e742      	b.n	546c <sd_mmc_check+0x4a4>
	*v2 = 0;
    55e6:	f04f 0800 	mov.w	r8, #0
    55ea:	e52c      	b.n	5046 <sd_mmc_check+0x7e>
    55ec:	00006bbd 	.word	0x00006bbd
    55f0:	80ffff01 	.word	0x80ffff01
    55f4:	00081106 	.word	0x00081106
    55f8:	20001214 	.word	0x20001214
    55fc:	000026bd 	.word	0x000026bd
    5600:	00002701 	.word	0x00002701
    5604:	00002769 	.word	0x00002769
    5608:	00002665 	.word	0x00002665
    560c:	0000260d 	.word	0x0000260d

00005610 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    5610:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    5612:	4b05      	ldr	r3, [pc, #20]	; (5628 <sd_mmc_get_type+0x18>)
    5614:	4798      	blx	r3
    5616:	b108      	cbz	r0, 561c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
    5618:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    561a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    561c:	4b03      	ldr	r3, [pc, #12]	; (562c <sd_mmc_get_type+0x1c>)
    561e:	4798      	blx	r3
	return sd_mmc_card->type;
    5620:	4b03      	ldr	r3, [pc, #12]	; (5630 <sd_mmc_get_type+0x20>)
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	7ad8      	ldrb	r0, [r3, #11]
    5626:	bd08      	pop	{r3, pc}
    5628:	00004e11 	.word	0x00004e11
    562c:	00004f8d 	.word	0x00004f8d
    5630:	20001214 	.word	0x20001214

00005634 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    5634:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    5636:	4b05      	ldr	r3, [pc, #20]	; (564c <sd_mmc_get_capacity+0x18>)
    5638:	4798      	blx	r3
    563a:	b108      	cbz	r0, 5640 <sd_mmc_get_capacity+0xc>
		return 0;
    563c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    563e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    5640:	4b03      	ldr	r3, [pc, #12]	; (5650 <sd_mmc_get_capacity+0x1c>)
    5642:	4798      	blx	r3
	return sd_mmc_card->capacity;
    5644:	4b03      	ldr	r3, [pc, #12]	; (5654 <sd_mmc_get_capacity+0x20>)
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	6858      	ldr	r0, [r3, #4]
    564a:	bd08      	pop	{r3, pc}
    564c:	00004e11 	.word	0x00004e11
    5650:	00004f8d 	.word	0x00004f8d
    5654:	20001214 	.word	0x20001214

00005658 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    5658:	4b19      	ldr	r3, [pc, #100]	; (56c0 <sd_mmc_is_write_protected+0x68>)
    565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    565c:	2b00      	cmp	r3, #0
    565e:	d02b      	beq.n	56b8 <sd_mmc_is_write_protected+0x60>
{
    5660:	b570      	push	{r4, r5, r6, lr}
    5662:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    5664:	0085      	lsls	r5, r0, #2
    5666:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    566a:	f1b3 3fff 	cmp.w	r3, #4294967295
    566e:	d025      	beq.n	56bc <sd_mmc_is_write_protected+0x64>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    5670:	b2de      	uxtb	r6, r3
	CRITICAL_SECTION_ENTER();
    5672:	a801      	add	r0, sp, #4
    5674:	4b13      	ldr	r3, [pc, #76]	; (56c4 <sd_mmc_is_write_protected+0x6c>)
    5676:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5678:	0973      	lsrs	r3, r6, #5
    567a:	4913      	ldr	r1, [pc, #76]	; (56c8 <sd_mmc_is_write_protected+0x70>)
    567c:	01db      	lsls	r3, r3, #7
    567e:	18ca      	adds	r2, r1, r3
    5680:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5682:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5684:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5686:	405c      	eors	r4, r3
    5688:	400c      	ands	r4, r1
    568a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    568c:	a801      	add	r0, sp, #4
    568e:	4b0f      	ldr	r3, [pc, #60]	; (56cc <sd_mmc_is_write_protected+0x74>)
    5690:	4798      	blx	r3
    5692:	f006 031f 	and.w	r3, r6, #31
    5696:	2201      	movs	r2, #1
    5698:	fa02 f303 	lsl.w	r3, r2, r3
    569c:	4223      	tst	r3, r4
    569e:	bf14      	ite	ne
    56a0:	4610      	movne	r0, r2
    56a2:	2000      	moveq	r0, #0
    56a4:	4b06      	ldr	r3, [pc, #24]	; (56c0 <sd_mmc_is_write_protected+0x68>)
    56a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    56a8:	441d      	add	r5, r3
    56aa:	886b      	ldrh	r3, [r5, #2]
    56ac:	4298      	cmp	r0, r3
    56ae:	bf14      	ite	ne
    56b0:	2000      	movne	r0, #0
    56b2:	2001      	moveq	r0, #1
		return true;
	}
	return false;
}
    56b4:	b002      	add	sp, #8
    56b6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    56b8:	2000      	movs	r0, #0
    56ba:	4770      	bx	lr
    56bc:	2000      	movs	r0, #0
    56be:	e7f9      	b.n	56b4 <sd_mmc_is_write_protected+0x5c>
    56c0:	20001214 	.word	0x20001214
    56c4:	000022e9 	.word	0x000022e9
    56c8:	41008000 	.word	0x41008000
    56cc:	000022f7 	.word	0x000022f7

000056d0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    56d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56d4:	b082      	sub	sp, #8
    56d6:	468a      	mov	sl, r1
    56d8:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    56da:	4b29      	ldr	r3, [pc, #164]	; (5780 <sd_mmc_init_read_blocks+0xb0>)
    56dc:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    56de:	4680      	mov	r8, r0
    56e0:	b118      	cbz	r0, 56ea <sd_mmc_init_read_blocks+0x1a>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    56e2:	4640      	mov	r0, r8
    56e4:	b002      	add	sp, #8
    56e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56ea:	4d26      	ldr	r5, [pc, #152]	; (5784 <sd_mmc_init_read_blocks+0xb4>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    56ec:	4c26      	ldr	r4, [pc, #152]	; (5788 <sd_mmc_init_read_blocks+0xb8>)
    56ee:	4e27      	ldr	r6, [pc, #156]	; (578c <sd_mmc_init_read_blocks+0xbc>)
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    56f0:	4f27      	ldr	r7, [pc, #156]	; (5790 <sd_mmc_init_read_blocks+0xc0>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    56f2:	6823      	ldr	r3, [r4, #0]
    56f4:	891a      	ldrh	r2, [r3, #8]
    56f6:	0412      	lsls	r2, r2, #16
    56f8:	f241 110d 	movw	r1, #4365	; 0x110d
    56fc:	68a0      	ldr	r0, [r4, #8]
    56fe:	47b0      	blx	r6
    5700:	b130      	cbz	r0, 5710 <sd_mmc_init_read_blocks+0x40>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    5702:	68a0      	ldr	r0, [r4, #8]
    5704:	47b8      	blx	r7
    5706:	f410 7f80 	tst.w	r0, #256	; 0x100
    570a:	d118      	bne.n	573e <sd_mmc_init_read_blocks+0x6e>
		if (nec_timeout-- == 0) {
    570c:	3d01      	subs	r5, #1
    570e:	d1f0      	bne.n	56f2 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
    5710:	4b20      	ldr	r3, [pc, #128]	; (5794 <sd_mmc_init_read_blocks+0xc4>)
    5712:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5714:	f04f 0805 	mov.w	r8, #5
    5718:	e7e3      	b.n	56e2 <sd_mmc_init_read_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    571a:	4b1b      	ldr	r3, [pc, #108]	; (5788 <sd_mmc_init_read_blocks+0xb8>)
    571c:	6898      	ldr	r0, [r3, #8]
    571e:	4b1c      	ldr	r3, [pc, #112]	; (5790 <sd_mmc_init_read_blocks+0xc0>)
    5720:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    5722:	4b1d      	ldr	r3, [pc, #116]	; (5798 <sd_mmc_init_read_blocks+0xc8>)
    5724:	4003      	ands	r3, r0
    5726:	b92b      	cbnz	r3, 5734 <sd_mmc_init_read_blocks+0x64>
	sd_mmc_nb_block_remaining  = nb_block;
    5728:	4b17      	ldr	r3, [pc, #92]	; (5788 <sd_mmc_init_read_blocks+0xb8>)
    572a:	f8a3 9030 	strh.w	r9, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    572e:	f8a3 9038 	strh.w	r9, [r3, #56]	; 0x38
	return SD_MMC_OK;
    5732:	e7d6      	b.n	56e2 <sd_mmc_init_read_blocks+0x12>
		sd_mmc_deselect_slot();
    5734:	4b17      	ldr	r3, [pc, #92]	; (5794 <sd_mmc_init_read_blocks+0xc4>)
    5736:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5738:	f04f 0805 	mov.w	r8, #5
    573c:	e7d1      	b.n	56e2 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    573e:	4b17      	ldr	r3, [pc, #92]	; (579c <sd_mmc_init_read_blocks+0xcc>)
    5740:	4917      	ldr	r1, [pc, #92]	; (57a0 <sd_mmc_init_read_blocks+0xd0>)
    5742:	f1b9 0f01 	cmp.w	r9, #1
    5746:	bf98      	it	ls
    5748:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    574a:	4b0f      	ldr	r3, [pc, #60]	; (5788 <sd_mmc_init_read_blocks+0xb8>)
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	7adb      	ldrb	r3, [r3, #11]
    5750:	f013 0f08 	tst.w	r3, #8
    5754:	d101      	bne.n	575a <sd_mmc_init_read_blocks+0x8a>
		arg = (start * SD_MMC_BLOCK_SIZE);
    5756:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    575a:	4b0b      	ldr	r3, [pc, #44]	; (5788 <sd_mmc_init_read_blocks+0xb8>)
    575c:	6898      	ldr	r0, [r3, #8]
    575e:	2301      	movs	r3, #1
    5760:	9301      	str	r3, [sp, #4]
    5762:	f8cd 9000 	str.w	r9, [sp]
    5766:	f44f 7300 	mov.w	r3, #512	; 0x200
    576a:	4652      	mov	r2, sl
    576c:	4c0d      	ldr	r4, [pc, #52]	; (57a4 <sd_mmc_init_read_blocks+0xd4>)
    576e:	47a0      	blx	r4
    5770:	2800      	cmp	r0, #0
    5772:	d1d2      	bne.n	571a <sd_mmc_init_read_blocks+0x4a>
		sd_mmc_deselect_slot();
    5774:	4b07      	ldr	r3, [pc, #28]	; (5794 <sd_mmc_init_read_blocks+0xc4>)
    5776:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5778:	f04f 0805 	mov.w	r8, #5
    577c:	e7b1      	b.n	56e2 <sd_mmc_init_read_blocks+0x12>
    577e:	bf00      	nop
    5780:	00004e11 	.word	0x00004e11
    5784:	00030d41 	.word	0x00030d41
    5788:	20001214 	.word	0x20001214
    578c:	00002635 	.word	0x00002635
    5790:	00002665 	.word	0x00002665
    5794:	00004f8d 	.word	0x00004f8d
    5798:	e4580000 	.word	0xe4580000
    579c:	00081111 	.word	0x00081111
    57a0:	00101112 	.word	0x00101112
    57a4:	000026bd 	.word	0x000026bd

000057a8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    57a8:	b570      	push	{r4, r5, r6, lr}
    57aa:	4606      	mov	r6, r0
    57ac:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    57ae:	4d0d      	ldr	r5, [pc, #52]	; (57e4 <sd_mmc_start_read_blocks+0x3c>)
    57b0:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    57b2:	f240 52a7 	movw	r2, #1447	; 0x5a7
    57b6:	490c      	ldr	r1, [pc, #48]	; (57e8 <sd_mmc_start_read_blocks+0x40>)
    57b8:	42a0      	cmp	r0, r4
    57ba:	bf34      	ite	cc
    57bc:	2000      	movcc	r0, #0
    57be:	2001      	movcs	r0, #1
    57c0:	4b0a      	ldr	r3, [pc, #40]	; (57ec <sd_mmc_start_read_blocks+0x44>)
    57c2:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    57c4:	4622      	mov	r2, r4
    57c6:	4631      	mov	r1, r6
    57c8:	68a8      	ldr	r0, [r5, #8]
    57ca:	4b09      	ldr	r3, [pc, #36]	; (57f0 <sd_mmc_start_read_blocks+0x48>)
    57cc:	4798      	blx	r3
    57ce:	b918      	cbnz	r0, 57d8 <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    57d0:	2200      	movs	r2, #0
    57d2:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    57d4:	2005      	movs	r0, #5
    57d6:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    57d8:	4a02      	ldr	r2, [pc, #8]	; (57e4 <sd_mmc_start_read_blocks+0x3c>)
    57da:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    57dc:	1b1c      	subs	r4, r3, r4
    57de:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    57e0:	2000      	movs	r0, #0
}
    57e2:	bd70      	pop	{r4, r5, r6, pc}
    57e4:	20001214 	.word	0x20001214
    57e8:	00009bcc 	.word	0x00009bcc
    57ec:	00002951 	.word	0x00002951
    57f0:	00002701 	.word	0x00002701

000057f4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    57f4:	b510      	push	{r4, lr}
    57f6:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    57f8:	4b16      	ldr	r3, [pc, #88]	; (5854 <sd_mmc_wait_end_of_read_blocks+0x60>)
    57fa:	6898      	ldr	r0, [r3, #8]
    57fc:	4b16      	ldr	r3, [pc, #88]	; (5858 <sd_mmc_wait_end_of_read_blocks+0x64>)
    57fe:	4798      	blx	r3
    5800:	b908      	cbnz	r0, 5806 <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    5802:	2005      	movs	r0, #5
    5804:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    5806:	b194      	cbz	r4, 582e <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    5808:	2200      	movs	r2, #0
    580a:	4b12      	ldr	r3, [pc, #72]	; (5854 <sd_mmc_wait_end_of_read_blocks+0x60>)
    580c:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    580e:	4b11      	ldr	r3, [pc, #68]	; (5854 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5810:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5812:	2b01      	cmp	r3, #1
    5814:	d011      	beq.n	583a <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    5816:	2200      	movs	r2, #0
    5818:	f243 110c 	movw	r1, #12556	; 0x310c
    581c:	4b0d      	ldr	r3, [pc, #52]	; (5854 <sd_mmc_wait_end_of_read_blocks+0x60>)
    581e:	6898      	ldr	r0, [r3, #8]
    5820:	4b0e      	ldr	r3, [pc, #56]	; (585c <sd_mmc_wait_end_of_read_blocks+0x68>)
    5822:	4798      	blx	r3
    5824:	b168      	cbz	r0, 5842 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    5826:	4b0e      	ldr	r3, [pc, #56]	; (5860 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    5828:	4798      	blx	r3
	return SD_MMC_OK;
    582a:	2000      	movs	r0, #0
    582c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    582e:	4b09      	ldr	r3, [pc, #36]	; (5854 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5830:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5832:	2b00      	cmp	r3, #0
    5834:	d0eb      	beq.n	580e <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    5836:	2000      	movs	r0, #0
}
    5838:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    583a:	4b09      	ldr	r3, [pc, #36]	; (5860 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    583c:	4798      	blx	r3
		return SD_MMC_OK;
    583e:	2000      	movs	r0, #0
    5840:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    5842:	2200      	movs	r2, #0
    5844:	f243 110c 	movw	r1, #12556	; 0x310c
    5848:	4b02      	ldr	r3, [pc, #8]	; (5854 <sd_mmc_wait_end_of_read_blocks+0x60>)
    584a:	6898      	ldr	r0, [r3, #8]
    584c:	4b03      	ldr	r3, [pc, #12]	; (585c <sd_mmc_wait_end_of_read_blocks+0x68>)
    584e:	4798      	blx	r3
    5850:	e7e9      	b.n	5826 <sd_mmc_wait_end_of_read_blocks+0x32>
    5852:	bf00      	nop
    5854:	20001214 	.word	0x20001214
    5858:	00002769 	.word	0x00002769
    585c:	00002635 	.word	0x00002635
    5860:	00004f8d 	.word	0x00004f8d

00005864 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    5864:	b5f0      	push	{r4, r5, r6, r7, lr}
    5866:	b083      	sub	sp, #12
    5868:	4607      	mov	r7, r0
    586a:	460e      	mov	r6, r1
    586c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    586e:	4b1c      	ldr	r3, [pc, #112]	; (58e0 <sd_mmc_init_write_blocks+0x7c>)
    5870:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    5872:	4604      	mov	r4, r0
    5874:	b110      	cbz	r0, 587c <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    5876:	4620      	mov	r0, r4
    5878:	b003      	add	sp, #12
    587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    587c:	4638      	mov	r0, r7
    587e:	4b19      	ldr	r3, [pc, #100]	; (58e4 <sd_mmc_init_write_blocks+0x80>)
    5880:	4798      	blx	r3
    5882:	b9d0      	cbnz	r0, 58ba <sd_mmc_init_write_blocks+0x56>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    5884:	4b18      	ldr	r3, [pc, #96]	; (58e8 <sd_mmc_init_write_blocks+0x84>)
    5886:	4919      	ldr	r1, [pc, #100]	; (58ec <sd_mmc_init_write_blocks+0x88>)
    5888:	2d01      	cmp	r5, #1
    588a:	bf98      	it	ls
    588c:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    588e:	4b18      	ldr	r3, [pc, #96]	; (58f0 <sd_mmc_init_write_blocks+0x8c>)
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	7adb      	ldrb	r3, [r3, #11]
    5894:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
    5898:	bf08      	it	eq
    589a:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    589c:	4b14      	ldr	r3, [pc, #80]	; (58f0 <sd_mmc_init_write_blocks+0x8c>)
    589e:	6898      	ldr	r0, [r3, #8]
    58a0:	2301      	movs	r3, #1
    58a2:	9301      	str	r3, [sp, #4]
    58a4:	9500      	str	r5, [sp, #0]
    58a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    58aa:	4632      	mov	r2, r6
    58ac:	4e11      	ldr	r6, [pc, #68]	; (58f4 <sd_mmc_init_write_blocks+0x90>)
    58ae:	47b0      	blx	r6
    58b0:	b938      	cbnz	r0, 58c2 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    58b2:	4b11      	ldr	r3, [pc, #68]	; (58f8 <sd_mmc_init_write_blocks+0x94>)
    58b4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    58b6:	2405      	movs	r4, #5
    58b8:	e7dd      	b.n	5876 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    58ba:	4b0f      	ldr	r3, [pc, #60]	; (58f8 <sd_mmc_init_write_blocks+0x94>)
    58bc:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    58be:	2407      	movs	r4, #7
    58c0:	e7d9      	b.n	5876 <sd_mmc_init_write_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    58c2:	4b0b      	ldr	r3, [pc, #44]	; (58f0 <sd_mmc_init_write_blocks+0x8c>)
    58c4:	6898      	ldr	r0, [r3, #8]
    58c6:	4b0d      	ldr	r3, [pc, #52]	; (58fc <sd_mmc_init_write_blocks+0x98>)
    58c8:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    58ca:	4b0d      	ldr	r3, [pc, #52]	; (5900 <sd_mmc_init_write_blocks+0x9c>)
    58cc:	4003      	ands	r3, r0
    58ce:	b91b      	cbnz	r3, 58d8 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    58d0:	4b07      	ldr	r3, [pc, #28]	; (58f0 <sd_mmc_init_write_blocks+0x8c>)
    58d2:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    58d4:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    58d6:	e7ce      	b.n	5876 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    58d8:	4b07      	ldr	r3, [pc, #28]	; (58f8 <sd_mmc_init_write_blocks+0x94>)
    58da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    58dc:	2405      	movs	r4, #5
    58de:	e7ca      	b.n	5876 <sd_mmc_init_write_blocks+0x12>
    58e0:	00004e11 	.word	0x00004e11
    58e4:	00005659 	.word	0x00005659
    58e8:	00089118 	.word	0x00089118
    58ec:	00109119 	.word	0x00109119
    58f0:	20001214 	.word	0x20001214
    58f4:	000026bd 	.word	0x000026bd
    58f8:	00004f8d 	.word	0x00004f8d
    58fc:	00002665 	.word	0x00002665
    5900:	e4580000 	.word	0xe4580000

00005904 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    5904:	b570      	push	{r4, r5, r6, lr}
    5906:	4606      	mov	r6, r0
    5908:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    590a:	4d0d      	ldr	r5, [pc, #52]	; (5940 <sd_mmc_start_write_blocks+0x3c>)
    590c:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    590e:	f240 52fa 	movw	r2, #1530	; 0x5fa
    5912:	490c      	ldr	r1, [pc, #48]	; (5944 <sd_mmc_start_write_blocks+0x40>)
    5914:	42a0      	cmp	r0, r4
    5916:	bf34      	ite	cc
    5918:	2000      	movcc	r0, #0
    591a:	2001      	movcs	r0, #1
    591c:	4b0a      	ldr	r3, [pc, #40]	; (5948 <sd_mmc_start_write_blocks+0x44>)
    591e:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    5920:	4622      	mov	r2, r4
    5922:	4631      	mov	r1, r6
    5924:	68a8      	ldr	r0, [r5, #8]
    5926:	4b09      	ldr	r3, [pc, #36]	; (594c <sd_mmc_start_write_blocks+0x48>)
    5928:	4798      	blx	r3
    592a:	b918      	cbnz	r0, 5934 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    592c:	2200      	movs	r2, #0
    592e:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    5930:	2005      	movs	r0, #5
    5932:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    5934:	4a02      	ldr	r2, [pc, #8]	; (5940 <sd_mmc_start_write_blocks+0x3c>)
    5936:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    5938:	1b1c      	subs	r4, r3, r4
    593a:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    593c:	2000      	movs	r0, #0
}
    593e:	bd70      	pop	{r4, r5, r6, pc}
    5940:	20001214 	.word	0x20001214
    5944:	00009bcc 	.word	0x00009bcc
    5948:	00002951 	.word	0x00002951
    594c:	00002735 	.word	0x00002735

00005950 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    5950:	b510      	push	{r4, lr}
    5952:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    5954:	4b14      	ldr	r3, [pc, #80]	; (59a8 <sd_mmc_wait_end_of_write_blocks+0x58>)
    5956:	6898      	ldr	r0, [r3, #8]
    5958:	4b14      	ldr	r3, [pc, #80]	; (59ac <sd_mmc_wait_end_of_write_blocks+0x5c>)
    595a:	4798      	blx	r3
    595c:	b908      	cbnz	r0, 5962 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    595e:	2005      	movs	r0, #5
    5960:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    5962:	b194      	cbz	r4, 598a <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    5964:	2200      	movs	r2, #0
    5966:	4b10      	ldr	r3, [pc, #64]	; (59a8 <sd_mmc_wait_end_of_write_blocks+0x58>)
    5968:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    596a:	4b0f      	ldr	r3, [pc, #60]	; (59a8 <sd_mmc_wait_end_of_write_blocks+0x58>)
    596c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    596e:	2b01      	cmp	r3, #1
    5970:	d011      	beq.n	5996 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    5972:	2200      	movs	r2, #0
    5974:	f243 110c 	movw	r1, #12556	; 0x310c
    5978:	4b0b      	ldr	r3, [pc, #44]	; (59a8 <sd_mmc_wait_end_of_write_blocks+0x58>)
    597a:	6898      	ldr	r0, [r3, #8]
    597c:	4b0c      	ldr	r3, [pc, #48]	; (59b0 <sd_mmc_wait_end_of_write_blocks+0x60>)
    597e:	4798      	blx	r3
    5980:	b968      	cbnz	r0, 599e <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    5982:	4b0c      	ldr	r3, [pc, #48]	; (59b4 <sd_mmc_wait_end_of_write_blocks+0x64>)
    5984:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5986:	2005      	movs	r0, #5
    5988:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    598a:	4b07      	ldr	r3, [pc, #28]	; (59a8 <sd_mmc_wait_end_of_write_blocks+0x58>)
    598c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    598e:	2b00      	cmp	r3, #0
    5990:	d0eb      	beq.n	596a <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    5992:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    5994:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    5996:	4b07      	ldr	r3, [pc, #28]	; (59b4 <sd_mmc_wait_end_of_write_blocks+0x64>)
    5998:	4798      	blx	r3
		return SD_MMC_OK;
    599a:	2000      	movs	r0, #0
    599c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    599e:	4b05      	ldr	r3, [pc, #20]	; (59b4 <sd_mmc_wait_end_of_write_blocks+0x64>)
    59a0:	4798      	blx	r3
	return SD_MMC_OK;
    59a2:	2000      	movs	r0, #0
    59a4:	bd10      	pop	{r4, pc}
    59a6:	bf00      	nop
    59a8:	20001214 	.word	0x20001214
    59ac:	00002791 	.word	0x00002791
    59b0:	00002635 	.word	0x00002635
    59b4:	00004f8d 	.word	0x00004f8d

000059b8 <SERVO_PWM_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    59b8:	4a36      	ldr	r2, [pc, #216]	; (5a94 <SERVO_PWM_init+0xdc>)
    59ba:	6953      	ldr	r3, [r2, #20]
    59bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    59c0:	6153      	str	r3, [r2, #20]
    59c2:	2240      	movs	r2, #64	; 0x40
    59c4:	4b34      	ldr	r3, [pc, #208]	; (5a98 <SERVO_PWM_init+0xe0>)
    59c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    59ca:	4a34      	ldr	r2, [pc, #208]	; (5a9c <SERVO_PWM_init+0xe4>)
    59cc:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    59d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    59d4:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    59d8:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    59dc:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    59e0:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    59e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    59e8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    59ec:	4b2c      	ldr	r3, [pc, #176]	; (5aa0 <SERVO_PWM_init+0xe8>)
    59ee:	691b      	ldr	r3, [r3, #16]
void SERVO_PWM_init(void)
{
	SERVO_PWM_CLOCK_init();
	SERVO_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    59f0:	f013 0f01 	tst.w	r3, #1
    59f4:	d11f      	bne.n	5a36 <SERVO_PWM_init+0x7e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    59f6:	4a2a      	ldr	r2, [pc, #168]	; (5aa0 <SERVO_PWM_init+0xe8>)
    59f8:	6913      	ldr	r3, [r2, #16]
    59fa:	f013 0f03 	tst.w	r3, #3
    59fe:	d1fb      	bne.n	59f8 <SERVO_PWM_init+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5a00:	4b27      	ldr	r3, [pc, #156]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a02:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    5a04:	f013 0f02 	tst.w	r3, #2
    5a08:	d00d      	beq.n	5a26 <SERVO_PWM_init+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5a0a:	4a25      	ldr	r2, [pc, #148]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a0c:	6813      	ldr	r3, [r2, #0]
    5a0e:	f023 0302 	bic.w	r3, r3, #2
    5a12:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5a14:	6913      	ldr	r3, [r2, #16]
    5a16:	f013 0f03 	tst.w	r3, #3
    5a1a:	d1fb      	bne.n	5a14 <SERVO_PWM_init+0x5c>
    5a1c:	4a20      	ldr	r2, [pc, #128]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a1e:	6913      	ldr	r3, [r2, #16]
    5a20:	f013 0f02 	tst.w	r3, #2
    5a24:	d1fb      	bne.n	5a1e <SERVO_PWM_init+0x66>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    5a26:	2201      	movs	r2, #1
    5a28:	4b1d      	ldr	r3, [pc, #116]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a2a:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5a2c:	461a      	mov	r2, r3
    5a2e:	6913      	ldr	r3, [r2, #16]
    5a30:	f013 0f03 	tst.w	r3, #3
    5a34:	d1fb      	bne.n	5a2e <SERVO_PWM_init+0x76>
    5a36:	4a1a      	ldr	r2, [pc, #104]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a38:	6913      	ldr	r3, [r2, #16]
    5a3a:	f013 0f01 	tst.w	r3, #1
    5a3e:	d1fb      	bne.n	5a38 <SERVO_PWM_init+0x80>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    5a40:	4a18      	ldr	r2, [pc, #96]	; (5aa4 <SERVO_PWM_init+0xec>)
    5a42:	4b17      	ldr	r3, [pc, #92]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a44:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5a46:	461a      	mov	r2, r3
    5a48:	6913      	ldr	r3, [r2, #16]
    5a4a:	f013 0f03 	tst.w	r3, #3
    5a4e:	d1fb      	bne.n	5a48 <SERVO_PWM_init+0x90>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    5a50:	4b13      	ldr	r3, [pc, #76]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a52:	2200      	movs	r2, #0
    5a54:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    5a56:	22ff      	movs	r2, #255	; 0xff
    5a58:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    5a5a:	2203      	movs	r2, #3
    5a5c:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5a5e:	f640 02e1 	movw	r2, #2273	; 0x8e1
    5a62:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5a64:	461a      	mov	r2, r3
    5a66:	6913      	ldr	r3, [r2, #16]
    5a68:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5a6c:	d1fb      	bne.n	5a66 <SERVO_PWM_init+0xae>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5a6e:	f240 1277 	movw	r2, #375	; 0x177
    5a72:	4b0b      	ldr	r3, [pc, #44]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a74:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5a76:	461a      	mov	r2, r3
    5a78:	6913      	ldr	r3, [r2, #16]
    5a7a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5a7e:	d1fb      	bne.n	5a78 <SERVO_PWM_init+0xc0>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5a80:	4a07      	ldr	r2, [pc, #28]	; (5aa0 <SERVO_PWM_init+0xe8>)
    5a82:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    5a84:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    5a88:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5a8a:	6913      	ldr	r3, [r2, #16]
    5a8c:	f013 0f03 	tst.w	r3, #3
    5a90:	d1fb      	bne.n	5a8a <SERVO_PWM_init+0xd2>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    5a92:	4770      	bx	lr
    5a94:	40000800 	.word	0x40000800
    5a98:	40001c00 	.word	0x40001c00
    5a9c:	41008000 	.word	0x41008000
    5aa0:	40003c00 	.word	0x40003c00
    5aa4:	12000410 	.word	0x12000410

00005aa8 <SERVO_set_angle>:
  * Sets servo position to given angle
  * 
  * @param int : angle to set servo to
  */ 
void SERVO_set_angle(int angle)
{
    5aa8:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    5aaa:	4b2b      	ldr	r3, [pc, #172]	; (5b58 <SERVO_set_angle+0xb0>)
    5aac:	4798      	blx	r3
    5aae:	4c2b      	ldr	r4, [pc, #172]	; (5b5c <SERVO_set_angle+0xb4>)
    5ab0:	2200      	movs	r2, #0
    5ab2:	4b2b      	ldr	r3, [pc, #172]	; (5b60 <SERVO_set_angle+0xb8>)
    5ab4:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    5ab6:	4d2b      	ldr	r5, [pc, #172]	; (5b64 <SERVO_set_angle+0xbc>)
    5ab8:	2200      	movs	r2, #0
    5aba:	4b2b      	ldr	r3, [pc, #172]	; (5b68 <SERVO_set_angle+0xc0>)
    5abc:	47a8      	blx	r5
    5abe:	2200      	movs	r2, #0
    5ac0:	4b2a      	ldr	r3, [pc, #168]	; (5b6c <SERVO_set_angle+0xc4>)
    5ac2:	4e2b      	ldr	r6, [pc, #172]	; (5b70 <SERVO_set_angle+0xc8>)
    5ac4:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    5ac6:	a320      	add	r3, pc, #128	; (adr r3, 5b48 <SERVO_set_angle+0xa0>)
    5ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
    5acc:	47a8      	blx	r5
    5ace:	a320      	add	r3, pc, #128	; (adr r3, 5b50 <SERVO_set_angle+0xa8>)
    5ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ad4:	47a0      	blx	r4
    5ad6:	4b27      	ldr	r3, [pc, #156]	; (5b74 <SERVO_set_angle+0xcc>)
    5ad8:	4798      	blx	r3
    5ada:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    5adc:	4b26      	ldr	r3, [pc, #152]	; (5b78 <SERVO_set_angle+0xd0>)
    5ade:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    5ae0:	f013 0f01 	tst.w	r3, #1
    5ae4:	d117      	bne.n	5b16 <SERVO_set_angle+0x6e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5ae6:	4a24      	ldr	r2, [pc, #144]	; (5b78 <SERVO_set_angle+0xd0>)
    5ae8:	6913      	ldr	r3, [r2, #16]
    5aea:	f013 0f03 	tst.w	r3, #3
    5aee:	d1fb      	bne.n	5ae8 <SERVO_set_angle+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5af0:	4b21      	ldr	r3, [pc, #132]	; (5b78 <SERVO_set_angle+0xd0>)
    5af2:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    5af4:	f013 0f02 	tst.w	r3, #2
    5af8:	d00d      	beq.n	5b16 <SERVO_set_angle+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5afa:	4a1f      	ldr	r2, [pc, #124]	; (5b78 <SERVO_set_angle+0xd0>)
    5afc:	6813      	ldr	r3, [r2, #0]
    5afe:	f023 0302 	bic.w	r3, r3, #2
    5b02:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5b04:	6913      	ldr	r3, [r2, #16]
    5b06:	f013 0f03 	tst.w	r3, #3
    5b0a:	d1fb      	bne.n	5b04 <SERVO_set_angle+0x5c>
    5b0c:	4a1a      	ldr	r2, [pc, #104]	; (5b78 <SERVO_set_angle+0xd0>)
    5b0e:	6913      	ldr	r3, [r2, #16]
    5b10:	f013 0f02 	tst.w	r3, #2
    5b14:	d1fb      	bne.n	5b0e <SERVO_set_angle+0x66>
    5b16:	4a18      	ldr	r2, [pc, #96]	; (5b78 <SERVO_set_angle+0xd0>)
    5b18:	6913      	ldr	r3, [r2, #16]
    5b1a:	f013 0f01 	tst.w	r3, #1
    5b1e:	d1fb      	bne.n	5b18 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5b20:	4b15      	ldr	r3, [pc, #84]	; (5b78 <SERVO_set_angle+0xd0>)
    5b22:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5b24:	461a      	mov	r2, r3
    5b26:	6913      	ldr	r3, [r2, #16]
    5b28:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5b2c:	d1fb      	bne.n	5b26 <SERVO_set_angle+0x7e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5b2e:	4a12      	ldr	r2, [pc, #72]	; (5b78 <SERVO_set_angle+0xd0>)
    5b30:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    5b32:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    5b36:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5b38:	6913      	ldr	r3, [r2, #16]
    5b3a:	f013 0f03 	tst.w	r3, #3
    5b3e:	d1fb      	bne.n	5b38 <SERVO_set_angle+0x90>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
}
    5b40:	bd70      	pop	{r4, r5, r6, pc}
    5b42:	bf00      	nop
    5b44:	f3af 8000 	nop.w
    5b48:	00000000 	.word	0x00000000
    5b4c:	40a1c200 	.word	0x40a1c200
    5b50:	00000000 	.word	0x00000000
    5b54:	40a7ac00 	.word	0x40a7ac00
    5b58:	00005fd9 	.word	0x00005fd9
    5b5c:	000062f9 	.word	0x000062f9
    5b60:	40668000 	.word	0x40668000
    5b64:	000060a5 	.word	0x000060a5
    5b68:	409f4000 	.word	0x409f4000
    5b6c:	407f4000 	.word	0x407f4000
    5b70:	00005d41 	.word	0x00005d41
    5b74:	000064c9 	.word	0x000064c9
    5b78:	40003c00 	.word	0x40003c00

00005b7c <SERVO_menu>:
/**
  * Menu for servo command options in order to test angle adjustments with
  * servo
  */ 
void SERVO_menu(void)
{
    5b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b7e:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
    5b80:	2300      	movs	r3, #0
    5b82:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    5b84:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    5b86:	4e1d      	ldr	r6, [pc, #116]	; (5bfc <SERVO_menu+0x80>)
    5b88:	4d1d      	ldr	r5, [pc, #116]	; (5c00 <SERVO_menu+0x84>)
    5b8a:	4c1e      	ldr	r4, [pc, #120]	; (5c04 <SERVO_menu+0x88>)
    5b8c:	e004      	b.n	5b98 <SERVO_menu+0x1c>
		
		if (scanf("%"PRIu32"", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    5b8e:	4b1e      	ldr	r3, [pc, #120]	; (5c08 <SERVO_menu+0x8c>)
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	6858      	ldr	r0, [r3, #4]
    5b94:	4b1d      	ldr	r3, [pc, #116]	; (5c0c <SERVO_menu+0x90>)
    5b96:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    5b98:	4631      	mov	r1, r6
    5b9a:	4628      	mov	r0, r5
    5b9c:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
    5b9e:	a901      	add	r1, sp, #4
    5ba0:	481b      	ldr	r0, [pc, #108]	; (5c10 <SERVO_menu+0x94>)
    5ba2:	4b1c      	ldr	r3, [pc, #112]	; (5c14 <SERVO_menu+0x98>)
    5ba4:	4798      	blx	r3
    5ba6:	2800      	cmp	r0, #0
    5ba8:	d0f1      	beq.n	5b8e <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    5baa:	9901      	ldr	r1, [sp, #4]
    5bac:	481a      	ldr	r0, [pc, #104]	; (5c18 <SERVO_menu+0x9c>)
    5bae:	47a0      	blx	r4
		
		switch (user_selection) {
    5bb0:	9b01      	ldr	r3, [sp, #4]
    5bb2:	2b01      	cmp	r3, #1
    5bb4:	d005      	beq.n	5bc2 <SERVO_menu+0x46>
    5bb6:	2b02      	cmp	r3, #2
    5bb8:	d008      	beq.n	5bcc <SERVO_menu+0x50>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
				SERVO_set_angle(servo_angle);
				break;
			
			default:
				printf("\r\nInvalid option\r\n");
    5bba:	4818      	ldr	r0, [pc, #96]	; (5c1c <SERVO_menu+0xa0>)
    5bbc:	4b18      	ldr	r3, [pc, #96]	; (5c20 <SERVO_menu+0xa4>)
    5bbe:	4798      	blx	r3
				break;
    5bc0:	e7ea      	b.n	5b98 <SERVO_menu+0x1c>
				printf("\r\nReturning to main menu\r\n");
    5bc2:	4818      	ldr	r0, [pc, #96]	; (5c24 <SERVO_menu+0xa8>)
    5bc4:	4b16      	ldr	r3, [pc, #88]	; (5c20 <SERVO_menu+0xa4>)
    5bc6:	4798      	blx	r3
		}
	}
    5bc8:	b003      	add	sp, #12
    5bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nEnter angle >> ");
    5bcc:	4816      	ldr	r0, [pc, #88]	; (5c28 <SERVO_menu+0xac>)
    5bce:	47a0      	blx	r4
				scanf("%"PRIu32"", &servo_angle);
    5bd0:	4f0f      	ldr	r7, [pc, #60]	; (5c10 <SERVO_menu+0x94>)
    5bd2:	4669      	mov	r1, sp
    5bd4:	4638      	mov	r0, r7
    5bd6:	4b0f      	ldr	r3, [pc, #60]	; (5c14 <SERVO_menu+0x98>)
    5bd8:	4798      	blx	r3
				printf("%"PRIu32"", servo_angle);
    5bda:	9900      	ldr	r1, [sp, #0]
    5bdc:	4638      	mov	r0, r7
    5bde:	47a0      	blx	r4
				if (servo_angle < 0 || servo_angle > 180) {
    5be0:	9900      	ldr	r1, [sp, #0]
    5be2:	29b4      	cmp	r1, #180	; 0xb4
    5be4:	d903      	bls.n	5bee <SERVO_menu+0x72>
					printf("\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n");
    5be6:	4811      	ldr	r0, [pc, #68]	; (5c2c <SERVO_menu+0xb0>)
    5be8:	4b0d      	ldr	r3, [pc, #52]	; (5c20 <SERVO_menu+0xa4>)
    5bea:	4798      	blx	r3
					break;
    5bec:	e7d4      	b.n	5b98 <SERVO_menu+0x1c>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
    5bee:	4810      	ldr	r0, [pc, #64]	; (5c30 <SERVO_menu+0xb4>)
    5bf0:	47a0      	blx	r4
				SERVO_set_angle(servo_angle);
    5bf2:	9800      	ldr	r0, [sp, #0]
    5bf4:	4b0f      	ldr	r3, [pc, #60]	; (5c34 <SERVO_menu+0xb8>)
    5bf6:	4798      	blx	r3
				break;
    5bf8:	e7ce      	b.n	5b98 <SERVO_menu+0x1c>
    5bfa:	bf00      	nop
    5bfc:	200002a0 	.word	0x200002a0
    5c00:	00008b78 	.word	0x00008b78
    5c04:	00006d25 	.word	0x00006d25
    5c08:	200002f0 	.word	0x200002f0
    5c0c:	00006985 	.word	0x00006985
    5c10:	00008b24 	.word	0x00008b24
    5c14:	00006e3d 	.word	0x00006e3d
    5c18:	00008b7c 	.word	0x00008b7c
    5c1c:	00008bb4 	.word	0x00008bb4
    5c20:	00006e0d 	.word	0x00006e0d
    5c24:	00008b98 	.word	0x00008b98
    5c28:	00009be0 	.word	0x00009be0
    5c2c:	00009bf4 	.word	0x00009bf4
    5c30:	00009c30 	.word	0x00009c30
    5c34:	00005aa9 	.word	0x00005aa9

00005c38 <start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void start_init(void)
{
    5c38:	b508      	push	{r3, lr}
	system_init();
    5c3a:	4b04      	ldr	r3, [pc, #16]	; (5c4c <start_init+0x14>)
    5c3c:	4798      	blx	r3
	stdio_redirect_init();
    5c3e:	4b04      	ldr	r3, [pc, #16]	; (5c50 <start_init+0x18>)
    5c40:	4798      	blx	r3
	SDMMC_init();
    5c42:	4b04      	ldr	r3, [pc, #16]	; (5c54 <start_init+0x1c>)
    5c44:	4798      	blx	r3
	EEPROM_init();
    5c46:	4b04      	ldr	r3, [pc, #16]	; (5c58 <start_init+0x20>)
    5c48:	4798      	blx	r3
    5c4a:	bd08      	pop	{r3, pc}
    5c4c:	0000088d 	.word	0x0000088d
    5c50:	00005c5d 	.word	0x00005c5d
    5c54:	00003745 	.word	0x00003745
    5c58:	000009b5 	.word	0x000009b5

00005c5c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    5c5c:	b510      	push	{r4, lr}
	usart_sync_enable(&STDIO_IO);
    5c5e:	4c04      	ldr	r4, [pc, #16]	; (5c70 <stdio_redirect_init+0x14>)
    5c60:	4620      	mov	r0, r4
    5c62:	4b04      	ldr	r3, [pc, #16]	; (5c74 <stdio_redirect_init+0x18>)
    5c64:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    5c66:	4620      	mov	r0, r4
    5c68:	4b03      	ldr	r3, [pc, #12]	; (5c78 <stdio_redirect_init+0x1c>)
    5c6a:	4798      	blx	r3
    5c6c:	bd10      	pop	{r4, pc}
    5c6e:	bf00      	nop
    5c70:	20001260 	.word	0x20001260
    5c74:	000028d5 	.word	0x000028d5
    5c78:	00005cc1 	.word	0x00005cc1

00005c7c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    5c7c:	b940      	cbnz	r0, 5c90 <_read+0x14>
{
    5c7e:	b508      	push	{r3, lr}
    5c80:	460b      	mov	r3, r1
    5c82:	4611      	mov	r1, r2
    5c84:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    5c86:	4b04      	ldr	r3, [pc, #16]	; (5c98 <_read+0x1c>)
    5c88:	4798      	blx	r3
    5c8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5c8e:	bd08      	pop	{r3, pc}
		return -1;
    5c90:	f04f 30ff 	mov.w	r0, #4294967295
    5c94:	4770      	bx	lr
    5c96:	bf00      	nop
    5c98:	00005ced 	.word	0x00005ced

00005c9c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    5c9c:	3801      	subs	r0, #1
    5c9e:	2802      	cmp	r0, #2
    5ca0:	d808      	bhi.n	5cb4 <_write+0x18>
{
    5ca2:	b508      	push	{r3, lr}
    5ca4:	460b      	mov	r3, r1
    5ca6:	4611      	mov	r1, r2
    5ca8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    5caa:	4b04      	ldr	r3, [pc, #16]	; (5cbc <_write+0x20>)
    5cac:	4798      	blx	r3
    5cae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5cb2:	bd08      	pop	{r3, pc}
		return -1;
    5cb4:	f04f 30ff 	mov.w	r0, #4294967295
    5cb8:	4770      	bx	lr
    5cba:	bf00      	nop
    5cbc:	00005d11 	.word	0x00005d11

00005cc0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    5cc0:	b570      	push	{r4, r5, r6, lr}
    5cc2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    5cc4:	4d06      	ldr	r5, [pc, #24]	; (5ce0 <stdio_io_init+0x20>)
    5cc6:	682b      	ldr	r3, [r5, #0]
    5cc8:	2100      	movs	r1, #0
    5cca:	6898      	ldr	r0, [r3, #8]
    5ccc:	4c05      	ldr	r4, [pc, #20]	; (5ce4 <stdio_io_init+0x24>)
    5cce:	47a0      	blx	r4
	setbuf(stdin, NULL);
    5cd0:	682b      	ldr	r3, [r5, #0]
    5cd2:	2100      	movs	r1, #0
    5cd4:	6858      	ldr	r0, [r3, #4]
    5cd6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    5cd8:	4b03      	ldr	r3, [pc, #12]	; (5ce8 <stdio_io_init+0x28>)
    5cda:	601e      	str	r6, [r3, #0]
    5cdc:	bd70      	pop	{r4, r5, r6, pc}
    5cde:	bf00      	nop
    5ce0:	200002f0 	.word	0x200002f0
    5ce4:	00006e6d 	.word	0x00006e6d
    5ce8:	20001250 	.word	0x20001250

00005cec <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    5cec:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5cee:	4b06      	ldr	r3, [pc, #24]	; (5d08 <stdio_io_read+0x1c>)
    5cf0:	681b      	ldr	r3, [r3, #0]
    5cf2:	b133      	cbz	r3, 5d02 <stdio_io_read+0x16>
    5cf4:	460a      	mov	r2, r1
    5cf6:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    5cf8:	b292      	uxth	r2, r2
    5cfa:	4618      	mov	r0, r3
    5cfc:	4b03      	ldr	r3, [pc, #12]	; (5d0c <stdio_io_read+0x20>)
    5cfe:	4798      	blx	r3
    5d00:	bd08      	pop	{r3, pc}
		return 0;
    5d02:	2000      	movs	r0, #0
}
    5d04:	bd08      	pop	{r3, pc}
    5d06:	bf00      	nop
    5d08:	20001250 	.word	0x20001250
    5d0c:	000024f1 	.word	0x000024f1

00005d10 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    5d10:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5d12:	4b06      	ldr	r3, [pc, #24]	; (5d2c <stdio_io_write+0x1c>)
    5d14:	681b      	ldr	r3, [r3, #0]
    5d16:	b133      	cbz	r3, 5d26 <stdio_io_write+0x16>
    5d18:	460a      	mov	r2, r1
    5d1a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    5d1c:	b292      	uxth	r2, r2
    5d1e:	4618      	mov	r0, r3
    5d20:	4b03      	ldr	r3, [pc, #12]	; (5d30 <stdio_io_write+0x20>)
    5d22:	4798      	blx	r3
    5d24:	bd08      	pop	{r3, pc}
		return 0;
    5d26:	2000      	movs	r0, #0
}
    5d28:	bd08      	pop	{r3, pc}
    5d2a:	bf00      	nop
    5d2c:	20001250 	.word	0x20001250
    5d30:	000024c1 	.word	0x000024c1

00005d34 <__aeabi_drsub>:
    5d34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    5d38:	e002      	b.n	5d40 <__adddf3>
    5d3a:	bf00      	nop

00005d3c <__aeabi_dsub>:
    5d3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00005d40 <__adddf3>:
    5d40:	b530      	push	{r4, r5, lr}
    5d42:	ea4f 0441 	mov.w	r4, r1, lsl #1
    5d46:	ea4f 0543 	mov.w	r5, r3, lsl #1
    5d4a:	ea94 0f05 	teq	r4, r5
    5d4e:	bf08      	it	eq
    5d50:	ea90 0f02 	teqeq	r0, r2
    5d54:	bf1f      	itttt	ne
    5d56:	ea54 0c00 	orrsne.w	ip, r4, r0
    5d5a:	ea55 0c02 	orrsne.w	ip, r5, r2
    5d5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    5d62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5d66:	f000 80e2 	beq.w	5f2e <__adddf3+0x1ee>
    5d6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    5d6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    5d72:	bfb8      	it	lt
    5d74:	426d      	neglt	r5, r5
    5d76:	dd0c      	ble.n	5d92 <__adddf3+0x52>
    5d78:	442c      	add	r4, r5
    5d7a:	ea80 0202 	eor.w	r2, r0, r2
    5d7e:	ea81 0303 	eor.w	r3, r1, r3
    5d82:	ea82 0000 	eor.w	r0, r2, r0
    5d86:	ea83 0101 	eor.w	r1, r3, r1
    5d8a:	ea80 0202 	eor.w	r2, r0, r2
    5d8e:	ea81 0303 	eor.w	r3, r1, r3
    5d92:	2d36      	cmp	r5, #54	; 0x36
    5d94:	bf88      	it	hi
    5d96:	bd30      	pophi	{r4, r5, pc}
    5d98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5d9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5da0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    5da4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    5da8:	d002      	beq.n	5db0 <__adddf3+0x70>
    5daa:	4240      	negs	r0, r0
    5dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5db0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    5db4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5db8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    5dbc:	d002      	beq.n	5dc4 <__adddf3+0x84>
    5dbe:	4252      	negs	r2, r2
    5dc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5dc4:	ea94 0f05 	teq	r4, r5
    5dc8:	f000 80a7 	beq.w	5f1a <__adddf3+0x1da>
    5dcc:	f1a4 0401 	sub.w	r4, r4, #1
    5dd0:	f1d5 0e20 	rsbs	lr, r5, #32
    5dd4:	db0d      	blt.n	5df2 <__adddf3+0xb2>
    5dd6:	fa02 fc0e 	lsl.w	ip, r2, lr
    5dda:	fa22 f205 	lsr.w	r2, r2, r5
    5dde:	1880      	adds	r0, r0, r2
    5de0:	f141 0100 	adc.w	r1, r1, #0
    5de4:	fa03 f20e 	lsl.w	r2, r3, lr
    5de8:	1880      	adds	r0, r0, r2
    5dea:	fa43 f305 	asr.w	r3, r3, r5
    5dee:	4159      	adcs	r1, r3
    5df0:	e00e      	b.n	5e10 <__adddf3+0xd0>
    5df2:	f1a5 0520 	sub.w	r5, r5, #32
    5df6:	f10e 0e20 	add.w	lr, lr, #32
    5dfa:	2a01      	cmp	r2, #1
    5dfc:	fa03 fc0e 	lsl.w	ip, r3, lr
    5e00:	bf28      	it	cs
    5e02:	f04c 0c02 	orrcs.w	ip, ip, #2
    5e06:	fa43 f305 	asr.w	r3, r3, r5
    5e0a:	18c0      	adds	r0, r0, r3
    5e0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    5e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5e14:	d507      	bpl.n	5e26 <__adddf3+0xe6>
    5e16:	f04f 0e00 	mov.w	lr, #0
    5e1a:	f1dc 0c00 	rsbs	ip, ip, #0
    5e1e:	eb7e 0000 	sbcs.w	r0, lr, r0
    5e22:	eb6e 0101 	sbc.w	r1, lr, r1
    5e26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    5e2a:	d31b      	bcc.n	5e64 <__adddf3+0x124>
    5e2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    5e30:	d30c      	bcc.n	5e4c <__adddf3+0x10c>
    5e32:	0849      	lsrs	r1, r1, #1
    5e34:	ea5f 0030 	movs.w	r0, r0, rrx
    5e38:	ea4f 0c3c 	mov.w	ip, ip, rrx
    5e3c:	f104 0401 	add.w	r4, r4, #1
    5e40:	ea4f 5244 	mov.w	r2, r4, lsl #21
    5e44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    5e48:	f080 809a 	bcs.w	5f80 <__adddf3+0x240>
    5e4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    5e50:	bf08      	it	eq
    5e52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5e56:	f150 0000 	adcs.w	r0, r0, #0
    5e5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5e5e:	ea41 0105 	orr.w	r1, r1, r5
    5e62:	bd30      	pop	{r4, r5, pc}
    5e64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    5e68:	4140      	adcs	r0, r0
    5e6a:	eb41 0101 	adc.w	r1, r1, r1
    5e6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5e72:	f1a4 0401 	sub.w	r4, r4, #1
    5e76:	d1e9      	bne.n	5e4c <__adddf3+0x10c>
    5e78:	f091 0f00 	teq	r1, #0
    5e7c:	bf04      	itt	eq
    5e7e:	4601      	moveq	r1, r0
    5e80:	2000      	moveq	r0, #0
    5e82:	fab1 f381 	clz	r3, r1
    5e86:	bf08      	it	eq
    5e88:	3320      	addeq	r3, #32
    5e8a:	f1a3 030b 	sub.w	r3, r3, #11
    5e8e:	f1b3 0220 	subs.w	r2, r3, #32
    5e92:	da0c      	bge.n	5eae <__adddf3+0x16e>
    5e94:	320c      	adds	r2, #12
    5e96:	dd08      	ble.n	5eaa <__adddf3+0x16a>
    5e98:	f102 0c14 	add.w	ip, r2, #20
    5e9c:	f1c2 020c 	rsb	r2, r2, #12
    5ea0:	fa01 f00c 	lsl.w	r0, r1, ip
    5ea4:	fa21 f102 	lsr.w	r1, r1, r2
    5ea8:	e00c      	b.n	5ec4 <__adddf3+0x184>
    5eaa:	f102 0214 	add.w	r2, r2, #20
    5eae:	bfd8      	it	le
    5eb0:	f1c2 0c20 	rsble	ip, r2, #32
    5eb4:	fa01 f102 	lsl.w	r1, r1, r2
    5eb8:	fa20 fc0c 	lsr.w	ip, r0, ip
    5ebc:	bfdc      	itt	le
    5ebe:	ea41 010c 	orrle.w	r1, r1, ip
    5ec2:	4090      	lslle	r0, r2
    5ec4:	1ae4      	subs	r4, r4, r3
    5ec6:	bfa2      	ittt	ge
    5ec8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    5ecc:	4329      	orrge	r1, r5
    5ece:	bd30      	popge	{r4, r5, pc}
    5ed0:	ea6f 0404 	mvn.w	r4, r4
    5ed4:	3c1f      	subs	r4, #31
    5ed6:	da1c      	bge.n	5f12 <__adddf3+0x1d2>
    5ed8:	340c      	adds	r4, #12
    5eda:	dc0e      	bgt.n	5efa <__adddf3+0x1ba>
    5edc:	f104 0414 	add.w	r4, r4, #20
    5ee0:	f1c4 0220 	rsb	r2, r4, #32
    5ee4:	fa20 f004 	lsr.w	r0, r0, r4
    5ee8:	fa01 f302 	lsl.w	r3, r1, r2
    5eec:	ea40 0003 	orr.w	r0, r0, r3
    5ef0:	fa21 f304 	lsr.w	r3, r1, r4
    5ef4:	ea45 0103 	orr.w	r1, r5, r3
    5ef8:	bd30      	pop	{r4, r5, pc}
    5efa:	f1c4 040c 	rsb	r4, r4, #12
    5efe:	f1c4 0220 	rsb	r2, r4, #32
    5f02:	fa20 f002 	lsr.w	r0, r0, r2
    5f06:	fa01 f304 	lsl.w	r3, r1, r4
    5f0a:	ea40 0003 	orr.w	r0, r0, r3
    5f0e:	4629      	mov	r1, r5
    5f10:	bd30      	pop	{r4, r5, pc}
    5f12:	fa21 f004 	lsr.w	r0, r1, r4
    5f16:	4629      	mov	r1, r5
    5f18:	bd30      	pop	{r4, r5, pc}
    5f1a:	f094 0f00 	teq	r4, #0
    5f1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    5f22:	bf06      	itte	eq
    5f24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    5f28:	3401      	addeq	r4, #1
    5f2a:	3d01      	subne	r5, #1
    5f2c:	e74e      	b.n	5dcc <__adddf3+0x8c>
    5f2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5f32:	bf18      	it	ne
    5f34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5f38:	d029      	beq.n	5f8e <__adddf3+0x24e>
    5f3a:	ea94 0f05 	teq	r4, r5
    5f3e:	bf08      	it	eq
    5f40:	ea90 0f02 	teqeq	r0, r2
    5f44:	d005      	beq.n	5f52 <__adddf3+0x212>
    5f46:	ea54 0c00 	orrs.w	ip, r4, r0
    5f4a:	bf04      	itt	eq
    5f4c:	4619      	moveq	r1, r3
    5f4e:	4610      	moveq	r0, r2
    5f50:	bd30      	pop	{r4, r5, pc}
    5f52:	ea91 0f03 	teq	r1, r3
    5f56:	bf1e      	ittt	ne
    5f58:	2100      	movne	r1, #0
    5f5a:	2000      	movne	r0, #0
    5f5c:	bd30      	popne	{r4, r5, pc}
    5f5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    5f62:	d105      	bne.n	5f70 <__adddf3+0x230>
    5f64:	0040      	lsls	r0, r0, #1
    5f66:	4149      	adcs	r1, r1
    5f68:	bf28      	it	cs
    5f6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    5f6e:	bd30      	pop	{r4, r5, pc}
    5f70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    5f74:	bf3c      	itt	cc
    5f76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    5f7a:	bd30      	popcc	{r4, r5, pc}
    5f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5f80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    5f84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5f88:	f04f 0000 	mov.w	r0, #0
    5f8c:	bd30      	pop	{r4, r5, pc}
    5f8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5f92:	bf1a      	itte	ne
    5f94:	4619      	movne	r1, r3
    5f96:	4610      	movne	r0, r2
    5f98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    5f9c:	bf1c      	itt	ne
    5f9e:	460b      	movne	r3, r1
    5fa0:	4602      	movne	r2, r0
    5fa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    5fa6:	bf06      	itte	eq
    5fa8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    5fac:	ea91 0f03 	teqeq	r1, r3
    5fb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    5fb4:	bd30      	pop	{r4, r5, pc}
    5fb6:	bf00      	nop

00005fb8 <__aeabi_ui2d>:
    5fb8:	f090 0f00 	teq	r0, #0
    5fbc:	bf04      	itt	eq
    5fbe:	2100      	moveq	r1, #0
    5fc0:	4770      	bxeq	lr
    5fc2:	b530      	push	{r4, r5, lr}
    5fc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5fc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5fcc:	f04f 0500 	mov.w	r5, #0
    5fd0:	f04f 0100 	mov.w	r1, #0
    5fd4:	e750      	b.n	5e78 <__adddf3+0x138>
    5fd6:	bf00      	nop

00005fd8 <__aeabi_i2d>:
    5fd8:	f090 0f00 	teq	r0, #0
    5fdc:	bf04      	itt	eq
    5fde:	2100      	moveq	r1, #0
    5fe0:	4770      	bxeq	lr
    5fe2:	b530      	push	{r4, r5, lr}
    5fe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5fe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5fec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    5ff0:	bf48      	it	mi
    5ff2:	4240      	negmi	r0, r0
    5ff4:	f04f 0100 	mov.w	r1, #0
    5ff8:	e73e      	b.n	5e78 <__adddf3+0x138>
    5ffa:	bf00      	nop

00005ffc <__aeabi_f2d>:
    5ffc:	0042      	lsls	r2, r0, #1
    5ffe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    6002:	ea4f 0131 	mov.w	r1, r1, rrx
    6006:	ea4f 7002 	mov.w	r0, r2, lsl #28
    600a:	bf1f      	itttt	ne
    600c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    6010:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6014:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    6018:	4770      	bxne	lr
    601a:	f092 0f00 	teq	r2, #0
    601e:	bf14      	ite	ne
    6020:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6024:	4770      	bxeq	lr
    6026:	b530      	push	{r4, r5, lr}
    6028:	f44f 7460 	mov.w	r4, #896	; 0x380
    602c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6034:	e720      	b.n	5e78 <__adddf3+0x138>
    6036:	bf00      	nop

00006038 <__aeabi_ul2d>:
    6038:	ea50 0201 	orrs.w	r2, r0, r1
    603c:	bf08      	it	eq
    603e:	4770      	bxeq	lr
    6040:	b530      	push	{r4, r5, lr}
    6042:	f04f 0500 	mov.w	r5, #0
    6046:	e00a      	b.n	605e <__aeabi_l2d+0x16>

00006048 <__aeabi_l2d>:
    6048:	ea50 0201 	orrs.w	r2, r0, r1
    604c:	bf08      	it	eq
    604e:	4770      	bxeq	lr
    6050:	b530      	push	{r4, r5, lr}
    6052:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    6056:	d502      	bpl.n	605e <__aeabi_l2d+0x16>
    6058:	4240      	negs	r0, r0
    605a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    605e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6062:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6066:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    606a:	f43f aedc 	beq.w	5e26 <__adddf3+0xe6>
    606e:	f04f 0203 	mov.w	r2, #3
    6072:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6076:	bf18      	it	ne
    6078:	3203      	addne	r2, #3
    607a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    607e:	bf18      	it	ne
    6080:	3203      	addne	r2, #3
    6082:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    6086:	f1c2 0320 	rsb	r3, r2, #32
    608a:	fa00 fc03 	lsl.w	ip, r0, r3
    608e:	fa20 f002 	lsr.w	r0, r0, r2
    6092:	fa01 fe03 	lsl.w	lr, r1, r3
    6096:	ea40 000e 	orr.w	r0, r0, lr
    609a:	fa21 f102 	lsr.w	r1, r1, r2
    609e:	4414      	add	r4, r2
    60a0:	e6c1      	b.n	5e26 <__adddf3+0xe6>
    60a2:	bf00      	nop

000060a4 <__aeabi_dmul>:
    60a4:	b570      	push	{r4, r5, r6, lr}
    60a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    60aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    60ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    60b2:	bf1d      	ittte	ne
    60b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    60b8:	ea94 0f0c 	teqne	r4, ip
    60bc:	ea95 0f0c 	teqne	r5, ip
    60c0:	f000 f8de 	bleq	6280 <__aeabi_dmul+0x1dc>
    60c4:	442c      	add	r4, r5
    60c6:	ea81 0603 	eor.w	r6, r1, r3
    60ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    60ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    60d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    60d6:	bf18      	it	ne
    60d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    60dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    60e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    60e4:	d038      	beq.n	6158 <__aeabi_dmul+0xb4>
    60e6:	fba0 ce02 	umull	ip, lr, r0, r2
    60ea:	f04f 0500 	mov.w	r5, #0
    60ee:	fbe1 e502 	umlal	lr, r5, r1, r2
    60f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    60f6:	fbe0 e503 	umlal	lr, r5, r0, r3
    60fa:	f04f 0600 	mov.w	r6, #0
    60fe:	fbe1 5603 	umlal	r5, r6, r1, r3
    6102:	f09c 0f00 	teq	ip, #0
    6106:	bf18      	it	ne
    6108:	f04e 0e01 	orrne.w	lr, lr, #1
    610c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    6110:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6114:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    6118:	d204      	bcs.n	6124 <__aeabi_dmul+0x80>
    611a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    611e:	416d      	adcs	r5, r5
    6120:	eb46 0606 	adc.w	r6, r6, r6
    6124:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    6128:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    612c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    6130:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    6134:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    6138:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    613c:	bf88      	it	hi
    613e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    6142:	d81e      	bhi.n	6182 <__aeabi_dmul+0xde>
    6144:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    6148:	bf08      	it	eq
    614a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    614e:	f150 0000 	adcs.w	r0, r0, #0
    6152:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6156:	bd70      	pop	{r4, r5, r6, pc}
    6158:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    615c:	ea46 0101 	orr.w	r1, r6, r1
    6160:	ea40 0002 	orr.w	r0, r0, r2
    6164:	ea81 0103 	eor.w	r1, r1, r3
    6168:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    616c:	bfc2      	ittt	gt
    616e:	ebd4 050c 	rsbsgt	r5, r4, ip
    6172:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6176:	bd70      	popgt	{r4, r5, r6, pc}
    6178:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    617c:	f04f 0e00 	mov.w	lr, #0
    6180:	3c01      	subs	r4, #1
    6182:	f300 80ab 	bgt.w	62dc <__aeabi_dmul+0x238>
    6186:	f114 0f36 	cmn.w	r4, #54	; 0x36
    618a:	bfde      	ittt	le
    618c:	2000      	movle	r0, #0
    618e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    6192:	bd70      	pople	{r4, r5, r6, pc}
    6194:	f1c4 0400 	rsb	r4, r4, #0
    6198:	3c20      	subs	r4, #32
    619a:	da35      	bge.n	6208 <__aeabi_dmul+0x164>
    619c:	340c      	adds	r4, #12
    619e:	dc1b      	bgt.n	61d8 <__aeabi_dmul+0x134>
    61a0:	f104 0414 	add.w	r4, r4, #20
    61a4:	f1c4 0520 	rsb	r5, r4, #32
    61a8:	fa00 f305 	lsl.w	r3, r0, r5
    61ac:	fa20 f004 	lsr.w	r0, r0, r4
    61b0:	fa01 f205 	lsl.w	r2, r1, r5
    61b4:	ea40 0002 	orr.w	r0, r0, r2
    61b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    61bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    61c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    61c4:	fa21 f604 	lsr.w	r6, r1, r4
    61c8:	eb42 0106 	adc.w	r1, r2, r6
    61cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    61d0:	bf08      	it	eq
    61d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    61d6:	bd70      	pop	{r4, r5, r6, pc}
    61d8:	f1c4 040c 	rsb	r4, r4, #12
    61dc:	f1c4 0520 	rsb	r5, r4, #32
    61e0:	fa00 f304 	lsl.w	r3, r0, r4
    61e4:	fa20 f005 	lsr.w	r0, r0, r5
    61e8:	fa01 f204 	lsl.w	r2, r1, r4
    61ec:	ea40 0002 	orr.w	r0, r0, r2
    61f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    61f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    61f8:	f141 0100 	adc.w	r1, r1, #0
    61fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6200:	bf08      	it	eq
    6202:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    6206:	bd70      	pop	{r4, r5, r6, pc}
    6208:	f1c4 0520 	rsb	r5, r4, #32
    620c:	fa00 f205 	lsl.w	r2, r0, r5
    6210:	ea4e 0e02 	orr.w	lr, lr, r2
    6214:	fa20 f304 	lsr.w	r3, r0, r4
    6218:	fa01 f205 	lsl.w	r2, r1, r5
    621c:	ea43 0302 	orr.w	r3, r3, r2
    6220:	fa21 f004 	lsr.w	r0, r1, r4
    6224:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6228:	fa21 f204 	lsr.w	r2, r1, r4
    622c:	ea20 0002 	bic.w	r0, r0, r2
    6230:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    6234:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6238:	bf08      	it	eq
    623a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    623e:	bd70      	pop	{r4, r5, r6, pc}
    6240:	f094 0f00 	teq	r4, #0
    6244:	d10f      	bne.n	6266 <__aeabi_dmul+0x1c2>
    6246:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    624a:	0040      	lsls	r0, r0, #1
    624c:	eb41 0101 	adc.w	r1, r1, r1
    6250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6254:	bf08      	it	eq
    6256:	3c01      	subeq	r4, #1
    6258:	d0f7      	beq.n	624a <__aeabi_dmul+0x1a6>
    625a:	ea41 0106 	orr.w	r1, r1, r6
    625e:	f095 0f00 	teq	r5, #0
    6262:	bf18      	it	ne
    6264:	4770      	bxne	lr
    6266:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    626a:	0052      	lsls	r2, r2, #1
    626c:	eb43 0303 	adc.w	r3, r3, r3
    6270:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    6274:	bf08      	it	eq
    6276:	3d01      	subeq	r5, #1
    6278:	d0f7      	beq.n	626a <__aeabi_dmul+0x1c6>
    627a:	ea43 0306 	orr.w	r3, r3, r6
    627e:	4770      	bx	lr
    6280:	ea94 0f0c 	teq	r4, ip
    6284:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    6288:	bf18      	it	ne
    628a:	ea95 0f0c 	teqne	r5, ip
    628e:	d00c      	beq.n	62aa <__aeabi_dmul+0x206>
    6290:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6294:	bf18      	it	ne
    6296:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    629a:	d1d1      	bne.n	6240 <__aeabi_dmul+0x19c>
    629c:	ea81 0103 	eor.w	r1, r1, r3
    62a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    62a4:	f04f 0000 	mov.w	r0, #0
    62a8:	bd70      	pop	{r4, r5, r6, pc}
    62aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    62ae:	bf06      	itte	eq
    62b0:	4610      	moveq	r0, r2
    62b2:	4619      	moveq	r1, r3
    62b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    62b8:	d019      	beq.n	62ee <__aeabi_dmul+0x24a>
    62ba:	ea94 0f0c 	teq	r4, ip
    62be:	d102      	bne.n	62c6 <__aeabi_dmul+0x222>
    62c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    62c4:	d113      	bne.n	62ee <__aeabi_dmul+0x24a>
    62c6:	ea95 0f0c 	teq	r5, ip
    62ca:	d105      	bne.n	62d8 <__aeabi_dmul+0x234>
    62cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    62d0:	bf1c      	itt	ne
    62d2:	4610      	movne	r0, r2
    62d4:	4619      	movne	r1, r3
    62d6:	d10a      	bne.n	62ee <__aeabi_dmul+0x24a>
    62d8:	ea81 0103 	eor.w	r1, r1, r3
    62dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    62e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    62e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    62e8:	f04f 0000 	mov.w	r0, #0
    62ec:	bd70      	pop	{r4, r5, r6, pc}
    62ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    62f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    62f6:	bd70      	pop	{r4, r5, r6, pc}

000062f8 <__aeabi_ddiv>:
    62f8:	b570      	push	{r4, r5, r6, lr}
    62fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    62fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    6302:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6306:	bf1d      	ittte	ne
    6308:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    630c:	ea94 0f0c 	teqne	r4, ip
    6310:	ea95 0f0c 	teqne	r5, ip
    6314:	f000 f8a7 	bleq	6466 <__aeabi_ddiv+0x16e>
    6318:	eba4 0405 	sub.w	r4, r4, r5
    631c:	ea81 0e03 	eor.w	lr, r1, r3
    6320:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    6324:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6328:	f000 8088 	beq.w	643c <__aeabi_ddiv+0x144>
    632c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6330:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    6334:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    6338:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    633c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    6340:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    6344:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    6348:	ea4f 2600 	mov.w	r6, r0, lsl #8
    634c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    6350:	429d      	cmp	r5, r3
    6352:	bf08      	it	eq
    6354:	4296      	cmpeq	r6, r2
    6356:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    635a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    635e:	d202      	bcs.n	6366 <__aeabi_ddiv+0x6e>
    6360:	085b      	lsrs	r3, r3, #1
    6362:	ea4f 0232 	mov.w	r2, r2, rrx
    6366:	1ab6      	subs	r6, r6, r2
    6368:	eb65 0503 	sbc.w	r5, r5, r3
    636c:	085b      	lsrs	r3, r3, #1
    636e:	ea4f 0232 	mov.w	r2, r2, rrx
    6372:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6376:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    637a:	ebb6 0e02 	subs.w	lr, r6, r2
    637e:	eb75 0e03 	sbcs.w	lr, r5, r3
    6382:	bf22      	ittt	cs
    6384:	1ab6      	subcs	r6, r6, r2
    6386:	4675      	movcs	r5, lr
    6388:	ea40 000c 	orrcs.w	r0, r0, ip
    638c:	085b      	lsrs	r3, r3, #1
    638e:	ea4f 0232 	mov.w	r2, r2, rrx
    6392:	ebb6 0e02 	subs.w	lr, r6, r2
    6396:	eb75 0e03 	sbcs.w	lr, r5, r3
    639a:	bf22      	ittt	cs
    639c:	1ab6      	subcs	r6, r6, r2
    639e:	4675      	movcs	r5, lr
    63a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    63a4:	085b      	lsrs	r3, r3, #1
    63a6:	ea4f 0232 	mov.w	r2, r2, rrx
    63aa:	ebb6 0e02 	subs.w	lr, r6, r2
    63ae:	eb75 0e03 	sbcs.w	lr, r5, r3
    63b2:	bf22      	ittt	cs
    63b4:	1ab6      	subcs	r6, r6, r2
    63b6:	4675      	movcs	r5, lr
    63b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    63bc:	085b      	lsrs	r3, r3, #1
    63be:	ea4f 0232 	mov.w	r2, r2, rrx
    63c2:	ebb6 0e02 	subs.w	lr, r6, r2
    63c6:	eb75 0e03 	sbcs.w	lr, r5, r3
    63ca:	bf22      	ittt	cs
    63cc:	1ab6      	subcs	r6, r6, r2
    63ce:	4675      	movcs	r5, lr
    63d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    63d4:	ea55 0e06 	orrs.w	lr, r5, r6
    63d8:	d018      	beq.n	640c <__aeabi_ddiv+0x114>
    63da:	ea4f 1505 	mov.w	r5, r5, lsl #4
    63de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    63e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    63e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    63ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    63ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    63f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    63f6:	d1c0      	bne.n	637a <__aeabi_ddiv+0x82>
    63f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    63fc:	d10b      	bne.n	6416 <__aeabi_ddiv+0x11e>
    63fe:	ea41 0100 	orr.w	r1, r1, r0
    6402:	f04f 0000 	mov.w	r0, #0
    6406:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    640a:	e7b6      	b.n	637a <__aeabi_ddiv+0x82>
    640c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6410:	bf04      	itt	eq
    6412:	4301      	orreq	r1, r0
    6414:	2000      	moveq	r0, #0
    6416:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    641a:	bf88      	it	hi
    641c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    6420:	f63f aeaf 	bhi.w	6182 <__aeabi_dmul+0xde>
    6424:	ebb5 0c03 	subs.w	ip, r5, r3
    6428:	bf04      	itt	eq
    642a:	ebb6 0c02 	subseq.w	ip, r6, r2
    642e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6432:	f150 0000 	adcs.w	r0, r0, #0
    6436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    643a:	bd70      	pop	{r4, r5, r6, pc}
    643c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    6440:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    6444:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    6448:	bfc2      	ittt	gt
    644a:	ebd4 050c 	rsbsgt	r5, r4, ip
    644e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6452:	bd70      	popgt	{r4, r5, r6, pc}
    6454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6458:	f04f 0e00 	mov.w	lr, #0
    645c:	3c01      	subs	r4, #1
    645e:	e690      	b.n	6182 <__aeabi_dmul+0xde>
    6460:	ea45 0e06 	orr.w	lr, r5, r6
    6464:	e68d      	b.n	6182 <__aeabi_dmul+0xde>
    6466:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    646a:	ea94 0f0c 	teq	r4, ip
    646e:	bf08      	it	eq
    6470:	ea95 0f0c 	teqeq	r5, ip
    6474:	f43f af3b 	beq.w	62ee <__aeabi_dmul+0x24a>
    6478:	ea94 0f0c 	teq	r4, ip
    647c:	d10a      	bne.n	6494 <__aeabi_ddiv+0x19c>
    647e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6482:	f47f af34 	bne.w	62ee <__aeabi_dmul+0x24a>
    6486:	ea95 0f0c 	teq	r5, ip
    648a:	f47f af25 	bne.w	62d8 <__aeabi_dmul+0x234>
    648e:	4610      	mov	r0, r2
    6490:	4619      	mov	r1, r3
    6492:	e72c      	b.n	62ee <__aeabi_dmul+0x24a>
    6494:	ea95 0f0c 	teq	r5, ip
    6498:	d106      	bne.n	64a8 <__aeabi_ddiv+0x1b0>
    649a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    649e:	f43f aefd 	beq.w	629c <__aeabi_dmul+0x1f8>
    64a2:	4610      	mov	r0, r2
    64a4:	4619      	mov	r1, r3
    64a6:	e722      	b.n	62ee <__aeabi_dmul+0x24a>
    64a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    64ac:	bf18      	it	ne
    64ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    64b2:	f47f aec5 	bne.w	6240 <__aeabi_dmul+0x19c>
    64b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    64ba:	f47f af0d 	bne.w	62d8 <__aeabi_dmul+0x234>
    64be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    64c2:	f47f aeeb 	bne.w	629c <__aeabi_dmul+0x1f8>
    64c6:	e712      	b.n	62ee <__aeabi_dmul+0x24a>

000064c8 <__aeabi_d2uiz>:
    64c8:	004a      	lsls	r2, r1, #1
    64ca:	d211      	bcs.n	64f0 <__aeabi_d2uiz+0x28>
    64cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    64d0:	d211      	bcs.n	64f6 <__aeabi_d2uiz+0x2e>
    64d2:	d50d      	bpl.n	64f0 <__aeabi_d2uiz+0x28>
    64d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    64d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    64dc:	d40e      	bmi.n	64fc <__aeabi_d2uiz+0x34>
    64de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    64e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    64e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    64ea:	fa23 f002 	lsr.w	r0, r3, r2
    64ee:	4770      	bx	lr
    64f0:	f04f 0000 	mov.w	r0, #0
    64f4:	4770      	bx	lr
    64f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    64fa:	d102      	bne.n	6502 <__aeabi_d2uiz+0x3a>
    64fc:	f04f 30ff 	mov.w	r0, #4294967295
    6500:	4770      	bx	lr
    6502:	f04f 0000 	mov.w	r0, #0
    6506:	4770      	bx	lr

00006508 <__aeabi_uldivmod>:
    6508:	b953      	cbnz	r3, 6520 <__aeabi_uldivmod+0x18>
    650a:	b94a      	cbnz	r2, 6520 <__aeabi_uldivmod+0x18>
    650c:	2900      	cmp	r1, #0
    650e:	bf08      	it	eq
    6510:	2800      	cmpeq	r0, #0
    6512:	bf1c      	itt	ne
    6514:	f04f 31ff 	movne.w	r1, #4294967295
    6518:	f04f 30ff 	movne.w	r0, #4294967295
    651c:	f000 b97a 	b.w	6814 <__aeabi_idiv0>
    6520:	f1ad 0c08 	sub.w	ip, sp, #8
    6524:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6528:	f000 f806 	bl	6538 <__udivmoddi4>
    652c:	f8dd e004 	ldr.w	lr, [sp, #4]
    6530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6534:	b004      	add	sp, #16
    6536:	4770      	bx	lr

00006538 <__udivmoddi4>:
    6538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    653c:	468c      	mov	ip, r1
    653e:	460d      	mov	r5, r1
    6540:	4604      	mov	r4, r0
    6542:	9e08      	ldr	r6, [sp, #32]
    6544:	2b00      	cmp	r3, #0
    6546:	d151      	bne.n	65ec <__udivmoddi4+0xb4>
    6548:	428a      	cmp	r2, r1
    654a:	4617      	mov	r7, r2
    654c:	d96d      	bls.n	662a <__udivmoddi4+0xf2>
    654e:	fab2 fe82 	clz	lr, r2
    6552:	f1be 0f00 	cmp.w	lr, #0
    6556:	d00b      	beq.n	6570 <__udivmoddi4+0x38>
    6558:	f1ce 0c20 	rsb	ip, lr, #32
    655c:	fa01 f50e 	lsl.w	r5, r1, lr
    6560:	fa20 fc0c 	lsr.w	ip, r0, ip
    6564:	fa02 f70e 	lsl.w	r7, r2, lr
    6568:	ea4c 0c05 	orr.w	ip, ip, r5
    656c:	fa00 f40e 	lsl.w	r4, r0, lr
    6570:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    6574:	0c25      	lsrs	r5, r4, #16
    6576:	fbbc f8fa 	udiv	r8, ip, sl
    657a:	fa1f f987 	uxth.w	r9, r7
    657e:	fb0a cc18 	mls	ip, sl, r8, ip
    6582:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    6586:	fb08 f309 	mul.w	r3, r8, r9
    658a:	42ab      	cmp	r3, r5
    658c:	d90a      	bls.n	65a4 <__udivmoddi4+0x6c>
    658e:	19ed      	adds	r5, r5, r7
    6590:	f108 32ff 	add.w	r2, r8, #4294967295
    6594:	f080 8123 	bcs.w	67de <__udivmoddi4+0x2a6>
    6598:	42ab      	cmp	r3, r5
    659a:	f240 8120 	bls.w	67de <__udivmoddi4+0x2a6>
    659e:	f1a8 0802 	sub.w	r8, r8, #2
    65a2:	443d      	add	r5, r7
    65a4:	1aed      	subs	r5, r5, r3
    65a6:	b2a4      	uxth	r4, r4
    65a8:	fbb5 f0fa 	udiv	r0, r5, sl
    65ac:	fb0a 5510 	mls	r5, sl, r0, r5
    65b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    65b4:	fb00 f909 	mul.w	r9, r0, r9
    65b8:	45a1      	cmp	r9, r4
    65ba:	d909      	bls.n	65d0 <__udivmoddi4+0x98>
    65bc:	19e4      	adds	r4, r4, r7
    65be:	f100 33ff 	add.w	r3, r0, #4294967295
    65c2:	f080 810a 	bcs.w	67da <__udivmoddi4+0x2a2>
    65c6:	45a1      	cmp	r9, r4
    65c8:	f240 8107 	bls.w	67da <__udivmoddi4+0x2a2>
    65cc:	3802      	subs	r0, #2
    65ce:	443c      	add	r4, r7
    65d0:	eba4 0409 	sub.w	r4, r4, r9
    65d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    65d8:	2100      	movs	r1, #0
    65da:	2e00      	cmp	r6, #0
    65dc:	d061      	beq.n	66a2 <__udivmoddi4+0x16a>
    65de:	fa24 f40e 	lsr.w	r4, r4, lr
    65e2:	2300      	movs	r3, #0
    65e4:	6034      	str	r4, [r6, #0]
    65e6:	6073      	str	r3, [r6, #4]
    65e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65ec:	428b      	cmp	r3, r1
    65ee:	d907      	bls.n	6600 <__udivmoddi4+0xc8>
    65f0:	2e00      	cmp	r6, #0
    65f2:	d054      	beq.n	669e <__udivmoddi4+0x166>
    65f4:	2100      	movs	r1, #0
    65f6:	e886 0021 	stmia.w	r6, {r0, r5}
    65fa:	4608      	mov	r0, r1
    65fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6600:	fab3 f183 	clz	r1, r3
    6604:	2900      	cmp	r1, #0
    6606:	f040 808e 	bne.w	6726 <__udivmoddi4+0x1ee>
    660a:	42ab      	cmp	r3, r5
    660c:	d302      	bcc.n	6614 <__udivmoddi4+0xdc>
    660e:	4282      	cmp	r2, r0
    6610:	f200 80fa 	bhi.w	6808 <__udivmoddi4+0x2d0>
    6614:	1a84      	subs	r4, r0, r2
    6616:	eb65 0503 	sbc.w	r5, r5, r3
    661a:	2001      	movs	r0, #1
    661c:	46ac      	mov	ip, r5
    661e:	2e00      	cmp	r6, #0
    6620:	d03f      	beq.n	66a2 <__udivmoddi4+0x16a>
    6622:	e886 1010 	stmia.w	r6, {r4, ip}
    6626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    662a:	b912      	cbnz	r2, 6632 <__udivmoddi4+0xfa>
    662c:	2701      	movs	r7, #1
    662e:	fbb7 f7f2 	udiv	r7, r7, r2
    6632:	fab7 fe87 	clz	lr, r7
    6636:	f1be 0f00 	cmp.w	lr, #0
    663a:	d134      	bne.n	66a6 <__udivmoddi4+0x16e>
    663c:	1beb      	subs	r3, r5, r7
    663e:	0c3a      	lsrs	r2, r7, #16
    6640:	fa1f fc87 	uxth.w	ip, r7
    6644:	2101      	movs	r1, #1
    6646:	fbb3 f8f2 	udiv	r8, r3, r2
    664a:	0c25      	lsrs	r5, r4, #16
    664c:	fb02 3318 	mls	r3, r2, r8, r3
    6650:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    6654:	fb0c f308 	mul.w	r3, ip, r8
    6658:	42ab      	cmp	r3, r5
    665a:	d907      	bls.n	666c <__udivmoddi4+0x134>
    665c:	19ed      	adds	r5, r5, r7
    665e:	f108 30ff 	add.w	r0, r8, #4294967295
    6662:	d202      	bcs.n	666a <__udivmoddi4+0x132>
    6664:	42ab      	cmp	r3, r5
    6666:	f200 80d1 	bhi.w	680c <__udivmoddi4+0x2d4>
    666a:	4680      	mov	r8, r0
    666c:	1aed      	subs	r5, r5, r3
    666e:	b2a3      	uxth	r3, r4
    6670:	fbb5 f0f2 	udiv	r0, r5, r2
    6674:	fb02 5510 	mls	r5, r2, r0, r5
    6678:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    667c:	fb0c fc00 	mul.w	ip, ip, r0
    6680:	45a4      	cmp	ip, r4
    6682:	d907      	bls.n	6694 <__udivmoddi4+0x15c>
    6684:	19e4      	adds	r4, r4, r7
    6686:	f100 33ff 	add.w	r3, r0, #4294967295
    668a:	d202      	bcs.n	6692 <__udivmoddi4+0x15a>
    668c:	45a4      	cmp	ip, r4
    668e:	f200 80b8 	bhi.w	6802 <__udivmoddi4+0x2ca>
    6692:	4618      	mov	r0, r3
    6694:	eba4 040c 	sub.w	r4, r4, ip
    6698:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    669c:	e79d      	b.n	65da <__udivmoddi4+0xa2>
    669e:	4631      	mov	r1, r6
    66a0:	4630      	mov	r0, r6
    66a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66a6:	f1ce 0420 	rsb	r4, lr, #32
    66aa:	fa05 f30e 	lsl.w	r3, r5, lr
    66ae:	fa07 f70e 	lsl.w	r7, r7, lr
    66b2:	fa20 f804 	lsr.w	r8, r0, r4
    66b6:	0c3a      	lsrs	r2, r7, #16
    66b8:	fa25 f404 	lsr.w	r4, r5, r4
    66bc:	ea48 0803 	orr.w	r8, r8, r3
    66c0:	fbb4 f1f2 	udiv	r1, r4, r2
    66c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
    66c8:	fb02 4411 	mls	r4, r2, r1, r4
    66cc:	fa1f fc87 	uxth.w	ip, r7
    66d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    66d4:	fb01 f30c 	mul.w	r3, r1, ip
    66d8:	42ab      	cmp	r3, r5
    66da:	fa00 f40e 	lsl.w	r4, r0, lr
    66de:	d909      	bls.n	66f4 <__udivmoddi4+0x1bc>
    66e0:	19ed      	adds	r5, r5, r7
    66e2:	f101 30ff 	add.w	r0, r1, #4294967295
    66e6:	f080 808a 	bcs.w	67fe <__udivmoddi4+0x2c6>
    66ea:	42ab      	cmp	r3, r5
    66ec:	f240 8087 	bls.w	67fe <__udivmoddi4+0x2c6>
    66f0:	3902      	subs	r1, #2
    66f2:	443d      	add	r5, r7
    66f4:	1aeb      	subs	r3, r5, r3
    66f6:	fa1f f588 	uxth.w	r5, r8
    66fa:	fbb3 f0f2 	udiv	r0, r3, r2
    66fe:	fb02 3310 	mls	r3, r2, r0, r3
    6702:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    6706:	fb00 f30c 	mul.w	r3, r0, ip
    670a:	42ab      	cmp	r3, r5
    670c:	d907      	bls.n	671e <__udivmoddi4+0x1e6>
    670e:	19ed      	adds	r5, r5, r7
    6710:	f100 38ff 	add.w	r8, r0, #4294967295
    6714:	d26f      	bcs.n	67f6 <__udivmoddi4+0x2be>
    6716:	42ab      	cmp	r3, r5
    6718:	d96d      	bls.n	67f6 <__udivmoddi4+0x2be>
    671a:	3802      	subs	r0, #2
    671c:	443d      	add	r5, r7
    671e:	1aeb      	subs	r3, r5, r3
    6720:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    6724:	e78f      	b.n	6646 <__udivmoddi4+0x10e>
    6726:	f1c1 0720 	rsb	r7, r1, #32
    672a:	fa22 f807 	lsr.w	r8, r2, r7
    672e:	408b      	lsls	r3, r1
    6730:	fa05 f401 	lsl.w	r4, r5, r1
    6734:	ea48 0303 	orr.w	r3, r8, r3
    6738:	fa20 fe07 	lsr.w	lr, r0, r7
    673c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6740:	40fd      	lsrs	r5, r7
    6742:	ea4e 0e04 	orr.w	lr, lr, r4
    6746:	fbb5 f9fc 	udiv	r9, r5, ip
    674a:	ea4f 441e 	mov.w	r4, lr, lsr #16
    674e:	fb0c 5519 	mls	r5, ip, r9, r5
    6752:	fa1f f883 	uxth.w	r8, r3
    6756:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    675a:	fb09 f408 	mul.w	r4, r9, r8
    675e:	42ac      	cmp	r4, r5
    6760:	fa02 f201 	lsl.w	r2, r2, r1
    6764:	fa00 fa01 	lsl.w	sl, r0, r1
    6768:	d908      	bls.n	677c <__udivmoddi4+0x244>
    676a:	18ed      	adds	r5, r5, r3
    676c:	f109 30ff 	add.w	r0, r9, #4294967295
    6770:	d243      	bcs.n	67fa <__udivmoddi4+0x2c2>
    6772:	42ac      	cmp	r4, r5
    6774:	d941      	bls.n	67fa <__udivmoddi4+0x2c2>
    6776:	f1a9 0902 	sub.w	r9, r9, #2
    677a:	441d      	add	r5, r3
    677c:	1b2d      	subs	r5, r5, r4
    677e:	fa1f fe8e 	uxth.w	lr, lr
    6782:	fbb5 f0fc 	udiv	r0, r5, ip
    6786:	fb0c 5510 	mls	r5, ip, r0, r5
    678a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    678e:	fb00 f808 	mul.w	r8, r0, r8
    6792:	45a0      	cmp	r8, r4
    6794:	d907      	bls.n	67a6 <__udivmoddi4+0x26e>
    6796:	18e4      	adds	r4, r4, r3
    6798:	f100 35ff 	add.w	r5, r0, #4294967295
    679c:	d229      	bcs.n	67f2 <__udivmoddi4+0x2ba>
    679e:	45a0      	cmp	r8, r4
    67a0:	d927      	bls.n	67f2 <__udivmoddi4+0x2ba>
    67a2:	3802      	subs	r0, #2
    67a4:	441c      	add	r4, r3
    67a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    67aa:	eba4 0408 	sub.w	r4, r4, r8
    67ae:	fba0 8902 	umull	r8, r9, r0, r2
    67b2:	454c      	cmp	r4, r9
    67b4:	46c6      	mov	lr, r8
    67b6:	464d      	mov	r5, r9
    67b8:	d315      	bcc.n	67e6 <__udivmoddi4+0x2ae>
    67ba:	d012      	beq.n	67e2 <__udivmoddi4+0x2aa>
    67bc:	b156      	cbz	r6, 67d4 <__udivmoddi4+0x29c>
    67be:	ebba 030e 	subs.w	r3, sl, lr
    67c2:	eb64 0405 	sbc.w	r4, r4, r5
    67c6:	fa04 f707 	lsl.w	r7, r4, r7
    67ca:	40cb      	lsrs	r3, r1
    67cc:	431f      	orrs	r7, r3
    67ce:	40cc      	lsrs	r4, r1
    67d0:	6037      	str	r7, [r6, #0]
    67d2:	6074      	str	r4, [r6, #4]
    67d4:	2100      	movs	r1, #0
    67d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67da:	4618      	mov	r0, r3
    67dc:	e6f8      	b.n	65d0 <__udivmoddi4+0x98>
    67de:	4690      	mov	r8, r2
    67e0:	e6e0      	b.n	65a4 <__udivmoddi4+0x6c>
    67e2:	45c2      	cmp	sl, r8
    67e4:	d2ea      	bcs.n	67bc <__udivmoddi4+0x284>
    67e6:	ebb8 0e02 	subs.w	lr, r8, r2
    67ea:	eb69 0503 	sbc.w	r5, r9, r3
    67ee:	3801      	subs	r0, #1
    67f0:	e7e4      	b.n	67bc <__udivmoddi4+0x284>
    67f2:	4628      	mov	r0, r5
    67f4:	e7d7      	b.n	67a6 <__udivmoddi4+0x26e>
    67f6:	4640      	mov	r0, r8
    67f8:	e791      	b.n	671e <__udivmoddi4+0x1e6>
    67fa:	4681      	mov	r9, r0
    67fc:	e7be      	b.n	677c <__udivmoddi4+0x244>
    67fe:	4601      	mov	r1, r0
    6800:	e778      	b.n	66f4 <__udivmoddi4+0x1bc>
    6802:	3802      	subs	r0, #2
    6804:	443c      	add	r4, r7
    6806:	e745      	b.n	6694 <__udivmoddi4+0x15c>
    6808:	4608      	mov	r0, r1
    680a:	e708      	b.n	661e <__udivmoddi4+0xe6>
    680c:	f1a8 0802 	sub.w	r8, r8, #2
    6810:	443d      	add	r5, r7
    6812:	e72b      	b.n	666c <__udivmoddi4+0x134>

00006814 <__aeabi_idiv0>:
    6814:	4770      	bx	lr
    6816:	bf00      	nop

00006818 <atoi>:
    6818:	220a      	movs	r2, #10
    681a:	2100      	movs	r1, #0
    681c:	f000 bd20 	b.w	7260 <strtol>

00006820 <__sflush_r>:
    6820:	898a      	ldrh	r2, [r1, #12]
    6822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6826:	4605      	mov	r5, r0
    6828:	0710      	lsls	r0, r2, #28
    682a:	460c      	mov	r4, r1
    682c:	d45a      	bmi.n	68e4 <__sflush_r+0xc4>
    682e:	684b      	ldr	r3, [r1, #4]
    6830:	2b00      	cmp	r3, #0
    6832:	dc05      	bgt.n	6840 <__sflush_r+0x20>
    6834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6836:	2b00      	cmp	r3, #0
    6838:	dc02      	bgt.n	6840 <__sflush_r+0x20>
    683a:	2000      	movs	r0, #0
    683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6842:	2e00      	cmp	r6, #0
    6844:	d0f9      	beq.n	683a <__sflush_r+0x1a>
    6846:	2300      	movs	r3, #0
    6848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    684c:	682f      	ldr	r7, [r5, #0]
    684e:	602b      	str	r3, [r5, #0]
    6850:	d033      	beq.n	68ba <__sflush_r+0x9a>
    6852:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6854:	89a3      	ldrh	r3, [r4, #12]
    6856:	075a      	lsls	r2, r3, #29
    6858:	d505      	bpl.n	6866 <__sflush_r+0x46>
    685a:	6863      	ldr	r3, [r4, #4]
    685c:	1ac0      	subs	r0, r0, r3
    685e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6860:	b10b      	cbz	r3, 6866 <__sflush_r+0x46>
    6862:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6864:	1ac0      	subs	r0, r0, r3
    6866:	2300      	movs	r3, #0
    6868:	4602      	mov	r2, r0
    686a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    686c:	6a21      	ldr	r1, [r4, #32]
    686e:	4628      	mov	r0, r5
    6870:	47b0      	blx	r6
    6872:	1c43      	adds	r3, r0, #1
    6874:	89a3      	ldrh	r3, [r4, #12]
    6876:	d106      	bne.n	6886 <__sflush_r+0x66>
    6878:	6829      	ldr	r1, [r5, #0]
    687a:	291d      	cmp	r1, #29
    687c:	d84b      	bhi.n	6916 <__sflush_r+0xf6>
    687e:	4a2b      	ldr	r2, [pc, #172]	; (692c <__sflush_r+0x10c>)
    6880:	40ca      	lsrs	r2, r1
    6882:	07d6      	lsls	r6, r2, #31
    6884:	d547      	bpl.n	6916 <__sflush_r+0xf6>
    6886:	2200      	movs	r2, #0
    6888:	6062      	str	r2, [r4, #4]
    688a:	04d9      	lsls	r1, r3, #19
    688c:	6922      	ldr	r2, [r4, #16]
    688e:	6022      	str	r2, [r4, #0]
    6890:	d504      	bpl.n	689c <__sflush_r+0x7c>
    6892:	1c42      	adds	r2, r0, #1
    6894:	d101      	bne.n	689a <__sflush_r+0x7a>
    6896:	682b      	ldr	r3, [r5, #0]
    6898:	b903      	cbnz	r3, 689c <__sflush_r+0x7c>
    689a:	6560      	str	r0, [r4, #84]	; 0x54
    689c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    689e:	602f      	str	r7, [r5, #0]
    68a0:	2900      	cmp	r1, #0
    68a2:	d0ca      	beq.n	683a <__sflush_r+0x1a>
    68a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    68a8:	4299      	cmp	r1, r3
    68aa:	d002      	beq.n	68b2 <__sflush_r+0x92>
    68ac:	4628      	mov	r0, r5
    68ae:	f000 f98d 	bl	6bcc <_free_r>
    68b2:	2000      	movs	r0, #0
    68b4:	6360      	str	r0, [r4, #52]	; 0x34
    68b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68ba:	6a21      	ldr	r1, [r4, #32]
    68bc:	2301      	movs	r3, #1
    68be:	4628      	mov	r0, r5
    68c0:	47b0      	blx	r6
    68c2:	1c41      	adds	r1, r0, #1
    68c4:	d1c6      	bne.n	6854 <__sflush_r+0x34>
    68c6:	682b      	ldr	r3, [r5, #0]
    68c8:	2b00      	cmp	r3, #0
    68ca:	d0c3      	beq.n	6854 <__sflush_r+0x34>
    68cc:	2b1d      	cmp	r3, #29
    68ce:	d001      	beq.n	68d4 <__sflush_r+0xb4>
    68d0:	2b16      	cmp	r3, #22
    68d2:	d101      	bne.n	68d8 <__sflush_r+0xb8>
    68d4:	602f      	str	r7, [r5, #0]
    68d6:	e7b0      	b.n	683a <__sflush_r+0x1a>
    68d8:	89a3      	ldrh	r3, [r4, #12]
    68da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    68de:	81a3      	strh	r3, [r4, #12]
    68e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68e4:	690f      	ldr	r7, [r1, #16]
    68e6:	2f00      	cmp	r7, #0
    68e8:	d0a7      	beq.n	683a <__sflush_r+0x1a>
    68ea:	0793      	lsls	r3, r2, #30
    68ec:	680e      	ldr	r6, [r1, #0]
    68ee:	bf08      	it	eq
    68f0:	694b      	ldreq	r3, [r1, #20]
    68f2:	600f      	str	r7, [r1, #0]
    68f4:	bf18      	it	ne
    68f6:	2300      	movne	r3, #0
    68f8:	eba6 0807 	sub.w	r8, r6, r7
    68fc:	608b      	str	r3, [r1, #8]
    68fe:	f1b8 0f00 	cmp.w	r8, #0
    6902:	dd9a      	ble.n	683a <__sflush_r+0x1a>
    6904:	4643      	mov	r3, r8
    6906:	463a      	mov	r2, r7
    6908:	6a21      	ldr	r1, [r4, #32]
    690a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    690c:	4628      	mov	r0, r5
    690e:	47b0      	blx	r6
    6910:	2800      	cmp	r0, #0
    6912:	dc07      	bgt.n	6924 <__sflush_r+0x104>
    6914:	89a3      	ldrh	r3, [r4, #12]
    6916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    691a:	81a3      	strh	r3, [r4, #12]
    691c:	f04f 30ff 	mov.w	r0, #4294967295
    6920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6924:	4407      	add	r7, r0
    6926:	eba8 0800 	sub.w	r8, r8, r0
    692a:	e7e8      	b.n	68fe <__sflush_r+0xde>
    692c:	20400001 	.word	0x20400001

00006930 <_fflush_r>:
    6930:	b538      	push	{r3, r4, r5, lr}
    6932:	690b      	ldr	r3, [r1, #16]
    6934:	4605      	mov	r5, r0
    6936:	460c      	mov	r4, r1
    6938:	b1db      	cbz	r3, 6972 <_fflush_r+0x42>
    693a:	b118      	cbz	r0, 6944 <_fflush_r+0x14>
    693c:	6983      	ldr	r3, [r0, #24]
    693e:	b90b      	cbnz	r3, 6944 <_fflush_r+0x14>
    6940:	f000 f872 	bl	6a28 <__sinit>
    6944:	4b0c      	ldr	r3, [pc, #48]	; (6978 <_fflush_r+0x48>)
    6946:	429c      	cmp	r4, r3
    6948:	d109      	bne.n	695e <_fflush_r+0x2e>
    694a:	686c      	ldr	r4, [r5, #4]
    694c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6950:	b17b      	cbz	r3, 6972 <_fflush_r+0x42>
    6952:	4621      	mov	r1, r4
    6954:	4628      	mov	r0, r5
    6956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    695a:	f7ff bf61 	b.w	6820 <__sflush_r>
    695e:	4b07      	ldr	r3, [pc, #28]	; (697c <_fflush_r+0x4c>)
    6960:	429c      	cmp	r4, r3
    6962:	d101      	bne.n	6968 <_fflush_r+0x38>
    6964:	68ac      	ldr	r4, [r5, #8]
    6966:	e7f1      	b.n	694c <_fflush_r+0x1c>
    6968:	4b05      	ldr	r3, [pc, #20]	; (6980 <_fflush_r+0x50>)
    696a:	429c      	cmp	r4, r3
    696c:	bf08      	it	eq
    696e:	68ec      	ldreq	r4, [r5, #12]
    6970:	e7ec      	b.n	694c <_fflush_r+0x1c>
    6972:	2000      	movs	r0, #0
    6974:	bd38      	pop	{r3, r4, r5, pc}
    6976:	bf00      	nop
    6978:	00009c70 	.word	0x00009c70
    697c:	00009c90 	.word	0x00009c90
    6980:	00009c50 	.word	0x00009c50

00006984 <fflush>:
    6984:	4601      	mov	r1, r0
    6986:	b920      	cbnz	r0, 6992 <fflush+0xe>
    6988:	4b04      	ldr	r3, [pc, #16]	; (699c <fflush+0x18>)
    698a:	4905      	ldr	r1, [pc, #20]	; (69a0 <fflush+0x1c>)
    698c:	6818      	ldr	r0, [r3, #0]
    698e:	f000 b8d3 	b.w	6b38 <_fwalk_reent>
    6992:	4b04      	ldr	r3, [pc, #16]	; (69a4 <fflush+0x20>)
    6994:	6818      	ldr	r0, [r3, #0]
    6996:	f7ff bfcb 	b.w	6930 <_fflush_r>
    699a:	bf00      	nop
    699c:	00009cb0 	.word	0x00009cb0
    69a0:	00006931 	.word	0x00006931
    69a4:	200002f0 	.word	0x200002f0

000069a8 <_cleanup_r>:
    69a8:	4901      	ldr	r1, [pc, #4]	; (69b0 <_cleanup_r+0x8>)
    69aa:	f000 b8c5 	b.w	6b38 <_fwalk_reent>
    69ae:	bf00      	nop
    69b0:	00006931 	.word	0x00006931

000069b4 <std.isra.0>:
    69b4:	2300      	movs	r3, #0
    69b6:	b510      	push	{r4, lr}
    69b8:	4604      	mov	r4, r0
    69ba:	6003      	str	r3, [r0, #0]
    69bc:	6043      	str	r3, [r0, #4]
    69be:	6083      	str	r3, [r0, #8]
    69c0:	8181      	strh	r1, [r0, #12]
    69c2:	6643      	str	r3, [r0, #100]	; 0x64
    69c4:	81c2      	strh	r2, [r0, #14]
    69c6:	6103      	str	r3, [r0, #16]
    69c8:	6143      	str	r3, [r0, #20]
    69ca:	6183      	str	r3, [r0, #24]
    69cc:	4619      	mov	r1, r3
    69ce:	2208      	movs	r2, #8
    69d0:	305c      	adds	r0, #92	; 0x5c
    69d2:	f000 f8f3 	bl	6bbc <memset>
    69d6:	4b05      	ldr	r3, [pc, #20]	; (69ec <std.isra.0+0x38>)
    69d8:	6263      	str	r3, [r4, #36]	; 0x24
    69da:	4b05      	ldr	r3, [pc, #20]	; (69f0 <std.isra.0+0x3c>)
    69dc:	62a3      	str	r3, [r4, #40]	; 0x28
    69de:	4b05      	ldr	r3, [pc, #20]	; (69f4 <std.isra.0+0x40>)
    69e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    69e2:	4b05      	ldr	r3, [pc, #20]	; (69f8 <std.isra.0+0x44>)
    69e4:	6224      	str	r4, [r4, #32]
    69e6:	6323      	str	r3, [r4, #48]	; 0x30
    69e8:	bd10      	pop	{r4, pc}
    69ea:	bf00      	nop
    69ec:	00007089 	.word	0x00007089
    69f0:	000070ab 	.word	0x000070ab
    69f4:	000070e3 	.word	0x000070e3
    69f8:	00007107 	.word	0x00007107

000069fc <__sfmoreglue>:
    69fc:	b570      	push	{r4, r5, r6, lr}
    69fe:	1e4a      	subs	r2, r1, #1
    6a00:	2568      	movs	r5, #104	; 0x68
    6a02:	4355      	muls	r5, r2
    6a04:	460e      	mov	r6, r1
    6a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
    6a0a:	f000 f92d 	bl	6c68 <_malloc_r>
    6a0e:	4604      	mov	r4, r0
    6a10:	b140      	cbz	r0, 6a24 <__sfmoreglue+0x28>
    6a12:	2100      	movs	r1, #0
    6a14:	e880 0042 	stmia.w	r0, {r1, r6}
    6a18:	300c      	adds	r0, #12
    6a1a:	60a0      	str	r0, [r4, #8]
    6a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    6a20:	f000 f8cc 	bl	6bbc <memset>
    6a24:	4620      	mov	r0, r4
    6a26:	bd70      	pop	{r4, r5, r6, pc}

00006a28 <__sinit>:
    6a28:	6983      	ldr	r3, [r0, #24]
    6a2a:	b510      	push	{r4, lr}
    6a2c:	4604      	mov	r4, r0
    6a2e:	bb33      	cbnz	r3, 6a7e <__sinit+0x56>
    6a30:	6483      	str	r3, [r0, #72]	; 0x48
    6a32:	64c3      	str	r3, [r0, #76]	; 0x4c
    6a34:	6503      	str	r3, [r0, #80]	; 0x50
    6a36:	4b12      	ldr	r3, [pc, #72]	; (6a80 <__sinit+0x58>)
    6a38:	4a12      	ldr	r2, [pc, #72]	; (6a84 <__sinit+0x5c>)
    6a3a:	681b      	ldr	r3, [r3, #0]
    6a3c:	6282      	str	r2, [r0, #40]	; 0x28
    6a3e:	4298      	cmp	r0, r3
    6a40:	bf04      	itt	eq
    6a42:	2301      	moveq	r3, #1
    6a44:	6183      	streq	r3, [r0, #24]
    6a46:	f000 f81f 	bl	6a88 <__sfp>
    6a4a:	6060      	str	r0, [r4, #4]
    6a4c:	4620      	mov	r0, r4
    6a4e:	f000 f81b 	bl	6a88 <__sfp>
    6a52:	60a0      	str	r0, [r4, #8]
    6a54:	4620      	mov	r0, r4
    6a56:	f000 f817 	bl	6a88 <__sfp>
    6a5a:	2200      	movs	r2, #0
    6a5c:	60e0      	str	r0, [r4, #12]
    6a5e:	2104      	movs	r1, #4
    6a60:	6860      	ldr	r0, [r4, #4]
    6a62:	f7ff ffa7 	bl	69b4 <std.isra.0>
    6a66:	2201      	movs	r2, #1
    6a68:	2109      	movs	r1, #9
    6a6a:	68a0      	ldr	r0, [r4, #8]
    6a6c:	f7ff ffa2 	bl	69b4 <std.isra.0>
    6a70:	2202      	movs	r2, #2
    6a72:	2112      	movs	r1, #18
    6a74:	68e0      	ldr	r0, [r4, #12]
    6a76:	f7ff ff9d 	bl	69b4 <std.isra.0>
    6a7a:	2301      	movs	r3, #1
    6a7c:	61a3      	str	r3, [r4, #24]
    6a7e:	bd10      	pop	{r4, pc}
    6a80:	00009cb0 	.word	0x00009cb0
    6a84:	000069a9 	.word	0x000069a9

00006a88 <__sfp>:
    6a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a8a:	4b1c      	ldr	r3, [pc, #112]	; (6afc <__sfp+0x74>)
    6a8c:	681e      	ldr	r6, [r3, #0]
    6a8e:	69b3      	ldr	r3, [r6, #24]
    6a90:	4607      	mov	r7, r0
    6a92:	b913      	cbnz	r3, 6a9a <__sfp+0x12>
    6a94:	4630      	mov	r0, r6
    6a96:	f7ff ffc7 	bl	6a28 <__sinit>
    6a9a:	3648      	adds	r6, #72	; 0x48
    6a9c:	68b4      	ldr	r4, [r6, #8]
    6a9e:	6873      	ldr	r3, [r6, #4]
    6aa0:	3b01      	subs	r3, #1
    6aa2:	d503      	bpl.n	6aac <__sfp+0x24>
    6aa4:	6833      	ldr	r3, [r6, #0]
    6aa6:	b133      	cbz	r3, 6ab6 <__sfp+0x2e>
    6aa8:	6836      	ldr	r6, [r6, #0]
    6aaa:	e7f7      	b.n	6a9c <__sfp+0x14>
    6aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    6ab0:	b16d      	cbz	r5, 6ace <__sfp+0x46>
    6ab2:	3468      	adds	r4, #104	; 0x68
    6ab4:	e7f4      	b.n	6aa0 <__sfp+0x18>
    6ab6:	2104      	movs	r1, #4
    6ab8:	4638      	mov	r0, r7
    6aba:	f7ff ff9f 	bl	69fc <__sfmoreglue>
    6abe:	6030      	str	r0, [r6, #0]
    6ac0:	2800      	cmp	r0, #0
    6ac2:	d1f1      	bne.n	6aa8 <__sfp+0x20>
    6ac4:	230c      	movs	r3, #12
    6ac6:	603b      	str	r3, [r7, #0]
    6ac8:	4604      	mov	r4, r0
    6aca:	4620      	mov	r0, r4
    6acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6ad2:	81e3      	strh	r3, [r4, #14]
    6ad4:	2301      	movs	r3, #1
    6ad6:	81a3      	strh	r3, [r4, #12]
    6ad8:	6665      	str	r5, [r4, #100]	; 0x64
    6ada:	6025      	str	r5, [r4, #0]
    6adc:	60a5      	str	r5, [r4, #8]
    6ade:	6065      	str	r5, [r4, #4]
    6ae0:	6125      	str	r5, [r4, #16]
    6ae2:	6165      	str	r5, [r4, #20]
    6ae4:	61a5      	str	r5, [r4, #24]
    6ae6:	2208      	movs	r2, #8
    6ae8:	4629      	mov	r1, r5
    6aea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6aee:	f000 f865 	bl	6bbc <memset>
    6af2:	6365      	str	r5, [r4, #52]	; 0x34
    6af4:	63a5      	str	r5, [r4, #56]	; 0x38
    6af6:	64a5      	str	r5, [r4, #72]	; 0x48
    6af8:	64e5      	str	r5, [r4, #76]	; 0x4c
    6afa:	e7e6      	b.n	6aca <__sfp+0x42>
    6afc:	00009cb0 	.word	0x00009cb0

00006b00 <_fwalk>:
    6b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b04:	4688      	mov	r8, r1
    6b06:	f100 0448 	add.w	r4, r0, #72	; 0x48
    6b0a:	2600      	movs	r6, #0
    6b0c:	b914      	cbnz	r4, 6b14 <_fwalk+0x14>
    6b0e:	4630      	mov	r0, r6
    6b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b14:	68a5      	ldr	r5, [r4, #8]
    6b16:	6867      	ldr	r7, [r4, #4]
    6b18:	3f01      	subs	r7, #1
    6b1a:	d501      	bpl.n	6b20 <_fwalk+0x20>
    6b1c:	6824      	ldr	r4, [r4, #0]
    6b1e:	e7f5      	b.n	6b0c <_fwalk+0xc>
    6b20:	89ab      	ldrh	r3, [r5, #12]
    6b22:	2b01      	cmp	r3, #1
    6b24:	d906      	bls.n	6b34 <_fwalk+0x34>
    6b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    6b2a:	3301      	adds	r3, #1
    6b2c:	d002      	beq.n	6b34 <_fwalk+0x34>
    6b2e:	4628      	mov	r0, r5
    6b30:	47c0      	blx	r8
    6b32:	4306      	orrs	r6, r0
    6b34:	3568      	adds	r5, #104	; 0x68
    6b36:	e7ef      	b.n	6b18 <_fwalk+0x18>

00006b38 <_fwalk_reent>:
    6b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b3c:	4680      	mov	r8, r0
    6b3e:	4689      	mov	r9, r1
    6b40:	f100 0448 	add.w	r4, r0, #72	; 0x48
    6b44:	2600      	movs	r6, #0
    6b46:	b914      	cbnz	r4, 6b4e <_fwalk_reent+0x16>
    6b48:	4630      	mov	r0, r6
    6b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b4e:	68a5      	ldr	r5, [r4, #8]
    6b50:	6867      	ldr	r7, [r4, #4]
    6b52:	3f01      	subs	r7, #1
    6b54:	d501      	bpl.n	6b5a <_fwalk_reent+0x22>
    6b56:	6824      	ldr	r4, [r4, #0]
    6b58:	e7f5      	b.n	6b46 <_fwalk_reent+0xe>
    6b5a:	89ab      	ldrh	r3, [r5, #12]
    6b5c:	2b01      	cmp	r3, #1
    6b5e:	d907      	bls.n	6b70 <_fwalk_reent+0x38>
    6b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    6b64:	3301      	adds	r3, #1
    6b66:	d003      	beq.n	6b70 <_fwalk_reent+0x38>
    6b68:	4629      	mov	r1, r5
    6b6a:	4640      	mov	r0, r8
    6b6c:	47c8      	blx	r9
    6b6e:	4306      	orrs	r6, r0
    6b70:	3568      	adds	r5, #104	; 0x68
    6b72:	e7ee      	b.n	6b52 <_fwalk_reent+0x1a>

00006b74 <__libc_init_array>:
    6b74:	b570      	push	{r4, r5, r6, lr}
    6b76:	4e0d      	ldr	r6, [pc, #52]	; (6bac <__libc_init_array+0x38>)
    6b78:	4c0d      	ldr	r4, [pc, #52]	; (6bb0 <__libc_init_array+0x3c>)
    6b7a:	1ba4      	subs	r4, r4, r6
    6b7c:	10a4      	asrs	r4, r4, #2
    6b7e:	2500      	movs	r5, #0
    6b80:	42a5      	cmp	r5, r4
    6b82:	d109      	bne.n	6b98 <__libc_init_array+0x24>
    6b84:	4e0b      	ldr	r6, [pc, #44]	; (6bb4 <__libc_init_array+0x40>)
    6b86:	4c0c      	ldr	r4, [pc, #48]	; (6bb8 <__libc_init_array+0x44>)
    6b88:	f003 f948 	bl	9e1c <_init>
    6b8c:	1ba4      	subs	r4, r4, r6
    6b8e:	10a4      	asrs	r4, r4, #2
    6b90:	2500      	movs	r5, #0
    6b92:	42a5      	cmp	r5, r4
    6b94:	d105      	bne.n	6ba2 <__libc_init_array+0x2e>
    6b96:	bd70      	pop	{r4, r5, r6, pc}
    6b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6b9c:	4798      	blx	r3
    6b9e:	3501      	adds	r5, #1
    6ba0:	e7ee      	b.n	6b80 <__libc_init_array+0xc>
    6ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6ba6:	4798      	blx	r3
    6ba8:	3501      	adds	r5, #1
    6baa:	e7f2      	b.n	6b92 <__libc_init_array+0x1e>
    6bac:	00009e28 	.word	0x00009e28
    6bb0:	00009e28 	.word	0x00009e28
    6bb4:	00009e28 	.word	0x00009e28
    6bb8:	00009e2c 	.word	0x00009e2c

00006bbc <memset>:
    6bbc:	4402      	add	r2, r0
    6bbe:	4603      	mov	r3, r0
    6bc0:	4293      	cmp	r3, r2
    6bc2:	d100      	bne.n	6bc6 <memset+0xa>
    6bc4:	4770      	bx	lr
    6bc6:	f803 1b01 	strb.w	r1, [r3], #1
    6bca:	e7f9      	b.n	6bc0 <memset+0x4>

00006bcc <_free_r>:
    6bcc:	b538      	push	{r3, r4, r5, lr}
    6bce:	4605      	mov	r5, r0
    6bd0:	2900      	cmp	r1, #0
    6bd2:	d045      	beq.n	6c60 <_free_r+0x94>
    6bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6bd8:	1f0c      	subs	r4, r1, #4
    6bda:	2b00      	cmp	r3, #0
    6bdc:	bfb8      	it	lt
    6bde:	18e4      	addlt	r4, r4, r3
    6be0:	f000 fcd8 	bl	7594 <__malloc_lock>
    6be4:	4a1f      	ldr	r2, [pc, #124]	; (6c64 <_free_r+0x98>)
    6be6:	6813      	ldr	r3, [r2, #0]
    6be8:	4610      	mov	r0, r2
    6bea:	b933      	cbnz	r3, 6bfa <_free_r+0x2e>
    6bec:	6063      	str	r3, [r4, #4]
    6bee:	6014      	str	r4, [r2, #0]
    6bf0:	4628      	mov	r0, r5
    6bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6bf6:	f000 bcce 	b.w	7596 <__malloc_unlock>
    6bfa:	42a3      	cmp	r3, r4
    6bfc:	d90c      	bls.n	6c18 <_free_r+0x4c>
    6bfe:	6821      	ldr	r1, [r4, #0]
    6c00:	1862      	adds	r2, r4, r1
    6c02:	4293      	cmp	r3, r2
    6c04:	bf04      	itt	eq
    6c06:	681a      	ldreq	r2, [r3, #0]
    6c08:	685b      	ldreq	r3, [r3, #4]
    6c0a:	6063      	str	r3, [r4, #4]
    6c0c:	bf04      	itt	eq
    6c0e:	1852      	addeq	r2, r2, r1
    6c10:	6022      	streq	r2, [r4, #0]
    6c12:	6004      	str	r4, [r0, #0]
    6c14:	e7ec      	b.n	6bf0 <_free_r+0x24>
    6c16:	4613      	mov	r3, r2
    6c18:	685a      	ldr	r2, [r3, #4]
    6c1a:	b10a      	cbz	r2, 6c20 <_free_r+0x54>
    6c1c:	42a2      	cmp	r2, r4
    6c1e:	d9fa      	bls.n	6c16 <_free_r+0x4a>
    6c20:	6819      	ldr	r1, [r3, #0]
    6c22:	1858      	adds	r0, r3, r1
    6c24:	42a0      	cmp	r0, r4
    6c26:	d10b      	bne.n	6c40 <_free_r+0x74>
    6c28:	6820      	ldr	r0, [r4, #0]
    6c2a:	4401      	add	r1, r0
    6c2c:	1858      	adds	r0, r3, r1
    6c2e:	4282      	cmp	r2, r0
    6c30:	6019      	str	r1, [r3, #0]
    6c32:	d1dd      	bne.n	6bf0 <_free_r+0x24>
    6c34:	6810      	ldr	r0, [r2, #0]
    6c36:	6852      	ldr	r2, [r2, #4]
    6c38:	605a      	str	r2, [r3, #4]
    6c3a:	4401      	add	r1, r0
    6c3c:	6019      	str	r1, [r3, #0]
    6c3e:	e7d7      	b.n	6bf0 <_free_r+0x24>
    6c40:	d902      	bls.n	6c48 <_free_r+0x7c>
    6c42:	230c      	movs	r3, #12
    6c44:	602b      	str	r3, [r5, #0]
    6c46:	e7d3      	b.n	6bf0 <_free_r+0x24>
    6c48:	6820      	ldr	r0, [r4, #0]
    6c4a:	1821      	adds	r1, r4, r0
    6c4c:	428a      	cmp	r2, r1
    6c4e:	bf04      	itt	eq
    6c50:	6811      	ldreq	r1, [r2, #0]
    6c52:	6852      	ldreq	r2, [r2, #4]
    6c54:	6062      	str	r2, [r4, #4]
    6c56:	bf04      	itt	eq
    6c58:	1809      	addeq	r1, r1, r0
    6c5a:	6021      	streq	r1, [r4, #0]
    6c5c:	605c      	str	r4, [r3, #4]
    6c5e:	e7c7      	b.n	6bf0 <_free_r+0x24>
    6c60:	bd38      	pop	{r3, r4, r5, pc}
    6c62:	bf00      	nop
    6c64:	20001254 	.word	0x20001254

00006c68 <_malloc_r>:
    6c68:	b570      	push	{r4, r5, r6, lr}
    6c6a:	1ccd      	adds	r5, r1, #3
    6c6c:	f025 0503 	bic.w	r5, r5, #3
    6c70:	3508      	adds	r5, #8
    6c72:	2d0c      	cmp	r5, #12
    6c74:	bf38      	it	cc
    6c76:	250c      	movcc	r5, #12
    6c78:	2d00      	cmp	r5, #0
    6c7a:	4606      	mov	r6, r0
    6c7c:	db01      	blt.n	6c82 <_malloc_r+0x1a>
    6c7e:	42a9      	cmp	r1, r5
    6c80:	d903      	bls.n	6c8a <_malloc_r+0x22>
    6c82:	230c      	movs	r3, #12
    6c84:	6033      	str	r3, [r6, #0]
    6c86:	2000      	movs	r0, #0
    6c88:	bd70      	pop	{r4, r5, r6, pc}
    6c8a:	f000 fc83 	bl	7594 <__malloc_lock>
    6c8e:	4a23      	ldr	r2, [pc, #140]	; (6d1c <_malloc_r+0xb4>)
    6c90:	6814      	ldr	r4, [r2, #0]
    6c92:	4621      	mov	r1, r4
    6c94:	b991      	cbnz	r1, 6cbc <_malloc_r+0x54>
    6c96:	4c22      	ldr	r4, [pc, #136]	; (6d20 <_malloc_r+0xb8>)
    6c98:	6823      	ldr	r3, [r4, #0]
    6c9a:	b91b      	cbnz	r3, 6ca4 <_malloc_r+0x3c>
    6c9c:	4630      	mov	r0, r6
    6c9e:	f000 f8bd 	bl	6e1c <_sbrk_r>
    6ca2:	6020      	str	r0, [r4, #0]
    6ca4:	4629      	mov	r1, r5
    6ca6:	4630      	mov	r0, r6
    6ca8:	f000 f8b8 	bl	6e1c <_sbrk_r>
    6cac:	1c43      	adds	r3, r0, #1
    6cae:	d126      	bne.n	6cfe <_malloc_r+0x96>
    6cb0:	230c      	movs	r3, #12
    6cb2:	6033      	str	r3, [r6, #0]
    6cb4:	4630      	mov	r0, r6
    6cb6:	f000 fc6e 	bl	7596 <__malloc_unlock>
    6cba:	e7e4      	b.n	6c86 <_malloc_r+0x1e>
    6cbc:	680b      	ldr	r3, [r1, #0]
    6cbe:	1b5b      	subs	r3, r3, r5
    6cc0:	d41a      	bmi.n	6cf8 <_malloc_r+0x90>
    6cc2:	2b0b      	cmp	r3, #11
    6cc4:	d90f      	bls.n	6ce6 <_malloc_r+0x7e>
    6cc6:	600b      	str	r3, [r1, #0]
    6cc8:	50cd      	str	r5, [r1, r3]
    6cca:	18cc      	adds	r4, r1, r3
    6ccc:	4630      	mov	r0, r6
    6cce:	f000 fc62 	bl	7596 <__malloc_unlock>
    6cd2:	f104 000b 	add.w	r0, r4, #11
    6cd6:	1d23      	adds	r3, r4, #4
    6cd8:	f020 0007 	bic.w	r0, r0, #7
    6cdc:	1ac3      	subs	r3, r0, r3
    6cde:	d01b      	beq.n	6d18 <_malloc_r+0xb0>
    6ce0:	425a      	negs	r2, r3
    6ce2:	50e2      	str	r2, [r4, r3]
    6ce4:	bd70      	pop	{r4, r5, r6, pc}
    6ce6:	428c      	cmp	r4, r1
    6ce8:	bf0d      	iteet	eq
    6cea:	6863      	ldreq	r3, [r4, #4]
    6cec:	684b      	ldrne	r3, [r1, #4]
    6cee:	6063      	strne	r3, [r4, #4]
    6cf0:	6013      	streq	r3, [r2, #0]
    6cf2:	bf18      	it	ne
    6cf4:	460c      	movne	r4, r1
    6cf6:	e7e9      	b.n	6ccc <_malloc_r+0x64>
    6cf8:	460c      	mov	r4, r1
    6cfa:	6849      	ldr	r1, [r1, #4]
    6cfc:	e7ca      	b.n	6c94 <_malloc_r+0x2c>
    6cfe:	1cc4      	adds	r4, r0, #3
    6d00:	f024 0403 	bic.w	r4, r4, #3
    6d04:	42a0      	cmp	r0, r4
    6d06:	d005      	beq.n	6d14 <_malloc_r+0xac>
    6d08:	1a21      	subs	r1, r4, r0
    6d0a:	4630      	mov	r0, r6
    6d0c:	f000 f886 	bl	6e1c <_sbrk_r>
    6d10:	3001      	adds	r0, #1
    6d12:	d0cd      	beq.n	6cb0 <_malloc_r+0x48>
    6d14:	6025      	str	r5, [r4, #0]
    6d16:	e7d9      	b.n	6ccc <_malloc_r+0x64>
    6d18:	bd70      	pop	{r4, r5, r6, pc}
    6d1a:	bf00      	nop
    6d1c:	20001254 	.word	0x20001254
    6d20:	20001258 	.word	0x20001258

00006d24 <iprintf>:
    6d24:	b40f      	push	{r0, r1, r2, r3}
    6d26:	4b0a      	ldr	r3, [pc, #40]	; (6d50 <iprintf+0x2c>)
    6d28:	b513      	push	{r0, r1, r4, lr}
    6d2a:	681c      	ldr	r4, [r3, #0]
    6d2c:	b124      	cbz	r4, 6d38 <iprintf+0x14>
    6d2e:	69a3      	ldr	r3, [r4, #24]
    6d30:	b913      	cbnz	r3, 6d38 <iprintf+0x14>
    6d32:	4620      	mov	r0, r4
    6d34:	f7ff fe78 	bl	6a28 <__sinit>
    6d38:	ab05      	add	r3, sp, #20
    6d3a:	9a04      	ldr	r2, [sp, #16]
    6d3c:	68a1      	ldr	r1, [r4, #8]
    6d3e:	9301      	str	r3, [sp, #4]
    6d40:	4620      	mov	r0, r4
    6d42:	f000 fda1 	bl	7888 <_vfiprintf_r>
    6d46:	b002      	add	sp, #8
    6d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d4c:	b004      	add	sp, #16
    6d4e:	4770      	bx	lr
    6d50:	200002f0 	.word	0x200002f0

00006d54 <_puts_r>:
    6d54:	b570      	push	{r4, r5, r6, lr}
    6d56:	460e      	mov	r6, r1
    6d58:	4605      	mov	r5, r0
    6d5a:	b118      	cbz	r0, 6d64 <_puts_r+0x10>
    6d5c:	6983      	ldr	r3, [r0, #24]
    6d5e:	b90b      	cbnz	r3, 6d64 <_puts_r+0x10>
    6d60:	f7ff fe62 	bl	6a28 <__sinit>
    6d64:	69ab      	ldr	r3, [r5, #24]
    6d66:	68ac      	ldr	r4, [r5, #8]
    6d68:	b913      	cbnz	r3, 6d70 <_puts_r+0x1c>
    6d6a:	4628      	mov	r0, r5
    6d6c:	f7ff fe5c 	bl	6a28 <__sinit>
    6d70:	4b23      	ldr	r3, [pc, #140]	; (6e00 <_puts_r+0xac>)
    6d72:	429c      	cmp	r4, r3
    6d74:	d117      	bne.n	6da6 <_puts_r+0x52>
    6d76:	686c      	ldr	r4, [r5, #4]
    6d78:	89a3      	ldrh	r3, [r4, #12]
    6d7a:	071b      	lsls	r3, r3, #28
    6d7c:	d51d      	bpl.n	6dba <_puts_r+0x66>
    6d7e:	6923      	ldr	r3, [r4, #16]
    6d80:	b1db      	cbz	r3, 6dba <_puts_r+0x66>
    6d82:	3e01      	subs	r6, #1
    6d84:	68a3      	ldr	r3, [r4, #8]
    6d86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    6d8a:	3b01      	subs	r3, #1
    6d8c:	60a3      	str	r3, [r4, #8]
    6d8e:	b9e9      	cbnz	r1, 6dcc <_puts_r+0x78>
    6d90:	2b00      	cmp	r3, #0
    6d92:	da2e      	bge.n	6df2 <_puts_r+0x9e>
    6d94:	4622      	mov	r2, r4
    6d96:	210a      	movs	r1, #10
    6d98:	4628      	mov	r0, r5
    6d9a:	f000 fa77 	bl	728c <__swbuf_r>
    6d9e:	3001      	adds	r0, #1
    6da0:	d011      	beq.n	6dc6 <_puts_r+0x72>
    6da2:	200a      	movs	r0, #10
    6da4:	bd70      	pop	{r4, r5, r6, pc}
    6da6:	4b17      	ldr	r3, [pc, #92]	; (6e04 <_puts_r+0xb0>)
    6da8:	429c      	cmp	r4, r3
    6daa:	d101      	bne.n	6db0 <_puts_r+0x5c>
    6dac:	68ac      	ldr	r4, [r5, #8]
    6dae:	e7e3      	b.n	6d78 <_puts_r+0x24>
    6db0:	4b15      	ldr	r3, [pc, #84]	; (6e08 <_puts_r+0xb4>)
    6db2:	429c      	cmp	r4, r3
    6db4:	bf08      	it	eq
    6db6:	68ec      	ldreq	r4, [r5, #12]
    6db8:	e7de      	b.n	6d78 <_puts_r+0x24>
    6dba:	4621      	mov	r1, r4
    6dbc:	4628      	mov	r0, r5
    6dbe:	f000 fac9 	bl	7354 <__swsetup_r>
    6dc2:	2800      	cmp	r0, #0
    6dc4:	d0dd      	beq.n	6d82 <_puts_r+0x2e>
    6dc6:	f04f 30ff 	mov.w	r0, #4294967295
    6dca:	bd70      	pop	{r4, r5, r6, pc}
    6dcc:	2b00      	cmp	r3, #0
    6dce:	da04      	bge.n	6dda <_puts_r+0x86>
    6dd0:	69a2      	ldr	r2, [r4, #24]
    6dd2:	4293      	cmp	r3, r2
    6dd4:	db06      	blt.n	6de4 <_puts_r+0x90>
    6dd6:	290a      	cmp	r1, #10
    6dd8:	d004      	beq.n	6de4 <_puts_r+0x90>
    6dda:	6823      	ldr	r3, [r4, #0]
    6ddc:	1c5a      	adds	r2, r3, #1
    6dde:	6022      	str	r2, [r4, #0]
    6de0:	7019      	strb	r1, [r3, #0]
    6de2:	e7cf      	b.n	6d84 <_puts_r+0x30>
    6de4:	4622      	mov	r2, r4
    6de6:	4628      	mov	r0, r5
    6de8:	f000 fa50 	bl	728c <__swbuf_r>
    6dec:	3001      	adds	r0, #1
    6dee:	d1c9      	bne.n	6d84 <_puts_r+0x30>
    6df0:	e7e9      	b.n	6dc6 <_puts_r+0x72>
    6df2:	6823      	ldr	r3, [r4, #0]
    6df4:	200a      	movs	r0, #10
    6df6:	1c5a      	adds	r2, r3, #1
    6df8:	6022      	str	r2, [r4, #0]
    6dfa:	7018      	strb	r0, [r3, #0]
    6dfc:	bd70      	pop	{r4, r5, r6, pc}
    6dfe:	bf00      	nop
    6e00:	00009c70 	.word	0x00009c70
    6e04:	00009c90 	.word	0x00009c90
    6e08:	00009c50 	.word	0x00009c50

00006e0c <puts>:
    6e0c:	4b02      	ldr	r3, [pc, #8]	; (6e18 <puts+0xc>)
    6e0e:	4601      	mov	r1, r0
    6e10:	6818      	ldr	r0, [r3, #0]
    6e12:	f7ff bf9f 	b.w	6d54 <_puts_r>
    6e16:	bf00      	nop
    6e18:	200002f0 	.word	0x200002f0

00006e1c <_sbrk_r>:
    6e1c:	b538      	push	{r3, r4, r5, lr}
    6e1e:	4c06      	ldr	r4, [pc, #24]	; (6e38 <_sbrk_r+0x1c>)
    6e20:	2300      	movs	r3, #0
    6e22:	4605      	mov	r5, r0
    6e24:	4608      	mov	r0, r1
    6e26:	6023      	str	r3, [r4, #0]
    6e28:	f7fb fd96 	bl	2958 <_sbrk>
    6e2c:	1c43      	adds	r3, r0, #1
    6e2e:	d102      	bne.n	6e36 <_sbrk_r+0x1a>
    6e30:	6823      	ldr	r3, [r4, #0]
    6e32:	b103      	cbz	r3, 6e36 <_sbrk_r+0x1a>
    6e34:	602b      	str	r3, [r5, #0]
    6e36:	bd38      	pop	{r3, r4, r5, pc}
    6e38:	200012d4 	.word	0x200012d4

00006e3c <iscanf>:
    6e3c:	b40f      	push	{r0, r1, r2, r3}
    6e3e:	4b0a      	ldr	r3, [pc, #40]	; (6e68 <iscanf+0x2c>)
    6e40:	b513      	push	{r0, r1, r4, lr}
    6e42:	681c      	ldr	r4, [r3, #0]
    6e44:	b124      	cbz	r4, 6e50 <iscanf+0x14>
    6e46:	69a3      	ldr	r3, [r4, #24]
    6e48:	b913      	cbnz	r3, 6e50 <iscanf+0x14>
    6e4a:	4620      	mov	r0, r4
    6e4c:	f7ff fdec 	bl	6a28 <__sinit>
    6e50:	ab05      	add	r3, sp, #20
    6e52:	9a04      	ldr	r2, [sp, #16]
    6e54:	6861      	ldr	r1, [r4, #4]
    6e56:	9301      	str	r3, [sp, #4]
    6e58:	4620      	mov	r0, r4
    6e5a:	f001 f915 	bl	8088 <_vfiscanf_r>
    6e5e:	b002      	add	sp, #8
    6e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e64:	b004      	add	sp, #16
    6e66:	4770      	bx	lr
    6e68:	200002f0 	.word	0x200002f0

00006e6c <setbuf>:
    6e6c:	2900      	cmp	r1, #0
    6e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6e72:	bf0c      	ite	eq
    6e74:	2202      	moveq	r2, #2
    6e76:	2200      	movne	r2, #0
    6e78:	f000 b800 	b.w	6e7c <setvbuf>

00006e7c <setvbuf>:
    6e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6e80:	461d      	mov	r5, r3
    6e82:	4b51      	ldr	r3, [pc, #324]	; (6fc8 <setvbuf+0x14c>)
    6e84:	681e      	ldr	r6, [r3, #0]
    6e86:	4604      	mov	r4, r0
    6e88:	460f      	mov	r7, r1
    6e8a:	4690      	mov	r8, r2
    6e8c:	b126      	cbz	r6, 6e98 <setvbuf+0x1c>
    6e8e:	69b3      	ldr	r3, [r6, #24]
    6e90:	b913      	cbnz	r3, 6e98 <setvbuf+0x1c>
    6e92:	4630      	mov	r0, r6
    6e94:	f7ff fdc8 	bl	6a28 <__sinit>
    6e98:	4b4c      	ldr	r3, [pc, #304]	; (6fcc <setvbuf+0x150>)
    6e9a:	429c      	cmp	r4, r3
    6e9c:	d152      	bne.n	6f44 <setvbuf+0xc8>
    6e9e:	6874      	ldr	r4, [r6, #4]
    6ea0:	f1b8 0f02 	cmp.w	r8, #2
    6ea4:	d006      	beq.n	6eb4 <setvbuf+0x38>
    6ea6:	f1b8 0f01 	cmp.w	r8, #1
    6eaa:	f200 8089 	bhi.w	6fc0 <setvbuf+0x144>
    6eae:	2d00      	cmp	r5, #0
    6eb0:	f2c0 8086 	blt.w	6fc0 <setvbuf+0x144>
    6eb4:	4621      	mov	r1, r4
    6eb6:	4630      	mov	r0, r6
    6eb8:	f7ff fd3a 	bl	6930 <_fflush_r>
    6ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ebe:	b141      	cbz	r1, 6ed2 <setvbuf+0x56>
    6ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6ec4:	4299      	cmp	r1, r3
    6ec6:	d002      	beq.n	6ece <setvbuf+0x52>
    6ec8:	4630      	mov	r0, r6
    6eca:	f7ff fe7f 	bl	6bcc <_free_r>
    6ece:	2300      	movs	r3, #0
    6ed0:	6363      	str	r3, [r4, #52]	; 0x34
    6ed2:	2300      	movs	r3, #0
    6ed4:	61a3      	str	r3, [r4, #24]
    6ed6:	6063      	str	r3, [r4, #4]
    6ed8:	89a3      	ldrh	r3, [r4, #12]
    6eda:	061b      	lsls	r3, r3, #24
    6edc:	d503      	bpl.n	6ee6 <setvbuf+0x6a>
    6ede:	6921      	ldr	r1, [r4, #16]
    6ee0:	4630      	mov	r0, r6
    6ee2:	f7ff fe73 	bl	6bcc <_free_r>
    6ee6:	89a3      	ldrh	r3, [r4, #12]
    6ee8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    6eec:	f023 0303 	bic.w	r3, r3, #3
    6ef0:	f1b8 0f02 	cmp.w	r8, #2
    6ef4:	81a3      	strh	r3, [r4, #12]
    6ef6:	d05d      	beq.n	6fb4 <setvbuf+0x138>
    6ef8:	ab01      	add	r3, sp, #4
    6efa:	466a      	mov	r2, sp
    6efc:	4621      	mov	r1, r4
    6efe:	4630      	mov	r0, r6
    6f00:	f000 faca 	bl	7498 <__swhatbuf_r>
    6f04:	89a3      	ldrh	r3, [r4, #12]
    6f06:	4318      	orrs	r0, r3
    6f08:	81a0      	strh	r0, [r4, #12]
    6f0a:	bb2d      	cbnz	r5, 6f58 <setvbuf+0xdc>
    6f0c:	9d00      	ldr	r5, [sp, #0]
    6f0e:	4628      	mov	r0, r5
    6f10:	f000 fb26 	bl	7560 <malloc>
    6f14:	4607      	mov	r7, r0
    6f16:	2800      	cmp	r0, #0
    6f18:	d14e      	bne.n	6fb8 <setvbuf+0x13c>
    6f1a:	f8dd 9000 	ldr.w	r9, [sp]
    6f1e:	45a9      	cmp	r9, r5
    6f20:	d13c      	bne.n	6f9c <setvbuf+0x120>
    6f22:	f04f 30ff 	mov.w	r0, #4294967295
    6f26:	89a3      	ldrh	r3, [r4, #12]
    6f28:	f043 0302 	orr.w	r3, r3, #2
    6f2c:	81a3      	strh	r3, [r4, #12]
    6f2e:	2300      	movs	r3, #0
    6f30:	60a3      	str	r3, [r4, #8]
    6f32:	f104 0347 	add.w	r3, r4, #71	; 0x47
    6f36:	6023      	str	r3, [r4, #0]
    6f38:	6123      	str	r3, [r4, #16]
    6f3a:	2301      	movs	r3, #1
    6f3c:	6163      	str	r3, [r4, #20]
    6f3e:	b003      	add	sp, #12
    6f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6f44:	4b22      	ldr	r3, [pc, #136]	; (6fd0 <setvbuf+0x154>)
    6f46:	429c      	cmp	r4, r3
    6f48:	d101      	bne.n	6f4e <setvbuf+0xd2>
    6f4a:	68b4      	ldr	r4, [r6, #8]
    6f4c:	e7a8      	b.n	6ea0 <setvbuf+0x24>
    6f4e:	4b21      	ldr	r3, [pc, #132]	; (6fd4 <setvbuf+0x158>)
    6f50:	429c      	cmp	r4, r3
    6f52:	bf08      	it	eq
    6f54:	68f4      	ldreq	r4, [r6, #12]
    6f56:	e7a3      	b.n	6ea0 <setvbuf+0x24>
    6f58:	2f00      	cmp	r7, #0
    6f5a:	d0d8      	beq.n	6f0e <setvbuf+0x92>
    6f5c:	69b3      	ldr	r3, [r6, #24]
    6f5e:	b913      	cbnz	r3, 6f66 <setvbuf+0xea>
    6f60:	4630      	mov	r0, r6
    6f62:	f7ff fd61 	bl	6a28 <__sinit>
    6f66:	f1b8 0f01 	cmp.w	r8, #1
    6f6a:	bf08      	it	eq
    6f6c:	89a3      	ldrheq	r3, [r4, #12]
    6f6e:	6027      	str	r7, [r4, #0]
    6f70:	bf04      	itt	eq
    6f72:	f043 0301 	orreq.w	r3, r3, #1
    6f76:	81a3      	strheq	r3, [r4, #12]
    6f78:	89a3      	ldrh	r3, [r4, #12]
    6f7a:	6127      	str	r7, [r4, #16]
    6f7c:	f013 0008 	ands.w	r0, r3, #8
    6f80:	6165      	str	r5, [r4, #20]
    6f82:	d01b      	beq.n	6fbc <setvbuf+0x140>
    6f84:	f013 0001 	ands.w	r0, r3, #1
    6f88:	bf18      	it	ne
    6f8a:	426d      	negne	r5, r5
    6f8c:	f04f 0300 	mov.w	r3, #0
    6f90:	bf1d      	ittte	ne
    6f92:	60a3      	strne	r3, [r4, #8]
    6f94:	61a5      	strne	r5, [r4, #24]
    6f96:	4618      	movne	r0, r3
    6f98:	60a5      	streq	r5, [r4, #8]
    6f9a:	e7d0      	b.n	6f3e <setvbuf+0xc2>
    6f9c:	4648      	mov	r0, r9
    6f9e:	f000 fadf 	bl	7560 <malloc>
    6fa2:	4607      	mov	r7, r0
    6fa4:	2800      	cmp	r0, #0
    6fa6:	d0bc      	beq.n	6f22 <setvbuf+0xa6>
    6fa8:	89a3      	ldrh	r3, [r4, #12]
    6faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6fae:	81a3      	strh	r3, [r4, #12]
    6fb0:	464d      	mov	r5, r9
    6fb2:	e7d3      	b.n	6f5c <setvbuf+0xe0>
    6fb4:	2000      	movs	r0, #0
    6fb6:	e7b6      	b.n	6f26 <setvbuf+0xaa>
    6fb8:	46a9      	mov	r9, r5
    6fba:	e7f5      	b.n	6fa8 <setvbuf+0x12c>
    6fbc:	60a0      	str	r0, [r4, #8]
    6fbe:	e7be      	b.n	6f3e <setvbuf+0xc2>
    6fc0:	f04f 30ff 	mov.w	r0, #4294967295
    6fc4:	e7bb      	b.n	6f3e <setvbuf+0xc2>
    6fc6:	bf00      	nop
    6fc8:	200002f0 	.word	0x200002f0
    6fcc:	00009c70 	.word	0x00009c70
    6fd0:	00009c90 	.word	0x00009c90
    6fd4:	00009c50 	.word	0x00009c50

00006fd8 <sniprintf>:
    6fd8:	b40c      	push	{r2, r3}
    6fda:	b530      	push	{r4, r5, lr}
    6fdc:	4b17      	ldr	r3, [pc, #92]	; (703c <sniprintf+0x64>)
    6fde:	1e0c      	subs	r4, r1, #0
    6fe0:	b09d      	sub	sp, #116	; 0x74
    6fe2:	681d      	ldr	r5, [r3, #0]
    6fe4:	da08      	bge.n	6ff8 <sniprintf+0x20>
    6fe6:	238b      	movs	r3, #139	; 0x8b
    6fe8:	602b      	str	r3, [r5, #0]
    6fea:	f04f 30ff 	mov.w	r0, #4294967295
    6fee:	b01d      	add	sp, #116	; 0x74
    6ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6ff4:	b002      	add	sp, #8
    6ff6:	4770      	bx	lr
    6ff8:	f44f 7302 	mov.w	r3, #520	; 0x208
    6ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
    7000:	bf14      	ite	ne
    7002:	f104 33ff 	addne.w	r3, r4, #4294967295
    7006:	4623      	moveq	r3, r4
    7008:	9304      	str	r3, [sp, #16]
    700a:	9307      	str	r3, [sp, #28]
    700c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7010:	9002      	str	r0, [sp, #8]
    7012:	9006      	str	r0, [sp, #24]
    7014:	f8ad 3016 	strh.w	r3, [sp, #22]
    7018:	9a20      	ldr	r2, [sp, #128]	; 0x80
    701a:	ab21      	add	r3, sp, #132	; 0x84
    701c:	a902      	add	r1, sp, #8
    701e:	4628      	mov	r0, r5
    7020:	9301      	str	r3, [sp, #4]
    7022:	f000 fb15 	bl	7650 <_svfiprintf_r>
    7026:	1c43      	adds	r3, r0, #1
    7028:	bfbc      	itt	lt
    702a:	238b      	movlt	r3, #139	; 0x8b
    702c:	602b      	strlt	r3, [r5, #0]
    702e:	2c00      	cmp	r4, #0
    7030:	d0dd      	beq.n	6fee <sniprintf+0x16>
    7032:	9b02      	ldr	r3, [sp, #8]
    7034:	2200      	movs	r2, #0
    7036:	701a      	strb	r2, [r3, #0]
    7038:	e7d9      	b.n	6fee <sniprintf+0x16>
    703a:	bf00      	nop
    703c:	200002f0 	.word	0x200002f0

00007040 <siprintf>:
    7040:	b40e      	push	{r1, r2, r3}
    7042:	b500      	push	{lr}
    7044:	b09c      	sub	sp, #112	; 0x70
    7046:	f44f 7102 	mov.w	r1, #520	; 0x208
    704a:	ab1d      	add	r3, sp, #116	; 0x74
    704c:	f8ad 1014 	strh.w	r1, [sp, #20]
    7050:	9002      	str	r0, [sp, #8]
    7052:	9006      	str	r0, [sp, #24]
    7054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7058:	480a      	ldr	r0, [pc, #40]	; (7084 <siprintf+0x44>)
    705a:	9104      	str	r1, [sp, #16]
    705c:	9107      	str	r1, [sp, #28]
    705e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7062:	f853 2b04 	ldr.w	r2, [r3], #4
    7066:	f8ad 1016 	strh.w	r1, [sp, #22]
    706a:	6800      	ldr	r0, [r0, #0]
    706c:	9301      	str	r3, [sp, #4]
    706e:	a902      	add	r1, sp, #8
    7070:	f000 faee 	bl	7650 <_svfiprintf_r>
    7074:	9b02      	ldr	r3, [sp, #8]
    7076:	2200      	movs	r2, #0
    7078:	701a      	strb	r2, [r3, #0]
    707a:	b01c      	add	sp, #112	; 0x70
    707c:	f85d eb04 	ldr.w	lr, [sp], #4
    7080:	b003      	add	sp, #12
    7082:	4770      	bx	lr
    7084:	200002f0 	.word	0x200002f0

00007088 <__sread>:
    7088:	b510      	push	{r4, lr}
    708a:	460c      	mov	r4, r1
    708c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7090:	f001 f97a 	bl	8388 <_read_r>
    7094:	2800      	cmp	r0, #0
    7096:	bfab      	itete	ge
    7098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    709a:	89a3      	ldrhlt	r3, [r4, #12]
    709c:	181b      	addge	r3, r3, r0
    709e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    70a2:	bfac      	ite	ge
    70a4:	6563      	strge	r3, [r4, #84]	; 0x54
    70a6:	81a3      	strhlt	r3, [r4, #12]
    70a8:	bd10      	pop	{r4, pc}

000070aa <__swrite>:
    70aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70ae:	461f      	mov	r7, r3
    70b0:	898b      	ldrh	r3, [r1, #12]
    70b2:	05db      	lsls	r3, r3, #23
    70b4:	4605      	mov	r5, r0
    70b6:	460c      	mov	r4, r1
    70b8:	4616      	mov	r6, r2
    70ba:	d505      	bpl.n	70c8 <__swrite+0x1e>
    70bc:	2302      	movs	r3, #2
    70be:	2200      	movs	r2, #0
    70c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    70c4:	f000 f9d6 	bl	7474 <_lseek_r>
    70c8:	89a3      	ldrh	r3, [r4, #12]
    70ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    70ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    70d2:	81a3      	strh	r3, [r4, #12]
    70d4:	4632      	mov	r2, r6
    70d6:	463b      	mov	r3, r7
    70d8:	4628      	mov	r0, r5
    70da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    70de:	f000 b927 	b.w	7330 <_write_r>

000070e2 <__sseek>:
    70e2:	b510      	push	{r4, lr}
    70e4:	460c      	mov	r4, r1
    70e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    70ea:	f000 f9c3 	bl	7474 <_lseek_r>
    70ee:	1c43      	adds	r3, r0, #1
    70f0:	89a3      	ldrh	r3, [r4, #12]
    70f2:	bf15      	itete	ne
    70f4:	6560      	strne	r0, [r4, #84]	; 0x54
    70f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    70fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    70fe:	81a3      	strheq	r3, [r4, #12]
    7100:	bf18      	it	ne
    7102:	81a3      	strhne	r3, [r4, #12]
    7104:	bd10      	pop	{r4, pc}

00007106 <__sclose>:
    7106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    710a:	f000 b991 	b.w	7430 <_close_r>

0000710e <strcat>:
    710e:	b510      	push	{r4, lr}
    7110:	4602      	mov	r2, r0
    7112:	4613      	mov	r3, r2
    7114:	3201      	adds	r2, #1
    7116:	781c      	ldrb	r4, [r3, #0]
    7118:	2c00      	cmp	r4, #0
    711a:	d1fa      	bne.n	7112 <strcat+0x4>
    711c:	3b01      	subs	r3, #1
    711e:	f811 2b01 	ldrb.w	r2, [r1], #1
    7122:	f803 2f01 	strb.w	r2, [r3, #1]!
    7126:	2a00      	cmp	r2, #0
    7128:	d1f9      	bne.n	711e <strcat+0x10>
    712a:	bd10      	pop	{r4, pc}

0000712c <strcpy>:
    712c:	4603      	mov	r3, r0
    712e:	f811 2b01 	ldrb.w	r2, [r1], #1
    7132:	f803 2b01 	strb.w	r2, [r3], #1
    7136:	2a00      	cmp	r2, #0
    7138:	d1f9      	bne.n	712e <strcpy+0x2>
    713a:	4770      	bx	lr

0000713c <_strtol_l.isra.0>:
    713c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7140:	4680      	mov	r8, r0
    7142:	4689      	mov	r9, r1
    7144:	4692      	mov	sl, r2
    7146:	461f      	mov	r7, r3
    7148:	468b      	mov	fp, r1
    714a:	465d      	mov	r5, fp
    714c:	980a      	ldr	r0, [sp, #40]	; 0x28
    714e:	f815 4b01 	ldrb.w	r4, [r5], #1
    7152:	f000 f97d 	bl	7450 <__locale_ctype_ptr_l>
    7156:	4420      	add	r0, r4
    7158:	7846      	ldrb	r6, [r0, #1]
    715a:	f016 0608 	ands.w	r6, r6, #8
    715e:	d10b      	bne.n	7178 <_strtol_l.isra.0+0x3c>
    7160:	2c2d      	cmp	r4, #45	; 0x2d
    7162:	d10b      	bne.n	717c <_strtol_l.isra.0+0x40>
    7164:	782c      	ldrb	r4, [r5, #0]
    7166:	2601      	movs	r6, #1
    7168:	f10b 0502 	add.w	r5, fp, #2
    716c:	b167      	cbz	r7, 7188 <_strtol_l.isra.0+0x4c>
    716e:	2f10      	cmp	r7, #16
    7170:	d114      	bne.n	719c <_strtol_l.isra.0+0x60>
    7172:	2c30      	cmp	r4, #48	; 0x30
    7174:	d00a      	beq.n	718c <_strtol_l.isra.0+0x50>
    7176:	e011      	b.n	719c <_strtol_l.isra.0+0x60>
    7178:	46ab      	mov	fp, r5
    717a:	e7e6      	b.n	714a <_strtol_l.isra.0+0xe>
    717c:	2c2b      	cmp	r4, #43	; 0x2b
    717e:	bf04      	itt	eq
    7180:	782c      	ldrbeq	r4, [r5, #0]
    7182:	f10b 0502 	addeq.w	r5, fp, #2
    7186:	e7f1      	b.n	716c <_strtol_l.isra.0+0x30>
    7188:	2c30      	cmp	r4, #48	; 0x30
    718a:	d127      	bne.n	71dc <_strtol_l.isra.0+0xa0>
    718c:	782b      	ldrb	r3, [r5, #0]
    718e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7192:	2b58      	cmp	r3, #88	; 0x58
    7194:	d14b      	bne.n	722e <_strtol_l.isra.0+0xf2>
    7196:	786c      	ldrb	r4, [r5, #1]
    7198:	2710      	movs	r7, #16
    719a:	3502      	adds	r5, #2
    719c:	2e00      	cmp	r6, #0
    719e:	bf0c      	ite	eq
    71a0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    71a4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    71a8:	2200      	movs	r2, #0
    71aa:	fbb1 fef7 	udiv	lr, r1, r7
    71ae:	4610      	mov	r0, r2
    71b0:	fb07 1c1e 	mls	ip, r7, lr, r1
    71b4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    71b8:	2b09      	cmp	r3, #9
    71ba:	d811      	bhi.n	71e0 <_strtol_l.isra.0+0xa4>
    71bc:	461c      	mov	r4, r3
    71be:	42a7      	cmp	r7, r4
    71c0:	dd1d      	ble.n	71fe <_strtol_l.isra.0+0xc2>
    71c2:	1c53      	adds	r3, r2, #1
    71c4:	d007      	beq.n	71d6 <_strtol_l.isra.0+0x9a>
    71c6:	4586      	cmp	lr, r0
    71c8:	d316      	bcc.n	71f8 <_strtol_l.isra.0+0xbc>
    71ca:	d101      	bne.n	71d0 <_strtol_l.isra.0+0x94>
    71cc:	45a4      	cmp	ip, r4
    71ce:	db13      	blt.n	71f8 <_strtol_l.isra.0+0xbc>
    71d0:	fb00 4007 	mla	r0, r0, r7, r4
    71d4:	2201      	movs	r2, #1
    71d6:	f815 4b01 	ldrb.w	r4, [r5], #1
    71da:	e7eb      	b.n	71b4 <_strtol_l.isra.0+0x78>
    71dc:	270a      	movs	r7, #10
    71de:	e7dd      	b.n	719c <_strtol_l.isra.0+0x60>
    71e0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    71e4:	2b19      	cmp	r3, #25
    71e6:	d801      	bhi.n	71ec <_strtol_l.isra.0+0xb0>
    71e8:	3c37      	subs	r4, #55	; 0x37
    71ea:	e7e8      	b.n	71be <_strtol_l.isra.0+0x82>
    71ec:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    71f0:	2b19      	cmp	r3, #25
    71f2:	d804      	bhi.n	71fe <_strtol_l.isra.0+0xc2>
    71f4:	3c57      	subs	r4, #87	; 0x57
    71f6:	e7e2      	b.n	71be <_strtol_l.isra.0+0x82>
    71f8:	f04f 32ff 	mov.w	r2, #4294967295
    71fc:	e7eb      	b.n	71d6 <_strtol_l.isra.0+0x9a>
    71fe:	1c53      	adds	r3, r2, #1
    7200:	d108      	bne.n	7214 <_strtol_l.isra.0+0xd8>
    7202:	2322      	movs	r3, #34	; 0x22
    7204:	f8c8 3000 	str.w	r3, [r8]
    7208:	4608      	mov	r0, r1
    720a:	f1ba 0f00 	cmp.w	sl, #0
    720e:	d107      	bne.n	7220 <_strtol_l.isra.0+0xe4>
    7210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7214:	b106      	cbz	r6, 7218 <_strtol_l.isra.0+0xdc>
    7216:	4240      	negs	r0, r0
    7218:	f1ba 0f00 	cmp.w	sl, #0
    721c:	d00c      	beq.n	7238 <_strtol_l.isra.0+0xfc>
    721e:	b122      	cbz	r2, 722a <_strtol_l.isra.0+0xee>
    7220:	3d01      	subs	r5, #1
    7222:	f8ca 5000 	str.w	r5, [sl]
    7226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    722a:	464d      	mov	r5, r9
    722c:	e7f9      	b.n	7222 <_strtol_l.isra.0+0xe6>
    722e:	2430      	movs	r4, #48	; 0x30
    7230:	2f00      	cmp	r7, #0
    7232:	d1b3      	bne.n	719c <_strtol_l.isra.0+0x60>
    7234:	2708      	movs	r7, #8
    7236:	e7b1      	b.n	719c <_strtol_l.isra.0+0x60>
    7238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000723c <_strtol_r>:
    723c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    723e:	4c06      	ldr	r4, [pc, #24]	; (7258 <_strtol_r+0x1c>)
    7240:	4d06      	ldr	r5, [pc, #24]	; (725c <_strtol_r+0x20>)
    7242:	6824      	ldr	r4, [r4, #0]
    7244:	6a24      	ldr	r4, [r4, #32]
    7246:	2c00      	cmp	r4, #0
    7248:	bf08      	it	eq
    724a:	462c      	moveq	r4, r5
    724c:	9400      	str	r4, [sp, #0]
    724e:	f7ff ff75 	bl	713c <_strtol_l.isra.0>
    7252:	b003      	add	sp, #12
    7254:	bd30      	pop	{r4, r5, pc}
    7256:	bf00      	nop
    7258:	200002f0 	.word	0x200002f0
    725c:	20000354 	.word	0x20000354

00007260 <strtol>:
    7260:	4b08      	ldr	r3, [pc, #32]	; (7284 <strtol+0x24>)
    7262:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7264:	681c      	ldr	r4, [r3, #0]
    7266:	4d08      	ldr	r5, [pc, #32]	; (7288 <strtol+0x28>)
    7268:	6a23      	ldr	r3, [r4, #32]
    726a:	2b00      	cmp	r3, #0
    726c:	bf08      	it	eq
    726e:	462b      	moveq	r3, r5
    7270:	9300      	str	r3, [sp, #0]
    7272:	4613      	mov	r3, r2
    7274:	460a      	mov	r2, r1
    7276:	4601      	mov	r1, r0
    7278:	4620      	mov	r0, r4
    727a:	f7ff ff5f 	bl	713c <_strtol_l.isra.0>
    727e:	b003      	add	sp, #12
    7280:	bd30      	pop	{r4, r5, pc}
    7282:	bf00      	nop
    7284:	200002f0 	.word	0x200002f0
    7288:	20000354 	.word	0x20000354

0000728c <__swbuf_r>:
    728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    728e:	460e      	mov	r6, r1
    7290:	4614      	mov	r4, r2
    7292:	4605      	mov	r5, r0
    7294:	b118      	cbz	r0, 729e <__swbuf_r+0x12>
    7296:	6983      	ldr	r3, [r0, #24]
    7298:	b90b      	cbnz	r3, 729e <__swbuf_r+0x12>
    729a:	f7ff fbc5 	bl	6a28 <__sinit>
    729e:	4b21      	ldr	r3, [pc, #132]	; (7324 <__swbuf_r+0x98>)
    72a0:	429c      	cmp	r4, r3
    72a2:	d12a      	bne.n	72fa <__swbuf_r+0x6e>
    72a4:	686c      	ldr	r4, [r5, #4]
    72a6:	69a3      	ldr	r3, [r4, #24]
    72a8:	60a3      	str	r3, [r4, #8]
    72aa:	89a3      	ldrh	r3, [r4, #12]
    72ac:	071a      	lsls	r2, r3, #28
    72ae:	d52e      	bpl.n	730e <__swbuf_r+0x82>
    72b0:	6923      	ldr	r3, [r4, #16]
    72b2:	b363      	cbz	r3, 730e <__swbuf_r+0x82>
    72b4:	6923      	ldr	r3, [r4, #16]
    72b6:	6820      	ldr	r0, [r4, #0]
    72b8:	1ac0      	subs	r0, r0, r3
    72ba:	6963      	ldr	r3, [r4, #20]
    72bc:	b2f6      	uxtb	r6, r6
    72be:	4298      	cmp	r0, r3
    72c0:	4637      	mov	r7, r6
    72c2:	db04      	blt.n	72ce <__swbuf_r+0x42>
    72c4:	4621      	mov	r1, r4
    72c6:	4628      	mov	r0, r5
    72c8:	f7ff fb32 	bl	6930 <_fflush_r>
    72cc:	bb28      	cbnz	r0, 731a <__swbuf_r+0x8e>
    72ce:	68a3      	ldr	r3, [r4, #8]
    72d0:	3b01      	subs	r3, #1
    72d2:	60a3      	str	r3, [r4, #8]
    72d4:	6823      	ldr	r3, [r4, #0]
    72d6:	1c5a      	adds	r2, r3, #1
    72d8:	6022      	str	r2, [r4, #0]
    72da:	701e      	strb	r6, [r3, #0]
    72dc:	6963      	ldr	r3, [r4, #20]
    72de:	3001      	adds	r0, #1
    72e0:	4298      	cmp	r0, r3
    72e2:	d004      	beq.n	72ee <__swbuf_r+0x62>
    72e4:	89a3      	ldrh	r3, [r4, #12]
    72e6:	07db      	lsls	r3, r3, #31
    72e8:	d519      	bpl.n	731e <__swbuf_r+0x92>
    72ea:	2e0a      	cmp	r6, #10
    72ec:	d117      	bne.n	731e <__swbuf_r+0x92>
    72ee:	4621      	mov	r1, r4
    72f0:	4628      	mov	r0, r5
    72f2:	f7ff fb1d 	bl	6930 <_fflush_r>
    72f6:	b190      	cbz	r0, 731e <__swbuf_r+0x92>
    72f8:	e00f      	b.n	731a <__swbuf_r+0x8e>
    72fa:	4b0b      	ldr	r3, [pc, #44]	; (7328 <__swbuf_r+0x9c>)
    72fc:	429c      	cmp	r4, r3
    72fe:	d101      	bne.n	7304 <__swbuf_r+0x78>
    7300:	68ac      	ldr	r4, [r5, #8]
    7302:	e7d0      	b.n	72a6 <__swbuf_r+0x1a>
    7304:	4b09      	ldr	r3, [pc, #36]	; (732c <__swbuf_r+0xa0>)
    7306:	429c      	cmp	r4, r3
    7308:	bf08      	it	eq
    730a:	68ec      	ldreq	r4, [r5, #12]
    730c:	e7cb      	b.n	72a6 <__swbuf_r+0x1a>
    730e:	4621      	mov	r1, r4
    7310:	4628      	mov	r0, r5
    7312:	f000 f81f 	bl	7354 <__swsetup_r>
    7316:	2800      	cmp	r0, #0
    7318:	d0cc      	beq.n	72b4 <__swbuf_r+0x28>
    731a:	f04f 37ff 	mov.w	r7, #4294967295
    731e:	4638      	mov	r0, r7
    7320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7322:	bf00      	nop
    7324:	00009c70 	.word	0x00009c70
    7328:	00009c90 	.word	0x00009c90
    732c:	00009c50 	.word	0x00009c50

00007330 <_write_r>:
    7330:	b538      	push	{r3, r4, r5, lr}
    7332:	4c07      	ldr	r4, [pc, #28]	; (7350 <_write_r+0x20>)
    7334:	4605      	mov	r5, r0
    7336:	4608      	mov	r0, r1
    7338:	4611      	mov	r1, r2
    733a:	2200      	movs	r2, #0
    733c:	6022      	str	r2, [r4, #0]
    733e:	461a      	mov	r2, r3
    7340:	f7fe fcac 	bl	5c9c <_write>
    7344:	1c43      	adds	r3, r0, #1
    7346:	d102      	bne.n	734e <_write_r+0x1e>
    7348:	6823      	ldr	r3, [r4, #0]
    734a:	b103      	cbz	r3, 734e <_write_r+0x1e>
    734c:	602b      	str	r3, [r5, #0]
    734e:	bd38      	pop	{r3, r4, r5, pc}
    7350:	200012d4 	.word	0x200012d4

00007354 <__swsetup_r>:
    7354:	4b32      	ldr	r3, [pc, #200]	; (7420 <__swsetup_r+0xcc>)
    7356:	b570      	push	{r4, r5, r6, lr}
    7358:	681d      	ldr	r5, [r3, #0]
    735a:	4606      	mov	r6, r0
    735c:	460c      	mov	r4, r1
    735e:	b125      	cbz	r5, 736a <__swsetup_r+0x16>
    7360:	69ab      	ldr	r3, [r5, #24]
    7362:	b913      	cbnz	r3, 736a <__swsetup_r+0x16>
    7364:	4628      	mov	r0, r5
    7366:	f7ff fb5f 	bl	6a28 <__sinit>
    736a:	4b2e      	ldr	r3, [pc, #184]	; (7424 <__swsetup_r+0xd0>)
    736c:	429c      	cmp	r4, r3
    736e:	d10f      	bne.n	7390 <__swsetup_r+0x3c>
    7370:	686c      	ldr	r4, [r5, #4]
    7372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7376:	b29a      	uxth	r2, r3
    7378:	0715      	lsls	r5, r2, #28
    737a:	d42c      	bmi.n	73d6 <__swsetup_r+0x82>
    737c:	06d0      	lsls	r0, r2, #27
    737e:	d411      	bmi.n	73a4 <__swsetup_r+0x50>
    7380:	2209      	movs	r2, #9
    7382:	6032      	str	r2, [r6, #0]
    7384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7388:	81a3      	strh	r3, [r4, #12]
    738a:	f04f 30ff 	mov.w	r0, #4294967295
    738e:	bd70      	pop	{r4, r5, r6, pc}
    7390:	4b25      	ldr	r3, [pc, #148]	; (7428 <__swsetup_r+0xd4>)
    7392:	429c      	cmp	r4, r3
    7394:	d101      	bne.n	739a <__swsetup_r+0x46>
    7396:	68ac      	ldr	r4, [r5, #8]
    7398:	e7eb      	b.n	7372 <__swsetup_r+0x1e>
    739a:	4b24      	ldr	r3, [pc, #144]	; (742c <__swsetup_r+0xd8>)
    739c:	429c      	cmp	r4, r3
    739e:	bf08      	it	eq
    73a0:	68ec      	ldreq	r4, [r5, #12]
    73a2:	e7e6      	b.n	7372 <__swsetup_r+0x1e>
    73a4:	0751      	lsls	r1, r2, #29
    73a6:	d512      	bpl.n	73ce <__swsetup_r+0x7a>
    73a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    73aa:	b141      	cbz	r1, 73be <__swsetup_r+0x6a>
    73ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
    73b0:	4299      	cmp	r1, r3
    73b2:	d002      	beq.n	73ba <__swsetup_r+0x66>
    73b4:	4630      	mov	r0, r6
    73b6:	f7ff fc09 	bl	6bcc <_free_r>
    73ba:	2300      	movs	r3, #0
    73bc:	6363      	str	r3, [r4, #52]	; 0x34
    73be:	89a3      	ldrh	r3, [r4, #12]
    73c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    73c4:	81a3      	strh	r3, [r4, #12]
    73c6:	2300      	movs	r3, #0
    73c8:	6063      	str	r3, [r4, #4]
    73ca:	6923      	ldr	r3, [r4, #16]
    73cc:	6023      	str	r3, [r4, #0]
    73ce:	89a3      	ldrh	r3, [r4, #12]
    73d0:	f043 0308 	orr.w	r3, r3, #8
    73d4:	81a3      	strh	r3, [r4, #12]
    73d6:	6923      	ldr	r3, [r4, #16]
    73d8:	b94b      	cbnz	r3, 73ee <__swsetup_r+0x9a>
    73da:	89a3      	ldrh	r3, [r4, #12]
    73dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
    73e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    73e4:	d003      	beq.n	73ee <__swsetup_r+0x9a>
    73e6:	4621      	mov	r1, r4
    73e8:	4630      	mov	r0, r6
    73ea:	f000 f879 	bl	74e0 <__smakebuf_r>
    73ee:	89a2      	ldrh	r2, [r4, #12]
    73f0:	f012 0301 	ands.w	r3, r2, #1
    73f4:	d00c      	beq.n	7410 <__swsetup_r+0xbc>
    73f6:	2300      	movs	r3, #0
    73f8:	60a3      	str	r3, [r4, #8]
    73fa:	6963      	ldr	r3, [r4, #20]
    73fc:	425b      	negs	r3, r3
    73fe:	61a3      	str	r3, [r4, #24]
    7400:	6923      	ldr	r3, [r4, #16]
    7402:	b953      	cbnz	r3, 741a <__swsetup_r+0xc6>
    7404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7408:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    740c:	d1ba      	bne.n	7384 <__swsetup_r+0x30>
    740e:	bd70      	pop	{r4, r5, r6, pc}
    7410:	0792      	lsls	r2, r2, #30
    7412:	bf58      	it	pl
    7414:	6963      	ldrpl	r3, [r4, #20]
    7416:	60a3      	str	r3, [r4, #8]
    7418:	e7f2      	b.n	7400 <__swsetup_r+0xac>
    741a:	2000      	movs	r0, #0
    741c:	e7f7      	b.n	740e <__swsetup_r+0xba>
    741e:	bf00      	nop
    7420:	200002f0 	.word	0x200002f0
    7424:	00009c70 	.word	0x00009c70
    7428:	00009c90 	.word	0x00009c90
    742c:	00009c50 	.word	0x00009c50

00007430 <_close_r>:
    7430:	b538      	push	{r3, r4, r5, lr}
    7432:	4c06      	ldr	r4, [pc, #24]	; (744c <_close_r+0x1c>)
    7434:	2300      	movs	r3, #0
    7436:	4605      	mov	r5, r0
    7438:	4608      	mov	r0, r1
    743a:	6023      	str	r3, [r4, #0]
    743c:	f7fb fa9e 	bl	297c <_close>
    7440:	1c43      	adds	r3, r0, #1
    7442:	d102      	bne.n	744a <_close_r+0x1a>
    7444:	6823      	ldr	r3, [r4, #0]
    7446:	b103      	cbz	r3, 744a <_close_r+0x1a>
    7448:	602b      	str	r3, [r5, #0]
    744a:	bd38      	pop	{r3, r4, r5, pc}
    744c:	200012d4 	.word	0x200012d4

00007450 <__locale_ctype_ptr_l>:
    7450:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    7454:	4770      	bx	lr
	...

00007458 <__locale_ctype_ptr>:
    7458:	4b04      	ldr	r3, [pc, #16]	; (746c <__locale_ctype_ptr+0x14>)
    745a:	4a05      	ldr	r2, [pc, #20]	; (7470 <__locale_ctype_ptr+0x18>)
    745c:	681b      	ldr	r3, [r3, #0]
    745e:	6a1b      	ldr	r3, [r3, #32]
    7460:	2b00      	cmp	r3, #0
    7462:	bf08      	it	eq
    7464:	4613      	moveq	r3, r2
    7466:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    746a:	4770      	bx	lr
    746c:	200002f0 	.word	0x200002f0
    7470:	20000354 	.word	0x20000354

00007474 <_lseek_r>:
    7474:	b538      	push	{r3, r4, r5, lr}
    7476:	4c07      	ldr	r4, [pc, #28]	; (7494 <_lseek_r+0x20>)
    7478:	4605      	mov	r5, r0
    747a:	4608      	mov	r0, r1
    747c:	4611      	mov	r1, r2
    747e:	2200      	movs	r2, #0
    7480:	6022      	str	r2, [r4, #0]
    7482:	461a      	mov	r2, r3
    7484:	f7fb fa84 	bl	2990 <_lseek>
    7488:	1c43      	adds	r3, r0, #1
    748a:	d102      	bne.n	7492 <_lseek_r+0x1e>
    748c:	6823      	ldr	r3, [r4, #0]
    748e:	b103      	cbz	r3, 7492 <_lseek_r+0x1e>
    7490:	602b      	str	r3, [r5, #0]
    7492:	bd38      	pop	{r3, r4, r5, pc}
    7494:	200012d4 	.word	0x200012d4

00007498 <__swhatbuf_r>:
    7498:	b570      	push	{r4, r5, r6, lr}
    749a:	460e      	mov	r6, r1
    749c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    74a0:	2900      	cmp	r1, #0
    74a2:	b090      	sub	sp, #64	; 0x40
    74a4:	4614      	mov	r4, r2
    74a6:	461d      	mov	r5, r3
    74a8:	da07      	bge.n	74ba <__swhatbuf_r+0x22>
    74aa:	2300      	movs	r3, #0
    74ac:	602b      	str	r3, [r5, #0]
    74ae:	89b3      	ldrh	r3, [r6, #12]
    74b0:	061a      	lsls	r2, r3, #24
    74b2:	d410      	bmi.n	74d6 <__swhatbuf_r+0x3e>
    74b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    74b8:	e00e      	b.n	74d8 <__swhatbuf_r+0x40>
    74ba:	aa01      	add	r2, sp, #4
    74bc:	f001 f986 	bl	87cc <_fstat_r>
    74c0:	2800      	cmp	r0, #0
    74c2:	dbf2      	blt.n	74aa <__swhatbuf_r+0x12>
    74c4:	9a02      	ldr	r2, [sp, #8]
    74c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    74ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    74ce:	425a      	negs	r2, r3
    74d0:	415a      	adcs	r2, r3
    74d2:	602a      	str	r2, [r5, #0]
    74d4:	e7ee      	b.n	74b4 <__swhatbuf_r+0x1c>
    74d6:	2340      	movs	r3, #64	; 0x40
    74d8:	2000      	movs	r0, #0
    74da:	6023      	str	r3, [r4, #0]
    74dc:	b010      	add	sp, #64	; 0x40
    74de:	bd70      	pop	{r4, r5, r6, pc}

000074e0 <__smakebuf_r>:
    74e0:	898b      	ldrh	r3, [r1, #12]
    74e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    74e4:	079d      	lsls	r5, r3, #30
    74e6:	4606      	mov	r6, r0
    74e8:	460c      	mov	r4, r1
    74ea:	d507      	bpl.n	74fc <__smakebuf_r+0x1c>
    74ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
    74f0:	6023      	str	r3, [r4, #0]
    74f2:	6123      	str	r3, [r4, #16]
    74f4:	2301      	movs	r3, #1
    74f6:	6163      	str	r3, [r4, #20]
    74f8:	b002      	add	sp, #8
    74fa:	bd70      	pop	{r4, r5, r6, pc}
    74fc:	ab01      	add	r3, sp, #4
    74fe:	466a      	mov	r2, sp
    7500:	f7ff ffca 	bl	7498 <__swhatbuf_r>
    7504:	9900      	ldr	r1, [sp, #0]
    7506:	4605      	mov	r5, r0
    7508:	4630      	mov	r0, r6
    750a:	f7ff fbad 	bl	6c68 <_malloc_r>
    750e:	b948      	cbnz	r0, 7524 <__smakebuf_r+0x44>
    7510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7514:	059a      	lsls	r2, r3, #22
    7516:	d4ef      	bmi.n	74f8 <__smakebuf_r+0x18>
    7518:	f023 0303 	bic.w	r3, r3, #3
    751c:	f043 0302 	orr.w	r3, r3, #2
    7520:	81a3      	strh	r3, [r4, #12]
    7522:	e7e3      	b.n	74ec <__smakebuf_r+0xc>
    7524:	4b0d      	ldr	r3, [pc, #52]	; (755c <__smakebuf_r+0x7c>)
    7526:	62b3      	str	r3, [r6, #40]	; 0x28
    7528:	89a3      	ldrh	r3, [r4, #12]
    752a:	6020      	str	r0, [r4, #0]
    752c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7530:	81a3      	strh	r3, [r4, #12]
    7532:	9b00      	ldr	r3, [sp, #0]
    7534:	6163      	str	r3, [r4, #20]
    7536:	9b01      	ldr	r3, [sp, #4]
    7538:	6120      	str	r0, [r4, #16]
    753a:	b15b      	cbz	r3, 7554 <__smakebuf_r+0x74>
    753c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7540:	4630      	mov	r0, r6
    7542:	f001 f955 	bl	87f0 <_isatty_r>
    7546:	b128      	cbz	r0, 7554 <__smakebuf_r+0x74>
    7548:	89a3      	ldrh	r3, [r4, #12]
    754a:	f023 0303 	bic.w	r3, r3, #3
    754e:	f043 0301 	orr.w	r3, r3, #1
    7552:	81a3      	strh	r3, [r4, #12]
    7554:	89a3      	ldrh	r3, [r4, #12]
    7556:	431d      	orrs	r5, r3
    7558:	81a5      	strh	r5, [r4, #12]
    755a:	e7cd      	b.n	74f8 <__smakebuf_r+0x18>
    755c:	000069a9 	.word	0x000069a9

00007560 <malloc>:
    7560:	4b02      	ldr	r3, [pc, #8]	; (756c <malloc+0xc>)
    7562:	4601      	mov	r1, r0
    7564:	6818      	ldr	r0, [r3, #0]
    7566:	f7ff bb7f 	b.w	6c68 <_malloc_r>
    756a:	bf00      	nop
    756c:	200002f0 	.word	0x200002f0

00007570 <__ascii_mbtowc>:
    7570:	b082      	sub	sp, #8
    7572:	b901      	cbnz	r1, 7576 <__ascii_mbtowc+0x6>
    7574:	a901      	add	r1, sp, #4
    7576:	b142      	cbz	r2, 758a <__ascii_mbtowc+0x1a>
    7578:	b14b      	cbz	r3, 758e <__ascii_mbtowc+0x1e>
    757a:	7813      	ldrb	r3, [r2, #0]
    757c:	600b      	str	r3, [r1, #0]
    757e:	7812      	ldrb	r2, [r2, #0]
    7580:	1c10      	adds	r0, r2, #0
    7582:	bf18      	it	ne
    7584:	2001      	movne	r0, #1
    7586:	b002      	add	sp, #8
    7588:	4770      	bx	lr
    758a:	4610      	mov	r0, r2
    758c:	e7fb      	b.n	7586 <__ascii_mbtowc+0x16>
    758e:	f06f 0001 	mvn.w	r0, #1
    7592:	e7f8      	b.n	7586 <__ascii_mbtowc+0x16>

00007594 <__malloc_lock>:
    7594:	4770      	bx	lr

00007596 <__malloc_unlock>:
    7596:	4770      	bx	lr

00007598 <__ssputs_r>:
    7598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    759c:	688e      	ldr	r6, [r1, #8]
    759e:	429e      	cmp	r6, r3
    75a0:	4682      	mov	sl, r0
    75a2:	460c      	mov	r4, r1
    75a4:	4691      	mov	r9, r2
    75a6:	4698      	mov	r8, r3
    75a8:	d835      	bhi.n	7616 <__ssputs_r+0x7e>
    75aa:	898a      	ldrh	r2, [r1, #12]
    75ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
    75b0:	d031      	beq.n	7616 <__ssputs_r+0x7e>
    75b2:	6825      	ldr	r5, [r4, #0]
    75b4:	6909      	ldr	r1, [r1, #16]
    75b6:	1a6f      	subs	r7, r5, r1
    75b8:	6965      	ldr	r5, [r4, #20]
    75ba:	2302      	movs	r3, #2
    75bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    75c0:	fb95 f5f3 	sdiv	r5, r5, r3
    75c4:	f108 0301 	add.w	r3, r8, #1
    75c8:	443b      	add	r3, r7
    75ca:	429d      	cmp	r5, r3
    75cc:	bf38      	it	cc
    75ce:	461d      	movcc	r5, r3
    75d0:	0553      	lsls	r3, r2, #21
    75d2:	d531      	bpl.n	7638 <__ssputs_r+0xa0>
    75d4:	4629      	mov	r1, r5
    75d6:	f7ff fb47 	bl	6c68 <_malloc_r>
    75da:	4606      	mov	r6, r0
    75dc:	b950      	cbnz	r0, 75f4 <__ssputs_r+0x5c>
    75de:	230c      	movs	r3, #12
    75e0:	f8ca 3000 	str.w	r3, [sl]
    75e4:	89a3      	ldrh	r3, [r4, #12]
    75e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    75ea:	81a3      	strh	r3, [r4, #12]
    75ec:	f04f 30ff 	mov.w	r0, #4294967295
    75f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75f4:	463a      	mov	r2, r7
    75f6:	6921      	ldr	r1, [r4, #16]
    75f8:	f001 f95a 	bl	88b0 <memcpy>
    75fc:	89a3      	ldrh	r3, [r4, #12]
    75fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    7602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7606:	81a3      	strh	r3, [r4, #12]
    7608:	6126      	str	r6, [r4, #16]
    760a:	6165      	str	r5, [r4, #20]
    760c:	443e      	add	r6, r7
    760e:	1bed      	subs	r5, r5, r7
    7610:	6026      	str	r6, [r4, #0]
    7612:	60a5      	str	r5, [r4, #8]
    7614:	4646      	mov	r6, r8
    7616:	4546      	cmp	r6, r8
    7618:	bf28      	it	cs
    761a:	4646      	movcs	r6, r8
    761c:	4632      	mov	r2, r6
    761e:	4649      	mov	r1, r9
    7620:	6820      	ldr	r0, [r4, #0]
    7622:	f001 f950 	bl	88c6 <memmove>
    7626:	68a3      	ldr	r3, [r4, #8]
    7628:	1b9b      	subs	r3, r3, r6
    762a:	60a3      	str	r3, [r4, #8]
    762c:	6823      	ldr	r3, [r4, #0]
    762e:	441e      	add	r6, r3
    7630:	6026      	str	r6, [r4, #0]
    7632:	2000      	movs	r0, #0
    7634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7638:	462a      	mov	r2, r5
    763a:	f001 f95e 	bl	88fa <_realloc_r>
    763e:	4606      	mov	r6, r0
    7640:	2800      	cmp	r0, #0
    7642:	d1e1      	bne.n	7608 <__ssputs_r+0x70>
    7644:	6921      	ldr	r1, [r4, #16]
    7646:	4650      	mov	r0, sl
    7648:	f7ff fac0 	bl	6bcc <_free_r>
    764c:	e7c7      	b.n	75de <__ssputs_r+0x46>
	...

00007650 <_svfiprintf_r>:
    7650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7654:	b09d      	sub	sp, #116	; 0x74
    7656:	4680      	mov	r8, r0
    7658:	9303      	str	r3, [sp, #12]
    765a:	898b      	ldrh	r3, [r1, #12]
    765c:	061c      	lsls	r4, r3, #24
    765e:	460d      	mov	r5, r1
    7660:	4616      	mov	r6, r2
    7662:	d50f      	bpl.n	7684 <_svfiprintf_r+0x34>
    7664:	690b      	ldr	r3, [r1, #16]
    7666:	b96b      	cbnz	r3, 7684 <_svfiprintf_r+0x34>
    7668:	2140      	movs	r1, #64	; 0x40
    766a:	f7ff fafd 	bl	6c68 <_malloc_r>
    766e:	6028      	str	r0, [r5, #0]
    7670:	6128      	str	r0, [r5, #16]
    7672:	b928      	cbnz	r0, 7680 <_svfiprintf_r+0x30>
    7674:	230c      	movs	r3, #12
    7676:	f8c8 3000 	str.w	r3, [r8]
    767a:	f04f 30ff 	mov.w	r0, #4294967295
    767e:	e0c5      	b.n	780c <_svfiprintf_r+0x1bc>
    7680:	2340      	movs	r3, #64	; 0x40
    7682:	616b      	str	r3, [r5, #20]
    7684:	2300      	movs	r3, #0
    7686:	9309      	str	r3, [sp, #36]	; 0x24
    7688:	2320      	movs	r3, #32
    768a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    768e:	2330      	movs	r3, #48	; 0x30
    7690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7694:	f04f 0b01 	mov.w	fp, #1
    7698:	4637      	mov	r7, r6
    769a:	463c      	mov	r4, r7
    769c:	f814 3b01 	ldrb.w	r3, [r4], #1
    76a0:	2b00      	cmp	r3, #0
    76a2:	d13c      	bne.n	771e <_svfiprintf_r+0xce>
    76a4:	ebb7 0a06 	subs.w	sl, r7, r6
    76a8:	d00b      	beq.n	76c2 <_svfiprintf_r+0x72>
    76aa:	4653      	mov	r3, sl
    76ac:	4632      	mov	r2, r6
    76ae:	4629      	mov	r1, r5
    76b0:	4640      	mov	r0, r8
    76b2:	f7ff ff71 	bl	7598 <__ssputs_r>
    76b6:	3001      	adds	r0, #1
    76b8:	f000 80a3 	beq.w	7802 <_svfiprintf_r+0x1b2>
    76bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    76be:	4453      	add	r3, sl
    76c0:	9309      	str	r3, [sp, #36]	; 0x24
    76c2:	783b      	ldrb	r3, [r7, #0]
    76c4:	2b00      	cmp	r3, #0
    76c6:	f000 809c 	beq.w	7802 <_svfiprintf_r+0x1b2>
    76ca:	2300      	movs	r3, #0
    76cc:	f04f 32ff 	mov.w	r2, #4294967295
    76d0:	9304      	str	r3, [sp, #16]
    76d2:	9307      	str	r3, [sp, #28]
    76d4:	9205      	str	r2, [sp, #20]
    76d6:	9306      	str	r3, [sp, #24]
    76d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    76dc:	931a      	str	r3, [sp, #104]	; 0x68
    76de:	2205      	movs	r2, #5
    76e0:	7821      	ldrb	r1, [r4, #0]
    76e2:	4850      	ldr	r0, [pc, #320]	; (7824 <_svfiprintf_r+0x1d4>)
    76e4:	f001 f894 	bl	8810 <memchr>
    76e8:	1c67      	adds	r7, r4, #1
    76ea:	9b04      	ldr	r3, [sp, #16]
    76ec:	b9d8      	cbnz	r0, 7726 <_svfiprintf_r+0xd6>
    76ee:	06d9      	lsls	r1, r3, #27
    76f0:	bf44      	itt	mi
    76f2:	2220      	movmi	r2, #32
    76f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    76f8:	071a      	lsls	r2, r3, #28
    76fa:	bf44      	itt	mi
    76fc:	222b      	movmi	r2, #43	; 0x2b
    76fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7702:	7822      	ldrb	r2, [r4, #0]
    7704:	2a2a      	cmp	r2, #42	; 0x2a
    7706:	d016      	beq.n	7736 <_svfiprintf_r+0xe6>
    7708:	9a07      	ldr	r2, [sp, #28]
    770a:	2100      	movs	r1, #0
    770c:	200a      	movs	r0, #10
    770e:	4627      	mov	r7, r4
    7710:	3401      	adds	r4, #1
    7712:	783b      	ldrb	r3, [r7, #0]
    7714:	3b30      	subs	r3, #48	; 0x30
    7716:	2b09      	cmp	r3, #9
    7718:	d951      	bls.n	77be <_svfiprintf_r+0x16e>
    771a:	b1c9      	cbz	r1, 7750 <_svfiprintf_r+0x100>
    771c:	e011      	b.n	7742 <_svfiprintf_r+0xf2>
    771e:	2b25      	cmp	r3, #37	; 0x25
    7720:	d0c0      	beq.n	76a4 <_svfiprintf_r+0x54>
    7722:	4627      	mov	r7, r4
    7724:	e7b9      	b.n	769a <_svfiprintf_r+0x4a>
    7726:	4a3f      	ldr	r2, [pc, #252]	; (7824 <_svfiprintf_r+0x1d4>)
    7728:	1a80      	subs	r0, r0, r2
    772a:	fa0b f000 	lsl.w	r0, fp, r0
    772e:	4318      	orrs	r0, r3
    7730:	9004      	str	r0, [sp, #16]
    7732:	463c      	mov	r4, r7
    7734:	e7d3      	b.n	76de <_svfiprintf_r+0x8e>
    7736:	9a03      	ldr	r2, [sp, #12]
    7738:	1d11      	adds	r1, r2, #4
    773a:	6812      	ldr	r2, [r2, #0]
    773c:	9103      	str	r1, [sp, #12]
    773e:	2a00      	cmp	r2, #0
    7740:	db01      	blt.n	7746 <_svfiprintf_r+0xf6>
    7742:	9207      	str	r2, [sp, #28]
    7744:	e004      	b.n	7750 <_svfiprintf_r+0x100>
    7746:	4252      	negs	r2, r2
    7748:	f043 0302 	orr.w	r3, r3, #2
    774c:	9207      	str	r2, [sp, #28]
    774e:	9304      	str	r3, [sp, #16]
    7750:	783b      	ldrb	r3, [r7, #0]
    7752:	2b2e      	cmp	r3, #46	; 0x2e
    7754:	d10e      	bne.n	7774 <_svfiprintf_r+0x124>
    7756:	787b      	ldrb	r3, [r7, #1]
    7758:	2b2a      	cmp	r3, #42	; 0x2a
    775a:	f107 0101 	add.w	r1, r7, #1
    775e:	d132      	bne.n	77c6 <_svfiprintf_r+0x176>
    7760:	9b03      	ldr	r3, [sp, #12]
    7762:	1d1a      	adds	r2, r3, #4
    7764:	681b      	ldr	r3, [r3, #0]
    7766:	9203      	str	r2, [sp, #12]
    7768:	2b00      	cmp	r3, #0
    776a:	bfb8      	it	lt
    776c:	f04f 33ff 	movlt.w	r3, #4294967295
    7770:	3702      	adds	r7, #2
    7772:	9305      	str	r3, [sp, #20]
    7774:	4c2c      	ldr	r4, [pc, #176]	; (7828 <_svfiprintf_r+0x1d8>)
    7776:	7839      	ldrb	r1, [r7, #0]
    7778:	2203      	movs	r2, #3
    777a:	4620      	mov	r0, r4
    777c:	f001 f848 	bl	8810 <memchr>
    7780:	b138      	cbz	r0, 7792 <_svfiprintf_r+0x142>
    7782:	2340      	movs	r3, #64	; 0x40
    7784:	1b00      	subs	r0, r0, r4
    7786:	fa03 f000 	lsl.w	r0, r3, r0
    778a:	9b04      	ldr	r3, [sp, #16]
    778c:	4303      	orrs	r3, r0
    778e:	9304      	str	r3, [sp, #16]
    7790:	3701      	adds	r7, #1
    7792:	7839      	ldrb	r1, [r7, #0]
    7794:	4825      	ldr	r0, [pc, #148]	; (782c <_svfiprintf_r+0x1dc>)
    7796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    779a:	2206      	movs	r2, #6
    779c:	1c7e      	adds	r6, r7, #1
    779e:	f001 f837 	bl	8810 <memchr>
    77a2:	2800      	cmp	r0, #0
    77a4:	d035      	beq.n	7812 <_svfiprintf_r+0x1c2>
    77a6:	4b22      	ldr	r3, [pc, #136]	; (7830 <_svfiprintf_r+0x1e0>)
    77a8:	b9fb      	cbnz	r3, 77ea <_svfiprintf_r+0x19a>
    77aa:	9b03      	ldr	r3, [sp, #12]
    77ac:	3307      	adds	r3, #7
    77ae:	f023 0307 	bic.w	r3, r3, #7
    77b2:	3308      	adds	r3, #8
    77b4:	9303      	str	r3, [sp, #12]
    77b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    77b8:	444b      	add	r3, r9
    77ba:	9309      	str	r3, [sp, #36]	; 0x24
    77bc:	e76c      	b.n	7698 <_svfiprintf_r+0x48>
    77be:	fb00 3202 	mla	r2, r0, r2, r3
    77c2:	2101      	movs	r1, #1
    77c4:	e7a3      	b.n	770e <_svfiprintf_r+0xbe>
    77c6:	2300      	movs	r3, #0
    77c8:	9305      	str	r3, [sp, #20]
    77ca:	4618      	mov	r0, r3
    77cc:	240a      	movs	r4, #10
    77ce:	460f      	mov	r7, r1
    77d0:	3101      	adds	r1, #1
    77d2:	783a      	ldrb	r2, [r7, #0]
    77d4:	3a30      	subs	r2, #48	; 0x30
    77d6:	2a09      	cmp	r2, #9
    77d8:	d903      	bls.n	77e2 <_svfiprintf_r+0x192>
    77da:	2b00      	cmp	r3, #0
    77dc:	d0ca      	beq.n	7774 <_svfiprintf_r+0x124>
    77de:	9005      	str	r0, [sp, #20]
    77e0:	e7c8      	b.n	7774 <_svfiprintf_r+0x124>
    77e2:	fb04 2000 	mla	r0, r4, r0, r2
    77e6:	2301      	movs	r3, #1
    77e8:	e7f1      	b.n	77ce <_svfiprintf_r+0x17e>
    77ea:	ab03      	add	r3, sp, #12
    77ec:	9300      	str	r3, [sp, #0]
    77ee:	462a      	mov	r2, r5
    77f0:	4b10      	ldr	r3, [pc, #64]	; (7834 <_svfiprintf_r+0x1e4>)
    77f2:	a904      	add	r1, sp, #16
    77f4:	4640      	mov	r0, r8
    77f6:	f3af 8000 	nop.w
    77fa:	f1b0 3fff 	cmp.w	r0, #4294967295
    77fe:	4681      	mov	r9, r0
    7800:	d1d9      	bne.n	77b6 <_svfiprintf_r+0x166>
    7802:	89ab      	ldrh	r3, [r5, #12]
    7804:	065b      	lsls	r3, r3, #25
    7806:	f53f af38 	bmi.w	767a <_svfiprintf_r+0x2a>
    780a:	9809      	ldr	r0, [sp, #36]	; 0x24
    780c:	b01d      	add	sp, #116	; 0x74
    780e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7812:	ab03      	add	r3, sp, #12
    7814:	9300      	str	r3, [sp, #0]
    7816:	462a      	mov	r2, r5
    7818:	4b06      	ldr	r3, [pc, #24]	; (7834 <_svfiprintf_r+0x1e4>)
    781a:	a904      	add	r1, sp, #16
    781c:	4640      	mov	r0, r8
    781e:	f000 f9bf 	bl	7ba0 <_printf_i>
    7822:	e7ea      	b.n	77fa <_svfiprintf_r+0x1aa>
    7824:	00009cbe 	.word	0x00009cbe
    7828:	00009cc4 	.word	0x00009cc4
    782c:	00009cc8 	.word	0x00009cc8
    7830:	00000000 	.word	0x00000000
    7834:	00007599 	.word	0x00007599

00007838 <__sfputc_r>:
    7838:	6893      	ldr	r3, [r2, #8]
    783a:	3b01      	subs	r3, #1
    783c:	2b00      	cmp	r3, #0
    783e:	b410      	push	{r4}
    7840:	6093      	str	r3, [r2, #8]
    7842:	da08      	bge.n	7856 <__sfputc_r+0x1e>
    7844:	6994      	ldr	r4, [r2, #24]
    7846:	42a3      	cmp	r3, r4
    7848:	db02      	blt.n	7850 <__sfputc_r+0x18>
    784a:	b2cb      	uxtb	r3, r1
    784c:	2b0a      	cmp	r3, #10
    784e:	d102      	bne.n	7856 <__sfputc_r+0x1e>
    7850:	bc10      	pop	{r4}
    7852:	f7ff bd1b 	b.w	728c <__swbuf_r>
    7856:	6813      	ldr	r3, [r2, #0]
    7858:	1c58      	adds	r0, r3, #1
    785a:	6010      	str	r0, [r2, #0]
    785c:	7019      	strb	r1, [r3, #0]
    785e:	b2c8      	uxtb	r0, r1
    7860:	bc10      	pop	{r4}
    7862:	4770      	bx	lr

00007864 <__sfputs_r>:
    7864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7866:	4606      	mov	r6, r0
    7868:	460f      	mov	r7, r1
    786a:	4614      	mov	r4, r2
    786c:	18d5      	adds	r5, r2, r3
    786e:	42ac      	cmp	r4, r5
    7870:	d101      	bne.n	7876 <__sfputs_r+0x12>
    7872:	2000      	movs	r0, #0
    7874:	e007      	b.n	7886 <__sfputs_r+0x22>
    7876:	463a      	mov	r2, r7
    7878:	f814 1b01 	ldrb.w	r1, [r4], #1
    787c:	4630      	mov	r0, r6
    787e:	f7ff ffdb 	bl	7838 <__sfputc_r>
    7882:	1c43      	adds	r3, r0, #1
    7884:	d1f3      	bne.n	786e <__sfputs_r+0xa>
    7886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007888 <_vfiprintf_r>:
    7888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    788c:	b09d      	sub	sp, #116	; 0x74
    788e:	460c      	mov	r4, r1
    7890:	4617      	mov	r7, r2
    7892:	9303      	str	r3, [sp, #12]
    7894:	4606      	mov	r6, r0
    7896:	b118      	cbz	r0, 78a0 <_vfiprintf_r+0x18>
    7898:	6983      	ldr	r3, [r0, #24]
    789a:	b90b      	cbnz	r3, 78a0 <_vfiprintf_r+0x18>
    789c:	f7ff f8c4 	bl	6a28 <__sinit>
    78a0:	4b7c      	ldr	r3, [pc, #496]	; (7a94 <_vfiprintf_r+0x20c>)
    78a2:	429c      	cmp	r4, r3
    78a4:	d157      	bne.n	7956 <_vfiprintf_r+0xce>
    78a6:	6874      	ldr	r4, [r6, #4]
    78a8:	89a3      	ldrh	r3, [r4, #12]
    78aa:	0718      	lsls	r0, r3, #28
    78ac:	d55d      	bpl.n	796a <_vfiprintf_r+0xe2>
    78ae:	6923      	ldr	r3, [r4, #16]
    78b0:	2b00      	cmp	r3, #0
    78b2:	d05a      	beq.n	796a <_vfiprintf_r+0xe2>
    78b4:	2300      	movs	r3, #0
    78b6:	9309      	str	r3, [sp, #36]	; 0x24
    78b8:	2320      	movs	r3, #32
    78ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    78be:	2330      	movs	r3, #48	; 0x30
    78c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    78c4:	f04f 0b01 	mov.w	fp, #1
    78c8:	46b8      	mov	r8, r7
    78ca:	4645      	mov	r5, r8
    78cc:	f815 3b01 	ldrb.w	r3, [r5], #1
    78d0:	2b00      	cmp	r3, #0
    78d2:	d155      	bne.n	7980 <_vfiprintf_r+0xf8>
    78d4:	ebb8 0a07 	subs.w	sl, r8, r7
    78d8:	d00b      	beq.n	78f2 <_vfiprintf_r+0x6a>
    78da:	4653      	mov	r3, sl
    78dc:	463a      	mov	r2, r7
    78de:	4621      	mov	r1, r4
    78e0:	4630      	mov	r0, r6
    78e2:	f7ff ffbf 	bl	7864 <__sfputs_r>
    78e6:	3001      	adds	r0, #1
    78e8:	f000 80c4 	beq.w	7a74 <_vfiprintf_r+0x1ec>
    78ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78ee:	4453      	add	r3, sl
    78f0:	9309      	str	r3, [sp, #36]	; 0x24
    78f2:	f898 3000 	ldrb.w	r3, [r8]
    78f6:	2b00      	cmp	r3, #0
    78f8:	f000 80bc 	beq.w	7a74 <_vfiprintf_r+0x1ec>
    78fc:	2300      	movs	r3, #0
    78fe:	f04f 32ff 	mov.w	r2, #4294967295
    7902:	9304      	str	r3, [sp, #16]
    7904:	9307      	str	r3, [sp, #28]
    7906:	9205      	str	r2, [sp, #20]
    7908:	9306      	str	r3, [sp, #24]
    790a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    790e:	931a      	str	r3, [sp, #104]	; 0x68
    7910:	2205      	movs	r2, #5
    7912:	7829      	ldrb	r1, [r5, #0]
    7914:	4860      	ldr	r0, [pc, #384]	; (7a98 <_vfiprintf_r+0x210>)
    7916:	f000 ff7b 	bl	8810 <memchr>
    791a:	f105 0801 	add.w	r8, r5, #1
    791e:	9b04      	ldr	r3, [sp, #16]
    7920:	2800      	cmp	r0, #0
    7922:	d131      	bne.n	7988 <_vfiprintf_r+0x100>
    7924:	06d9      	lsls	r1, r3, #27
    7926:	bf44      	itt	mi
    7928:	2220      	movmi	r2, #32
    792a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    792e:	071a      	lsls	r2, r3, #28
    7930:	bf44      	itt	mi
    7932:	222b      	movmi	r2, #43	; 0x2b
    7934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7938:	782a      	ldrb	r2, [r5, #0]
    793a:	2a2a      	cmp	r2, #42	; 0x2a
    793c:	d02c      	beq.n	7998 <_vfiprintf_r+0x110>
    793e:	9a07      	ldr	r2, [sp, #28]
    7940:	2100      	movs	r1, #0
    7942:	200a      	movs	r0, #10
    7944:	46a8      	mov	r8, r5
    7946:	3501      	adds	r5, #1
    7948:	f898 3000 	ldrb.w	r3, [r8]
    794c:	3b30      	subs	r3, #48	; 0x30
    794e:	2b09      	cmp	r3, #9
    7950:	d96d      	bls.n	7a2e <_vfiprintf_r+0x1a6>
    7952:	b371      	cbz	r1, 79b2 <_vfiprintf_r+0x12a>
    7954:	e026      	b.n	79a4 <_vfiprintf_r+0x11c>
    7956:	4b51      	ldr	r3, [pc, #324]	; (7a9c <_vfiprintf_r+0x214>)
    7958:	429c      	cmp	r4, r3
    795a:	d101      	bne.n	7960 <_vfiprintf_r+0xd8>
    795c:	68b4      	ldr	r4, [r6, #8]
    795e:	e7a3      	b.n	78a8 <_vfiprintf_r+0x20>
    7960:	4b4f      	ldr	r3, [pc, #316]	; (7aa0 <_vfiprintf_r+0x218>)
    7962:	429c      	cmp	r4, r3
    7964:	bf08      	it	eq
    7966:	68f4      	ldreq	r4, [r6, #12]
    7968:	e79e      	b.n	78a8 <_vfiprintf_r+0x20>
    796a:	4621      	mov	r1, r4
    796c:	4630      	mov	r0, r6
    796e:	f7ff fcf1 	bl	7354 <__swsetup_r>
    7972:	2800      	cmp	r0, #0
    7974:	d09e      	beq.n	78b4 <_vfiprintf_r+0x2c>
    7976:	f04f 30ff 	mov.w	r0, #4294967295
    797a:	b01d      	add	sp, #116	; 0x74
    797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7980:	2b25      	cmp	r3, #37	; 0x25
    7982:	d0a7      	beq.n	78d4 <_vfiprintf_r+0x4c>
    7984:	46a8      	mov	r8, r5
    7986:	e7a0      	b.n	78ca <_vfiprintf_r+0x42>
    7988:	4a43      	ldr	r2, [pc, #268]	; (7a98 <_vfiprintf_r+0x210>)
    798a:	1a80      	subs	r0, r0, r2
    798c:	fa0b f000 	lsl.w	r0, fp, r0
    7990:	4318      	orrs	r0, r3
    7992:	9004      	str	r0, [sp, #16]
    7994:	4645      	mov	r5, r8
    7996:	e7bb      	b.n	7910 <_vfiprintf_r+0x88>
    7998:	9a03      	ldr	r2, [sp, #12]
    799a:	1d11      	adds	r1, r2, #4
    799c:	6812      	ldr	r2, [r2, #0]
    799e:	9103      	str	r1, [sp, #12]
    79a0:	2a00      	cmp	r2, #0
    79a2:	db01      	blt.n	79a8 <_vfiprintf_r+0x120>
    79a4:	9207      	str	r2, [sp, #28]
    79a6:	e004      	b.n	79b2 <_vfiprintf_r+0x12a>
    79a8:	4252      	negs	r2, r2
    79aa:	f043 0302 	orr.w	r3, r3, #2
    79ae:	9207      	str	r2, [sp, #28]
    79b0:	9304      	str	r3, [sp, #16]
    79b2:	f898 3000 	ldrb.w	r3, [r8]
    79b6:	2b2e      	cmp	r3, #46	; 0x2e
    79b8:	d110      	bne.n	79dc <_vfiprintf_r+0x154>
    79ba:	f898 3001 	ldrb.w	r3, [r8, #1]
    79be:	2b2a      	cmp	r3, #42	; 0x2a
    79c0:	f108 0101 	add.w	r1, r8, #1
    79c4:	d137      	bne.n	7a36 <_vfiprintf_r+0x1ae>
    79c6:	9b03      	ldr	r3, [sp, #12]
    79c8:	1d1a      	adds	r2, r3, #4
    79ca:	681b      	ldr	r3, [r3, #0]
    79cc:	9203      	str	r2, [sp, #12]
    79ce:	2b00      	cmp	r3, #0
    79d0:	bfb8      	it	lt
    79d2:	f04f 33ff 	movlt.w	r3, #4294967295
    79d6:	f108 0802 	add.w	r8, r8, #2
    79da:	9305      	str	r3, [sp, #20]
    79dc:	4d31      	ldr	r5, [pc, #196]	; (7aa4 <_vfiprintf_r+0x21c>)
    79de:	f898 1000 	ldrb.w	r1, [r8]
    79e2:	2203      	movs	r2, #3
    79e4:	4628      	mov	r0, r5
    79e6:	f000 ff13 	bl	8810 <memchr>
    79ea:	b140      	cbz	r0, 79fe <_vfiprintf_r+0x176>
    79ec:	2340      	movs	r3, #64	; 0x40
    79ee:	1b40      	subs	r0, r0, r5
    79f0:	fa03 f000 	lsl.w	r0, r3, r0
    79f4:	9b04      	ldr	r3, [sp, #16]
    79f6:	4303      	orrs	r3, r0
    79f8:	9304      	str	r3, [sp, #16]
    79fa:	f108 0801 	add.w	r8, r8, #1
    79fe:	f898 1000 	ldrb.w	r1, [r8]
    7a02:	4829      	ldr	r0, [pc, #164]	; (7aa8 <_vfiprintf_r+0x220>)
    7a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    7a08:	2206      	movs	r2, #6
    7a0a:	f108 0701 	add.w	r7, r8, #1
    7a0e:	f000 feff 	bl	8810 <memchr>
    7a12:	2800      	cmp	r0, #0
    7a14:	d034      	beq.n	7a80 <_vfiprintf_r+0x1f8>
    7a16:	4b25      	ldr	r3, [pc, #148]	; (7aac <_vfiprintf_r+0x224>)
    7a18:	bb03      	cbnz	r3, 7a5c <_vfiprintf_r+0x1d4>
    7a1a:	9b03      	ldr	r3, [sp, #12]
    7a1c:	3307      	adds	r3, #7
    7a1e:	f023 0307 	bic.w	r3, r3, #7
    7a22:	3308      	adds	r3, #8
    7a24:	9303      	str	r3, [sp, #12]
    7a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a28:	444b      	add	r3, r9
    7a2a:	9309      	str	r3, [sp, #36]	; 0x24
    7a2c:	e74c      	b.n	78c8 <_vfiprintf_r+0x40>
    7a2e:	fb00 3202 	mla	r2, r0, r2, r3
    7a32:	2101      	movs	r1, #1
    7a34:	e786      	b.n	7944 <_vfiprintf_r+0xbc>
    7a36:	2300      	movs	r3, #0
    7a38:	9305      	str	r3, [sp, #20]
    7a3a:	4618      	mov	r0, r3
    7a3c:	250a      	movs	r5, #10
    7a3e:	4688      	mov	r8, r1
    7a40:	3101      	adds	r1, #1
    7a42:	f898 2000 	ldrb.w	r2, [r8]
    7a46:	3a30      	subs	r2, #48	; 0x30
    7a48:	2a09      	cmp	r2, #9
    7a4a:	d903      	bls.n	7a54 <_vfiprintf_r+0x1cc>
    7a4c:	2b00      	cmp	r3, #0
    7a4e:	d0c5      	beq.n	79dc <_vfiprintf_r+0x154>
    7a50:	9005      	str	r0, [sp, #20]
    7a52:	e7c3      	b.n	79dc <_vfiprintf_r+0x154>
    7a54:	fb05 2000 	mla	r0, r5, r0, r2
    7a58:	2301      	movs	r3, #1
    7a5a:	e7f0      	b.n	7a3e <_vfiprintf_r+0x1b6>
    7a5c:	ab03      	add	r3, sp, #12
    7a5e:	9300      	str	r3, [sp, #0]
    7a60:	4622      	mov	r2, r4
    7a62:	4b13      	ldr	r3, [pc, #76]	; (7ab0 <_vfiprintf_r+0x228>)
    7a64:	a904      	add	r1, sp, #16
    7a66:	4630      	mov	r0, r6
    7a68:	f3af 8000 	nop.w
    7a6c:	f1b0 3fff 	cmp.w	r0, #4294967295
    7a70:	4681      	mov	r9, r0
    7a72:	d1d8      	bne.n	7a26 <_vfiprintf_r+0x19e>
    7a74:	89a3      	ldrh	r3, [r4, #12]
    7a76:	065b      	lsls	r3, r3, #25
    7a78:	f53f af7d 	bmi.w	7976 <_vfiprintf_r+0xee>
    7a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    7a7e:	e77c      	b.n	797a <_vfiprintf_r+0xf2>
    7a80:	ab03      	add	r3, sp, #12
    7a82:	9300      	str	r3, [sp, #0]
    7a84:	4622      	mov	r2, r4
    7a86:	4b0a      	ldr	r3, [pc, #40]	; (7ab0 <_vfiprintf_r+0x228>)
    7a88:	a904      	add	r1, sp, #16
    7a8a:	4630      	mov	r0, r6
    7a8c:	f000 f888 	bl	7ba0 <_printf_i>
    7a90:	e7ec      	b.n	7a6c <_vfiprintf_r+0x1e4>
    7a92:	bf00      	nop
    7a94:	00009c70 	.word	0x00009c70
    7a98:	00009cbe 	.word	0x00009cbe
    7a9c:	00009c90 	.word	0x00009c90
    7aa0:	00009c50 	.word	0x00009c50
    7aa4:	00009cc4 	.word	0x00009cc4
    7aa8:	00009cc8 	.word	0x00009cc8
    7aac:	00000000 	.word	0x00000000
    7ab0:	00007865 	.word	0x00007865

00007ab4 <_printf_common>:
    7ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ab8:	4691      	mov	r9, r2
    7aba:	461f      	mov	r7, r3
    7abc:	688a      	ldr	r2, [r1, #8]
    7abe:	690b      	ldr	r3, [r1, #16]
    7ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    7ac4:	4293      	cmp	r3, r2
    7ac6:	bfb8      	it	lt
    7ac8:	4613      	movlt	r3, r2
    7aca:	f8c9 3000 	str.w	r3, [r9]
    7ace:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    7ad2:	4606      	mov	r6, r0
    7ad4:	460c      	mov	r4, r1
    7ad6:	b112      	cbz	r2, 7ade <_printf_common+0x2a>
    7ad8:	3301      	adds	r3, #1
    7ada:	f8c9 3000 	str.w	r3, [r9]
    7ade:	6823      	ldr	r3, [r4, #0]
    7ae0:	0699      	lsls	r1, r3, #26
    7ae2:	bf42      	ittt	mi
    7ae4:	f8d9 3000 	ldrmi.w	r3, [r9]
    7ae8:	3302      	addmi	r3, #2
    7aea:	f8c9 3000 	strmi.w	r3, [r9]
    7aee:	6825      	ldr	r5, [r4, #0]
    7af0:	f015 0506 	ands.w	r5, r5, #6
    7af4:	d107      	bne.n	7b06 <_printf_common+0x52>
    7af6:	f104 0a19 	add.w	sl, r4, #25
    7afa:	68e3      	ldr	r3, [r4, #12]
    7afc:	f8d9 2000 	ldr.w	r2, [r9]
    7b00:	1a9b      	subs	r3, r3, r2
    7b02:	429d      	cmp	r5, r3
    7b04:	db29      	blt.n	7b5a <_printf_common+0xa6>
    7b06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    7b0a:	6822      	ldr	r2, [r4, #0]
    7b0c:	3300      	adds	r3, #0
    7b0e:	bf18      	it	ne
    7b10:	2301      	movne	r3, #1
    7b12:	0692      	lsls	r2, r2, #26
    7b14:	d42e      	bmi.n	7b74 <_printf_common+0xc0>
    7b16:	f104 0243 	add.w	r2, r4, #67	; 0x43
    7b1a:	4639      	mov	r1, r7
    7b1c:	4630      	mov	r0, r6
    7b1e:	47c0      	blx	r8
    7b20:	3001      	adds	r0, #1
    7b22:	d021      	beq.n	7b68 <_printf_common+0xb4>
    7b24:	6823      	ldr	r3, [r4, #0]
    7b26:	68e5      	ldr	r5, [r4, #12]
    7b28:	f8d9 2000 	ldr.w	r2, [r9]
    7b2c:	f003 0306 	and.w	r3, r3, #6
    7b30:	2b04      	cmp	r3, #4
    7b32:	bf08      	it	eq
    7b34:	1aad      	subeq	r5, r5, r2
    7b36:	68a3      	ldr	r3, [r4, #8]
    7b38:	6922      	ldr	r2, [r4, #16]
    7b3a:	bf0c      	ite	eq
    7b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    7b40:	2500      	movne	r5, #0
    7b42:	4293      	cmp	r3, r2
    7b44:	bfc4      	itt	gt
    7b46:	1a9b      	subgt	r3, r3, r2
    7b48:	18ed      	addgt	r5, r5, r3
    7b4a:	f04f 0900 	mov.w	r9, #0
    7b4e:	341a      	adds	r4, #26
    7b50:	454d      	cmp	r5, r9
    7b52:	d11b      	bne.n	7b8c <_printf_common+0xd8>
    7b54:	2000      	movs	r0, #0
    7b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b5a:	2301      	movs	r3, #1
    7b5c:	4652      	mov	r2, sl
    7b5e:	4639      	mov	r1, r7
    7b60:	4630      	mov	r0, r6
    7b62:	47c0      	blx	r8
    7b64:	3001      	adds	r0, #1
    7b66:	d103      	bne.n	7b70 <_printf_common+0xbc>
    7b68:	f04f 30ff 	mov.w	r0, #4294967295
    7b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b70:	3501      	adds	r5, #1
    7b72:	e7c2      	b.n	7afa <_printf_common+0x46>
    7b74:	18e1      	adds	r1, r4, r3
    7b76:	1c5a      	adds	r2, r3, #1
    7b78:	2030      	movs	r0, #48	; 0x30
    7b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    7b7e:	4422      	add	r2, r4
    7b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    7b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7b88:	3302      	adds	r3, #2
    7b8a:	e7c4      	b.n	7b16 <_printf_common+0x62>
    7b8c:	2301      	movs	r3, #1
    7b8e:	4622      	mov	r2, r4
    7b90:	4639      	mov	r1, r7
    7b92:	4630      	mov	r0, r6
    7b94:	47c0      	blx	r8
    7b96:	3001      	adds	r0, #1
    7b98:	d0e6      	beq.n	7b68 <_printf_common+0xb4>
    7b9a:	f109 0901 	add.w	r9, r9, #1
    7b9e:	e7d7      	b.n	7b50 <_printf_common+0x9c>

00007ba0 <_printf_i>:
    7ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ba4:	4617      	mov	r7, r2
    7ba6:	7e0a      	ldrb	r2, [r1, #24]
    7ba8:	b085      	sub	sp, #20
    7baa:	2a6e      	cmp	r2, #110	; 0x6e
    7bac:	4698      	mov	r8, r3
    7bae:	4606      	mov	r6, r0
    7bb0:	460c      	mov	r4, r1
    7bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7bb4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    7bb8:	f000 80bc 	beq.w	7d34 <_printf_i+0x194>
    7bbc:	d81a      	bhi.n	7bf4 <_printf_i+0x54>
    7bbe:	2a63      	cmp	r2, #99	; 0x63
    7bc0:	d02e      	beq.n	7c20 <_printf_i+0x80>
    7bc2:	d80a      	bhi.n	7bda <_printf_i+0x3a>
    7bc4:	2a00      	cmp	r2, #0
    7bc6:	f000 80c8 	beq.w	7d5a <_printf_i+0x1ba>
    7bca:	2a58      	cmp	r2, #88	; 0x58
    7bcc:	f000 808a 	beq.w	7ce4 <_printf_i+0x144>
    7bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7bd4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    7bd8:	e02a      	b.n	7c30 <_printf_i+0x90>
    7bda:	2a64      	cmp	r2, #100	; 0x64
    7bdc:	d001      	beq.n	7be2 <_printf_i+0x42>
    7bde:	2a69      	cmp	r2, #105	; 0x69
    7be0:	d1f6      	bne.n	7bd0 <_printf_i+0x30>
    7be2:	6821      	ldr	r1, [r4, #0]
    7be4:	681a      	ldr	r2, [r3, #0]
    7be6:	f011 0f80 	tst.w	r1, #128	; 0x80
    7bea:	d023      	beq.n	7c34 <_printf_i+0x94>
    7bec:	1d11      	adds	r1, r2, #4
    7bee:	6019      	str	r1, [r3, #0]
    7bf0:	6813      	ldr	r3, [r2, #0]
    7bf2:	e027      	b.n	7c44 <_printf_i+0xa4>
    7bf4:	2a73      	cmp	r2, #115	; 0x73
    7bf6:	f000 80b4 	beq.w	7d62 <_printf_i+0x1c2>
    7bfa:	d808      	bhi.n	7c0e <_printf_i+0x6e>
    7bfc:	2a6f      	cmp	r2, #111	; 0x6f
    7bfe:	d02a      	beq.n	7c56 <_printf_i+0xb6>
    7c00:	2a70      	cmp	r2, #112	; 0x70
    7c02:	d1e5      	bne.n	7bd0 <_printf_i+0x30>
    7c04:	680a      	ldr	r2, [r1, #0]
    7c06:	f042 0220 	orr.w	r2, r2, #32
    7c0a:	600a      	str	r2, [r1, #0]
    7c0c:	e003      	b.n	7c16 <_printf_i+0x76>
    7c0e:	2a75      	cmp	r2, #117	; 0x75
    7c10:	d021      	beq.n	7c56 <_printf_i+0xb6>
    7c12:	2a78      	cmp	r2, #120	; 0x78
    7c14:	d1dc      	bne.n	7bd0 <_printf_i+0x30>
    7c16:	2278      	movs	r2, #120	; 0x78
    7c18:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    7c1c:	496e      	ldr	r1, [pc, #440]	; (7dd8 <_printf_i+0x238>)
    7c1e:	e064      	b.n	7cea <_printf_i+0x14a>
    7c20:	681a      	ldr	r2, [r3, #0]
    7c22:	f101 0542 	add.w	r5, r1, #66	; 0x42
    7c26:	1d11      	adds	r1, r2, #4
    7c28:	6019      	str	r1, [r3, #0]
    7c2a:	6813      	ldr	r3, [r2, #0]
    7c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7c30:	2301      	movs	r3, #1
    7c32:	e0a3      	b.n	7d7c <_printf_i+0x1dc>
    7c34:	f011 0f40 	tst.w	r1, #64	; 0x40
    7c38:	f102 0104 	add.w	r1, r2, #4
    7c3c:	6019      	str	r1, [r3, #0]
    7c3e:	d0d7      	beq.n	7bf0 <_printf_i+0x50>
    7c40:	f9b2 3000 	ldrsh.w	r3, [r2]
    7c44:	2b00      	cmp	r3, #0
    7c46:	da03      	bge.n	7c50 <_printf_i+0xb0>
    7c48:	222d      	movs	r2, #45	; 0x2d
    7c4a:	425b      	negs	r3, r3
    7c4c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    7c50:	4962      	ldr	r1, [pc, #392]	; (7ddc <_printf_i+0x23c>)
    7c52:	220a      	movs	r2, #10
    7c54:	e017      	b.n	7c86 <_printf_i+0xe6>
    7c56:	6820      	ldr	r0, [r4, #0]
    7c58:	6819      	ldr	r1, [r3, #0]
    7c5a:	f010 0f80 	tst.w	r0, #128	; 0x80
    7c5e:	d003      	beq.n	7c68 <_printf_i+0xc8>
    7c60:	1d08      	adds	r0, r1, #4
    7c62:	6018      	str	r0, [r3, #0]
    7c64:	680b      	ldr	r3, [r1, #0]
    7c66:	e006      	b.n	7c76 <_printf_i+0xd6>
    7c68:	f010 0f40 	tst.w	r0, #64	; 0x40
    7c6c:	f101 0004 	add.w	r0, r1, #4
    7c70:	6018      	str	r0, [r3, #0]
    7c72:	d0f7      	beq.n	7c64 <_printf_i+0xc4>
    7c74:	880b      	ldrh	r3, [r1, #0]
    7c76:	4959      	ldr	r1, [pc, #356]	; (7ddc <_printf_i+0x23c>)
    7c78:	2a6f      	cmp	r2, #111	; 0x6f
    7c7a:	bf14      	ite	ne
    7c7c:	220a      	movne	r2, #10
    7c7e:	2208      	moveq	r2, #8
    7c80:	2000      	movs	r0, #0
    7c82:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    7c86:	6865      	ldr	r5, [r4, #4]
    7c88:	60a5      	str	r5, [r4, #8]
    7c8a:	2d00      	cmp	r5, #0
    7c8c:	f2c0 809c 	blt.w	7dc8 <_printf_i+0x228>
    7c90:	6820      	ldr	r0, [r4, #0]
    7c92:	f020 0004 	bic.w	r0, r0, #4
    7c96:	6020      	str	r0, [r4, #0]
    7c98:	2b00      	cmp	r3, #0
    7c9a:	d13f      	bne.n	7d1c <_printf_i+0x17c>
    7c9c:	2d00      	cmp	r5, #0
    7c9e:	f040 8095 	bne.w	7dcc <_printf_i+0x22c>
    7ca2:	4675      	mov	r5, lr
    7ca4:	2a08      	cmp	r2, #8
    7ca6:	d10b      	bne.n	7cc0 <_printf_i+0x120>
    7ca8:	6823      	ldr	r3, [r4, #0]
    7caa:	07da      	lsls	r2, r3, #31
    7cac:	d508      	bpl.n	7cc0 <_printf_i+0x120>
    7cae:	6923      	ldr	r3, [r4, #16]
    7cb0:	6862      	ldr	r2, [r4, #4]
    7cb2:	429a      	cmp	r2, r3
    7cb4:	bfde      	ittt	le
    7cb6:	2330      	movle	r3, #48	; 0x30
    7cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
    7cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
    7cc0:	ebae 0305 	sub.w	r3, lr, r5
    7cc4:	6123      	str	r3, [r4, #16]
    7cc6:	f8cd 8000 	str.w	r8, [sp]
    7cca:	463b      	mov	r3, r7
    7ccc:	aa03      	add	r2, sp, #12
    7cce:	4621      	mov	r1, r4
    7cd0:	4630      	mov	r0, r6
    7cd2:	f7ff feef 	bl	7ab4 <_printf_common>
    7cd6:	3001      	adds	r0, #1
    7cd8:	d155      	bne.n	7d86 <_printf_i+0x1e6>
    7cda:	f04f 30ff 	mov.w	r0, #4294967295
    7cde:	b005      	add	sp, #20
    7ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7ce4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    7ce8:	493c      	ldr	r1, [pc, #240]	; (7ddc <_printf_i+0x23c>)
    7cea:	6822      	ldr	r2, [r4, #0]
    7cec:	6818      	ldr	r0, [r3, #0]
    7cee:	f012 0f80 	tst.w	r2, #128	; 0x80
    7cf2:	f100 0504 	add.w	r5, r0, #4
    7cf6:	601d      	str	r5, [r3, #0]
    7cf8:	d001      	beq.n	7cfe <_printf_i+0x15e>
    7cfa:	6803      	ldr	r3, [r0, #0]
    7cfc:	e002      	b.n	7d04 <_printf_i+0x164>
    7cfe:	0655      	lsls	r5, r2, #25
    7d00:	d5fb      	bpl.n	7cfa <_printf_i+0x15a>
    7d02:	8803      	ldrh	r3, [r0, #0]
    7d04:	07d0      	lsls	r0, r2, #31
    7d06:	bf44      	itt	mi
    7d08:	f042 0220 	orrmi.w	r2, r2, #32
    7d0c:	6022      	strmi	r2, [r4, #0]
    7d0e:	b91b      	cbnz	r3, 7d18 <_printf_i+0x178>
    7d10:	6822      	ldr	r2, [r4, #0]
    7d12:	f022 0220 	bic.w	r2, r2, #32
    7d16:	6022      	str	r2, [r4, #0]
    7d18:	2210      	movs	r2, #16
    7d1a:	e7b1      	b.n	7c80 <_printf_i+0xe0>
    7d1c:	4675      	mov	r5, lr
    7d1e:	fbb3 f0f2 	udiv	r0, r3, r2
    7d22:	fb02 3310 	mls	r3, r2, r0, r3
    7d26:	5ccb      	ldrb	r3, [r1, r3]
    7d28:	f805 3d01 	strb.w	r3, [r5, #-1]!
    7d2c:	4603      	mov	r3, r0
    7d2e:	2800      	cmp	r0, #0
    7d30:	d1f5      	bne.n	7d1e <_printf_i+0x17e>
    7d32:	e7b7      	b.n	7ca4 <_printf_i+0x104>
    7d34:	6808      	ldr	r0, [r1, #0]
    7d36:	681a      	ldr	r2, [r3, #0]
    7d38:	6949      	ldr	r1, [r1, #20]
    7d3a:	f010 0f80 	tst.w	r0, #128	; 0x80
    7d3e:	d004      	beq.n	7d4a <_printf_i+0x1aa>
    7d40:	1d10      	adds	r0, r2, #4
    7d42:	6018      	str	r0, [r3, #0]
    7d44:	6813      	ldr	r3, [r2, #0]
    7d46:	6019      	str	r1, [r3, #0]
    7d48:	e007      	b.n	7d5a <_printf_i+0x1ba>
    7d4a:	f010 0f40 	tst.w	r0, #64	; 0x40
    7d4e:	f102 0004 	add.w	r0, r2, #4
    7d52:	6018      	str	r0, [r3, #0]
    7d54:	6813      	ldr	r3, [r2, #0]
    7d56:	d0f6      	beq.n	7d46 <_printf_i+0x1a6>
    7d58:	8019      	strh	r1, [r3, #0]
    7d5a:	2300      	movs	r3, #0
    7d5c:	6123      	str	r3, [r4, #16]
    7d5e:	4675      	mov	r5, lr
    7d60:	e7b1      	b.n	7cc6 <_printf_i+0x126>
    7d62:	681a      	ldr	r2, [r3, #0]
    7d64:	1d11      	adds	r1, r2, #4
    7d66:	6019      	str	r1, [r3, #0]
    7d68:	6815      	ldr	r5, [r2, #0]
    7d6a:	6862      	ldr	r2, [r4, #4]
    7d6c:	2100      	movs	r1, #0
    7d6e:	4628      	mov	r0, r5
    7d70:	f000 fd4e 	bl	8810 <memchr>
    7d74:	b108      	cbz	r0, 7d7a <_printf_i+0x1da>
    7d76:	1b40      	subs	r0, r0, r5
    7d78:	6060      	str	r0, [r4, #4]
    7d7a:	6863      	ldr	r3, [r4, #4]
    7d7c:	6123      	str	r3, [r4, #16]
    7d7e:	2300      	movs	r3, #0
    7d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    7d84:	e79f      	b.n	7cc6 <_printf_i+0x126>
    7d86:	6923      	ldr	r3, [r4, #16]
    7d88:	462a      	mov	r2, r5
    7d8a:	4639      	mov	r1, r7
    7d8c:	4630      	mov	r0, r6
    7d8e:	47c0      	blx	r8
    7d90:	3001      	adds	r0, #1
    7d92:	d0a2      	beq.n	7cda <_printf_i+0x13a>
    7d94:	6823      	ldr	r3, [r4, #0]
    7d96:	079b      	lsls	r3, r3, #30
    7d98:	d507      	bpl.n	7daa <_printf_i+0x20a>
    7d9a:	2500      	movs	r5, #0
    7d9c:	f104 0919 	add.w	r9, r4, #25
    7da0:	68e3      	ldr	r3, [r4, #12]
    7da2:	9a03      	ldr	r2, [sp, #12]
    7da4:	1a9b      	subs	r3, r3, r2
    7da6:	429d      	cmp	r5, r3
    7da8:	db05      	blt.n	7db6 <_printf_i+0x216>
    7daa:	68e0      	ldr	r0, [r4, #12]
    7dac:	9b03      	ldr	r3, [sp, #12]
    7dae:	4298      	cmp	r0, r3
    7db0:	bfb8      	it	lt
    7db2:	4618      	movlt	r0, r3
    7db4:	e793      	b.n	7cde <_printf_i+0x13e>
    7db6:	2301      	movs	r3, #1
    7db8:	464a      	mov	r2, r9
    7dba:	4639      	mov	r1, r7
    7dbc:	4630      	mov	r0, r6
    7dbe:	47c0      	blx	r8
    7dc0:	3001      	adds	r0, #1
    7dc2:	d08a      	beq.n	7cda <_printf_i+0x13a>
    7dc4:	3501      	adds	r5, #1
    7dc6:	e7eb      	b.n	7da0 <_printf_i+0x200>
    7dc8:	2b00      	cmp	r3, #0
    7dca:	d1a7      	bne.n	7d1c <_printf_i+0x17c>
    7dcc:	780b      	ldrb	r3, [r1, #0]
    7dce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7dd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7dd6:	e765      	b.n	7ca4 <_printf_i+0x104>
    7dd8:	00009ce0 	.word	0x00009ce0
    7ddc:	00009ccf 	.word	0x00009ccf

00007de0 <__svfiscanf_r>:
    7de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7de4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    7de8:	f10d 080c 	add.w	r8, sp, #12
    7dec:	9301      	str	r3, [sp, #4]
    7dee:	2300      	movs	r3, #0
    7df0:	9346      	str	r3, [sp, #280]	; 0x118
    7df2:	9347      	str	r3, [sp, #284]	; 0x11c
    7df4:	4ba0      	ldr	r3, [pc, #640]	; (8078 <__svfiscanf_r+0x298>)
    7df6:	93a2      	str	r3, [sp, #648]	; 0x288
    7df8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8080 <__svfiscanf_r+0x2a0>
    7dfc:	4b9f      	ldr	r3, [pc, #636]	; (807c <__svfiscanf_r+0x29c>)
    7dfe:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    7e02:	4606      	mov	r6, r0
    7e04:	460c      	mov	r4, r1
    7e06:	93a3      	str	r3, [sp, #652]	; 0x28c
    7e08:	4692      	mov	sl, r2
    7e0a:	270a      	movs	r7, #10
    7e0c:	f89a 3000 	ldrb.w	r3, [sl]
    7e10:	2b00      	cmp	r3, #0
    7e12:	f000 812f 	beq.w	8074 <__svfiscanf_r+0x294>
    7e16:	f7ff fb1f 	bl	7458 <__locale_ctype_ptr>
    7e1a:	f89a b000 	ldrb.w	fp, [sl]
    7e1e:	4458      	add	r0, fp
    7e20:	7843      	ldrb	r3, [r0, #1]
    7e22:	f013 0308 	ands.w	r3, r3, #8
    7e26:	d143      	bne.n	7eb0 <__svfiscanf_r+0xd0>
    7e28:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    7e2c:	f10a 0501 	add.w	r5, sl, #1
    7e30:	f040 8099 	bne.w	7f66 <__svfiscanf_r+0x186>
    7e34:	9345      	str	r3, [sp, #276]	; 0x114
    7e36:	9343      	str	r3, [sp, #268]	; 0x10c
    7e38:	f89a 3001 	ldrb.w	r3, [sl, #1]
    7e3c:	2b2a      	cmp	r3, #42	; 0x2a
    7e3e:	d103      	bne.n	7e48 <__svfiscanf_r+0x68>
    7e40:	2310      	movs	r3, #16
    7e42:	9343      	str	r3, [sp, #268]	; 0x10c
    7e44:	f10a 0502 	add.w	r5, sl, #2
    7e48:	7829      	ldrb	r1, [r5, #0]
    7e4a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    7e4e:	2a09      	cmp	r2, #9
    7e50:	46aa      	mov	sl, r5
    7e52:	f105 0501 	add.w	r5, r5, #1
    7e56:	d941      	bls.n	7edc <__svfiscanf_r+0xfc>
    7e58:	2203      	movs	r2, #3
    7e5a:	4889      	ldr	r0, [pc, #548]	; (8080 <__svfiscanf_r+0x2a0>)
    7e5c:	f000 fcd8 	bl	8810 <memchr>
    7e60:	b138      	cbz	r0, 7e72 <__svfiscanf_r+0x92>
    7e62:	eba0 0309 	sub.w	r3, r0, r9
    7e66:	2001      	movs	r0, #1
    7e68:	4098      	lsls	r0, r3
    7e6a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    7e6c:	4318      	orrs	r0, r3
    7e6e:	9043      	str	r0, [sp, #268]	; 0x10c
    7e70:	46aa      	mov	sl, r5
    7e72:	f89a 3000 	ldrb.w	r3, [sl]
    7e76:	2b67      	cmp	r3, #103	; 0x67
    7e78:	f10a 0501 	add.w	r5, sl, #1
    7e7c:	d84a      	bhi.n	7f14 <__svfiscanf_r+0x134>
    7e7e:	2b65      	cmp	r3, #101	; 0x65
    7e80:	f080 80b7 	bcs.w	7ff2 <__svfiscanf_r+0x212>
    7e84:	2b47      	cmp	r3, #71	; 0x47
    7e86:	d82f      	bhi.n	7ee8 <__svfiscanf_r+0x108>
    7e88:	2b45      	cmp	r3, #69	; 0x45
    7e8a:	f080 80b2 	bcs.w	7ff2 <__svfiscanf_r+0x212>
    7e8e:	2b00      	cmp	r3, #0
    7e90:	f000 8082 	beq.w	7f98 <__svfiscanf_r+0x1b8>
    7e94:	2b25      	cmp	r3, #37	; 0x25
    7e96:	d066      	beq.n	7f66 <__svfiscanf_r+0x186>
    7e98:	2303      	movs	r3, #3
    7e9a:	9349      	str	r3, [sp, #292]	; 0x124
    7e9c:	9744      	str	r7, [sp, #272]	; 0x110
    7e9e:	e045      	b.n	7f2c <__svfiscanf_r+0x14c>
    7ea0:	9947      	ldr	r1, [sp, #284]	; 0x11c
    7ea2:	3101      	adds	r1, #1
    7ea4:	9147      	str	r1, [sp, #284]	; 0x11c
    7ea6:	6861      	ldr	r1, [r4, #4]
    7ea8:	3301      	adds	r3, #1
    7eaa:	3901      	subs	r1, #1
    7eac:	6061      	str	r1, [r4, #4]
    7eae:	6023      	str	r3, [r4, #0]
    7eb0:	6863      	ldr	r3, [r4, #4]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	dd0b      	ble.n	7ece <__svfiscanf_r+0xee>
    7eb6:	f7ff facf 	bl	7458 <__locale_ctype_ptr>
    7eba:	6823      	ldr	r3, [r4, #0]
    7ebc:	7819      	ldrb	r1, [r3, #0]
    7ebe:	4408      	add	r0, r1
    7ec0:	7841      	ldrb	r1, [r0, #1]
    7ec2:	070d      	lsls	r5, r1, #28
    7ec4:	d4ec      	bmi.n	7ea0 <__svfiscanf_r+0xc0>
    7ec6:	f10a 0501 	add.w	r5, sl, #1
    7eca:	46aa      	mov	sl, r5
    7ecc:	e79e      	b.n	7e0c <__svfiscanf_r+0x2c>
    7ece:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    7ed0:	4621      	mov	r1, r4
    7ed2:	4630      	mov	r0, r6
    7ed4:	4798      	blx	r3
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d0ed      	beq.n	7eb6 <__svfiscanf_r+0xd6>
    7eda:	e7f4      	b.n	7ec6 <__svfiscanf_r+0xe6>
    7edc:	9b45      	ldr	r3, [sp, #276]	; 0x114
    7ede:	fb07 1303 	mla	r3, r7, r3, r1
    7ee2:	3b30      	subs	r3, #48	; 0x30
    7ee4:	9345      	str	r3, [sp, #276]	; 0x114
    7ee6:	e7af      	b.n	7e48 <__svfiscanf_r+0x68>
    7ee8:	2b5b      	cmp	r3, #91	; 0x5b
    7eea:	d061      	beq.n	7fb0 <__svfiscanf_r+0x1d0>
    7eec:	d80c      	bhi.n	7f08 <__svfiscanf_r+0x128>
    7eee:	2b58      	cmp	r3, #88	; 0x58
    7ef0:	d1d2      	bne.n	7e98 <__svfiscanf_r+0xb8>
    7ef2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    7ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    7ef8:	9243      	str	r2, [sp, #268]	; 0x10c
    7efa:	2210      	movs	r2, #16
    7efc:	9244      	str	r2, [sp, #272]	; 0x110
    7efe:	2b6f      	cmp	r3, #111	; 0x6f
    7f00:	bfb4      	ite	lt
    7f02:	2303      	movlt	r3, #3
    7f04:	2304      	movge	r3, #4
    7f06:	e010      	b.n	7f2a <__svfiscanf_r+0x14a>
    7f08:	2b63      	cmp	r3, #99	; 0x63
    7f0a:	d05c      	beq.n	7fc6 <__svfiscanf_r+0x1e6>
    7f0c:	2b64      	cmp	r3, #100	; 0x64
    7f0e:	d1c3      	bne.n	7e98 <__svfiscanf_r+0xb8>
    7f10:	9744      	str	r7, [sp, #272]	; 0x110
    7f12:	e7f4      	b.n	7efe <__svfiscanf_r+0x11e>
    7f14:	2b70      	cmp	r3, #112	; 0x70
    7f16:	d042      	beq.n	7f9e <__svfiscanf_r+0x1be>
    7f18:	d81d      	bhi.n	7f56 <__svfiscanf_r+0x176>
    7f1a:	2b6e      	cmp	r3, #110	; 0x6e
    7f1c:	d059      	beq.n	7fd2 <__svfiscanf_r+0x1f2>
    7f1e:	d843      	bhi.n	7fa8 <__svfiscanf_r+0x1c8>
    7f20:	2b69      	cmp	r3, #105	; 0x69
    7f22:	d1b9      	bne.n	7e98 <__svfiscanf_r+0xb8>
    7f24:	2300      	movs	r3, #0
    7f26:	9344      	str	r3, [sp, #272]	; 0x110
    7f28:	2303      	movs	r3, #3
    7f2a:	9349      	str	r3, [sp, #292]	; 0x124
    7f2c:	6863      	ldr	r3, [r4, #4]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	dd61      	ble.n	7ff6 <__svfiscanf_r+0x216>
    7f32:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    7f34:	0659      	lsls	r1, r3, #25
    7f36:	d56f      	bpl.n	8018 <__svfiscanf_r+0x238>
    7f38:	9b49      	ldr	r3, [sp, #292]	; 0x124
    7f3a:	2b02      	cmp	r3, #2
    7f3c:	dc7c      	bgt.n	8038 <__svfiscanf_r+0x258>
    7f3e:	ab01      	add	r3, sp, #4
    7f40:	4622      	mov	r2, r4
    7f42:	a943      	add	r1, sp, #268	; 0x10c
    7f44:	4630      	mov	r0, r6
    7f46:	f000 f8c7 	bl	80d8 <_scanf_chars>
    7f4a:	2801      	cmp	r0, #1
    7f4c:	f000 8092 	beq.w	8074 <__svfiscanf_r+0x294>
    7f50:	2802      	cmp	r0, #2
    7f52:	d1ba      	bne.n	7eca <__svfiscanf_r+0xea>
    7f54:	e01d      	b.n	7f92 <__svfiscanf_r+0x1b2>
    7f56:	2b75      	cmp	r3, #117	; 0x75
    7f58:	d0da      	beq.n	7f10 <__svfiscanf_r+0x130>
    7f5a:	2b78      	cmp	r3, #120	; 0x78
    7f5c:	d0c9      	beq.n	7ef2 <__svfiscanf_r+0x112>
    7f5e:	2b73      	cmp	r3, #115	; 0x73
    7f60:	d19a      	bne.n	7e98 <__svfiscanf_r+0xb8>
    7f62:	2302      	movs	r3, #2
    7f64:	e7e1      	b.n	7f2a <__svfiscanf_r+0x14a>
    7f66:	6863      	ldr	r3, [r4, #4]
    7f68:	2b00      	cmp	r3, #0
    7f6a:	dd0c      	ble.n	7f86 <__svfiscanf_r+0x1a6>
    7f6c:	6823      	ldr	r3, [r4, #0]
    7f6e:	781a      	ldrb	r2, [r3, #0]
    7f70:	4593      	cmp	fp, r2
    7f72:	d17f      	bne.n	8074 <__svfiscanf_r+0x294>
    7f74:	3301      	adds	r3, #1
    7f76:	6862      	ldr	r2, [r4, #4]
    7f78:	6023      	str	r3, [r4, #0]
    7f7a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    7f7c:	3a01      	subs	r2, #1
    7f7e:	3301      	adds	r3, #1
    7f80:	6062      	str	r2, [r4, #4]
    7f82:	9347      	str	r3, [sp, #284]	; 0x11c
    7f84:	e7a1      	b.n	7eca <__svfiscanf_r+0xea>
    7f86:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    7f88:	4621      	mov	r1, r4
    7f8a:	4630      	mov	r0, r6
    7f8c:	4798      	blx	r3
    7f8e:	2800      	cmp	r0, #0
    7f90:	d0ec      	beq.n	7f6c <__svfiscanf_r+0x18c>
    7f92:	9846      	ldr	r0, [sp, #280]	; 0x118
    7f94:	2800      	cmp	r0, #0
    7f96:	d163      	bne.n	8060 <__svfiscanf_r+0x280>
    7f98:	f04f 30ff 	mov.w	r0, #4294967295
    7f9c:	e066      	b.n	806c <__svfiscanf_r+0x28c>
    7f9e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    7fa0:	f042 0220 	orr.w	r2, r2, #32
    7fa4:	9243      	str	r2, [sp, #268]	; 0x10c
    7fa6:	e7a4      	b.n	7ef2 <__svfiscanf_r+0x112>
    7fa8:	2308      	movs	r3, #8
    7faa:	9344      	str	r3, [sp, #272]	; 0x110
    7fac:	2304      	movs	r3, #4
    7fae:	e7bc      	b.n	7f2a <__svfiscanf_r+0x14a>
    7fb0:	4629      	mov	r1, r5
    7fb2:	4640      	mov	r0, r8
    7fb4:	f000 fa8e 	bl	84d4 <__sccl>
    7fb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    7fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7fbe:	9343      	str	r3, [sp, #268]	; 0x10c
    7fc0:	4605      	mov	r5, r0
    7fc2:	2301      	movs	r3, #1
    7fc4:	e7b1      	b.n	7f2a <__svfiscanf_r+0x14a>
    7fc6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    7fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7fcc:	9343      	str	r3, [sp, #268]	; 0x10c
    7fce:	2300      	movs	r3, #0
    7fd0:	e7ab      	b.n	7f2a <__svfiscanf_r+0x14a>
    7fd2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    7fd4:	06d0      	lsls	r0, r2, #27
    7fd6:	f53f af78 	bmi.w	7eca <__svfiscanf_r+0xea>
    7fda:	f012 0f01 	tst.w	r2, #1
    7fde:	9a01      	ldr	r2, [sp, #4]
    7fe0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    7fe2:	f102 0104 	add.w	r1, r2, #4
    7fe6:	9101      	str	r1, [sp, #4]
    7fe8:	6812      	ldr	r2, [r2, #0]
    7fea:	bf14      	ite	ne
    7fec:	8013      	strhne	r3, [r2, #0]
    7fee:	6013      	streq	r3, [r2, #0]
    7ff0:	e76b      	b.n	7eca <__svfiscanf_r+0xea>
    7ff2:	2305      	movs	r3, #5
    7ff4:	e799      	b.n	7f2a <__svfiscanf_r+0x14a>
    7ff6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    7ff8:	4621      	mov	r1, r4
    7ffa:	4630      	mov	r0, r6
    7ffc:	4798      	blx	r3
    7ffe:	2800      	cmp	r0, #0
    8000:	d097      	beq.n	7f32 <__svfiscanf_r+0x152>
    8002:	e7c6      	b.n	7f92 <__svfiscanf_r+0x1b2>
    8004:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    8006:	3201      	adds	r2, #1
    8008:	9247      	str	r2, [sp, #284]	; 0x11c
    800a:	6862      	ldr	r2, [r4, #4]
    800c:	3a01      	subs	r2, #1
    800e:	2a00      	cmp	r2, #0
    8010:	6062      	str	r2, [r4, #4]
    8012:	dd0a      	ble.n	802a <__svfiscanf_r+0x24a>
    8014:	3301      	adds	r3, #1
    8016:	6023      	str	r3, [r4, #0]
    8018:	f7ff fa1e 	bl	7458 <__locale_ctype_ptr>
    801c:	6823      	ldr	r3, [r4, #0]
    801e:	781a      	ldrb	r2, [r3, #0]
    8020:	4410      	add	r0, r2
    8022:	7842      	ldrb	r2, [r0, #1]
    8024:	0712      	lsls	r2, r2, #28
    8026:	d4ed      	bmi.n	8004 <__svfiscanf_r+0x224>
    8028:	e786      	b.n	7f38 <__svfiscanf_r+0x158>
    802a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    802c:	4621      	mov	r1, r4
    802e:	4630      	mov	r0, r6
    8030:	4798      	blx	r3
    8032:	2800      	cmp	r0, #0
    8034:	d0f0      	beq.n	8018 <__svfiscanf_r+0x238>
    8036:	e7ac      	b.n	7f92 <__svfiscanf_r+0x1b2>
    8038:	2b04      	cmp	r3, #4
    803a:	dc06      	bgt.n	804a <__svfiscanf_r+0x26a>
    803c:	ab01      	add	r3, sp, #4
    803e:	4622      	mov	r2, r4
    8040:	a943      	add	r1, sp, #268	; 0x10c
    8042:	4630      	mov	r0, r6
    8044:	f000 f8ac 	bl	81a0 <_scanf_i>
    8048:	e77f      	b.n	7f4a <__svfiscanf_r+0x16a>
    804a:	4b0e      	ldr	r3, [pc, #56]	; (8084 <__svfiscanf_r+0x2a4>)
    804c:	2b00      	cmp	r3, #0
    804e:	f43f af3c 	beq.w	7eca <__svfiscanf_r+0xea>
    8052:	ab01      	add	r3, sp, #4
    8054:	4622      	mov	r2, r4
    8056:	a943      	add	r1, sp, #268	; 0x10c
    8058:	4630      	mov	r0, r6
    805a:	f3af 8000 	nop.w
    805e:	e774      	b.n	7f4a <__svfiscanf_r+0x16a>
    8060:	89a3      	ldrh	r3, [r4, #12]
    8062:	f013 0f40 	tst.w	r3, #64	; 0x40
    8066:	bf18      	it	ne
    8068:	f04f 30ff 	movne.w	r0, #4294967295
    806c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    8070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8074:	9846      	ldr	r0, [sp, #280]	; 0x118
    8076:	e7f9      	b.n	806c <__svfiscanf_r+0x28c>
    8078:	000086cd 	.word	0x000086cd
    807c:	000083c1 	.word	0x000083c1
    8080:	00009cc4 	.word	0x00009cc4
    8084:	00000000 	.word	0x00000000

00008088 <_vfiscanf_r>:
    8088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    808c:	460c      	mov	r4, r1
    808e:	4616      	mov	r6, r2
    8090:	461f      	mov	r7, r3
    8092:	4605      	mov	r5, r0
    8094:	b118      	cbz	r0, 809e <_vfiscanf_r+0x16>
    8096:	6983      	ldr	r3, [r0, #24]
    8098:	b90b      	cbnz	r3, 809e <_vfiscanf_r+0x16>
    809a:	f7fe fcc5 	bl	6a28 <__sinit>
    809e:	4b0b      	ldr	r3, [pc, #44]	; (80cc <_vfiscanf_r+0x44>)
    80a0:	429c      	cmp	r4, r3
    80a2:	d108      	bne.n	80b6 <_vfiscanf_r+0x2e>
    80a4:	686c      	ldr	r4, [r5, #4]
    80a6:	463b      	mov	r3, r7
    80a8:	4632      	mov	r2, r6
    80aa:	4621      	mov	r1, r4
    80ac:	4628      	mov	r0, r5
    80ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    80b2:	f7ff be95 	b.w	7de0 <__svfiscanf_r>
    80b6:	4b06      	ldr	r3, [pc, #24]	; (80d0 <_vfiscanf_r+0x48>)
    80b8:	429c      	cmp	r4, r3
    80ba:	d101      	bne.n	80c0 <_vfiscanf_r+0x38>
    80bc:	68ac      	ldr	r4, [r5, #8]
    80be:	e7f2      	b.n	80a6 <_vfiscanf_r+0x1e>
    80c0:	4b04      	ldr	r3, [pc, #16]	; (80d4 <_vfiscanf_r+0x4c>)
    80c2:	429c      	cmp	r4, r3
    80c4:	bf08      	it	eq
    80c6:	68ec      	ldreq	r4, [r5, #12]
    80c8:	e7ed      	b.n	80a6 <_vfiscanf_r+0x1e>
    80ca:	bf00      	nop
    80cc:	00009c70 	.word	0x00009c70
    80d0:	00009c90 	.word	0x00009c90
    80d4:	00009c50 	.word	0x00009c50

000080d8 <_scanf_chars>:
    80d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80dc:	4615      	mov	r5, r2
    80de:	688a      	ldr	r2, [r1, #8]
    80e0:	4680      	mov	r8, r0
    80e2:	460c      	mov	r4, r1
    80e4:	b932      	cbnz	r2, 80f4 <_scanf_chars+0x1c>
    80e6:	698a      	ldr	r2, [r1, #24]
    80e8:	2a00      	cmp	r2, #0
    80ea:	bf0c      	ite	eq
    80ec:	2201      	moveq	r2, #1
    80ee:	f04f 32ff 	movne.w	r2, #4294967295
    80f2:	608a      	str	r2, [r1, #8]
    80f4:	6822      	ldr	r2, [r4, #0]
    80f6:	06d1      	lsls	r1, r2, #27
    80f8:	bf5f      	itttt	pl
    80fa:	681a      	ldrpl	r2, [r3, #0]
    80fc:	1d11      	addpl	r1, r2, #4
    80fe:	6019      	strpl	r1, [r3, #0]
    8100:	6817      	ldrpl	r7, [r2, #0]
    8102:	2600      	movs	r6, #0
    8104:	69a3      	ldr	r3, [r4, #24]
    8106:	b1db      	cbz	r3, 8140 <_scanf_chars+0x68>
    8108:	2b01      	cmp	r3, #1
    810a:	d107      	bne.n	811c <_scanf_chars+0x44>
    810c:	682b      	ldr	r3, [r5, #0]
    810e:	6962      	ldr	r2, [r4, #20]
    8110:	781b      	ldrb	r3, [r3, #0]
    8112:	5cd3      	ldrb	r3, [r2, r3]
    8114:	b9a3      	cbnz	r3, 8140 <_scanf_chars+0x68>
    8116:	2e00      	cmp	r6, #0
    8118:	d132      	bne.n	8180 <_scanf_chars+0xa8>
    811a:	e006      	b.n	812a <_scanf_chars+0x52>
    811c:	2b02      	cmp	r3, #2
    811e:	d007      	beq.n	8130 <_scanf_chars+0x58>
    8120:	2e00      	cmp	r6, #0
    8122:	d12d      	bne.n	8180 <_scanf_chars+0xa8>
    8124:	69a3      	ldr	r3, [r4, #24]
    8126:	2b01      	cmp	r3, #1
    8128:	d12a      	bne.n	8180 <_scanf_chars+0xa8>
    812a:	2001      	movs	r0, #1
    812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8130:	f7ff f992 	bl	7458 <__locale_ctype_ptr>
    8134:	682b      	ldr	r3, [r5, #0]
    8136:	781b      	ldrb	r3, [r3, #0]
    8138:	4418      	add	r0, r3
    813a:	7843      	ldrb	r3, [r0, #1]
    813c:	071b      	lsls	r3, r3, #28
    813e:	d4ef      	bmi.n	8120 <_scanf_chars+0x48>
    8140:	6823      	ldr	r3, [r4, #0]
    8142:	06da      	lsls	r2, r3, #27
    8144:	bf5e      	ittt	pl
    8146:	682b      	ldrpl	r3, [r5, #0]
    8148:	781b      	ldrbpl	r3, [r3, #0]
    814a:	703b      	strbpl	r3, [r7, #0]
    814c:	682a      	ldr	r2, [r5, #0]
    814e:	686b      	ldr	r3, [r5, #4]
    8150:	f102 0201 	add.w	r2, r2, #1
    8154:	602a      	str	r2, [r5, #0]
    8156:	68a2      	ldr	r2, [r4, #8]
    8158:	f103 33ff 	add.w	r3, r3, #4294967295
    815c:	f102 32ff 	add.w	r2, r2, #4294967295
    8160:	606b      	str	r3, [r5, #4]
    8162:	f106 0601 	add.w	r6, r6, #1
    8166:	bf58      	it	pl
    8168:	3701      	addpl	r7, #1
    816a:	60a2      	str	r2, [r4, #8]
    816c:	b142      	cbz	r2, 8180 <_scanf_chars+0xa8>
    816e:	2b00      	cmp	r3, #0
    8170:	dcc8      	bgt.n	8104 <_scanf_chars+0x2c>
    8172:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    8176:	4629      	mov	r1, r5
    8178:	4640      	mov	r0, r8
    817a:	4798      	blx	r3
    817c:	2800      	cmp	r0, #0
    817e:	d0c1      	beq.n	8104 <_scanf_chars+0x2c>
    8180:	6823      	ldr	r3, [r4, #0]
    8182:	f013 0310 	ands.w	r3, r3, #16
    8186:	d105      	bne.n	8194 <_scanf_chars+0xbc>
    8188:	68e2      	ldr	r2, [r4, #12]
    818a:	3201      	adds	r2, #1
    818c:	60e2      	str	r2, [r4, #12]
    818e:	69a2      	ldr	r2, [r4, #24]
    8190:	b102      	cbz	r2, 8194 <_scanf_chars+0xbc>
    8192:	703b      	strb	r3, [r7, #0]
    8194:	6923      	ldr	r3, [r4, #16]
    8196:	441e      	add	r6, r3
    8198:	6126      	str	r6, [r4, #16]
    819a:	2000      	movs	r0, #0
    819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000081a0 <_scanf_i>:
    81a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81a4:	469a      	mov	sl, r3
    81a6:	4b74      	ldr	r3, [pc, #464]	; (8378 <_scanf_i+0x1d8>)
    81a8:	460c      	mov	r4, r1
    81aa:	4683      	mov	fp, r0
    81ac:	4616      	mov	r6, r2
    81ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    81b2:	b087      	sub	sp, #28
    81b4:	ab03      	add	r3, sp, #12
    81b6:	68a7      	ldr	r7, [r4, #8]
    81b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    81bc:	4b6f      	ldr	r3, [pc, #444]	; (837c <_scanf_i+0x1dc>)
    81be:	69a1      	ldr	r1, [r4, #24]
    81c0:	4a6f      	ldr	r2, [pc, #444]	; (8380 <_scanf_i+0x1e0>)
    81c2:	2903      	cmp	r1, #3
    81c4:	bf18      	it	ne
    81c6:	461a      	movne	r2, r3
    81c8:	1e7b      	subs	r3, r7, #1
    81ca:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    81ce:	bf84      	itt	hi
    81d0:	f240 135d 	movwhi	r3, #349	; 0x15d
    81d4:	60a3      	strhi	r3, [r4, #8]
    81d6:	6823      	ldr	r3, [r4, #0]
    81d8:	9200      	str	r2, [sp, #0]
    81da:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    81de:	bf88      	it	hi
    81e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    81e4:	f104 091c 	add.w	r9, r4, #28
    81e8:	6023      	str	r3, [r4, #0]
    81ea:	bf8c      	ite	hi
    81ec:	197f      	addhi	r7, r7, r5
    81ee:	2700      	movls	r7, #0
    81f0:	464b      	mov	r3, r9
    81f2:	f04f 0800 	mov.w	r8, #0
    81f6:	9301      	str	r3, [sp, #4]
    81f8:	6831      	ldr	r1, [r6, #0]
    81fa:	ab03      	add	r3, sp, #12
    81fc:	2202      	movs	r2, #2
    81fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    8202:	7809      	ldrb	r1, [r1, #0]
    8204:	f000 fb04 	bl	8810 <memchr>
    8208:	9b01      	ldr	r3, [sp, #4]
    820a:	b328      	cbz	r0, 8258 <_scanf_i+0xb8>
    820c:	f1b8 0f01 	cmp.w	r8, #1
    8210:	d156      	bne.n	82c0 <_scanf_i+0x120>
    8212:	6862      	ldr	r2, [r4, #4]
    8214:	b92a      	cbnz	r2, 8222 <_scanf_i+0x82>
    8216:	2208      	movs	r2, #8
    8218:	6062      	str	r2, [r4, #4]
    821a:	6822      	ldr	r2, [r4, #0]
    821c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    8220:	6022      	str	r2, [r4, #0]
    8222:	6822      	ldr	r2, [r4, #0]
    8224:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    8228:	6022      	str	r2, [r4, #0]
    822a:	68a2      	ldr	r2, [r4, #8]
    822c:	1e51      	subs	r1, r2, #1
    822e:	60a1      	str	r1, [r4, #8]
    8230:	b192      	cbz	r2, 8258 <_scanf_i+0xb8>
    8232:	6832      	ldr	r2, [r6, #0]
    8234:	1c51      	adds	r1, r2, #1
    8236:	6031      	str	r1, [r6, #0]
    8238:	7812      	ldrb	r2, [r2, #0]
    823a:	701a      	strb	r2, [r3, #0]
    823c:	1c5d      	adds	r5, r3, #1
    823e:	6873      	ldr	r3, [r6, #4]
    8240:	3b01      	subs	r3, #1
    8242:	2b00      	cmp	r3, #0
    8244:	6073      	str	r3, [r6, #4]
    8246:	dc06      	bgt.n	8256 <_scanf_i+0xb6>
    8248:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    824c:	4631      	mov	r1, r6
    824e:	4658      	mov	r0, fp
    8250:	4798      	blx	r3
    8252:	2800      	cmp	r0, #0
    8254:	d176      	bne.n	8344 <_scanf_i+0x1a4>
    8256:	462b      	mov	r3, r5
    8258:	f108 0801 	add.w	r8, r8, #1
    825c:	f1b8 0f03 	cmp.w	r8, #3
    8260:	d1c9      	bne.n	81f6 <_scanf_i+0x56>
    8262:	6862      	ldr	r2, [r4, #4]
    8264:	b90a      	cbnz	r2, 826a <_scanf_i+0xca>
    8266:	220a      	movs	r2, #10
    8268:	6062      	str	r2, [r4, #4]
    826a:	6862      	ldr	r2, [r4, #4]
    826c:	4945      	ldr	r1, [pc, #276]	; (8384 <_scanf_i+0x1e4>)
    826e:	6960      	ldr	r0, [r4, #20]
    8270:	9301      	str	r3, [sp, #4]
    8272:	1a89      	subs	r1, r1, r2
    8274:	f000 f92e 	bl	84d4 <__sccl>
    8278:	9b01      	ldr	r3, [sp, #4]
    827a:	f04f 0800 	mov.w	r8, #0
    827e:	461d      	mov	r5, r3
    8280:	68a3      	ldr	r3, [r4, #8]
    8282:	2b00      	cmp	r3, #0
    8284:	d038      	beq.n	82f8 <_scanf_i+0x158>
    8286:	6831      	ldr	r1, [r6, #0]
    8288:	6960      	ldr	r0, [r4, #20]
    828a:	780a      	ldrb	r2, [r1, #0]
    828c:	5c80      	ldrb	r0, [r0, r2]
    828e:	2800      	cmp	r0, #0
    8290:	d032      	beq.n	82f8 <_scanf_i+0x158>
    8292:	2a30      	cmp	r2, #48	; 0x30
    8294:	6822      	ldr	r2, [r4, #0]
    8296:	d121      	bne.n	82dc <_scanf_i+0x13c>
    8298:	0510      	lsls	r0, r2, #20
    829a:	d51f      	bpl.n	82dc <_scanf_i+0x13c>
    829c:	f108 0801 	add.w	r8, r8, #1
    82a0:	b117      	cbz	r7, 82a8 <_scanf_i+0x108>
    82a2:	3301      	adds	r3, #1
    82a4:	3f01      	subs	r7, #1
    82a6:	60a3      	str	r3, [r4, #8]
    82a8:	6873      	ldr	r3, [r6, #4]
    82aa:	3b01      	subs	r3, #1
    82ac:	2b00      	cmp	r3, #0
    82ae:	6073      	str	r3, [r6, #4]
    82b0:	dd1b      	ble.n	82ea <_scanf_i+0x14a>
    82b2:	6833      	ldr	r3, [r6, #0]
    82b4:	3301      	adds	r3, #1
    82b6:	6033      	str	r3, [r6, #0]
    82b8:	68a3      	ldr	r3, [r4, #8]
    82ba:	3b01      	subs	r3, #1
    82bc:	60a3      	str	r3, [r4, #8]
    82be:	e7df      	b.n	8280 <_scanf_i+0xe0>
    82c0:	f1b8 0f02 	cmp.w	r8, #2
    82c4:	d1b1      	bne.n	822a <_scanf_i+0x8a>
    82c6:	6822      	ldr	r2, [r4, #0]
    82c8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    82cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    82d0:	d1c2      	bne.n	8258 <_scanf_i+0xb8>
    82d2:	2110      	movs	r1, #16
    82d4:	6061      	str	r1, [r4, #4]
    82d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    82da:	e7a5      	b.n	8228 <_scanf_i+0x88>
    82dc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    82e0:	6022      	str	r2, [r4, #0]
    82e2:	780b      	ldrb	r3, [r1, #0]
    82e4:	702b      	strb	r3, [r5, #0]
    82e6:	3501      	adds	r5, #1
    82e8:	e7de      	b.n	82a8 <_scanf_i+0x108>
    82ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    82ee:	4631      	mov	r1, r6
    82f0:	4658      	mov	r0, fp
    82f2:	4798      	blx	r3
    82f4:	2800      	cmp	r0, #0
    82f6:	d0df      	beq.n	82b8 <_scanf_i+0x118>
    82f8:	6823      	ldr	r3, [r4, #0]
    82fa:	05d9      	lsls	r1, r3, #23
    82fc:	d50c      	bpl.n	8318 <_scanf_i+0x178>
    82fe:	454d      	cmp	r5, r9
    8300:	d908      	bls.n	8314 <_scanf_i+0x174>
    8302:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    8306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    830a:	4632      	mov	r2, r6
    830c:	4658      	mov	r0, fp
    830e:	4798      	blx	r3
    8310:	1e6f      	subs	r7, r5, #1
    8312:	463d      	mov	r5, r7
    8314:	454d      	cmp	r5, r9
    8316:	d02c      	beq.n	8372 <_scanf_i+0x1d2>
    8318:	6822      	ldr	r2, [r4, #0]
    831a:	f012 0210 	ands.w	r2, r2, #16
    831e:	d11e      	bne.n	835e <_scanf_i+0x1be>
    8320:	702a      	strb	r2, [r5, #0]
    8322:	6863      	ldr	r3, [r4, #4]
    8324:	9e00      	ldr	r6, [sp, #0]
    8326:	4649      	mov	r1, r9
    8328:	4658      	mov	r0, fp
    832a:	47b0      	blx	r6
    832c:	6822      	ldr	r2, [r4, #0]
    832e:	f8da 3000 	ldr.w	r3, [sl]
    8332:	f012 0f20 	tst.w	r2, #32
    8336:	d008      	beq.n	834a <_scanf_i+0x1aa>
    8338:	1d1a      	adds	r2, r3, #4
    833a:	f8ca 2000 	str.w	r2, [sl]
    833e:	681b      	ldr	r3, [r3, #0]
    8340:	6018      	str	r0, [r3, #0]
    8342:	e009      	b.n	8358 <_scanf_i+0x1b8>
    8344:	f04f 0800 	mov.w	r8, #0
    8348:	e7d6      	b.n	82f8 <_scanf_i+0x158>
    834a:	07d2      	lsls	r2, r2, #31
    834c:	d5f4      	bpl.n	8338 <_scanf_i+0x198>
    834e:	1d1a      	adds	r2, r3, #4
    8350:	f8ca 2000 	str.w	r2, [sl]
    8354:	681b      	ldr	r3, [r3, #0]
    8356:	8018      	strh	r0, [r3, #0]
    8358:	68e3      	ldr	r3, [r4, #12]
    835a:	3301      	adds	r3, #1
    835c:	60e3      	str	r3, [r4, #12]
    835e:	eba5 0509 	sub.w	r5, r5, r9
    8362:	44a8      	add	r8, r5
    8364:	6925      	ldr	r5, [r4, #16]
    8366:	4445      	add	r5, r8
    8368:	6125      	str	r5, [r4, #16]
    836a:	2000      	movs	r0, #0
    836c:	b007      	add	sp, #28
    836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8372:	2001      	movs	r0, #1
    8374:	e7fa      	b.n	836c <_scanf_i+0x1cc>
    8376:	bf00      	nop
    8378:	00009cf4 	.word	0x00009cf4
    837c:	00008631 	.word	0x00008631
    8380:	0000723d 	.word	0x0000723d
    8384:	00009d10 	.word	0x00009d10

00008388 <_read_r>:
    8388:	b538      	push	{r3, r4, r5, lr}
    838a:	4c07      	ldr	r4, [pc, #28]	; (83a8 <_read_r+0x20>)
    838c:	4605      	mov	r5, r0
    838e:	4608      	mov	r0, r1
    8390:	4611      	mov	r1, r2
    8392:	2200      	movs	r2, #0
    8394:	6022      	str	r2, [r4, #0]
    8396:	461a      	mov	r2, r3
    8398:	f7fd fc70 	bl	5c7c <_read>
    839c:	1c43      	adds	r3, r0, #1
    839e:	d102      	bne.n	83a6 <_read_r+0x1e>
    83a0:	6823      	ldr	r3, [r4, #0]
    83a2:	b103      	cbz	r3, 83a6 <_read_r+0x1e>
    83a4:	602b      	str	r3, [r5, #0]
    83a6:	bd38      	pop	{r3, r4, r5, pc}
    83a8:	200012d4 	.word	0x200012d4

000083ac <lflush>:
    83ac:	8983      	ldrh	r3, [r0, #12]
    83ae:	f003 0309 	and.w	r3, r3, #9
    83b2:	2b09      	cmp	r3, #9
    83b4:	d101      	bne.n	83ba <lflush+0xe>
    83b6:	f7fe bae5 	b.w	6984 <fflush>
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
	...

000083c0 <__srefill_r>:
    83c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83c2:	460c      	mov	r4, r1
    83c4:	4605      	mov	r5, r0
    83c6:	b118      	cbz	r0, 83d0 <__srefill_r+0x10>
    83c8:	6983      	ldr	r3, [r0, #24]
    83ca:	b90b      	cbnz	r3, 83d0 <__srefill_r+0x10>
    83cc:	f7fe fb2c 	bl	6a28 <__sinit>
    83d0:	4b3b      	ldr	r3, [pc, #236]	; (84c0 <__srefill_r+0x100>)
    83d2:	429c      	cmp	r4, r3
    83d4:	d10a      	bne.n	83ec <__srefill_r+0x2c>
    83d6:	686c      	ldr	r4, [r5, #4]
    83d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    83dc:	2300      	movs	r3, #0
    83de:	6063      	str	r3, [r4, #4]
    83e0:	b293      	uxth	r3, r2
    83e2:	069e      	lsls	r6, r3, #26
    83e4:	d50c      	bpl.n	8400 <__srefill_r+0x40>
    83e6:	f04f 30ff 	mov.w	r0, #4294967295
    83ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83ec:	4b35      	ldr	r3, [pc, #212]	; (84c4 <__srefill_r+0x104>)
    83ee:	429c      	cmp	r4, r3
    83f0:	d101      	bne.n	83f6 <__srefill_r+0x36>
    83f2:	68ac      	ldr	r4, [r5, #8]
    83f4:	e7f0      	b.n	83d8 <__srefill_r+0x18>
    83f6:	4b34      	ldr	r3, [pc, #208]	; (84c8 <__srefill_r+0x108>)
    83f8:	429c      	cmp	r4, r3
    83fa:	bf08      	it	eq
    83fc:	68ec      	ldreq	r4, [r5, #12]
    83fe:	e7eb      	b.n	83d8 <__srefill_r+0x18>
    8400:	0758      	lsls	r0, r3, #29
    8402:	d448      	bmi.n	8496 <__srefill_r+0xd6>
    8404:	06d9      	lsls	r1, r3, #27
    8406:	d405      	bmi.n	8414 <__srefill_r+0x54>
    8408:	2309      	movs	r3, #9
    840a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    840e:	602b      	str	r3, [r5, #0]
    8410:	81a2      	strh	r2, [r4, #12]
    8412:	e7e8      	b.n	83e6 <__srefill_r+0x26>
    8414:	071a      	lsls	r2, r3, #28
    8416:	d50b      	bpl.n	8430 <__srefill_r+0x70>
    8418:	4621      	mov	r1, r4
    841a:	4628      	mov	r0, r5
    841c:	f7fe fa88 	bl	6930 <_fflush_r>
    8420:	2800      	cmp	r0, #0
    8422:	d1e0      	bne.n	83e6 <__srefill_r+0x26>
    8424:	89a3      	ldrh	r3, [r4, #12]
    8426:	60a0      	str	r0, [r4, #8]
    8428:	f023 0308 	bic.w	r3, r3, #8
    842c:	81a3      	strh	r3, [r4, #12]
    842e:	61a0      	str	r0, [r4, #24]
    8430:	89a3      	ldrh	r3, [r4, #12]
    8432:	f043 0304 	orr.w	r3, r3, #4
    8436:	81a3      	strh	r3, [r4, #12]
    8438:	6923      	ldr	r3, [r4, #16]
    843a:	b91b      	cbnz	r3, 8444 <__srefill_r+0x84>
    843c:	4621      	mov	r1, r4
    843e:	4628      	mov	r0, r5
    8440:	f7ff f84e 	bl	74e0 <__smakebuf_r>
    8444:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    8448:	b2be      	uxth	r6, r7
    844a:	07b3      	lsls	r3, r6, #30
    844c:	d00f      	beq.n	846e <__srefill_r+0xae>
    844e:	2301      	movs	r3, #1
    8450:	81a3      	strh	r3, [r4, #12]
    8452:	4b1e      	ldr	r3, [pc, #120]	; (84cc <__srefill_r+0x10c>)
    8454:	491e      	ldr	r1, [pc, #120]	; (84d0 <__srefill_r+0x110>)
    8456:	6818      	ldr	r0, [r3, #0]
    8458:	f006 0609 	and.w	r6, r6, #9
    845c:	f7fe fb50 	bl	6b00 <_fwalk>
    8460:	2e09      	cmp	r6, #9
    8462:	81a7      	strh	r7, [r4, #12]
    8464:	d103      	bne.n	846e <__srefill_r+0xae>
    8466:	4621      	mov	r1, r4
    8468:	4628      	mov	r0, r5
    846a:	f7fe f9d9 	bl	6820 <__sflush_r>
    846e:	6922      	ldr	r2, [r4, #16]
    8470:	6022      	str	r2, [r4, #0]
    8472:	6a66      	ldr	r6, [r4, #36]	; 0x24
    8474:	6963      	ldr	r3, [r4, #20]
    8476:	6a21      	ldr	r1, [r4, #32]
    8478:	4628      	mov	r0, r5
    847a:	47b0      	blx	r6
    847c:	2800      	cmp	r0, #0
    847e:	6060      	str	r0, [r4, #4]
    8480:	dc1c      	bgt.n	84bc <__srefill_r+0xfc>
    8482:	89a3      	ldrh	r3, [r4, #12]
    8484:	bf17      	itett	ne
    8486:	2200      	movne	r2, #0
    8488:	f043 0320 	orreq.w	r3, r3, #32
    848c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    8490:	6062      	strne	r2, [r4, #4]
    8492:	81a3      	strh	r3, [r4, #12]
    8494:	e7a7      	b.n	83e6 <__srefill_r+0x26>
    8496:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8498:	2900      	cmp	r1, #0
    849a:	d0cd      	beq.n	8438 <__srefill_r+0x78>
    849c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    84a0:	4299      	cmp	r1, r3
    84a2:	d002      	beq.n	84aa <__srefill_r+0xea>
    84a4:	4628      	mov	r0, r5
    84a6:	f7fe fb91 	bl	6bcc <_free_r>
    84aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    84ac:	6063      	str	r3, [r4, #4]
    84ae:	2000      	movs	r0, #0
    84b0:	6360      	str	r0, [r4, #52]	; 0x34
    84b2:	2b00      	cmp	r3, #0
    84b4:	d0c0      	beq.n	8438 <__srefill_r+0x78>
    84b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    84b8:	6023      	str	r3, [r4, #0]
    84ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84bc:	2000      	movs	r0, #0
    84be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84c0:	00009c70 	.word	0x00009c70
    84c4:	00009c90 	.word	0x00009c90
    84c8:	00009c50 	.word	0x00009c50
    84cc:	00009cb0 	.word	0x00009cb0
    84d0:	000083ad 	.word	0x000083ad

000084d4 <__sccl>:
    84d4:	b570      	push	{r4, r5, r6, lr}
    84d6:	780b      	ldrb	r3, [r1, #0]
    84d8:	2b5e      	cmp	r3, #94	; 0x5e
    84da:	bf13      	iteet	ne
    84dc:	1c4a      	addne	r2, r1, #1
    84de:	1c8a      	addeq	r2, r1, #2
    84e0:	784b      	ldrbeq	r3, [r1, #1]
    84e2:	2100      	movne	r1, #0
    84e4:	bf08      	it	eq
    84e6:	2101      	moveq	r1, #1
    84e8:	1e44      	subs	r4, r0, #1
    84ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    84ee:	f804 1f01 	strb.w	r1, [r4, #1]!
    84f2:	42a5      	cmp	r5, r4
    84f4:	d1fb      	bne.n	84ee <__sccl+0x1a>
    84f6:	b913      	cbnz	r3, 84fe <__sccl+0x2a>
    84f8:	3a01      	subs	r2, #1
    84fa:	4610      	mov	r0, r2
    84fc:	bd70      	pop	{r4, r5, r6, pc}
    84fe:	f081 0401 	eor.w	r4, r1, #1
    8502:	54c4      	strb	r4, [r0, r3]
    8504:	4611      	mov	r1, r2
    8506:	780d      	ldrb	r5, [r1, #0]
    8508:	2d2d      	cmp	r5, #45	; 0x2d
    850a:	f101 0201 	add.w	r2, r1, #1
    850e:	d006      	beq.n	851e <__sccl+0x4a>
    8510:	2d5d      	cmp	r5, #93	; 0x5d
    8512:	d0f2      	beq.n	84fa <__sccl+0x26>
    8514:	b90d      	cbnz	r5, 851a <__sccl+0x46>
    8516:	460a      	mov	r2, r1
    8518:	e7ef      	b.n	84fa <__sccl+0x26>
    851a:	462b      	mov	r3, r5
    851c:	e7f1      	b.n	8502 <__sccl+0x2e>
    851e:	784e      	ldrb	r6, [r1, #1]
    8520:	2e5d      	cmp	r6, #93	; 0x5d
    8522:	d0fa      	beq.n	851a <__sccl+0x46>
    8524:	42b3      	cmp	r3, r6
    8526:	dcf8      	bgt.n	851a <__sccl+0x46>
    8528:	3102      	adds	r1, #2
    852a:	3301      	adds	r3, #1
    852c:	429e      	cmp	r6, r3
    852e:	54c4      	strb	r4, [r0, r3]
    8530:	dcfb      	bgt.n	852a <__sccl+0x56>
    8532:	e7e8      	b.n	8506 <__sccl+0x32>

00008534 <_strtoul_l.isra.0>:
    8534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8538:	4680      	mov	r8, r0
    853a:	4689      	mov	r9, r1
    853c:	4692      	mov	sl, r2
    853e:	461e      	mov	r6, r3
    8540:	460f      	mov	r7, r1
    8542:	463d      	mov	r5, r7
    8544:	9808      	ldr	r0, [sp, #32]
    8546:	f815 4b01 	ldrb.w	r4, [r5], #1
    854a:	f7fe ff81 	bl	7450 <__locale_ctype_ptr_l>
    854e:	4420      	add	r0, r4
    8550:	7843      	ldrb	r3, [r0, #1]
    8552:	f013 0308 	ands.w	r3, r3, #8
    8556:	d10a      	bne.n	856e <_strtoul_l.isra.0+0x3a>
    8558:	2c2d      	cmp	r4, #45	; 0x2d
    855a:	d10a      	bne.n	8572 <_strtoul_l.isra.0+0x3e>
    855c:	782c      	ldrb	r4, [r5, #0]
    855e:	2301      	movs	r3, #1
    8560:	1cbd      	adds	r5, r7, #2
    8562:	b15e      	cbz	r6, 857c <_strtoul_l.isra.0+0x48>
    8564:	2e10      	cmp	r6, #16
    8566:	d113      	bne.n	8590 <_strtoul_l.isra.0+0x5c>
    8568:	2c30      	cmp	r4, #48	; 0x30
    856a:	d009      	beq.n	8580 <_strtoul_l.isra.0+0x4c>
    856c:	e010      	b.n	8590 <_strtoul_l.isra.0+0x5c>
    856e:	462f      	mov	r7, r5
    8570:	e7e7      	b.n	8542 <_strtoul_l.isra.0+0xe>
    8572:	2c2b      	cmp	r4, #43	; 0x2b
    8574:	bf04      	itt	eq
    8576:	782c      	ldrbeq	r4, [r5, #0]
    8578:	1cbd      	addeq	r5, r7, #2
    857a:	e7f2      	b.n	8562 <_strtoul_l.isra.0+0x2e>
    857c:	2c30      	cmp	r4, #48	; 0x30
    857e:	d125      	bne.n	85cc <_strtoul_l.isra.0+0x98>
    8580:	782a      	ldrb	r2, [r5, #0]
    8582:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8586:	2a58      	cmp	r2, #88	; 0x58
    8588:	d14a      	bne.n	8620 <_strtoul_l.isra.0+0xec>
    858a:	786c      	ldrb	r4, [r5, #1]
    858c:	2610      	movs	r6, #16
    858e:	3502      	adds	r5, #2
    8590:	f04f 31ff 	mov.w	r1, #4294967295
    8594:	2700      	movs	r7, #0
    8596:	fbb1 f1f6 	udiv	r1, r1, r6
    859a:	fb06 fe01 	mul.w	lr, r6, r1
    859e:	ea6f 0e0e 	mvn.w	lr, lr
    85a2:	4638      	mov	r0, r7
    85a4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    85a8:	2a09      	cmp	r2, #9
    85aa:	d811      	bhi.n	85d0 <_strtoul_l.isra.0+0x9c>
    85ac:	4614      	mov	r4, r2
    85ae:	42a6      	cmp	r6, r4
    85b0:	dd1d      	ble.n	85ee <_strtoul_l.isra.0+0xba>
    85b2:	2f00      	cmp	r7, #0
    85b4:	db18      	blt.n	85e8 <_strtoul_l.isra.0+0xb4>
    85b6:	4281      	cmp	r1, r0
    85b8:	d316      	bcc.n	85e8 <_strtoul_l.isra.0+0xb4>
    85ba:	d101      	bne.n	85c0 <_strtoul_l.isra.0+0x8c>
    85bc:	45a6      	cmp	lr, r4
    85be:	db13      	blt.n	85e8 <_strtoul_l.isra.0+0xb4>
    85c0:	fb00 4006 	mla	r0, r0, r6, r4
    85c4:	2701      	movs	r7, #1
    85c6:	f815 4b01 	ldrb.w	r4, [r5], #1
    85ca:	e7eb      	b.n	85a4 <_strtoul_l.isra.0+0x70>
    85cc:	260a      	movs	r6, #10
    85ce:	e7df      	b.n	8590 <_strtoul_l.isra.0+0x5c>
    85d0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    85d4:	2a19      	cmp	r2, #25
    85d6:	d801      	bhi.n	85dc <_strtoul_l.isra.0+0xa8>
    85d8:	3c37      	subs	r4, #55	; 0x37
    85da:	e7e8      	b.n	85ae <_strtoul_l.isra.0+0x7a>
    85dc:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    85e0:	2a19      	cmp	r2, #25
    85e2:	d804      	bhi.n	85ee <_strtoul_l.isra.0+0xba>
    85e4:	3c57      	subs	r4, #87	; 0x57
    85e6:	e7e2      	b.n	85ae <_strtoul_l.isra.0+0x7a>
    85e8:	f04f 37ff 	mov.w	r7, #4294967295
    85ec:	e7eb      	b.n	85c6 <_strtoul_l.isra.0+0x92>
    85ee:	2f00      	cmp	r7, #0
    85f0:	da09      	bge.n	8606 <_strtoul_l.isra.0+0xd2>
    85f2:	2322      	movs	r3, #34	; 0x22
    85f4:	f8c8 3000 	str.w	r3, [r8]
    85f8:	f04f 30ff 	mov.w	r0, #4294967295
    85fc:	f1ba 0f00 	cmp.w	sl, #0
    8600:	d107      	bne.n	8612 <_strtoul_l.isra.0+0xde>
    8602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8606:	b103      	cbz	r3, 860a <_strtoul_l.isra.0+0xd6>
    8608:	4240      	negs	r0, r0
    860a:	f1ba 0f00 	cmp.w	sl, #0
    860e:	d00c      	beq.n	862a <_strtoul_l.isra.0+0xf6>
    8610:	b127      	cbz	r7, 861c <_strtoul_l.isra.0+0xe8>
    8612:	3d01      	subs	r5, #1
    8614:	f8ca 5000 	str.w	r5, [sl]
    8618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    861c:	464d      	mov	r5, r9
    861e:	e7f9      	b.n	8614 <_strtoul_l.isra.0+0xe0>
    8620:	2430      	movs	r4, #48	; 0x30
    8622:	2e00      	cmp	r6, #0
    8624:	d1b4      	bne.n	8590 <_strtoul_l.isra.0+0x5c>
    8626:	2608      	movs	r6, #8
    8628:	e7b2      	b.n	8590 <_strtoul_l.isra.0+0x5c>
    862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00008630 <_strtoul_r>:
    8630:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8632:	4c06      	ldr	r4, [pc, #24]	; (864c <_strtoul_r+0x1c>)
    8634:	4d06      	ldr	r5, [pc, #24]	; (8650 <_strtoul_r+0x20>)
    8636:	6824      	ldr	r4, [r4, #0]
    8638:	6a24      	ldr	r4, [r4, #32]
    863a:	2c00      	cmp	r4, #0
    863c:	bf08      	it	eq
    863e:	462c      	moveq	r4, r5
    8640:	9400      	str	r4, [sp, #0]
    8642:	f7ff ff77 	bl	8534 <_strtoul_l.isra.0>
    8646:	b003      	add	sp, #12
    8648:	bd30      	pop	{r4, r5, pc}
    864a:	bf00      	nop
    864c:	200002f0 	.word	0x200002f0
    8650:	20000354 	.word	0x20000354

00008654 <__submore>:
    8654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8658:	460c      	mov	r4, r1
    865a:	6b49      	ldr	r1, [r1, #52]	; 0x34
    865c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8660:	4299      	cmp	r1, r3
    8662:	d11e      	bne.n	86a2 <__submore+0x4e>
    8664:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8668:	f7fe fafe 	bl	6c68 <_malloc_r>
    866c:	b918      	cbnz	r0, 8676 <__submore+0x22>
    866e:	f04f 30ff 	mov.w	r0, #4294967295
    8672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8676:	f44f 6380 	mov.w	r3, #1024	; 0x400
    867a:	63a3      	str	r3, [r4, #56]	; 0x38
    867c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    8680:	6360      	str	r0, [r4, #52]	; 0x34
    8682:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    8686:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    868a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    868e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    8692:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    8696:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    869a:	6020      	str	r0, [r4, #0]
    869c:	2000      	movs	r0, #0
    869e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    86a4:	0077      	lsls	r7, r6, #1
    86a6:	463a      	mov	r2, r7
    86a8:	f000 f927 	bl	88fa <_realloc_r>
    86ac:	4605      	mov	r5, r0
    86ae:	2800      	cmp	r0, #0
    86b0:	d0dd      	beq.n	866e <__submore+0x1a>
    86b2:	eb00 0806 	add.w	r8, r0, r6
    86b6:	4601      	mov	r1, r0
    86b8:	4632      	mov	r2, r6
    86ba:	4640      	mov	r0, r8
    86bc:	f000 f8f8 	bl	88b0 <memcpy>
    86c0:	f8c4 8000 	str.w	r8, [r4]
    86c4:	6365      	str	r5, [r4, #52]	; 0x34
    86c6:	63a7      	str	r7, [r4, #56]	; 0x38
    86c8:	e7e8      	b.n	869c <__submore+0x48>
	...

000086cc <_ungetc_r>:
    86cc:	1c4b      	adds	r3, r1, #1
    86ce:	b570      	push	{r4, r5, r6, lr}
    86d0:	4606      	mov	r6, r0
    86d2:	460d      	mov	r5, r1
    86d4:	4614      	mov	r4, r2
    86d6:	d103      	bne.n	86e0 <_ungetc_r+0x14>
    86d8:	f04f 35ff 	mov.w	r5, #4294967295
    86dc:	4628      	mov	r0, r5
    86de:	bd70      	pop	{r4, r5, r6, pc}
    86e0:	b118      	cbz	r0, 86ea <_ungetc_r+0x1e>
    86e2:	6983      	ldr	r3, [r0, #24]
    86e4:	b90b      	cbnz	r3, 86ea <_ungetc_r+0x1e>
    86e6:	f7fe f99f 	bl	6a28 <__sinit>
    86ea:	4b2e      	ldr	r3, [pc, #184]	; (87a4 <_ungetc_r+0xd8>)
    86ec:	429c      	cmp	r4, r3
    86ee:	d12c      	bne.n	874a <_ungetc_r+0x7e>
    86f0:	6874      	ldr	r4, [r6, #4]
    86f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    86f6:	f023 0320 	bic.w	r3, r3, #32
    86fa:	81a3      	strh	r3, [r4, #12]
    86fc:	b29b      	uxth	r3, r3
    86fe:	0759      	lsls	r1, r3, #29
    8700:	d413      	bmi.n	872a <_ungetc_r+0x5e>
    8702:	06da      	lsls	r2, r3, #27
    8704:	d5e8      	bpl.n	86d8 <_ungetc_r+0xc>
    8706:	071b      	lsls	r3, r3, #28
    8708:	d50b      	bpl.n	8722 <_ungetc_r+0x56>
    870a:	4621      	mov	r1, r4
    870c:	4630      	mov	r0, r6
    870e:	f7fe f90f 	bl	6930 <_fflush_r>
    8712:	2800      	cmp	r0, #0
    8714:	d1e0      	bne.n	86d8 <_ungetc_r+0xc>
    8716:	89a3      	ldrh	r3, [r4, #12]
    8718:	60a0      	str	r0, [r4, #8]
    871a:	f023 0308 	bic.w	r3, r3, #8
    871e:	81a3      	strh	r3, [r4, #12]
    8720:	61a0      	str	r0, [r4, #24]
    8722:	89a3      	ldrh	r3, [r4, #12]
    8724:	f043 0304 	orr.w	r3, r3, #4
    8728:	81a3      	strh	r3, [r4, #12]
    872a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    872c:	6862      	ldr	r2, [r4, #4]
    872e:	b2ed      	uxtb	r5, r5
    8730:	b1e3      	cbz	r3, 876c <_ungetc_r+0xa0>
    8732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8734:	429a      	cmp	r2, r3
    8736:	da12      	bge.n	875e <_ungetc_r+0x92>
    8738:	6823      	ldr	r3, [r4, #0]
    873a:	1e5a      	subs	r2, r3, #1
    873c:	6022      	str	r2, [r4, #0]
    873e:	f803 5c01 	strb.w	r5, [r3, #-1]
    8742:	6863      	ldr	r3, [r4, #4]
    8744:	3301      	adds	r3, #1
    8746:	6063      	str	r3, [r4, #4]
    8748:	e7c8      	b.n	86dc <_ungetc_r+0x10>
    874a:	4b17      	ldr	r3, [pc, #92]	; (87a8 <_ungetc_r+0xdc>)
    874c:	429c      	cmp	r4, r3
    874e:	d101      	bne.n	8754 <_ungetc_r+0x88>
    8750:	68b4      	ldr	r4, [r6, #8]
    8752:	e7ce      	b.n	86f2 <_ungetc_r+0x26>
    8754:	4b15      	ldr	r3, [pc, #84]	; (87ac <_ungetc_r+0xe0>)
    8756:	429c      	cmp	r4, r3
    8758:	bf08      	it	eq
    875a:	68f4      	ldreq	r4, [r6, #12]
    875c:	e7c9      	b.n	86f2 <_ungetc_r+0x26>
    875e:	4621      	mov	r1, r4
    8760:	4630      	mov	r0, r6
    8762:	f7ff ff77 	bl	8654 <__submore>
    8766:	2800      	cmp	r0, #0
    8768:	d0e6      	beq.n	8738 <_ungetc_r+0x6c>
    876a:	e7b5      	b.n	86d8 <_ungetc_r+0xc>
    876c:	6921      	ldr	r1, [r4, #16]
    876e:	6823      	ldr	r3, [r4, #0]
    8770:	b151      	cbz	r1, 8788 <_ungetc_r+0xbc>
    8772:	4299      	cmp	r1, r3
    8774:	d208      	bcs.n	8788 <_ungetc_r+0xbc>
    8776:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    877a:	428d      	cmp	r5, r1
    877c:	d104      	bne.n	8788 <_ungetc_r+0xbc>
    877e:	3b01      	subs	r3, #1
    8780:	3201      	adds	r2, #1
    8782:	6023      	str	r3, [r4, #0]
    8784:	6062      	str	r2, [r4, #4]
    8786:	e7a9      	b.n	86dc <_ungetc_r+0x10>
    8788:	63e3      	str	r3, [r4, #60]	; 0x3c
    878a:	f104 0344 	add.w	r3, r4, #68	; 0x44
    878e:	6363      	str	r3, [r4, #52]	; 0x34
    8790:	2303      	movs	r3, #3
    8792:	63a3      	str	r3, [r4, #56]	; 0x38
    8794:	4623      	mov	r3, r4
    8796:	6422      	str	r2, [r4, #64]	; 0x40
    8798:	f803 5f46 	strb.w	r5, [r3, #70]!
    879c:	6023      	str	r3, [r4, #0]
    879e:	2301      	movs	r3, #1
    87a0:	e7d1      	b.n	8746 <_ungetc_r+0x7a>
    87a2:	bf00      	nop
    87a4:	00009c70 	.word	0x00009c70
    87a8:	00009c90 	.word	0x00009c90
    87ac:	00009c50 	.word	0x00009c50

000087b0 <__ascii_wctomb>:
    87b0:	b149      	cbz	r1, 87c6 <__ascii_wctomb+0x16>
    87b2:	2aff      	cmp	r2, #255	; 0xff
    87b4:	bf85      	ittet	hi
    87b6:	238a      	movhi	r3, #138	; 0x8a
    87b8:	6003      	strhi	r3, [r0, #0]
    87ba:	700a      	strbls	r2, [r1, #0]
    87bc:	f04f 30ff 	movhi.w	r0, #4294967295
    87c0:	bf98      	it	ls
    87c2:	2001      	movls	r0, #1
    87c4:	4770      	bx	lr
    87c6:	4608      	mov	r0, r1
    87c8:	4770      	bx	lr
	...

000087cc <_fstat_r>:
    87cc:	b538      	push	{r3, r4, r5, lr}
    87ce:	4c07      	ldr	r4, [pc, #28]	; (87ec <_fstat_r+0x20>)
    87d0:	2300      	movs	r3, #0
    87d2:	4605      	mov	r5, r0
    87d4:	4608      	mov	r0, r1
    87d6:	4611      	mov	r1, r2
    87d8:	6023      	str	r3, [r4, #0]
    87da:	f7fa f8d2 	bl	2982 <_fstat>
    87de:	1c43      	adds	r3, r0, #1
    87e0:	d102      	bne.n	87e8 <_fstat_r+0x1c>
    87e2:	6823      	ldr	r3, [r4, #0]
    87e4:	b103      	cbz	r3, 87e8 <_fstat_r+0x1c>
    87e6:	602b      	str	r3, [r5, #0]
    87e8:	bd38      	pop	{r3, r4, r5, pc}
    87ea:	bf00      	nop
    87ec:	200012d4 	.word	0x200012d4

000087f0 <_isatty_r>:
    87f0:	b538      	push	{r3, r4, r5, lr}
    87f2:	4c06      	ldr	r4, [pc, #24]	; (880c <_isatty_r+0x1c>)
    87f4:	2300      	movs	r3, #0
    87f6:	4605      	mov	r5, r0
    87f8:	4608      	mov	r0, r1
    87fa:	6023      	str	r3, [r4, #0]
    87fc:	f7fa f8c6 	bl	298c <_isatty>
    8800:	1c43      	adds	r3, r0, #1
    8802:	d102      	bne.n	880a <_isatty_r+0x1a>
    8804:	6823      	ldr	r3, [r4, #0]
    8806:	b103      	cbz	r3, 880a <_isatty_r+0x1a>
    8808:	602b      	str	r3, [r5, #0]
    880a:	bd38      	pop	{r3, r4, r5, pc}
    880c:	200012d4 	.word	0x200012d4

00008810 <memchr>:
    8810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8814:	2a10      	cmp	r2, #16
    8816:	db2b      	blt.n	8870 <memchr+0x60>
    8818:	f010 0f07 	tst.w	r0, #7
    881c:	d008      	beq.n	8830 <memchr+0x20>
    881e:	f810 3b01 	ldrb.w	r3, [r0], #1
    8822:	3a01      	subs	r2, #1
    8824:	428b      	cmp	r3, r1
    8826:	d02d      	beq.n	8884 <memchr+0x74>
    8828:	f010 0f07 	tst.w	r0, #7
    882c:	b342      	cbz	r2, 8880 <memchr+0x70>
    882e:	d1f6      	bne.n	881e <memchr+0xe>
    8830:	b4f0      	push	{r4, r5, r6, r7}
    8832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    8836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    883a:	f022 0407 	bic.w	r4, r2, #7
    883e:	f07f 0700 	mvns.w	r7, #0
    8842:	2300      	movs	r3, #0
    8844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    8848:	3c08      	subs	r4, #8
    884a:	ea85 0501 	eor.w	r5, r5, r1
    884e:	ea86 0601 	eor.w	r6, r6, r1
    8852:	fa85 f547 	uadd8	r5, r5, r7
    8856:	faa3 f587 	sel	r5, r3, r7
    885a:	fa86 f647 	uadd8	r6, r6, r7
    885e:	faa5 f687 	sel	r6, r5, r7
    8862:	b98e      	cbnz	r6, 8888 <memchr+0x78>
    8864:	d1ee      	bne.n	8844 <memchr+0x34>
    8866:	bcf0      	pop	{r4, r5, r6, r7}
    8868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    886c:	f002 0207 	and.w	r2, r2, #7
    8870:	b132      	cbz	r2, 8880 <memchr+0x70>
    8872:	f810 3b01 	ldrb.w	r3, [r0], #1
    8876:	3a01      	subs	r2, #1
    8878:	ea83 0301 	eor.w	r3, r3, r1
    887c:	b113      	cbz	r3, 8884 <memchr+0x74>
    887e:	d1f8      	bne.n	8872 <memchr+0x62>
    8880:	2000      	movs	r0, #0
    8882:	4770      	bx	lr
    8884:	3801      	subs	r0, #1
    8886:	4770      	bx	lr
    8888:	2d00      	cmp	r5, #0
    888a:	bf06      	itte	eq
    888c:	4635      	moveq	r5, r6
    888e:	3803      	subeq	r0, #3
    8890:	3807      	subne	r0, #7
    8892:	f015 0f01 	tst.w	r5, #1
    8896:	d107      	bne.n	88a8 <memchr+0x98>
    8898:	3001      	adds	r0, #1
    889a:	f415 7f80 	tst.w	r5, #256	; 0x100
    889e:	bf02      	ittt	eq
    88a0:	3001      	addeq	r0, #1
    88a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    88a6:	3001      	addeq	r0, #1
    88a8:	bcf0      	pop	{r4, r5, r6, r7}
    88aa:	3801      	subs	r0, #1
    88ac:	4770      	bx	lr
    88ae:	bf00      	nop

000088b0 <memcpy>:
    88b0:	b510      	push	{r4, lr}
    88b2:	1e43      	subs	r3, r0, #1
    88b4:	440a      	add	r2, r1
    88b6:	4291      	cmp	r1, r2
    88b8:	d100      	bne.n	88bc <memcpy+0xc>
    88ba:	bd10      	pop	{r4, pc}
    88bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    88c0:	f803 4f01 	strb.w	r4, [r3, #1]!
    88c4:	e7f7      	b.n	88b6 <memcpy+0x6>

000088c6 <memmove>:
    88c6:	4288      	cmp	r0, r1
    88c8:	b510      	push	{r4, lr}
    88ca:	eb01 0302 	add.w	r3, r1, r2
    88ce:	d803      	bhi.n	88d8 <memmove+0x12>
    88d0:	1e42      	subs	r2, r0, #1
    88d2:	4299      	cmp	r1, r3
    88d4:	d10c      	bne.n	88f0 <memmove+0x2a>
    88d6:	bd10      	pop	{r4, pc}
    88d8:	4298      	cmp	r0, r3
    88da:	d2f9      	bcs.n	88d0 <memmove+0xa>
    88dc:	1881      	adds	r1, r0, r2
    88de:	1ad2      	subs	r2, r2, r3
    88e0:	42d3      	cmn	r3, r2
    88e2:	d100      	bne.n	88e6 <memmove+0x20>
    88e4:	bd10      	pop	{r4, pc}
    88e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    88ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
    88ee:	e7f7      	b.n	88e0 <memmove+0x1a>
    88f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    88f4:	f802 4f01 	strb.w	r4, [r2, #1]!
    88f8:	e7eb      	b.n	88d2 <memmove+0xc>

000088fa <_realloc_r>:
    88fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88fc:	4607      	mov	r7, r0
    88fe:	4614      	mov	r4, r2
    8900:	460e      	mov	r6, r1
    8902:	b921      	cbnz	r1, 890e <_realloc_r+0x14>
    8904:	4611      	mov	r1, r2
    8906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    890a:	f7fe b9ad 	b.w	6c68 <_malloc_r>
    890e:	b922      	cbnz	r2, 891a <_realloc_r+0x20>
    8910:	f7fe f95c 	bl	6bcc <_free_r>
    8914:	4625      	mov	r5, r4
    8916:	4628      	mov	r0, r5
    8918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    891a:	f000 f814 	bl	8946 <_malloc_usable_size_r>
    891e:	4284      	cmp	r4, r0
    8920:	d90f      	bls.n	8942 <_realloc_r+0x48>
    8922:	4621      	mov	r1, r4
    8924:	4638      	mov	r0, r7
    8926:	f7fe f99f 	bl	6c68 <_malloc_r>
    892a:	4605      	mov	r5, r0
    892c:	2800      	cmp	r0, #0
    892e:	d0f2      	beq.n	8916 <_realloc_r+0x1c>
    8930:	4631      	mov	r1, r6
    8932:	4622      	mov	r2, r4
    8934:	f7ff ffbc 	bl	88b0 <memcpy>
    8938:	4631      	mov	r1, r6
    893a:	4638      	mov	r0, r7
    893c:	f7fe f946 	bl	6bcc <_free_r>
    8940:	e7e9      	b.n	8916 <_realloc_r+0x1c>
    8942:	4635      	mov	r5, r6
    8944:	e7e7      	b.n	8916 <_realloc_r+0x1c>

00008946 <_malloc_usable_size_r>:
    8946:	f851 0c04 	ldr.w	r0, [r1, #-4]
    894a:	2800      	cmp	r0, #0
    894c:	f1a0 0004 	sub.w	r0, r0, #4
    8950:	bfbc      	itt	lt
    8952:	580b      	ldrlt	r3, [r1, r0]
    8954:	18c0      	addlt	r0, r0, r3
    8956:	4770      	bx	lr
    8958:	61440a0d 	.word	0x61440a0d
    895c:	61206174 	.word	0x61206174
    8960:	65742074 	.word	0x65742074
    8964:	61207473 	.word	0x61207473
    8968:	65726464 	.word	0x65726464
    896c:	25207373 	.word	0x25207373
    8970:	73692064 	.word	0x73692064
    8974:	25203d20 	.word	0x25203d20
    8978:	000a0d64 	.word	0x000a0d64
    897c:	6e490a0d 	.word	0x6e490a0d
    8980:	74726576 	.word	0x74726576
    8984:	74206465 	.word	0x74206465
    8988:	64206568 	.word	0x64206568
    898c:	20617461 	.word	0x20617461
    8990:	74207461 	.word	0x74207461
    8994:	20747365 	.word	0x20747365
    8998:	72646461 	.word	0x72646461
    899c:	20737365 	.word	0x20737365
    89a0:	20646e61 	.word	0x20646e61
    89a4:	74697277 	.word	0x74697277
    89a8:	0d6e6574 	.word	0x0d6e6574
    89ac:	00000000 	.word	0x00000000
    89b0:	6c500a0d 	.word	0x6c500a0d
    89b4:	65736165 	.word	0x65736165
    89b8:	6e6f6320 	.word	0x6e6f6320
    89bc:	75676966 	.word	0x75676966
    89c0:	53206572 	.word	0x53206572
    89c4:	204b4c42 	.word	0x204b4c42
    89c8:	65737566 	.word	0x65737566
    89cc:	206f7420 	.word	0x206f7420
    89d0:	6f6c6c61 	.word	0x6f6c6c61
    89d4:	65746163 	.word	0x65746163
    89d8:	616d5320 	.word	0x616d5320
    89dc:	45457472 	.word	0x45457472
    89e0:	4d4f5250 	.word	0x4d4f5250
    89e4:	65726120 	.word	0x65726120
    89e8:	00000d61 	.word	0x00000d61
    89ec:	64323025 	.word	0x64323025
    89f0:	00000020 	.word	0x00000020
    89f4:	6d530a0d 	.word	0x6d530a0d
    89f8:	45747261 	.word	0x45747261
    89fc:	4f525045 	.word	0x4f525045
    8a00:	6f63204d 	.word	0x6f63204d
    8a04:	6961746e 	.word	0x6961746e
    8a08:	7620736e 	.word	0x7620736e
    8a0c:	64696c61 	.word	0x64696c61
    8a10:	74616420 	.word	0x74616420
    8a14:	000d2061 	.word	0x000d2061
    8a18:	74530a0d 	.word	0x74530a0d
    8a1c:	6e69726f 	.word	0x6e69726f
    8a20:	69732067 	.word	0x69732067
    8a24:	74616e67 	.word	0x74616e67
    8a28:	20657275 	.word	0x20657275
    8a2c:	53206f74 	.word	0x53206f74
    8a30:	7472616d 	.word	0x7472616d
    8a34:	52504545 	.word	0x52504545
    8a38:	61204d4f 	.word	0x61204d4f
    8a3c:	65726464 	.word	0x65726464
    8a40:	30207373 	.word	0x30207373
    8a44:	20303078 	.word	0x20303078
    8a48:	30206f74 	.word	0x30206f74
    8a4c:	0d333078 	.word	0x0d333078
    8a50:	00000000 	.word	0x00000000
    8a54:	75460a0d 	.word	0x75460a0d
    8a58:	76206573 	.word	0x76206573
    8a5c:	65756c61 	.word	0x65756c61
    8a60:	6f662073 	.word	0x6f662073
    8a64:	42532072 	.word	0x42532072
    8a68:	3d204b4c 	.word	0x3d204b4c
    8a6c:	2c642520 	.word	0x2c642520
    8a70:	5a535020 	.word	0x5a535020
    8a74:	25203d20 	.word	0x25203d20
    8a78:	53202e64 	.word	0x53202e64
    8a7c:	74206565 	.word	0x74206565
    8a80:	74206568 	.word	0x74206568
    8a84:	656c6261 	.word	0x656c6261
    8a88:	6d532720 	.word	0x6d532720
    8a8c:	45747261 	.word	0x45747261
    8a90:	4f525045 	.word	0x4f525045
    8a94:	6956204d 	.word	0x6956204d
    8a98:	61757472 	.word	0x61757472
    8a9c:	0909206c 	.word	0x0909206c
    8aa0:	657a6953 	.word	0x657a6953
    8aa4:	206e6920 	.word	0x206e6920
    8aa8:	65747942 	.word	0x65747942
    8aac:	69202773 	.word	0x69202773
    8ab0:	6874206e 	.word	0x6874206e
    8ab4:	61442065 	.word	0x61442065
    8ab8:	68736174 	.word	0x68736174
    8abc:	20746565 	.word	0x20746565
    8ac0:	63206f74 	.word	0x63206f74
    8ac4:	75636c61 	.word	0x75636c61
    8ac8:	6574616c 	.word	0x6574616c
    8acc:	746f7420 	.word	0x746f7420
    8ad0:	61206c61 	.word	0x61206c61
    8ad4:	6c696176 	.word	0x6c696176
    8ad8:	656c6261 	.word	0x656c6261
    8adc:	74796220 	.word	0x74796220
    8ae0:	0d207365 	.word	0x0d207365
    8ae4:	0000000a 	.word	0x0000000a
    8ae8:	45450a0d 	.word	0x45450a0d
    8aec:	4d4f5250 	.word	0x4d4f5250
    8af0:	74614420 	.word	0x74614420
    8af4:	74612061 	.word	0x74612061
    8af8:	72696620 	.word	0x72696620
    8afc:	25207473 	.word	0x25207473
    8b00:	6f6c2064 	.word	0x6f6c2064
    8b04:	69746163 	.word	0x69746163
    8b08:	3a736e6f 	.word	0x3a736e6f
    8b0c:	000a0d20 	.word	0x000a0d20
    8b10:	6e450a0d 	.word	0x6e450a0d
    8b14:	20726574 	.word	0x20726574
    8b18:	72646461 	.word	0x72646461
    8b1c:	20737365 	.word	0x20737365
    8b20:	00203e3e 	.word	0x00203e3e
    8b24:	00756c25 	.word	0x00756c25
    8b28:	52450a0d 	.word	0x52450a0d
    8b2c:	3a524f52 	.word	0x3a524f52
    8b30:	64644120 	.word	0x64644120
    8b34:	73736572 	.word	0x73736572
    8b38:	766e6920 	.word	0x766e6920
    8b3c:	64696c61 	.word	0x64696c61
    8b40:	7254202e 	.word	0x7254202e
    8b44:	67612079 	.word	0x67612079
    8b48:	206e6961 	.word	0x206e6961
    8b4c:	0000000d 	.word	0x0000000d
    8b50:	6e450a0d 	.word	0x6e450a0d
    8b54:	20726574 	.word	0x20726574
    8b58:	61746164 	.word	0x61746164
    8b5c:	203e3e20 	.word	0x203e3e20
    8b60:	00000000 	.word	0x00000000
    8b64:	72570a0d 	.word	0x72570a0d
    8b68:	65747469 	.word	0x65747469
    8b6c:	6425206e 	.word	0x6425206e
    8b70:	20746120 	.word	0x20746120
    8b74:	00006425 	.word	0x00006425
    8b78:	00007325 	.word	0x00007325
    8b7c:	65530a0d 	.word	0x65530a0d
    8b80:	7463656c 	.word	0x7463656c
    8b84:	6f206465 	.word	0x6f206465
    8b88:	6f697470 	.word	0x6f697470
    8b8c:	7369206e 	.word	0x7369206e
    8b90:	0d642520 	.word	0x0d642520
    8b94:	0000000a 	.word	0x0000000a
    8b98:	65520a0d 	.word	0x65520a0d
    8b9c:	6e727574 	.word	0x6e727574
    8ba0:	20676e69 	.word	0x20676e69
    8ba4:	6d206f74 	.word	0x6d206f74
    8ba8:	206e6961 	.word	0x206e6961
    8bac:	756e656d 	.word	0x756e656d
    8bb0:	0000000d 	.word	0x0000000d
    8bb4:	6e490a0d 	.word	0x6e490a0d
    8bb8:	696c6176 	.word	0x696c6176
    8bbc:	706f2064 	.word	0x706f2064
    8bc0:	6e6f6974 	.word	0x6e6f6974
    8bc4:	0000000d 	.word	0x0000000d
    8bc8:	64726148 	.word	0x64726148
    8bcc:	72726520 	.word	0x72726520
    8bd0:	6f20726f 	.word	0x6f20726f
    8bd4:	72756363 	.word	0x72756363
    8bd8:	20646572 	.word	0x20646572
    8bdc:	74206e69 	.word	0x74206e69
    8be0:	6c206568 	.word	0x6c206568
    8be4:	6c20776f 	.word	0x6c20776f
    8be8:	6c657665 	.word	0x6c657665
    8bec:	73696420 	.word	0x73696420
    8bf0:	2f49206b 	.word	0x2f49206b
    8bf4:	616c204f 	.word	0x616c204f
    8bf8:	00726579 	.word	0x00726579
    8bfc:	65737341 	.word	0x65737341
    8c00:	6f697472 	.word	0x6f697472
    8c04:	6166206e 	.word	0x6166206e
    8c08:	64656c69 	.word	0x64656c69
    8c0c:	00000000 	.word	0x00000000
    8c10:	73796850 	.word	0x73796850
    8c14:	6c616369 	.word	0x6c616369
    8c18:	69726420 	.word	0x69726420
    8c1c:	63206576 	.word	0x63206576
    8c20:	6f6e6e61 	.word	0x6f6e6e61
    8c24:	6f772074 	.word	0x6f772074
    8c28:	00006b72 	.word	0x00006b72
    8c2c:	6c756f43 	.word	0x6c756f43
    8c30:	6f6e2064 	.word	0x6f6e2064
    8c34:	69662074 	.word	0x69662074
    8c38:	6620646e 	.word	0x6620646e
    8c3c:	00656c69 	.word	0x00656c69
    8c40:	6c756f43 	.word	0x6c756f43
    8c44:	6f6e2064 	.word	0x6f6e2064
    8c48:	69662074 	.word	0x69662074
    8c4c:	7020646e 	.word	0x7020646e
    8c50:	00687461 	.word	0x00687461
    8c54:	68746150 	.word	0x68746150
    8c58:	6d616e20 	.word	0x6d616e20
    8c5c:	6f662065 	.word	0x6f662065
    8c60:	74616d72 	.word	0x74616d72
    8c64:	766e6920 	.word	0x766e6920
    8c68:	64696c61 	.word	0x64696c61
    8c6c:	00000000 	.word	0x00000000
    8c70:	65636341 	.word	0x65636341
    8c74:	64207373 	.word	0x64207373
    8c78:	65696e65 	.word	0x65696e65
    8c7c:	75642064 	.word	0x75642064
    8c80:	6f742065 	.word	0x6f742065
    8c84:	6f727020 	.word	0x6f727020
    8c88:	69626968 	.word	0x69626968
    8c8c:	20646574 	.word	0x20646574
    8c90:	65636361 	.word	0x65636361
    8c94:	6f207373 	.word	0x6f207373
    8c98:	69642072 	.word	0x69642072
    8c9c:	74636572 	.word	0x74636572
    8ca0:	2079726f 	.word	0x2079726f
    8ca4:	6c6c7566 	.word	0x6c6c7566
    8ca8:	00000000 	.word	0x00000000
    8cac:	65636341 	.word	0x65636341
    8cb0:	64207373 	.word	0x64207373
    8cb4:	65696e65 	.word	0x65696e65
    8cb8:	75642064 	.word	0x75642064
    8cbc:	6f742065 	.word	0x6f742065
    8cc0:	6f727020 	.word	0x6f727020
    8cc4:	69626968 	.word	0x69626968
    8cc8:	20646574 	.word	0x20646574
    8ccc:	65636361 	.word	0x65636361
    8cd0:	00007373 	.word	0x00007373
    8cd4:	20656854 	.word	0x20656854
    8cd8:	656c6966 	.word	0x656c6966
    8cdc:	7269642f 	.word	0x7269642f
    8ce0:	6f746365 	.word	0x6f746365
    8ce4:	6f207972 	.word	0x6f207972
    8ce8:	63656a62 	.word	0x63656a62
    8cec:	73692074 	.word	0x73692074
    8cf0:	766e6920 	.word	0x766e6920
    8cf4:	64696c61 	.word	0x64696c61
    8cf8:	00000000 	.word	0x00000000
    8cfc:	20656854 	.word	0x20656854
    8d00:	73796870 	.word	0x73796870
    8d04:	6c616369 	.word	0x6c616369
    8d08:	69726420 	.word	0x69726420
    8d0c:	69206576 	.word	0x69206576
    8d10:	72772073 	.word	0x72772073
    8d14:	20657469 	.word	0x20657469
    8d18:	746f7270 	.word	0x746f7270
    8d1c:	65746365 	.word	0x65746365
    8d20:	00000064 	.word	0x00000064
    8d24:	20656854 	.word	0x20656854
    8d28:	69676f6c 	.word	0x69676f6c
    8d2c:	206c6163 	.word	0x206c6163
    8d30:	76697264 	.word	0x76697264
    8d34:	756e2065 	.word	0x756e2065
    8d38:	7265626d 	.word	0x7265626d
    8d3c:	20736920 	.word	0x20736920
    8d40:	61766e69 	.word	0x61766e69
    8d44:	0064696c 	.word	0x0064696c
    8d48:	20656854 	.word	0x20656854
    8d4c:	756c6f76 	.word	0x756c6f76
    8d50:	6820656d 	.word	0x6820656d
    8d54:	6e207361 	.word	0x6e207361
    8d58:	6f77206f 	.word	0x6f77206f
    8d5c:	61206b72 	.word	0x61206b72
    8d60:	00616572 	.word	0x00616572
    8d64:	72656854 	.word	0x72656854
    8d68:	73692065 	.word	0x73692065
    8d6c:	206f6e20 	.word	0x206f6e20
    8d70:	696c6176 	.word	0x696c6176
    8d74:	41462064 	.word	0x41462064
    8d78:	6f762054 	.word	0x6f762054
    8d7c:	656d756c 	.word	0x656d756c
    8d80:	00000000 	.word	0x00000000
    8d84:	20656854 	.word	0x20656854
    8d88:	6b6d5f66 	.word	0x6b6d5f66
    8d8c:	29287366 	.word	0x29287366
    8d90:	6f626120 	.word	0x6f626120
    8d94:	64657472 	.word	0x64657472
    8d98:	65756420 	.word	0x65756420
    8d9c:	206f7420 	.word	0x206f7420
    8da0:	20796e61 	.word	0x20796e61
    8da4:	61726170 	.word	0x61726170
    8da8:	6574656d 	.word	0x6574656d
    8dac:	72652072 	.word	0x72652072
    8db0:	00726f72 	.word	0x00726f72
    8db4:	6c756f43 	.word	0x6c756f43
    8db8:	6f6e2064 	.word	0x6f6e2064
    8dbc:	65672074 	.word	0x65672074
    8dc0:	20612074 	.word	0x20612074
    8dc4:	6e617267 	.word	0x6e617267
    8dc8:	6f742074 	.word	0x6f742074
    8dcc:	63636120 	.word	0x63636120
    8dd0:	20737365 	.word	0x20737365
    8dd4:	20656874 	.word	0x20656874
    8dd8:	756c6f76 	.word	0x756c6f76
    8ddc:	7720656d 	.word	0x7720656d
    8de0:	69687469 	.word	0x69687469
    8de4:	6564206e 	.word	0x6564206e
    8de8:	656e6966 	.word	0x656e6966
    8dec:	65702064 	.word	0x65702064
    8df0:	646f6972 	.word	0x646f6972
    8df4:	00000000 	.word	0x00000000
    8df8:	20656854 	.word	0x20656854
    8dfc:	7265706f 	.word	0x7265706f
    8e00:	6f697461 	.word	0x6f697461
    8e04:	7369206e 	.word	0x7369206e
    8e08:	6a657220 	.word	0x6a657220
    8e0c:	65746365 	.word	0x65746365
    8e10:	63612064 	.word	0x63612064
    8e14:	64726f63 	.word	0x64726f63
    8e18:	20676e69 	.word	0x20676e69
    8e1c:	74206f74 	.word	0x74206f74
    8e20:	66206568 	.word	0x66206568
    8e24:	20656c69 	.word	0x20656c69
    8e28:	72616873 	.word	0x72616873
    8e2c:	20676e69 	.word	0x20676e69
    8e30:	696c6f70 	.word	0x696c6f70
    8e34:	00007963 	.word	0x00007963
    8e38:	204e464c 	.word	0x204e464c
    8e3c:	6b726f77 	.word	0x6b726f77
    8e40:	20676e69 	.word	0x20676e69
    8e44:	66667562 	.word	0x66667562
    8e48:	63207265 	.word	0x63207265
    8e4c:	646c756f 	.word	0x646c756f
    8e50:	746f6e20 	.word	0x746f6e20
    8e54:	20656220 	.word	0x20656220
    8e58:	6f6c6c61 	.word	0x6f6c6c61
    8e5c:	65746163 	.word	0x65746163
    8e60:	00000064 	.word	0x00000064
    8e64:	626d754e 	.word	0x626d754e
    8e68:	6f207265 	.word	0x6f207265
    8e6c:	706f2066 	.word	0x706f2066
    8e70:	66206e65 	.word	0x66206e65
    8e74:	73656c69 	.word	0x73656c69
    8e78:	5f203e20 	.word	0x5f203e20
    8e7c:	4c5f5346 	.word	0x4c5f5346
    8e80:	004b434f 	.word	0x004b434f
    8e84:	65766947 	.word	0x65766947
    8e88:	6170206e 	.word	0x6170206e
    8e8c:	656d6172 	.word	0x656d6172
    8e90:	20726574 	.word	0x20726574
    8e94:	69207369 	.word	0x69207369
    8e98:	6c61766e 	.word	0x6c61766e
    8e9c:	00006469 	.word	0x00006469
    8ea0:	6b736944 	.word	0x6b736944
    8ea4:	69727720 	.word	0x69727720
    8ea8:	6f206574 	.word	0x6f206574
    8eac:	2e2e2e6b 	.word	0x2e2e2e6b
    8eb0:	756f6873 	.word	0x756f6873
    8eb4:	6e20646c 	.word	0x6e20646c
    8eb8:	6820746f 	.word	0x6820746f
    8ebc:	20657661 	.word	0x20657661
    8ec0:	63616572 	.word	0x63616572
    8ec4:	20646568 	.word	0x20646568
    8ec8:	65726568 	.word	0x65726568
    8ecc:	00000000 	.word	0x00000000
    8ed0:	6e490a0d 	.word	0x6e490a0d
    8ed4:	72207469 	.word	0x72207469
    8ed8:	6c757365 	.word	0x6c757365
    8edc:	203d2074 	.word	0x203d2074
    8ee0:	0a0d7525 	.word	0x0a0d7525
    8ee4:	00000000 	.word	0x00000000
    8ee8:	6e756f4d 	.word	0x6e756f4d
    8eec:	65722074 	.word	0x65722074
    8ef0:	746c7573 	.word	0x746c7573
    8ef4:	25203d20 	.word	0x25203d20
    8ef8:	000a0d75 	.word	0x000a0d75
    8efc:	6b736944 	.word	0x6b736944
    8f00:	61747320 	.word	0x61747320
    8f04:	20737574 	.word	0x20737574
    8f08:	7525203d 	.word	0x7525203d
    8f0c:	00000a0d 	.word	0x00000a0d
    8f10:	43435553 	.word	0x43435553
    8f14:	21535345 	.word	0x21535345
    8f18:	0000000d 	.word	0x0000000d
    8f1c:	6c696146 	.word	0x6c696146
    8f20:	74206465 	.word	0x74206465
    8f24:	616d206f 	.word	0x616d206f
    8f28:	6620656b 	.word	0x6620656b
    8f2c:	2e656c69 	.word	0x2e656c69
    8f30:	6c696620 	.word	0x6c696620
    8f34:	65725f65 	.word	0x65725f65
    8f38:	746c7573 	.word	0x746c7573
    8f3c:	25203d20 	.word	0x25203d20
    8f40:	000a0d75 	.word	0x000a0d75
    8f44:	63256325 	.word	0x63256325
    8f48:	63256325 	.word	0x63256325
    8f4c:	25206325 	.word	0x25206325
    8f50:	30252f75 	.word	0x30252f75
    8f54:	252f7532 	.word	0x252f7532
    8f58:	20753230 	.word	0x20753230
    8f5c:	75323025 	.word	0x75323025
    8f60:	3230253a 	.word	0x3230253a
    8f64:	39252075 	.word	0x39252075
    8f68:	2020756c 	.word	0x2020756c
    8f6c:	0a0d7325 	.word	0x0a0d7325
    8f70:	00000000 	.word	0x00000000
    8f74:	20753425 	.word	0x20753425
    8f78:	656c6946 	.word	0x656c6946
    8f7c:	2c297328 	.word	0x2c297328
    8f80:	6c303125 	.word	0x6c303125
    8f84:	79622075 	.word	0x79622075
    8f88:	20736574 	.word	0x20736574
    8f8c:	61746f74 	.word	0x61746f74
    8f90:	34250a6c 	.word	0x34250a6c
    8f94:	69442075 	.word	0x69442075
    8f98:	29732872 	.word	0x29732872
    8f9c:	00000000 	.word	0x00000000
    8fa0:	3125202c 	.word	0x3125202c
    8fa4:	20756c30 	.word	0x20756c30
    8fa8:	65747962 	.word	0x65747962
    8fac:	72662073 	.word	0x72662073
    8fb0:	0a0d6565 	.word	0x0a0d6565
    8fb4:	00000000 	.word	0x00000000

00008fb8 <ExCvt>:
    8fb8:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
    8fc8:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    8fd8:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    8fe8:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    8ff8:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    9008:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    9018:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    9028:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00009038 <vst.4938>:
    9038:	02000400 00800100 00200040 00080010     ........@. .....
    9048:	00020004 00000000                       ........

00009050 <cst.4939>:
    9050:	40008000 10002000 40000800 10002000     ...@. .....@. ..
    9060:	04000800 00000200 2c2b2a22 3d3c3b3a     ........"*+,:;<=
    9070:	5d5b3f3e 00007f7c 2c2b2a22 3c3b3a2e     >?[]|..."*+,.:;<
    9080:	5b3f3e3d 007f7c5d 4d90feeb 534f4453     =>?[]|.....MSDOS
    9090:	00302e35 4e204f4e 20454d41 46202020     5.0.NO NAME    F
    90a0:	32335441 00202020 4e204f4e 20454d41     AT32   .NO NAME 
    90b0:	46202020 20205441 00202020 682f2e2e        FAT     .../h
    90c0:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
    90d0:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
    90e0:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    90f0:	732f6c61 682f6372 6d5f6c61 735f6963     al/src/hal_mci_s
    9100:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    9110:	682f6372 755f6c61 74726173 6e79735f     rc/hal_usart_syn
    9120:	00632e63 682f2e2e 722f6c70 682f6374     c.c.../hpl/rtc/h
    9130:	725f6c70 632e6374 00000000 682f2e2e     pl_rtc.c....../h
    9140:	732f6c70 2f636864 5f6c7068 63686473     pl/sdhc/hpl_sdhc
    9150:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
    9160:	41014000 43000000 43000400 43000800     .@.A...C...C...C
    9170:	43000c00                                ...C

00009174 <_usarts>:
    9174:	00000000 40100004 00030000 00700002     .......@......p.
    9184:	0000d8ad 00000000 00000002 40100004     ...............@
    9194:	00030000 00700002 0000d8ad 00000000     ......p.........

000091a4 <_i2cms>:
	...
    91bc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    91cc:	65735f6c 6d6f6372 0000632e 7261485b     l_sercom.c..[Har
    91dc:	75614664 0d5d746c 00000000 53207c20     dFault]..... | S
    91ec:	6b636174 61726620 0d3a656d 00000000     tack frame:.....
    91fc:	7c207c20 20305220 203d2020 30257830      | | R0   = 0x%0
    920c:	0a0d5838 00000000 7c207c20 20315220     8X...... | | R1 
    921c:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    922c:	7c207c20 20325220 203d2020 30257830      | | R2   = 0x%0
    923c:	0a0d5838 00000000 7c207c20 20335220     8X...... | | R3 
    924c:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    925c:	7c207c20 32315220 203d2020 30257830      | | R12  = 0x%0
    926c:	0a0d5838 00000000 7c207c20 20524c20     8X...... | | LR 
    927c:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    928c:	7c207c20 20435020 203d2020 30257830      | | PC   = 0x%0
    929c:	0a0d5838 00000000 7c207c20 52535020     8X...... | | PSR
    92ac:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    92bc:	46207c20 462f5253 0d3a5241 00000000      | FSR/FAR:.....
    92cc:	7c207c20 6e6f4320 75676966 6c626172      | | Configurabl
    92dc:	61462065 20746c75 74617453 52207375     e Fault Status R
    92ec:	73696765 0d726574 00000000 7c207c20     egister..... | |
    92fc:	43207c20 20525346 30203d20 38302578      | CFSR  = 0x%08
    930c:	000a0d58 7c207c20 7c207c20 6d654d20     X... | | | | Mem
    931c:	616e614d 53206567 75746174 65522073     Manage Status Re
    932c:	74736967 000d7265 7c207c20 7c207c20     gister.. | | | |
    933c:	4d207c20 5253464d 30203d20 32302578      | MMFSR = 0x%02
    934c:	000a0d58 7c207c20 7c207c20 73754220     X... | | | | Bus
    935c:	6c756146 74532074 73757461 67655220     Fault Status Reg
    936c:	65747369 00000d72 7c207c20 7c207c20     ister... | | | |
    937c:	42207c20 20525346 7830203d 58323025      | BFSR = 0x%02X
    938c:	00000a0d 7c207c20 7c207c20 61735520     .... | | | | Usa
    939c:	61466567 20746c75 74617453 52207375     geFault Status R
    93ac:	73696765 0d726574 00000000 7c207c20     egister..... | |
    93bc:	7c207c20 55207c20 20525346 7830203d      | | | UFSR = 0x
    93cc:	58323025 00000a0d 7c207c20 6d654d20     %02X.... | | Mem
    93dc:	616e614d 41206567 65726464 52207373     Manage Address R
    93ec:	73696765 20726574 6c617628 74696469     egister (validit
    93fc:	25203a79 0a0d2958 00000000 7c207c20     y: %X)...... | |
    940c:	4d207c20 5241464d 30203d20 38302578      | MMFAR = 0x%08
    941c:	000a0d58 7c207c20 73754220 6c756146     X... | | BusFaul
    942c:	64412074 73657264 65522073 74736967     t Address Regist
    943c:	20207265 6c617628 74696469 25203a79     er  (validity: %
    944c:	0a0d2958 00000000 7c207c20 42207c20     X)...... | | | B
    945c:	20524146 7830203d 58383025 00000a0d     FAR = 0x%08X....
    946c:	7c207c20 72614820 61462064 20746c75      | | Hard Fault 
    947c:	74617453 52207375 73696765 0d726574     Status Register.
    948c:	00000000 7c207c20 48207c20 20525346     .... | | | HFSR 
    949c:	30203d20 38302578 000a0d58 7c207c20      = 0x%08X... | |
    94ac:	53464420 203d2052 30257830 0a0d5838      DFSR = 0x%08X..
    94bc:	00000000 7c207c20 53464120 203d2052     .... | | AFSR = 
    94cc:	30257830 0a0d5838 00000000 4d207c20     0x%08X...... | M
    94dc:	0d637369 00000000 7c207c20 2f524c20     isc..... | | LR/
    94ec:	5f435845 55544552 203d4e52 30257830     EXC_RETURN= 0x%0
    94fc:	0a0d5834 00000000 00786825 6e450a0d     4X......%hx...En
    950c:	20726574 656c6966 656d616e 203e3e20     ter filename >> 
    951c:	00000000 65746e45 61642072 3e206174     ....Enter data >
    952c:	0000203e 65520a0d 65697274 676e6976     > ....Retrieving
    953c:	20445320 74617473 000d7375 5b53227b      SD status..{"S[
    954c:	75343025 7b3a225d 3a225122 222c7525     %04u]":{"Q":%u,"
    955c:	253a2241 44222c75 7d752522 000a0d7d     A":%u,"D"%u}}...
    956c:	5b43227b 75343025 7b3a225d 3a225322     {"C[%04u]":{"S":
    957c:	222c7525 3a224153 222c7525 3a223141     %u,"SA":%u,"A1":
    958c:	222c7525 3a223241 222c7525 3a223144     %u,"A2":%u,"D1":
    959c:	222c7525 3a223244 7d7d7525 00000a0d     %u,"D2":%u}}....
    95ac:	74530a0d 69747261 4c20676e 52414469     ..Starting LiDAR
    95bc:	746f6d20 000d726f 74530a0d 6970706f      motor....Stoppi
    95cc:	4c20676e 52414469 746f6d20 000d726f     ng LiDAR motor..
    95dc:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    95ec:	73205241 0d706f74 00000000 65520a0d     AR stop.......Re
    95fc:	73657571 676e6974 44694c20 72205241     questing LiDAR r
    960c:	74657365 0000000d 65520a0d 73657571     eset......Reques
    961c:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    962c:	61637320 00000d6e 65520a0d 73657571      scan.....Reques
    963c:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    964c:	70786520 73736572 61637320 00000d6e      express scan...
    965c:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    966c:	73205241 74726174 726f6620 73206563     AR start force s
    967c:	0d6e6163 00000000 65520a0d 65697274     can.......Retrie
    968c:	676e6976 44694c20 69205241 0d6f666e     ving LiDAR info.
    969c:	00000000 65520a0d 65697274 676e6976     ......Retrieving
    96ac:	44694c20 68205241 746c6165 00000d68      LiDAR health...
    96bc:	65520a0d 65697274 676e6976 44694c20     ..Retrieving LiD
    96cc:	73205241 6c706d61 74617265 000d7365     AR samplerates..
    96dc:	63256325 00000000 63256325 00006325     %c%c....%c%c%c..
    96ec:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    96fc:	69205241 0d6f666e 00000000 65520a0d     AR info.......Re
    970c:	73657571 676e6974 44694c20 68205241     questing LiDAR h
    971c:	746c6165 00000d68 65520a0d 73657571     ealth.....Reques
    972c:	676e6974 44694c20 73205241 6c706d61     ting LiDAR sampl
    973c:	74617265 000d7365 4144694c 74732052     erates..LiDAR st
    974c:	6570706f 00000d64 4144694c 65722052     opped...LiDAR re
    975c:	0d746573 00000000 68746167 64657265     set.....gathered
    976c:	6c302520 30252f75 63732064 2e736e61      %0lu/%0d scans.
    977c:	0a0d2e2e 00000000 756c3025 766e6920     ........%0lu inv
    978c:	64696c61 61637320 2d20736e 6167202d     alid scans -- ga
    979c:	72656874 25206465 2f756c30 20643025     thered %0lu/%0d 
    97ac:	6e616373 2e2e2e73 00000a0d 58323025     scans.......%02X
    97bc:	00000000 50522023 4144694c 6f4d2052     ....# RPLiDAR Mo
    97cc:	206c6564 203a4449 0a0d7525 00000000     del ID: %u......
    97dc:	50522023 4144694c 69462052 61776d72     # RPLiDAR Firmwa
    97ec:	56206572 69737265 203a6e6f 252e7525     re Version: %u.%
    97fc:	000a0d75 61482023 61776472 56206572     u...# Hardware V
    980c:	69737265 203a6e6f 0a0d7525 00000000     ersion: %u......
    981c:	65532023 6c616972 6d754e20 3a726562     # Serial Number:
    982c:	25783020 000a0d73 444f4f47 00000000      0x%s...GOOD....
    983c:	4e524157 00474e49 4f525245 00000052     WARNING.ERROR...
    984c:	4e4b4e55 004e574f 4c203a20 52414469     UNKNOWN. : LiDAR
    985c:	61654820 2068746c 25207369 0a0d2173      Health is %s!..
    986c:	00000000 4c203a20 52414469 61654820     .... : LiDAR Hea
    987c:	2068746c 25207369 0a0d2173 45203a20     lth is %s!.. : E
    988c:	726f7272 646f6320 25203a65 000a0d75     rror code: %u...
    989c:	53203a20 646e6174 20647261 6e616353      : Standard Scan
    98ac:	6d615320 72656c70 3a657461 0d752520      Samplerate: %u.
    98bc:	0000000a 45203a20 65727078 53207373     .... : Express S
    98cc:	206e6163 706d6153 6172656c 203a6574     can Samplerate: 
    98dc:	0a0d7525 00000000 0a0d0a0d 3d3d3d3d     %u..........====
    98ec:	3d3d3d3d 4144694c 75412052 616d6f74     ====LiDAR Automa
    98fc:	20646574 7070614d 20676e69 74737953     ted Mapping Syst
    990c:	28206d65 534d414c 3d3d3d29 3d3d3d3d     em (LAMS)=======
    991c:	00000d3d 6e490a0d 696c6176 706f2064     =.....Invalid op
    992c:	6e6f6974 00000d20 6b736944 746f6e20     tion ...Disk not
    993c:	696e6920 6c616974 64657a69 00000000      initialized....
    994c:	6d206f4e 75696465 6e69206d 65687420     No medium in the
    995c:	69726420 00006576 6b736944 69727720      drive..Disk wri
    996c:	70206574 65746f72 64657463 00000000     te protected....
    997c:	535b0a0d 206e6163 6f727245 000d5d72     ..[Scan Error]..
    998c:	54207c20 6f656d69 45207475 726f7272      | Timeout Error
    999c:	0000000d 4f207c20 6f2d7475 6f422d66     .... | Out-of-Bo
    99ac:	73646e75 72724520 000d726f 7c207c20     unds Error.. | |
    99bc:	74796220 6f632065 20746e75 756c2528      byte count (%lu
    99cc:	65772029 7020746e 20747361 20656874     ) went past the 
    99dc:	70736572 65736e6f 73656420 70697263     response descrip
    99ec:	20726f74 696d696c 25282074 0d29756c     tor limit (%lu).
    99fc:	0000000a 44207c20 206b7369 74696e49     .... | Disk Init
    9a0c:	696c6169 6974617a 45206e6f 726f7272     ialization Error
    9a1c:	0000000d 7c207c20 0d732520 0000000a     .... | | %s.....
    9a2c:	44207c20 206b7369 6e756f4d 72452074      | Disk Mount Er
    9a3c:	0d726f72 00000000 46207c20 20656c69     ror..... | File 
    9a4c:	61657243 45206574 726f7272 0000000d     Create Error....
    9a5c:	46207c20 20656c69 74697257 72452065      | File Write Er
    9a6c:	0d726f72 00000000 46207c20 20656c69     ror..... | File 
    9a7c:	736f6c43 72452065 0d726f72 00000000     Close Error.....
    9a8c:	45207c20 726f7272 6e654720 74617265      | Error Generat
    9a9c:	20676e69 2077654e 656c6946 656d616e     ing New Filename
    9aac:	0000000d 45207c20 726f7272 646f6320     .... | Error cod
    9abc:	75252065 00000a0d 72500a0d 20737365     e %u......Press 
    9acc:	74747562 74206e6f 7473206f 0d747261     button to start.
    9adc:	00000000 6e616373 75333025 6d616c2e     ....scan%03u.lam
    9aec:	00000000 72570a0d 6e697469 6f742067     ......Writing to
    9afc:	0d732520 0000000a 74530a0d 69747261      %s.......Starti
    9b0c:	7320676e 0d6e6163 00000000 252c7525     ng scan.....%u,%
    9b1c:	75252c75 2c75252c 252c7525 75252c75     u,%u,%u,%u,%u,%u
    9b2c:	00000a0d                                ....

00009b30 <sd_mmc_trans_units>:
    9b30:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00009b4c <sd_trans_multipliers>:
    9b4c:	00000000 0000000a 0000000c 0000000d     ................
    9b5c:	0000000f 00000014 00000019 0000001e     ................
    9b6c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    9b7c:	00000037 0000003c 00000046 00000050     7...<...F...P...

00009b8c <mmc_trans_multipliers>:
    9b8c:	00000000 0000000a 0000000c 0000000d     ................
    9b9c:	0000000f 00000014 0000001a 0000001e     ................
    9bac:	00000023 00000028 0000002d 00000034     #...(...-...4...
    9bbc:	00000037 0000003c 00000046 00000050     7...<...F...P...
    9bcc:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    9bdc:	0000632e 6e450a0d 20726574 6c676e61     .c....Enter angl
    9bec:	3e3e2065 00000020 52450a0d 3a524f52     e >> .....ERROR:
    9bfc:	766e4920 64696c61 676e6120 202e656c      Invalid angle. 
    9c0c:	6c676e41 756d2065 62207473 65622065     Angle must be be
    9c1c:	65657774 2030206e 20646e61 0d303831     tween 0 and 180.
    9c2c:	00000000 65530a0d 6e697474 65732067     ......Setting se
    9c3c:	206f7672 6c676e61 6f742065 6c302520     rvo angle to %0l
    9c4c:	000a0d75                                u...

00009c50 <__sf_fake_stderr>:
	...

00009c70 <__sf_fake_stdin>:
	...

00009c90 <__sf_fake_stdout>:
	...

00009cb0 <_global_impure_ptr>:
    9cb0:	200002f4 4f500043 00584953 2d23002e     ... C.POSIX...#-
    9cc0:	00202b30 004c6c68 45676665 30004746     0+ .hlL.efgEFG.0
    9cd0:	34333231 38373635 43424139 00464544     123456789ABCDEF.
    9ce0:	33323130 37363534 62613938 66656463     0123456789abcdef
    9cf0:	00000000 00009d12 00009d15 00009d18     ................
    9d00:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    9d10:	2d2b005d 00303000 00005878                       ].+-.00.xX.

00009d1b <_ctype_>:
    9d1b:	20202000 20202020 28282020 20282828     .         ((((( 
    9d2b:	20202020 20202020 20202020 20202020                     
    9d3b:	10108820 10101010 10101010 10101010      ...............
    9d4b:	04040410 04040404 10040404 10101010     ................
    9d5b:	41411010 41414141 01010101 01010101     ..AAAAAA........
    9d6b:	01010101 01010101 01010101 10101010     ................
    9d7b:	42421010 42424242 02020202 02020202     ..BBBBBB........
    9d8b:	02020202 02020202 02020202 10101010     ................
    9d9b:	00000020 00000000 00000000 00000000      ...............
	...

00009e1c <_init>:
    9e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e1e:	bf00      	nop
    9e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9e22:	bc08      	pop	{r3}
    9e24:	469e      	mov	lr, r3
    9e26:	4770      	bx	lr

00009e28 <__init_array_start>:
    9e28:	00000289 	.word	0x00000289

00009e2c <_fini>:
    9e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e2e:	bf00      	nop
    9e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9e32:	bc08      	pop	{r3}
    9e34:	469e      	mov	lr, r3
    9e36:	4770      	bx	lr

00009e38 <__fini_array_start>:
    9e38:	00000265 	.word	0x00000265
