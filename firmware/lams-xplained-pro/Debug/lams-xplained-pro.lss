
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009334  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00009334  00009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004ac  20000000  0000933c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000204ac  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000204ac  2**0
                  CONTENTS
  5 .bss          00000b68  200004b0  000097f0  000204b0  2**3
                  ALLOC
  6 .stack        00010000  20001018  0000a358  000204b0  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000204d6  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004bb1c  00000000  00000000  0002052f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000068de  00000000  00000000  0006c04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016fe7  00000000  00000000  00072929  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001118  00000000  00000000  00089910  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001558  00000000  00000000  0008aa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00040812  00000000  00000000  0008bf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00025fb2  00000000  00000000  000cc792  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00129bd1  00000000  00000000  000f2744  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003da0  00000000  00000000  0021c318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 10 01 20 d5 02 00 00 d1 02 00 00 fd 32 00 00     ... .........2..
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	85 34 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .4..............
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	2d 29 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     -)..............
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	21 28 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     !(..............
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004b0 	.word	0x200004b0
     280:	00000000 	.word	0x00000000
     284:	0000933c 	.word	0x0000933c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000933c 	.word	0x0000933c
     2c4:	200004b4 	.word	0x200004b4
     2c8:	0000933c 	.word	0x0000933c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000933c 	.word	0x0000933c
     33c:	200004ac 	.word	0x200004ac
     340:	20001018 	.word	0x20001018
     344:	200004b0 	.word	0x200004b0
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	000065cd 	.word	0x000065cd
     354:	000043d9 	.word	0x000043d9

00000358 <sd_mmc_test_unit_ready>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_test_unit_ready(uint8_t slot)
{
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot)) {
     35c:	4b0a      	ldr	r3, [pc, #40]	; (388 <sd_mmc_test_unit_ready+0x30>)
     35e:	4798      	blx	r3
     360:	2801      	cmp	r0, #1
     362:	d00f      	beq.n	384 <sd_mmc_test_unit_ready+0x2c>
     364:	b120      	cbz	r0, 370 <sd_mmc_test_unit_ready+0x18>
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     366:	2802      	cmp	r0, #2
     368:	bf0c      	ite	eq
     36a:	2002      	moveq	r0, #2
     36c:	2001      	movne	r0, #1
     36e:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     370:	4620      	mov	r0, r4
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <sd_mmc_test_unit_ready+0x34>)
     374:	4798      	blx	r3
     376:	f000 0003 	and.w	r0, r0, #3
			return CTRL_NO_PRESENT;
     37a:	2800      	cmp	r0, #0
     37c:	bf14      	ite	ne
     37e:	2000      	movne	r0, #0
     380:	2002      	moveq	r0, #2
     382:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
     384:	2003      	movs	r0, #3
	}
}
     386:	bd10      	pop	{r4, pc}
     388:	00004a29 	.word	0x00004a29
     38c:	00005071 	.word	0x00005071

00000390 <sd_mmc_read_capacity>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     390:	b538      	push	{r3, r4, r5, lr}
     392:	4604      	mov	r4, r0
     394:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <sd_mmc_read_capacity+0x18>)
     398:	4798      	blx	r3
     39a:	0040      	lsls	r0, r0, #1
     39c:	3801      	subs	r0, #1
     39e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     3a0:	4620      	mov	r0, r4
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <sd_mmc_read_capacity+0x1c>)
     3a4:	4798      	blx	r3
}
     3a6:	bd38      	pop	{r3, r4, r5, pc}
     3a8:	00005095 	.word	0x00005095
     3ac:	00000359 	.word	0x00000359

000003b0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
dstatus_t disk_initialize(uint8_t drv)
{
     3b0:	b510      	push	{r4, lr}
     3b2:	4604      	mov	r4, r0
	int           i;
	ctrl_status_t mem_status;

	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i++) {
		mem_status = sd_mmc_test_unit_ready(drv);
     3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <disk_initialize+0x30>)
     3b6:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3b8:	2803      	cmp	r0, #3
     3ba:	d106      	bne.n	3ca <disk_initialize+0x1a>
		mem_status = sd_mmc_test_unit_ready(drv);
     3bc:	4620      	mov	r0, r4
     3be:	4b08      	ldr	r3, [pc, #32]	; (3e0 <disk_initialize+0x30>)
     3c0:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3c2:	2803      	cmp	r0, #3
     3c4:	d101      	bne.n	3ca <disk_initialize+0x1a>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
     3c6:	2001      	movs	r0, #1
     3c8:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
     3ca:	b938      	cbnz	r0, 3dc <disk_initialize+0x2c>
	}

	/* Check Write Protection Status */
	if (sd_mmc_is_write_protected(drv)) {
     3cc:	4620      	mov	r0, r4
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <disk_initialize+0x34>)
     3d0:	4798      	blx	r3
     3d2:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
     3d4:	bf14      	ite	ne
     3d6:	2004      	movne	r0, #4
     3d8:	2000      	moveq	r0, #0
     3da:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
     3dc:	2001      	movs	r0, #1
}
     3de:	bd10      	pop	{r4, pc}
     3e0:	00000359 	.word	0x00000359
     3e4:	000050b9 	.word	0x000050b9

000003e8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
dstatus_t disk_status(uint8_t drv)
{
     3e8:	b508      	push	{r3, lr}
	switch (sd_mmc_test_unit_ready(drv)) {
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <disk_status+0x18>)
     3ec:	4798      	blx	r3
     3ee:	b120      	cbz	r0, 3fa <disk_status+0x12>
	case CTRL_GOOD:
		return ERR_NONE;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
     3f0:	2802      	cmp	r0, #2
     3f2:	bf0c      	ite	eq
     3f4:	2003      	moveq	r0, #3
     3f6:	2001      	movne	r0, #1
     3f8:	bd08      	pop	{r3, pc}
		return ERR_NONE;
     3fa:	2000      	movs	r0, #0
	}
}
     3fc:	bd08      	pop	{r3, pc}
     3fe:	bf00      	nop
     400:	00000359 	.word	0x00000359

00000404 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_read(uint8_t drv, uint8_t *buff, uint32_t sector, uint8_t count)
{
     404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     408:	b083      	sub	sp, #12
     40a:	4683      	mov	fp, r0
     40c:	4688      	mov	r8, r1
     40e:	4614      	mov	r4, r2
     410:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     412:	a901      	add	r1, sp, #4
     414:	4b17      	ldr	r3, [pc, #92]	; (474 <disk_read+0x70>)
     416:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     418:	192e      	adds	r6, r5, r4
     41a:	9b01      	ldr	r3, [sp, #4]
     41c:	3301      	adds	r3, #1
     41e:	429e      	cmp	r6, r3
     420:	d901      	bls.n	426 <disk_read+0x22>
		return ERR_INVALID_ARG;
     422:	20f3      	movs	r0, #243	; 0xf3
     424:	e01f      	b.n	466 <disk_read+0x62>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
     426:	b30d      	cbz	r5, 46c <disk_read+0x68>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     428:	4f13      	ldr	r7, [pc, #76]	; (478 <disk_read+0x74>)
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     42a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 47c <disk_read+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     42e:	f8df a050 	ldr.w	sl, [pc, #80]	; 480 <disk_read+0x7c>
     432:	e00f      	b.n	454 <disk_read+0x50>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     434:	2101      	movs	r1, #1
     436:	4640      	mov	r0, r8
     438:	47c8      	blx	r9
     43a:	b998      	cbnz	r0, 464 <disk_read+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     43c:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     43e:	3000      	adds	r0, #0
     440:	bf18      	it	ne
     442:	2001      	movne	r0, #1
     444:	e000      	b.n	448 <disk_read+0x44>
     446:	2002      	movs	r0, #2
		if (sd_mmc_mem_2_ram(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     448:	b990      	cbnz	r0, 470 <disk_read+0x6c>
     44a:	3401      	adds	r4, #1
     44c:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     450:	42a6      	cmp	r6, r4
     452:	d008      	beq.n	466 <disk_read+0x62>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     454:	2201      	movs	r2, #1
     456:	4621      	mov	r1, r4
     458:	4658      	mov	r0, fp
     45a:	47b8      	blx	r7
     45c:	2800      	cmp	r0, #0
     45e:	d0e9      	beq.n	434 <disk_read+0x30>
     460:	2802      	cmp	r0, #2
     462:	d0f0      	beq.n	446 <disk_read+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     464:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     466:	b003      	add	sp, #12
     468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     46c:	2000      	movs	r0, #0
     46e:	e7fa      	b.n	466 <disk_read+0x62>
			return ERR_INVALID_DATA;
     470:	20ff      	movs	r0, #255	; 0xff
     472:	e7f8      	b.n	466 <disk_read+0x62>
     474:	00000391 	.word	0x00000391
     478:	00005131 	.word	0x00005131
     47c:	00005209 	.word	0x00005209
     480:	00005255 	.word	0x00005255

00000484 <disk_write>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_write(uint8_t drv, uint8_t const *buff, uint32_t sector, uint8_t count)
{
     484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     488:	b083      	sub	sp, #12
     48a:	4683      	mov	fp, r0
     48c:	4688      	mov	r8, r1
     48e:	4614      	mov	r4, r2
     490:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     492:	a901      	add	r1, sp, #4
     494:	4b17      	ldr	r3, [pc, #92]	; (4f4 <disk_write+0x70>)
     496:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     498:	192e      	adds	r6, r5, r4
     49a:	9b01      	ldr	r3, [sp, #4]
     49c:	3301      	adds	r3, #1
     49e:	429e      	cmp	r6, r3
     4a0:	d901      	bls.n	4a6 <disk_write+0x22>
		return ERR_INVALID_ARG;
     4a2:	20f3      	movs	r0, #243	; 0xf3
     4a4:	e01f      	b.n	4e6 <disk_write+0x62>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
     4a6:	b30d      	cbz	r5, 4ec <disk_write+0x68>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4a8:	4f13      	ldr	r7, [pc, #76]	; (4f8 <disk_write+0x74>)
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4fc <disk_write+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4ae:	f8df a050 	ldr.w	sl, [pc, #80]	; 500 <disk_write+0x7c>
     4b2:	e00f      	b.n	4d4 <disk_write+0x50>
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4b4:	2101      	movs	r1, #1
     4b6:	4640      	mov	r0, r8
     4b8:	47c8      	blx	r9
     4ba:	b998      	cbnz	r0, 4e4 <disk_write+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4bc:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     4be:	3000      	adds	r0, #0
     4c0:	bf18      	it	ne
     4c2:	2001      	movne	r0, #1
     4c4:	e000      	b.n	4c8 <disk_write+0x44>
     4c6:	2002      	movs	r0, #2
		if (sd_mmc_ram_2_mem(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     4c8:	b990      	cbnz	r0, 4f0 <disk_write+0x6c>
     4ca:	3401      	adds	r4, #1
     4cc:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     4d0:	42a6      	cmp	r6, r4
     4d2:	d008      	beq.n	4e6 <disk_write+0x62>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4d4:	2201      	movs	r2, #1
     4d6:	4621      	mov	r1, r4
     4d8:	4658      	mov	r0, fp
     4da:	47b8      	blx	r7
     4dc:	2800      	cmp	r0, #0
     4de:	d0e9      	beq.n	4b4 <disk_write+0x30>
     4e0:	2802      	cmp	r0, #2
     4e2:	d0f0      	beq.n	4c6 <disk_write+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     4e4:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     4e6:	b003      	add	sp, #12
     4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     4ec:	2000      	movs	r0, #0
     4ee:	e7fa      	b.n	4e6 <disk_write+0x62>
			return ERR_INVALID_DATA;
     4f0:	20ff      	movs	r0, #255	; 0xff
     4f2:	e7f8      	b.n	4e6 <disk_write+0x62>
     4f4:	00000391 	.word	0x00000391
     4f8:	000052c5 	.word	0x000052c5
     4fc:	00005365 	.word	0x00005365
     500:	000053b1 	.word	0x000053b1

00000504 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
     504:	b510      	push	{r4, lr}
     506:	b082      	sub	sp, #8
     508:	4614      	mov	r4, r2
	dstatus_t res = ERR_INVALID_ARG;

	switch (ctrl) {
     50a:	2903      	cmp	r1, #3
     50c:	d81a      	bhi.n	544 <disk_ioctl+0x40>
     50e:	e8df f001 	tbb	[pc, r1]
     512:	0712      	.short	0x0712
     514:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(unsigned long *)buff = 1;
     516:	2301      	movs	r3, #1
     518:	6013      	str	r3, [r2, #0]
		res                    = ERR_NONE;
     51a:	2000      	movs	r0, #0
	default:
		res = ERR_INVALID_ARG;
	}

	return res;
}
     51c:	b002      	add	sp, #8
     51e:	bd10      	pop	{r4, pc}
		sd_mmc_read_capacity(drv, &ul_last_sector_num);
     520:	a901      	add	r1, sp, #4
     522:	4b09      	ldr	r3, [pc, #36]	; (548 <disk_ioctl+0x44>)
     524:	4798      	blx	r3
		*(unsigned long *)buff = ul_last_sector_num + 1;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3301      	adds	r3, #1
     52a:	6023      	str	r3, [r4, #0]
		res = ERR_NONE;
     52c:	2000      	movs	r0, #0
	} break;
     52e:	e7f5      	b.n	51c <disk_ioctl+0x18>
		*(uint8_t *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
     530:	2000      	movs	r0, #0
     532:	7010      	strb	r0, [r2, #0]
	} break;
     534:	e7f2      	b.n	51c <disk_ioctl+0x18>
		if (sd_mmc_test_unit_ready(drv) == CTRL_GOOD) {
     536:	4b05      	ldr	r3, [pc, #20]	; (54c <disk_ioctl+0x48>)
     538:	4798      	blx	r3
     53a:	2800      	cmp	r0, #0
			res = ERR_NOT_READY;
     53c:	bf0c      	ite	eq
     53e:	2000      	moveq	r0, #0
     540:	20e3      	movne	r0, #227	; 0xe3
     542:	e7eb      	b.n	51c <disk_ioctl+0x18>
		res = ERR_INVALID_ARG;
     544:	20f3      	movs	r0, #243	; 0xf3
     546:	e7e9      	b.n	51c <disk_ioctl+0x18>
     548:	00000391 	.word	0x00000391
     54c:	00000359 	.word	0x00000359

00000550 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     550:	4b10      	ldr	r3, [pc, #64]	; (594 <STDIO_IO_PORT_init+0x44>)
     552:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     566:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     592:	4770      	bx	lr
     594:	41008000 	.word	0x41008000

00000598 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <STDIO_IO_CLOCK_init+0x1c>)
     59a:	2240      	movs	r2, #64	; 0x40
     59c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     5a0:	2243      	movs	r2, #67	; 0x43
     5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     5a6:	4a04      	ldr	r2, [pc, #16]	; (5b8 <STDIO_IO_CLOCK_init+0x20>)
     5a8:	6993      	ldr	r3, [r2, #24]
     5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     5ae:	6193      	str	r3, [r2, #24]
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	40001c00 	.word	0x40001c00
     5b8:	40000800 	.word	0x40000800

000005bc <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     5bc:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <STDIO_IO_init+0x18>)
     5c0:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     5c2:	2200      	movs	r2, #0
     5c4:	4904      	ldr	r1, [pc, #16]	; (5d8 <STDIO_IO_init+0x1c>)
     5c6:	4805      	ldr	r0, [pc, #20]	; (5dc <STDIO_IO_init+0x20>)
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <STDIO_IO_init+0x24>)
     5ca:	4798      	blx	r3
	STDIO_IO_PORT_init();
     5cc:	4b05      	ldr	r3, [pc, #20]	; (5e4 <STDIO_IO_init+0x28>)
     5ce:	4798      	blx	r3
     5d0:	bd08      	pop	{r3, pc}
     5d2:	bf00      	nop
     5d4:	00000599 	.word	0x00000599
     5d8:	41012000 	.word	0x41012000
     5dc:	20000b48 	.word	0x20000b48
     5e0:	00002651 	.word	0x00002651
     5e4:	00000551 	.word	0x00000551

000005e8 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     5e8:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ea:	4b72      	ldr	r3, [pc, #456]	; (7b4 <SDHC_IO_BUS_PORT_init+0x1cc>)
     5ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     5f0:	6099      	str	r1, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     5f6:	629a      	str	r2, [r3, #40]	; 0x28
     5f8:	4d6f      	ldr	r5, [pc, #444]	; (7b8 <SDHC_IO_BUS_PORT_init+0x1d0>)
     5fa:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fc:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5fe:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
     602:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     606:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60a:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     60e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     612:	f040 0001 	orr.w	r0, r0, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     616:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     61e:	f000 000f 	and.w	r0, r0, #15
	tmp |= PORT_PMUX_PMUXO(data);
     622:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     626:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     62e:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	629a      	str	r2, [r3, #40]	; 0x28
     632:	4e62      	ldr	r6, [pc, #392]	; (7bc <SDHC_IO_BUS_PORT_init+0x1d4>)
     634:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     636:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     638:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
     63c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     640:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     644:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     648:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     650:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     654:	f893 403a 	ldrb.w	r4, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     658:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     65c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     660:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     664:	f44f 2480 	mov.w	r4, #262144	; 0x40000
     668:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     66c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     670:	4f53      	ldr	r7, [pc, #332]	; (7c0 <SDHC_IO_BUS_PORT_init+0x1d8>)
     672:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     676:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     67a:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
     67e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     682:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     686:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     68a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68e:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     692:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69a:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     69e:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a2:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a6:	f44f 2400 	mov.w	r4, #524288	; 0x80000
     6aa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6b2:	3704      	adds	r7, #4
     6b4:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6b8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6bc:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
     6c0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     6c4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c8:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     6cc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d0:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6d8:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6dc:	f004 040f 	and.w	r4, r4, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6e0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e4:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6e8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6f0:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6f8:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
     6fc:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     700:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     704:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     708:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     710:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     714:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     718:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     71c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     720:	f883 40ba 	strb.w	r4, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     724:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     728:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     72c:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     730:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     734:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     738:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     73c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     740:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     748:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     74c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     750:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     754:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     75c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     760:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     764:	4817      	ldr	r0, [pc, #92]	; (7c4 <SDHC_IO_BUS_PORT_init+0x1dc>)
     766:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     76a:	4a17      	ldr	r2, [pc, #92]	; (7c8 <SDHC_IO_BUS_PORT_init+0x1e0>)
     76c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     770:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     774:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     778:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     77c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     784:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     788:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78c:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     790:	4a0e      	ldr	r2, [pc, #56]	; (7cc <SDHC_IO_BUS_PORT_init+0x1e4>)
     792:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     796:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     79a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     79e:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a2:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	gpio_set_pin_function(CARD_DETECT_0, GPIO_PIN_FUNCTION_OFF);
	
	gpio_set_pin_direction(WRITE_PROTECT_0, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(WRITE_PROTECT_0, GPIO_PULL_OFF);
	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);
}
     7ae:	bcf0      	pop	{r4, r5, r6, r7}
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	41008000 	.word	0x41008000
     7b8:	c0000020 	.word	0xc0000020
     7bc:	c0000010 	.word	0xc0000010
     7c0:	c0000004 	.word	0xc0000004
     7c4:	40020000 	.word	0x40020000
     7c8:	c0020010 	.word	0xc0020010
     7cc:	c0020020 	.word	0xc0020020

000007d0 <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     7d0:	4a05      	ldr	r2, [pc, #20]	; (7e8 <SDHC_IO_BUS_CLOCK_init+0x18>)
     7d2:	6913      	ldr	r3, [r2, #16]
     7d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     7d8:	6113      	str	r3, [r2, #16]
     7da:	4b04      	ldr	r3, [pc, #16]	; (7ec <SDHC_IO_BUS_CLOCK_init+0x1c>)
     7dc:	2240      	movs	r2, #64	; 0x40
     7de:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     7e6:	4770      	bx	lr
     7e8:	40000800 	.word	0x40000800
     7ec:	40001c00 	.word	0x40001c00

000007f0 <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     7f0:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     7f2:	4b05      	ldr	r3, [pc, #20]	; (808 <SDHC_IO_BUS_init+0x18>)
     7f4:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     7f6:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     7fa:	4804      	ldr	r0, [pc, #16]	; (80c <SDHC_IO_BUS_init+0x1c>)
     7fc:	4b04      	ldr	r3, [pc, #16]	; (810 <SDHC_IO_BUS_init+0x20>)
     7fe:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <SDHC_IO_BUS_init+0x24>)
     802:	4798      	blx	r3
     804:	bd08      	pop	{r3, pc}
     806:	bf00      	nop
     808:	000007d1 	.word	0x000007d1
     80c:	20000b58 	.word	0x20000b58
     810:	000022e5 	.word	0x000022e5
     814:	000005e9 	.word	0x000005e9

00000818 <GPIO_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	4b18      	ldr	r3, [pc, #96]	; (87c <GPIO_init+0x64>)
     81a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     81e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     822:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     82a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     82e:	4a14      	ldr	r2, [pc, #80]	; (880 <GPIO_init+0x68>)
     830:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     834:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     844:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     846:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     848:	4a0e      	ldr	r2, [pc, #56]	; (884 <GPIO_init+0x6c>)
     84a:	629a      	str	r2, [r3, #40]	; 0x28
     84c:	4a0e      	ldr	r2, [pc, #56]	; (888 <GPIO_init+0x70>)
     84e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     850:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
	tmp &= ~PORT_PINCFG_PMUXEN;
     854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     858:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	2240      	movs	r2, #64	; 0x40
     85e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     860:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     862:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     866:	629a      	str	r2, [r3, #40]	; 0x28
     868:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     86c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     872:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
     87a:	4770      	bx	lr
     87c:	41008000 	.word	0x41008000
     880:	c0000004 	.word	0xc0000004
     884:	40020000 	.word	0x40020000
     888:	c0020800 	.word	0xc0020800

0000088c <system_init>:
	gpio_set_pin_direction(LED_STATUS, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(LED_STATUS, GPIO_PIN_FUNCTION_OFF);
}

void system_init(void)
{
     88c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     88e:	4b08      	ldr	r3, [pc, #32]	; (8b0 <system_init+0x24>)
     890:	4798      	blx	r3
	init_mcu();

	GPIO_init();
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <system_init+0x28>)
     894:	4798      	blx	r3
	FATFS_CALENDAR_init();
     896:	4b08      	ldr	r3, [pc, #32]	; (8b8 <system_init+0x2c>)
     898:	4798      	blx	r3
	LIDAR_USART_init();
     89a:	4b08      	ldr	r3, [pc, #32]	; (8bc <system_init+0x30>)
     89c:	4798      	blx	r3
	STDIO_IO_init();
     89e:	4b08      	ldr	r3, [pc, #32]	; (8c0 <system_init+0x34>)
     8a0:	4798      	blx	r3
	SDHC_IO_BUS_init();
     8a2:	4b08      	ldr	r3, [pc, #32]	; (8c4 <system_init+0x38>)
     8a4:	4798      	blx	r3
	SERVO_PWM_init();
     8a6:	4b08      	ldr	r3, [pc, #32]	; (8c8 <system_init+0x3c>)
     8a8:	4798      	blx	r3
	LIDAR_PWM_init();
     8aa:	4b08      	ldr	r3, [pc, #32]	; (8cc <system_init+0x40>)
     8ac:	4798      	blx	r3
     8ae:	bd08      	pop	{r3, pc}
     8b0:	00002781 	.word	0x00002781
     8b4:	00000819 	.word	0x00000819
     8b8:	00000bf1 	.word	0x00000bf1
     8bc:	000037e1 	.word	0x000037e1
     8c0:	000005bd 	.word	0x000005bd
     8c4:	000007f1 	.word	0x000007f1
     8c8:	00005419 	.word	0x00005419
     8cc:	00003605 	.word	0x00003605

000008d0 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_LOAD) >> NVMCTRL_SEESTAT_LOAD_Pos;
}

static inline bool hri_nvmctrl_get_SEESTAT_BUSY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     8d4:	4a0b      	ldr	r2, [pc, #44]	; (904 <invert_seep_byte+0x34>)
     8d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     8d8:	f013 0f04 	tst.w	r3, #4
     8dc:	d1fb      	bne.n	8d6 <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
     8de:	4e0a      	ldr	r6, [pc, #40]	; (908 <invert_seep_byte+0x38>)
     8e0:	6833      	ldr	r3, [r6, #0]
     8e2:	5d1a      	ldrb	r2, [r3, r4]
     8e4:	4d09      	ldr	r5, [pc, #36]	; (90c <invert_seep_byte+0x3c>)
     8e6:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
     8e8:	4621      	mov	r1, r4
     8ea:	4809      	ldr	r0, [pc, #36]	; (910 <invert_seep_byte+0x40>)
     8ec:	4b09      	ldr	r3, [pc, #36]	; (914 <invert_seep_byte+0x44>)
     8ee:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
     8f0:	6832      	ldr	r2, [r6, #0]
     8f2:	782b      	ldrb	r3, [r5, #0]
     8f4:	fab3 f383 	clz	r3, r3
     8f8:	095b      	lsrs	r3, r3, #5
     8fa:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
     8fc:	4806      	ldr	r0, [pc, #24]	; (918 <invert_seep_byte+0x48>)
     8fe:	4b07      	ldr	r3, [pc, #28]	; (91c <invert_seep_byte+0x4c>)
     900:	4798      	blx	r3
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	41004000 	.word	0x41004000
     908:	20000000 	.word	0x20000000
     90c:	20000b70 	.word	0x20000b70
     910:	00008364 	.word	0x00008364
     914:	0000677d 	.word	0x0000677d
     918:	00008388 	.word	0x00008388
     91c:	00006865 	.word	0x00006865

00000920 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
     920:	b508      	push	{r3, lr}
     922:	4a0b      	ldr	r2, [pc, #44]	; (950 <verify_seep_signature+0x30>)
     924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     926:	f013 0f04 	tst.w	r3, #4
     92a:	d1fb      	bne.n	924 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK(mask)) >> NVMCTRL_SEESTAT_SBLK_Pos;
}

static inline hri_nvmctrl_seestat_reg_t hri_nvmctrl_read_SEESTAT_SBLK_bf(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
     92c:	4b08      	ldr	r3, [pc, #32]	; (950 <verify_seep_signature+0x30>)
     92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
     930:	f413 6f70 	tst.w	r3, #3840	; 0xf00
     934:	d008      	beq.n	948 <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
     936:	4b07      	ldr	r3, [pc, #28]	; (954 <verify_seep_signature+0x34>)
     938:	685b      	ldr	r3, [r3, #4]
     93a:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
     93c:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
     940:	bf18      	it	ne
     942:	f04f 30ff 	movne.w	r0, #4294967295
     946:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
     948:	4803      	ldr	r0, [pc, #12]	; (958 <verify_seep_signature+0x38>)
     94a:	4b04      	ldr	r3, [pc, #16]	; (95c <verify_seep_signature+0x3c>)
     94c:	4798      	blx	r3
     94e:	e7fe      	b.n	94e <verify_seep_signature+0x2e>
     950:	41004000 	.word	0x41004000
     954:	20000000 	.word	0x20000000
     958:	000083bc 	.word	0x000083bc
     95c:	00006865 	.word	0x00006865

00000960 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
     960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
     964:	b1c9      	cbz	r1, 99a <print_hex_array+0x3a>
     966:	460e      	mov	r6, r1
     968:	1e45      	subs	r5, r0, #1
     96a:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
     96c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 9b0 <print_hex_array+0x50>
     970:	4f0c      	ldr	r7, [pc, #48]	; (9a4 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
     972:	f8df 9038 	ldr.w	r9, [pc, #56]	; 9ac <print_hex_array+0x4c>
     976:	e003      	b.n	980 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
     978:	3401      	adds	r4, #1
     97a:	b2a4      	uxth	r4, r4
     97c:	42a6      	cmp	r6, r4
     97e:	d00c      	beq.n	99a <print_hex_array+0x3a>
		printf("%02d ", p[i]);
     980:	f815 1f01 	ldrb.w	r1, [r5, #1]!
     984:	4640      	mov	r0, r8
     986:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
     988:	f014 0f07 	tst.w	r4, #7
     98c:	d1f4      	bne.n	978 <print_hex_array+0x18>
     98e:	2c00      	cmp	r4, #0
     990:	d0f2      	beq.n	978 <print_hex_array+0x18>
			printf("\r\n");
     992:	4648      	mov	r0, r9
     994:	4b04      	ldr	r3, [pc, #16]	; (9a8 <print_hex_array+0x48>)
     996:	4798      	blx	r3
     998:	e7ee      	b.n	978 <print_hex_array+0x18>
	}
	printf("\r\n");
     99a:	4804      	ldr	r0, [pc, #16]	; (9ac <print_hex_array+0x4c>)
     99c:	4b02      	ldr	r3, [pc, #8]	; (9a8 <print_hex_array+0x48>)
     99e:	4798      	blx	r3
     9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     9a4:	0000677d 	.word	0x0000677d
     9a8:	00006865 	.word	0x00006865
     9ac:	00008558 	.word	0x00008558
     9b0:	000083f8 	.word	0x000083f8

000009b4 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
     9b4:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
     9b6:	4b19      	ldr	r3, [pc, #100]	; (a1c <EEPROM_init+0x68>)
     9b8:	4798      	blx	r3
     9ba:	b9d0      	cbnz	r0, 9f2 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
     9bc:	4818      	ldr	r0, [pc, #96]	; (a20 <EEPROM_init+0x6c>)
     9be:	4b19      	ldr	r3, [pc, #100]	; (a24 <EEPROM_init+0x70>)
     9c0:	4798      	blx	r3
     9c2:	4b19      	ldr	r3, [pc, #100]	; (a28 <EEPROM_init+0x74>)
     9c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ(mask)) >> NVMCTRL_SEESTAT_PSZ_Pos;
}

static inline hri_nvmctrl_seestat_reg_t hri_nvmctrl_read_SEESTAT_PSZ_bf(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
     9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
     9c8:	f3c2 4202 	ubfx	r2, r2, #16, #3
     9cc:	f3c1 2103 	ubfx	r1, r1, #8, #4
     9d0:	4816      	ldr	r0, [pc, #88]	; (a2c <EEPROM_init+0x78>)
     9d2:	4b17      	ldr	r3, [pc, #92]	; (a30 <EEPROM_init+0x7c>)
     9d4:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
     9d6:	2020      	movs	r0, #32
     9d8:	4b16      	ldr	r3, [pc, #88]	; (a34 <EEPROM_init+0x80>)
     9da:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
     9dc:	4b16      	ldr	r3, [pc, #88]	; (a38 <EEPROM_init+0x84>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	f893 3020 	ldrb.w	r3, [r3, #32]
     9e4:	b99b      	cbnz	r3, a0e <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     9ea:	4b14      	ldr	r3, [pc, #80]	; (a3c <EEPROM_init+0x88>)
     9ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     9f0:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
     9f2:	4813      	ldr	r0, [pc, #76]	; (a40 <EEPROM_init+0x8c>)
     9f4:	4b0b      	ldr	r3, [pc, #44]	; (a24 <EEPROM_init+0x70>)
     9f6:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     9f8:	4a0b      	ldr	r2, [pc, #44]	; (a28 <EEPROM_init+0x74>)
     9fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     9fc:	f013 0f04 	tst.w	r3, #4
     a00:	d1fb      	bne.n	9fa <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
     a02:	4b0d      	ldr	r3, [pc, #52]	; (a38 <EEPROM_init+0x84>)
     a04:	685b      	ldr	r3, [r3, #4]
     a06:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
     a0a:	601a      	str	r2, [r3, #0]
     a0c:	e7d9      	b.n	9c2 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     a12:	4b0a      	ldr	r3, [pc, #40]	; (a3c <EEPROM_init+0x88>)
     a14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     a18:	bd08      	pop	{r3, pc}
     a1a:	bf00      	nop
     a1c:	00000921 	.word	0x00000921
     a20:	00008400 	.word	0x00008400
     a24:	00006865 	.word	0x00006865
     a28:	41004000 	.word	0x41004000
     a2c:	00008460 	.word	0x00008460
     a30:	0000677d 	.word	0x0000677d
     a34:	000008d1 	.word	0x000008d1
     a38:	20000000 	.word	0x20000000
     a3c:	41008000 	.word	0x41008000
     a40:	00008424 	.word	0x00008424

00000a44 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
     a44:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
     a46:	4b0a      	ldr	r3, [pc, #40]	; (a70 <EEPROM_read+0x2c>)
     a48:	681a      	ldr	r2, [r3, #0]
     a4a:	3a01      	subs	r2, #1
     a4c:	4809      	ldr	r0, [pc, #36]	; (a74 <EEPROM_read+0x30>)
     a4e:	1e43      	subs	r3, r0, #1
     a50:	3063      	adds	r0, #99	; 0x63
     a52:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a56:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
     a5a:	4283      	cmp	r3, r0
     a5c:	d1f9      	bne.n	a52 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     a5e:	2164      	movs	r1, #100	; 0x64
     a60:	4805      	ldr	r0, [pc, #20]	; (a78 <EEPROM_read+0x34>)
     a62:	4b06      	ldr	r3, [pc, #24]	; (a7c <EEPROM_read+0x38>)
     a64:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     a66:	2164      	movs	r1, #100	; 0x64
     a68:	4802      	ldr	r0, [pc, #8]	; (a74 <EEPROM_read+0x30>)
     a6a:	4b05      	ldr	r3, [pc, #20]	; (a80 <EEPROM_read+0x3c>)
     a6c:	4798      	blx	r3
     a6e:	bd08      	pop	{r3, pc}
     a70:	20000000 	.word	0x20000000
     a74:	200004cc 	.word	0x200004cc
     a78:	000084f4 	.word	0x000084f4
     a7c:	0000677d 	.word	0x0000677d
     a80:	00000961 	.word	0x00000961

00000a84 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
     a84:	b530      	push	{r4, r5, lr}
     a86:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
     a88:	2300      	movs	r3, #0
     a8a:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
     a8c:	ac02      	add	r4, sp, #8
     a8e:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
     a92:	481a      	ldr	r0, [pc, #104]	; (afc <EEPROM_write+0x78>)
     a94:	4b1a      	ldr	r3, [pc, #104]	; (b00 <EEPROM_write+0x7c>)
     a96:	4798      	blx	r3
	scanf("%"PRIu32"", &ee_addr);
     a98:	4621      	mov	r1, r4
     a9a:	481a      	ldr	r0, [pc, #104]	; (b04 <EEPROM_write+0x80>)
     a9c:	4b1a      	ldr	r3, [pc, #104]	; (b08 <EEPROM_write+0x84>)
     a9e:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
     aa0:	9b00      	ldr	r3, [sp, #0]
     aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     aa6:	d224      	bcs.n	af2 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
     aa8:	4818      	ldr	r0, [pc, #96]	; (b0c <EEPROM_write+0x88>)
     aaa:	4d15      	ldr	r5, [pc, #84]	; (b00 <EEPROM_write+0x7c>)
     aac:	47a8      	blx	r5
	scanf("%"PRIu32"", &ee_data);
     aae:	a901      	add	r1, sp, #4
     ab0:	4814      	ldr	r0, [pc, #80]	; (b04 <EEPROM_write+0x80>)
     ab2:	4b15      	ldr	r3, [pc, #84]	; (b08 <EEPROM_write+0x84>)
     ab4:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
     ab6:	4c16      	ldr	r4, [pc, #88]	; (b10 <EEPROM_write+0x8c>)
     ab8:	6822      	ldr	r2, [r4, #0]
     aba:	9901      	ldr	r1, [sp, #4]
     abc:	9b00      	ldr	r3, [sp, #0]
     abe:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
     ac0:	9a00      	ldr	r2, [sp, #0]
     ac2:	9901      	ldr	r1, [sp, #4]
     ac4:	4813      	ldr	r0, [pc, #76]	; (b14 <EEPROM_write+0x90>)
     ac6:	47a8      	blx	r5
     ac8:	6822      	ldr	r2, [r4, #0]
     aca:	3a01      	subs	r2, #1
     acc:	4812      	ldr	r0, [pc, #72]	; (b18 <EEPROM_write+0x94>)
     ace:	1e43      	subs	r3, r0, #1
     ad0:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
     ad2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     ad6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
     ada:	4283      	cmp	r3, r0
     adc:	d1f9      	bne.n	ad2 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
     ade:	2164      	movs	r1, #100	; 0x64
     ae0:	480e      	ldr	r0, [pc, #56]	; (b1c <EEPROM_write+0x98>)
     ae2:	4b07      	ldr	r3, [pc, #28]	; (b00 <EEPROM_write+0x7c>)
     ae4:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
     ae6:	2164      	movs	r1, #100	; 0x64
     ae8:	480b      	ldr	r0, [pc, #44]	; (b18 <EEPROM_write+0x94>)
     aea:	4b0d      	ldr	r3, [pc, #52]	; (b20 <EEPROM_write+0x9c>)
     aec:	4798      	blx	r3
}
     aee:	b003      	add	sp, #12
     af0:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
     af2:	480c      	ldr	r0, [pc, #48]	; (b24 <EEPROM_write+0xa0>)
     af4:	4b0c      	ldr	r3, [pc, #48]	; (b28 <EEPROM_write+0xa4>)
     af6:	4798      	blx	r3
     af8:	e7f9      	b.n	aee <EEPROM_write+0x6a>
     afa:	bf00      	nop
     afc:	0000851c 	.word	0x0000851c
     b00:	0000677d 	.word	0x0000677d
     b04:	00008530 	.word	0x00008530
     b08:	00006895 	.word	0x00006895
     b0c:	0000855c 	.word	0x0000855c
     b10:	20000000 	.word	0x20000000
     b14:	00008570 	.word	0x00008570
     b18:	200004cc 	.word	0x200004cc
     b1c:	000084f4 	.word	0x000084f4
     b20:	00000961 	.word	0x00000961
     b24:	00008534 	.word	0x00008534
     b28:	00006865 	.word	0x00006865

00000b2c <EEPROM_menu>:
{
     b2c:	b570      	push	{r4, r5, r6, lr}
     b2e:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
     b30:	2300      	movs	r3, #0
     b32:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
     b34:	4e1b      	ldr	r6, [pc, #108]	; (ba4 <EEPROM_menu+0x78>)
     b36:	4d1c      	ldr	r5, [pc, #112]	; (ba8 <EEPROM_menu+0x7c>)
     b38:	4c1c      	ldr	r4, [pc, #112]	; (bac <EEPROM_menu+0x80>)
     b3a:	4631      	mov	r1, r6
     b3c:	4628      	mov	r0, r5
     b3e:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
     b40:	a901      	add	r1, sp, #4
     b42:	481b      	ldr	r0, [pc, #108]	; (bb0 <EEPROM_menu+0x84>)
     b44:	4b1b      	ldr	r3, [pc, #108]	; (bb4 <EEPROM_menu+0x88>)
     b46:	4798      	blx	r3
     b48:	b150      	cbz	r0, b60 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
     b4a:	9901      	ldr	r1, [sp, #4]
     b4c:	481a      	ldr	r0, [pc, #104]	; (bb8 <EEPROM_menu+0x8c>)
     b4e:	47a0      	blx	r4
		switch (user_selection) {
     b50:	9b01      	ldr	r3, [sp, #4]
     b52:	3b01      	subs	r3, #1
     b54:	2b03      	cmp	r3, #3
     b56:	d821      	bhi.n	b9c <EEPROM_menu+0x70>
     b58:	e8df f003 	tbb	[pc, r3]
     b5c:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
     b60:	4b16      	ldr	r3, [pc, #88]	; (bbc <EEPROM_menu+0x90>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	6858      	ldr	r0, [r3, #4]
     b66:	4b16      	ldr	r3, [pc, #88]	; (bc0 <EEPROM_menu+0x94>)
     b68:	4798      	blx	r3
     b6a:	e7ee      	b.n	b4a <EEPROM_menu+0x1e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     b6c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     b70:	4914      	ldr	r1, [pc, #80]	; (bc4 <EEPROM_menu+0x98>)
     b72:	68ca      	ldr	r2, [r1, #12]
     b74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <EEPROM_menu+0x9c>)
     b7a:	4313      	orrs	r3, r2
     b7c:	60cb      	str	r3, [r1, #12]
     b7e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     b82:	bf00      	nop
     b84:	e7fd      	b.n	b82 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
     b86:	4811      	ldr	r0, [pc, #68]	; (bcc <EEPROM_menu+0xa0>)
     b88:	4b11      	ldr	r3, [pc, #68]	; (bd0 <EEPROM_menu+0xa4>)
     b8a:	4798      	blx	r3
}
     b8c:	b002      	add	sp, #8
     b8e:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
     b90:	4b10      	ldr	r3, [pc, #64]	; (bd4 <EEPROM_menu+0xa8>)
     b92:	4798      	blx	r3
				break;
     b94:	e7d1      	b.n	b3a <EEPROM_menu+0xe>
				EEPROM_write();
     b96:	4b10      	ldr	r3, [pc, #64]	; (bd8 <EEPROM_menu+0xac>)
     b98:	4798      	blx	r3
				break;
     b9a:	e7ce      	b.n	b3a <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
     b9c:	480f      	ldr	r0, [pc, #60]	; (bdc <EEPROM_menu+0xb0>)
     b9e:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <EEPROM_menu+0xa4>)
     ba0:	4798      	blx	r3
				break;
     ba2:	e7ca      	b.n	b3a <EEPROM_menu+0xe>
     ba4:	20000008 	.word	0x20000008
     ba8:	00008584 	.word	0x00008584
     bac:	0000677d 	.word	0x0000677d
     bb0:	00008530 	.word	0x00008530
     bb4:	00006895 	.word	0x00006895
     bb8:	00008588 	.word	0x00008588
     bbc:	200002dc 	.word	0x200002dc
     bc0:	000063dd 	.word	0x000063dd
     bc4:	e000ed00 	.word	0xe000ed00
     bc8:	05fa0004 	.word	0x05fa0004
     bcc:	000085a4 	.word	0x000085a4
     bd0:	00006865 	.word	0x00006865
     bd4:	00000a45 	.word	0x00000a45
     bd8:	00000a85 	.word	0x00000a85
     bdc:	000085c0 	.word	0x000085c0

00000be0 <FATFS_CALENDAR_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     be0:	4a02      	ldr	r2, [pc, #8]	; (bec <FATFS_CALENDAR_CLOCK_init+0xc>)
     be2:	6953      	ldr	r3, [r2, #20]
     be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     be8:	6153      	str	r3, [r2, #20]
     bea:	4770      	bx	lr
     bec:	40000800 	.word	0x40000800

00000bf0 <FATFS_CALENDAR_init>:
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}

void FATFS_CALENDAR_init(void)
{
     bf0:	b508      	push	{r3, lr}
	FATFS_CALENDAR_CLOCK_init();
     bf2:	4b03      	ldr	r3, [pc, #12]	; (c00 <FATFS_CALENDAR_init+0x10>)
     bf4:	4798      	blx	r3
	calendar_init(&CALENDER_INTERFACE, RTC);
     bf6:	4903      	ldr	r1, [pc, #12]	; (c04 <FATFS_CALENDAR_init+0x14>)
     bf8:	4803      	ldr	r0, [pc, #12]	; (c08 <FATFS_CALENDAR_init+0x18>)
     bfa:	4b04      	ldr	r3, [pc, #16]	; (c0c <FATFS_CALENDAR_init+0x1c>)
     bfc:	4798      	blx	r3
     bfe:	bd08      	pop	{r3, pc}
     c00:	00000be1 	.word	0x00000be1
     c04:	40002400 	.word	0x40002400
     c08:	20000d98 	.word	0x20000d98
     c0c:	000021e5 	.word	0x000021e5

00000c10 <FATFS_write_file>:
}

void FATFS_write_file(TCHAR* filename, char* data, uint32_t data_length)
{
     c10:	b570      	push	{r4, r5, r6, lr}
     c12:	b082      	sub	sp, #8
     c14:	4604      	mov	r4, r0
     c16:	460e      	mov	r6, r1
     c18:	4615      	mov	r5, r2
	UINT bytes_written;
	FRESULT file_result;
	
	/* mount SD card */
	f_mount(&fatfs, "/", 0);
     c1a:	2200      	movs	r2, #0
     c1c:	4910      	ldr	r1, [pc, #64]	; (c60 <FATFS_write_file+0x50>)
     c1e:	4811      	ldr	r0, [pc, #68]	; (c64 <FATFS_write_file+0x54>)
     c20:	4b11      	ldr	r3, [pc, #68]	; (c68 <FATFS_write_file+0x58>)
     c22:	4798      	blx	r3
	
	/* create file */
	file_result = f_open(&fptr, filename, FA_WRITE | FA_CREATE_ALWAYS);
     c24:	220a      	movs	r2, #10
     c26:	4621      	mov	r1, r4
     c28:	4810      	ldr	r0, [pc, #64]	; (c6c <FATFS_write_file+0x5c>)
     c2a:	4b11      	ldr	r3, [pc, #68]	; (c70 <FATFS_write_file+0x60>)
     c2c:	4798      	blx	r3
	
	if (file_result == FR_OK) {
     c2e:	b988      	cbnz	r0, c54 <FATFS_write_file+0x44>
		f_write(&fptr, data, data_length, &bytes_written);
     c30:	4c0e      	ldr	r4, [pc, #56]	; (c6c <FATFS_write_file+0x5c>)
     c32:	ab01      	add	r3, sp, #4
     c34:	462a      	mov	r2, r5
     c36:	4631      	mov	r1, r6
     c38:	4620      	mov	r0, r4
     c3a:	4e0e      	ldr	r6, [pc, #56]	; (c74 <FATFS_write_file+0x64>)
     c3c:	47b0      	blx	r6
		file_result = f_close(&fptr);
     c3e:	4620      	mov	r0, r4
     c40:	4b0d      	ldr	r3, [pc, #52]	; (c78 <FATFS_write_file+0x68>)
     c42:	4798      	blx	r3
		if (file_result == FR_OK && bytes_written == data_length)
     c44:	b950      	cbnz	r0, c5c <FATFS_write_file+0x4c>
     c46:	9b01      	ldr	r3, [sp, #4]
     c48:	429d      	cmp	r5, r3
     c4a:	d107      	bne.n	c5c <FATFS_write_file+0x4c>
			printf("SUCCESS!\r\n");
     c4c:	480b      	ldr	r0, [pc, #44]	; (c7c <FATFS_write_file+0x6c>)
     c4e:	4b0c      	ldr	r3, [pc, #48]	; (c80 <FATFS_write_file+0x70>)
     c50:	4798      	blx	r3
     c52:	e003      	b.n	c5c <FATFS_write_file+0x4c>
     c54:	4601      	mov	r1, r0
	} else {
		printf("Failed to make file. file_result = %u\r\n", file_result);
     c56:	480b      	ldr	r0, [pc, #44]	; (c84 <FATFS_write_file+0x74>)
     c58:	4b0b      	ldr	r3, [pc, #44]	; (c88 <FATFS_write_file+0x78>)
     c5a:	4798      	blx	r3
	}
}
     c5c:	b002      	add	sp, #8
     c5e:	bd70      	pop	{r4, r5, r6, pc}
     c60:	000085d4 	.word	0x000085d4
     c64:	20000db8 	.word	0x20000db8
     c68:	00001bcd 	.word	0x00001bcd
     c6c:	20000b74 	.word	0x20000b74
     c70:	00001c3d 	.word	0x00001c3d
     c74:	00001de9 	.word	0x00001de9
     c78:	00002081 	.word	0x00002081
     c7c:	000085d8 	.word	0x000085d8
     c80:	00006865 	.word	0x00006865
     c84:	000085e4 	.word	0x000085e4
     c88:	0000677d 	.word	0x0000677d

00000c8c <get_fattime>:
 *		[15:11]  Hour (0..23)
 *		[10:5]   Minute (0..59)
 *		[4:0]    Second (0..59)
 */
DWORD get_fattime(void)
{
     c8c:	b500      	push	{lr}
     c8e:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct calendar_date_time datetime;
	
	calendar_get_date_time(&CALENDER_INTERFACE, &datetime);
     c90:	4669      	mov	r1, sp
     c92:	480f      	ldr	r0, [pc, #60]	; (cd0 <get_fattime+0x44>)
     c94:	4b0f      	ldr	r3, [pc, #60]	; (cd4 <get_fattime+0x48>)
     c96:	4798      	blx	r3

	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     c98:	f89d 0005 	ldrb.w	r0, [sp, #5]
     c9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
     ca0:	041b      	lsls	r3, r3, #16
			 | (datetime.time.hour << 11) | (datetime.time.min << 5) | (datetime.time.sec << 0);
     ca2:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
     ca6:	f89d 0000 	ldrb.w	r0, [sp]
     caa:	4303      	orrs	r3, r0
     cac:	f89d 0002 	ldrb.w	r0, [sp, #2]
     cb0:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
     cb4:	f89d 0001 	ldrb.w	r0, [sp, #1]
     cb8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     cbc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
     cc0:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
	return ul_time;
}
     cc4:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
     cc8:	b003      	add	sp, #12
     cca:	f85d fb04 	ldr.w	pc, [sp], #4
     cce:	bf00      	nop
     cd0:	20000d98 	.word	0x20000d98
     cd4:	00002229 	.word	0x00002229

00000cd8 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     cd8:	b13a      	cbz	r2, cea <mem_cpy+0x12>
     cda:	3801      	subs	r0, #1
     cdc:	188a      	adds	r2, r1, r2
		*d++ = *s++;
     cde:	f811 3b01 	ldrb.w	r3, [r1], #1
     ce2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
     ce6:	4291      	cmp	r1, r2
     ce8:	d1f9      	bne.n	cde <mem_cpy+0x6>
     cea:	4770      	bx	lr

00000cec <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     cec:	b122      	cbz	r2, cf8 <mem_set+0xc>
     cee:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
     cf0:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
     cf4:	4282      	cmp	r2, r0
     cf6:	d1fb      	bne.n	cf0 <mem_set+0x4>
     cf8:	4770      	bx	lr

00000cfa <ld_clust>:
	const BYTE* dir	/* Pointer to the SFN entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
     cfa:	7eca      	ldrb	r2, [r1, #27]
     cfc:	7e8b      	ldrb	r3, [r1, #26]
     cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
     d02:	7802      	ldrb	r2, [r0, #0]
     d04:	2a03      	cmp	r2, #3
     d06:	d001      	beq.n	d0c <ld_clust+0x12>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
     d08:	4618      	mov	r0, r3
     d0a:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
     d0c:	7d48      	ldrb	r0, [r1, #21]
     d0e:	7d0a      	ldrb	r2, [r1, #20]
     d10:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
     d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
     d18:	e7f6      	b.n	d08 <ld_clust+0xe>
	...

00000d1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
     d1c:	b410      	push	{r4}
	const char *sp;
	char c;
	TCHAR tc;
#endif

	if (*path) {	/* If the pointer is not a null */
     d1e:	6804      	ldr	r4, [r0, #0]
     d20:	b1ec      	cbz	r4, d5e <get_ldnumber+0x42>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     d22:	7821      	ldrb	r1, [r4, #0]
     d24:	2920      	cmp	r1, #32
     d26:	d911      	bls.n	d4c <get_ldnumber+0x30>
     d28:	293a      	cmp	r1, #58	; 0x3a
     d2a:	d021      	beq.n	d70 <get_ldnumber+0x54>
     d2c:	4622      	mov	r2, r4
     d2e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     d32:	2b20      	cmp	r3, #32
     d34:	d90c      	bls.n	d50 <get_ldnumber+0x34>
     d36:	2b3a      	cmp	r3, #58	; 0x3a
     d38:	d1f9      	bne.n	d2e <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     d3a:	3930      	subs	r1, #48	; 0x30
     d3c:	1c63      	adds	r3, r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     d3e:	429a      	cmp	r2, r3
     d40:	d110      	bne.n	d64 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     d42:	2904      	cmp	r1, #4
     d44:	d811      	bhi.n	d6a <get_ldnumber+0x4e>
					vol = (int)i;
					*path = ++tt;
     d46:	3402      	adds	r4, #2
     d48:	6004      	str	r4, [r0, #0]
     d4a:	e005      	b.n	d58 <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     d4c:	460b      	mov	r3, r1
     d4e:	4622      	mov	r2, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     d50:	2b3a      	cmp	r3, #58	; 0x3a
     d52:	d0f2      	beq.n	d3a <get_ldnumber+0x1e>
			}
#endif
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
     d54:	4b07      	ldr	r3, [pc, #28]	; (d74 <get_ldnumber+0x58>)
     d56:	7819      	ldrb	r1, [r3, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
     d58:	4608      	mov	r0, r1
     d5a:	bc10      	pop	{r4}
     d5c:	4770      	bx	lr
	int vol = -1;
     d5e:	f04f 31ff 	mov.w	r1, #4294967295
     d62:	e7f9      	b.n	d58 <get_ldnumber+0x3c>
     d64:	f04f 31ff 	mov.w	r1, #4294967295
     d68:	e7f6      	b.n	d58 <get_ldnumber+0x3c>
     d6a:	f04f 31ff 	mov.w	r1, #4294967295
     d6e:	e7f3      	b.n	d58 <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     d70:	4622      	mov	r2, r4
     d72:	e7e2      	b.n	d3a <get_ldnumber+0x1e>
     d74:	20000530 	.word	0x20000530

00000d78 <sync_window>:
{
     d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
     d7c:	7903      	ldrb	r3, [r0, #4]
     d7e:	b913      	cbnz	r3, d86 <sync_window+0xe>
	FRESULT res = FR_OK;
     d80:	2000      	movs	r0, #0
     d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d86:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
     d88:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
     d8a:	f100 0734 	add.w	r7, r0, #52	; 0x34
     d8e:	2301      	movs	r3, #1
     d90:	462a      	mov	r2, r5
     d92:	4639      	mov	r1, r7
     d94:	7840      	ldrb	r0, [r0, #1]
     d96:	4e13      	ldr	r6, [pc, #76]	; (de4 <sync_window+0x6c>)
     d98:	47b0      	blx	r6
     d9a:	b9d0      	cbnz	r0, dd2 <sync_window+0x5a>
			fs->wflag = 0;
     d9c:	2300      	movs	r3, #0
     d9e:	7123      	strb	r3, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     da2:	1aeb      	subs	r3, r5, r3
     da4:	69e2      	ldr	r2, [r4, #28]
     da6:	4293      	cmp	r3, r2
     da8:	d216      	bcs.n	dd8 <sync_window+0x60>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     daa:	78e6      	ldrb	r6, [r4, #3]
     dac:	2e01      	cmp	r6, #1
     dae:	d916      	bls.n	dde <sync_window+0x66>
					disk_write(fs->drv, fs->win, wsect, 1);
     db0:	f04f 0901 	mov.w	r9, #1
     db4:	f8df 802c 	ldr.w	r8, [pc, #44]	; de4 <sync_window+0x6c>
					wsect += fs->fsize;
     db8:	69e3      	ldr	r3, [r4, #28]
     dba:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
     dbc:	464b      	mov	r3, r9
     dbe:	462a      	mov	r2, r5
     dc0:	4639      	mov	r1, r7
     dc2:	7860      	ldrb	r0, [r4, #1]
     dc4:	47c0      	blx	r8
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     dc6:	3e01      	subs	r6, #1
     dc8:	2e01      	cmp	r6, #1
     dca:	d1f5      	bne.n	db8 <sync_window+0x40>
	FRESULT res = FR_OK;
     dcc:	2000      	movs	r0, #0
     dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = FR_DISK_ERR;
     dd2:	2001      	movs	r0, #1
     dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FRESULT res = FR_OK;
     dd8:	2000      	movs	r0, #0
     dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     dde:	2000      	movs	r0, #0
}
     de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     de4:	00000485 	.word	0x00000485

00000de8 <move_window>:
{
     de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
     dea:	6b03      	ldr	r3, [r0, #48]	; 0x30
     dec:	428b      	cmp	r3, r1
     dee:	d015      	beq.n	e1c <move_window+0x34>
     df0:	4604      	mov	r4, r0
     df2:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
     df4:	4b0a      	ldr	r3, [pc, #40]	; (e20 <move_window+0x38>)
     df6:	4798      	blx	r3
		if (res == FR_OK) {			/* Fill sector window with new data */
     df8:	4606      	mov	r6, r0
     dfa:	b108      	cbz	r0, e00 <move_window+0x18>
}
     dfc:	4630      	mov	r0, r6
     dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
     e00:	2301      	movs	r3, #1
     e02:	462a      	mov	r2, r5
     e04:	f104 0134 	add.w	r1, r4, #52	; 0x34
     e08:	7860      	ldrb	r0, [r4, #1]
     e0a:	4f06      	ldr	r7, [pc, #24]	; (e24 <move_window+0x3c>)
     e0c:	47b8      	blx	r7
     e0e:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
     e10:	bf1c      	itt	ne
     e12:	2601      	movne	r6, #1
     e14:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
     e18:	6325      	str	r5, [r4, #48]	; 0x30
     e1a:	e7ef      	b.n	dfc <move_window+0x14>
	FRESULT res = FR_OK;
     e1c:	2600      	movs	r6, #0
     e1e:	e7ed      	b.n	dfc <move_window+0x14>
     e20:	00000d79 	.word	0x00000d79
     e24:	00000405 	.word	0x00000405

00000e28 <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     e28:	b510      	push	{r4, lr}
     e2a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     e2c:	2300      	movs	r3, #0
     e2e:	7103      	strb	r3, [r0, #4]
     e30:	f04f 33ff 	mov.w	r3, #4294967295
     e34:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     e36:	4b1d      	ldr	r3, [pc, #116]	; (eac <check_fs+0x84>)
     e38:	4798      	blx	r3
     e3a:	b108      	cbz	r0, e40 <check_fs+0x18>
		return 3;
     e3c:	2003      	movs	r0, #3
     e3e:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     e40:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
     e44:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
     e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     e4c:	b21b      	sxth	r3, r3
     e4e:	4a18      	ldr	r2, [pc, #96]	; (eb0 <check_fs+0x88>)
     e50:	4293      	cmp	r3, r2
     e52:	d001      	beq.n	e58 <check_fs+0x30>
		return 2;
     e54:	2002      	movs	r0, #2
     e56:	bd10      	pop	{r4, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     e58:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
     e5c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
     e60:	041b      	lsls	r3, r3, #16
     e62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
     e66:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
     e6a:	4313      	orrs	r3, r2
     e6c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
     e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     e74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     e78:	4a0e      	ldr	r2, [pc, #56]	; (eb4 <check_fs+0x8c>)
     e7a:	4293      	cmp	r3, r2
     e7c:	d013      	beq.n	ea6 <check_fs+0x7e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     e7e:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
     e82:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
     e86:	0400      	lsls	r0, r0, #16
     e88:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
     e8c:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
     e90:	4318      	orrs	r0, r3
     e92:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
     e96:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
     e9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
     e9e:	1a80      	subs	r0, r0, r2
     ea0:	bf18      	it	ne
     ea2:	2001      	movne	r0, #1
     ea4:	bd10      	pop	{r4, pc}
		return 0;
     ea6:	2000      	movs	r0, #0
		return 0;

	return 1;
}
     ea8:	bd10      	pop	{r4, pc}
     eaa:	bf00      	nop
     eac:	00000de9 	.word	0x00000de9
     eb0:	ffffaa55 	.word	0xffffaa55
     eb4:	00544146 	.word	0x00544146

00000eb8 <validate>:
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */

	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     eb8:	b1b0      	cbz	r0, ee8 <validate+0x30>
{
     eba:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     ebc:	6803      	ldr	r3, [r0, #0]
     ebe:	b1ab      	cbz	r3, eec <validate+0x34>
     ec0:	7819      	ldrb	r1, [r3, #0]
     ec2:	b909      	cbnz	r1, ec8 <validate+0x10>
		return FR_INVALID_OBJECT;
     ec4:	2009      	movs	r0, #9
     ec6:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     ec8:	88d9      	ldrh	r1, [r3, #6]
     eca:	8882      	ldrh	r2, [r0, #4]
     ecc:	4291      	cmp	r1, r2
     ece:	d001      	beq.n	ed4 <validate+0x1c>
		return FR_INVALID_OBJECT;
     ed0:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
     ed2:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     ed4:	7858      	ldrb	r0, [r3, #1]
     ed6:	4b06      	ldr	r3, [pc, #24]	; (ef0 <validate+0x38>)
     ed8:	4798      	blx	r3
     eda:	f000 0001 	and.w	r0, r0, #1
		return FR_INVALID_OBJECT;
     ede:	2800      	cmp	r0, #0
     ee0:	bf0c      	ite	eq
     ee2:	2000      	moveq	r0, #0
     ee4:	2009      	movne	r0, #9
     ee6:	bd08      	pop	{r3, pc}
     ee8:	2009      	movs	r0, #9
     eea:	4770      	bx	lr
     eec:	2009      	movs	r0, #9
     eee:	bd08      	pop	{r3, pc}
     ef0:	000003e9 	.word	0x000003e9

00000ef4 <find_volume>:
{
     ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ef8:	b085      	sub	sp, #20
     efa:	4606      	mov	r6, r0
     efc:	4617      	mov	r7, r2
	*rfs = 0;
     efe:	2300      	movs	r3, #0
     f00:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
     f02:	4608      	mov	r0, r1
     f04:	4b9c      	ldr	r3, [pc, #624]	; (1178 <find_volume+0x284>)
     f06:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
     f08:	1e05      	subs	r5, r0, #0
     f0a:	f2c0 81a4 	blt.w	1256 <find_volume+0x362>
	fs = FatFs[vol];					/* Get pointer to the file system object */
     f0e:	4b9b      	ldr	r3, [pc, #620]	; (117c <find_volume+0x288>)
     f10:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     f14:	685c      	ldr	r4, [r3, #4]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     f16:	2c00      	cmp	r4, #0
     f18:	f000 81a1 	beq.w	125e <find_volume+0x36a>
	*rfs = fs;							/* Return pointer to the file system object */
     f1c:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
     f1e:	7823      	ldrb	r3, [r4, #0]
     f20:	b17b      	cbz	r3, f42 <find_volume+0x4e>
		stat = disk_status(fs->drv);
     f22:	7860      	ldrb	r0, [r4, #1]
     f24:	4b96      	ldr	r3, [pc, #600]	; (1180 <find_volume+0x28c>)
     f26:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     f28:	f010 0f01 	tst.w	r0, #1
     f2c:	d109      	bne.n	f42 <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     f2e:	2f00      	cmp	r7, #0
     f30:	f000 8197 	beq.w	1262 <find_volume+0x36e>
     f34:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
     f38:	2800      	cmp	r0, #0
     f3a:	bf0c      	ite	eq
     f3c:	2000      	moveq	r0, #0
     f3e:	200a      	movne	r0, #10
     f40:	e18a      	b.n	1258 <find_volume+0x364>
	fs->fs_type = 0;					/* Clear the file system object */
     f42:	2300      	movs	r3, #0
     f44:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     f46:	b2e8      	uxtb	r0, r5
     f48:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     f4a:	4b8e      	ldr	r3, [pc, #568]	; (1184 <find_volume+0x290>)
     f4c:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     f4e:	f010 0f01 	tst.w	r0, #1
     f52:	d001      	beq.n	f58 <find_volume+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     f54:	2003      	movs	r0, #3
     f56:	e17f      	b.n	1258 <find_volume+0x364>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     f58:	b127      	cbz	r7, f64 <find_volume+0x70>
     f5a:	f010 0f04 	tst.w	r0, #4
     f5e:	d001      	beq.n	f64 <find_volume+0x70>
		return FR_WRITE_PROTECTED;
     f60:	200a      	movs	r0, #10
     f62:	e179      	b.n	1258 <find_volume+0x364>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     f64:	2100      	movs	r1, #0
     f66:	4620      	mov	r0, r4
     f68:	4b87      	ldr	r3, [pc, #540]	; (1188 <find_volume+0x294>)
     f6a:	4798      	blx	r3
     f6c:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     f6e:	2801      	cmp	r0, #1
     f70:	d006      	beq.n	f80 <find_volume+0x8c>
	bsect = 0;
     f72:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     f74:	2b03      	cmp	r3, #3
     f76:	f000 8176 	beq.w	1266 <find_volume+0x372>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     f7a:	b3a3      	cbz	r3, fe6 <find_volume+0xf2>
     f7c:	200d      	movs	r0, #13
     f7e:	e16b      	b.n	1258 <find_volume+0x364>
     f80:	4623      	mov	r3, r4
     f82:	466d      	mov	r5, sp
     f84:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     f88:	4669      	mov	r1, sp
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     f8a:	2700      	movs	r7, #0
     f8c:	e005      	b.n	f9a <find_volume+0xa6>
     f8e:	463a      	mov	r2, r7
     f90:	f841 2b04 	str.w	r2, [r1], #4
     f94:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
     f96:	4283      	cmp	r3, r0
     f98:	d012      	beq.n	fc0 <find_volume+0xcc>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     f9a:	f893 21f6 	ldrb.w	r2, [r3, #502]	; 0x1f6
     f9e:	2a00      	cmp	r2, #0
     fa0:	d0f5      	beq.n	f8e <find_volume+0x9a>
     fa2:	f893 61fd 	ldrb.w	r6, [r3, #509]	; 0x1fd
     fa6:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
     faa:	0412      	lsls	r2, r2, #16
     fac:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
     fb0:	f893 61fa 	ldrb.w	r6, [r3, #506]	; 0x1fa
     fb4:	4332      	orrs	r2, r6
     fb6:	f893 61fb 	ldrb.w	r6, [r3, #507]	; 0x1fb
     fba:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
     fbe:	e7e7      	b.n	f90 <find_volume+0x9c>
     fc0:	af04      	add	r7, sp, #16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     fc2:	f04f 0802 	mov.w	r8, #2
     fc6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1188 <find_volume+0x294>
     fca:	e006      	b.n	fda <find_volume+0xe6>
     fcc:	4631      	mov	r1, r6
     fce:	4620      	mov	r0, r4
     fd0:	47c8      	blx	r9
		} while (!LD2PT(vol) && fmt && ++i < 4);
     fd2:	4603      	mov	r3, r0
     fd4:	b138      	cbz	r0, fe6 <find_volume+0xf2>
     fd6:	42af      	cmp	r7, r5
     fd8:	d0cc      	beq.n	f74 <find_volume+0x80>
			bsect = br[i];
     fda:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     fde:	2e00      	cmp	r6, #0
     fe0:	d1f4      	bne.n	fcc <find_volume+0xd8>
     fe2:	4643      	mov	r3, r8
     fe4:	e7f7      	b.n	fd6 <find_volume+0xe2>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
     fe6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
     fea:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
     fee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     ff2:	b21b      	sxth	r3, r3
     ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     ff8:	d001      	beq.n	ffe <find_volume+0x10a>
		return FR_NO_FILESYSTEM;
     ffa:	200d      	movs	r0, #13
     ffc:	e12c      	b.n	1258 <find_volume+0x364>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
     ffe:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    1002:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    1006:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
    100a:	d10d      	bne.n	1028 <find_volume+0x134>
    100c:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    1010:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    1014:	0412      	lsls	r2, r2, #16
    1016:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    101a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    101e:	431a      	orrs	r2, r3
    1020:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    1024:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
    1028:	61e2      	str	r2, [r4, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    102a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    102e:	70e1      	strb	r1, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    1030:	1e4b      	subs	r3, r1, #1
    1032:	b2db      	uxtb	r3, r3
    1034:	2b01      	cmp	r3, #1
    1036:	d901      	bls.n	103c <find_volume+0x148>
		return FR_NO_FILESYSTEM;
    1038:	200d      	movs	r0, #13
    103a:	e10d      	b.n	1258 <find_volume+0x364>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    103c:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
    1040:	70a7      	strb	r7, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    1042:	b90f      	cbnz	r7, 1048 <find_volume+0x154>
		return FR_NO_FILESYSTEM;
    1044:	200d      	movs	r0, #13
    1046:	e107      	b.n	1258 <find_volume+0x364>
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    1048:	1e7b      	subs	r3, r7, #1
    104a:	423b      	tst	r3, r7
    104c:	d001      	beq.n	1052 <find_volume+0x15e>
		return FR_NO_FILESYSTEM;
    104e:	200d      	movs	r0, #13
    1050:	e102      	b.n	1258 <find_volume+0x364>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1052:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    1056:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    105a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    105e:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    1060:	f010 0f0f 	tst.w	r0, #15
    1064:	f040 8101 	bne.w	126a <find_volume+0x376>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    1068:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
    106c:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    1070:	ea53 2305 	orrs.w	r3, r3, r5, lsl #8
    1074:	d10d      	bne.n	1092 <find_volume+0x19e>
    1076:	f894 5057 	ldrb.w	r5, [r4, #87]	; 0x57
    107a:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    107e:	041b      	lsls	r3, r3, #16
    1080:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    1084:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
    1088:	432b      	orrs	r3, r5
    108a:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
    108e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    1092:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
    1096:	f894 5042 	ldrb.w	r5, [r4, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    109a:	ea55 250e 	orrs.w	r5, r5, lr, lsl #8
    109e:	f000 80e6 	beq.w	126e <find_volume+0x37a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    10a2:	fb02 fc01 	mul.w	ip, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    10a6:	eb05 1110 	add.w	r1, r5, r0, lsr #4
    10aa:	eb01 0e0c 	add.w	lr, r1, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    10ae:	4573      	cmp	r3, lr
    10b0:	f0c0 80df 	bcc.w	1272 <find_volume+0x37e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    10b4:	eba3 030e 	sub.w	r3, r3, lr
    10b8:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    10bc:	2b00      	cmp	r3, #0
    10be:	f000 80da 	beq.w	1276 <find_volume+0x382>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    10c2:	f640 71f5 	movw	r1, #4085	; 0xff5
    10c6:	428b      	cmp	r3, r1
    10c8:	bf94      	ite	ls
    10ca:	2101      	movls	r1, #1
    10cc:	2102      	movhi	r1, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    10ce:	f64f 77f5 	movw	r7, #65525	; 0xfff5
    10d2:	42bb      	cmp	r3, r7
    10d4:	f200 80d9 	bhi.w	128a <find_volume+0x396>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    10d8:	3302      	adds	r3, #2
    10da:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    10dc:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    10de:	4435      	add	r5, r6
    10e0:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    10e2:	eb0e 0706 	add.w	r7, lr, r6
    10e6:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (fmt == FS_FAT32) {
    10e8:	2903      	cmp	r1, #3
    10ea:	d129      	bne.n	1140 <find_volume+0x24c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    10ec:	2800      	cmp	r0, #0
    10ee:	f040 80c4 	bne.w	127a <find_volume+0x386>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    10f2:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    10f6:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    10fa:	0409      	lsls	r1, r1, #16
    10fc:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    1100:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    1104:	4301      	orrs	r1, r0
    1106:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    110a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    110e:	62a1      	str	r1, [r4, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    1110:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    1112:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    1116:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    111a:	f0c0 80b0 	bcc.w	127e <find_volume+0x38a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    111e:	f04f 33ff 	mov.w	r3, #4294967295
    1122:	6123      	str	r3, [r4, #16]
    1124:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
    1126:	2380      	movs	r3, #128	; 0x80
    1128:	7163      	strb	r3, [r4, #5]
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    112a:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    112e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1132:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1136:	b21b      	sxth	r3, r3
    1138:	2b01      	cmp	r3, #1
    113a:	d027      	beq.n	118c <find_volume+0x298>
    113c:	2103      	movs	r1, #3
    113e:	e078      	b.n	1232 <find_volume+0x33e>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1140:	2800      	cmp	r0, #0
    1142:	f000 809e 	beq.w	1282 <find_volume+0x38e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1146:	4465      	add	r5, ip
    1148:	62a5      	str	r5, [r4, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    114a:	2902      	cmp	r1, #2
    114c:	bf0f      	iteee	eq
    114e:	005b      	lsleq	r3, r3, #1
    1150:	eb03 0043 	addne.w	r0, r3, r3, lsl #1
    1154:	f003 0301 	andne.w	r3, r3, #1
    1158:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    115c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    1160:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    1164:	f0c0 808f 	bcc.w	1286 <find_volume+0x392>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    1168:	f04f 33ff 	mov.w	r3, #4294967295
    116c:	6123      	str	r3, [r4, #16]
    116e:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
    1170:	2380      	movs	r3, #128	; 0x80
    1172:	7163      	strb	r3, [r4, #5]
    1174:	e05d      	b.n	1232 <find_volume+0x33e>
    1176:	bf00      	nop
    1178:	00000d1d 	.word	0x00000d1d
    117c:	20000530 	.word	0x20000530
    1180:	000003e9 	.word	0x000003e9
    1184:	000003b1 	.word	0x000003b1
    1188:	00000e29 	.word	0x00000e29
		&& move_window(fs, bsect + 1) == FR_OK)
    118c:	1c71      	adds	r1, r6, #1
    118e:	4620      	mov	r0, r4
    1190:	4b42      	ldr	r3, [pc, #264]	; (129c <find_volume+0x3a8>)
    1192:	4798      	blx	r3
    1194:	2800      	cmp	r0, #0
    1196:	d156      	bne.n	1246 <find_volume+0x352>
		fs->fsi_flag = 0;
    1198:	2300      	movs	r3, #0
    119a:	7163      	strb	r3, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    119c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    11a0:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    11a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    11a8:	b21b      	sxth	r3, r3
    11aa:	4a3d      	ldr	r2, [pc, #244]	; (12a0 <find_volume+0x3ac>)
    11ac:	4293      	cmp	r3, r2
    11ae:	d14c      	bne.n	124a <find_volume+0x356>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    11b0:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    11b4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    11b8:	041b      	lsls	r3, r3, #16
    11ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    11be:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    11c2:	4313      	orrs	r3, r2
    11c4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    11c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    11cc:	4a35      	ldr	r2, [pc, #212]	; (12a4 <find_volume+0x3b0>)
    11ce:	4293      	cmp	r3, r2
    11d0:	d13d      	bne.n	124e <find_volume+0x35a>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    11d2:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
    11d6:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
    11da:	041b      	lsls	r3, r3, #16
    11dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    11e0:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
    11e4:	4313      	orrs	r3, r2
    11e6:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
    11ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    11ee:	4a2e      	ldr	r2, [pc, #184]	; (12a8 <find_volume+0x3b4>)
    11f0:	4293      	cmp	r3, r2
    11f2:	d12e      	bne.n	1252 <find_volume+0x35e>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    11f4:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
    11f8:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
    11fc:	041b      	lsls	r3, r3, #16
    11fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1202:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
    1206:	4313      	orrs	r3, r2
    1208:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
    120c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1210:	6123      	str	r3, [r4, #16]
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    1212:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
    1216:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
    121a:	041b      	lsls	r3, r3, #16
    121c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1220:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
    1224:	4313      	orrs	r3, r2
    1226:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
    122a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    122e:	60e3      	str	r3, [r4, #12]
    1230:	2103      	movs	r1, #3
	fs->fs_type = fmt;	/* FAT sub-type */
    1232:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
    1234:	4a1d      	ldr	r2, [pc, #116]	; (12ac <find_volume+0x3b8>)
    1236:	8b13      	ldrh	r3, [r2, #24]
    1238:	3301      	adds	r3, #1
    123a:	b29b      	uxth	r3, r3
    123c:	8313      	strh	r3, [r2, #24]
    123e:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Set current directory to root */
    1240:	2000      	movs	r0, #0
    1242:	6160      	str	r0, [r4, #20]
	return FR_OK;
    1244:	e008      	b.n	1258 <find_volume+0x364>
    1246:	2103      	movs	r1, #3
    1248:	e7f3      	b.n	1232 <find_volume+0x33e>
    124a:	2103      	movs	r1, #3
    124c:	e7f1      	b.n	1232 <find_volume+0x33e>
    124e:	2103      	movs	r1, #3
    1250:	e7ef      	b.n	1232 <find_volume+0x33e>
    1252:	2103      	movs	r1, #3
    1254:	e7ed      	b.n	1232 <find_volume+0x33e>
	if (vol < 0) return FR_INVALID_DRIVE;
    1256:	200b      	movs	r0, #11
}
    1258:	b005      	add	sp, #20
    125a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    125e:	200c      	movs	r0, #12
    1260:	e7fa      	b.n	1258 <find_volume+0x364>
			return FR_OK;				/* The file system object is valid */
    1262:	2000      	movs	r0, #0
    1264:	e7f8      	b.n	1258 <find_volume+0x364>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1266:	2001      	movs	r0, #1
    1268:	e7f6      	b.n	1258 <find_volume+0x364>
		return FR_NO_FILESYSTEM;
    126a:	200d      	movs	r0, #13
    126c:	e7f4      	b.n	1258 <find_volume+0x364>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    126e:	200d      	movs	r0, #13
    1270:	e7f2      	b.n	1258 <find_volume+0x364>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1272:	200d      	movs	r0, #13
    1274:	e7f0      	b.n	1258 <find_volume+0x364>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1276:	200d      	movs	r0, #13
    1278:	e7ee      	b.n	1258 <find_volume+0x364>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    127a:	200d      	movs	r0, #13
    127c:	e7ec      	b.n	1258 <find_volume+0x364>
		return FR_NO_FILESYSTEM;
    127e:	200d      	movs	r0, #13
    1280:	e7ea      	b.n	1258 <find_volume+0x364>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1282:	200d      	movs	r0, #13
    1284:	e7e8      	b.n	1258 <find_volume+0x364>
		return FR_NO_FILESYSTEM;
    1286:	200d      	movs	r0, #13
    1288:	e7e6      	b.n	1258 <find_volume+0x364>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    128a:	3302      	adds	r3, #2
    128c:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    128e:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1290:	4435      	add	r5, r6
    1292:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    1294:	eb0e 0106 	add.w	r1, lr, r6
    1298:	62e1      	str	r1, [r4, #44]	; 0x2c
    129a:	e727      	b.n	10ec <find_volume+0x1f8>
    129c:	00000de9 	.word	0x00000de9
    12a0:	ffffaa55 	.word	0xffffaa55
    12a4:	41615252 	.word	0x41615252
    12a8:	61417272 	.word	0x61417272
    12ac:	20000530 	.word	0x20000530

000012b0 <sync_fs>:
{
    12b0:	b538      	push	{r3, r4, r5, lr}
    12b2:	4604      	mov	r4, r0
	res = sync_window(fs);
    12b4:	4b2d      	ldr	r3, [pc, #180]	; (136c <sync_fs+0xbc>)
    12b6:	4798      	blx	r3
	if (res == FR_OK) {
    12b8:	4603      	mov	r3, r0
    12ba:	b950      	cbnz	r0, 12d2 <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    12bc:	7823      	ldrb	r3, [r4, #0]
    12be:	2b03      	cmp	r3, #3
    12c0:	d009      	beq.n	12d6 <sync_fs+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    12c2:	2200      	movs	r2, #0
    12c4:	4611      	mov	r1, r2
    12c6:	7860      	ldrb	r0, [r4, #1]
    12c8:	4b29      	ldr	r3, [pc, #164]	; (1370 <sync_fs+0xc0>)
    12ca:	4798      	blx	r3
	res = sync_window(fs);
    12cc:	1c03      	adds	r3, r0, #0
    12ce:	bf18      	it	ne
    12d0:	2301      	movne	r3, #1
}
    12d2:	4618      	mov	r0, r3
    12d4:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    12d6:	7963      	ldrb	r3, [r4, #5]
    12d8:	2b01      	cmp	r3, #1
    12da:	d1f2      	bne.n	12c2 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
    12dc:	f104 0534 	add.w	r5, r4, #52	; 0x34
    12e0:	f44f 7200 	mov.w	r2, #512	; 0x200
    12e4:	2100      	movs	r1, #0
    12e6:	4628      	mov	r0, r5
    12e8:	4b22      	ldr	r3, [pc, #136]	; (1374 <sync_fs+0xc4>)
    12ea:	4798      	blx	r3
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    12ec:	2355      	movs	r3, #85	; 0x55
    12ee:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    12f2:	23aa      	movs	r3, #170	; 0xaa
    12f4:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    12f8:	2352      	movs	r3, #82	; 0x52
    12fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    12fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    1302:	2361      	movs	r3, #97	; 0x61
    1304:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    1308:	2241      	movs	r2, #65	; 0x41
    130a:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    130e:	2172      	movs	r1, #114	; 0x72
    1310:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
    1314:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
    1318:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
    131c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    1320:	6923      	ldr	r3, [r4, #16]
    1322:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    1326:	f3c3 2207 	ubfx	r2, r3, #8, #8
    132a:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
    132e:	0c1a      	lsrs	r2, r3, #16
    1330:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
    1334:	0e1b      	lsrs	r3, r3, #24
    1336:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    133a:	68e3      	ldr	r3, [r4, #12]
    133c:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    1340:	f3c3 2207 	ubfx	r2, r3, #8, #8
    1344:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
    1348:	0c1a      	lsrs	r2, r3, #16
    134a:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
    134e:	0e1b      	lsrs	r3, r3, #24
    1350:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
			fs->winsect = fs->volbase + 1;
    1354:	6a22      	ldr	r2, [r4, #32]
    1356:	3201      	adds	r2, #1
    1358:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    135a:	2301      	movs	r3, #1
    135c:	4629      	mov	r1, r5
    135e:	7860      	ldrb	r0, [r4, #1]
    1360:	4d05      	ldr	r5, [pc, #20]	; (1378 <sync_fs+0xc8>)
    1362:	47a8      	blx	r5
			fs->fsi_flag = 0;
    1364:	2300      	movs	r3, #0
    1366:	7163      	strb	r3, [r4, #5]
    1368:	e7ab      	b.n	12c2 <sync_fs+0x12>
    136a:	bf00      	nop
    136c:	00000d79 	.word	0x00000d79
    1370:	00000505 	.word	0x00000505
    1374:	00000ced 	.word	0x00000ced
    1378:	00000485 	.word	0x00000485

0000137c <clust2sect>:
	clst -= 2;
    137c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    137e:	6983      	ldr	r3, [r0, #24]
    1380:	3b02      	subs	r3, #2
    1382:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
    1384:	bf3d      	ittte	cc
    1386:	7883      	ldrbcc	r3, [r0, #2]
    1388:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
    138a:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    138e:	2000      	movcs	r0, #0
}
    1390:	4770      	bx	lr
	...

00001394 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1394:	2901      	cmp	r1, #1
    1396:	d969      	bls.n	146c <get_fat+0xd8>
{
    1398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    139a:	6983      	ldr	r3, [r0, #24]
    139c:	4299      	cmp	r1, r3
    139e:	d267      	bcs.n	1470 <get_fat+0xdc>
    13a0:	460c      	mov	r4, r1
    13a2:	4606      	mov	r6, r0
		switch (fs->fs_type) {
    13a4:	7803      	ldrb	r3, [r0, #0]
    13a6:	2b02      	cmp	r3, #2
    13a8:	d02e      	beq.n	1408 <get_fat+0x74>
    13aa:	2b03      	cmp	r3, #3
    13ac:	d040      	beq.n	1430 <get_fat+0x9c>
    13ae:	2b01      	cmp	r3, #1
    13b0:	d001      	beq.n	13b6 <get_fat+0x22>
			val = 1;	/* Internal error */
    13b2:	2001      	movs	r0, #1
    13b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
    13b6:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    13ba:	6a41      	ldr	r1, [r0, #36]	; 0x24
    13bc:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    13c0:	4b2c      	ldr	r3, [pc, #176]	; (1474 <get_fat+0xe0>)
    13c2:	4798      	blx	r3
    13c4:	b110      	cbz	r0, 13cc <get_fat+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    13c6:	f04f 30ff 	mov.w	r0, #4294967295
    13ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
    13cc:	1c6f      	adds	r7, r5, #1
    13ce:	f3c5 0508 	ubfx	r5, r5, #0, #9
    13d2:	4435      	add	r5, r6
    13d4:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    13d8:	6a71      	ldr	r1, [r6, #36]	; 0x24
    13da:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    13de:	4630      	mov	r0, r6
    13e0:	4b24      	ldr	r3, [pc, #144]	; (1474 <get_fat+0xe0>)
    13e2:	4798      	blx	r3
    13e4:	b110      	cbz	r0, 13ec <get_fat+0x58>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    13e6:	f04f 30ff 	mov.w	r0, #4294967295
    13ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc |= fs->win[bc % SS(fs)] << 8;
    13ec:	f3c7 0008 	ubfx	r0, r7, #0, #9
    13f0:	4430      	add	r0, r6
    13f2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    13f6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    13fa:	f014 0f01 	tst.w	r4, #1
    13fe:	bf14      	ite	ne
    1400:	0900      	lsrne	r0, r0, #4
    1402:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
    1406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    1408:	6a41      	ldr	r1, [r0, #36]	; 0x24
    140a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    140e:	4b19      	ldr	r3, [pc, #100]	; (1474 <get_fat+0xe0>)
    1410:	4798      	blx	r3
    1412:	b110      	cbz	r0, 141a <get_fat+0x86>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1414:	f04f 30ff 	mov.w	r0, #4294967295
    1418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 2 % SS(fs)];
    141a:	0060      	lsls	r0, r4, #1
    141c:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
			val = LD_WORD(p);
    1420:	4430      	add	r0, r6
    1422:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    1426:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    142a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
    142e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    1430:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1432:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    1436:	4b0f      	ldr	r3, [pc, #60]	; (1474 <get_fat+0xe0>)
    1438:	4798      	blx	r3
    143a:	b110      	cbz	r0, 1442 <get_fat+0xae>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    143c:	f04f 30ff 	mov.w	r0, #4294967295
}
    1440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 4 % SS(fs)];
    1442:	00a0      	lsls	r0, r4, #2
    1444:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
    1448:	f100 0234 	add.w	r2, r0, #52	; 0x34
    144c:	4432      	add	r2, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
    144e:	78d1      	ldrb	r1, [r2, #3]
    1450:	7893      	ldrb	r3, [r2, #2]
    1452:	041b      	lsls	r3, r3, #16
    1454:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    1458:	4430      	add	r0, r6
    145a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    145e:	4318      	orrs	r0, r3
    1460:	7853      	ldrb	r3, [r2, #1]
    1462:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1466:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
    146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
    146c:	2001      	movs	r0, #1
    146e:	4770      	bx	lr
    1470:	2001      	movs	r0, #1
    1472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1474:	00000de9 	.word	0x00000de9

00001478 <dir_sdi>:
{
    1478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    147c:	4605      	mov	r5, r0
	dp->index = (WORD)idx;	/* Current index */
    147e:	80c1      	strh	r1, [r0, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
    1480:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    1482:	2c01      	cmp	r4, #1
    1484:	d046      	beq.n	1514 <dir_sdi+0x9c>
    1486:	460e      	mov	r6, r1
    1488:	6803      	ldr	r3, [r0, #0]
    148a:	699a      	ldr	r2, [r3, #24]
    148c:	4294      	cmp	r4, r2
    148e:	d302      	bcc.n	1496 <dir_sdi+0x1e>
		return FR_INT_ERR;
    1490:	2002      	movs	r0, #2
    1492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1496:	b964      	cbnz	r4, 14b2 <dir_sdi+0x3a>
    1498:	781a      	ldrb	r2, [r3, #0]
    149a:	2a03      	cmp	r2, #3
    149c:	d005      	beq.n	14aa <dir_sdi+0x32>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    149e:	891a      	ldrh	r2, [r3, #8]
    14a0:	4296      	cmp	r6, r2
    14a2:	d30e      	bcc.n	14c2 <dir_sdi+0x4a>
			return FR_INT_ERR;
    14a4:	2002      	movs	r0, #2
    14a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = dp->fs->dirbase;
    14aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    14ac:	2a00      	cmp	r2, #0
    14ae:	d0f6      	beq.n	149e <dir_sdi+0x26>
		clst = dp->fs->dirbase;
    14b0:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    14b2:	789f      	ldrb	r7, [r3, #2]
    14b4:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
    14b6:	42be      	cmp	r6, r7
    14b8:	d31a      	bcc.n	14f0 <dir_sdi+0x78>
    14ba:	1bf6      	subs	r6, r6, r7
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    14bc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1530 <dir_sdi+0xb8>
    14c0:	e006      	b.n	14d0 <dir_sdi+0x58>
		sect = dp->fs->dirbase;
    14c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
	dp->clust = clst;	/* Current cluster# */
    14c4:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
    14c6:	b9c0      	cbnz	r0, 14fa <dir_sdi+0x82>
    14c8:	2002      	movs	r0, #2
}
    14ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14ce:	461e      	mov	r6, r3
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    14d0:	4621      	mov	r1, r4
    14d2:	6828      	ldr	r0, [r5, #0]
    14d4:	47c0      	blx	r8
    14d6:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    14d8:	f1b0 3fff 	cmp.w	r0, #4294967295
    14dc:	d01d      	beq.n	151a <dir_sdi+0xa2>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    14de:	2801      	cmp	r0, #1
    14e0:	d91e      	bls.n	1520 <dir_sdi+0xa8>
    14e2:	682b      	ldr	r3, [r5, #0]
    14e4:	699b      	ldr	r3, [r3, #24]
    14e6:	4298      	cmp	r0, r3
    14e8:	d21d      	bcs.n	1526 <dir_sdi+0xae>
    14ea:	1bf3      	subs	r3, r6, r7
		while (idx >= ic) {	/* Follow cluster chain */
    14ec:	42be      	cmp	r6, r7
    14ee:	d2ee      	bcs.n	14ce <dir_sdi+0x56>
		sect = clust2sect(dp->fs, clst);
    14f0:	4621      	mov	r1, r4
    14f2:	6828      	ldr	r0, [r5, #0]
    14f4:	4b0d      	ldr	r3, [pc, #52]	; (152c <dir_sdi+0xb4>)
    14f6:	4798      	blx	r3
    14f8:	e7e4      	b.n	14c4 <dir_sdi+0x4c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    14fa:	eb00 1016 	add.w	r0, r0, r6, lsr #4
    14fe:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    1500:	682b      	ldr	r3, [r5, #0]
    1502:	3334      	adds	r3, #52	; 0x34
    1504:	f006 060f 	and.w	r6, r6, #15
    1508:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    150c:	616e      	str	r6, [r5, #20]
	return FR_OK;
    150e:	2000      	movs	r0, #0
    1510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
    1514:	2002      	movs	r0, #2
    1516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    151a:	2001      	movs	r0, #1
    151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_INT_ERR;
    1520:	2002      	movs	r0, #2
    1522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1526:	2002      	movs	r0, #2
    1528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    152c:	0000137d 	.word	0x0000137d
    1530:	00001395 	.word	0x00001395

00001534 <put_fat>:
{
    1534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1538:	2901      	cmp	r1, #1
    153a:	f240 808b 	bls.w	1654 <put_fat+0x120>
    153e:	6983      	ldr	r3, [r0, #24]
    1540:	4299      	cmp	r1, r3
    1542:	d301      	bcc.n	1548 <put_fat+0x14>
		res = FR_INT_ERR;
    1544:	2702      	movs	r7, #2
    1546:	e086      	b.n	1656 <put_fat+0x122>
    1548:	4616      	mov	r6, r2
    154a:	460c      	mov	r4, r1
    154c:	4605      	mov	r5, r0
		switch (fs->fs_type) {
    154e:	7803      	ldrb	r3, [r0, #0]
    1550:	2b02      	cmp	r3, #2
    1552:	d04c      	beq.n	15ee <put_fat+0xba>
    1554:	2b03      	cmp	r3, #3
    1556:	d05e      	beq.n	1616 <put_fat+0xe2>
    1558:	2b01      	cmp	r3, #1
    155a:	d001      	beq.n	1560 <put_fat+0x2c>
			res = FR_INT_ERR;
    155c:	2702      	movs	r7, #2
    155e:	e07a      	b.n	1656 <put_fat+0x122>
			bc = (UINT)clst; bc += bc / 2;
    1560:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1564:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1566:	eb01 2158 	add.w	r1, r1, r8, lsr #9
    156a:	4b3e      	ldr	r3, [pc, #248]	; (1664 <put_fat+0x130>)
    156c:	4798      	blx	r3
			if (res != FR_OK) break;
    156e:	4607      	mov	r7, r0
    1570:	2800      	cmp	r0, #0
    1572:	d170      	bne.n	1656 <put_fat+0x122>
			p = &fs->win[bc++ % SS(fs)];
    1574:	f108 0901 	add.w	r9, r8, #1
    1578:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    157c:	f014 0f01 	tst.w	r4, #1
    1580:	d01c      	beq.n	15bc <put_fat+0x88>
    1582:	44a8      	add	r8, r5
    1584:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    1588:	f003 030f 	and.w	r3, r3, #15
    158c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    1590:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
			fs->wflag = 1;
    1594:	2301      	movs	r3, #1
    1596:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1598:	6a69      	ldr	r1, [r5, #36]	; 0x24
    159a:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    159e:	4628      	mov	r0, r5
    15a0:	4b30      	ldr	r3, [pc, #192]	; (1664 <put_fat+0x130>)
    15a2:	4798      	blx	r3
			if (res != FR_OK) break;
    15a4:	2800      	cmp	r0, #0
    15a6:	d159      	bne.n	165c <put_fat+0x128>
			p = &fs->win[bc % SS(fs)];
    15a8:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    15ac:	f3c6 1207 	ubfx	r2, r6, #4, #8
    15b0:	44a9      	add	r9, r5
    15b2:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
			fs->wflag = 1;
    15b6:	2301      	movs	r3, #1
    15b8:	712b      	strb	r3, [r5, #4]
			break;
    15ba:	e04c      	b.n	1656 <put_fat+0x122>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    15bc:	44a8      	add	r8, r5
    15be:	f888 6034 	strb.w	r6, [r8, #52]	; 0x34
			fs->wflag = 1;
    15c2:	2301      	movs	r3, #1
    15c4:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    15c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    15c8:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    15cc:	4628      	mov	r0, r5
    15ce:	4b25      	ldr	r3, [pc, #148]	; (1664 <put_fat+0x130>)
    15d0:	4798      	blx	r3
			if (res != FR_OK) break;
    15d2:	2800      	cmp	r0, #0
    15d4:	d144      	bne.n	1660 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    15d6:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    15da:	eb05 0309 	add.w	r3, r5, r9
    15de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    15e2:	f023 030f 	bic.w	r3, r3, #15
    15e6:	f3c6 2203 	ubfx	r2, r6, #8, #4
    15ea:	431a      	orrs	r2, r3
    15ec:	e7e0      	b.n	15b0 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    15ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    15f0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    15f4:	4b1b      	ldr	r3, [pc, #108]	; (1664 <put_fat+0x130>)
    15f6:	4798      	blx	r3
			if (res != FR_OK) break;
    15f8:	4607      	mov	r7, r0
    15fa:	bb60      	cbnz	r0, 1656 <put_fat+0x122>
			p = &fs->win[clst * 2 % SS(fs)];
    15fc:	0063      	lsls	r3, r4, #1
    15fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
    1602:	442b      	add	r3, r5
    1604:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
    1608:	f3c6 2207 	ubfx	r2, r6, #8, #8
    160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			fs->wflag = 1;
    1610:	2301      	movs	r3, #1
    1612:	712b      	strb	r3, [r5, #4]
			break;
    1614:	e01f      	b.n	1656 <put_fat+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1616:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1618:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    161c:	4b11      	ldr	r3, [pc, #68]	; (1664 <put_fat+0x130>)
    161e:	4798      	blx	r3
			if (res != FR_OK) break;
    1620:	4607      	mov	r7, r0
    1622:	b9c0      	cbnz	r0, 1656 <put_fat+0x122>
			p = &fs->win[clst * 4 % SS(fs)];
    1624:	00a1      	lsls	r1, r4, #2
    1626:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
    162a:	f101 0334 	add.w	r3, r1, #52	; 0x34
    162e:	442b      	add	r3, r5
			val |= LD_DWORD(p) & 0xF0000000;
    1630:	78da      	ldrb	r2, [r3, #3]
    1632:	0612      	lsls	r2, r2, #24
    1634:	4429      	add	r1, r5
    1636:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    163a:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
    163c:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    1640:	f3c2 2107 	ubfx	r1, r2, #8, #8
    1644:	7059      	strb	r1, [r3, #1]
    1646:	0c11      	lsrs	r1, r2, #16
    1648:	7099      	strb	r1, [r3, #2]
    164a:	0e12      	lsrs	r2, r2, #24
    164c:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
    164e:	2301      	movs	r3, #1
    1650:	712b      	strb	r3, [r5, #4]
			break;
    1652:	e000      	b.n	1656 <put_fat+0x122>
		res = FR_INT_ERR;
    1654:	2702      	movs	r7, #2
}
    1656:	4638      	mov	r0, r7
    1658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    165c:	4607      	mov	r7, r0
    165e:	e7fa      	b.n	1656 <put_fat+0x122>
    1660:	4607      	mov	r7, r0
	return res;
    1662:	e7f8      	b.n	1656 <put_fat+0x122>
    1664:	00000de9 	.word	0x00000de9

00001668 <create_chain>:
{
    1668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    166c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
    166e:	4688      	mov	r8, r1
    1670:	b941      	cbnz	r1, 1684 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
    1672:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1674:	b19e      	cbz	r6, 169e <create_chain+0x36>
    1676:	6983      	ldr	r3, [r0, #24]
    1678:	429e      	cmp	r6, r3
    167a:	bf28      	it	cs
    167c:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
    167e:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1680:	4f2a      	ldr	r7, [pc, #168]	; (172c <create_chain+0xc4>)
    1682:	e01a      	b.n	16ba <create_chain+0x52>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1684:	4b29      	ldr	r3, [pc, #164]	; (172c <create_chain+0xc4>)
    1686:	4798      	blx	r3
    1688:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
    168a:	2801      	cmp	r0, #1
    168c:	d943      	bls.n	1716 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    168e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1692:	d045      	beq.n	1720 <create_chain+0xb8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1694:	69aa      	ldr	r2, [r5, #24]
    1696:	4290      	cmp	r0, r2
    1698:	d342      	bcc.n	1720 <create_chain+0xb8>
		scl = clst;
    169a:	4646      	mov	r6, r8
    169c:	e7ef      	b.n	167e <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    169e:	2601      	movs	r6, #1
    16a0:	e7ed      	b.n	167e <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    16a2:	4621      	mov	r1, r4
    16a4:	4628      	mov	r0, r5
    16a6:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    16a8:	4603      	mov	r3, r0
    16aa:	b170      	cbz	r0, 16ca <create_chain+0x62>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    16ac:	f1b0 3fff 	cmp.w	r0, #4294967295
    16b0:	d036      	beq.n	1720 <create_chain+0xb8>
    16b2:	2801      	cmp	r0, #1
    16b4:	d034      	beq.n	1720 <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    16b6:	42b4      	cmp	r4, r6
    16b8:	d031      	beq.n	171e <create_chain+0xb6>
		ncl++;							/* Next cluster */
    16ba:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    16bc:	69ab      	ldr	r3, [r5, #24]
    16be:	429c      	cmp	r4, r3
    16c0:	d3ef      	bcc.n	16a2 <create_chain+0x3a>
			if (ncl > scl) return 0;	/* No free cluster */
    16c2:	2e01      	cmp	r6, #1
    16c4:	d929      	bls.n	171a <create_chain+0xb2>
			ncl = 2;
    16c6:	2402      	movs	r4, #2
    16c8:	e7eb      	b.n	16a2 <create_chain+0x3a>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    16ca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    16ce:	4621      	mov	r1, r4
    16d0:	4628      	mov	r0, r5
    16d2:	4b17      	ldr	r3, [pc, #92]	; (1730 <create_chain+0xc8>)
    16d4:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    16d6:	4603      	mov	r3, r0
    16d8:	b9b8      	cbnz	r0, 170a <create_chain+0xa2>
    16da:	f1b8 0f00 	cmp.w	r8, #0
    16de:	d10c      	bne.n	16fa <create_chain+0x92>
		fs->last_clust = ncl;			/* Update FSINFO */
    16e0:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    16e2:	692b      	ldr	r3, [r5, #16]
    16e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    16e8:	d01d      	beq.n	1726 <create_chain+0xbe>
			fs->free_clust--;
    16ea:	3b01      	subs	r3, #1
    16ec:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    16ee:	796b      	ldrb	r3, [r5, #5]
    16f0:	f043 0301 	orr.w	r3, r3, #1
    16f4:	716b      	strb	r3, [r5, #5]
    16f6:	4623      	mov	r3, r4
    16f8:	e012      	b.n	1720 <create_chain+0xb8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    16fa:	4622      	mov	r2, r4
    16fc:	4641      	mov	r1, r8
    16fe:	4628      	mov	r0, r5
    1700:	4b0b      	ldr	r3, [pc, #44]	; (1730 <create_chain+0xc8>)
    1702:	4798      	blx	r3
	if (res == FR_OK) {
    1704:	4603      	mov	r3, r0
    1706:	2800      	cmp	r0, #0
    1708:	d0ea      	beq.n	16e0 <create_chain+0x78>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    170a:	2b01      	cmp	r3, #1
    170c:	bf0c      	ite	eq
    170e:	f04f 33ff 	moveq.w	r3, #4294967295
    1712:	2301      	movne	r3, #1
    1714:	e004      	b.n	1720 <create_chain+0xb8>
		if (cs < 2) return 1;			/* Invalid value */
    1716:	2301      	movs	r3, #1
    1718:	e002      	b.n	1720 <create_chain+0xb8>
			if (ncl > scl) return 0;	/* No free cluster */
    171a:	2300      	movs	r3, #0
    171c:	e000      	b.n	1720 <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    171e:	2300      	movs	r3, #0
}
    1720:	4618      	mov	r0, r3
    1722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1726:	4623      	mov	r3, r4
    1728:	e7fa      	b.n	1720 <create_chain+0xb8>
    172a:	bf00      	nop
    172c:	00001395 	.word	0x00001395
    1730:	00001535 	.word	0x00001535

00001734 <dir_next>:
{
    1734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
    1738:	88c4      	ldrh	r4, [r0, #6]
    173a:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    173c:	b2a3      	uxth	r3, r4
    173e:	b913      	cbnz	r3, 1746 <dir_next+0x12>
		return FR_NO_FILE;
    1740:	2004      	movs	r0, #4
    1742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    1746:	6903      	ldr	r3, [r0, #16]
    1748:	b913      	cbnz	r3, 1750 <dir_next+0x1c>
		return FR_NO_FILE;
    174a:	2004      	movs	r0, #4
    174c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1750:	460e      	mov	r6, r1
    1752:	4605      	mov	r5, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    1754:	f014 070f 	ands.w	r7, r4, #15
    1758:	d110      	bne.n	177c <dir_next+0x48>
		dp->sect++;					/* Next sector */
    175a:	3301      	adds	r3, #1
    175c:	6103      	str	r3, [r0, #16]
		if (!dp->clust) {		/* Static table */
    175e:	68c1      	ldr	r1, [r0, #12]
    1760:	b931      	cbnz	r1, 1770 <dir_next+0x3c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    1762:	6803      	ldr	r3, [r0, #0]
    1764:	891b      	ldrh	r3, [r3, #8]
    1766:	429c      	cmp	r4, r3
    1768:	d308      	bcc.n	177c <dir_next+0x48>
				return FR_NO_FILE;
    176a:	2004      	movs	r0, #4
    176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1770:	6800      	ldr	r0, [r0, #0]
    1772:	7883      	ldrb	r3, [r0, #2]
    1774:	3b01      	subs	r3, #1
    1776:	ea13 1814 	ands.w	r8, r3, r4, lsr #4
    177a:	d008      	beq.n	178e <dir_next+0x5a>
	dp->index = (WORD)i;	/* Current index */
    177c:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    177e:	682b      	ldr	r3, [r5, #0]
    1780:	3334      	adds	r3, #52	; 0x34
    1782:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    1786:	616b      	str	r3, [r5, #20]
	return FR_OK;
    1788:	2000      	movs	r0, #0
    178a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    178e:	4b30      	ldr	r3, [pc, #192]	; (1850 <dir_next+0x11c>)
    1790:	4798      	blx	r3
    1792:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    1794:	2801      	cmp	r0, #1
    1796:	d948      	bls.n	182a <dir_next+0xf6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1798:	f1b0 3fff 	cmp.w	r0, #4294967295
    179c:	d048      	beq.n	1830 <dir_next+0xfc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    179e:	6828      	ldr	r0, [r5, #0]
    17a0:	6983      	ldr	r3, [r0, #24]
    17a2:	4599      	cmp	r9, r3
    17a4:	d339      	bcc.n	181a <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    17a6:	b916      	cbnz	r6, 17ae <dir_next+0x7a>
    17a8:	2004      	movs	r0, #4
    17aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    17ae:	68e9      	ldr	r1, [r5, #12]
    17b0:	4b28      	ldr	r3, [pc, #160]	; (1854 <dir_next+0x120>)
    17b2:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    17b4:	4681      	mov	r9, r0
    17b6:	b910      	cbnz	r0, 17be <dir_next+0x8a>
    17b8:	2007      	movs	r0, #7
    17ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    17be:	2801      	cmp	r0, #1
    17c0:	d039      	beq.n	1836 <dir_next+0x102>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    17c2:	f1b0 3fff 	cmp.w	r0, #4294967295
    17c6:	d039      	beq.n	183c <dir_next+0x108>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    17c8:	6828      	ldr	r0, [r5, #0]
    17ca:	4b23      	ldr	r3, [pc, #140]	; (1858 <dir_next+0x124>)
    17cc:	4798      	blx	r3
    17ce:	2800      	cmp	r0, #0
    17d0:	d137      	bne.n	1842 <dir_next+0x10e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    17d2:	6828      	ldr	r0, [r5, #0]
    17d4:	f44f 7200 	mov.w	r2, #512	; 0x200
    17d8:	2100      	movs	r1, #0
    17da:	3034      	adds	r0, #52	; 0x34
    17dc:	4b1f      	ldr	r3, [pc, #124]	; (185c <dir_next+0x128>)
    17de:	4798      	blx	r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    17e0:	682e      	ldr	r6, [r5, #0]
    17e2:	4649      	mov	r1, r9
    17e4:	4630      	mov	r0, r6
    17e6:	4b1e      	ldr	r3, [pc, #120]	; (1860 <dir_next+0x12c>)
    17e8:	4798      	blx	r3
    17ea:	6330      	str	r0, [r6, #48]	; 0x30
						dp->fs->wflag = 1;
    17ec:	f04f 0a01 	mov.w	sl, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    17f0:	4e19      	ldr	r6, [pc, #100]	; (1858 <dir_next+0x124>)
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    17f2:	682b      	ldr	r3, [r5, #0]
    17f4:	789a      	ldrb	r2, [r3, #2]
    17f6:	4590      	cmp	r8, r2
    17f8:	d20b      	bcs.n	1812 <dir_next+0xde>
						dp->fs->wflag = 1;
    17fa:	f883 a004 	strb.w	sl, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    17fe:	6828      	ldr	r0, [r5, #0]
    1800:	47b0      	blx	r6
    1802:	bb08      	cbnz	r0, 1848 <dir_next+0x114>
						dp->fs->winsect++;
    1804:	682a      	ldr	r2, [r5, #0]
    1806:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1808:	3301      	adds	r3, #1
    180a:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    180c:	f108 0801 	add.w	r8, r8, #1
    1810:	e7ef      	b.n	17f2 <dir_next+0xbe>
					dp->fs->winsect -= c;						/* Rewind window offset */
    1812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1814:	eba2 0208 	sub.w	r2, r2, r8
    1818:	631a      	str	r2, [r3, #48]	; 0x30
				dp->clust = clst;				/* Initialize data for new cluster */
    181a:	f8c5 900c 	str.w	r9, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
    181e:	4649      	mov	r1, r9
    1820:	6828      	ldr	r0, [r5, #0]
    1822:	4b0f      	ldr	r3, [pc, #60]	; (1860 <dir_next+0x12c>)
    1824:	4798      	blx	r3
    1826:	6128      	str	r0, [r5, #16]
    1828:	e7a8      	b.n	177c <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
    182a:	2002      	movs	r0, #2
    182c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1830:	2001      	movs	r0, #1
    1832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    1836:	2002      	movs	r0, #2
    1838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    183c:	2001      	movs	r0, #1
    183e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    1842:	2001      	movs	r0, #1
    1844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    1848:	2001      	movs	r0, #1
}
    184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    184e:	bf00      	nop
    1850:	00001395 	.word	0x00001395
    1854:	00001669 	.word	0x00001669
    1858:	00000d79 	.word	0x00000d79
    185c:	00000ced 	.word	0x00000ced
    1860:	0000137d 	.word	0x0000137d

00001864 <follow_path>:
{
    1864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1868:	4605      	mov	r5, r0
    186a:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
    186c:	780b      	ldrb	r3, [r1, #0]
    186e:	2b2f      	cmp	r3, #47	; 0x2f
    1870:	d00a      	beq.n	1888 <follow_path+0x24>
    1872:	2b5c      	cmp	r3, #92	; 0x5c
    1874:	d008      	beq.n	1888 <follow_path+0x24>
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
    1876:	6803      	ldr	r3, [r0, #0]
    1878:	695b      	ldr	r3, [r3, #20]
    187a:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    187c:	7823      	ldrb	r3, [r4, #0]
    187e:	2b1f      	cmp	r3, #31
    1880:	d906      	bls.n	1890 <follow_path+0x2c>
		res = dir_next(dp, 0);		/* Next entry */
    1882:	f8df 8238 	ldr.w	r8, [pc, #568]	; 1abc <follow_path+0x258>
    1886:	e085      	b.n	1994 <follow_path+0x130>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
    1888:	3401      	adds	r4, #1
    188a:	2300      	movs	r3, #0
    188c:	60ab      	str	r3, [r5, #8]
    188e:	e7f5      	b.n	187c <follow_path+0x18>
		res = dir_sdi(dp, 0);
    1890:	2100      	movs	r1, #0
    1892:	4628      	mov	r0, r5
    1894:	4b83      	ldr	r3, [pc, #524]	; (1aa4 <follow_path+0x240>)
    1896:	4798      	blx	r3
    1898:	4681      	mov	r9, r0
		dp->dir = 0;
    189a:	2300      	movs	r3, #0
    189c:	616b      	str	r3, [r5, #20]
    189e:	e0e0      	b.n	1a62 <follow_path+0x1fe>
			sfn[i++] = c;
    18a0:	232e      	movs	r3, #46	; 0x2e
    18a2:	703b      	strb	r3, [r7, #0]
			c = (BYTE)p[si++];
    18a4:	7873      	ldrb	r3, [r6, #1]
			if (c != '.' || si >= 3) break;
    18a6:	2b2e      	cmp	r3, #46	; 0x2e
    18a8:	d113      	bne.n	18d2 <follow_path+0x6e>
			sfn[i++] = c;
    18aa:	707b      	strb	r3, [r7, #1]
			c = (BYTE)p[si++];
    18ac:	78b3      	ldrb	r3, [r6, #2]
			if (c != '.' || si >= 3) break;
    18ae:	2b2e      	cmp	r3, #46	; 0x2e
    18b0:	d102      	bne.n	18b8 <follow_path+0x54>
    18b2:	f04f 0906 	mov.w	r9, #6
    18b6:	e0d4      	b.n	1a62 <follow_path+0x1fe>
			c = (BYTE)p[si++];
    18b8:	2403      	movs	r4, #3
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    18ba:	2b2f      	cmp	r3, #47	; 0x2f
    18bc:	f000 80ba 	beq.w	1a34 <follow_path+0x1d0>
    18c0:	2b5c      	cmp	r3, #92	; 0x5c
    18c2:	f000 80b7 	beq.w	1a34 <follow_path+0x1d0>
    18c6:	2b20      	cmp	r3, #32
    18c8:	f200 80c9 	bhi.w	1a5e <follow_path+0x1fa>
		*path = &p[si];									/* Return pointer to the next segment */
    18cc:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    18ce:	2324      	movs	r3, #36	; 0x24
    18d0:	e0b2      	b.n	1a38 <follow_path+0x1d4>
			c = (BYTE)p[si++];
    18d2:	2402      	movs	r4, #2
    18d4:	e7f1      	b.n	18ba <follow_path+0x56>
			b |= 3;						/* Eliminate NT flag */
    18d6:	f04c 0c03 	orr.w	ip, ip, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
    18da:	3b80      	subs	r3, #128	; 0x80
    18dc:	4a72      	ldr	r2, [pc, #456]	; (1aa8 <follow_path+0x244>)
    18de:	5cd3      	ldrb	r3, [r2, r3]
    18e0:	e085      	b.n	19ee <follow_path+0x18a>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    18e2:	2b00      	cmp	r3, #0
    18e4:	f040 80bb 	bne.w	1a5e <follow_path+0x1fa>
				if (IsLower(c)) {		/* ASCII small capital? */
    18e8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    18ec:	b2d2      	uxtb	r2, r2
    18ee:	2a19      	cmp	r2, #25
    18f0:	f200 8091 	bhi.w	1a16 <follow_path+0x1b2>
					b |= 1; c -= 0x20;
    18f4:	f04c 0c01 	orr.w	ip, ip, #1
    18f8:	3b20      	subs	r3, #32
    18fa:	b2db      	uxtb	r3, r3
    18fc:	e08b      	b.n	1a16 <follow_path+0x1b2>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    18fe:	783a      	ldrb	r2, [r7, #0]
    1900:	2ae5      	cmp	r2, #229	; 0xe5
    1902:	bf04      	itt	eq
    1904:	2205      	moveq	r2, #5
    1906:	703a      	strbeq	r2, [r7, #0]
	if (ni == 8) b <<= 2;
    1908:	f1b9 0f08 	cmp.w	r9, #8
    190c:	bf04      	itt	eq
    190e:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
    1912:	fa5f fc8c 	uxtbeq.w	ip, ip
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1916:	f00c 0203 	and.w	r2, ip, #3
    191a:	2a01      	cmp	r2, #1
    191c:	bf08      	it	eq
    191e:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1922:	f00c 0c0c 	and.w	ip, ip, #12
    1926:	f1bc 0f04 	cmp.w	ip, #4
    192a:	bf08      	it	eq
    192c:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    1930:	72fb      	strb	r3, [r7, #11]
    1932:	e082      	b.n	1a3a <follow_path+0x1d6>
		res = dir_next(dp, 0);		/* Next entry */
    1934:	4659      	mov	r1, fp
    1936:	4628      	mov	r0, r5
    1938:	47c0      	blx	r8
	} while (res == FR_OK);
    193a:	4681      	mov	r9, r0
    193c:	2800      	cmp	r0, #0
    193e:	f040 8093 	bne.w	1a68 <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    1942:	6929      	ldr	r1, [r5, #16]
    1944:	6828      	ldr	r0, [r5, #0]
    1946:	47b0      	blx	r6
		if (res != FR_OK) break;
    1948:	4681      	mov	r9, r0
    194a:	2800      	cmp	r0, #0
    194c:	f040 808c 	bne.w	1a68 <follow_path+0x204>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1950:	6969      	ldr	r1, [r5, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1952:	780b      	ldrb	r3, [r1, #0]
    1954:	2b00      	cmp	r3, #0
    1956:	f000 8097 	beq.w	1a88 <follow_path+0x224>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    195a:	f891 a00b 	ldrb.w	sl, [r1, #11]
    195e:	f01a 0f08 	tst.w	sl, #8
    1962:	d1e7      	bne.n	1934 <follow_path+0xd0>
    1964:	69af      	ldr	r7, [r5, #24]
    1966:	f101 0c0b 	add.w	ip, r1, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    196a:	463a      	mov	r2, r7
    196c:	460b      	mov	r3, r1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    196e:	f813 eb01 	ldrb.w	lr, [r3], #1
    1972:	f812 0b01 	ldrb.w	r0, [r2], #1
    1976:	4586      	cmp	lr, r0
    1978:	d1dc      	bne.n	1934 <follow_path+0xd0>
    197a:	459c      	cmp	ip, r3
    197c:	d1f7      	bne.n	196e <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    197e:	7afb      	ldrb	r3, [r7, #11]
    1980:	f013 0f04 	tst.w	r3, #4
    1984:	d16d      	bne.n	1a62 <follow_path+0x1fe>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1986:	f01a 0f10 	tst.w	sl, #16
    198a:	d050      	beq.n	1a2e <follow_path+0x1ca>
			dp->sclust = ld_clust(dp->fs, dir);
    198c:	6828      	ldr	r0, [r5, #0]
    198e:	4b47      	ldr	r3, [pc, #284]	; (1aac <follow_path+0x248>)
    1990:	4798      	blx	r3
    1992:	60a8      	str	r0, [r5, #8]
    1994:	4626      	mov	r6, r4
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Skip duplicated separator */
    1996:	f814 3b01 	ldrb.w	r3, [r4], #1
    199a:	2b2f      	cmp	r3, #47	; 0x2f
    199c:	d0fa      	beq.n	1994 <follow_path+0x130>
    199e:	2b5c      	cmp	r3, #92	; 0x5c
    19a0:	d0f8      	beq.n	1994 <follow_path+0x130>
	sfn = dp->fn;
    19a2:	69af      	ldr	r7, [r5, #24]
	mem_set(sfn, ' ', 11);
    19a4:	220b      	movs	r2, #11
    19a6:	2120      	movs	r1, #32
    19a8:	4638      	mov	r0, r7
    19aa:	4b41      	ldr	r3, [pc, #260]	; (1ab0 <follow_path+0x24c>)
    19ac:	4798      	blx	r3
	if (p[si] == '.') { /* Is this a dot entry? */
    19ae:	7833      	ldrb	r3, [r6, #0]
    19b0:	2b2e      	cmp	r3, #46	; 0x2e
    19b2:	f43f af75 	beq.w	18a0 <follow_path+0x3c>
    19b6:	f106 3eff 	add.w	lr, r6, #4294967295
    19ba:	2000      	movs	r0, #0
    19bc:	4604      	mov	r4, r0
    19be:	f04f 0908 	mov.w	r9, #8
    19c2:	4684      	mov	ip, r0
			i = 8; ni = 11;
    19c4:	f04f 0b0b 	mov.w	fp, #11
	while (*str && *str != chr) str++;
    19c8:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
		c = (BYTE)p[si++];
    19cc:	3401      	adds	r4, #1
    19ce:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    19d2:	2b20      	cmp	r3, #32
    19d4:	d93b      	bls.n	1a4e <follow_path+0x1ea>
    19d6:	2b2f      	cmp	r3, #47	; 0x2f
    19d8:	d03c      	beq.n	1a54 <follow_path+0x1f0>
    19da:	2b5c      	cmp	r3, #92	; 0x5c
    19dc:	d03a      	beq.n	1a54 <follow_path+0x1f0>
		if (c == '.' || i >= ni) {
    19de:	2b2e      	cmp	r3, #46	; 0x2e
    19e0:	d055      	beq.n	1a8e <follow_path+0x22a>
    19e2:	4581      	cmp	r9, r0
    19e4:	d93b      	bls.n	1a5e <follow_path+0x1fa>
		if (c >= 0x80) {				/* Extended character? */
    19e6:	f013 0f80 	tst.w	r3, #128	; 0x80
    19ea:	f47f af74 	bne.w	18d6 <follow_path+0x72>
	while (*str && *str != chr) str++;
    19ee:	2b22      	cmp	r3, #34	; 0x22
    19f0:	f43f af5f 	beq.w	18b2 <follow_path+0x4e>
    19f4:	4652      	mov	r2, sl
    19f6:	492f      	ldr	r1, [pc, #188]	; (1ab4 <follow_path+0x250>)
    19f8:	4293      	cmp	r3, r2
    19fa:	f43f af72 	beq.w	18e2 <follow_path+0x7e>
    19fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1a02:	2a00      	cmp	r2, #0
    1a04:	d1f8      	bne.n	19f8 <follow_path+0x194>
			if (IsUpper(c)) {			/* ASCII large capital? */
    1a06:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1a0a:	b2d2      	uxtb	r2, r2
    1a0c:	2a19      	cmp	r2, #25
    1a0e:	f63f af6b 	bhi.w	18e8 <follow_path+0x84>
				b |= 2;
    1a12:	f04c 0c02 	orr.w	ip, ip, #2
			sfn[i++] = c;
    1a16:	543b      	strb	r3, [r7, r0]
    1a18:	3001      	adds	r0, #1
    1a1a:	e7d7      	b.n	19cc <follow_path+0x168>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1a1c:	f003 0304 	and.w	r3, r3, #4
    1a20:	2b00      	cmp	r3, #0
    1a22:	bf14      	ite	ne
    1a24:	f04f 0904 	movne.w	r9, #4
    1a28:	f04f 0905 	moveq.w	r9, #5
    1a2c:	e019      	b.n	1a62 <follow_path+0x1fe>
				res = FR_NO_PATH; break;
    1a2e:	f04f 0905 	mov.w	r9, #5
    1a32:	e016      	b.n	1a62 <follow_path+0x1fe>
		*path = &p[si];									/* Return pointer to the next segment */
    1a34:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1a36:	2320      	movs	r3, #32
    1a38:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1a3a:	2100      	movs	r1, #0
    1a3c:	4628      	mov	r0, r5
    1a3e:	4b19      	ldr	r3, [pc, #100]	; (1aa4 <follow_path+0x240>)
    1a40:	4798      	blx	r3
	if (res != FR_OK) return res;
    1a42:	4681      	mov	r9, r0
    1a44:	b980      	cbnz	r0, 1a68 <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    1a46:	4e1c      	ldr	r6, [pc, #112]	; (1ab8 <follow_path+0x254>)
		res = dir_next(dp, 0);		/* Next entry */
    1a48:	f04f 0b00 	mov.w	fp, #0
    1a4c:	e779      	b.n	1942 <follow_path+0xde>
	*path = &p[si];						/* Return pointer to the next segment */
    1a4e:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1a50:	2304      	movs	r3, #4
    1a52:	e001      	b.n	1a58 <follow_path+0x1f4>
	*path = &p[si];						/* Return pointer to the next segment */
    1a54:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1a56:	2300      	movs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1a58:	2800      	cmp	r0, #0
    1a5a:	f47f af50 	bne.w	18fe <follow_path+0x9a>
			res = dir_find(dp);				/* Find an object with the sagment name */
    1a5e:	f04f 0906 	mov.w	r9, #6
}
    1a62:	4648      	mov	r0, r9
    1a64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ns = dp->fn[NSFLAG];
    1a68:	69ab      	ldr	r3, [r5, #24]
    1a6a:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
    1a6c:	f1b9 0f04 	cmp.w	r9, #4
    1a70:	d1f7      	bne.n	1a62 <follow_path+0x1fe>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
    1a72:	f013 0f20 	tst.w	r3, #32
    1a76:	d0d1      	beq.n	1a1c <follow_path+0x1b8>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
    1a78:	2200      	movs	r2, #0
    1a7a:	60aa      	str	r2, [r5, #8]
    1a7c:	616a      	str	r2, [r5, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    1a7e:	f013 0f04 	tst.w	r3, #4
    1a82:	d087      	beq.n	1994 <follow_path+0x130>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
    1a84:	4691      	mov	r9, r2
    1a86:	e7ec      	b.n	1a62 <follow_path+0x1fe>
			ns = dp->fn[NSFLAG];
    1a88:	69ab      	ldr	r3, [r5, #24]
    1a8a:	7adb      	ldrb	r3, [r3, #11]
    1a8c:	e7f1      	b.n	1a72 <follow_path+0x20e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1a8e:	f1b9 0f08 	cmp.w	r9, #8
    1a92:	d1e4      	bne.n	1a5e <follow_path+0x1fa>
			b <<= 2; continue;
    1a94:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1a98:	fa5f fc8c 	uxtb.w	ip, ip
			i = 8; ni = 11;
    1a9c:	4648      	mov	r0, r9
    1a9e:	46d9      	mov	r9, fp
    1aa0:	e794      	b.n	19cc <follow_path+0x168>
    1aa2:	bf00      	nop
    1aa4:	00001479 	.word	0x00001479
    1aa8:	0000860c 	.word	0x0000860c
    1aac:	00000cfb 	.word	0x00000cfb
    1ab0:	00000ced 	.word	0x00000ced
    1ab4:	000086bd 	.word	0x000086bd
    1ab8:	00000de9 	.word	0x00000de9
    1abc:	00001735 	.word	0x00001735

00001ac0 <dir_register>:
{
    1ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ac4:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
    1ac6:	2100      	movs	r1, #0
    1ac8:	4b1b      	ldr	r3, [pc, #108]	; (1b38 <dir_register+0x78>)
    1aca:	4798      	blx	r3
	if (res == FR_OK) {
    1acc:	2800      	cmp	r0, #0
    1ace:	d12b      	bne.n	1b28 <dir_register+0x68>
			res = move_window(dp->fs, dp->sect);
    1ad0:	4e1a      	ldr	r6, [pc, #104]	; (1b3c <dir_register+0x7c>)
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1ad2:	f04f 0801 	mov.w	r8, #1
    1ad6:	4f1a      	ldr	r7, [pc, #104]	; (1b40 <dir_register+0x80>)
    1ad8:	e004      	b.n	1ae4 <dir_register+0x24>
    1ada:	4641      	mov	r1, r8
    1adc:	4620      	mov	r0, r4
    1ade:	47b8      	blx	r7
		} while (res == FR_OK);
    1ae0:	4605      	mov	r5, r0
    1ae2:	bb30      	cbnz	r0, 1b32 <dir_register+0x72>
			res = move_window(dp->fs, dp->sect);
    1ae4:	6921      	ldr	r1, [r4, #16]
    1ae6:	6820      	ldr	r0, [r4, #0]
    1ae8:	47b0      	blx	r6
			if (res != FR_OK) break;
    1aea:	4605      	mov	r5, r0
    1aec:	bb08      	cbnz	r0, 1b32 <dir_register+0x72>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    1aee:	6963      	ldr	r3, [r4, #20]
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	2be5      	cmp	r3, #229	; 0xe5
    1af4:	d001      	beq.n	1afa <dir_register+0x3a>
    1af6:	2b00      	cmp	r3, #0
    1af8:	d1ef      	bne.n	1ada <dir_register+0x1a>
		res = move_window(dp->fs, dp->sect);
    1afa:	6921      	ldr	r1, [r4, #16]
    1afc:	6820      	ldr	r0, [r4, #0]
    1afe:	4b0f      	ldr	r3, [pc, #60]	; (1b3c <dir_register+0x7c>)
    1b00:	4798      	blx	r3
		if (res == FR_OK) {
    1b02:	4605      	mov	r5, r0
    1b04:	b110      	cbz	r0, 1b0c <dir_register+0x4c>
}
    1b06:	4628      	mov	r0, r5
    1b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    1b0c:	2220      	movs	r2, #32
    1b0e:	2100      	movs	r1, #0
    1b10:	6960      	ldr	r0, [r4, #20]
    1b12:	4b0c      	ldr	r3, [pc, #48]	; (1b44 <dir_register+0x84>)
    1b14:	4798      	blx	r3
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1b16:	220b      	movs	r2, #11
    1b18:	69a1      	ldr	r1, [r4, #24]
    1b1a:	6960      	ldr	r0, [r4, #20]
    1b1c:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <dir_register+0x88>)
    1b1e:	4798      	blx	r3
			dp->fs->wflag = 1;
    1b20:	6823      	ldr	r3, [r4, #0]
    1b22:	2201      	movs	r2, #1
    1b24:	711a      	strb	r2, [r3, #4]
    1b26:	e7ee      	b.n	1b06 <dir_register+0x46>
    1b28:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1b2a:	2804      	cmp	r0, #4
    1b2c:	d1eb      	bne.n	1b06 <dir_register+0x46>
    1b2e:	2507      	movs	r5, #7
    1b30:	e7e9      	b.n	1b06 <dir_register+0x46>
    1b32:	2d04      	cmp	r5, #4
    1b34:	d0fb      	beq.n	1b2e <dir_register+0x6e>
    1b36:	e7e6      	b.n	1b06 <dir_register+0x46>
    1b38:	00001479 	.word	0x00001479
    1b3c:	00000de9 	.word	0x00000de9
    1b40:	00001735 	.word	0x00001735
    1b44:	00000ced 	.word	0x00000ced
    1b48:	00000cd9 	.word	0x00000cd9

00001b4c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1b4c:	2901      	cmp	r1, #1
    1b4e:	d930      	bls.n	1bb2 <remove_chain+0x66>
{
    1b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b54:	4604      	mov	r4, r0
    1b56:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1b58:	6983      	ldr	r3, [r0, #24]
    1b5a:	4299      	cmp	r1, r3
    1b5c:	d303      	bcc.n	1b66 <remove_chain+0x1a>
		res = FR_INT_ERR;
    1b5e:	2202      	movs	r2, #2
}
    1b60:	4610      	mov	r0, r2
    1b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1b66:	4f17      	ldr	r7, [pc, #92]	; (1bc4 <remove_chain+0x78>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1b68:	f04f 0900 	mov.w	r9, #0
    1b6c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1bc8 <remove_chain+0x7c>
    1b70:	e003      	b.n	1b7a <remove_chain+0x2e>
    1b72:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1b74:	69a3      	ldr	r3, [r4, #24]
    1b76:	42ab      	cmp	r3, r5
    1b78:	d9f2      	bls.n	1b60 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1b7a:	4631      	mov	r1, r6
    1b7c:	4620      	mov	r0, r4
    1b7e:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
    1b80:	4605      	mov	r5, r0
    1b82:	b1c8      	cbz	r0, 1bb8 <remove_chain+0x6c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1b84:	2801      	cmp	r0, #1
    1b86:	d019      	beq.n	1bbc <remove_chain+0x70>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1b88:	f1b0 3fff 	cmp.w	r0, #4294967295
    1b8c:	d018      	beq.n	1bc0 <remove_chain+0x74>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1b8e:	464a      	mov	r2, r9
    1b90:	4631      	mov	r1, r6
    1b92:	4620      	mov	r0, r4
    1b94:	47c0      	blx	r8
			if (res != FR_OK) break;
    1b96:	4602      	mov	r2, r0
    1b98:	2800      	cmp	r0, #0
    1b9a:	d1e1      	bne.n	1b60 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1b9c:	6923      	ldr	r3, [r4, #16]
    1b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1ba2:	d0e6      	beq.n	1b72 <remove_chain+0x26>
				fs->free_clust++;
    1ba4:	3301      	adds	r3, #1
    1ba6:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
    1ba8:	7963      	ldrb	r3, [r4, #5]
    1baa:	f043 0301 	orr.w	r3, r3, #1
    1bae:	7163      	strb	r3, [r4, #5]
    1bb0:	e7df      	b.n	1b72 <remove_chain+0x26>
		res = FR_INT_ERR;
    1bb2:	2202      	movs	r2, #2
}
    1bb4:	4610      	mov	r0, r2
    1bb6:	4770      	bx	lr
    1bb8:	2200      	movs	r2, #0
    1bba:	e7d1      	b.n	1b60 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1bbc:	2202      	movs	r2, #2
    1bbe:	e7cf      	b.n	1b60 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1bc0:	2201      	movs	r2, #1
    1bc2:	e7cd      	b.n	1b60 <remove_chain+0x14>
    1bc4:	00001395 	.word	0x00001395
    1bc8:	00001535 	.word	0x00001535

00001bcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1bcc:	b510      	push	{r4, lr}
    1bce:	b084      	sub	sp, #16
    1bd0:	9001      	str	r0, [sp, #4]
    1bd2:	9100      	str	r1, [sp, #0]
    1bd4:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1bd6:	a804      	add	r0, sp, #16
    1bd8:	f840 1d04 	str.w	r1, [r0, #-4]!

	vol = get_ldnumber(&rp);
    1bdc:	4b14      	ldr	r3, [pc, #80]	; (1c30 <f_mount+0x64>)
    1bde:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    1be0:	2800      	cmp	r0, #0
    1be2:	db1a      	blt.n	1c1a <f_mount+0x4e>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1be4:	4b13      	ldr	r3, [pc, #76]	; (1c34 <f_mount+0x68>)
    1be6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1bea:	685b      	ldr	r3, [r3, #4]

	if (cfs) {
    1bec:	b10b      	cbz	r3, 1bf2 <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1bee:	2200      	movs	r2, #0
    1bf0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    1bf2:	9b01      	ldr	r3, [sp, #4]
    1bf4:	b1b3      	cbz	r3, 1c24 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
    1bf6:	2200      	movs	r2, #0
    1bf8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1bfa:	9a01      	ldr	r2, [sp, #4]
    1bfc:	4b0d      	ldr	r3, [pc, #52]	; (1c34 <f_mount+0x68>)
    1bfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c02:	6042      	str	r2, [r0, #4]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1c04:	b162      	cbz	r2, 1c20 <f_mount+0x54>
    1c06:	2c01      	cmp	r4, #1
    1c08:	d001      	beq.n	1c0e <f_mount+0x42>
    1c0a:	2000      	movs	r0, #0
    1c0c:	e006      	b.n	1c1c <f_mount+0x50>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    1c0e:	2200      	movs	r2, #0
    1c10:	4669      	mov	r1, sp
    1c12:	a801      	add	r0, sp, #4
    1c14:	4b08      	ldr	r3, [pc, #32]	; (1c38 <f_mount+0x6c>)
    1c16:	4798      	blx	r3
	LEAVE_FF(fs, res);
    1c18:	e000      	b.n	1c1c <f_mount+0x50>
	if (vol < 0) return FR_INVALID_DRIVE;
    1c1a:	200b      	movs	r0, #11
}
    1c1c:	b004      	add	sp, #16
    1c1e:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1c20:	2000      	movs	r0, #0
    1c22:	e7fb      	b.n	1c1c <f_mount+0x50>
	FatFs[vol] = fs;					/* Register new fs object */
    1c24:	4b03      	ldr	r3, [pc, #12]	; (1c34 <f_mount+0x68>)
    1c26:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1c2a:	2000      	movs	r0, #0
    1c2c:	6058      	str	r0, [r3, #4]
    1c2e:	e7f5      	b.n	1c1c <f_mount+0x50>
    1c30:	00000d1d 	.word	0x00000d1d
    1c34:	20000530 	.word	0x20000530
    1c38:	00000ef5 	.word	0x00000ef5

00001c3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c40:	b08c      	sub	sp, #48	; 0x30
    1c42:	9101      	str	r1, [sp, #4]
	DEFINE_NAMEBUF;
#if !_FS_READONLY
	DWORD dw, cl;
#endif

	if (!fp) return FR_INVALID_OBJECT;
    1c44:	2800      	cmp	r0, #0
    1c46:	f000 80ac 	beq.w	1da2 <f_open+0x166>
    1c4a:	4604      	mov	r4, r0
    1c4c:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
    1c4e:	2300      	movs	r3, #0
    1c50:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1c52:	f002 021e 	and.w	r2, r2, #30
    1c56:	a901      	add	r1, sp, #4
    1c58:	a805      	add	r0, sp, #20
    1c5a:	4b5c      	ldr	r3, [pc, #368]	; (1dcc <f_open+0x190>)
    1c5c:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1c5e:	4606      	mov	r6, r0
    1c60:	2800      	cmp	r0, #0
    1c62:	f040 809f 	bne.w	1da4 <f_open+0x168>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1c66:	f005 081f 	and.w	r8, r5, #31
		INIT_BUF(dj);
    1c6a:	ab02      	add	r3, sp, #8
    1c6c:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
    1c6e:	9901      	ldr	r1, [sp, #4]
    1c70:	a805      	add	r0, sp, #20
    1c72:	4b57      	ldr	r3, [pc, #348]	; (1dd0 <f_open+0x194>)
    1c74:	4798      	blx	r3
		dir = dj.dir;
    1c76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1c78:	4603      	mov	r3, r0
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d139      	bne.n	1cf2 <f_open+0xb6>
			if (!dir)	/* Default directory itself */
    1c7e:	2f00      	cmp	r7, #0
    1c80:	f000 8094 	beq.w	1dac <f_open+0x170>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1c84:	f015 0f1c 	tst.w	r5, #28
    1c88:	d148      	bne.n	1d1c <f_open+0xe0>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    1c8a:	7afb      	ldrb	r3, [r7, #11]
    1c8c:	f013 0f10 	tst.w	r3, #16
    1c90:	f040 8099 	bne.w	1dc6 <f_open+0x18a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1c94:	f015 0f02 	tst.w	r5, #2
    1c98:	d003      	beq.n	1ca2 <f_open+0x66>
    1c9a:	f013 0f01 	tst.w	r3, #1
    1c9e:	f040 8090 	bne.w	1dc2 <f_open+0x186>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    1ca2:	f015 0f08 	tst.w	r5, #8
    1ca6:	d001      	beq.n	1cac <f_open+0x70>
				mode |= FA__WRITTEN;
    1ca8:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1cac:	9b05      	ldr	r3, [sp, #20]
    1cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1cb0:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
    1cb2:	6227      	str	r7, [r4, #32]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1cb4:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
    1cb8:	f04f 0800 	mov.w	r8, #0
    1cbc:	f884 8007 	strb.w	r8, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    1cc0:	9d05      	ldr	r5, [sp, #20]
    1cc2:	4639      	mov	r1, r7
    1cc4:	4628      	mov	r0, r5
    1cc6:	4b43      	ldr	r3, [pc, #268]	; (1dd4 <f_open+0x198>)
    1cc8:	4798      	blx	r3
    1cca:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    1ccc:	7ffa      	ldrb	r2, [r7, #31]
    1cce:	7fbb      	ldrb	r3, [r7, #30]
    1cd0:	041b      	lsls	r3, r3, #16
    1cd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1cd6:	7f3a      	ldrb	r2, [r7, #28]
    1cd8:	4313      	orrs	r3, r2
    1cda:	7f7a      	ldrb	r2, [r7, #29]
    1cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ce0:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
    1ce2:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->dsect = 0;
    1ce6:	f8c4 8018 	str.w	r8, [r4, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    1cea:	6025      	str	r5, [r4, #0]
			fp->id = fp->fs->id;
    1cec:	88eb      	ldrh	r3, [r5, #6]
    1cee:	80a3      	strh	r3, [r4, #4]
    1cf0:	e058      	b.n	1da4 <f_open+0x168>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1cf2:	f015 0f1c 	tst.w	r5, #28
    1cf6:	d004      	beq.n	1d02 <f_open+0xc6>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1cf8:	2804      	cmp	r0, #4
    1cfa:	d006      	beq.n	1d0a <f_open+0xce>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1cfc:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1d00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		if (res == FR_OK) {
    1d02:	2b00      	cmp	r3, #0
    1d04:	d0d6      	beq.n	1cb4 <f_open+0x78>
    1d06:	461e      	mov	r6, r3
    1d08:	e04c      	b.n	1da4 <f_open+0x168>
					res = dir_register(&dj);
    1d0a:	a805      	add	r0, sp, #20
    1d0c:	4b32      	ldr	r3, [pc, #200]	; (1dd8 <f_open+0x19c>)
    1d0e:	4798      	blx	r3
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1d10:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1d14:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1d16:	b140      	cbz	r0, 1d2a <f_open+0xee>
					res = dir_register(&dj);
    1d18:	4606      	mov	r6, r0
    1d1a:	e043      	b.n	1da4 <f_open+0x168>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1d1c:	7afb      	ldrb	r3, [r7, #11]
    1d1e:	f013 0f11 	tst.w	r3, #17
    1d22:	d14a      	bne.n	1dba <f_open+0x17e>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1d24:	f015 0f04 	tst.w	r5, #4
    1d28:	d149      	bne.n	1dbe <f_open+0x182>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1d2a:	f018 0f08 	tst.w	r8, #8
    1d2e:	d0bd      	beq.n	1cac <f_open+0x70>
				dw = GET_FATTIME();
    1d30:	4b2a      	ldr	r3, [pc, #168]	; (1ddc <f_open+0x1a0>)
    1d32:	4798      	blx	r3
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
    1d34:	b2c1      	uxtb	r1, r0
    1d36:	73b9      	strb	r1, [r7, #14]
    1d38:	f3c0 2207 	ubfx	r2, r0, #8, #8
    1d3c:	73fa      	strb	r2, [r7, #15]
    1d3e:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1d42:	743b      	strb	r3, [r7, #16]
    1d44:	0e00      	lsrs	r0, r0, #24
    1d46:	7478      	strb	r0, [r7, #17]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
    1d48:	75b9      	strb	r1, [r7, #22]
    1d4a:	75fa      	strb	r2, [r7, #23]
    1d4c:	763b      	strb	r3, [r7, #24]
    1d4e:	7678      	strb	r0, [r7, #25]
				dir[DIR_Attr] = 0;				/* Reset attribute */
    1d50:	2500      	movs	r5, #0
    1d52:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
    1d54:	773d      	strb	r5, [r7, #28]
    1d56:	777d      	strb	r5, [r7, #29]
    1d58:	77bd      	strb	r5, [r7, #30]
    1d5a:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get cluster chain */
    1d5c:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1d60:	4639      	mov	r1, r7
    1d62:	4648      	mov	r0, r9
    1d64:	4b1b      	ldr	r3, [pc, #108]	; (1dd4 <f_open+0x198>)
    1d66:	4798      	blx	r3
	ST_WORD(dir + DIR_FstClusLO, cl);
    1d68:	76bd      	strb	r5, [r7, #26]
    1d6a:	76fd      	strb	r5, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    1d6c:	753d      	strb	r5, [r7, #20]
    1d6e:	757d      	strb	r5, [r7, #21]
				dj.fs->wflag = 1;
    1d70:	2301      	movs	r3, #1
    1d72:	f889 3004 	strb.w	r3, [r9, #4]
				if (cl) {						/* Remove the cluster chain if exist */
    1d76:	4605      	mov	r5, r0
    1d78:	2800      	cmp	r0, #0
    1d7a:	d095      	beq.n	1ca8 <f_open+0x6c>
					dw = dj.fs->winsect;
    1d7c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
					res = remove_chain(dj.fs, cl);
    1d80:	4601      	mov	r1, r0
    1d82:	4648      	mov	r0, r9
    1d84:	4b16      	ldr	r3, [pc, #88]	; (1de0 <f_open+0x1a4>)
    1d86:	4798      	blx	r3
					if (res == FR_OK) {
    1d88:	b108      	cbz	r0, 1d8e <f_open+0x152>
					res = remove_chain(dj.fs, cl);
    1d8a:	4606      	mov	r6, r0
    1d8c:	e00a      	b.n	1da4 <f_open+0x168>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1d8e:	9805      	ldr	r0, [sp, #20]
    1d90:	3d01      	subs	r5, #1
    1d92:	60c5      	str	r5, [r0, #12]
						res = move_window(dj.fs, dw);
    1d94:	4651      	mov	r1, sl
    1d96:	4b13      	ldr	r3, [pc, #76]	; (1de4 <f_open+0x1a8>)
    1d98:	4798      	blx	r3
		if (res == FR_OK) {
    1d9a:	2800      	cmp	r0, #0
    1d9c:	d084      	beq.n	1ca8 <f_open+0x6c>
						res = move_window(dj.fs, dw);
    1d9e:	4606      	mov	r6, r0
    1da0:	e000      	b.n	1da4 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
    1da2:	2609      	movs	r6, #9
		}
	}

	LEAVE_FF(dj.fs, res);
}
    1da4:	4630      	mov	r0, r6
    1da6:	b00c      	add	sp, #48	; 0x30
    1da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1dac:	f015 0f1c 	tst.w	r5, #28
    1db0:	d101      	bne.n	1db6 <f_open+0x17a>
				res = FR_INVALID_NAME;
    1db2:	2306      	movs	r3, #6
    1db4:	e7a5      	b.n	1d02 <f_open+0xc6>
    1db6:	2306      	movs	r3, #6
    1db8:	e7a0      	b.n	1cfc <f_open+0xc0>
					res = FR_DENIED;
    1dba:	2607      	movs	r6, #7
    1dbc:	e7f2      	b.n	1da4 <f_open+0x168>
						res = FR_EXIST;
    1dbe:	2608      	movs	r6, #8
    1dc0:	e7f0      	b.n	1da4 <f_open+0x168>
						res = FR_DENIED;
    1dc2:	2607      	movs	r6, #7
    1dc4:	e7ee      	b.n	1da4 <f_open+0x168>
					res = FR_NO_FILE;
    1dc6:	2604      	movs	r6, #4
    1dc8:	e7ec      	b.n	1da4 <f_open+0x168>
    1dca:	bf00      	nop
    1dcc:	00000ef5 	.word	0x00000ef5
    1dd0:	00001865 	.word	0x00001865
    1dd4:	00000cfb 	.word	0x00000cfb
    1dd8:	00001ac1 	.word	0x00001ac1
    1ddc:	00000c8d 	.word	0x00000c8d
    1de0:	00001b4d 	.word	0x00001b4d
    1de4:	00000de9 	.word	0x00000de9

00001de8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dec:	b083      	sub	sp, #12
    1dee:	4604      	mov	r4, r0
    1df0:	4688      	mov	r8, r1
    1df2:	4616      	mov	r6, r2
    1df4:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;

	*bw = 0;	/* Clear write byte counter */
    1df6:	2300      	movs	r3, #0
    1df8:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp);						/* Check validity */
    1dfc:	4b6a      	ldr	r3, [pc, #424]	; (1fa8 <f_write+0x1c0>)
    1dfe:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1e00:	9001      	str	r0, [sp, #4]
    1e02:	b948      	cbnz	r0, 1e18 <f_write+0x30>
	if (fp->err)							/* Check error */
    1e04:	79e3      	ldrb	r3, [r4, #7]
    1e06:	2b00      	cmp	r3, #0
    1e08:	f040 80cc 	bne.w	1fa4 <f_write+0x1bc>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1e0c:	79a3      	ldrb	r3, [r4, #6]
    1e0e:	f013 0f02 	tst.w	r3, #2
    1e12:	d105      	bne.n	1e20 <f_write+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
    1e14:	2307      	movs	r3, #7
    1e16:	9301      	str	r3, [sp, #4]

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    1e18:	9801      	ldr	r0, [sp, #4]
    1e1a:	b003      	add	sp, #12
    1e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1e20:	68a3      	ldr	r3, [r4, #8]
    1e22:	42f3      	cmn	r3, r6
    1e24:	d20d      	bcs.n	1e42 <f_write+0x5a>
	for ( ;  btw;							/* Repeat until all data written */
    1e26:	2e00      	cmp	r6, #0
    1e28:	d169      	bne.n	1efe <f_write+0x116>
    1e2a:	e00a      	b.n	1e42 <f_write+0x5a>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1e2c:	2100      	movs	r1, #0
    1e2e:	4b5f      	ldr	r3, [pc, #380]	; (1fac <f_write+0x1c4>)
    1e30:	4798      	blx	r3
    1e32:	4603      	mov	r3, r0
    1e34:	e003      	b.n	1e3e <f_write+0x56>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1e36:	6961      	ldr	r1, [r4, #20]
    1e38:	4b5c      	ldr	r3, [pc, #368]	; (1fac <f_write+0x1c4>)
    1e3a:	4798      	blx	r3
    1e3c:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d16f      	bne.n	1f22 <f_write+0x13a>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    1e42:	68a3      	ldr	r3, [r4, #8]
    1e44:	68e2      	ldr	r2, [r4, #12]
    1e46:	4293      	cmp	r3, r2
    1e48:	bf88      	it	hi
    1e4a:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    1e4c:	79a3      	ldrb	r3, [r4, #6]
    1e4e:	f043 0320 	orr.w	r3, r3, #32
    1e52:	71a3      	strb	r3, [r4, #6]
	LEAVE_FF(fp->fs, FR_OK);
    1e54:	e7e0      	b.n	1e18 <f_write+0x30>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1e56:	2302      	movs	r3, #2
    1e58:	71e3      	strb	r3, [r4, #7]
    1e5a:	9301      	str	r3, [sp, #4]
    1e5c:	e7dc      	b.n	1e18 <f_write+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1e5e:	2301      	movs	r3, #1
    1e60:	71e3      	strb	r3, [r4, #7]
    1e62:	9301      	str	r3, [sp, #4]
    1e64:	e7d8      	b.n	1e18 <f_write+0x30>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    1e66:	6820      	ldr	r0, [r4, #0]
    1e68:	2301      	movs	r3, #1
    1e6a:	69a2      	ldr	r2, [r4, #24]
    1e6c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    1e70:	7840      	ldrb	r0, [r0, #1]
    1e72:	4d4f      	ldr	r5, [pc, #316]	; (1fb0 <f_write+0x1c8>)
    1e74:	47a8      	blx	r5
    1e76:	b920      	cbnz	r0, 1e82 <f_write+0x9a>
				fp->flag &= ~FA__DIRTY;
    1e78:	79a3      	ldrb	r3, [r4, #6]
    1e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1e7e:	71a3      	strb	r3, [r4, #6]
    1e80:	e05c      	b.n	1f3c <f_write+0x154>
					ABORT(fp->fs, FR_DISK_ERR);
    1e82:	2301      	movs	r3, #1
    1e84:	71e3      	strb	r3, [r4, #7]
    1e86:	9301      	str	r3, [sp, #4]
    1e88:	e7c6      	b.n	1e18 <f_write+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1e8a:	2302      	movs	r3, #2
    1e8c:	71e3      	strb	r3, [r4, #7]
    1e8e:	9301      	str	r3, [sp, #4]
    1e90:	e7c2      	b.n	1e18 <f_write+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    1e92:	2301      	movs	r3, #1
    1e94:	71e3      	strb	r3, [r4, #7]
    1e96:	9301      	str	r3, [sp, #4]
    1e98:	e7be      	b.n	1e18 <f_write+0x30>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    1e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
    1e9e:	eb08 2141 	add.w	r1, r8, r1, lsl #9
    1ea2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    1ea6:	4b43      	ldr	r3, [pc, #268]	; (1fb4 <f_write+0x1cc>)
    1ea8:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
    1eaa:	79a3      	ldrb	r3, [r4, #6]
    1eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1eb0:	71a3      	strb	r3, [r4, #6]
    1eb2:	e066      	b.n	1f82 <f_write+0x19a>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    1eb4:	69a3      	ldr	r3, [r4, #24]
    1eb6:	429d      	cmp	r5, r3
    1eb8:	d003      	beq.n	1ec2 <f_write+0xda>
				if (fp->fptr < fp->fsize &&
    1eba:	68a2      	ldr	r2, [r4, #8]
    1ebc:	68e3      	ldr	r3, [r4, #12]
    1ebe:	429a      	cmp	r2, r3
    1ec0:	d362      	bcc.n	1f88 <f_write+0x1a0>
			fp->dsect = sect;
    1ec2:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    1ec4:	68a0      	ldr	r0, [r4, #8]
    1ec6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    1eca:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
    1ece:	42b5      	cmp	r5, r6
    1ed0:	bf28      	it	cs
    1ed2:	4635      	movcs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    1ed4:	3024      	adds	r0, #36	; 0x24
    1ed6:	462a      	mov	r2, r5
    1ed8:	4641      	mov	r1, r8
    1eda:	4420      	add	r0, r4
    1edc:	4b35      	ldr	r3, [pc, #212]	; (1fb4 <f_write+0x1cc>)
    1ede:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
    1ee0:	79a3      	ldrb	r3, [r4, #6]
    1ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ee6:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    1ee8:	44a8      	add	r8, r5
    1eea:	68a3      	ldr	r3, [r4, #8]
    1eec:	442b      	add	r3, r5
    1eee:	60a3      	str	r3, [r4, #8]
    1ef0:	f8d9 3000 	ldr.w	r3, [r9]
    1ef4:	442b      	add	r3, r5
    1ef6:	f8c9 3000 	str.w	r3, [r9]
	for ( ;  btw;							/* Repeat until all data written */
    1efa:	1b76      	subs	r6, r6, r5
    1efc:	d0a1      	beq.n	1e42 <f_write+0x5a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    1efe:	68a2      	ldr	r2, [r4, #8]
    1f00:	f3c2 0308 	ubfx	r3, r2, #0, #9
    1f04:	2b00      	cmp	r3, #0
    1f06:	d1dd      	bne.n	1ec4 <f_write+0xdc>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1f08:	6820      	ldr	r0, [r4, #0]
    1f0a:	7883      	ldrb	r3, [r0, #2]
    1f0c:	3b01      	subs	r3, #1
    1f0e:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
    1f12:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    1f16:	d10d      	bne.n	1f34 <f_write+0x14c>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1f18:	2a00      	cmp	r2, #0
    1f1a:	d18c      	bne.n	1e36 <f_write+0x4e>
					clst = fp->sclust;		/* Follow from the origin */
    1f1c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d084      	beq.n	1e2c <f_write+0x44>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1f22:	2b01      	cmp	r3, #1
    1f24:	d097      	beq.n	1e56 <f_write+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1f26:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f2a:	d098      	beq.n	1e5e <f_write+0x76>
				fp->clust = clst;			/* Update current cluster */
    1f2c:	6163      	str	r3, [r4, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    1f2e:	6922      	ldr	r2, [r4, #16]
    1f30:	b902      	cbnz	r2, 1f34 <f_write+0x14c>
    1f32:	6123      	str	r3, [r4, #16]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    1f34:	79a3      	ldrb	r3, [r4, #6]
    1f36:	f013 0f40 	tst.w	r3, #64	; 0x40
    1f3a:	d194      	bne.n	1e66 <f_write+0x7e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1f3c:	f8d4 a000 	ldr.w	sl, [r4]
    1f40:	6961      	ldr	r1, [r4, #20]
    1f42:	4650      	mov	r0, sl
    1f44:	4b1c      	ldr	r3, [pc, #112]	; (1fb8 <f_write+0x1d0>)
    1f46:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1f48:	4605      	mov	r5, r0
    1f4a:	2800      	cmp	r0, #0
    1f4c:	d09d      	beq.n	1e8a <f_write+0xa2>
			sect += csect;
    1f4e:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
    1f50:	ea5f 2b56 	movs.w	fp, r6, lsr #9
    1f54:	d0ae      	beq.n	1eb4 <f_write+0xcc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1f56:	f89a 3002 	ldrb.w	r3, [sl, #2]
    1f5a:	eb07 020b 	add.w	r2, r7, fp
    1f5e:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    1f60:	bf88      	it	hi
    1f62:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    1f66:	fa5f f38b 	uxtb.w	r3, fp
    1f6a:	462a      	mov	r2, r5
    1f6c:	4641      	mov	r1, r8
    1f6e:	f89a 0001 	ldrb.w	r0, [sl, #1]
    1f72:	4f0f      	ldr	r7, [pc, #60]	; (1fb0 <f_write+0x1c8>)
    1f74:	47b8      	blx	r7
    1f76:	2800      	cmp	r0, #0
    1f78:	d18b      	bne.n	1e92 <f_write+0xaa>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    1f7a:	69a1      	ldr	r1, [r4, #24]
    1f7c:	1b49      	subs	r1, r1, r5
    1f7e:	458b      	cmp	fp, r1
    1f80:	d88b      	bhi.n	1e9a <f_write+0xb2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    1f82:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
    1f86:	e7af      	b.n	1ee8 <f_write+0x100>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    1f88:	2301      	movs	r3, #1
    1f8a:	462a      	mov	r2, r5
    1f8c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    1f90:	f89a 0001 	ldrb.w	r0, [sl, #1]
    1f94:	4f09      	ldr	r7, [pc, #36]	; (1fbc <f_write+0x1d4>)
    1f96:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
    1f98:	2800      	cmp	r0, #0
    1f9a:	d092      	beq.n	1ec2 <f_write+0xda>
						ABORT(fp->fs, FR_DISK_ERR);
    1f9c:	2301      	movs	r3, #1
    1f9e:	71e3      	strb	r3, [r4, #7]
    1fa0:	9301      	str	r3, [sp, #4]
    1fa2:	e739      	b.n	1e18 <f_write+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	e737      	b.n	1e18 <f_write+0x30>
    1fa8:	00000eb9 	.word	0x00000eb9
    1fac:	00001669 	.word	0x00001669
    1fb0:	00000485 	.word	0x00000485
    1fb4:	00000cd9 	.word	0x00000cd9
    1fb8:	0000137d 	.word	0x0000137d
    1fbc:	00000405 	.word	0x00000405

00001fc0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    1fc0:	b538      	push	{r3, r4, r5, lr}
    1fc2:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;

	res = validate(fp);					/* Check validity of the object */
    1fc4:	4b29      	ldr	r3, [pc, #164]	; (206c <f_sync+0xac>)
    1fc6:	4798      	blx	r3
	if (res == FR_OK) {
    1fc8:	4603      	mov	r3, r0
    1fca:	b9d0      	cbnz	r0, 2002 <f_sync+0x42>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    1fcc:	79a2      	ldrb	r2, [r4, #6]
    1fce:	f012 0f20 	tst.w	r2, #32
    1fd2:	d016      	beq.n	2002 <f_sync+0x42>
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {	/* Write-back cached data if needed */
    1fd4:	f012 0f40 	tst.w	r2, #64	; 0x40
    1fd8:	d00d      	beq.n	1ff6 <f_sync+0x36>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    1fda:	6820      	ldr	r0, [r4, #0]
    1fdc:	2301      	movs	r3, #1
    1fde:	69a2      	ldr	r2, [r4, #24]
    1fe0:	f104 0124 	add.w	r1, r4, #36	; 0x24
    1fe4:	7840      	ldrb	r0, [r0, #1]
    1fe6:	4d22      	ldr	r5, [pc, #136]	; (2070 <f_sync+0xb0>)
    1fe8:	47a8      	blx	r5
    1fea:	2800      	cmp	r0, #0
    1fec:	d13b      	bne.n	2066 <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    1fee:	79a3      	ldrb	r3, [r4, #6]
    1ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1ff4:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    1ff6:	69e1      	ldr	r1, [r4, #28]
    1ff8:	6820      	ldr	r0, [r4, #0]
    1ffa:	4b1e      	ldr	r3, [pc, #120]	; (2074 <f_sync+0xb4>)
    1ffc:	4798      	blx	r3
			if (res == FR_OK) {
    1ffe:	4603      	mov	r3, r0
    2000:	b108      	cbz	r0, 2006 <f_sync+0x46>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2002:	4618      	mov	r0, r3
    2004:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
    2006:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2008:	7aeb      	ldrb	r3, [r5, #11]
    200a:	f043 0320 	orr.w	r3, r3, #32
    200e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    2010:	68e3      	ldr	r3, [r4, #12]
    2012:	772b      	strb	r3, [r5, #28]
    2014:	89a3      	ldrh	r3, [r4, #12]
    2016:	0a1b      	lsrs	r3, r3, #8
    2018:	776b      	strb	r3, [r5, #29]
    201a:	89e3      	ldrh	r3, [r4, #14]
    201c:	77ab      	strb	r3, [r5, #30]
    201e:	7be3      	ldrb	r3, [r4, #15]
    2020:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2022:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusLO, cl);
    2024:	76ab      	strb	r3, [r5, #26]
    2026:	f3c3 2207 	ubfx	r2, r3, #8, #8
    202a:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    202c:	0c1b      	lsrs	r3, r3, #16
    202e:	752b      	strb	r3, [r5, #20]
    2030:	0a1b      	lsrs	r3, r3, #8
    2032:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update modified time */
    2034:	4b10      	ldr	r3, [pc, #64]	; (2078 <f_sync+0xb8>)
    2036:	4798      	blx	r3
				ST_DWORD(dir + DIR_WrtTime, tm);
    2038:	75a8      	strb	r0, [r5, #22]
    203a:	f3c0 2307 	ubfx	r3, r0, #8, #8
    203e:	75eb      	strb	r3, [r5, #23]
    2040:	0c03      	lsrs	r3, r0, #16
    2042:	762b      	strb	r3, [r5, #24]
    2044:	0e00      	lsrs	r0, r0, #24
    2046:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
    2048:	2300      	movs	r3, #0
    204a:	74ab      	strb	r3, [r5, #18]
    204c:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
    204e:	79a3      	ldrb	r3, [r4, #6]
    2050:	f023 0320 	bic.w	r3, r3, #32
    2054:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    2056:	6823      	ldr	r3, [r4, #0]
    2058:	2201      	movs	r2, #1
    205a:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
    205c:	6820      	ldr	r0, [r4, #0]
    205e:	4b07      	ldr	r3, [pc, #28]	; (207c <f_sync+0xbc>)
    2060:	4798      	blx	r3
    2062:	4603      	mov	r3, r0
    2064:	e7cd      	b.n	2002 <f_sync+0x42>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    2066:	2301      	movs	r3, #1
    2068:	e7cb      	b.n	2002 <f_sync+0x42>
    206a:	bf00      	nop
    206c:	00000eb9 	.word	0x00000eb9
    2070:	00000485 	.word	0x00000485
    2074:	00000de9 	.word	0x00000de9
    2078:	00000c8d 	.word	0x00000c8d
    207c:	000012b1 	.word	0x000012b1

00002080 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2080:	b510      	push	{r4, lr}
    2082:	4604      	mov	r4, r0
	FRESULT res;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    2084:	4b07      	ldr	r3, [pc, #28]	; (20a4 <f_close+0x24>)
    2086:	4798      	blx	r3
	if (res == FR_OK)
    2088:	4603      	mov	r3, r0
    208a:	b108      	cbz	r0, 2090 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    208c:	4618      	mov	r0, r3
    208e:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
    2090:	4620      	mov	r0, r4
    2092:	4b05      	ldr	r3, [pc, #20]	; (20a8 <f_close+0x28>)
    2094:	4798      	blx	r3
		if (res == FR_OK) {
    2096:	4603      	mov	r3, r0
    2098:	2800      	cmp	r0, #0
    209a:	d1f7      	bne.n	208c <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
    209c:	2200      	movs	r2, #0
    209e:	6022      	str	r2, [r4, #0]
    20a0:	e7f4      	b.n	208c <f_close+0xc>
    20a2:	bf00      	nop
    20a4:	00001fc1 	.word	0x00001fc1
    20a8:	00000eb9 	.word	0x00000eb9

000020ac <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    20ac:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    20b0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    20b2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    20b4:	f3bf 8f5f 	dmb	sy
    20b8:	4770      	bx	lr

000020ba <atomic_leave_critical>:
    20ba:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    20be:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    20c0:	f383 8810 	msr	PRIMASK, r3
    20c4:	4770      	bx	lr
	...

000020c8 <get_secs_in_month>:
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
	uint32_t sec_in_month = 0;

	if (leap_year(year)) {
    20c8:	f010 0f03 	tst.w	r0, #3
    20cc:	d110      	bne.n	20f0 <get_secs_in_month+0x28>
		switch (month) {
    20ce:	3901      	subs	r1, #1
    20d0:	290b      	cmp	r1, #11
    20d2:	d81e      	bhi.n	2112 <get_secs_in_month+0x4a>
    20d4:	e8df f001 	tbb	[pc, r1]
    20d8:	0a060806 	.word	0x0a060806
    20dc:	06060a06 	.word	0x06060a06
    20e0:	060a060a 	.word	0x060a060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    20e4:	480d      	ldr	r0, [pc, #52]	; (211c <get_secs_in_month+0x54>)
    20e6:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    20e8:	480d      	ldr	r0, [pc, #52]	; (2120 <get_secs_in_month+0x58>)
			break;
    20ea:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    20ec:	480d      	ldr	r0, [pc, #52]	; (2124 <get_secs_in_month+0x5c>)
			break;
    20ee:	4770      	bx	lr
		default:
			break;
		}
	} else {
		switch (month) {
    20f0:	3901      	subs	r1, #1
    20f2:	290b      	cmp	r1, #11
    20f4:	d80f      	bhi.n	2116 <get_secs_in_month+0x4e>
    20f6:	e8df f001 	tbb	[pc, r1]
    20fa:	0806      	.short	0x0806
    20fc:	0a060a06 	.word	0x0a060a06
    2100:	060a0606 	.word	0x060a0606
    2104:	060a      	.short	0x060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2106:	4805      	ldr	r0, [pc, #20]	; (211c <get_secs_in_month+0x54>)
    2108:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    210a:	4807      	ldr	r0, [pc, #28]	; (2128 <get_secs_in_month+0x60>)
			break;
    210c:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    210e:	4805      	ldr	r0, [pc, #20]	; (2124 <get_secs_in_month+0x5c>)
			break;
    2110:	4770      	bx	lr
	uint32_t sec_in_month = 0;
    2112:	2000      	movs	r0, #0
    2114:	4770      	bx	lr
    2116:	2000      	movs	r0, #0
			break;
		}
	}

	return sec_in_month;
}
    2118:	4770      	bx	lr
    211a:	bf00      	nop
    211c:	0028de80 	.word	0x0028de80
    2120:	00263b80 	.word	0x00263b80
    2124:	00278d00 	.word	0x00278d00
    2128:	0024ea00 	.word	0x0024ea00

0000212c <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    212c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2130:	460c      	mov	r4, r1
    2132:	4690      	mov	r8, r2
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2134:	6986      	ldr	r6, [r0, #24]

	tmp = ts;

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2136:	4927      	ldr	r1, [pc, #156]	; (21d4 <convert_timestamp_to_datetime+0xa8>)
    2138:	4a27      	ldr	r2, [pc, #156]	; (21d8 <convert_timestamp_to_datetime+0xac>)
    213a:	b2b7      	uxth	r7, r6
    213c:	f007 0303 	and.w	r3, r7, #3
    2140:	2b00      	cmp	r3, #0
    2142:	bf0c      	ite	eq
    2144:	460b      	moveq	r3, r1
    2146:	4613      	movne	r3, r2

		if (tmp >= sec_in_year) {
    2148:	429c      	cmp	r4, r3
    214a:	d302      	bcc.n	2152 <convert_timestamp_to_datetime+0x26>
			tmp -= sec_in_year;
    214c:	1ae4      	subs	r4, r4, r3
			tmp_year++;
    214e:	3601      	adds	r6, #1
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2150:	e7f3      	b.n	213a <convert_timestamp_to_datetime+0xe>
    2152:	2501      	movs	r5, #1
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2154:	f8df 9088 	ldr.w	r9, [pc, #136]	; 21e0 <convert_timestamp_to_datetime+0xb4>
    2158:	4629      	mov	r1, r5
    215a:	4630      	mov	r0, r6
    215c:	47c8      	blx	r9

		if (tmp >= sec_in_month) {
    215e:	4284      	cmp	r4, r0
    2160:	d303      	bcc.n	216a <convert_timestamp_to_datetime+0x3e>
			tmp -= sec_in_month;
    2162:	1a24      	subs	r4, r4, r0
			tmp_month++;
    2164:	3501      	adds	r5, #1
    2166:	b2ed      	uxtb	r5, r5
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2168:	e7f6      	b.n	2158 <convert_timestamp_to_datetime+0x2c>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    216a:	4b1c      	ldr	r3, [pc, #112]	; (21dc <convert_timestamp_to_datetime+0xb0>)
    216c:	429c      	cmp	r4, r3
    216e:	bf98      	it	ls
    2170:	2101      	movls	r1, #1
    2172:	d909      	bls.n	2188 <convert_timestamp_to_datetime+0x5c>
    2174:	2101      	movs	r1, #1
    2176:	4b19      	ldr	r3, [pc, #100]	; (21dc <convert_timestamp_to_datetime+0xb0>)
			tmp -= SECS_IN_DAY;
    2178:	f5a4 34a8 	sub.w	r4, r4, #86016	; 0x15000
    217c:	f5a4 74c0 	sub.w	r4, r4, #384	; 0x180
			tmp_day++;
    2180:	3101      	adds	r1, #1
    2182:	b2c9      	uxtb	r1, r1
		if (tmp >= SECS_IN_DAY) {
    2184:	429c      	cmp	r4, r3
    2186:	d8f7      	bhi.n	2178 <convert_timestamp_to_datetime+0x4c>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2188:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    218c:	bf38      	it	cc
    218e:	2200      	movcc	r2, #0
    2190:	d307      	bcc.n	21a2 <convert_timestamp_to_datetime+0x76>
    2192:	2200      	movs	r2, #0
			tmp -= SECS_IN_HOUR;
    2194:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
			tmp_hour++;
    2198:	3201      	adds	r2, #1
    219a:	b2d2      	uxtb	r2, r2
		if (tmp >= SECS_IN_HOUR) {
    219c:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    21a0:	d2f8      	bcs.n	2194 <convert_timestamp_to_datetime+0x68>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    21a2:	2c3b      	cmp	r4, #59	; 0x3b
    21a4:	bf98      	it	ls
    21a6:	2300      	movls	r3, #0
    21a8:	d905      	bls.n	21b6 <convert_timestamp_to_datetime+0x8a>
    21aa:	2300      	movs	r3, #0
			tmp -= SECS_IN_MINUTE;
    21ac:	3c3c      	subs	r4, #60	; 0x3c
			tmp_minutes++;
    21ae:	3301      	adds	r3, #1
    21b0:	b2db      	uxtb	r3, r3
		if (tmp >= SECS_IN_MINUTE) {
    21b2:	2c3b      	cmp	r4, #59	; 0x3b
    21b4:	d8fa      	bhi.n	21ac <convert_timestamp_to_datetime+0x80>
		} else {
			break;
		}
	}

	dt->date.year  = tmp_year;
    21b6:	f8a8 7006 	strh.w	r7, [r8, #6]
	dt->date.month = tmp_month;
    21ba:	f888 5005 	strb.w	r5, [r8, #5]
	dt->date.day   = tmp_day;
    21be:	f888 1004 	strb.w	r1, [r8, #4]
	dt->time.hour  = tmp_hour;
    21c2:	f888 2002 	strb.w	r2, [r8, #2]
	dt->time.min   = tmp_minutes;
    21c6:	f888 3001 	strb.w	r3, [r8, #1]
	dt->time.sec   = tmp;
    21ca:	f888 4000 	strb.w	r4, [r8]

	return ERR_NONE;
}
    21ce:	2000      	movs	r0, #0
    21d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21d4:	01e28500 	.word	0x01e28500
    21d8:	01e13380 	.word	0x01e13380
    21dc:	0001517f 	.word	0x0001517f
    21e0:	000020c9 	.word	0x000020c9

000021e4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    21e4:	b538      	push	{r3, r4, r5, lr}
    21e6:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    21e8:	4604      	mov	r4, r0
    21ea:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    21ee:	490b      	ldr	r1, [pc, #44]	; (221c <calendar_init+0x38>)
    21f0:	3000      	adds	r0, #0
    21f2:	bf18      	it	ne
    21f4:	2001      	movne	r0, #1
    21f6:	4b0a      	ldr	r3, [pc, #40]	; (2220 <calendar_init+0x3c>)
    21f8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    21fa:	6823      	ldr	r3, [r4, #0]
    21fc:	42ab      	cmp	r3, r5
    21fe:	d008      	beq.n	2212 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    2200:	b94b      	cbnz	r3, 2216 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    2202:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    2204:	4620      	mov	r0, r4
    2206:	4b07      	ldr	r3, [pc, #28]	; (2224 <calendar_init+0x40>)
    2208:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    220a:	f240 73b2 	movw	r3, #1970	; 0x7b2
    220e:	61a3      	str	r3, [r4, #24]

	return ret;
    2210:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
    2212:	2000      	movs	r0, #0
    2214:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
    2216:	f06f 0011 	mvn.w	r0, #17
}
    221a:	bd38      	pop	{r3, r4, r5, pc}
    221c:	00008700 	.word	0x00008700
    2220:	00002715 	.word	0x00002715
    2224:	00002865 	.word	0x00002865

00002228 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    2228:	b538      	push	{r3, r4, r5, lr}
    222a:	460d      	mov	r5, r1
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    222c:	4604      	mov	r4, r0
    222e:	f240 223b 	movw	r2, #571	; 0x23b
    2232:	4908      	ldr	r1, [pc, #32]	; (2254 <calendar_get_date_time+0x2c>)
    2234:	3000      	adds	r0, #0
    2236:	bf18      	it	ne
    2238:	2001      	movne	r0, #1
    223a:	4b07      	ldr	r3, [pc, #28]	; (2258 <calendar_get_date_time+0x30>)
    223c:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    223e:	4620      	mov	r0, r4
    2240:	4b06      	ldr	r3, [pc, #24]	; (225c <calendar_get_date_time+0x34>)
    2242:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    2244:	462a      	mov	r2, r5
    2246:	4601      	mov	r1, r0
    2248:	4620      	mov	r0, r4
    224a:	4b05      	ldr	r3, [pc, #20]	; (2260 <calendar_get_date_time+0x38>)
    224c:	4798      	blx	r3

	return ERR_NONE;
}
    224e:	2000      	movs	r0, #0
    2250:	bd38      	pop	{r3, r4, r5, pc}
    2252:	bf00      	nop
    2254:	00008700 	.word	0x00008700
    2258:	00002715 	.word	0x00002715
    225c:	000028fd 	.word	0x000028fd
    2260:	0000212d 	.word	0x0000212d

00002264 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2264:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2266:	4b04      	ldr	r3, [pc, #16]	; (2278 <delay_ms+0x14>)
    2268:	681c      	ldr	r4, [r3, #0]
    226a:	4b04      	ldr	r3, [pc, #16]	; (227c <delay_ms+0x18>)
    226c:	4798      	blx	r3
    226e:	4601      	mov	r1, r0
    2270:	4620      	mov	r0, r4
    2272:	4b03      	ldr	r3, [pc, #12]	; (2280 <delay_ms+0x1c>)
    2274:	4798      	blx	r3
    2276:	bd10      	pop	{r4, pc}
    2278:	2000054c 	.word	0x2000054c
    227c:	00002759 	.word	0x00002759
    2280:	00002779 	.word	0x00002779

00002284 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2284:	b570      	push	{r4, r5, r6, lr}
    2286:	460d      	mov	r5, r1
    2288:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    228a:	4604      	mov	r4, r0
    228c:	b160      	cbz	r0, 22a8 <io_write+0x24>
    228e:	1c08      	adds	r0, r1, #0
    2290:	bf18      	it	ne
    2292:	2001      	movne	r0, #1
    2294:	2234      	movs	r2, #52	; 0x34
    2296:	4905      	ldr	r1, [pc, #20]	; (22ac <io_write+0x28>)
    2298:	4b05      	ldr	r3, [pc, #20]	; (22b0 <io_write+0x2c>)
    229a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    229c:	6823      	ldr	r3, [r4, #0]
    229e:	4632      	mov	r2, r6
    22a0:	4629      	mov	r1, r5
    22a2:	4620      	mov	r0, r4
    22a4:	4798      	blx	r3
}
    22a6:	bd70      	pop	{r4, r5, r6, pc}
    22a8:	2000      	movs	r0, #0
    22aa:	e7f3      	b.n	2294 <io_write+0x10>
    22ac:	0000871c 	.word	0x0000871c
    22b0:	00002715 	.word	0x00002715

000022b4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    22b4:	b570      	push	{r4, r5, r6, lr}
    22b6:	460d      	mov	r5, r1
    22b8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    22ba:	4604      	mov	r4, r0
    22bc:	b160      	cbz	r0, 22d8 <io_read+0x24>
    22be:	1c08      	adds	r0, r1, #0
    22c0:	bf18      	it	ne
    22c2:	2001      	movne	r0, #1
    22c4:	223d      	movs	r2, #61	; 0x3d
    22c6:	4905      	ldr	r1, [pc, #20]	; (22dc <io_read+0x28>)
    22c8:	4b05      	ldr	r3, [pc, #20]	; (22e0 <io_read+0x2c>)
    22ca:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    22cc:	6863      	ldr	r3, [r4, #4]
    22ce:	4632      	mov	r2, r6
    22d0:	4629      	mov	r1, r5
    22d2:	4620      	mov	r0, r4
    22d4:	4798      	blx	r3
}
    22d6:	bd70      	pop	{r4, r5, r6, pc}
    22d8:	2000      	movs	r0, #0
    22da:	e7f3      	b.n	22c4 <io_read+0x10>
    22dc:	0000871c 	.word	0x0000871c
    22e0:	00002715 	.word	0x00002715

000022e4 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
    22e4:	b538      	push	{r3, r4, r5, lr}
    22e6:	460c      	mov	r4, r1
	ASSERT(mci && hw);
    22e8:	4605      	mov	r5, r0
    22ea:	b158      	cbz	r0, 2304 <mci_sync_init+0x20>
    22ec:	1c08      	adds	r0, r1, #0
    22ee:	bf18      	it	ne
    22f0:	2001      	movne	r0, #1
    22f2:	2231      	movs	r2, #49	; 0x31
    22f4:	4904      	ldr	r1, [pc, #16]	; (2308 <mci_sync_init+0x24>)
    22f6:	4b05      	ldr	r3, [pc, #20]	; (230c <mci_sync_init+0x28>)
    22f8:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
    22fa:	4621      	mov	r1, r4
    22fc:	4628      	mov	r0, r5
    22fe:	4b04      	ldr	r3, [pc, #16]	; (2310 <mci_sync_init+0x2c>)
    2300:	4798      	blx	r3
}
    2302:	bd38      	pop	{r3, r4, r5, pc}
    2304:	2000      	movs	r0, #0
    2306:	e7f4      	b.n	22f2 <mci_sync_init+0xe>
    2308:	00008730 	.word	0x00008730
    230c:	00002715 	.word	0x00002715
    2310:	00002aad 	.word	0x00002aad

00002314 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
    2314:	b5f0      	push	{r4, r5, r6, r7, lr}
    2316:	b083      	sub	sp, #12
    2318:	460d      	mov	r5, r1
    231a:	4616      	mov	r6, r2
    231c:	461f      	mov	r7, r3
	ASSERT(mci);
    231e:	4604      	mov	r4, r0
    2320:	2244      	movs	r2, #68	; 0x44
    2322:	4908      	ldr	r1, [pc, #32]	; (2344 <mci_sync_select_device+0x30>)
    2324:	3000      	adds	r0, #0
    2326:	bf18      	it	ne
    2328:	2001      	movne	r0, #1
    232a:	4b07      	ldr	r3, [pc, #28]	; (2348 <mci_sync_select_device+0x34>)
    232c:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
    232e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2332:	9300      	str	r3, [sp, #0]
    2334:	463b      	mov	r3, r7
    2336:	4632      	mov	r2, r6
    2338:	4629      	mov	r1, r5
    233a:	4620      	mov	r0, r4
    233c:	4c03      	ldr	r4, [pc, #12]	; (234c <mci_sync_select_device+0x38>)
    233e:	47a0      	blx	r4
}
    2340:	b003      	add	sp, #12
    2342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2344:	00008730 	.word	0x00008730
    2348:	00002715 	.word	0x00002715
    234c:	00002b15 	.word	0x00002b15

00002350 <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
    2350:	b538      	push	{r3, r4, r5, lr}
    2352:	460d      	mov	r5, r1
	ASSERT(mci);
    2354:	4604      	mov	r4, r0
    2356:	224d      	movs	r2, #77	; 0x4d
    2358:	4905      	ldr	r1, [pc, #20]	; (2370 <mci_sync_deselect_device+0x20>)
    235a:	3000      	adds	r0, #0
    235c:	bf18      	it	ne
    235e:	2001      	movne	r0, #1
    2360:	4b04      	ldr	r3, [pc, #16]	; (2374 <mci_sync_deselect_device+0x24>)
    2362:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
    2364:	4629      	mov	r1, r5
    2366:	4620      	mov	r0, r4
    2368:	4b03      	ldr	r3, [pc, #12]	; (2378 <mci_sync_deselect_device+0x28>)
    236a:	4798      	blx	r3
}
    236c:	bd38      	pop	{r3, r4, r5, pc}
    236e:	bf00      	nop
    2370:	00008730 	.word	0x00008730
    2374:	00002715 	.word	0x00002715
    2378:	00002c29 	.word	0x00002c29

0000237c <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
    237c:	b538      	push	{r3, r4, r5, lr}
    237e:	460d      	mov	r5, r1
	ASSERT(mci);
    2380:	4604      	mov	r4, r0
    2382:	2256      	movs	r2, #86	; 0x56
    2384:	4905      	ldr	r1, [pc, #20]	; (239c <mci_sync_get_bus_width+0x20>)
    2386:	3000      	adds	r0, #0
    2388:	bf18      	it	ne
    238a:	2001      	movne	r0, #1
    238c:	4b04      	ldr	r3, [pc, #16]	; (23a0 <mci_sync_get_bus_width+0x24>)
    238e:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
    2390:	4629      	mov	r1, r5
    2392:	4620      	mov	r0, r4
    2394:	4b03      	ldr	r3, [pc, #12]	; (23a4 <mci_sync_get_bus_width+0x28>)
    2396:	4798      	blx	r3
}
    2398:	bd38      	pop	{r3, r4, r5, pc}
    239a:	bf00      	nop
    239c:	00008730 	.word	0x00008730
    23a0:	00002715 	.word	0x00002715
    23a4:	00002c2d 	.word	0x00002c2d

000023a8 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    23a8:	b510      	push	{r4, lr}
	ASSERT(mci);
    23aa:	4604      	mov	r4, r0
    23ac:	2260      	movs	r2, #96	; 0x60
    23ae:	4905      	ldr	r1, [pc, #20]	; (23c4 <mci_sync_is_high_speed_capable+0x1c>)
    23b0:	3000      	adds	r0, #0
    23b2:	bf18      	it	ne
    23b4:	2001      	movne	r0, #1
    23b6:	4b04      	ldr	r3, [pc, #16]	; (23c8 <mci_sync_is_high_speed_capable+0x20>)
    23b8:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    23ba:	4620      	mov	r0, r4
    23bc:	4b03      	ldr	r3, [pc, #12]	; (23cc <mci_sync_is_high_speed_capable+0x24>)
    23be:	4798      	blx	r3
}
    23c0:	bd10      	pop	{r4, pc}
    23c2:	bf00      	nop
    23c4:	00008730 	.word	0x00008730
    23c8:	00002715 	.word	0x00002715
    23cc:	00002c37 	.word	0x00002c37

000023d0 <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    23d0:	b510      	push	{r4, lr}
	ASSERT(mci);
    23d2:	4604      	mov	r4, r0
    23d4:	2269      	movs	r2, #105	; 0x69
    23d6:	4905      	ldr	r1, [pc, #20]	; (23ec <mci_sync_send_clock+0x1c>)
    23d8:	3000      	adds	r0, #0
    23da:	bf18      	it	ne
    23dc:	2001      	movne	r0, #1
    23de:	4b04      	ldr	r3, [pc, #16]	; (23f0 <mci_sync_send_clock+0x20>)
    23e0:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    23e2:	4620      	mov	r0, r4
    23e4:	4b03      	ldr	r3, [pc, #12]	; (23f4 <mci_sync_send_clock+0x24>)
    23e6:	4798      	blx	r3
    23e8:	bd10      	pop	{r4, pc}
    23ea:	bf00      	nop
    23ec:	00008730 	.word	0x00008730
    23f0:	00002715 	.word	0x00002715
    23f4:	00002c41 	.word	0x00002c41

000023f8 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    23f8:	b570      	push	{r4, r5, r6, lr}
    23fa:	460d      	mov	r5, r1
    23fc:	4616      	mov	r6, r2
	ASSERT(mci);
    23fe:	4604      	mov	r4, r0
    2400:	2272      	movs	r2, #114	; 0x72
    2402:	4906      	ldr	r1, [pc, #24]	; (241c <mci_sync_send_cmd+0x24>)
    2404:	3000      	adds	r0, #0
    2406:	bf18      	it	ne
    2408:	2001      	movne	r0, #1
    240a:	4b05      	ldr	r3, [pc, #20]	; (2420 <mci_sync_send_cmd+0x28>)
    240c:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    240e:	4632      	mov	r2, r6
    2410:	4629      	mov	r1, r5
    2412:	4620      	mov	r0, r4
    2414:	4b03      	ldr	r3, [pc, #12]	; (2424 <mci_sync_send_cmd+0x2c>)
    2416:	4798      	blx	r3
}
    2418:	bd70      	pop	{r4, r5, r6, pc}
    241a:	bf00      	nop
    241c:	00008730 	.word	0x00008730
    2420:	00002715 	.word	0x00002715
    2424:	00002c81 	.word	0x00002c81

00002428 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    2428:	b510      	push	{r4, lr}
	ASSERT(mci);
    242a:	4604      	mov	r4, r0
    242c:	227b      	movs	r2, #123	; 0x7b
    242e:	4905      	ldr	r1, [pc, #20]	; (2444 <mci_sync_get_response+0x1c>)
    2430:	3000      	adds	r0, #0
    2432:	bf18      	it	ne
    2434:	2001      	movne	r0, #1
    2436:	4b04      	ldr	r3, [pc, #16]	; (2448 <mci_sync_get_response+0x20>)
    2438:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    243a:	4620      	mov	r0, r4
    243c:	4b03      	ldr	r3, [pc, #12]	; (244c <mci_sync_get_response+0x24>)
    243e:	4798      	blx	r3
}
    2440:	bd10      	pop	{r4, pc}
    2442:	bf00      	nop
    2444:	00008730 	.word	0x00008730
    2448:	00002715 	.word	0x00002715
    244c:	00002cd5 	.word	0x00002cd5

00002450 <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    2450:	b538      	push	{r3, r4, r5, lr}
    2452:	460c      	mov	r4, r1
	ASSERT(mci && response);
    2454:	4605      	mov	r5, r0
    2456:	b158      	cbz	r0, 2470 <mci_sync_get_response_128+0x20>
    2458:	1c08      	adds	r0, r1, #0
    245a:	bf18      	it	ne
    245c:	2001      	movne	r0, #1
    245e:	2284      	movs	r2, #132	; 0x84
    2460:	4904      	ldr	r1, [pc, #16]	; (2474 <mci_sync_get_response_128+0x24>)
    2462:	4b05      	ldr	r3, [pc, #20]	; (2478 <mci_sync_get_response_128+0x28>)
    2464:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    2466:	4621      	mov	r1, r4
    2468:	4628      	mov	r0, r5
    246a:	4b04      	ldr	r3, [pc, #16]	; (247c <mci_sync_get_response_128+0x2c>)
    246c:	4798      	blx	r3
    246e:	bd38      	pop	{r3, r4, r5, pc}
    2470:	2000      	movs	r0, #0
    2472:	e7f4      	b.n	245e <mci_sync_get_response_128+0xe>
    2474:	00008730 	.word	0x00008730
    2478:	00002715 	.word	0x00002715
    247c:	00002d01 	.word	0x00002d01

00002480 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	b083      	sub	sp, #12
    2484:	460d      	mov	r5, r1
    2486:	4616      	mov	r6, r2
    2488:	461f      	mov	r7, r3
	ASSERT(mci);
    248a:	4604      	mov	r4, r0
    248c:	2290      	movs	r2, #144	; 0x90
    248e:	490a      	ldr	r1, [pc, #40]	; (24b8 <mci_sync_adtc_start+0x38>)
    2490:	3000      	adds	r0, #0
    2492:	bf18      	it	ne
    2494:	2001      	movne	r0, #1
    2496:	4b09      	ldr	r3, [pc, #36]	; (24bc <mci_sync_adtc_start+0x3c>)
    2498:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    249a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    249e:	9301      	str	r3, [sp, #4]
    24a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    24a4:	9300      	str	r3, [sp, #0]
    24a6:	463b      	mov	r3, r7
    24a8:	4632      	mov	r2, r6
    24aa:	4629      	mov	r1, r5
    24ac:	4620      	mov	r0, r4
    24ae:	4c04      	ldr	r4, [pc, #16]	; (24c0 <mci_sync_adtc_start+0x40>)
    24b0:	47a0      	blx	r4
}
    24b2:	b003      	add	sp, #12
    24b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b6:	bf00      	nop
    24b8:	00008730 	.word	0x00008730
    24bc:	00002715 	.word	0x00002715
    24c0:	00002d65 	.word	0x00002d65

000024c4 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    24c4:	b570      	push	{r4, r5, r6, lr}
    24c6:	460c      	mov	r4, r1
    24c8:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    24ca:	4605      	mov	r5, r0
    24cc:	b160      	cbz	r0, 24e8 <mci_sync_start_read_blocks+0x24>
    24ce:	1c08      	adds	r0, r1, #0
    24d0:	bf18      	it	ne
    24d2:	2001      	movne	r0, #1
    24d4:	22b5      	movs	r2, #181	; 0xb5
    24d6:	4905      	ldr	r1, [pc, #20]	; (24ec <mci_sync_start_read_blocks+0x28>)
    24d8:	4b05      	ldr	r3, [pc, #20]	; (24f0 <mci_sync_start_read_blocks+0x2c>)
    24da:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    24dc:	4632      	mov	r2, r6
    24de:	4621      	mov	r1, r4
    24e0:	4628      	mov	r0, r5
    24e2:	4b04      	ldr	r3, [pc, #16]	; (24f4 <mci_sync_start_read_blocks+0x30>)
    24e4:	4798      	blx	r3
}
    24e6:	bd70      	pop	{r4, r5, r6, pc}
    24e8:	2000      	movs	r0, #0
    24ea:	e7f3      	b.n	24d4 <mci_sync_start_read_blocks+0x10>
    24ec:	00008730 	.word	0x00008730
    24f0:	00002715 	.word	0x00002715
    24f4:	00002fd9 	.word	0x00002fd9

000024f8 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    24f8:	b570      	push	{r4, r5, r6, lr}
    24fa:	460c      	mov	r4, r1
    24fc:	4616      	mov	r6, r2
	ASSERT(mci && src);
    24fe:	4605      	mov	r5, r0
    2500:	b160      	cbz	r0, 251c <mci_sync_start_write_blocks+0x24>
    2502:	1c08      	adds	r0, r1, #0
    2504:	bf18      	it	ne
    2506:	2001      	movne	r0, #1
    2508:	22be      	movs	r2, #190	; 0xbe
    250a:	4905      	ldr	r1, [pc, #20]	; (2520 <mci_sync_start_write_blocks+0x28>)
    250c:	4b05      	ldr	r3, [pc, #20]	; (2524 <mci_sync_start_write_blocks+0x2c>)
    250e:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    2510:	4632      	mov	r2, r6
    2512:	4621      	mov	r1, r4
    2514:	4628      	mov	r0, r5
    2516:	4b04      	ldr	r3, [pc, #16]	; (2528 <mci_sync_start_write_blocks+0x30>)
    2518:	4798      	blx	r3
}
    251a:	bd70      	pop	{r4, r5, r6, pc}
    251c:	2000      	movs	r0, #0
    251e:	e7f3      	b.n	2508 <mci_sync_start_write_blocks+0x10>
    2520:	00008730 	.word	0x00008730
    2524:	00002715 	.word	0x00002715
    2528:	0000305d 	.word	0x0000305d

0000252c <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    252c:	b510      	push	{r4, lr}
	ASSERT(mci);
    252e:	4604      	mov	r4, r0
    2530:	22c7      	movs	r2, #199	; 0xc7
    2532:	4905      	ldr	r1, [pc, #20]	; (2548 <mci_sync_wait_end_of_read_blocks+0x1c>)
    2534:	3000      	adds	r0, #0
    2536:	bf18      	it	ne
    2538:	2001      	movne	r0, #1
    253a:	4b04      	ldr	r3, [pc, #16]	; (254c <mci_sync_wait_end_of_read_blocks+0x20>)
    253c:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    253e:	4620      	mov	r0, r4
    2540:	4b03      	ldr	r3, [pc, #12]	; (2550 <mci_sync_wait_end_of_read_blocks+0x24>)
    2542:	4798      	blx	r3
}
    2544:	bd10      	pop	{r4, pc}
    2546:	bf00      	nop
    2548:	00008730 	.word	0x00008730
    254c:	00002715 	.word	0x00002715
    2550:	000030e1 	.word	0x000030e1

00002554 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    2554:	b510      	push	{r4, lr}
	ASSERT(mci);
    2556:	4604      	mov	r4, r0
    2558:	22d0      	movs	r2, #208	; 0xd0
    255a:	4905      	ldr	r1, [pc, #20]	; (2570 <mci_sync_wait_end_of_write_blocks+0x1c>)
    255c:	3000      	adds	r0, #0
    255e:	bf18      	it	ne
    2560:	2001      	movne	r0, #1
    2562:	4b04      	ldr	r3, [pc, #16]	; (2574 <mci_sync_wait_end_of_write_blocks+0x20>)
    2564:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    2566:	4620      	mov	r0, r4
    2568:	4b03      	ldr	r3, [pc, #12]	; (2578 <mci_sync_wait_end_of_write_blocks+0x24>)
    256a:	4798      	blx	r3
}
    256c:	bd10      	pop	{r4, pc}
    256e:	bf00      	nop
    2570:	00008730 	.word	0x00008730
    2574:	00002715 	.word	0x00002715
    2578:	00003109 	.word	0x00003109

0000257c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    257c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2580:	460f      	mov	r7, r1
    2582:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2584:	4604      	mov	r4, r0
    2586:	b328      	cbz	r0, 25d4 <usart_sync_write+0x58>
    2588:	b331      	cbz	r1, 25d8 <usart_sync_write+0x5c>
    258a:	1c10      	adds	r0, r2, #0
    258c:	bf18      	it	ne
    258e:	2001      	movne	r0, #1
    2590:	22f1      	movs	r2, #241	; 0xf1
    2592:	4912      	ldr	r1, [pc, #72]	; (25dc <usart_sync_write+0x60>)
    2594:	4b12      	ldr	r3, [pc, #72]	; (25e0 <usart_sync_write+0x64>)
    2596:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    2598:	3408      	adds	r4, #8
    259a:	4d12      	ldr	r5, [pc, #72]	; (25e4 <usart_sync_write+0x68>)
    259c:	4620      	mov	r0, r4
    259e:	47a8      	blx	r5
    25a0:	2800      	cmp	r0, #0
    25a2:	d0fb      	beq.n	259c <usart_sync_write+0x20>
    25a4:	3f01      	subs	r7, #1
    25a6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    25a8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 25ec <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    25ac:	4d0d      	ldr	r5, [pc, #52]	; (25e4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    25ae:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    25b2:	4620      	mov	r0, r4
    25b4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    25b6:	4620      	mov	r0, r4
    25b8:	47a8      	blx	r5
    25ba:	2800      	cmp	r0, #0
    25bc:	d0fb      	beq.n	25b6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    25be:	3601      	adds	r6, #1
    25c0:	4546      	cmp	r6, r8
    25c2:	d3f4      	bcc.n	25ae <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    25c4:	4d08      	ldr	r5, [pc, #32]	; (25e8 <usart_sync_write+0x6c>)
    25c6:	4620      	mov	r0, r4
    25c8:	47a8      	blx	r5
    25ca:	2800      	cmp	r0, #0
    25cc:	d0fb      	beq.n	25c6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    25ce:	4630      	mov	r0, r6
    25d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    25d4:	2000      	movs	r0, #0
    25d6:	e7db      	b.n	2590 <usart_sync_write+0x14>
    25d8:	2000      	movs	r0, #0
    25da:	e7d9      	b.n	2590 <usart_sync_write+0x14>
    25dc:	0000874c 	.word	0x0000874c
    25e0:	00002715 	.word	0x00002715
    25e4:	000032df 	.word	0x000032df
    25e8:	000032e9 	.word	0x000032e9
    25ec:	000032d1 	.word	0x000032d1

000025f0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    25f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25f4:	460f      	mov	r7, r1
    25f6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    25f8:	4604      	mov	r4, r0
    25fa:	b1e0      	cbz	r0, 2636 <usart_sync_read+0x46>
    25fc:	b1e9      	cbz	r1, 263a <usart_sync_read+0x4a>
    25fe:	1c10      	adds	r0, r2, #0
    2600:	bf18      	it	ne
    2602:	2001      	movne	r0, #1
    2604:	f44f 7286 	mov.w	r2, #268	; 0x10c
    2608:	490d      	ldr	r1, [pc, #52]	; (2640 <usart_sync_read+0x50>)
    260a:	4b0e      	ldr	r3, [pc, #56]	; (2644 <usart_sync_read+0x54>)
    260c:	4798      	blx	r3
    260e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    2610:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    2612:	3408      	adds	r4, #8
    2614:	4d0c      	ldr	r5, [pc, #48]	; (2648 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2616:	f8df 9034 	ldr.w	r9, [pc, #52]	; 264c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    261a:	4620      	mov	r0, r4
    261c:	47a8      	blx	r5
    261e:	2800      	cmp	r0, #0
    2620:	d0fb      	beq.n	261a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2622:	4620      	mov	r0, r4
    2624:	47c8      	blx	r9
    2626:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    262a:	3601      	adds	r6, #1
    262c:	4546      	cmp	r6, r8
    262e:	d3f4      	bcc.n	261a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    2630:	4630      	mov	r0, r6
    2632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2636:	2000      	movs	r0, #0
    2638:	e7e4      	b.n	2604 <usart_sync_read+0x14>
    263a:	2000      	movs	r0, #0
    263c:	e7e2      	b.n	2604 <usart_sync_read+0x14>
    263e:	bf00      	nop
    2640:	0000874c 	.word	0x0000874c
    2644:	00002715 	.word	0x00002715
    2648:	000032f3 	.word	0x000032f3
    264c:	000032d7 	.word	0x000032d7

00002650 <usart_sync_init>:
{
    2650:	b538      	push	{r3, r4, r5, lr}
    2652:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2654:	4604      	mov	r4, r0
    2656:	b198      	cbz	r0, 2680 <usart_sync_init+0x30>
    2658:	1c08      	adds	r0, r1, #0
    265a:	bf18      	it	ne
    265c:	2001      	movne	r0, #1
    265e:	2234      	movs	r2, #52	; 0x34
    2660:	4908      	ldr	r1, [pc, #32]	; (2684 <usart_sync_init+0x34>)
    2662:	4b09      	ldr	r3, [pc, #36]	; (2688 <usart_sync_init+0x38>)
    2664:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    2666:	4629      	mov	r1, r5
    2668:	f104 0008 	add.w	r0, r4, #8
    266c:	4b07      	ldr	r3, [pc, #28]	; (268c <usart_sync_init+0x3c>)
    266e:	4798      	blx	r3
	if (init_status) {
    2670:	4603      	mov	r3, r0
    2672:	b918      	cbnz	r0, 267c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    2674:	4a06      	ldr	r2, [pc, #24]	; (2690 <usart_sync_init+0x40>)
    2676:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    2678:	4a06      	ldr	r2, [pc, #24]	; (2694 <usart_sync_init+0x44>)
    267a:	6022      	str	r2, [r4, #0]
}
    267c:	4618      	mov	r0, r3
    267e:	bd38      	pop	{r3, r4, r5, pc}
    2680:	2000      	movs	r0, #0
    2682:	e7ec      	b.n	265e <usart_sync_init+0xe>
    2684:	0000874c 	.word	0x0000874c
    2688:	00002715 	.word	0x00002715
    268c:	00003291 	.word	0x00003291
    2690:	000025f1 	.word	0x000025f1
    2694:	0000257d 	.word	0x0000257d

00002698 <usart_sync_enable>:
{
    2698:	b510      	push	{r4, lr}
	ASSERT(descr);
    269a:	4604      	mov	r4, r0
    269c:	2253      	movs	r2, #83	; 0x53
    269e:	4906      	ldr	r1, [pc, #24]	; (26b8 <usart_sync_enable+0x20>)
    26a0:	3000      	adds	r0, #0
    26a2:	bf18      	it	ne
    26a4:	2001      	movne	r0, #1
    26a6:	4b05      	ldr	r3, [pc, #20]	; (26bc <usart_sync_enable+0x24>)
    26a8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    26aa:	f104 0008 	add.w	r0, r4, #8
    26ae:	4b04      	ldr	r3, [pc, #16]	; (26c0 <usart_sync_enable+0x28>)
    26b0:	4798      	blx	r3
}
    26b2:	2000      	movs	r0, #0
    26b4:	bd10      	pop	{r4, pc}
    26b6:	bf00      	nop
    26b8:	0000874c 	.word	0x0000874c
    26bc:	00002715 	.word	0x00002715
    26c0:	000032bd 	.word	0x000032bd

000026c4 <usart_sync_get_io_descriptor>:
{
    26c4:	b538      	push	{r3, r4, r5, lr}
    26c6:	460c      	mov	r4, r1
	ASSERT(descr && io);
    26c8:	4605      	mov	r5, r0
    26ca:	b148      	cbz	r0, 26e0 <usart_sync_get_io_descriptor+0x1c>
    26cc:	1c08      	adds	r0, r1, #0
    26ce:	bf18      	it	ne
    26d0:	2001      	movne	r0, #1
    26d2:	2269      	movs	r2, #105	; 0x69
    26d4:	4903      	ldr	r1, [pc, #12]	; (26e4 <usart_sync_get_io_descriptor+0x20>)
    26d6:	4b04      	ldr	r3, [pc, #16]	; (26e8 <usart_sync_get_io_descriptor+0x24>)
    26d8:	4798      	blx	r3
	*io = &descr->io;
    26da:	6025      	str	r5, [r4, #0]
}
    26dc:	2000      	movs	r0, #0
    26de:	bd38      	pop	{r3, r4, r5, pc}
    26e0:	2000      	movs	r0, #0
    26e2:	e7f6      	b.n	26d2 <usart_sync_get_io_descriptor+0xe>
    26e4:	0000874c 	.word	0x0000874c
    26e8:	00002715 	.word	0x00002715

000026ec <usart_sync_is_rx_not_empty>:
{
    26ec:	b510      	push	{r4, lr}
	ASSERT(descr);
    26ee:	4604      	mov	r4, r0
    26f0:	22d7      	movs	r2, #215	; 0xd7
    26f2:	4905      	ldr	r1, [pc, #20]	; (2708 <usart_sync_is_rx_not_empty+0x1c>)
    26f4:	3000      	adds	r0, #0
    26f6:	bf18      	it	ne
    26f8:	2001      	movne	r0, #1
    26fa:	4b04      	ldr	r3, [pc, #16]	; (270c <usart_sync_is_rx_not_empty+0x20>)
    26fc:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
    26fe:	f104 0008 	add.w	r0, r4, #8
    2702:	4b03      	ldr	r3, [pc, #12]	; (2710 <usart_sync_is_rx_not_empty+0x24>)
    2704:	4798      	blx	r3
}
    2706:	bd10      	pop	{r4, pc}
    2708:	0000874c 	.word	0x0000874c
    270c:	00002715 	.word	0x00002715
    2710:	000032f3 	.word	0x000032f3

00002714 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2714:	b900      	cbnz	r0, 2718 <assert+0x4>
		__asm("BKPT #0");
    2716:	be00      	bkpt	0x0000
    2718:	4770      	bx	lr
	...

0000271c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    271c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    271e:	4a06      	ldr	r2, [pc, #24]	; (2738 <_sbrk+0x1c>)
    2720:	6812      	ldr	r2, [r2, #0]
    2722:	b122      	cbz	r2, 272e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2724:	4a04      	ldr	r2, [pc, #16]	; (2738 <_sbrk+0x1c>)
    2726:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2728:	4403      	add	r3, r0
    272a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    272c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    272e:	4903      	ldr	r1, [pc, #12]	; (273c <_sbrk+0x20>)
    2730:	4a01      	ldr	r2, [pc, #4]	; (2738 <_sbrk+0x1c>)
    2732:	6011      	str	r1, [r2, #0]
    2734:	e7f6      	b.n	2724 <_sbrk+0x8>
    2736:	bf00      	nop
    2738:	20000550 	.word	0x20000550
    273c:	20011018 	.word	0x20011018

00002740 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    2740:	f04f 30ff 	mov.w	r0, #4294967295
    2744:	4770      	bx	lr

00002746 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    2746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    274a:	604b      	str	r3, [r1, #4]

	return 0;
}
    274c:	2000      	movs	r0, #0
    274e:	4770      	bx	lr

00002750 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    2750:	2001      	movs	r0, #1
    2752:	4770      	bx	lr

00002754 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    2754:	2000      	movs	r0, #0
    2756:	4770      	bx	lr

00002758 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    2758:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    275c:	00c3      	lsls	r3, r0, #3
    275e:	3302      	adds	r3, #2
    2760:	4803      	ldr	r0, [pc, #12]	; (2770 <_get_cycles_for_ms+0x18>)
    2762:	fba0 2303 	umull	r2, r3, r0, r3
    2766:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2768:	2064      	movs	r0, #100	; 0x64
    276a:	fb00 f003 	mul.w	r0, r0, r3
    276e:	4770      	bx	lr
    2770:	aaaaaaab 	.word	0xaaaaaaab
    2774:	00000000 	.word	0x00000000

00002778 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    2778:	3901      	subs	r1, #1
    277a:	d8fd      	bhi.n	2778 <_delay_cycles>
    277c:	4770      	bx	lr
    277e:	bf00      	nop

00002780 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2780:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2782:	4a08      	ldr	r2, [pc, #32]	; (27a4 <_init_chip+0x24>)
    2784:	8813      	ldrh	r3, [r2, #0]
    2786:	b29b      	uxth	r3, r3
    2788:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    278a:	4b07      	ldr	r3, [pc, #28]	; (27a8 <_init_chip+0x28>)
    278c:	4798      	blx	r3
	_oscctrl_init_sources();
    278e:	4b07      	ldr	r3, [pc, #28]	; (27ac <_init_chip+0x2c>)
    2790:	4798      	blx	r3
	_mclk_init();
    2792:	4b07      	ldr	r3, [pc, #28]	; (27b0 <_init_chip+0x30>)
    2794:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2796:	4b07      	ldr	r3, [pc, #28]	; (27b4 <_init_chip+0x34>)
    2798:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    279a:	f640 70ff 	movw	r0, #4095	; 0xfff
    279e:	4b06      	ldr	r3, [pc, #24]	; (27b8 <_init_chip+0x38>)
    27a0:	4798      	blx	r3
    27a2:	bd08      	pop	{r3, pc}
    27a4:	41004000 	.word	0x41004000
    27a8:	000027ed 	.word	0x000027ed
    27ac:	00002801 	.word	0x00002801
    27b0:	000027e1 	.word	0x000027e1
    27b4:	0000281d 	.word	0x0000281d
    27b8:	000027bd 	.word	0x000027bd

000027bc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    27bc:	f010 0f01 	tst.w	r0, #1
    27c0:	d008      	beq.n	27d4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    27c2:	4a05      	ldr	r2, [pc, #20]	; (27d8 <_gclk_init_generators_by_fref+0x1c>)
    27c4:	4b05      	ldr	r3, [pc, #20]	; (27dc <_gclk_init_generators_by_fref+0x20>)
    27c6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    27c8:	4619      	mov	r1, r3
    27ca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    27ce:	684b      	ldr	r3, [r1, #4]
    27d0:	4213      	tst	r3, r2
    27d2:	d1fc      	bne.n	27ce <_gclk_init_generators_by_fref+0x12>
    27d4:	4770      	bx	lr
    27d6:	bf00      	nop
    27d8:	00010101 	.word	0x00010101
    27dc:	40001c00 	.word	0x40001c00

000027e0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    27e0:	2201      	movs	r2, #1
    27e2:	4b01      	ldr	r3, [pc, #4]	; (27e8 <_mclk_init+0x8>)
    27e4:	715a      	strb	r2, [r3, #5]
    27e6:	4770      	bx	lr
    27e8:	40000800 	.word	0x40000800

000027ec <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    27ec:	4b03      	ldr	r3, [pc, #12]	; (27fc <_osc32kctrl_init_sources+0x10>)
    27ee:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    27f0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    27f4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    27f6:	2201      	movs	r2, #1
    27f8:	741a      	strb	r2, [r3, #16]
    27fa:	4770      	bx	lr
    27fc:	40001400 	.word	0x40001400

00002800 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    2800:	4a04      	ldr	r2, [pc, #16]	; (2814 <_oscctrl_init_sources+0x14>)
    2802:	4b05      	ldr	r3, [pc, #20]	; (2818 <_oscctrl_init_sources+0x18>)
    2804:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2806:	461a      	mov	r2, r3
    2808:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    280a:	f013 0f02 	tst.w	r3, #2
    280e:	d0fb      	beq.n	2808 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2810:	4770      	bx	lr
    2812:	bf00      	nop
    2814:	03002606 	.word	0x03002606
    2818:	40001000 	.word	0x40001000

0000281c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    281c:	4770      	bx	lr
	...

00002820 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2820:	b500      	push	{lr}
    2822:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2824:	4b0d      	ldr	r3, [pc, #52]	; (285c <RAMECC_Handler+0x3c>)
    2826:	789b      	ldrb	r3, [r3, #2]
    2828:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    282a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    282c:	9b01      	ldr	r3, [sp, #4]
    282e:	f013 0f02 	tst.w	r3, #2
    2832:	d006      	beq.n	2842 <RAMECC_Handler+0x22>
    2834:	4b0a      	ldr	r3, [pc, #40]	; (2860 <RAMECC_Handler+0x40>)
    2836:	681b      	ldr	r3, [r3, #0]
    2838:	b11b      	cbz	r3, 2842 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    283a:	4a08      	ldr	r2, [pc, #32]	; (285c <RAMECC_Handler+0x3c>)
    283c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    283e:	4798      	blx	r3
    2840:	e009      	b.n	2856 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2842:	9b01      	ldr	r3, [sp, #4]
    2844:	f013 0f01 	tst.w	r3, #1
    2848:	d005      	beq.n	2856 <RAMECC_Handler+0x36>
    284a:	4b05      	ldr	r3, [pc, #20]	; (2860 <RAMECC_Handler+0x40>)
    284c:	685b      	ldr	r3, [r3, #4]
    284e:	b113      	cbz	r3, 2856 <RAMECC_Handler+0x36>
    2850:	4a02      	ldr	r2, [pc, #8]	; (285c <RAMECC_Handler+0x3c>)
    2852:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2854:	4798      	blx	r3
	} else {
		return;
	}
}
    2856:	b003      	add	sp, #12
    2858:	f85d fb04 	ldr.w	pc, [sp], #4
    285c:	41020000 	.word	0x41020000
    2860:	20000fec 	.word	0x20000fec

00002864 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2864:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2866:	4604      	mov	r4, r0
    2868:	2800      	cmp	r0, #0
    286a:	d03e      	beq.n	28ea <_calendar_init+0x86>
    286c:	6800      	ldr	r0, [r0, #0]
    286e:	3000      	adds	r0, #0
    2870:	bf18      	it	ne
    2872:	2001      	movne	r0, #1
    2874:	222f      	movs	r2, #47	; 0x2f
    2876:	491e      	ldr	r1, [pc, #120]	; (28f0 <_calendar_init+0x8c>)
    2878:	4b1e      	ldr	r3, [pc, #120]	; (28f4 <_calendar_init+0x90>)
    287a:	4798      	blx	r3

	_rtc_dev = dev;
    287c:	4b1e      	ldr	r3, [pc, #120]	; (28f8 <_calendar_init+0x94>)
    287e:	601c      	str	r4, [r3, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2880:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2882:	f248 0103 	movw	r1, #32771	; 0x8003
    2886:	6913      	ldr	r3, [r2, #16]
    2888:	420b      	tst	r3, r1
    288a:	d1fc      	bne.n	2886 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    288c:	8813      	ldrh	r3, [r2, #0]
    288e:	f013 0f02 	tst.w	r3, #2
    2892:	d00f      	beq.n	28b4 <_calendar_init+0x50>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2894:	8813      	ldrh	r3, [r2, #0]
    2896:	f023 0302 	bic.w	r3, r3, #2
    289a:	041b      	lsls	r3, r3, #16
    289c:	0c1b      	lsrs	r3, r3, #16
    289e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    28a0:	f248 0103 	movw	r1, #32771	; 0x8003
    28a4:	6913      	ldr	r3, [r2, #16]
    28a6:	420b      	tst	r3, r1
    28a8:	d1fc      	bne.n	28a4 <_calendar_init+0x40>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    28aa:	6822      	ldr	r2, [r4, #0]
    28ac:	6913      	ldr	r3, [r2, #16]
    28ae:	f013 0f02 	tst.w	r3, #2
    28b2:	d1fb      	bne.n	28ac <_calendar_init+0x48>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    28b4:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    28b6:	8813      	ldrh	r3, [r2, #0]
    28b8:	b29b      	uxth	r3, r3
    28ba:	f043 0301 	orr.w	r3, r3, #1
    28be:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    28c0:	6913      	ldr	r3, [r2, #16]
    28c2:	f013 0f01 	tst.w	r3, #1
    28c6:	d1fb      	bne.n	28c0 <_calendar_init+0x5c>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    28c8:	6823      	ldr	r3, [r4, #0]
    28ca:	691a      	ldr	r2, [r3, #16]
    28cc:	f012 0f01 	tst.w	r2, #1
    28d0:	d1fb      	bne.n	28ca <_calendar_init+0x66>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    28d2:	f44f 4201 	mov.w	r2, #33024	; 0x8100
    28d6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    28d8:	f248 0103 	movw	r1, #32771	; 0x8003
    28dc:	691a      	ldr	r2, [r3, #16]
    28de:	420a      	tst	r2, r1
    28e0:	d1fc      	bne.n	28dc <_calendar_init+0x78>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    28e2:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    28e4:	2000      	movs	r0, #0
    28e6:	6618      	str	r0, [r3, #96]	; 0x60
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
}
    28e8:	bd10      	pop	{r4, pc}
    28ea:	2000      	movs	r0, #0
    28ec:	e7c2      	b.n	2874 <_calendar_init+0x10>
    28ee:	bf00      	nop
    28f0:	00008768 	.word	0x00008768
    28f4:	00002715 	.word	0x00002715
    28f8:	20000554 	.word	0x20000554

000028fc <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    28fc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    28fe:	4604      	mov	r4, r0
    2900:	b170      	cbz	r0, 2920 <_calendar_get_counter+0x24>
    2902:	6800      	ldr	r0, [r0, #0]
    2904:	3000      	adds	r0, #0
    2906:	bf18      	it	ne
    2908:	2001      	movne	r0, #1
    290a:	2299      	movs	r2, #153	; 0x99
    290c:	4905      	ldr	r1, [pc, #20]	; (2924 <_calendar_get_counter+0x28>)
    290e:	4b06      	ldr	r3, [pc, #24]	; (2928 <_calendar_get_counter+0x2c>)
    2910:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2912:	6822      	ldr	r2, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2914:	6913      	ldr	r3, [r2, #16]
    2916:	f013 0f08 	tst.w	r3, #8
    291a:	d1fb      	bne.n	2914 <_calendar_get_counter+0x18>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    291c:	6990      	ldr	r0, [r2, #24]
}
    291e:	bd10      	pop	{r4, pc}
    2920:	2000      	movs	r0, #0
    2922:	e7f2      	b.n	290a <_calendar_get_counter+0xe>
    2924:	00008768 	.word	0x00008768
    2928:	00002715 	.word	0x00002715

0000292c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    292c:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    292e:	4b0f      	ldr	r3, [pc, #60]	; (296c <RTC_Handler+0x40>)
    2930:	681c      	ldr	r4, [r3, #0]
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2932:	6822      	ldr	r2, [r4, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2934:	8991      	ldrh	r1, [r2, #12]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    2936:	8953      	ldrh	r3, [r2, #10]
    2938:	b29b      	uxth	r3, r3
	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    293a:	400b      	ands	r3, r1
    293c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2940:	d103      	bne.n	294a <RTC_Handler+0x1e>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    2942:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    2946:	d108      	bne.n	295a <RTC_Handler+0x2e>
    2948:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    294a:	6863      	ldr	r3, [r4, #4]
    294c:	4620      	mov	r0, r4
    294e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2950:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2952:	f44f 7280 	mov.w	r2, #256	; 0x100
    2956:	819a      	strh	r2, [r3, #12]
    2958:	bd10      	pop	{r4, pc}
		dev->callback_tamper(dev);
    295a:	68a3      	ldr	r3, [r4, #8]
    295c:	4620      	mov	r0, r4
    295e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    2960:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    2962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2966:	819a      	strh	r2, [r3, #12]
}
    2968:	e7ee      	b.n	2948 <RTC_Handler+0x1c>
    296a:	bf00      	nop
    296c:	20000554 	.word	0x20000554

00002970 <_mci_reset>:
 * \brief Reset the SDHC interface
 *
 * \param hw The pointer to MCI hardware instance
 */
static void _mci_reset(const void *const hw)
{
    2970:	b510      	push	{r4, lr}
	ASSERT(hw);
    2972:	4604      	mov	r4, r0
    2974:	2234      	movs	r2, #52	; 0x34
    2976:	4906      	ldr	r1, [pc, #24]	; (2990 <_mci_reset+0x20>)
    2978:	3000      	adds	r0, #0
    297a:	bf18      	it	ne
    297c:	2001      	movne	r0, #1
    297e:	4b05      	ldr	r3, [pc, #20]	; (2994 <_mci_reset+0x24>)
    2980:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    2982:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2986:	f043 0302 	orr.w	r3, r3, #2
    298a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    298e:	bd10      	pop	{r4, pc}
    2990:	00008780 	.word	0x00008780
    2994:	00002715 	.word	0x00002715

00002998 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    2998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    299c:	4688      	mov	r8, r1
    299e:	4615      	mov	r5, r2
    29a0:	461f      	mov	r7, r3
	uint32_t sr;
	ASSERT(hw);
    29a2:	4604      	mov	r4, r0
    29a4:	1c06      	adds	r6, r0, #0
    29a6:	bf18      	it	ne
    29a8:	2601      	movne	r6, #1
    29aa:	2299      	movs	r2, #153	; 0x99
    29ac:	493c      	ldr	r1, [pc, #240]	; (2aa0 <_mci_send_cmd_execute+0x108>)
    29ae:	4630      	mov	r0, r6
    29b0:	4b3c      	ldr	r3, [pc, #240]	; (2aa4 <_mci_send_cmd_execute+0x10c>)
    29b2:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    29b4:	0229      	lsls	r1, r5, #8
    29b6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    29ba:	ea41 0108 	orr.w	r1, r1, r8

	if (cmd & MCI_RESP_PRESENT) {
    29be:	f415 7f80 	tst.w	r5, #256	; 0x100
    29c2:	d004      	beq.n	29ce <_mci_send_cmd_execute+0x36>

		if (cmd & MCI_RESP_136) {
    29c4:	f415 6f00 	tst.w	r5, #2048	; 0x800
    29c8:	d016      	beq.n	29f8 <_mci_send_cmd_execute+0x60>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    29ca:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    29ce:	f415 4f80 	tst.w	r5, #16384	; 0x4000
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    29d2:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    29d6:	bf14      	ite	ne
    29d8:	f043 0310 	orrne.w	r3, r3, #16
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    29dc:	f003 03ef 	andeq.w	r3, r3, #239	; 0xef
    29e0:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    29e4:	60a7      	str	r7, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    29e6:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    29e8:	81e3      	strh	r3, [r4, #14]

	/* Wait end of command */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (cmd & MCI_RESP_CRC) {
    29ea:	f405 5280 	and.w	r2, r5, #4096	; 0x1000
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    29ee:	f240 277f 	movw	r7, #639	; 0x27f
			if (sr
    29f2:	f240 205d 	movw	r0, #605	; 0x25d
    29f6:	e00d      	b.n	2a14 <_mci_send_cmd_execute+0x7c>
		} else if (cmd & MCI_RESP_BUSY) {
    29f8:	f415 5f00 	tst.w	r5, #8192	; 0x2000
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    29fc:	bf14      	ite	ne
    29fe:	f041 0103 	orrne.w	r1, r1, #3
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    2a02:	f041 0102 	orreq.w	r1, r1, #2
    2a06:	e7e2      	b.n	29ce <_mci_send_cmd_execute+0x36>
			if (sr
    2a08:	423b      	tst	r3, r7
    2a0a:	d116      	bne.n	2a3a <_mci_send_cmd_execute+0xa2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2a0c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    2a0e:	f013 0f01 	tst.w	r3, #1
    2a12:	d11f      	bne.n	2a54 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    2a14:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2a16:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    2a18:	2a00      	cmp	r2, #0
    2a1a:	d0f5      	beq.n	2a08 <_mci_send_cmd_execute+0x70>
			if (sr
    2a1c:	4203      	tst	r3, r0
    2a1e:	d0f5      	beq.n	2a0c <_mci_send_cmd_execute+0x74>
				_mci_reset(hw);
    2a20:	4620      	mov	r0, r4
    2a22:	4b21      	ldr	r3, [pc, #132]	; (2aa8 <_mci_send_cmd_execute+0x110>)
    2a24:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    2a26:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2a28:	b29b      	uxth	r3, r3
    2a2a:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2a2e:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2a32:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2a34:	2000      	movs	r0, #0
    2a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				_mci_reset(hw);
    2a3a:	4620      	mov	r0, r4
    2a3c:	4b1a      	ldr	r3, [pc, #104]	; (2aa8 <_mci_send_cmd_execute+0x110>)
    2a3e:	4798      	blx	r3
    2a40:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2a42:	b29b      	uxth	r3, r3
    2a44:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2a48:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2a4c:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2a4e:	2000      	movs	r0, #0
    2a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2a54:	f011 0f20 	tst.w	r1, #32
    2a58:	d104      	bne.n	2a64 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    2a5a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2a5c:	b29b      	uxth	r3, r3
    2a5e:	f043 0301 	orr.w	r3, r3, #1
    2a62:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2a64:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2a68:	d102      	bne.n	2a70 <_mci_send_cmd_execute+0xd8>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    2a6a:	2001      	movs	r0, #1
}
    2a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(hw);
    2a70:	227f      	movs	r2, #127	; 0x7f
    2a72:	490b      	ldr	r1, [pc, #44]	; (2aa0 <_mci_send_cmd_execute+0x108>)
    2a74:	4630      	mov	r0, r6
    2a76:	4b0b      	ldr	r3, [pc, #44]	; (2aa4 <_mci_send_cmd_execute+0x10c>)
    2a78:	4798      	blx	r3
	return ((Sdhc *)hw)->PSR.reg;
    2a7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2a7c:	f04f 33ff 	mov.w	r3, #4294967295
	} while (!(psr & SDHC_PSR_DATLL(1)));
    2a80:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    2a84:	d108      	bne.n	2a98 <_mci_send_cmd_execute+0x100>
    2a86:	6a62      	ldr	r2, [r4, #36]	; 0x24
		if (busy_wait-- == 0) {
    2a88:	3b01      	subs	r3, #1
    2a8a:	d1f9      	bne.n	2a80 <_mci_send_cmd_execute+0xe8>
			_mci_reset(hw);
    2a8c:	4620      	mov	r0, r4
    2a8e:	4b06      	ldr	r3, [pc, #24]	; (2aa8 <_mci_send_cmd_execute+0x110>)
    2a90:	4798      	blx	r3
			return false;
    2a92:	2000      	movs	r0, #0
    2a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
    2a98:	2001      	movs	r0, #1
    2a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a9e:	bf00      	nop
    2aa0:	00008780 	.word	0x00008780
    2aa4:	00002715 	.word	0x00002715
    2aa8:	00002971 	.word	0x00002971

00002aac <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    2aac:	b538      	push	{r3, r4, r5, lr}
    2aae:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2ab0:	4605      	mov	r5, r0
    2ab2:	b340      	cbz	r0, 2b06 <_mci_sync_init+0x5a>
    2ab4:	1c08      	adds	r0, r1, #0
    2ab6:	bf18      	it	ne
    2ab8:	2001      	movne	r0, #1
    2aba:	22d8      	movs	r2, #216	; 0xd8
    2abc:	4913      	ldr	r1, [pc, #76]	; (2b0c <_mci_sync_init+0x60>)
    2abe:	4b14      	ldr	r3, [pc, #80]	; (2b10 <_mci_sync_init+0x64>)
    2ac0:	4798      	blx	r3

	mci_dev->hw = hw;
    2ac2:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    2ac4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2ac8:	f043 0301 	orr.w	r3, r3, #1
    2acc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    2ad0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    2ad4:	f013 0f01 	tst.w	r3, #1
    2ad8:	d1fa      	bne.n	2ad0 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
    2ada:	230e      	movs	r3, #14
    2adc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    2ae0:	230f      	movs	r3, #15
    2ae2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    2ae6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2ae8:	b29b      	uxth	r3, r3
    2aea:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2aee:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2af2:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    2af4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2af6:	b29b      	uxth	r3, r3
    2af8:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2afc:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2b00:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    2b02:	2000      	movs	r0, #0
    2b04:	bd38      	pop	{r3, r4, r5, pc}
    2b06:	2000      	movs	r0, #0
    2b08:	e7d7      	b.n	2aba <_mci_sync_init+0xe>
    2b0a:	bf00      	nop
    2b0c:	00008780 	.word	0x00008780
    2b10:	00002715 	.word	0x00002715

00002b14 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    2b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b16:	4615      	mov	r5, r2
    2b18:	461c      	mov	r4, r3
    2b1a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    2b1e:	4606      	mov	r6, r0
    2b20:	b1d8      	cbz	r0, 2b5a <_mci_sync_select_device+0x46>
    2b22:	6800      	ldr	r0, [r0, #0]
    2b24:	3000      	adds	r0, #0
    2b26:	bf18      	it	ne
    2b28:	2001      	movne	r0, #1
    2b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2b2e:	493a      	ldr	r1, [pc, #232]	; (2c18 <_mci_sync_select_device+0x104>)
    2b30:	4b3a      	ldr	r3, [pc, #232]	; (2c1c <_mci_sync_select_device+0x108>)
    2b32:	4798      	blx	r3
	hw = mci_dev->hw;
    2b34:	6833      	ldr	r3, [r6, #0]

	if (high_speed) {
    2b36:	b197      	cbz	r7, 2b5e <_mci_sync_select_device+0x4a>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    2b38:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2b3c:	f042 0204 	orr.w	r2, r2, #4
    2b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    2b44:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    2b46:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    2b4a:	d00f      	beq.n	2b6c <_mci_sync_select_device+0x58>
		_mci_set_speed(hw, clock, CONF_SDHC1_CLK_GEN_SEL);
	}

	switch (bus_width) {
    2b4c:	2c01      	cmp	r4, #1
    2b4e:	d053      	beq.n	2bf8 <_mci_sync_select_device+0xe4>
    2b50:	2c04      	cmp	r4, #4
    2b52:	d059      	beq.n	2c08 <_mci_sync_select_device+0xf4>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    2b54:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    2b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b5a:	2000      	movs	r0, #0
    2b5c:	e7e5      	b.n	2b2a <_mci_sync_select_device+0x16>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    2b5e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2b62:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2b6a:	e7eb      	b.n	2b44 <_mci_sync_select_device+0x30>
	tmp = ((Sdhc *)hw)->CCR.reg;
    2b6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    2b6e:	f012 0f04 	tst.w	r2, #4
    2b72:	d009      	beq.n	2b88 <_mci_sync_select_device+0x74>
	return ((Sdhc *)hw)->PSR.reg;
    2b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2b76:	f012 0f03 	tst.w	r2, #3
    2b7a:	d1fb      	bne.n	2b74 <_mci_sync_select_device+0x60>
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    2b7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2b7e:	f022 0204 	bic.w	r2, r2, #4
    2b82:	0412      	lsls	r2, r2, #16
    2b84:	0c12      	lsrs	r2, r2, #16
    2b86:	859a      	strh	r2, [r3, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2b88:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2b8a:	f3c1 4107 	ubfx	r1, r1, #16, #8
		clkbase = clkbase / 2;
    2b8e:	4824      	ldr	r0, [pc, #144]	; (2c20 <_mci_sync_select_device+0x10c>)
    2b90:	4a24      	ldr	r2, [pc, #144]	; (2c24 <_mci_sync_select_device+0x110>)
    2b92:	2900      	cmp	r1, #0
    2b94:	bf18      	it	ne
    2b96:	4602      	movne	r2, r0
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    2b98:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    2b9a:	f021 0120 	bic.w	r1, r1, #32
    2b9e:	0409      	lsls	r1, r1, #16
    2ba0:	0c09      	lsrs	r1, r1, #16
    2ba2:	8599      	strh	r1, [r3, #44]	; 0x2c
		div = (clkbase / speed) / 2;
    2ba4:	fbb2 f2f5 	udiv	r2, r2, r5
    2ba8:	0852      	lsrs	r2, r2, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    2baa:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    2bae:	f011 0f04 	tst.w	r1, #4
    2bb2:	d002      	beq.n	2bba <_mci_sync_select_device+0xa6>
		div = 1;
    2bb4:	2a00      	cmp	r2, #0
    2bb6:	bf08      	it	eq
    2bb8:	2201      	moveq	r2, #1
	tmp = ((Sdhc *)hw)->CCR.reg;
    2bba:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    2bbc:	b2c9      	uxtb	r1, r1
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    2bbe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    2bc2:	b289      	uxth	r1, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    2bc4:	8599      	strh	r1, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2bc6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    2bc8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    2bcc:	0409      	lsls	r1, r1, #16
    2bce:	0c09      	lsrs	r1, r1, #16
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    2bd0:	0892      	lsrs	r2, r2, #2
    2bd2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    2bd6:	430a      	orrs	r2, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    2bd8:	859a      	strh	r2, [r3, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    2bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2bdc:	b292      	uxth	r2, r2
    2bde:	f042 0201 	orr.w	r2, r2, #1
    2be2:	859a      	strh	r2, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2be4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    2be6:	f012 0f02 	tst.w	r2, #2
    2bea:	d0fb      	beq.n	2be4 <_mci_sync_select_device+0xd0>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    2bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2bee:	b292      	uxth	r2, r2
    2bf0:	f042 0204 	orr.w	r2, r2, #4
    2bf4:	859a      	strh	r2, [r3, #44]	; 0x2c
    2bf6:	e7a9      	b.n	2b4c <_mci_sync_select_device+0x38>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    2bf8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2bfc:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    2c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    2c04:	2000      	movs	r0, #0
    2c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    2c08:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2c0c:	f042 0202 	orr.w	r2, r2, #2
    2c10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2c14:	2000      	movs	r0, #0
    2c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c18:	00008780 	.word	0x00008780
    2c1c:	00002715 	.word	0x00002715
    2c20:	005b8d80 	.word	0x005b8d80
    2c24:	00b71b00 	.word	0x00b71b00

00002c28 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2c28:	2000      	movs	r0, #0
    2c2a:	4770      	bx	lr

00002c2c <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    2c2c:	2900      	cmp	r1, #0

	default:
		/* Slot number wrong */
		return 0;
	}
}
    2c2e:	bf0c      	ite	eq
    2c30:	2004      	moveq	r0, #4
    2c32:	2000      	movne	r0, #0
    2c34:	4770      	bx	lr

00002c36 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    2c36:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2c38:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2c3a:	f3c0 5040 	ubfx	r0, r0, #21, #1
    2c3e:	4770      	bx	lr

00002c40 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    2c40:	b500      	push	{lr}
    2c42:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    2c44:	f240 1249 	movw	r2, #329	; 0x149
    2c48:	490b      	ldr	r1, [pc, #44]	; (2c78 <_mci_sync_send_clock+0x38>)
    2c4a:	3000      	adds	r0, #0
    2c4c:	bf18      	it	ne
    2c4e:	2001      	movne	r0, #1
    2c50:	4b0a      	ldr	r3, [pc, #40]	; (2c7c <_mci_sync_send_clock+0x3c>)
    2c52:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    2c54:	2300      	movs	r3, #0
    2c56:	9301      	str	r3, [sp, #4]
    2c58:	9a01      	ldr	r2, [sp, #4]
    2c5a:	f241 3387 	movw	r3, #4999	; 0x1387
    2c5e:	429a      	cmp	r2, r3
    2c60:	d806      	bhi.n	2c70 <_mci_sync_send_clock+0x30>
    2c62:	461a      	mov	r2, r3
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	3301      	adds	r3, #1
    2c68:	9301      	str	r3, [sp, #4]
    2c6a:	9b01      	ldr	r3, [sp, #4]
    2c6c:	4293      	cmp	r3, r2
    2c6e:	d9f9      	bls.n	2c64 <_mci_sync_send_clock+0x24>
		;
}
    2c70:	b003      	add	sp, #12
    2c72:	f85d fb04 	ldr.w	pc, [sp], #4
    2c76:	bf00      	nop
    2c78:	00008780 	.word	0x00008780
    2c7c:	00002715 	.word	0x00002715

00002c80 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    2c80:	b570      	push	{r4, r5, r6, lr}
    2c82:	460d      	mov	r5, r1
    2c84:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2c86:	4604      	mov	r4, r0
    2c88:	b178      	cbz	r0, 2caa <_mci_sync_send_cmd+0x2a>
    2c8a:	6800      	ldr	r0, [r0, #0]
    2c8c:	3000      	adds	r0, #0
    2c8e:	bf18      	it	ne
    2c90:	2001      	movne	r0, #1
    2c92:	f44f 72ab 	mov.w	r2, #342	; 0x156
    2c96:	490c      	ldr	r1, [pc, #48]	; (2cc8 <_mci_sync_send_cmd+0x48>)
    2c98:	4b0c      	ldr	r3, [pc, #48]	; (2ccc <_mci_sync_send_cmd+0x4c>)
    2c9a:	4798      	blx	r3
	hw = mci_dev->hw;
    2c9c:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2c9e:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    2ca0:	f013 0f01 	tst.w	r3, #1
    2ca4:	d003      	beq.n	2cae <_mci_sync_send_cmd+0x2e>
		return false;
    2ca6:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
    2caa:	2000      	movs	r0, #0
    2cac:	e7f1      	b.n	2c92 <_mci_sync_send_cmd+0x12>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    2cae:	8983      	ldrh	r3, [r0, #12]
    2cb0:	f023 0301 	bic.w	r3, r3, #1
    2cb4:	041b      	lsls	r3, r3, #16
    2cb6:	0c1b      	lsrs	r3, r3, #16
    2cb8:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    2cba:	2100      	movs	r1, #0
    2cbc:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    2cbe:	4633      	mov	r3, r6
    2cc0:	462a      	mov	r2, r5
    2cc2:	4c03      	ldr	r4, [pc, #12]	; (2cd0 <_mci_sync_send_cmd+0x50>)
    2cc4:	47a0      	blx	r4
    2cc6:	bd70      	pop	{r4, r5, r6, pc}
    2cc8:	00008780 	.word	0x00008780
    2ccc:	00002715 	.word	0x00002715
    2cd0:	00002999 	.word	0x00002999

00002cd4 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    2cd4:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2cd6:	4604      	mov	r4, r0
    2cd8:	b158      	cbz	r0, 2cf2 <_mci_sync_get_response+0x1e>
    2cda:	6800      	ldr	r0, [r0, #0]
    2cdc:	3000      	adds	r0, #0
    2cde:	bf18      	it	ne
    2ce0:	2001      	movne	r0, #1
    2ce2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    2ce6:	4904      	ldr	r1, [pc, #16]	; (2cf8 <_mci_sync_get_response+0x24>)
    2ce8:	4b04      	ldr	r3, [pc, #16]	; (2cfc <_mci_sync_get_response+0x28>)
    2cea:	4798      	blx	r3
	hw = mci_dev->hw;
    2cec:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    2cee:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    2cf0:	bd10      	pop	{r4, pc}
    2cf2:	2000      	movs	r0, #0
    2cf4:	e7f5      	b.n	2ce2 <_mci_sync_get_response+0xe>
    2cf6:	bf00      	nop
    2cf8:	00008780 	.word	0x00008780
    2cfc:	00002715 	.word	0x00002715

00002d00 <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    2d00:	b538      	push	{r3, r4, r5, lr}
    2d02:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2d04:	4605      	mov	r5, r0
    2d06:	b160      	cbz	r0, 2d22 <_mci_sync_get_response_128+0x22>
    2d08:	6800      	ldr	r0, [r0, #0]
    2d0a:	3000      	adds	r0, #0
    2d0c:	bf18      	it	ne
    2d0e:	2001      	movne	r0, #1
    2d10:	f240 1277 	movw	r2, #375	; 0x177
    2d14:	4911      	ldr	r1, [pc, #68]	; (2d5c <_mci_sync_get_response_128+0x5c>)
    2d16:	4b12      	ldr	r3, [pc, #72]	; (2d60 <_mci_sync_get_response_128+0x60>)
    2d18:	4798      	blx	r3
	hw = mci_dev->hw;
    2d1a:	682d      	ldr	r5, [r5, #0]
    2d1c:	2102      	movs	r1, #2
    2d1e:	2303      	movs	r3, #3
    2d20:	e00b      	b.n	2d3a <_mci_sync_get_response_128+0x3a>
    2d22:	2000      	movs	r0, #0
    2d24:	e7f4      	b.n	2d10 <_mci_sync_get_response_128+0x10>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    2d26:	0c10      	lsrs	r0, r2, #16
    2d28:	7020      	strb	r0, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    2d2a:	0a10      	lsrs	r0, r2, #8
    2d2c:	7060      	strb	r0, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    2d2e:	70a2      	strb	r2, [r4, #2]
		response++;
    2d30:	3403      	adds	r4, #3
    2d32:	3b01      	subs	r3, #1
    2d34:	b2db      	uxtb	r3, r3
    2d36:	3901      	subs	r1, #1
    2d38:	b2c9      	uxtb	r1, r1
    2d3a:	1d1a      	adds	r2, r3, #4
    2d3c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
		if (i != 3) {
    2d40:	2b03      	cmp	r3, #3
    2d42:	d0f0      	beq.n	2d26 <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    2d44:	0e10      	lsrs	r0, r2, #24
    2d46:	7020      	strb	r0, [r4, #0]
		*response = (response_32 >> 16) & 0xFF;
    2d48:	0c10      	lsrs	r0, r2, #16
    2d4a:	7060      	strb	r0, [r4, #1]
		*response = (response_32 >> 8) & 0xFF;
    2d4c:	0a10      	lsrs	r0, r2, #8
    2d4e:	70a0      	strb	r0, [r4, #2]
		*response = (response_32 >> 0) & 0xFF;
    2d50:	70e2      	strb	r2, [r4, #3]
		response++;
    2d52:	3404      	adds	r4, #4
	for (int8_t i = 3; i >= 0; i--) {
    2d54:	f011 0f80 	tst.w	r1, #128	; 0x80
    2d58:	d0eb      	beq.n	2d32 <_mci_sync_get_response_128+0x32>
    2d5a:	bd38      	pop	{r3, r4, r5, pc}
    2d5c:	00008780 	.word	0x00008780
    2d60:	00002715 	.word	0x00002715

00002d64 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    2d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d68:	460d      	mov	r5, r1
    2d6a:	4690      	mov	r8, r2
    2d6c:	461f      	mov	r7, r3
    2d6e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2d72:	4604      	mov	r4, r0
    2d74:	2800      	cmp	r0, #0
    2d76:	d032      	beq.n	2dde <_mci_sync_adtc_start+0x7a>
    2d78:	6800      	ldr	r0, [r0, #0]
    2d7a:	3000      	adds	r0, #0
    2d7c:	bf18      	it	ne
    2d7e:	2001      	movne	r0, #1
    2d80:	f240 1293 	movw	r2, #403	; 0x193
    2d84:	4920      	ldr	r1, [pc, #128]	; (2e08 <_mci_sync_adtc_start+0xa4>)
    2d86:	4b21      	ldr	r3, [pc, #132]	; (2e0c <_mci_sync_adtc_start+0xa8>)
    2d88:	4798      	blx	r3
	hw = mci_dev->hw;
    2d8a:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    2d8e:	f013 0f01 	tst.w	r3, #1
    2d92:	d12f      	bne.n	2df4 <_mci_sync_adtc_start+0x90>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    2d94:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2d96:	f013 0f02 	tst.w	r3, #2
    2d9a:	d12e      	bne.n	2dfa <_mci_sync_adtc_start+0x96>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    2d9c:	f405 4300 	and.w	r3, r5, #32768	; 0x8000
		tmr = SDHC_TMR_DTDSEL_WRITE;
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
    2da0:	2b00      	cmp	r3, #0
    2da2:	bf14      	ite	ne
    2da4:	2300      	movne	r3, #0
    2da6:	2310      	moveq	r3, #16
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    2da8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    2dac:	d104      	bne.n	2db8 <_mci_sync_adtc_start+0x54>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    2dae:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    2db2:	d016      	beq.n	2de2 <_mci_sync_adtc_start+0x7e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    2db4:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    2db8:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    2dba:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    2dbc:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    2dc0:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    2dc2:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    2dc4:	2200      	movs	r2, #0
    2dc6:	2300      	movs	r3, #0
    2dc8:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    2dcc:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    2dce:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    2dd0:	4643      	mov	r3, r8
    2dd2:	462a      	mov	r2, r5
    2dd4:	2120      	movs	r1, #32
    2dd6:	4c0e      	ldr	r4, [pc, #56]	; (2e10 <_mci_sync_adtc_start+0xac>)
    2dd8:	47a0      	blx	r4
    2dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dde:	2000      	movs	r0, #0
    2de0:	e7ce      	b.n	2d80 <_mci_sync_adtc_start+0x1c>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    2de2:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    2de6:	d1e7      	bne.n	2db8 <_mci_sync_adtc_start+0x54>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    2de8:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    2dec:	d008      	beq.n	2e00 <_mci_sync_adtc_start+0x9c>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    2dee:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    2df2:	e7e1      	b.n	2db8 <_mci_sync_adtc_start+0x54>
		return false;
    2df4:	2000      	movs	r0, #0
    2df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dfa:	2000      	movs	r0, #0
    2dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    2e00:	2000      	movs	r0, #0
}
    2e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e06:	bf00      	nop
    2e08:	00008780 	.word	0x00008780
    2e0c:	00002715 	.word	0x00002715
    2e10:	00002999 	.word	0x00002999

00002e14 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    2e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e18:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2e1a:	4605      	mov	r5, r0
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d04d      	beq.n	2ebc <_mci_sync_read_word+0xa8>
    2e20:	6800      	ldr	r0, [r0, #0]
    2e22:	3000      	adds	r0, #0
    2e24:	bf18      	it	ne
    2e26:	2001      	movne	r0, #1
    2e28:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    2e2c:	4939      	ldr	r1, [pc, #228]	; (2f14 <_mci_sync_read_word+0x100>)
    2e2e:	4b3a      	ldr	r3, [pc, #232]	; (2f18 <_mci_sync_read_word+0x104>)
    2e30:	4798      	blx	r3
	hw = mci_dev->hw;
    2e32:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    2e34:	8a2a      	ldrh	r2, [r5, #16]
    2e36:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2e3a:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    2e3e:	fb02 f808 	mul.w	r8, r2, r8
    2e42:	ea4f 79e8 	mov.w	r9, r8, asr #31
    2e46:	ebb8 0800 	subs.w	r8, r8, r0
    2e4a:	eb69 0901 	sbc.w	r9, r9, r1
    2e4e:	f1b9 0f00 	cmp.w	r9, #0
    2e52:	bf08      	it	eq
    2e54:	f1b8 0f04 	cmpeq.w	r8, #4
    2e58:	d245      	bcs.n	2ee6 <_mci_sync_read_word+0xd2>
    2e5a:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2e5e:	b292      	uxth	r2, r2
    2e60:	2300      	movs	r3, #0
    2e62:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2f20 <_mci_sync_read_word+0x10c>
    2e66:	47c0      	blx	r8
    2e68:	4313      	orrs	r3, r2
    2e6a:	d043      	beq.n	2ef4 <_mci_sync_read_word+0xe0>
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    2e6c:	2e04      	cmp	r6, #4
    2e6e:	d02d      	beq.n	2ecc <_mci_sync_read_word+0xb8>
	return ((Sdhc *)hw)->BDPR.reg;
    2e70:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    2e72:	1e72      	subs	r2, r6, #1
    2e74:	2a02      	cmp	r2, #2
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    2e76:	bf9c      	itt	ls
    2e78:	b2db      	uxtbls	r3, r3
    2e7a:	603b      	strls	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    2e7c:	b2f6      	uxtb	r6, r6
    2e7e:	2700      	movs	r7, #0
    2e80:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    2e84:	18b6      	adds	r6, r6, r2
    2e86:	415f      	adcs	r7, r3
    2e88:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    2e8c:	8a2a      	ldrh	r2, [r5, #16]
    2e8e:	8a68      	ldrh	r0, [r5, #18]
    2e90:	fba2 2300 	umull	r2, r3, r2, r0
    2e94:	429f      	cmp	r7, r3
    2e96:	bf08      	it	eq
    2e98:	4296      	cmpeq	r6, r2
    2e9a:	d321      	bcc.n	2ee0 <_mci_sync_read_word+0xcc>
	return ((Sdhc *)hw)->EISTR.reg;
    2e9c:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2ea2:	b9bb      	cbnz	r3, 2ed4 <_mci_sync_read_word+0xc0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2ea4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    2ea6:	f013 0f02 	tst.w	r3, #2
    2eaa:	d0f7      	beq.n	2e9c <_mci_sync_read_word+0x88>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    2eac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2eae:	b29b      	uxth	r3, r3
    2eb0:	f043 0302 	orr.w	r3, r3, #2
    2eb4:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    2eb6:	2001      	movs	r0, #1
    2eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ebc:	2000      	movs	r0, #0
    2ebe:	e7b3      	b.n	2e28 <_mci_sync_read_word+0x14>
				_mci_reset(hw);
    2ec0:	4620      	mov	r0, r4
    2ec2:	4b16      	ldr	r3, [pc, #88]	; (2f1c <_mci_sync_read_word+0x108>)
    2ec4:	4798      	blx	r3
				return false;
    2ec6:	2000      	movs	r0, #0
    2ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    2ecc:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    2ece:	603b      	str	r3, [r7, #0]
    2ed0:	2604      	movs	r6, #4
    2ed2:	e7d3      	b.n	2e7c <_mci_sync_read_word+0x68>
			_mci_reset(hw);
    2ed4:	4620      	mov	r0, r4
    2ed6:	4b11      	ldr	r3, [pc, #68]	; (2f1c <_mci_sync_read_word+0x108>)
    2ed8:	4798      	blx	r3
			return false;
    2eda:	2000      	movs	r0, #0
    2edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    2ee0:	2001      	movs	r0, #1
    2ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2ee6:	b292      	uxth	r2, r2
    2ee8:	2300      	movs	r3, #0
    2eea:	4e0d      	ldr	r6, [pc, #52]	; (2f20 <_mci_sync_read_word+0x10c>)
    2eec:	47b0      	blx	r6
    2eee:	4313      	orrs	r3, r2
    2ef0:	d1ec      	bne.n	2ecc <_mci_sync_read_word+0xb8>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    2ef2:	2604      	movs	r6, #4
	return ((Sdhc *)hw)->EISTR.reg;
    2ef4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2efa:	2b00      	cmp	r3, #0
    2efc:	d1e0      	bne.n	2ec0 <_mci_sync_read_word+0xac>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2efe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    2f00:	f013 0f20 	tst.w	r3, #32
    2f04:	d0f6      	beq.n	2ef4 <_mci_sync_read_word+0xe0>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    2f06:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2f08:	b29b      	uxth	r3, r3
    2f0a:	f043 0320 	orr.w	r3, r3, #32
    2f0e:	8623      	strh	r3, [r4, #48]	; 0x30
    2f10:	e7ac      	b.n	2e6c <_mci_sync_read_word+0x58>
    2f12:	bf00      	nop
    2f14:	00008780 	.word	0x00008780
    2f18:	00002715 	.word	0x00002715
    2f1c:	00002971 	.word	0x00002971
    2f20:	00005f69 	.word	0x00005f69

00002f24 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    2f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f26:	460e      	mov	r6, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2f28:	4605      	mov	r5, r0
    2f2a:	2800      	cmp	r0, #0
    2f2c:	d03d      	beq.n	2faa <_mci_sync_write_word+0x86>
    2f2e:	6800      	ldr	r0, [r0, #0]
    2f30:	3000      	adds	r0, #0
    2f32:	bf18      	it	ne
    2f34:	2001      	movne	r0, #1
    2f36:	f240 220f 	movw	r2, #527	; 0x20f
    2f3a:	4923      	ldr	r1, [pc, #140]	; (2fc8 <_mci_sync_write_word+0xa4>)
    2f3c:	4b23      	ldr	r3, [pc, #140]	; (2fcc <_mci_sync_write_word+0xa8>)
    2f3e:	4798      	blx	r3
	hw = mci_dev->hw;
    2f40:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2f42:	8a2a      	ldrh	r2, [r5, #16]
    2f44:	2300      	movs	r3, #0
    2f46:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2f4a:	4f21      	ldr	r7, [pc, #132]	; (2fd0 <_mci_sync_write_word+0xac>)
    2f4c:	47b8      	blx	r7
    2f4e:	4313      	orrs	r3, r2
    2f50:	d10c      	bne.n	2f6c <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    2f52:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2f58:	bb4b      	cbnz	r3, 2fae <_mci_sync_write_word+0x8a>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2f5a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    2f5c:	f013 0f10 	tst.w	r3, #16
    2f60:	d0f7      	beq.n	2f52 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    2f62:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2f64:	b29b      	uxth	r3, r3
    2f66:	f043 0310 	orr.w	r3, r3, #16
    2f6a:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    2f6c:	6226      	str	r6, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    2f6e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    2f72:	3204      	adds	r2, #4
    2f74:	f143 0300 	adc.w	r3, r3, #0
    2f78:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    2f7c:	8a28      	ldrh	r0, [r5, #16]
    2f7e:	8a6e      	ldrh	r6, [r5, #18]
    2f80:	fba0 0106 	umull	r0, r1, r0, r6
    2f84:	428b      	cmp	r3, r1
    2f86:	bf08      	it	eq
    2f88:	4282      	cmpeq	r2, r0
    2f8a:	d31a      	bcc.n	2fc2 <_mci_sync_write_word+0x9e>
	return ((Sdhc *)hw)->EISTR.reg;
    2f8c:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2f92:	b98b      	cbnz	r3, 2fb8 <_mci_sync_write_word+0x94>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2f94:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    2f96:	f013 0f02 	tst.w	r3, #2
    2f9a:	d0f7      	beq.n	2f8c <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    2f9c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2f9e:	b29b      	uxth	r3, r3
    2fa0:	f043 0302 	orr.w	r3, r3, #2
    2fa4:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    2fa6:	2001      	movs	r0, #1
    2fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2faa:	2000      	movs	r0, #0
    2fac:	e7c3      	b.n	2f36 <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    2fae:	4620      	mov	r0, r4
    2fb0:	4b08      	ldr	r3, [pc, #32]	; (2fd4 <_mci_sync_write_word+0xb0>)
    2fb2:	4798      	blx	r3
				return false;
    2fb4:	2000      	movs	r0, #0
    2fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    2fb8:	4620      	mov	r0, r4
    2fba:	4b06      	ldr	r3, [pc, #24]	; (2fd4 <_mci_sync_write_word+0xb0>)
    2fbc:	4798      	blx	r3
			return false;
    2fbe:	2000      	movs	r0, #0
    2fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    2fc2:	2001      	movs	r0, #1
}
    2fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fc6:	bf00      	nop
    2fc8:	00008780 	.word	0x00008780
    2fcc:	00002715 	.word	0x00002715
    2fd0:	00005f69 	.word	0x00005f69
    2fd4:	00002971 	.word	0x00002971

00002fd8 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    2fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fdc:	460e      	mov	r6, r1
    2fde:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2fe0:	4607      	mov	r7, r0
    2fe2:	b300      	cbz	r0, 3026 <_mci_sync_start_read_blocks+0x4e>
    2fe4:	6800      	ldr	r0, [r0, #0]
    2fe6:	3000      	adds	r0, #0
    2fe8:	bf18      	it	ne
    2fea:	2001      	movne	r0, #1
    2fec:	4d18      	ldr	r5, [pc, #96]	; (3050 <_mci_sync_start_read_blocks+0x78>)
    2fee:	f240 223e 	movw	r2, #574	; 0x23e
    2ff2:	4629      	mov	r1, r5
    2ff4:	4c17      	ldr	r4, [pc, #92]	; (3054 <_mci_sync_start_read_blocks+0x7c>)
    2ff6:	47a0      	blx	r4
	ASSERT(nb_block);
    2ff8:	f240 223f 	movw	r2, #575	; 0x23f
    2ffc:	4629      	mov	r1, r5
    2ffe:	f118 0000 	adds.w	r0, r8, #0
    3002:	bf18      	it	ne
    3004:	2001      	movne	r0, #1
    3006:	47a0      	blx	r4
	ASSERT(dst);
    3008:	f44f 7210 	mov.w	r2, #576	; 0x240
    300c:	4629      	mov	r1, r5
    300e:	1c30      	adds	r0, r6, #0
    3010:	bf18      	it	ne
    3012:	2001      	movne	r0, #1
    3014:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    3016:	8a3d      	ldrh	r5, [r7, #16]
    3018:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    301c:	b1a5      	cbz	r5, 3048 <_mci_sync_start_read_blocks+0x70>
    301e:	2404      	movs	r4, #4
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    3020:	f8df 8034 	ldr.w	r8, [pc, #52]	; 3058 <_mci_sync_start_read_blocks+0x80>
    3024:	e004      	b.n	3030 <_mci_sync_start_read_blocks+0x58>
    3026:	2000      	movs	r0, #0
    3028:	e7e0      	b.n	2fec <_mci_sync_start_read_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    302a:	4426      	add	r6, r4
	while (nb_data) {
    302c:	1b2d      	subs	r5, r5, r4
    302e:	d00b      	beq.n	3048 <_mci_sync_start_read_blocks+0x70>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    3030:	4631      	mov	r1, r6
    3032:	4638      	mov	r0, r7
    3034:	47c0      	blx	r8
		if (nb_data < nbytes) {
    3036:	42ac      	cmp	r4, r5
    3038:	d9f7      	bls.n	302a <_mci_sync_start_read_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    303a:	8a3b      	ldrh	r3, [r7, #16]
    303c:	fb93 f2f4 	sdiv	r2, r3, r4
    3040:	fb04 3412 	mls	r4, r4, r2, r3
    3044:	b2e4      	uxtb	r4, r4
    3046:	e7f0      	b.n	302a <_mci_sync_start_read_blocks+0x52>
	}

	return true;
}
    3048:	2001      	movs	r0, #1
    304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    304e:	bf00      	nop
    3050:	00008780 	.word	0x00008780
    3054:	00002715 	.word	0x00002715
    3058:	00002e15 	.word	0x00002e15

0000305c <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3060:	460e      	mov	r6, r1
    3062:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    3064:	4607      	mov	r7, r0
    3066:	b300      	cbz	r0, 30aa <_mci_sync_start_write_blocks+0x4e>
    3068:	6800      	ldr	r0, [r0, #0]
    306a:	3000      	adds	r0, #0
    306c:	bf18      	it	ne
    306e:	2001      	movne	r0, #1
    3070:	4d18      	ldr	r5, [pc, #96]	; (30d4 <_mci_sync_start_write_blocks+0x78>)
    3072:	f240 225a 	movw	r2, #602	; 0x25a
    3076:	4629      	mov	r1, r5
    3078:	4c17      	ldr	r4, [pc, #92]	; (30d8 <_mci_sync_start_write_blocks+0x7c>)
    307a:	47a0      	blx	r4
	ASSERT(nb_block);
    307c:	f240 225b 	movw	r2, #603	; 0x25b
    3080:	4629      	mov	r1, r5
    3082:	f118 0000 	adds.w	r0, r8, #0
    3086:	bf18      	it	ne
    3088:	2001      	movne	r0, #1
    308a:	47a0      	blx	r4
	ASSERT(src);
    308c:	f44f 7217 	mov.w	r2, #604	; 0x25c
    3090:	4629      	mov	r1, r5
    3092:	1c30      	adds	r0, r6, #0
    3094:	bf18      	it	ne
    3096:	2001      	movne	r0, #1
    3098:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    309a:	8a3d      	ldrh	r5, [r7, #16]
    309c:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    30a0:	b1a5      	cbz	r5, 30cc <_mci_sync_start_write_blocks+0x70>
    30a2:	2404      	movs	r4, #4
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    30a4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 30dc <_mci_sync_start_write_blocks+0x80>
    30a8:	e004      	b.n	30b4 <_mci_sync_start_write_blocks+0x58>
    30aa:	2000      	movs	r0, #0
    30ac:	e7e0      	b.n	3070 <_mci_sync_start_write_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    30ae:	4426      	add	r6, r4
	while (nb_data) {
    30b0:	1b2d      	subs	r5, r5, r4
    30b2:	d00b      	beq.n	30cc <_mci_sync_start_write_blocks+0x70>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    30b4:	6831      	ldr	r1, [r6, #0]
    30b6:	4638      	mov	r0, r7
    30b8:	47c0      	blx	r8
		if (nb_data < nbytes) {
    30ba:	42ac      	cmp	r4, r5
    30bc:	d9f7      	bls.n	30ae <_mci_sync_start_write_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    30be:	8a3b      	ldrh	r3, [r7, #16]
    30c0:	fb93 f2f4 	sdiv	r2, r3, r4
    30c4:	fb04 3412 	mls	r4, r4, r2, r3
    30c8:	b2e4      	uxtb	r4, r4
    30ca:	e7f0      	b.n	30ae <_mci_sync_start_write_blocks+0x52>
	}

	return true;
}
    30cc:	2001      	movs	r0, #1
    30ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30d2:	bf00      	nop
    30d4:	00008780 	.word	0x00008780
    30d8:	00002715 	.word	0x00002715
    30dc:	00002f25 	.word	0x00002f25

000030e0 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    30e0:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    30e2:	b150      	cbz	r0, 30fa <_mci_sync_wait_end_of_read_blocks+0x1a>
    30e4:	6800      	ldr	r0, [r0, #0]
    30e6:	3000      	adds	r0, #0
    30e8:	bf18      	it	ne
    30ea:	2001      	movne	r0, #1
    30ec:	f240 2271 	movw	r2, #625	; 0x271
    30f0:	4903      	ldr	r1, [pc, #12]	; (3100 <_mci_sync_wait_end_of_read_blocks+0x20>)
    30f2:	4b04      	ldr	r3, [pc, #16]	; (3104 <_mci_sync_wait_end_of_read_blocks+0x24>)
    30f4:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    30f6:	2001      	movs	r0, #1
    30f8:	bd08      	pop	{r3, pc}
    30fa:	2000      	movs	r0, #0
    30fc:	e7f6      	b.n	30ec <_mci_sync_wait_end_of_read_blocks+0xc>
    30fe:	bf00      	nop
    3100:	00008780 	.word	0x00008780
    3104:	00002715 	.word	0x00002715

00003108 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    3108:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    310a:	b150      	cbz	r0, 3122 <_mci_sync_wait_end_of_write_blocks+0x1a>
    310c:	6800      	ldr	r0, [r0, #0]
    310e:	3000      	adds	r0, #0
    3110:	bf18      	it	ne
    3112:	2001      	movne	r0, #1
    3114:	f44f 721f 	mov.w	r2, #636	; 0x27c
    3118:	4903      	ldr	r1, [pc, #12]	; (3128 <_mci_sync_wait_end_of_write_blocks+0x20>)
    311a:	4b04      	ldr	r3, [pc, #16]	; (312c <_mci_sync_wait_end_of_write_blocks+0x24>)
    311c:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    311e:	2001      	movs	r0, #1
    3120:	bd08      	pop	{r3, pc}
    3122:	2000      	movs	r0, #0
    3124:	e7f6      	b.n	3114 <_mci_sync_wait_end_of_write_blocks+0xc>
    3126:	bf00      	nop
    3128:	00008780 	.word	0x00008780
    312c:	00002715 	.word	0x00002715

00003130 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3130:	b470      	push	{r4, r5, r6}
    3132:	b089      	sub	sp, #36	; 0x24
    3134:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3136:	466c      	mov	r4, sp
    3138:	4d0d      	ldr	r5, [pc, #52]	; (3170 <_sercom_get_hardware_index+0x40>)
    313a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    313c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    313e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3146:	9b00      	ldr	r3, [sp, #0]
    3148:	42b3      	cmp	r3, r6
    314a:	d00d      	beq.n	3168 <_sercom_get_hardware_index+0x38>
    314c:	4631      	mov	r1, r6
    314e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3150:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3152:	f853 2b04 	ldr.w	r2, [r3], #4
    3156:	428a      	cmp	r2, r1
    3158:	d007      	beq.n	316a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    315a:	3001      	adds	r0, #1
    315c:	2808      	cmp	r0, #8
    315e:	d1f8      	bne.n	3152 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    3160:	2000      	movs	r0, #0
}
    3162:	b009      	add	sp, #36	; 0x24
    3164:	bc70      	pop	{r4, r5, r6}
    3166:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3168:	2000      	movs	r0, #0
			return i;
    316a:	b2c0      	uxtb	r0, r0
    316c:	e7f9      	b.n	3162 <_sercom_get_hardware_index+0x32>
    316e:	bf00      	nop
    3170:	00008798 	.word	0x00008798

00003174 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3174:	b510      	push	{r4, lr}
    3176:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3178:	4b41      	ldr	r3, [pc, #260]	; (3280 <_usart_init+0x10c>)
    317a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    317c:	2800      	cmp	r0, #0
    317e:	d05c      	beq.n	323a <_usart_init+0xc6>
    3180:	2802      	cmp	r0, #2
    3182:	d05c      	beq.n	323e <_usart_init+0xca>
	ASSERT(false);
    3184:	f240 2247 	movw	r2, #583	; 0x247
    3188:	493e      	ldr	r1, [pc, #248]	; (3284 <_usart_init+0x110>)
    318a:	2000      	movs	r0, #0
    318c:	4b3e      	ldr	r3, [pc, #248]	; (3288 <_usart_init+0x114>)
    318e:	4798      	blx	r3
	return 0;
    3190:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3192:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3194:	f013 0f01 	tst.w	r3, #1
    3198:	d122      	bne.n	31e0 <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    319a:	004b      	lsls	r3, r1, #1
    319c:	185a      	adds	r2, r3, r1
    319e:	4b3b      	ldr	r3, [pc, #236]	; (328c <_usart_init+0x118>)
    31a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    31a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    31a6:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31aa:	69e3      	ldr	r3, [r4, #28]
    31ac:	f013 0f03 	tst.w	r3, #3
    31b0:	d1fb      	bne.n	31aa <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    31b2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    31b4:	f013 0f02 	tst.w	r3, #2
    31b8:	d00b      	beq.n	31d2 <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    31ba:	6823      	ldr	r3, [r4, #0]
    31bc:	f023 0302 	bic.w	r3, r3, #2
    31c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31c2:	69e3      	ldr	r3, [r4, #28]
    31c4:	f013 0f03 	tst.w	r3, #3
    31c8:	d1fb      	bne.n	31c2 <_usart_init+0x4e>
    31ca:	69e3      	ldr	r3, [r4, #28]
    31cc:	f013 0f02 	tst.w	r3, #2
    31d0:	d1fb      	bne.n	31ca <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    31d2:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    31d6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31d8:	69e3      	ldr	r3, [r4, #28]
    31da:	f013 0f03 	tst.w	r3, #3
    31de:	d1fb      	bne.n	31d8 <_usart_init+0x64>
    31e0:	69e3      	ldr	r3, [r4, #28]
    31e2:	f013 0f01 	tst.w	r3, #1
    31e6:	d1fb      	bne.n	31e0 <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    31e8:	460a      	mov	r2, r1
    31ea:	004b      	lsls	r3, r1, #1
    31ec:	440b      	add	r3, r1
    31ee:	4927      	ldr	r1, [pc, #156]	; (328c <_usart_init+0x118>)
    31f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    31f4:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    31f6:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31f8:	69e3      	ldr	r3, [r4, #28]
    31fa:	f013 0f03 	tst.w	r3, #3
    31fe:	d1fb      	bne.n	31f8 <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3200:	0053      	lsls	r3, r2, #1
    3202:	1899      	adds	r1, r3, r2
    3204:	4b21      	ldr	r3, [pc, #132]	; (328c <_usart_init+0x118>)
    3206:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    320c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    320e:	69e3      	ldr	r3, [r4, #28]
    3210:	f013 0f1f 	tst.w	r3, #31
    3214:	d1fb      	bne.n	320e <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3216:	0053      	lsls	r3, r2, #1
    3218:	1899      	adds	r1, r3, r2
    321a:	4b1c      	ldr	r3, [pc, #112]	; (328c <_usart_init+0x118>)
    321c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3222:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3224:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3228:	d10b      	bne.n	3242 <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    322a:	0053      	lsls	r3, r2, #1
    322c:	1899      	adds	r1, r3, r2
    322e:	4b17      	ldr	r3, [pc, #92]	; (328c <_usart_init+0x118>)
    3230:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3234:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    3236:	81a3      	strh	r3, [r4, #12]
    3238:	e011      	b.n	325e <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    323a:	2100      	movs	r1, #0
    323c:	e7a9      	b.n	3192 <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
    323e:	2101      	movs	r1, #1
    3240:	e7a7      	b.n	3192 <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3242:	4b12      	ldr	r3, [pc, #72]	; (328c <_usart_init+0x118>)
    3244:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3248:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    324a:	89a1      	ldrh	r1, [r4, #12]
    324c:	f360 010c 	bfi	r1, r0, #0, #13
    3250:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3252:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    3256:	89a3      	ldrh	r3, [r4, #12]
    3258:	f361 334f 	bfi	r3, r1, #13, #3
    325c:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    325e:	4b0b      	ldr	r3, [pc, #44]	; (328c <_usart_init+0x118>)
    3260:	0051      	lsls	r1, r2, #1
    3262:	1888      	adds	r0, r1, r2
    3264:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3268:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    326c:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    326e:	440a      	add	r2, r1
    3270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3274:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3278:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    327c:	2000      	movs	r0, #0
    327e:	bd10      	pop	{r4, pc}
    3280:	00003131 	.word	0x00003131
    3284:	00008800 	.word	0x00008800
    3288:	00002715 	.word	0x00002715
    328c:	00008798 	.word	0x00008798

00003290 <_usart_sync_init>:
{
    3290:	b538      	push	{r3, r4, r5, lr}
    3292:	460c      	mov	r4, r1
	ASSERT(device);
    3294:	4605      	mov	r5, r0
    3296:	22bb      	movs	r2, #187	; 0xbb
    3298:	4905      	ldr	r1, [pc, #20]	; (32b0 <_usart_sync_init+0x20>)
    329a:	3000      	adds	r0, #0
    329c:	bf18      	it	ne
    329e:	2001      	movne	r0, #1
    32a0:	4b04      	ldr	r3, [pc, #16]	; (32b4 <_usart_sync_init+0x24>)
    32a2:	4798      	blx	r3
	device->hw = hw;
    32a4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    32a6:	4620      	mov	r0, r4
    32a8:	4b03      	ldr	r3, [pc, #12]	; (32b8 <_usart_sync_init+0x28>)
    32aa:	4798      	blx	r3
}
    32ac:	bd38      	pop	{r3, r4, r5, pc}
    32ae:	bf00      	nop
    32b0:	00008800 	.word	0x00008800
    32b4:	00002715 	.word	0x00002715
    32b8:	00003175 	.word	0x00003175

000032bc <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    32bc:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    32be:	6813      	ldr	r3, [r2, #0]
    32c0:	f043 0302 	orr.w	r3, r3, #2
    32c4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    32c6:	69d3      	ldr	r3, [r2, #28]
    32c8:	f013 0f03 	tst.w	r3, #3
    32cc:	d1fb      	bne.n	32c6 <_usart_sync_enable+0xa>
}
    32ce:	4770      	bx	lr

000032d0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    32d0:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    32d2:	6299      	str	r1, [r3, #40]	; 0x28
    32d4:	4770      	bx	lr

000032d6 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    32d6:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    32d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    32da:	b2c0      	uxtb	r0, r0
    32dc:	4770      	bx	lr

000032de <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    32de:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    32e0:	7e18      	ldrb	r0, [r3, #24]
}
    32e2:	f000 0001 	and.w	r0, r0, #1
    32e6:	4770      	bx	lr

000032e8 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    32e8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    32ea:	7e18      	ldrb	r0, [r3, #24]
}
    32ec:	f3c0 0040 	ubfx	r0, r0, #1, #1
    32f0:	4770      	bx	lr

000032f2 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    32f2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    32f4:	7e18      	ldrb	r0, [r3, #24]
}
    32f6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    32fa:	4770      	bx	lr

000032fc <HardFault_Handler>:
  * and passes it to the handler written in C as a pointer. Also extracts the LR
  * value as the second parameter
  */
void HardFault_Handler(void)
{
	__asm volatile
    32fc:	f01e 0f04 	tst.w	lr, #4
    3300:	bf0c      	ite	eq
    3302:	f3ef 8008 	mrseq	r0, MSP
    3306:	f3ef 8009 	mrsne	r0, PSP
    330a:	4671      	mov	r1, lr
    330c:	f000 b800 	b.w	3310 <HardFault_Handler_C>

00003310 <HardFault_Handler_C>:
/**
  * HardFault Handler in C, with stack frame location and LR value extracted from
  * assembly wrapper as input parameters. Same for all Cortex-M4 Processors.
  */
void HardFault_Handler_C(unsigned int * hardfault_args, unsigned int lr_value)
{	
    3310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3314:	b087      	sub	sp, #28
    3316:	9105      	str	r1, [sp, #20]
	unsigned int stacked_psr;
	uint32_t cfsr;
	uint32_t bus_fault_address;
	uint32_t memmanage_fault_address;
	
	bus_fault_address       = SCB->BFAR;
    3318:	4e38      	ldr	r6, [pc, #224]	; (33fc <HardFault_Handler_C+0xec>)
    331a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    331c:	9300      	str	r3, [sp, #0]
	memmanage_fault_address = SCB->MMFAR;
    331e:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3320:	9201      	str	r2, [sp, #4]
	cfsr                    = SCB->CFSR;
    3322:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	
	stacked_r0  = ((unsigned int) hardfault_args[0]);
    3324:	6804      	ldr	r4, [r0, #0]
	stacked_r1  = ((unsigned int) hardfault_args[1]);
    3326:	f8d0 b004 	ldr.w	fp, [r0, #4]
	stacked_r2  = ((unsigned int) hardfault_args[2]);
    332a:	f8d0 a008 	ldr.w	sl, [r0, #8]
	stacked_r3  = ((unsigned int) hardfault_args[3]);
    332e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	stacked_r12 = ((unsigned int) hardfault_args[4]);
    3332:	f8d0 8010 	ldr.w	r8, [r0, #16]
	stacked_lr  = ((unsigned int) hardfault_args[5]);
    3336:	6945      	ldr	r5, [r0, #20]
    3338:	9502      	str	r5, [sp, #8]
	stacked_pc  = ((unsigned int) hardfault_args[6]);
    333a:	6983      	ldr	r3, [r0, #24]
    333c:	9303      	str	r3, [sp, #12]
	stacked_psr = ((unsigned int) hardfault_args[7]);
    333e:	69c0      	ldr	r0, [r0, #28]
    3340:	9004      	str	r0, [sp, #16]
	
	printf("[HardFault]\r\n");
    3342:	482f      	ldr	r0, [pc, #188]	; (3400 <HardFault_Handler_C+0xf0>)
    3344:	4d2f      	ldr	r5, [pc, #188]	; (3404 <HardFault_Handler_C+0xf4>)
    3346:	47a8      	blx	r5
	printf(" | Stack frame:\r\n");
    3348:	482f      	ldr	r0, [pc, #188]	; (3408 <HardFault_Handler_C+0xf8>)
    334a:	47a8      	blx	r5
	printf(" | | R0   = 0x%08X\r\n", (unsigned)stacked_r0);
    334c:	4621      	mov	r1, r4
    334e:	482f      	ldr	r0, [pc, #188]	; (340c <HardFault_Handler_C+0xfc>)
    3350:	4c2f      	ldr	r4, [pc, #188]	; (3410 <HardFault_Handler_C+0x100>)
    3352:	47a0      	blx	r4
	printf(" | | R1   = 0x%08X\r\n", (unsigned)stacked_r1);
    3354:	4659      	mov	r1, fp
    3356:	482f      	ldr	r0, [pc, #188]	; (3414 <HardFault_Handler_C+0x104>)
    3358:	47a0      	blx	r4
	printf(" | | R2   = 0x%08X\r\n", (unsigned)stacked_r2);
    335a:	4651      	mov	r1, sl
    335c:	482e      	ldr	r0, [pc, #184]	; (3418 <HardFault_Handler_C+0x108>)
    335e:	47a0      	blx	r4
	printf(" | | R3   = 0x%08X\r\n", (unsigned)stacked_r3);
    3360:	4649      	mov	r1, r9
    3362:	482e      	ldr	r0, [pc, #184]	; (341c <HardFault_Handler_C+0x10c>)
    3364:	47a0      	blx	r4
	printf(" | | R12  = 0x%08X\r\n", (unsigned)stacked_r12);
    3366:	4641      	mov	r1, r8
    3368:	482d      	ldr	r0, [pc, #180]	; (3420 <HardFault_Handler_C+0x110>)
    336a:	47a0      	blx	r4
	printf(" | | LR   = 0x%08X\r\n", (unsigned)stacked_lr);
    336c:	9902      	ldr	r1, [sp, #8]
    336e:	482d      	ldr	r0, [pc, #180]	; (3424 <HardFault_Handler_C+0x114>)
    3370:	47a0      	blx	r4
	printf(" | | PC   = 0x%08X\r\n", (unsigned)stacked_pc);
    3372:	9903      	ldr	r1, [sp, #12]
    3374:	482c      	ldr	r0, [pc, #176]	; (3428 <HardFault_Handler_C+0x118>)
    3376:	47a0      	blx	r4
	printf(" | | PSR  = 0x%08X\r\n", (unsigned)stacked_psr);
    3378:	9904      	ldr	r1, [sp, #16]
    337a:	482c      	ldr	r0, [pc, #176]	; (342c <HardFault_Handler_C+0x11c>)
    337c:	47a0      	blx	r4
	printf(" | FSR/FAR:\r\n");
    337e:	482c      	ldr	r0, [pc, #176]	; (3430 <HardFault_Handler_C+0x120>)
    3380:	47a8      	blx	r5
	
	printf(" | | Configurable Fault Status Register\r\n");
    3382:	482c      	ldr	r0, [pc, #176]	; (3434 <HardFault_Handler_C+0x124>)
    3384:	47a8      	blx	r5
	printf(" | | | CFSR  = 0x%08X\r\n", (unsigned)cfsr);
    3386:	4639      	mov	r1, r7
    3388:	482b      	ldr	r0, [pc, #172]	; (3438 <HardFault_Handler_C+0x128>)
    338a:	47a0      	blx	r4
	printf(" | | | | MemManage Status Register\r\n");
    338c:	482b      	ldr	r0, [pc, #172]	; (343c <HardFault_Handler_C+0x12c>)
    338e:	47a8      	blx	r5
	printf(" | | | | | MMFSR = 0x%02X\r\n", (unsigned)(cfsr & 0xFF));
    3390:	b2f9      	uxtb	r1, r7
    3392:	482b      	ldr	r0, [pc, #172]	; (3440 <HardFault_Handler_C+0x130>)
    3394:	47a0      	blx	r4
	printf(" | | | | BusFault Status Register\r\n");
    3396:	482b      	ldr	r0, [pc, #172]	; (3444 <HardFault_Handler_C+0x134>)
    3398:	47a8      	blx	r5
	printf(" | | | | | BFSR = 0x%02X\r\n", (unsigned)((cfsr >> 8) & 0xFF));
    339a:	f3c7 2107 	ubfx	r1, r7, #8, #8
    339e:	482a      	ldr	r0, [pc, #168]	; (3448 <HardFault_Handler_C+0x138>)
    33a0:	47a0      	blx	r4
	printf(" | | | | UsageFault Status Register\r\n");
    33a2:	482a      	ldr	r0, [pc, #168]	; (344c <HardFault_Handler_C+0x13c>)
    33a4:	47a8      	blx	r5
	printf(" | | | | | UFSR = 0x%02X\r\n", (unsigned)((cfsr >> 16) & 0xFF));
    33a6:	f3c7 4107 	ubfx	r1, r7, #16, #8
    33aa:	4829      	ldr	r0, [pc, #164]	; (3450 <HardFault_Handler_C+0x140>)
    33ac:	47a0      	blx	r4
	
	printf(" | | MemManage Address Register (validity: %X)\r\n", (unsigned)((cfsr >> 7) & 0x1));
    33ae:	f3c7 11c0 	ubfx	r1, r7, #7, #1
    33b2:	4828      	ldr	r0, [pc, #160]	; (3454 <HardFault_Handler_C+0x144>)
    33b4:	47a0      	blx	r4
	printf(" | | | MMFAR = 0x%08X\r\n", (unsigned)memmanage_fault_address);
    33b6:	9901      	ldr	r1, [sp, #4]
    33b8:	4827      	ldr	r0, [pc, #156]	; (3458 <HardFault_Handler_C+0x148>)
    33ba:	47a0      	blx	r4
	printf(" | | BusFault Address Register  (validity: %X)\r\n", (unsigned)((cfsr >> 15) & 0x1));
    33bc:	f3c7 31c0 	ubfx	r1, r7, #15, #1
    33c0:	4826      	ldr	r0, [pc, #152]	; (345c <HardFault_Handler_C+0x14c>)
    33c2:	47a0      	blx	r4
	printf(" | | | BFAR = 0x%08X\r\n", (unsigned)bus_fault_address);
    33c4:	9900      	ldr	r1, [sp, #0]
    33c6:	4826      	ldr	r0, [pc, #152]	; (3460 <HardFault_Handler_C+0x150>)
    33c8:	47a0      	blx	r4
	
	printf(" | | Hard Fault Status Register\r\n");
    33ca:	4826      	ldr	r0, [pc, #152]	; (3464 <HardFault_Handler_C+0x154>)
    33cc:	47a8      	blx	r5
	printf(" | | | HFSR  = 0x%08X\r\n", (unsigned)SCB->HFSR);
    33ce:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    33d0:	4825      	ldr	r0, [pc, #148]	; (3468 <HardFault_Handler_C+0x158>)
    33d2:	47a0      	blx	r4
	
	printf(" | | DFSR = 0x%08X\r\n", (unsigned)SCB->DFSR);
    33d4:	6b31      	ldr	r1, [r6, #48]	; 0x30
    33d6:	4825      	ldr	r0, [pc, #148]	; (346c <HardFault_Handler_C+0x15c>)
    33d8:	47a0      	blx	r4
	printf(" | | AFSR = 0x%08X\r\n", (unsigned)SCB->AFSR);
    33da:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    33dc:	4824      	ldr	r0, [pc, #144]	; (3470 <HardFault_Handler_C+0x160>)
    33de:	47a0      	blx	r4

	printf(" | Misc\r\n");
    33e0:	4824      	ldr	r0, [pc, #144]	; (3474 <HardFault_Handler_C+0x164>)
    33e2:	47a8      	blx	r5
	printf(" | | LR/EXC_RETURN= 0x%04X\r\n", (unsigned)lr_value);
    33e4:	9905      	ldr	r1, [sp, #20]
    33e6:	4824      	ldr	r0, [pc, #144]	; (3478 <HardFault_Handler_C+0x168>)
    33e8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    33ea:	4f24      	ldr	r7, [pc, #144]	; (347c <HardFault_Handler_C+0x16c>)
    33ec:	2640      	movs	r6, #64	; 0x40
	
	while (1) {
		gpio_toggle_pin_level(LED_STATUS);
		delay_ms(BLINK_ERROR);
    33ee:	2564      	movs	r5, #100	; 0x64
    33f0:	4c23      	ldr	r4, [pc, #140]	; (3480 <HardFault_Handler_C+0x170>)
    33f2:	61fe      	str	r6, [r7, #28]
    33f4:	4628      	mov	r0, r5
    33f6:	47a0      	blx	r4
    33f8:	e7fb      	b.n	33f2 <HardFault_Handler_C+0xe2>
    33fa:	bf00      	nop
    33fc:	e000ed00 	.word	0xe000ed00
    3400:	0000881c 	.word	0x0000881c
    3404:	00006865 	.word	0x00006865
    3408:	0000882c 	.word	0x0000882c
    340c:	00008840 	.word	0x00008840
    3410:	0000677d 	.word	0x0000677d
    3414:	00008858 	.word	0x00008858
    3418:	00008870 	.word	0x00008870
    341c:	00008888 	.word	0x00008888
    3420:	000088a0 	.word	0x000088a0
    3424:	000088b8 	.word	0x000088b8
    3428:	000088d0 	.word	0x000088d0
    342c:	000088e8 	.word	0x000088e8
    3430:	00008900 	.word	0x00008900
    3434:	00008910 	.word	0x00008910
    3438:	0000893c 	.word	0x0000893c
    343c:	00008954 	.word	0x00008954
    3440:	00008978 	.word	0x00008978
    3444:	00008994 	.word	0x00008994
    3448:	000089b8 	.word	0x000089b8
    344c:	000089d4 	.word	0x000089d4
    3450:	000089fc 	.word	0x000089fc
    3454:	00008a18 	.word	0x00008a18
    3458:	00008a4c 	.word	0x00008a4c
    345c:	00008a64 	.word	0x00008a64
    3460:	00008a98 	.word	0x00008a98
    3464:	00008ab0 	.word	0x00008ab0
    3468:	00008ad4 	.word	0x00008ad4
    346c:	00008aec 	.word	0x00008aec
    3470:	00008b04 	.word	0x00008b04
    3474:	00008b1c 	.word	0x00008b1c
    3478:	00008b28 	.word	0x00008b28
    347c:	41008000 	.word	0x41008000
    3480:	00002265 	.word	0x00002265

00003484 <SysTick_Handler>:
/**
  *	SysTick Handler
  */
void SysTick_Handler(void)
{
	systick_count++;
    3484:	4a1b      	ldr	r2, [pc, #108]	; (34f4 <SysTick_Handler+0x70>)
    3486:	6813      	ldr	r3, [r2, #0]
    3488:	3301      	adds	r3, #1
    348a:	6013      	str	r3, [r2, #0]
	
	/* LIDAR STOP and RESET requests/responses */
	if (lidar_timer > 0) {
    348c:	4b1a      	ldr	r3, [pc, #104]	; (34f8 <SysTick_Handler+0x74>)
    348e:	881b      	ldrh	r3, [r3, #0]
    3490:	b29b      	uxth	r3, r3
    3492:	b123      	cbz	r3, 349e <SysTick_Handler+0x1a>
		//if (DEBUG) {
			//printf("lidar_timer = %u\r\n", lidar_timer);
		//}
		lidar_timer--;
    3494:	4a18      	ldr	r2, [pc, #96]	; (34f8 <SysTick_Handler+0x74>)
    3496:	8813      	ldrh	r3, [r2, #0]
    3498:	3b01      	subs	r3, #1
    349a:	b29b      	uxth	r3, r3
    349c:	8013      	strh	r3, [r2, #0]
	}
	
	switch (status) {
    349e:	4b17      	ldr	r3, [pc, #92]	; (34fc <SysTick_Handler+0x78>)
    34a0:	781b      	ldrb	r3, [r3, #0]
    34a2:	b2db      	uxtb	r3, r3
    34a4:	2b01      	cmp	r3, #1
    34a6:	d007      	beq.n	34b8 <SysTick_Handler+0x34>
    34a8:	b113      	cbz	r3, 34b0 <SysTick_Handler+0x2c>
    34aa:	2b02      	cmp	r3, #2
    34ac:	d013      	beq.n	34d6 <SysTick_Handler+0x52>
    34ae:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34b0:	2240      	movs	r2, #64	; 0x40
    34b2:	4b13      	ldr	r3, [pc, #76]	; (3500 <SysTick_Handler+0x7c>)
    34b4:	619a      	str	r2, [r3, #24]
    34b6:	4770      	bx	lr
		case STATUS_IDLE: /* Solid light */
			gpio_set_pin_level(LED_STATUS, true);
			break;
		case STATUS_PROCESSING:
			if (systick_count % BLINK_PROCESSING == 0)
    34b8:	4b0e      	ldr	r3, [pc, #56]	; (34f4 <SysTick_Handler+0x70>)
    34ba:	681a      	ldr	r2, [r3, #0]
    34bc:	4b11      	ldr	r3, [pc, #68]	; (3504 <SysTick_Handler+0x80>)
    34be:	fba3 1302 	umull	r1, r3, r3, r2
    34c2:	095b      	lsrs	r3, r3, #5
    34c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    34c8:	fb01 2313 	mls	r3, r1, r3, r2
    34cc:	b983      	cbnz	r3, 34f0 <SysTick_Handler+0x6c>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    34ce:	2240      	movs	r2, #64	; 0x40
    34d0:	4b0b      	ldr	r3, [pc, #44]	; (3500 <SysTick_Handler+0x7c>)
    34d2:	61da      	str	r2, [r3, #28]
    34d4:	4770      	bx	lr
				gpio_toggle_pin_level(LED_STATUS);
			break;
		case STATUS_ERROR:
			if (systick_count % BLINK_ERROR == 0)
    34d6:	4b07      	ldr	r3, [pc, #28]	; (34f4 <SysTick_Handler+0x70>)
    34d8:	681a      	ldr	r2, [r3, #0]
    34da:	4b0b      	ldr	r3, [pc, #44]	; (3508 <SysTick_Handler+0x84>)
    34dc:	fba3 1302 	umull	r1, r3, r3, r2
    34e0:	095b      	lsrs	r3, r3, #5
    34e2:	2164      	movs	r1, #100	; 0x64
    34e4:	fb01 2313 	mls	r3, r1, r3, r2
    34e8:	b913      	cbnz	r3, 34f0 <SysTick_Handler+0x6c>
    34ea:	2240      	movs	r2, #64	; 0x40
    34ec:	4b04      	ldr	r3, [pc, #16]	; (3500 <SysTick_Handler+0x7c>)
    34ee:	61da      	str	r2, [r3, #28]
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	20000558 	.word	0x20000558
    34f8:	20001008 	.word	0x20001008
    34fc:	20001011 	.word	0x20001011
    3500:	41008000 	.word	0x41008000
    3504:	10624dd3 	.word	0x10624dd3
    3508:	51eb851f 	.word	0x51eb851f

0000350c <SDMMC_init>:

/**
  *	Initializes SD MMC stack
  */
void SDMMC_init(void)
{
    350c:	b508      	push	{r3, lr}
	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    350e:	4903      	ldr	r1, [pc, #12]	; (351c <SDMMC_init+0x10>)
    3510:	460a      	mov	r2, r1
    3512:	3104      	adds	r1, #4
    3514:	4802      	ldr	r0, [pc, #8]	; (3520 <SDMMC_init+0x14>)
    3516:	4b03      	ldr	r3, [pc, #12]	; (3524 <SDMMC_init+0x18>)
    3518:	4798      	blx	r3
    351a:	bd08      	pop	{r3, pc}
    351c:	20000084 	.word	0x20000084
    3520:	20000b58 	.word	0x20000b58
    3524:	00004a0d 	.word	0x00004a0d

00003528 <SD_menu>:
uint8_t sd_menu_txt[] = "\r\n ******** Enter choice ******** \r\n \
1. Back to main menu\r\n \
2. Write file\r\n";

void SD_menu(void)
{
    3528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    352c:	f5ad 6dc1 	sub.w	sp, sp, #1544	; 0x608
	uint16_t user_selection = 0;
    3530:	2400      	movs	r4, #0
    3532:	f8ad 4606 	strh.w	r4, [sp, #1542]	; 0x606
	TCHAR filename[FILENAME_MAX] = {0};
    3536:	f44f 6280 	mov.w	r2, #1024	; 0x400
    353a:	4621      	mov	r1, r4
    353c:	a881      	add	r0, sp, #516	; 0x204
    353e:	4d22      	ldr	r5, [pc, #136]	; (35c8 <SD_menu+0xa0>)
    3540:	47a8      	blx	r5
	char data[512] = {0};
    3542:	f44f 7200 	mov.w	r2, #512	; 0x200
    3546:	4621      	mov	r1, r4
    3548:	a801      	add	r0, sp, #4
    354a:	47a8      	blx	r5
	
	while (1) {
		printf("%s", sd_menu_txt);
    354c:	4e1f      	ldr	r6, [pc, #124]	; (35cc <SD_menu+0xa4>)
    354e:	4d20      	ldr	r5, [pc, #128]	; (35d0 <SD_menu+0xa8>)
    3550:	4c20      	ldr	r4, [pc, #128]	; (35d4 <SD_menu+0xac>)
    3552:	e004      	b.n	355e <SD_menu+0x36>
		
		if (scanf("%hx", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    3554:	4b20      	ldr	r3, [pc, #128]	; (35d8 <SD_menu+0xb0>)
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	6858      	ldr	r0, [r3, #4]
    355a:	4b20      	ldr	r3, [pc, #128]	; (35dc <SD_menu+0xb4>)
    355c:	4798      	blx	r3
		printf("%s", sd_menu_txt);
    355e:	4631      	mov	r1, r6
    3560:	4628      	mov	r0, r5
    3562:	47a0      	blx	r4
		if (scanf("%hx", &user_selection) == 0) {
    3564:	f20d 6106 	addw	r1, sp, #1542	; 0x606
    3568:	481d      	ldr	r0, [pc, #116]	; (35e0 <SD_menu+0xb8>)
    356a:	4b1e      	ldr	r3, [pc, #120]	; (35e4 <SD_menu+0xbc>)
    356c:	4798      	blx	r3
    356e:	2800      	cmp	r0, #0
    3570:	d0f0      	beq.n	3554 <SD_menu+0x2c>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    3572:	f8bd 1606 	ldrh.w	r1, [sp, #1542]	; 0x606
    3576:	481c      	ldr	r0, [pc, #112]	; (35e8 <SD_menu+0xc0>)
    3578:	47a0      	blx	r4
		
		switch (user_selection) {
    357a:	f8bd 3606 	ldrh.w	r3, [sp, #1542]	; 0x606
    357e:	2b01      	cmp	r3, #1
    3580:	d01b      	beq.n	35ba <SD_menu+0x92>
    3582:	2b02      	cmp	r3, #2
    3584:	d1eb      	bne.n	355e <SD_menu+0x36>
			case 1:
			printf("\r\nReturning to main menu\r\n");
			return;
			
			case 2:
				printf("\r\nEnter filename >> ");
    3586:	4819      	ldr	r0, [pc, #100]	; (35ec <SD_menu+0xc4>)
    3588:	47a0      	blx	r4
				scanf("%s", filename);
    358a:	a981      	add	r1, sp, #516	; 0x204
    358c:	4628      	mov	r0, r5
    358e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 35e4 <SD_menu+0xbc>
    3592:	47c0      	blx	r8
				printf("%s\r\n", filename);
    3594:	4f16      	ldr	r7, [pc, #88]	; (35f0 <SD_menu+0xc8>)
    3596:	a981      	add	r1, sp, #516	; 0x204
    3598:	4638      	mov	r0, r7
    359a:	47a0      	blx	r4
				
				printf("Enter data >> ");
    359c:	4815      	ldr	r0, [pc, #84]	; (35f4 <SD_menu+0xcc>)
    359e:	47a0      	blx	r4
				scanf("%s", data);
    35a0:	a901      	add	r1, sp, #4
    35a2:	4628      	mov	r0, r5
    35a4:	47c0      	blx	r8
				printf("%s\r\n", data);
    35a6:	a901      	add	r1, sp, #4
    35a8:	4638      	mov	r0, r7
    35aa:	47a0      	blx	r4
				
				FATFS_write_file(filename, data, 512);
    35ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    35b0:	a901      	add	r1, sp, #4
    35b2:	a881      	add	r0, sp, #516	; 0x204
    35b4:	4b10      	ldr	r3, [pc, #64]	; (35f8 <SD_menu+0xd0>)
    35b6:	4798      	blx	r3
				break;
    35b8:	e7d1      	b.n	355e <SD_menu+0x36>
			printf("\r\nReturning to main menu\r\n");
    35ba:	4810      	ldr	r0, [pc, #64]	; (35fc <SD_menu+0xd4>)
    35bc:	4b10      	ldr	r3, [pc, #64]	; (3600 <SD_menu+0xd8>)
    35be:	4798      	blx	r3
		}
	}
    35c0:	f50d 6dc1 	add.w	sp, sp, #1544	; 0x608
    35c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35c8:	00006615 	.word	0x00006615
    35cc:	2000008c 	.word	0x2000008c
    35d0:	00008584 	.word	0x00008584
    35d4:	0000677d 	.word	0x0000677d
    35d8:	200002dc 	.word	0x200002dc
    35dc:	000063dd 	.word	0x000063dd
    35e0:	00008b48 	.word	0x00008b48
    35e4:	00006895 	.word	0x00006895
    35e8:	00008588 	.word	0x00008588
    35ec:	00008b4c 	.word	0x00008b4c
    35f0:	00008e58 	.word	0x00008e58
    35f4:	00008b64 	.word	0x00008b64
    35f8:	00000c11 	.word	0x00000c11
    35fc:	000085a4 	.word	0x000085a4
    3600:	00006865 	.word	0x00006865

00003604 <LIDAR_PWM_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    3604:	4a3b      	ldr	r2, [pc, #236]	; (36f4 <LIDAR_PWM_init+0xf0>)
    3606:	69d3      	ldr	r3, [r2, #28]
    3608:	f043 0320 	orr.w	r3, r3, #32
    360c:	61d3      	str	r3, [r2, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    360e:	2240      	movs	r2, #64	; 0x40
    3610:	4b39      	ldr	r3, [pc, #228]	; (36f8 <LIDAR_PWM_init+0xf4>)
    3612:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3616:	4b39      	ldr	r3, [pc, #228]	; (36fc <LIDAR_PWM_init+0xf8>)
    3618:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    361c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3620:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3624:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3628:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    362c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3634:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3638:	f44f 7100 	mov.w	r1, #512	; 0x200
    363c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3640:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3644:	f042 0204 	orr.w	r2, r2, #4
    3648:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    364c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3650:	4b2b      	ldr	r3, [pc, #172]	; (3700 <LIDAR_PWM_init+0xfc>)
    3652:	691b      	ldr	r3, [r3, #16]
void LIDAR_PWM_init(void)
{
	LIDAR_PWM_CLOCK_init();
	LIDAR_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    3654:	f013 0f01 	tst.w	r3, #1
    3658:	d11f      	bne.n	369a <LIDAR_PWM_init+0x96>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    365a:	4a29      	ldr	r2, [pc, #164]	; (3700 <LIDAR_PWM_init+0xfc>)
    365c:	6913      	ldr	r3, [r2, #16]
    365e:	f013 0f03 	tst.w	r3, #3
    3662:	d1fb      	bne.n	365c <LIDAR_PWM_init+0x58>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3664:	4b26      	ldr	r3, [pc, #152]	; (3700 <LIDAR_PWM_init+0xfc>)
    3666:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    3668:	f013 0f02 	tst.w	r3, #2
    366c:	d00d      	beq.n	368a <LIDAR_PWM_init+0x86>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    366e:	4a24      	ldr	r2, [pc, #144]	; (3700 <LIDAR_PWM_init+0xfc>)
    3670:	6813      	ldr	r3, [r2, #0]
    3672:	f023 0302 	bic.w	r3, r3, #2
    3676:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3678:	6913      	ldr	r3, [r2, #16]
    367a:	f013 0f03 	tst.w	r3, #3
    367e:	d1fb      	bne.n	3678 <LIDAR_PWM_init+0x74>
    3680:	4a1f      	ldr	r2, [pc, #124]	; (3700 <LIDAR_PWM_init+0xfc>)
    3682:	6913      	ldr	r3, [r2, #16]
    3684:	f013 0f02 	tst.w	r3, #2
    3688:	d1fb      	bne.n	3682 <LIDAR_PWM_init+0x7e>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    368a:	2201      	movs	r2, #1
    368c:	4b1c      	ldr	r3, [pc, #112]	; (3700 <LIDAR_PWM_init+0xfc>)
    368e:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3690:	461a      	mov	r2, r3
    3692:	6913      	ldr	r3, [r2, #16]
    3694:	f013 0f03 	tst.w	r3, #3
    3698:	d1fb      	bne.n	3692 <LIDAR_PWM_init+0x8e>
    369a:	4a19      	ldr	r2, [pc, #100]	; (3700 <LIDAR_PWM_init+0xfc>)
    369c:	6913      	ldr	r3, [r2, #16]
    369e:	f013 0f01 	tst.w	r3, #1
    36a2:	d1fb      	bne.n	369c <LIDAR_PWM_init+0x98>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    36a4:	4a17      	ldr	r2, [pc, #92]	; (3704 <LIDAR_PWM_init+0x100>)
    36a6:	4b16      	ldr	r3, [pc, #88]	; (3700 <LIDAR_PWM_init+0xfc>)
    36a8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    36aa:	461a      	mov	r2, r3
    36ac:	6913      	ldr	r3, [r2, #16]
    36ae:	f013 0f03 	tst.w	r3, #3
    36b2:	d1fb      	bne.n	36ac <LIDAR_PWM_init+0xa8>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    36b4:	4b12      	ldr	r3, [pc, #72]	; (3700 <LIDAR_PWM_init+0xfc>)
    36b6:	2200      	movs	r2, #0
    36b8:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    36ba:	22ff      	movs	r2, #255	; 0xff
    36bc:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    36be:	2203      	movs	r2, #3
    36c0:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    36c2:	223c      	movs	r2, #60	; 0x3c
    36c4:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    36c6:	461a      	mov	r2, r3
    36c8:	6913      	ldr	r3, [r2, #16]
    36ca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    36ce:	d1fb      	bne.n	36c8 <LIDAR_PWM_init+0xc4>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    36d0:	2200      	movs	r2, #0
    36d2:	4b0b      	ldr	r3, [pc, #44]	; (3700 <LIDAR_PWM_init+0xfc>)
    36d4:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    36d6:	461a      	mov	r2, r3
    36d8:	6913      	ldr	r3, [r2, #16]
    36da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    36de:	d1fb      	bne.n	36d8 <LIDAR_PWM_init+0xd4>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    36e0:	4a07      	ldr	r2, [pc, #28]	; (3700 <LIDAR_PWM_init+0xfc>)
    36e2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    36e4:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    36e8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    36ea:	6913      	ldr	r3, [r2, #16]
    36ec:	f013 0f03 	tst.w	r3, #3
    36f0:	d1fb      	bne.n	36ea <LIDAR_PWM_init+0xe6>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
    36f2:	4770      	bx	lr
    36f4:	40000800 	.word	0x40000800
    36f8:	40001c00 	.word	0x40001c00
    36fc:	41008000 	.word	0x41008000
    3700:	42001400 	.word	0x42001400
    3704:	12000310 	.word	0x12000310

00003708 <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3708:	4b19      	ldr	r3, [pc, #100]	; (3770 <LIDAR_PWM_start+0x68>)
    370a:	691b      	ldr	r3, [r3, #16]
/**
  * Starts LiDAR PWM motor
  */ 
void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    370c:	f013 0f01 	tst.w	r3, #1
    3710:	d117      	bne.n	3742 <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3712:	4a17      	ldr	r2, [pc, #92]	; (3770 <LIDAR_PWM_start+0x68>)
    3714:	6913      	ldr	r3, [r2, #16]
    3716:	f013 0f03 	tst.w	r3, #3
    371a:	d1fb      	bne.n	3714 <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    371c:	4b14      	ldr	r3, [pc, #80]	; (3770 <LIDAR_PWM_start+0x68>)
    371e:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    3720:	f013 0f02 	tst.w	r3, #2
    3724:	d00d      	beq.n	3742 <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3726:	4a12      	ldr	r2, [pc, #72]	; (3770 <LIDAR_PWM_start+0x68>)
    3728:	6813      	ldr	r3, [r2, #0]
    372a:	f023 0302 	bic.w	r3, r3, #2
    372e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3730:	6913      	ldr	r3, [r2, #16]
    3732:	f013 0f03 	tst.w	r3, #3
    3736:	d1fb      	bne.n	3730 <LIDAR_PWM_start+0x28>
    3738:	4a0d      	ldr	r2, [pc, #52]	; (3770 <LIDAR_PWM_start+0x68>)
    373a:	6913      	ldr	r3, [r2, #16]
    373c:	f013 0f02 	tst.w	r3, #2
    3740:	d1fb      	bne.n	373a <LIDAR_PWM_start+0x32>
    3742:	4a0b      	ldr	r2, [pc, #44]	; (3770 <LIDAR_PWM_start+0x68>)
    3744:	6913      	ldr	r3, [r2, #16]
    3746:	f013 0f01 	tst.w	r3, #1
    374a:	d1fb      	bne.n	3744 <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    374c:	2224      	movs	r2, #36	; 0x24
    374e:	4b08      	ldr	r3, [pc, #32]	; (3770 <LIDAR_PWM_start+0x68>)
    3750:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3752:	461a      	mov	r2, r3
    3754:	6913      	ldr	r3, [r2, #16]
    3756:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    375a:	d1fb      	bne.n	3754 <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    375c:	4a04      	ldr	r2, [pc, #16]	; (3770 <LIDAR_PWM_start+0x68>)
    375e:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3760:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3764:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3766:	6913      	ldr	r3, [r2, #16]
    3768:	f013 0f03 	tst.w	r3, #3
    376c:	d1fb      	bne.n	3766 <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    376e:	4770      	bx	lr
    3770:	42001400 	.word	0x42001400

00003774 <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3774:	4b19      	ldr	r3, [pc, #100]	; (37dc <LIDAR_PWM_stop+0x68>)
    3776:	691b      	ldr	r3, [r3, #16]
/**
  * Stops LiDAR PWM motor
  */ 
void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    3778:	f013 0f01 	tst.w	r3, #1
    377c:	d117      	bne.n	37ae <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    377e:	4a17      	ldr	r2, [pc, #92]	; (37dc <LIDAR_PWM_stop+0x68>)
    3780:	6913      	ldr	r3, [r2, #16]
    3782:	f013 0f03 	tst.w	r3, #3
    3786:	d1fb      	bne.n	3780 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3788:	4b14      	ldr	r3, [pc, #80]	; (37dc <LIDAR_PWM_stop+0x68>)
    378a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    378c:	f013 0f02 	tst.w	r3, #2
    3790:	d00d      	beq.n	37ae <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3792:	4a12      	ldr	r2, [pc, #72]	; (37dc <LIDAR_PWM_stop+0x68>)
    3794:	6813      	ldr	r3, [r2, #0]
    3796:	f023 0302 	bic.w	r3, r3, #2
    379a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    379c:	6913      	ldr	r3, [r2, #16]
    379e:	f013 0f03 	tst.w	r3, #3
    37a2:	d1fb      	bne.n	379c <LIDAR_PWM_stop+0x28>
    37a4:	4a0d      	ldr	r2, [pc, #52]	; (37dc <LIDAR_PWM_stop+0x68>)
    37a6:	6913      	ldr	r3, [r2, #16]
    37a8:	f013 0f02 	tst.w	r3, #2
    37ac:	d1fb      	bne.n	37a6 <LIDAR_PWM_stop+0x32>
    37ae:	4a0b      	ldr	r2, [pc, #44]	; (37dc <LIDAR_PWM_stop+0x68>)
    37b0:	6913      	ldr	r3, [r2, #16]
    37b2:	f013 0f01 	tst.w	r3, #1
    37b6:	d1fb      	bne.n	37b0 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    37b8:	2200      	movs	r2, #0
    37ba:	4b08      	ldr	r3, [pc, #32]	; (37dc <LIDAR_PWM_stop+0x68>)
    37bc:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    37be:	461a      	mov	r2, r3
    37c0:	6913      	ldr	r3, [r2, #16]
    37c2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    37c6:	d1fb      	bne.n	37c0 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    37c8:	4a04      	ldr	r2, [pc, #16]	; (37dc <LIDAR_PWM_stop+0x68>)
    37ca:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    37cc:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    37d0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    37d2:	6913      	ldr	r3, [r2, #16]
    37d4:	f013 0f03 	tst.w	r3, #3
    37d8:	d1fb      	bne.n	37d2 <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    37da:	4770      	bx	lr
    37dc:	42001400 	.word	0x42001400

000037e0 <LIDAR_USART_init>:

/**
  * Initializes USART for LiDAR
  */ 
void LIDAR_USART_init(void)
{
    37e0:	b510      	push	{r4, lr}
    37e2:	4b1b      	ldr	r3, [pc, #108]	; (3850 <LIDAR_USART_init+0x70>)
    37e4:	2240      	movs	r2, #64	; 0x40
    37e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    37ea:	2243      	movs	r2, #67	; 0x43
    37ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    37f0:	4a18      	ldr	r2, [pc, #96]	; (3854 <LIDAR_USART_init+0x74>)
    37f2:	6953      	ldr	r3, [r2, #20]
    37f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    37f8:	6153      	str	r3, [r2, #20]
	LIDAR_USART_CLOCK_init();
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
    37fa:	4c17      	ldr	r4, [pc, #92]	; (3858 <LIDAR_USART_init+0x78>)
    37fc:	2200      	movs	r2, #0
    37fe:	4917      	ldr	r1, [pc, #92]	; (385c <LIDAR_USART_init+0x7c>)
    3800:	4620      	mov	r0, r4
    3802:	4b17      	ldr	r3, [pc, #92]	; (3860 <LIDAR_USART_init+0x80>)
    3804:	4798      	blx	r3
	usart_sync_enable(&LIDAR_USART);
    3806:	4620      	mov	r0, r4
    3808:	4b16      	ldr	r3, [pc, #88]	; (3864 <LIDAR_USART_init+0x84>)
    380a:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    380c:	4b16      	ldr	r3, [pc, #88]	; (3868 <LIDAR_USART_init+0x88>)
    380e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    3812:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3816:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    381e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3822:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3826:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    382a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    382e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    3832:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3836:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    383a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    383e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3842:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3846:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    384a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    384e:	bd10      	pop	{r4, pc}
    3850:	40001c00 	.word	0x40001c00
    3854:	40000800 	.word	0x40000800
    3858:	20000ffc 	.word	0x20000ffc
    385c:	40003000 	.word	0x40003000
    3860:	00002651 	.word	0x00002651
    3864:	00002699 	.word	0x00002699
    3868:	41008000 	.word	0x41008000

0000386c <LIDAR_USART_send>:

/**
  * Sends data through USART to LiDAR
  */ 
void LIDAR_USART_send(uint8_t* message, uint16_t length)
{
    386c:	b530      	push	{r4, r5, lr}
    386e:	b083      	sub	sp, #12
    3870:	4604      	mov	r4, r0
    3872:	460d      	mov	r5, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    3874:	a901      	add	r1, sp, #4
    3876:	4805      	ldr	r0, [pc, #20]	; (388c <LIDAR_USART_send+0x20>)
    3878:	4b05      	ldr	r3, [pc, #20]	; (3890 <LIDAR_USART_send+0x24>)
    387a:	4798      	blx	r3
	
	io_write(io, message, length);
    387c:	462a      	mov	r2, r5
    387e:	4621      	mov	r1, r4
    3880:	9801      	ldr	r0, [sp, #4]
    3882:	4b04      	ldr	r3, [pc, #16]	; (3894 <LIDAR_USART_send+0x28>)
    3884:	4798      	blx	r3
}
    3886:	b003      	add	sp, #12
    3888:	bd30      	pop	{r4, r5, pc}
    388a:	bf00      	nop
    388c:	20000ffc 	.word	0x20000ffc
    3890:	000026c5 	.word	0x000026c5
    3894:	00002285 	.word	0x00002285

00003898 <LIDAR_USART_read_byte>:
  * Reads received byte from LiDAR through USART
  * 
  * @return uint8_t : received byte
  */ 
uint8_t LIDAR_USART_read_byte(void)
{
    3898:	b500      	push	{lr}
    389a:	b083      	sub	sp, #12
	uint8_t buf;
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    389c:	4669      	mov	r1, sp
    389e:	4807      	ldr	r0, [pc, #28]	; (38bc <LIDAR_USART_read_byte+0x24>)
    38a0:	4b07      	ldr	r3, [pc, #28]	; (38c0 <LIDAR_USART_read_byte+0x28>)
    38a2:	4798      	blx	r3
	
	io_read(io, &buf, 1);
    38a4:	2201      	movs	r2, #1
    38a6:	f10d 0107 	add.w	r1, sp, #7
    38aa:	9800      	ldr	r0, [sp, #0]
    38ac:	4b05      	ldr	r3, [pc, #20]	; (38c4 <LIDAR_USART_read_byte+0x2c>)
    38ae:	4798      	blx	r3
	return buf;
}
    38b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    38b4:	b003      	add	sp, #12
    38b6:	f85d fb04 	ldr.w	pc, [sp], #4
    38ba:	bf00      	nop
    38bc:	20000ffc 	.word	0x20000ffc
    38c0:	000026c5 	.word	0x000026c5
    38c4:	000022b5 	.word	0x000022b5

000038c8 <LIDAR_menu>:
/**
  * Menu for LiDAR command options in order to test and see printouts for each
  * of the requests and responses
  */ 
void LIDAR_menu(void)
{
    38c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38cc:	b086      	sub	sp, #24
	uint16_t user_selection = 0;
    38ce:	2300      	movs	r3, #0
    38d0:	f8ad 3016 	strh.w	r3, [sp, #22]
	while (1) {
		if (processing)
    38d4:	4e8e      	ldr	r6, [pc, #568]	; (3b10 <LIDAR_menu+0x248>)
			LIDAR_process();
		else {
			printf("%s", lidar_menu_txt);
    38d6:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 3b80 <LIDAR_menu+0x2b8>
    38da:	4f8e      	ldr	r7, [pc, #568]	; (3b14 <LIDAR_menu+0x24c>)
    38dc:	e0f5      	b.n	3aca <LIDAR_menu+0x202>
void LIDAR_process(void)
{
	unsigned data_idx;
	
	/* STOP and RESET requests */
	if (lidar_timing) {
    38de:	4b8e      	ldr	r3, [pc, #568]	; (3b18 <LIDAR_menu+0x250>)
    38e0:	781b      	ldrb	r3, [r3, #0]
    38e2:	b163      	cbz	r3, 38fe <LIDAR_menu+0x36>
		switch (lidar_request) {
    38e4:	4b8d      	ldr	r3, [pc, #564]	; (3b1c <LIDAR_menu+0x254>)
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	2b25      	cmp	r3, #37	; 0x25
    38ea:	d005      	beq.n	38f8 <LIDAR_menu+0x30>
    38ec:	2b40      	cmp	r3, #64	; 0x40
    38ee:	f040 80ec 	bne.w	3aca <LIDAR_menu+0x202>
			case LIDAR_STOP:
				LIDAR_RES_stop();
				break;
			case LIDAR_RESET:
				LIDAR_RES_reset();
    38f2:	4b8b      	ldr	r3, [pc, #556]	; (3b20 <LIDAR_menu+0x258>)
    38f4:	4798      	blx	r3
    38f6:	e0e8      	b.n	3aca <LIDAR_menu+0x202>
				LIDAR_RES_stop();
    38f8:	4b8a      	ldr	r3, [pc, #552]	; (3b24 <LIDAR_menu+0x25c>)
    38fa:	4798      	blx	r3
    38fc:	e0e5      	b.n	3aca <LIDAR_menu+0x202>
				break;
		};
		return;
	}
	
	while (!usart_sync_is_rx_not_empty(&LIDAR_USART));
    38fe:	4d8a      	ldr	r5, [pc, #552]	; (3b28 <LIDAR_menu+0x260>)
    3900:	4c8a      	ldr	r4, [pc, #552]	; (3b2c <LIDAR_menu+0x264>)
    3902:	4628      	mov	r0, r5
    3904:	47a0      	blx	r4
    3906:	2800      	cmp	r0, #0
    3908:	d0fb      	beq.n	3902 <LIDAR_menu+0x3a>
	
	/* Process response descriptor */
	switch (byte_count) {
    390a:	4b89      	ldr	r3, [pc, #548]	; (3b30 <LIDAR_menu+0x268>)
    390c:	681c      	ldr	r4, [r3, #0]
    390e:	2c06      	cmp	r4, #6
    3910:	d84d      	bhi.n	39ae <LIDAR_menu+0xe6>
    3912:	e8df f004 	tbb	[pc, r4]
    3916:	0d04      	.short	0x0d04
    3918:	372b1f16 	.word	0x372b1f16
    391c:	43          	.byte	0x43
    391d:	00          	.byte	0x00
		case 0:
			resp_desc.start1 = LIDAR_USART_read_byte();
    391e:	4b85      	ldr	r3, [pc, #532]	; (3b34 <LIDAR_menu+0x26c>)
    3920:	4798      	blx	r3
    3922:	4b85      	ldr	r3, [pc, #532]	; (3b38 <LIDAR_menu+0x270>)
    3924:	7018      	strb	r0, [r3, #0]
			byte_count++;
    3926:	4a82      	ldr	r2, [pc, #520]	; (3b30 <LIDAR_menu+0x268>)
    3928:	6813      	ldr	r3, [r2, #0]
    392a:	3301      	adds	r3, #1
    392c:	6013      	str	r3, [r2, #0]
    392e:	e0cc      	b.n	3aca <LIDAR_menu+0x202>
			return;
		
		case 1:
			resp_desc.start2 = LIDAR_USART_read_byte();
    3930:	4b80      	ldr	r3, [pc, #512]	; (3b34 <LIDAR_menu+0x26c>)
    3932:	4798      	blx	r3
    3934:	4b80      	ldr	r3, [pc, #512]	; (3b38 <LIDAR_menu+0x270>)
    3936:	7058      	strb	r0, [r3, #1]
			byte_count++;
    3938:	4a7d      	ldr	r2, [pc, #500]	; (3b30 <LIDAR_menu+0x268>)
    393a:	6813      	ldr	r3, [r2, #0]
    393c:	3301      	adds	r3, #1
    393e:	6013      	str	r3, [r2, #0]
    3940:	e0c3      	b.n	3aca <LIDAR_menu+0x202>
			return;
		
		case 2:
			resp_desc.response_info = LIDAR_USART_read_byte();
    3942:	4b7c      	ldr	r3, [pc, #496]	; (3b34 <LIDAR_menu+0x26c>)
    3944:	4798      	blx	r3
    3946:	4b7c      	ldr	r3, [pc, #496]	; (3b38 <LIDAR_menu+0x270>)
    3948:	6058      	str	r0, [r3, #4]
			byte_count++;
    394a:	4a79      	ldr	r2, [pc, #484]	; (3b30 <LIDAR_menu+0x268>)
    394c:	6813      	ldr	r3, [r2, #0]
    394e:	3301      	adds	r3, #1
    3950:	6013      	str	r3, [r2, #0]
    3952:	e0ba      	b.n	3aca <LIDAR_menu+0x202>
			return;
		
		case 3:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    3954:	4b77      	ldr	r3, [pc, #476]	; (3b34 <LIDAR_menu+0x26c>)
    3956:	4798      	blx	r3
    3958:	4a77      	ldr	r2, [pc, #476]	; (3b38 <LIDAR_menu+0x270>)
    395a:	6853      	ldr	r3, [r2, #4]
    395c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    3960:	6053      	str	r3, [r2, #4]
			byte_count++;
    3962:	4a73      	ldr	r2, [pc, #460]	; (3b30 <LIDAR_menu+0x268>)
    3964:	6813      	ldr	r3, [r2, #0]
    3966:	3301      	adds	r3, #1
    3968:	6013      	str	r3, [r2, #0]
    396a:	e0ae      	b.n	3aca <LIDAR_menu+0x202>
			return;
		
		case 4:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    396c:	4b71      	ldr	r3, [pc, #452]	; (3b34 <LIDAR_menu+0x26c>)
    396e:	4798      	blx	r3
    3970:	4a71      	ldr	r2, [pc, #452]	; (3b38 <LIDAR_menu+0x270>)
    3972:	6853      	ldr	r3, [r2, #4]
    3974:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    3978:	6053      	str	r3, [r2, #4]
			byte_count++;
    397a:	4a6d      	ldr	r2, [pc, #436]	; (3b30 <LIDAR_menu+0x268>)
    397c:	6813      	ldr	r3, [r2, #0]
    397e:	3301      	adds	r3, #1
    3980:	6013      	str	r3, [r2, #0]
    3982:	e0a2      	b.n	3aca <LIDAR_menu+0x202>
			return;
		
		case 5:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    3984:	4b6b      	ldr	r3, [pc, #428]	; (3b34 <LIDAR_menu+0x26c>)
    3986:	4798      	blx	r3
    3988:	4a6b      	ldr	r2, [pc, #428]	; (3b38 <LIDAR_menu+0x270>)
    398a:	6853      	ldr	r3, [r2, #4]
    398c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    3990:	6053      	str	r3, [r2, #4]
			byte_count++;
    3992:	4a67      	ldr	r2, [pc, #412]	; (3b30 <LIDAR_menu+0x268>)
    3994:	6813      	ldr	r3, [r2, #0]
    3996:	3301      	adds	r3, #1
    3998:	6013      	str	r3, [r2, #0]
    399a:	e096      	b.n	3aca <LIDAR_menu+0x202>
			return;
		
		case 6:
			resp_desc.data_type = LIDAR_USART_read_byte();
    399c:	4b65      	ldr	r3, [pc, #404]	; (3b34 <LIDAR_menu+0x26c>)
    399e:	4798      	blx	r3
    39a0:	4b65      	ldr	r3, [pc, #404]	; (3b38 <LIDAR_menu+0x270>)
    39a2:	7218      	strb	r0, [r3, #8]
			byte_count++;
    39a4:	4a62      	ldr	r2, [pc, #392]	; (3b30 <LIDAR_menu+0x268>)
    39a6:	6813      	ldr	r3, [r2, #0]
    39a8:	3301      	adds	r3, #1
    39aa:	6013      	str	r3, [r2, #0]
    39ac:	e08d      	b.n	3aca <LIDAR_menu+0x202>
			return;
		
        /* Process response data packets */
		default:
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    39ae:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    39b0:	4b60      	ldr	r3, [pc, #384]	; (3b34 <LIDAR_menu+0x26c>)
    39b2:	4798      	blx	r3
    39b4:	4b61      	ldr	r3, [pc, #388]	; (3b3c <LIDAR_menu+0x274>)
    39b6:	5518      	strb	r0, [r3, r4]
			if (lidar_request == LIDAR_EXPRESS_SCAN) {
    39b8:	4b58      	ldr	r3, [pc, #352]	; (3b1c <LIDAR_menu+0x254>)
    39ba:	7819      	ldrb	r1, [r3, #0]
    39bc:	2982      	cmp	r1, #130	; 0x82
    39be:	d016      	beq.n	39ee <LIDAR_menu+0x126>
						byte_count--;
						return;
					}
				}
			}
			byte_count++;
    39c0:	4b5b      	ldr	r3, [pc, #364]	; (3b30 <LIDAR_menu+0x268>)
    39c2:	681a      	ldr	r2, [r3, #0]
    39c4:	3201      	adds	r2, #1
    39c6:	601a      	str	r2, [r3, #0]
	};
	
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    39c8:	4b5b      	ldr	r3, [pc, #364]	; (3b38 <LIDAR_menu+0x270>)
    39ca:	685b      	ldr	r3, [r3, #4]
    39cc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    39d0:	3307      	adds	r3, #7
    39d2:	429a      	cmp	r2, r3
    39d4:	d179      	bne.n	3aca <LIDAR_menu+0x202>
		switch(lidar_request) {
    39d6:	2950      	cmp	r1, #80	; 0x50
    39d8:	d068      	beq.n	3aac <LIDAR_menu+0x1e4>
    39da:	d948      	bls.n	3a6e <LIDAR_menu+0x1a6>
    39dc:	2959      	cmp	r1, #89	; 0x59
    39de:	d06c      	beq.n	3aba <LIDAR_menu+0x1f2>
    39e0:	2982      	cmp	r1, #130	; 0x82
    39e2:	d018      	beq.n	3a16 <LIDAR_menu+0x14e>
    39e4:	2952      	cmp	r1, #82	; 0x52
    39e6:	d170      	bne.n	3aca <LIDAR_menu+0x202>
			case LIDAR_GET_INFO:
				LIDAR_RES_get_info();
				break;

			case LIDAR_GET_HEALTH:
				LIDAR_RES_get_health();
    39e8:	4b55      	ldr	r3, [pc, #340]	; (3b40 <LIDAR_menu+0x278>)
    39ea:	4798      	blx	r3
    39ec:	e060      	b.n	3ab0 <LIDAR_menu+0x1e8>
                if (data_idx == 0) { 
    39ee:	b92c      	cbnz	r4, 39fc <LIDAR_menu+0x134>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    39f0:	4b52      	ldr	r3, [pc, #328]	; (3b3c <LIDAR_menu+0x274>)
    39f2:	781b      	ldrb	r3, [r3, #0]
    39f4:	091b      	lsrs	r3, r3, #4
    39f6:	2b0a      	cmp	r3, #10
    39f8:	d167      	bne.n	3aca <LIDAR_menu+0x202>
    39fa:	e001      	b.n	3a00 <LIDAR_menu+0x138>
				else if (data_idx == 1) {
    39fc:	2c01      	cmp	r4, #1
    39fe:	d02c      	beq.n	3a5a <LIDAR_menu+0x192>
			byte_count++;
    3a00:	4b4b      	ldr	r3, [pc, #300]	; (3b30 <LIDAR_menu+0x268>)
    3a02:	681a      	ldr	r2, [r3, #0]
    3a04:	3201      	adds	r2, #1
    3a06:	601a      	str	r2, [r3, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    3a08:	4b4b      	ldr	r3, [pc, #300]	; (3b38 <LIDAR_menu+0x270>)
    3a0a:	685b      	ldr	r3, [r3, #4]
    3a0c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3a10:	3307      	adds	r3, #7
    3a12:	4293      	cmp	r3, r2
    3a14:	d159      	bne.n	3aca <LIDAR_menu+0x202>
				LIDAR_RES_express_scan();
    3a16:	4b4b      	ldr	r3, [pc, #300]	; (3b44 <LIDAR_menu+0x27c>)
    3a18:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    3a1a:	4b4b      	ldr	r3, [pc, #300]	; (3b48 <LIDAR_menu+0x280>)
    3a1c:	681b      	ldr	r3, [r3, #0]
    3a1e:	2b3f      	cmp	r3, #63	; 0x3f
    3a20:	d953      	bls.n	3aca <LIDAR_menu+0x202>
					LIDAR_PWM_stop();
    3a22:	4b4a      	ldr	r3, [pc, #296]	; (3b4c <LIDAR_menu+0x284>)
    3a24:	4798      	blx	r3
					LIDAR_REQ_stop();
    3a26:	4b4a      	ldr	r3, [pc, #296]	; (3b50 <LIDAR_menu+0x288>)
    3a28:	4798      	blx	r3
    3a2a:	4c4a      	ldr	r4, [pc, #296]	; (3b54 <LIDAR_menu+0x28c>)
  *	Prints cabin data
  */ 	
void LIDAR_print_cabins(void) 
{
	int i;
	for (i=0; i<MAX_SCANS; i++) {
    3a2c:	2500      	movs	r5, #0
		printf("{\"C[%04u]\":{\"S\":%u,\"SA\":%u,\"A1\":%u,\"A2\":%u,\"D1\":%u,\"D2\":%u}}\r\n",
    3a2e:	f8df a154 	ldr.w	sl, [pc, #340]	; 3b84 <LIDAR_menu+0x2bc>
    3a32:	f8df 913c 	ldr.w	r9, [pc, #316]	; 3b70 <LIDAR_menu+0x2a8>
    3a36:	8923      	ldrh	r3, [r4, #8]
    3a38:	7822      	ldrb	r2, [r4, #0]
    3a3a:	88e1      	ldrh	r1, [r4, #6]
    3a3c:	9103      	str	r1, [sp, #12]
    3a3e:	88a1      	ldrh	r1, [r4, #4]
    3a40:	9102      	str	r1, [sp, #8]
    3a42:	78a1      	ldrb	r1, [r4, #2]
    3a44:	9101      	str	r1, [sp, #4]
    3a46:	7861      	ldrb	r1, [r4, #1]
    3a48:	9100      	str	r1, [sp, #0]
    3a4a:	4629      	mov	r1, r5
    3a4c:	4650      	mov	r0, sl
    3a4e:	47c8      	blx	r9
	for (i=0; i<MAX_SCANS; i++) {
    3a50:	3501      	adds	r5, #1
    3a52:	340a      	adds	r4, #10
    3a54:	2d40      	cmp	r5, #64	; 0x40
    3a56:	d1ee      	bne.n	3a36 <LIDAR_menu+0x16e>
    3a58:	e02a      	b.n	3ab0 <LIDAR_menu+0x1e8>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    3a5a:	4b38      	ldr	r3, [pc, #224]	; (3b3c <LIDAR_menu+0x274>)
    3a5c:	785b      	ldrb	r3, [r3, #1]
    3a5e:	091b      	lsrs	r3, r3, #4
    3a60:	2b05      	cmp	r3, #5
    3a62:	d0cd      	beq.n	3a00 <LIDAR_menu+0x138>
						byte_count--;
    3a64:	4a32      	ldr	r2, [pc, #200]	; (3b30 <LIDAR_menu+0x268>)
    3a66:	6813      	ldr	r3, [r2, #0]
    3a68:	3b01      	subs	r3, #1
    3a6a:	6013      	str	r3, [r2, #0]
    3a6c:	e02d      	b.n	3aca <LIDAR_menu+0x202>
		switch(lidar_request) {
    3a6e:	3920      	subs	r1, #32
    3a70:	2901      	cmp	r1, #1
    3a72:	d82a      	bhi.n	3aca <LIDAR_menu+0x202>
				LIDAR_RES_scan();
    3a74:	4b38      	ldr	r3, [pc, #224]	; (3b58 <LIDAR_menu+0x290>)
    3a76:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    3a78:	4b33      	ldr	r3, [pc, #204]	; (3b48 <LIDAR_menu+0x280>)
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	2b3f      	cmp	r3, #63	; 0x3f
    3a7e:	d924      	bls.n	3aca <LIDAR_menu+0x202>
					LIDAR_PWM_stop();
    3a80:	4b32      	ldr	r3, [pc, #200]	; (3b4c <LIDAR_menu+0x284>)
    3a82:	4798      	blx	r3
					LIDAR_REQ_stop();
    3a84:	4b32      	ldr	r3, [pc, #200]	; (3b50 <LIDAR_menu+0x288>)
    3a86:	4798      	blx	r3
    3a88:	4c34      	ldr	r4, [pc, #208]	; (3b5c <LIDAR_menu+0x294>)
	for (i=0; i<MAX_SCANS; i++) {
    3a8a:	2500      	movs	r5, #0
		printf("{\"S[%04u]\":{\"Q\":%u,\"A\":%u,\"D\"%u}}\r\n",
    3a8c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 3b88 <LIDAR_menu+0x2c0>
    3a90:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 3b70 <LIDAR_menu+0x2a8>
    3a94:	8863      	ldrh	r3, [r4, #2]
    3a96:	7822      	ldrb	r2, [r4, #0]
    3a98:	88a1      	ldrh	r1, [r4, #4]
    3a9a:	9100      	str	r1, [sp, #0]
    3a9c:	4629      	mov	r1, r5
    3a9e:	4650      	mov	r0, sl
    3aa0:	47c8      	blx	r9
	for (i=0; i<MAX_SCANS; i++) {
    3aa2:	3501      	adds	r5, #1
    3aa4:	3406      	adds	r4, #6
    3aa6:	2d40      	cmp	r5, #64	; 0x40
    3aa8:	d1f4      	bne.n	3a94 <LIDAR_menu+0x1cc>
    3aaa:	e001      	b.n	3ab0 <LIDAR_menu+0x1e8>
				LIDAR_RES_get_info();
    3aac:	4b2c      	ldr	r3, [pc, #176]	; (3b60 <LIDAR_menu+0x298>)
    3aae:	4798      	blx	r3
		byte_count = 0;
    3ab0:	2300      	movs	r3, #0
    3ab2:	4a1f      	ldr	r2, [pc, #124]	; (3b30 <LIDAR_menu+0x268>)
    3ab4:	6013      	str	r3, [r2, #0]
		processing = 0;
    3ab6:	7033      	strb	r3, [r6, #0]
    3ab8:	e007      	b.n	3aca <LIDAR_menu+0x202>
				LIDAR_RES_get_samplerate();
    3aba:	4b2a      	ldr	r3, [pc, #168]	; (3b64 <LIDAR_menu+0x29c>)
    3abc:	4798      	blx	r3
    3abe:	e7f7      	b.n	3ab0 <LIDAR_menu+0x1e8>
				fflush(stdin);
    3ac0:	4b29      	ldr	r3, [pc, #164]	; (3b68 <LIDAR_menu+0x2a0>)
    3ac2:	681b      	ldr	r3, [r3, #0]
    3ac4:	6858      	ldr	r0, [r3, #4]
    3ac6:	4b29      	ldr	r3, [pc, #164]	; (3b6c <LIDAR_menu+0x2a4>)
    3ac8:	4798      	blx	r3
		if (processing)
    3aca:	7833      	ldrb	r3, [r6, #0]
    3acc:	2b00      	cmp	r3, #0
    3ace:	f47f af06 	bne.w	38de <LIDAR_menu+0x16>
			printf("%s", lidar_menu_txt);
    3ad2:	4641      	mov	r1, r8
    3ad4:	4638      	mov	r0, r7
    3ad6:	4b26      	ldr	r3, [pc, #152]	; (3b70 <LIDAR_menu+0x2a8>)
    3ad8:	4798      	blx	r3
			if (scanf("%hx", &user_selection) == 0) {
    3ada:	f10d 0116 	add.w	r1, sp, #22
    3ade:	4825      	ldr	r0, [pc, #148]	; (3b74 <LIDAR_menu+0x2ac>)
    3ae0:	4b25      	ldr	r3, [pc, #148]	; (3b78 <LIDAR_menu+0x2b0>)
    3ae2:	4798      	blx	r3
    3ae4:	2800      	cmp	r0, #0
    3ae6:	d0eb      	beq.n	3ac0 <LIDAR_menu+0x1f8>
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    3ae8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    3aec:	4823      	ldr	r0, [pc, #140]	; (3b7c <LIDAR_menu+0x2b4>)
    3aee:	4b20      	ldr	r3, [pc, #128]	; (3b70 <LIDAR_menu+0x2a8>)
    3af0:	4798      	blx	r3
			switch (user_selection) {
    3af2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3af6:	3b01      	subs	r3, #1
    3af8:	2b0a      	cmp	r3, #10
    3afa:	f200 8099 	bhi.w	3c30 <LIDAR_menu+0x368>
    3afe:	e8df f003 	tbb	[pc, r3]
    3b02:	4b45      	.short	0x4b45
    3b04:	675f5751 	.word	0x675f5751
    3b08:	877f776f 	.word	0x877f776f
    3b0c:	8f          	.byte	0x8f
    3b0d:	00          	.byte	0x00
    3b0e:	bf00      	nop
    3b10:	200005dc 	.word	0x200005dc
    3b14:	00008584 	.word	0x00008584
    3b18:	20001010 	.word	0x20001010
    3b1c:	200005e4 	.word	0x200005e4
    3b20:	000040ed 	.word	0x000040ed
    3b24:	000040bd 	.word	0x000040bd
    3b28:	20000ffc 	.word	0x20000ffc
    3b2c:	000026ed 	.word	0x000026ed
    3b30:	200005e0 	.word	0x200005e0
    3b34:	00003899 	.word	0x00003899
    3b38:	200009f0 	.word	0x200009f0
    3b3c:	2000055c 	.word	0x2000055c
    3b40:	00004345 	.word	0x00004345
    3b44:	000041c1 	.word	0x000041c1
    3b48:	200005ec 	.word	0x200005ec
    3b4c:	00003775 	.word	0x00003775
    3b50:	00003cad 	.word	0x00003cad
    3b54:	20000770 	.word	0x20000770
    3b58:	0000411d 	.word	0x0000411d
    3b5c:	200005f0 	.word	0x200005f0
    3b60:	000042b5 	.word	0x000042b5
    3b64:	000043a9 	.word	0x000043a9
    3b68:	200002dc 	.word	0x200002dc
    3b6c:	000063dd 	.word	0x000063dd
    3b70:	0000677d 	.word	0x0000677d
    3b74:	00008b48 	.word	0x00008b48
    3b78:	00006895 	.word	0x00006895
    3b7c:	00008588 	.word	0x00008588
    3b80:	200000d8 	.word	0x200000d8
    3b84:	00008b98 	.word	0x00008b98
    3b88:	00008b74 	.word	0x00008b74
					printf("\r\nReturning to main menu\r\n");
    3b8c:	482a      	ldr	r0, [pc, #168]	; (3c38 <LIDAR_menu+0x370>)
    3b8e:	4b2b      	ldr	r3, [pc, #172]	; (3c3c <LIDAR_menu+0x374>)
    3b90:	4798      	blx	r3
}
    3b92:	b006      	add	sp, #24
    3b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					printf("\r\nStarting LiDAR motor\r\n");
    3b98:	4829      	ldr	r0, [pc, #164]	; (3c40 <LIDAR_menu+0x378>)
    3b9a:	4b28      	ldr	r3, [pc, #160]	; (3c3c <LIDAR_menu+0x374>)
    3b9c:	4798      	blx	r3
					LIDAR_PWM_start();
    3b9e:	4b29      	ldr	r3, [pc, #164]	; (3c44 <LIDAR_menu+0x37c>)
    3ba0:	4798      	blx	r3
					break;
    3ba2:	e792      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nStopping LiDAR motor\r\n");
    3ba4:	4828      	ldr	r0, [pc, #160]	; (3c48 <LIDAR_menu+0x380>)
    3ba6:	4b25      	ldr	r3, [pc, #148]	; (3c3c <LIDAR_menu+0x374>)
    3ba8:	4798      	blx	r3
					LIDAR_PWM_stop();
    3baa:	4b28      	ldr	r3, [pc, #160]	; (3c4c <LIDAR_menu+0x384>)
    3bac:	4798      	blx	r3
					break;
    3bae:	e78c      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR stop\r\n");
    3bb0:	4827      	ldr	r0, [pc, #156]	; (3c50 <LIDAR_menu+0x388>)
    3bb2:	4b22      	ldr	r3, [pc, #136]	; (3c3c <LIDAR_menu+0x374>)
    3bb4:	4798      	blx	r3
					LIDAR_REQ_stop();
    3bb6:	4b27      	ldr	r3, [pc, #156]	; (3c54 <LIDAR_menu+0x38c>)
    3bb8:	4798      	blx	r3
					processing = 1;
    3bba:	2301      	movs	r3, #1
    3bbc:	7033      	strb	r3, [r6, #0]
					break;
    3bbe:	e784      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR reset\r\n");
    3bc0:	4825      	ldr	r0, [pc, #148]	; (3c58 <LIDAR_menu+0x390>)
    3bc2:	4b1e      	ldr	r3, [pc, #120]	; (3c3c <LIDAR_menu+0x374>)
    3bc4:	4798      	blx	r3
					LIDAR_REQ_reset();
    3bc6:	4b25      	ldr	r3, [pc, #148]	; (3c5c <LIDAR_menu+0x394>)
    3bc8:	4798      	blx	r3
					processing = 1;
    3bca:	2301      	movs	r3, #1
    3bcc:	7033      	strb	r3, [r6, #0]
					break;
    3bce:	e77c      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR start scan\r\n");
    3bd0:	4823      	ldr	r0, [pc, #140]	; (3c60 <LIDAR_menu+0x398>)
    3bd2:	4b1a      	ldr	r3, [pc, #104]	; (3c3c <LIDAR_menu+0x374>)
    3bd4:	4798      	blx	r3
					LIDAR_REQ_scan();
    3bd6:	4b23      	ldr	r3, [pc, #140]	; (3c64 <LIDAR_menu+0x39c>)
    3bd8:	4798      	blx	r3
					processing = 1;
    3bda:	2301      	movs	r3, #1
    3bdc:	7033      	strb	r3, [r6, #0]
					break;
    3bde:	e774      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR start express scan\r\n");
    3be0:	4821      	ldr	r0, [pc, #132]	; (3c68 <LIDAR_menu+0x3a0>)
    3be2:	4b16      	ldr	r3, [pc, #88]	; (3c3c <LIDAR_menu+0x374>)
    3be4:	4798      	blx	r3
					LIDAR_REQ_express_scan();
    3be6:	4b21      	ldr	r3, [pc, #132]	; (3c6c <LIDAR_menu+0x3a4>)
    3be8:	4798      	blx	r3
					processing = 1;
    3bea:	2301      	movs	r3, #1
    3bec:	7033      	strb	r3, [r6, #0]
					break;
    3bee:	e76c      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRequesting LiDAR start force scan\r\n");
    3bf0:	481f      	ldr	r0, [pc, #124]	; (3c70 <LIDAR_menu+0x3a8>)
    3bf2:	4b12      	ldr	r3, [pc, #72]	; (3c3c <LIDAR_menu+0x374>)
    3bf4:	4798      	blx	r3
					LIDAR_REQ_force_scan();
    3bf6:	4b1f      	ldr	r3, [pc, #124]	; (3c74 <LIDAR_menu+0x3ac>)
    3bf8:	4798      	blx	r3
					processing = 1;
    3bfa:	2301      	movs	r3, #1
    3bfc:	7033      	strb	r3, [r6, #0]
					break;
    3bfe:	e764      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRetrieving LiDAR info\r\n");
    3c00:	481d      	ldr	r0, [pc, #116]	; (3c78 <LIDAR_menu+0x3b0>)
    3c02:	4b0e      	ldr	r3, [pc, #56]	; (3c3c <LIDAR_menu+0x374>)
    3c04:	4798      	blx	r3
					LIDAR_REQ_get_info();
    3c06:	4b1d      	ldr	r3, [pc, #116]	; (3c7c <LIDAR_menu+0x3b4>)
    3c08:	4798      	blx	r3
					processing = 1;
    3c0a:	2301      	movs	r3, #1
    3c0c:	7033      	strb	r3, [r6, #0]
					break;
    3c0e:	e75c      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRetrieving LiDAR health\r\n");
    3c10:	481b      	ldr	r0, [pc, #108]	; (3c80 <LIDAR_menu+0x3b8>)
    3c12:	4b0a      	ldr	r3, [pc, #40]	; (3c3c <LIDAR_menu+0x374>)
    3c14:	4798      	blx	r3
					LIDAR_REQ_get_health();
    3c16:	4b1b      	ldr	r3, [pc, #108]	; (3c84 <LIDAR_menu+0x3bc>)
    3c18:	4798      	blx	r3
					processing = 1;
    3c1a:	2301      	movs	r3, #1
    3c1c:	7033      	strb	r3, [r6, #0]
					break;
    3c1e:	e754      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nRetrieving LiDAR samplerates\r\n");
    3c20:	4819      	ldr	r0, [pc, #100]	; (3c88 <LIDAR_menu+0x3c0>)
    3c22:	4b06      	ldr	r3, [pc, #24]	; (3c3c <LIDAR_menu+0x374>)
    3c24:	4798      	blx	r3
					LIDAR_REQ_get_samplerate();
    3c26:	4b19      	ldr	r3, [pc, #100]	; (3c8c <LIDAR_menu+0x3c4>)
    3c28:	4798      	blx	r3
					processing = 1;
    3c2a:	2301      	movs	r3, #1
    3c2c:	7033      	strb	r3, [r6, #0]
					break;
    3c2e:	e74c      	b.n	3aca <LIDAR_menu+0x202>
					printf("\r\nInvalid option\r\n");
    3c30:	4817      	ldr	r0, [pc, #92]	; (3c90 <LIDAR_menu+0x3c8>)
    3c32:	4b02      	ldr	r3, [pc, #8]	; (3c3c <LIDAR_menu+0x374>)
    3c34:	4798      	blx	r3
					break;
    3c36:	e748      	b.n	3aca <LIDAR_menu+0x202>
    3c38:	000085a4 	.word	0x000085a4
    3c3c:	00006865 	.word	0x00006865
    3c40:	00008bd8 	.word	0x00008bd8
    3c44:	00003709 	.word	0x00003709
    3c48:	00008bf0 	.word	0x00008bf0
    3c4c:	00003775 	.word	0x00003775
    3c50:	00008c08 	.word	0x00008c08
    3c54:	00003cad 	.word	0x00003cad
    3c58:	00008c24 	.word	0x00008c24
    3c5c:	00003d25 	.word	0x00003d25
    3c60:	00008c40 	.word	0x00008c40
    3c64:	00003da1 	.word	0x00003da1
    3c68:	00008c60 	.word	0x00008c60
    3c6c:	00003e1d 	.word	0x00003e1d
    3c70:	00008c88 	.word	0x00008c88
    3c74:	00003ee5 	.word	0x00003ee5
    3c78:	00008cb0 	.word	0x00008cb0
    3c7c:	00003f61 	.word	0x00003f61
    3c80:	00008ccc 	.word	0x00008ccc
    3c84:	00003fd5 	.word	0x00003fd5
    3c88:	00008ce8 	.word	0x00008ce8
    3c8c:	00004049 	.word	0x00004049
    3c90:	000085c0 	.word	0x000085c0

00003c94 <LIDAR_reset_print_buffer>:

/** 
  * Resets local print buffer.
  */
void LIDAR_reset_print_buffer(void)
{
    3c94:	4a04      	ldr	r2, [pc, #16]	; (3ca8 <LIDAR_reset_print_buffer+0x14>)
    3c96:	1e53      	subs	r3, r2, #1
    3c98:	32ff      	adds	r2, #255	; 0xff
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
    3c9a:	2100      	movs	r1, #0
    3c9c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    3ca0:	4293      	cmp	r3, r2
    3ca2:	d1fb      	bne.n	3c9c <LIDAR_reset_print_buffer+0x8>
}
    3ca4:	4770      	bx	lr
    3ca6:	bf00      	nop
    3ca8:	200009fc 	.word	0x200009fc

00003cac <LIDAR_REQ_stop>:
{
    3cac:	b530      	push	{r4, r5, lr}
    3cae:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR stop\r\n");
    3cb0:	4810      	ldr	r0, [pc, #64]	; (3cf4 <LIDAR_REQ_stop+0x48>)
    3cb2:	4b11      	ldr	r3, [pc, #68]	; (3cf8 <LIDAR_REQ_stop+0x4c>)
    3cb4:	4798      	blx	r3
	lidar_request = LIDAR_STOP;
    3cb6:	2525      	movs	r5, #37	; 0x25
    3cb8:	4b10      	ldr	r3, [pc, #64]	; (3cfc <LIDAR_REQ_stop+0x50>)
    3cba:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3cbc:	2200      	movs	r2, #0
    3cbe:	4b10      	ldr	r3, [pc, #64]	; (3d00 <LIDAR_REQ_stop+0x54>)
    3cc0:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    3cc2:	4b10      	ldr	r3, [pc, #64]	; (3d04 <LIDAR_REQ_stop+0x58>)
    3cc4:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3cc6:	4c10      	ldr	r4, [pc, #64]	; (3d08 <LIDAR_REQ_stop+0x5c>)
    3cc8:	9500      	str	r5, [sp, #0]
    3cca:	23a5      	movs	r3, #165	; 0xa5
    3ccc:	4a0f      	ldr	r2, [pc, #60]	; (3d0c <LIDAR_REQ_stop+0x60>)
    3cce:	f44f 7180 	mov.w	r1, #256	; 0x100
    3cd2:	4620      	mov	r0, r4
    3cd4:	4d0e      	ldr	r5, [pc, #56]	; (3d10 <LIDAR_REQ_stop+0x64>)
    3cd6:	47a8      	blx	r5
    3cd8:	b281      	uxth	r1, r0
    3cda:	4b0e      	ldr	r3, [pc, #56]	; (3d14 <LIDAR_REQ_stop+0x68>)
    3cdc:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3cde:	4620      	mov	r0, r4
    3ce0:	4b0d      	ldr	r3, [pc, #52]	; (3d18 <LIDAR_REQ_stop+0x6c>)
    3ce2:	4798      	blx	r3
		lidar_timer = 1;
    3ce4:	2301      	movs	r3, #1
    3ce6:	4a0d      	ldr	r2, [pc, #52]	; (3d1c <LIDAR_REQ_stop+0x70>)
    3ce8:	8013      	strh	r3, [r2, #0]
		lidar_timing = 1;	
    3cea:	4a0d      	ldr	r2, [pc, #52]	; (3d20 <LIDAR_REQ_stop+0x74>)
    3cec:	7013      	strb	r3, [r2, #0]
}
    3cee:	b003      	add	sp, #12
    3cf0:	bd30      	pop	{r4, r5, pc}
    3cf2:	bf00      	nop
    3cf4:	00008c08 	.word	0x00008c08
    3cf8:	00006865 	.word	0x00006865
    3cfc:	200005e4 	.word	0x200005e4
    3d00:	200005e0 	.word	0x200005e0
    3d04:	00003c95 	.word	0x00003c95
    3d08:	200009fc 	.word	0x200009fc
    3d0c:	00008d08 	.word	0x00008d08
    3d10:	00006a31 	.word	0x00006a31
    3d14:	200005de 	.word	0x200005de
    3d18:	0000386d 	.word	0x0000386d
    3d1c:	20001008 	.word	0x20001008
    3d20:	20001010 	.word	0x20001010

00003d24 <LIDAR_REQ_reset>:
{
    3d24:	b530      	push	{r4, r5, lr}
    3d26:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR reset\r\n");
    3d28:	4811      	ldr	r0, [pc, #68]	; (3d70 <LIDAR_REQ_reset+0x4c>)
    3d2a:	4b12      	ldr	r3, [pc, #72]	; (3d74 <LIDAR_REQ_reset+0x50>)
    3d2c:	4798      	blx	r3
	lidar_request = LIDAR_RESET;
    3d2e:	2540      	movs	r5, #64	; 0x40
    3d30:	4b11      	ldr	r3, [pc, #68]	; (3d78 <LIDAR_REQ_reset+0x54>)
    3d32:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3d34:	2200      	movs	r2, #0
    3d36:	4b11      	ldr	r3, [pc, #68]	; (3d7c <LIDAR_REQ_reset+0x58>)
    3d38:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    3d3a:	4b11      	ldr	r3, [pc, #68]	; (3d80 <LIDAR_REQ_reset+0x5c>)
    3d3c:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3d3e:	4c11      	ldr	r4, [pc, #68]	; (3d84 <LIDAR_REQ_reset+0x60>)
    3d40:	9500      	str	r5, [sp, #0]
    3d42:	23a5      	movs	r3, #165	; 0xa5
    3d44:	4a10      	ldr	r2, [pc, #64]	; (3d88 <LIDAR_REQ_reset+0x64>)
    3d46:	f44f 7180 	mov.w	r1, #256	; 0x100
    3d4a:	4620      	mov	r0, r4
    3d4c:	4d0f      	ldr	r5, [pc, #60]	; (3d8c <LIDAR_REQ_reset+0x68>)
    3d4e:	47a8      	blx	r5
    3d50:	b281      	uxth	r1, r0
    3d52:	4b0f      	ldr	r3, [pc, #60]	; (3d90 <LIDAR_REQ_reset+0x6c>)
    3d54:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3d56:	4620      	mov	r0, r4
    3d58:	4b0e      	ldr	r3, [pc, #56]	; (3d94 <LIDAR_REQ_reset+0x70>)
    3d5a:	4798      	blx	r3
		lidar_timer = 1000;
    3d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d60:	4b0d      	ldr	r3, [pc, #52]	; (3d98 <LIDAR_REQ_reset+0x74>)
    3d62:	801a      	strh	r2, [r3, #0]
		lidar_timing = 1;
    3d64:	2201      	movs	r2, #1
    3d66:	4b0d      	ldr	r3, [pc, #52]	; (3d9c <LIDAR_REQ_reset+0x78>)
    3d68:	701a      	strb	r2, [r3, #0]
}
    3d6a:	b003      	add	sp, #12
    3d6c:	bd30      	pop	{r4, r5, pc}
    3d6e:	bf00      	nop
    3d70:	00008c24 	.word	0x00008c24
    3d74:	00006865 	.word	0x00006865
    3d78:	200005e4 	.word	0x200005e4
    3d7c:	200005e0 	.word	0x200005e0
    3d80:	00003c95 	.word	0x00003c95
    3d84:	200009fc 	.word	0x200009fc
    3d88:	00008d08 	.word	0x00008d08
    3d8c:	00006a31 	.word	0x00006a31
    3d90:	200005de 	.word	0x200005de
    3d94:	0000386d 	.word	0x0000386d
    3d98:	20001008 	.word	0x20001008
    3d9c:	20001010 	.word	0x20001010

00003da0 <LIDAR_REQ_scan>:
{
    3da0:	b530      	push	{r4, r5, lr}
    3da2:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR start scan\r\n");
    3da4:	4810      	ldr	r0, [pc, #64]	; (3de8 <LIDAR_REQ_scan+0x48>)
    3da6:	4b11      	ldr	r3, [pc, #68]	; (3dec <LIDAR_REQ_scan+0x4c>)
    3da8:	4798      	blx	r3
	start_time = systick_count;
    3daa:	4b11      	ldr	r3, [pc, #68]	; (3df0 <LIDAR_REQ_scan+0x50>)
    3dac:	681a      	ldr	r2, [r3, #0]
    3dae:	4b11      	ldr	r3, [pc, #68]	; (3df4 <LIDAR_REQ_scan+0x54>)
    3db0:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_SCAN;
    3db2:	2520      	movs	r5, #32
    3db4:	4b10      	ldr	r3, [pc, #64]	; (3df8 <LIDAR_REQ_scan+0x58>)
    3db6:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3db8:	2300      	movs	r3, #0
    3dba:	4a10      	ldr	r2, [pc, #64]	; (3dfc <LIDAR_REQ_scan+0x5c>)
    3dbc:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    3dbe:	4a10      	ldr	r2, [pc, #64]	; (3e00 <LIDAR_REQ_scan+0x60>)
    3dc0:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    3dc2:	4b10      	ldr	r3, [pc, #64]	; (3e04 <LIDAR_REQ_scan+0x64>)
    3dc4:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3dc6:	4c10      	ldr	r4, [pc, #64]	; (3e08 <LIDAR_REQ_scan+0x68>)
    3dc8:	9500      	str	r5, [sp, #0]
    3dca:	23a5      	movs	r3, #165	; 0xa5
    3dcc:	4a0f      	ldr	r2, [pc, #60]	; (3e0c <LIDAR_REQ_scan+0x6c>)
    3dce:	f44f 7180 	mov.w	r1, #256	; 0x100
    3dd2:	4620      	mov	r0, r4
    3dd4:	4d0e      	ldr	r5, [pc, #56]	; (3e10 <LIDAR_REQ_scan+0x70>)
    3dd6:	47a8      	blx	r5
    3dd8:	b281      	uxth	r1, r0
    3dda:	4b0e      	ldr	r3, [pc, #56]	; (3e14 <LIDAR_REQ_scan+0x74>)
    3ddc:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3dde:	4620      	mov	r0, r4
    3de0:	4b0d      	ldr	r3, [pc, #52]	; (3e18 <LIDAR_REQ_scan+0x78>)
    3de2:	4798      	blx	r3
}
    3de4:	b003      	add	sp, #12
    3de6:	bd30      	pop	{r4, r5, pc}
    3de8:	00008c40 	.word	0x00008c40
    3dec:	00006865 	.word	0x00006865
    3df0:	20000558 	.word	0x20000558
    3df4:	2000100c 	.word	0x2000100c
    3df8:	200005e4 	.word	0x200005e4
    3dfc:	200005e0 	.word	0x200005e0
    3e00:	200005ec 	.word	0x200005ec
    3e04:	00003c95 	.word	0x00003c95
    3e08:	200009fc 	.word	0x200009fc
    3e0c:	00008d08 	.word	0x00008d08
    3e10:	00006a31 	.word	0x00006a31
    3e14:	200005de 	.word	0x200005de
    3e18:	0000386d 	.word	0x0000386d

00003e1c <LIDAR_REQ_express_scan>:
{	
    3e1c:	b530      	push	{r4, r5, lr}
    3e1e:	b085      	sub	sp, #20
		printf("\r\nRequesting LiDAR start express scan\r\n");
    3e20:	4822      	ldr	r0, [pc, #136]	; (3eac <LIDAR_REQ_express_scan+0x90>)
    3e22:	4b23      	ldr	r3, [pc, #140]	; (3eb0 <LIDAR_REQ_express_scan+0x94>)
    3e24:	4798      	blx	r3
	start_time = systick_count;
    3e26:	4b23      	ldr	r3, [pc, #140]	; (3eb4 <LIDAR_REQ_express_scan+0x98>)
    3e28:	681a      	ldr	r2, [r3, #0]
    3e2a:	4b23      	ldr	r3, [pc, #140]	; (3eb8 <LIDAR_REQ_express_scan+0x9c>)
    3e2c:	601a      	str	r2, [r3, #0]
	char working_mode = 0;
    3e2e:	2300      	movs	r3, #0
    3e30:	f88d 300f 	strb.w	r3, [sp, #15]
	char reserved_fields = 0;
    3e34:	f88d 300e 	strb.w	r3, [sp, #14]
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_EXPRESS_SCAN ^ payload_size;
    3e38:	2222      	movs	r2, #34	; 0x22
    3e3a:	f88d 200d 	strb.w	r2, [sp, #13]
	lidar_request = LIDAR_EXPRESS_SCAN;
    3e3e:	2582      	movs	r5, #130	; 0x82
    3e40:	4a1e      	ldr	r2, [pc, #120]	; (3ebc <LIDAR_REQ_express_scan+0xa0>)
    3e42:	7015      	strb	r5, [r2, #0]
	invalid_exp_scans = 0;
    3e44:	4a1e      	ldr	r2, [pc, #120]	; (3ec0 <LIDAR_REQ_express_scan+0xa4>)
    3e46:	6013      	str	r3, [r2, #0]
    scan_count = 0;
    3e48:	4a1e      	ldr	r2, [pc, #120]	; (3ec4 <LIDAR_REQ_express_scan+0xa8>)
    3e4a:	6013      	str	r3, [r2, #0]
	byte_count = 0;
    3e4c:	4a1e      	ldr	r2, [pc, #120]	; (3ec8 <LIDAR_REQ_express_scan+0xac>)
    3e4e:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    3e50:	4b1e      	ldr	r3, [pc, #120]	; (3ecc <LIDAR_REQ_express_scan+0xb0>)
    3e52:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3e54:	4c1e      	ldr	r4, [pc, #120]	; (3ed0 <LIDAR_REQ_express_scan+0xb4>)
    3e56:	2305      	movs	r3, #5
    3e58:	9301      	str	r3, [sp, #4]
    3e5a:	9500      	str	r5, [sp, #0]
    3e5c:	23a5      	movs	r3, #165	; 0xa5
    3e5e:	4a1d      	ldr	r2, [pc, #116]	; (3ed4 <LIDAR_REQ_express_scan+0xb8>)
    3e60:	f44f 7180 	mov.w	r1, #256	; 0x100
    3e64:	4620      	mov	r0, r4
    3e66:	4d1c      	ldr	r5, [pc, #112]	; (3ed8 <LIDAR_REQ_express_scan+0xbc>)
    3e68:	47a8      	blx	r5
    3e6a:	b281      	uxth	r1, r0
    3e6c:	4b1b      	ldr	r3, [pc, #108]	; (3edc <LIDAR_REQ_express_scan+0xc0>)
    3e6e:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3e70:	4620      	mov	r0, r4
    3e72:	4c1b      	ldr	r4, [pc, #108]	; (3ee0 <LIDAR_REQ_express_scan+0xc4>)
    3e74:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&working_mode, 1);
    3e76:	2101      	movs	r1, #1
    3e78:	f10d 000f 	add.w	r0, sp, #15
    3e7c:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3e7e:	2101      	movs	r1, #1
    3e80:	f10d 000e 	add.w	r0, sp, #14
    3e84:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3e86:	2101      	movs	r1, #1
    3e88:	f10d 000e 	add.w	r0, sp, #14
    3e8c:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3e8e:	2101      	movs	r1, #1
    3e90:	f10d 000e 	add.w	r0, sp, #14
    3e94:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3e96:	2101      	movs	r1, #1
    3e98:	f10d 000e 	add.w	r0, sp, #14
    3e9c:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    3e9e:	2101      	movs	r1, #1
    3ea0:	f10d 000d 	add.w	r0, sp, #13
    3ea4:	47a0      	blx	r4
}
    3ea6:	b005      	add	sp, #20
    3ea8:	bd30      	pop	{r4, r5, pc}
    3eaa:	bf00      	nop
    3eac:	00008c60 	.word	0x00008c60
    3eb0:	00006865 	.word	0x00006865
    3eb4:	20000558 	.word	0x20000558
    3eb8:	2000100c 	.word	0x2000100c
    3ebc:	200005e4 	.word	0x200005e4
    3ec0:	200005e8 	.word	0x200005e8
    3ec4:	200005ec 	.word	0x200005ec
    3ec8:	200005e0 	.word	0x200005e0
    3ecc:	00003c95 	.word	0x00003c95
    3ed0:	200009fc 	.word	0x200009fc
    3ed4:	00008d10 	.word	0x00008d10
    3ed8:	00006a31 	.word	0x00006a31
    3edc:	200005de 	.word	0x200005de
    3ee0:	0000386d 	.word	0x0000386d

00003ee4 <LIDAR_REQ_force_scan>:
{
    3ee4:	b530      	push	{r4, r5, lr}
    3ee6:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR start force scan\r\n");
    3ee8:	4810      	ldr	r0, [pc, #64]	; (3f2c <LIDAR_REQ_force_scan+0x48>)
    3eea:	4b11      	ldr	r3, [pc, #68]	; (3f30 <LIDAR_REQ_force_scan+0x4c>)
    3eec:	4798      	blx	r3
	start_time = systick_count;
    3eee:	4b11      	ldr	r3, [pc, #68]	; (3f34 <LIDAR_REQ_force_scan+0x50>)
    3ef0:	681a      	ldr	r2, [r3, #0]
    3ef2:	4b11      	ldr	r3, [pc, #68]	; (3f38 <LIDAR_REQ_force_scan+0x54>)
    3ef4:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_FORCE_SCAN;
    3ef6:	2521      	movs	r5, #33	; 0x21
    3ef8:	4b10      	ldr	r3, [pc, #64]	; (3f3c <LIDAR_REQ_force_scan+0x58>)
    3efa:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3efc:	2300      	movs	r3, #0
    3efe:	4a10      	ldr	r2, [pc, #64]	; (3f40 <LIDAR_REQ_force_scan+0x5c>)
    3f00:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    3f02:	4a10      	ldr	r2, [pc, #64]	; (3f44 <LIDAR_REQ_force_scan+0x60>)
    3f04:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    3f06:	4b10      	ldr	r3, [pc, #64]	; (3f48 <LIDAR_REQ_force_scan+0x64>)
    3f08:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3f0a:	4c10      	ldr	r4, [pc, #64]	; (3f4c <LIDAR_REQ_force_scan+0x68>)
    3f0c:	9500      	str	r5, [sp, #0]
    3f0e:	23a5      	movs	r3, #165	; 0xa5
    3f10:	4a0f      	ldr	r2, [pc, #60]	; (3f50 <LIDAR_REQ_force_scan+0x6c>)
    3f12:	f44f 7180 	mov.w	r1, #256	; 0x100
    3f16:	4620      	mov	r0, r4
    3f18:	4d0e      	ldr	r5, [pc, #56]	; (3f54 <LIDAR_REQ_force_scan+0x70>)
    3f1a:	47a8      	blx	r5
    3f1c:	b281      	uxth	r1, r0
    3f1e:	4b0e      	ldr	r3, [pc, #56]	; (3f58 <LIDAR_REQ_force_scan+0x74>)
    3f20:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3f22:	4620      	mov	r0, r4
    3f24:	4b0d      	ldr	r3, [pc, #52]	; (3f5c <LIDAR_REQ_force_scan+0x78>)
    3f26:	4798      	blx	r3
}
    3f28:	b003      	add	sp, #12
    3f2a:	bd30      	pop	{r4, r5, pc}
    3f2c:	00008c88 	.word	0x00008c88
    3f30:	00006865 	.word	0x00006865
    3f34:	20000558 	.word	0x20000558
    3f38:	2000100c 	.word	0x2000100c
    3f3c:	200005e4 	.word	0x200005e4
    3f40:	200005e0 	.word	0x200005e0
    3f44:	200005ec 	.word	0x200005ec
    3f48:	00003c95 	.word	0x00003c95
    3f4c:	200009fc 	.word	0x200009fc
    3f50:	00008d08 	.word	0x00008d08
    3f54:	00006a31 	.word	0x00006a31
    3f58:	200005de 	.word	0x200005de
    3f5c:	0000386d 	.word	0x0000386d

00003f60 <LIDAR_REQ_get_info>:
{
    3f60:	b530      	push	{r4, r5, lr}
    3f62:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR info\r\n");
    3f64:	480f      	ldr	r0, [pc, #60]	; (3fa4 <LIDAR_REQ_get_info+0x44>)
    3f66:	4b10      	ldr	r3, [pc, #64]	; (3fa8 <LIDAR_REQ_get_info+0x48>)
    3f68:	4798      	blx	r3
	start_time = systick_count;
    3f6a:	4b10      	ldr	r3, [pc, #64]	; (3fac <LIDAR_REQ_get_info+0x4c>)
    3f6c:	681a      	ldr	r2, [r3, #0]
    3f6e:	4b10      	ldr	r3, [pc, #64]	; (3fb0 <LIDAR_REQ_get_info+0x50>)
    3f70:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_GET_INFO;
    3f72:	2550      	movs	r5, #80	; 0x50
    3f74:	4b0f      	ldr	r3, [pc, #60]	; (3fb4 <LIDAR_REQ_get_info+0x54>)
    3f76:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3f78:	2200      	movs	r2, #0
    3f7a:	4b0f      	ldr	r3, [pc, #60]	; (3fb8 <LIDAR_REQ_get_info+0x58>)
    3f7c:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    3f7e:	4b0f      	ldr	r3, [pc, #60]	; (3fbc <LIDAR_REQ_get_info+0x5c>)
    3f80:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3f82:	4c0f      	ldr	r4, [pc, #60]	; (3fc0 <LIDAR_REQ_get_info+0x60>)
    3f84:	9500      	str	r5, [sp, #0]
    3f86:	23a5      	movs	r3, #165	; 0xa5
    3f88:	4a0e      	ldr	r2, [pc, #56]	; (3fc4 <LIDAR_REQ_get_info+0x64>)
    3f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
    3f8e:	4620      	mov	r0, r4
    3f90:	4d0d      	ldr	r5, [pc, #52]	; (3fc8 <LIDAR_REQ_get_info+0x68>)
    3f92:	47a8      	blx	r5
    3f94:	b281      	uxth	r1, r0
    3f96:	4b0d      	ldr	r3, [pc, #52]	; (3fcc <LIDAR_REQ_get_info+0x6c>)
    3f98:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3f9a:	4620      	mov	r0, r4
    3f9c:	4b0c      	ldr	r3, [pc, #48]	; (3fd0 <LIDAR_REQ_get_info+0x70>)
    3f9e:	4798      	blx	r3
}
    3fa0:	b003      	add	sp, #12
    3fa2:	bd30      	pop	{r4, r5, pc}
    3fa4:	00008d18 	.word	0x00008d18
    3fa8:	00006865 	.word	0x00006865
    3fac:	20000558 	.word	0x20000558
    3fb0:	2000100c 	.word	0x2000100c
    3fb4:	200005e4 	.word	0x200005e4
    3fb8:	200005e0 	.word	0x200005e0
    3fbc:	00003c95 	.word	0x00003c95
    3fc0:	200009fc 	.word	0x200009fc
    3fc4:	00008d08 	.word	0x00008d08
    3fc8:	00006a31 	.word	0x00006a31
    3fcc:	200005de 	.word	0x200005de
    3fd0:	0000386d 	.word	0x0000386d

00003fd4 <LIDAR_REQ_get_health>:
{
    3fd4:	b530      	push	{r4, r5, lr}
    3fd6:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR health\r\n");
    3fd8:	480f      	ldr	r0, [pc, #60]	; (4018 <LIDAR_REQ_get_health+0x44>)
    3fda:	4b10      	ldr	r3, [pc, #64]	; (401c <LIDAR_REQ_get_health+0x48>)
    3fdc:	4798      	blx	r3
	start_time = systick_count;
    3fde:	4b10      	ldr	r3, [pc, #64]	; (4020 <LIDAR_REQ_get_health+0x4c>)
    3fe0:	681a      	ldr	r2, [r3, #0]
    3fe2:	4b10      	ldr	r3, [pc, #64]	; (4024 <LIDAR_REQ_get_health+0x50>)
    3fe4:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_GET_HEALTH;
    3fe6:	2552      	movs	r5, #82	; 0x52
    3fe8:	4b0f      	ldr	r3, [pc, #60]	; (4028 <LIDAR_REQ_get_health+0x54>)
    3fea:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3fec:	2200      	movs	r2, #0
    3fee:	4b0f      	ldr	r3, [pc, #60]	; (402c <LIDAR_REQ_get_health+0x58>)
    3ff0:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    3ff2:	4b0f      	ldr	r3, [pc, #60]	; (4030 <LIDAR_REQ_get_health+0x5c>)
    3ff4:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3ff6:	4c0f      	ldr	r4, [pc, #60]	; (4034 <LIDAR_REQ_get_health+0x60>)
    3ff8:	9500      	str	r5, [sp, #0]
    3ffa:	23a5      	movs	r3, #165	; 0xa5
    3ffc:	4a0e      	ldr	r2, [pc, #56]	; (4038 <LIDAR_REQ_get_health+0x64>)
    3ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
    4002:	4620      	mov	r0, r4
    4004:	4d0d      	ldr	r5, [pc, #52]	; (403c <LIDAR_REQ_get_health+0x68>)
    4006:	47a8      	blx	r5
    4008:	b281      	uxth	r1, r0
    400a:	4b0d      	ldr	r3, [pc, #52]	; (4040 <LIDAR_REQ_get_health+0x6c>)
    400c:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    400e:	4620      	mov	r0, r4
    4010:	4b0c      	ldr	r3, [pc, #48]	; (4044 <LIDAR_REQ_get_health+0x70>)
    4012:	4798      	blx	r3
}
    4014:	b003      	add	sp, #12
    4016:	bd30      	pop	{r4, r5, pc}
    4018:	00008d34 	.word	0x00008d34
    401c:	00006865 	.word	0x00006865
    4020:	20000558 	.word	0x20000558
    4024:	2000100c 	.word	0x2000100c
    4028:	200005e4 	.word	0x200005e4
    402c:	200005e0 	.word	0x200005e0
    4030:	00003c95 	.word	0x00003c95
    4034:	200009fc 	.word	0x200009fc
    4038:	00008d08 	.word	0x00008d08
    403c:	00006a31 	.word	0x00006a31
    4040:	200005de 	.word	0x200005de
    4044:	0000386d 	.word	0x0000386d

00004048 <LIDAR_REQ_get_samplerate>:
{
    4048:	b530      	push	{r4, r5, lr}
    404a:	b083      	sub	sp, #12
		printf("\r\nRequesting LiDAR samplerates\r\n");
    404c:	480f      	ldr	r0, [pc, #60]	; (408c <LIDAR_REQ_get_samplerate+0x44>)
    404e:	4b10      	ldr	r3, [pc, #64]	; (4090 <LIDAR_REQ_get_samplerate+0x48>)
    4050:	4798      	blx	r3
	start_time = systick_count;
    4052:	4b10      	ldr	r3, [pc, #64]	; (4094 <LIDAR_REQ_get_samplerate+0x4c>)
    4054:	681a      	ldr	r2, [r3, #0]
    4056:	4b10      	ldr	r3, [pc, #64]	; (4098 <LIDAR_REQ_get_samplerate+0x50>)
    4058:	601a      	str	r2, [r3, #0]
	lidar_request = LIDAR_GET_SAMPLERATE;
    405a:	2559      	movs	r5, #89	; 0x59
    405c:	4b0f      	ldr	r3, [pc, #60]	; (409c <LIDAR_REQ_get_samplerate+0x54>)
    405e:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    4060:	2200      	movs	r2, #0
    4062:	4b0f      	ldr	r3, [pc, #60]	; (40a0 <LIDAR_REQ_get_samplerate+0x58>)
    4064:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    4066:	4b0f      	ldr	r3, [pc, #60]	; (40a4 <LIDAR_REQ_get_samplerate+0x5c>)
    4068:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    406a:	4c0f      	ldr	r4, [pc, #60]	; (40a8 <LIDAR_REQ_get_samplerate+0x60>)
    406c:	9500      	str	r5, [sp, #0]
    406e:	23a5      	movs	r3, #165	; 0xa5
    4070:	4a0e      	ldr	r2, [pc, #56]	; (40ac <LIDAR_REQ_get_samplerate+0x64>)
    4072:	f44f 7180 	mov.w	r1, #256	; 0x100
    4076:	4620      	mov	r0, r4
    4078:	4d0d      	ldr	r5, [pc, #52]	; (40b0 <LIDAR_REQ_get_samplerate+0x68>)
    407a:	47a8      	blx	r5
    407c:	b281      	uxth	r1, r0
    407e:	4b0d      	ldr	r3, [pc, #52]	; (40b4 <LIDAR_REQ_get_samplerate+0x6c>)
    4080:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    4082:	4620      	mov	r0, r4
    4084:	4b0c      	ldr	r3, [pc, #48]	; (40b8 <LIDAR_REQ_get_samplerate+0x70>)
    4086:	4798      	blx	r3
}
    4088:	b003      	add	sp, #12
    408a:	bd30      	pop	{r4, r5, pc}
    408c:	00008d50 	.word	0x00008d50
    4090:	00006865 	.word	0x00006865
    4094:	20000558 	.word	0x20000558
    4098:	2000100c 	.word	0x2000100c
    409c:	200005e4 	.word	0x200005e4
    40a0:	200005e0 	.word	0x200005e0
    40a4:	00003c95 	.word	0x00003c95
    40a8:	200009fc 	.word	0x200009fc
    40ac:	00008d08 	.word	0x00008d08
    40b0:	00006a31 	.word	0x00006a31
    40b4:	200005de 	.word	0x200005de
    40b8:	0000386d 	.word	0x0000386d

000040bc <LIDAR_RES_stop>:

/** 
  * "STOP" request has no response.
  */
void LIDAR_RES_stop(void) 
{
    40bc:	b508      	push	{r3, lr}
	if (!lidar_timer) {
    40be:	4b06      	ldr	r3, [pc, #24]	; (40d8 <LIDAR_RES_stop+0x1c>)
    40c0:	881b      	ldrh	r3, [r3, #0]
    40c2:	b29b      	uxth	r3, r3
    40c4:	b103      	cbz	r3, 40c8 <LIDAR_RES_stop+0xc>
    40c6:	bd08      	pop	{r3, pc}
		lidar_timing = 0;
    40c8:	4a04      	ldr	r2, [pc, #16]	; (40dc <LIDAR_RES_stop+0x20>)
    40ca:	7013      	strb	r3, [r2, #0]
		processing = 0;
    40cc:	4a04      	ldr	r2, [pc, #16]	; (40e0 <LIDAR_RES_stop+0x24>)
    40ce:	7013      	strb	r3, [r2, #0]
		if (DEBUG) 
			printf("LiDAR stopped\r\n");
    40d0:	4804      	ldr	r0, [pc, #16]	; (40e4 <LIDAR_RES_stop+0x28>)
    40d2:	4b05      	ldr	r3, [pc, #20]	; (40e8 <LIDAR_RES_stop+0x2c>)
    40d4:	4798      	blx	r3
	}
}
    40d6:	e7f6      	b.n	40c6 <LIDAR_RES_stop+0xa>
    40d8:	20001008 	.word	0x20001008
    40dc:	20001010 	.word	0x20001010
    40e0:	200005dc 	.word	0x200005dc
    40e4:	00008d70 	.word	0x00008d70
    40e8:	00006865 	.word	0x00006865

000040ec <LIDAR_RES_reset>:
  *           RP LIDAR System.\r\n
  *           Firmware Ver 1.27 - rc9, HW Ver 5\r\n
  *           Model: 28\r\n
  */
void LIDAR_RES_reset(void) 
{   
    40ec:	b508      	push	{r3, lr}
	if (!lidar_timer) {
    40ee:	4b06      	ldr	r3, [pc, #24]	; (4108 <LIDAR_RES_reset+0x1c>)
    40f0:	881b      	ldrh	r3, [r3, #0]
    40f2:	b29b      	uxth	r3, r3
    40f4:	b103      	cbz	r3, 40f8 <LIDAR_RES_reset+0xc>
    40f6:	bd08      	pop	{r3, pc}
		lidar_timing = 0;
    40f8:	4a04      	ldr	r2, [pc, #16]	; (410c <LIDAR_RES_reset+0x20>)
    40fa:	7013      	strb	r3, [r2, #0]
		processing = 0;
    40fc:	4a04      	ldr	r2, [pc, #16]	; (4110 <LIDAR_RES_reset+0x24>)
    40fe:	7013      	strb	r3, [r2, #0]
		if (DEBUG) 
			printf("LiDAR reset\r\n");
    4100:	4804      	ldr	r0, [pc, #16]	; (4114 <LIDAR_RES_reset+0x28>)
    4102:	4b05      	ldr	r3, [pc, #20]	; (4118 <LIDAR_RES_reset+0x2c>)
    4104:	4798      	blx	r3
			
	}
}
    4106:	e7f6      	b.n	40f6 <LIDAR_RES_reset+0xa>
    4108:	20001008 	.word	0x20001008
    410c:	20001010 	.word	0x20001010
    4110:	200005dc 	.word	0x200005dc
    4114:	00008d80 	.word	0x00008d80
    4118:	00006865 	.word	0x00006865

0000411c <LIDAR_RES_scan>:
  *						+2		angle_q6[14:7]
  *						+3		distance_q2[7:0]
  *						+4		distance_q2[15:8]
  */
void LIDAR_RES_scan(void) 
{
    411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* check[0] - start
	   check[1] - ~start
	   check[2] - check	 */
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    4120:	4a21      	ldr	r2, [pc, #132]	; (41a8 <LIDAR_RES_scan+0x8c>)
    4122:	7813      	ldrb	r3, [r2, #0]
    4124:	7850      	ldrb	r0, [r2, #1]
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    4126:	7855      	ldrb	r5, [r2, #1]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    4128:	7891      	ldrb	r1, [r2, #2]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    412a:	78d4      	ldrb	r4, [r2, #3]
    412c:	7916      	ldrb	r6, [r2, #4]
	
	/* Decrement byte_count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= 5;
    412e:	4f1f      	ldr	r7, [pc, #124]	; (41ac <LIDAR_RES_scan+0x90>)
    4130:	683a      	ldr	r2, [r7, #0]
    4132:	3a05      	subs	r2, #5
    4134:	603a      	str	r2, [r7, #0]
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    4136:	005b      	lsls	r3, r3, #1
    4138:	f003 0306 	and.w	r3, r3, #6
    413c:	f000 0201 	and.w	r2, r0, #1
    4140:	4313      	orrs	r3, r2
	
	/* Checking: check=1, ~start=0, start=1 */
	if (check == 0x5 || check == 0x6) {
    4142:	3b05      	subs	r3, #5
    4144:	b2db      	uxtb	r3, r3
    4146:	2b01      	cmp	r3, #1
    4148:	d906      	bls.n	4158 <LIDAR_RES_scan+0x3c>
		scans[scan_count].angle = angle;
		scans[scan_count++].distance = distance;
	}
	
    if (DEBUG)
        if (scan_count % 16 == 0)
    414a:	4b19      	ldr	r3, [pc, #100]	; (41b0 <LIDAR_RES_scan+0x94>)
    414c:	6819      	ldr	r1, [r3, #0]
    414e:	f011 0f0f 	tst.w	r1, #15
    4152:	d023      	beq.n	419c <LIDAR_RES_scan+0x80>
    4154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4158:	b2ed      	uxtb	r5, r5
    415a:	b2c9      	uxtb	r1, r1
    415c:	b2e4      	uxtb	r4, r4
    415e:	b2f6      	uxtb	r6, r6
		scans[scan_count].quality = DATA_RESPONSE[0] >> 2;
    4160:	f8df c04c 	ldr.w	ip, [pc, #76]	; 41b0 <LIDAR_RES_scan+0x94>
    4164:	f8dc 0000 	ldr.w	r0, [ip]
    4168:	4b0f      	ldr	r3, [pc, #60]	; (41a8 <LIDAR_RES_scan+0x8c>)
    416a:	f893 e000 	ldrb.w	lr, [r3]
    416e:	4b11      	ldr	r3, [pc, #68]	; (41b4 <LIDAR_RES_scan+0x98>)
    4170:	0042      	lsls	r2, r0, #1
    4172:	1817      	adds	r7, r2, r0
    4174:	007f      	lsls	r7, r7, #1
    4176:	eb03 0807 	add.w	r8, r3, r7
    417a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    417e:	f803 e007 	strb.w	lr, [r3, r7]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    4182:	01c9      	lsls	r1, r1, #7
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    4184:	eb01 0555 	add.w	r5, r1, r5, lsr #1
		scans[scan_count].angle = angle;
    4188:	f8a8 5002 	strh.w	r5, [r8, #2]
		scans[scan_count++].distance = distance;
    418c:	1c41      	adds	r1, r0, #1
    418e:	f8cc 1000 	str.w	r1, [ip]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    4192:	eb04 2406 	add.w	r4, r4, r6, lsl #8
		scans[scan_count++].distance = distance;
    4196:	f8a8 4004 	strh.w	r4, [r8, #4]
    419a:	e7d6      	b.n	414a <LIDAR_RES_scan+0x2e>
            printf("gathered %0"PRIu32"/%0d scans...\r\n", scan_count, MAX_SCANS);
    419c:	2240      	movs	r2, #64	; 0x40
    419e:	4806      	ldr	r0, [pc, #24]	; (41b8 <LIDAR_RES_scan+0x9c>)
    41a0:	4b06      	ldr	r3, [pc, #24]	; (41bc <LIDAR_RES_scan+0xa0>)
    41a2:	4798      	blx	r3
    else {
	    printf("Invalid response: C=%u, !S=%u, S=%u\r\n",
		        (check >> 3), ((check >> 2) & 0x1), (check & 0x1));
	}
    */
}
    41a4:	e7d6      	b.n	4154 <LIDAR_RES_scan+0x38>
    41a6:	bf00      	nop
    41a8:	2000055c 	.word	0x2000055c
    41ac:	200005e0 	.word	0x200005e0
    41b0:	200005ec 	.word	0x200005ec
    41b4:	200005f0 	.word	0x200005f0
    41b8:	00008d90 	.word	0x00008d90
    41bc:	0000677d 	.word	0x0000677d

000041c0 <LIDAR_RES_express_scan>:
  *						+2		distance2[6:0], angle_val2[4] (sign)
  *						+3		distance2[14:7]
  *						+4		angle_val2[3:0], angle_val1[3:0]
  */
void LIDAR_RES_express_scan(void) 
{ 
    41c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t calc_checksum;
	uint8_t PAYLOAD_SIZE=84, CABIN_COUNT=16, CABIN_START=4, CABIN_BYTE_COUNT=5;
	uint16_t i, pos;
	
	uint8_t checksum = ((uint8_t)DATA_RESPONSE[1] << 4) | ((uint8_t)DATA_RESPONSE[0] & 0x0F);
    41c2:	4b35      	ldr	r3, [pc, #212]	; (4298 <LIDAR_RES_express_scan+0xd8>)
    41c4:	785a      	ldrb	r2, [r3, #1]
    41c6:	781c      	ldrb	r4, [r3, #0]
    41c8:	f004 040f 	and.w	r4, r4, #15
    41cc:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    41d0:	b2e4      	uxtb	r4, r4
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    41d2:	f893 e002 	ldrb.w	lr, [r3, #2]
    41d6:	fa5f fe8e 	uxtb.w	lr, lr
    41da:	78df      	ldrb	r7, [r3, #3]
    41dc:	b2ff      	uxtb	r7, r7
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    41de:	78db      	ldrb	r3, [r3, #3]
    41e0:	b2dd      	uxtb	r5, r3
	
    /* Decrement byte count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= PAYLOAD_SIZE;
    41e2:	4a2e      	ldr	r2, [pc, #184]	; (429c <LIDAR_RES_express_scan+0xdc>)
    41e4:	6813      	ldr	r3, [r2, #0]
    41e6:	3b54      	subs	r3, #84	; 0x54
    41e8:	6013      	str	r3, [r2, #0]
    41ea:	2302      	movs	r3, #2
	
	/* Check if data valid */
	calc_checksum = 0;
    41ec:	2200      	movs	r2, #0
	for (i=2; i<PAYLOAD_SIZE; i++)
		calc_checksum ^= DATA_RESPONSE[i];
    41ee:	482a      	ldr	r0, [pc, #168]	; (4298 <LIDAR_RES_express_scan+0xd8>)
    41f0:	5cc1      	ldrb	r1, [r0, r3]
    41f2:	404a      	eors	r2, r1
    41f4:	3301      	adds	r3, #1
	for (i=2; i<PAYLOAD_SIZE; i++)
    41f6:	2b54      	cmp	r3, #84	; 0x54
    41f8:	d1fa      	bne.n	41f0 <LIDAR_RES_express_scan+0x30>
		
	if (checksum != calc_checksum) {
    41fa:	4294      	cmp	r4, r2
    41fc:	d004      	beq.n	4208 <LIDAR_RES_express_scan+0x48>
			printf("First 8: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
					DATA_RESPONSE[0], DATA_RESPONSE[1], DATA_RESPONSE[2], DATA_RESPONSE[3], 
					DATA_RESPONSE[4], DATA_RESPONSE[5], DATA_RESPONSE[6], DATA_RESPONSE[7]);
		}
        */
		invalid_exp_scans++;
    41fe:	4a28      	ldr	r2, [pc, #160]	; (42a0 <LIDAR_RES_express_scan+0xe0>)
    4200:	6813      	ldr	r3, [r2, #0]
    4202:	3301      	adds	r3, #1
    4204:	6013      	str	r3, [r2, #0]
		return;
    4206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    4208:	09ed      	lsrs	r5, r5, #7
    420a:	4b26      	ldr	r3, [pc, #152]	; (42a4 <LIDAR_RES_express_scan+0xe4>)
    420c:	681e      	ldr	r6, [r3, #0]
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    420e:	023c      	lsls	r4, r7, #8
    4210:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
    4214:	ea44 040e 	orr.w	r4, r4, lr
    4218:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    421c:	4b22      	ldr	r3, [pc, #136]	; (42a8 <LIDAR_RES_express_scan+0xe8>)
    421e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    4222:	2105      	movs	r1, #5
	}
	
	for (i=0; i<CABIN_COUNT; i++) {
		pos = CABIN_START+(CABIN_BYTE_COUNT*i);
		cabins[scan_count].S = S_flag;
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    4224:	4a1c      	ldr	r2, [pc, #112]	; (4298 <LIDAR_RES_express_scan+0xd8>)
		cabins[scan_count].S = S_flag;
    4226:	701d      	strb	r5, [r3, #0]
    4228:	f101 3eff 	add.w	lr, r1, #4294967295
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    422c:	f812 700e 	ldrb.w	r7, [r2, lr]
											((uint8_t)DATA_RESPONSE[pos+1] << 7);
    4230:	5c50      	ldrb	r0, [r2, r1]
    4232:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    4234:	ea40 0057 	orr.w	r0, r0, r7, lsr #1
    4238:	8098      	strh	r0, [r3, #4]
    423a:	1c4f      	adds	r7, r1, #1
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    423c:	f812 c007 	ldrb.w	ip, [r2, r7]
    4240:	1c88      	adds	r0, r1, #2
											((uint8_t)DATA_RESPONSE[pos+3] << 7);
    4242:	5c10      	ldrb	r0, [r2, r0]
    4244:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    4246:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    424a:	80d8      	strh	r0, [r3, #6]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    424c:	f812 000e 	ldrb.w	r0, [r2, lr]
    4250:	f101 0e03 	add.w	lr, r1, #3
											((uint8_t)DATA_RESPONSE[pos+4] >> 4);
    4254:	f812 c00e 	ldrb.w	ip, [r2, lr]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    4258:	0100      	lsls	r0, r0, #4
    425a:	f000 0010 	and.w	r0, r0, #16
    425e:	ea40 101c 	orr.w	r0, r0, ip, lsr #4
    4262:	7058      	strb	r0, [r3, #1]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    4264:	5dd0      	ldrb	r0, [r2, r7]
											(DATA_RESPONSE[pos+4] & 0x0F);
    4266:	f812 700e 	ldrb.w	r7, [r2, lr]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    426a:	0100      	lsls	r0, r0, #4
    426c:	f000 0010 	and.w	r0, r0, #16
											(DATA_RESPONSE[pos+4] & 0x0F);
    4270:	f007 070f 	and.w	r7, r7, #15
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    4274:	4338      	orrs	r0, r7
    4276:	7098      	strb	r0, [r3, #2]
		cabins[scan_count++].start_angle = start_angle;
    4278:	811c      	strh	r4, [r3, #8]
    427a:	330a      	adds	r3, #10
    427c:	3105      	adds	r1, #5
	for (i=0; i<CABIN_COUNT; i++) {
    427e:	2955      	cmp	r1, #85	; 0x55
    4280:	d1d1      	bne.n	4226 <LIDAR_RES_express_scan+0x66>
    4282:	f106 0210 	add.w	r2, r6, #16
    4286:	4b07      	ldr	r3, [pc, #28]	; (42a4 <LIDAR_RES_express_scan+0xe4>)
    4288:	601a      	str	r2, [r3, #0]
	}
	
    if (DEBUG)
	    printf("%0"PRIu32" invalid scans -- gathered %0"PRIu32"/%0d scans...\r\n", 
    428a:	2340      	movs	r3, #64	; 0x40
    428c:	4904      	ldr	r1, [pc, #16]	; (42a0 <LIDAR_RES_express_scan+0xe0>)
    428e:	6809      	ldr	r1, [r1, #0]
    4290:	4806      	ldr	r0, [pc, #24]	; (42ac <LIDAR_RES_express_scan+0xec>)
    4292:	4c07      	ldr	r4, [pc, #28]	; (42b0 <LIDAR_RES_express_scan+0xf0>)
    4294:	47a0      	blx	r4
    4296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4298:	2000055c 	.word	0x2000055c
    429c:	200005e0 	.word	0x200005e0
    42a0:	200005e8 	.word	0x200005e8
    42a4:	200005ec 	.word	0x200005ec
    42a8:	20000770 	.word	0x20000770
    42ac:	00008db0 	.word	0x00008db0
    42b0:	0000677d 	.word	0x0000677d

000042b4 <LIDAR_RES_get_info>:
  *						+19 	serial_number[15]		
  * When converting serial_number to text from hex, the least significant byte 
  *	prints first.
  */
void LIDAR_RES_get_info(void) 
{	
    42b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42b8:	b085      	sub	sp, #20
	uint8_t model_id 		 = DATA_RESPONSE[0];
    42ba:	4b1a      	ldr	r3, [pc, #104]	; (4324 <LIDAR_RES_get_info+0x70>)
    42bc:	f893 b000 	ldrb.w	fp, [r3]
    42c0:	fa5f fb8b 	uxtb.w	fp, fp
	uint8_t firmware_minor	 = DATA_RESPONSE[1];
    42c4:	f893 a001 	ldrb.w	sl, [r3, #1]
    42c8:	fa5f fa8a 	uxtb.w	sl, sl
	uint8_t firmware_major	 = DATA_RESPONSE[2];
    42cc:	f893 9002 	ldrb.w	r9, [r3, #2]
    42d0:	fa5f f989 	uxtb.w	r9, r9
	uint8_t hardware_version = DATA_RESPONSE[3];
    42d4:	f893 8003 	ldrb.w	r8, [r3, #3]
    42d8:	fa5f f888 	uxtb.w	r8, r8
	char serial_number[16]	 = {0};
    42dc:	2300      	movs	r3, #0
    42de:	9300      	str	r3, [sp, #0]
    42e0:	9301      	str	r3, [sp, #4]
    42e2:	9302      	str	r3, [sp, #8]
    42e4:	9303      	str	r3, [sp, #12]
    42e6:	2413      	movs	r4, #19
	
	/** Get hexadecimal string output */
	int i, j=0;
	for (i=15; i>=0; i--) {
		sprintf(&serial_number[j++], "%02X", DATA_RESPONSE[i+4]);
    42e8:	4f0e      	ldr	r7, [pc, #56]	; (4324 <LIDAR_RES_get_info+0x70>)
    42ea:	4e0f      	ldr	r6, [pc, #60]	; (4328 <LIDAR_RES_get_info+0x74>)
    42ec:	4d0f      	ldr	r5, [pc, #60]	; (432c <LIDAR_RES_get_info+0x78>)
    42ee:	5d3a      	ldrb	r2, [r7, r4]
    42f0:	ab04      	add	r3, sp, #16
    42f2:	1b18      	subs	r0, r3, r4
    42f4:	4631      	mov	r1, r6
    42f6:	3003      	adds	r0, #3
    42f8:	47a8      	blx	r5
    42fa:	3c01      	subs	r4, #1
	for (i=15; i>=0; i--) {
    42fc:	2c03      	cmp	r4, #3
    42fe:	d1f6      	bne.n	42ee <LIDAR_RES_get_info+0x3a>
	}
	
    if (DEBUG) {
        printf(" : RPLiDAR Model ID: %u\r\n", model_id);	
    4300:	4659      	mov	r1, fp
    4302:	480b      	ldr	r0, [pc, #44]	; (4330 <LIDAR_RES_get_info+0x7c>)
    4304:	4c0b      	ldr	r4, [pc, #44]	; (4334 <LIDAR_RES_get_info+0x80>)
    4306:	47a0      	blx	r4
        printf(" : Firmware Version: %u.%u\r\n", firmware_major, firmware_minor);
    4308:	4652      	mov	r2, sl
    430a:	4649      	mov	r1, r9
    430c:	480a      	ldr	r0, [pc, #40]	; (4338 <LIDAR_RES_get_info+0x84>)
    430e:	47a0      	blx	r4
        printf(" : Hardware Version: %u\r\n", hardware_version);
    4310:	4641      	mov	r1, r8
    4312:	480a      	ldr	r0, [pc, #40]	; (433c <LIDAR_RES_get_info+0x88>)
    4314:	47a0      	blx	r4
        printf(" : Serial Number: 0x%s\r\n", serial_number);
    4316:	4669      	mov	r1, sp
    4318:	4809      	ldr	r0, [pc, #36]	; (4340 <LIDAR_RES_get_info+0x8c>)
    431a:	47a0      	blx	r4
    }
}
    431c:	b005      	add	sp, #20
    431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4322:	bf00      	nop
    4324:	2000055c 	.word	0x2000055c
    4328:	00008de4 	.word	0x00008de4
    432c:	00006a99 	.word	0x00006a99
    4330:	00008dec 	.word	0x00008dec
    4334:	0000677d 	.word	0x0000677d
    4338:	00008e08 	.word	0x00008e08
    433c:	00008e28 	.word	0x00008e28
    4340:	00008e44 	.word	0x00008e44

00004344 <LIDAR_RES_get_health>:
  *		Order 8..0		+1		error_code[7:0]
  *						+2		error_code[15:8]	
  *	@return uint16_t : error_code
  */
uint16_t LIDAR_RES_get_health(void) 
{
    4344:	b510      	push	{r4, lr}
	char* status;
	uint16_t error_code;  
	
	switch(DATA_RESPONSE[0]) {
    4346:	4b10      	ldr	r3, [pc, #64]	; (4388 <LIDAR_RES_get_health+0x44>)
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	b2db      	uxtb	r3, r3
    434c:	2b01      	cmp	r3, #1
    434e:	d012      	beq.n	4376 <LIDAR_RES_get_health+0x32>
    4350:	b19b      	cbz	r3, 437a <LIDAR_RES_get_health+0x36>
		case 0: status = "GOOD"; break;
		case 1: status = "WARNING"; break;
		case 2: status = "ERROR"; break;
		default: status = "UNKNOWN"; break;
    4352:	4a0e      	ldr	r2, [pc, #56]	; (438c <LIDAR_RES_get_health+0x48>)
    4354:	490e      	ldr	r1, [pc, #56]	; (4390 <LIDAR_RES_get_health+0x4c>)
    4356:	2b02      	cmp	r3, #2
    4358:	bf18      	it	ne
    435a:	4611      	movne	r1, r2
	}
	
	error_code = DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8);
    435c:	4b0a      	ldr	r3, [pc, #40]	; (4388 <LIDAR_RES_get_health+0x44>)
    435e:	781c      	ldrb	r4, [r3, #0]
    4360:	785b      	ldrb	r3, [r3, #1]
    4362:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    4366:	b2a4      	uxth	r4, r4
	
    if (DEBUG) {
		if (error_code == 0)
    4368:	b14c      	cbz	r4, 437e <LIDAR_RES_get_health+0x3a>
			printf(" : LiDAR Health is %s!\r\n", status);
		else 
			printf(" : LiDAR Health is %s!\r\n : Error code: %u\r\n", 
    436a:	4622      	mov	r2, r4
    436c:	4809      	ldr	r0, [pc, #36]	; (4394 <LIDAR_RES_get_health+0x50>)
    436e:	4b0a      	ldr	r3, [pc, #40]	; (4398 <LIDAR_RES_get_health+0x54>)
    4370:	4798      	blx	r3
				    status, error_code);
    }
	
	return error_code;
}
    4372:	4620      	mov	r0, r4
    4374:	bd10      	pop	{r4, pc}
		case 1: status = "WARNING"; break;
    4376:	4909      	ldr	r1, [pc, #36]	; (439c <LIDAR_RES_get_health+0x58>)
    4378:	e7f0      	b.n	435c <LIDAR_RES_get_health+0x18>
		case 0: status = "GOOD"; break;
    437a:	4909      	ldr	r1, [pc, #36]	; (43a0 <LIDAR_RES_get_health+0x5c>)
    437c:	e7ee      	b.n	435c <LIDAR_RES_get_health+0x18>
			printf(" : LiDAR Health is %s!\r\n", status);
    437e:	4809      	ldr	r0, [pc, #36]	; (43a4 <LIDAR_RES_get_health+0x60>)
    4380:	4b05      	ldr	r3, [pc, #20]	; (4398 <LIDAR_RES_get_health+0x54>)
    4382:	4798      	blx	r3
    4384:	e7f5      	b.n	4372 <LIDAR_RES_get_health+0x2e>
    4386:	bf00      	nop
    4388:	2000055c 	.word	0x2000055c
    438c:	00008e78 	.word	0x00008e78
    4390:	00008e70 	.word	0x00008e70
    4394:	00008e9c 	.word	0x00008e9c
    4398:	0000677d 	.word	0x0000677d
    439c:	00008e68 	.word	0x00008e68
    43a0:	00008e60 	.word	0x00008e60
    43a4:	00008e80 	.word	0x00008e80

000043a8 <LIDAR_RES_get_samplerate>:
  *		Order 8..0		+1		Tstandard[15:8]
  *						+2		Texpress[7:0]
  *						+3		Texpress[15:8]	
  */
void LIDAR_RES_get_samplerate(void)
{
    43a8:	b538      	push	{r3, r4, r5, lr}
    if (DEBUG) {
	    printf(" : Standard Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8));
    43aa:	4c07      	ldr	r4, [pc, #28]	; (43c8 <LIDAR_RES_get_samplerate+0x20>)
    43ac:	7823      	ldrb	r3, [r4, #0]
    43ae:	7861      	ldrb	r1, [r4, #1]
	    printf(" : Standard Scan Samplerate: %u\r\n", 
    43b0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    43b4:	4805      	ldr	r0, [pc, #20]	; (43cc <LIDAR_RES_get_samplerate+0x24>)
    43b6:	4d06      	ldr	r5, [pc, #24]	; (43d0 <LIDAR_RES_get_samplerate+0x28>)
    43b8:	47a8      	blx	r5
		printf(" : Express Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[2] + ((unsigned)DATA_RESPONSE[3] << 8));
    43ba:	78a3      	ldrb	r3, [r4, #2]
    43bc:	78e1      	ldrb	r1, [r4, #3]
		printf(" : Express Scan Samplerate: %u\r\n", 
    43be:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    43c2:	4804      	ldr	r0, [pc, #16]	; (43d4 <LIDAR_RES_get_samplerate+0x2c>)
    43c4:	47a8      	blx	r5
    43c6:	bd38      	pop	{r3, r4, r5, pc}
    43c8:	2000055c 	.word	0x2000055c
    43cc:	00008ec8 	.word	0x00008ec8
    43d0:	0000677d 	.word	0x0000677d
    43d4:	00008eec 	.word	0x00008eec

000043d8 <main>:

/** 
  * Application entry point
  */ 
int main(void)
{
    43d8:	b580      	push	{r7, lr}
    43da:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	start_init();
    43dc:	4b2b      	ldr	r3, [pc, #172]	; (448c <main+0xb4>)
    43de:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    43e0:	4b2b      	ldr	r3, [pc, #172]	; (4490 <main+0xb8>)
    43e2:	f642 62df 	movw	r2, #11999	; 0x2edf
    43e6:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    43e8:	21e0      	movs	r1, #224	; 0xe0
    43ea:	4a2a      	ldr	r2, [pc, #168]	; (4494 <main+0xbc>)
    43ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    43f0:	2000      	movs	r0, #0
    43f2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    43f4:	2207      	movs	r2, #7
    43f6:	601a      	str	r2, [r3, #0]
	
	if (SYSTICK_EN)
		SysTick_Config(12000UL); /* 12M ticks/second / 1k ticks/second = 12000 */
	
	status = STATUS_IDLE;
    43f8:	4b27      	ldr	r3, [pc, #156]	; (4498 <main+0xc0>)
    43fa:	7018      	strb	r0, [r3, #0]
	
	SERVO_set_angle(0);
    43fc:	4b27      	ldr	r3, [pc, #156]	; (449c <main+0xc4>)
    43fe:	4798      	blx	r3

	if (DEBUG) {
		printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
    4400:	4827      	ldr	r0, [pc, #156]	; (44a0 <main+0xc8>)
    4402:	4b28      	ldr	r3, [pc, #160]	; (44a4 <main+0xcc>)
    4404:	4798      	blx	r3

		while (1) {
			uint32_t user_selection = 0;

			printf("%s", menu_txt);
    4406:	4f28      	ldr	r7, [pc, #160]	; (44a8 <main+0xd0>)
    4408:	4e28      	ldr	r6, [pc, #160]	; (44ac <main+0xd4>)
    440a:	4d29      	ldr	r5, [pc, #164]	; (44b0 <main+0xd8>)
    440c:	e004      	b.n	4418 <main+0x40>
			
			if (scanf("%"PRIu32"", &user_selection) == 0) {
				/* If its not a number, flush stdin */
				fflush(stdin);
    440e:	4b29      	ldr	r3, [pc, #164]	; (44b4 <main+0xdc>)
    4410:	681b      	ldr	r3, [r3, #0]
    4412:	6858      	ldr	r0, [r3, #4]
    4414:	4b28      	ldr	r3, [pc, #160]	; (44b8 <main+0xe0>)
    4416:	4798      	blx	r3
			uint32_t user_selection = 0;
    4418:	ac02      	add	r4, sp, #8
    441a:	2300      	movs	r3, #0
    441c:	f844 3d04 	str.w	r3, [r4, #-4]!
			printf("%s", menu_txt);
    4420:	4639      	mov	r1, r7
    4422:	4630      	mov	r0, r6
    4424:	47a8      	blx	r5
			if (scanf("%"PRIu32"", &user_selection) == 0) {
    4426:	4621      	mov	r1, r4
    4428:	4824      	ldr	r0, [pc, #144]	; (44bc <main+0xe4>)
    442a:	4b25      	ldr	r3, [pc, #148]	; (44c0 <main+0xe8>)
    442c:	4798      	blx	r3
    442e:	2800      	cmp	r0, #0
    4430:	d0ed      	beq.n	440e <main+0x36>
				continue;
			}
			
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    4432:	9901      	ldr	r1, [sp, #4]
    4434:	4823      	ldr	r0, [pc, #140]	; (44c4 <main+0xec>)
    4436:	47a8      	blx	r5
			
			switch (user_selection) {
    4438:	9b01      	ldr	r3, [sp, #4]
    443a:	3b01      	subs	r3, #1
    443c:	2b05      	cmp	r3, #5
    443e:	d820      	bhi.n	4482 <main+0xaa>
    4440:	e8df f003 	tbb	[pc, r3]
    4444:	16131003 	.word	0x16131003
    4448:	1c19      	.short	0x1c19
  __ASM volatile ("dsb 0xF":::"memory");
    444a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    444e:	4911      	ldr	r1, [pc, #68]	; (4494 <main+0xbc>)
    4450:	68ca      	ldr	r2, [r1, #12]
    4452:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4456:	4b1c      	ldr	r3, [pc, #112]	; (44c8 <main+0xf0>)
    4458:	4313      	orrs	r3, r2
    445a:	60cb      	str	r3, [r1, #12]
    445c:	f3bf 8f4f 	dsb	sy
    __NOP();
    4460:	bf00      	nop
    4462:	e7fd      	b.n	4460 <main+0x88>
				case 1:
					NVIC_SystemReset();
					break;
				
				case 2:
					EEPROM_menu();
    4464:	4b19      	ldr	r3, [pc, #100]	; (44cc <main+0xf4>)
    4466:	4798      	blx	r3
					break;
    4468:	e7d6      	b.n	4418 <main+0x40>

				case 3:
					SERVO_menu();
    446a:	4b19      	ldr	r3, [pc, #100]	; (44d0 <main+0xf8>)
    446c:	4798      	blx	r3
					break;
    446e:	e7d3      	b.n	4418 <main+0x40>
				
				case 4:
					LIDAR_menu();
    4470:	4b18      	ldr	r3, [pc, #96]	; (44d4 <main+0xfc>)
    4472:	4798      	blx	r3
					break;
    4474:	e7d0      	b.n	4418 <main+0x40>
				
				case 5:
					SD_menu();
    4476:	4b18      	ldr	r3, [pc, #96]	; (44d8 <main+0x100>)
    4478:	4798      	blx	r3
					break;
    447a:	e7cd      	b.n	4418 <main+0x40>
				
				case 6:
					scan();
    447c:	4b17      	ldr	r3, [pc, #92]	; (44dc <main+0x104>)
    447e:	4798      	blx	r3
					break;
    4480:	e7ca      	b.n	4418 <main+0x40>
				
				default:
					printf("\r\nInvalid option \r\n");
    4482:	4817      	ldr	r0, [pc, #92]	; (44e0 <main+0x108>)
    4484:	4b07      	ldr	r3, [pc, #28]	; (44a4 <main+0xcc>)
    4486:	4798      	blx	r3
					break;
    4488:	e7c6      	b.n	4418 <main+0x40>
    448a:	bf00      	nop
    448c:	00005699 	.word	0x00005699
    4490:	e000e010 	.word	0xe000e010
    4494:	e000ed00 	.word	0xe000ed00
    4498:	20001011 	.word	0x20001011
    449c:	00005509 	.word	0x00005509
    44a0:	00008f10 	.word	0x00008f10
    44a4:	00006865 	.word	0x00006865
    44a8:	20000210 	.word	0x20000210
    44ac:	00008584 	.word	0x00008584
    44b0:	0000677d 	.word	0x0000677d
    44b4:	200002dc 	.word	0x200002dc
    44b8:	000063dd 	.word	0x000063dd
    44bc:	00008530 	.word	0x00008530
    44c0:	00006895 	.word	0x00006895
    44c4:	00008588 	.word	0x00008588
    44c8:	05fa0004 	.word	0x05fa0004
    44cc:	00000b2d 	.word	0x00000b2d
    44d0:	000055dd 	.word	0x000055dd
    44d4:	000038c9 	.word	0x000038c9
    44d8:	00003529 	.word	0x00003529
    44dc:	000046e1 	.word	0x000046e1
    44e0:	00008f4c 	.word	0x00008f4c

000044e4 <scan_error>:
	
	return PROCESSING;
}

void scan_error(uint16_t error_code)
{
    44e4:	b508      	push	{r3, lr}
    44e6:	4604      	mov	r4, r0
	printf("\r\n[Scan Error]\r\n");
    44e8:	4810      	ldr	r0, [pc, #64]	; (452c <scan_error+0x48>)
    44ea:	4b11      	ldr	r3, [pc, #68]	; (4530 <scan_error+0x4c>)
    44ec:	4798      	blx	r3

	LIDAR_PWM_stop();
    44ee:	4b11      	ldr	r3, [pc, #68]	; (4534 <scan_error+0x50>)
    44f0:	4798      	blx	r3

	status = STATUS_ERROR;
    44f2:	2202      	movs	r2, #2
    44f4:	4b10      	ldr	r3, [pc, #64]	; (4538 <scan_error+0x54>)
    44f6:	701a      	strb	r2, [r3, #0]

	switch (error_code) {
    44f8:	b134      	cbz	r4, 4508 <scan_error+0x24>
    44fa:	2c01      	cmp	r4, #1
    44fc:	d008      	beq.n	4510 <scan_error+0x2c>
			printf(" | Out-of-Bounds Error\r\n");
			printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
					byte_count, (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE);
			break;
		default:
			printf(" | Error code %u\r\n", error_code);
    44fe:	4621      	mov	r1, r4
    4500:	480e      	ldr	r0, [pc, #56]	; (453c <scan_error+0x58>)
    4502:	4b0f      	ldr	r3, [pc, #60]	; (4540 <scan_error+0x5c>)
    4504:	4798      	blx	r3
    4506:	e002      	b.n	450e <scan_error+0x2a>
			printf(" | Timeout Error\r\n");
    4508:	480e      	ldr	r0, [pc, #56]	; (4544 <scan_error+0x60>)
    450a:	4b09      	ldr	r3, [pc, #36]	; (4530 <scan_error+0x4c>)
    450c:	4798      	blx	r3
    450e:	e7fe      	b.n	450e <scan_error+0x2a>
			printf(" | Out-of-Bounds Error\r\n");
    4510:	480d      	ldr	r0, [pc, #52]	; (4548 <scan_error+0x64>)
    4512:	4b07      	ldr	r3, [pc, #28]	; (4530 <scan_error+0x4c>)
    4514:	4798      	blx	r3
			printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
    4516:	4b0d      	ldr	r3, [pc, #52]	; (454c <scan_error+0x68>)
    4518:	6819      	ldr	r1, [r3, #0]
					byte_count, (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE);
    451a:	4b0d      	ldr	r3, [pc, #52]	; (4550 <scan_error+0x6c>)
    451c:	685a      	ldr	r2, [r3, #4]
    451e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
			printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
    4522:	3207      	adds	r2, #7
    4524:	480b      	ldr	r0, [pc, #44]	; (4554 <scan_error+0x70>)
    4526:	4b06      	ldr	r3, [pc, #24]	; (4540 <scan_error+0x5c>)
    4528:	4798      	blx	r3
			break;
    452a:	e7f0      	b.n	450e <scan_error+0x2a>
    452c:	00008f60 	.word	0x00008f60
    4530:	00006865 	.word	0x00006865
    4534:	00003775 	.word	0x00003775
    4538:	20001011 	.word	0x20001011
    453c:	00008fe4 	.word	0x00008fe4
    4540:	0000677d 	.word	0x0000677d
    4544:	00008f70 	.word	0x00008f70
    4548:	00008f84 	.word	0x00008f84
    454c:	200005e0 	.word	0x200005e0
    4550:	200009f0 	.word	0x200009f0
    4554:	00008f9c 	.word	0x00008f9c

00004558 <process>:
	status = STATUS_PROCESSING; 
    4558:	2201      	movs	r2, #1
    455a:	4b57      	ldr	r3, [pc, #348]	; (46b8 <process+0x160>)
    455c:	701a      	strb	r2, [r3, #0]
	if (lidar_request == LIDAR_STOP || 
    455e:	4b57      	ldr	r3, [pc, #348]	; (46bc <process+0x164>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	2b25      	cmp	r3, #37	; 0x25
    4564:	d012      	beq.n	458c <process+0x34>
    4566:	2b40      	cmp	r3, #64	; 0x40
    4568:	d010      	beq.n	458c <process+0x34>
{
    456a:	b510      	push	{r4, lr}
	if (!usart_sync_is_rx_not_empty(&LIDAR_USART))
    456c:	4854      	ldr	r0, [pc, #336]	; (46c0 <process+0x168>)
    456e:	4b55      	ldr	r3, [pc, #340]	; (46c4 <process+0x16c>)
    4570:	4798      	blx	r3
    4572:	2800      	cmp	r0, #0
    4574:	f000 809c 	beq.w	46b0 <process+0x158>
	switch (byte_count) {
    4578:	4b53      	ldr	r3, [pc, #332]	; (46c8 <process+0x170>)
    457a:	681b      	ldr	r3, [r3, #0]
    457c:	2b06      	cmp	r3, #6
    457e:	d862      	bhi.n	4646 <process+0xee>
    4580:	e8df f003 	tbb	[pc, r3]
    4584:	3026180a 	.word	0x3026180a
    4588:	4a3d      	.short	0x4a3d
    458a:	57          	.byte	0x57
    458b:	00          	.byte	0x00
		if (lidar_timing) 
    458c:	4b4f      	ldr	r3, [pc, #316]	; (46cc <process+0x174>)
    458e:	7818      	ldrb	r0, [r3, #0]
			return PROCESSING;
    4590:	fab0 f080 	clz	r0, r0
    4594:	0940      	lsrs	r0, r0, #5
    4596:	4770      	bx	lr
			resp_desc.start1 = LIDAR_USART_read_byte();
    4598:	4b4d      	ldr	r3, [pc, #308]	; (46d0 <process+0x178>)
    459a:	4798      	blx	r3
    459c:	4b4d      	ldr	r3, [pc, #308]	; (46d4 <process+0x17c>)
    459e:	7018      	strb	r0, [r3, #0]
			if (resp_desc.start1 == 0xA5)
    45a0:	28a5      	cmp	r0, #165	; 0xa5
    45a2:	d001      	beq.n	45a8 <process+0x50>
			return PROCESSING;
    45a4:	2000      	movs	r0, #0
    45a6:	bd10      	pop	{r4, pc}
				byte_count++;
    45a8:	4a47      	ldr	r2, [pc, #284]	; (46c8 <process+0x170>)
    45aa:	6813      	ldr	r3, [r2, #0]
    45ac:	3301      	adds	r3, #1
    45ae:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    45b0:	2000      	movs	r0, #0
    45b2:	bd10      	pop	{r4, pc}
			resp_desc.start2 = LIDAR_USART_read_byte();
    45b4:	4b46      	ldr	r3, [pc, #280]	; (46d0 <process+0x178>)
    45b6:	4798      	blx	r3
    45b8:	4b46      	ldr	r3, [pc, #280]	; (46d4 <process+0x17c>)
    45ba:	7058      	strb	r0, [r3, #1]
			if (resp_desc.start2 != 0x5A)
    45bc:	285a      	cmp	r0, #90	; 0x5a
				byte_count--;
    45be:	4a42      	ldr	r2, [pc, #264]	; (46c8 <process+0x170>)
    45c0:	6813      	ldr	r3, [r2, #0]
    45c2:	bf14      	ite	ne
    45c4:	f103 33ff 	addne.w	r3, r3, #4294967295
				byte_count++;
    45c8:	3301      	addeq	r3, #1
    45ca:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    45cc:	2000      	movs	r0, #0
    45ce:	bd10      	pop	{r4, pc}
			resp_desc.response_info = LIDAR_USART_read_byte();
    45d0:	4b3f      	ldr	r3, [pc, #252]	; (46d0 <process+0x178>)
    45d2:	4798      	blx	r3
    45d4:	4b3f      	ldr	r3, [pc, #252]	; (46d4 <process+0x17c>)
    45d6:	6058      	str	r0, [r3, #4]
			byte_count++;
    45d8:	4a3b      	ldr	r2, [pc, #236]	; (46c8 <process+0x170>)
    45da:	6813      	ldr	r3, [r2, #0]
    45dc:	3301      	adds	r3, #1
    45de:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    45e0:	2000      	movs	r0, #0
    45e2:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    45e4:	4b3a      	ldr	r3, [pc, #232]	; (46d0 <process+0x178>)
    45e6:	4798      	blx	r3
    45e8:	4a3a      	ldr	r2, [pc, #232]	; (46d4 <process+0x17c>)
    45ea:	6853      	ldr	r3, [r2, #4]
    45ec:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    45f0:	6050      	str	r0, [r2, #4]
			byte_count++;
    45f2:	4a35      	ldr	r2, [pc, #212]	; (46c8 <process+0x170>)
    45f4:	6813      	ldr	r3, [r2, #0]
    45f6:	3301      	adds	r3, #1
    45f8:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    45fa:	2000      	movs	r0, #0
    45fc:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    45fe:	4b34      	ldr	r3, [pc, #208]	; (46d0 <process+0x178>)
    4600:	4798      	blx	r3
    4602:	4a34      	ldr	r2, [pc, #208]	; (46d4 <process+0x17c>)
    4604:	6853      	ldr	r3, [r2, #4]
    4606:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    460a:	6050      	str	r0, [r2, #4]
			byte_count++;
    460c:	4a2e      	ldr	r2, [pc, #184]	; (46c8 <process+0x170>)
    460e:	6813      	ldr	r3, [r2, #0]
    4610:	3301      	adds	r3, #1
    4612:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4614:	2000      	movs	r0, #0
    4616:	bd10      	pop	{r4, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    4618:	4b2d      	ldr	r3, [pc, #180]	; (46d0 <process+0x178>)
    461a:	4798      	blx	r3
    461c:	4a2d      	ldr	r2, [pc, #180]	; (46d4 <process+0x17c>)
    461e:	6853      	ldr	r3, [r2, #4]
    4620:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4624:	6050      	str	r0, [r2, #4]
			byte_count++;
    4626:	4a28      	ldr	r2, [pc, #160]	; (46c8 <process+0x170>)
    4628:	6813      	ldr	r3, [r2, #0]
    462a:	3301      	adds	r3, #1
    462c:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    462e:	2000      	movs	r0, #0
    4630:	bd10      	pop	{r4, pc}
			resp_desc.data_type = LIDAR_USART_read_byte();
    4632:	4b27      	ldr	r3, [pc, #156]	; (46d0 <process+0x178>)
    4634:	4798      	blx	r3
    4636:	4b27      	ldr	r3, [pc, #156]	; (46d4 <process+0x17c>)
    4638:	7218      	strb	r0, [r3, #8]
			byte_count++;
    463a:	4a23      	ldr	r2, [pc, #140]	; (46c8 <process+0x170>)
    463c:	6813      	ldr	r3, [r2, #0]
    463e:	3301      	adds	r3, #1
    4640:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4642:	2000      	movs	r0, #0
    4644:	bd10      	pop	{r4, pc}
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    4646:	4b20      	ldr	r3, [pc, #128]	; (46c8 <process+0x170>)
    4648:	681c      	ldr	r4, [r3, #0]
    464a:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    464c:	4b20      	ldr	r3, [pc, #128]	; (46d0 <process+0x178>)
    464e:	4798      	blx	r3
    4650:	4b21      	ldr	r3, [pc, #132]	; (46d8 <process+0x180>)
    4652:	5518      	strb	r0, [r3, r4]
			if (lidar_request == LIDAR_EXPRESS_SCAN) {
    4654:	4b19      	ldr	r3, [pc, #100]	; (46bc <process+0x164>)
    4656:	781b      	ldrb	r3, [r3, #0]
    4658:	2b82      	cmp	r3, #130	; 0x82
    465a:	d011      	beq.n	4680 <process+0x128>
			byte_count++;
    465c:	4a1a      	ldr	r2, [pc, #104]	; (46c8 <process+0x170>)
    465e:	6813      	ldr	r3, [r2, #0]
    4660:	3301      	adds	r3, #1
    4662:	6013      	str	r3, [r2, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    4664:	4b1b      	ldr	r3, [pc, #108]	; (46d4 <process+0x17c>)
    4666:	685b      	ldr	r3, [r3, #4]
    4668:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    466c:	3307      	adds	r3, #7
    466e:	6812      	ldr	r2, [r2, #0]
    4670:	4293      	cmp	r3, r2
    4672:	d01f      	beq.n	46b4 <process+0x15c>
	} else if (byte_count > (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    4674:	4a14      	ldr	r2, [pc, #80]	; (46c8 <process+0x170>)
    4676:	6812      	ldr	r2, [r2, #0]
    4678:	4293      	cmp	r3, r2
    467a:	d316      	bcc.n	46aa <process+0x152>
	return PROCESSING;
    467c:	2000      	movs	r0, #0
}
    467e:	bd10      	pop	{r4, pc}
				if (data_idx == 0) {
    4680:	b934      	cbnz	r4, 4690 <process+0x138>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    4682:	4b15      	ldr	r3, [pc, #84]	; (46d8 <process+0x180>)
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	091b      	lsrs	r3, r3, #4
    4688:	2b0a      	cmp	r3, #10
    468a:	d0e7      	beq.n	465c <process+0x104>
						return PROCESSING;
    468c:	2000      	movs	r0, #0
    468e:	bd10      	pop	{r4, pc}
				else if (data_idx == 1) {
    4690:	2c01      	cmp	r4, #1
    4692:	d1e3      	bne.n	465c <process+0x104>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    4694:	4b10      	ldr	r3, [pc, #64]	; (46d8 <process+0x180>)
    4696:	785b      	ldrb	r3, [r3, #1]
    4698:	091b      	lsrs	r3, r3, #4
    469a:	2b05      	cmp	r3, #5
    469c:	d0de      	beq.n	465c <process+0x104>
						byte_count--;
    469e:	4a0a      	ldr	r2, [pc, #40]	; (46c8 <process+0x170>)
    46a0:	6813      	ldr	r3, [r2, #0]
    46a2:	3b01      	subs	r3, #1
    46a4:	6013      	str	r3, [r2, #0]
						return PROCESSING;
    46a6:	2000      	movs	r0, #0
    46a8:	bd10      	pop	{r4, pc}
		scan_error(1);
    46aa:	2001      	movs	r0, #1
    46ac:	4b0b      	ldr	r3, [pc, #44]	; (46dc <process+0x184>)
    46ae:	4798      	blx	r3
		return PROCESSING;
    46b0:	2000      	movs	r0, #0
    46b2:	bd10      	pop	{r4, pc}
		return COMPLETED;
    46b4:	2001      	movs	r0, #1
    46b6:	bd10      	pop	{r4, pc}
    46b8:	20001011 	.word	0x20001011
    46bc:	200005e4 	.word	0x200005e4
    46c0:	20000ffc 	.word	0x20000ffc
    46c4:	000026ed 	.word	0x000026ed
    46c8:	200005e0 	.word	0x200005e0
    46cc:	20001010 	.word	0x20001010
    46d0:	00003899 	.word	0x00003899
    46d4:	200009f0 	.word	0x200009f0
    46d8:	2000055c 	.word	0x2000055c
    46dc:	000044e5 	.word	0x000044e5

000046e0 <scan>:
{
    46e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46e4:	b087      	sub	sp, #28
		printf("\r\nPress button to start\r\n");
    46e6:	483d      	ldr	r0, [pc, #244]	; (47dc <scan+0xfc>)
    46e8:	4b3d      	ldr	r3, [pc, #244]	; (47e0 <scan+0x100>)
    46ea:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    46ec:	4f3d      	ldr	r7, [pc, #244]	; (47e4 <scan+0x104>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    46ee:	4d3e      	ldr	r5, [pc, #248]	; (47e8 <scan+0x108>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    46f0:	4e3e      	ldr	r6, [pc, #248]	; (47ec <scan+0x10c>)
	CRITICAL_SECTION_ENTER();
    46f2:	a805      	add	r0, sp, #20
    46f4:	47b8      	blx	r7
    46f6:	682a      	ldr	r2, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    46f8:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    46fa:	692c      	ldr	r4, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    46fc:	405c      	eors	r4, r3
    46fe:	4014      	ands	r4, r2
    4700:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    4702:	a805      	add	r0, sp, #20
    4704:	47b0      	blx	r6
	while (!gpio_get_pin_level(START_BTN));
    4706:	f014 6f00 	tst.w	r4, #134217728	; 0x8000000
    470a:	d0f2      	beq.n	46f2 <scan+0x12>
		printf("\r\nStarting scan\r\n");
    470c:	4838      	ldr	r0, [pc, #224]	; (47f0 <scan+0x110>)
    470e:	4b34      	ldr	r3, [pc, #208]	; (47e0 <scan+0x100>)
    4710:	4798      	blx	r3
	LIDAR_REQ_reset();
    4712:	4b38      	ldr	r3, [pc, #224]	; (47f4 <scan+0x114>)
    4714:	4798      	blx	r3
	while (!process()) {
    4716:	4d38      	ldr	r5, [pc, #224]	; (47f8 <scan+0x118>)
		LIDAR_RES_reset();
    4718:	4c38      	ldr	r4, [pc, #224]	; (47fc <scan+0x11c>)
	while (!process()) {
    471a:	e000      	b.n	471e <scan+0x3e>
		LIDAR_RES_reset();
    471c:	47a0      	blx	r4
	while (!process()) {
    471e:	47a8      	blx	r5
    4720:	2800      	cmp	r0, #0
    4722:	d0fb      	beq.n	471c <scan+0x3c>
	LIDAR_REQ_get_health();
    4724:	4b36      	ldr	r3, [pc, #216]	; (4800 <scan+0x120>)
    4726:	4798      	blx	r3
	while (!process());
    4728:	4c33      	ldr	r4, [pc, #204]	; (47f8 <scan+0x118>)
    472a:	47a0      	blx	r4
    472c:	2800      	cmp	r0, #0
    472e:	d0fc      	beq.n	472a <scan+0x4a>
	error_code = LIDAR_RES_get_health();
    4730:	4b34      	ldr	r3, [pc, #208]	; (4804 <scan+0x124>)
    4732:	4798      	blx	r3
	if (error_code)
    4734:	b998      	cbnz	r0, 475e <scan+0x7e>
	LIDAR_REQ_get_info();
    4736:	4b34      	ldr	r3, [pc, #208]	; (4808 <scan+0x128>)
    4738:	4798      	blx	r3
	while (!process());
    473a:	4c2f      	ldr	r4, [pc, #188]	; (47f8 <scan+0x118>)
    473c:	47a0      	blx	r4
    473e:	2800      	cmp	r0, #0
    4740:	d0fc      	beq.n	473c <scan+0x5c>
	LIDAR_RES_get_info();
    4742:	4b32      	ldr	r3, [pc, #200]	; (480c <scan+0x12c>)
    4744:	4798      	blx	r3
	LIDAR_PWM_start();
    4746:	4b32      	ldr	r3, [pc, #200]	; (4810 <scan+0x130>)
    4748:	4798      	blx	r3
	LIDAR_REQ_express_scan();
    474a:	4b32      	ldr	r3, [pc, #200]	; (4814 <scan+0x134>)
    474c:	4798      	blx	r3
	for (angle = 0; angle <= 180; angle++) {
    474e:	f04f 0a00 	mov.w	sl, #0
		SERVO_set_angle(angle);
    4752:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 4838 <scan+0x158>
		while (scan_count < MAX_SCANS) {
    4756:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 483c <scan+0x15c>
			while (!process());
    475a:	4e27      	ldr	r6, [pc, #156]	; (47f8 <scan+0x118>)
    475c:	e01c      	b.n	4798 <scan+0xb8>
		scan_error(error_code);
    475e:	4b2e      	ldr	r3, [pc, #184]	; (4818 <scan+0x138>)
    4760:	4798      	blx	r3
    4762:	4c2e      	ldr	r4, [pc, #184]	; (481c <scan+0x13c>)
	for (angle = 0; angle <= 180; angle++) {
    4764:	2500      	movs	r5, #0
{
	int i;
	
	if (DEBUG) {
		for (i=0; i<MAX_SCANS; i++) {
			printf("{\"C[%04u]\":{\"S\":%u,\"SA\":%u,\"A1\":%u,\"A2\":%u,\"D1\":%u,\"D2\":%u}}\r\n",
    4766:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4840 <scan+0x160>
    476a:	4f2d      	ldr	r7, [pc, #180]	; (4820 <scan+0x140>)
    476c:	8923      	ldrh	r3, [r4, #8]
    476e:	7822      	ldrb	r2, [r4, #0]
    4770:	88e1      	ldrh	r1, [r4, #6]
    4772:	9103      	str	r1, [sp, #12]
    4774:	88a1      	ldrh	r1, [r4, #4]
    4776:	9102      	str	r1, [sp, #8]
    4778:	78a1      	ldrb	r1, [r4, #2]
    477a:	9101      	str	r1, [sp, #4]
    477c:	7861      	ldrb	r1, [r4, #1]
    477e:	9100      	str	r1, [sp, #0]
    4780:	4629      	mov	r1, r5
    4782:	4640      	mov	r0, r8
    4784:	47b8      	blx	r7
		for (i=0; i<MAX_SCANS; i++) {
    4786:	3501      	adds	r5, #1
    4788:	340a      	adds	r4, #10
    478a:	2d40      	cmp	r5, #64	; 0x40
    478c:	d1ee      	bne.n	476c <scan+0x8c>
	for (angle = 0; angle <= 180; angle++) {
    478e:	f10a 0a01 	add.w	sl, sl, #1
    4792:	f1ba 0fb5 	cmp.w	sl, #181	; 0xb5
    4796:	d00f      	beq.n	47b8 <scan+0xd8>
		SERVO_set_angle(angle);
    4798:	4650      	mov	r0, sl
    479a:	47d8      	blx	fp
		while (scan_count < MAX_SCANS) {
    479c:	f8d9 3000 	ldr.w	r3, [r9]
    47a0:	2b3f      	cmp	r3, #63	; 0x3f
    47a2:	d8de      	bhi.n	4762 <scan+0x82>
			LIDAR_RES_express_scan();
    47a4:	4c1f      	ldr	r4, [pc, #124]	; (4824 <scan+0x144>)
			while (!process());
    47a6:	47b0      	blx	r6
    47a8:	2800      	cmp	r0, #0
    47aa:	d0fc      	beq.n	47a6 <scan+0xc6>
			LIDAR_RES_express_scan();
    47ac:	47a0      	blx	r4
		while (scan_count < MAX_SCANS) {
    47ae:	f8d9 3000 	ldr.w	r3, [r9]
    47b2:	2b3f      	cmp	r3, #63	; 0x3f
    47b4:	d9f7      	bls.n	47a6 <scan+0xc6>
    47b6:	e7d4      	b.n	4762 <scan+0x82>
	LIDAR_PWM_stop();
    47b8:	4b1b      	ldr	r3, [pc, #108]	; (4828 <scan+0x148>)
    47ba:	4798      	blx	r3
	LIDAR_REQ_stop();
    47bc:	4b1b      	ldr	r3, [pc, #108]	; (482c <scan+0x14c>)
    47be:	4798      	blx	r3
	while (!process()) {
    47c0:	4d0d      	ldr	r5, [pc, #52]	; (47f8 <scan+0x118>)
		LIDAR_RES_stop();
    47c2:	4c1b      	ldr	r4, [pc, #108]	; (4830 <scan+0x150>)
	while (!process()) {
    47c4:	e000      	b.n	47c8 <scan+0xe8>
		LIDAR_RES_stop();
    47c6:	47a0      	blx	r4
	while (!process()) {
    47c8:	47a8      	blx	r5
    47ca:	2800      	cmp	r0, #0
    47cc:	d0fb      	beq.n	47c6 <scan+0xe6>
	status = STATUS_IDLE;
    47ce:	2200      	movs	r2, #0
    47d0:	4b18      	ldr	r3, [pc, #96]	; (4834 <scan+0x154>)
    47d2:	701a      	strb	r2, [r3, #0]
}
    47d4:	b007      	add	sp, #28
    47d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47da:	bf00      	nop
    47dc:	00008ff8 	.word	0x00008ff8
    47e0:	00006865 	.word	0x00006865
    47e4:	000020ad 	.word	0x000020ad
    47e8:	41008000 	.word	0x41008000
    47ec:	000020bb 	.word	0x000020bb
    47f0:	00009014 	.word	0x00009014
    47f4:	00003d25 	.word	0x00003d25
    47f8:	00004559 	.word	0x00004559
    47fc:	000040ed 	.word	0x000040ed
    4800:	00003fd5 	.word	0x00003fd5
    4804:	00004345 	.word	0x00004345
    4808:	00003f61 	.word	0x00003f61
    480c:	000042b5 	.word	0x000042b5
    4810:	00003709 	.word	0x00003709
    4814:	00003e1d 	.word	0x00003e1d
    4818:	000044e5 	.word	0x000044e5
    481c:	20000770 	.word	0x20000770
    4820:	0000677d 	.word	0x0000677d
    4824:	000041c1 	.word	0x000041c1
    4828:	00003775 	.word	0x00003775
    482c:	00003cad 	.word	0x00003cad
    4830:	000040bd 	.word	0x000040bd
    4834:	20001011 	.word	0x20001011
    4838:	00005509 	.word	0x00005509
    483c:	200005ec 	.word	0x200005ec
    4840:	00008b98 	.word	0x00008b98

00004844 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    4844:	b510      	push	{r4, lr}
    4846:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    4848:	4807      	ldr	r0, [pc, #28]	; (4868 <sd_mmc_configure_slot+0x24>)
    484a:	6804      	ldr	r4, [r0, #0]
	driver_select_device(
    484c:	7b63      	ldrb	r3, [r4, #13]
    484e:	6822      	ldr	r2, [r4, #0]
    4850:	7901      	ldrb	r1, [r0, #4]
    4852:	6880      	ldr	r0, [r0, #8]
    4854:	7fa4      	ldrb	r4, [r4, #30]
    4856:	3400      	adds	r4, #0
    4858:	bf18      	it	ne
    485a:	2401      	movne	r4, #1
    485c:	9400      	str	r4, [sp, #0]
    485e:	4c03      	ldr	r4, [pc, #12]	; (486c <sd_mmc_configure_slot+0x28>)
    4860:	47a0      	blx	r4
}
    4862:	b002      	add	sp, #8
    4864:	bd10      	pop	{r4, pc}
    4866:	bf00      	nop
    4868:	20000afc 	.word	0x20000afc
    486c:	00002315 	.word	0x00002315

00004870 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    4870:	b108      	cbz	r0, 4876 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    4872:	2004      	movs	r0, #4
    4874:	4770      	bx	lr
{
    4876:	b530      	push	{r4, r5, lr}
    4878:	b083      	sub	sp, #12
	if (_cd && _cd[slot].pin != -1) {
    487a:	4b3a      	ldr	r3, [pc, #232]	; (4964 <sd_mmc_select_slot+0xf4>)
    487c:	68db      	ldr	r3, [r3, #12]
    487e:	2b00      	cmp	r3, #0
    4880:	d041      	beq.n	4906 <sd_mmc_select_slot+0x96>
    4882:	f9b3 3000 	ldrsh.w	r3, [r3]
    4886:	f1b3 3fff 	cmp.w	r3, #4294967295
    488a:	d03c      	beq.n	4906 <sd_mmc_select_slot+0x96>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    488c:	b2dd      	uxtb	r5, r3
	CRITICAL_SECTION_ENTER();
    488e:	a801      	add	r0, sp, #4
    4890:	4b35      	ldr	r3, [pc, #212]	; (4968 <sd_mmc_select_slot+0xf8>)
    4892:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4894:	096b      	lsrs	r3, r5, #5
    4896:	4935      	ldr	r1, [pc, #212]	; (496c <sd_mmc_select_slot+0xfc>)
    4898:	01db      	lsls	r3, r3, #7
    489a:	18ca      	adds	r2, r1, r3
    489c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    489e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    48a0:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    48a2:	405c      	eors	r4, r3
    48a4:	400c      	ands	r4, r1
    48a6:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    48a8:	a801      	add	r0, sp, #4
    48aa:	4b31      	ldr	r3, [pc, #196]	; (4970 <sd_mmc_select_slot+0x100>)
    48ac:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    48ae:	f005 031f 	and.w	r3, r5, #31
    48b2:	2201      	movs	r2, #1
    48b4:	fa02 f303 	lsl.w	r3, r2, r3
    48b8:	4223      	tst	r3, r4
    48ba:	bf08      	it	eq
    48bc:	2200      	moveq	r2, #0
    48be:	4b29      	ldr	r3, [pc, #164]	; (4964 <sd_mmc_select_slot+0xf4>)
    48c0:	68db      	ldr	r3, [r3, #12]
    48c2:	885b      	ldrh	r3, [r3, #2]
    48c4:	429a      	cmp	r2, r3
    48c6:	d004      	beq.n	48d2 <sd_mmc_select_slot+0x62>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    48c8:	2204      	movs	r2, #4
    48ca:	4b26      	ldr	r3, [pc, #152]	; (4964 <sd_mmc_select_slot+0xf4>)
    48cc:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    48ce:	2002      	movs	r0, #2
    48d0:	e039      	b.n	4946 <sd_mmc_select_slot+0xd6>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    48d2:	4b24      	ldr	r3, [pc, #144]	; (4964 <sd_mmc_select_slot+0xf4>)
    48d4:	7e9b      	ldrb	r3, [r3, #26]
    48d6:	2b04      	cmp	r3, #4
    48d8:	d005      	beq.n	48e6 <sd_mmc_select_slot+0x76>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    48da:	2b01      	cmp	r3, #1
    48dc:	d008      	beq.n	48f0 <sd_mmc_select_slot+0x80>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    48de:	2b03      	cmp	r3, #3
    48e0:	d117      	bne.n	4912 <sd_mmc_select_slot+0xa2>
			return SD_MMC_ERR_UNUSABLE;
    48e2:	2003      	movs	r0, #3
    48e4:	e02f      	b.n	4946 <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    48e6:	2201      	movs	r2, #1
    48e8:	4b1e      	ldr	r3, [pc, #120]	; (4964 <sd_mmc_select_slot+0xf4>)
    48ea:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    48ec:	2002      	movs	r0, #2
    48ee:	e02a      	b.n	4946 <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    48f0:	4b1c      	ldr	r3, [pc, #112]	; (4964 <sd_mmc_select_slot+0xf4>)
    48f2:	2202      	movs	r2, #2
    48f4:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    48f6:	4a1f      	ldr	r2, [pc, #124]	; (4974 <sd_mmc_select_slot+0x104>)
    48f8:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    48fa:	2201      	movs	r2, #1
    48fc:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    48fe:	2200      	movs	r2, #0
    4900:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4904:	e005      	b.n	4912 <sd_mmc_select_slot+0xa2>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    4906:	4b17      	ldr	r3, [pc, #92]	; (4964 <sd_mmc_select_slot+0xf4>)
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    4908:	7e9b      	ldrb	r3, [r3, #26]
    490a:	3b03      	subs	r3, #3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    490c:	b2db      	uxtb	r3, r3
    490e:	2b01      	cmp	r3, #1
    4910:	d91b      	bls.n	494a <sd_mmc_select_slot+0xda>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    4912:	4b14      	ldr	r3, [pc, #80]	; (4964 <sd_mmc_select_slot+0xf4>)
    4914:	791b      	ldrb	r3, [r3, #4]
    4916:	b31b      	cbz	r3, 4960 <sd_mmc_select_slot+0xf0>
    4918:	4b12      	ldr	r3, [pc, #72]	; (4964 <sd_mmc_select_slot+0xf4>)
    491a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    491c:	fab0 f080 	clz	r0, r0
    4920:	0940      	lsrs	r0, r0, #5
    4922:	f240 422c 	movw	r2, #1068	; 0x42c
    4926:	4914      	ldr	r1, [pc, #80]	; (4978 <sd_mmc_select_slot+0x108>)
    4928:	4b14      	ldr	r3, [pc, #80]	; (497c <sd_mmc_select_slot+0x10c>)
    492a:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    492c:	4c0d      	ldr	r4, [pc, #52]	; (4964 <sd_mmc_select_slot+0xf4>)
    492e:	2300      	movs	r3, #0
    4930:	7123      	strb	r3, [r4, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    4932:	f104 0310 	add.w	r3, r4, #16
    4936:	6023      	str	r3, [r4, #0]
	sd_mmc_configure_slot();
    4938:	4b11      	ldr	r3, [pc, #68]	; (4980 <sd_mmc_select_slot+0x110>)
    493a:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    493c:	7ea0      	ldrb	r0, [r4, #26]
    493e:	2802      	cmp	r0, #2
    4940:	bf14      	ite	ne
    4942:	2000      	movne	r0, #0
    4944:	2001      	moveq	r0, #1
}
    4946:	b003      	add	sp, #12
    4948:	bd30      	pop	{r4, r5, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    494a:	4b06      	ldr	r3, [pc, #24]	; (4964 <sd_mmc_select_slot+0xf4>)
    494c:	2202      	movs	r2, #2
    494e:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    4950:	4a08      	ldr	r2, [pc, #32]	; (4974 <sd_mmc_select_slot+0x104>)
    4952:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    4954:	2201      	movs	r2, #1
    4956:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    4958:	2200      	movs	r2, #0
    495a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    495e:	e7d8      	b.n	4912 <sd_mmc_select_slot+0xa2>
    4960:	2001      	movs	r0, #1
    4962:	e7de      	b.n	4922 <sd_mmc_select_slot+0xb2>
    4964:	20000afc 	.word	0x20000afc
    4968:	000020ad 	.word	0x000020ad
    496c:	41008000 	.word	0x41008000
    4970:	000020bb 	.word	0x000020bb
    4974:	00061a80 	.word	0x00061a80
    4978:	000090c4 	.word	0x000090c4
    497c:	00002715 	.word	0x00002715
    4980:	00004845 	.word	0x00004845

00004984 <sdio_cmd52>:
{
    4984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4988:	4606      	mov	r6, r0
    498a:	460f      	mov	r7, r1
    498c:	4614      	mov	r4, r2
    498e:	4698      	mov	r8, r3
    4990:	9d06      	ldr	r5, [sp, #24]
	ASSERT(io_data != NULL);
    4992:	f240 3276 	movw	r2, #886	; 0x376
    4996:	4910      	ldr	r1, [pc, #64]	; (49d8 <sdio_cmd52+0x54>)
    4998:	1c28      	adds	r0, r5, #0
    499a:	bf18      	it	ne
    499c:	2001      	movne	r0, #1
    499e:	4b0f      	ldr	r3, [pc, #60]	; (49dc <sdio_cmd52+0x58>)
    49a0:	4798      	blx	r3
	                         | ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
    49a2:	0260      	lsls	r0, r4, #9
	if (!driver_send_cmd(sd_mmc_hal,
    49a4:	ea40 60c8 	orr.w	r0, r0, r8, lsl #27
    49a8:	ea40 7007 	orr.w	r0, r0, r7, lsl #28
    49ac:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    49b0:	782a      	ldrb	r2, [r5, #0]
	if (!driver_send_cmd(sd_mmc_hal,
    49b2:	4302      	orrs	r2, r0
    49b4:	f241 3134 	movw	r1, #4916	; 0x1334
    49b8:	4b09      	ldr	r3, [pc, #36]	; (49e0 <sdio_cmd52+0x5c>)
    49ba:	6898      	ldr	r0, [r3, #8]
    49bc:	4b09      	ldr	r3, [pc, #36]	; (49e4 <sdio_cmd52+0x60>)
    49be:	4798      	blx	r3
    49c0:	4604      	mov	r4, r0
    49c2:	b910      	cbnz	r0, 49ca <sdio_cmd52+0x46>
}
    49c4:	4620      	mov	r0, r4
    49c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    49ca:	4b05      	ldr	r3, [pc, #20]	; (49e0 <sdio_cmd52+0x5c>)
    49cc:	6898      	ldr	r0, [r3, #8]
    49ce:	4b06      	ldr	r3, [pc, #24]	; (49e8 <sdio_cmd52+0x64>)
    49d0:	4798      	blx	r3
    49d2:	7028      	strb	r0, [r5, #0]
	return true;
    49d4:	e7f6      	b.n	49c4 <sdio_cmd52+0x40>
    49d6:	bf00      	nop
    49d8:	000090c4 	.word	0x000090c4
    49dc:	00002715 	.word	0x00002715
    49e0:	20000afc 	.word	0x20000afc
    49e4:	000023f9 	.word	0x000023f9
    49e8:	00002429 	.word	0x00002429

000049ec <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    49ec:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    49ee:	4b05      	ldr	r3, [pc, #20]	; (4a04 <sd_mmc_deselect_slot+0x18>)
    49f0:	791b      	ldrb	r3, [r3, #4]
    49f2:	b103      	cbz	r3, 49f6 <sd_mmc_deselect_slot+0xa>
    49f4:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    49f6:	2100      	movs	r1, #0
    49f8:	4b02      	ldr	r3, [pc, #8]	; (4a04 <sd_mmc_deselect_slot+0x18>)
    49fa:	6898      	ldr	r0, [r3, #8]
    49fc:	4b02      	ldr	r3, [pc, #8]	; (4a08 <sd_mmc_deselect_slot+0x1c>)
    49fe:	4798      	blx	r3
	}
}
    4a00:	e7f8      	b.n	49f4 <sd_mmc_deselect_slot+0x8>
    4a02:	bf00      	nop
    4a04:	20000afc 	.word	0x20000afc
    4a08:	00002351 	.word	0x00002351

00004a0c <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    4a0c:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4a0e:	4b05      	ldr	r3, [pc, #20]	; (4a24 <sd_mmc_init+0x18>)
    4a10:	2404      	movs	r4, #4
    4a12:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    4a14:	24ff      	movs	r4, #255	; 0xff
    4a16:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    4a18:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    4a1a:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    4a1c:	635a      	str	r2, [r3, #52]	; 0x34
}
    4a1e:	bc10      	pop	{r4}
    4a20:	4770      	bx	lr
    4a22:	bf00      	nop
    4a24:	20000afc 	.word	0x20000afc

00004a28 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    4a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a2c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4a2e:	4baa      	ldr	r3, [pc, #680]	; (4cd8 <sd_mmc_check+0x2b0>)
    4a30:	4798      	blx	r3
    4a32:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    4a34:	2801      	cmp	r0, #1
    4a36:	d005      	beq.n	4a44 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
    4a38:	4ba8      	ldr	r3, [pc, #672]	; (4cdc <sd_mmc_check+0x2b4>)
    4a3a:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    4a3c:	4620      	mov	r0, r4
    4a3e:	b015      	add	sp, #84	; 0x54
    4a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
    4a44:	af14      	add	r7, sp, #80	; 0x50
    4a46:	2308      	movs	r3, #8
    4a48:	f807 3d45 	strb.w	r3, [r7, #-69]!
	sd_mmc_card->type    = CARD_TYPE_SD;
    4a4c:	4ea4      	ldr	r6, [pc, #656]	; (4ce0 <sd_mmc_check+0x2b8>)
    4a4e:	6833      	ldr	r3, [r6, #0]
    4a50:	f04f 0801 	mov.w	r8, #1
    4a54:	f883 800b 	strb.w	r8, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    4a58:	2500      	movs	r5, #0
    4a5a:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca     = 0;
    4a5c:	811d      	strh	r5, [r3, #8]
	driver_send_clock(sd_mmc_hal);
    4a5e:	68b0      	ldr	r0, [r6, #8]
    4a60:	4ba0      	ldr	r3, [pc, #640]	; (4ce4 <sd_mmc_check+0x2bc>)
    4a62:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    4a64:	9700      	str	r7, [sp, #0]
    4a66:	462b      	mov	r3, r5
    4a68:	2206      	movs	r2, #6
    4a6a:	4629      	mov	r1, r5
    4a6c:	4640      	mov	r0, r8
    4a6e:	4f9e      	ldr	r7, [pc, #632]	; (4ce8 <sd_mmc_check+0x2c0>)
    4a70:	47b8      	blx	r7
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    4a72:	462a      	mov	r2, r5
    4a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4a78:	68b0      	ldr	r0, [r6, #8]
    4a7a:	4b9c      	ldr	r3, [pc, #624]	; (4cec <sd_mmc_check+0x2c4>)
    4a7c:	4798      	blx	r3
    4a7e:	b930      	cbnz	r0, 4a8e <sd_mmc_check+0x66>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    4a80:	4b97      	ldr	r3, [pc, #604]	; (4ce0 <sd_mmc_check+0x2b8>)
    4a82:	681b      	ldr	r3, [r3, #0]
    4a84:	2403      	movs	r4, #3
    4a86:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    4a88:	4b94      	ldr	r3, [pc, #592]	; (4cdc <sd_mmc_check+0x2b4>)
    4a8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    4a8c:	e7d6      	b.n	4a3c <sd_mmc_check+0x14>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    4a8e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    4a92:	f245 5108 	movw	r1, #21768	; 0x5508
    4a96:	68b0      	ldr	r0, [r6, #8]
    4a98:	4b94      	ldr	r3, [pc, #592]	; (4cec <sd_mmc_check+0x2c4>)
    4a9a:	4798      	blx	r3
    4a9c:	2800      	cmp	r0, #0
    4a9e:	f040 80a4 	bne.w	4bea <sd_mmc_check+0x1c2>
	*v2 = 0;
    4aa2:	f04f 0800 	mov.w	r8, #0
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    4aa6:	2200      	movs	r2, #0
    4aa8:	f244 5105 	movw	r1, #17669	; 0x4505
    4aac:	4b8c      	ldr	r3, [pc, #560]	; (4ce0 <sd_mmc_check+0x2b8>)
    4aae:	6898      	ldr	r0, [r3, #8]
    4ab0:	4b8e      	ldr	r3, [pc, #568]	; (4cec <sd_mmc_check+0x2c4>)
    4ab2:	4798      	blx	r3
    4ab4:	2800      	cmp	r0, #0
    4ab6:	f040 80a6 	bne.w	4c06 <sd_mmc_check+0x1de>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4aba:	4b89      	ldr	r3, [pc, #548]	; (4ce0 <sd_mmc_check+0x2b8>)
    4abc:	681b      	ldr	r3, [r3, #0]
    4abe:	7adb      	ldrb	r3, [r3, #11]
    4ac0:	f013 0f01 	tst.w	r3, #1
    4ac4:	f040 80c9 	bne.w	4c5a <sd_mmc_check+0x232>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    4ac8:	2200      	movs	r2, #0
    4aca:	f245 1103 	movw	r1, #20739	; 0x5103
    4ace:	4b84      	ldr	r3, [pc, #528]	; (4ce0 <sd_mmc_check+0x2b8>)
    4ad0:	6898      	ldr	r0, [r3, #8]
    4ad2:	4b86      	ldr	r3, [pc, #536]	; (4cec <sd_mmc_check+0x2c4>)
    4ad4:	4798      	blx	r3
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d0d2      	beq.n	4a80 <sd_mmc_check+0x58>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    4ada:	4d81      	ldr	r5, [pc, #516]	; (4ce0 <sd_mmc_check+0x2b8>)
    4adc:	682e      	ldr	r6, [r5, #0]
    4ade:	68a8      	ldr	r0, [r5, #8]
    4ae0:	4b83      	ldr	r3, [pc, #524]	; (4cf0 <sd_mmc_check+0x2c8>)
    4ae2:	4798      	blx	r3
    4ae4:	0c00      	lsrs	r0, r0, #16
    4ae6:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4ae8:	682b      	ldr	r3, [r5, #0]
    4aea:	7ada      	ldrb	r2, [r3, #11]
    4aec:	f012 0f01 	tst.w	r2, #1
    4af0:	d03e      	beq.n	4b70 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    4af2:	891a      	ldrh	r2, [r3, #8]
    4af4:	0412      	lsls	r2, r2, #16
    4af6:	f641 3109 	movw	r1, #6921	; 0x1b09
    4afa:	68a8      	ldr	r0, [r5, #8]
    4afc:	4b7b      	ldr	r3, [pc, #492]	; (4cec <sd_mmc_check+0x2c4>)
    4afe:	4798      	blx	r3
    4b00:	2800      	cmp	r0, #0
    4b02:	d0bd      	beq.n	4a80 <sd_mmc_check+0x58>
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    4b04:	6829      	ldr	r1, [r5, #0]
    4b06:	310e      	adds	r1, #14
    4b08:	68a8      	ldr	r0, [r5, #8]
    4b0a:	4b7a      	ldr	r3, [pc, #488]	; (4cf4 <sd_mmc_check+0x2cc>)
    4b0c:	4798      	blx	r3
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    4b0e:	682a      	ldr	r2, [r5, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4b10:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    4b12:	4b79      	ldr	r3, [pc, #484]	; (4cf8 <sd_mmc_check+0x2d0>)
    4b14:	f001 0007 	and.w	r0, r1, #7
	sd_mmc_card->clock = unit * mul * 1000;
    4b18:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    4b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4b20:	fb00 f005 	mul.w	r0, r0, r5
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    4b24:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    4b28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    4b2c:	69db      	ldr	r3, [r3, #28]
    4b2e:	fb03 f300 	mul.w	r3, r3, r0
    4b32:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    4b34:	7b93      	ldrb	r3, [r2, #14]
    4b36:	099b      	lsrs	r3, r3, #6
    4b38:	f040 80e2 	bne.w	4d00 <sd_mmc_check+0x2d8>
    4b3c:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4b3e:	7d50      	ldrb	r0, [r2, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    4b40:	7d13      	ldrb	r3, [r2, #20]
    4b42:	029b      	lsls	r3, r3, #10
    4b44:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    4b48:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4b4c:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4b4e:	7dd1      	ldrb	r1, [r2, #23]
    4b50:	0049      	lsls	r1, r1, #1
    4b52:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    4b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    4b5a:	3301      	adds	r3, #1
    4b5c:	f001 0107 	and.w	r1, r1, #7
    4b60:	3102      	adds	r1, #2
		uint32_t blocknr
    4b62:	408b      	lsls	r3, r1
    4b64:	7cd1      	ldrb	r1, [r2, #19]
    4b66:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    4b6a:	408b      	lsls	r3, r1
    4b6c:	0a9b      	lsrs	r3, r3, #10
    4b6e:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4b70:	4b5b      	ldr	r3, [pc, #364]	; (4ce0 <sd_mmc_check+0x2b8>)
    4b72:	681a      	ldr	r2, [r3, #0]
    4b74:	8912      	ldrh	r2, [r2, #8]
    4b76:	0412      	lsls	r2, r2, #16
    4b78:	f243 1107 	movw	r1, #12551	; 0x3107
    4b7c:	6898      	ldr	r0, [r3, #8]
    4b7e:	4b5b      	ldr	r3, [pc, #364]	; (4cec <sd_mmc_check+0x2c4>)
    4b80:	4798      	blx	r3
    4b82:	2800      	cmp	r0, #0
    4b84:	f43f af7c 	beq.w	4a80 <sd_mmc_check+0x58>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4b88:	4b55      	ldr	r3, [pc, #340]	; (4ce0 <sd_mmc_check+0x2b8>)
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	7ada      	ldrb	r2, [r3, #11]
    4b8e:	f012 0f01 	tst.w	r2, #1
    4b92:	f040 80c2 	bne.w	4d1a <sd_mmc_check+0x2f2>
	if (IS_SDIO()) {
    4b96:	4b52      	ldr	r3, [pc, #328]	; (4ce0 <sd_mmc_check+0x2b8>)
    4b98:	681b      	ldr	r3, [r3, #0]
    4b9a:	7adb      	ldrb	r3, [r3, #11]
    4b9c:	f013 0f04 	tst.w	r3, #4
    4ba0:	f000 8152 	beq.w	4e48 <sd_mmc_check+0x420>
    4ba4:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    4ba6:	2700      	movs	r7, #0
    4ba8:	4e4f      	ldr	r6, [pc, #316]	; (4ce8 <sd_mmc_check+0x2c0>)
    4baa:	f1a5 0309 	sub.w	r3, r5, #9
    4bae:	aa03      	add	r2, sp, #12
    4bb0:	4413      	add	r3, r2
    4bb2:	9300      	str	r3, [sp, #0]
    4bb4:	463b      	mov	r3, r7
    4bb6:	462a      	mov	r2, r5
    4bb8:	4639      	mov	r1, r7
    4bba:	4638      	mov	r0, r7
    4bbc:	47b0      	blx	r6
		addr_old++;
    4bbe:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    4bc0:	2d0d      	cmp	r5, #13
    4bc2:	d1f2      	bne.n	4baa <sd_mmc_check+0x182>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    4bc4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4bc8:	f89d 900c 	ldrb.w	r9, [sp, #12]
    4bcc:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    4bd0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4bd4:	eb09 4903 	add.w	r9, r9, r3, lsl #16
    4bd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4bdc:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
    4be0:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    4be2:	f04f 0800 	mov.w	r8, #0
    4be6:	4f40      	ldr	r7, [pc, #256]	; (4ce8 <sd_mmc_check+0x2c0>)
    4be8:	e0ed      	b.n	4dc6 <sd_mmc_check+0x39e>
	resp = driver_get_response(sd_mmc_hal);
    4bea:	68b0      	ldr	r0, [r6, #8]
    4bec:	4b40      	ldr	r3, [pc, #256]	; (4cf0 <sd_mmc_check+0x2c8>)
    4bee:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    4bf0:	f1b0 3fff 	cmp.w	r0, #4294967295
    4bf4:	f000 8227 	beq.w	5046 <sd_mmc_check+0x61e>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    4bf8:	f3c0 000b 	ubfx	r0, r0, #0, #12
    4bfc:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    4c00:	f47f af3e 	bne.w	4a80 <sd_mmc_check+0x58>
    4c04:	e74f      	b.n	4aa6 <sd_mmc_check+0x7e>
	resp = driver_get_response(sd_mmc_hal);
    4c06:	4b36      	ldr	r3, [pc, #216]	; (4ce0 <sd_mmc_check+0x2b8>)
    4c08:	6898      	ldr	r0, [r3, #8]
    4c0a:	4b39      	ldr	r3, [pc, #228]	; (4cf0 <sd_mmc_check+0x2c8>)
    4c0c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    4c0e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    4c12:	f43f af52 	beq.w	4aba <sd_mmc_check+0x92>
    4c16:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    4c1a:	4e31      	ldr	r6, [pc, #196]	; (4ce0 <sd_mmc_check+0x2b8>)
    4c1c:	4f33      	ldr	r7, [pc, #204]	; (4cec <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    4c1e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4cf0 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    4c22:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    4c26:	f244 5105 	movw	r1, #17669	; 0x4505
    4c2a:	68b0      	ldr	r0, [r6, #8]
    4c2c:	47b8      	blx	r7
    4c2e:	2800      	cmp	r0, #0
    4c30:	f43f af26 	beq.w	4a80 <sd_mmc_check+0x58>
		resp = driver_get_response(sd_mmc_hal);
    4c34:	68b0      	ldr	r0, [r6, #8]
    4c36:	47c8      	blx	r9
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    4c38:	2800      	cmp	r0, #0
    4c3a:	db02      	blt.n	4c42 <sd_mmc_check+0x21a>
		if (cmd5_retry-- == 0) {
    4c3c:	3d01      	subs	r5, #1
    4c3e:	d1f0      	bne.n	4c22 <sd_mmc_check+0x1fa>
    4c40:	e71e      	b.n	4a80 <sd_mmc_check+0x58>
	if ((resp & OCR_SDIO_MP) > 0) {
    4c42:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    4c46:	d104      	bne.n	4c52 <sd_mmc_check+0x22a>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    4c48:	4b25      	ldr	r3, [pc, #148]	; (4ce0 <sd_mmc_check+0x2b8>)
    4c4a:	681b      	ldr	r3, [r3, #0]
    4c4c:	2204      	movs	r2, #4
    4c4e:	72da      	strb	r2, [r3, #11]
    4c50:	e73a      	b.n	4ac8 <sd_mmc_check+0xa0>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    4c52:	4b23      	ldr	r3, [pc, #140]	; (4ce0 <sd_mmc_check+0x2b8>)
    4c54:	681b      	ldr	r3, [r3, #0]
    4c56:	2205      	movs	r2, #5
    4c58:	72da      	strb	r2, [r3, #11]
    4c5a:	f1b8 0f00 	cmp.w	r8, #0
    4c5e:	4b27      	ldr	r3, [pc, #156]	; (4cfc <sd_mmc_check+0x2d4>)
    4c60:	bf14      	ite	ne
    4c62:	4698      	movne	r8, r3
    4c64:	f44f 18fc 	moveq.w	r8, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
    4c68:	f640 0635 	movw	r6, #2101	; 0x835
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    4c6c:	4d1c      	ldr	r5, [pc, #112]	; (4ce0 <sd_mmc_check+0x2b8>)
    4c6e:	4f1f      	ldr	r7, [pc, #124]	; (4cec <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    4c70:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4cf0 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    4c74:	2200      	movs	r2, #0
    4c76:	f241 1137 	movw	r1, #4407	; 0x1137
    4c7a:	68a8      	ldr	r0, [r5, #8]
    4c7c:	47b8      	blx	r7
    4c7e:	b158      	cbz	r0, 4c98 <sd_mmc_check+0x270>
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    4c80:	4642      	mov	r2, r8
    4c82:	f244 5129 	movw	r1, #17705	; 0x4529
    4c86:	68a8      	ldr	r0, [r5, #8]
    4c88:	47b8      	blx	r7
    4c8a:	b128      	cbz	r0, 4c98 <sd_mmc_check+0x270>
		resp = driver_get_response(sd_mmc_hal);
    4c8c:	68a8      	ldr	r0, [r5, #8]
    4c8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
    4c90:	2800      	cmp	r0, #0
    4c92:	db06      	blt.n	4ca2 <sd_mmc_check+0x27a>
		if (retry-- == 0) {
    4c94:	3e01      	subs	r6, #1
    4c96:	d1ed      	bne.n	4c74 <sd_mmc_check+0x24c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    4c98:	4b11      	ldr	r3, [pc, #68]	; (4ce0 <sd_mmc_check+0x2b8>)
    4c9a:	681b      	ldr	r3, [r3, #0]
    4c9c:	2200      	movs	r2, #0
    4c9e:	72da      	strb	r2, [r3, #11]
    4ca0:	e6ee      	b.n	4a80 <sd_mmc_check+0x58>
			if ((resp & OCR_CCS) != 0) {
    4ca2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    4ca6:	d005      	beq.n	4cb4 <sd_mmc_check+0x28c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    4ca8:	4b0d      	ldr	r3, [pc, #52]	; (4ce0 <sd_mmc_check+0x2b8>)
    4caa:	681a      	ldr	r2, [r3, #0]
    4cac:	7ad3      	ldrb	r3, [r2, #11]
    4cae:	f043 0308 	orr.w	r3, r3, #8
    4cb2:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4cb4:	4b0a      	ldr	r3, [pc, #40]	; (4ce0 <sd_mmc_check+0x2b8>)
    4cb6:	681b      	ldr	r3, [r3, #0]
    4cb8:	7adb      	ldrb	r3, [r3, #11]
    4cba:	f013 0f01 	tst.w	r3, #1
    4cbe:	f43f af03 	beq.w	4ac8 <sd_mmc_check+0xa0>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    4cc2:	2200      	movs	r2, #0
    4cc4:	f645 3102 	movw	r1, #23298	; 0x5b02
    4cc8:	4b05      	ldr	r3, [pc, #20]	; (4ce0 <sd_mmc_check+0x2b8>)
    4cca:	6898      	ldr	r0, [r3, #8]
    4ccc:	4b07      	ldr	r3, [pc, #28]	; (4cec <sd_mmc_check+0x2c4>)
    4cce:	4798      	blx	r3
    4cd0:	2800      	cmp	r0, #0
    4cd2:	f47f aef9 	bne.w	4ac8 <sd_mmc_check+0xa0>
    4cd6:	e6d3      	b.n	4a80 <sd_mmc_check+0x58>
    4cd8:	00004871 	.word	0x00004871
    4cdc:	000049ed 	.word	0x000049ed
    4ce0:	20000afc 	.word	0x20000afc
    4ce4:	000023d1 	.word	0x000023d1
    4ce8:	00004985 	.word	0x00004985
    4cec:	000023f9 	.word	0x000023f9
    4cf0:	00002429 	.word	0x00002429
    4cf4:	00002451 	.word	0x00002451
    4cf8:	00009028 	.word	0x00009028
    4cfc:	401f8000 	.word	0x401f8000
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4d00:	7dd1      	ldrb	r1, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4d02:	7d90      	ldrb	r0, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    4d04:	7d53      	ldrb	r3, [r2, #21]
    4d06:	041b      	lsls	r3, r3, #16
    4d08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4d0c:	430b      	orrs	r3, r1
	value &= ((uint32_t)1 << size) - 1;
    4d0e:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    4d12:	3301      	adds	r3, #1
    4d14:	025b      	lsls	r3, r3, #9
    4d16:	6053      	str	r3, [r2, #4]
    4d18:	e72a      	b.n	4b70 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4d1a:	891a      	ldrh	r2, [r3, #8]
    4d1c:	0412      	lsls	r2, r2, #16
    4d1e:	f241 1137 	movw	r1, #4407	; 0x1137
    4d22:	4b9a      	ldr	r3, [pc, #616]	; (4f8c <sd_mmc_check+0x564>)
    4d24:	6898      	ldr	r0, [r3, #8]
    4d26:	4b9a      	ldr	r3, [pc, #616]	; (4f90 <sd_mmc_check+0x568>)
    4d28:	4798      	blx	r3
    4d2a:	2800      	cmp	r0, #0
    4d2c:	f43f aea8 	beq.w	4a80 <sd_mmc_check+0x58>
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    4d30:	2301      	movs	r3, #1
    4d32:	9301      	str	r3, [sp, #4]
    4d34:	9300      	str	r3, [sp, #0]
    4d36:	2308      	movs	r3, #8
    4d38:	2200      	movs	r2, #0
    4d3a:	4996      	ldr	r1, [pc, #600]	; (4f94 <sd_mmc_check+0x56c>)
    4d3c:	4893      	ldr	r0, [pc, #588]	; (4f8c <sd_mmc_check+0x564>)
    4d3e:	6880      	ldr	r0, [r0, #8]
    4d40:	4d95      	ldr	r5, [pc, #596]	; (4f98 <sd_mmc_check+0x570>)
    4d42:	47a8      	blx	r5
    4d44:	2800      	cmp	r0, #0
    4d46:	f43f ae9b 	beq.w	4a80 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    4d4a:	2201      	movs	r2, #1
    4d4c:	a904      	add	r1, sp, #16
    4d4e:	4b8f      	ldr	r3, [pc, #572]	; (4f8c <sd_mmc_check+0x564>)
    4d50:	6898      	ldr	r0, [r3, #8]
    4d52:	4b92      	ldr	r3, [pc, #584]	; (4f9c <sd_mmc_check+0x574>)
    4d54:	4798      	blx	r3
    4d56:	2800      	cmp	r0, #0
    4d58:	f43f ae92 	beq.w	4a80 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4d5c:	4b8b      	ldr	r3, [pc, #556]	; (4f8c <sd_mmc_check+0x564>)
    4d5e:	6898      	ldr	r0, [r3, #8]
    4d60:	4b8f      	ldr	r3, [pc, #572]	; (4fa0 <sd_mmc_check+0x578>)
    4d62:	4798      	blx	r3
    4d64:	2800      	cmp	r0, #0
    4d66:	f43f ae8b 	beq.w	4a80 <sd_mmc_check+0x58>
	switch (SD_SCR_SD_SPEC(scr)) {
    4d6a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4d6e:	f003 030f 	and.w	r3, r3, #15
    4d72:	2b01      	cmp	r3, #1
    4d74:	d00c      	beq.n	4d90 <sd_mmc_check+0x368>
    4d76:	b133      	cbz	r3, 4d86 <sd_mmc_check+0x35e>
    4d78:	2b02      	cmp	r3, #2
    4d7a:	d00e      	beq.n	4d9a <sd_mmc_check+0x372>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4d7c:	4b83      	ldr	r3, [pc, #524]	; (4f8c <sd_mmc_check+0x564>)
    4d7e:	681b      	ldr	r3, [r3, #0]
    4d80:	2210      	movs	r2, #16
    4d82:	731a      	strb	r2, [r3, #12]
    4d84:	e707      	b.n	4b96 <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4d86:	4b81      	ldr	r3, [pc, #516]	; (4f8c <sd_mmc_check+0x564>)
    4d88:	681b      	ldr	r3, [r3, #0]
    4d8a:	2210      	movs	r2, #16
    4d8c:	731a      	strb	r2, [r3, #12]
    4d8e:	e702      	b.n	4b96 <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    4d90:	4b7e      	ldr	r3, [pc, #504]	; (4f8c <sd_mmc_check+0x564>)
    4d92:	681b      	ldr	r3, [r3, #0]
    4d94:	221a      	movs	r2, #26
    4d96:	731a      	strb	r2, [r3, #12]
    4d98:	e6fd      	b.n	4b96 <sd_mmc_check+0x16e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    4d9a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    4d9e:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
    4da0:	4b7a      	ldr	r3, [pc, #488]	; (4f8c <sd_mmc_check+0x564>)
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	bf14      	ite	ne
    4da6:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
    4da8:	2220      	moveq	r2, #32
    4daa:	731a      	strb	r2, [r3, #12]
    4dac:	e6f3      	b.n	4b96 <sd_mmc_check+0x16e>
		if (buf[1] == 0) {
    4dae:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4db2:	2b00      	cmp	r3, #0
    4db4:	f43f ae64 	beq.w	4a80 <sd_mmc_check+0x58>
		addr_new += buf[1] - 1;
    4db8:	3302      	adds	r3, #2
    4dba:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
    4dbc:	f509 7380 	add.w	r3, r9, #256	; 0x100
    4dc0:	429e      	cmp	r6, r3
    4dc2:	f63f ae5d 	bhi.w	4a80 <sd_mmc_check+0x58>
	addr_new = addr_old;
    4dc6:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    4dc8:	ab04      	add	r3, sp, #16
    4dca:	442b      	add	r3, r5
    4dcc:	9300      	str	r3, [sp, #0]
    4dce:	4643      	mov	r3, r8
    4dd0:	19aa      	adds	r2, r5, r6
    4dd2:	4641      	mov	r1, r8
    4dd4:	4640      	mov	r0, r8
    4dd6:	47b8      	blx	r7
    4dd8:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    4dda:	2d03      	cmp	r5, #3
    4ddc:	d1f4      	bne.n	4dc8 <sd_mmc_check+0x3a0>
		if (buf[0] == SDIO_CISTPL_END) {
    4dde:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4de2:	2bff      	cmp	r3, #255	; 0xff
    4de4:	f43f ae4c 	beq.w	4a80 <sd_mmc_check+0x58>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    4de8:	2b22      	cmp	r3, #34	; 0x22
    4dea:	d1e0      	bne.n	4dae <sd_mmc_check+0x386>
    4dec:	f89d 3012 	ldrb.w	r3, [sp, #18]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d1dc      	bne.n	4dae <sd_mmc_check+0x386>
    4df4:	f106 0906 	add.w	r9, r6, #6
	addr_new -= 3;
    4df8:	4635      	mov	r5, r6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    4dfa:	f04f 0800 	mov.w	r8, #0
    4dfe:	4f69      	ldr	r7, [pc, #420]	; (4fa4 <sd_mmc_check+0x57c>)
    4e00:	1bab      	subs	r3, r5, r6
    4e02:	aa04      	add	r2, sp, #16
    4e04:	4413      	add	r3, r2
    4e06:	9300      	str	r3, [sp, #0]
    4e08:	4643      	mov	r3, r8
    4e0a:	462a      	mov	r2, r5
    4e0c:	4641      	mov	r1, r8
    4e0e:	4640      	mov	r0, r8
    4e10:	47b8      	blx	r7
		addr_new++;
    4e12:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    4e14:	45a9      	cmp	r9, r5
    4e16:	d1f3      	bne.n	4e00 <sd_mmc_check+0x3d8>
	tplfe_max_tran_speed = buf[5];
    4e18:	f89d 3015 	ldrb.w	r3, [sp, #21]
    4e1c:	2b32      	cmp	r3, #50	; 0x32
    4e1e:	bf28      	it	cs
    4e20:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
    4e22:	4a5a      	ldr	r2, [pc, #360]	; (4f8c <sd_mmc_check+0x564>)
    4e24:	6810      	ldr	r0, [r2, #0]
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    4e26:	4a60      	ldr	r2, [pc, #384]	; (4fa8 <sd_mmc_check+0x580>)
    4e28:	f003 0107 	and.w	r1, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
    4e2c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
    4e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4e34:	fb01 f105 	mul.w	r1, r1, r5
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    4e38:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    4e3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    4e40:	69db      	ldr	r3, [r3, #28]
    4e42:	fb03 f301 	mul.w	r3, r3, r1
    4e46:	6003      	str	r3, [r0, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    4e48:	4b50      	ldr	r3, [pc, #320]	; (4f8c <sd_mmc_check+0x564>)
    4e4a:	7919      	ldrb	r1, [r3, #4]
    4e4c:	6898      	ldr	r0, [r3, #8]
    4e4e:	4b57      	ldr	r3, [pc, #348]	; (4fac <sd_mmc_check+0x584>)
    4e50:	4798      	blx	r3
    4e52:	2803      	cmp	r0, #3
    4e54:	d926      	bls.n	4ea4 <sd_mmc_check+0x47c>
		if (IS_SDIO()) {
    4e56:	4b4d      	ldr	r3, [pc, #308]	; (4f8c <sd_mmc_check+0x564>)
    4e58:	681b      	ldr	r3, [r3, #0]
    4e5a:	7adb      	ldrb	r3, [r3, #11]
    4e5c:	f013 0f04 	tst.w	r3, #4
    4e60:	d14e      	bne.n	4f00 <sd_mmc_check+0x4d8>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    4e62:	4b4a      	ldr	r3, [pc, #296]	; (4f8c <sd_mmc_check+0x564>)
    4e64:	681b      	ldr	r3, [r3, #0]
    4e66:	7ada      	ldrb	r2, [r3, #11]
    4e68:	f012 0f01 	tst.w	r2, #1
    4e6c:	d018      	beq.n	4ea0 <sd_mmc_check+0x478>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4e6e:	891a      	ldrh	r2, [r3, #8]
    4e70:	0412      	lsls	r2, r2, #16
    4e72:	f241 1137 	movw	r1, #4407	; 0x1137
    4e76:	4b45      	ldr	r3, [pc, #276]	; (4f8c <sd_mmc_check+0x564>)
    4e78:	6898      	ldr	r0, [r3, #8]
    4e7a:	4b45      	ldr	r3, [pc, #276]	; (4f90 <sd_mmc_check+0x568>)
    4e7c:	4798      	blx	r3
    4e7e:	2800      	cmp	r0, #0
    4e80:	f43f adfe 	beq.w	4a80 <sd_mmc_check+0x58>
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    4e84:	2202      	movs	r2, #2
    4e86:	f241 1106 	movw	r1, #4358	; 0x1106
    4e8a:	4b40      	ldr	r3, [pc, #256]	; (4f8c <sd_mmc_check+0x564>)
    4e8c:	6898      	ldr	r0, [r3, #8]
    4e8e:	4b40      	ldr	r3, [pc, #256]	; (4f90 <sd_mmc_check+0x568>)
    4e90:	4798      	blx	r3
    4e92:	2800      	cmp	r0, #0
    4e94:	f43f adf4 	beq.w	4a80 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    4e98:	4b3c      	ldr	r3, [pc, #240]	; (4f8c <sd_mmc_check+0x564>)
    4e9a:	681b      	ldr	r3, [r3, #0]
    4e9c:	2204      	movs	r2, #4
    4e9e:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
    4ea0:	4b43      	ldr	r3, [pc, #268]	; (4fb0 <sd_mmc_check+0x588>)
    4ea2:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    4ea4:	4b39      	ldr	r3, [pc, #228]	; (4f8c <sd_mmc_check+0x564>)
    4ea6:	6898      	ldr	r0, [r3, #8]
    4ea8:	4b42      	ldr	r3, [pc, #264]	; (4fb4 <sd_mmc_check+0x58c>)
    4eaa:	4798      	blx	r3
    4eac:	b180      	cbz	r0, 4ed0 <sd_mmc_check+0x4a8>
		if (IS_SDIO()) {
    4eae:	4b37      	ldr	r3, [pc, #220]	; (4f8c <sd_mmc_check+0x564>)
    4eb0:	681b      	ldr	r3, [r3, #0]
    4eb2:	7adb      	ldrb	r3, [r3, #11]
    4eb4:	f013 0f04 	tst.w	r3, #4
    4eb8:	d143      	bne.n	4f42 <sd_mmc_check+0x51a>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    4eba:	4b34      	ldr	r3, [pc, #208]	; (4f8c <sd_mmc_check+0x564>)
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	7ada      	ldrb	r2, [r3, #11]
    4ec0:	f012 0f01 	tst.w	r2, #1
    4ec4:	d002      	beq.n	4ecc <sd_mmc_check+0x4a4>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    4ec6:	7b1b      	ldrb	r3, [r3, #12]
    4ec8:	2b10      	cmp	r3, #16
    4eca:	d877      	bhi.n	4fbc <sd_mmc_check+0x594>
		sd_mmc_configure_slot();
    4ecc:	4b38      	ldr	r3, [pc, #224]	; (4fb0 <sd_mmc_check+0x588>)
    4ece:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4ed0:	4b2e      	ldr	r3, [pc, #184]	; (4f8c <sd_mmc_check+0x564>)
    4ed2:	681b      	ldr	r3, [r3, #0]
    4ed4:	7adb      	ldrb	r3, [r3, #11]
    4ed6:	f013 0f01 	tst.w	r3, #1
    4eda:	d00a      	beq.n	4ef2 <sd_mmc_check+0x4ca>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    4edc:	f44f 7200 	mov.w	r2, #512	; 0x200
    4ee0:	f241 1110 	movw	r1, #4368	; 0x1110
    4ee4:	4b29      	ldr	r3, [pc, #164]	; (4f8c <sd_mmc_check+0x564>)
    4ee6:	6898      	ldr	r0, [r3, #8]
    4ee8:	4b29      	ldr	r3, [pc, #164]	; (4f90 <sd_mmc_check+0x568>)
    4eea:	4798      	blx	r3
	if (sd_mmc_mci_card_init()) {
    4eec:	2800      	cmp	r0, #0
    4eee:	f43f adc7 	beq.w	4a80 <sd_mmc_check+0x58>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    4ef2:	4b26      	ldr	r3, [pc, #152]	; (4f8c <sd_mmc_check+0x564>)
    4ef4:	681b      	ldr	r3, [r3, #0]
    4ef6:	2200      	movs	r2, #0
    4ef8:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    4efa:	4b2f      	ldr	r3, [pc, #188]	; (4fb8 <sd_mmc_check+0x590>)
    4efc:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    4efe:	e59d      	b.n	4a3c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    4f00:	ab04      	add	r3, sp, #16
    4f02:	9300      	str	r3, [sp, #0]
    4f04:	2300      	movs	r3, #0
    4f06:	2208      	movs	r2, #8
    4f08:	4619      	mov	r1, r3
    4f0a:	4618      	mov	r0, r3
    4f0c:	4d25      	ldr	r5, [pc, #148]	; (4fa4 <sd_mmc_check+0x57c>)
    4f0e:	47a8      	blx	r5
    4f10:	2800      	cmp	r0, #0
    4f12:	f43f adb5 	beq.w	4a80 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    4f16:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	daa1      	bge.n	4e62 <sd_mmc_check+0x43a>
	u8_value = SDIO_BUSWIDTH_4B;
    4f1e:	ab14      	add	r3, sp, #80	; 0x50
    4f20:	2202      	movs	r2, #2
    4f22:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    4f26:	9300      	str	r3, [sp, #0]
    4f28:	2301      	movs	r3, #1
    4f2a:	2207      	movs	r2, #7
    4f2c:	2100      	movs	r1, #0
    4f2e:	4618      	mov	r0, r3
    4f30:	47a8      	blx	r5
    4f32:	2800      	cmp	r0, #0
    4f34:	f43f ada4 	beq.w	4a80 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    4f38:	4b14      	ldr	r3, [pc, #80]	; (4f8c <sd_mmc_check+0x564>)
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	2204      	movs	r2, #4
    4f3e:	735a      	strb	r2, [r3, #13]
    4f40:	e78f      	b.n	4e62 <sd_mmc_check+0x43a>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    4f42:	ab04      	add	r3, sp, #16
    4f44:	9300      	str	r3, [sp, #0]
    4f46:	2300      	movs	r3, #0
    4f48:	2213      	movs	r2, #19
    4f4a:	4619      	mov	r1, r3
    4f4c:	4618      	mov	r0, r3
    4f4e:	4d15      	ldr	r5, [pc, #84]	; (4fa4 <sd_mmc_check+0x57c>)
    4f50:	47a8      	blx	r5
    4f52:	2800      	cmp	r0, #0
    4f54:	f43f ad94 	beq.w	4a80 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    4f58:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4f5c:	f013 0f01 	tst.w	r3, #1
    4f60:	d0ab      	beq.n	4eba <sd_mmc_check+0x492>
	u8_value = SDIO_EHS;
    4f62:	ab14      	add	r3, sp, #80	; 0x50
    4f64:	2202      	movs	r2, #2
    4f66:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    4f6a:	9300      	str	r3, [sp, #0]
    4f6c:	2301      	movs	r3, #1
    4f6e:	2213      	movs	r2, #19
    4f70:	2100      	movs	r1, #0
    4f72:	4618      	mov	r0, r3
    4f74:	47a8      	blx	r5
    4f76:	2800      	cmp	r0, #0
    4f78:	f43f ad82 	beq.w	4a80 <sd_mmc_check+0x58>
	sd_mmc_card->high_speed = 1;
    4f7c:	4b03      	ldr	r3, [pc, #12]	; (4f8c <sd_mmc_check+0x564>)
    4f7e:	681b      	ldr	r3, [r3, #0]
    4f80:	2201      	movs	r2, #1
    4f82:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    4f84:	681a      	ldr	r2, [r3, #0]
    4f86:	0052      	lsls	r2, r2, #1
    4f88:	601a      	str	r2, [r3, #0]
    4f8a:	e796      	b.n	4eba <sd_mmc_check+0x492>
    4f8c:	20000afc 	.word	0x20000afc
    4f90:	000023f9 	.word	0x000023f9
    4f94:	00081133 	.word	0x00081133
    4f98:	00002481 	.word	0x00002481
    4f9c:	000024c5 	.word	0x000024c5
    4fa0:	0000252d 	.word	0x0000252d
    4fa4:	00004985 	.word	0x00004985
    4fa8:	00009028 	.word	0x00009028
    4fac:	0000237d 	.word	0x0000237d
    4fb0:	00004845 	.word	0x00004845
    4fb4:	000023a9 	.word	0x000023a9
    4fb8:	000049ed 	.word	0x000049ed
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    4fbc:	2540      	movs	r5, #64	; 0x40
    4fbe:	462a      	mov	r2, r5
    4fc0:	2100      	movs	r1, #0
    4fc2:	a804      	add	r0, sp, #16
    4fc4:	4b21      	ldr	r3, [pc, #132]	; (504c <sd_mmc_check+0x624>)
    4fc6:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    4fc8:	2301      	movs	r3, #1
    4fca:	9301      	str	r3, [sp, #4]
    4fcc:	9300      	str	r3, [sp, #0]
    4fce:	462b      	mov	r3, r5
    4fd0:	4a1f      	ldr	r2, [pc, #124]	; (5050 <sd_mmc_check+0x628>)
    4fd2:	4920      	ldr	r1, [pc, #128]	; (5054 <sd_mmc_check+0x62c>)
    4fd4:	4820      	ldr	r0, [pc, #128]	; (5058 <sd_mmc_check+0x630>)
    4fd6:	6880      	ldr	r0, [r0, #8]
    4fd8:	4d20      	ldr	r5, [pc, #128]	; (505c <sd_mmc_check+0x634>)
    4fda:	47a8      	blx	r5
    4fdc:	2800      	cmp	r0, #0
    4fde:	f43f ad4f 	beq.w	4a80 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    4fe2:	2201      	movs	r2, #1
    4fe4:	a904      	add	r1, sp, #16
    4fe6:	4b1c      	ldr	r3, [pc, #112]	; (5058 <sd_mmc_check+0x630>)
    4fe8:	6898      	ldr	r0, [r3, #8]
    4fea:	4b1d      	ldr	r3, [pc, #116]	; (5060 <sd_mmc_check+0x638>)
    4fec:	4798      	blx	r3
    4fee:	2800      	cmp	r0, #0
    4ff0:	f43f ad46 	beq.w	4a80 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4ff4:	4b18      	ldr	r3, [pc, #96]	; (5058 <sd_mmc_check+0x630>)
    4ff6:	6898      	ldr	r0, [r3, #8]
    4ff8:	4b1a      	ldr	r3, [pc, #104]	; (5064 <sd_mmc_check+0x63c>)
    4ffa:	4798      	blx	r3
    4ffc:	2800      	cmp	r0, #0
    4ffe:	f43f ad3f 	beq.w	4a80 <sd_mmc_check+0x58>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    5002:	4b15      	ldr	r3, [pc, #84]	; (5058 <sd_mmc_check+0x630>)
    5004:	6898      	ldr	r0, [r3, #8]
    5006:	4b18      	ldr	r3, [pc, #96]	; (5068 <sd_mmc_check+0x640>)
    5008:	4798      	blx	r3
    500a:	f010 0f80 	tst.w	r0, #128	; 0x80
    500e:	f47f ad37 	bne.w	4a80 <sd_mmc_check+0x58>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    5012:	f89d 3020 	ldrb.w	r3, [sp, #32]
    5016:	f003 030f 	and.w	r3, r3, #15
    501a:	2b0f      	cmp	r3, #15
    501c:	f43f af56 	beq.w	4ecc <sd_mmc_check+0x4a4>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    5020:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    5024:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    5028:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    502c:	f47f ad28 	bne.w	4a80 <sd_mmc_check+0x58>
	driver_send_clock(sd_mmc_hal);
    5030:	4d09      	ldr	r5, [pc, #36]	; (5058 <sd_mmc_check+0x630>)
    5032:	68a8      	ldr	r0, [r5, #8]
    5034:	4b0d      	ldr	r3, [pc, #52]	; (506c <sd_mmc_check+0x644>)
    5036:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    5038:	682b      	ldr	r3, [r5, #0]
    503a:	2201      	movs	r2, #1
    503c:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    503e:	681a      	ldr	r2, [r3, #0]
    5040:	0052      	lsls	r2, r2, #1
    5042:	601a      	str	r2, [r3, #0]
    5044:	e742      	b.n	4ecc <sd_mmc_check+0x4a4>
	*v2 = 0;
    5046:	f04f 0800 	mov.w	r8, #0
    504a:	e52c      	b.n	4aa6 <sd_mmc_check+0x7e>
    504c:	00006615 	.word	0x00006615
    5050:	80ffff01 	.word	0x80ffff01
    5054:	00081106 	.word	0x00081106
    5058:	20000afc 	.word	0x20000afc
    505c:	00002481 	.word	0x00002481
    5060:	000024c5 	.word	0x000024c5
    5064:	0000252d 	.word	0x0000252d
    5068:	00002429 	.word	0x00002429
    506c:	000023d1 	.word	0x000023d1

00005070 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    5070:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    5072:	4b05      	ldr	r3, [pc, #20]	; (5088 <sd_mmc_get_type+0x18>)
    5074:	4798      	blx	r3
    5076:	b108      	cbz	r0, 507c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
    5078:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    507a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    507c:	4b03      	ldr	r3, [pc, #12]	; (508c <sd_mmc_get_type+0x1c>)
    507e:	4798      	blx	r3
	return sd_mmc_card->type;
    5080:	4b03      	ldr	r3, [pc, #12]	; (5090 <sd_mmc_get_type+0x20>)
    5082:	681b      	ldr	r3, [r3, #0]
    5084:	7ad8      	ldrb	r0, [r3, #11]
    5086:	bd08      	pop	{r3, pc}
    5088:	00004871 	.word	0x00004871
    508c:	000049ed 	.word	0x000049ed
    5090:	20000afc 	.word	0x20000afc

00005094 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    5094:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    5096:	4b05      	ldr	r3, [pc, #20]	; (50ac <sd_mmc_get_capacity+0x18>)
    5098:	4798      	blx	r3
    509a:	b108      	cbz	r0, 50a0 <sd_mmc_get_capacity+0xc>
		return 0;
    509c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    509e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    50a0:	4b03      	ldr	r3, [pc, #12]	; (50b0 <sd_mmc_get_capacity+0x1c>)
    50a2:	4798      	blx	r3
	return sd_mmc_card->capacity;
    50a4:	4b03      	ldr	r3, [pc, #12]	; (50b4 <sd_mmc_get_capacity+0x20>)
    50a6:	681b      	ldr	r3, [r3, #0]
    50a8:	6858      	ldr	r0, [r3, #4]
    50aa:	bd08      	pop	{r3, pc}
    50ac:	00004871 	.word	0x00004871
    50b0:	000049ed 	.word	0x000049ed
    50b4:	20000afc 	.word	0x20000afc

000050b8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    50b8:	4b19      	ldr	r3, [pc, #100]	; (5120 <sd_mmc_is_write_protected+0x68>)
    50ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50bc:	2b00      	cmp	r3, #0
    50be:	d02b      	beq.n	5118 <sd_mmc_is_write_protected+0x60>
{
    50c0:	b570      	push	{r4, r5, r6, lr}
    50c2:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    50c4:	0085      	lsls	r5, r0, #2
    50c6:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    50ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    50ce:	d025      	beq.n	511c <sd_mmc_is_write_protected+0x64>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    50d0:	b2de      	uxtb	r6, r3
	CRITICAL_SECTION_ENTER();
    50d2:	a801      	add	r0, sp, #4
    50d4:	4b13      	ldr	r3, [pc, #76]	; (5124 <sd_mmc_is_write_protected+0x6c>)
    50d6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    50d8:	0973      	lsrs	r3, r6, #5
    50da:	4913      	ldr	r1, [pc, #76]	; (5128 <sd_mmc_is_write_protected+0x70>)
    50dc:	01db      	lsls	r3, r3, #7
    50de:	18ca      	adds	r2, r1, r3
    50e0:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    50e2:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    50e4:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    50e6:	405c      	eors	r4, r3
    50e8:	400c      	ands	r4, r1
    50ea:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    50ec:	a801      	add	r0, sp, #4
    50ee:	4b0f      	ldr	r3, [pc, #60]	; (512c <sd_mmc_is_write_protected+0x74>)
    50f0:	4798      	blx	r3
    50f2:	f006 031f 	and.w	r3, r6, #31
    50f6:	2201      	movs	r2, #1
    50f8:	fa02 f303 	lsl.w	r3, r2, r3
    50fc:	4223      	tst	r3, r4
    50fe:	bf14      	ite	ne
    5100:	4610      	movne	r0, r2
    5102:	2000      	moveq	r0, #0
    5104:	4b06      	ldr	r3, [pc, #24]	; (5120 <sd_mmc_is_write_protected+0x68>)
    5106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5108:	441d      	add	r5, r3
    510a:	886b      	ldrh	r3, [r5, #2]
    510c:	4298      	cmp	r0, r3
    510e:	bf14      	ite	ne
    5110:	2000      	movne	r0, #0
    5112:	2001      	moveq	r0, #1
		return true;
	}
	return false;
}
    5114:	b002      	add	sp, #8
    5116:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5118:	2000      	movs	r0, #0
    511a:	4770      	bx	lr
    511c:	2000      	movs	r0, #0
    511e:	e7f9      	b.n	5114 <sd_mmc_is_write_protected+0x5c>
    5120:	20000afc 	.word	0x20000afc
    5124:	000020ad 	.word	0x000020ad
    5128:	41008000 	.word	0x41008000
    512c:	000020bb 	.word	0x000020bb

00005130 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    5130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5134:	b082      	sub	sp, #8
    5136:	468a      	mov	sl, r1
    5138:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    513a:	4b29      	ldr	r3, [pc, #164]	; (51e0 <sd_mmc_init_read_blocks+0xb0>)
    513c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    513e:	4680      	mov	r8, r0
    5140:	b118      	cbz	r0, 514a <sd_mmc_init_read_blocks+0x1a>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    5142:	4640      	mov	r0, r8
    5144:	b002      	add	sp, #8
    5146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    514a:	4d26      	ldr	r5, [pc, #152]	; (51e4 <sd_mmc_init_read_blocks+0xb4>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    514c:	4c26      	ldr	r4, [pc, #152]	; (51e8 <sd_mmc_init_read_blocks+0xb8>)
    514e:	4e27      	ldr	r6, [pc, #156]	; (51ec <sd_mmc_init_read_blocks+0xbc>)
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    5150:	4f27      	ldr	r7, [pc, #156]	; (51f0 <sd_mmc_init_read_blocks+0xc0>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    5152:	6823      	ldr	r3, [r4, #0]
    5154:	891a      	ldrh	r2, [r3, #8]
    5156:	0412      	lsls	r2, r2, #16
    5158:	f241 110d 	movw	r1, #4365	; 0x110d
    515c:	68a0      	ldr	r0, [r4, #8]
    515e:	47b0      	blx	r6
    5160:	b130      	cbz	r0, 5170 <sd_mmc_init_read_blocks+0x40>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    5162:	68a0      	ldr	r0, [r4, #8]
    5164:	47b8      	blx	r7
    5166:	f410 7f80 	tst.w	r0, #256	; 0x100
    516a:	d118      	bne.n	519e <sd_mmc_init_read_blocks+0x6e>
		if (nec_timeout-- == 0) {
    516c:	3d01      	subs	r5, #1
    516e:	d1f0      	bne.n	5152 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
    5170:	4b20      	ldr	r3, [pc, #128]	; (51f4 <sd_mmc_init_read_blocks+0xc4>)
    5172:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5174:	f04f 0805 	mov.w	r8, #5
    5178:	e7e3      	b.n	5142 <sd_mmc_init_read_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    517a:	4b1b      	ldr	r3, [pc, #108]	; (51e8 <sd_mmc_init_read_blocks+0xb8>)
    517c:	6898      	ldr	r0, [r3, #8]
    517e:	4b1c      	ldr	r3, [pc, #112]	; (51f0 <sd_mmc_init_read_blocks+0xc0>)
    5180:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    5182:	4b1d      	ldr	r3, [pc, #116]	; (51f8 <sd_mmc_init_read_blocks+0xc8>)
    5184:	4003      	ands	r3, r0
    5186:	b92b      	cbnz	r3, 5194 <sd_mmc_init_read_blocks+0x64>
	sd_mmc_nb_block_remaining  = nb_block;
    5188:	4b17      	ldr	r3, [pc, #92]	; (51e8 <sd_mmc_init_read_blocks+0xb8>)
    518a:	f8a3 9030 	strh.w	r9, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    518e:	f8a3 9038 	strh.w	r9, [r3, #56]	; 0x38
	return SD_MMC_OK;
    5192:	e7d6      	b.n	5142 <sd_mmc_init_read_blocks+0x12>
		sd_mmc_deselect_slot();
    5194:	4b17      	ldr	r3, [pc, #92]	; (51f4 <sd_mmc_init_read_blocks+0xc4>)
    5196:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5198:	f04f 0805 	mov.w	r8, #5
    519c:	e7d1      	b.n	5142 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    519e:	4b17      	ldr	r3, [pc, #92]	; (51fc <sd_mmc_init_read_blocks+0xcc>)
    51a0:	4917      	ldr	r1, [pc, #92]	; (5200 <sd_mmc_init_read_blocks+0xd0>)
    51a2:	f1b9 0f01 	cmp.w	r9, #1
    51a6:	bf98      	it	ls
    51a8:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    51aa:	4b0f      	ldr	r3, [pc, #60]	; (51e8 <sd_mmc_init_read_blocks+0xb8>)
    51ac:	681b      	ldr	r3, [r3, #0]
    51ae:	7adb      	ldrb	r3, [r3, #11]
    51b0:	f013 0f08 	tst.w	r3, #8
    51b4:	d101      	bne.n	51ba <sd_mmc_init_read_blocks+0x8a>
		arg = (start * SD_MMC_BLOCK_SIZE);
    51b6:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    51ba:	4b0b      	ldr	r3, [pc, #44]	; (51e8 <sd_mmc_init_read_blocks+0xb8>)
    51bc:	6898      	ldr	r0, [r3, #8]
    51be:	2301      	movs	r3, #1
    51c0:	9301      	str	r3, [sp, #4]
    51c2:	f8cd 9000 	str.w	r9, [sp]
    51c6:	f44f 7300 	mov.w	r3, #512	; 0x200
    51ca:	4652      	mov	r2, sl
    51cc:	4c0d      	ldr	r4, [pc, #52]	; (5204 <sd_mmc_init_read_blocks+0xd4>)
    51ce:	47a0      	blx	r4
    51d0:	2800      	cmp	r0, #0
    51d2:	d1d2      	bne.n	517a <sd_mmc_init_read_blocks+0x4a>
		sd_mmc_deselect_slot();
    51d4:	4b07      	ldr	r3, [pc, #28]	; (51f4 <sd_mmc_init_read_blocks+0xc4>)
    51d6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    51d8:	f04f 0805 	mov.w	r8, #5
    51dc:	e7b1      	b.n	5142 <sd_mmc_init_read_blocks+0x12>
    51de:	bf00      	nop
    51e0:	00004871 	.word	0x00004871
    51e4:	00030d41 	.word	0x00030d41
    51e8:	20000afc 	.word	0x20000afc
    51ec:	000023f9 	.word	0x000023f9
    51f0:	00002429 	.word	0x00002429
    51f4:	000049ed 	.word	0x000049ed
    51f8:	e4580000 	.word	0xe4580000
    51fc:	00081111 	.word	0x00081111
    5200:	00101112 	.word	0x00101112
    5204:	00002481 	.word	0x00002481

00005208 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    5208:	b570      	push	{r4, r5, r6, lr}
    520a:	4606      	mov	r6, r0
    520c:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    520e:	4d0d      	ldr	r5, [pc, #52]	; (5244 <sd_mmc_start_read_blocks+0x3c>)
    5210:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    5212:	f240 52a7 	movw	r2, #1447	; 0x5a7
    5216:	490c      	ldr	r1, [pc, #48]	; (5248 <sd_mmc_start_read_blocks+0x40>)
    5218:	42a0      	cmp	r0, r4
    521a:	bf34      	ite	cc
    521c:	2000      	movcc	r0, #0
    521e:	2001      	movcs	r0, #1
    5220:	4b0a      	ldr	r3, [pc, #40]	; (524c <sd_mmc_start_read_blocks+0x44>)
    5222:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    5224:	4622      	mov	r2, r4
    5226:	4631      	mov	r1, r6
    5228:	68a8      	ldr	r0, [r5, #8]
    522a:	4b09      	ldr	r3, [pc, #36]	; (5250 <sd_mmc_start_read_blocks+0x48>)
    522c:	4798      	blx	r3
    522e:	b918      	cbnz	r0, 5238 <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    5230:	2200      	movs	r2, #0
    5232:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    5234:	2005      	movs	r0, #5
    5236:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    5238:	4a02      	ldr	r2, [pc, #8]	; (5244 <sd_mmc_start_read_blocks+0x3c>)
    523a:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    523c:	1b1c      	subs	r4, r3, r4
    523e:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    5240:	2000      	movs	r0, #0
}
    5242:	bd70      	pop	{r4, r5, r6, pc}
    5244:	20000afc 	.word	0x20000afc
    5248:	000090c4 	.word	0x000090c4
    524c:	00002715 	.word	0x00002715
    5250:	000024c5 	.word	0x000024c5

00005254 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    5254:	b510      	push	{r4, lr}
    5256:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    5258:	4b16      	ldr	r3, [pc, #88]	; (52b4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    525a:	6898      	ldr	r0, [r3, #8]
    525c:	4b16      	ldr	r3, [pc, #88]	; (52b8 <sd_mmc_wait_end_of_read_blocks+0x64>)
    525e:	4798      	blx	r3
    5260:	b908      	cbnz	r0, 5266 <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    5262:	2005      	movs	r0, #5
    5264:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    5266:	b194      	cbz	r4, 528e <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    5268:	2200      	movs	r2, #0
    526a:	4b12      	ldr	r3, [pc, #72]	; (52b4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    526c:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    526e:	4b11      	ldr	r3, [pc, #68]	; (52b4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5270:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5272:	2b01      	cmp	r3, #1
    5274:	d011      	beq.n	529a <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    5276:	2200      	movs	r2, #0
    5278:	f243 110c 	movw	r1, #12556	; 0x310c
    527c:	4b0d      	ldr	r3, [pc, #52]	; (52b4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    527e:	6898      	ldr	r0, [r3, #8]
    5280:	4b0e      	ldr	r3, [pc, #56]	; (52bc <sd_mmc_wait_end_of_read_blocks+0x68>)
    5282:	4798      	blx	r3
    5284:	b168      	cbz	r0, 52a2 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    5286:	4b0e      	ldr	r3, [pc, #56]	; (52c0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    5288:	4798      	blx	r3
	return SD_MMC_OK;
    528a:	2000      	movs	r0, #0
    528c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    528e:	4b09      	ldr	r3, [pc, #36]	; (52b4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5290:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5292:	2b00      	cmp	r3, #0
    5294:	d0eb      	beq.n	526e <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    5296:	2000      	movs	r0, #0
}
    5298:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    529a:	4b09      	ldr	r3, [pc, #36]	; (52c0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    529c:	4798      	blx	r3
		return SD_MMC_OK;
    529e:	2000      	movs	r0, #0
    52a0:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    52a2:	2200      	movs	r2, #0
    52a4:	f243 110c 	movw	r1, #12556	; 0x310c
    52a8:	4b02      	ldr	r3, [pc, #8]	; (52b4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    52aa:	6898      	ldr	r0, [r3, #8]
    52ac:	4b03      	ldr	r3, [pc, #12]	; (52bc <sd_mmc_wait_end_of_read_blocks+0x68>)
    52ae:	4798      	blx	r3
    52b0:	e7e9      	b.n	5286 <sd_mmc_wait_end_of_read_blocks+0x32>
    52b2:	bf00      	nop
    52b4:	20000afc 	.word	0x20000afc
    52b8:	0000252d 	.word	0x0000252d
    52bc:	000023f9 	.word	0x000023f9
    52c0:	000049ed 	.word	0x000049ed

000052c4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    52c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52c6:	b083      	sub	sp, #12
    52c8:	4607      	mov	r7, r0
    52ca:	460e      	mov	r6, r1
    52cc:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    52ce:	4b1c      	ldr	r3, [pc, #112]	; (5340 <sd_mmc_init_write_blocks+0x7c>)
    52d0:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    52d2:	4604      	mov	r4, r0
    52d4:	b110      	cbz	r0, 52dc <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    52d6:	4620      	mov	r0, r4
    52d8:	b003      	add	sp, #12
    52da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    52dc:	4638      	mov	r0, r7
    52de:	4b19      	ldr	r3, [pc, #100]	; (5344 <sd_mmc_init_write_blocks+0x80>)
    52e0:	4798      	blx	r3
    52e2:	b9d0      	cbnz	r0, 531a <sd_mmc_init_write_blocks+0x56>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    52e4:	4b18      	ldr	r3, [pc, #96]	; (5348 <sd_mmc_init_write_blocks+0x84>)
    52e6:	4919      	ldr	r1, [pc, #100]	; (534c <sd_mmc_init_write_blocks+0x88>)
    52e8:	2d01      	cmp	r5, #1
    52ea:	bf98      	it	ls
    52ec:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    52ee:	4b18      	ldr	r3, [pc, #96]	; (5350 <sd_mmc_init_write_blocks+0x8c>)
    52f0:	681b      	ldr	r3, [r3, #0]
    52f2:	7adb      	ldrb	r3, [r3, #11]
    52f4:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
    52f8:	bf08      	it	eq
    52fa:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    52fc:	4b14      	ldr	r3, [pc, #80]	; (5350 <sd_mmc_init_write_blocks+0x8c>)
    52fe:	6898      	ldr	r0, [r3, #8]
    5300:	2301      	movs	r3, #1
    5302:	9301      	str	r3, [sp, #4]
    5304:	9500      	str	r5, [sp, #0]
    5306:	f44f 7300 	mov.w	r3, #512	; 0x200
    530a:	4632      	mov	r2, r6
    530c:	4e11      	ldr	r6, [pc, #68]	; (5354 <sd_mmc_init_write_blocks+0x90>)
    530e:	47b0      	blx	r6
    5310:	b938      	cbnz	r0, 5322 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    5312:	4b11      	ldr	r3, [pc, #68]	; (5358 <sd_mmc_init_write_blocks+0x94>)
    5314:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5316:	2405      	movs	r4, #5
    5318:	e7dd      	b.n	52d6 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    531a:	4b0f      	ldr	r3, [pc, #60]	; (5358 <sd_mmc_init_write_blocks+0x94>)
    531c:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    531e:	2407      	movs	r4, #7
    5320:	e7d9      	b.n	52d6 <sd_mmc_init_write_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    5322:	4b0b      	ldr	r3, [pc, #44]	; (5350 <sd_mmc_init_write_blocks+0x8c>)
    5324:	6898      	ldr	r0, [r3, #8]
    5326:	4b0d      	ldr	r3, [pc, #52]	; (535c <sd_mmc_init_write_blocks+0x98>)
    5328:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    532a:	4b0d      	ldr	r3, [pc, #52]	; (5360 <sd_mmc_init_write_blocks+0x9c>)
    532c:	4003      	ands	r3, r0
    532e:	b91b      	cbnz	r3, 5338 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    5330:	4b07      	ldr	r3, [pc, #28]	; (5350 <sd_mmc_init_write_blocks+0x8c>)
    5332:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    5334:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    5336:	e7ce      	b.n	52d6 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    5338:	4b07      	ldr	r3, [pc, #28]	; (5358 <sd_mmc_init_write_blocks+0x94>)
    533a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    533c:	2405      	movs	r4, #5
    533e:	e7ca      	b.n	52d6 <sd_mmc_init_write_blocks+0x12>
    5340:	00004871 	.word	0x00004871
    5344:	000050b9 	.word	0x000050b9
    5348:	00089118 	.word	0x00089118
    534c:	00109119 	.word	0x00109119
    5350:	20000afc 	.word	0x20000afc
    5354:	00002481 	.word	0x00002481
    5358:	000049ed 	.word	0x000049ed
    535c:	00002429 	.word	0x00002429
    5360:	e4580000 	.word	0xe4580000

00005364 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    5364:	b570      	push	{r4, r5, r6, lr}
    5366:	4606      	mov	r6, r0
    5368:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    536a:	4d0d      	ldr	r5, [pc, #52]	; (53a0 <sd_mmc_start_write_blocks+0x3c>)
    536c:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    536e:	f240 52fa 	movw	r2, #1530	; 0x5fa
    5372:	490c      	ldr	r1, [pc, #48]	; (53a4 <sd_mmc_start_write_blocks+0x40>)
    5374:	42a0      	cmp	r0, r4
    5376:	bf34      	ite	cc
    5378:	2000      	movcc	r0, #0
    537a:	2001      	movcs	r0, #1
    537c:	4b0a      	ldr	r3, [pc, #40]	; (53a8 <sd_mmc_start_write_blocks+0x44>)
    537e:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    5380:	4622      	mov	r2, r4
    5382:	4631      	mov	r1, r6
    5384:	68a8      	ldr	r0, [r5, #8]
    5386:	4b09      	ldr	r3, [pc, #36]	; (53ac <sd_mmc_start_write_blocks+0x48>)
    5388:	4798      	blx	r3
    538a:	b918      	cbnz	r0, 5394 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    538c:	2200      	movs	r2, #0
    538e:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    5390:	2005      	movs	r0, #5
    5392:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    5394:	4a02      	ldr	r2, [pc, #8]	; (53a0 <sd_mmc_start_write_blocks+0x3c>)
    5396:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    5398:	1b1c      	subs	r4, r3, r4
    539a:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    539c:	2000      	movs	r0, #0
}
    539e:	bd70      	pop	{r4, r5, r6, pc}
    53a0:	20000afc 	.word	0x20000afc
    53a4:	000090c4 	.word	0x000090c4
    53a8:	00002715 	.word	0x00002715
    53ac:	000024f9 	.word	0x000024f9

000053b0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    53b0:	b510      	push	{r4, lr}
    53b2:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    53b4:	4b14      	ldr	r3, [pc, #80]	; (5408 <sd_mmc_wait_end_of_write_blocks+0x58>)
    53b6:	6898      	ldr	r0, [r3, #8]
    53b8:	4b14      	ldr	r3, [pc, #80]	; (540c <sd_mmc_wait_end_of_write_blocks+0x5c>)
    53ba:	4798      	blx	r3
    53bc:	b908      	cbnz	r0, 53c2 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    53be:	2005      	movs	r0, #5
    53c0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    53c2:	b194      	cbz	r4, 53ea <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    53c4:	2200      	movs	r2, #0
    53c6:	4b10      	ldr	r3, [pc, #64]	; (5408 <sd_mmc_wait_end_of_write_blocks+0x58>)
    53c8:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    53ca:	4b0f      	ldr	r3, [pc, #60]	; (5408 <sd_mmc_wait_end_of_write_blocks+0x58>)
    53cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    53ce:	2b01      	cmp	r3, #1
    53d0:	d011      	beq.n	53f6 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    53d2:	2200      	movs	r2, #0
    53d4:	f243 110c 	movw	r1, #12556	; 0x310c
    53d8:	4b0b      	ldr	r3, [pc, #44]	; (5408 <sd_mmc_wait_end_of_write_blocks+0x58>)
    53da:	6898      	ldr	r0, [r3, #8]
    53dc:	4b0c      	ldr	r3, [pc, #48]	; (5410 <sd_mmc_wait_end_of_write_blocks+0x60>)
    53de:	4798      	blx	r3
    53e0:	b968      	cbnz	r0, 53fe <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    53e2:	4b0c      	ldr	r3, [pc, #48]	; (5414 <sd_mmc_wait_end_of_write_blocks+0x64>)
    53e4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    53e6:	2005      	movs	r0, #5
    53e8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    53ea:	4b07      	ldr	r3, [pc, #28]	; (5408 <sd_mmc_wait_end_of_write_blocks+0x58>)
    53ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    53ee:	2b00      	cmp	r3, #0
    53f0:	d0eb      	beq.n	53ca <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    53f2:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    53f4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    53f6:	4b07      	ldr	r3, [pc, #28]	; (5414 <sd_mmc_wait_end_of_write_blocks+0x64>)
    53f8:	4798      	blx	r3
		return SD_MMC_OK;
    53fa:	2000      	movs	r0, #0
    53fc:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    53fe:	4b05      	ldr	r3, [pc, #20]	; (5414 <sd_mmc_wait_end_of_write_blocks+0x64>)
    5400:	4798      	blx	r3
	return SD_MMC_OK;
    5402:	2000      	movs	r0, #0
    5404:	bd10      	pop	{r4, pc}
    5406:	bf00      	nop
    5408:	20000afc 	.word	0x20000afc
    540c:	00002555 	.word	0x00002555
    5410:	000023f9 	.word	0x000023f9
    5414:	000049ed 	.word	0x000049ed

00005418 <SERVO_PWM_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    5418:	4a36      	ldr	r2, [pc, #216]	; (54f4 <SERVO_PWM_init+0xdc>)
    541a:	6953      	ldr	r3, [r2, #20]
    541c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5420:	6153      	str	r3, [r2, #20]
    5422:	2240      	movs	r2, #64	; 0x40
    5424:	4b34      	ldr	r3, [pc, #208]	; (54f8 <SERVO_PWM_init+0xe0>)
    5426:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    542a:	4a34      	ldr	r2, [pc, #208]	; (54fc <SERVO_PWM_init+0xe4>)
    542c:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    5430:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    5434:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5438:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    543c:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    5440:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    5444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    5448:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    544c:	4b2c      	ldr	r3, [pc, #176]	; (5500 <SERVO_PWM_init+0xe8>)
    544e:	691b      	ldr	r3, [r3, #16]
void SERVO_PWM_init(void)
{
	SERVO_PWM_CLOCK_init();
	SERVO_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    5450:	f013 0f01 	tst.w	r3, #1
    5454:	d11f      	bne.n	5496 <SERVO_PWM_init+0x7e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5456:	4a2a      	ldr	r2, [pc, #168]	; (5500 <SERVO_PWM_init+0xe8>)
    5458:	6913      	ldr	r3, [r2, #16]
    545a:	f013 0f03 	tst.w	r3, #3
    545e:	d1fb      	bne.n	5458 <SERVO_PWM_init+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5460:	4b27      	ldr	r3, [pc, #156]	; (5500 <SERVO_PWM_init+0xe8>)
    5462:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    5464:	f013 0f02 	tst.w	r3, #2
    5468:	d00d      	beq.n	5486 <SERVO_PWM_init+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    546a:	4a25      	ldr	r2, [pc, #148]	; (5500 <SERVO_PWM_init+0xe8>)
    546c:	6813      	ldr	r3, [r2, #0]
    546e:	f023 0302 	bic.w	r3, r3, #2
    5472:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5474:	6913      	ldr	r3, [r2, #16]
    5476:	f013 0f03 	tst.w	r3, #3
    547a:	d1fb      	bne.n	5474 <SERVO_PWM_init+0x5c>
    547c:	4a20      	ldr	r2, [pc, #128]	; (5500 <SERVO_PWM_init+0xe8>)
    547e:	6913      	ldr	r3, [r2, #16]
    5480:	f013 0f02 	tst.w	r3, #2
    5484:	d1fb      	bne.n	547e <SERVO_PWM_init+0x66>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    5486:	2201      	movs	r2, #1
    5488:	4b1d      	ldr	r3, [pc, #116]	; (5500 <SERVO_PWM_init+0xe8>)
    548a:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    548c:	461a      	mov	r2, r3
    548e:	6913      	ldr	r3, [r2, #16]
    5490:	f013 0f03 	tst.w	r3, #3
    5494:	d1fb      	bne.n	548e <SERVO_PWM_init+0x76>
    5496:	4a1a      	ldr	r2, [pc, #104]	; (5500 <SERVO_PWM_init+0xe8>)
    5498:	6913      	ldr	r3, [r2, #16]
    549a:	f013 0f01 	tst.w	r3, #1
    549e:	d1fb      	bne.n	5498 <SERVO_PWM_init+0x80>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    54a0:	4a18      	ldr	r2, [pc, #96]	; (5504 <SERVO_PWM_init+0xec>)
    54a2:	4b17      	ldr	r3, [pc, #92]	; (5500 <SERVO_PWM_init+0xe8>)
    54a4:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    54a6:	461a      	mov	r2, r3
    54a8:	6913      	ldr	r3, [r2, #16]
    54aa:	f013 0f03 	tst.w	r3, #3
    54ae:	d1fb      	bne.n	54a8 <SERVO_PWM_init+0x90>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    54b0:	4b13      	ldr	r3, [pc, #76]	; (5500 <SERVO_PWM_init+0xe8>)
    54b2:	2200      	movs	r2, #0
    54b4:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    54b6:	22ff      	movs	r2, #255	; 0xff
    54b8:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    54ba:	2203      	movs	r2, #3
    54bc:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    54be:	f640 02e1 	movw	r2, #2273	; 0x8e1
    54c2:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    54c4:	461a      	mov	r2, r3
    54c6:	6913      	ldr	r3, [r2, #16]
    54c8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    54cc:	d1fb      	bne.n	54c6 <SERVO_PWM_init+0xae>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    54ce:	f240 1277 	movw	r2, #375	; 0x177
    54d2:	4b0b      	ldr	r3, [pc, #44]	; (5500 <SERVO_PWM_init+0xe8>)
    54d4:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    54d6:	461a      	mov	r2, r3
    54d8:	6913      	ldr	r3, [r2, #16]
    54da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    54de:	d1fb      	bne.n	54d8 <SERVO_PWM_init+0xc0>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    54e0:	4a07      	ldr	r2, [pc, #28]	; (5500 <SERVO_PWM_init+0xe8>)
    54e2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    54e4:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    54e8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    54ea:	6913      	ldr	r3, [r2, #16]
    54ec:	f013 0f03 	tst.w	r3, #3
    54f0:	d1fb      	bne.n	54ea <SERVO_PWM_init+0xd2>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    54f2:	4770      	bx	lr
    54f4:	40000800 	.word	0x40000800
    54f8:	40001c00 	.word	0x40001c00
    54fc:	41008000 	.word	0x41008000
    5500:	40003c00 	.word	0x40003c00
    5504:	12000410 	.word	0x12000410

00005508 <SERVO_set_angle>:
  * Sets servo position to given angle
  * 
  * @param int : angle to set servo to
  */ 
void SERVO_set_angle(int angle)
{
    5508:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    550a:	4b2b      	ldr	r3, [pc, #172]	; (55b8 <SERVO_set_angle+0xb0>)
    550c:	4798      	blx	r3
    550e:	4c2b      	ldr	r4, [pc, #172]	; (55bc <SERVO_set_angle+0xb4>)
    5510:	2200      	movs	r2, #0
    5512:	4b2b      	ldr	r3, [pc, #172]	; (55c0 <SERVO_set_angle+0xb8>)
    5514:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    5516:	4d2b      	ldr	r5, [pc, #172]	; (55c4 <SERVO_set_angle+0xbc>)
    5518:	2200      	movs	r2, #0
    551a:	4b2b      	ldr	r3, [pc, #172]	; (55c8 <SERVO_set_angle+0xc0>)
    551c:	47a8      	blx	r5
    551e:	2200      	movs	r2, #0
    5520:	4b2a      	ldr	r3, [pc, #168]	; (55cc <SERVO_set_angle+0xc4>)
    5522:	4e2b      	ldr	r6, [pc, #172]	; (55d0 <SERVO_set_angle+0xc8>)
    5524:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    5526:	a320      	add	r3, pc, #128	; (adr r3, 55a8 <SERVO_set_angle+0xa0>)
    5528:	e9d3 2300 	ldrd	r2, r3, [r3]
    552c:	47a8      	blx	r5
    552e:	a320      	add	r3, pc, #128	; (adr r3, 55b0 <SERVO_set_angle+0xa8>)
    5530:	e9d3 2300 	ldrd	r2, r3, [r3]
    5534:	47a0      	blx	r4
    5536:	4b27      	ldr	r3, [pc, #156]	; (55d4 <SERVO_set_angle+0xcc>)
    5538:	4798      	blx	r3
    553a:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    553c:	4b26      	ldr	r3, [pc, #152]	; (55d8 <SERVO_set_angle+0xd0>)
    553e:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    5540:	f013 0f01 	tst.w	r3, #1
    5544:	d117      	bne.n	5576 <SERVO_set_angle+0x6e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5546:	4a24      	ldr	r2, [pc, #144]	; (55d8 <SERVO_set_angle+0xd0>)
    5548:	6913      	ldr	r3, [r2, #16]
    554a:	f013 0f03 	tst.w	r3, #3
    554e:	d1fb      	bne.n	5548 <SERVO_set_angle+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5550:	4b21      	ldr	r3, [pc, #132]	; (55d8 <SERVO_set_angle+0xd0>)
    5552:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    5554:	f013 0f02 	tst.w	r3, #2
    5558:	d00d      	beq.n	5576 <SERVO_set_angle+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    555a:	4a1f      	ldr	r2, [pc, #124]	; (55d8 <SERVO_set_angle+0xd0>)
    555c:	6813      	ldr	r3, [r2, #0]
    555e:	f023 0302 	bic.w	r3, r3, #2
    5562:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5564:	6913      	ldr	r3, [r2, #16]
    5566:	f013 0f03 	tst.w	r3, #3
    556a:	d1fb      	bne.n	5564 <SERVO_set_angle+0x5c>
    556c:	4a1a      	ldr	r2, [pc, #104]	; (55d8 <SERVO_set_angle+0xd0>)
    556e:	6913      	ldr	r3, [r2, #16]
    5570:	f013 0f02 	tst.w	r3, #2
    5574:	d1fb      	bne.n	556e <SERVO_set_angle+0x66>
    5576:	4a18      	ldr	r2, [pc, #96]	; (55d8 <SERVO_set_angle+0xd0>)
    5578:	6913      	ldr	r3, [r2, #16]
    557a:	f013 0f01 	tst.w	r3, #1
    557e:	d1fb      	bne.n	5578 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5580:	4b15      	ldr	r3, [pc, #84]	; (55d8 <SERVO_set_angle+0xd0>)
    5582:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5584:	461a      	mov	r2, r3
    5586:	6913      	ldr	r3, [r2, #16]
    5588:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    558c:	d1fb      	bne.n	5586 <SERVO_set_angle+0x7e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    558e:	4a12      	ldr	r2, [pc, #72]	; (55d8 <SERVO_set_angle+0xd0>)
    5590:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    5592:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    5596:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5598:	6913      	ldr	r3, [r2, #16]
    559a:	f013 0f03 	tst.w	r3, #3
    559e:	d1fb      	bne.n	5598 <SERVO_set_angle+0x90>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
}
    55a0:	bd70      	pop	{r4, r5, r6, pc}
    55a2:	bf00      	nop
    55a4:	f3af 8000 	nop.w
    55a8:	00000000 	.word	0x00000000
    55ac:	40a1c200 	.word	0x40a1c200
    55b0:	00000000 	.word	0x00000000
    55b4:	40a7ac00 	.word	0x40a7ac00
    55b8:	00005a39 	.word	0x00005a39
    55bc:	00005d59 	.word	0x00005d59
    55c0:	40668000 	.word	0x40668000
    55c4:	00005b05 	.word	0x00005b05
    55c8:	409f4000 	.word	0x409f4000
    55cc:	407f4000 	.word	0x407f4000
    55d0:	000057a1 	.word	0x000057a1
    55d4:	00005f29 	.word	0x00005f29
    55d8:	40003c00 	.word	0x40003c00

000055dc <SERVO_menu>:
/**
  * Menu for servo command options in order to test angle adjustments with
  * servo
  */ 
void SERVO_menu(void)
{
    55dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55de:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
    55e0:	2300      	movs	r3, #0
    55e2:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    55e4:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    55e6:	4e1d      	ldr	r6, [pc, #116]	; (565c <SERVO_menu+0x80>)
    55e8:	4d1d      	ldr	r5, [pc, #116]	; (5660 <SERVO_menu+0x84>)
    55ea:	4c1e      	ldr	r4, [pc, #120]	; (5664 <SERVO_menu+0x88>)
    55ec:	e004      	b.n	55f8 <SERVO_menu+0x1c>
		
		if (scanf("%"PRIu32"", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    55ee:	4b1e      	ldr	r3, [pc, #120]	; (5668 <SERVO_menu+0x8c>)
    55f0:	681b      	ldr	r3, [r3, #0]
    55f2:	6858      	ldr	r0, [r3, #4]
    55f4:	4b1d      	ldr	r3, [pc, #116]	; (566c <SERVO_menu+0x90>)
    55f6:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    55f8:	4631      	mov	r1, r6
    55fa:	4628      	mov	r0, r5
    55fc:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
    55fe:	a901      	add	r1, sp, #4
    5600:	481b      	ldr	r0, [pc, #108]	; (5670 <SERVO_menu+0x94>)
    5602:	4b1c      	ldr	r3, [pc, #112]	; (5674 <SERVO_menu+0x98>)
    5604:	4798      	blx	r3
    5606:	2800      	cmp	r0, #0
    5608:	d0f1      	beq.n	55ee <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    560a:	9901      	ldr	r1, [sp, #4]
    560c:	481a      	ldr	r0, [pc, #104]	; (5678 <SERVO_menu+0x9c>)
    560e:	47a0      	blx	r4
		
		switch (user_selection) {
    5610:	9b01      	ldr	r3, [sp, #4]
    5612:	2b01      	cmp	r3, #1
    5614:	d005      	beq.n	5622 <SERVO_menu+0x46>
    5616:	2b02      	cmp	r3, #2
    5618:	d008      	beq.n	562c <SERVO_menu+0x50>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
				SERVO_set_angle(servo_angle);
				break;
			
			default:
				printf("\r\nInvalid option\r\n");
    561a:	4818      	ldr	r0, [pc, #96]	; (567c <SERVO_menu+0xa0>)
    561c:	4b18      	ldr	r3, [pc, #96]	; (5680 <SERVO_menu+0xa4>)
    561e:	4798      	blx	r3
				break;
    5620:	e7ea      	b.n	55f8 <SERVO_menu+0x1c>
				printf("\r\nReturning to main menu\r\n");
    5622:	4818      	ldr	r0, [pc, #96]	; (5684 <SERVO_menu+0xa8>)
    5624:	4b16      	ldr	r3, [pc, #88]	; (5680 <SERVO_menu+0xa4>)
    5626:	4798      	blx	r3
		}
	}
    5628:	b003      	add	sp, #12
    562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nEnter angle >> ");
    562c:	4816      	ldr	r0, [pc, #88]	; (5688 <SERVO_menu+0xac>)
    562e:	47a0      	blx	r4
				scanf("%"PRIu32"", &servo_angle);
    5630:	4f0f      	ldr	r7, [pc, #60]	; (5670 <SERVO_menu+0x94>)
    5632:	4669      	mov	r1, sp
    5634:	4638      	mov	r0, r7
    5636:	4b0f      	ldr	r3, [pc, #60]	; (5674 <SERVO_menu+0x98>)
    5638:	4798      	blx	r3
				printf("%"PRIu32"", servo_angle);
    563a:	9900      	ldr	r1, [sp, #0]
    563c:	4638      	mov	r0, r7
    563e:	47a0      	blx	r4
				if (servo_angle < 0 || servo_angle > 180) {
    5640:	9900      	ldr	r1, [sp, #0]
    5642:	29b4      	cmp	r1, #180	; 0xb4
    5644:	d903      	bls.n	564e <SERVO_menu+0x72>
					printf("\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n");
    5646:	4811      	ldr	r0, [pc, #68]	; (568c <SERVO_menu+0xb0>)
    5648:	4b0d      	ldr	r3, [pc, #52]	; (5680 <SERVO_menu+0xa4>)
    564a:	4798      	blx	r3
					break;
    564c:	e7d4      	b.n	55f8 <SERVO_menu+0x1c>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
    564e:	4810      	ldr	r0, [pc, #64]	; (5690 <SERVO_menu+0xb4>)
    5650:	47a0      	blx	r4
				SERVO_set_angle(servo_angle);
    5652:	9800      	ldr	r0, [sp, #0]
    5654:	4b0f      	ldr	r3, [pc, #60]	; (5694 <SERVO_menu+0xb8>)
    5656:	4798      	blx	r3
				break;
    5658:	e7ce      	b.n	55f8 <SERVO_menu+0x1c>
    565a:	bf00      	nop
    565c:	2000028c 	.word	0x2000028c
    5660:	00008584 	.word	0x00008584
    5664:	0000677d 	.word	0x0000677d
    5668:	200002dc 	.word	0x200002dc
    566c:	000063dd 	.word	0x000063dd
    5670:	00008530 	.word	0x00008530
    5674:	00006895 	.word	0x00006895
    5678:	00008588 	.word	0x00008588
    567c:	000085c0 	.word	0x000085c0
    5680:	00006865 	.word	0x00006865
    5684:	000085a4 	.word	0x000085a4
    5688:	000090d8 	.word	0x000090d8
    568c:	000090ec 	.word	0x000090ec
    5690:	00009128 	.word	0x00009128
    5694:	00005509 	.word	0x00005509

00005698 <start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void start_init(void)
{
    5698:	b508      	push	{r3, lr}
	system_init();
    569a:	4b04      	ldr	r3, [pc, #16]	; (56ac <start_init+0x14>)
    569c:	4798      	blx	r3
	stdio_redirect_init();
    569e:	4b04      	ldr	r3, [pc, #16]	; (56b0 <start_init+0x18>)
    56a0:	4798      	blx	r3
	SDMMC_init();
    56a2:	4b04      	ldr	r3, [pc, #16]	; (56b4 <start_init+0x1c>)
    56a4:	4798      	blx	r3
	EEPROM_init();
    56a6:	4b04      	ldr	r3, [pc, #16]	; (56b8 <start_init+0x20>)
    56a8:	4798      	blx	r3
    56aa:	bd08      	pop	{r3, pc}
    56ac:	0000088d 	.word	0x0000088d
    56b0:	000056bd 	.word	0x000056bd
    56b4:	0000350d 	.word	0x0000350d
    56b8:	000009b5 	.word	0x000009b5

000056bc <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    56bc:	b510      	push	{r4, lr}
	usart_sync_enable(&STDIO_IO);
    56be:	4c04      	ldr	r4, [pc, #16]	; (56d0 <stdio_redirect_init+0x14>)
    56c0:	4620      	mov	r0, r4
    56c2:	4b04      	ldr	r3, [pc, #16]	; (56d4 <stdio_redirect_init+0x18>)
    56c4:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    56c6:	4620      	mov	r0, r4
    56c8:	4b03      	ldr	r3, [pc, #12]	; (56d8 <stdio_redirect_init+0x1c>)
    56ca:	4798      	blx	r3
    56cc:	bd10      	pop	{r4, pc}
    56ce:	bf00      	nop
    56d0:	20000b48 	.word	0x20000b48
    56d4:	00002699 	.word	0x00002699
    56d8:	00005721 	.word	0x00005721

000056dc <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    56dc:	b940      	cbnz	r0, 56f0 <_read+0x14>
{
    56de:	b508      	push	{r3, lr}
    56e0:	460b      	mov	r3, r1
    56e2:	4611      	mov	r1, r2
    56e4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    56e6:	4b04      	ldr	r3, [pc, #16]	; (56f8 <_read+0x1c>)
    56e8:	4798      	blx	r3
    56ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    56ee:	bd08      	pop	{r3, pc}
		return -1;
    56f0:	f04f 30ff 	mov.w	r0, #4294967295
    56f4:	4770      	bx	lr
    56f6:	bf00      	nop
    56f8:	0000574d 	.word	0x0000574d

000056fc <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    56fc:	3801      	subs	r0, #1
    56fe:	2802      	cmp	r0, #2
    5700:	d808      	bhi.n	5714 <_write+0x18>
{
    5702:	b508      	push	{r3, lr}
    5704:	460b      	mov	r3, r1
    5706:	4611      	mov	r1, r2
    5708:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    570a:	4b04      	ldr	r3, [pc, #16]	; (571c <_write+0x20>)
    570c:	4798      	blx	r3
    570e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5712:	bd08      	pop	{r3, pc}
		return -1;
    5714:	f04f 30ff 	mov.w	r0, #4294967295
    5718:	4770      	bx	lr
    571a:	bf00      	nop
    571c:	00005771 	.word	0x00005771

00005720 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    5720:	b570      	push	{r4, r5, r6, lr}
    5722:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    5724:	4d06      	ldr	r5, [pc, #24]	; (5740 <stdio_io_init+0x20>)
    5726:	682b      	ldr	r3, [r5, #0]
    5728:	2100      	movs	r1, #0
    572a:	6898      	ldr	r0, [r3, #8]
    572c:	4c05      	ldr	r4, [pc, #20]	; (5744 <stdio_io_init+0x24>)
    572e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    5730:	682b      	ldr	r3, [r5, #0]
    5732:	2100      	movs	r1, #0
    5734:	6858      	ldr	r0, [r3, #4]
    5736:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    5738:	4b03      	ldr	r3, [pc, #12]	; (5748 <stdio_io_init+0x28>)
    573a:	601e      	str	r6, [r3, #0]
    573c:	bd70      	pop	{r4, r5, r6, pc}
    573e:	bf00      	nop
    5740:	200002dc 	.word	0x200002dc
    5744:	000068c5 	.word	0x000068c5
    5748:	20000b38 	.word	0x20000b38

0000574c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    574c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    574e:	4b06      	ldr	r3, [pc, #24]	; (5768 <stdio_io_read+0x1c>)
    5750:	681b      	ldr	r3, [r3, #0]
    5752:	b133      	cbz	r3, 5762 <stdio_io_read+0x16>
    5754:	460a      	mov	r2, r1
    5756:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    5758:	b292      	uxth	r2, r2
    575a:	4618      	mov	r0, r3
    575c:	4b03      	ldr	r3, [pc, #12]	; (576c <stdio_io_read+0x20>)
    575e:	4798      	blx	r3
    5760:	bd08      	pop	{r3, pc}
		return 0;
    5762:	2000      	movs	r0, #0
}
    5764:	bd08      	pop	{r3, pc}
    5766:	bf00      	nop
    5768:	20000b38 	.word	0x20000b38
    576c:	000022b5 	.word	0x000022b5

00005770 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    5770:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5772:	4b06      	ldr	r3, [pc, #24]	; (578c <stdio_io_write+0x1c>)
    5774:	681b      	ldr	r3, [r3, #0]
    5776:	b133      	cbz	r3, 5786 <stdio_io_write+0x16>
    5778:	460a      	mov	r2, r1
    577a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    577c:	b292      	uxth	r2, r2
    577e:	4618      	mov	r0, r3
    5780:	4b03      	ldr	r3, [pc, #12]	; (5790 <stdio_io_write+0x20>)
    5782:	4798      	blx	r3
    5784:	bd08      	pop	{r3, pc}
		return 0;
    5786:	2000      	movs	r0, #0
}
    5788:	bd08      	pop	{r3, pc}
    578a:	bf00      	nop
    578c:	20000b38 	.word	0x20000b38
    5790:	00002285 	.word	0x00002285

00005794 <__aeabi_drsub>:
    5794:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    5798:	e002      	b.n	57a0 <__adddf3>
    579a:	bf00      	nop

0000579c <__aeabi_dsub>:
    579c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000057a0 <__adddf3>:
    57a0:	b530      	push	{r4, r5, lr}
    57a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    57a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    57aa:	ea94 0f05 	teq	r4, r5
    57ae:	bf08      	it	eq
    57b0:	ea90 0f02 	teqeq	r0, r2
    57b4:	bf1f      	itttt	ne
    57b6:	ea54 0c00 	orrsne.w	ip, r4, r0
    57ba:	ea55 0c02 	orrsne.w	ip, r5, r2
    57be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    57c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    57c6:	f000 80e2 	beq.w	598e <__adddf3+0x1ee>
    57ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
    57ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    57d2:	bfb8      	it	lt
    57d4:	426d      	neglt	r5, r5
    57d6:	dd0c      	ble.n	57f2 <__adddf3+0x52>
    57d8:	442c      	add	r4, r5
    57da:	ea80 0202 	eor.w	r2, r0, r2
    57de:	ea81 0303 	eor.w	r3, r1, r3
    57e2:	ea82 0000 	eor.w	r0, r2, r0
    57e6:	ea83 0101 	eor.w	r1, r3, r1
    57ea:	ea80 0202 	eor.w	r2, r0, r2
    57ee:	ea81 0303 	eor.w	r3, r1, r3
    57f2:	2d36      	cmp	r5, #54	; 0x36
    57f4:	bf88      	it	hi
    57f6:	bd30      	pophi	{r4, r5, pc}
    57f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    57fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5800:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    5804:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    5808:	d002      	beq.n	5810 <__adddf3+0x70>
    580a:	4240      	negs	r0, r0
    580c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5810:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    5814:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5818:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    581c:	d002      	beq.n	5824 <__adddf3+0x84>
    581e:	4252      	negs	r2, r2
    5820:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5824:	ea94 0f05 	teq	r4, r5
    5828:	f000 80a7 	beq.w	597a <__adddf3+0x1da>
    582c:	f1a4 0401 	sub.w	r4, r4, #1
    5830:	f1d5 0e20 	rsbs	lr, r5, #32
    5834:	db0d      	blt.n	5852 <__adddf3+0xb2>
    5836:	fa02 fc0e 	lsl.w	ip, r2, lr
    583a:	fa22 f205 	lsr.w	r2, r2, r5
    583e:	1880      	adds	r0, r0, r2
    5840:	f141 0100 	adc.w	r1, r1, #0
    5844:	fa03 f20e 	lsl.w	r2, r3, lr
    5848:	1880      	adds	r0, r0, r2
    584a:	fa43 f305 	asr.w	r3, r3, r5
    584e:	4159      	adcs	r1, r3
    5850:	e00e      	b.n	5870 <__adddf3+0xd0>
    5852:	f1a5 0520 	sub.w	r5, r5, #32
    5856:	f10e 0e20 	add.w	lr, lr, #32
    585a:	2a01      	cmp	r2, #1
    585c:	fa03 fc0e 	lsl.w	ip, r3, lr
    5860:	bf28      	it	cs
    5862:	f04c 0c02 	orrcs.w	ip, ip, #2
    5866:	fa43 f305 	asr.w	r3, r3, r5
    586a:	18c0      	adds	r0, r0, r3
    586c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    5870:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5874:	d507      	bpl.n	5886 <__adddf3+0xe6>
    5876:	f04f 0e00 	mov.w	lr, #0
    587a:	f1dc 0c00 	rsbs	ip, ip, #0
    587e:	eb7e 0000 	sbcs.w	r0, lr, r0
    5882:	eb6e 0101 	sbc.w	r1, lr, r1
    5886:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    588a:	d31b      	bcc.n	58c4 <__adddf3+0x124>
    588c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    5890:	d30c      	bcc.n	58ac <__adddf3+0x10c>
    5892:	0849      	lsrs	r1, r1, #1
    5894:	ea5f 0030 	movs.w	r0, r0, rrx
    5898:	ea4f 0c3c 	mov.w	ip, ip, rrx
    589c:	f104 0401 	add.w	r4, r4, #1
    58a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    58a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    58a8:	f080 809a 	bcs.w	59e0 <__adddf3+0x240>
    58ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    58b0:	bf08      	it	eq
    58b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    58b6:	f150 0000 	adcs.w	r0, r0, #0
    58ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    58be:	ea41 0105 	orr.w	r1, r1, r5
    58c2:	bd30      	pop	{r4, r5, pc}
    58c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    58c8:	4140      	adcs	r0, r0
    58ca:	eb41 0101 	adc.w	r1, r1, r1
    58ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    58d2:	f1a4 0401 	sub.w	r4, r4, #1
    58d6:	d1e9      	bne.n	58ac <__adddf3+0x10c>
    58d8:	f091 0f00 	teq	r1, #0
    58dc:	bf04      	itt	eq
    58de:	4601      	moveq	r1, r0
    58e0:	2000      	moveq	r0, #0
    58e2:	fab1 f381 	clz	r3, r1
    58e6:	bf08      	it	eq
    58e8:	3320      	addeq	r3, #32
    58ea:	f1a3 030b 	sub.w	r3, r3, #11
    58ee:	f1b3 0220 	subs.w	r2, r3, #32
    58f2:	da0c      	bge.n	590e <__adddf3+0x16e>
    58f4:	320c      	adds	r2, #12
    58f6:	dd08      	ble.n	590a <__adddf3+0x16a>
    58f8:	f102 0c14 	add.w	ip, r2, #20
    58fc:	f1c2 020c 	rsb	r2, r2, #12
    5900:	fa01 f00c 	lsl.w	r0, r1, ip
    5904:	fa21 f102 	lsr.w	r1, r1, r2
    5908:	e00c      	b.n	5924 <__adddf3+0x184>
    590a:	f102 0214 	add.w	r2, r2, #20
    590e:	bfd8      	it	le
    5910:	f1c2 0c20 	rsble	ip, r2, #32
    5914:	fa01 f102 	lsl.w	r1, r1, r2
    5918:	fa20 fc0c 	lsr.w	ip, r0, ip
    591c:	bfdc      	itt	le
    591e:	ea41 010c 	orrle.w	r1, r1, ip
    5922:	4090      	lslle	r0, r2
    5924:	1ae4      	subs	r4, r4, r3
    5926:	bfa2      	ittt	ge
    5928:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    592c:	4329      	orrge	r1, r5
    592e:	bd30      	popge	{r4, r5, pc}
    5930:	ea6f 0404 	mvn.w	r4, r4
    5934:	3c1f      	subs	r4, #31
    5936:	da1c      	bge.n	5972 <__adddf3+0x1d2>
    5938:	340c      	adds	r4, #12
    593a:	dc0e      	bgt.n	595a <__adddf3+0x1ba>
    593c:	f104 0414 	add.w	r4, r4, #20
    5940:	f1c4 0220 	rsb	r2, r4, #32
    5944:	fa20 f004 	lsr.w	r0, r0, r4
    5948:	fa01 f302 	lsl.w	r3, r1, r2
    594c:	ea40 0003 	orr.w	r0, r0, r3
    5950:	fa21 f304 	lsr.w	r3, r1, r4
    5954:	ea45 0103 	orr.w	r1, r5, r3
    5958:	bd30      	pop	{r4, r5, pc}
    595a:	f1c4 040c 	rsb	r4, r4, #12
    595e:	f1c4 0220 	rsb	r2, r4, #32
    5962:	fa20 f002 	lsr.w	r0, r0, r2
    5966:	fa01 f304 	lsl.w	r3, r1, r4
    596a:	ea40 0003 	orr.w	r0, r0, r3
    596e:	4629      	mov	r1, r5
    5970:	bd30      	pop	{r4, r5, pc}
    5972:	fa21 f004 	lsr.w	r0, r1, r4
    5976:	4629      	mov	r1, r5
    5978:	bd30      	pop	{r4, r5, pc}
    597a:	f094 0f00 	teq	r4, #0
    597e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    5982:	bf06      	itte	eq
    5984:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    5988:	3401      	addeq	r4, #1
    598a:	3d01      	subne	r5, #1
    598c:	e74e      	b.n	582c <__adddf3+0x8c>
    598e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5992:	bf18      	it	ne
    5994:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5998:	d029      	beq.n	59ee <__adddf3+0x24e>
    599a:	ea94 0f05 	teq	r4, r5
    599e:	bf08      	it	eq
    59a0:	ea90 0f02 	teqeq	r0, r2
    59a4:	d005      	beq.n	59b2 <__adddf3+0x212>
    59a6:	ea54 0c00 	orrs.w	ip, r4, r0
    59aa:	bf04      	itt	eq
    59ac:	4619      	moveq	r1, r3
    59ae:	4610      	moveq	r0, r2
    59b0:	bd30      	pop	{r4, r5, pc}
    59b2:	ea91 0f03 	teq	r1, r3
    59b6:	bf1e      	ittt	ne
    59b8:	2100      	movne	r1, #0
    59ba:	2000      	movne	r0, #0
    59bc:	bd30      	popne	{r4, r5, pc}
    59be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    59c2:	d105      	bne.n	59d0 <__adddf3+0x230>
    59c4:	0040      	lsls	r0, r0, #1
    59c6:	4149      	adcs	r1, r1
    59c8:	bf28      	it	cs
    59ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    59ce:	bd30      	pop	{r4, r5, pc}
    59d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    59d4:	bf3c      	itt	cc
    59d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    59da:	bd30      	popcc	{r4, r5, pc}
    59dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    59e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    59e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    59e8:	f04f 0000 	mov.w	r0, #0
    59ec:	bd30      	pop	{r4, r5, pc}
    59ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    59f2:	bf1a      	itte	ne
    59f4:	4619      	movne	r1, r3
    59f6:	4610      	movne	r0, r2
    59f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    59fc:	bf1c      	itt	ne
    59fe:	460b      	movne	r3, r1
    5a00:	4602      	movne	r2, r0
    5a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    5a06:	bf06      	itte	eq
    5a08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    5a0c:	ea91 0f03 	teqeq	r1, r3
    5a10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    5a14:	bd30      	pop	{r4, r5, pc}
    5a16:	bf00      	nop

00005a18 <__aeabi_ui2d>:
    5a18:	f090 0f00 	teq	r0, #0
    5a1c:	bf04      	itt	eq
    5a1e:	2100      	moveq	r1, #0
    5a20:	4770      	bxeq	lr
    5a22:	b530      	push	{r4, r5, lr}
    5a24:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5a28:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5a2c:	f04f 0500 	mov.w	r5, #0
    5a30:	f04f 0100 	mov.w	r1, #0
    5a34:	e750      	b.n	58d8 <__adddf3+0x138>
    5a36:	bf00      	nop

00005a38 <__aeabi_i2d>:
    5a38:	f090 0f00 	teq	r0, #0
    5a3c:	bf04      	itt	eq
    5a3e:	2100      	moveq	r1, #0
    5a40:	4770      	bxeq	lr
    5a42:	b530      	push	{r4, r5, lr}
    5a44:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5a48:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5a4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    5a50:	bf48      	it	mi
    5a52:	4240      	negmi	r0, r0
    5a54:	f04f 0100 	mov.w	r1, #0
    5a58:	e73e      	b.n	58d8 <__adddf3+0x138>
    5a5a:	bf00      	nop

00005a5c <__aeabi_f2d>:
    5a5c:	0042      	lsls	r2, r0, #1
    5a5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    5a62:	ea4f 0131 	mov.w	r1, r1, rrx
    5a66:	ea4f 7002 	mov.w	r0, r2, lsl #28
    5a6a:	bf1f      	itttt	ne
    5a6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    5a70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    5a74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    5a78:	4770      	bxne	lr
    5a7a:	f092 0f00 	teq	r2, #0
    5a7e:	bf14      	ite	ne
    5a80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    5a84:	4770      	bxeq	lr
    5a86:	b530      	push	{r4, r5, lr}
    5a88:	f44f 7460 	mov.w	r4, #896	; 0x380
    5a8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5a90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    5a94:	e720      	b.n	58d8 <__adddf3+0x138>
    5a96:	bf00      	nop

00005a98 <__aeabi_ul2d>:
    5a98:	ea50 0201 	orrs.w	r2, r0, r1
    5a9c:	bf08      	it	eq
    5a9e:	4770      	bxeq	lr
    5aa0:	b530      	push	{r4, r5, lr}
    5aa2:	f04f 0500 	mov.w	r5, #0
    5aa6:	e00a      	b.n	5abe <__aeabi_l2d+0x16>

00005aa8 <__aeabi_l2d>:
    5aa8:	ea50 0201 	orrs.w	r2, r0, r1
    5aac:	bf08      	it	eq
    5aae:	4770      	bxeq	lr
    5ab0:	b530      	push	{r4, r5, lr}
    5ab2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    5ab6:	d502      	bpl.n	5abe <__aeabi_l2d+0x16>
    5ab8:	4240      	negs	r0, r0
    5aba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5abe:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5ac2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5ac6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    5aca:	f43f aedc 	beq.w	5886 <__adddf3+0xe6>
    5ace:	f04f 0203 	mov.w	r2, #3
    5ad2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    5ad6:	bf18      	it	ne
    5ad8:	3203      	addne	r2, #3
    5ada:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    5ade:	bf18      	it	ne
    5ae0:	3203      	addne	r2, #3
    5ae2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    5ae6:	f1c2 0320 	rsb	r3, r2, #32
    5aea:	fa00 fc03 	lsl.w	ip, r0, r3
    5aee:	fa20 f002 	lsr.w	r0, r0, r2
    5af2:	fa01 fe03 	lsl.w	lr, r1, r3
    5af6:	ea40 000e 	orr.w	r0, r0, lr
    5afa:	fa21 f102 	lsr.w	r1, r1, r2
    5afe:	4414      	add	r4, r2
    5b00:	e6c1      	b.n	5886 <__adddf3+0xe6>
    5b02:	bf00      	nop

00005b04 <__aeabi_dmul>:
    5b04:	b570      	push	{r4, r5, r6, lr}
    5b06:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5b0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5b0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    5b12:	bf1d      	ittte	ne
    5b14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5b18:	ea94 0f0c 	teqne	r4, ip
    5b1c:	ea95 0f0c 	teqne	r5, ip
    5b20:	f000 f8de 	bleq	5ce0 <__aeabi_dmul+0x1dc>
    5b24:	442c      	add	r4, r5
    5b26:	ea81 0603 	eor.w	r6, r1, r3
    5b2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    5b2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    5b32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    5b36:	bf18      	it	ne
    5b38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    5b3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5b44:	d038      	beq.n	5bb8 <__aeabi_dmul+0xb4>
    5b46:	fba0 ce02 	umull	ip, lr, r0, r2
    5b4a:	f04f 0500 	mov.w	r5, #0
    5b4e:	fbe1 e502 	umlal	lr, r5, r1, r2
    5b52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    5b56:	fbe0 e503 	umlal	lr, r5, r0, r3
    5b5a:	f04f 0600 	mov.w	r6, #0
    5b5e:	fbe1 5603 	umlal	r5, r6, r1, r3
    5b62:	f09c 0f00 	teq	ip, #0
    5b66:	bf18      	it	ne
    5b68:	f04e 0e01 	orrne.w	lr, lr, #1
    5b6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    5b70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    5b74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    5b78:	d204      	bcs.n	5b84 <__aeabi_dmul+0x80>
    5b7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    5b7e:	416d      	adcs	r5, r5
    5b80:	eb46 0606 	adc.w	r6, r6, r6
    5b84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    5b88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    5b8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    5b90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    5b94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    5b98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5b9c:	bf88      	it	hi
    5b9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5ba2:	d81e      	bhi.n	5be2 <__aeabi_dmul+0xde>
    5ba4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    5ba8:	bf08      	it	eq
    5baa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    5bae:	f150 0000 	adcs.w	r0, r0, #0
    5bb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5bb6:	bd70      	pop	{r4, r5, r6, pc}
    5bb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    5bbc:	ea46 0101 	orr.w	r1, r6, r1
    5bc0:	ea40 0002 	orr.w	r0, r0, r2
    5bc4:	ea81 0103 	eor.w	r1, r1, r3
    5bc8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    5bcc:	bfc2      	ittt	gt
    5bce:	ebd4 050c 	rsbsgt	r5, r4, ip
    5bd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5bd6:	bd70      	popgt	{r4, r5, r6, pc}
    5bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5bdc:	f04f 0e00 	mov.w	lr, #0
    5be0:	3c01      	subs	r4, #1
    5be2:	f300 80ab 	bgt.w	5d3c <__aeabi_dmul+0x238>
    5be6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    5bea:	bfde      	ittt	le
    5bec:	2000      	movle	r0, #0
    5bee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    5bf2:	bd70      	pople	{r4, r5, r6, pc}
    5bf4:	f1c4 0400 	rsb	r4, r4, #0
    5bf8:	3c20      	subs	r4, #32
    5bfa:	da35      	bge.n	5c68 <__aeabi_dmul+0x164>
    5bfc:	340c      	adds	r4, #12
    5bfe:	dc1b      	bgt.n	5c38 <__aeabi_dmul+0x134>
    5c00:	f104 0414 	add.w	r4, r4, #20
    5c04:	f1c4 0520 	rsb	r5, r4, #32
    5c08:	fa00 f305 	lsl.w	r3, r0, r5
    5c0c:	fa20 f004 	lsr.w	r0, r0, r4
    5c10:	fa01 f205 	lsl.w	r2, r1, r5
    5c14:	ea40 0002 	orr.w	r0, r0, r2
    5c18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    5c1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    5c20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    5c24:	fa21 f604 	lsr.w	r6, r1, r4
    5c28:	eb42 0106 	adc.w	r1, r2, r6
    5c2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5c30:	bf08      	it	eq
    5c32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    5c36:	bd70      	pop	{r4, r5, r6, pc}
    5c38:	f1c4 040c 	rsb	r4, r4, #12
    5c3c:	f1c4 0520 	rsb	r5, r4, #32
    5c40:	fa00 f304 	lsl.w	r3, r0, r4
    5c44:	fa20 f005 	lsr.w	r0, r0, r5
    5c48:	fa01 f204 	lsl.w	r2, r1, r4
    5c4c:	ea40 0002 	orr.w	r0, r0, r2
    5c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5c54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    5c58:	f141 0100 	adc.w	r1, r1, #0
    5c5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5c60:	bf08      	it	eq
    5c62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    5c66:	bd70      	pop	{r4, r5, r6, pc}
    5c68:	f1c4 0520 	rsb	r5, r4, #32
    5c6c:	fa00 f205 	lsl.w	r2, r0, r5
    5c70:	ea4e 0e02 	orr.w	lr, lr, r2
    5c74:	fa20 f304 	lsr.w	r3, r0, r4
    5c78:	fa01 f205 	lsl.w	r2, r1, r5
    5c7c:	ea43 0302 	orr.w	r3, r3, r2
    5c80:	fa21 f004 	lsr.w	r0, r1, r4
    5c84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5c88:	fa21 f204 	lsr.w	r2, r1, r4
    5c8c:	ea20 0002 	bic.w	r0, r0, r2
    5c90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    5c94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5c98:	bf08      	it	eq
    5c9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    5c9e:	bd70      	pop	{r4, r5, r6, pc}
    5ca0:	f094 0f00 	teq	r4, #0
    5ca4:	d10f      	bne.n	5cc6 <__aeabi_dmul+0x1c2>
    5ca6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    5caa:	0040      	lsls	r0, r0, #1
    5cac:	eb41 0101 	adc.w	r1, r1, r1
    5cb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5cb4:	bf08      	it	eq
    5cb6:	3c01      	subeq	r4, #1
    5cb8:	d0f7      	beq.n	5caa <__aeabi_dmul+0x1a6>
    5cba:	ea41 0106 	orr.w	r1, r1, r6
    5cbe:	f095 0f00 	teq	r5, #0
    5cc2:	bf18      	it	ne
    5cc4:	4770      	bxne	lr
    5cc6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    5cca:	0052      	lsls	r2, r2, #1
    5ccc:	eb43 0303 	adc.w	r3, r3, r3
    5cd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    5cd4:	bf08      	it	eq
    5cd6:	3d01      	subeq	r5, #1
    5cd8:	d0f7      	beq.n	5cca <__aeabi_dmul+0x1c6>
    5cda:	ea43 0306 	orr.w	r3, r3, r6
    5cde:	4770      	bx	lr
    5ce0:	ea94 0f0c 	teq	r4, ip
    5ce4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    5ce8:	bf18      	it	ne
    5cea:	ea95 0f0c 	teqne	r5, ip
    5cee:	d00c      	beq.n	5d0a <__aeabi_dmul+0x206>
    5cf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5cf4:	bf18      	it	ne
    5cf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5cfa:	d1d1      	bne.n	5ca0 <__aeabi_dmul+0x19c>
    5cfc:	ea81 0103 	eor.w	r1, r1, r3
    5d00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5d04:	f04f 0000 	mov.w	r0, #0
    5d08:	bd70      	pop	{r4, r5, r6, pc}
    5d0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5d0e:	bf06      	itte	eq
    5d10:	4610      	moveq	r0, r2
    5d12:	4619      	moveq	r1, r3
    5d14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5d18:	d019      	beq.n	5d4e <__aeabi_dmul+0x24a>
    5d1a:	ea94 0f0c 	teq	r4, ip
    5d1e:	d102      	bne.n	5d26 <__aeabi_dmul+0x222>
    5d20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    5d24:	d113      	bne.n	5d4e <__aeabi_dmul+0x24a>
    5d26:	ea95 0f0c 	teq	r5, ip
    5d2a:	d105      	bne.n	5d38 <__aeabi_dmul+0x234>
    5d2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    5d30:	bf1c      	itt	ne
    5d32:	4610      	movne	r0, r2
    5d34:	4619      	movne	r1, r3
    5d36:	d10a      	bne.n	5d4e <__aeabi_dmul+0x24a>
    5d38:	ea81 0103 	eor.w	r1, r1, r3
    5d3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5d40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5d44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5d48:	f04f 0000 	mov.w	r0, #0
    5d4c:	bd70      	pop	{r4, r5, r6, pc}
    5d4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5d52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    5d56:	bd70      	pop	{r4, r5, r6, pc}

00005d58 <__aeabi_ddiv>:
    5d58:	b570      	push	{r4, r5, r6, lr}
    5d5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5d5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5d62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    5d66:	bf1d      	ittte	ne
    5d68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5d6c:	ea94 0f0c 	teqne	r4, ip
    5d70:	ea95 0f0c 	teqne	r5, ip
    5d74:	f000 f8a7 	bleq	5ec6 <__aeabi_ddiv+0x16e>
    5d78:	eba4 0405 	sub.w	r4, r4, r5
    5d7c:	ea81 0e03 	eor.w	lr, r1, r3
    5d80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5d84:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5d88:	f000 8088 	beq.w	5e9c <__aeabi_ddiv+0x144>
    5d8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5d90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    5d94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    5d98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    5d9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    5da0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    5da4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    5da8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    5dac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    5db0:	429d      	cmp	r5, r3
    5db2:	bf08      	it	eq
    5db4:	4296      	cmpeq	r6, r2
    5db6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    5dba:	f504 7440 	add.w	r4, r4, #768	; 0x300
    5dbe:	d202      	bcs.n	5dc6 <__aeabi_ddiv+0x6e>
    5dc0:	085b      	lsrs	r3, r3, #1
    5dc2:	ea4f 0232 	mov.w	r2, r2, rrx
    5dc6:	1ab6      	subs	r6, r6, r2
    5dc8:	eb65 0503 	sbc.w	r5, r5, r3
    5dcc:	085b      	lsrs	r3, r3, #1
    5dce:	ea4f 0232 	mov.w	r2, r2, rrx
    5dd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    5dd6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    5dda:	ebb6 0e02 	subs.w	lr, r6, r2
    5dde:	eb75 0e03 	sbcs.w	lr, r5, r3
    5de2:	bf22      	ittt	cs
    5de4:	1ab6      	subcs	r6, r6, r2
    5de6:	4675      	movcs	r5, lr
    5de8:	ea40 000c 	orrcs.w	r0, r0, ip
    5dec:	085b      	lsrs	r3, r3, #1
    5dee:	ea4f 0232 	mov.w	r2, r2, rrx
    5df2:	ebb6 0e02 	subs.w	lr, r6, r2
    5df6:	eb75 0e03 	sbcs.w	lr, r5, r3
    5dfa:	bf22      	ittt	cs
    5dfc:	1ab6      	subcs	r6, r6, r2
    5dfe:	4675      	movcs	r5, lr
    5e00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    5e04:	085b      	lsrs	r3, r3, #1
    5e06:	ea4f 0232 	mov.w	r2, r2, rrx
    5e0a:	ebb6 0e02 	subs.w	lr, r6, r2
    5e0e:	eb75 0e03 	sbcs.w	lr, r5, r3
    5e12:	bf22      	ittt	cs
    5e14:	1ab6      	subcs	r6, r6, r2
    5e16:	4675      	movcs	r5, lr
    5e18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    5e1c:	085b      	lsrs	r3, r3, #1
    5e1e:	ea4f 0232 	mov.w	r2, r2, rrx
    5e22:	ebb6 0e02 	subs.w	lr, r6, r2
    5e26:	eb75 0e03 	sbcs.w	lr, r5, r3
    5e2a:	bf22      	ittt	cs
    5e2c:	1ab6      	subcs	r6, r6, r2
    5e2e:	4675      	movcs	r5, lr
    5e30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    5e34:	ea55 0e06 	orrs.w	lr, r5, r6
    5e38:	d018      	beq.n	5e6c <__aeabi_ddiv+0x114>
    5e3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    5e3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    5e42:	ea4f 1606 	mov.w	r6, r6, lsl #4
    5e46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5e4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    5e4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    5e52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    5e56:	d1c0      	bne.n	5dda <__aeabi_ddiv+0x82>
    5e58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5e5c:	d10b      	bne.n	5e76 <__aeabi_ddiv+0x11e>
    5e5e:	ea41 0100 	orr.w	r1, r1, r0
    5e62:	f04f 0000 	mov.w	r0, #0
    5e66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    5e6a:	e7b6      	b.n	5dda <__aeabi_ddiv+0x82>
    5e6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5e70:	bf04      	itt	eq
    5e72:	4301      	orreq	r1, r0
    5e74:	2000      	moveq	r0, #0
    5e76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5e7a:	bf88      	it	hi
    5e7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5e80:	f63f aeaf 	bhi.w	5be2 <__aeabi_dmul+0xde>
    5e84:	ebb5 0c03 	subs.w	ip, r5, r3
    5e88:	bf04      	itt	eq
    5e8a:	ebb6 0c02 	subseq.w	ip, r6, r2
    5e8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5e92:	f150 0000 	adcs.w	r0, r0, #0
    5e96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5e9a:	bd70      	pop	{r4, r5, r6, pc}
    5e9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    5ea0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    5ea4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    5ea8:	bfc2      	ittt	gt
    5eaa:	ebd4 050c 	rsbsgt	r5, r4, ip
    5eae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5eb2:	bd70      	popgt	{r4, r5, r6, pc}
    5eb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5eb8:	f04f 0e00 	mov.w	lr, #0
    5ebc:	3c01      	subs	r4, #1
    5ebe:	e690      	b.n	5be2 <__aeabi_dmul+0xde>
    5ec0:	ea45 0e06 	orr.w	lr, r5, r6
    5ec4:	e68d      	b.n	5be2 <__aeabi_dmul+0xde>
    5ec6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    5eca:	ea94 0f0c 	teq	r4, ip
    5ece:	bf08      	it	eq
    5ed0:	ea95 0f0c 	teqeq	r5, ip
    5ed4:	f43f af3b 	beq.w	5d4e <__aeabi_dmul+0x24a>
    5ed8:	ea94 0f0c 	teq	r4, ip
    5edc:	d10a      	bne.n	5ef4 <__aeabi_ddiv+0x19c>
    5ede:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    5ee2:	f47f af34 	bne.w	5d4e <__aeabi_dmul+0x24a>
    5ee6:	ea95 0f0c 	teq	r5, ip
    5eea:	f47f af25 	bne.w	5d38 <__aeabi_dmul+0x234>
    5eee:	4610      	mov	r0, r2
    5ef0:	4619      	mov	r1, r3
    5ef2:	e72c      	b.n	5d4e <__aeabi_dmul+0x24a>
    5ef4:	ea95 0f0c 	teq	r5, ip
    5ef8:	d106      	bne.n	5f08 <__aeabi_ddiv+0x1b0>
    5efa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5efe:	f43f aefd 	beq.w	5cfc <__aeabi_dmul+0x1f8>
    5f02:	4610      	mov	r0, r2
    5f04:	4619      	mov	r1, r3
    5f06:	e722      	b.n	5d4e <__aeabi_dmul+0x24a>
    5f08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5f0c:	bf18      	it	ne
    5f0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5f12:	f47f aec5 	bne.w	5ca0 <__aeabi_dmul+0x19c>
    5f16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    5f1a:	f47f af0d 	bne.w	5d38 <__aeabi_dmul+0x234>
    5f1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    5f22:	f47f aeeb 	bne.w	5cfc <__aeabi_dmul+0x1f8>
    5f26:	e712      	b.n	5d4e <__aeabi_dmul+0x24a>

00005f28 <__aeabi_d2uiz>:
    5f28:	004a      	lsls	r2, r1, #1
    5f2a:	d211      	bcs.n	5f50 <__aeabi_d2uiz+0x28>
    5f2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    5f30:	d211      	bcs.n	5f56 <__aeabi_d2uiz+0x2e>
    5f32:	d50d      	bpl.n	5f50 <__aeabi_d2uiz+0x28>
    5f34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    5f38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    5f3c:	d40e      	bmi.n	5f5c <__aeabi_d2uiz+0x34>
    5f3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    5f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5f46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    5f4a:	fa23 f002 	lsr.w	r0, r3, r2
    5f4e:	4770      	bx	lr
    5f50:	f04f 0000 	mov.w	r0, #0
    5f54:	4770      	bx	lr
    5f56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    5f5a:	d102      	bne.n	5f62 <__aeabi_d2uiz+0x3a>
    5f5c:	f04f 30ff 	mov.w	r0, #4294967295
    5f60:	4770      	bx	lr
    5f62:	f04f 0000 	mov.w	r0, #0
    5f66:	4770      	bx	lr

00005f68 <__aeabi_uldivmod>:
    5f68:	b953      	cbnz	r3, 5f80 <__aeabi_uldivmod+0x18>
    5f6a:	b94a      	cbnz	r2, 5f80 <__aeabi_uldivmod+0x18>
    5f6c:	2900      	cmp	r1, #0
    5f6e:	bf08      	it	eq
    5f70:	2800      	cmpeq	r0, #0
    5f72:	bf1c      	itt	ne
    5f74:	f04f 31ff 	movne.w	r1, #4294967295
    5f78:	f04f 30ff 	movne.w	r0, #4294967295
    5f7c:	f000 b97a 	b.w	6274 <__aeabi_idiv0>
    5f80:	f1ad 0c08 	sub.w	ip, sp, #8
    5f84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    5f88:	f000 f806 	bl	5f98 <__udivmoddi4>
    5f8c:	f8dd e004 	ldr.w	lr, [sp, #4]
    5f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5f94:	b004      	add	sp, #16
    5f96:	4770      	bx	lr

00005f98 <__udivmoddi4>:
    5f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f9c:	468c      	mov	ip, r1
    5f9e:	460d      	mov	r5, r1
    5fa0:	4604      	mov	r4, r0
    5fa2:	9e08      	ldr	r6, [sp, #32]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d151      	bne.n	604c <__udivmoddi4+0xb4>
    5fa8:	428a      	cmp	r2, r1
    5faa:	4617      	mov	r7, r2
    5fac:	d96d      	bls.n	608a <__udivmoddi4+0xf2>
    5fae:	fab2 fe82 	clz	lr, r2
    5fb2:	f1be 0f00 	cmp.w	lr, #0
    5fb6:	d00b      	beq.n	5fd0 <__udivmoddi4+0x38>
    5fb8:	f1ce 0c20 	rsb	ip, lr, #32
    5fbc:	fa01 f50e 	lsl.w	r5, r1, lr
    5fc0:	fa20 fc0c 	lsr.w	ip, r0, ip
    5fc4:	fa02 f70e 	lsl.w	r7, r2, lr
    5fc8:	ea4c 0c05 	orr.w	ip, ip, r5
    5fcc:	fa00 f40e 	lsl.w	r4, r0, lr
    5fd0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    5fd4:	0c25      	lsrs	r5, r4, #16
    5fd6:	fbbc f8fa 	udiv	r8, ip, sl
    5fda:	fa1f f987 	uxth.w	r9, r7
    5fde:	fb0a cc18 	mls	ip, sl, r8, ip
    5fe2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    5fe6:	fb08 f309 	mul.w	r3, r8, r9
    5fea:	42ab      	cmp	r3, r5
    5fec:	d90a      	bls.n	6004 <__udivmoddi4+0x6c>
    5fee:	19ed      	adds	r5, r5, r7
    5ff0:	f108 32ff 	add.w	r2, r8, #4294967295
    5ff4:	f080 8123 	bcs.w	623e <__udivmoddi4+0x2a6>
    5ff8:	42ab      	cmp	r3, r5
    5ffa:	f240 8120 	bls.w	623e <__udivmoddi4+0x2a6>
    5ffe:	f1a8 0802 	sub.w	r8, r8, #2
    6002:	443d      	add	r5, r7
    6004:	1aed      	subs	r5, r5, r3
    6006:	b2a4      	uxth	r4, r4
    6008:	fbb5 f0fa 	udiv	r0, r5, sl
    600c:	fb0a 5510 	mls	r5, sl, r0, r5
    6010:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    6014:	fb00 f909 	mul.w	r9, r0, r9
    6018:	45a1      	cmp	r9, r4
    601a:	d909      	bls.n	6030 <__udivmoddi4+0x98>
    601c:	19e4      	adds	r4, r4, r7
    601e:	f100 33ff 	add.w	r3, r0, #4294967295
    6022:	f080 810a 	bcs.w	623a <__udivmoddi4+0x2a2>
    6026:	45a1      	cmp	r9, r4
    6028:	f240 8107 	bls.w	623a <__udivmoddi4+0x2a2>
    602c:	3802      	subs	r0, #2
    602e:	443c      	add	r4, r7
    6030:	eba4 0409 	sub.w	r4, r4, r9
    6034:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    6038:	2100      	movs	r1, #0
    603a:	2e00      	cmp	r6, #0
    603c:	d061      	beq.n	6102 <__udivmoddi4+0x16a>
    603e:	fa24 f40e 	lsr.w	r4, r4, lr
    6042:	2300      	movs	r3, #0
    6044:	6034      	str	r4, [r6, #0]
    6046:	6073      	str	r3, [r6, #4]
    6048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    604c:	428b      	cmp	r3, r1
    604e:	d907      	bls.n	6060 <__udivmoddi4+0xc8>
    6050:	2e00      	cmp	r6, #0
    6052:	d054      	beq.n	60fe <__udivmoddi4+0x166>
    6054:	2100      	movs	r1, #0
    6056:	e886 0021 	stmia.w	r6, {r0, r5}
    605a:	4608      	mov	r0, r1
    605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6060:	fab3 f183 	clz	r1, r3
    6064:	2900      	cmp	r1, #0
    6066:	f040 808e 	bne.w	6186 <__udivmoddi4+0x1ee>
    606a:	42ab      	cmp	r3, r5
    606c:	d302      	bcc.n	6074 <__udivmoddi4+0xdc>
    606e:	4282      	cmp	r2, r0
    6070:	f200 80fa 	bhi.w	6268 <__udivmoddi4+0x2d0>
    6074:	1a84      	subs	r4, r0, r2
    6076:	eb65 0503 	sbc.w	r5, r5, r3
    607a:	2001      	movs	r0, #1
    607c:	46ac      	mov	ip, r5
    607e:	2e00      	cmp	r6, #0
    6080:	d03f      	beq.n	6102 <__udivmoddi4+0x16a>
    6082:	e886 1010 	stmia.w	r6, {r4, ip}
    6086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    608a:	b912      	cbnz	r2, 6092 <__udivmoddi4+0xfa>
    608c:	2701      	movs	r7, #1
    608e:	fbb7 f7f2 	udiv	r7, r7, r2
    6092:	fab7 fe87 	clz	lr, r7
    6096:	f1be 0f00 	cmp.w	lr, #0
    609a:	d134      	bne.n	6106 <__udivmoddi4+0x16e>
    609c:	1beb      	subs	r3, r5, r7
    609e:	0c3a      	lsrs	r2, r7, #16
    60a0:	fa1f fc87 	uxth.w	ip, r7
    60a4:	2101      	movs	r1, #1
    60a6:	fbb3 f8f2 	udiv	r8, r3, r2
    60aa:	0c25      	lsrs	r5, r4, #16
    60ac:	fb02 3318 	mls	r3, r2, r8, r3
    60b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    60b4:	fb0c f308 	mul.w	r3, ip, r8
    60b8:	42ab      	cmp	r3, r5
    60ba:	d907      	bls.n	60cc <__udivmoddi4+0x134>
    60bc:	19ed      	adds	r5, r5, r7
    60be:	f108 30ff 	add.w	r0, r8, #4294967295
    60c2:	d202      	bcs.n	60ca <__udivmoddi4+0x132>
    60c4:	42ab      	cmp	r3, r5
    60c6:	f200 80d1 	bhi.w	626c <__udivmoddi4+0x2d4>
    60ca:	4680      	mov	r8, r0
    60cc:	1aed      	subs	r5, r5, r3
    60ce:	b2a3      	uxth	r3, r4
    60d0:	fbb5 f0f2 	udiv	r0, r5, r2
    60d4:	fb02 5510 	mls	r5, r2, r0, r5
    60d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    60dc:	fb0c fc00 	mul.w	ip, ip, r0
    60e0:	45a4      	cmp	ip, r4
    60e2:	d907      	bls.n	60f4 <__udivmoddi4+0x15c>
    60e4:	19e4      	adds	r4, r4, r7
    60e6:	f100 33ff 	add.w	r3, r0, #4294967295
    60ea:	d202      	bcs.n	60f2 <__udivmoddi4+0x15a>
    60ec:	45a4      	cmp	ip, r4
    60ee:	f200 80b8 	bhi.w	6262 <__udivmoddi4+0x2ca>
    60f2:	4618      	mov	r0, r3
    60f4:	eba4 040c 	sub.w	r4, r4, ip
    60f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    60fc:	e79d      	b.n	603a <__udivmoddi4+0xa2>
    60fe:	4631      	mov	r1, r6
    6100:	4630      	mov	r0, r6
    6102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6106:	f1ce 0420 	rsb	r4, lr, #32
    610a:	fa05 f30e 	lsl.w	r3, r5, lr
    610e:	fa07 f70e 	lsl.w	r7, r7, lr
    6112:	fa20 f804 	lsr.w	r8, r0, r4
    6116:	0c3a      	lsrs	r2, r7, #16
    6118:	fa25 f404 	lsr.w	r4, r5, r4
    611c:	ea48 0803 	orr.w	r8, r8, r3
    6120:	fbb4 f1f2 	udiv	r1, r4, r2
    6124:	ea4f 4518 	mov.w	r5, r8, lsr #16
    6128:	fb02 4411 	mls	r4, r2, r1, r4
    612c:	fa1f fc87 	uxth.w	ip, r7
    6130:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    6134:	fb01 f30c 	mul.w	r3, r1, ip
    6138:	42ab      	cmp	r3, r5
    613a:	fa00 f40e 	lsl.w	r4, r0, lr
    613e:	d909      	bls.n	6154 <__udivmoddi4+0x1bc>
    6140:	19ed      	adds	r5, r5, r7
    6142:	f101 30ff 	add.w	r0, r1, #4294967295
    6146:	f080 808a 	bcs.w	625e <__udivmoddi4+0x2c6>
    614a:	42ab      	cmp	r3, r5
    614c:	f240 8087 	bls.w	625e <__udivmoddi4+0x2c6>
    6150:	3902      	subs	r1, #2
    6152:	443d      	add	r5, r7
    6154:	1aeb      	subs	r3, r5, r3
    6156:	fa1f f588 	uxth.w	r5, r8
    615a:	fbb3 f0f2 	udiv	r0, r3, r2
    615e:	fb02 3310 	mls	r3, r2, r0, r3
    6162:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    6166:	fb00 f30c 	mul.w	r3, r0, ip
    616a:	42ab      	cmp	r3, r5
    616c:	d907      	bls.n	617e <__udivmoddi4+0x1e6>
    616e:	19ed      	adds	r5, r5, r7
    6170:	f100 38ff 	add.w	r8, r0, #4294967295
    6174:	d26f      	bcs.n	6256 <__udivmoddi4+0x2be>
    6176:	42ab      	cmp	r3, r5
    6178:	d96d      	bls.n	6256 <__udivmoddi4+0x2be>
    617a:	3802      	subs	r0, #2
    617c:	443d      	add	r5, r7
    617e:	1aeb      	subs	r3, r5, r3
    6180:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    6184:	e78f      	b.n	60a6 <__udivmoddi4+0x10e>
    6186:	f1c1 0720 	rsb	r7, r1, #32
    618a:	fa22 f807 	lsr.w	r8, r2, r7
    618e:	408b      	lsls	r3, r1
    6190:	fa05 f401 	lsl.w	r4, r5, r1
    6194:	ea48 0303 	orr.w	r3, r8, r3
    6198:	fa20 fe07 	lsr.w	lr, r0, r7
    619c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    61a0:	40fd      	lsrs	r5, r7
    61a2:	ea4e 0e04 	orr.w	lr, lr, r4
    61a6:	fbb5 f9fc 	udiv	r9, r5, ip
    61aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
    61ae:	fb0c 5519 	mls	r5, ip, r9, r5
    61b2:	fa1f f883 	uxth.w	r8, r3
    61b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    61ba:	fb09 f408 	mul.w	r4, r9, r8
    61be:	42ac      	cmp	r4, r5
    61c0:	fa02 f201 	lsl.w	r2, r2, r1
    61c4:	fa00 fa01 	lsl.w	sl, r0, r1
    61c8:	d908      	bls.n	61dc <__udivmoddi4+0x244>
    61ca:	18ed      	adds	r5, r5, r3
    61cc:	f109 30ff 	add.w	r0, r9, #4294967295
    61d0:	d243      	bcs.n	625a <__udivmoddi4+0x2c2>
    61d2:	42ac      	cmp	r4, r5
    61d4:	d941      	bls.n	625a <__udivmoddi4+0x2c2>
    61d6:	f1a9 0902 	sub.w	r9, r9, #2
    61da:	441d      	add	r5, r3
    61dc:	1b2d      	subs	r5, r5, r4
    61de:	fa1f fe8e 	uxth.w	lr, lr
    61e2:	fbb5 f0fc 	udiv	r0, r5, ip
    61e6:	fb0c 5510 	mls	r5, ip, r0, r5
    61ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    61ee:	fb00 f808 	mul.w	r8, r0, r8
    61f2:	45a0      	cmp	r8, r4
    61f4:	d907      	bls.n	6206 <__udivmoddi4+0x26e>
    61f6:	18e4      	adds	r4, r4, r3
    61f8:	f100 35ff 	add.w	r5, r0, #4294967295
    61fc:	d229      	bcs.n	6252 <__udivmoddi4+0x2ba>
    61fe:	45a0      	cmp	r8, r4
    6200:	d927      	bls.n	6252 <__udivmoddi4+0x2ba>
    6202:	3802      	subs	r0, #2
    6204:	441c      	add	r4, r3
    6206:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    620a:	eba4 0408 	sub.w	r4, r4, r8
    620e:	fba0 8902 	umull	r8, r9, r0, r2
    6212:	454c      	cmp	r4, r9
    6214:	46c6      	mov	lr, r8
    6216:	464d      	mov	r5, r9
    6218:	d315      	bcc.n	6246 <__udivmoddi4+0x2ae>
    621a:	d012      	beq.n	6242 <__udivmoddi4+0x2aa>
    621c:	b156      	cbz	r6, 6234 <__udivmoddi4+0x29c>
    621e:	ebba 030e 	subs.w	r3, sl, lr
    6222:	eb64 0405 	sbc.w	r4, r4, r5
    6226:	fa04 f707 	lsl.w	r7, r4, r7
    622a:	40cb      	lsrs	r3, r1
    622c:	431f      	orrs	r7, r3
    622e:	40cc      	lsrs	r4, r1
    6230:	6037      	str	r7, [r6, #0]
    6232:	6074      	str	r4, [r6, #4]
    6234:	2100      	movs	r1, #0
    6236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    623a:	4618      	mov	r0, r3
    623c:	e6f8      	b.n	6030 <__udivmoddi4+0x98>
    623e:	4690      	mov	r8, r2
    6240:	e6e0      	b.n	6004 <__udivmoddi4+0x6c>
    6242:	45c2      	cmp	sl, r8
    6244:	d2ea      	bcs.n	621c <__udivmoddi4+0x284>
    6246:	ebb8 0e02 	subs.w	lr, r8, r2
    624a:	eb69 0503 	sbc.w	r5, r9, r3
    624e:	3801      	subs	r0, #1
    6250:	e7e4      	b.n	621c <__udivmoddi4+0x284>
    6252:	4628      	mov	r0, r5
    6254:	e7d7      	b.n	6206 <__udivmoddi4+0x26e>
    6256:	4640      	mov	r0, r8
    6258:	e791      	b.n	617e <__udivmoddi4+0x1e6>
    625a:	4681      	mov	r9, r0
    625c:	e7be      	b.n	61dc <__udivmoddi4+0x244>
    625e:	4601      	mov	r1, r0
    6260:	e778      	b.n	6154 <__udivmoddi4+0x1bc>
    6262:	3802      	subs	r0, #2
    6264:	443c      	add	r4, r7
    6266:	e745      	b.n	60f4 <__udivmoddi4+0x15c>
    6268:	4608      	mov	r0, r1
    626a:	e708      	b.n	607e <__udivmoddi4+0xe6>
    626c:	f1a8 0802 	sub.w	r8, r8, #2
    6270:	443d      	add	r5, r7
    6272:	e72b      	b.n	60cc <__udivmoddi4+0x134>

00006274 <__aeabi_idiv0>:
    6274:	4770      	bx	lr
    6276:	bf00      	nop

00006278 <__sflush_r>:
    6278:	898a      	ldrh	r2, [r1, #12]
    627a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    627e:	4605      	mov	r5, r0
    6280:	0710      	lsls	r0, r2, #28
    6282:	460c      	mov	r4, r1
    6284:	d45a      	bmi.n	633c <__sflush_r+0xc4>
    6286:	684b      	ldr	r3, [r1, #4]
    6288:	2b00      	cmp	r3, #0
    628a:	dc05      	bgt.n	6298 <__sflush_r+0x20>
    628c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    628e:	2b00      	cmp	r3, #0
    6290:	dc02      	bgt.n	6298 <__sflush_r+0x20>
    6292:	2000      	movs	r0, #0
    6294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    629a:	2e00      	cmp	r6, #0
    629c:	d0f9      	beq.n	6292 <__sflush_r+0x1a>
    629e:	2300      	movs	r3, #0
    62a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    62a4:	682f      	ldr	r7, [r5, #0]
    62a6:	602b      	str	r3, [r5, #0]
    62a8:	d033      	beq.n	6312 <__sflush_r+0x9a>
    62aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    62ac:	89a3      	ldrh	r3, [r4, #12]
    62ae:	075a      	lsls	r2, r3, #29
    62b0:	d505      	bpl.n	62be <__sflush_r+0x46>
    62b2:	6863      	ldr	r3, [r4, #4]
    62b4:	1ac0      	subs	r0, r0, r3
    62b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    62b8:	b10b      	cbz	r3, 62be <__sflush_r+0x46>
    62ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    62bc:	1ac0      	subs	r0, r0, r3
    62be:	2300      	movs	r3, #0
    62c0:	4602      	mov	r2, r0
    62c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    62c4:	6a21      	ldr	r1, [r4, #32]
    62c6:	4628      	mov	r0, r5
    62c8:	47b0      	blx	r6
    62ca:	1c43      	adds	r3, r0, #1
    62cc:	89a3      	ldrh	r3, [r4, #12]
    62ce:	d106      	bne.n	62de <__sflush_r+0x66>
    62d0:	6829      	ldr	r1, [r5, #0]
    62d2:	291d      	cmp	r1, #29
    62d4:	d84b      	bhi.n	636e <__sflush_r+0xf6>
    62d6:	4a2b      	ldr	r2, [pc, #172]	; (6384 <__sflush_r+0x10c>)
    62d8:	40ca      	lsrs	r2, r1
    62da:	07d6      	lsls	r6, r2, #31
    62dc:	d547      	bpl.n	636e <__sflush_r+0xf6>
    62de:	2200      	movs	r2, #0
    62e0:	6062      	str	r2, [r4, #4]
    62e2:	04d9      	lsls	r1, r3, #19
    62e4:	6922      	ldr	r2, [r4, #16]
    62e6:	6022      	str	r2, [r4, #0]
    62e8:	d504      	bpl.n	62f4 <__sflush_r+0x7c>
    62ea:	1c42      	adds	r2, r0, #1
    62ec:	d101      	bne.n	62f2 <__sflush_r+0x7a>
    62ee:	682b      	ldr	r3, [r5, #0]
    62f0:	b903      	cbnz	r3, 62f4 <__sflush_r+0x7c>
    62f2:	6560      	str	r0, [r4, #84]	; 0x54
    62f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    62f6:	602f      	str	r7, [r5, #0]
    62f8:	2900      	cmp	r1, #0
    62fa:	d0ca      	beq.n	6292 <__sflush_r+0x1a>
    62fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6300:	4299      	cmp	r1, r3
    6302:	d002      	beq.n	630a <__sflush_r+0x92>
    6304:	4628      	mov	r0, r5
    6306:	f000 f98d 	bl	6624 <_free_r>
    630a:	2000      	movs	r0, #0
    630c:	6360      	str	r0, [r4, #52]	; 0x34
    630e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6312:	6a21      	ldr	r1, [r4, #32]
    6314:	2301      	movs	r3, #1
    6316:	4628      	mov	r0, r5
    6318:	47b0      	blx	r6
    631a:	1c41      	adds	r1, r0, #1
    631c:	d1c6      	bne.n	62ac <__sflush_r+0x34>
    631e:	682b      	ldr	r3, [r5, #0]
    6320:	2b00      	cmp	r3, #0
    6322:	d0c3      	beq.n	62ac <__sflush_r+0x34>
    6324:	2b1d      	cmp	r3, #29
    6326:	d001      	beq.n	632c <__sflush_r+0xb4>
    6328:	2b16      	cmp	r3, #22
    632a:	d101      	bne.n	6330 <__sflush_r+0xb8>
    632c:	602f      	str	r7, [r5, #0]
    632e:	e7b0      	b.n	6292 <__sflush_r+0x1a>
    6330:	89a3      	ldrh	r3, [r4, #12]
    6332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6336:	81a3      	strh	r3, [r4, #12]
    6338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    633c:	690f      	ldr	r7, [r1, #16]
    633e:	2f00      	cmp	r7, #0
    6340:	d0a7      	beq.n	6292 <__sflush_r+0x1a>
    6342:	0793      	lsls	r3, r2, #30
    6344:	680e      	ldr	r6, [r1, #0]
    6346:	bf08      	it	eq
    6348:	694b      	ldreq	r3, [r1, #20]
    634a:	600f      	str	r7, [r1, #0]
    634c:	bf18      	it	ne
    634e:	2300      	movne	r3, #0
    6350:	eba6 0807 	sub.w	r8, r6, r7
    6354:	608b      	str	r3, [r1, #8]
    6356:	f1b8 0f00 	cmp.w	r8, #0
    635a:	dd9a      	ble.n	6292 <__sflush_r+0x1a>
    635c:	4643      	mov	r3, r8
    635e:	463a      	mov	r2, r7
    6360:	6a21      	ldr	r1, [r4, #32]
    6362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6364:	4628      	mov	r0, r5
    6366:	47b0      	blx	r6
    6368:	2800      	cmp	r0, #0
    636a:	dc07      	bgt.n	637c <__sflush_r+0x104>
    636c:	89a3      	ldrh	r3, [r4, #12]
    636e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6372:	81a3      	strh	r3, [r4, #12]
    6374:	f04f 30ff 	mov.w	r0, #4294967295
    6378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    637c:	4407      	add	r7, r0
    637e:	eba8 0800 	sub.w	r8, r8, r0
    6382:	e7e8      	b.n	6356 <__sflush_r+0xde>
    6384:	20400001 	.word	0x20400001

00006388 <_fflush_r>:
    6388:	b538      	push	{r3, r4, r5, lr}
    638a:	690b      	ldr	r3, [r1, #16]
    638c:	4605      	mov	r5, r0
    638e:	460c      	mov	r4, r1
    6390:	b1db      	cbz	r3, 63ca <_fflush_r+0x42>
    6392:	b118      	cbz	r0, 639c <_fflush_r+0x14>
    6394:	6983      	ldr	r3, [r0, #24]
    6396:	b90b      	cbnz	r3, 639c <_fflush_r+0x14>
    6398:	f000 f872 	bl	6480 <__sinit>
    639c:	4b0c      	ldr	r3, [pc, #48]	; (63d0 <_fflush_r+0x48>)
    639e:	429c      	cmp	r4, r3
    63a0:	d109      	bne.n	63b6 <_fflush_r+0x2e>
    63a2:	686c      	ldr	r4, [r5, #4]
    63a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    63a8:	b17b      	cbz	r3, 63ca <_fflush_r+0x42>
    63aa:	4621      	mov	r1, r4
    63ac:	4628      	mov	r0, r5
    63ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    63b2:	f7ff bf61 	b.w	6278 <__sflush_r>
    63b6:	4b07      	ldr	r3, [pc, #28]	; (63d4 <_fflush_r+0x4c>)
    63b8:	429c      	cmp	r4, r3
    63ba:	d101      	bne.n	63c0 <_fflush_r+0x38>
    63bc:	68ac      	ldr	r4, [r5, #8]
    63be:	e7f1      	b.n	63a4 <_fflush_r+0x1c>
    63c0:	4b05      	ldr	r3, [pc, #20]	; (63d8 <_fflush_r+0x50>)
    63c2:	429c      	cmp	r4, r3
    63c4:	bf08      	it	eq
    63c6:	68ec      	ldreq	r4, [r5, #12]
    63c8:	e7ec      	b.n	63a4 <_fflush_r+0x1c>
    63ca:	2000      	movs	r0, #0
    63cc:	bd38      	pop	{r3, r4, r5, pc}
    63ce:	bf00      	nop
    63d0:	00009168 	.word	0x00009168
    63d4:	00009188 	.word	0x00009188
    63d8:	00009148 	.word	0x00009148

000063dc <fflush>:
    63dc:	4601      	mov	r1, r0
    63de:	b920      	cbnz	r0, 63ea <fflush+0xe>
    63e0:	4b04      	ldr	r3, [pc, #16]	; (63f4 <fflush+0x18>)
    63e2:	4905      	ldr	r1, [pc, #20]	; (63f8 <fflush+0x1c>)
    63e4:	6818      	ldr	r0, [r3, #0]
    63e6:	f000 b8d3 	b.w	6590 <_fwalk_reent>
    63ea:	4b04      	ldr	r3, [pc, #16]	; (63fc <fflush+0x20>)
    63ec:	6818      	ldr	r0, [r3, #0]
    63ee:	f7ff bfcb 	b.w	6388 <_fflush_r>
    63f2:	bf00      	nop
    63f4:	000091a8 	.word	0x000091a8
    63f8:	00006389 	.word	0x00006389
    63fc:	200002dc 	.word	0x200002dc

00006400 <_cleanup_r>:
    6400:	4901      	ldr	r1, [pc, #4]	; (6408 <_cleanup_r+0x8>)
    6402:	f000 b8c5 	b.w	6590 <_fwalk_reent>
    6406:	bf00      	nop
    6408:	00006389 	.word	0x00006389

0000640c <std.isra.0>:
    640c:	2300      	movs	r3, #0
    640e:	b510      	push	{r4, lr}
    6410:	4604      	mov	r4, r0
    6412:	6003      	str	r3, [r0, #0]
    6414:	6043      	str	r3, [r0, #4]
    6416:	6083      	str	r3, [r0, #8]
    6418:	8181      	strh	r1, [r0, #12]
    641a:	6643      	str	r3, [r0, #100]	; 0x64
    641c:	81c2      	strh	r2, [r0, #14]
    641e:	6103      	str	r3, [r0, #16]
    6420:	6143      	str	r3, [r0, #20]
    6422:	6183      	str	r3, [r0, #24]
    6424:	4619      	mov	r1, r3
    6426:	2208      	movs	r2, #8
    6428:	305c      	adds	r0, #92	; 0x5c
    642a:	f000 f8f3 	bl	6614 <memset>
    642e:	4b05      	ldr	r3, [pc, #20]	; (6444 <std.isra.0+0x38>)
    6430:	6263      	str	r3, [r4, #36]	; 0x24
    6432:	4b05      	ldr	r3, [pc, #20]	; (6448 <std.isra.0+0x3c>)
    6434:	62a3      	str	r3, [r4, #40]	; 0x28
    6436:	4b05      	ldr	r3, [pc, #20]	; (644c <std.isra.0+0x40>)
    6438:	62e3      	str	r3, [r4, #44]	; 0x2c
    643a:	4b05      	ldr	r3, [pc, #20]	; (6450 <std.isra.0+0x44>)
    643c:	6224      	str	r4, [r4, #32]
    643e:	6323      	str	r3, [r4, #48]	; 0x30
    6440:	bd10      	pop	{r4, pc}
    6442:	bf00      	nop
    6444:	00006ae1 	.word	0x00006ae1
    6448:	00006b03 	.word	0x00006b03
    644c:	00006b3b 	.word	0x00006b3b
    6450:	00006b5f 	.word	0x00006b5f

00006454 <__sfmoreglue>:
    6454:	b570      	push	{r4, r5, r6, lr}
    6456:	1e4a      	subs	r2, r1, #1
    6458:	2568      	movs	r5, #104	; 0x68
    645a:	4355      	muls	r5, r2
    645c:	460e      	mov	r6, r1
    645e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    6462:	f000 f92d 	bl	66c0 <_malloc_r>
    6466:	4604      	mov	r4, r0
    6468:	b140      	cbz	r0, 647c <__sfmoreglue+0x28>
    646a:	2100      	movs	r1, #0
    646c:	e880 0042 	stmia.w	r0, {r1, r6}
    6470:	300c      	adds	r0, #12
    6472:	60a0      	str	r0, [r4, #8]
    6474:	f105 0268 	add.w	r2, r5, #104	; 0x68
    6478:	f000 f8cc 	bl	6614 <memset>
    647c:	4620      	mov	r0, r4
    647e:	bd70      	pop	{r4, r5, r6, pc}

00006480 <__sinit>:
    6480:	6983      	ldr	r3, [r0, #24]
    6482:	b510      	push	{r4, lr}
    6484:	4604      	mov	r4, r0
    6486:	bb33      	cbnz	r3, 64d6 <__sinit+0x56>
    6488:	6483      	str	r3, [r0, #72]	; 0x48
    648a:	64c3      	str	r3, [r0, #76]	; 0x4c
    648c:	6503      	str	r3, [r0, #80]	; 0x50
    648e:	4b12      	ldr	r3, [pc, #72]	; (64d8 <__sinit+0x58>)
    6490:	4a12      	ldr	r2, [pc, #72]	; (64dc <__sinit+0x5c>)
    6492:	681b      	ldr	r3, [r3, #0]
    6494:	6282      	str	r2, [r0, #40]	; 0x28
    6496:	4298      	cmp	r0, r3
    6498:	bf04      	itt	eq
    649a:	2301      	moveq	r3, #1
    649c:	6183      	streq	r3, [r0, #24]
    649e:	f000 f81f 	bl	64e0 <__sfp>
    64a2:	6060      	str	r0, [r4, #4]
    64a4:	4620      	mov	r0, r4
    64a6:	f000 f81b 	bl	64e0 <__sfp>
    64aa:	60a0      	str	r0, [r4, #8]
    64ac:	4620      	mov	r0, r4
    64ae:	f000 f817 	bl	64e0 <__sfp>
    64b2:	2200      	movs	r2, #0
    64b4:	60e0      	str	r0, [r4, #12]
    64b6:	2104      	movs	r1, #4
    64b8:	6860      	ldr	r0, [r4, #4]
    64ba:	f7ff ffa7 	bl	640c <std.isra.0>
    64be:	2201      	movs	r2, #1
    64c0:	2109      	movs	r1, #9
    64c2:	68a0      	ldr	r0, [r4, #8]
    64c4:	f7ff ffa2 	bl	640c <std.isra.0>
    64c8:	2202      	movs	r2, #2
    64ca:	2112      	movs	r1, #18
    64cc:	68e0      	ldr	r0, [r4, #12]
    64ce:	f7ff ff9d 	bl	640c <std.isra.0>
    64d2:	2301      	movs	r3, #1
    64d4:	61a3      	str	r3, [r4, #24]
    64d6:	bd10      	pop	{r4, pc}
    64d8:	000091a8 	.word	0x000091a8
    64dc:	00006401 	.word	0x00006401

000064e0 <__sfp>:
    64e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64e2:	4b1c      	ldr	r3, [pc, #112]	; (6554 <__sfp+0x74>)
    64e4:	681e      	ldr	r6, [r3, #0]
    64e6:	69b3      	ldr	r3, [r6, #24]
    64e8:	4607      	mov	r7, r0
    64ea:	b913      	cbnz	r3, 64f2 <__sfp+0x12>
    64ec:	4630      	mov	r0, r6
    64ee:	f7ff ffc7 	bl	6480 <__sinit>
    64f2:	3648      	adds	r6, #72	; 0x48
    64f4:	68b4      	ldr	r4, [r6, #8]
    64f6:	6873      	ldr	r3, [r6, #4]
    64f8:	3b01      	subs	r3, #1
    64fa:	d503      	bpl.n	6504 <__sfp+0x24>
    64fc:	6833      	ldr	r3, [r6, #0]
    64fe:	b133      	cbz	r3, 650e <__sfp+0x2e>
    6500:	6836      	ldr	r6, [r6, #0]
    6502:	e7f7      	b.n	64f4 <__sfp+0x14>
    6504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    6508:	b16d      	cbz	r5, 6526 <__sfp+0x46>
    650a:	3468      	adds	r4, #104	; 0x68
    650c:	e7f4      	b.n	64f8 <__sfp+0x18>
    650e:	2104      	movs	r1, #4
    6510:	4638      	mov	r0, r7
    6512:	f7ff ff9f 	bl	6454 <__sfmoreglue>
    6516:	6030      	str	r0, [r6, #0]
    6518:	2800      	cmp	r0, #0
    651a:	d1f1      	bne.n	6500 <__sfp+0x20>
    651c:	230c      	movs	r3, #12
    651e:	603b      	str	r3, [r7, #0]
    6520:	4604      	mov	r4, r0
    6522:	4620      	mov	r0, r4
    6524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6526:	f64f 73ff 	movw	r3, #65535	; 0xffff
    652a:	81e3      	strh	r3, [r4, #14]
    652c:	2301      	movs	r3, #1
    652e:	81a3      	strh	r3, [r4, #12]
    6530:	6665      	str	r5, [r4, #100]	; 0x64
    6532:	6025      	str	r5, [r4, #0]
    6534:	60a5      	str	r5, [r4, #8]
    6536:	6065      	str	r5, [r4, #4]
    6538:	6125      	str	r5, [r4, #16]
    653a:	6165      	str	r5, [r4, #20]
    653c:	61a5      	str	r5, [r4, #24]
    653e:	2208      	movs	r2, #8
    6540:	4629      	mov	r1, r5
    6542:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6546:	f000 f865 	bl	6614 <memset>
    654a:	6365      	str	r5, [r4, #52]	; 0x34
    654c:	63a5      	str	r5, [r4, #56]	; 0x38
    654e:	64a5      	str	r5, [r4, #72]	; 0x48
    6550:	64e5      	str	r5, [r4, #76]	; 0x4c
    6552:	e7e6      	b.n	6522 <__sfp+0x42>
    6554:	000091a8 	.word	0x000091a8

00006558 <_fwalk>:
    6558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    655c:	4688      	mov	r8, r1
    655e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    6562:	2600      	movs	r6, #0
    6564:	b914      	cbnz	r4, 656c <_fwalk+0x14>
    6566:	4630      	mov	r0, r6
    6568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    656c:	68a5      	ldr	r5, [r4, #8]
    656e:	6867      	ldr	r7, [r4, #4]
    6570:	3f01      	subs	r7, #1
    6572:	d501      	bpl.n	6578 <_fwalk+0x20>
    6574:	6824      	ldr	r4, [r4, #0]
    6576:	e7f5      	b.n	6564 <_fwalk+0xc>
    6578:	89ab      	ldrh	r3, [r5, #12]
    657a:	2b01      	cmp	r3, #1
    657c:	d906      	bls.n	658c <_fwalk+0x34>
    657e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    6582:	3301      	adds	r3, #1
    6584:	d002      	beq.n	658c <_fwalk+0x34>
    6586:	4628      	mov	r0, r5
    6588:	47c0      	blx	r8
    658a:	4306      	orrs	r6, r0
    658c:	3568      	adds	r5, #104	; 0x68
    658e:	e7ef      	b.n	6570 <_fwalk+0x18>

00006590 <_fwalk_reent>:
    6590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6594:	4680      	mov	r8, r0
    6596:	4689      	mov	r9, r1
    6598:	f100 0448 	add.w	r4, r0, #72	; 0x48
    659c:	2600      	movs	r6, #0
    659e:	b914      	cbnz	r4, 65a6 <_fwalk_reent+0x16>
    65a0:	4630      	mov	r0, r6
    65a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    65a6:	68a5      	ldr	r5, [r4, #8]
    65a8:	6867      	ldr	r7, [r4, #4]
    65aa:	3f01      	subs	r7, #1
    65ac:	d501      	bpl.n	65b2 <_fwalk_reent+0x22>
    65ae:	6824      	ldr	r4, [r4, #0]
    65b0:	e7f5      	b.n	659e <_fwalk_reent+0xe>
    65b2:	89ab      	ldrh	r3, [r5, #12]
    65b4:	2b01      	cmp	r3, #1
    65b6:	d907      	bls.n	65c8 <_fwalk_reent+0x38>
    65b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    65bc:	3301      	adds	r3, #1
    65be:	d003      	beq.n	65c8 <_fwalk_reent+0x38>
    65c0:	4629      	mov	r1, r5
    65c2:	4640      	mov	r0, r8
    65c4:	47c8      	blx	r9
    65c6:	4306      	orrs	r6, r0
    65c8:	3568      	adds	r5, #104	; 0x68
    65ca:	e7ee      	b.n	65aa <_fwalk_reent+0x1a>

000065cc <__libc_init_array>:
    65cc:	b570      	push	{r4, r5, r6, lr}
    65ce:	4e0d      	ldr	r6, [pc, #52]	; (6604 <__libc_init_array+0x38>)
    65d0:	4c0d      	ldr	r4, [pc, #52]	; (6608 <__libc_init_array+0x3c>)
    65d2:	1ba4      	subs	r4, r4, r6
    65d4:	10a4      	asrs	r4, r4, #2
    65d6:	2500      	movs	r5, #0
    65d8:	42a5      	cmp	r5, r4
    65da:	d109      	bne.n	65f0 <__libc_init_array+0x24>
    65dc:	4e0b      	ldr	r6, [pc, #44]	; (660c <__libc_init_array+0x40>)
    65de:	4c0c      	ldr	r4, [pc, #48]	; (6610 <__libc_init_array+0x44>)
    65e0:	f002 fe98 	bl	9314 <_init>
    65e4:	1ba4      	subs	r4, r4, r6
    65e6:	10a4      	asrs	r4, r4, #2
    65e8:	2500      	movs	r5, #0
    65ea:	42a5      	cmp	r5, r4
    65ec:	d105      	bne.n	65fa <__libc_init_array+0x2e>
    65ee:	bd70      	pop	{r4, r5, r6, pc}
    65f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    65f4:	4798      	blx	r3
    65f6:	3501      	adds	r5, #1
    65f8:	e7ee      	b.n	65d8 <__libc_init_array+0xc>
    65fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    65fe:	4798      	blx	r3
    6600:	3501      	adds	r5, #1
    6602:	e7f2      	b.n	65ea <__libc_init_array+0x1e>
    6604:	00009320 	.word	0x00009320
    6608:	00009320 	.word	0x00009320
    660c:	00009320 	.word	0x00009320
    6610:	00009324 	.word	0x00009324

00006614 <memset>:
    6614:	4402      	add	r2, r0
    6616:	4603      	mov	r3, r0
    6618:	4293      	cmp	r3, r2
    661a:	d100      	bne.n	661e <memset+0xa>
    661c:	4770      	bx	lr
    661e:	f803 1b01 	strb.w	r1, [r3], #1
    6622:	e7f9      	b.n	6618 <memset+0x4>

00006624 <_free_r>:
    6624:	b538      	push	{r3, r4, r5, lr}
    6626:	4605      	mov	r5, r0
    6628:	2900      	cmp	r1, #0
    662a:	d045      	beq.n	66b8 <_free_r+0x94>
    662c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6630:	1f0c      	subs	r4, r1, #4
    6632:	2b00      	cmp	r3, #0
    6634:	bfb8      	it	lt
    6636:	18e4      	addlt	r4, r4, r3
    6638:	f000 fbf6 	bl	6e28 <__malloc_lock>
    663c:	4a1f      	ldr	r2, [pc, #124]	; (66bc <_free_r+0x98>)
    663e:	6813      	ldr	r3, [r2, #0]
    6640:	4610      	mov	r0, r2
    6642:	b933      	cbnz	r3, 6652 <_free_r+0x2e>
    6644:	6063      	str	r3, [r4, #4]
    6646:	6014      	str	r4, [r2, #0]
    6648:	4628      	mov	r0, r5
    664a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    664e:	f000 bbec 	b.w	6e2a <__malloc_unlock>
    6652:	42a3      	cmp	r3, r4
    6654:	d90c      	bls.n	6670 <_free_r+0x4c>
    6656:	6821      	ldr	r1, [r4, #0]
    6658:	1862      	adds	r2, r4, r1
    665a:	4293      	cmp	r3, r2
    665c:	bf04      	itt	eq
    665e:	681a      	ldreq	r2, [r3, #0]
    6660:	685b      	ldreq	r3, [r3, #4]
    6662:	6063      	str	r3, [r4, #4]
    6664:	bf04      	itt	eq
    6666:	1852      	addeq	r2, r2, r1
    6668:	6022      	streq	r2, [r4, #0]
    666a:	6004      	str	r4, [r0, #0]
    666c:	e7ec      	b.n	6648 <_free_r+0x24>
    666e:	4613      	mov	r3, r2
    6670:	685a      	ldr	r2, [r3, #4]
    6672:	b10a      	cbz	r2, 6678 <_free_r+0x54>
    6674:	42a2      	cmp	r2, r4
    6676:	d9fa      	bls.n	666e <_free_r+0x4a>
    6678:	6819      	ldr	r1, [r3, #0]
    667a:	1858      	adds	r0, r3, r1
    667c:	42a0      	cmp	r0, r4
    667e:	d10b      	bne.n	6698 <_free_r+0x74>
    6680:	6820      	ldr	r0, [r4, #0]
    6682:	4401      	add	r1, r0
    6684:	1858      	adds	r0, r3, r1
    6686:	4282      	cmp	r2, r0
    6688:	6019      	str	r1, [r3, #0]
    668a:	d1dd      	bne.n	6648 <_free_r+0x24>
    668c:	6810      	ldr	r0, [r2, #0]
    668e:	6852      	ldr	r2, [r2, #4]
    6690:	605a      	str	r2, [r3, #4]
    6692:	4401      	add	r1, r0
    6694:	6019      	str	r1, [r3, #0]
    6696:	e7d7      	b.n	6648 <_free_r+0x24>
    6698:	d902      	bls.n	66a0 <_free_r+0x7c>
    669a:	230c      	movs	r3, #12
    669c:	602b      	str	r3, [r5, #0]
    669e:	e7d3      	b.n	6648 <_free_r+0x24>
    66a0:	6820      	ldr	r0, [r4, #0]
    66a2:	1821      	adds	r1, r4, r0
    66a4:	428a      	cmp	r2, r1
    66a6:	bf04      	itt	eq
    66a8:	6811      	ldreq	r1, [r2, #0]
    66aa:	6852      	ldreq	r2, [r2, #4]
    66ac:	6062      	str	r2, [r4, #4]
    66ae:	bf04      	itt	eq
    66b0:	1809      	addeq	r1, r1, r0
    66b2:	6021      	streq	r1, [r4, #0]
    66b4:	605c      	str	r4, [r3, #4]
    66b6:	e7c7      	b.n	6648 <_free_r+0x24>
    66b8:	bd38      	pop	{r3, r4, r5, pc}
    66ba:	bf00      	nop
    66bc:	20000b3c 	.word	0x20000b3c

000066c0 <_malloc_r>:
    66c0:	b570      	push	{r4, r5, r6, lr}
    66c2:	1ccd      	adds	r5, r1, #3
    66c4:	f025 0503 	bic.w	r5, r5, #3
    66c8:	3508      	adds	r5, #8
    66ca:	2d0c      	cmp	r5, #12
    66cc:	bf38      	it	cc
    66ce:	250c      	movcc	r5, #12
    66d0:	2d00      	cmp	r5, #0
    66d2:	4606      	mov	r6, r0
    66d4:	db01      	blt.n	66da <_malloc_r+0x1a>
    66d6:	42a9      	cmp	r1, r5
    66d8:	d903      	bls.n	66e2 <_malloc_r+0x22>
    66da:	230c      	movs	r3, #12
    66dc:	6033      	str	r3, [r6, #0]
    66de:	2000      	movs	r0, #0
    66e0:	bd70      	pop	{r4, r5, r6, pc}
    66e2:	f000 fba1 	bl	6e28 <__malloc_lock>
    66e6:	4a23      	ldr	r2, [pc, #140]	; (6774 <_malloc_r+0xb4>)
    66e8:	6814      	ldr	r4, [r2, #0]
    66ea:	4621      	mov	r1, r4
    66ec:	b991      	cbnz	r1, 6714 <_malloc_r+0x54>
    66ee:	4c22      	ldr	r4, [pc, #136]	; (6778 <_malloc_r+0xb8>)
    66f0:	6823      	ldr	r3, [r4, #0]
    66f2:	b91b      	cbnz	r3, 66fc <_malloc_r+0x3c>
    66f4:	4630      	mov	r0, r6
    66f6:	f000 f8bd 	bl	6874 <_sbrk_r>
    66fa:	6020      	str	r0, [r4, #0]
    66fc:	4629      	mov	r1, r5
    66fe:	4630      	mov	r0, r6
    6700:	f000 f8b8 	bl	6874 <_sbrk_r>
    6704:	1c43      	adds	r3, r0, #1
    6706:	d126      	bne.n	6756 <_malloc_r+0x96>
    6708:	230c      	movs	r3, #12
    670a:	6033      	str	r3, [r6, #0]
    670c:	4630      	mov	r0, r6
    670e:	f000 fb8c 	bl	6e2a <__malloc_unlock>
    6712:	e7e4      	b.n	66de <_malloc_r+0x1e>
    6714:	680b      	ldr	r3, [r1, #0]
    6716:	1b5b      	subs	r3, r3, r5
    6718:	d41a      	bmi.n	6750 <_malloc_r+0x90>
    671a:	2b0b      	cmp	r3, #11
    671c:	d90f      	bls.n	673e <_malloc_r+0x7e>
    671e:	600b      	str	r3, [r1, #0]
    6720:	50cd      	str	r5, [r1, r3]
    6722:	18cc      	adds	r4, r1, r3
    6724:	4630      	mov	r0, r6
    6726:	f000 fb80 	bl	6e2a <__malloc_unlock>
    672a:	f104 000b 	add.w	r0, r4, #11
    672e:	1d23      	adds	r3, r4, #4
    6730:	f020 0007 	bic.w	r0, r0, #7
    6734:	1ac3      	subs	r3, r0, r3
    6736:	d01b      	beq.n	6770 <_malloc_r+0xb0>
    6738:	425a      	negs	r2, r3
    673a:	50e2      	str	r2, [r4, r3]
    673c:	bd70      	pop	{r4, r5, r6, pc}
    673e:	428c      	cmp	r4, r1
    6740:	bf0d      	iteet	eq
    6742:	6863      	ldreq	r3, [r4, #4]
    6744:	684b      	ldrne	r3, [r1, #4]
    6746:	6063      	strne	r3, [r4, #4]
    6748:	6013      	streq	r3, [r2, #0]
    674a:	bf18      	it	ne
    674c:	460c      	movne	r4, r1
    674e:	e7e9      	b.n	6724 <_malloc_r+0x64>
    6750:	460c      	mov	r4, r1
    6752:	6849      	ldr	r1, [r1, #4]
    6754:	e7ca      	b.n	66ec <_malloc_r+0x2c>
    6756:	1cc4      	adds	r4, r0, #3
    6758:	f024 0403 	bic.w	r4, r4, #3
    675c:	42a0      	cmp	r0, r4
    675e:	d005      	beq.n	676c <_malloc_r+0xac>
    6760:	1a21      	subs	r1, r4, r0
    6762:	4630      	mov	r0, r6
    6764:	f000 f886 	bl	6874 <_sbrk_r>
    6768:	3001      	adds	r0, #1
    676a:	d0cd      	beq.n	6708 <_malloc_r+0x48>
    676c:	6025      	str	r5, [r4, #0]
    676e:	e7d9      	b.n	6724 <_malloc_r+0x64>
    6770:	bd70      	pop	{r4, r5, r6, pc}
    6772:	bf00      	nop
    6774:	20000b3c 	.word	0x20000b3c
    6778:	20000b40 	.word	0x20000b40

0000677c <iprintf>:
    677c:	b40f      	push	{r0, r1, r2, r3}
    677e:	4b0a      	ldr	r3, [pc, #40]	; (67a8 <iprintf+0x2c>)
    6780:	b513      	push	{r0, r1, r4, lr}
    6782:	681c      	ldr	r4, [r3, #0]
    6784:	b124      	cbz	r4, 6790 <iprintf+0x14>
    6786:	69a3      	ldr	r3, [r4, #24]
    6788:	b913      	cbnz	r3, 6790 <iprintf+0x14>
    678a:	4620      	mov	r0, r4
    678c:	f7ff fe78 	bl	6480 <__sinit>
    6790:	ab05      	add	r3, sp, #20
    6792:	9a04      	ldr	r2, [sp, #16]
    6794:	68a1      	ldr	r1, [r4, #8]
    6796:	9301      	str	r3, [sp, #4]
    6798:	4620      	mov	r0, r4
    679a:	f000 fcbf 	bl	711c <_vfiprintf_r>
    679e:	b002      	add	sp, #8
    67a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67a4:	b004      	add	sp, #16
    67a6:	4770      	bx	lr
    67a8:	200002dc 	.word	0x200002dc

000067ac <_puts_r>:
    67ac:	b570      	push	{r4, r5, r6, lr}
    67ae:	460e      	mov	r6, r1
    67b0:	4605      	mov	r5, r0
    67b2:	b118      	cbz	r0, 67bc <_puts_r+0x10>
    67b4:	6983      	ldr	r3, [r0, #24]
    67b6:	b90b      	cbnz	r3, 67bc <_puts_r+0x10>
    67b8:	f7ff fe62 	bl	6480 <__sinit>
    67bc:	69ab      	ldr	r3, [r5, #24]
    67be:	68ac      	ldr	r4, [r5, #8]
    67c0:	b913      	cbnz	r3, 67c8 <_puts_r+0x1c>
    67c2:	4628      	mov	r0, r5
    67c4:	f7ff fe5c 	bl	6480 <__sinit>
    67c8:	4b23      	ldr	r3, [pc, #140]	; (6858 <_puts_r+0xac>)
    67ca:	429c      	cmp	r4, r3
    67cc:	d117      	bne.n	67fe <_puts_r+0x52>
    67ce:	686c      	ldr	r4, [r5, #4]
    67d0:	89a3      	ldrh	r3, [r4, #12]
    67d2:	071b      	lsls	r3, r3, #28
    67d4:	d51d      	bpl.n	6812 <_puts_r+0x66>
    67d6:	6923      	ldr	r3, [r4, #16]
    67d8:	b1db      	cbz	r3, 6812 <_puts_r+0x66>
    67da:	3e01      	subs	r6, #1
    67dc:	68a3      	ldr	r3, [r4, #8]
    67de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    67e2:	3b01      	subs	r3, #1
    67e4:	60a3      	str	r3, [r4, #8]
    67e6:	b9e9      	cbnz	r1, 6824 <_puts_r+0x78>
    67e8:	2b00      	cmp	r3, #0
    67ea:	da2e      	bge.n	684a <_puts_r+0x9e>
    67ec:	4622      	mov	r2, r4
    67ee:	210a      	movs	r1, #10
    67f0:	4628      	mov	r0, r5
    67f2:	f000 f9b9 	bl	6b68 <__swbuf_r>
    67f6:	3001      	adds	r0, #1
    67f8:	d011      	beq.n	681e <_puts_r+0x72>
    67fa:	200a      	movs	r0, #10
    67fc:	bd70      	pop	{r4, r5, r6, pc}
    67fe:	4b17      	ldr	r3, [pc, #92]	; (685c <_puts_r+0xb0>)
    6800:	429c      	cmp	r4, r3
    6802:	d101      	bne.n	6808 <_puts_r+0x5c>
    6804:	68ac      	ldr	r4, [r5, #8]
    6806:	e7e3      	b.n	67d0 <_puts_r+0x24>
    6808:	4b15      	ldr	r3, [pc, #84]	; (6860 <_puts_r+0xb4>)
    680a:	429c      	cmp	r4, r3
    680c:	bf08      	it	eq
    680e:	68ec      	ldreq	r4, [r5, #12]
    6810:	e7de      	b.n	67d0 <_puts_r+0x24>
    6812:	4621      	mov	r1, r4
    6814:	4628      	mov	r0, r5
    6816:	f000 fa0b 	bl	6c30 <__swsetup_r>
    681a:	2800      	cmp	r0, #0
    681c:	d0dd      	beq.n	67da <_puts_r+0x2e>
    681e:	f04f 30ff 	mov.w	r0, #4294967295
    6822:	bd70      	pop	{r4, r5, r6, pc}
    6824:	2b00      	cmp	r3, #0
    6826:	da04      	bge.n	6832 <_puts_r+0x86>
    6828:	69a2      	ldr	r2, [r4, #24]
    682a:	4293      	cmp	r3, r2
    682c:	db06      	blt.n	683c <_puts_r+0x90>
    682e:	290a      	cmp	r1, #10
    6830:	d004      	beq.n	683c <_puts_r+0x90>
    6832:	6823      	ldr	r3, [r4, #0]
    6834:	1c5a      	adds	r2, r3, #1
    6836:	6022      	str	r2, [r4, #0]
    6838:	7019      	strb	r1, [r3, #0]
    683a:	e7cf      	b.n	67dc <_puts_r+0x30>
    683c:	4622      	mov	r2, r4
    683e:	4628      	mov	r0, r5
    6840:	f000 f992 	bl	6b68 <__swbuf_r>
    6844:	3001      	adds	r0, #1
    6846:	d1c9      	bne.n	67dc <_puts_r+0x30>
    6848:	e7e9      	b.n	681e <_puts_r+0x72>
    684a:	6823      	ldr	r3, [r4, #0]
    684c:	200a      	movs	r0, #10
    684e:	1c5a      	adds	r2, r3, #1
    6850:	6022      	str	r2, [r4, #0]
    6852:	7018      	strb	r0, [r3, #0]
    6854:	bd70      	pop	{r4, r5, r6, pc}
    6856:	bf00      	nop
    6858:	00009168 	.word	0x00009168
    685c:	00009188 	.word	0x00009188
    6860:	00009148 	.word	0x00009148

00006864 <puts>:
    6864:	4b02      	ldr	r3, [pc, #8]	; (6870 <puts+0xc>)
    6866:	4601      	mov	r1, r0
    6868:	6818      	ldr	r0, [r3, #0]
    686a:	f7ff bf9f 	b.w	67ac <_puts_r>
    686e:	bf00      	nop
    6870:	200002dc 	.word	0x200002dc

00006874 <_sbrk_r>:
    6874:	b538      	push	{r3, r4, r5, lr}
    6876:	4c06      	ldr	r4, [pc, #24]	; (6890 <_sbrk_r+0x1c>)
    6878:	2300      	movs	r3, #0
    687a:	4605      	mov	r5, r0
    687c:	4608      	mov	r0, r1
    687e:	6023      	str	r3, [r4, #0]
    6880:	f7fb ff4c 	bl	271c <_sbrk>
    6884:	1c43      	adds	r3, r0, #1
    6886:	d102      	bne.n	688e <_sbrk_r+0x1a>
    6888:	6823      	ldr	r3, [r4, #0]
    688a:	b103      	cbz	r3, 688e <_sbrk_r+0x1a>
    688c:	602b      	str	r3, [r5, #0]
    688e:	bd38      	pop	{r3, r4, r5, pc}
    6890:	20001014 	.word	0x20001014

00006894 <iscanf>:
    6894:	b40f      	push	{r0, r1, r2, r3}
    6896:	4b0a      	ldr	r3, [pc, #40]	; (68c0 <iscanf+0x2c>)
    6898:	b513      	push	{r0, r1, r4, lr}
    689a:	681c      	ldr	r4, [r3, #0]
    689c:	b124      	cbz	r4, 68a8 <iscanf+0x14>
    689e:	69a3      	ldr	r3, [r4, #24]
    68a0:	b913      	cbnz	r3, 68a8 <iscanf+0x14>
    68a2:	4620      	mov	r0, r4
    68a4:	f7ff fdec 	bl	6480 <__sinit>
    68a8:	ab05      	add	r3, sp, #20
    68aa:	9a04      	ldr	r2, [sp, #16]
    68ac:	6861      	ldr	r1, [r4, #4]
    68ae:	9301      	str	r3, [sp, #4]
    68b0:	4620      	mov	r0, r4
    68b2:	f001 f833 	bl	791c <_vfiscanf_r>
    68b6:	b002      	add	sp, #8
    68b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68bc:	b004      	add	sp, #16
    68be:	4770      	bx	lr
    68c0:	200002dc 	.word	0x200002dc

000068c4 <setbuf>:
    68c4:	2900      	cmp	r1, #0
    68c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    68ca:	bf0c      	ite	eq
    68cc:	2202      	moveq	r2, #2
    68ce:	2200      	movne	r2, #0
    68d0:	f000 b800 	b.w	68d4 <setvbuf>

000068d4 <setvbuf>:
    68d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    68d8:	461d      	mov	r5, r3
    68da:	4b51      	ldr	r3, [pc, #324]	; (6a20 <setvbuf+0x14c>)
    68dc:	681e      	ldr	r6, [r3, #0]
    68de:	4604      	mov	r4, r0
    68e0:	460f      	mov	r7, r1
    68e2:	4690      	mov	r8, r2
    68e4:	b126      	cbz	r6, 68f0 <setvbuf+0x1c>
    68e6:	69b3      	ldr	r3, [r6, #24]
    68e8:	b913      	cbnz	r3, 68f0 <setvbuf+0x1c>
    68ea:	4630      	mov	r0, r6
    68ec:	f7ff fdc8 	bl	6480 <__sinit>
    68f0:	4b4c      	ldr	r3, [pc, #304]	; (6a24 <setvbuf+0x150>)
    68f2:	429c      	cmp	r4, r3
    68f4:	d152      	bne.n	699c <setvbuf+0xc8>
    68f6:	6874      	ldr	r4, [r6, #4]
    68f8:	f1b8 0f02 	cmp.w	r8, #2
    68fc:	d006      	beq.n	690c <setvbuf+0x38>
    68fe:	f1b8 0f01 	cmp.w	r8, #1
    6902:	f200 8089 	bhi.w	6a18 <setvbuf+0x144>
    6906:	2d00      	cmp	r5, #0
    6908:	f2c0 8086 	blt.w	6a18 <setvbuf+0x144>
    690c:	4621      	mov	r1, r4
    690e:	4630      	mov	r0, r6
    6910:	f7ff fd3a 	bl	6388 <_fflush_r>
    6914:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6916:	b141      	cbz	r1, 692a <setvbuf+0x56>
    6918:	f104 0344 	add.w	r3, r4, #68	; 0x44
    691c:	4299      	cmp	r1, r3
    691e:	d002      	beq.n	6926 <setvbuf+0x52>
    6920:	4630      	mov	r0, r6
    6922:	f7ff fe7f 	bl	6624 <_free_r>
    6926:	2300      	movs	r3, #0
    6928:	6363      	str	r3, [r4, #52]	; 0x34
    692a:	2300      	movs	r3, #0
    692c:	61a3      	str	r3, [r4, #24]
    692e:	6063      	str	r3, [r4, #4]
    6930:	89a3      	ldrh	r3, [r4, #12]
    6932:	061b      	lsls	r3, r3, #24
    6934:	d503      	bpl.n	693e <setvbuf+0x6a>
    6936:	6921      	ldr	r1, [r4, #16]
    6938:	4630      	mov	r0, r6
    693a:	f7ff fe73 	bl	6624 <_free_r>
    693e:	89a3      	ldrh	r3, [r4, #12]
    6940:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    6944:	f023 0303 	bic.w	r3, r3, #3
    6948:	f1b8 0f02 	cmp.w	r8, #2
    694c:	81a3      	strh	r3, [r4, #12]
    694e:	d05d      	beq.n	6a0c <setvbuf+0x138>
    6950:	ab01      	add	r3, sp, #4
    6952:	466a      	mov	r2, sp
    6954:	4621      	mov	r1, r4
    6956:	4630      	mov	r0, r6
    6958:	f000 f9fa 	bl	6d50 <__swhatbuf_r>
    695c:	89a3      	ldrh	r3, [r4, #12]
    695e:	4318      	orrs	r0, r3
    6960:	81a0      	strh	r0, [r4, #12]
    6962:	bb2d      	cbnz	r5, 69b0 <setvbuf+0xdc>
    6964:	9d00      	ldr	r5, [sp, #0]
    6966:	4628      	mov	r0, r5
    6968:	f000 fa56 	bl	6e18 <malloc>
    696c:	4607      	mov	r7, r0
    696e:	2800      	cmp	r0, #0
    6970:	d14e      	bne.n	6a10 <setvbuf+0x13c>
    6972:	f8dd 9000 	ldr.w	r9, [sp]
    6976:	45a9      	cmp	r9, r5
    6978:	d13c      	bne.n	69f4 <setvbuf+0x120>
    697a:	f04f 30ff 	mov.w	r0, #4294967295
    697e:	89a3      	ldrh	r3, [r4, #12]
    6980:	f043 0302 	orr.w	r3, r3, #2
    6984:	81a3      	strh	r3, [r4, #12]
    6986:	2300      	movs	r3, #0
    6988:	60a3      	str	r3, [r4, #8]
    698a:	f104 0347 	add.w	r3, r4, #71	; 0x47
    698e:	6023      	str	r3, [r4, #0]
    6990:	6123      	str	r3, [r4, #16]
    6992:	2301      	movs	r3, #1
    6994:	6163      	str	r3, [r4, #20]
    6996:	b003      	add	sp, #12
    6998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    699c:	4b22      	ldr	r3, [pc, #136]	; (6a28 <setvbuf+0x154>)
    699e:	429c      	cmp	r4, r3
    69a0:	d101      	bne.n	69a6 <setvbuf+0xd2>
    69a2:	68b4      	ldr	r4, [r6, #8]
    69a4:	e7a8      	b.n	68f8 <setvbuf+0x24>
    69a6:	4b21      	ldr	r3, [pc, #132]	; (6a2c <setvbuf+0x158>)
    69a8:	429c      	cmp	r4, r3
    69aa:	bf08      	it	eq
    69ac:	68f4      	ldreq	r4, [r6, #12]
    69ae:	e7a3      	b.n	68f8 <setvbuf+0x24>
    69b0:	2f00      	cmp	r7, #0
    69b2:	d0d8      	beq.n	6966 <setvbuf+0x92>
    69b4:	69b3      	ldr	r3, [r6, #24]
    69b6:	b913      	cbnz	r3, 69be <setvbuf+0xea>
    69b8:	4630      	mov	r0, r6
    69ba:	f7ff fd61 	bl	6480 <__sinit>
    69be:	f1b8 0f01 	cmp.w	r8, #1
    69c2:	bf08      	it	eq
    69c4:	89a3      	ldrheq	r3, [r4, #12]
    69c6:	6027      	str	r7, [r4, #0]
    69c8:	bf04      	itt	eq
    69ca:	f043 0301 	orreq.w	r3, r3, #1
    69ce:	81a3      	strheq	r3, [r4, #12]
    69d0:	89a3      	ldrh	r3, [r4, #12]
    69d2:	6127      	str	r7, [r4, #16]
    69d4:	f013 0008 	ands.w	r0, r3, #8
    69d8:	6165      	str	r5, [r4, #20]
    69da:	d01b      	beq.n	6a14 <setvbuf+0x140>
    69dc:	f013 0001 	ands.w	r0, r3, #1
    69e0:	bf18      	it	ne
    69e2:	426d      	negne	r5, r5
    69e4:	f04f 0300 	mov.w	r3, #0
    69e8:	bf1d      	ittte	ne
    69ea:	60a3      	strne	r3, [r4, #8]
    69ec:	61a5      	strne	r5, [r4, #24]
    69ee:	4618      	movne	r0, r3
    69f0:	60a5      	streq	r5, [r4, #8]
    69f2:	e7d0      	b.n	6996 <setvbuf+0xc2>
    69f4:	4648      	mov	r0, r9
    69f6:	f000 fa0f 	bl	6e18 <malloc>
    69fa:	4607      	mov	r7, r0
    69fc:	2800      	cmp	r0, #0
    69fe:	d0bc      	beq.n	697a <setvbuf+0xa6>
    6a00:	89a3      	ldrh	r3, [r4, #12]
    6a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6a06:	81a3      	strh	r3, [r4, #12]
    6a08:	464d      	mov	r5, r9
    6a0a:	e7d3      	b.n	69b4 <setvbuf+0xe0>
    6a0c:	2000      	movs	r0, #0
    6a0e:	e7b6      	b.n	697e <setvbuf+0xaa>
    6a10:	46a9      	mov	r9, r5
    6a12:	e7f5      	b.n	6a00 <setvbuf+0x12c>
    6a14:	60a0      	str	r0, [r4, #8]
    6a16:	e7be      	b.n	6996 <setvbuf+0xc2>
    6a18:	f04f 30ff 	mov.w	r0, #4294967295
    6a1c:	e7bb      	b.n	6996 <setvbuf+0xc2>
    6a1e:	bf00      	nop
    6a20:	200002dc 	.word	0x200002dc
    6a24:	00009168 	.word	0x00009168
    6a28:	00009188 	.word	0x00009188
    6a2c:	00009148 	.word	0x00009148

00006a30 <sniprintf>:
    6a30:	b40c      	push	{r2, r3}
    6a32:	b530      	push	{r4, r5, lr}
    6a34:	4b17      	ldr	r3, [pc, #92]	; (6a94 <sniprintf+0x64>)
    6a36:	1e0c      	subs	r4, r1, #0
    6a38:	b09d      	sub	sp, #116	; 0x74
    6a3a:	681d      	ldr	r5, [r3, #0]
    6a3c:	da08      	bge.n	6a50 <sniprintf+0x20>
    6a3e:	238b      	movs	r3, #139	; 0x8b
    6a40:	602b      	str	r3, [r5, #0]
    6a42:	f04f 30ff 	mov.w	r0, #4294967295
    6a46:	b01d      	add	sp, #116	; 0x74
    6a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6a4c:	b002      	add	sp, #8
    6a4e:	4770      	bx	lr
    6a50:	f44f 7302 	mov.w	r3, #520	; 0x208
    6a54:	f8ad 3014 	strh.w	r3, [sp, #20]
    6a58:	bf14      	ite	ne
    6a5a:	f104 33ff 	addne.w	r3, r4, #4294967295
    6a5e:	4623      	moveq	r3, r4
    6a60:	9304      	str	r3, [sp, #16]
    6a62:	9307      	str	r3, [sp, #28]
    6a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6a68:	9002      	str	r0, [sp, #8]
    6a6a:	9006      	str	r0, [sp, #24]
    6a6c:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a70:	9a20      	ldr	r2, [sp, #128]	; 0x80
    6a72:	ab21      	add	r3, sp, #132	; 0x84
    6a74:	a902      	add	r1, sp, #8
    6a76:	4628      	mov	r0, r5
    6a78:	9301      	str	r3, [sp, #4]
    6a7a:	f000 fa33 	bl	6ee4 <_svfiprintf_r>
    6a7e:	1c43      	adds	r3, r0, #1
    6a80:	bfbc      	itt	lt
    6a82:	238b      	movlt	r3, #139	; 0x8b
    6a84:	602b      	strlt	r3, [r5, #0]
    6a86:	2c00      	cmp	r4, #0
    6a88:	d0dd      	beq.n	6a46 <sniprintf+0x16>
    6a8a:	9b02      	ldr	r3, [sp, #8]
    6a8c:	2200      	movs	r2, #0
    6a8e:	701a      	strb	r2, [r3, #0]
    6a90:	e7d9      	b.n	6a46 <sniprintf+0x16>
    6a92:	bf00      	nop
    6a94:	200002dc 	.word	0x200002dc

00006a98 <siprintf>:
    6a98:	b40e      	push	{r1, r2, r3}
    6a9a:	b500      	push	{lr}
    6a9c:	b09c      	sub	sp, #112	; 0x70
    6a9e:	f44f 7102 	mov.w	r1, #520	; 0x208
    6aa2:	ab1d      	add	r3, sp, #116	; 0x74
    6aa4:	f8ad 1014 	strh.w	r1, [sp, #20]
    6aa8:	9002      	str	r0, [sp, #8]
    6aaa:	9006      	str	r0, [sp, #24]
    6aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6ab0:	480a      	ldr	r0, [pc, #40]	; (6adc <siprintf+0x44>)
    6ab2:	9104      	str	r1, [sp, #16]
    6ab4:	9107      	str	r1, [sp, #28]
    6ab6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6aba:	f853 2b04 	ldr.w	r2, [r3], #4
    6abe:	f8ad 1016 	strh.w	r1, [sp, #22]
    6ac2:	6800      	ldr	r0, [r0, #0]
    6ac4:	9301      	str	r3, [sp, #4]
    6ac6:	a902      	add	r1, sp, #8
    6ac8:	f000 fa0c 	bl	6ee4 <_svfiprintf_r>
    6acc:	9b02      	ldr	r3, [sp, #8]
    6ace:	2200      	movs	r2, #0
    6ad0:	701a      	strb	r2, [r3, #0]
    6ad2:	b01c      	add	sp, #112	; 0x70
    6ad4:	f85d eb04 	ldr.w	lr, [sp], #4
    6ad8:	b003      	add	sp, #12
    6ada:	4770      	bx	lr
    6adc:	200002dc 	.word	0x200002dc

00006ae0 <__sread>:
    6ae0:	b510      	push	{r4, lr}
    6ae2:	460c      	mov	r4, r1
    6ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6ae8:	f001 f898 	bl	7c1c <_read_r>
    6aec:	2800      	cmp	r0, #0
    6aee:	bfab      	itete	ge
    6af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    6af2:	89a3      	ldrhlt	r3, [r4, #12]
    6af4:	181b      	addge	r3, r3, r0
    6af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    6afa:	bfac      	ite	ge
    6afc:	6563      	strge	r3, [r4, #84]	; 0x54
    6afe:	81a3      	strhlt	r3, [r4, #12]
    6b00:	bd10      	pop	{r4, pc}

00006b02 <__swrite>:
    6b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b06:	461f      	mov	r7, r3
    6b08:	898b      	ldrh	r3, [r1, #12]
    6b0a:	05db      	lsls	r3, r3, #23
    6b0c:	4605      	mov	r5, r0
    6b0e:	460c      	mov	r4, r1
    6b10:	4616      	mov	r6, r2
    6b12:	d505      	bpl.n	6b20 <__swrite+0x1e>
    6b14:	2302      	movs	r3, #2
    6b16:	2200      	movs	r2, #0
    6b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6b1c:	f000 f906 	bl	6d2c <_lseek_r>
    6b20:	89a3      	ldrh	r3, [r4, #12]
    6b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    6b2a:	81a3      	strh	r3, [r4, #12]
    6b2c:	4632      	mov	r2, r6
    6b2e:	463b      	mov	r3, r7
    6b30:	4628      	mov	r0, r5
    6b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b36:	f000 b869 	b.w	6c0c <_write_r>

00006b3a <__sseek>:
    6b3a:	b510      	push	{r4, lr}
    6b3c:	460c      	mov	r4, r1
    6b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6b42:	f000 f8f3 	bl	6d2c <_lseek_r>
    6b46:	1c43      	adds	r3, r0, #1
    6b48:	89a3      	ldrh	r3, [r4, #12]
    6b4a:	bf15      	itete	ne
    6b4c:	6560      	strne	r0, [r4, #84]	; 0x54
    6b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    6b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    6b56:	81a3      	strheq	r3, [r4, #12]
    6b58:	bf18      	it	ne
    6b5a:	81a3      	strhne	r3, [r4, #12]
    6b5c:	bd10      	pop	{r4, pc}

00006b5e <__sclose>:
    6b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6b62:	f000 b8d3 	b.w	6d0c <_close_r>
	...

00006b68 <__swbuf_r>:
    6b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b6a:	460e      	mov	r6, r1
    6b6c:	4614      	mov	r4, r2
    6b6e:	4605      	mov	r5, r0
    6b70:	b118      	cbz	r0, 6b7a <__swbuf_r+0x12>
    6b72:	6983      	ldr	r3, [r0, #24]
    6b74:	b90b      	cbnz	r3, 6b7a <__swbuf_r+0x12>
    6b76:	f7ff fc83 	bl	6480 <__sinit>
    6b7a:	4b21      	ldr	r3, [pc, #132]	; (6c00 <__swbuf_r+0x98>)
    6b7c:	429c      	cmp	r4, r3
    6b7e:	d12a      	bne.n	6bd6 <__swbuf_r+0x6e>
    6b80:	686c      	ldr	r4, [r5, #4]
    6b82:	69a3      	ldr	r3, [r4, #24]
    6b84:	60a3      	str	r3, [r4, #8]
    6b86:	89a3      	ldrh	r3, [r4, #12]
    6b88:	071a      	lsls	r2, r3, #28
    6b8a:	d52e      	bpl.n	6bea <__swbuf_r+0x82>
    6b8c:	6923      	ldr	r3, [r4, #16]
    6b8e:	b363      	cbz	r3, 6bea <__swbuf_r+0x82>
    6b90:	6923      	ldr	r3, [r4, #16]
    6b92:	6820      	ldr	r0, [r4, #0]
    6b94:	1ac0      	subs	r0, r0, r3
    6b96:	6963      	ldr	r3, [r4, #20]
    6b98:	b2f6      	uxtb	r6, r6
    6b9a:	4298      	cmp	r0, r3
    6b9c:	4637      	mov	r7, r6
    6b9e:	db04      	blt.n	6baa <__swbuf_r+0x42>
    6ba0:	4621      	mov	r1, r4
    6ba2:	4628      	mov	r0, r5
    6ba4:	f7ff fbf0 	bl	6388 <_fflush_r>
    6ba8:	bb28      	cbnz	r0, 6bf6 <__swbuf_r+0x8e>
    6baa:	68a3      	ldr	r3, [r4, #8]
    6bac:	3b01      	subs	r3, #1
    6bae:	60a3      	str	r3, [r4, #8]
    6bb0:	6823      	ldr	r3, [r4, #0]
    6bb2:	1c5a      	adds	r2, r3, #1
    6bb4:	6022      	str	r2, [r4, #0]
    6bb6:	701e      	strb	r6, [r3, #0]
    6bb8:	6963      	ldr	r3, [r4, #20]
    6bba:	3001      	adds	r0, #1
    6bbc:	4298      	cmp	r0, r3
    6bbe:	d004      	beq.n	6bca <__swbuf_r+0x62>
    6bc0:	89a3      	ldrh	r3, [r4, #12]
    6bc2:	07db      	lsls	r3, r3, #31
    6bc4:	d519      	bpl.n	6bfa <__swbuf_r+0x92>
    6bc6:	2e0a      	cmp	r6, #10
    6bc8:	d117      	bne.n	6bfa <__swbuf_r+0x92>
    6bca:	4621      	mov	r1, r4
    6bcc:	4628      	mov	r0, r5
    6bce:	f7ff fbdb 	bl	6388 <_fflush_r>
    6bd2:	b190      	cbz	r0, 6bfa <__swbuf_r+0x92>
    6bd4:	e00f      	b.n	6bf6 <__swbuf_r+0x8e>
    6bd6:	4b0b      	ldr	r3, [pc, #44]	; (6c04 <__swbuf_r+0x9c>)
    6bd8:	429c      	cmp	r4, r3
    6bda:	d101      	bne.n	6be0 <__swbuf_r+0x78>
    6bdc:	68ac      	ldr	r4, [r5, #8]
    6bde:	e7d0      	b.n	6b82 <__swbuf_r+0x1a>
    6be0:	4b09      	ldr	r3, [pc, #36]	; (6c08 <__swbuf_r+0xa0>)
    6be2:	429c      	cmp	r4, r3
    6be4:	bf08      	it	eq
    6be6:	68ec      	ldreq	r4, [r5, #12]
    6be8:	e7cb      	b.n	6b82 <__swbuf_r+0x1a>
    6bea:	4621      	mov	r1, r4
    6bec:	4628      	mov	r0, r5
    6bee:	f000 f81f 	bl	6c30 <__swsetup_r>
    6bf2:	2800      	cmp	r0, #0
    6bf4:	d0cc      	beq.n	6b90 <__swbuf_r+0x28>
    6bf6:	f04f 37ff 	mov.w	r7, #4294967295
    6bfa:	4638      	mov	r0, r7
    6bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bfe:	bf00      	nop
    6c00:	00009168 	.word	0x00009168
    6c04:	00009188 	.word	0x00009188
    6c08:	00009148 	.word	0x00009148

00006c0c <_write_r>:
    6c0c:	b538      	push	{r3, r4, r5, lr}
    6c0e:	4c07      	ldr	r4, [pc, #28]	; (6c2c <_write_r+0x20>)
    6c10:	4605      	mov	r5, r0
    6c12:	4608      	mov	r0, r1
    6c14:	4611      	mov	r1, r2
    6c16:	2200      	movs	r2, #0
    6c18:	6022      	str	r2, [r4, #0]
    6c1a:	461a      	mov	r2, r3
    6c1c:	f7fe fd6e 	bl	56fc <_write>
    6c20:	1c43      	adds	r3, r0, #1
    6c22:	d102      	bne.n	6c2a <_write_r+0x1e>
    6c24:	6823      	ldr	r3, [r4, #0]
    6c26:	b103      	cbz	r3, 6c2a <_write_r+0x1e>
    6c28:	602b      	str	r3, [r5, #0]
    6c2a:	bd38      	pop	{r3, r4, r5, pc}
    6c2c:	20001014 	.word	0x20001014

00006c30 <__swsetup_r>:
    6c30:	4b32      	ldr	r3, [pc, #200]	; (6cfc <__swsetup_r+0xcc>)
    6c32:	b570      	push	{r4, r5, r6, lr}
    6c34:	681d      	ldr	r5, [r3, #0]
    6c36:	4606      	mov	r6, r0
    6c38:	460c      	mov	r4, r1
    6c3a:	b125      	cbz	r5, 6c46 <__swsetup_r+0x16>
    6c3c:	69ab      	ldr	r3, [r5, #24]
    6c3e:	b913      	cbnz	r3, 6c46 <__swsetup_r+0x16>
    6c40:	4628      	mov	r0, r5
    6c42:	f7ff fc1d 	bl	6480 <__sinit>
    6c46:	4b2e      	ldr	r3, [pc, #184]	; (6d00 <__swsetup_r+0xd0>)
    6c48:	429c      	cmp	r4, r3
    6c4a:	d10f      	bne.n	6c6c <__swsetup_r+0x3c>
    6c4c:	686c      	ldr	r4, [r5, #4]
    6c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6c52:	b29a      	uxth	r2, r3
    6c54:	0715      	lsls	r5, r2, #28
    6c56:	d42c      	bmi.n	6cb2 <__swsetup_r+0x82>
    6c58:	06d0      	lsls	r0, r2, #27
    6c5a:	d411      	bmi.n	6c80 <__swsetup_r+0x50>
    6c5c:	2209      	movs	r2, #9
    6c5e:	6032      	str	r2, [r6, #0]
    6c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6c64:	81a3      	strh	r3, [r4, #12]
    6c66:	f04f 30ff 	mov.w	r0, #4294967295
    6c6a:	bd70      	pop	{r4, r5, r6, pc}
    6c6c:	4b25      	ldr	r3, [pc, #148]	; (6d04 <__swsetup_r+0xd4>)
    6c6e:	429c      	cmp	r4, r3
    6c70:	d101      	bne.n	6c76 <__swsetup_r+0x46>
    6c72:	68ac      	ldr	r4, [r5, #8]
    6c74:	e7eb      	b.n	6c4e <__swsetup_r+0x1e>
    6c76:	4b24      	ldr	r3, [pc, #144]	; (6d08 <__swsetup_r+0xd8>)
    6c78:	429c      	cmp	r4, r3
    6c7a:	bf08      	it	eq
    6c7c:	68ec      	ldreq	r4, [r5, #12]
    6c7e:	e7e6      	b.n	6c4e <__swsetup_r+0x1e>
    6c80:	0751      	lsls	r1, r2, #29
    6c82:	d512      	bpl.n	6caa <__swsetup_r+0x7a>
    6c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c86:	b141      	cbz	r1, 6c9a <__swsetup_r+0x6a>
    6c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6c8c:	4299      	cmp	r1, r3
    6c8e:	d002      	beq.n	6c96 <__swsetup_r+0x66>
    6c90:	4630      	mov	r0, r6
    6c92:	f7ff fcc7 	bl	6624 <_free_r>
    6c96:	2300      	movs	r3, #0
    6c98:	6363      	str	r3, [r4, #52]	; 0x34
    6c9a:	89a3      	ldrh	r3, [r4, #12]
    6c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    6ca0:	81a3      	strh	r3, [r4, #12]
    6ca2:	2300      	movs	r3, #0
    6ca4:	6063      	str	r3, [r4, #4]
    6ca6:	6923      	ldr	r3, [r4, #16]
    6ca8:	6023      	str	r3, [r4, #0]
    6caa:	89a3      	ldrh	r3, [r4, #12]
    6cac:	f043 0308 	orr.w	r3, r3, #8
    6cb0:	81a3      	strh	r3, [r4, #12]
    6cb2:	6923      	ldr	r3, [r4, #16]
    6cb4:	b94b      	cbnz	r3, 6cca <__swsetup_r+0x9a>
    6cb6:	89a3      	ldrh	r3, [r4, #12]
    6cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
    6cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6cc0:	d003      	beq.n	6cca <__swsetup_r+0x9a>
    6cc2:	4621      	mov	r1, r4
    6cc4:	4630      	mov	r0, r6
    6cc6:	f000 f867 	bl	6d98 <__smakebuf_r>
    6cca:	89a2      	ldrh	r2, [r4, #12]
    6ccc:	f012 0301 	ands.w	r3, r2, #1
    6cd0:	d00c      	beq.n	6cec <__swsetup_r+0xbc>
    6cd2:	2300      	movs	r3, #0
    6cd4:	60a3      	str	r3, [r4, #8]
    6cd6:	6963      	ldr	r3, [r4, #20]
    6cd8:	425b      	negs	r3, r3
    6cda:	61a3      	str	r3, [r4, #24]
    6cdc:	6923      	ldr	r3, [r4, #16]
    6cde:	b953      	cbnz	r3, 6cf6 <__swsetup_r+0xc6>
    6ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6ce4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    6ce8:	d1ba      	bne.n	6c60 <__swsetup_r+0x30>
    6cea:	bd70      	pop	{r4, r5, r6, pc}
    6cec:	0792      	lsls	r2, r2, #30
    6cee:	bf58      	it	pl
    6cf0:	6963      	ldrpl	r3, [r4, #20]
    6cf2:	60a3      	str	r3, [r4, #8]
    6cf4:	e7f2      	b.n	6cdc <__swsetup_r+0xac>
    6cf6:	2000      	movs	r0, #0
    6cf8:	e7f7      	b.n	6cea <__swsetup_r+0xba>
    6cfa:	bf00      	nop
    6cfc:	200002dc 	.word	0x200002dc
    6d00:	00009168 	.word	0x00009168
    6d04:	00009188 	.word	0x00009188
    6d08:	00009148 	.word	0x00009148

00006d0c <_close_r>:
    6d0c:	b538      	push	{r3, r4, r5, lr}
    6d0e:	4c06      	ldr	r4, [pc, #24]	; (6d28 <_close_r+0x1c>)
    6d10:	2300      	movs	r3, #0
    6d12:	4605      	mov	r5, r0
    6d14:	4608      	mov	r0, r1
    6d16:	6023      	str	r3, [r4, #0]
    6d18:	f7fb fd12 	bl	2740 <_close>
    6d1c:	1c43      	adds	r3, r0, #1
    6d1e:	d102      	bne.n	6d26 <_close_r+0x1a>
    6d20:	6823      	ldr	r3, [r4, #0]
    6d22:	b103      	cbz	r3, 6d26 <_close_r+0x1a>
    6d24:	602b      	str	r3, [r5, #0]
    6d26:	bd38      	pop	{r3, r4, r5, pc}
    6d28:	20001014 	.word	0x20001014

00006d2c <_lseek_r>:
    6d2c:	b538      	push	{r3, r4, r5, lr}
    6d2e:	4c07      	ldr	r4, [pc, #28]	; (6d4c <_lseek_r+0x20>)
    6d30:	4605      	mov	r5, r0
    6d32:	4608      	mov	r0, r1
    6d34:	4611      	mov	r1, r2
    6d36:	2200      	movs	r2, #0
    6d38:	6022      	str	r2, [r4, #0]
    6d3a:	461a      	mov	r2, r3
    6d3c:	f7fb fd0a 	bl	2754 <_lseek>
    6d40:	1c43      	adds	r3, r0, #1
    6d42:	d102      	bne.n	6d4a <_lseek_r+0x1e>
    6d44:	6823      	ldr	r3, [r4, #0]
    6d46:	b103      	cbz	r3, 6d4a <_lseek_r+0x1e>
    6d48:	602b      	str	r3, [r5, #0]
    6d4a:	bd38      	pop	{r3, r4, r5, pc}
    6d4c:	20001014 	.word	0x20001014

00006d50 <__swhatbuf_r>:
    6d50:	b570      	push	{r4, r5, r6, lr}
    6d52:	460e      	mov	r6, r1
    6d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6d58:	2900      	cmp	r1, #0
    6d5a:	b090      	sub	sp, #64	; 0x40
    6d5c:	4614      	mov	r4, r2
    6d5e:	461d      	mov	r5, r3
    6d60:	da07      	bge.n	6d72 <__swhatbuf_r+0x22>
    6d62:	2300      	movs	r3, #0
    6d64:	602b      	str	r3, [r5, #0]
    6d66:	89b3      	ldrh	r3, [r6, #12]
    6d68:	061a      	lsls	r2, r3, #24
    6d6a:	d410      	bmi.n	6d8e <__swhatbuf_r+0x3e>
    6d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6d70:	e00e      	b.n	6d90 <__swhatbuf_r+0x40>
    6d72:	aa01      	add	r2, sp, #4
    6d74:	f001 f9f8 	bl	8168 <_fstat_r>
    6d78:	2800      	cmp	r0, #0
    6d7a:	dbf2      	blt.n	6d62 <__swhatbuf_r+0x12>
    6d7c:	9a02      	ldr	r2, [sp, #8]
    6d7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    6d82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    6d86:	425a      	negs	r2, r3
    6d88:	415a      	adcs	r2, r3
    6d8a:	602a      	str	r2, [r5, #0]
    6d8c:	e7ee      	b.n	6d6c <__swhatbuf_r+0x1c>
    6d8e:	2340      	movs	r3, #64	; 0x40
    6d90:	2000      	movs	r0, #0
    6d92:	6023      	str	r3, [r4, #0]
    6d94:	b010      	add	sp, #64	; 0x40
    6d96:	bd70      	pop	{r4, r5, r6, pc}

00006d98 <__smakebuf_r>:
    6d98:	898b      	ldrh	r3, [r1, #12]
    6d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6d9c:	079d      	lsls	r5, r3, #30
    6d9e:	4606      	mov	r6, r0
    6da0:	460c      	mov	r4, r1
    6da2:	d507      	bpl.n	6db4 <__smakebuf_r+0x1c>
    6da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
    6da8:	6023      	str	r3, [r4, #0]
    6daa:	6123      	str	r3, [r4, #16]
    6dac:	2301      	movs	r3, #1
    6dae:	6163      	str	r3, [r4, #20]
    6db0:	b002      	add	sp, #8
    6db2:	bd70      	pop	{r4, r5, r6, pc}
    6db4:	ab01      	add	r3, sp, #4
    6db6:	466a      	mov	r2, sp
    6db8:	f7ff ffca 	bl	6d50 <__swhatbuf_r>
    6dbc:	9900      	ldr	r1, [sp, #0]
    6dbe:	4605      	mov	r5, r0
    6dc0:	4630      	mov	r0, r6
    6dc2:	f7ff fc7d 	bl	66c0 <_malloc_r>
    6dc6:	b948      	cbnz	r0, 6ddc <__smakebuf_r+0x44>
    6dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6dcc:	059a      	lsls	r2, r3, #22
    6dce:	d4ef      	bmi.n	6db0 <__smakebuf_r+0x18>
    6dd0:	f023 0303 	bic.w	r3, r3, #3
    6dd4:	f043 0302 	orr.w	r3, r3, #2
    6dd8:	81a3      	strh	r3, [r4, #12]
    6dda:	e7e3      	b.n	6da4 <__smakebuf_r+0xc>
    6ddc:	4b0d      	ldr	r3, [pc, #52]	; (6e14 <__smakebuf_r+0x7c>)
    6dde:	62b3      	str	r3, [r6, #40]	; 0x28
    6de0:	89a3      	ldrh	r3, [r4, #12]
    6de2:	6020      	str	r0, [r4, #0]
    6de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6de8:	81a3      	strh	r3, [r4, #12]
    6dea:	9b00      	ldr	r3, [sp, #0]
    6dec:	6163      	str	r3, [r4, #20]
    6dee:	9b01      	ldr	r3, [sp, #4]
    6df0:	6120      	str	r0, [r4, #16]
    6df2:	b15b      	cbz	r3, 6e0c <__smakebuf_r+0x74>
    6df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6df8:	4630      	mov	r0, r6
    6dfa:	f001 f9c7 	bl	818c <_isatty_r>
    6dfe:	b128      	cbz	r0, 6e0c <__smakebuf_r+0x74>
    6e00:	89a3      	ldrh	r3, [r4, #12]
    6e02:	f023 0303 	bic.w	r3, r3, #3
    6e06:	f043 0301 	orr.w	r3, r3, #1
    6e0a:	81a3      	strh	r3, [r4, #12]
    6e0c:	89a3      	ldrh	r3, [r4, #12]
    6e0e:	431d      	orrs	r5, r3
    6e10:	81a5      	strh	r5, [r4, #12]
    6e12:	e7cd      	b.n	6db0 <__smakebuf_r+0x18>
    6e14:	00006401 	.word	0x00006401

00006e18 <malloc>:
    6e18:	4b02      	ldr	r3, [pc, #8]	; (6e24 <malloc+0xc>)
    6e1a:	4601      	mov	r1, r0
    6e1c:	6818      	ldr	r0, [r3, #0]
    6e1e:	f7ff bc4f 	b.w	66c0 <_malloc_r>
    6e22:	bf00      	nop
    6e24:	200002dc 	.word	0x200002dc

00006e28 <__malloc_lock>:
    6e28:	4770      	bx	lr

00006e2a <__malloc_unlock>:
    6e2a:	4770      	bx	lr

00006e2c <__ssputs_r>:
    6e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e30:	688e      	ldr	r6, [r1, #8]
    6e32:	429e      	cmp	r6, r3
    6e34:	4682      	mov	sl, r0
    6e36:	460c      	mov	r4, r1
    6e38:	4691      	mov	r9, r2
    6e3a:	4698      	mov	r8, r3
    6e3c:	d835      	bhi.n	6eaa <__ssputs_r+0x7e>
    6e3e:	898a      	ldrh	r2, [r1, #12]
    6e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
    6e44:	d031      	beq.n	6eaa <__ssputs_r+0x7e>
    6e46:	6825      	ldr	r5, [r4, #0]
    6e48:	6909      	ldr	r1, [r1, #16]
    6e4a:	1a6f      	subs	r7, r5, r1
    6e4c:	6965      	ldr	r5, [r4, #20]
    6e4e:	2302      	movs	r3, #2
    6e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6e54:	fb95 f5f3 	sdiv	r5, r5, r3
    6e58:	f108 0301 	add.w	r3, r8, #1
    6e5c:	443b      	add	r3, r7
    6e5e:	429d      	cmp	r5, r3
    6e60:	bf38      	it	cc
    6e62:	461d      	movcc	r5, r3
    6e64:	0553      	lsls	r3, r2, #21
    6e66:	d531      	bpl.n	6ecc <__ssputs_r+0xa0>
    6e68:	4629      	mov	r1, r5
    6e6a:	f7ff fc29 	bl	66c0 <_malloc_r>
    6e6e:	4606      	mov	r6, r0
    6e70:	b950      	cbnz	r0, 6e88 <__ssputs_r+0x5c>
    6e72:	230c      	movs	r3, #12
    6e74:	f8ca 3000 	str.w	r3, [sl]
    6e78:	89a3      	ldrh	r3, [r4, #12]
    6e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6e7e:	81a3      	strh	r3, [r4, #12]
    6e80:	f04f 30ff 	mov.w	r0, #4294967295
    6e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e88:	463a      	mov	r2, r7
    6e8a:	6921      	ldr	r1, [r4, #16]
    6e8c:	f001 fa08 	bl	82a0 <memcpy>
    6e90:	89a3      	ldrh	r3, [r4, #12]
    6e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    6e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6e9a:	81a3      	strh	r3, [r4, #12]
    6e9c:	6126      	str	r6, [r4, #16]
    6e9e:	6165      	str	r5, [r4, #20]
    6ea0:	443e      	add	r6, r7
    6ea2:	1bed      	subs	r5, r5, r7
    6ea4:	6026      	str	r6, [r4, #0]
    6ea6:	60a5      	str	r5, [r4, #8]
    6ea8:	4646      	mov	r6, r8
    6eaa:	4546      	cmp	r6, r8
    6eac:	bf28      	it	cs
    6eae:	4646      	movcs	r6, r8
    6eb0:	4632      	mov	r2, r6
    6eb2:	4649      	mov	r1, r9
    6eb4:	6820      	ldr	r0, [r4, #0]
    6eb6:	f001 f9fe 	bl	82b6 <memmove>
    6eba:	68a3      	ldr	r3, [r4, #8]
    6ebc:	1b9b      	subs	r3, r3, r6
    6ebe:	60a3      	str	r3, [r4, #8]
    6ec0:	6823      	ldr	r3, [r4, #0]
    6ec2:	441e      	add	r6, r3
    6ec4:	6026      	str	r6, [r4, #0]
    6ec6:	2000      	movs	r0, #0
    6ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ecc:	462a      	mov	r2, r5
    6ece:	f001 fa0c 	bl	82ea <_realloc_r>
    6ed2:	4606      	mov	r6, r0
    6ed4:	2800      	cmp	r0, #0
    6ed6:	d1e1      	bne.n	6e9c <__ssputs_r+0x70>
    6ed8:	6921      	ldr	r1, [r4, #16]
    6eda:	4650      	mov	r0, sl
    6edc:	f7ff fba2 	bl	6624 <_free_r>
    6ee0:	e7c7      	b.n	6e72 <__ssputs_r+0x46>
	...

00006ee4 <_svfiprintf_r>:
    6ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee8:	b09d      	sub	sp, #116	; 0x74
    6eea:	4680      	mov	r8, r0
    6eec:	9303      	str	r3, [sp, #12]
    6eee:	898b      	ldrh	r3, [r1, #12]
    6ef0:	061c      	lsls	r4, r3, #24
    6ef2:	460d      	mov	r5, r1
    6ef4:	4616      	mov	r6, r2
    6ef6:	d50f      	bpl.n	6f18 <_svfiprintf_r+0x34>
    6ef8:	690b      	ldr	r3, [r1, #16]
    6efa:	b96b      	cbnz	r3, 6f18 <_svfiprintf_r+0x34>
    6efc:	2140      	movs	r1, #64	; 0x40
    6efe:	f7ff fbdf 	bl	66c0 <_malloc_r>
    6f02:	6028      	str	r0, [r5, #0]
    6f04:	6128      	str	r0, [r5, #16]
    6f06:	b928      	cbnz	r0, 6f14 <_svfiprintf_r+0x30>
    6f08:	230c      	movs	r3, #12
    6f0a:	f8c8 3000 	str.w	r3, [r8]
    6f0e:	f04f 30ff 	mov.w	r0, #4294967295
    6f12:	e0c5      	b.n	70a0 <_svfiprintf_r+0x1bc>
    6f14:	2340      	movs	r3, #64	; 0x40
    6f16:	616b      	str	r3, [r5, #20]
    6f18:	2300      	movs	r3, #0
    6f1a:	9309      	str	r3, [sp, #36]	; 0x24
    6f1c:	2320      	movs	r3, #32
    6f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    6f22:	2330      	movs	r3, #48	; 0x30
    6f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    6f28:	f04f 0b01 	mov.w	fp, #1
    6f2c:	4637      	mov	r7, r6
    6f2e:	463c      	mov	r4, r7
    6f30:	f814 3b01 	ldrb.w	r3, [r4], #1
    6f34:	2b00      	cmp	r3, #0
    6f36:	d13c      	bne.n	6fb2 <_svfiprintf_r+0xce>
    6f38:	ebb7 0a06 	subs.w	sl, r7, r6
    6f3c:	d00b      	beq.n	6f56 <_svfiprintf_r+0x72>
    6f3e:	4653      	mov	r3, sl
    6f40:	4632      	mov	r2, r6
    6f42:	4629      	mov	r1, r5
    6f44:	4640      	mov	r0, r8
    6f46:	f7ff ff71 	bl	6e2c <__ssputs_r>
    6f4a:	3001      	adds	r0, #1
    6f4c:	f000 80a3 	beq.w	7096 <_svfiprintf_r+0x1b2>
    6f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f52:	4453      	add	r3, sl
    6f54:	9309      	str	r3, [sp, #36]	; 0x24
    6f56:	783b      	ldrb	r3, [r7, #0]
    6f58:	2b00      	cmp	r3, #0
    6f5a:	f000 809c 	beq.w	7096 <_svfiprintf_r+0x1b2>
    6f5e:	2300      	movs	r3, #0
    6f60:	f04f 32ff 	mov.w	r2, #4294967295
    6f64:	9304      	str	r3, [sp, #16]
    6f66:	9307      	str	r3, [sp, #28]
    6f68:	9205      	str	r2, [sp, #20]
    6f6a:	9306      	str	r3, [sp, #24]
    6f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    6f70:	931a      	str	r3, [sp, #104]	; 0x68
    6f72:	2205      	movs	r2, #5
    6f74:	7821      	ldrb	r1, [r4, #0]
    6f76:	4850      	ldr	r0, [pc, #320]	; (70b8 <_svfiprintf_r+0x1d4>)
    6f78:	f001 f942 	bl	8200 <memchr>
    6f7c:	1c67      	adds	r7, r4, #1
    6f7e:	9b04      	ldr	r3, [sp, #16]
    6f80:	b9d8      	cbnz	r0, 6fba <_svfiprintf_r+0xd6>
    6f82:	06d9      	lsls	r1, r3, #27
    6f84:	bf44      	itt	mi
    6f86:	2220      	movmi	r2, #32
    6f88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6f8c:	071a      	lsls	r2, r3, #28
    6f8e:	bf44      	itt	mi
    6f90:	222b      	movmi	r2, #43	; 0x2b
    6f92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6f96:	7822      	ldrb	r2, [r4, #0]
    6f98:	2a2a      	cmp	r2, #42	; 0x2a
    6f9a:	d016      	beq.n	6fca <_svfiprintf_r+0xe6>
    6f9c:	9a07      	ldr	r2, [sp, #28]
    6f9e:	2100      	movs	r1, #0
    6fa0:	200a      	movs	r0, #10
    6fa2:	4627      	mov	r7, r4
    6fa4:	3401      	adds	r4, #1
    6fa6:	783b      	ldrb	r3, [r7, #0]
    6fa8:	3b30      	subs	r3, #48	; 0x30
    6faa:	2b09      	cmp	r3, #9
    6fac:	d951      	bls.n	7052 <_svfiprintf_r+0x16e>
    6fae:	b1c9      	cbz	r1, 6fe4 <_svfiprintf_r+0x100>
    6fb0:	e011      	b.n	6fd6 <_svfiprintf_r+0xf2>
    6fb2:	2b25      	cmp	r3, #37	; 0x25
    6fb4:	d0c0      	beq.n	6f38 <_svfiprintf_r+0x54>
    6fb6:	4627      	mov	r7, r4
    6fb8:	e7b9      	b.n	6f2e <_svfiprintf_r+0x4a>
    6fba:	4a3f      	ldr	r2, [pc, #252]	; (70b8 <_svfiprintf_r+0x1d4>)
    6fbc:	1a80      	subs	r0, r0, r2
    6fbe:	fa0b f000 	lsl.w	r0, fp, r0
    6fc2:	4318      	orrs	r0, r3
    6fc4:	9004      	str	r0, [sp, #16]
    6fc6:	463c      	mov	r4, r7
    6fc8:	e7d3      	b.n	6f72 <_svfiprintf_r+0x8e>
    6fca:	9a03      	ldr	r2, [sp, #12]
    6fcc:	1d11      	adds	r1, r2, #4
    6fce:	6812      	ldr	r2, [r2, #0]
    6fd0:	9103      	str	r1, [sp, #12]
    6fd2:	2a00      	cmp	r2, #0
    6fd4:	db01      	blt.n	6fda <_svfiprintf_r+0xf6>
    6fd6:	9207      	str	r2, [sp, #28]
    6fd8:	e004      	b.n	6fe4 <_svfiprintf_r+0x100>
    6fda:	4252      	negs	r2, r2
    6fdc:	f043 0302 	orr.w	r3, r3, #2
    6fe0:	9207      	str	r2, [sp, #28]
    6fe2:	9304      	str	r3, [sp, #16]
    6fe4:	783b      	ldrb	r3, [r7, #0]
    6fe6:	2b2e      	cmp	r3, #46	; 0x2e
    6fe8:	d10e      	bne.n	7008 <_svfiprintf_r+0x124>
    6fea:	787b      	ldrb	r3, [r7, #1]
    6fec:	2b2a      	cmp	r3, #42	; 0x2a
    6fee:	f107 0101 	add.w	r1, r7, #1
    6ff2:	d132      	bne.n	705a <_svfiprintf_r+0x176>
    6ff4:	9b03      	ldr	r3, [sp, #12]
    6ff6:	1d1a      	adds	r2, r3, #4
    6ff8:	681b      	ldr	r3, [r3, #0]
    6ffa:	9203      	str	r2, [sp, #12]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	bfb8      	it	lt
    7000:	f04f 33ff 	movlt.w	r3, #4294967295
    7004:	3702      	adds	r7, #2
    7006:	9305      	str	r3, [sp, #20]
    7008:	4c2c      	ldr	r4, [pc, #176]	; (70bc <_svfiprintf_r+0x1d8>)
    700a:	7839      	ldrb	r1, [r7, #0]
    700c:	2203      	movs	r2, #3
    700e:	4620      	mov	r0, r4
    7010:	f001 f8f6 	bl	8200 <memchr>
    7014:	b138      	cbz	r0, 7026 <_svfiprintf_r+0x142>
    7016:	2340      	movs	r3, #64	; 0x40
    7018:	1b00      	subs	r0, r0, r4
    701a:	fa03 f000 	lsl.w	r0, r3, r0
    701e:	9b04      	ldr	r3, [sp, #16]
    7020:	4303      	orrs	r3, r0
    7022:	9304      	str	r3, [sp, #16]
    7024:	3701      	adds	r7, #1
    7026:	7839      	ldrb	r1, [r7, #0]
    7028:	4825      	ldr	r0, [pc, #148]	; (70c0 <_svfiprintf_r+0x1dc>)
    702a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    702e:	2206      	movs	r2, #6
    7030:	1c7e      	adds	r6, r7, #1
    7032:	f001 f8e5 	bl	8200 <memchr>
    7036:	2800      	cmp	r0, #0
    7038:	d035      	beq.n	70a6 <_svfiprintf_r+0x1c2>
    703a:	4b22      	ldr	r3, [pc, #136]	; (70c4 <_svfiprintf_r+0x1e0>)
    703c:	b9fb      	cbnz	r3, 707e <_svfiprintf_r+0x19a>
    703e:	9b03      	ldr	r3, [sp, #12]
    7040:	3307      	adds	r3, #7
    7042:	f023 0307 	bic.w	r3, r3, #7
    7046:	3308      	adds	r3, #8
    7048:	9303      	str	r3, [sp, #12]
    704a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    704c:	444b      	add	r3, r9
    704e:	9309      	str	r3, [sp, #36]	; 0x24
    7050:	e76c      	b.n	6f2c <_svfiprintf_r+0x48>
    7052:	fb00 3202 	mla	r2, r0, r2, r3
    7056:	2101      	movs	r1, #1
    7058:	e7a3      	b.n	6fa2 <_svfiprintf_r+0xbe>
    705a:	2300      	movs	r3, #0
    705c:	9305      	str	r3, [sp, #20]
    705e:	4618      	mov	r0, r3
    7060:	240a      	movs	r4, #10
    7062:	460f      	mov	r7, r1
    7064:	3101      	adds	r1, #1
    7066:	783a      	ldrb	r2, [r7, #0]
    7068:	3a30      	subs	r2, #48	; 0x30
    706a:	2a09      	cmp	r2, #9
    706c:	d903      	bls.n	7076 <_svfiprintf_r+0x192>
    706e:	2b00      	cmp	r3, #0
    7070:	d0ca      	beq.n	7008 <_svfiprintf_r+0x124>
    7072:	9005      	str	r0, [sp, #20]
    7074:	e7c8      	b.n	7008 <_svfiprintf_r+0x124>
    7076:	fb04 2000 	mla	r0, r4, r0, r2
    707a:	2301      	movs	r3, #1
    707c:	e7f1      	b.n	7062 <_svfiprintf_r+0x17e>
    707e:	ab03      	add	r3, sp, #12
    7080:	9300      	str	r3, [sp, #0]
    7082:	462a      	mov	r2, r5
    7084:	4b10      	ldr	r3, [pc, #64]	; (70c8 <_svfiprintf_r+0x1e4>)
    7086:	a904      	add	r1, sp, #16
    7088:	4640      	mov	r0, r8
    708a:	f3af 8000 	nop.w
    708e:	f1b0 3fff 	cmp.w	r0, #4294967295
    7092:	4681      	mov	r9, r0
    7094:	d1d9      	bne.n	704a <_svfiprintf_r+0x166>
    7096:	89ab      	ldrh	r3, [r5, #12]
    7098:	065b      	lsls	r3, r3, #25
    709a:	f53f af38 	bmi.w	6f0e <_svfiprintf_r+0x2a>
    709e:	9809      	ldr	r0, [sp, #36]	; 0x24
    70a0:	b01d      	add	sp, #116	; 0x74
    70a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70a6:	ab03      	add	r3, sp, #12
    70a8:	9300      	str	r3, [sp, #0]
    70aa:	462a      	mov	r2, r5
    70ac:	4b06      	ldr	r3, [pc, #24]	; (70c8 <_svfiprintf_r+0x1e4>)
    70ae:	a904      	add	r1, sp, #16
    70b0:	4640      	mov	r0, r8
    70b2:	f000 f9bf 	bl	7434 <_printf_i>
    70b6:	e7ea      	b.n	708e <_svfiprintf_r+0x1aa>
    70b8:	000091ac 	.word	0x000091ac
    70bc:	000091b2 	.word	0x000091b2
    70c0:	000091b6 	.word	0x000091b6
    70c4:	00000000 	.word	0x00000000
    70c8:	00006e2d 	.word	0x00006e2d

000070cc <__sfputc_r>:
    70cc:	6893      	ldr	r3, [r2, #8]
    70ce:	3b01      	subs	r3, #1
    70d0:	2b00      	cmp	r3, #0
    70d2:	b410      	push	{r4}
    70d4:	6093      	str	r3, [r2, #8]
    70d6:	da08      	bge.n	70ea <__sfputc_r+0x1e>
    70d8:	6994      	ldr	r4, [r2, #24]
    70da:	42a3      	cmp	r3, r4
    70dc:	db02      	blt.n	70e4 <__sfputc_r+0x18>
    70de:	b2cb      	uxtb	r3, r1
    70e0:	2b0a      	cmp	r3, #10
    70e2:	d102      	bne.n	70ea <__sfputc_r+0x1e>
    70e4:	bc10      	pop	{r4}
    70e6:	f7ff bd3f 	b.w	6b68 <__swbuf_r>
    70ea:	6813      	ldr	r3, [r2, #0]
    70ec:	1c58      	adds	r0, r3, #1
    70ee:	6010      	str	r0, [r2, #0]
    70f0:	7019      	strb	r1, [r3, #0]
    70f2:	b2c8      	uxtb	r0, r1
    70f4:	bc10      	pop	{r4}
    70f6:	4770      	bx	lr

000070f8 <__sfputs_r>:
    70f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70fa:	4606      	mov	r6, r0
    70fc:	460f      	mov	r7, r1
    70fe:	4614      	mov	r4, r2
    7100:	18d5      	adds	r5, r2, r3
    7102:	42ac      	cmp	r4, r5
    7104:	d101      	bne.n	710a <__sfputs_r+0x12>
    7106:	2000      	movs	r0, #0
    7108:	e007      	b.n	711a <__sfputs_r+0x22>
    710a:	463a      	mov	r2, r7
    710c:	f814 1b01 	ldrb.w	r1, [r4], #1
    7110:	4630      	mov	r0, r6
    7112:	f7ff ffdb 	bl	70cc <__sfputc_r>
    7116:	1c43      	adds	r3, r0, #1
    7118:	d1f3      	bne.n	7102 <__sfputs_r+0xa>
    711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000711c <_vfiprintf_r>:
    711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7120:	b09d      	sub	sp, #116	; 0x74
    7122:	460c      	mov	r4, r1
    7124:	4617      	mov	r7, r2
    7126:	9303      	str	r3, [sp, #12]
    7128:	4606      	mov	r6, r0
    712a:	b118      	cbz	r0, 7134 <_vfiprintf_r+0x18>
    712c:	6983      	ldr	r3, [r0, #24]
    712e:	b90b      	cbnz	r3, 7134 <_vfiprintf_r+0x18>
    7130:	f7ff f9a6 	bl	6480 <__sinit>
    7134:	4b7c      	ldr	r3, [pc, #496]	; (7328 <_vfiprintf_r+0x20c>)
    7136:	429c      	cmp	r4, r3
    7138:	d157      	bne.n	71ea <_vfiprintf_r+0xce>
    713a:	6874      	ldr	r4, [r6, #4]
    713c:	89a3      	ldrh	r3, [r4, #12]
    713e:	0718      	lsls	r0, r3, #28
    7140:	d55d      	bpl.n	71fe <_vfiprintf_r+0xe2>
    7142:	6923      	ldr	r3, [r4, #16]
    7144:	2b00      	cmp	r3, #0
    7146:	d05a      	beq.n	71fe <_vfiprintf_r+0xe2>
    7148:	2300      	movs	r3, #0
    714a:	9309      	str	r3, [sp, #36]	; 0x24
    714c:	2320      	movs	r3, #32
    714e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    7152:	2330      	movs	r3, #48	; 0x30
    7154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7158:	f04f 0b01 	mov.w	fp, #1
    715c:	46b8      	mov	r8, r7
    715e:	4645      	mov	r5, r8
    7160:	f815 3b01 	ldrb.w	r3, [r5], #1
    7164:	2b00      	cmp	r3, #0
    7166:	d155      	bne.n	7214 <_vfiprintf_r+0xf8>
    7168:	ebb8 0a07 	subs.w	sl, r8, r7
    716c:	d00b      	beq.n	7186 <_vfiprintf_r+0x6a>
    716e:	4653      	mov	r3, sl
    7170:	463a      	mov	r2, r7
    7172:	4621      	mov	r1, r4
    7174:	4630      	mov	r0, r6
    7176:	f7ff ffbf 	bl	70f8 <__sfputs_r>
    717a:	3001      	adds	r0, #1
    717c:	f000 80c4 	beq.w	7308 <_vfiprintf_r+0x1ec>
    7180:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7182:	4453      	add	r3, sl
    7184:	9309      	str	r3, [sp, #36]	; 0x24
    7186:	f898 3000 	ldrb.w	r3, [r8]
    718a:	2b00      	cmp	r3, #0
    718c:	f000 80bc 	beq.w	7308 <_vfiprintf_r+0x1ec>
    7190:	2300      	movs	r3, #0
    7192:	f04f 32ff 	mov.w	r2, #4294967295
    7196:	9304      	str	r3, [sp, #16]
    7198:	9307      	str	r3, [sp, #28]
    719a:	9205      	str	r2, [sp, #20]
    719c:	9306      	str	r3, [sp, #24]
    719e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    71a2:	931a      	str	r3, [sp, #104]	; 0x68
    71a4:	2205      	movs	r2, #5
    71a6:	7829      	ldrb	r1, [r5, #0]
    71a8:	4860      	ldr	r0, [pc, #384]	; (732c <_vfiprintf_r+0x210>)
    71aa:	f001 f829 	bl	8200 <memchr>
    71ae:	f105 0801 	add.w	r8, r5, #1
    71b2:	9b04      	ldr	r3, [sp, #16]
    71b4:	2800      	cmp	r0, #0
    71b6:	d131      	bne.n	721c <_vfiprintf_r+0x100>
    71b8:	06d9      	lsls	r1, r3, #27
    71ba:	bf44      	itt	mi
    71bc:	2220      	movmi	r2, #32
    71be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    71c2:	071a      	lsls	r2, r3, #28
    71c4:	bf44      	itt	mi
    71c6:	222b      	movmi	r2, #43	; 0x2b
    71c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    71cc:	782a      	ldrb	r2, [r5, #0]
    71ce:	2a2a      	cmp	r2, #42	; 0x2a
    71d0:	d02c      	beq.n	722c <_vfiprintf_r+0x110>
    71d2:	9a07      	ldr	r2, [sp, #28]
    71d4:	2100      	movs	r1, #0
    71d6:	200a      	movs	r0, #10
    71d8:	46a8      	mov	r8, r5
    71da:	3501      	adds	r5, #1
    71dc:	f898 3000 	ldrb.w	r3, [r8]
    71e0:	3b30      	subs	r3, #48	; 0x30
    71e2:	2b09      	cmp	r3, #9
    71e4:	d96d      	bls.n	72c2 <_vfiprintf_r+0x1a6>
    71e6:	b371      	cbz	r1, 7246 <_vfiprintf_r+0x12a>
    71e8:	e026      	b.n	7238 <_vfiprintf_r+0x11c>
    71ea:	4b51      	ldr	r3, [pc, #324]	; (7330 <_vfiprintf_r+0x214>)
    71ec:	429c      	cmp	r4, r3
    71ee:	d101      	bne.n	71f4 <_vfiprintf_r+0xd8>
    71f0:	68b4      	ldr	r4, [r6, #8]
    71f2:	e7a3      	b.n	713c <_vfiprintf_r+0x20>
    71f4:	4b4f      	ldr	r3, [pc, #316]	; (7334 <_vfiprintf_r+0x218>)
    71f6:	429c      	cmp	r4, r3
    71f8:	bf08      	it	eq
    71fa:	68f4      	ldreq	r4, [r6, #12]
    71fc:	e79e      	b.n	713c <_vfiprintf_r+0x20>
    71fe:	4621      	mov	r1, r4
    7200:	4630      	mov	r0, r6
    7202:	f7ff fd15 	bl	6c30 <__swsetup_r>
    7206:	2800      	cmp	r0, #0
    7208:	d09e      	beq.n	7148 <_vfiprintf_r+0x2c>
    720a:	f04f 30ff 	mov.w	r0, #4294967295
    720e:	b01d      	add	sp, #116	; 0x74
    7210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7214:	2b25      	cmp	r3, #37	; 0x25
    7216:	d0a7      	beq.n	7168 <_vfiprintf_r+0x4c>
    7218:	46a8      	mov	r8, r5
    721a:	e7a0      	b.n	715e <_vfiprintf_r+0x42>
    721c:	4a43      	ldr	r2, [pc, #268]	; (732c <_vfiprintf_r+0x210>)
    721e:	1a80      	subs	r0, r0, r2
    7220:	fa0b f000 	lsl.w	r0, fp, r0
    7224:	4318      	orrs	r0, r3
    7226:	9004      	str	r0, [sp, #16]
    7228:	4645      	mov	r5, r8
    722a:	e7bb      	b.n	71a4 <_vfiprintf_r+0x88>
    722c:	9a03      	ldr	r2, [sp, #12]
    722e:	1d11      	adds	r1, r2, #4
    7230:	6812      	ldr	r2, [r2, #0]
    7232:	9103      	str	r1, [sp, #12]
    7234:	2a00      	cmp	r2, #0
    7236:	db01      	blt.n	723c <_vfiprintf_r+0x120>
    7238:	9207      	str	r2, [sp, #28]
    723a:	e004      	b.n	7246 <_vfiprintf_r+0x12a>
    723c:	4252      	negs	r2, r2
    723e:	f043 0302 	orr.w	r3, r3, #2
    7242:	9207      	str	r2, [sp, #28]
    7244:	9304      	str	r3, [sp, #16]
    7246:	f898 3000 	ldrb.w	r3, [r8]
    724a:	2b2e      	cmp	r3, #46	; 0x2e
    724c:	d110      	bne.n	7270 <_vfiprintf_r+0x154>
    724e:	f898 3001 	ldrb.w	r3, [r8, #1]
    7252:	2b2a      	cmp	r3, #42	; 0x2a
    7254:	f108 0101 	add.w	r1, r8, #1
    7258:	d137      	bne.n	72ca <_vfiprintf_r+0x1ae>
    725a:	9b03      	ldr	r3, [sp, #12]
    725c:	1d1a      	adds	r2, r3, #4
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	9203      	str	r2, [sp, #12]
    7262:	2b00      	cmp	r3, #0
    7264:	bfb8      	it	lt
    7266:	f04f 33ff 	movlt.w	r3, #4294967295
    726a:	f108 0802 	add.w	r8, r8, #2
    726e:	9305      	str	r3, [sp, #20]
    7270:	4d31      	ldr	r5, [pc, #196]	; (7338 <_vfiprintf_r+0x21c>)
    7272:	f898 1000 	ldrb.w	r1, [r8]
    7276:	2203      	movs	r2, #3
    7278:	4628      	mov	r0, r5
    727a:	f000 ffc1 	bl	8200 <memchr>
    727e:	b140      	cbz	r0, 7292 <_vfiprintf_r+0x176>
    7280:	2340      	movs	r3, #64	; 0x40
    7282:	1b40      	subs	r0, r0, r5
    7284:	fa03 f000 	lsl.w	r0, r3, r0
    7288:	9b04      	ldr	r3, [sp, #16]
    728a:	4303      	orrs	r3, r0
    728c:	9304      	str	r3, [sp, #16]
    728e:	f108 0801 	add.w	r8, r8, #1
    7292:	f898 1000 	ldrb.w	r1, [r8]
    7296:	4829      	ldr	r0, [pc, #164]	; (733c <_vfiprintf_r+0x220>)
    7298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    729c:	2206      	movs	r2, #6
    729e:	f108 0701 	add.w	r7, r8, #1
    72a2:	f000 ffad 	bl	8200 <memchr>
    72a6:	2800      	cmp	r0, #0
    72a8:	d034      	beq.n	7314 <_vfiprintf_r+0x1f8>
    72aa:	4b25      	ldr	r3, [pc, #148]	; (7340 <_vfiprintf_r+0x224>)
    72ac:	bb03      	cbnz	r3, 72f0 <_vfiprintf_r+0x1d4>
    72ae:	9b03      	ldr	r3, [sp, #12]
    72b0:	3307      	adds	r3, #7
    72b2:	f023 0307 	bic.w	r3, r3, #7
    72b6:	3308      	adds	r3, #8
    72b8:	9303      	str	r3, [sp, #12]
    72ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    72bc:	444b      	add	r3, r9
    72be:	9309      	str	r3, [sp, #36]	; 0x24
    72c0:	e74c      	b.n	715c <_vfiprintf_r+0x40>
    72c2:	fb00 3202 	mla	r2, r0, r2, r3
    72c6:	2101      	movs	r1, #1
    72c8:	e786      	b.n	71d8 <_vfiprintf_r+0xbc>
    72ca:	2300      	movs	r3, #0
    72cc:	9305      	str	r3, [sp, #20]
    72ce:	4618      	mov	r0, r3
    72d0:	250a      	movs	r5, #10
    72d2:	4688      	mov	r8, r1
    72d4:	3101      	adds	r1, #1
    72d6:	f898 2000 	ldrb.w	r2, [r8]
    72da:	3a30      	subs	r2, #48	; 0x30
    72dc:	2a09      	cmp	r2, #9
    72de:	d903      	bls.n	72e8 <_vfiprintf_r+0x1cc>
    72e0:	2b00      	cmp	r3, #0
    72e2:	d0c5      	beq.n	7270 <_vfiprintf_r+0x154>
    72e4:	9005      	str	r0, [sp, #20]
    72e6:	e7c3      	b.n	7270 <_vfiprintf_r+0x154>
    72e8:	fb05 2000 	mla	r0, r5, r0, r2
    72ec:	2301      	movs	r3, #1
    72ee:	e7f0      	b.n	72d2 <_vfiprintf_r+0x1b6>
    72f0:	ab03      	add	r3, sp, #12
    72f2:	9300      	str	r3, [sp, #0]
    72f4:	4622      	mov	r2, r4
    72f6:	4b13      	ldr	r3, [pc, #76]	; (7344 <_vfiprintf_r+0x228>)
    72f8:	a904      	add	r1, sp, #16
    72fa:	4630      	mov	r0, r6
    72fc:	f3af 8000 	nop.w
    7300:	f1b0 3fff 	cmp.w	r0, #4294967295
    7304:	4681      	mov	r9, r0
    7306:	d1d8      	bne.n	72ba <_vfiprintf_r+0x19e>
    7308:	89a3      	ldrh	r3, [r4, #12]
    730a:	065b      	lsls	r3, r3, #25
    730c:	f53f af7d 	bmi.w	720a <_vfiprintf_r+0xee>
    7310:	9809      	ldr	r0, [sp, #36]	; 0x24
    7312:	e77c      	b.n	720e <_vfiprintf_r+0xf2>
    7314:	ab03      	add	r3, sp, #12
    7316:	9300      	str	r3, [sp, #0]
    7318:	4622      	mov	r2, r4
    731a:	4b0a      	ldr	r3, [pc, #40]	; (7344 <_vfiprintf_r+0x228>)
    731c:	a904      	add	r1, sp, #16
    731e:	4630      	mov	r0, r6
    7320:	f000 f888 	bl	7434 <_printf_i>
    7324:	e7ec      	b.n	7300 <_vfiprintf_r+0x1e4>
    7326:	bf00      	nop
    7328:	00009168 	.word	0x00009168
    732c:	000091ac 	.word	0x000091ac
    7330:	00009188 	.word	0x00009188
    7334:	00009148 	.word	0x00009148
    7338:	000091b2 	.word	0x000091b2
    733c:	000091b6 	.word	0x000091b6
    7340:	00000000 	.word	0x00000000
    7344:	000070f9 	.word	0x000070f9

00007348 <_printf_common>:
    7348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    734c:	4691      	mov	r9, r2
    734e:	461f      	mov	r7, r3
    7350:	688a      	ldr	r2, [r1, #8]
    7352:	690b      	ldr	r3, [r1, #16]
    7354:	f8dd 8020 	ldr.w	r8, [sp, #32]
    7358:	4293      	cmp	r3, r2
    735a:	bfb8      	it	lt
    735c:	4613      	movlt	r3, r2
    735e:	f8c9 3000 	str.w	r3, [r9]
    7362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    7366:	4606      	mov	r6, r0
    7368:	460c      	mov	r4, r1
    736a:	b112      	cbz	r2, 7372 <_printf_common+0x2a>
    736c:	3301      	adds	r3, #1
    736e:	f8c9 3000 	str.w	r3, [r9]
    7372:	6823      	ldr	r3, [r4, #0]
    7374:	0699      	lsls	r1, r3, #26
    7376:	bf42      	ittt	mi
    7378:	f8d9 3000 	ldrmi.w	r3, [r9]
    737c:	3302      	addmi	r3, #2
    737e:	f8c9 3000 	strmi.w	r3, [r9]
    7382:	6825      	ldr	r5, [r4, #0]
    7384:	f015 0506 	ands.w	r5, r5, #6
    7388:	d107      	bne.n	739a <_printf_common+0x52>
    738a:	f104 0a19 	add.w	sl, r4, #25
    738e:	68e3      	ldr	r3, [r4, #12]
    7390:	f8d9 2000 	ldr.w	r2, [r9]
    7394:	1a9b      	subs	r3, r3, r2
    7396:	429d      	cmp	r5, r3
    7398:	db29      	blt.n	73ee <_printf_common+0xa6>
    739a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    739e:	6822      	ldr	r2, [r4, #0]
    73a0:	3300      	adds	r3, #0
    73a2:	bf18      	it	ne
    73a4:	2301      	movne	r3, #1
    73a6:	0692      	lsls	r2, r2, #26
    73a8:	d42e      	bmi.n	7408 <_printf_common+0xc0>
    73aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
    73ae:	4639      	mov	r1, r7
    73b0:	4630      	mov	r0, r6
    73b2:	47c0      	blx	r8
    73b4:	3001      	adds	r0, #1
    73b6:	d021      	beq.n	73fc <_printf_common+0xb4>
    73b8:	6823      	ldr	r3, [r4, #0]
    73ba:	68e5      	ldr	r5, [r4, #12]
    73bc:	f8d9 2000 	ldr.w	r2, [r9]
    73c0:	f003 0306 	and.w	r3, r3, #6
    73c4:	2b04      	cmp	r3, #4
    73c6:	bf08      	it	eq
    73c8:	1aad      	subeq	r5, r5, r2
    73ca:	68a3      	ldr	r3, [r4, #8]
    73cc:	6922      	ldr	r2, [r4, #16]
    73ce:	bf0c      	ite	eq
    73d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    73d4:	2500      	movne	r5, #0
    73d6:	4293      	cmp	r3, r2
    73d8:	bfc4      	itt	gt
    73da:	1a9b      	subgt	r3, r3, r2
    73dc:	18ed      	addgt	r5, r5, r3
    73de:	f04f 0900 	mov.w	r9, #0
    73e2:	341a      	adds	r4, #26
    73e4:	454d      	cmp	r5, r9
    73e6:	d11b      	bne.n	7420 <_printf_common+0xd8>
    73e8:	2000      	movs	r0, #0
    73ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73ee:	2301      	movs	r3, #1
    73f0:	4652      	mov	r2, sl
    73f2:	4639      	mov	r1, r7
    73f4:	4630      	mov	r0, r6
    73f6:	47c0      	blx	r8
    73f8:	3001      	adds	r0, #1
    73fa:	d103      	bne.n	7404 <_printf_common+0xbc>
    73fc:	f04f 30ff 	mov.w	r0, #4294967295
    7400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7404:	3501      	adds	r5, #1
    7406:	e7c2      	b.n	738e <_printf_common+0x46>
    7408:	18e1      	adds	r1, r4, r3
    740a:	1c5a      	adds	r2, r3, #1
    740c:	2030      	movs	r0, #48	; 0x30
    740e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    7412:	4422      	add	r2, r4
    7414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    7418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    741c:	3302      	adds	r3, #2
    741e:	e7c4      	b.n	73aa <_printf_common+0x62>
    7420:	2301      	movs	r3, #1
    7422:	4622      	mov	r2, r4
    7424:	4639      	mov	r1, r7
    7426:	4630      	mov	r0, r6
    7428:	47c0      	blx	r8
    742a:	3001      	adds	r0, #1
    742c:	d0e6      	beq.n	73fc <_printf_common+0xb4>
    742e:	f109 0901 	add.w	r9, r9, #1
    7432:	e7d7      	b.n	73e4 <_printf_common+0x9c>

00007434 <_printf_i>:
    7434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7438:	4617      	mov	r7, r2
    743a:	7e0a      	ldrb	r2, [r1, #24]
    743c:	b085      	sub	sp, #20
    743e:	2a6e      	cmp	r2, #110	; 0x6e
    7440:	4698      	mov	r8, r3
    7442:	4606      	mov	r6, r0
    7444:	460c      	mov	r4, r1
    7446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7448:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    744c:	f000 80bc 	beq.w	75c8 <_printf_i+0x194>
    7450:	d81a      	bhi.n	7488 <_printf_i+0x54>
    7452:	2a63      	cmp	r2, #99	; 0x63
    7454:	d02e      	beq.n	74b4 <_printf_i+0x80>
    7456:	d80a      	bhi.n	746e <_printf_i+0x3a>
    7458:	2a00      	cmp	r2, #0
    745a:	f000 80c8 	beq.w	75ee <_printf_i+0x1ba>
    745e:	2a58      	cmp	r2, #88	; 0x58
    7460:	f000 808a 	beq.w	7578 <_printf_i+0x144>
    7464:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7468:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    746c:	e02a      	b.n	74c4 <_printf_i+0x90>
    746e:	2a64      	cmp	r2, #100	; 0x64
    7470:	d001      	beq.n	7476 <_printf_i+0x42>
    7472:	2a69      	cmp	r2, #105	; 0x69
    7474:	d1f6      	bne.n	7464 <_printf_i+0x30>
    7476:	6821      	ldr	r1, [r4, #0]
    7478:	681a      	ldr	r2, [r3, #0]
    747a:	f011 0f80 	tst.w	r1, #128	; 0x80
    747e:	d023      	beq.n	74c8 <_printf_i+0x94>
    7480:	1d11      	adds	r1, r2, #4
    7482:	6019      	str	r1, [r3, #0]
    7484:	6813      	ldr	r3, [r2, #0]
    7486:	e027      	b.n	74d8 <_printf_i+0xa4>
    7488:	2a73      	cmp	r2, #115	; 0x73
    748a:	f000 80b4 	beq.w	75f6 <_printf_i+0x1c2>
    748e:	d808      	bhi.n	74a2 <_printf_i+0x6e>
    7490:	2a6f      	cmp	r2, #111	; 0x6f
    7492:	d02a      	beq.n	74ea <_printf_i+0xb6>
    7494:	2a70      	cmp	r2, #112	; 0x70
    7496:	d1e5      	bne.n	7464 <_printf_i+0x30>
    7498:	680a      	ldr	r2, [r1, #0]
    749a:	f042 0220 	orr.w	r2, r2, #32
    749e:	600a      	str	r2, [r1, #0]
    74a0:	e003      	b.n	74aa <_printf_i+0x76>
    74a2:	2a75      	cmp	r2, #117	; 0x75
    74a4:	d021      	beq.n	74ea <_printf_i+0xb6>
    74a6:	2a78      	cmp	r2, #120	; 0x78
    74a8:	d1dc      	bne.n	7464 <_printf_i+0x30>
    74aa:	2278      	movs	r2, #120	; 0x78
    74ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    74b0:	496e      	ldr	r1, [pc, #440]	; (766c <_printf_i+0x238>)
    74b2:	e064      	b.n	757e <_printf_i+0x14a>
    74b4:	681a      	ldr	r2, [r3, #0]
    74b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    74ba:	1d11      	adds	r1, r2, #4
    74bc:	6019      	str	r1, [r3, #0]
    74be:	6813      	ldr	r3, [r2, #0]
    74c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    74c4:	2301      	movs	r3, #1
    74c6:	e0a3      	b.n	7610 <_printf_i+0x1dc>
    74c8:	f011 0f40 	tst.w	r1, #64	; 0x40
    74cc:	f102 0104 	add.w	r1, r2, #4
    74d0:	6019      	str	r1, [r3, #0]
    74d2:	d0d7      	beq.n	7484 <_printf_i+0x50>
    74d4:	f9b2 3000 	ldrsh.w	r3, [r2]
    74d8:	2b00      	cmp	r3, #0
    74da:	da03      	bge.n	74e4 <_printf_i+0xb0>
    74dc:	222d      	movs	r2, #45	; 0x2d
    74de:	425b      	negs	r3, r3
    74e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    74e4:	4962      	ldr	r1, [pc, #392]	; (7670 <_printf_i+0x23c>)
    74e6:	220a      	movs	r2, #10
    74e8:	e017      	b.n	751a <_printf_i+0xe6>
    74ea:	6820      	ldr	r0, [r4, #0]
    74ec:	6819      	ldr	r1, [r3, #0]
    74ee:	f010 0f80 	tst.w	r0, #128	; 0x80
    74f2:	d003      	beq.n	74fc <_printf_i+0xc8>
    74f4:	1d08      	adds	r0, r1, #4
    74f6:	6018      	str	r0, [r3, #0]
    74f8:	680b      	ldr	r3, [r1, #0]
    74fa:	e006      	b.n	750a <_printf_i+0xd6>
    74fc:	f010 0f40 	tst.w	r0, #64	; 0x40
    7500:	f101 0004 	add.w	r0, r1, #4
    7504:	6018      	str	r0, [r3, #0]
    7506:	d0f7      	beq.n	74f8 <_printf_i+0xc4>
    7508:	880b      	ldrh	r3, [r1, #0]
    750a:	4959      	ldr	r1, [pc, #356]	; (7670 <_printf_i+0x23c>)
    750c:	2a6f      	cmp	r2, #111	; 0x6f
    750e:	bf14      	ite	ne
    7510:	220a      	movne	r2, #10
    7512:	2208      	moveq	r2, #8
    7514:	2000      	movs	r0, #0
    7516:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    751a:	6865      	ldr	r5, [r4, #4]
    751c:	60a5      	str	r5, [r4, #8]
    751e:	2d00      	cmp	r5, #0
    7520:	f2c0 809c 	blt.w	765c <_printf_i+0x228>
    7524:	6820      	ldr	r0, [r4, #0]
    7526:	f020 0004 	bic.w	r0, r0, #4
    752a:	6020      	str	r0, [r4, #0]
    752c:	2b00      	cmp	r3, #0
    752e:	d13f      	bne.n	75b0 <_printf_i+0x17c>
    7530:	2d00      	cmp	r5, #0
    7532:	f040 8095 	bne.w	7660 <_printf_i+0x22c>
    7536:	4675      	mov	r5, lr
    7538:	2a08      	cmp	r2, #8
    753a:	d10b      	bne.n	7554 <_printf_i+0x120>
    753c:	6823      	ldr	r3, [r4, #0]
    753e:	07da      	lsls	r2, r3, #31
    7540:	d508      	bpl.n	7554 <_printf_i+0x120>
    7542:	6923      	ldr	r3, [r4, #16]
    7544:	6862      	ldr	r2, [r4, #4]
    7546:	429a      	cmp	r2, r3
    7548:	bfde      	ittt	le
    754a:	2330      	movle	r3, #48	; 0x30
    754c:	f805 3c01 	strble.w	r3, [r5, #-1]
    7550:	f105 35ff 	addle.w	r5, r5, #4294967295
    7554:	ebae 0305 	sub.w	r3, lr, r5
    7558:	6123      	str	r3, [r4, #16]
    755a:	f8cd 8000 	str.w	r8, [sp]
    755e:	463b      	mov	r3, r7
    7560:	aa03      	add	r2, sp, #12
    7562:	4621      	mov	r1, r4
    7564:	4630      	mov	r0, r6
    7566:	f7ff feef 	bl	7348 <_printf_common>
    756a:	3001      	adds	r0, #1
    756c:	d155      	bne.n	761a <_printf_i+0x1e6>
    756e:	f04f 30ff 	mov.w	r0, #4294967295
    7572:	b005      	add	sp, #20
    7574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7578:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    757c:	493c      	ldr	r1, [pc, #240]	; (7670 <_printf_i+0x23c>)
    757e:	6822      	ldr	r2, [r4, #0]
    7580:	6818      	ldr	r0, [r3, #0]
    7582:	f012 0f80 	tst.w	r2, #128	; 0x80
    7586:	f100 0504 	add.w	r5, r0, #4
    758a:	601d      	str	r5, [r3, #0]
    758c:	d001      	beq.n	7592 <_printf_i+0x15e>
    758e:	6803      	ldr	r3, [r0, #0]
    7590:	e002      	b.n	7598 <_printf_i+0x164>
    7592:	0655      	lsls	r5, r2, #25
    7594:	d5fb      	bpl.n	758e <_printf_i+0x15a>
    7596:	8803      	ldrh	r3, [r0, #0]
    7598:	07d0      	lsls	r0, r2, #31
    759a:	bf44      	itt	mi
    759c:	f042 0220 	orrmi.w	r2, r2, #32
    75a0:	6022      	strmi	r2, [r4, #0]
    75a2:	b91b      	cbnz	r3, 75ac <_printf_i+0x178>
    75a4:	6822      	ldr	r2, [r4, #0]
    75a6:	f022 0220 	bic.w	r2, r2, #32
    75aa:	6022      	str	r2, [r4, #0]
    75ac:	2210      	movs	r2, #16
    75ae:	e7b1      	b.n	7514 <_printf_i+0xe0>
    75b0:	4675      	mov	r5, lr
    75b2:	fbb3 f0f2 	udiv	r0, r3, r2
    75b6:	fb02 3310 	mls	r3, r2, r0, r3
    75ba:	5ccb      	ldrb	r3, [r1, r3]
    75bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
    75c0:	4603      	mov	r3, r0
    75c2:	2800      	cmp	r0, #0
    75c4:	d1f5      	bne.n	75b2 <_printf_i+0x17e>
    75c6:	e7b7      	b.n	7538 <_printf_i+0x104>
    75c8:	6808      	ldr	r0, [r1, #0]
    75ca:	681a      	ldr	r2, [r3, #0]
    75cc:	6949      	ldr	r1, [r1, #20]
    75ce:	f010 0f80 	tst.w	r0, #128	; 0x80
    75d2:	d004      	beq.n	75de <_printf_i+0x1aa>
    75d4:	1d10      	adds	r0, r2, #4
    75d6:	6018      	str	r0, [r3, #0]
    75d8:	6813      	ldr	r3, [r2, #0]
    75da:	6019      	str	r1, [r3, #0]
    75dc:	e007      	b.n	75ee <_printf_i+0x1ba>
    75de:	f010 0f40 	tst.w	r0, #64	; 0x40
    75e2:	f102 0004 	add.w	r0, r2, #4
    75e6:	6018      	str	r0, [r3, #0]
    75e8:	6813      	ldr	r3, [r2, #0]
    75ea:	d0f6      	beq.n	75da <_printf_i+0x1a6>
    75ec:	8019      	strh	r1, [r3, #0]
    75ee:	2300      	movs	r3, #0
    75f0:	6123      	str	r3, [r4, #16]
    75f2:	4675      	mov	r5, lr
    75f4:	e7b1      	b.n	755a <_printf_i+0x126>
    75f6:	681a      	ldr	r2, [r3, #0]
    75f8:	1d11      	adds	r1, r2, #4
    75fa:	6019      	str	r1, [r3, #0]
    75fc:	6815      	ldr	r5, [r2, #0]
    75fe:	6862      	ldr	r2, [r4, #4]
    7600:	2100      	movs	r1, #0
    7602:	4628      	mov	r0, r5
    7604:	f000 fdfc 	bl	8200 <memchr>
    7608:	b108      	cbz	r0, 760e <_printf_i+0x1da>
    760a:	1b40      	subs	r0, r0, r5
    760c:	6060      	str	r0, [r4, #4]
    760e:	6863      	ldr	r3, [r4, #4]
    7610:	6123      	str	r3, [r4, #16]
    7612:	2300      	movs	r3, #0
    7614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    7618:	e79f      	b.n	755a <_printf_i+0x126>
    761a:	6923      	ldr	r3, [r4, #16]
    761c:	462a      	mov	r2, r5
    761e:	4639      	mov	r1, r7
    7620:	4630      	mov	r0, r6
    7622:	47c0      	blx	r8
    7624:	3001      	adds	r0, #1
    7626:	d0a2      	beq.n	756e <_printf_i+0x13a>
    7628:	6823      	ldr	r3, [r4, #0]
    762a:	079b      	lsls	r3, r3, #30
    762c:	d507      	bpl.n	763e <_printf_i+0x20a>
    762e:	2500      	movs	r5, #0
    7630:	f104 0919 	add.w	r9, r4, #25
    7634:	68e3      	ldr	r3, [r4, #12]
    7636:	9a03      	ldr	r2, [sp, #12]
    7638:	1a9b      	subs	r3, r3, r2
    763a:	429d      	cmp	r5, r3
    763c:	db05      	blt.n	764a <_printf_i+0x216>
    763e:	68e0      	ldr	r0, [r4, #12]
    7640:	9b03      	ldr	r3, [sp, #12]
    7642:	4298      	cmp	r0, r3
    7644:	bfb8      	it	lt
    7646:	4618      	movlt	r0, r3
    7648:	e793      	b.n	7572 <_printf_i+0x13e>
    764a:	2301      	movs	r3, #1
    764c:	464a      	mov	r2, r9
    764e:	4639      	mov	r1, r7
    7650:	4630      	mov	r0, r6
    7652:	47c0      	blx	r8
    7654:	3001      	adds	r0, #1
    7656:	d08a      	beq.n	756e <_printf_i+0x13a>
    7658:	3501      	adds	r5, #1
    765a:	e7eb      	b.n	7634 <_printf_i+0x200>
    765c:	2b00      	cmp	r3, #0
    765e:	d1a7      	bne.n	75b0 <_printf_i+0x17c>
    7660:	780b      	ldrb	r3, [r1, #0]
    7662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7666:	f104 0542 	add.w	r5, r4, #66	; 0x42
    766a:	e765      	b.n	7538 <_printf_i+0x104>
    766c:	000091ce 	.word	0x000091ce
    7670:	000091bd 	.word	0x000091bd

00007674 <__svfiscanf_r>:
    7674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7678:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    767c:	f10d 080c 	add.w	r8, sp, #12
    7680:	9301      	str	r3, [sp, #4]
    7682:	2300      	movs	r3, #0
    7684:	9346      	str	r3, [sp, #280]	; 0x118
    7686:	9347      	str	r3, [sp, #284]	; 0x11c
    7688:	4ba0      	ldr	r3, [pc, #640]	; (790c <__svfiscanf_r+0x298>)
    768a:	93a2      	str	r3, [sp, #648]	; 0x288
    768c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 7914 <__svfiscanf_r+0x2a0>
    7690:	4b9f      	ldr	r3, [pc, #636]	; (7910 <__svfiscanf_r+0x29c>)
    7692:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    7696:	4606      	mov	r6, r0
    7698:	460c      	mov	r4, r1
    769a:	93a3      	str	r3, [sp, #652]	; 0x28c
    769c:	4692      	mov	sl, r2
    769e:	270a      	movs	r7, #10
    76a0:	f89a 3000 	ldrb.w	r3, [sl]
    76a4:	2b00      	cmp	r3, #0
    76a6:	f000 812f 	beq.w	7908 <__svfiscanf_r+0x294>
    76aa:	f000 fd83 	bl	81b4 <__locale_ctype_ptr>
    76ae:	f89a b000 	ldrb.w	fp, [sl]
    76b2:	4458      	add	r0, fp
    76b4:	7843      	ldrb	r3, [r0, #1]
    76b6:	f013 0308 	ands.w	r3, r3, #8
    76ba:	d143      	bne.n	7744 <__svfiscanf_r+0xd0>
    76bc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    76c0:	f10a 0501 	add.w	r5, sl, #1
    76c4:	f040 8099 	bne.w	77fa <__svfiscanf_r+0x186>
    76c8:	9345      	str	r3, [sp, #276]	; 0x114
    76ca:	9343      	str	r3, [sp, #268]	; 0x10c
    76cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    76d0:	2b2a      	cmp	r3, #42	; 0x2a
    76d2:	d103      	bne.n	76dc <__svfiscanf_r+0x68>
    76d4:	2310      	movs	r3, #16
    76d6:	9343      	str	r3, [sp, #268]	; 0x10c
    76d8:	f10a 0502 	add.w	r5, sl, #2
    76dc:	7829      	ldrb	r1, [r5, #0]
    76de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    76e2:	2a09      	cmp	r2, #9
    76e4:	46aa      	mov	sl, r5
    76e6:	f105 0501 	add.w	r5, r5, #1
    76ea:	d941      	bls.n	7770 <__svfiscanf_r+0xfc>
    76ec:	2203      	movs	r2, #3
    76ee:	4889      	ldr	r0, [pc, #548]	; (7914 <__svfiscanf_r+0x2a0>)
    76f0:	f000 fd86 	bl	8200 <memchr>
    76f4:	b138      	cbz	r0, 7706 <__svfiscanf_r+0x92>
    76f6:	eba0 0309 	sub.w	r3, r0, r9
    76fa:	2001      	movs	r0, #1
    76fc:	4098      	lsls	r0, r3
    76fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    7700:	4318      	orrs	r0, r3
    7702:	9043      	str	r0, [sp, #268]	; 0x10c
    7704:	46aa      	mov	sl, r5
    7706:	f89a 3000 	ldrb.w	r3, [sl]
    770a:	2b67      	cmp	r3, #103	; 0x67
    770c:	f10a 0501 	add.w	r5, sl, #1
    7710:	d84a      	bhi.n	77a8 <__svfiscanf_r+0x134>
    7712:	2b65      	cmp	r3, #101	; 0x65
    7714:	f080 80b7 	bcs.w	7886 <__svfiscanf_r+0x212>
    7718:	2b47      	cmp	r3, #71	; 0x47
    771a:	d82f      	bhi.n	777c <__svfiscanf_r+0x108>
    771c:	2b45      	cmp	r3, #69	; 0x45
    771e:	f080 80b2 	bcs.w	7886 <__svfiscanf_r+0x212>
    7722:	2b00      	cmp	r3, #0
    7724:	f000 8082 	beq.w	782c <__svfiscanf_r+0x1b8>
    7728:	2b25      	cmp	r3, #37	; 0x25
    772a:	d066      	beq.n	77fa <__svfiscanf_r+0x186>
    772c:	2303      	movs	r3, #3
    772e:	9349      	str	r3, [sp, #292]	; 0x124
    7730:	9744      	str	r7, [sp, #272]	; 0x110
    7732:	e045      	b.n	77c0 <__svfiscanf_r+0x14c>
    7734:	9947      	ldr	r1, [sp, #284]	; 0x11c
    7736:	3101      	adds	r1, #1
    7738:	9147      	str	r1, [sp, #284]	; 0x11c
    773a:	6861      	ldr	r1, [r4, #4]
    773c:	3301      	adds	r3, #1
    773e:	3901      	subs	r1, #1
    7740:	6061      	str	r1, [r4, #4]
    7742:	6023      	str	r3, [r4, #0]
    7744:	6863      	ldr	r3, [r4, #4]
    7746:	2b00      	cmp	r3, #0
    7748:	dd0b      	ble.n	7762 <__svfiscanf_r+0xee>
    774a:	f000 fd33 	bl	81b4 <__locale_ctype_ptr>
    774e:	6823      	ldr	r3, [r4, #0]
    7750:	7819      	ldrb	r1, [r3, #0]
    7752:	4408      	add	r0, r1
    7754:	7841      	ldrb	r1, [r0, #1]
    7756:	070d      	lsls	r5, r1, #28
    7758:	d4ec      	bmi.n	7734 <__svfiscanf_r+0xc0>
    775a:	f10a 0501 	add.w	r5, sl, #1
    775e:	46aa      	mov	sl, r5
    7760:	e79e      	b.n	76a0 <__svfiscanf_r+0x2c>
    7762:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    7764:	4621      	mov	r1, r4
    7766:	4630      	mov	r0, r6
    7768:	4798      	blx	r3
    776a:	2800      	cmp	r0, #0
    776c:	d0ed      	beq.n	774a <__svfiscanf_r+0xd6>
    776e:	e7f4      	b.n	775a <__svfiscanf_r+0xe6>
    7770:	9b45      	ldr	r3, [sp, #276]	; 0x114
    7772:	fb07 1303 	mla	r3, r7, r3, r1
    7776:	3b30      	subs	r3, #48	; 0x30
    7778:	9345      	str	r3, [sp, #276]	; 0x114
    777a:	e7af      	b.n	76dc <__svfiscanf_r+0x68>
    777c:	2b5b      	cmp	r3, #91	; 0x5b
    777e:	d061      	beq.n	7844 <__svfiscanf_r+0x1d0>
    7780:	d80c      	bhi.n	779c <__svfiscanf_r+0x128>
    7782:	2b58      	cmp	r3, #88	; 0x58
    7784:	d1d2      	bne.n	772c <__svfiscanf_r+0xb8>
    7786:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    7788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    778c:	9243      	str	r2, [sp, #268]	; 0x10c
    778e:	2210      	movs	r2, #16
    7790:	9244      	str	r2, [sp, #272]	; 0x110
    7792:	2b6f      	cmp	r3, #111	; 0x6f
    7794:	bfb4      	ite	lt
    7796:	2303      	movlt	r3, #3
    7798:	2304      	movge	r3, #4
    779a:	e010      	b.n	77be <__svfiscanf_r+0x14a>
    779c:	2b63      	cmp	r3, #99	; 0x63
    779e:	d05c      	beq.n	785a <__svfiscanf_r+0x1e6>
    77a0:	2b64      	cmp	r3, #100	; 0x64
    77a2:	d1c3      	bne.n	772c <__svfiscanf_r+0xb8>
    77a4:	9744      	str	r7, [sp, #272]	; 0x110
    77a6:	e7f4      	b.n	7792 <__svfiscanf_r+0x11e>
    77a8:	2b70      	cmp	r3, #112	; 0x70
    77aa:	d042      	beq.n	7832 <__svfiscanf_r+0x1be>
    77ac:	d81d      	bhi.n	77ea <__svfiscanf_r+0x176>
    77ae:	2b6e      	cmp	r3, #110	; 0x6e
    77b0:	d059      	beq.n	7866 <__svfiscanf_r+0x1f2>
    77b2:	d843      	bhi.n	783c <__svfiscanf_r+0x1c8>
    77b4:	2b69      	cmp	r3, #105	; 0x69
    77b6:	d1b9      	bne.n	772c <__svfiscanf_r+0xb8>
    77b8:	2300      	movs	r3, #0
    77ba:	9344      	str	r3, [sp, #272]	; 0x110
    77bc:	2303      	movs	r3, #3
    77be:	9349      	str	r3, [sp, #292]	; 0x124
    77c0:	6863      	ldr	r3, [r4, #4]
    77c2:	2b00      	cmp	r3, #0
    77c4:	dd61      	ble.n	788a <__svfiscanf_r+0x216>
    77c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    77c8:	0659      	lsls	r1, r3, #25
    77ca:	d56f      	bpl.n	78ac <__svfiscanf_r+0x238>
    77cc:	9b49      	ldr	r3, [sp, #292]	; 0x124
    77ce:	2b02      	cmp	r3, #2
    77d0:	dc7c      	bgt.n	78cc <__svfiscanf_r+0x258>
    77d2:	ab01      	add	r3, sp, #4
    77d4:	4622      	mov	r2, r4
    77d6:	a943      	add	r1, sp, #268	; 0x10c
    77d8:	4630      	mov	r0, r6
    77da:	f000 f8c7 	bl	796c <_scanf_chars>
    77de:	2801      	cmp	r0, #1
    77e0:	f000 8092 	beq.w	7908 <__svfiscanf_r+0x294>
    77e4:	2802      	cmp	r0, #2
    77e6:	d1ba      	bne.n	775e <__svfiscanf_r+0xea>
    77e8:	e01d      	b.n	7826 <__svfiscanf_r+0x1b2>
    77ea:	2b75      	cmp	r3, #117	; 0x75
    77ec:	d0da      	beq.n	77a4 <__svfiscanf_r+0x130>
    77ee:	2b78      	cmp	r3, #120	; 0x78
    77f0:	d0c9      	beq.n	7786 <__svfiscanf_r+0x112>
    77f2:	2b73      	cmp	r3, #115	; 0x73
    77f4:	d19a      	bne.n	772c <__svfiscanf_r+0xb8>
    77f6:	2302      	movs	r3, #2
    77f8:	e7e1      	b.n	77be <__svfiscanf_r+0x14a>
    77fa:	6863      	ldr	r3, [r4, #4]
    77fc:	2b00      	cmp	r3, #0
    77fe:	dd0c      	ble.n	781a <__svfiscanf_r+0x1a6>
    7800:	6823      	ldr	r3, [r4, #0]
    7802:	781a      	ldrb	r2, [r3, #0]
    7804:	4593      	cmp	fp, r2
    7806:	d17f      	bne.n	7908 <__svfiscanf_r+0x294>
    7808:	3301      	adds	r3, #1
    780a:	6862      	ldr	r2, [r4, #4]
    780c:	6023      	str	r3, [r4, #0]
    780e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    7810:	3a01      	subs	r2, #1
    7812:	3301      	adds	r3, #1
    7814:	6062      	str	r2, [r4, #4]
    7816:	9347      	str	r3, [sp, #284]	; 0x11c
    7818:	e7a1      	b.n	775e <__svfiscanf_r+0xea>
    781a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    781c:	4621      	mov	r1, r4
    781e:	4630      	mov	r0, r6
    7820:	4798      	blx	r3
    7822:	2800      	cmp	r0, #0
    7824:	d0ec      	beq.n	7800 <__svfiscanf_r+0x18c>
    7826:	9846      	ldr	r0, [sp, #280]	; 0x118
    7828:	2800      	cmp	r0, #0
    782a:	d163      	bne.n	78f4 <__svfiscanf_r+0x280>
    782c:	f04f 30ff 	mov.w	r0, #4294967295
    7830:	e066      	b.n	7900 <__svfiscanf_r+0x28c>
    7832:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    7834:	f042 0220 	orr.w	r2, r2, #32
    7838:	9243      	str	r2, [sp, #268]	; 0x10c
    783a:	e7a4      	b.n	7786 <__svfiscanf_r+0x112>
    783c:	2308      	movs	r3, #8
    783e:	9344      	str	r3, [sp, #272]	; 0x110
    7840:	2304      	movs	r3, #4
    7842:	e7bc      	b.n	77be <__svfiscanf_r+0x14a>
    7844:	4629      	mov	r1, r5
    7846:	4640      	mov	r0, r8
    7848:	f000 fa8e 	bl	7d68 <__sccl>
    784c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    784e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7852:	9343      	str	r3, [sp, #268]	; 0x10c
    7854:	4605      	mov	r5, r0
    7856:	2301      	movs	r3, #1
    7858:	e7b1      	b.n	77be <__svfiscanf_r+0x14a>
    785a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    785c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7860:	9343      	str	r3, [sp, #268]	; 0x10c
    7862:	2300      	movs	r3, #0
    7864:	e7ab      	b.n	77be <__svfiscanf_r+0x14a>
    7866:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    7868:	06d0      	lsls	r0, r2, #27
    786a:	f53f af78 	bmi.w	775e <__svfiscanf_r+0xea>
    786e:	f012 0f01 	tst.w	r2, #1
    7872:	9a01      	ldr	r2, [sp, #4]
    7874:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    7876:	f102 0104 	add.w	r1, r2, #4
    787a:	9101      	str	r1, [sp, #4]
    787c:	6812      	ldr	r2, [r2, #0]
    787e:	bf14      	ite	ne
    7880:	8013      	strhne	r3, [r2, #0]
    7882:	6013      	streq	r3, [r2, #0]
    7884:	e76b      	b.n	775e <__svfiscanf_r+0xea>
    7886:	2305      	movs	r3, #5
    7888:	e799      	b.n	77be <__svfiscanf_r+0x14a>
    788a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    788c:	4621      	mov	r1, r4
    788e:	4630      	mov	r0, r6
    7890:	4798      	blx	r3
    7892:	2800      	cmp	r0, #0
    7894:	d097      	beq.n	77c6 <__svfiscanf_r+0x152>
    7896:	e7c6      	b.n	7826 <__svfiscanf_r+0x1b2>
    7898:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    789a:	3201      	adds	r2, #1
    789c:	9247      	str	r2, [sp, #284]	; 0x11c
    789e:	6862      	ldr	r2, [r4, #4]
    78a0:	3a01      	subs	r2, #1
    78a2:	2a00      	cmp	r2, #0
    78a4:	6062      	str	r2, [r4, #4]
    78a6:	dd0a      	ble.n	78be <__svfiscanf_r+0x24a>
    78a8:	3301      	adds	r3, #1
    78aa:	6023      	str	r3, [r4, #0]
    78ac:	f000 fc82 	bl	81b4 <__locale_ctype_ptr>
    78b0:	6823      	ldr	r3, [r4, #0]
    78b2:	781a      	ldrb	r2, [r3, #0]
    78b4:	4410      	add	r0, r2
    78b6:	7842      	ldrb	r2, [r0, #1]
    78b8:	0712      	lsls	r2, r2, #28
    78ba:	d4ed      	bmi.n	7898 <__svfiscanf_r+0x224>
    78bc:	e786      	b.n	77cc <__svfiscanf_r+0x158>
    78be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    78c0:	4621      	mov	r1, r4
    78c2:	4630      	mov	r0, r6
    78c4:	4798      	blx	r3
    78c6:	2800      	cmp	r0, #0
    78c8:	d0f0      	beq.n	78ac <__svfiscanf_r+0x238>
    78ca:	e7ac      	b.n	7826 <__svfiscanf_r+0x1b2>
    78cc:	2b04      	cmp	r3, #4
    78ce:	dc06      	bgt.n	78de <__svfiscanf_r+0x26a>
    78d0:	ab01      	add	r3, sp, #4
    78d2:	4622      	mov	r2, r4
    78d4:	a943      	add	r1, sp, #268	; 0x10c
    78d6:	4630      	mov	r0, r6
    78d8:	f000 f8ac 	bl	7a34 <_scanf_i>
    78dc:	e77f      	b.n	77de <__svfiscanf_r+0x16a>
    78de:	4b0e      	ldr	r3, [pc, #56]	; (7918 <__svfiscanf_r+0x2a4>)
    78e0:	2b00      	cmp	r3, #0
    78e2:	f43f af3c 	beq.w	775e <__svfiscanf_r+0xea>
    78e6:	ab01      	add	r3, sp, #4
    78e8:	4622      	mov	r2, r4
    78ea:	a943      	add	r1, sp, #268	; 0x10c
    78ec:	4630      	mov	r0, r6
    78ee:	f3af 8000 	nop.w
    78f2:	e774      	b.n	77de <__svfiscanf_r+0x16a>
    78f4:	89a3      	ldrh	r3, [r4, #12]
    78f6:	f013 0f40 	tst.w	r3, #64	; 0x40
    78fa:	bf18      	it	ne
    78fc:	f04f 30ff 	movne.w	r0, #4294967295
    7900:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    7904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7908:	9846      	ldr	r0, [sp, #280]	; 0x118
    790a:	e7f9      	b.n	7900 <__svfiscanf_r+0x28c>
    790c:	00008085 	.word	0x00008085
    7910:	00007c55 	.word	0x00007c55
    7914:	000091b2 	.word	0x000091b2
    7918:	00000000 	.word	0x00000000

0000791c <_vfiscanf_r>:
    791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7920:	460c      	mov	r4, r1
    7922:	4616      	mov	r6, r2
    7924:	461f      	mov	r7, r3
    7926:	4605      	mov	r5, r0
    7928:	b118      	cbz	r0, 7932 <_vfiscanf_r+0x16>
    792a:	6983      	ldr	r3, [r0, #24]
    792c:	b90b      	cbnz	r3, 7932 <_vfiscanf_r+0x16>
    792e:	f7fe fda7 	bl	6480 <__sinit>
    7932:	4b0b      	ldr	r3, [pc, #44]	; (7960 <_vfiscanf_r+0x44>)
    7934:	429c      	cmp	r4, r3
    7936:	d108      	bne.n	794a <_vfiscanf_r+0x2e>
    7938:	686c      	ldr	r4, [r5, #4]
    793a:	463b      	mov	r3, r7
    793c:	4632      	mov	r2, r6
    793e:	4621      	mov	r1, r4
    7940:	4628      	mov	r0, r5
    7942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7946:	f7ff be95 	b.w	7674 <__svfiscanf_r>
    794a:	4b06      	ldr	r3, [pc, #24]	; (7964 <_vfiscanf_r+0x48>)
    794c:	429c      	cmp	r4, r3
    794e:	d101      	bne.n	7954 <_vfiscanf_r+0x38>
    7950:	68ac      	ldr	r4, [r5, #8]
    7952:	e7f2      	b.n	793a <_vfiscanf_r+0x1e>
    7954:	4b04      	ldr	r3, [pc, #16]	; (7968 <_vfiscanf_r+0x4c>)
    7956:	429c      	cmp	r4, r3
    7958:	bf08      	it	eq
    795a:	68ec      	ldreq	r4, [r5, #12]
    795c:	e7ed      	b.n	793a <_vfiscanf_r+0x1e>
    795e:	bf00      	nop
    7960:	00009168 	.word	0x00009168
    7964:	00009188 	.word	0x00009188
    7968:	00009148 	.word	0x00009148

0000796c <_scanf_chars>:
    796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7970:	4615      	mov	r5, r2
    7972:	688a      	ldr	r2, [r1, #8]
    7974:	4680      	mov	r8, r0
    7976:	460c      	mov	r4, r1
    7978:	b932      	cbnz	r2, 7988 <_scanf_chars+0x1c>
    797a:	698a      	ldr	r2, [r1, #24]
    797c:	2a00      	cmp	r2, #0
    797e:	bf0c      	ite	eq
    7980:	2201      	moveq	r2, #1
    7982:	f04f 32ff 	movne.w	r2, #4294967295
    7986:	608a      	str	r2, [r1, #8]
    7988:	6822      	ldr	r2, [r4, #0]
    798a:	06d1      	lsls	r1, r2, #27
    798c:	bf5f      	itttt	pl
    798e:	681a      	ldrpl	r2, [r3, #0]
    7990:	1d11      	addpl	r1, r2, #4
    7992:	6019      	strpl	r1, [r3, #0]
    7994:	6817      	ldrpl	r7, [r2, #0]
    7996:	2600      	movs	r6, #0
    7998:	69a3      	ldr	r3, [r4, #24]
    799a:	b1db      	cbz	r3, 79d4 <_scanf_chars+0x68>
    799c:	2b01      	cmp	r3, #1
    799e:	d107      	bne.n	79b0 <_scanf_chars+0x44>
    79a0:	682b      	ldr	r3, [r5, #0]
    79a2:	6962      	ldr	r2, [r4, #20]
    79a4:	781b      	ldrb	r3, [r3, #0]
    79a6:	5cd3      	ldrb	r3, [r2, r3]
    79a8:	b9a3      	cbnz	r3, 79d4 <_scanf_chars+0x68>
    79aa:	2e00      	cmp	r6, #0
    79ac:	d132      	bne.n	7a14 <_scanf_chars+0xa8>
    79ae:	e006      	b.n	79be <_scanf_chars+0x52>
    79b0:	2b02      	cmp	r3, #2
    79b2:	d007      	beq.n	79c4 <_scanf_chars+0x58>
    79b4:	2e00      	cmp	r6, #0
    79b6:	d12d      	bne.n	7a14 <_scanf_chars+0xa8>
    79b8:	69a3      	ldr	r3, [r4, #24]
    79ba:	2b01      	cmp	r3, #1
    79bc:	d12a      	bne.n	7a14 <_scanf_chars+0xa8>
    79be:	2001      	movs	r0, #1
    79c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79c4:	f000 fbf6 	bl	81b4 <__locale_ctype_ptr>
    79c8:	682b      	ldr	r3, [r5, #0]
    79ca:	781b      	ldrb	r3, [r3, #0]
    79cc:	4418      	add	r0, r3
    79ce:	7843      	ldrb	r3, [r0, #1]
    79d0:	071b      	lsls	r3, r3, #28
    79d2:	d4ef      	bmi.n	79b4 <_scanf_chars+0x48>
    79d4:	6823      	ldr	r3, [r4, #0]
    79d6:	06da      	lsls	r2, r3, #27
    79d8:	bf5e      	ittt	pl
    79da:	682b      	ldrpl	r3, [r5, #0]
    79dc:	781b      	ldrbpl	r3, [r3, #0]
    79de:	703b      	strbpl	r3, [r7, #0]
    79e0:	682a      	ldr	r2, [r5, #0]
    79e2:	686b      	ldr	r3, [r5, #4]
    79e4:	f102 0201 	add.w	r2, r2, #1
    79e8:	602a      	str	r2, [r5, #0]
    79ea:	68a2      	ldr	r2, [r4, #8]
    79ec:	f103 33ff 	add.w	r3, r3, #4294967295
    79f0:	f102 32ff 	add.w	r2, r2, #4294967295
    79f4:	606b      	str	r3, [r5, #4]
    79f6:	f106 0601 	add.w	r6, r6, #1
    79fa:	bf58      	it	pl
    79fc:	3701      	addpl	r7, #1
    79fe:	60a2      	str	r2, [r4, #8]
    7a00:	b142      	cbz	r2, 7a14 <_scanf_chars+0xa8>
    7a02:	2b00      	cmp	r3, #0
    7a04:	dcc8      	bgt.n	7998 <_scanf_chars+0x2c>
    7a06:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    7a0a:	4629      	mov	r1, r5
    7a0c:	4640      	mov	r0, r8
    7a0e:	4798      	blx	r3
    7a10:	2800      	cmp	r0, #0
    7a12:	d0c1      	beq.n	7998 <_scanf_chars+0x2c>
    7a14:	6823      	ldr	r3, [r4, #0]
    7a16:	f013 0310 	ands.w	r3, r3, #16
    7a1a:	d105      	bne.n	7a28 <_scanf_chars+0xbc>
    7a1c:	68e2      	ldr	r2, [r4, #12]
    7a1e:	3201      	adds	r2, #1
    7a20:	60e2      	str	r2, [r4, #12]
    7a22:	69a2      	ldr	r2, [r4, #24]
    7a24:	b102      	cbz	r2, 7a28 <_scanf_chars+0xbc>
    7a26:	703b      	strb	r3, [r7, #0]
    7a28:	6923      	ldr	r3, [r4, #16]
    7a2a:	441e      	add	r6, r3
    7a2c:	6126      	str	r6, [r4, #16]
    7a2e:	2000      	movs	r0, #0
    7a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007a34 <_scanf_i>:
    7a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a38:	469a      	mov	sl, r3
    7a3a:	4b74      	ldr	r3, [pc, #464]	; (7c0c <_scanf_i+0x1d8>)
    7a3c:	460c      	mov	r4, r1
    7a3e:	4683      	mov	fp, r0
    7a40:	4616      	mov	r6, r2
    7a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    7a46:	b087      	sub	sp, #28
    7a48:	ab03      	add	r3, sp, #12
    7a4a:	68a7      	ldr	r7, [r4, #8]
    7a4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    7a50:	4b6f      	ldr	r3, [pc, #444]	; (7c10 <_scanf_i+0x1dc>)
    7a52:	69a1      	ldr	r1, [r4, #24]
    7a54:	4a6f      	ldr	r2, [pc, #444]	; (7c14 <_scanf_i+0x1e0>)
    7a56:	2903      	cmp	r1, #3
    7a58:	bf18      	it	ne
    7a5a:	461a      	movne	r2, r3
    7a5c:	1e7b      	subs	r3, r7, #1
    7a5e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    7a62:	bf84      	itt	hi
    7a64:	f240 135d 	movwhi	r3, #349	; 0x15d
    7a68:	60a3      	strhi	r3, [r4, #8]
    7a6a:	6823      	ldr	r3, [r4, #0]
    7a6c:	9200      	str	r2, [sp, #0]
    7a6e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    7a72:	bf88      	it	hi
    7a74:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    7a78:	f104 091c 	add.w	r9, r4, #28
    7a7c:	6023      	str	r3, [r4, #0]
    7a7e:	bf8c      	ite	hi
    7a80:	197f      	addhi	r7, r7, r5
    7a82:	2700      	movls	r7, #0
    7a84:	464b      	mov	r3, r9
    7a86:	f04f 0800 	mov.w	r8, #0
    7a8a:	9301      	str	r3, [sp, #4]
    7a8c:	6831      	ldr	r1, [r6, #0]
    7a8e:	ab03      	add	r3, sp, #12
    7a90:	2202      	movs	r2, #2
    7a92:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    7a96:	7809      	ldrb	r1, [r1, #0]
    7a98:	f000 fbb2 	bl	8200 <memchr>
    7a9c:	9b01      	ldr	r3, [sp, #4]
    7a9e:	b328      	cbz	r0, 7aec <_scanf_i+0xb8>
    7aa0:	f1b8 0f01 	cmp.w	r8, #1
    7aa4:	d156      	bne.n	7b54 <_scanf_i+0x120>
    7aa6:	6862      	ldr	r2, [r4, #4]
    7aa8:	b92a      	cbnz	r2, 7ab6 <_scanf_i+0x82>
    7aaa:	2208      	movs	r2, #8
    7aac:	6062      	str	r2, [r4, #4]
    7aae:	6822      	ldr	r2, [r4, #0]
    7ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    7ab4:	6022      	str	r2, [r4, #0]
    7ab6:	6822      	ldr	r2, [r4, #0]
    7ab8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    7abc:	6022      	str	r2, [r4, #0]
    7abe:	68a2      	ldr	r2, [r4, #8]
    7ac0:	1e51      	subs	r1, r2, #1
    7ac2:	60a1      	str	r1, [r4, #8]
    7ac4:	b192      	cbz	r2, 7aec <_scanf_i+0xb8>
    7ac6:	6832      	ldr	r2, [r6, #0]
    7ac8:	1c51      	adds	r1, r2, #1
    7aca:	6031      	str	r1, [r6, #0]
    7acc:	7812      	ldrb	r2, [r2, #0]
    7ace:	701a      	strb	r2, [r3, #0]
    7ad0:	1c5d      	adds	r5, r3, #1
    7ad2:	6873      	ldr	r3, [r6, #4]
    7ad4:	3b01      	subs	r3, #1
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	6073      	str	r3, [r6, #4]
    7ada:	dc06      	bgt.n	7aea <_scanf_i+0xb6>
    7adc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    7ae0:	4631      	mov	r1, r6
    7ae2:	4658      	mov	r0, fp
    7ae4:	4798      	blx	r3
    7ae6:	2800      	cmp	r0, #0
    7ae8:	d176      	bne.n	7bd8 <_scanf_i+0x1a4>
    7aea:	462b      	mov	r3, r5
    7aec:	f108 0801 	add.w	r8, r8, #1
    7af0:	f1b8 0f03 	cmp.w	r8, #3
    7af4:	d1c9      	bne.n	7a8a <_scanf_i+0x56>
    7af6:	6862      	ldr	r2, [r4, #4]
    7af8:	b90a      	cbnz	r2, 7afe <_scanf_i+0xca>
    7afa:	220a      	movs	r2, #10
    7afc:	6062      	str	r2, [r4, #4]
    7afe:	6862      	ldr	r2, [r4, #4]
    7b00:	4945      	ldr	r1, [pc, #276]	; (7c18 <_scanf_i+0x1e4>)
    7b02:	6960      	ldr	r0, [r4, #20]
    7b04:	9301      	str	r3, [sp, #4]
    7b06:	1a89      	subs	r1, r1, r2
    7b08:	f000 f92e 	bl	7d68 <__sccl>
    7b0c:	9b01      	ldr	r3, [sp, #4]
    7b0e:	f04f 0800 	mov.w	r8, #0
    7b12:	461d      	mov	r5, r3
    7b14:	68a3      	ldr	r3, [r4, #8]
    7b16:	2b00      	cmp	r3, #0
    7b18:	d038      	beq.n	7b8c <_scanf_i+0x158>
    7b1a:	6831      	ldr	r1, [r6, #0]
    7b1c:	6960      	ldr	r0, [r4, #20]
    7b1e:	780a      	ldrb	r2, [r1, #0]
    7b20:	5c80      	ldrb	r0, [r0, r2]
    7b22:	2800      	cmp	r0, #0
    7b24:	d032      	beq.n	7b8c <_scanf_i+0x158>
    7b26:	2a30      	cmp	r2, #48	; 0x30
    7b28:	6822      	ldr	r2, [r4, #0]
    7b2a:	d121      	bne.n	7b70 <_scanf_i+0x13c>
    7b2c:	0510      	lsls	r0, r2, #20
    7b2e:	d51f      	bpl.n	7b70 <_scanf_i+0x13c>
    7b30:	f108 0801 	add.w	r8, r8, #1
    7b34:	b117      	cbz	r7, 7b3c <_scanf_i+0x108>
    7b36:	3301      	adds	r3, #1
    7b38:	3f01      	subs	r7, #1
    7b3a:	60a3      	str	r3, [r4, #8]
    7b3c:	6873      	ldr	r3, [r6, #4]
    7b3e:	3b01      	subs	r3, #1
    7b40:	2b00      	cmp	r3, #0
    7b42:	6073      	str	r3, [r6, #4]
    7b44:	dd1b      	ble.n	7b7e <_scanf_i+0x14a>
    7b46:	6833      	ldr	r3, [r6, #0]
    7b48:	3301      	adds	r3, #1
    7b4a:	6033      	str	r3, [r6, #0]
    7b4c:	68a3      	ldr	r3, [r4, #8]
    7b4e:	3b01      	subs	r3, #1
    7b50:	60a3      	str	r3, [r4, #8]
    7b52:	e7df      	b.n	7b14 <_scanf_i+0xe0>
    7b54:	f1b8 0f02 	cmp.w	r8, #2
    7b58:	d1b1      	bne.n	7abe <_scanf_i+0x8a>
    7b5a:	6822      	ldr	r2, [r4, #0]
    7b5c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    7b60:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7b64:	d1c2      	bne.n	7aec <_scanf_i+0xb8>
    7b66:	2110      	movs	r1, #16
    7b68:	6061      	str	r1, [r4, #4]
    7b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    7b6e:	e7a5      	b.n	7abc <_scanf_i+0x88>
    7b70:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    7b74:	6022      	str	r2, [r4, #0]
    7b76:	780b      	ldrb	r3, [r1, #0]
    7b78:	702b      	strb	r3, [r5, #0]
    7b7a:	3501      	adds	r5, #1
    7b7c:	e7de      	b.n	7b3c <_scanf_i+0x108>
    7b7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    7b82:	4631      	mov	r1, r6
    7b84:	4658      	mov	r0, fp
    7b86:	4798      	blx	r3
    7b88:	2800      	cmp	r0, #0
    7b8a:	d0df      	beq.n	7b4c <_scanf_i+0x118>
    7b8c:	6823      	ldr	r3, [r4, #0]
    7b8e:	05d9      	lsls	r1, r3, #23
    7b90:	d50c      	bpl.n	7bac <_scanf_i+0x178>
    7b92:	454d      	cmp	r5, r9
    7b94:	d908      	bls.n	7ba8 <_scanf_i+0x174>
    7b96:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    7b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    7b9e:	4632      	mov	r2, r6
    7ba0:	4658      	mov	r0, fp
    7ba2:	4798      	blx	r3
    7ba4:	1e6f      	subs	r7, r5, #1
    7ba6:	463d      	mov	r5, r7
    7ba8:	454d      	cmp	r5, r9
    7baa:	d02c      	beq.n	7c06 <_scanf_i+0x1d2>
    7bac:	6822      	ldr	r2, [r4, #0]
    7bae:	f012 0210 	ands.w	r2, r2, #16
    7bb2:	d11e      	bne.n	7bf2 <_scanf_i+0x1be>
    7bb4:	702a      	strb	r2, [r5, #0]
    7bb6:	6863      	ldr	r3, [r4, #4]
    7bb8:	9e00      	ldr	r6, [sp, #0]
    7bba:	4649      	mov	r1, r9
    7bbc:	4658      	mov	r0, fp
    7bbe:	47b0      	blx	r6
    7bc0:	6822      	ldr	r2, [r4, #0]
    7bc2:	f8da 3000 	ldr.w	r3, [sl]
    7bc6:	f012 0f20 	tst.w	r2, #32
    7bca:	d008      	beq.n	7bde <_scanf_i+0x1aa>
    7bcc:	1d1a      	adds	r2, r3, #4
    7bce:	f8ca 2000 	str.w	r2, [sl]
    7bd2:	681b      	ldr	r3, [r3, #0]
    7bd4:	6018      	str	r0, [r3, #0]
    7bd6:	e009      	b.n	7bec <_scanf_i+0x1b8>
    7bd8:	f04f 0800 	mov.w	r8, #0
    7bdc:	e7d6      	b.n	7b8c <_scanf_i+0x158>
    7bde:	07d2      	lsls	r2, r2, #31
    7be0:	d5f4      	bpl.n	7bcc <_scanf_i+0x198>
    7be2:	1d1a      	adds	r2, r3, #4
    7be4:	f8ca 2000 	str.w	r2, [sl]
    7be8:	681b      	ldr	r3, [r3, #0]
    7bea:	8018      	strh	r0, [r3, #0]
    7bec:	68e3      	ldr	r3, [r4, #12]
    7bee:	3301      	adds	r3, #1
    7bf0:	60e3      	str	r3, [r4, #12]
    7bf2:	eba5 0509 	sub.w	r5, r5, r9
    7bf6:	44a8      	add	r8, r5
    7bf8:	6925      	ldr	r5, [r4, #16]
    7bfa:	4445      	add	r5, r8
    7bfc:	6125      	str	r5, [r4, #16]
    7bfe:	2000      	movs	r0, #0
    7c00:	b007      	add	sp, #28
    7c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c06:	2001      	movs	r0, #1
    7c08:	e7fa      	b.n	7c00 <_scanf_i+0x1cc>
    7c0a:	bf00      	nop
    7c0c:	000091e0 	.word	0x000091e0
    7c10:	00007fe9 	.word	0x00007fe9
    7c14:	00007ec9 	.word	0x00007ec9
    7c18:	000091fc 	.word	0x000091fc

00007c1c <_read_r>:
    7c1c:	b538      	push	{r3, r4, r5, lr}
    7c1e:	4c07      	ldr	r4, [pc, #28]	; (7c3c <_read_r+0x20>)
    7c20:	4605      	mov	r5, r0
    7c22:	4608      	mov	r0, r1
    7c24:	4611      	mov	r1, r2
    7c26:	2200      	movs	r2, #0
    7c28:	6022      	str	r2, [r4, #0]
    7c2a:	461a      	mov	r2, r3
    7c2c:	f7fd fd56 	bl	56dc <_read>
    7c30:	1c43      	adds	r3, r0, #1
    7c32:	d102      	bne.n	7c3a <_read_r+0x1e>
    7c34:	6823      	ldr	r3, [r4, #0]
    7c36:	b103      	cbz	r3, 7c3a <_read_r+0x1e>
    7c38:	602b      	str	r3, [r5, #0]
    7c3a:	bd38      	pop	{r3, r4, r5, pc}
    7c3c:	20001014 	.word	0x20001014

00007c40 <lflush>:
    7c40:	8983      	ldrh	r3, [r0, #12]
    7c42:	f003 0309 	and.w	r3, r3, #9
    7c46:	2b09      	cmp	r3, #9
    7c48:	d101      	bne.n	7c4e <lflush+0xe>
    7c4a:	f7fe bbc7 	b.w	63dc <fflush>
    7c4e:	2000      	movs	r0, #0
    7c50:	4770      	bx	lr
	...

00007c54 <__srefill_r>:
    7c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c56:	460c      	mov	r4, r1
    7c58:	4605      	mov	r5, r0
    7c5a:	b118      	cbz	r0, 7c64 <__srefill_r+0x10>
    7c5c:	6983      	ldr	r3, [r0, #24]
    7c5e:	b90b      	cbnz	r3, 7c64 <__srefill_r+0x10>
    7c60:	f7fe fc0e 	bl	6480 <__sinit>
    7c64:	4b3b      	ldr	r3, [pc, #236]	; (7d54 <__srefill_r+0x100>)
    7c66:	429c      	cmp	r4, r3
    7c68:	d10a      	bne.n	7c80 <__srefill_r+0x2c>
    7c6a:	686c      	ldr	r4, [r5, #4]
    7c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    7c70:	2300      	movs	r3, #0
    7c72:	6063      	str	r3, [r4, #4]
    7c74:	b293      	uxth	r3, r2
    7c76:	069e      	lsls	r6, r3, #26
    7c78:	d50c      	bpl.n	7c94 <__srefill_r+0x40>
    7c7a:	f04f 30ff 	mov.w	r0, #4294967295
    7c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c80:	4b35      	ldr	r3, [pc, #212]	; (7d58 <__srefill_r+0x104>)
    7c82:	429c      	cmp	r4, r3
    7c84:	d101      	bne.n	7c8a <__srefill_r+0x36>
    7c86:	68ac      	ldr	r4, [r5, #8]
    7c88:	e7f0      	b.n	7c6c <__srefill_r+0x18>
    7c8a:	4b34      	ldr	r3, [pc, #208]	; (7d5c <__srefill_r+0x108>)
    7c8c:	429c      	cmp	r4, r3
    7c8e:	bf08      	it	eq
    7c90:	68ec      	ldreq	r4, [r5, #12]
    7c92:	e7eb      	b.n	7c6c <__srefill_r+0x18>
    7c94:	0758      	lsls	r0, r3, #29
    7c96:	d448      	bmi.n	7d2a <__srefill_r+0xd6>
    7c98:	06d9      	lsls	r1, r3, #27
    7c9a:	d405      	bmi.n	7ca8 <__srefill_r+0x54>
    7c9c:	2309      	movs	r3, #9
    7c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7ca2:	602b      	str	r3, [r5, #0]
    7ca4:	81a2      	strh	r2, [r4, #12]
    7ca6:	e7e8      	b.n	7c7a <__srefill_r+0x26>
    7ca8:	071a      	lsls	r2, r3, #28
    7caa:	d50b      	bpl.n	7cc4 <__srefill_r+0x70>
    7cac:	4621      	mov	r1, r4
    7cae:	4628      	mov	r0, r5
    7cb0:	f7fe fb6a 	bl	6388 <_fflush_r>
    7cb4:	2800      	cmp	r0, #0
    7cb6:	d1e0      	bne.n	7c7a <__srefill_r+0x26>
    7cb8:	89a3      	ldrh	r3, [r4, #12]
    7cba:	60a0      	str	r0, [r4, #8]
    7cbc:	f023 0308 	bic.w	r3, r3, #8
    7cc0:	81a3      	strh	r3, [r4, #12]
    7cc2:	61a0      	str	r0, [r4, #24]
    7cc4:	89a3      	ldrh	r3, [r4, #12]
    7cc6:	f043 0304 	orr.w	r3, r3, #4
    7cca:	81a3      	strh	r3, [r4, #12]
    7ccc:	6923      	ldr	r3, [r4, #16]
    7cce:	b91b      	cbnz	r3, 7cd8 <__srefill_r+0x84>
    7cd0:	4621      	mov	r1, r4
    7cd2:	4628      	mov	r0, r5
    7cd4:	f7ff f860 	bl	6d98 <__smakebuf_r>
    7cd8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    7cdc:	b2be      	uxth	r6, r7
    7cde:	07b3      	lsls	r3, r6, #30
    7ce0:	d00f      	beq.n	7d02 <__srefill_r+0xae>
    7ce2:	2301      	movs	r3, #1
    7ce4:	81a3      	strh	r3, [r4, #12]
    7ce6:	4b1e      	ldr	r3, [pc, #120]	; (7d60 <__srefill_r+0x10c>)
    7ce8:	491e      	ldr	r1, [pc, #120]	; (7d64 <__srefill_r+0x110>)
    7cea:	6818      	ldr	r0, [r3, #0]
    7cec:	f006 0609 	and.w	r6, r6, #9
    7cf0:	f7fe fc32 	bl	6558 <_fwalk>
    7cf4:	2e09      	cmp	r6, #9
    7cf6:	81a7      	strh	r7, [r4, #12]
    7cf8:	d103      	bne.n	7d02 <__srefill_r+0xae>
    7cfa:	4621      	mov	r1, r4
    7cfc:	4628      	mov	r0, r5
    7cfe:	f7fe fabb 	bl	6278 <__sflush_r>
    7d02:	6922      	ldr	r2, [r4, #16]
    7d04:	6022      	str	r2, [r4, #0]
    7d06:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7d08:	6963      	ldr	r3, [r4, #20]
    7d0a:	6a21      	ldr	r1, [r4, #32]
    7d0c:	4628      	mov	r0, r5
    7d0e:	47b0      	blx	r6
    7d10:	2800      	cmp	r0, #0
    7d12:	6060      	str	r0, [r4, #4]
    7d14:	dc1c      	bgt.n	7d50 <__srefill_r+0xfc>
    7d16:	89a3      	ldrh	r3, [r4, #12]
    7d18:	bf17      	itett	ne
    7d1a:	2200      	movne	r2, #0
    7d1c:	f043 0320 	orreq.w	r3, r3, #32
    7d20:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    7d24:	6062      	strne	r2, [r4, #4]
    7d26:	81a3      	strh	r3, [r4, #12]
    7d28:	e7a7      	b.n	7c7a <__srefill_r+0x26>
    7d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7d2c:	2900      	cmp	r1, #0
    7d2e:	d0cd      	beq.n	7ccc <__srefill_r+0x78>
    7d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
    7d34:	4299      	cmp	r1, r3
    7d36:	d002      	beq.n	7d3e <__srefill_r+0xea>
    7d38:	4628      	mov	r0, r5
    7d3a:	f7fe fc73 	bl	6624 <_free_r>
    7d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7d40:	6063      	str	r3, [r4, #4]
    7d42:	2000      	movs	r0, #0
    7d44:	6360      	str	r0, [r4, #52]	; 0x34
    7d46:	2b00      	cmp	r3, #0
    7d48:	d0c0      	beq.n	7ccc <__srefill_r+0x78>
    7d4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7d4c:	6023      	str	r3, [r4, #0]
    7d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d50:	2000      	movs	r0, #0
    7d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d54:	00009168 	.word	0x00009168
    7d58:	00009188 	.word	0x00009188
    7d5c:	00009148 	.word	0x00009148
    7d60:	000091a8 	.word	0x000091a8
    7d64:	00007c41 	.word	0x00007c41

00007d68 <__sccl>:
    7d68:	b570      	push	{r4, r5, r6, lr}
    7d6a:	780b      	ldrb	r3, [r1, #0]
    7d6c:	2b5e      	cmp	r3, #94	; 0x5e
    7d6e:	bf13      	iteet	ne
    7d70:	1c4a      	addne	r2, r1, #1
    7d72:	1c8a      	addeq	r2, r1, #2
    7d74:	784b      	ldrbeq	r3, [r1, #1]
    7d76:	2100      	movne	r1, #0
    7d78:	bf08      	it	eq
    7d7a:	2101      	moveq	r1, #1
    7d7c:	1e44      	subs	r4, r0, #1
    7d7e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    7d82:	f804 1f01 	strb.w	r1, [r4, #1]!
    7d86:	42a5      	cmp	r5, r4
    7d88:	d1fb      	bne.n	7d82 <__sccl+0x1a>
    7d8a:	b913      	cbnz	r3, 7d92 <__sccl+0x2a>
    7d8c:	3a01      	subs	r2, #1
    7d8e:	4610      	mov	r0, r2
    7d90:	bd70      	pop	{r4, r5, r6, pc}
    7d92:	f081 0401 	eor.w	r4, r1, #1
    7d96:	54c4      	strb	r4, [r0, r3]
    7d98:	4611      	mov	r1, r2
    7d9a:	780d      	ldrb	r5, [r1, #0]
    7d9c:	2d2d      	cmp	r5, #45	; 0x2d
    7d9e:	f101 0201 	add.w	r2, r1, #1
    7da2:	d006      	beq.n	7db2 <__sccl+0x4a>
    7da4:	2d5d      	cmp	r5, #93	; 0x5d
    7da6:	d0f2      	beq.n	7d8e <__sccl+0x26>
    7da8:	b90d      	cbnz	r5, 7dae <__sccl+0x46>
    7daa:	460a      	mov	r2, r1
    7dac:	e7ef      	b.n	7d8e <__sccl+0x26>
    7dae:	462b      	mov	r3, r5
    7db0:	e7f1      	b.n	7d96 <__sccl+0x2e>
    7db2:	784e      	ldrb	r6, [r1, #1]
    7db4:	2e5d      	cmp	r6, #93	; 0x5d
    7db6:	d0fa      	beq.n	7dae <__sccl+0x46>
    7db8:	42b3      	cmp	r3, r6
    7dba:	dcf8      	bgt.n	7dae <__sccl+0x46>
    7dbc:	3102      	adds	r1, #2
    7dbe:	3301      	adds	r3, #1
    7dc0:	429e      	cmp	r6, r3
    7dc2:	54c4      	strb	r4, [r0, r3]
    7dc4:	dcfb      	bgt.n	7dbe <__sccl+0x56>
    7dc6:	e7e8      	b.n	7d9a <__sccl+0x32>

00007dc8 <_strtol_l.isra.0>:
    7dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dcc:	4680      	mov	r8, r0
    7dce:	4689      	mov	r9, r1
    7dd0:	4692      	mov	sl, r2
    7dd2:	461f      	mov	r7, r3
    7dd4:	468b      	mov	fp, r1
    7dd6:	465d      	mov	r5, fp
    7dd8:	980a      	ldr	r0, [sp, #40]	; 0x28
    7dda:	f815 4b01 	ldrb.w	r4, [r5], #1
    7dde:	f000 f9e5 	bl	81ac <__locale_ctype_ptr_l>
    7de2:	4420      	add	r0, r4
    7de4:	7846      	ldrb	r6, [r0, #1]
    7de6:	f016 0608 	ands.w	r6, r6, #8
    7dea:	d10b      	bne.n	7e04 <_strtol_l.isra.0+0x3c>
    7dec:	2c2d      	cmp	r4, #45	; 0x2d
    7dee:	d10b      	bne.n	7e08 <_strtol_l.isra.0+0x40>
    7df0:	782c      	ldrb	r4, [r5, #0]
    7df2:	2601      	movs	r6, #1
    7df4:	f10b 0502 	add.w	r5, fp, #2
    7df8:	b167      	cbz	r7, 7e14 <_strtol_l.isra.0+0x4c>
    7dfa:	2f10      	cmp	r7, #16
    7dfc:	d114      	bne.n	7e28 <_strtol_l.isra.0+0x60>
    7dfe:	2c30      	cmp	r4, #48	; 0x30
    7e00:	d00a      	beq.n	7e18 <_strtol_l.isra.0+0x50>
    7e02:	e011      	b.n	7e28 <_strtol_l.isra.0+0x60>
    7e04:	46ab      	mov	fp, r5
    7e06:	e7e6      	b.n	7dd6 <_strtol_l.isra.0+0xe>
    7e08:	2c2b      	cmp	r4, #43	; 0x2b
    7e0a:	bf04      	itt	eq
    7e0c:	782c      	ldrbeq	r4, [r5, #0]
    7e0e:	f10b 0502 	addeq.w	r5, fp, #2
    7e12:	e7f1      	b.n	7df8 <_strtol_l.isra.0+0x30>
    7e14:	2c30      	cmp	r4, #48	; 0x30
    7e16:	d127      	bne.n	7e68 <_strtol_l.isra.0+0xa0>
    7e18:	782b      	ldrb	r3, [r5, #0]
    7e1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7e1e:	2b58      	cmp	r3, #88	; 0x58
    7e20:	d14b      	bne.n	7eba <_strtol_l.isra.0+0xf2>
    7e22:	786c      	ldrb	r4, [r5, #1]
    7e24:	2710      	movs	r7, #16
    7e26:	3502      	adds	r5, #2
    7e28:	2e00      	cmp	r6, #0
    7e2a:	bf0c      	ite	eq
    7e2c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    7e30:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    7e34:	2200      	movs	r2, #0
    7e36:	fbb1 fef7 	udiv	lr, r1, r7
    7e3a:	4610      	mov	r0, r2
    7e3c:	fb07 1c1e 	mls	ip, r7, lr, r1
    7e40:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    7e44:	2b09      	cmp	r3, #9
    7e46:	d811      	bhi.n	7e6c <_strtol_l.isra.0+0xa4>
    7e48:	461c      	mov	r4, r3
    7e4a:	42a7      	cmp	r7, r4
    7e4c:	dd1d      	ble.n	7e8a <_strtol_l.isra.0+0xc2>
    7e4e:	1c53      	adds	r3, r2, #1
    7e50:	d007      	beq.n	7e62 <_strtol_l.isra.0+0x9a>
    7e52:	4586      	cmp	lr, r0
    7e54:	d316      	bcc.n	7e84 <_strtol_l.isra.0+0xbc>
    7e56:	d101      	bne.n	7e5c <_strtol_l.isra.0+0x94>
    7e58:	45a4      	cmp	ip, r4
    7e5a:	db13      	blt.n	7e84 <_strtol_l.isra.0+0xbc>
    7e5c:	fb00 4007 	mla	r0, r0, r7, r4
    7e60:	2201      	movs	r2, #1
    7e62:	f815 4b01 	ldrb.w	r4, [r5], #1
    7e66:	e7eb      	b.n	7e40 <_strtol_l.isra.0+0x78>
    7e68:	270a      	movs	r7, #10
    7e6a:	e7dd      	b.n	7e28 <_strtol_l.isra.0+0x60>
    7e6c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    7e70:	2b19      	cmp	r3, #25
    7e72:	d801      	bhi.n	7e78 <_strtol_l.isra.0+0xb0>
    7e74:	3c37      	subs	r4, #55	; 0x37
    7e76:	e7e8      	b.n	7e4a <_strtol_l.isra.0+0x82>
    7e78:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    7e7c:	2b19      	cmp	r3, #25
    7e7e:	d804      	bhi.n	7e8a <_strtol_l.isra.0+0xc2>
    7e80:	3c57      	subs	r4, #87	; 0x57
    7e82:	e7e2      	b.n	7e4a <_strtol_l.isra.0+0x82>
    7e84:	f04f 32ff 	mov.w	r2, #4294967295
    7e88:	e7eb      	b.n	7e62 <_strtol_l.isra.0+0x9a>
    7e8a:	1c53      	adds	r3, r2, #1
    7e8c:	d108      	bne.n	7ea0 <_strtol_l.isra.0+0xd8>
    7e8e:	2322      	movs	r3, #34	; 0x22
    7e90:	f8c8 3000 	str.w	r3, [r8]
    7e94:	4608      	mov	r0, r1
    7e96:	f1ba 0f00 	cmp.w	sl, #0
    7e9a:	d107      	bne.n	7eac <_strtol_l.isra.0+0xe4>
    7e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ea0:	b106      	cbz	r6, 7ea4 <_strtol_l.isra.0+0xdc>
    7ea2:	4240      	negs	r0, r0
    7ea4:	f1ba 0f00 	cmp.w	sl, #0
    7ea8:	d00c      	beq.n	7ec4 <_strtol_l.isra.0+0xfc>
    7eaa:	b122      	cbz	r2, 7eb6 <_strtol_l.isra.0+0xee>
    7eac:	3d01      	subs	r5, #1
    7eae:	f8ca 5000 	str.w	r5, [sl]
    7eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7eb6:	464d      	mov	r5, r9
    7eb8:	e7f9      	b.n	7eae <_strtol_l.isra.0+0xe6>
    7eba:	2430      	movs	r4, #48	; 0x30
    7ebc:	2f00      	cmp	r7, #0
    7ebe:	d1b3      	bne.n	7e28 <_strtol_l.isra.0+0x60>
    7ec0:	2708      	movs	r7, #8
    7ec2:	e7b1      	b.n	7e28 <_strtol_l.isra.0+0x60>
    7ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007ec8 <_strtol_r>:
    7ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7eca:	4c06      	ldr	r4, [pc, #24]	; (7ee4 <_strtol_r+0x1c>)
    7ecc:	4d06      	ldr	r5, [pc, #24]	; (7ee8 <_strtol_r+0x20>)
    7ece:	6824      	ldr	r4, [r4, #0]
    7ed0:	6a24      	ldr	r4, [r4, #32]
    7ed2:	2c00      	cmp	r4, #0
    7ed4:	bf08      	it	eq
    7ed6:	462c      	moveq	r4, r5
    7ed8:	9400      	str	r4, [sp, #0]
    7eda:	f7ff ff75 	bl	7dc8 <_strtol_l.isra.0>
    7ede:	b003      	add	sp, #12
    7ee0:	bd30      	pop	{r4, r5, pc}
    7ee2:	bf00      	nop
    7ee4:	200002dc 	.word	0x200002dc
    7ee8:	20000340 	.word	0x20000340

00007eec <_strtoul_l.isra.0>:
    7eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ef0:	4680      	mov	r8, r0
    7ef2:	4689      	mov	r9, r1
    7ef4:	4692      	mov	sl, r2
    7ef6:	461e      	mov	r6, r3
    7ef8:	460f      	mov	r7, r1
    7efa:	463d      	mov	r5, r7
    7efc:	9808      	ldr	r0, [sp, #32]
    7efe:	f815 4b01 	ldrb.w	r4, [r5], #1
    7f02:	f000 f953 	bl	81ac <__locale_ctype_ptr_l>
    7f06:	4420      	add	r0, r4
    7f08:	7843      	ldrb	r3, [r0, #1]
    7f0a:	f013 0308 	ands.w	r3, r3, #8
    7f0e:	d10a      	bne.n	7f26 <_strtoul_l.isra.0+0x3a>
    7f10:	2c2d      	cmp	r4, #45	; 0x2d
    7f12:	d10a      	bne.n	7f2a <_strtoul_l.isra.0+0x3e>
    7f14:	782c      	ldrb	r4, [r5, #0]
    7f16:	2301      	movs	r3, #1
    7f18:	1cbd      	adds	r5, r7, #2
    7f1a:	b15e      	cbz	r6, 7f34 <_strtoul_l.isra.0+0x48>
    7f1c:	2e10      	cmp	r6, #16
    7f1e:	d113      	bne.n	7f48 <_strtoul_l.isra.0+0x5c>
    7f20:	2c30      	cmp	r4, #48	; 0x30
    7f22:	d009      	beq.n	7f38 <_strtoul_l.isra.0+0x4c>
    7f24:	e010      	b.n	7f48 <_strtoul_l.isra.0+0x5c>
    7f26:	462f      	mov	r7, r5
    7f28:	e7e7      	b.n	7efa <_strtoul_l.isra.0+0xe>
    7f2a:	2c2b      	cmp	r4, #43	; 0x2b
    7f2c:	bf04      	itt	eq
    7f2e:	782c      	ldrbeq	r4, [r5, #0]
    7f30:	1cbd      	addeq	r5, r7, #2
    7f32:	e7f2      	b.n	7f1a <_strtoul_l.isra.0+0x2e>
    7f34:	2c30      	cmp	r4, #48	; 0x30
    7f36:	d125      	bne.n	7f84 <_strtoul_l.isra.0+0x98>
    7f38:	782a      	ldrb	r2, [r5, #0]
    7f3a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    7f3e:	2a58      	cmp	r2, #88	; 0x58
    7f40:	d14a      	bne.n	7fd8 <_strtoul_l.isra.0+0xec>
    7f42:	786c      	ldrb	r4, [r5, #1]
    7f44:	2610      	movs	r6, #16
    7f46:	3502      	adds	r5, #2
    7f48:	f04f 31ff 	mov.w	r1, #4294967295
    7f4c:	2700      	movs	r7, #0
    7f4e:	fbb1 f1f6 	udiv	r1, r1, r6
    7f52:	fb06 fe01 	mul.w	lr, r6, r1
    7f56:	ea6f 0e0e 	mvn.w	lr, lr
    7f5a:	4638      	mov	r0, r7
    7f5c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    7f60:	2a09      	cmp	r2, #9
    7f62:	d811      	bhi.n	7f88 <_strtoul_l.isra.0+0x9c>
    7f64:	4614      	mov	r4, r2
    7f66:	42a6      	cmp	r6, r4
    7f68:	dd1d      	ble.n	7fa6 <_strtoul_l.isra.0+0xba>
    7f6a:	2f00      	cmp	r7, #0
    7f6c:	db18      	blt.n	7fa0 <_strtoul_l.isra.0+0xb4>
    7f6e:	4281      	cmp	r1, r0
    7f70:	d316      	bcc.n	7fa0 <_strtoul_l.isra.0+0xb4>
    7f72:	d101      	bne.n	7f78 <_strtoul_l.isra.0+0x8c>
    7f74:	45a6      	cmp	lr, r4
    7f76:	db13      	blt.n	7fa0 <_strtoul_l.isra.0+0xb4>
    7f78:	fb00 4006 	mla	r0, r0, r6, r4
    7f7c:	2701      	movs	r7, #1
    7f7e:	f815 4b01 	ldrb.w	r4, [r5], #1
    7f82:	e7eb      	b.n	7f5c <_strtoul_l.isra.0+0x70>
    7f84:	260a      	movs	r6, #10
    7f86:	e7df      	b.n	7f48 <_strtoul_l.isra.0+0x5c>
    7f88:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    7f8c:	2a19      	cmp	r2, #25
    7f8e:	d801      	bhi.n	7f94 <_strtoul_l.isra.0+0xa8>
    7f90:	3c37      	subs	r4, #55	; 0x37
    7f92:	e7e8      	b.n	7f66 <_strtoul_l.isra.0+0x7a>
    7f94:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    7f98:	2a19      	cmp	r2, #25
    7f9a:	d804      	bhi.n	7fa6 <_strtoul_l.isra.0+0xba>
    7f9c:	3c57      	subs	r4, #87	; 0x57
    7f9e:	e7e2      	b.n	7f66 <_strtoul_l.isra.0+0x7a>
    7fa0:	f04f 37ff 	mov.w	r7, #4294967295
    7fa4:	e7eb      	b.n	7f7e <_strtoul_l.isra.0+0x92>
    7fa6:	2f00      	cmp	r7, #0
    7fa8:	da09      	bge.n	7fbe <_strtoul_l.isra.0+0xd2>
    7faa:	2322      	movs	r3, #34	; 0x22
    7fac:	f8c8 3000 	str.w	r3, [r8]
    7fb0:	f04f 30ff 	mov.w	r0, #4294967295
    7fb4:	f1ba 0f00 	cmp.w	sl, #0
    7fb8:	d107      	bne.n	7fca <_strtoul_l.isra.0+0xde>
    7fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fbe:	b103      	cbz	r3, 7fc2 <_strtoul_l.isra.0+0xd6>
    7fc0:	4240      	negs	r0, r0
    7fc2:	f1ba 0f00 	cmp.w	sl, #0
    7fc6:	d00c      	beq.n	7fe2 <_strtoul_l.isra.0+0xf6>
    7fc8:	b127      	cbz	r7, 7fd4 <_strtoul_l.isra.0+0xe8>
    7fca:	3d01      	subs	r5, #1
    7fcc:	f8ca 5000 	str.w	r5, [sl]
    7fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fd4:	464d      	mov	r5, r9
    7fd6:	e7f9      	b.n	7fcc <_strtoul_l.isra.0+0xe0>
    7fd8:	2430      	movs	r4, #48	; 0x30
    7fda:	2e00      	cmp	r6, #0
    7fdc:	d1b4      	bne.n	7f48 <_strtoul_l.isra.0+0x5c>
    7fde:	2608      	movs	r6, #8
    7fe0:	e7b2      	b.n	7f48 <_strtoul_l.isra.0+0x5c>
    7fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00007fe8 <_strtoul_r>:
    7fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7fea:	4c06      	ldr	r4, [pc, #24]	; (8004 <_strtoul_r+0x1c>)
    7fec:	4d06      	ldr	r5, [pc, #24]	; (8008 <_strtoul_r+0x20>)
    7fee:	6824      	ldr	r4, [r4, #0]
    7ff0:	6a24      	ldr	r4, [r4, #32]
    7ff2:	2c00      	cmp	r4, #0
    7ff4:	bf08      	it	eq
    7ff6:	462c      	moveq	r4, r5
    7ff8:	9400      	str	r4, [sp, #0]
    7ffa:	f7ff ff77 	bl	7eec <_strtoul_l.isra.0>
    7ffe:	b003      	add	sp, #12
    8000:	bd30      	pop	{r4, r5, pc}
    8002:	bf00      	nop
    8004:	200002dc 	.word	0x200002dc
    8008:	20000340 	.word	0x20000340

0000800c <__submore>:
    800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8010:	460c      	mov	r4, r1
    8012:	6b49      	ldr	r1, [r1, #52]	; 0x34
    8014:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8018:	4299      	cmp	r1, r3
    801a:	d11e      	bne.n	805a <__submore+0x4e>
    801c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8020:	f7fe fb4e 	bl	66c0 <_malloc_r>
    8024:	b918      	cbnz	r0, 802e <__submore+0x22>
    8026:	f04f 30ff 	mov.w	r0, #4294967295
    802a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    802e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8032:	63a3      	str	r3, [r4, #56]	; 0x38
    8034:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    8038:	6360      	str	r0, [r4, #52]	; 0x34
    803a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    803e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    8042:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    8046:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    804a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    804e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    8052:	6020      	str	r0, [r4, #0]
    8054:	2000      	movs	r0, #0
    8056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    805a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    805c:	0077      	lsls	r7, r6, #1
    805e:	463a      	mov	r2, r7
    8060:	f000 f943 	bl	82ea <_realloc_r>
    8064:	4605      	mov	r5, r0
    8066:	2800      	cmp	r0, #0
    8068:	d0dd      	beq.n	8026 <__submore+0x1a>
    806a:	eb00 0806 	add.w	r8, r0, r6
    806e:	4601      	mov	r1, r0
    8070:	4632      	mov	r2, r6
    8072:	4640      	mov	r0, r8
    8074:	f000 f914 	bl	82a0 <memcpy>
    8078:	f8c4 8000 	str.w	r8, [r4]
    807c:	6365      	str	r5, [r4, #52]	; 0x34
    807e:	63a7      	str	r7, [r4, #56]	; 0x38
    8080:	e7e8      	b.n	8054 <__submore+0x48>
	...

00008084 <_ungetc_r>:
    8084:	1c4b      	adds	r3, r1, #1
    8086:	b570      	push	{r4, r5, r6, lr}
    8088:	4606      	mov	r6, r0
    808a:	460d      	mov	r5, r1
    808c:	4614      	mov	r4, r2
    808e:	d103      	bne.n	8098 <_ungetc_r+0x14>
    8090:	f04f 35ff 	mov.w	r5, #4294967295
    8094:	4628      	mov	r0, r5
    8096:	bd70      	pop	{r4, r5, r6, pc}
    8098:	b118      	cbz	r0, 80a2 <_ungetc_r+0x1e>
    809a:	6983      	ldr	r3, [r0, #24]
    809c:	b90b      	cbnz	r3, 80a2 <_ungetc_r+0x1e>
    809e:	f7fe f9ef 	bl	6480 <__sinit>
    80a2:	4b2e      	ldr	r3, [pc, #184]	; (815c <_ungetc_r+0xd8>)
    80a4:	429c      	cmp	r4, r3
    80a6:	d12c      	bne.n	8102 <_ungetc_r+0x7e>
    80a8:	6874      	ldr	r4, [r6, #4]
    80aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    80ae:	f023 0320 	bic.w	r3, r3, #32
    80b2:	81a3      	strh	r3, [r4, #12]
    80b4:	b29b      	uxth	r3, r3
    80b6:	0759      	lsls	r1, r3, #29
    80b8:	d413      	bmi.n	80e2 <_ungetc_r+0x5e>
    80ba:	06da      	lsls	r2, r3, #27
    80bc:	d5e8      	bpl.n	8090 <_ungetc_r+0xc>
    80be:	071b      	lsls	r3, r3, #28
    80c0:	d50b      	bpl.n	80da <_ungetc_r+0x56>
    80c2:	4621      	mov	r1, r4
    80c4:	4630      	mov	r0, r6
    80c6:	f7fe f95f 	bl	6388 <_fflush_r>
    80ca:	2800      	cmp	r0, #0
    80cc:	d1e0      	bne.n	8090 <_ungetc_r+0xc>
    80ce:	89a3      	ldrh	r3, [r4, #12]
    80d0:	60a0      	str	r0, [r4, #8]
    80d2:	f023 0308 	bic.w	r3, r3, #8
    80d6:	81a3      	strh	r3, [r4, #12]
    80d8:	61a0      	str	r0, [r4, #24]
    80da:	89a3      	ldrh	r3, [r4, #12]
    80dc:	f043 0304 	orr.w	r3, r3, #4
    80e0:	81a3      	strh	r3, [r4, #12]
    80e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    80e4:	6862      	ldr	r2, [r4, #4]
    80e6:	b2ed      	uxtb	r5, r5
    80e8:	b1e3      	cbz	r3, 8124 <_ungetc_r+0xa0>
    80ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    80ec:	429a      	cmp	r2, r3
    80ee:	da12      	bge.n	8116 <_ungetc_r+0x92>
    80f0:	6823      	ldr	r3, [r4, #0]
    80f2:	1e5a      	subs	r2, r3, #1
    80f4:	6022      	str	r2, [r4, #0]
    80f6:	f803 5c01 	strb.w	r5, [r3, #-1]
    80fa:	6863      	ldr	r3, [r4, #4]
    80fc:	3301      	adds	r3, #1
    80fe:	6063      	str	r3, [r4, #4]
    8100:	e7c8      	b.n	8094 <_ungetc_r+0x10>
    8102:	4b17      	ldr	r3, [pc, #92]	; (8160 <_ungetc_r+0xdc>)
    8104:	429c      	cmp	r4, r3
    8106:	d101      	bne.n	810c <_ungetc_r+0x88>
    8108:	68b4      	ldr	r4, [r6, #8]
    810a:	e7ce      	b.n	80aa <_ungetc_r+0x26>
    810c:	4b15      	ldr	r3, [pc, #84]	; (8164 <_ungetc_r+0xe0>)
    810e:	429c      	cmp	r4, r3
    8110:	bf08      	it	eq
    8112:	68f4      	ldreq	r4, [r6, #12]
    8114:	e7c9      	b.n	80aa <_ungetc_r+0x26>
    8116:	4621      	mov	r1, r4
    8118:	4630      	mov	r0, r6
    811a:	f7ff ff77 	bl	800c <__submore>
    811e:	2800      	cmp	r0, #0
    8120:	d0e6      	beq.n	80f0 <_ungetc_r+0x6c>
    8122:	e7b5      	b.n	8090 <_ungetc_r+0xc>
    8124:	6921      	ldr	r1, [r4, #16]
    8126:	6823      	ldr	r3, [r4, #0]
    8128:	b151      	cbz	r1, 8140 <_ungetc_r+0xbc>
    812a:	4299      	cmp	r1, r3
    812c:	d208      	bcs.n	8140 <_ungetc_r+0xbc>
    812e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    8132:	428d      	cmp	r5, r1
    8134:	d104      	bne.n	8140 <_ungetc_r+0xbc>
    8136:	3b01      	subs	r3, #1
    8138:	3201      	adds	r2, #1
    813a:	6023      	str	r3, [r4, #0]
    813c:	6062      	str	r2, [r4, #4]
    813e:	e7a9      	b.n	8094 <_ungetc_r+0x10>
    8140:	63e3      	str	r3, [r4, #60]	; 0x3c
    8142:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8146:	6363      	str	r3, [r4, #52]	; 0x34
    8148:	2303      	movs	r3, #3
    814a:	63a3      	str	r3, [r4, #56]	; 0x38
    814c:	4623      	mov	r3, r4
    814e:	6422      	str	r2, [r4, #64]	; 0x40
    8150:	f803 5f46 	strb.w	r5, [r3, #70]!
    8154:	6023      	str	r3, [r4, #0]
    8156:	2301      	movs	r3, #1
    8158:	e7d1      	b.n	80fe <_ungetc_r+0x7a>
    815a:	bf00      	nop
    815c:	00009168 	.word	0x00009168
    8160:	00009188 	.word	0x00009188
    8164:	00009148 	.word	0x00009148

00008168 <_fstat_r>:
    8168:	b538      	push	{r3, r4, r5, lr}
    816a:	4c07      	ldr	r4, [pc, #28]	; (8188 <_fstat_r+0x20>)
    816c:	2300      	movs	r3, #0
    816e:	4605      	mov	r5, r0
    8170:	4608      	mov	r0, r1
    8172:	4611      	mov	r1, r2
    8174:	6023      	str	r3, [r4, #0]
    8176:	f7fa fae6 	bl	2746 <_fstat>
    817a:	1c43      	adds	r3, r0, #1
    817c:	d102      	bne.n	8184 <_fstat_r+0x1c>
    817e:	6823      	ldr	r3, [r4, #0]
    8180:	b103      	cbz	r3, 8184 <_fstat_r+0x1c>
    8182:	602b      	str	r3, [r5, #0]
    8184:	bd38      	pop	{r3, r4, r5, pc}
    8186:	bf00      	nop
    8188:	20001014 	.word	0x20001014

0000818c <_isatty_r>:
    818c:	b538      	push	{r3, r4, r5, lr}
    818e:	4c06      	ldr	r4, [pc, #24]	; (81a8 <_isatty_r+0x1c>)
    8190:	2300      	movs	r3, #0
    8192:	4605      	mov	r5, r0
    8194:	4608      	mov	r0, r1
    8196:	6023      	str	r3, [r4, #0]
    8198:	f7fa fada 	bl	2750 <_isatty>
    819c:	1c43      	adds	r3, r0, #1
    819e:	d102      	bne.n	81a6 <_isatty_r+0x1a>
    81a0:	6823      	ldr	r3, [r4, #0]
    81a2:	b103      	cbz	r3, 81a6 <_isatty_r+0x1a>
    81a4:	602b      	str	r3, [r5, #0]
    81a6:	bd38      	pop	{r3, r4, r5, pc}
    81a8:	20001014 	.word	0x20001014

000081ac <__locale_ctype_ptr_l>:
    81ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    81b0:	4770      	bx	lr
	...

000081b4 <__locale_ctype_ptr>:
    81b4:	4b04      	ldr	r3, [pc, #16]	; (81c8 <__locale_ctype_ptr+0x14>)
    81b6:	4a05      	ldr	r2, [pc, #20]	; (81cc <__locale_ctype_ptr+0x18>)
    81b8:	681b      	ldr	r3, [r3, #0]
    81ba:	6a1b      	ldr	r3, [r3, #32]
    81bc:	2b00      	cmp	r3, #0
    81be:	bf08      	it	eq
    81c0:	4613      	moveq	r3, r2
    81c2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    81c6:	4770      	bx	lr
    81c8:	200002dc 	.word	0x200002dc
    81cc:	20000340 	.word	0x20000340

000081d0 <__ascii_mbtowc>:
    81d0:	b082      	sub	sp, #8
    81d2:	b901      	cbnz	r1, 81d6 <__ascii_mbtowc+0x6>
    81d4:	a901      	add	r1, sp, #4
    81d6:	b142      	cbz	r2, 81ea <__ascii_mbtowc+0x1a>
    81d8:	b14b      	cbz	r3, 81ee <__ascii_mbtowc+0x1e>
    81da:	7813      	ldrb	r3, [r2, #0]
    81dc:	600b      	str	r3, [r1, #0]
    81de:	7812      	ldrb	r2, [r2, #0]
    81e0:	1c10      	adds	r0, r2, #0
    81e2:	bf18      	it	ne
    81e4:	2001      	movne	r0, #1
    81e6:	b002      	add	sp, #8
    81e8:	4770      	bx	lr
    81ea:	4610      	mov	r0, r2
    81ec:	e7fb      	b.n	81e6 <__ascii_mbtowc+0x16>
    81ee:	f06f 0001 	mvn.w	r0, #1
    81f2:	e7f8      	b.n	81e6 <__ascii_mbtowc+0x16>
	...

00008200 <memchr>:
    8200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8204:	2a10      	cmp	r2, #16
    8206:	db2b      	blt.n	8260 <memchr+0x60>
    8208:	f010 0f07 	tst.w	r0, #7
    820c:	d008      	beq.n	8220 <memchr+0x20>
    820e:	f810 3b01 	ldrb.w	r3, [r0], #1
    8212:	3a01      	subs	r2, #1
    8214:	428b      	cmp	r3, r1
    8216:	d02d      	beq.n	8274 <memchr+0x74>
    8218:	f010 0f07 	tst.w	r0, #7
    821c:	b342      	cbz	r2, 8270 <memchr+0x70>
    821e:	d1f6      	bne.n	820e <memchr+0xe>
    8220:	b4f0      	push	{r4, r5, r6, r7}
    8222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    8226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    822a:	f022 0407 	bic.w	r4, r2, #7
    822e:	f07f 0700 	mvns.w	r7, #0
    8232:	2300      	movs	r3, #0
    8234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    8238:	3c08      	subs	r4, #8
    823a:	ea85 0501 	eor.w	r5, r5, r1
    823e:	ea86 0601 	eor.w	r6, r6, r1
    8242:	fa85 f547 	uadd8	r5, r5, r7
    8246:	faa3 f587 	sel	r5, r3, r7
    824a:	fa86 f647 	uadd8	r6, r6, r7
    824e:	faa5 f687 	sel	r6, r5, r7
    8252:	b98e      	cbnz	r6, 8278 <memchr+0x78>
    8254:	d1ee      	bne.n	8234 <memchr+0x34>
    8256:	bcf0      	pop	{r4, r5, r6, r7}
    8258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    825c:	f002 0207 	and.w	r2, r2, #7
    8260:	b132      	cbz	r2, 8270 <memchr+0x70>
    8262:	f810 3b01 	ldrb.w	r3, [r0], #1
    8266:	3a01      	subs	r2, #1
    8268:	ea83 0301 	eor.w	r3, r3, r1
    826c:	b113      	cbz	r3, 8274 <memchr+0x74>
    826e:	d1f8      	bne.n	8262 <memchr+0x62>
    8270:	2000      	movs	r0, #0
    8272:	4770      	bx	lr
    8274:	3801      	subs	r0, #1
    8276:	4770      	bx	lr
    8278:	2d00      	cmp	r5, #0
    827a:	bf06      	itte	eq
    827c:	4635      	moveq	r5, r6
    827e:	3803      	subeq	r0, #3
    8280:	3807      	subne	r0, #7
    8282:	f015 0f01 	tst.w	r5, #1
    8286:	d107      	bne.n	8298 <memchr+0x98>
    8288:	3001      	adds	r0, #1
    828a:	f415 7f80 	tst.w	r5, #256	; 0x100
    828e:	bf02      	ittt	eq
    8290:	3001      	addeq	r0, #1
    8292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    8296:	3001      	addeq	r0, #1
    8298:	bcf0      	pop	{r4, r5, r6, r7}
    829a:	3801      	subs	r0, #1
    829c:	4770      	bx	lr
    829e:	bf00      	nop

000082a0 <memcpy>:
    82a0:	b510      	push	{r4, lr}
    82a2:	1e43      	subs	r3, r0, #1
    82a4:	440a      	add	r2, r1
    82a6:	4291      	cmp	r1, r2
    82a8:	d100      	bne.n	82ac <memcpy+0xc>
    82aa:	bd10      	pop	{r4, pc}
    82ac:	f811 4b01 	ldrb.w	r4, [r1], #1
    82b0:	f803 4f01 	strb.w	r4, [r3, #1]!
    82b4:	e7f7      	b.n	82a6 <memcpy+0x6>

000082b6 <memmove>:
    82b6:	4288      	cmp	r0, r1
    82b8:	b510      	push	{r4, lr}
    82ba:	eb01 0302 	add.w	r3, r1, r2
    82be:	d803      	bhi.n	82c8 <memmove+0x12>
    82c0:	1e42      	subs	r2, r0, #1
    82c2:	4299      	cmp	r1, r3
    82c4:	d10c      	bne.n	82e0 <memmove+0x2a>
    82c6:	bd10      	pop	{r4, pc}
    82c8:	4298      	cmp	r0, r3
    82ca:	d2f9      	bcs.n	82c0 <memmove+0xa>
    82cc:	1881      	adds	r1, r0, r2
    82ce:	1ad2      	subs	r2, r2, r3
    82d0:	42d3      	cmn	r3, r2
    82d2:	d100      	bne.n	82d6 <memmove+0x20>
    82d4:	bd10      	pop	{r4, pc}
    82d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    82da:	f801 4d01 	strb.w	r4, [r1, #-1]!
    82de:	e7f7      	b.n	82d0 <memmove+0x1a>
    82e0:	f811 4b01 	ldrb.w	r4, [r1], #1
    82e4:	f802 4f01 	strb.w	r4, [r2, #1]!
    82e8:	e7eb      	b.n	82c2 <memmove+0xc>

000082ea <_realloc_r>:
    82ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82ec:	4607      	mov	r7, r0
    82ee:	4614      	mov	r4, r2
    82f0:	460e      	mov	r6, r1
    82f2:	b921      	cbnz	r1, 82fe <_realloc_r+0x14>
    82f4:	4611      	mov	r1, r2
    82f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    82fa:	f7fe b9e1 	b.w	66c0 <_malloc_r>
    82fe:	b922      	cbnz	r2, 830a <_realloc_r+0x20>
    8300:	f7fe f990 	bl	6624 <_free_r>
    8304:	4625      	mov	r5, r4
    8306:	4628      	mov	r0, r5
    8308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    830a:	f000 f821 	bl	8350 <_malloc_usable_size_r>
    830e:	4284      	cmp	r4, r0
    8310:	d90f      	bls.n	8332 <_realloc_r+0x48>
    8312:	4621      	mov	r1, r4
    8314:	4638      	mov	r0, r7
    8316:	f7fe f9d3 	bl	66c0 <_malloc_r>
    831a:	4605      	mov	r5, r0
    831c:	2800      	cmp	r0, #0
    831e:	d0f2      	beq.n	8306 <_realloc_r+0x1c>
    8320:	4631      	mov	r1, r6
    8322:	4622      	mov	r2, r4
    8324:	f7ff ffbc 	bl	82a0 <memcpy>
    8328:	4631      	mov	r1, r6
    832a:	4638      	mov	r0, r7
    832c:	f7fe f97a 	bl	6624 <_free_r>
    8330:	e7e9      	b.n	8306 <_realloc_r+0x1c>
    8332:	4635      	mov	r5, r6
    8334:	e7e7      	b.n	8306 <_realloc_r+0x1c>

00008336 <__ascii_wctomb>:
    8336:	b149      	cbz	r1, 834c <__ascii_wctomb+0x16>
    8338:	2aff      	cmp	r2, #255	; 0xff
    833a:	bf85      	ittet	hi
    833c:	238a      	movhi	r3, #138	; 0x8a
    833e:	6003      	strhi	r3, [r0, #0]
    8340:	700a      	strbls	r2, [r1, #0]
    8342:	f04f 30ff 	movhi.w	r0, #4294967295
    8346:	bf98      	it	ls
    8348:	2001      	movls	r0, #1
    834a:	4770      	bx	lr
    834c:	4608      	mov	r0, r1
    834e:	4770      	bx	lr

00008350 <_malloc_usable_size_r>:
    8350:	f851 0c04 	ldr.w	r0, [r1, #-4]
    8354:	2800      	cmp	r0, #0
    8356:	f1a0 0004 	sub.w	r0, r0, #4
    835a:	bfbc      	itt	lt
    835c:	580b      	ldrlt	r3, [r1, r0]
    835e:	18c0      	addlt	r0, r0, r3
    8360:	4770      	bx	lr
    8362:	0000      	movs	r0, r0
    8364:	61440a0d 	.word	0x61440a0d
    8368:	61206174 	.word	0x61206174
    836c:	65742074 	.word	0x65742074
    8370:	61207473 	.word	0x61207473
    8374:	65726464 	.word	0x65726464
    8378:	25207373 	.word	0x25207373
    837c:	73692064 	.word	0x73692064
    8380:	25203d20 	.word	0x25203d20
    8384:	000a0d64 	.word	0x000a0d64
    8388:	6e490a0d 	.word	0x6e490a0d
    838c:	74726576 	.word	0x74726576
    8390:	74206465 	.word	0x74206465
    8394:	64206568 	.word	0x64206568
    8398:	20617461 	.word	0x20617461
    839c:	74207461 	.word	0x74207461
    83a0:	20747365 	.word	0x20747365
    83a4:	72646461 	.word	0x72646461
    83a8:	20737365 	.word	0x20737365
    83ac:	20646e61 	.word	0x20646e61
    83b0:	74697277 	.word	0x74697277
    83b4:	0d6e6574 	.word	0x0d6e6574
    83b8:	00000000 	.word	0x00000000
    83bc:	6c500a0d 	.word	0x6c500a0d
    83c0:	65736165 	.word	0x65736165
    83c4:	6e6f6320 	.word	0x6e6f6320
    83c8:	75676966 	.word	0x75676966
    83cc:	53206572 	.word	0x53206572
    83d0:	204b4c42 	.word	0x204b4c42
    83d4:	65737566 	.word	0x65737566
    83d8:	206f7420 	.word	0x206f7420
    83dc:	6f6c6c61 	.word	0x6f6c6c61
    83e0:	65746163 	.word	0x65746163
    83e4:	616d5320 	.word	0x616d5320
    83e8:	45457472 	.word	0x45457472
    83ec:	4d4f5250 	.word	0x4d4f5250
    83f0:	65726120 	.word	0x65726120
    83f4:	00000d61 	.word	0x00000d61
    83f8:	64323025 	.word	0x64323025
    83fc:	00000020 	.word	0x00000020
    8400:	6d530a0d 	.word	0x6d530a0d
    8404:	45747261 	.word	0x45747261
    8408:	4f525045 	.word	0x4f525045
    840c:	6f63204d 	.word	0x6f63204d
    8410:	6961746e 	.word	0x6961746e
    8414:	7620736e 	.word	0x7620736e
    8418:	64696c61 	.word	0x64696c61
    841c:	74616420 	.word	0x74616420
    8420:	000d2061 	.word	0x000d2061
    8424:	74530a0d 	.word	0x74530a0d
    8428:	6e69726f 	.word	0x6e69726f
    842c:	69732067 	.word	0x69732067
    8430:	74616e67 	.word	0x74616e67
    8434:	20657275 	.word	0x20657275
    8438:	53206f74 	.word	0x53206f74
    843c:	7472616d 	.word	0x7472616d
    8440:	52504545 	.word	0x52504545
    8444:	61204d4f 	.word	0x61204d4f
    8448:	65726464 	.word	0x65726464
    844c:	30207373 	.word	0x30207373
    8450:	20303078 	.word	0x20303078
    8454:	30206f74 	.word	0x30206f74
    8458:	0d333078 	.word	0x0d333078
    845c:	00000000 	.word	0x00000000
    8460:	75460a0d 	.word	0x75460a0d
    8464:	76206573 	.word	0x76206573
    8468:	65756c61 	.word	0x65756c61
    846c:	6f662073 	.word	0x6f662073
    8470:	42532072 	.word	0x42532072
    8474:	3d204b4c 	.word	0x3d204b4c
    8478:	2c642520 	.word	0x2c642520
    847c:	5a535020 	.word	0x5a535020
    8480:	25203d20 	.word	0x25203d20
    8484:	53202e64 	.word	0x53202e64
    8488:	74206565 	.word	0x74206565
    848c:	74206568 	.word	0x74206568
    8490:	656c6261 	.word	0x656c6261
    8494:	6d532720 	.word	0x6d532720
    8498:	45747261 	.word	0x45747261
    849c:	4f525045 	.word	0x4f525045
    84a0:	6956204d 	.word	0x6956204d
    84a4:	61757472 	.word	0x61757472
    84a8:	0909206c 	.word	0x0909206c
    84ac:	657a6953 	.word	0x657a6953
    84b0:	206e6920 	.word	0x206e6920
    84b4:	65747942 	.word	0x65747942
    84b8:	69202773 	.word	0x69202773
    84bc:	6874206e 	.word	0x6874206e
    84c0:	61442065 	.word	0x61442065
    84c4:	68736174 	.word	0x68736174
    84c8:	20746565 	.word	0x20746565
    84cc:	63206f74 	.word	0x63206f74
    84d0:	75636c61 	.word	0x75636c61
    84d4:	6574616c 	.word	0x6574616c
    84d8:	746f7420 	.word	0x746f7420
    84dc:	61206c61 	.word	0x61206c61
    84e0:	6c696176 	.word	0x6c696176
    84e4:	656c6261 	.word	0x656c6261
    84e8:	74796220 	.word	0x74796220
    84ec:	0d207365 	.word	0x0d207365
    84f0:	0000000a 	.word	0x0000000a
    84f4:	45450a0d 	.word	0x45450a0d
    84f8:	4d4f5250 	.word	0x4d4f5250
    84fc:	74614420 	.word	0x74614420
    8500:	74612061 	.word	0x74612061
    8504:	72696620 	.word	0x72696620
    8508:	25207473 	.word	0x25207473
    850c:	6f6c2064 	.word	0x6f6c2064
    8510:	69746163 	.word	0x69746163
    8514:	3a736e6f 	.word	0x3a736e6f
    8518:	000a0d20 	.word	0x000a0d20
    851c:	6e450a0d 	.word	0x6e450a0d
    8520:	20726574 	.word	0x20726574
    8524:	72646461 	.word	0x72646461
    8528:	20737365 	.word	0x20737365
    852c:	00203e3e 	.word	0x00203e3e
    8530:	00756c25 	.word	0x00756c25
    8534:	52450a0d 	.word	0x52450a0d
    8538:	3a524f52 	.word	0x3a524f52
    853c:	64644120 	.word	0x64644120
    8540:	73736572 	.word	0x73736572
    8544:	766e6920 	.word	0x766e6920
    8548:	64696c61 	.word	0x64696c61
    854c:	7254202e 	.word	0x7254202e
    8550:	67612079 	.word	0x67612079
    8554:	206e6961 	.word	0x206e6961
    8558:	0000000d 	.word	0x0000000d
    855c:	6e450a0d 	.word	0x6e450a0d
    8560:	20726574 	.word	0x20726574
    8564:	61746164 	.word	0x61746164
    8568:	203e3e20 	.word	0x203e3e20
    856c:	00000000 	.word	0x00000000
    8570:	72570a0d 	.word	0x72570a0d
    8574:	65747469 	.word	0x65747469
    8578:	6425206e 	.word	0x6425206e
    857c:	20746120 	.word	0x20746120
    8580:	00006425 	.word	0x00006425
    8584:	00007325 	.word	0x00007325
    8588:	65530a0d 	.word	0x65530a0d
    858c:	7463656c 	.word	0x7463656c
    8590:	6f206465 	.word	0x6f206465
    8594:	6f697470 	.word	0x6f697470
    8598:	7369206e 	.word	0x7369206e
    859c:	0d642520 	.word	0x0d642520
    85a0:	0000000a 	.word	0x0000000a
    85a4:	65520a0d 	.word	0x65520a0d
    85a8:	6e727574 	.word	0x6e727574
    85ac:	20676e69 	.word	0x20676e69
    85b0:	6d206f74 	.word	0x6d206f74
    85b4:	206e6961 	.word	0x206e6961
    85b8:	756e656d 	.word	0x756e656d
    85bc:	0000000d 	.word	0x0000000d
    85c0:	6e490a0d 	.word	0x6e490a0d
    85c4:	696c6176 	.word	0x696c6176
    85c8:	706f2064 	.word	0x706f2064
    85cc:	6e6f6974 	.word	0x6e6f6974
    85d0:	0000000d 	.word	0x0000000d
    85d4:	0000002f 	.word	0x0000002f
    85d8:	43435553 	.word	0x43435553
    85dc:	21535345 	.word	0x21535345
    85e0:	0000000d 	.word	0x0000000d
    85e4:	6c696146 	.word	0x6c696146
    85e8:	74206465 	.word	0x74206465
    85ec:	616d206f 	.word	0x616d206f
    85f0:	6620656b 	.word	0x6620656b
    85f4:	2e656c69 	.word	0x2e656c69
    85f8:	6c696620 	.word	0x6c696620
    85fc:	65725f65 	.word	0x65725f65
    8600:	746c7573 	.word	0x746c7573
    8604:	25203d20 	.word	0x25203d20
    8608:	000a0d75 	.word	0x000a0d75

0000860c <ExCvt>:
    860c:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
    861c:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
    862c:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    863c:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
    864c:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
    865c:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
    866c:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
    867c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000868c <vst.4854>:
    868c:	02000400 00800100 00200040 00080010     ........@. .....
    869c:	00020004 00000000                       ........

000086a4 <cst.4855>:
    86a4:	40008000 10002000 40000800 10002000     ...@. .....@. ..
    86b4:	04000800 00000200 2c2b2a22 3d3c3b3a     ........"*+,:;<=
    86c4:	5d5b3f3e 00007f7c 4d90feeb 534f4453     >?[]|......MSDOS
    86d4:	00302e35 4e204f4e 20454d41 46202020     5.0.NO NAME    F
    86e4:	32335441 00202020 4e204f4e 20454d41     AT32   .NO NAME 
    86f4:	46202020 20205441 00202020 682f2e2e        FAT     .../h
    8704:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
    8714:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
    8724:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    8734:	732f6c61 682f6372 6d5f6c61 735f6963     al/src/hal_mci_s
    8744:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    8754:	682f6372 755f6c61 74726173 6e79735f     rc/hal_usart_syn
    8764:	00632e63 682f2e2e 722f6c70 682f6374     c.c.../hpl/rtc/h
    8774:	725f6c70 632e6374 00000000 682f2e2e     pl_rtc.c....../h
    8784:	732f6c70 2f636864 5f6c7068 63686473     pl/sdhc/hpl_sdhc
    8794:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
    87a4:	41014000 43000000 43000400 43000800     .@.A...C...C...C
    87b4:	43000c00                                ...C

000087b8 <_usarts>:
    87b8:	00000000 40100004 00030000 00700002     .......@......p.
    87c8:	0000d8ad 00000000 00000002 40100004     ...............@
    87d8:	00030000 00700002 0000d8ad 00000000     ......p.........

000087e8 <_i2cms>:
	...
    8800:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    8810:	65735f6c 6d6f6372 0000632e 7261485b     l_sercom.c..[Har
    8820:	75614664 0d5d746c 00000000 53207c20     dFault]..... | S
    8830:	6b636174 61726620 0d3a656d 00000000     tack frame:.....
    8840:	7c207c20 20305220 203d2020 30257830      | | R0   = 0x%0
    8850:	0a0d5838 00000000 7c207c20 20315220     8X...... | | R1 
    8860:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    8870:	7c207c20 20325220 203d2020 30257830      | | R2   = 0x%0
    8880:	0a0d5838 00000000 7c207c20 20335220     8X...... | | R3 
    8890:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    88a0:	7c207c20 32315220 203d2020 30257830      | | R12  = 0x%0
    88b0:	0a0d5838 00000000 7c207c20 20524c20     8X...... | | LR 
    88c0:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    88d0:	7c207c20 20435020 203d2020 30257830      | | PC   = 0x%0
    88e0:	0a0d5838 00000000 7c207c20 52535020     8X...... | | PSR
    88f0:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    8900:	46207c20 462f5253 0d3a5241 00000000      | FSR/FAR:.....
    8910:	7c207c20 6e6f4320 75676966 6c626172      | | Configurabl
    8920:	61462065 20746c75 74617453 52207375     e Fault Status R
    8930:	73696765 0d726574 00000000 7c207c20     egister..... | |
    8940:	43207c20 20525346 30203d20 38302578      | CFSR  = 0x%08
    8950:	000a0d58 7c207c20 7c207c20 6d654d20     X... | | | | Mem
    8960:	616e614d 53206567 75746174 65522073     Manage Status Re
    8970:	74736967 000d7265 7c207c20 7c207c20     gister.. | | | |
    8980:	4d207c20 5253464d 30203d20 32302578      | MMFSR = 0x%02
    8990:	000a0d58 7c207c20 7c207c20 73754220     X... | | | | Bus
    89a0:	6c756146 74532074 73757461 67655220     Fault Status Reg
    89b0:	65747369 00000d72 7c207c20 7c207c20     ister... | | | |
    89c0:	42207c20 20525346 7830203d 58323025      | BFSR = 0x%02X
    89d0:	00000a0d 7c207c20 7c207c20 61735520     .... | | | | Usa
    89e0:	61466567 20746c75 74617453 52207375     geFault Status R
    89f0:	73696765 0d726574 00000000 7c207c20     egister..... | |
    8a00:	7c207c20 55207c20 20525346 7830203d      | | | UFSR = 0x
    8a10:	58323025 00000a0d 7c207c20 6d654d20     %02X.... | | Mem
    8a20:	616e614d 41206567 65726464 52207373     Manage Address R
    8a30:	73696765 20726574 6c617628 74696469     egister (validit
    8a40:	25203a79 0a0d2958 00000000 7c207c20     y: %X)...... | |
    8a50:	4d207c20 5241464d 30203d20 38302578      | MMFAR = 0x%08
    8a60:	000a0d58 7c207c20 73754220 6c756146     X... | | BusFaul
    8a70:	64412074 73657264 65522073 74736967     t Address Regist
    8a80:	20207265 6c617628 74696469 25203a79     er  (validity: %
    8a90:	0a0d2958 00000000 7c207c20 42207c20     X)...... | | | B
    8aa0:	20524146 7830203d 58383025 00000a0d     FAR = 0x%08X....
    8ab0:	7c207c20 72614820 61462064 20746c75      | | Hard Fault 
    8ac0:	74617453 52207375 73696765 0d726574     Status Register.
    8ad0:	00000000 7c207c20 48207c20 20525346     .... | | | HFSR 
    8ae0:	30203d20 38302578 000a0d58 7c207c20      = 0x%08X... | |
    8af0:	53464420 203d2052 30257830 0a0d5838      DFSR = 0x%08X..
    8b00:	00000000 7c207c20 53464120 203d2052     .... | | AFSR = 
    8b10:	30257830 0a0d5838 00000000 4d207c20     0x%08X...... | M
    8b20:	0d637369 00000000 7c207c20 2f524c20     isc..... | | LR/
    8b30:	5f435845 55544552 203d4e52 30257830     EXC_RETURN= 0x%0
    8b40:	0a0d5834 00000000 00786825 6e450a0d     4X......%hx...En
    8b50:	20726574 656c6966 656d616e 203e3e20     ter filename >> 
    8b60:	00000000 65746e45 61642072 3e206174     ....Enter data >
    8b70:	0000203e 5b53227b 75343025 7b3a225d     > ..{"S[%04u]":{
    8b80:	3a225122 222c7525 253a2241 44222c75     "Q":%u,"A":%u,"D
    8b90:	7d752522 000a0d7d 5b43227b 75343025     "%u}}...{"C[%04u
    8ba0:	7b3a225d 3a225322 222c7525 3a224153     ]":{"S":%u,"SA":
    8bb0:	222c7525 3a223141 222c7525 3a223241     %u,"A1":%u,"A2":
    8bc0:	222c7525 3a223144 222c7525 3a223244     %u,"D1":%u,"D2":
    8bd0:	7d7d7525 00000a0d 74530a0d 69747261     %u}}......Starti
    8be0:	4c20676e 52414469 746f6d20 000d726f     ng LiDAR motor..
    8bf0:	74530a0d 6970706f 4c20676e 52414469     ..Stopping LiDAR
    8c00:	746f6d20 000d726f 65520a0d 73657571      motor....Reques
    8c10:	676e6974 44694c20 73205241 0d706f74     ting LiDAR stop.
    8c20:	00000000 65520a0d 73657571 676e6974     ......Requesting
    8c30:	44694c20 72205241 74657365 0000000d      LiDAR reset....
    8c40:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    8c50:	73205241 74726174 61637320 00000d6e     AR start scan...
    8c60:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    8c70:	73205241 74726174 70786520 73736572     AR start express
    8c80:	61637320 00000d6e 65520a0d 73657571      scan.....Reques
    8c90:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    8ca0:	726f6620 73206563 0d6e6163 00000000      force scan.....
    8cb0:	65520a0d 65697274 676e6976 44694c20     ..Retrieving LiD
    8cc0:	69205241 0d6f666e 00000000 65520a0d     AR info.......Re
    8cd0:	65697274 676e6976 44694c20 68205241     trieving LiDAR h
    8ce0:	746c6165 00000d68 65520a0d 65697274     ealth.....Retrie
    8cf0:	676e6976 44694c20 73205241 6c706d61     ving LiDAR sampl
    8d00:	74617265 000d7365 63256325 00000000     erates..%c%c....
    8d10:	63256325 00006325 65520a0d 73657571     %c%c%c....Reques
    8d20:	676e6974 44694c20 69205241 0d6f666e     ting LiDAR info.
    8d30:	00000000 65520a0d 73657571 676e6974     ......Requesting
    8d40:	44694c20 68205241 746c6165 00000d68      LiDAR health...
    8d50:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    8d60:	73205241 6c706d61 74617265 000d7365     AR samplerates..
    8d70:	4144694c 74732052 6570706f 00000d64     LiDAR stopped...
    8d80:	4144694c 65722052 0d746573 00000000     LiDAR reset.....
    8d90:	68746167 64657265 6c302520 30252f75     gathered %0lu/%0
    8da0:	63732064 2e736e61 0a0d2e2e 00000000     d scans.........
    8db0:	756c3025 766e6920 64696c61 61637320     %0lu invalid sca
    8dc0:	2d20736e 6167202d 72656874 25206465     ns -- gathered %
    8dd0:	2f756c30 20643025 6e616373 2e2e2e73     0lu/%0d scans...
    8de0:	00000a0d 58323025 00000000 52203a20     ....%02X.... : R
    8df0:	44694c50 4d205241 6c65646f 3a444920     PLiDAR Model ID:
    8e00:	0d752520 0000000a 46203a20 776d7269      %u..... : Firmw
    8e10:	20657261 73726556 3a6e6f69 2e752520     are Version: %u.
    8e20:	0a0d7525 00000000 48203a20 77647261     %u...... : Hardw
    8e30:	20657261 73726556 3a6e6f69 0d752520     are Version: %u.
    8e40:	0000000a 53203a20 61697265 754e206c     .... : Serial Nu
    8e50:	7265626d 7830203a 0a0d7325 00000000     mber: 0x%s......
    8e60:	444f4f47 00000000 4e524157 00474e49     GOOD....WARNING.
    8e70:	4f525245 00000052 4e4b4e55 004e574f     ERROR...UNKNOWN.
    8e80:	4c203a20 52414469 61654820 2068746c      : LiDAR Health 
    8e90:	25207369 0a0d2173 00000000 4c203a20     is %s!...... : L
    8ea0:	52414469 61654820 2068746c 25207369     iDAR Health is %
    8eb0:	0a0d2173 45203a20 726f7272 646f6320     s!.. : Error cod
    8ec0:	25203a65 000a0d75 53203a20 646e6174     e: %u... : Stand
    8ed0:	20647261 6e616353 6d615320 72656c70     ard Scan Sampler
    8ee0:	3a657461 0d752520 0000000a 45203a20     ate: %u..... : E
    8ef0:	65727078 53207373 206e6163 706d6153     xpress Scan Samp
    8f00:	6172656c 203a6574 0a0d7525 00000000     lerate: %u......
    8f10:	0a0d0a0d 3d3d3d3d 3d3d3d3d 4144694c     ....========LiDA
    8f20:	75412052 616d6f74 20646574 7070614d     R Automated Mapp
    8f30:	20676e69 74737953 28206d65 534d414c     ing System (LAMS
    8f40:	3d3d3d29 3d3d3d3d 00000d3d 6e490a0d     )========.....In
    8f50:	696c6176 706f2064 6e6f6974 00000d20     valid option ...
    8f60:	535b0a0d 206e6163 6f727245 000d5d72     ..[Scan Error]..
    8f70:	54207c20 6f656d69 45207475 726f7272      | Timeout Error
    8f80:	0000000d 4f207c20 6f2d7475 6f422d66     .... | Out-of-Bo
    8f90:	73646e75 72724520 000d726f 7c207c20     unds Error.. | |
    8fa0:	74796220 6f632065 20746e75 756c2528      byte count (%lu
    8fb0:	65772029 7020746e 20747361 20656874     ) went past the 
    8fc0:	70736572 65736e6f 73656420 70697263     response descrip
    8fd0:	20726f74 696d696c 25282074 0d29756c     tor limit (%lu).
    8fe0:	0000000a 45207c20 726f7272 646f6320     .... | Error cod
    8ff0:	75252065 00000a0d 72500a0d 20737365     e %u......Press 
    9000:	74747562 74206e6f 7473206f 0d747261     button to start.
    9010:	00000000 74530a0d 69747261 7320676e     ......Starting s
    9020:	0d6e6163 00000000                       can.....

00009028 <sd_mmc_trans_units>:
    9028:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00009044 <sd_trans_multipliers>:
    9044:	00000000 0000000a 0000000c 0000000d     ................
    9054:	0000000f 00000014 00000019 0000001e     ................
    9064:	00000023 00000028 0000002d 00000032     #...(...-...2...
    9074:	00000037 0000003c 00000046 00000050     7...<...F...P...

00009084 <mmc_trans_multipliers>:
    9084:	00000000 0000000a 0000000c 0000000d     ................
    9094:	0000000f 00000014 0000001a 0000001e     ................
    90a4:	00000023 00000028 0000002d 00000034     #...(...-...4...
    90b4:	00000037 0000003c 00000046 00000050     7...<...F...P...
    90c4:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    90d4:	0000632e 6e450a0d 20726574 6c676e61     .c....Enter angl
    90e4:	3e3e2065 00000020 52450a0d 3a524f52     e >> .....ERROR:
    90f4:	766e4920 64696c61 676e6120 202e656c      Invalid angle. 
    9104:	6c676e41 756d2065 62207473 65622065     Angle must be be
    9114:	65657774 2030206e 20646e61 0d303831     tween 0 and 180.
    9124:	00000000 65530a0d 6e697474 65732067     ......Setting se
    9134:	206f7672 6c676e61 6f742065 6c302520     rvo angle to %0l
    9144:	000a0d75                                u...

00009148 <__sf_fake_stderr>:
	...

00009168 <__sf_fake_stdin>:
	...

00009188 <__sf_fake_stdout>:
	...

000091a8 <_global_impure_ptr>:
    91a8:	200002e0 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    91b8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    91c8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    91d8:	64636261 00006665 000091fe 00009201     abcdef..........
    91e8:	00009204 61462d41 3938662d 33323130     ....A-Fa-f890123
    91f8:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    9208:	534f5000 2e005849 20200000                       .POSIX...

00009211 <_ctype_>:
    9211:	20202000 20202020 28282020 20282828     .         ((((( 
    9221:	20202020 20202020 20202020 20202020                     
    9231:	10108820 10101010 10101010 10101010      ...............
    9241:	04040410 04040404 10040404 10101010     ................
    9251:	41411010 41414141 01010101 01010101     ..AAAAAA........
    9261:	01010101 01010101 01010101 10101010     ................
    9271:	42421010 42424242 02020202 02020202     ..BBBBBB........
    9281:	02020202 02020202 02020202 10101010     ................
    9291:	00000020 00000000 00000000 00000000      ...............
	...

00009314 <_init>:
    9314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9316:	bf00      	nop
    9318:	bcf8      	pop	{r3, r4, r5, r6, r7}
    931a:	bc08      	pop	{r3}
    931c:	469e      	mov	lr, r3
    931e:	4770      	bx	lr

00009320 <__init_array_start>:
    9320:	00000289 	.word	0x00000289

00009324 <_fini>:
    9324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9326:	bf00      	nop
    9328:	bcf8      	pop	{r3, r4, r5, r6, r7}
    932a:	bc08      	pop	{r3}
    932c:	469e      	mov	lr, r3
    932e:	4770      	bx	lr

00009330 <__fini_array_start>:
    9330:	00000265 	.word	0x00000265
