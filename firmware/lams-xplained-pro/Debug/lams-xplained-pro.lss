
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c108  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000c108  0000c108  0001c108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000260  20000000  0000c110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020260  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020260  2**0
                  CONTENTS
  5 .bss          00004334  20000260  0000c370  00020260  2**3
                  ALLOC
  6 .stack        00010004  20004594  000106a4  00020260  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002028a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004bee8  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006554  00000000  00000000  0006c1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001929c  00000000  00000000  0007271f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001120  00000000  00000000  0008b9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000015d0  00000000  00000000  0008cadb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003e725  00000000  00000000  0008e0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00022680  00000000  00000000  000cc7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012b0ae  00000000  00000000  000eee50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00004618  00000000  00000000  00219f00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 45 01 20 d5 02 00 00 d1 02 00 00 59 36 00 00     .E. ........Y6..
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	c9 37 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .7..............
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	89 2c 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .,..............
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	7d 2b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     }+..............
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000260 	.word	0x20000260
     280:	00000000 	.word	0x00000000
     284:	0000c110 	.word	0x0000c110

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000c110 	.word	0x0000c110
     2c4:	20000264 	.word	0x20000264
     2c8:	0000c110 	.word	0x0000c110
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000c110 	.word	0x0000c110
     33c:	20000260 	.word	0x20000260
     340:	20004594 	.word	0x20004594
     344:	20000260 	.word	0x20000260
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	000080f9 	.word	0x000080f9
     354:	000042e5 	.word	0x000042e5

00000358 <sd_mmc_test_unit_ready>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_test_unit_ready(uint8_t slot)
{
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot)) {
     35c:	4b0a      	ldr	r3, [pc, #40]	; (388 <sd_mmc_test_unit_ready+0x30>)
     35e:	4798      	blx	r3
     360:	2801      	cmp	r0, #1
     362:	d00f      	beq.n	384 <sd_mmc_test_unit_ready+0x2c>
     364:	b120      	cbz	r0, 370 <sd_mmc_test_unit_ready+0x18>
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     366:	2802      	cmp	r0, #2
     368:	bf0c      	ite	eq
     36a:	2002      	moveq	r0, #2
     36c:	2001      	movne	r0, #1
     36e:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     370:	4620      	mov	r0, r4
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <sd_mmc_test_unit_ready+0x34>)
     374:	4798      	blx	r3
     376:	f000 0003 	and.w	r0, r0, #3
			return CTRL_NO_PRESENT;
     37a:	2800      	cmp	r0, #0
     37c:	bf14      	ite	ne
     37e:	2000      	movne	r0, #0
     380:	2002      	moveq	r0, #2
     382:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
     384:	2003      	movs	r0, #3
	}
}
     386:	bd10      	pop	{r4, pc}
     388:	0000538d 	.word	0x0000538d
     38c:	000059d5 	.word	0x000059d5

00000390 <sd_mmc_read_capacity>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     390:	b538      	push	{r3, r4, r5, lr}
     392:	4604      	mov	r4, r0
     394:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <sd_mmc_read_capacity+0x18>)
     398:	4798      	blx	r3
     39a:	0040      	lsls	r0, r0, #1
     39c:	3801      	subs	r0, #1
     39e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     3a0:	4620      	mov	r0, r4
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <sd_mmc_read_capacity+0x1c>)
     3a4:	4798      	blx	r3
}
     3a6:	bd38      	pop	{r3, r4, r5, pc}
     3a8:	000059f9 	.word	0x000059f9
     3ac:	00000359 	.word	0x00000359

000003b0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
dstatus_t disk_initialize(uint8_t drv)
{
     3b0:	b510      	push	{r4, lr}
     3b2:	4604      	mov	r4, r0
	int           i;
	ctrl_status_t mem_status;

	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i++) {
		mem_status = sd_mmc_test_unit_ready(drv);
     3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <disk_initialize+0x30>)
     3b6:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3b8:	2803      	cmp	r0, #3
     3ba:	d106      	bne.n	3ca <disk_initialize+0x1a>
		mem_status = sd_mmc_test_unit_ready(drv);
     3bc:	4620      	mov	r0, r4
     3be:	4b08      	ldr	r3, [pc, #32]	; (3e0 <disk_initialize+0x30>)
     3c0:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
     3c2:	2803      	cmp	r0, #3
     3c4:	d101      	bne.n	3ca <disk_initialize+0x1a>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
     3c6:	2001      	movs	r0, #1
     3c8:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
     3ca:	b938      	cbnz	r0, 3dc <disk_initialize+0x2c>
	}

	/* Check Write Protection Status */
	if (sd_mmc_is_write_protected(drv)) {
     3cc:	4620      	mov	r0, r4
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <disk_initialize+0x34>)
     3d0:	4798      	blx	r3
     3d2:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
     3d4:	bf14      	ite	ne
     3d6:	2004      	movne	r0, #4
     3d8:	2000      	moveq	r0, #0
     3da:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
     3dc:	2001      	movs	r0, #1
}
     3de:	bd10      	pop	{r4, pc}
     3e0:	00000359 	.word	0x00000359
     3e4:	00005a1d 	.word	0x00005a1d

000003e8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
dstatus_t disk_status(uint8_t drv)
{
     3e8:	b508      	push	{r3, lr}
	switch (sd_mmc_test_unit_ready(drv)) {
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <disk_status+0x18>)
     3ec:	4798      	blx	r3
     3ee:	b120      	cbz	r0, 3fa <disk_status+0x12>
	case CTRL_GOOD:
		return ERR_NONE;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
     3f0:	2802      	cmp	r0, #2
     3f2:	bf0c      	ite	eq
     3f4:	2003      	moveq	r0, #3
     3f6:	2001      	movne	r0, #1
     3f8:	bd08      	pop	{r3, pc}
		return ERR_NONE;
     3fa:	2000      	movs	r0, #0
	}
}
     3fc:	bd08      	pop	{r3, pc}
     3fe:	bf00      	nop
     400:	00000359 	.word	0x00000359

00000404 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_read(uint8_t drv, uint8_t *buff, uint32_t sector, uint8_t count)
{
     404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     408:	b083      	sub	sp, #12
     40a:	4683      	mov	fp, r0
     40c:	4688      	mov	r8, r1
     40e:	4614      	mov	r4, r2
     410:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     412:	a901      	add	r1, sp, #4
     414:	4b17      	ldr	r3, [pc, #92]	; (474 <disk_read+0x70>)
     416:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     418:	192e      	adds	r6, r5, r4
     41a:	9b01      	ldr	r3, [sp, #4]
     41c:	3301      	adds	r3, #1
     41e:	429e      	cmp	r6, r3
     420:	d901      	bls.n	426 <disk_read+0x22>
		return ERR_INVALID_ARG;
     422:	20f3      	movs	r0, #243	; 0xf3
     424:	e01f      	b.n	466 <disk_read+0x62>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
     426:	b30d      	cbz	r5, 46c <disk_read+0x68>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     428:	4f13      	ldr	r7, [pc, #76]	; (478 <disk_read+0x74>)
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     42a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 47c <disk_read+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     42e:	f8df a050 	ldr.w	sl, [pc, #80]	; 480 <disk_read+0x7c>
     432:	e00f      	b.n	454 <disk_read+0x50>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     434:	2101      	movs	r1, #1
     436:	4640      	mov	r0, r8
     438:	47c8      	blx	r9
     43a:	b998      	cbnz	r0, 464 <disk_read+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     43c:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     43e:	3000      	adds	r0, #0
     440:	bf18      	it	ne
     442:	2001      	movne	r0, #1
     444:	e000      	b.n	448 <disk_read+0x44>
     446:	2002      	movs	r0, #2
		if (sd_mmc_mem_2_ram(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     448:	b990      	cbnz	r0, 470 <disk_read+0x6c>
     44a:	3401      	adds	r4, #1
     44c:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     450:	42a6      	cmp	r6, r4
     452:	d008      	beq.n	466 <disk_read+0x62>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     454:	2201      	movs	r2, #1
     456:	4621      	mov	r1, r4
     458:	4658      	mov	r0, fp
     45a:	47b8      	blx	r7
     45c:	2800      	cmp	r0, #0
     45e:	d0e9      	beq.n	434 <disk_read+0x30>
     460:	2802      	cmp	r0, #2
     462:	d0f0      	beq.n	446 <disk_read+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     464:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     466:	b003      	add	sp, #12
     468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     46c:	2000      	movs	r0, #0
     46e:	e7fa      	b.n	466 <disk_read+0x62>
			return ERR_INVALID_DATA;
     470:	20ff      	movs	r0, #255	; 0xff
     472:	e7f8      	b.n	466 <disk_read+0x62>
     474:	00000391 	.word	0x00000391
     478:	00005a95 	.word	0x00005a95
     47c:	00005b6d 	.word	0x00005b6d
     480:	00005bb9 	.word	0x00005bb9

00000484 <disk_write>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_write(uint8_t drv, uint8_t const *buff, uint32_t sector, uint8_t count)
{
     484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     488:	b083      	sub	sp, #12
     48a:	4683      	mov	fp, r0
     48c:	4688      	mov	r8, r1
     48e:	4614      	mov	r4, r2
     490:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     492:	a901      	add	r1, sp, #4
     494:	4b17      	ldr	r3, [pc, #92]	; (4f4 <disk_write+0x70>)
     496:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     498:	192e      	adds	r6, r5, r4
     49a:	9b01      	ldr	r3, [sp, #4]
     49c:	3301      	adds	r3, #1
     49e:	429e      	cmp	r6, r3
     4a0:	d901      	bls.n	4a6 <disk_write+0x22>
		return ERR_INVALID_ARG;
     4a2:	20f3      	movs	r0, #243	; 0xf3
     4a4:	e01f      	b.n	4e6 <disk_write+0x62>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
     4a6:	b30d      	cbz	r5, 4ec <disk_write+0x68>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4a8:	4f13      	ldr	r7, [pc, #76]	; (4f8 <disk_write+0x74>)
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4fc <disk_write+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4ae:	f8df a050 	ldr.w	sl, [pc, #80]	; 500 <disk_write+0x7c>
     4b2:	e00f      	b.n	4d4 <disk_write+0x50>
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     4b4:	2101      	movs	r1, #1
     4b6:	4640      	mov	r0, r8
     4b8:	47c8      	blx	r9
     4ba:	b998      	cbnz	r0, 4e4 <disk_write+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     4bc:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
     4be:	3000      	adds	r0, #0
     4c0:	bf18      	it	ne
     4c2:	2001      	movne	r0, #1
     4c4:	e000      	b.n	4c8 <disk_write+0x44>
     4c6:	2002      	movs	r0, #2
		if (sd_mmc_ram_2_mem(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     4c8:	b990      	cbnz	r0, 4f0 <disk_write+0x6c>
     4ca:	3401      	adds	r4, #1
     4cc:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
     4d0:	42a6      	cmp	r6, r4
     4d2:	d008      	beq.n	4e6 <disk_write+0x62>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     4d4:	2201      	movs	r2, #1
     4d6:	4621      	mov	r1, r4
     4d8:	4658      	mov	r0, fp
     4da:	47b8      	blx	r7
     4dc:	2800      	cmp	r0, #0
     4de:	d0e9      	beq.n	4b4 <disk_write+0x30>
     4e0:	2802      	cmp	r0, #2
     4e2:	d0f0      	beq.n	4c6 <disk_write+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
     4e4:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
     4e6:	b003      	add	sp, #12
     4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
     4ec:	2000      	movs	r0, #0
     4ee:	e7fa      	b.n	4e6 <disk_write+0x62>
			return ERR_INVALID_DATA;
     4f0:	20ff      	movs	r0, #255	; 0xff
     4f2:	e7f8      	b.n	4e6 <disk_write+0x62>
     4f4:	00000391 	.word	0x00000391
     4f8:	00005c29 	.word	0x00005c29
     4fc:	00005cc9 	.word	0x00005cc9
     500:	00005d15 	.word	0x00005d15

00000504 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
     504:	b510      	push	{r4, lr}
     506:	b082      	sub	sp, #8
     508:	4614      	mov	r4, r2
	dstatus_t res = ERR_INVALID_ARG;

	switch (ctrl) {
     50a:	2903      	cmp	r1, #3
     50c:	d81a      	bhi.n	544 <disk_ioctl+0x40>
     50e:	e8df f001 	tbb	[pc, r1]
     512:	0712      	.short	0x0712
     514:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(unsigned long *)buff = 1;
     516:	2301      	movs	r3, #1
     518:	6013      	str	r3, [r2, #0]
		res                    = ERR_NONE;
     51a:	2000      	movs	r0, #0
	default:
		res = ERR_INVALID_ARG;
	}

	return res;
}
     51c:	b002      	add	sp, #8
     51e:	bd10      	pop	{r4, pc}
		sd_mmc_read_capacity(drv, &ul_last_sector_num);
     520:	a901      	add	r1, sp, #4
     522:	4b09      	ldr	r3, [pc, #36]	; (548 <disk_ioctl+0x44>)
     524:	4798      	blx	r3
		*(unsigned long *)buff = ul_last_sector_num + 1;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3301      	adds	r3, #1
     52a:	6023      	str	r3, [r4, #0]
		res = ERR_NONE;
     52c:	2000      	movs	r0, #0
	} break;
     52e:	e7f5      	b.n	51c <disk_ioctl+0x18>
		*(uint8_t *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
     530:	2000      	movs	r0, #0
     532:	7010      	strb	r0, [r2, #0]
	} break;
     534:	e7f2      	b.n	51c <disk_ioctl+0x18>
		if (sd_mmc_test_unit_ready(drv) == CTRL_GOOD) {
     536:	4b05      	ldr	r3, [pc, #20]	; (54c <disk_ioctl+0x48>)
     538:	4798      	blx	r3
     53a:	2800      	cmp	r0, #0
			res = ERR_NOT_READY;
     53c:	bf0c      	ite	eq
     53e:	2000      	moveq	r0, #0
     540:	20e3      	movne	r0, #227	; 0xe3
     542:	e7eb      	b.n	51c <disk_ioctl+0x18>
		res = ERR_INVALID_ARG;
     544:	20f3      	movs	r0, #243	; 0xf3
     546:	e7e9      	b.n	51c <disk_ioctl+0x18>
     548:	00000391 	.word	0x00000391
     54c:	00000359 	.word	0x00000359

00000550 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     550:	4b10      	ldr	r3, [pc, #64]	; (594 <STDIO_IO_PORT_init+0x44>)
     552:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     566:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     592:	4770      	bx	lr
     594:	41008000 	.word	0x41008000

00000598 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <STDIO_IO_CLOCK_init+0x1c>)
     59a:	2240      	movs	r2, #64	; 0x40
     59c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     5a0:	2243      	movs	r2, #67	; 0x43
     5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     5a6:	4a04      	ldr	r2, [pc, #16]	; (5b8 <STDIO_IO_CLOCK_init+0x20>)
     5a8:	6993      	ldr	r3, [r2, #24]
     5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     5ae:	6193      	str	r3, [r2, #24]
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	40001c00 	.word	0x40001c00
     5b8:	40000800 	.word	0x40000800

000005bc <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     5bc:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <STDIO_IO_init+0x18>)
     5c0:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     5c2:	2200      	movs	r2, #0
     5c4:	4904      	ldr	r1, [pc, #16]	; (5d8 <STDIO_IO_init+0x1c>)
     5c6:	4805      	ldr	r0, [pc, #20]	; (5dc <STDIO_IO_init+0x20>)
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <STDIO_IO_init+0x24>)
     5ca:	4798      	blx	r3
	STDIO_IO_PORT_init();
     5cc:	4b05      	ldr	r3, [pc, #20]	; (5e4 <STDIO_IO_init+0x28>)
     5ce:	4798      	blx	r3
     5d0:	bd08      	pop	{r3, pc}
     5d2:	bf00      	nop
     5d4:	00000599 	.word	0x00000599
     5d8:	41012000 	.word	0x41012000
     5dc:	20004168 	.word	0x20004168
     5e0:	000029d5 	.word	0x000029d5
     5e4:	00000551 	.word	0x00000551

000005e8 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     5e8:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ea:	4b72      	ldr	r3, [pc, #456]	; (7b4 <SDHC_IO_BUS_PORT_init+0x1cc>)
     5ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     5f0:	6099      	str	r1, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     5f6:	629a      	str	r2, [r3, #40]	; 0x28
     5f8:	4d6f      	ldr	r5, [pc, #444]	; (7b8 <SDHC_IO_BUS_PORT_init+0x1d0>)
     5fa:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fc:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5fe:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
     602:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     606:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60a:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     60e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     612:	f040 0001 	orr.w	r0, r0, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     616:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     61e:	f000 000f 	and.w	r0, r0, #15
	tmp |= PORT_PMUX_PMUXO(data);
     622:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     626:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     62e:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	629a      	str	r2, [r3, #40]	; 0x28
     632:	4e62      	ldr	r6, [pc, #392]	; (7bc <SDHC_IO_BUS_PORT_init+0x1d4>)
     634:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     636:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     638:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
     63c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     640:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     644:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     648:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     650:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     654:	f893 403a 	ldrb.w	r4, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     658:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     65c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     660:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     664:	f44f 2480 	mov.w	r4, #262144	; 0x40000
     668:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     66c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     670:	4f53      	ldr	r7, [pc, #332]	; (7c0 <SDHC_IO_BUS_PORT_init+0x1d8>)
     672:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     676:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     67a:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
     67e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     682:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     686:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     68a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68e:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     692:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69a:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     69e:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a2:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a6:	f44f 2400 	mov.w	r4, #524288	; 0x80000
     6aa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6b2:	3704      	adds	r7, #4
     6b4:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6b8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6bc:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
     6c0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     6c4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c8:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     6cc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d0:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6d8:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6dc:	f004 040f 	and.w	r4, r4, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6e0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e4:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6e8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6f0:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6f8:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
     6fc:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     700:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     704:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     708:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     710:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     714:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     718:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     71c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     720:	f883 40ba 	strb.w	r4, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     724:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     728:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     72c:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     730:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     734:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     738:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     73c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     740:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     748:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     74c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     750:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     754:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     75c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     760:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     764:	4817      	ldr	r0, [pc, #92]	; (7c4 <SDHC_IO_BUS_PORT_init+0x1dc>)
     766:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     76a:	4a17      	ldr	r2, [pc, #92]	; (7c8 <SDHC_IO_BUS_PORT_init+0x1e0>)
     76c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     770:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     774:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     778:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     77c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     784:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     788:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78c:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     790:	4a0e      	ldr	r2, [pc, #56]	; (7cc <SDHC_IO_BUS_PORT_init+0x1e4>)
     792:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     796:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     79a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     79e:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a2:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	gpio_set_pin_function(CARD_DETECT_0, GPIO_PIN_FUNCTION_OFF);
	
	gpio_set_pin_direction(WRITE_PROTECT_0, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(WRITE_PROTECT_0, GPIO_PULL_OFF);
	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);
}
     7ae:	bcf0      	pop	{r4, r5, r6, r7}
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	41008000 	.word	0x41008000
     7b8:	c0000020 	.word	0xc0000020
     7bc:	c0000010 	.word	0xc0000010
     7c0:	c0000004 	.word	0xc0000004
     7c4:	40020000 	.word	0x40020000
     7c8:	c0020010 	.word	0xc0020010
     7cc:	c0020020 	.word	0xc0020020

000007d0 <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     7d0:	4a05      	ldr	r2, [pc, #20]	; (7e8 <SDHC_IO_BUS_CLOCK_init+0x18>)
     7d2:	6913      	ldr	r3, [r2, #16]
     7d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     7d8:	6113      	str	r3, [r2, #16]
     7da:	4b04      	ldr	r3, [pc, #16]	; (7ec <SDHC_IO_BUS_CLOCK_init+0x1c>)
     7dc:	2240      	movs	r2, #64	; 0x40
     7de:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     7e6:	4770      	bx	lr
     7e8:	40000800 	.word	0x40000800
     7ec:	40001c00 	.word	0x40001c00

000007f0 <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     7f0:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     7f2:	4b05      	ldr	r3, [pc, #20]	; (808 <SDHC_IO_BUS_init+0x18>)
     7f4:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     7f6:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     7fa:	4804      	ldr	r0, [pc, #16]	; (80c <SDHC_IO_BUS_init+0x1c>)
     7fc:	4b04      	ldr	r3, [pc, #16]	; (810 <SDHC_IO_BUS_init+0x20>)
     7fe:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <SDHC_IO_BUS_init+0x24>)
     802:	4798      	blx	r3
     804:	bd08      	pop	{r3, pc}
     806:	bf00      	nop
     808:	000007d1 	.word	0x000007d1
     80c:	20004178 	.word	0x20004178
     810:	00002669 	.word	0x00002669
     814:	000005e9 	.word	0x000005e9

00000818 <GPIO_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	4b18      	ldr	r3, [pc, #96]	; (87c <GPIO_init+0x64>)
     81a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     81e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     822:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     82a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     82e:	4a14      	ldr	r2, [pc, #80]	; (880 <GPIO_init+0x68>)
     830:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     834:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     844:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     846:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     848:	4a0e      	ldr	r2, [pc, #56]	; (884 <GPIO_init+0x6c>)
     84a:	629a      	str	r2, [r3, #40]	; 0x28
     84c:	4a0e      	ldr	r2, [pc, #56]	; (888 <GPIO_init+0x70>)
     84e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     850:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
	tmp &= ~PORT_PINCFG_PMUXEN;
     854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     858:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	2240      	movs	r2, #64	; 0x40
     85e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     860:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     862:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     866:	629a      	str	r2, [r3, #40]	; 0x28
     868:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     86c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     872:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
     87a:	4770      	bx	lr
     87c:	41008000 	.word	0x41008000
     880:	c0000004 	.word	0xc0000004
     884:	40020000 	.word	0x40020000
     888:	c0020800 	.word	0xc0020800

0000088c <system_init>:
	gpio_set_pin_direction(LED_STATUS, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(LED_STATUS, GPIO_PIN_FUNCTION_OFF);
}

void system_init(void)
{
     88c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     88e:	4b08      	ldr	r3, [pc, #32]	; (8b0 <system_init+0x24>)
     890:	4798      	blx	r3
	init_mcu();

	GPIO_init();
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <system_init+0x28>)
     894:	4798      	blx	r3
	FATFS_CALENDAR_init();
     896:	4b08      	ldr	r3, [pc, #32]	; (8b8 <system_init+0x2c>)
     898:	4798      	blx	r3
	LIDAR_USART_init();
     89a:	4b08      	ldr	r3, [pc, #32]	; (8bc <system_init+0x30>)
     89c:	4798      	blx	r3
	STDIO_IO_init();
     89e:	4b08      	ldr	r3, [pc, #32]	; (8c0 <system_init+0x34>)
     8a0:	4798      	blx	r3
	SDHC_IO_BUS_init();
     8a2:	4b08      	ldr	r3, [pc, #32]	; (8c4 <system_init+0x38>)
     8a4:	4798      	blx	r3
	SERVO_PWM_init();
     8a6:	4b08      	ldr	r3, [pc, #32]	; (8c8 <system_init+0x3c>)
     8a8:	4798      	blx	r3
	LIDAR_PWM_init();
     8aa:	4b08      	ldr	r3, [pc, #32]	; (8cc <system_init+0x40>)
     8ac:	4798      	blx	r3
     8ae:	bd08      	pop	{r3, pc}
     8b0:	00002add 	.word	0x00002add
     8b4:	00000819 	.word	0x00000819
     8b8:	00000995 	.word	0x00000995
     8bc:	00003a45 	.word	0x00003a45
     8c0:	000005bd 	.word	0x000005bd
     8c4:	000007f1 	.word	0x000007f1
     8c8:	00005d7d 	.word	0x00005d7d
     8cc:	00003869 	.word	0x00003869

000008d0 <invert_seep_byte>:
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_LOAD) >> NVMCTRL_SEESTAT_LOAD_Pos;
}

static inline bool hri_nvmctrl_get_SEESTAT_BUSY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     8d0:	4a07      	ldr	r2, [pc, #28]	; (8f0 <invert_seep_byte+0x20>)
     8d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     8d4:	f013 0f04 	tst.w	r3, #4
     8d8:	d1fb      	bne.n	8d2 <invert_seep_byte+0x2>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
     8da:	4b06      	ldr	r3, [pc, #24]	; (8f4 <invert_seep_byte+0x24>)
     8dc:	681a      	ldr	r2, [r3, #0]
     8de:	5c13      	ldrb	r3, [r2, r0]
     8e0:	4905      	ldr	r1, [pc, #20]	; (8f8 <invert_seep_byte+0x28>)
     8e2:	700b      	strb	r3, [r1, #0]
	if (LAMS_DEBUG)
		printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
	SmartEEPROM8[index] = !data_8;
     8e4:	fab3 f383 	clz	r3, r3
     8e8:	095b      	lsrs	r3, r3, #5
     8ea:	5413      	strb	r3, [r2, r0]
     8ec:	4770      	bx	lr
     8ee:	bf00      	nop
     8f0:	41004000 	.word	0x41004000
     8f4:	20000000 	.word	0x20000000
     8f8:	20004190 	.word	0x20004190

000008fc <verify_seep_signature>:
     8fc:	4a09      	ldr	r2, [pc, #36]	; (924 <verify_seep_signature+0x28>)
     8fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  */
int8_t verify_seep_signature(void)
{
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     900:	f013 0f04 	tst.w	r3, #4
     904:	d1fb      	bne.n	8fe <verify_seep_signature+0x2>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK(mask)) >> NVMCTRL_SEESTAT_SBLK_Pos;
}

static inline hri_nvmctrl_seestat_reg_t hri_nvmctrl_read_SEESTAT_SBLK_bf(const void *const hw)
{
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
     906:	4b07      	ldr	r3, [pc, #28]	; (924 <verify_seep_signature+0x28>)
     908:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
     90a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
     90e:	d100      	bne.n	912 <verify_seep_signature+0x16>
     910:	e7fe      	b.n	910 <verify_seep_signature+0x14>
		if (LAMS_DEBUG)
			printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
     912:	4b05      	ldr	r3, [pc, #20]	; (928 <verify_seep_signature+0x2c>)
     914:	685b      	ldr	r3, [r3, #4]
     916:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
     918:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
     91c:	bf18      	it	ne
     91e:	f04f 30ff 	movne.w	r0, #4294967295
     922:	4770      	bx	lr
     924:	41004000 	.word	0x41004000
     928:	20000000 	.word	0x20000000

0000092c <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
     92c:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
     92e:	4b10      	ldr	r3, [pc, #64]	; (970 <EEPROM_init+0x44>)
     930:	4798      	blx	r3
     932:	b148      	cbz	r0, 948 <EEPROM_init+0x1c>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
     934:	4a0f      	ldr	r2, [pc, #60]	; (974 <EEPROM_init+0x48>)
     936:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (LAMS_DEBUG)
			printf("\r\nSmartEEPROM contains valid data \r\n");
	} else {
		if (LAMS_DEBUG)
			printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
     938:	f013 0f04 	tst.w	r3, #4
     93c:	d1fb      	bne.n	936 <EEPROM_init+0xa>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
     93e:	4b0e      	ldr	r3, [pc, #56]	; (978 <EEPROM_init+0x4c>)
     940:	685b      	ldr	r3, [r3, #4]
     942:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
     946:	601a      	str	r2, [r3, #0]
			(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
			(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));
	}

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
     948:	2020      	movs	r0, #32
     94a:	4b0c      	ldr	r3, [pc, #48]	; (97c <EEPROM_init+0x50>)
     94c:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
     94e:	4b0a      	ldr	r3, [pc, #40]	; (978 <EEPROM_init+0x4c>)
     950:	681b      	ldr	r3, [r3, #0]
     952:	f893 3020 	ldrb.w	r3, [r3, #32]
     956:	b92b      	cbnz	r3, 964 <EEPROM_init+0x38>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     958:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     95c:	4b08      	ldr	r3, [pc, #32]	; (980 <EEPROM_init+0x54>)
     95e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     962:	bd08      	pop	{r3, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     964:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     968:	4b05      	ldr	r3, [pc, #20]	; (980 <EEPROM_init+0x54>)
     96a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     96e:	bd08      	pop	{r3, pc}
     970:	000008fd 	.word	0x000008fd
     974:	41004000 	.word	0x41004000
     978:	20000000 	.word	0x20000000
     97c:	000008d1 	.word	0x000008d1
     980:	41008000 	.word	0x41008000

00000984 <FATFS_CALENDAR_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     984:	4a02      	ldr	r2, [pc, #8]	; (990 <FATFS_CALENDAR_CLOCK_init+0xc>)
     986:	6953      	ldr	r3, [r2, #20]
     988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     98c:	6153      	str	r3, [r2, #20]
     98e:	4770      	bx	lr
     990:	40000800 	.word	0x40000800

00000994 <FATFS_CALENDAR_init>:

/**
  *	Initializes calendar for FATFS
  */ 
void FATFS_CALENDAR_init(void)
{
     994:	b508      	push	{r3, lr}
	FATFS_CALENDAR_CLOCK_init();
     996:	4b03      	ldr	r3, [pc, #12]	; (9a4 <FATFS_CALENDAR_init+0x10>)
     998:	4798      	blx	r3
	calendar_init(&CALENDER_INTERFACE, RTC);
     99a:	4903      	ldr	r1, [pc, #12]	; (9a8 <FATFS_CALENDAR_init+0x14>)
     99c:	4803      	ldr	r0, [pc, #12]	; (9ac <FATFS_CALENDAR_init+0x18>)
     99e:	4b04      	ldr	r3, [pc, #16]	; (9b0 <FATFS_CALENDAR_init+0x1c>)
     9a0:	4798      	blx	r3
     9a2:	bd08      	pop	{r3, pc}
     9a4:	00000985 	.word	0x00000985
     9a8:	40002400 	.word	0x40002400
     9ac:	200041f8 	.word	0x200041f8
     9b0:	00002589 	.word	0x00002589

000009b4 <get_fattime>:
 *		[15:11]  Hour (0..23)
 *		[10:5]   Minute (0..59)
 *		[4:0]    Second (0..59)
 */
DWORD get_fattime(void)
{
     9b4:	b500      	push	{lr}
     9b6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct calendar_date_time datetime;
	
	calendar_get_date_time(&CALENDER_INTERFACE, &datetime);
     9b8:	4669      	mov	r1, sp
     9ba:	480f      	ldr	r0, [pc, #60]	; (9f8 <get_fattime+0x44>)
     9bc:	4b0f      	ldr	r3, [pc, #60]	; (9fc <get_fattime+0x48>)
     9be:	4798      	blx	r3

	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     9c0:	f89d 0005 	ldrb.w	r0, [sp, #5]
     9c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
     9c8:	041b      	lsls	r3, r3, #16
			 | (datetime.time.hour << 11) | (datetime.time.min << 5) | (datetime.time.sec << 0);
     9ca:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
     9ce:	f89d 0000 	ldrb.w	r0, [sp]
     9d2:	4303      	orrs	r3, r0
     9d4:	f89d 0002 	ldrb.w	r0, [sp, #2]
     9d8:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
     9dc:	f89d 0001 	ldrb.w	r0, [sp, #1]
     9e0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
     9e4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
     9e8:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
	return ul_time;
}
     9ec:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
     9f0:	b003      	add	sp, #12
     9f2:	f85d fb04 	ldr.w	pc, [sp], #4
     9f6:	bf00      	nop
     9f8:	200041f8 	.word	0x200041f8
     9fc:	000025cd 	.word	0x000025cd

00000a00 <FATFS_fresult_desc>:
/**
  *	Return string based on file result
  */
char* FATFS_fresult_desc(FRESULT res)
{
	switch (res) {
     a00:	3801      	subs	r0, #1
     a02:	2812      	cmp	r0, #18
     a04:	d82f      	bhi.n	a66 <FATFS_fresult_desc+0x66>
     a06:	e8df f000 	tbb	[pc, r0]
     a0a:	0a30      	.short	0x0a30
     a0c:	12100e0c 	.word	0x12100e0c
     a10:	1a181614 	.word	0x1a181614
     a14:	22201e1c 	.word	0x22201e1c
     a18:	2a282624 	.word	0x2a282624
     a1c:	2c          	.byte	0x2c
     a1d:	00          	.byte	0x00
		case FR_DISK_ERR:			 return "Hard error occurred in the low level disk I/O layer";
		case FR_INT_ERR:			 return "Assertion failed";
     a1e:	4814      	ldr	r0, [pc, #80]	; (a70 <FATFS_fresult_desc+0x70>)
     a20:	4770      	bx	lr
		case FR_NOT_READY:			 return "Physical drive cannot work";
     a22:	4814      	ldr	r0, [pc, #80]	; (a74 <FATFS_fresult_desc+0x74>)
     a24:	4770      	bx	lr
		case FR_NO_FILE:			 return "Could not find file";
     a26:	4814      	ldr	r0, [pc, #80]	; (a78 <FATFS_fresult_desc+0x78>)
     a28:	4770      	bx	lr
		case FR_NO_PATH:			 return "Could not find path";
     a2a:	4814      	ldr	r0, [pc, #80]	; (a7c <FATFS_fresult_desc+0x7c>)
     a2c:	4770      	bx	lr
		case FR_INVALID_NAME:		 return "Path name format invalid";
     a2e:	4814      	ldr	r0, [pc, #80]	; (a80 <FATFS_fresult_desc+0x80>)
     a30:	4770      	bx	lr
		case FR_DENIED:				 return "Access denied due to prohibited access or directory full";
     a32:	4814      	ldr	r0, [pc, #80]	; (a84 <FATFS_fresult_desc+0x84>)
     a34:	4770      	bx	lr
		case FR_EXIST:				 return "Access denied due to prohibited access";
     a36:	4814      	ldr	r0, [pc, #80]	; (a88 <FATFS_fresult_desc+0x88>)
     a38:	4770      	bx	lr
		case FR_INVALID_OBJECT:		 return "The file/directory object is invalid";
     a3a:	4814      	ldr	r0, [pc, #80]	; (a8c <FATFS_fresult_desc+0x8c>)
     a3c:	4770      	bx	lr
		case FR_WRITE_PROTECTED:	 return "The physical drive is write protected";
     a3e:	4814      	ldr	r0, [pc, #80]	; (a90 <FATFS_fresult_desc+0x90>)
     a40:	4770      	bx	lr
		case FR_INVALID_DRIVE:		 return "The logical drive number is invalid";
     a42:	4814      	ldr	r0, [pc, #80]	; (a94 <FATFS_fresult_desc+0x94>)
     a44:	4770      	bx	lr
		case FR_NOT_ENABLED:		 return "The volume has no work area";
     a46:	4814      	ldr	r0, [pc, #80]	; (a98 <FATFS_fresult_desc+0x98>)
     a48:	4770      	bx	lr
		case FR_NO_FILESYSTEM:		 return "There is no valid FAT volume";
     a4a:	4814      	ldr	r0, [pc, #80]	; (a9c <FATFS_fresult_desc+0x9c>)
     a4c:	4770      	bx	lr
		case FR_MKFS_ABORTED:		 return "The f_mkfs() aborted due to any parameter error";
     a4e:	4814      	ldr	r0, [pc, #80]	; (aa0 <FATFS_fresult_desc+0xa0>)
     a50:	4770      	bx	lr
		case FR_TIMEOUT:			 return "Could not get a grant to access the volume within defined period";
     a52:	4814      	ldr	r0, [pc, #80]	; (aa4 <FATFS_fresult_desc+0xa4>)
     a54:	4770      	bx	lr
		case FR_LOCKED:				 return "The operation is rejected according to the file sharing policy";
     a56:	4814      	ldr	r0, [pc, #80]	; (aa8 <FATFS_fresult_desc+0xa8>)
     a58:	4770      	bx	lr
		case FR_NOT_ENOUGH_CORE:	 return "LFN working buffer could not be allocated";
     a5a:	4814      	ldr	r0, [pc, #80]	; (aac <FATFS_fresult_desc+0xac>)
     a5c:	4770      	bx	lr
		case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_LOCK";
     a5e:	4814      	ldr	r0, [pc, #80]	; (ab0 <FATFS_fresult_desc+0xb0>)
     a60:	4770      	bx	lr
		case FR_INVALID_PARAMETER:	 return "Given parameter is invalid";
     a62:	4814      	ldr	r0, [pc, #80]	; (ab4 <FATFS_fresult_desc+0xb4>)
     a64:	4770      	bx	lr
		default:					 return "Success";
     a66:	4814      	ldr	r0, [pc, #80]	; (ab8 <FATFS_fresult_desc+0xb8>)
     a68:	4770      	bx	lr
		case FR_DISK_ERR:			 return "Hard error occurred in the low level disk I/O layer";
     a6a:	4814      	ldr	r0, [pc, #80]	; (abc <FATFS_fresult_desc+0xbc>)
	}
	return 0;
}
     a6c:	4770      	bx	lr
     a6e:	bf00      	nop
     a70:	0000b07c 	.word	0x0000b07c
     a74:	0000b090 	.word	0x0000b090
     a78:	0000b0ac 	.word	0x0000b0ac
     a7c:	0000b0c0 	.word	0x0000b0c0
     a80:	0000b0d4 	.word	0x0000b0d4
     a84:	0000b0f0 	.word	0x0000b0f0
     a88:	0000b12c 	.word	0x0000b12c
     a8c:	0000b154 	.word	0x0000b154
     a90:	0000b17c 	.word	0x0000b17c
     a94:	0000b1a4 	.word	0x0000b1a4
     a98:	0000b1c8 	.word	0x0000b1c8
     a9c:	0000b1e4 	.word	0x0000b1e4
     aa0:	0000b204 	.word	0x0000b204
     aa4:	0000b234 	.word	0x0000b234
     aa8:	0000b278 	.word	0x0000b278
     aac:	0000b2b8 	.word	0x0000b2b8
     ab0:	0000b2e4 	.word	0x0000b2e4
     ab4:	0000b304 	.word	0x0000b304
     ab8:	0000b320 	.word	0x0000b320
     abc:	0000b048 	.word	0x0000b048

00000ac0 <DISKIO_dstatus_desc>:
/**
  *	Return string based on disk status
  */
char* DISKIO_dstatus_desc(DSTATUS status)
{
	switch (status) {
     ac0:	2802      	cmp	r0, #2
     ac2:	d006      	beq.n	ad2 <DISKIO_dstatus_desc+0x12>
     ac4:	2804      	cmp	r0, #4
     ac6:	d006      	beq.n	ad6 <DISKIO_dstatus_desc+0x16>
     ac8:	2801      	cmp	r0, #1
		case STA_NOINIT:  return "Disk not initialized";
		case STA_NODISK:  return "No medium in the drive";
		case STA_PROTECT: return "Disk write protected";
	}
	return 0;
     aca:	4804      	ldr	r0, [pc, #16]	; (adc <DISKIO_dstatus_desc+0x1c>)
     acc:	bf18      	it	ne
     ace:	2000      	movne	r0, #0
     ad0:	4770      	bx	lr
		case STA_NODISK:  return "No medium in the drive";
     ad2:	4803      	ldr	r0, [pc, #12]	; (ae0 <DISKIO_dstatus_desc+0x20>)
     ad4:	4770      	bx	lr
		case STA_PROTECT: return "Disk write protected";
     ad6:	4803      	ldr	r0, [pc, #12]	; (ae4 <DISKIO_dstatus_desc+0x24>)
}
     ad8:	4770      	bx	lr
     ada:	bf00      	nop
     adc:	0000b328 	.word	0x0000b328
     ae0:	0000b340 	.word	0x0000b340
     ae4:	0000b358 	.word	0x0000b358

00000ae8 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     ae8:	b13a      	cbz	r2, afa <mem_cpy+0x12>
     aea:	3801      	subs	r0, #1
     aec:	188a      	adds	r2, r1, r2
		*d++ = *s++;
     aee:	f811 3b01 	ldrb.w	r3, [r1], #1
     af2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
     af6:	4291      	cmp	r1, r2
     af8:	d1f9      	bne.n	aee <mem_cpy+0x6>
     afa:	4770      	bx	lr

00000afc <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     afc:	b122      	cbz	r2, b08 <mem_set+0xc>
     afe:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
     b00:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
     b04:	4282      	cmp	r2, r0
     b06:	d1fb      	bne.n	b00 <mem_set+0x4>
     b08:	4770      	bx	lr

00000b0a <ld_clust>:
	const BYTE* dir	/* Pointer to the SFN entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
     b0a:	7eca      	ldrb	r2, [r1, #27]
     b0c:	7e8b      	ldrb	r3, [r1, #26]
     b0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
     b12:	7802      	ldrb	r2, [r0, #0]
     b14:	2a03      	cmp	r2, #3
     b16:	d001      	beq.n	b1c <ld_clust+0x12>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
     b18:	4618      	mov	r0, r3
     b1a:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
     b1c:	7d48      	ldrb	r0, [r1, #21]
     b1e:	7d0a      	ldrb	r2, [r1, #20]
     b20:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
     b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
     b28:	e7f6      	b.n	b18 <ld_clust+0xe>

00000b2a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
     b2a:	b470      	push	{r4, r5, r6}
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
     b2c:	f101 0409 	add.w	r4, r1, #9
	if (dp->sect) {		/* Get SFN */
     b30:	6903      	ldr	r3, [r0, #16]
     b32:	b363      	cbz	r3, b8e <get_fileinfo+0x64>
		dir = dp->dir;
     b34:	6945      	ldr	r5, [r0, #20]
     b36:	1e68      	subs	r0, r5, #1
		i = 0;
     b38:	2200      	movs	r2, #0
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     b3a:	262e      	movs	r6, #46	; 0x2e
     b3c:	e001      	b.n	b42 <get_fileinfo+0x18>
		while (i < 11) {		/* Copy name body and extension */
     b3e:	2a0b      	cmp	r2, #11
     b40:	d00e      	beq.n	b60 <get_fileinfo+0x36>
			c = (TCHAR)dir[i++];
     b42:	3201      	adds	r2, #1
     b44:	f810 3f01 	ldrb.w	r3, [r0, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
     b48:	2b20      	cmp	r3, #32
     b4a:	d0f8      	beq.n	b3e <get_fileinfo+0x14>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
     b4c:	2b05      	cmp	r3, #5
     b4e:	bf08      	it	eq
     b50:	23e5      	moveq	r3, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     b52:	2a09      	cmp	r2, #9
     b54:	bf04      	itt	eq
     b56:	7026      	strbeq	r6, [r4, #0]
     b58:	3401      	addeq	r4, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
     b5a:	7023      	strb	r3, [r4, #0]
     b5c:	3401      	adds	r4, #1
     b5e:	e7ee      	b.n	b3e <get_fileinfo+0x14>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     b60:	7aeb      	ldrb	r3, [r5, #11]
     b62:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
     b64:	7fea      	ldrb	r2, [r5, #31]
     b66:	7fab      	ldrb	r3, [r5, #30]
     b68:	041b      	lsls	r3, r3, #16
     b6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
     b6e:	7f2a      	ldrb	r2, [r5, #28]
     b70:	4313      	orrs	r3, r2
     b72:	7f6a      	ldrb	r2, [r5, #29]
     b74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     b78:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
     b7a:	7e6a      	ldrb	r2, [r5, #25]
     b7c:	7e2b      	ldrb	r3, [r5, #24]
     b7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     b82:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
     b84:	7dea      	ldrb	r2, [r5, #23]
     b86:	7dab      	ldrb	r3, [r5, #22]
     b88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     b8c:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
     b8e:	2300      	movs	r3, #0
     b90:	7023      	strb	r3, [r4, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
     b92:	bc70      	pop	{r4, r5, r6}
     b94:	4770      	bx	lr

00000b96 <get_ldnumber>:
	const char *sp;
	char c;
	TCHAR tc;
#endif

	if (*path) {	/* If the pointer is not a null */
     b96:	6801      	ldr	r1, [r0, #0]
     b98:	b1e9      	cbz	r1, bd6 <get_ldnumber+0x40>
{
     b9a:	b410      	push	{r4}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     b9c:	780c      	ldrb	r4, [r1, #0]
     b9e:	2c20      	cmp	r4, #32
     ba0:	d911      	bls.n	bc6 <get_ldnumber+0x30>
     ba2:	2c3a      	cmp	r4, #58	; 0x3a
     ba4:	d020      	beq.n	be8 <get_ldnumber+0x52>
     ba6:	460a      	mov	r2, r1
     ba8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     bac:	2b20      	cmp	r3, #32
     bae:	d90c      	bls.n	bca <get_ldnumber+0x34>
     bb0:	2b3a      	cmp	r3, #58	; 0x3a
     bb2:	d1f9      	bne.n	ba8 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     bb4:	1c4b      	adds	r3, r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     bb6:	429a      	cmp	r2, r3
     bb8:	d110      	bne.n	bdc <get_ldnumber+0x46>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     bba:	2c30      	cmp	r4, #48	; 0x30
     bbc:	d111      	bne.n	be2 <get_ldnumber+0x4c>
					vol = (int)i;
					*path = ++tt;
     bbe:	3102      	adds	r1, #2
     bc0:	6001      	str	r1, [r0, #0]
					vol = (int)i;
     bc2:	2000      	movs	r0, #0
     bc4:	e005      	b.n	bd2 <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     bc6:	4623      	mov	r3, r4
     bc8:	460a      	mov	r2, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     bca:	2b3a      	cmp	r3, #58	; 0x3a
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     bcc:	bf18      	it	ne
     bce:	2000      	movne	r0, #0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     bd0:	d0f0      	beq.n	bb4 <get_ldnumber+0x1e>
#endif
	}
	return vol;
}
     bd2:	bc10      	pop	{r4}
     bd4:	4770      	bx	lr
	int vol = -1;
     bd6:	f04f 30ff 	mov.w	r0, #4294967295
     bda:	4770      	bx	lr
     bdc:	f04f 30ff 	mov.w	r0, #4294967295
     be0:	e7f7      	b.n	bd2 <get_ldnumber+0x3c>
     be2:	f04f 30ff 	mov.w	r0, #4294967295
     be6:	e7f4      	b.n	bd2 <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     be8:	460a      	mov	r2, r1
     bea:	e7e3      	b.n	bb4 <get_ldnumber+0x1e>

00000bec <sync_window>:
{
     bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
     bf0:	7903      	ldrb	r3, [r0, #4]
     bf2:	b913      	cbnz	r3, bfa <sync_window+0xe>
	FRESULT res = FR_OK;
     bf4:	2000      	movs	r0, #0
     bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     bfa:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
     bfc:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
     bfe:	f100 0734 	add.w	r7, r0, #52	; 0x34
     c02:	2301      	movs	r3, #1
     c04:	462a      	mov	r2, r5
     c06:	4639      	mov	r1, r7
     c08:	7840      	ldrb	r0, [r0, #1]
     c0a:	4e13      	ldr	r6, [pc, #76]	; (c58 <sync_window+0x6c>)
     c0c:	47b0      	blx	r6
     c0e:	b9d0      	cbnz	r0, c46 <sync_window+0x5a>
			fs->wflag = 0;
     c10:	2300      	movs	r3, #0
     c12:	7123      	strb	r3, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c16:	1aeb      	subs	r3, r5, r3
     c18:	69e2      	ldr	r2, [r4, #28]
     c1a:	4293      	cmp	r3, r2
     c1c:	d216      	bcs.n	c4c <sync_window+0x60>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     c1e:	78e6      	ldrb	r6, [r4, #3]
     c20:	2e01      	cmp	r6, #1
     c22:	d916      	bls.n	c52 <sync_window+0x66>
					disk_write(fs->drv, fs->win, wsect, 1);
     c24:	f04f 0901 	mov.w	r9, #1
     c28:	f8df 802c 	ldr.w	r8, [pc, #44]	; c58 <sync_window+0x6c>
					wsect += fs->fsize;
     c2c:	69e3      	ldr	r3, [r4, #28]
     c2e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
     c30:	464b      	mov	r3, r9
     c32:	462a      	mov	r2, r5
     c34:	4639      	mov	r1, r7
     c36:	7860      	ldrb	r0, [r4, #1]
     c38:	47c0      	blx	r8
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     c3a:	3e01      	subs	r6, #1
     c3c:	2e01      	cmp	r6, #1
     c3e:	d1f5      	bne.n	c2c <sync_window+0x40>
	FRESULT res = FR_OK;
     c40:	2000      	movs	r0, #0
     c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = FR_DISK_ERR;
     c46:	2001      	movs	r0, #1
     c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FRESULT res = FR_OK;
     c4c:	2000      	movs	r0, #0
     c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     c52:	2000      	movs	r0, #0
}
     c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     c58:	00000485 	.word	0x00000485

00000c5c <move_window>:
{
     c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
     c5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
     c60:	428b      	cmp	r3, r1
     c62:	d015      	beq.n	c90 <move_window+0x34>
     c64:	4604      	mov	r4, r0
     c66:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
     c68:	4b0a      	ldr	r3, [pc, #40]	; (c94 <move_window+0x38>)
     c6a:	4798      	blx	r3
		if (res == FR_OK) {			/* Fill sector window with new data */
     c6c:	4606      	mov	r6, r0
     c6e:	b108      	cbz	r0, c74 <move_window+0x18>
}
     c70:	4630      	mov	r0, r6
     c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
     c74:	2301      	movs	r3, #1
     c76:	462a      	mov	r2, r5
     c78:	f104 0134 	add.w	r1, r4, #52	; 0x34
     c7c:	7860      	ldrb	r0, [r4, #1]
     c7e:	4f06      	ldr	r7, [pc, #24]	; (c98 <move_window+0x3c>)
     c80:	47b8      	blx	r7
     c82:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
     c84:	bf1c      	itt	ne
     c86:	2601      	movne	r6, #1
     c88:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
     c8c:	6325      	str	r5, [r4, #48]	; 0x30
     c8e:	e7ef      	b.n	c70 <move_window+0x14>
	FRESULT res = FR_OK;
     c90:	2600      	movs	r6, #0
     c92:	e7ed      	b.n	c70 <move_window+0x14>
     c94:	00000bed 	.word	0x00000bed
     c98:	00000405 	.word	0x00000405

00000c9c <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     c9c:	b510      	push	{r4, lr}
     c9e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     ca0:	2300      	movs	r3, #0
     ca2:	7103      	strb	r3, [r0, #4]
     ca4:	f04f 33ff 	mov.w	r3, #4294967295
     ca8:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     caa:	4b1d      	ldr	r3, [pc, #116]	; (d20 <check_fs+0x84>)
     cac:	4798      	blx	r3
     cae:	b108      	cbz	r0, cb4 <check_fs+0x18>
		return 3;
     cb0:	2003      	movs	r0, #3
     cb2:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     cb4:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
     cb8:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
     cbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     cc0:	b21b      	sxth	r3, r3
     cc2:	4a18      	ldr	r2, [pc, #96]	; (d24 <check_fs+0x88>)
     cc4:	4293      	cmp	r3, r2
     cc6:	d001      	beq.n	ccc <check_fs+0x30>
		return 2;
     cc8:	2002      	movs	r0, #2
     cca:	bd10      	pop	{r4, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     ccc:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
     cd0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
     cd4:	041b      	lsls	r3, r3, #16
     cd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
     cda:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
     cde:	4313      	orrs	r3, r2
     ce0:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
     ce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     ce8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     cec:	4a0e      	ldr	r2, [pc, #56]	; (d28 <check_fs+0x8c>)
     cee:	4293      	cmp	r3, r2
     cf0:	d013      	beq.n	d1a <check_fs+0x7e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     cf2:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
     cf6:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
     cfa:	0400      	lsls	r0, r0, #16
     cfc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
     d00:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
     d04:	4318      	orrs	r0, r3
     d06:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
     d0a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
     d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
     d12:	1a80      	subs	r0, r0, r2
     d14:	bf18      	it	ne
     d16:	2001      	movne	r0, #1
     d18:	bd10      	pop	{r4, pc}
		return 0;
     d1a:	2000      	movs	r0, #0
		return 0;

	return 1;
}
     d1c:	bd10      	pop	{r4, pc}
     d1e:	bf00      	nop
     d20:	00000c5d 	.word	0x00000c5d
     d24:	ffffaa55 	.word	0xffffaa55
     d28:	00544146 	.word	0x00544146

00000d2c <validate>:
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */

	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     d2c:	b1b0      	cbz	r0, d5c <validate+0x30>
{
     d2e:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     d30:	6803      	ldr	r3, [r0, #0]
     d32:	b1ab      	cbz	r3, d60 <validate+0x34>
     d34:	7819      	ldrb	r1, [r3, #0]
     d36:	b909      	cbnz	r1, d3c <validate+0x10>
		return FR_INVALID_OBJECT;
     d38:	2009      	movs	r0, #9
     d3a:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     d3c:	88d9      	ldrh	r1, [r3, #6]
     d3e:	8882      	ldrh	r2, [r0, #4]
     d40:	4291      	cmp	r1, r2
     d42:	d001      	beq.n	d48 <validate+0x1c>
		return FR_INVALID_OBJECT;
     d44:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
     d46:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
     d48:	7858      	ldrb	r0, [r3, #1]
     d4a:	4b06      	ldr	r3, [pc, #24]	; (d64 <validate+0x38>)
     d4c:	4798      	blx	r3
     d4e:	f000 0001 	and.w	r0, r0, #1
		return FR_INVALID_OBJECT;
     d52:	2800      	cmp	r0, #0
     d54:	bf0c      	ite	eq
     d56:	2000      	moveq	r0, #0
     d58:	2009      	movne	r0, #9
     d5a:	bd08      	pop	{r3, pc}
     d5c:	2009      	movs	r0, #9
     d5e:	4770      	bx	lr
     d60:	2009      	movs	r0, #9
     d62:	bd08      	pop	{r3, pc}
     d64:	000003e9 	.word	0x000003e9

00000d68 <find_volume>:
{
     d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     d6c:	b085      	sub	sp, #20
     d6e:	4606      	mov	r6, r0
     d70:	4617      	mov	r7, r2
	*rfs = 0;
     d72:	2300      	movs	r3, #0
     d74:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
     d76:	4608      	mov	r0, r1
     d78:	4b9b      	ldr	r3, [pc, #620]	; (fe8 <find_volume+0x280>)
     d7a:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
     d7c:	1e05      	subs	r5, r0, #0
     d7e:	f2c0 81a2 	blt.w	10c6 <find_volume+0x35e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
     d82:	4b9a      	ldr	r3, [pc, #616]	; (fec <find_volume+0x284>)
     d84:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     d88:	2c00      	cmp	r4, #0
     d8a:	f000 81a0 	beq.w	10ce <find_volume+0x366>
	*rfs = fs;							/* Return pointer to the file system object */
     d8e:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
     d90:	7823      	ldrb	r3, [r4, #0]
     d92:	b17b      	cbz	r3, db4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
     d94:	7860      	ldrb	r0, [r4, #1]
     d96:	4b96      	ldr	r3, [pc, #600]	; (ff0 <find_volume+0x288>)
     d98:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     d9a:	f010 0f01 	tst.w	r0, #1
     d9e:	d109      	bne.n	db4 <find_volume+0x4c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     da0:	2f00      	cmp	r7, #0
     da2:	f000 8196 	beq.w	10d2 <find_volume+0x36a>
     da6:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
     daa:	2800      	cmp	r0, #0
     dac:	bf0c      	ite	eq
     dae:	2000      	moveq	r0, #0
     db0:	200a      	movne	r0, #10
     db2:	e189      	b.n	10c8 <find_volume+0x360>
	fs->fs_type = 0;					/* Clear the file system object */
     db4:	2300      	movs	r3, #0
     db6:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     db8:	b2e8      	uxtb	r0, r5
     dba:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     dbc:	4b8d      	ldr	r3, [pc, #564]	; (ff4 <find_volume+0x28c>)
     dbe:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     dc0:	f010 0f01 	tst.w	r0, #1
     dc4:	d001      	beq.n	dca <find_volume+0x62>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     dc6:	2003      	movs	r0, #3
     dc8:	e17e      	b.n	10c8 <find_volume+0x360>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     dca:	b127      	cbz	r7, dd6 <find_volume+0x6e>
     dcc:	f010 0f04 	tst.w	r0, #4
     dd0:	d001      	beq.n	dd6 <find_volume+0x6e>
		return FR_WRITE_PROTECTED;
     dd2:	200a      	movs	r0, #10
     dd4:	e178      	b.n	10c8 <find_volume+0x360>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     dd6:	2100      	movs	r1, #0
     dd8:	4620      	mov	r0, r4
     dda:	4b87      	ldr	r3, [pc, #540]	; (ff8 <find_volume+0x290>)
     ddc:	4798      	blx	r3
     dde:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     de0:	2801      	cmp	r0, #1
     de2:	d006      	beq.n	df2 <find_volume+0x8a>
	bsect = 0;
     de4:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     de6:	2b03      	cmp	r3, #3
     de8:	f000 8175 	beq.w	10d6 <find_volume+0x36e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     dec:	b3a3      	cbz	r3, e58 <find_volume+0xf0>
     dee:	200d      	movs	r0, #13
     df0:	e16a      	b.n	10c8 <find_volume+0x360>
     df2:	4623      	mov	r3, r4
     df4:	466d      	mov	r5, sp
     df6:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     dfa:	4669      	mov	r1, sp
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     dfc:	2700      	movs	r7, #0
     dfe:	e005      	b.n	e0c <find_volume+0xa4>
     e00:	463a      	mov	r2, r7
     e02:	f841 2b04 	str.w	r2, [r1], #4
     e06:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
     e08:	4283      	cmp	r3, r0
     e0a:	d012      	beq.n	e32 <find_volume+0xca>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     e0c:	f893 21f6 	ldrb.w	r2, [r3, #502]	; 0x1f6
     e10:	2a00      	cmp	r2, #0
     e12:	d0f5      	beq.n	e00 <find_volume+0x98>
     e14:	f893 61fd 	ldrb.w	r6, [r3, #509]	; 0x1fd
     e18:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
     e1c:	0412      	lsls	r2, r2, #16
     e1e:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
     e22:	f893 61fa 	ldrb.w	r6, [r3, #506]	; 0x1fa
     e26:	4332      	orrs	r2, r6
     e28:	f893 61fb 	ldrb.w	r6, [r3, #507]	; 0x1fb
     e2c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
     e30:	e7e7      	b.n	e02 <find_volume+0x9a>
     e32:	af04      	add	r7, sp, #16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     e34:	f04f 0802 	mov.w	r8, #2
     e38:	f8df 91bc 	ldr.w	r9, [pc, #444]	; ff8 <find_volume+0x290>
     e3c:	e006      	b.n	e4c <find_volume+0xe4>
     e3e:	4631      	mov	r1, r6
     e40:	4620      	mov	r0, r4
     e42:	47c8      	blx	r9
		} while (!LD2PT(vol) && fmt && ++i < 4);
     e44:	4603      	mov	r3, r0
     e46:	b138      	cbz	r0, e58 <find_volume+0xf0>
     e48:	42af      	cmp	r7, r5
     e4a:	d0cc      	beq.n	de6 <find_volume+0x7e>
			bsect = br[i];
     e4c:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     e50:	2e00      	cmp	r6, #0
     e52:	d1f4      	bne.n	e3e <find_volume+0xd6>
     e54:	4643      	mov	r3, r8
     e56:	e7f7      	b.n	e48 <find_volume+0xe0>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
     e58:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
     e5c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
     e60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     e64:	b21b      	sxth	r3, r3
     e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     e6a:	d001      	beq.n	e70 <find_volume+0x108>
		return FR_NO_FILESYSTEM;
     e6c:	200d      	movs	r0, #13
     e6e:	e12b      	b.n	10c8 <find_volume+0x360>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
     e70:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
     e74:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
     e78:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
     e7c:	d10d      	bne.n	e9a <find_volume+0x132>
     e7e:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
     e82:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
     e86:	0412      	lsls	r2, r2, #16
     e88:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
     e8c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     e90:	431a      	orrs	r2, r3
     e92:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
     e96:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
     e9a:	61e2      	str	r2, [r4, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     e9c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
     ea0:	70e1      	strb	r1, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     ea2:	1e4b      	subs	r3, r1, #1
     ea4:	b2db      	uxtb	r3, r3
     ea6:	2b01      	cmp	r3, #1
     ea8:	d901      	bls.n	eae <find_volume+0x146>
		return FR_NO_FILESYSTEM;
     eaa:	200d      	movs	r0, #13
     eac:	e10c      	b.n	10c8 <find_volume+0x360>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     eae:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
     eb2:	70a7      	strb	r7, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     eb4:	b90f      	cbnz	r7, eba <find_volume+0x152>
		return FR_NO_FILESYSTEM;
     eb6:	200d      	movs	r0, #13
     eb8:	e106      	b.n	10c8 <find_volume+0x360>
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     eba:	1e7b      	subs	r3, r7, #1
     ebc:	423b      	tst	r3, r7
     ebe:	d001      	beq.n	ec4 <find_volume+0x15c>
		return FR_NO_FILESYSTEM;
     ec0:	200d      	movs	r0, #13
     ec2:	e101      	b.n	10c8 <find_volume+0x360>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
     ec4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
     ec8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
     ecc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
     ed0:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
     ed2:	f010 0f0f 	tst.w	r0, #15
     ed6:	f040 8100 	bne.w	10da <find_volume+0x372>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
     eda:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
     ede:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
     ee2:	ea53 2305 	orrs.w	r3, r3, r5, lsl #8
     ee6:	d10d      	bne.n	f04 <find_volume+0x19c>
     ee8:	f894 5057 	ldrb.w	r5, [r4, #87]	; 0x57
     eec:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
     ef0:	041b      	lsls	r3, r3, #16
     ef2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
     ef6:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
     efa:	432b      	orrs	r3, r5
     efc:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
     f00:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
     f04:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
     f08:	f894 5042 	ldrb.w	r5, [r4, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     f0c:	ea55 250e 	orrs.w	r5, r5, lr, lsl #8
     f10:	f000 80e5 	beq.w	10de <find_volume+0x376>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     f14:	fb02 fc01 	mul.w	ip, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
     f18:	eb05 1110 	add.w	r1, r5, r0, lsr #4
     f1c:	eb01 0e0c 	add.w	lr, r1, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     f20:	4573      	cmp	r3, lr
     f22:	f0c0 80de 	bcc.w	10e2 <find_volume+0x37a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     f26:	eba3 030e 	sub.w	r3, r3, lr
     f2a:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     f2e:	2b00      	cmp	r3, #0
     f30:	f000 80d9 	beq.w	10e6 <find_volume+0x37e>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     f34:	f640 71f5 	movw	r1, #4085	; 0xff5
     f38:	428b      	cmp	r3, r1
     f3a:	bf94      	ite	ls
     f3c:	2101      	movls	r1, #1
     f3e:	2102      	movhi	r1, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     f40:	f64f 77f5 	movw	r7, #65525	; 0xfff5
     f44:	42bb      	cmp	r3, r7
     f46:	f200 80d8 	bhi.w	10fa <find_volume+0x392>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     f4a:	3302      	adds	r3, #2
     f4c:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
     f4e:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     f50:	4435      	add	r5, r6
     f52:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
     f54:	eb0e 0706 	add.w	r7, lr, r6
     f58:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (fmt == FS_FAT32) {
     f5a:	2903      	cmp	r1, #3
     f5c:	d129      	bne.n	fb2 <find_volume+0x24a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     f5e:	2800      	cmp	r0, #0
     f60:	f040 80c3 	bne.w	10ea <find_volume+0x382>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
     f64:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
     f68:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
     f6c:	0409      	lsls	r1, r1, #16
     f6e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
     f72:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
     f76:	4301      	orrs	r1, r0
     f78:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
     f7c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
     f80:	62a1      	str	r1, [r4, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     f82:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
     f84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
     f88:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
     f8c:	f0c0 80af 	bcc.w	10ee <find_volume+0x386>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     f90:	f04f 33ff 	mov.w	r3, #4294967295
     f94:	6123      	str	r3, [r4, #16]
     f96:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
     f98:	2380      	movs	r3, #128	; 0x80
     f9a:	7163      	strb	r3, [r4, #5]
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
     f9c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
     fa0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
     fa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     fa8:	b21b      	sxth	r3, r3
     faa:	2b01      	cmp	r3, #1
     fac:	d026      	beq.n	ffc <find_volume+0x294>
     fae:	2103      	movs	r1, #3
     fb0:	e077      	b.n	10a2 <find_volume+0x33a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     fb2:	2800      	cmp	r0, #0
     fb4:	f000 809d 	beq.w	10f2 <find_volume+0x38a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     fb8:	4465      	add	r5, ip
     fba:	62a5      	str	r5, [r4, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     fbc:	2902      	cmp	r1, #2
     fbe:	bf0f      	iteee	eq
     fc0:	005b      	lsleq	r3, r3, #1
     fc2:	eb03 0043 	addne.w	r0, r3, r3, lsl #1
     fc6:	f003 0301 	andne.w	r3, r3, #1
     fca:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
     fce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
     fd2:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
     fd6:	f0c0 808e 	bcc.w	10f6 <find_volume+0x38e>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     fda:	f04f 33ff 	mov.w	r3, #4294967295
     fde:	6123      	str	r3, [r4, #16]
     fe0:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
     fe2:	2380      	movs	r3, #128	; 0x80
     fe4:	7163      	strb	r3, [r4, #5]
     fe6:	e05c      	b.n	10a2 <find_volume+0x33a>
     fe8:	00000b97 	.word	0x00000b97
     fec:	2000027c 	.word	0x2000027c
     ff0:	000003e9 	.word	0x000003e9
     ff4:	000003b1 	.word	0x000003b1
     ff8:	00000c9d 	.word	0x00000c9d
		&& move_window(fs, bsect + 1) == FR_OK)
     ffc:	1c71      	adds	r1, r6, #1
     ffe:	4620      	mov	r0, r4
    1000:	4b42      	ldr	r3, [pc, #264]	; (110c <find_volume+0x3a4>)
    1002:	4798      	blx	r3
    1004:	2800      	cmp	r0, #0
    1006:	d156      	bne.n	10b6 <find_volume+0x34e>
		fs->fsi_flag = 0;
    1008:	2300      	movs	r3, #0
    100a:	7163      	strb	r3, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    100c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    1010:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    1014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1018:	b21b      	sxth	r3, r3
    101a:	4a3d      	ldr	r2, [pc, #244]	; (1110 <find_volume+0x3a8>)
    101c:	4293      	cmp	r3, r2
    101e:	d14c      	bne.n	10ba <find_volume+0x352>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    1020:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    1024:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    1028:	041b      	lsls	r3, r3, #16
    102a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    102e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    1032:	4313      	orrs	r3, r2
    1034:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    1038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    103c:	4a35      	ldr	r2, [pc, #212]	; (1114 <find_volume+0x3ac>)
    103e:	4293      	cmp	r3, r2
    1040:	d13d      	bne.n	10be <find_volume+0x356>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    1042:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
    1046:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
    104a:	041b      	lsls	r3, r3, #16
    104c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1050:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
    1054:	4313      	orrs	r3, r2
    1056:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
    105a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    105e:	4a2e      	ldr	r2, [pc, #184]	; (1118 <find_volume+0x3b0>)
    1060:	4293      	cmp	r3, r2
    1062:	d12e      	bne.n	10c2 <find_volume+0x35a>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    1064:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
    1068:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
    106c:	041b      	lsls	r3, r3, #16
    106e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1072:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
    1076:	4313      	orrs	r3, r2
    1078:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
    107c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1080:	6123      	str	r3, [r4, #16]
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    1082:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
    1086:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
    108a:	041b      	lsls	r3, r3, #16
    108c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1090:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
    1094:	4313      	orrs	r3, r2
    1096:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
    109a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    109e:	60e3      	str	r3, [r4, #12]
    10a0:	2103      	movs	r1, #3
	fs->fs_type = fmt;	/* FAT sub-type */
    10a2:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
    10a4:	4a1d      	ldr	r2, [pc, #116]	; (111c <find_volume+0x3b4>)
    10a6:	8893      	ldrh	r3, [r2, #4]
    10a8:	3301      	adds	r3, #1
    10aa:	b29b      	uxth	r3, r3
    10ac:	8093      	strh	r3, [r2, #4]
    10ae:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Set current directory to root */
    10b0:	2000      	movs	r0, #0
    10b2:	6160      	str	r0, [r4, #20]
	return FR_OK;
    10b4:	e008      	b.n	10c8 <find_volume+0x360>
    10b6:	2103      	movs	r1, #3
    10b8:	e7f3      	b.n	10a2 <find_volume+0x33a>
    10ba:	2103      	movs	r1, #3
    10bc:	e7f1      	b.n	10a2 <find_volume+0x33a>
    10be:	2103      	movs	r1, #3
    10c0:	e7ef      	b.n	10a2 <find_volume+0x33a>
    10c2:	2103      	movs	r1, #3
    10c4:	e7ed      	b.n	10a2 <find_volume+0x33a>
	if (vol < 0) return FR_INVALID_DRIVE;
    10c6:	200b      	movs	r0, #11
}
    10c8:	b005      	add	sp, #20
    10ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    10ce:	200c      	movs	r0, #12
    10d0:	e7fa      	b.n	10c8 <find_volume+0x360>
			return FR_OK;				/* The file system object is valid */
    10d2:	2000      	movs	r0, #0
    10d4:	e7f8      	b.n	10c8 <find_volume+0x360>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    10d6:	2001      	movs	r0, #1
    10d8:	e7f6      	b.n	10c8 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    10da:	200d      	movs	r0, #13
    10dc:	e7f4      	b.n	10c8 <find_volume+0x360>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    10de:	200d      	movs	r0, #13
    10e0:	e7f2      	b.n	10c8 <find_volume+0x360>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    10e2:	200d      	movs	r0, #13
    10e4:	e7f0      	b.n	10c8 <find_volume+0x360>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    10e6:	200d      	movs	r0, #13
    10e8:	e7ee      	b.n	10c8 <find_volume+0x360>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    10ea:	200d      	movs	r0, #13
    10ec:	e7ec      	b.n	10c8 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    10ee:	200d      	movs	r0, #13
    10f0:	e7ea      	b.n	10c8 <find_volume+0x360>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    10f2:	200d      	movs	r0, #13
    10f4:	e7e8      	b.n	10c8 <find_volume+0x360>
		return FR_NO_FILESYSTEM;
    10f6:	200d      	movs	r0, #13
    10f8:	e7e6      	b.n	10c8 <find_volume+0x360>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    10fa:	3302      	adds	r3, #2
    10fc:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    10fe:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1100:	4435      	add	r5, r6
    1102:	6265      	str	r5, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    1104:	eb0e 0106 	add.w	r1, lr, r6
    1108:	62e1      	str	r1, [r4, #44]	; 0x2c
    110a:	e728      	b.n	f5e <find_volume+0x1f6>
    110c:	00000c5d 	.word	0x00000c5d
    1110:	ffffaa55 	.word	0xffffaa55
    1114:	41615252 	.word	0x41615252
    1118:	61417272 	.word	0x61417272
    111c:	2000027c 	.word	0x2000027c

00001120 <sync_fs>:
{
    1120:	b538      	push	{r3, r4, r5, lr}
    1122:	4604      	mov	r4, r0
	res = sync_window(fs);
    1124:	4b2d      	ldr	r3, [pc, #180]	; (11dc <sync_fs+0xbc>)
    1126:	4798      	blx	r3
	if (res == FR_OK) {
    1128:	4603      	mov	r3, r0
    112a:	b950      	cbnz	r0, 1142 <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    112c:	7823      	ldrb	r3, [r4, #0]
    112e:	2b03      	cmp	r3, #3
    1130:	d009      	beq.n	1146 <sync_fs+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    1132:	2200      	movs	r2, #0
    1134:	4611      	mov	r1, r2
    1136:	7860      	ldrb	r0, [r4, #1]
    1138:	4b29      	ldr	r3, [pc, #164]	; (11e0 <sync_fs+0xc0>)
    113a:	4798      	blx	r3
	res = sync_window(fs);
    113c:	1c03      	adds	r3, r0, #0
    113e:	bf18      	it	ne
    1140:	2301      	movne	r3, #1
}
    1142:	4618      	mov	r0, r3
    1144:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    1146:	7963      	ldrb	r3, [r4, #5]
    1148:	2b01      	cmp	r3, #1
    114a:	d1f2      	bne.n	1132 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
    114c:	f104 0534 	add.w	r5, r4, #52	; 0x34
    1150:	f44f 7200 	mov.w	r2, #512	; 0x200
    1154:	2100      	movs	r1, #0
    1156:	4628      	mov	r0, r5
    1158:	4b22      	ldr	r3, [pc, #136]	; (11e4 <sync_fs+0xc4>)
    115a:	4798      	blx	r3
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    115c:	2355      	movs	r3, #85	; 0x55
    115e:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    1162:	23aa      	movs	r3, #170	; 0xaa
    1164:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    1168:	2352      	movs	r3, #82	; 0x52
    116a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    116e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    1172:	2361      	movs	r3, #97	; 0x61
    1174:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    1178:	2241      	movs	r2, #65	; 0x41
    117a:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    117e:	2172      	movs	r1, #114	; 0x72
    1180:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
    1184:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
    1188:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
    118c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    1190:	6923      	ldr	r3, [r4, #16]
    1192:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    1196:	f3c3 2207 	ubfx	r2, r3, #8, #8
    119a:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
    119e:	0c1a      	lsrs	r2, r3, #16
    11a0:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
    11a4:	0e1b      	lsrs	r3, r3, #24
    11a6:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    11aa:	68e3      	ldr	r3, [r4, #12]
    11ac:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    11b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    11b4:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
    11b8:	0c1a      	lsrs	r2, r3, #16
    11ba:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
    11be:	0e1b      	lsrs	r3, r3, #24
    11c0:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
			fs->winsect = fs->volbase + 1;
    11c4:	6a22      	ldr	r2, [r4, #32]
    11c6:	3201      	adds	r2, #1
    11c8:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    11ca:	2301      	movs	r3, #1
    11cc:	4629      	mov	r1, r5
    11ce:	7860      	ldrb	r0, [r4, #1]
    11d0:	4d05      	ldr	r5, [pc, #20]	; (11e8 <sync_fs+0xc8>)
    11d2:	47a8      	blx	r5
			fs->fsi_flag = 0;
    11d4:	2300      	movs	r3, #0
    11d6:	7163      	strb	r3, [r4, #5]
    11d8:	e7ab      	b.n	1132 <sync_fs+0x12>
    11da:	bf00      	nop
    11dc:	00000bed 	.word	0x00000bed
    11e0:	00000505 	.word	0x00000505
    11e4:	00000afd 	.word	0x00000afd
    11e8:	00000485 	.word	0x00000485

000011ec <clust2sect>:
	clst -= 2;
    11ec:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    11ee:	6983      	ldr	r3, [r0, #24]
    11f0:	3b02      	subs	r3, #2
    11f2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
    11f4:	bf3d      	ittte	cc
    11f6:	7883      	ldrbcc	r3, [r0, #2]
    11f8:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
    11fa:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    11fe:	2000      	movcs	r0, #0
}
    1200:	4770      	bx	lr
	...

00001204 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1204:	2901      	cmp	r1, #1
    1206:	d969      	bls.n	12dc <get_fat+0xd8>
{
    1208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    120a:	6983      	ldr	r3, [r0, #24]
    120c:	4299      	cmp	r1, r3
    120e:	d267      	bcs.n	12e0 <get_fat+0xdc>
    1210:	460c      	mov	r4, r1
    1212:	4606      	mov	r6, r0
		switch (fs->fs_type) {
    1214:	7803      	ldrb	r3, [r0, #0]
    1216:	2b02      	cmp	r3, #2
    1218:	d02e      	beq.n	1278 <get_fat+0x74>
    121a:	2b03      	cmp	r3, #3
    121c:	d040      	beq.n	12a0 <get_fat+0x9c>
    121e:	2b01      	cmp	r3, #1
    1220:	d001      	beq.n	1226 <get_fat+0x22>
			val = 1;	/* Internal error */
    1222:	2001      	movs	r0, #1
    1224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
    1226:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    122a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    122c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    1230:	4b2c      	ldr	r3, [pc, #176]	; (12e4 <get_fat+0xe0>)
    1232:	4798      	blx	r3
    1234:	b110      	cbz	r0, 123c <get_fat+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1236:	f04f 30ff 	mov.w	r0, #4294967295
    123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
    123c:	1c6f      	adds	r7, r5, #1
    123e:	f3c5 0508 	ubfx	r5, r5, #0, #9
    1242:	4435      	add	r5, r6
    1244:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    1248:	6a71      	ldr	r1, [r6, #36]	; 0x24
    124a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    124e:	4630      	mov	r0, r6
    1250:	4b24      	ldr	r3, [pc, #144]	; (12e4 <get_fat+0xe0>)
    1252:	4798      	blx	r3
    1254:	b110      	cbz	r0, 125c <get_fat+0x58>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1256:	f04f 30ff 	mov.w	r0, #4294967295
    125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc |= fs->win[bc % SS(fs)] << 8;
    125c:	f3c7 0008 	ubfx	r0, r7, #0, #9
    1260:	4430      	add	r0, r6
    1262:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    1266:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    126a:	f014 0f01 	tst.w	r4, #1
    126e:	bf14      	ite	ne
    1270:	0900      	lsrne	r0, r0, #4
    1272:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
    1276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    1278:	6a41      	ldr	r1, [r0, #36]	; 0x24
    127a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    127e:	4b19      	ldr	r3, [pc, #100]	; (12e4 <get_fat+0xe0>)
    1280:	4798      	blx	r3
    1282:	b110      	cbz	r0, 128a <get_fat+0x86>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1284:	f04f 30ff 	mov.w	r0, #4294967295
    1288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 2 % SS(fs)];
    128a:	0060      	lsls	r0, r4, #1
    128c:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
			val = LD_WORD(p);
    1290:	4430      	add	r0, r6
    1292:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    1296:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    129a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
    129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    12a0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    12a2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    12a6:	4b0f      	ldr	r3, [pc, #60]	; (12e4 <get_fat+0xe0>)
    12a8:	4798      	blx	r3
    12aa:	b110      	cbz	r0, 12b2 <get_fat+0xae>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    12ac:	f04f 30ff 	mov.w	r0, #4294967295
}
    12b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 4 % SS(fs)];
    12b2:	00a0      	lsls	r0, r4, #2
    12b4:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
    12b8:	f100 0234 	add.w	r2, r0, #52	; 0x34
    12bc:	4432      	add	r2, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
    12be:	78d1      	ldrb	r1, [r2, #3]
    12c0:	7893      	ldrb	r3, [r2, #2]
    12c2:	041b      	lsls	r3, r3, #16
    12c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    12c8:	4430      	add	r0, r6
    12ca:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    12ce:	4318      	orrs	r0, r3
    12d0:	7853      	ldrb	r3, [r2, #1]
    12d2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    12d6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
    12da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
    12dc:	2001      	movs	r0, #1
    12de:	4770      	bx	lr
    12e0:	2001      	movs	r0, #1
    12e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12e4:	00000c5d 	.word	0x00000c5d

000012e8 <dir_sdi>:
{
    12e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12ec:	4605      	mov	r5, r0
	dp->index = (WORD)idx;	/* Current index */
    12ee:	80c1      	strh	r1, [r0, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
    12f0:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    12f2:	2c01      	cmp	r4, #1
    12f4:	d046      	beq.n	1384 <dir_sdi+0x9c>
    12f6:	460e      	mov	r6, r1
    12f8:	6803      	ldr	r3, [r0, #0]
    12fa:	699a      	ldr	r2, [r3, #24]
    12fc:	4294      	cmp	r4, r2
    12fe:	d302      	bcc.n	1306 <dir_sdi+0x1e>
		return FR_INT_ERR;
    1300:	2002      	movs	r0, #2
    1302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1306:	b964      	cbnz	r4, 1322 <dir_sdi+0x3a>
    1308:	781a      	ldrb	r2, [r3, #0]
    130a:	2a03      	cmp	r2, #3
    130c:	d005      	beq.n	131a <dir_sdi+0x32>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    130e:	891a      	ldrh	r2, [r3, #8]
    1310:	4296      	cmp	r6, r2
    1312:	d30e      	bcc.n	1332 <dir_sdi+0x4a>
			return FR_INT_ERR;
    1314:	2002      	movs	r0, #2
    1316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = dp->fs->dirbase;
    131a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    131c:	2a00      	cmp	r2, #0
    131e:	d0f6      	beq.n	130e <dir_sdi+0x26>
		clst = dp->fs->dirbase;
    1320:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    1322:	789f      	ldrb	r7, [r3, #2]
    1324:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
    1326:	42be      	cmp	r6, r7
    1328:	d31a      	bcc.n	1360 <dir_sdi+0x78>
    132a:	1bf6      	subs	r6, r6, r7
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    132c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 13a0 <dir_sdi+0xb8>
    1330:	e006      	b.n	1340 <dir_sdi+0x58>
		sect = dp->fs->dirbase;
    1332:	6a98      	ldr	r0, [r3, #40]	; 0x28
	dp->clust = clst;	/* Current cluster# */
    1334:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
    1336:	b9c0      	cbnz	r0, 136a <dir_sdi+0x82>
    1338:	2002      	movs	r0, #2
}
    133a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    133e:	461e      	mov	r6, r3
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    1340:	4621      	mov	r1, r4
    1342:	6828      	ldr	r0, [r5, #0]
    1344:	47c0      	blx	r8
    1346:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1348:	f1b0 3fff 	cmp.w	r0, #4294967295
    134c:	d01d      	beq.n	138a <dir_sdi+0xa2>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    134e:	2801      	cmp	r0, #1
    1350:	d91e      	bls.n	1390 <dir_sdi+0xa8>
    1352:	682b      	ldr	r3, [r5, #0]
    1354:	699b      	ldr	r3, [r3, #24]
    1356:	4298      	cmp	r0, r3
    1358:	d21d      	bcs.n	1396 <dir_sdi+0xae>
    135a:	1bf3      	subs	r3, r6, r7
		while (idx >= ic) {	/* Follow cluster chain */
    135c:	42be      	cmp	r6, r7
    135e:	d2ee      	bcs.n	133e <dir_sdi+0x56>
		sect = clust2sect(dp->fs, clst);
    1360:	4621      	mov	r1, r4
    1362:	6828      	ldr	r0, [r5, #0]
    1364:	4b0d      	ldr	r3, [pc, #52]	; (139c <dir_sdi+0xb4>)
    1366:	4798      	blx	r3
    1368:	e7e4      	b.n	1334 <dir_sdi+0x4c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    136a:	eb00 1016 	add.w	r0, r0, r6, lsr #4
    136e:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    1370:	682b      	ldr	r3, [r5, #0]
    1372:	3334      	adds	r3, #52	; 0x34
    1374:	f006 060f 	and.w	r6, r6, #15
    1378:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    137c:	616e      	str	r6, [r5, #20]
	return FR_OK;
    137e:	2000      	movs	r0, #0
    1380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
    1384:	2002      	movs	r0, #2
    1386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    138a:	2001      	movs	r0, #1
    138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_INT_ERR;
    1390:	2002      	movs	r0, #2
    1392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1396:	2002      	movs	r0, #2
    1398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    139c:	000011ed 	.word	0x000011ed
    13a0:	00001205 	.word	0x00001205

000013a4 <dir_remove>:
{
    13a4:	b538      	push	{r3, r4, r5, lr}
    13a6:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
    13a8:	88c1      	ldrh	r1, [r0, #6]
    13aa:	4b0c      	ldr	r3, [pc, #48]	; (13dc <dir_remove+0x38>)
    13ac:	4798      	blx	r3
	if (res == FR_OK) {
    13ae:	4605      	mov	r5, r0
    13b0:	b108      	cbz	r0, 13b6 <dir_remove+0x12>
}
    13b2:	4628      	mov	r0, r5
    13b4:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(dp->fs, dp->sect);
    13b6:	6921      	ldr	r1, [r4, #16]
    13b8:	6820      	ldr	r0, [r4, #0]
    13ba:	4b09      	ldr	r3, [pc, #36]	; (13e0 <dir_remove+0x3c>)
    13bc:	4798      	blx	r3
		if (res == FR_OK) {
    13be:	4605      	mov	r5, r0
    13c0:	2800      	cmp	r0, #0
    13c2:	d1f6      	bne.n	13b2 <dir_remove+0xe>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
    13c4:	2220      	movs	r2, #32
    13c6:	2100      	movs	r1, #0
    13c8:	6960      	ldr	r0, [r4, #20]
    13ca:	4b06      	ldr	r3, [pc, #24]	; (13e4 <dir_remove+0x40>)
    13cc:	4798      	blx	r3
			*dp->dir = DDEM;
    13ce:	6963      	ldr	r3, [r4, #20]
    13d0:	22e5      	movs	r2, #229	; 0xe5
    13d2:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
    13d4:	6823      	ldr	r3, [r4, #0]
    13d6:	2201      	movs	r2, #1
    13d8:	711a      	strb	r2, [r3, #4]
    13da:	e7ea      	b.n	13b2 <dir_remove+0xe>
    13dc:	000012e9 	.word	0x000012e9
    13e0:	00000c5d 	.word	0x00000c5d
    13e4:	00000afd 	.word	0x00000afd

000013e8 <put_fat>:
{
    13e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    13ec:	2901      	cmp	r1, #1
    13ee:	f240 808b 	bls.w	1508 <put_fat+0x120>
    13f2:	6983      	ldr	r3, [r0, #24]
    13f4:	4299      	cmp	r1, r3
    13f6:	d301      	bcc.n	13fc <put_fat+0x14>
		res = FR_INT_ERR;
    13f8:	2702      	movs	r7, #2
    13fa:	e086      	b.n	150a <put_fat+0x122>
    13fc:	4616      	mov	r6, r2
    13fe:	460c      	mov	r4, r1
    1400:	4605      	mov	r5, r0
		switch (fs->fs_type) {
    1402:	7803      	ldrb	r3, [r0, #0]
    1404:	2b02      	cmp	r3, #2
    1406:	d04c      	beq.n	14a2 <put_fat+0xba>
    1408:	2b03      	cmp	r3, #3
    140a:	d05e      	beq.n	14ca <put_fat+0xe2>
    140c:	2b01      	cmp	r3, #1
    140e:	d001      	beq.n	1414 <put_fat+0x2c>
			res = FR_INT_ERR;
    1410:	2702      	movs	r7, #2
    1412:	e07a      	b.n	150a <put_fat+0x122>
			bc = (UINT)clst; bc += bc / 2;
    1414:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1418:	6a41      	ldr	r1, [r0, #36]	; 0x24
    141a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
    141e:	4b3e      	ldr	r3, [pc, #248]	; (1518 <put_fat+0x130>)
    1420:	4798      	blx	r3
			if (res != FR_OK) break;
    1422:	4607      	mov	r7, r0
    1424:	2800      	cmp	r0, #0
    1426:	d170      	bne.n	150a <put_fat+0x122>
			p = &fs->win[bc++ % SS(fs)];
    1428:	f108 0901 	add.w	r9, r8, #1
    142c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1430:	f014 0f01 	tst.w	r4, #1
    1434:	d01c      	beq.n	1470 <put_fat+0x88>
    1436:	44a8      	add	r8, r5
    1438:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    143c:	f003 030f 	and.w	r3, r3, #15
    1440:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    1444:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
			fs->wflag = 1;
    1448:	2301      	movs	r3, #1
    144a:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    144c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    144e:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    1452:	4628      	mov	r0, r5
    1454:	4b30      	ldr	r3, [pc, #192]	; (1518 <put_fat+0x130>)
    1456:	4798      	blx	r3
			if (res != FR_OK) break;
    1458:	2800      	cmp	r0, #0
    145a:	d159      	bne.n	1510 <put_fat+0x128>
			p = &fs->win[bc % SS(fs)];
    145c:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1460:	f3c6 1207 	ubfx	r2, r6, #4, #8
    1464:	44a9      	add	r9, r5
    1466:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
			fs->wflag = 1;
    146a:	2301      	movs	r3, #1
    146c:	712b      	strb	r3, [r5, #4]
			break;
    146e:	e04c      	b.n	150a <put_fat+0x122>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1470:	44a8      	add	r8, r5
    1472:	f888 6034 	strb.w	r6, [r8, #52]	; 0x34
			fs->wflag = 1;
    1476:	2301      	movs	r3, #1
    1478:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    147a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    147c:	eb01 2159 	add.w	r1, r1, r9, lsr #9
    1480:	4628      	mov	r0, r5
    1482:	4b25      	ldr	r3, [pc, #148]	; (1518 <put_fat+0x130>)
    1484:	4798      	blx	r3
			if (res != FR_OK) break;
    1486:	2800      	cmp	r0, #0
    1488:	d144      	bne.n	1514 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    148a:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    148e:	eb05 0309 	add.w	r3, r5, r9
    1492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    1496:	f023 030f 	bic.w	r3, r3, #15
    149a:	f3c6 2203 	ubfx	r2, r6, #8, #4
    149e:	431a      	orrs	r2, r3
    14a0:	e7e0      	b.n	1464 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    14a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    14a4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    14a8:	4b1b      	ldr	r3, [pc, #108]	; (1518 <put_fat+0x130>)
    14aa:	4798      	blx	r3
			if (res != FR_OK) break;
    14ac:	4607      	mov	r7, r0
    14ae:	bb60      	cbnz	r0, 150a <put_fat+0x122>
			p = &fs->win[clst * 2 % SS(fs)];
    14b0:	0063      	lsls	r3, r4, #1
    14b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
    14b6:	442b      	add	r3, r5
    14b8:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
    14bc:	f3c6 2207 	ubfx	r2, r6, #8, #8
    14c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			fs->wflag = 1;
    14c4:	2301      	movs	r3, #1
    14c6:	712b      	strb	r3, [r5, #4]
			break;
    14c8:	e01f      	b.n	150a <put_fat+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    14ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
    14cc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    14d0:	4b11      	ldr	r3, [pc, #68]	; (1518 <put_fat+0x130>)
    14d2:	4798      	blx	r3
			if (res != FR_OK) break;
    14d4:	4607      	mov	r7, r0
    14d6:	b9c0      	cbnz	r0, 150a <put_fat+0x122>
			p = &fs->win[clst * 4 % SS(fs)];
    14d8:	00a1      	lsls	r1, r4, #2
    14da:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
    14de:	f101 0334 	add.w	r3, r1, #52	; 0x34
    14e2:	442b      	add	r3, r5
			val |= LD_DWORD(p) & 0xF0000000;
    14e4:	78da      	ldrb	r2, [r3, #3]
    14e6:	0612      	lsls	r2, r2, #24
    14e8:	4429      	add	r1, r5
    14ea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    14ee:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
    14f0:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    14f4:	f3c2 2107 	ubfx	r1, r2, #8, #8
    14f8:	7059      	strb	r1, [r3, #1]
    14fa:	0c11      	lsrs	r1, r2, #16
    14fc:	7099      	strb	r1, [r3, #2]
    14fe:	0e12      	lsrs	r2, r2, #24
    1500:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
    1502:	2301      	movs	r3, #1
    1504:	712b      	strb	r3, [r5, #4]
			break;
    1506:	e000      	b.n	150a <put_fat+0x122>
		res = FR_INT_ERR;
    1508:	2702      	movs	r7, #2
}
    150a:	4638      	mov	r0, r7
    150c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1510:	4607      	mov	r7, r0
    1512:	e7fa      	b.n	150a <put_fat+0x122>
    1514:	4607      	mov	r7, r0
	return res;
    1516:	e7f8      	b.n	150a <put_fat+0x122>
    1518:	00000c5d 	.word	0x00000c5d

0000151c <create_chain>:
{
    151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1520:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
    1522:	4688      	mov	r8, r1
    1524:	b941      	cbnz	r1, 1538 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
    1526:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1528:	b19e      	cbz	r6, 1552 <create_chain+0x36>
    152a:	6983      	ldr	r3, [r0, #24]
    152c:	429e      	cmp	r6, r3
    152e:	bf28      	it	cs
    1530:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
    1532:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1534:	4f2a      	ldr	r7, [pc, #168]	; (15e0 <create_chain+0xc4>)
    1536:	e01a      	b.n	156e <create_chain+0x52>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1538:	4b29      	ldr	r3, [pc, #164]	; (15e0 <create_chain+0xc4>)
    153a:	4798      	blx	r3
    153c:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
    153e:	2801      	cmp	r0, #1
    1540:	d943      	bls.n	15ca <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    1542:	f1b0 3fff 	cmp.w	r0, #4294967295
    1546:	d045      	beq.n	15d4 <create_chain+0xb8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1548:	69aa      	ldr	r2, [r5, #24]
    154a:	4290      	cmp	r0, r2
    154c:	d342      	bcc.n	15d4 <create_chain+0xb8>
		scl = clst;
    154e:	4646      	mov	r6, r8
    1550:	e7ef      	b.n	1532 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1552:	2601      	movs	r6, #1
    1554:	e7ed      	b.n	1532 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1556:	4621      	mov	r1, r4
    1558:	4628      	mov	r0, r5
    155a:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    155c:	4603      	mov	r3, r0
    155e:	b170      	cbz	r0, 157e <create_chain+0x62>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1560:	f1b0 3fff 	cmp.w	r0, #4294967295
    1564:	d036      	beq.n	15d4 <create_chain+0xb8>
    1566:	2801      	cmp	r0, #1
    1568:	d034      	beq.n	15d4 <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    156a:	42b4      	cmp	r4, r6
    156c:	d031      	beq.n	15d2 <create_chain+0xb6>
		ncl++;							/* Next cluster */
    156e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    1570:	69ab      	ldr	r3, [r5, #24]
    1572:	429c      	cmp	r4, r3
    1574:	d3ef      	bcc.n	1556 <create_chain+0x3a>
			if (ncl > scl) return 0;	/* No free cluster */
    1576:	2e01      	cmp	r6, #1
    1578:	d929      	bls.n	15ce <create_chain+0xb2>
			ncl = 2;
    157a:	2402      	movs	r4, #2
    157c:	e7eb      	b.n	1556 <create_chain+0x3a>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    157e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    1582:	4621      	mov	r1, r4
    1584:	4628      	mov	r0, r5
    1586:	4b17      	ldr	r3, [pc, #92]	; (15e4 <create_chain+0xc8>)
    1588:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    158a:	4603      	mov	r3, r0
    158c:	b9b8      	cbnz	r0, 15be <create_chain+0xa2>
    158e:	f1b8 0f00 	cmp.w	r8, #0
    1592:	d10c      	bne.n	15ae <create_chain+0x92>
		fs->last_clust = ncl;			/* Update FSINFO */
    1594:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    1596:	692b      	ldr	r3, [r5, #16]
    1598:	f1b3 3fff 	cmp.w	r3, #4294967295
    159c:	d01d      	beq.n	15da <create_chain+0xbe>
			fs->free_clust--;
    159e:	3b01      	subs	r3, #1
    15a0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    15a2:	796b      	ldrb	r3, [r5, #5]
    15a4:	f043 0301 	orr.w	r3, r3, #1
    15a8:	716b      	strb	r3, [r5, #5]
    15aa:	4623      	mov	r3, r4
    15ac:	e012      	b.n	15d4 <create_chain+0xb8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    15ae:	4622      	mov	r2, r4
    15b0:	4641      	mov	r1, r8
    15b2:	4628      	mov	r0, r5
    15b4:	4b0b      	ldr	r3, [pc, #44]	; (15e4 <create_chain+0xc8>)
    15b6:	4798      	blx	r3
	if (res == FR_OK) {
    15b8:	4603      	mov	r3, r0
    15ba:	2800      	cmp	r0, #0
    15bc:	d0ea      	beq.n	1594 <create_chain+0x78>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    15be:	2b01      	cmp	r3, #1
    15c0:	bf0c      	ite	eq
    15c2:	f04f 33ff 	moveq.w	r3, #4294967295
    15c6:	2301      	movne	r3, #1
    15c8:	e004      	b.n	15d4 <create_chain+0xb8>
		if (cs < 2) return 1;			/* Invalid value */
    15ca:	2301      	movs	r3, #1
    15cc:	e002      	b.n	15d4 <create_chain+0xb8>
			if (ncl > scl) return 0;	/* No free cluster */
    15ce:	2300      	movs	r3, #0
    15d0:	e000      	b.n	15d4 <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
    15d2:	2300      	movs	r3, #0
}
    15d4:	4618      	mov	r0, r3
    15d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15da:	4623      	mov	r3, r4
    15dc:	e7fa      	b.n	15d4 <create_chain+0xb8>
    15de:	bf00      	nop
    15e0:	00001205 	.word	0x00001205
    15e4:	000013e9 	.word	0x000013e9

000015e8 <dir_next>:
{
    15e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
    15ec:	88c4      	ldrh	r4, [r0, #6]
    15ee:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    15f0:	b2a3      	uxth	r3, r4
    15f2:	b913      	cbnz	r3, 15fa <dir_next+0x12>
		return FR_NO_FILE;
    15f4:	2004      	movs	r0, #4
    15f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    15fa:	6903      	ldr	r3, [r0, #16]
    15fc:	b913      	cbnz	r3, 1604 <dir_next+0x1c>
		return FR_NO_FILE;
    15fe:	2004      	movs	r0, #4
    1600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1604:	460e      	mov	r6, r1
    1606:	4605      	mov	r5, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    1608:	f014 070f 	ands.w	r7, r4, #15
    160c:	d110      	bne.n	1630 <dir_next+0x48>
		dp->sect++;					/* Next sector */
    160e:	3301      	adds	r3, #1
    1610:	6103      	str	r3, [r0, #16]
		if (!dp->clust) {		/* Static table */
    1612:	68c1      	ldr	r1, [r0, #12]
    1614:	b931      	cbnz	r1, 1624 <dir_next+0x3c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    1616:	6803      	ldr	r3, [r0, #0]
    1618:	891b      	ldrh	r3, [r3, #8]
    161a:	429c      	cmp	r4, r3
    161c:	d308      	bcc.n	1630 <dir_next+0x48>
				return FR_NO_FILE;
    161e:	2004      	movs	r0, #4
    1620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1624:	6800      	ldr	r0, [r0, #0]
    1626:	7883      	ldrb	r3, [r0, #2]
    1628:	3b01      	subs	r3, #1
    162a:	ea13 1814 	ands.w	r8, r3, r4, lsr #4
    162e:	d008      	beq.n	1642 <dir_next+0x5a>
	dp->index = (WORD)i;	/* Current index */
    1630:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    1632:	682b      	ldr	r3, [r5, #0]
    1634:	3334      	adds	r3, #52	; 0x34
    1636:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    163a:	616b      	str	r3, [r5, #20]
	return FR_OK;
    163c:	2000      	movs	r0, #0
    163e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    1642:	4b30      	ldr	r3, [pc, #192]	; (1704 <dir_next+0x11c>)
    1644:	4798      	blx	r3
    1646:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    1648:	2801      	cmp	r0, #1
    164a:	d948      	bls.n	16de <dir_next+0xf6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    164c:	f1b0 3fff 	cmp.w	r0, #4294967295
    1650:	d048      	beq.n	16e4 <dir_next+0xfc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    1652:	6828      	ldr	r0, [r5, #0]
    1654:	6983      	ldr	r3, [r0, #24]
    1656:	4599      	cmp	r9, r3
    1658:	d339      	bcc.n	16ce <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    165a:	b916      	cbnz	r6, 1662 <dir_next+0x7a>
    165c:	2004      	movs	r0, #4
    165e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    1662:	68e9      	ldr	r1, [r5, #12]
    1664:	4b28      	ldr	r3, [pc, #160]	; (1708 <dir_next+0x120>)
    1666:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1668:	4681      	mov	r9, r0
    166a:	b910      	cbnz	r0, 1672 <dir_next+0x8a>
    166c:	2007      	movs	r0, #7
    166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    1672:	2801      	cmp	r0, #1
    1674:	d039      	beq.n	16ea <dir_next+0x102>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1676:	f1b0 3fff 	cmp.w	r0, #4294967295
    167a:	d039      	beq.n	16f0 <dir_next+0x108>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    167c:	6828      	ldr	r0, [r5, #0]
    167e:	4b23      	ldr	r3, [pc, #140]	; (170c <dir_next+0x124>)
    1680:	4798      	blx	r3
    1682:	2800      	cmp	r0, #0
    1684:	d137      	bne.n	16f6 <dir_next+0x10e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    1686:	6828      	ldr	r0, [r5, #0]
    1688:	f44f 7200 	mov.w	r2, #512	; 0x200
    168c:	2100      	movs	r1, #0
    168e:	3034      	adds	r0, #52	; 0x34
    1690:	4b1f      	ldr	r3, [pc, #124]	; (1710 <dir_next+0x128>)
    1692:	4798      	blx	r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    1694:	682e      	ldr	r6, [r5, #0]
    1696:	4649      	mov	r1, r9
    1698:	4630      	mov	r0, r6
    169a:	4b1e      	ldr	r3, [pc, #120]	; (1714 <dir_next+0x12c>)
    169c:	4798      	blx	r3
    169e:	6330      	str	r0, [r6, #48]	; 0x30
						dp->fs->wflag = 1;
    16a0:	f04f 0a01 	mov.w	sl, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    16a4:	4e19      	ldr	r6, [pc, #100]	; (170c <dir_next+0x124>)
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    16a6:	682b      	ldr	r3, [r5, #0]
    16a8:	789a      	ldrb	r2, [r3, #2]
    16aa:	4590      	cmp	r8, r2
    16ac:	d20b      	bcs.n	16c6 <dir_next+0xde>
						dp->fs->wflag = 1;
    16ae:	f883 a004 	strb.w	sl, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    16b2:	6828      	ldr	r0, [r5, #0]
    16b4:	47b0      	blx	r6
    16b6:	bb08      	cbnz	r0, 16fc <dir_next+0x114>
						dp->fs->winsect++;
    16b8:	682a      	ldr	r2, [r5, #0]
    16ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
    16bc:	3301      	adds	r3, #1
    16be:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    16c0:	f108 0801 	add.w	r8, r8, #1
    16c4:	e7ef      	b.n	16a6 <dir_next+0xbe>
					dp->fs->winsect -= c;						/* Rewind window offset */
    16c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    16c8:	eba2 0208 	sub.w	r2, r2, r8
    16cc:	631a      	str	r2, [r3, #48]	; 0x30
				dp->clust = clst;				/* Initialize data for new cluster */
    16ce:	f8c5 900c 	str.w	r9, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
    16d2:	4649      	mov	r1, r9
    16d4:	6828      	ldr	r0, [r5, #0]
    16d6:	4b0f      	ldr	r3, [pc, #60]	; (1714 <dir_next+0x12c>)
    16d8:	4798      	blx	r3
    16da:	6128      	str	r0, [r5, #16]
    16dc:	e7a8      	b.n	1630 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
    16de:	2002      	movs	r0, #2
    16e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    16e4:	2001      	movs	r0, #1
    16e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
    16ea:	2002      	movs	r0, #2
    16ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    16f0:	2001      	movs	r0, #1
    16f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    16f6:	2001      	movs	r0, #1
    16f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    16fc:	2001      	movs	r0, #1
}
    16fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1702:	bf00      	nop
    1704:	00001205 	.word	0x00001205
    1708:	0000151d 	.word	0x0000151d
    170c:	00000bed 	.word	0x00000bed
    1710:	00000afd 	.word	0x00000afd
    1714:	000011ed 	.word	0x000011ed

00001718 <follow_path>:
{
    1718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    171c:	4605      	mov	r5, r0
    171e:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
    1720:	780b      	ldrb	r3, [r1, #0]
    1722:	2b2f      	cmp	r3, #47	; 0x2f
    1724:	d00a      	beq.n	173c <follow_path+0x24>
    1726:	2b5c      	cmp	r3, #92	; 0x5c
    1728:	d008      	beq.n	173c <follow_path+0x24>
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
    172a:	6803      	ldr	r3, [r0, #0]
    172c:	695b      	ldr	r3, [r3, #20]
    172e:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1730:	7823      	ldrb	r3, [r4, #0]
    1732:	2b1f      	cmp	r3, #31
    1734:	d906      	bls.n	1744 <follow_path+0x2c>
		res = dir_next(dp, 0);		/* Next entry */
    1736:	f8df 8238 	ldr.w	r8, [pc, #568]	; 1970 <follow_path+0x258>
    173a:	e085      	b.n	1848 <follow_path+0x130>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
    173c:	3401      	adds	r4, #1
    173e:	2300      	movs	r3, #0
    1740:	60ab      	str	r3, [r5, #8]
    1742:	e7f5      	b.n	1730 <follow_path+0x18>
		res = dir_sdi(dp, 0);
    1744:	2100      	movs	r1, #0
    1746:	4628      	mov	r0, r5
    1748:	4b83      	ldr	r3, [pc, #524]	; (1958 <follow_path+0x240>)
    174a:	4798      	blx	r3
    174c:	4681      	mov	r9, r0
		dp->dir = 0;
    174e:	2300      	movs	r3, #0
    1750:	616b      	str	r3, [r5, #20]
    1752:	e0e0      	b.n	1916 <follow_path+0x1fe>
			sfn[i++] = c;
    1754:	232e      	movs	r3, #46	; 0x2e
    1756:	703b      	strb	r3, [r7, #0]
			c = (BYTE)p[si++];
    1758:	7873      	ldrb	r3, [r6, #1]
			if (c != '.' || si >= 3) break;
    175a:	2b2e      	cmp	r3, #46	; 0x2e
    175c:	d113      	bne.n	1786 <follow_path+0x6e>
			sfn[i++] = c;
    175e:	707b      	strb	r3, [r7, #1]
			c = (BYTE)p[si++];
    1760:	78b3      	ldrb	r3, [r6, #2]
			if (c != '.' || si >= 3) break;
    1762:	2b2e      	cmp	r3, #46	; 0x2e
    1764:	d102      	bne.n	176c <follow_path+0x54>
    1766:	f04f 0906 	mov.w	r9, #6
    176a:	e0d4      	b.n	1916 <follow_path+0x1fe>
			c = (BYTE)p[si++];
    176c:	2403      	movs	r4, #3
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    176e:	2b2f      	cmp	r3, #47	; 0x2f
    1770:	f000 80ba 	beq.w	18e8 <follow_path+0x1d0>
    1774:	2b5c      	cmp	r3, #92	; 0x5c
    1776:	f000 80b7 	beq.w	18e8 <follow_path+0x1d0>
    177a:	2b20      	cmp	r3, #32
    177c:	f200 80c9 	bhi.w	1912 <follow_path+0x1fa>
		*path = &p[si];									/* Return pointer to the next segment */
    1780:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1782:	2324      	movs	r3, #36	; 0x24
    1784:	e0b2      	b.n	18ec <follow_path+0x1d4>
			c = (BYTE)p[si++];
    1786:	2402      	movs	r4, #2
    1788:	e7f1      	b.n	176e <follow_path+0x56>
			b |= 3;						/* Eliminate NT flag */
    178a:	f04c 0c03 	orr.w	ip, ip, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
    178e:	3b80      	subs	r3, #128	; 0x80
    1790:	4a72      	ldr	r2, [pc, #456]	; (195c <follow_path+0x244>)
    1792:	5cd3      	ldrb	r3, [r2, r3]
    1794:	e085      	b.n	18a2 <follow_path+0x18a>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1796:	2b00      	cmp	r3, #0
    1798:	f040 80bb 	bne.w	1912 <follow_path+0x1fa>
				if (IsLower(c)) {		/* ASCII small capital? */
    179c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    17a0:	b2d2      	uxtb	r2, r2
    17a2:	2a19      	cmp	r2, #25
    17a4:	f200 8091 	bhi.w	18ca <follow_path+0x1b2>
					b |= 1; c -= 0x20;
    17a8:	f04c 0c01 	orr.w	ip, ip, #1
    17ac:	3b20      	subs	r3, #32
    17ae:	b2db      	uxtb	r3, r3
    17b0:	e08b      	b.n	18ca <follow_path+0x1b2>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    17b2:	783a      	ldrb	r2, [r7, #0]
    17b4:	2ae5      	cmp	r2, #229	; 0xe5
    17b6:	bf04      	itt	eq
    17b8:	2205      	moveq	r2, #5
    17ba:	703a      	strbeq	r2, [r7, #0]
	if (ni == 8) b <<= 2;
    17bc:	f1b9 0f08 	cmp.w	r9, #8
    17c0:	bf04      	itt	eq
    17c2:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
    17c6:	fa5f fc8c 	uxtbeq.w	ip, ip
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    17ca:	f00c 0203 	and.w	r2, ip, #3
    17ce:	2a01      	cmp	r2, #1
    17d0:	bf08      	it	eq
    17d2:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    17d6:	f00c 0c0c 	and.w	ip, ip, #12
    17da:	f1bc 0f04 	cmp.w	ip, #4
    17de:	bf08      	it	eq
    17e0:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    17e4:	72fb      	strb	r3, [r7, #11]
    17e6:	e082      	b.n	18ee <follow_path+0x1d6>
		res = dir_next(dp, 0);		/* Next entry */
    17e8:	4659      	mov	r1, fp
    17ea:	4628      	mov	r0, r5
    17ec:	47c0      	blx	r8
	} while (res == FR_OK);
    17ee:	4681      	mov	r9, r0
    17f0:	2800      	cmp	r0, #0
    17f2:	f040 8093 	bne.w	191c <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    17f6:	6929      	ldr	r1, [r5, #16]
    17f8:	6828      	ldr	r0, [r5, #0]
    17fa:	47b0      	blx	r6
		if (res != FR_OK) break;
    17fc:	4681      	mov	r9, r0
    17fe:	2800      	cmp	r0, #0
    1800:	f040 808c 	bne.w	191c <follow_path+0x204>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1804:	6969      	ldr	r1, [r5, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1806:	780b      	ldrb	r3, [r1, #0]
    1808:	2b00      	cmp	r3, #0
    180a:	f000 8097 	beq.w	193c <follow_path+0x224>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    180e:	f891 a00b 	ldrb.w	sl, [r1, #11]
    1812:	f01a 0f08 	tst.w	sl, #8
    1816:	d1e7      	bne.n	17e8 <follow_path+0xd0>
    1818:	69af      	ldr	r7, [r5, #24]
    181a:	f101 0c0b 	add.w	ip, r1, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    181e:	463a      	mov	r2, r7
    1820:	460b      	mov	r3, r1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1822:	f813 eb01 	ldrb.w	lr, [r3], #1
    1826:	f812 0b01 	ldrb.w	r0, [r2], #1
    182a:	4586      	cmp	lr, r0
    182c:	d1dc      	bne.n	17e8 <follow_path+0xd0>
    182e:	459c      	cmp	ip, r3
    1830:	d1f7      	bne.n	1822 <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1832:	7afb      	ldrb	r3, [r7, #11]
    1834:	f013 0f04 	tst.w	r3, #4
    1838:	d16d      	bne.n	1916 <follow_path+0x1fe>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    183a:	f01a 0f10 	tst.w	sl, #16
    183e:	d050      	beq.n	18e2 <follow_path+0x1ca>
			dp->sclust = ld_clust(dp->fs, dir);
    1840:	6828      	ldr	r0, [r5, #0]
    1842:	4b47      	ldr	r3, [pc, #284]	; (1960 <follow_path+0x248>)
    1844:	4798      	blx	r3
    1846:	60a8      	str	r0, [r5, #8]
    1848:	4626      	mov	r6, r4
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Skip duplicated separator */
    184a:	f814 3b01 	ldrb.w	r3, [r4], #1
    184e:	2b2f      	cmp	r3, #47	; 0x2f
    1850:	d0fa      	beq.n	1848 <follow_path+0x130>
    1852:	2b5c      	cmp	r3, #92	; 0x5c
    1854:	d0f8      	beq.n	1848 <follow_path+0x130>
	sfn = dp->fn;
    1856:	69af      	ldr	r7, [r5, #24]
	mem_set(sfn, ' ', 11);
    1858:	220b      	movs	r2, #11
    185a:	2120      	movs	r1, #32
    185c:	4638      	mov	r0, r7
    185e:	4b41      	ldr	r3, [pc, #260]	; (1964 <follow_path+0x24c>)
    1860:	4798      	blx	r3
	if (p[si] == '.') { /* Is this a dot entry? */
    1862:	7833      	ldrb	r3, [r6, #0]
    1864:	2b2e      	cmp	r3, #46	; 0x2e
    1866:	f43f af75 	beq.w	1754 <follow_path+0x3c>
    186a:	f106 3eff 	add.w	lr, r6, #4294967295
    186e:	2000      	movs	r0, #0
    1870:	4604      	mov	r4, r0
    1872:	f04f 0908 	mov.w	r9, #8
    1876:	4684      	mov	ip, r0
			i = 8; ni = 11;
    1878:	f04f 0b0b 	mov.w	fp, #11
	while (*str && *str != chr) str++;
    187c:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
		c = (BYTE)p[si++];
    1880:	3401      	adds	r4, #1
    1882:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1886:	2b20      	cmp	r3, #32
    1888:	d93b      	bls.n	1902 <follow_path+0x1ea>
    188a:	2b2f      	cmp	r3, #47	; 0x2f
    188c:	d03c      	beq.n	1908 <follow_path+0x1f0>
    188e:	2b5c      	cmp	r3, #92	; 0x5c
    1890:	d03a      	beq.n	1908 <follow_path+0x1f0>
		if (c == '.' || i >= ni) {
    1892:	2b2e      	cmp	r3, #46	; 0x2e
    1894:	d055      	beq.n	1942 <follow_path+0x22a>
    1896:	4581      	cmp	r9, r0
    1898:	d93b      	bls.n	1912 <follow_path+0x1fa>
		if (c >= 0x80) {				/* Extended character? */
    189a:	f013 0f80 	tst.w	r3, #128	; 0x80
    189e:	f47f af74 	bne.w	178a <follow_path+0x72>
	while (*str && *str != chr) str++;
    18a2:	2b22      	cmp	r3, #34	; 0x22
    18a4:	f43f af5f 	beq.w	1766 <follow_path+0x4e>
    18a8:	4652      	mov	r2, sl
    18aa:	492f      	ldr	r1, [pc, #188]	; (1968 <follow_path+0x250>)
    18ac:	4293      	cmp	r3, r2
    18ae:	f43f af72 	beq.w	1796 <follow_path+0x7e>
    18b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    18b6:	2a00      	cmp	r2, #0
    18b8:	d1f8      	bne.n	18ac <follow_path+0x194>
			if (IsUpper(c)) {			/* ASCII large capital? */
    18ba:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    18be:	b2d2      	uxtb	r2, r2
    18c0:	2a19      	cmp	r2, #25
    18c2:	f63f af6b 	bhi.w	179c <follow_path+0x84>
				b |= 2;
    18c6:	f04c 0c02 	orr.w	ip, ip, #2
			sfn[i++] = c;
    18ca:	543b      	strb	r3, [r7, r0]
    18cc:	3001      	adds	r0, #1
    18ce:	e7d7      	b.n	1880 <follow_path+0x168>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    18d0:	f003 0304 	and.w	r3, r3, #4
    18d4:	2b00      	cmp	r3, #0
    18d6:	bf14      	ite	ne
    18d8:	f04f 0904 	movne.w	r9, #4
    18dc:	f04f 0905 	moveq.w	r9, #5
    18e0:	e019      	b.n	1916 <follow_path+0x1fe>
				res = FR_NO_PATH; break;
    18e2:	f04f 0905 	mov.w	r9, #5
    18e6:	e016      	b.n	1916 <follow_path+0x1fe>
		*path = &p[si];									/* Return pointer to the next segment */
    18e8:	4434      	add	r4, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    18ea:	2320      	movs	r3, #32
    18ec:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    18ee:	2100      	movs	r1, #0
    18f0:	4628      	mov	r0, r5
    18f2:	4b19      	ldr	r3, [pc, #100]	; (1958 <follow_path+0x240>)
    18f4:	4798      	blx	r3
	if (res != FR_OK) return res;
    18f6:	4681      	mov	r9, r0
    18f8:	b980      	cbnz	r0, 191c <follow_path+0x204>
		res = move_window(dp->fs, dp->sect);
    18fa:	4e1c      	ldr	r6, [pc, #112]	; (196c <follow_path+0x254>)
		res = dir_next(dp, 0);		/* Next entry */
    18fc:	f04f 0b00 	mov.w	fp, #0
    1900:	e779      	b.n	17f6 <follow_path+0xde>
	*path = &p[si];						/* Return pointer to the next segment */
    1902:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1904:	2304      	movs	r3, #4
    1906:	e001      	b.n	190c <follow_path+0x1f4>
	*path = &p[si];						/* Return pointer to the next segment */
    1908:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    190a:	2300      	movs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    190c:	2800      	cmp	r0, #0
    190e:	f47f af50 	bne.w	17b2 <follow_path+0x9a>
			res = dir_find(dp);				/* Find an object with the sagment name */
    1912:	f04f 0906 	mov.w	r9, #6
}
    1916:	4648      	mov	r0, r9
    1918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ns = dp->fn[NSFLAG];
    191c:	69ab      	ldr	r3, [r5, #24]
    191e:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
    1920:	f1b9 0f04 	cmp.w	r9, #4
    1924:	d1f7      	bne.n	1916 <follow_path+0x1fe>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
    1926:	f013 0f20 	tst.w	r3, #32
    192a:	d0d1      	beq.n	18d0 <follow_path+0x1b8>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
    192c:	2200      	movs	r2, #0
    192e:	60aa      	str	r2, [r5, #8]
    1930:	616a      	str	r2, [r5, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    1932:	f013 0f04 	tst.w	r3, #4
    1936:	d087      	beq.n	1848 <follow_path+0x130>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
    1938:	4691      	mov	r9, r2
    193a:	e7ec      	b.n	1916 <follow_path+0x1fe>
			ns = dp->fn[NSFLAG];
    193c:	69ab      	ldr	r3, [r5, #24]
    193e:	7adb      	ldrb	r3, [r3, #11]
    1940:	e7f1      	b.n	1926 <follow_path+0x20e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1942:	f1b9 0f08 	cmp.w	r9, #8
    1946:	d1e4      	bne.n	1912 <follow_path+0x1fa>
			b <<= 2; continue;
    1948:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    194c:	fa5f fc8c 	uxtb.w	ip, ip
			i = 8; ni = 11;
    1950:	4648      	mov	r0, r9
    1952:	46d9      	mov	r9, fp
    1954:	e794      	b.n	1880 <follow_path+0x168>
    1956:	bf00      	nop
    1958:	000012e9 	.word	0x000012e9
    195c:	0000b4c8 	.word	0x0000b4c8
    1960:	00000b0b 	.word	0x00000b0b
    1964:	00000afd 	.word	0x00000afd
    1968:	0000b579 	.word	0x0000b579
    196c:	00000c5d 	.word	0x00000c5d
    1970:	000015e9 	.word	0x000015e9

00001974 <dir_alloc>:
{
    1974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1978:	4604      	mov	r4, r0
    197a:	4689      	mov	r9, r1
	res = dir_sdi(dp, 0);
    197c:	2100      	movs	r1, #0
    197e:	4b12      	ldr	r3, [pc, #72]	; (19c8 <dir_alloc+0x54>)
    1980:	4798      	blx	r3
	if (res == FR_OK) {
    1982:	4603      	mov	r3, r0
    1984:	b9d0      	cbnz	r0, 19bc <dir_alloc+0x48>
    1986:	2500      	movs	r5, #0
			res = move_window(dp->fs, dp->sect);
    1988:	4e10      	ldr	r6, [pc, #64]	; (19cc <dir_alloc+0x58>)
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    198a:	f04f 0801 	mov.w	r8, #1
    198e:	4f10      	ldr	r7, [pc, #64]	; (19d0 <dir_alloc+0x5c>)
    1990:	e007      	b.n	19a2 <dir_alloc+0x2e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    1992:	3501      	adds	r5, #1
    1994:	454d      	cmp	r5, r9
    1996:	d014      	beq.n	19c2 <dir_alloc+0x4e>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1998:	4641      	mov	r1, r8
    199a:	4620      	mov	r0, r4
    199c:	47b8      	blx	r7
		} while (res == FR_OK);
    199e:	4603      	mov	r3, r0
    19a0:	b960      	cbnz	r0, 19bc <dir_alloc+0x48>
			res = move_window(dp->fs, dp->sect);
    19a2:	6921      	ldr	r1, [r4, #16]
    19a4:	6820      	ldr	r0, [r4, #0]
    19a6:	47b0      	blx	r6
			if (res != FR_OK) break;
    19a8:	4603      	mov	r3, r0
    19aa:	b938      	cbnz	r0, 19bc <dir_alloc+0x48>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    19ac:	6962      	ldr	r2, [r4, #20]
    19ae:	7812      	ldrb	r2, [r2, #0]
    19b0:	2ae5      	cmp	r2, #229	; 0xe5
    19b2:	d0ee      	beq.n	1992 <dir_alloc+0x1e>
    19b4:	2a00      	cmp	r2, #0
    19b6:	d0ec      	beq.n	1992 <dir_alloc+0x1e>
				n = 0;					/* Not a blank entry. Restart to search */
    19b8:	2500      	movs	r5, #0
    19ba:	e7ed      	b.n	1998 <dir_alloc+0x24>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    19bc:	2b04      	cmp	r3, #4
    19be:	bf08      	it	eq
    19c0:	2307      	moveq	r3, #7
}
    19c2:	4618      	mov	r0, r3
    19c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19c8:	000012e9 	.word	0x000012e9
    19cc:	00000c5d 	.word	0x00000c5d
    19d0:	000015e9 	.word	0x000015e9

000019d4 <dir_register>:
{
    19d4:	b538      	push	{r3, r4, r5, lr}
    19d6:	4605      	mov	r5, r0
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
    19d8:	2101      	movs	r1, #1
    19da:	4b0d      	ldr	r3, [pc, #52]	; (1a10 <dir_register+0x3c>)
    19dc:	4798      	blx	r3
	if (res == FR_OK) {				/* Set SFN entry */
    19de:	4604      	mov	r4, r0
    19e0:	b108      	cbz	r0, 19e6 <dir_register+0x12>
}
    19e2:	4620      	mov	r0, r4
    19e4:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(dp->fs, dp->sect);
    19e6:	6929      	ldr	r1, [r5, #16]
    19e8:	6828      	ldr	r0, [r5, #0]
    19ea:	4b0a      	ldr	r3, [pc, #40]	; (1a14 <dir_register+0x40>)
    19ec:	4798      	blx	r3
		if (res == FR_OK) {
    19ee:	4604      	mov	r4, r0
    19f0:	2800      	cmp	r0, #0
    19f2:	d1f6      	bne.n	19e2 <dir_register+0xe>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    19f4:	2220      	movs	r2, #32
    19f6:	2100      	movs	r1, #0
    19f8:	6968      	ldr	r0, [r5, #20]
    19fa:	4b07      	ldr	r3, [pc, #28]	; (1a18 <dir_register+0x44>)
    19fc:	4798      	blx	r3
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    19fe:	220b      	movs	r2, #11
    1a00:	69a9      	ldr	r1, [r5, #24]
    1a02:	6968      	ldr	r0, [r5, #20]
    1a04:	4b05      	ldr	r3, [pc, #20]	; (1a1c <dir_register+0x48>)
    1a06:	4798      	blx	r3
			dp->fs->wflag = 1;
    1a08:	682b      	ldr	r3, [r5, #0]
    1a0a:	2201      	movs	r2, #1
    1a0c:	711a      	strb	r2, [r3, #4]
    1a0e:	e7e8      	b.n	19e2 <dir_register+0xe>
    1a10:	00001975 	.word	0x00001975
    1a14:	00000c5d 	.word	0x00000c5d
    1a18:	00000afd 	.word	0x00000afd
    1a1c:	00000ae9 	.word	0x00000ae9

00001a20 <dir_read>:
{
    1a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a24:	4604      	mov	r4, r0
    1a26:	4688      	mov	r8, r1
	res = FR_NO_FILE;
    1a28:	f04f 0e04 	mov.w	lr, #4
		res = move_window(dp->fs, dp->sect);
    1a2c:	4d16      	ldr	r5, [pc, #88]	; (1a88 <dir_read+0x68>)
		res = dir_next(dp, 0);				/* Next entry */
    1a2e:	2700      	movs	r7, #0
    1a30:	4e16      	ldr	r6, [pc, #88]	; (1a8c <dir_read+0x6c>)
	while (dp->sect) {
    1a32:	e004      	b.n	1a3e <dir_read+0x1e>
		res = dir_next(dp, 0);				/* Next entry */
    1a34:	4639      	mov	r1, r7
    1a36:	4620      	mov	r0, r4
    1a38:	47b0      	blx	r6
		if (res != FR_OK) break;
    1a3a:	4686      	mov	lr, r0
    1a3c:	b9f0      	cbnz	r0, 1a7c <dir_read+0x5c>
	while (dp->sect) {
    1a3e:	6921      	ldr	r1, [r4, #16]
    1a40:	b1b1      	cbz	r1, 1a70 <dir_read+0x50>
		res = move_window(dp->fs, dp->sect);
    1a42:	6820      	ldr	r0, [r4, #0]
    1a44:	47a8      	blx	r5
		if (res != FR_OK) break;
    1a46:	4686      	mov	lr, r0
    1a48:	b9c0      	cbnz	r0, 1a7c <dir_read+0x5c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1a4a:	6963      	ldr	r3, [r4, #20]
		c = dir[DIR_Name];
    1a4c:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1a4e:	b19a      	cbz	r2, 1a78 <dir_read+0x58>
		a = dir[DIR_Attr] & AM_MASK;
    1a50:	7adb      	ldrb	r3, [r3, #11]
    1a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
    1a56:	2ae5      	cmp	r2, #229	; 0xe5
    1a58:	d0ec      	beq.n	1a34 <dir_read+0x14>
    1a5a:	2b0f      	cmp	r3, #15
    1a5c:	d0ea      	beq.n	1a34 <dir_read+0x14>
    1a5e:	f023 0320 	bic.w	r3, r3, #32
    1a62:	2b08      	cmp	r3, #8
    1a64:	bf14      	ite	ne
    1a66:	2300      	movne	r3, #0
    1a68:	2301      	moveq	r3, #1
    1a6a:	4543      	cmp	r3, r8
    1a6c:	d1e2      	bne.n	1a34 <dir_read+0x14>
    1a6e:	e007      	b.n	1a80 <dir_read+0x60>
	if (res != FR_OK) dp->sect = 0;
    1a70:	f1be 0f00 	cmp.w	lr, #0
    1a74:	d004      	beq.n	1a80 <dir_read+0x60>
    1a76:	e001      	b.n	1a7c <dir_read+0x5c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1a78:	f04f 0e04 	mov.w	lr, #4
	if (res != FR_OK) dp->sect = 0;
    1a7c:	2300      	movs	r3, #0
    1a7e:	6123      	str	r3, [r4, #16]
}
    1a80:	4670      	mov	r0, lr
    1a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a86:	bf00      	nop
    1a88:	00000c5d 	.word	0x00000c5d
    1a8c:	000015e9 	.word	0x000015e9

00001a90 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1a90:	2901      	cmp	r1, #1
    1a92:	d930      	bls.n	1af6 <remove_chain+0x66>
{
    1a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a98:	4604      	mov	r4, r0
    1a9a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1a9c:	6983      	ldr	r3, [r0, #24]
    1a9e:	4299      	cmp	r1, r3
    1aa0:	d303      	bcc.n	1aaa <remove_chain+0x1a>
		res = FR_INT_ERR;
    1aa2:	2202      	movs	r2, #2
}
    1aa4:	4610      	mov	r0, r2
    1aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1aaa:	4f17      	ldr	r7, [pc, #92]	; (1b08 <remove_chain+0x78>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1aac:	f04f 0900 	mov.w	r9, #0
    1ab0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1b0c <remove_chain+0x7c>
    1ab4:	e003      	b.n	1abe <remove_chain+0x2e>
    1ab6:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1ab8:	69a3      	ldr	r3, [r4, #24]
    1aba:	42ab      	cmp	r3, r5
    1abc:	d9f2      	bls.n	1aa4 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1abe:	4631      	mov	r1, r6
    1ac0:	4620      	mov	r0, r4
    1ac2:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
    1ac4:	4605      	mov	r5, r0
    1ac6:	b1c8      	cbz	r0, 1afc <remove_chain+0x6c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1ac8:	2801      	cmp	r0, #1
    1aca:	d019      	beq.n	1b00 <remove_chain+0x70>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1acc:	f1b0 3fff 	cmp.w	r0, #4294967295
    1ad0:	d018      	beq.n	1b04 <remove_chain+0x74>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1ad2:	464a      	mov	r2, r9
    1ad4:	4631      	mov	r1, r6
    1ad6:	4620      	mov	r0, r4
    1ad8:	47c0      	blx	r8
			if (res != FR_OK) break;
    1ada:	4602      	mov	r2, r0
    1adc:	2800      	cmp	r0, #0
    1ade:	d1e1      	bne.n	1aa4 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1ae0:	6923      	ldr	r3, [r4, #16]
    1ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
    1ae6:	d0e6      	beq.n	1ab6 <remove_chain+0x26>
				fs->free_clust++;
    1ae8:	3301      	adds	r3, #1
    1aea:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
    1aec:	7963      	ldrb	r3, [r4, #5]
    1aee:	f043 0301 	orr.w	r3, r3, #1
    1af2:	7163      	strb	r3, [r4, #5]
    1af4:	e7df      	b.n	1ab6 <remove_chain+0x26>
		res = FR_INT_ERR;
    1af6:	2202      	movs	r2, #2
}
    1af8:	4610      	mov	r0, r2
    1afa:	4770      	bx	lr
    1afc:	2200      	movs	r2, #0
    1afe:	e7d1      	b.n	1aa4 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1b00:	2202      	movs	r2, #2
    1b02:	e7cf      	b.n	1aa4 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1b04:	2201      	movs	r2, #1
    1b06:	e7cd      	b.n	1aa4 <remove_chain+0x14>
    1b08:	00001205 	.word	0x00001205
    1b0c:	000013e9 	.word	0x000013e9

00001b10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1b10:	b510      	push	{r4, lr}
    1b12:	b084      	sub	sp, #16
    1b14:	9001      	str	r0, [sp, #4]
    1b16:	9100      	str	r1, [sp, #0]
    1b18:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1b1a:	a804      	add	r0, sp, #16
    1b1c:	f840 1d04 	str.w	r1, [r0, #-4]!

	vol = get_ldnumber(&rp);
    1b20:	4b13      	ldr	r3, [pc, #76]	; (1b70 <f_mount+0x60>)
    1b22:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    1b24:	2800      	cmp	r0, #0
    1b26:	db18      	blt.n	1b5a <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1b28:	4b12      	ldr	r3, [pc, #72]	; (1b74 <f_mount+0x64>)
    1b2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
    1b2e:	b10b      	cbz	r3, 1b34 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1b30:	2200      	movs	r2, #0
    1b32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    1b34:	9b01      	ldr	r3, [sp, #4]
    1b36:	b1ab      	cbz	r3, 1b64 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
    1b38:	2200      	movs	r2, #0
    1b3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1b3c:	9b01      	ldr	r3, [sp, #4]
    1b3e:	4a0d      	ldr	r2, [pc, #52]	; (1b74 <f_mount+0x64>)
    1b40:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1b44:	b163      	cbz	r3, 1b60 <f_mount+0x50>
    1b46:	2c01      	cmp	r4, #1
    1b48:	d001      	beq.n	1b4e <f_mount+0x3e>
    1b4a:	2000      	movs	r0, #0
    1b4c:	e006      	b.n	1b5c <f_mount+0x4c>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    1b4e:	2200      	movs	r2, #0
    1b50:	4669      	mov	r1, sp
    1b52:	a801      	add	r0, sp, #4
    1b54:	4b08      	ldr	r3, [pc, #32]	; (1b78 <f_mount+0x68>)
    1b56:	4798      	blx	r3
	LEAVE_FF(fs, res);
    1b58:	e000      	b.n	1b5c <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
    1b5a:	200b      	movs	r0, #11
}
    1b5c:	b004      	add	sp, #16
    1b5e:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1b60:	2000      	movs	r0, #0
    1b62:	e7fb      	b.n	1b5c <f_mount+0x4c>
	FatFs[vol] = fs;					/* Register new fs object */
    1b64:	2300      	movs	r3, #0
    1b66:	4a03      	ldr	r2, [pc, #12]	; (1b74 <f_mount+0x64>)
    1b68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1b6c:	4618      	mov	r0, r3
    1b6e:	e7f5      	b.n	1b5c <f_mount+0x4c>
    1b70:	00000b97 	.word	0x00000b97
    1b74:	2000027c 	.word	0x2000027c
    1b78:	00000d69 	.word	0x00000d69

00001b7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b80:	b08e      	sub	sp, #56	; 0x38
    1b82:	9101      	str	r1, [sp, #4]
	DEFINE_NAMEBUF;
#if !_FS_READONLY
	DWORD dw, cl;
#endif

	if (!fp) return FR_INVALID_OBJECT;
    1b84:	2800      	cmp	r0, #0
    1b86:	f000 80ac 	beq.w	1ce2 <f_open+0x166>
    1b8a:	4604      	mov	r4, r0
    1b8c:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
    1b8e:	2300      	movs	r3, #0
    1b90:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1b92:	f002 021e 	and.w	r2, r2, #30
    1b96:	a901      	add	r1, sp, #4
    1b98:	a806      	add	r0, sp, #24
    1b9a:	4b5c      	ldr	r3, [pc, #368]	; (1d0c <f_open+0x190>)
    1b9c:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1b9e:	4606      	mov	r6, r0
    1ba0:	2800      	cmp	r0, #0
    1ba2:	f040 809f 	bne.w	1ce4 <f_open+0x168>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1ba6:	f005 081f 	and.w	r8, r5, #31
		INIT_BUF(dj);
    1baa:	ab03      	add	r3, sp, #12
    1bac:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&dj, path);	/* Follow the file path */
    1bae:	9901      	ldr	r1, [sp, #4]
    1bb0:	a806      	add	r0, sp, #24
    1bb2:	4b57      	ldr	r3, [pc, #348]	; (1d10 <f_open+0x194>)
    1bb4:	4798      	blx	r3
		dir = dj.dir;
    1bb6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1bb8:	4603      	mov	r3, r0
    1bba:	2800      	cmp	r0, #0
    1bbc:	d139      	bne.n	1c32 <f_open+0xb6>
			if (!dir)	/* Default directory itself */
    1bbe:	2f00      	cmp	r7, #0
    1bc0:	f000 8094 	beq.w	1cec <f_open+0x170>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1bc4:	f015 0f1c 	tst.w	r5, #28
    1bc8:	d148      	bne.n	1c5c <f_open+0xe0>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    1bca:	7afb      	ldrb	r3, [r7, #11]
    1bcc:	f013 0f10 	tst.w	r3, #16
    1bd0:	f040 8099 	bne.w	1d06 <f_open+0x18a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1bd4:	f015 0f02 	tst.w	r5, #2
    1bd8:	d003      	beq.n	1be2 <f_open+0x66>
    1bda:	f013 0f01 	tst.w	r3, #1
    1bde:	f040 8090 	bne.w	1d02 <f_open+0x186>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    1be2:	f015 0f08 	tst.w	r5, #8
    1be6:	d001      	beq.n	1bec <f_open+0x70>
				mode |= FA__WRITTEN;
    1be8:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1bec:	9b06      	ldr	r3, [sp, #24]
    1bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1bf0:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
    1bf2:	6227      	str	r7, [r4, #32]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1bf4:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
    1bf8:	f04f 0800 	mov.w	r8, #0
    1bfc:	f884 8007 	strb.w	r8, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    1c00:	9d06      	ldr	r5, [sp, #24]
    1c02:	4639      	mov	r1, r7
    1c04:	4628      	mov	r0, r5
    1c06:	4b43      	ldr	r3, [pc, #268]	; (1d14 <f_open+0x198>)
    1c08:	4798      	blx	r3
    1c0a:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    1c0c:	7ffa      	ldrb	r2, [r7, #31]
    1c0e:	7fbb      	ldrb	r3, [r7, #30]
    1c10:	041b      	lsls	r3, r3, #16
    1c12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1c16:	7f3a      	ldrb	r2, [r7, #28]
    1c18:	4313      	orrs	r3, r2
    1c1a:	7f7a      	ldrb	r2, [r7, #29]
    1c1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1c20:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
    1c22:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->dsect = 0;
    1c26:	f8c4 8018 	str.w	r8, [r4, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    1c2a:	6025      	str	r5, [r4, #0]
			fp->id = fp->fs->id;
    1c2c:	88eb      	ldrh	r3, [r5, #6]
    1c2e:	80a3      	strh	r3, [r4, #4]
    1c30:	e058      	b.n	1ce4 <f_open+0x168>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1c32:	f015 0f1c 	tst.w	r5, #28
    1c36:	d004      	beq.n	1c42 <f_open+0xc6>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1c38:	2804      	cmp	r0, #4
    1c3a:	d006      	beq.n	1c4a <f_open+0xce>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1c3c:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1c40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		if (res == FR_OK) {
    1c42:	2b00      	cmp	r3, #0
    1c44:	d0d6      	beq.n	1bf4 <f_open+0x78>
    1c46:	461e      	mov	r6, r3
    1c48:	e04c      	b.n	1ce4 <f_open+0x168>
					res = dir_register(&dj);
    1c4a:	a806      	add	r0, sp, #24
    1c4c:	4b32      	ldr	r3, [pc, #200]	; (1d18 <f_open+0x19c>)
    1c4e:	4798      	blx	r3
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1c50:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    1c54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1c56:	b140      	cbz	r0, 1c6a <f_open+0xee>
					res = dir_register(&dj);
    1c58:	4606      	mov	r6, r0
    1c5a:	e043      	b.n	1ce4 <f_open+0x168>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1c5c:	7afb      	ldrb	r3, [r7, #11]
    1c5e:	f013 0f11 	tst.w	r3, #17
    1c62:	d14a      	bne.n	1cfa <f_open+0x17e>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1c64:	f015 0f04 	tst.w	r5, #4
    1c68:	d149      	bne.n	1cfe <f_open+0x182>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1c6a:	f018 0f08 	tst.w	r8, #8
    1c6e:	d0bd      	beq.n	1bec <f_open+0x70>
				dw = GET_FATTIME();
    1c70:	4b2a      	ldr	r3, [pc, #168]	; (1d1c <f_open+0x1a0>)
    1c72:	4798      	blx	r3
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
    1c74:	b2c1      	uxtb	r1, r0
    1c76:	73b9      	strb	r1, [r7, #14]
    1c78:	f3c0 2207 	ubfx	r2, r0, #8, #8
    1c7c:	73fa      	strb	r2, [r7, #15]
    1c7e:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1c82:	743b      	strb	r3, [r7, #16]
    1c84:	0e00      	lsrs	r0, r0, #24
    1c86:	7478      	strb	r0, [r7, #17]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
    1c88:	75b9      	strb	r1, [r7, #22]
    1c8a:	75fa      	strb	r2, [r7, #23]
    1c8c:	763b      	strb	r3, [r7, #24]
    1c8e:	7678      	strb	r0, [r7, #25]
				dir[DIR_Attr] = 0;				/* Reset attribute */
    1c90:	2500      	movs	r5, #0
    1c92:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
    1c94:	773d      	strb	r5, [r7, #28]
    1c96:	777d      	strb	r5, [r7, #29]
    1c98:	77bd      	strb	r5, [r7, #30]
    1c9a:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get cluster chain */
    1c9c:	f8dd 9018 	ldr.w	r9, [sp, #24]
    1ca0:	4639      	mov	r1, r7
    1ca2:	4648      	mov	r0, r9
    1ca4:	4b1b      	ldr	r3, [pc, #108]	; (1d14 <f_open+0x198>)
    1ca6:	4798      	blx	r3
	ST_WORD(dir + DIR_FstClusLO, cl);
    1ca8:	76bd      	strb	r5, [r7, #26]
    1caa:	76fd      	strb	r5, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    1cac:	753d      	strb	r5, [r7, #20]
    1cae:	757d      	strb	r5, [r7, #21]
				dj.fs->wflag = 1;
    1cb0:	2301      	movs	r3, #1
    1cb2:	f889 3004 	strb.w	r3, [r9, #4]
				if (cl) {						/* Remove the cluster chain if exist */
    1cb6:	4605      	mov	r5, r0
    1cb8:	2800      	cmp	r0, #0
    1cba:	d095      	beq.n	1be8 <f_open+0x6c>
					dw = dj.fs->winsect;
    1cbc:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
					res = remove_chain(dj.fs, cl);
    1cc0:	4601      	mov	r1, r0
    1cc2:	4648      	mov	r0, r9
    1cc4:	4b16      	ldr	r3, [pc, #88]	; (1d20 <f_open+0x1a4>)
    1cc6:	4798      	blx	r3
					if (res == FR_OK) {
    1cc8:	b108      	cbz	r0, 1cce <f_open+0x152>
					res = remove_chain(dj.fs, cl);
    1cca:	4606      	mov	r6, r0
    1ccc:	e00a      	b.n	1ce4 <f_open+0x168>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1cce:	9806      	ldr	r0, [sp, #24]
    1cd0:	3d01      	subs	r5, #1
    1cd2:	60c5      	str	r5, [r0, #12]
						res = move_window(dj.fs, dw);
    1cd4:	4651      	mov	r1, sl
    1cd6:	4b13      	ldr	r3, [pc, #76]	; (1d24 <f_open+0x1a8>)
    1cd8:	4798      	blx	r3
		if (res == FR_OK) {
    1cda:	2800      	cmp	r0, #0
    1cdc:	d084      	beq.n	1be8 <f_open+0x6c>
						res = move_window(dj.fs, dw);
    1cde:	4606      	mov	r6, r0
    1ce0:	e000      	b.n	1ce4 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
    1ce2:	2609      	movs	r6, #9
		}
	}

	LEAVE_FF(dj.fs, res);
}
    1ce4:	4630      	mov	r0, r6
    1ce6:	b00e      	add	sp, #56	; 0x38
    1ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1cec:	f015 0f1c 	tst.w	r5, #28
    1cf0:	d101      	bne.n	1cf6 <f_open+0x17a>
				res = FR_INVALID_NAME;
    1cf2:	2306      	movs	r3, #6
    1cf4:	e7a5      	b.n	1c42 <f_open+0xc6>
    1cf6:	2306      	movs	r3, #6
    1cf8:	e7a0      	b.n	1c3c <f_open+0xc0>
					res = FR_DENIED;
    1cfa:	2607      	movs	r6, #7
    1cfc:	e7f2      	b.n	1ce4 <f_open+0x168>
						res = FR_EXIST;
    1cfe:	2608      	movs	r6, #8
    1d00:	e7f0      	b.n	1ce4 <f_open+0x168>
						res = FR_DENIED;
    1d02:	2607      	movs	r6, #7
    1d04:	e7ee      	b.n	1ce4 <f_open+0x168>
					res = FR_NO_FILE;
    1d06:	2604      	movs	r6, #4
    1d08:	e7ec      	b.n	1ce4 <f_open+0x168>
    1d0a:	bf00      	nop
    1d0c:	00000d69 	.word	0x00000d69
    1d10:	00001719 	.word	0x00001719
    1d14:	00000b0b 	.word	0x00000b0b
    1d18:	000019d5 	.word	0x000019d5
    1d1c:	000009b5 	.word	0x000009b5
    1d20:	00001a91 	.word	0x00001a91
    1d24:	00000c5d 	.word	0x00000c5d

00001d28 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    1d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d2c:	b083      	sub	sp, #12
    1d2e:	4605      	mov	r5, r0
    1d30:	4688      	mov	r8, r1
    1d32:	4614      	mov	r4, r2
    1d34:	4699      	mov	r9, r3
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;

	*br = 0;	/* Clear read byte counter */
    1d36:	2300      	movs	r3, #0
    1d38:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp);							/* Check validity */
    1d3c:	4b4f      	ldr	r3, [pc, #316]	; (1e7c <f_read+0x154>)
    1d3e:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1d40:	9001      	str	r0, [sp, #4]
    1d42:	b948      	cbnz	r0, 1d58 <f_read+0x30>
	if (fp->err)								/* Check error */
    1d44:	79eb      	ldrb	r3, [r5, #7]
    1d46:	2b00      	cmp	r3, #0
    1d48:	f040 8096 	bne.w	1e78 <f_read+0x150>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    1d4c:	79ab      	ldrb	r3, [r5, #6]
    1d4e:	f013 0f01 	tst.w	r3, #1
    1d52:	d105      	bne.n	1d60 <f_read+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
    1d54:	2307      	movs	r3, #7
    1d56:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    1d58:	9801      	ldr	r0, [sp, #4]
    1d5a:	b003      	add	sp, #12
    1d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->fsize - fp->fptr;
    1d60:	68ee      	ldr	r6, [r5, #12]
    1d62:	68ab      	ldr	r3, [r5, #8]
    1d64:	1af6      	subs	r6, r6, r3
    1d66:	42a6      	cmp	r6, r4
    1d68:	bf28      	it	cs
    1d6a:	4626      	movcs	r6, r4
	for ( ;  btr;								/* Repeat until all data read */
    1d6c:	2e00      	cmp	r6, #0
    1d6e:	d140      	bne.n	1df2 <f_read+0xca>
    1d70:	e7f2      	b.n	1d58 <f_read+0x30>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    1d72:	6969      	ldr	r1, [r5, #20]
    1d74:	4b42      	ldr	r3, [pc, #264]	; (1e80 <f_read+0x158>)
    1d76:	4798      	blx	r3
    1d78:	e04b      	b.n	1e12 <f_read+0xea>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    1d7a:	2302      	movs	r3, #2
    1d7c:	71eb      	strb	r3, [r5, #7]
    1d7e:	9301      	str	r3, [sp, #4]
    1d80:	e7ea      	b.n	1d58 <f_read+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1d82:	2301      	movs	r3, #1
    1d84:	71eb      	strb	r3, [r5, #7]
    1d86:	9301      	str	r3, [sp, #4]
    1d88:	e7e6      	b.n	1d58 <f_read+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1d8a:	2302      	movs	r3, #2
    1d8c:	71eb      	strb	r3, [r5, #7]
    1d8e:	9301      	str	r3, [sp, #4]
    1d90:	e7e2      	b.n	1d58 <f_read+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    1d92:	2301      	movs	r3, #1
    1d94:	71eb      	strb	r3, [r5, #7]
    1d96:	9301      	str	r3, [sp, #4]
    1d98:	e7de      	b.n	1d58 <f_read+0x30>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    1d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
    1d9e:	3134      	adds	r1, #52	; 0x34
    1da0:	eb08 2040 	add.w	r0, r8, r0, lsl #9
    1da4:	4b37      	ldr	r3, [pc, #220]	; (1e84 <f_read+0x15c>)
    1da6:	4798      	blx	r3
    1da8:	e05f      	b.n	1e6a <f_read+0x142>
			fp->dsect = sect;
    1daa:	61ac      	str	r4, [r5, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1dac:	68ac      	ldr	r4, [r5, #8]
    1dae:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1db2:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
    1db6:	42b4      	cmp	r4, r6
    1db8:	bf28      	it	cs
    1dba:	4634      	movcs	r4, r6
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
    1dbc:	69a9      	ldr	r1, [r5, #24]
    1dbe:	6828      	ldr	r0, [r5, #0]
    1dc0:	4b31      	ldr	r3, [pc, #196]	; (1e88 <f_read+0x160>)
    1dc2:	4798      	blx	r3
    1dc4:	2800      	cmp	r0, #0
    1dc6:	d153      	bne.n	1e70 <f_read+0x148>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    1dc8:	68a9      	ldr	r1, [r5, #8]
    1dca:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1dce:	3134      	adds	r1, #52	; 0x34
    1dd0:	682b      	ldr	r3, [r5, #0]
    1dd2:	4622      	mov	r2, r4
    1dd4:	4419      	add	r1, r3
    1dd6:	4640      	mov	r0, r8
    1dd8:	4b2a      	ldr	r3, [pc, #168]	; (1e84 <f_read+0x15c>)
    1dda:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    1ddc:	44a0      	add	r8, r4
    1dde:	68ab      	ldr	r3, [r5, #8]
    1de0:	4423      	add	r3, r4
    1de2:	60ab      	str	r3, [r5, #8]
    1de4:	f8d9 3000 	ldr.w	r3, [r9]
    1de8:	4423      	add	r3, r4
    1dea:	f8c9 3000 	str.w	r3, [r9]
	for ( ;  btr;								/* Repeat until all data read */
    1dee:	1b36      	subs	r6, r6, r4
    1df0:	d0b2      	beq.n	1d58 <f_read+0x30>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    1df2:	68aa      	ldr	r2, [r5, #8]
    1df4:	f3c2 0308 	ubfx	r3, r2, #0, #9
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d1d7      	bne.n	1dac <f_read+0x84>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1dfc:	6828      	ldr	r0, [r5, #0]
    1dfe:	7883      	ldrb	r3, [r0, #2]
    1e00:	3b01      	subs	r3, #1
    1e02:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
    1e06:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    1e0a:	d108      	bne.n	1e1e <f_read+0xf6>
				if (fp->fptr == 0) {			/* On the top of the file? */
    1e0c:	2a00      	cmp	r2, #0
    1e0e:	d1b0      	bne.n	1d72 <f_read+0x4a>
					clst = fp->sclust;			/* Follow from the origin */
    1e10:	6928      	ldr	r0, [r5, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    1e12:	2801      	cmp	r0, #1
    1e14:	d9b1      	bls.n	1d7a <f_read+0x52>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1e16:	f1b0 3fff 	cmp.w	r0, #4294967295
    1e1a:	d0b2      	beq.n	1d82 <f_read+0x5a>
				fp->clust = clst;				/* Update current cluster */
    1e1c:	6168      	str	r0, [r5, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1e1e:	f8d5 a000 	ldr.w	sl, [r5]
    1e22:	6969      	ldr	r1, [r5, #20]
    1e24:	4650      	mov	r0, sl
    1e26:	4b19      	ldr	r3, [pc, #100]	; (1e8c <f_read+0x164>)
    1e28:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1e2a:	4604      	mov	r4, r0
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d0ac      	beq.n	1d8a <f_read+0x62>
			sect += csect;
    1e30:	443c      	add	r4, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
    1e32:	ea5f 2b56 	movs.w	fp, r6, lsr #9
    1e36:	d0b8      	beq.n	1daa <f_read+0x82>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1e38:	f89a 3002 	ldrb.w	r3, [sl, #2]
    1e3c:	eb07 020b 	add.w	r2, r7, fp
    1e40:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    1e42:	bf88      	it	hi
    1e44:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
    1e48:	fa5f f38b 	uxtb.w	r3, fp
    1e4c:	4622      	mov	r2, r4
    1e4e:	4641      	mov	r1, r8
    1e50:	f89a 0001 	ldrb.w	r0, [sl, #1]
    1e54:	4f0e      	ldr	r7, [pc, #56]	; (1e90 <f_read+0x168>)
    1e56:	47b8      	blx	r7
    1e58:	2800      	cmp	r0, #0
    1e5a:	d19a      	bne.n	1d92 <f_read+0x6a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    1e5c:	6829      	ldr	r1, [r5, #0]
    1e5e:	790b      	ldrb	r3, [r1, #4]
    1e60:	b11b      	cbz	r3, 1e6a <f_read+0x142>
    1e62:	6b08      	ldr	r0, [r1, #48]	; 0x30
    1e64:	1b00      	subs	r0, r0, r4
    1e66:	4583      	cmp	fp, r0
    1e68:	d897      	bhi.n	1d9a <f_read+0x72>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    1e6a:	ea4f 244b 	mov.w	r4, fp, lsl #9
				continue;
    1e6e:	e7b5      	b.n	1ddc <f_read+0xb4>
			ABORT(fp->fs, FR_DISK_ERR);
    1e70:	2301      	movs	r3, #1
    1e72:	71eb      	strb	r3, [r5, #7]
    1e74:	9301      	str	r3, [sp, #4]
    1e76:	e76f      	b.n	1d58 <f_read+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    1e78:	9301      	str	r3, [sp, #4]
    1e7a:	e76d      	b.n	1d58 <f_read+0x30>
    1e7c:	00000d2d 	.word	0x00000d2d
    1e80:	00001205 	.word	0x00001205
    1e84:	00000ae9 	.word	0x00000ae9
    1e88:	00000c5d 	.word	0x00000c5d
    1e8c:	000011ed 	.word	0x000011ed
    1e90:	00000405 	.word	0x00000405

00001e94 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e98:	b083      	sub	sp, #12
    1e9a:	4604      	mov	r4, r0
    1e9c:	4689      	mov	r9, r1
    1e9e:	4616      	mov	r6, r2
    1ea0:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;

	*bw = 0;	/* Clear write byte counter */
    1ea2:	2300      	movs	r3, #0
    1ea4:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp);						/* Check validity */
    1ea8:	4b69      	ldr	r3, [pc, #420]	; (2050 <f_write+0x1bc>)
    1eaa:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1eac:	9001      	str	r0, [sp, #4]
    1eae:	b948      	cbnz	r0, 1ec4 <f_write+0x30>
	if (fp->err)							/* Check error */
    1eb0:	79e3      	ldrb	r3, [r4, #7]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	f040 80c9 	bne.w	204a <f_write+0x1b6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1eb8:	79a3      	ldrb	r3, [r4, #6]
    1eba:	f013 0f02 	tst.w	r3, #2
    1ebe:	d105      	bne.n	1ecc <f_write+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
    1ec0:	2307      	movs	r3, #7
    1ec2:	9301      	str	r3, [sp, #4]

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    1ec4:	9801      	ldr	r0, [sp, #4]
    1ec6:	b003      	add	sp, #12
    1ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1ecc:	68a3      	ldr	r3, [r4, #8]
    1ece:	42f3      	cmn	r3, r6
    1ed0:	d20d      	bcs.n	1eee <f_write+0x5a>
	for ( ;  btw;							/* Repeat until all data written */
    1ed2:	2e00      	cmp	r6, #0
    1ed4:	d163      	bne.n	1f9e <f_write+0x10a>
    1ed6:	e00a      	b.n	1eee <f_write+0x5a>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1ed8:	2100      	movs	r1, #0
    1eda:	4b5e      	ldr	r3, [pc, #376]	; (2054 <f_write+0x1c0>)
    1edc:	4798      	blx	r3
    1ede:	4603      	mov	r3, r0
    1ee0:	e003      	b.n	1eea <f_write+0x56>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1ee2:	6961      	ldr	r1, [r4, #20]
    1ee4:	4b5b      	ldr	r3, [pc, #364]	; (2054 <f_write+0x1c0>)
    1ee6:	4798      	blx	r3
    1ee8:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1eea:	2b00      	cmp	r3, #0
    1eec:	d169      	bne.n	1fc2 <f_write+0x12e>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    1eee:	68a3      	ldr	r3, [r4, #8]
    1ef0:	68e2      	ldr	r2, [r4, #12]
    1ef2:	4293      	cmp	r3, r2
    1ef4:	bf88      	it	hi
    1ef6:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    1ef8:	79a3      	ldrb	r3, [r4, #6]
    1efa:	f043 0320 	orr.w	r3, r3, #32
    1efe:	71a3      	strb	r3, [r4, #6]
	LEAVE_FF(fp->fs, FR_OK);
    1f00:	e7e0      	b.n	1ec4 <f_write+0x30>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1f02:	2302      	movs	r3, #2
    1f04:	71e3      	strb	r3, [r4, #7]
    1f06:	9301      	str	r3, [sp, #4]
    1f08:	e7dc      	b.n	1ec4 <f_write+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1f0a:	2301      	movs	r3, #1
    1f0c:	71e3      	strb	r3, [r4, #7]
    1f0e:	9301      	str	r3, [sp, #4]
    1f10:	e7d8      	b.n	1ec4 <f_write+0x30>
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    1f12:	4b51      	ldr	r3, [pc, #324]	; (2058 <f_write+0x1c4>)
    1f14:	4798      	blx	r3
    1f16:	2800      	cmp	r0, #0
    1f18:	d061      	beq.n	1fde <f_write+0x14a>
				ABORT(fp->fs, FR_DISK_ERR);
    1f1a:	2301      	movs	r3, #1
    1f1c:	71e3      	strb	r3, [r4, #7]
    1f1e:	9301      	str	r3, [sp, #4]
    1f20:	e7d0      	b.n	1ec4 <f_write+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1f22:	2302      	movs	r3, #2
    1f24:	71e3      	strb	r3, [r4, #7]
    1f26:	9301      	str	r3, [sp, #4]
    1f28:	e7cc      	b.n	1ec4 <f_write+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    1f2a:	2301      	movs	r3, #1
    1f2c:	71e3      	strb	r3, [r4, #7]
    1f2e:	9301      	str	r3, [sp, #4]
    1f30:	e7c8      	b.n	1ec4 <f_write+0x30>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    1f32:	f44f 7200 	mov.w	r2, #512	; 0x200
    1f36:	eb09 2141 	add.w	r1, r9, r1, lsl #9
    1f3a:	3034      	adds	r0, #52	; 0x34
    1f3c:	4b47      	ldr	r3, [pc, #284]	; (205c <f_write+0x1c8>)
    1f3e:	4798      	blx	r3
					fp->fs->wflag = 0;
    1f40:	6823      	ldr	r3, [r4, #0]
    1f42:	2200      	movs	r2, #0
    1f44:	711a      	strb	r2, [r3, #4]
    1f46:	e06e      	b.n	2026 <f_write+0x192>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    1f48:	68a2      	ldr	r2, [r4, #8]
    1f4a:	68e3      	ldr	r3, [r4, #12]
    1f4c:	429a      	cmp	r2, r3
    1f4e:	d26d      	bcs.n	202c <f_write+0x198>
			fp->dsect = sect;
    1f50:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    1f52:	68a5      	ldr	r5, [r4, #8]
    1f54:	f3c5 0508 	ubfx	r5, r5, #0, #9
    1f58:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
    1f5c:	42b5      	cmp	r5, r6
    1f5e:	bf28      	it	cs
    1f60:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    1f62:	69a1      	ldr	r1, [r4, #24]
    1f64:	6820      	ldr	r0, [r4, #0]
    1f66:	4b3e      	ldr	r3, [pc, #248]	; (2060 <f_write+0x1cc>)
    1f68:	4798      	blx	r3
    1f6a:	2800      	cmp	r0, #0
    1f6c:	d169      	bne.n	2042 <f_write+0x1ae>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    1f6e:	68a0      	ldr	r0, [r4, #8]
    1f70:	f3c0 0008 	ubfx	r0, r0, #0, #9
    1f74:	3034      	adds	r0, #52	; 0x34
    1f76:	6823      	ldr	r3, [r4, #0]
    1f78:	462a      	mov	r2, r5
    1f7a:	4649      	mov	r1, r9
    1f7c:	4418      	add	r0, r3
    1f7e:	4b37      	ldr	r3, [pc, #220]	; (205c <f_write+0x1c8>)
    1f80:	4798      	blx	r3
		fp->fs->wflag = 1;
    1f82:	6823      	ldr	r3, [r4, #0]
    1f84:	2201      	movs	r2, #1
    1f86:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    1f88:	44a9      	add	r9, r5
    1f8a:	68a3      	ldr	r3, [r4, #8]
    1f8c:	442b      	add	r3, r5
    1f8e:	60a3      	str	r3, [r4, #8]
    1f90:	f8d8 3000 	ldr.w	r3, [r8]
    1f94:	442b      	add	r3, r5
    1f96:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
    1f9a:	1b76      	subs	r6, r6, r5
    1f9c:	d0a7      	beq.n	1eee <f_write+0x5a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    1f9e:	68a2      	ldr	r2, [r4, #8]
    1fa0:	f3c2 0308 	ubfx	r3, r2, #0, #9
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d1d4      	bne.n	1f52 <f_write+0xbe>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1fa8:	6820      	ldr	r0, [r4, #0]
    1faa:	7883      	ldrb	r3, [r0, #2]
    1fac:	3b01      	subs	r3, #1
    1fae:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
    1fb2:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    1fb6:	d10d      	bne.n	1fd4 <f_write+0x140>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1fb8:	2a00      	cmp	r2, #0
    1fba:	d192      	bne.n	1ee2 <f_write+0x4e>
					clst = fp->sclust;		/* Follow from the origin */
    1fbc:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d08a      	beq.n	1ed8 <f_write+0x44>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1fc2:	2b01      	cmp	r3, #1
    1fc4:	d09d      	beq.n	1f02 <f_write+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    1fca:	d09e      	beq.n	1f0a <f_write+0x76>
				fp->clust = clst;			/* Update current cluster */
    1fcc:	6163      	str	r3, [r4, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    1fce:	6922      	ldr	r2, [r4, #16]
    1fd0:	b902      	cbnz	r2, 1fd4 <f_write+0x140>
    1fd2:	6123      	str	r3, [r4, #16]
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    1fd4:	6820      	ldr	r0, [r4, #0]
    1fd6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    1fd8:	69a3      	ldr	r3, [r4, #24]
    1fda:	429a      	cmp	r2, r3
    1fdc:	d099      	beq.n	1f12 <f_write+0x7e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1fde:	f8d4 a000 	ldr.w	sl, [r4]
    1fe2:	6961      	ldr	r1, [r4, #20]
    1fe4:	4650      	mov	r0, sl
    1fe6:	4b1f      	ldr	r3, [pc, #124]	; (2064 <f_write+0x1d0>)
    1fe8:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1fea:	4605      	mov	r5, r0
    1fec:	2800      	cmp	r0, #0
    1fee:	d098      	beq.n	1f22 <f_write+0x8e>
			sect += csect;
    1ff0:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
    1ff2:	ea5f 2b56 	movs.w	fp, r6, lsr #9
    1ff6:	d0a7      	beq.n	1f48 <f_write+0xb4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1ff8:	f89a 3002 	ldrb.w	r3, [sl, #2]
    1ffc:	eb07 020b 	add.w	r2, r7, fp
    2000:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    2002:	bf88      	it	hi
    2004:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    2008:	fa5f f38b 	uxtb.w	r3, fp
    200c:	462a      	mov	r2, r5
    200e:	4649      	mov	r1, r9
    2010:	f89a 0001 	ldrb.w	r0, [sl, #1]
    2014:	4f14      	ldr	r7, [pc, #80]	; (2068 <f_write+0x1d4>)
    2016:	47b8      	blx	r7
    2018:	2800      	cmp	r0, #0
    201a:	d186      	bne.n	1f2a <f_write+0x96>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    201c:	6820      	ldr	r0, [r4, #0]
    201e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2020:	1b49      	subs	r1, r1, r5
    2022:	458b      	cmp	fp, r1
    2024:	d885      	bhi.n	1f32 <f_write+0x9e>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2026:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
    202a:	e7ad      	b.n	1f88 <f_write+0xf4>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    202c:	4650      	mov	r0, sl
    202e:	4b0a      	ldr	r3, [pc, #40]	; (2058 <f_write+0x1c4>)
    2030:	4798      	blx	r3
    2032:	b910      	cbnz	r0, 203a <f_write+0x1a6>
				fp->fs->winsect = sect;
    2034:	6823      	ldr	r3, [r4, #0]
    2036:	631d      	str	r5, [r3, #48]	; 0x30
    2038:	e78a      	b.n	1f50 <f_write+0xbc>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    203a:	2301      	movs	r3, #1
    203c:	71e3      	strb	r3, [r4, #7]
    203e:	9301      	str	r3, [sp, #4]
    2040:	e740      	b.n	1ec4 <f_write+0x30>
			ABORT(fp->fs, FR_DISK_ERR);
    2042:	2301      	movs	r3, #1
    2044:	71e3      	strb	r3, [r4, #7]
    2046:	9301      	str	r3, [sp, #4]
    2048:	e73c      	b.n	1ec4 <f_write+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    204a:	9301      	str	r3, [sp, #4]
    204c:	e73a      	b.n	1ec4 <f_write+0x30>
    204e:	bf00      	nop
    2050:	00000d2d 	.word	0x00000d2d
    2054:	0000151d 	.word	0x0000151d
    2058:	00000bed 	.word	0x00000bed
    205c:	00000ae9 	.word	0x00000ae9
    2060:	00000c5d 	.word	0x00000c5d
    2064:	000011ed 	.word	0x000011ed
    2068:	00000485 	.word	0x00000485

0000206c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    206c:	b538      	push	{r3, r4, r5, lr}
    206e:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;

	res = validate(fp);					/* Check validity of the object */
    2070:	4b20      	ldr	r3, [pc, #128]	; (20f4 <f_sync+0x88>)
    2072:	4798      	blx	r3
	if (res == FR_OK) {
    2074:	4603      	mov	r3, r0
    2076:	b918      	cbnz	r0, 2080 <f_sync+0x14>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    2078:	79a2      	ldrb	r2, [r4, #6]
    207a:	f012 0f20 	tst.w	r2, #32
    207e:	d101      	bne.n	2084 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2080:	4618      	mov	r0, r3
    2082:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
    2084:	69e1      	ldr	r1, [r4, #28]
    2086:	6820      	ldr	r0, [r4, #0]
    2088:	4b1b      	ldr	r3, [pc, #108]	; (20f8 <f_sync+0x8c>)
    208a:	4798      	blx	r3
			if (res == FR_OK) {
    208c:	4603      	mov	r3, r0
    208e:	2800      	cmp	r0, #0
    2090:	d1f6      	bne.n	2080 <f_sync+0x14>
				dir = fp->dir_ptr;
    2092:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2094:	7aeb      	ldrb	r3, [r5, #11]
    2096:	f043 0320 	orr.w	r3, r3, #32
    209a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    209c:	68e3      	ldr	r3, [r4, #12]
    209e:	772b      	strb	r3, [r5, #28]
    20a0:	89a3      	ldrh	r3, [r4, #12]
    20a2:	0a1b      	lsrs	r3, r3, #8
    20a4:	776b      	strb	r3, [r5, #29]
    20a6:	89e3      	ldrh	r3, [r4, #14]
    20a8:	77ab      	strb	r3, [r5, #30]
    20aa:	7be3      	ldrb	r3, [r4, #15]
    20ac:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
    20ae:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusLO, cl);
    20b0:	76ab      	strb	r3, [r5, #26]
    20b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    20b6:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    20b8:	0c1b      	lsrs	r3, r3, #16
    20ba:	752b      	strb	r3, [r5, #20]
    20bc:	0a1b      	lsrs	r3, r3, #8
    20be:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update modified time */
    20c0:	4b0e      	ldr	r3, [pc, #56]	; (20fc <f_sync+0x90>)
    20c2:	4798      	blx	r3
				ST_DWORD(dir + DIR_WrtTime, tm);
    20c4:	75a8      	strb	r0, [r5, #22]
    20c6:	f3c0 2307 	ubfx	r3, r0, #8, #8
    20ca:	75eb      	strb	r3, [r5, #23]
    20cc:	0c03      	lsrs	r3, r0, #16
    20ce:	762b      	strb	r3, [r5, #24]
    20d0:	0e00      	lsrs	r0, r0, #24
    20d2:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
    20d4:	2300      	movs	r3, #0
    20d6:	74ab      	strb	r3, [r5, #18]
    20d8:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
    20da:	79a3      	ldrb	r3, [r4, #6]
    20dc:	f023 0320 	bic.w	r3, r3, #32
    20e0:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    20e2:	6823      	ldr	r3, [r4, #0]
    20e4:	2201      	movs	r2, #1
    20e6:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
    20e8:	6820      	ldr	r0, [r4, #0]
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <f_sync+0x94>)
    20ec:	4798      	blx	r3
    20ee:	4603      	mov	r3, r0
    20f0:	e7c6      	b.n	2080 <f_sync+0x14>
    20f2:	bf00      	nop
    20f4:	00000d2d 	.word	0x00000d2d
    20f8:	00000c5d 	.word	0x00000c5d
    20fc:	000009b5 	.word	0x000009b5
    2100:	00001121 	.word	0x00001121

00002104 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2104:	b510      	push	{r4, lr}
    2106:	4604      	mov	r4, r0
	FRESULT res;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    2108:	4b07      	ldr	r3, [pc, #28]	; (2128 <f_close+0x24>)
    210a:	4798      	blx	r3
	if (res == FR_OK)
    210c:	4603      	mov	r3, r0
    210e:	b108      	cbz	r0, 2114 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2110:	4618      	mov	r0, r3
    2112:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
    2114:	4620      	mov	r0, r4
    2116:	4b05      	ldr	r3, [pc, #20]	; (212c <f_close+0x28>)
    2118:	4798      	blx	r3
		if (res == FR_OK) {
    211a:	4603      	mov	r3, r0
    211c:	2800      	cmp	r0, #0
    211e:	d1f7      	bne.n	2110 <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
    2120:	2200      	movs	r2, #0
    2122:	6022      	str	r2, [r4, #0]
    2124:	e7f4      	b.n	2110 <f_close+0xc>
    2126:	bf00      	nop
    2128:	0000206d 	.word	0x0000206d
    212c:	00000d2d 	.word	0x00000d2d

00002130 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2134:	4604      	mov	r4, r0
    2136:	460d      	mov	r5, r1
	DWORD clst, bcs, nsect, ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(fp);					/* Check validity of the object */
    2138:	4b47      	ldr	r3, [pc, #284]	; (2258 <f_lseek+0x128>)
    213a:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    213c:	4607      	mov	r7, r0
    213e:	2800      	cmp	r0, #0
    2140:	f040 8086 	bne.w	2250 <f_lseek+0x120>
	if (fp->err)						/* Check error */
    2144:	79e3      	ldrb	r3, [r4, #7]
    2146:	2b00      	cmp	r3, #0
    2148:	f040 8081 	bne.w	224e <f_lseek+0x11e>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    214c:	68e3      	ldr	r3, [r4, #12]
    214e:	42ab      	cmp	r3, r5
    2150:	d205      	bcs.n	215e <f_lseek+0x2e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2152:	79a2      	ldrb	r2, [r4, #6]
    2154:	f002 0202 	and.w	r2, r2, #2
#endif
			) ofs = fp->fsize;
    2158:	2a00      	cmp	r2, #0
    215a:	bf08      	it	eq
    215c:	461d      	moveq	r5, r3

		ifptr = fp->fptr;
    215e:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
    2160:	2200      	movs	r2, #0
    2162:	60a2      	str	r2, [r4, #8]
		if (ofs) {
    2164:	2d00      	cmp	r5, #0
    2166:	d073      	beq.n	2250 <f_lseek+0x120>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2168:	6820      	ldr	r0, [r4, #0]
    216a:	7886      	ldrb	r6, [r0, #2]
    216c:	0276      	lsls	r6, r6, #9
			if (ifptr > 0 &&
    216e:	b16b      	cbz	r3, 218c <f_lseek+0x5c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2170:	3b01      	subs	r3, #1
    2172:	1e6a      	subs	r2, r5, #1
    2174:	fbb2 f2f6 	udiv	r2, r2, r6
    2178:	fbb3 f1f6 	udiv	r1, r3, r6
			if (ifptr > 0 &&
    217c:	428a      	cmp	r2, r1
    217e:	d305      	bcc.n	218c <f_lseek+0x5c>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2180:	4272      	negs	r2, r6
    2182:	4013      	ands	r3, r2
    2184:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    2186:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
    2188:	6961      	ldr	r1, [r4, #20]
    218a:	e002      	b.n	2192 <f_lseek+0x62>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    218c:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    218e:	b149      	cbz	r1, 21a4 <f_lseek+0x74>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    2190:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
    2192:	2900      	cmp	r1, #0
    2194:	d04a      	beq.n	222c <f_lseek+0xfc>
				while (ofs > bcs) {						/* Cluster following loop */
    2196:	42b5      	cmp	r5, r6
    2198:	d931      	bls.n	21fe <f_lseek+0xce>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    219a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 225c <f_lseek+0x12c>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    219e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2264 <f_lseek+0x134>
    21a2:	e022      	b.n	21ea <f_lseek+0xba>
					clst = create_chain(fp->fs, 0);
    21a4:	4b2d      	ldr	r3, [pc, #180]	; (225c <f_lseek+0x12c>)
    21a6:	4798      	blx	r3
    21a8:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    21aa:	2801      	cmp	r0, #1
    21ac:	d004      	beq.n	21b8 <f_lseek+0x88>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    21ae:	f1b0 3fff 	cmp.w	r0, #4294967295
    21b2:	d004      	beq.n	21be <f_lseek+0x8e>
					fp->sclust = clst;
    21b4:	6120      	str	r0, [r4, #16]
    21b6:	e7eb      	b.n	2190 <f_lseek+0x60>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    21b8:	2702      	movs	r7, #2
    21ba:	71e7      	strb	r7, [r4, #7]
    21bc:	e048      	b.n	2250 <f_lseek+0x120>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    21be:	2701      	movs	r7, #1
    21c0:	71e7      	strb	r7, [r4, #7]
    21c2:	e045      	b.n	2250 <f_lseek+0x120>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    21c4:	6820      	ldr	r0, [r4, #0]
    21c6:	47c0      	blx	r8
    21c8:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    21ca:	f1b1 3fff 	cmp.w	r1, #4294967295
    21ce:	d023      	beq.n	2218 <f_lseek+0xe8>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    21d0:	2901      	cmp	r1, #1
    21d2:	d924      	bls.n	221e <f_lseek+0xee>
    21d4:	6823      	ldr	r3, [r4, #0]
    21d6:	699b      	ldr	r3, [r3, #24]
    21d8:	4299      	cmp	r1, r3
    21da:	d220      	bcs.n	221e <f_lseek+0xee>
					fp->clust = clst;
    21dc:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
    21de:	68a3      	ldr	r3, [r4, #8]
    21e0:	4433      	add	r3, r6
    21e2:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    21e4:	1bad      	subs	r5, r5, r6
				while (ofs > bcs) {						/* Cluster following loop */
    21e6:	42ae      	cmp	r6, r5
    21e8:	d209      	bcs.n	21fe <f_lseek+0xce>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    21ea:	79a3      	ldrb	r3, [r4, #6]
    21ec:	f013 0f02 	tst.w	r3, #2
    21f0:	d0e8      	beq.n	21c4 <f_lseek+0x94>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    21f2:	6820      	ldr	r0, [r4, #0]
    21f4:	47c8      	blx	r9
						if (clst == 0) {				/* When disk gets full, clip file size */
    21f6:	4601      	mov	r1, r0
    21f8:	2800      	cmp	r0, #0
    21fa:	d1e6      	bne.n	21ca <f_lseek+0x9a>
							ofs = bcs; break;
    21fc:	4635      	mov	r5, r6
				}
				fp->fptr += ofs;
    21fe:	68a3      	ldr	r3, [r4, #8]
    2200:	442b      	add	r3, r5
    2202:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    2204:	f3c5 0308 	ubfx	r3, r5, #0, #9
    2208:	b17b      	cbz	r3, 222a <f_lseek+0xfa>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    220a:	6820      	ldr	r0, [r4, #0]
    220c:	4b14      	ldr	r3, [pc, #80]	; (2260 <f_lseek+0x130>)
    220e:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2210:	b940      	cbnz	r0, 2224 <f_lseek+0xf4>
    2212:	2702      	movs	r7, #2
    2214:	71e7      	strb	r7, [r4, #7]
    2216:	e01b      	b.n	2250 <f_lseek+0x120>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2218:	2701      	movs	r7, #1
    221a:	71e7      	strb	r7, [r4, #7]
    221c:	e018      	b.n	2250 <f_lseek+0x120>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    221e:	2702      	movs	r7, #2
    2220:	71e7      	strb	r7, [r4, #7]
    2222:	e015      	b.n	2250 <f_lseek+0x120>
					nsect += ofs / SS(fp->fs);
    2224:	eb00 2155 	add.w	r1, r0, r5, lsr #9
    2228:	e000      	b.n	222c <f_lseek+0xfc>
		fp->fptr = nsect = 0;
    222a:	2100      	movs	r1, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    222c:	68a3      	ldr	r3, [r4, #8]
    222e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2232:	b11a      	cbz	r2, 223c <f_lseek+0x10c>
    2234:	69a2      	ldr	r2, [r4, #24]
    2236:	4291      	cmp	r1, r2
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2238:	bf18      	it	ne
    223a:	61a1      	strne	r1, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    223c:	68e2      	ldr	r2, [r4, #12]
    223e:	4293      	cmp	r3, r2
    2240:	d906      	bls.n	2250 <f_lseek+0x120>
			fp->fsize = fp->fptr;
    2242:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    2244:	79a3      	ldrb	r3, [r4, #6]
    2246:	f043 0320 	orr.w	r3, r3, #32
    224a:	71a3      	strb	r3, [r4, #6]
    224c:	e000      	b.n	2250 <f_lseek+0x120>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    224e:	461f      	mov	r7, r3
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2250:	4638      	mov	r0, r7
    2252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2256:	bf00      	nop
    2258:	00000d2d 	.word	0x00000d2d
    225c:	0000151d 	.word	0x0000151d
    2260:	000011ed 	.word	0x000011ed
    2264:	00001205 	.word	0x00001205

00002268 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    2268:	b510      	push	{r4, lr}
    226a:	b086      	sub	sp, #24
    226c:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;

	if (!dp) return FR_INVALID_OBJECT;
    226e:	2800      	cmp	r0, #0
    2270:	d02c      	beq.n	22cc <f_opendir+0x64>
    2272:	4604      	mov	r4, r0

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
    2274:	2200      	movs	r2, #0
    2276:	a901      	add	r1, sp, #4
    2278:	a805      	add	r0, sp, #20
    227a:	4b1a      	ldr	r3, [pc, #104]	; (22e4 <f_opendir+0x7c>)
    227c:	4798      	blx	r3
	if (res == FR_OK) {
    227e:	4603      	mov	r3, r0
    2280:	b110      	cbz	r0, 2288 <f_opendir+0x20>
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    2282:	2200      	movs	r2, #0
    2284:	6022      	str	r2, [r4, #0]
    2286:	e022      	b.n	22ce <f_opendir+0x66>
		dp->fs = fs;
    2288:	9b05      	ldr	r3, [sp, #20]
    228a:	6023      	str	r3, [r4, #0]
		INIT_BUF(*dp);
    228c:	ab02      	add	r3, sp, #8
    228e:	61a3      	str	r3, [r4, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
    2290:	9901      	ldr	r1, [sp, #4]
    2292:	4620      	mov	r0, r4
    2294:	4b14      	ldr	r3, [pc, #80]	; (22e8 <f_opendir+0x80>)
    2296:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
    2298:	4603      	mov	r3, r0
    229a:	b9e8      	cbnz	r0, 22d8 <f_opendir+0x70>
			if (dp->dir) {						/* It is not the origin directory itself */
    229c:	6961      	ldr	r1, [r4, #20]
    229e:	b139      	cbz	r1, 22b0 <f_opendir+0x48>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
    22a0:	7acb      	ldrb	r3, [r1, #11]
    22a2:	f013 0f10 	tst.w	r3, #16
    22a6:	d00f      	beq.n	22c8 <f_opendir+0x60>
					dp->sclust = ld_clust(fs, dp->dir);
    22a8:	9805      	ldr	r0, [sp, #20]
    22aa:	4b10      	ldr	r3, [pc, #64]	; (22ec <f_opendir+0x84>)
    22ac:	4798      	blx	r3
    22ae:	60a0      	str	r0, [r4, #8]
				dp->id = fs->id;
    22b0:	9b05      	ldr	r3, [sp, #20]
    22b2:	88db      	ldrh	r3, [r3, #6]
    22b4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    22b6:	2100      	movs	r1, #0
    22b8:	4620      	mov	r0, r4
    22ba:	4b0d      	ldr	r3, [pc, #52]	; (22f0 <f_opendir+0x88>)
    22bc:	4798      	blx	r3
    22be:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    22c0:	2804      	cmp	r0, #4
    22c2:	d007      	beq.n	22d4 <f_opendir+0x6c>
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    22c4:	b11b      	cbz	r3, 22ce <f_opendir+0x66>
    22c6:	e7dc      	b.n	2282 <f_opendir+0x1a>
					res = FR_NO_PATH;
    22c8:	2305      	movs	r3, #5
    22ca:	e7da      	b.n	2282 <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
    22cc:	2309      	movs	r3, #9

	LEAVE_FF(fs, res);
}
    22ce:	4618      	mov	r0, r3
    22d0:	b006      	add	sp, #24
    22d2:	bd10      	pop	{r4, pc}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    22d4:	2305      	movs	r3, #5
    22d6:	e7d4      	b.n	2282 <f_opendir+0x1a>
    22d8:	2804      	cmp	r0, #4
    22da:	bf14      	ite	ne
    22dc:	4603      	movne	r3, r0
    22de:	2305      	moveq	r3, #5
    22e0:	e7cf      	b.n	2282 <f_opendir+0x1a>
    22e2:	bf00      	nop
    22e4:	00000d69 	.word	0x00000d69
    22e8:	00001719 	.word	0x00001719
    22ec:	00000b0b 	.word	0x00000b0b
    22f0:	000012e9 	.word	0x000012e9

000022f4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    22f4:	b570      	push	{r4, r5, r6, lr}
    22f6:	b084      	sub	sp, #16
    22f8:	4604      	mov	r4, r0
    22fa:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;

	res = validate(dp);						/* Check validity of the object */
    22fc:	4b14      	ldr	r3, [pc, #80]	; (2350 <f_readdir+0x5c>)
    22fe:	4798      	blx	r3
	if (res == FR_OK) {
    2300:	4605      	mov	r5, r0
    2302:	b950      	cbnz	r0, 231a <f_readdir+0x26>
		if (!fno) {
    2304:	b166      	cbz	r6, 2320 <f_readdir+0x2c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dp);
    2306:	ab01      	add	r3, sp, #4
    2308:	61a3      	str	r3, [r4, #24]
			res = dir_read(dp, 0);			/* Read an item */
    230a:	2100      	movs	r1, #0
    230c:	4620      	mov	r0, r4
    230e:	4b11      	ldr	r3, [pc, #68]	; (2354 <f_readdir+0x60>)
    2310:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of directory */
    2312:	2804      	cmp	r0, #4
    2314:	d00a      	beq.n	232c <f_readdir+0x38>
				dp->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2316:	b158      	cbz	r0, 2330 <f_readdir+0x3c>
			res = dir_read(dp, 0);			/* Read an item */
    2318:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
    231a:	4628      	mov	r0, r5
    231c:	b004      	add	sp, #16
    231e:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    2320:	2100      	movs	r1, #0
    2322:	4620      	mov	r0, r4
    2324:	4b0c      	ldr	r3, [pc, #48]	; (2358 <f_readdir+0x64>)
    2326:	4798      	blx	r3
    2328:	4605      	mov	r5, r0
    232a:	e7f6      	b.n	231a <f_readdir+0x26>
				dp->sect = 0;
    232c:	2300      	movs	r3, #0
    232e:	6123      	str	r3, [r4, #16]
				get_fileinfo(dp, fno);		/* Get the object information */
    2330:	4631      	mov	r1, r6
    2332:	4620      	mov	r0, r4
    2334:	4b09      	ldr	r3, [pc, #36]	; (235c <f_readdir+0x68>)
    2336:	4798      	blx	r3
				res = dir_next(dp, 0);		/* Increment index for next */
    2338:	2100      	movs	r1, #0
    233a:	4620      	mov	r0, r4
    233c:	4b08      	ldr	r3, [pc, #32]	; (2360 <f_readdir+0x6c>)
    233e:	4798      	blx	r3
				if (res == FR_NO_FILE) {
    2340:	2804      	cmp	r0, #4
    2342:	d001      	beq.n	2348 <f_readdir+0x54>
				res = dir_next(dp, 0);		/* Increment index for next */
    2344:	4605      	mov	r5, r0
    2346:	e7e8      	b.n	231a <f_readdir+0x26>
					dp->sect = 0;
    2348:	2300      	movs	r3, #0
    234a:	6123      	str	r3, [r4, #16]
    234c:	e7e5      	b.n	231a <f_readdir+0x26>
    234e:	bf00      	nop
    2350:	00000d2d 	.word	0x00000d2d
    2354:	00001a21 	.word	0x00001a21
    2358:	000012e9 	.word	0x000012e9
    235c:	00000b2b 	.word	0x00000b2b
    2360:	000015e9 	.word	0x000015e9

00002364 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    2364:	b570      	push	{r4, r5, r6, lr}
    2366:	b096      	sub	sp, #88	; 0x58
    2368:	a916      	add	r1, sp, #88	; 0x58
    236a:	f841 0d54 	str.w	r0, [r1, #-84]!
	BYTE *dir;
	DWORD dclst = 0;
	DEFINE_NAMEBUF;

	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
    236e:	2201      	movs	r2, #1
    2370:	a80e      	add	r0, sp, #56	; 0x38
    2372:	4b2e      	ldr	r3, [pc, #184]	; (242c <f_unlink+0xc8>)
    2374:	4798      	blx	r3
	if (res == FR_OK) {
    2376:	4603      	mov	r3, r0
    2378:	b110      	cbz	r0, 2380 <f_unlink+0x1c>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    237a:	4618      	mov	r0, r3
    237c:	b016      	add	sp, #88	; 0x58
    237e:	bd70      	pop	{r4, r5, r6, pc}
		INIT_BUF(dj);
    2380:	ab03      	add	r3, sp, #12
    2382:	9314      	str	r3, [sp, #80]	; 0x50
		res = follow_path(&dj, path);		/* Follow the file path */
    2384:	9901      	ldr	r1, [sp, #4]
    2386:	a80e      	add	r0, sp, #56	; 0x38
    2388:	4b29      	ldr	r3, [pc, #164]	; (2430 <f_unlink+0xcc>)
    238a:	4798      	blx	r3
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
    238c:	4603      	mov	r3, r0
    238e:	2800      	cmp	r0, #0
    2390:	d1f3      	bne.n	237a <f_unlink+0x16>
    2392:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2394:	7adb      	ldrb	r3, [r3, #11]
    2396:	f013 0f20 	tst.w	r3, #32
    239a:	d13c      	bne.n	2416 <f_unlink+0xb2>
			dir = dj.dir;
    239c:	9913      	ldr	r1, [sp, #76]	; 0x4c
			if (!dir) {
    239e:	2900      	cmp	r1, #0
    23a0:	d041      	beq.n	2426 <f_unlink+0xc2>
				if (dir[DIR_Attr] & AM_RDO)
    23a2:	7acc      	ldrb	r4, [r1, #11]
    23a4:	f014 0f01 	tst.w	r4, #1
    23a8:	d13b      	bne.n	2422 <f_unlink+0xbe>
				dclst = ld_clust(dj.fs, dir);
    23aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    23ac:	4628      	mov	r0, r5
    23ae:	4b21      	ldr	r3, [pc, #132]	; (2434 <f_unlink+0xd0>)
    23b0:	4798      	blx	r3
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
    23b2:	4606      	mov	r6, r0
    23b4:	b958      	cbnz	r0, 23ce <f_unlink+0x6a>
				res = dir_remove(&dj);		/* Remove the directory entry */
    23b6:	a80e      	add	r0, sp, #56	; 0x38
    23b8:	4b1f      	ldr	r3, [pc, #124]	; (2438 <f_unlink+0xd4>)
    23ba:	4798      	blx	r3
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
    23bc:	4603      	mov	r3, r0
    23be:	2800      	cmp	r0, #0
    23c0:	d1db      	bne.n	237a <f_unlink+0x16>
    23c2:	bb06      	cbnz	r6, 2406 <f_unlink+0xa2>
				if (res == FR_OK) res = sync_fs(dj.fs);
    23c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    23c6:	4b1d      	ldr	r3, [pc, #116]	; (243c <f_unlink+0xd8>)
    23c8:	4798      	blx	r3
    23ca:	4603      	mov	r3, r0
    23cc:	e7d5      	b.n	237a <f_unlink+0x16>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
    23ce:	f014 0f10 	tst.w	r4, #16
    23d2:	d0f0      	beq.n	23b6 <f_unlink+0x52>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
    23d4:	696b      	ldr	r3, [r5, #20]
    23d6:	429e      	cmp	r6, r3
    23d8:	d01f      	beq.n	241a <f_unlink+0xb6>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
    23da:	2220      	movs	r2, #32
    23dc:	a90e      	add	r1, sp, #56	; 0x38
    23de:	a806      	add	r0, sp, #24
    23e0:	4b17      	ldr	r3, [pc, #92]	; (2440 <f_unlink+0xdc>)
    23e2:	4798      	blx	r3
						sdj.sclust = dclst;
    23e4:	9608      	str	r6, [sp, #32]
						res = dir_sdi(&sdj, 2);
    23e6:	2102      	movs	r1, #2
    23e8:	a806      	add	r0, sp, #24
    23ea:	4b16      	ldr	r3, [pc, #88]	; (2444 <f_unlink+0xe0>)
    23ec:	4798      	blx	r3
						if (res == FR_OK) {
    23ee:	4603      	mov	r3, r0
    23f0:	2800      	cmp	r0, #0
    23f2:	d1c2      	bne.n	237a <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
    23f4:	2100      	movs	r1, #0
    23f6:	a806      	add	r0, sp, #24
    23f8:	4b13      	ldr	r3, [pc, #76]	; (2448 <f_unlink+0xe4>)
    23fa:	4798      	blx	r3
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
    23fc:	4603      	mov	r3, r0
    23fe:	b170      	cbz	r0, 241e <f_unlink+0xba>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
    2400:	2804      	cmp	r0, #4
    2402:	d0d8      	beq.n	23b6 <f_unlink+0x52>
    2404:	e7b9      	b.n	237a <f_unlink+0x16>
					res = remove_chain(dj.fs, dclst);
    2406:	4631      	mov	r1, r6
    2408:	980e      	ldr	r0, [sp, #56]	; 0x38
    240a:	4b10      	ldr	r3, [pc, #64]	; (244c <f_unlink+0xe8>)
    240c:	4798      	blx	r3
				if (res == FR_OK) res = sync_fs(dj.fs);
    240e:	4603      	mov	r3, r0
    2410:	2800      	cmp	r0, #0
    2412:	d1b2      	bne.n	237a <f_unlink+0x16>
    2414:	e7d6      	b.n	23c4 <f_unlink+0x60>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    2416:	2306      	movs	r3, #6
    2418:	e7af      	b.n	237a <f_unlink+0x16>
						res = FR_DENIED;
    241a:	2307      	movs	r3, #7
    241c:	e7ad      	b.n	237a <f_unlink+0x16>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
    241e:	2307      	movs	r3, #7
    2420:	e7ab      	b.n	237a <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
    2422:	2307      	movs	r3, #7
    2424:	e7a9      	b.n	237a <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    2426:	2306      	movs	r3, #6
	LEAVE_FF(dj.fs, res);
    2428:	e7a7      	b.n	237a <f_unlink+0x16>
    242a:	bf00      	nop
    242c:	00000d69 	.word	0x00000d69
    2430:	00001719 	.word	0x00001719
    2434:	00000b0b 	.word	0x00000b0b
    2438:	000013a5 	.word	0x000013a5
    243c:	00001121 	.word	0x00001121
    2440:	00000ae9 	.word	0x00000ae9
    2444:	000012e9 	.word	0x000012e9
    2448:	00001a21 	.word	0x00001a21
    244c:	00001a91 	.word	0x00001a91

00002450 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2450:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2454:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2456:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2458:	f3bf 8f5f 	dmb	sy
    245c:	4770      	bx	lr

0000245e <atomic_leave_critical>:
    245e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2462:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2464:	f383 8810 	msr	PRIMASK, r3
    2468:	4770      	bx	lr
	...

0000246c <get_secs_in_month>:
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
	uint32_t sec_in_month = 0;

	if (leap_year(year)) {
    246c:	f010 0f03 	tst.w	r0, #3
    2470:	d110      	bne.n	2494 <get_secs_in_month+0x28>
		switch (month) {
    2472:	3901      	subs	r1, #1
    2474:	290b      	cmp	r1, #11
    2476:	d81e      	bhi.n	24b6 <get_secs_in_month+0x4a>
    2478:	e8df f001 	tbb	[pc, r1]
    247c:	0a060806 	.word	0x0a060806
    2480:	06060a06 	.word	0x06060a06
    2484:	060a060a 	.word	0x060a060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2488:	480d      	ldr	r0, [pc, #52]	; (24c0 <get_secs_in_month+0x54>)
    248a:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    248c:	480d      	ldr	r0, [pc, #52]	; (24c4 <get_secs_in_month+0x58>)
			break;
    248e:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2490:	480d      	ldr	r0, [pc, #52]	; (24c8 <get_secs_in_month+0x5c>)
			break;
    2492:	4770      	bx	lr
		default:
			break;
		}
	} else {
		switch (month) {
    2494:	3901      	subs	r1, #1
    2496:	290b      	cmp	r1, #11
    2498:	d80f      	bhi.n	24ba <get_secs_in_month+0x4e>
    249a:	e8df f001 	tbb	[pc, r1]
    249e:	0806      	.short	0x0806
    24a0:	0a060a06 	.word	0x0a060a06
    24a4:	060a0606 	.word	0x060a0606
    24a8:	060a      	.short	0x060a
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    24aa:	4805      	ldr	r0, [pc, #20]	; (24c0 <get_secs_in_month+0x54>)
    24ac:	4770      	bx	lr
			break;
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    24ae:	4807      	ldr	r0, [pc, #28]	; (24cc <get_secs_in_month+0x60>)
			break;
    24b0:	4770      	bx	lr
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    24b2:	4805      	ldr	r0, [pc, #20]	; (24c8 <get_secs_in_month+0x5c>)
			break;
    24b4:	4770      	bx	lr
	uint32_t sec_in_month = 0;
    24b6:	2000      	movs	r0, #0
    24b8:	4770      	bx	lr
    24ba:	2000      	movs	r0, #0
			break;
		}
	}

	return sec_in_month;
}
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	0028de80 	.word	0x0028de80
    24c4:	00263b80 	.word	0x00263b80
    24c8:	00278d00 	.word	0x00278d00
    24cc:	0024ea00 	.word	0x0024ea00

000024d0 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    24d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24d4:	460c      	mov	r4, r1
    24d6:	4690      	mov	r8, r2
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    24d8:	6986      	ldr	r6, [r0, #24]

	tmp = ts;

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    24da:	4927      	ldr	r1, [pc, #156]	; (2578 <convert_timestamp_to_datetime+0xa8>)
    24dc:	4a27      	ldr	r2, [pc, #156]	; (257c <convert_timestamp_to_datetime+0xac>)
    24de:	b2b7      	uxth	r7, r6
    24e0:	f007 0303 	and.w	r3, r7, #3
    24e4:	2b00      	cmp	r3, #0
    24e6:	bf0c      	ite	eq
    24e8:	460b      	moveq	r3, r1
    24ea:	4613      	movne	r3, r2

		if (tmp >= sec_in_year) {
    24ec:	429c      	cmp	r4, r3
    24ee:	d302      	bcc.n	24f6 <convert_timestamp_to_datetime+0x26>
			tmp -= sec_in_year;
    24f0:	1ae4      	subs	r4, r4, r3
			tmp_year++;
    24f2:	3601      	adds	r6, #1
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    24f4:	e7f3      	b.n	24de <convert_timestamp_to_datetime+0xe>
    24f6:	2501      	movs	r5, #1
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    24f8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2584 <convert_timestamp_to_datetime+0xb4>
    24fc:	4629      	mov	r1, r5
    24fe:	4630      	mov	r0, r6
    2500:	47c8      	blx	r9

		if (tmp >= sec_in_month) {
    2502:	4284      	cmp	r4, r0
    2504:	d303      	bcc.n	250e <convert_timestamp_to_datetime+0x3e>
			tmp -= sec_in_month;
    2506:	1a24      	subs	r4, r4, r0
			tmp_month++;
    2508:	3501      	adds	r5, #1
    250a:	b2ed      	uxtb	r5, r5
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    250c:	e7f6      	b.n	24fc <convert_timestamp_to_datetime+0x2c>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    250e:	4b1c      	ldr	r3, [pc, #112]	; (2580 <convert_timestamp_to_datetime+0xb0>)
    2510:	429c      	cmp	r4, r3
    2512:	bf98      	it	ls
    2514:	2101      	movls	r1, #1
    2516:	d909      	bls.n	252c <convert_timestamp_to_datetime+0x5c>
    2518:	2101      	movs	r1, #1
    251a:	4b19      	ldr	r3, [pc, #100]	; (2580 <convert_timestamp_to_datetime+0xb0>)
			tmp -= SECS_IN_DAY;
    251c:	f5a4 34a8 	sub.w	r4, r4, #86016	; 0x15000
    2520:	f5a4 74c0 	sub.w	r4, r4, #384	; 0x180
			tmp_day++;
    2524:	3101      	adds	r1, #1
    2526:	b2c9      	uxtb	r1, r1
		if (tmp >= SECS_IN_DAY) {
    2528:	429c      	cmp	r4, r3
    252a:	d8f7      	bhi.n	251c <convert_timestamp_to_datetime+0x4c>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    252c:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    2530:	bf38      	it	cc
    2532:	2200      	movcc	r2, #0
    2534:	d307      	bcc.n	2546 <convert_timestamp_to_datetime+0x76>
    2536:	2200      	movs	r2, #0
			tmp -= SECS_IN_HOUR;
    2538:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
			tmp_hour++;
    253c:	3201      	adds	r2, #1
    253e:	b2d2      	uxtb	r2, r2
		if (tmp >= SECS_IN_HOUR) {
    2540:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    2544:	d2f8      	bcs.n	2538 <convert_timestamp_to_datetime+0x68>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    2546:	2c3b      	cmp	r4, #59	; 0x3b
    2548:	bf98      	it	ls
    254a:	2300      	movls	r3, #0
    254c:	d905      	bls.n	255a <convert_timestamp_to_datetime+0x8a>
    254e:	2300      	movs	r3, #0
			tmp -= SECS_IN_MINUTE;
    2550:	3c3c      	subs	r4, #60	; 0x3c
			tmp_minutes++;
    2552:	3301      	adds	r3, #1
    2554:	b2db      	uxtb	r3, r3
		if (tmp >= SECS_IN_MINUTE) {
    2556:	2c3b      	cmp	r4, #59	; 0x3b
    2558:	d8fa      	bhi.n	2550 <convert_timestamp_to_datetime+0x80>
		} else {
			break;
		}
	}

	dt->date.year  = tmp_year;
    255a:	f8a8 7006 	strh.w	r7, [r8, #6]
	dt->date.month = tmp_month;
    255e:	f888 5005 	strb.w	r5, [r8, #5]
	dt->date.day   = tmp_day;
    2562:	f888 1004 	strb.w	r1, [r8, #4]
	dt->time.hour  = tmp_hour;
    2566:	f888 2002 	strb.w	r2, [r8, #2]
	dt->time.min   = tmp_minutes;
    256a:	f888 3001 	strb.w	r3, [r8, #1]
	dt->time.sec   = tmp;
    256e:	f888 4000 	strb.w	r4, [r8]

	return ERR_NONE;
}
    2572:	2000      	movs	r0, #0
    2574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2578:	01e28500 	.word	0x01e28500
    257c:	01e13380 	.word	0x01e13380
    2580:	0001517f 	.word	0x0001517f
    2584:	0000246d 	.word	0x0000246d

00002588 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2588:	b538      	push	{r3, r4, r5, lr}
    258a:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    258c:	4604      	mov	r4, r0
    258e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2592:	490b      	ldr	r1, [pc, #44]	; (25c0 <calendar_init+0x38>)
    2594:	3000      	adds	r0, #0
    2596:	bf18      	it	ne
    2598:	2001      	movne	r0, #1
    259a:	4b0a      	ldr	r3, [pc, #40]	; (25c4 <calendar_init+0x3c>)
    259c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    259e:	6823      	ldr	r3, [r4, #0]
    25a0:	42ab      	cmp	r3, r5
    25a2:	d008      	beq.n	25b6 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    25a4:	b94b      	cbnz	r3, 25ba <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    25a6:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    25a8:	4620      	mov	r0, r4
    25aa:	4b07      	ldr	r3, [pc, #28]	; (25c8 <calendar_init+0x40>)
    25ac:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    25ae:	f240 73b2 	movw	r3, #1970	; 0x7b2
    25b2:	61a3      	str	r3, [r4, #24]

	return ret;
    25b4:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
    25b6:	2000      	movs	r0, #0
    25b8:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
    25ba:	f06f 0011 	mvn.w	r0, #17
}
    25be:	bd38      	pop	{r3, r4, r5, pc}
    25c0:	0000b5cc 	.word	0x0000b5cc
    25c4:	00002a99 	.word	0x00002a99
    25c8:	00002bc1 	.word	0x00002bc1

000025cc <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    25cc:	b538      	push	{r3, r4, r5, lr}
    25ce:	460d      	mov	r5, r1
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    25d0:	4604      	mov	r4, r0
    25d2:	f240 223b 	movw	r2, #571	; 0x23b
    25d6:	4908      	ldr	r1, [pc, #32]	; (25f8 <calendar_get_date_time+0x2c>)
    25d8:	3000      	adds	r0, #0
    25da:	bf18      	it	ne
    25dc:	2001      	movne	r0, #1
    25de:	4b07      	ldr	r3, [pc, #28]	; (25fc <calendar_get_date_time+0x30>)
    25e0:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    25e2:	4620      	mov	r0, r4
    25e4:	4b06      	ldr	r3, [pc, #24]	; (2600 <calendar_get_date_time+0x34>)
    25e6:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    25e8:	462a      	mov	r2, r5
    25ea:	4601      	mov	r1, r0
    25ec:	4620      	mov	r0, r4
    25ee:	4b05      	ldr	r3, [pc, #20]	; (2604 <calendar_get_date_time+0x38>)
    25f0:	4798      	blx	r3

	return ERR_NONE;
}
    25f2:	2000      	movs	r0, #0
    25f4:	bd38      	pop	{r3, r4, r5, pc}
    25f6:	bf00      	nop
    25f8:	0000b5cc 	.word	0x0000b5cc
    25fc:	00002a99 	.word	0x00002a99
    2600:	00002c59 	.word	0x00002c59
    2604:	000024d1 	.word	0x000024d1

00002608 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2608:	b570      	push	{r4, r5, r6, lr}
    260a:	460d      	mov	r5, r1
    260c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    260e:	4604      	mov	r4, r0
    2610:	b160      	cbz	r0, 262c <io_write+0x24>
    2612:	1c08      	adds	r0, r1, #0
    2614:	bf18      	it	ne
    2616:	2001      	movne	r0, #1
    2618:	2234      	movs	r2, #52	; 0x34
    261a:	4905      	ldr	r1, [pc, #20]	; (2630 <io_write+0x28>)
    261c:	4b05      	ldr	r3, [pc, #20]	; (2634 <io_write+0x2c>)
    261e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    2620:	6823      	ldr	r3, [r4, #0]
    2622:	4632      	mov	r2, r6
    2624:	4629      	mov	r1, r5
    2626:	4620      	mov	r0, r4
    2628:	4798      	blx	r3
}
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	2000      	movs	r0, #0
    262e:	e7f3      	b.n	2618 <io_write+0x10>
    2630:	0000b5e8 	.word	0x0000b5e8
    2634:	00002a99 	.word	0x00002a99

00002638 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2638:	b570      	push	{r4, r5, r6, lr}
    263a:	460d      	mov	r5, r1
    263c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    263e:	4604      	mov	r4, r0
    2640:	b160      	cbz	r0, 265c <io_read+0x24>
    2642:	1c08      	adds	r0, r1, #0
    2644:	bf18      	it	ne
    2646:	2001      	movne	r0, #1
    2648:	223d      	movs	r2, #61	; 0x3d
    264a:	4905      	ldr	r1, [pc, #20]	; (2660 <io_read+0x28>)
    264c:	4b05      	ldr	r3, [pc, #20]	; (2664 <io_read+0x2c>)
    264e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    2650:	6863      	ldr	r3, [r4, #4]
    2652:	4632      	mov	r2, r6
    2654:	4629      	mov	r1, r5
    2656:	4620      	mov	r0, r4
    2658:	4798      	blx	r3
}
    265a:	bd70      	pop	{r4, r5, r6, pc}
    265c:	2000      	movs	r0, #0
    265e:	e7f3      	b.n	2648 <io_read+0x10>
    2660:	0000b5e8 	.word	0x0000b5e8
    2664:	00002a99 	.word	0x00002a99

00002668 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
    2668:	b538      	push	{r3, r4, r5, lr}
    266a:	460c      	mov	r4, r1
	ASSERT(mci && hw);
    266c:	4605      	mov	r5, r0
    266e:	b158      	cbz	r0, 2688 <mci_sync_init+0x20>
    2670:	1c08      	adds	r0, r1, #0
    2672:	bf18      	it	ne
    2674:	2001      	movne	r0, #1
    2676:	2231      	movs	r2, #49	; 0x31
    2678:	4904      	ldr	r1, [pc, #16]	; (268c <mci_sync_init+0x24>)
    267a:	4b05      	ldr	r3, [pc, #20]	; (2690 <mci_sync_init+0x28>)
    267c:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
    267e:	4621      	mov	r1, r4
    2680:	4628      	mov	r0, r5
    2682:	4b04      	ldr	r3, [pc, #16]	; (2694 <mci_sync_init+0x2c>)
    2684:	4798      	blx	r3
}
    2686:	bd38      	pop	{r3, r4, r5, pc}
    2688:	2000      	movs	r0, #0
    268a:	e7f4      	b.n	2676 <mci_sync_init+0xe>
    268c:	0000b5fc 	.word	0x0000b5fc
    2690:	00002a99 	.word	0x00002a99
    2694:	00002e09 	.word	0x00002e09

00002698 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	b083      	sub	sp, #12
    269c:	460d      	mov	r5, r1
    269e:	4616      	mov	r6, r2
    26a0:	461f      	mov	r7, r3
	ASSERT(mci);
    26a2:	4604      	mov	r4, r0
    26a4:	2244      	movs	r2, #68	; 0x44
    26a6:	4908      	ldr	r1, [pc, #32]	; (26c8 <mci_sync_select_device+0x30>)
    26a8:	3000      	adds	r0, #0
    26aa:	bf18      	it	ne
    26ac:	2001      	movne	r0, #1
    26ae:	4b07      	ldr	r3, [pc, #28]	; (26cc <mci_sync_select_device+0x34>)
    26b0:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
    26b2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    26b6:	9300      	str	r3, [sp, #0]
    26b8:	463b      	mov	r3, r7
    26ba:	4632      	mov	r2, r6
    26bc:	4629      	mov	r1, r5
    26be:	4620      	mov	r0, r4
    26c0:	4c03      	ldr	r4, [pc, #12]	; (26d0 <mci_sync_select_device+0x38>)
    26c2:	47a0      	blx	r4
}
    26c4:	b003      	add	sp, #12
    26c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26c8:	0000b5fc 	.word	0x0000b5fc
    26cc:	00002a99 	.word	0x00002a99
    26d0:	00002e71 	.word	0x00002e71

000026d4 <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
    26d4:	b538      	push	{r3, r4, r5, lr}
    26d6:	460d      	mov	r5, r1
	ASSERT(mci);
    26d8:	4604      	mov	r4, r0
    26da:	224d      	movs	r2, #77	; 0x4d
    26dc:	4905      	ldr	r1, [pc, #20]	; (26f4 <mci_sync_deselect_device+0x20>)
    26de:	3000      	adds	r0, #0
    26e0:	bf18      	it	ne
    26e2:	2001      	movne	r0, #1
    26e4:	4b04      	ldr	r3, [pc, #16]	; (26f8 <mci_sync_deselect_device+0x24>)
    26e6:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
    26e8:	4629      	mov	r1, r5
    26ea:	4620      	mov	r0, r4
    26ec:	4b03      	ldr	r3, [pc, #12]	; (26fc <mci_sync_deselect_device+0x28>)
    26ee:	4798      	blx	r3
}
    26f0:	bd38      	pop	{r3, r4, r5, pc}
    26f2:	bf00      	nop
    26f4:	0000b5fc 	.word	0x0000b5fc
    26f8:	00002a99 	.word	0x00002a99
    26fc:	00002f85 	.word	0x00002f85

00002700 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
    2700:	b538      	push	{r3, r4, r5, lr}
    2702:	460d      	mov	r5, r1
	ASSERT(mci);
    2704:	4604      	mov	r4, r0
    2706:	2256      	movs	r2, #86	; 0x56
    2708:	4905      	ldr	r1, [pc, #20]	; (2720 <mci_sync_get_bus_width+0x20>)
    270a:	3000      	adds	r0, #0
    270c:	bf18      	it	ne
    270e:	2001      	movne	r0, #1
    2710:	4b04      	ldr	r3, [pc, #16]	; (2724 <mci_sync_get_bus_width+0x24>)
    2712:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
    2714:	4629      	mov	r1, r5
    2716:	4620      	mov	r0, r4
    2718:	4b03      	ldr	r3, [pc, #12]	; (2728 <mci_sync_get_bus_width+0x28>)
    271a:	4798      	blx	r3
}
    271c:	bd38      	pop	{r3, r4, r5, pc}
    271e:	bf00      	nop
    2720:	0000b5fc 	.word	0x0000b5fc
    2724:	00002a99 	.word	0x00002a99
    2728:	00002f89 	.word	0x00002f89

0000272c <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    272c:	b510      	push	{r4, lr}
	ASSERT(mci);
    272e:	4604      	mov	r4, r0
    2730:	2260      	movs	r2, #96	; 0x60
    2732:	4905      	ldr	r1, [pc, #20]	; (2748 <mci_sync_is_high_speed_capable+0x1c>)
    2734:	3000      	adds	r0, #0
    2736:	bf18      	it	ne
    2738:	2001      	movne	r0, #1
    273a:	4b04      	ldr	r3, [pc, #16]	; (274c <mci_sync_is_high_speed_capable+0x20>)
    273c:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    273e:	4620      	mov	r0, r4
    2740:	4b03      	ldr	r3, [pc, #12]	; (2750 <mci_sync_is_high_speed_capable+0x24>)
    2742:	4798      	blx	r3
}
    2744:	bd10      	pop	{r4, pc}
    2746:	bf00      	nop
    2748:	0000b5fc 	.word	0x0000b5fc
    274c:	00002a99 	.word	0x00002a99
    2750:	00002f93 	.word	0x00002f93

00002754 <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    2754:	b510      	push	{r4, lr}
	ASSERT(mci);
    2756:	4604      	mov	r4, r0
    2758:	2269      	movs	r2, #105	; 0x69
    275a:	4905      	ldr	r1, [pc, #20]	; (2770 <mci_sync_send_clock+0x1c>)
    275c:	3000      	adds	r0, #0
    275e:	bf18      	it	ne
    2760:	2001      	movne	r0, #1
    2762:	4b04      	ldr	r3, [pc, #16]	; (2774 <mci_sync_send_clock+0x20>)
    2764:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    2766:	4620      	mov	r0, r4
    2768:	4b03      	ldr	r3, [pc, #12]	; (2778 <mci_sync_send_clock+0x24>)
    276a:	4798      	blx	r3
    276c:	bd10      	pop	{r4, pc}
    276e:	bf00      	nop
    2770:	0000b5fc 	.word	0x0000b5fc
    2774:	00002a99 	.word	0x00002a99
    2778:	00002f9d 	.word	0x00002f9d

0000277c <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	460d      	mov	r5, r1
    2780:	4616      	mov	r6, r2
	ASSERT(mci);
    2782:	4604      	mov	r4, r0
    2784:	2272      	movs	r2, #114	; 0x72
    2786:	4906      	ldr	r1, [pc, #24]	; (27a0 <mci_sync_send_cmd+0x24>)
    2788:	3000      	adds	r0, #0
    278a:	bf18      	it	ne
    278c:	2001      	movne	r0, #1
    278e:	4b05      	ldr	r3, [pc, #20]	; (27a4 <mci_sync_send_cmd+0x28>)
    2790:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    2792:	4632      	mov	r2, r6
    2794:	4629      	mov	r1, r5
    2796:	4620      	mov	r0, r4
    2798:	4b03      	ldr	r3, [pc, #12]	; (27a8 <mci_sync_send_cmd+0x2c>)
    279a:	4798      	blx	r3
}
    279c:	bd70      	pop	{r4, r5, r6, pc}
    279e:	bf00      	nop
    27a0:	0000b5fc 	.word	0x0000b5fc
    27a4:	00002a99 	.word	0x00002a99
    27a8:	00002fdd 	.word	0x00002fdd

000027ac <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    27ac:	b510      	push	{r4, lr}
	ASSERT(mci);
    27ae:	4604      	mov	r4, r0
    27b0:	227b      	movs	r2, #123	; 0x7b
    27b2:	4905      	ldr	r1, [pc, #20]	; (27c8 <mci_sync_get_response+0x1c>)
    27b4:	3000      	adds	r0, #0
    27b6:	bf18      	it	ne
    27b8:	2001      	movne	r0, #1
    27ba:	4b04      	ldr	r3, [pc, #16]	; (27cc <mci_sync_get_response+0x20>)
    27bc:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    27be:	4620      	mov	r0, r4
    27c0:	4b03      	ldr	r3, [pc, #12]	; (27d0 <mci_sync_get_response+0x24>)
    27c2:	4798      	blx	r3
}
    27c4:	bd10      	pop	{r4, pc}
    27c6:	bf00      	nop
    27c8:	0000b5fc 	.word	0x0000b5fc
    27cc:	00002a99 	.word	0x00002a99
    27d0:	00003031 	.word	0x00003031

000027d4 <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    27d4:	b538      	push	{r3, r4, r5, lr}
    27d6:	460c      	mov	r4, r1
	ASSERT(mci && response);
    27d8:	4605      	mov	r5, r0
    27da:	b158      	cbz	r0, 27f4 <mci_sync_get_response_128+0x20>
    27dc:	1c08      	adds	r0, r1, #0
    27de:	bf18      	it	ne
    27e0:	2001      	movne	r0, #1
    27e2:	2284      	movs	r2, #132	; 0x84
    27e4:	4904      	ldr	r1, [pc, #16]	; (27f8 <mci_sync_get_response_128+0x24>)
    27e6:	4b05      	ldr	r3, [pc, #20]	; (27fc <mci_sync_get_response_128+0x28>)
    27e8:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    27ea:	4621      	mov	r1, r4
    27ec:	4628      	mov	r0, r5
    27ee:	4b04      	ldr	r3, [pc, #16]	; (2800 <mci_sync_get_response_128+0x2c>)
    27f0:	4798      	blx	r3
    27f2:	bd38      	pop	{r3, r4, r5, pc}
    27f4:	2000      	movs	r0, #0
    27f6:	e7f4      	b.n	27e2 <mci_sync_get_response_128+0xe>
    27f8:	0000b5fc 	.word	0x0000b5fc
    27fc:	00002a99 	.word	0x00002a99
    2800:	0000305d 	.word	0x0000305d

00002804 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    2804:	b5f0      	push	{r4, r5, r6, r7, lr}
    2806:	b083      	sub	sp, #12
    2808:	460d      	mov	r5, r1
    280a:	4616      	mov	r6, r2
    280c:	461f      	mov	r7, r3
	ASSERT(mci);
    280e:	4604      	mov	r4, r0
    2810:	2290      	movs	r2, #144	; 0x90
    2812:	490a      	ldr	r1, [pc, #40]	; (283c <mci_sync_adtc_start+0x38>)
    2814:	3000      	adds	r0, #0
    2816:	bf18      	it	ne
    2818:	2001      	movne	r0, #1
    281a:	4b09      	ldr	r3, [pc, #36]	; (2840 <mci_sync_adtc_start+0x3c>)
    281c:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    281e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    2822:	9301      	str	r3, [sp, #4]
    2824:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    2828:	9300      	str	r3, [sp, #0]
    282a:	463b      	mov	r3, r7
    282c:	4632      	mov	r2, r6
    282e:	4629      	mov	r1, r5
    2830:	4620      	mov	r0, r4
    2832:	4c04      	ldr	r4, [pc, #16]	; (2844 <mci_sync_adtc_start+0x40>)
    2834:	47a0      	blx	r4
}
    2836:	b003      	add	sp, #12
    2838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283a:	bf00      	nop
    283c:	0000b5fc 	.word	0x0000b5fc
    2840:	00002a99 	.word	0x00002a99
    2844:	000030c1 	.word	0x000030c1

00002848 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    2848:	b570      	push	{r4, r5, r6, lr}
    284a:	460c      	mov	r4, r1
    284c:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    284e:	4605      	mov	r5, r0
    2850:	b160      	cbz	r0, 286c <mci_sync_start_read_blocks+0x24>
    2852:	1c08      	adds	r0, r1, #0
    2854:	bf18      	it	ne
    2856:	2001      	movne	r0, #1
    2858:	22b5      	movs	r2, #181	; 0xb5
    285a:	4905      	ldr	r1, [pc, #20]	; (2870 <mci_sync_start_read_blocks+0x28>)
    285c:	4b05      	ldr	r3, [pc, #20]	; (2874 <mci_sync_start_read_blocks+0x2c>)
    285e:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    2860:	4632      	mov	r2, r6
    2862:	4621      	mov	r1, r4
    2864:	4628      	mov	r0, r5
    2866:	4b04      	ldr	r3, [pc, #16]	; (2878 <mci_sync_start_read_blocks+0x30>)
    2868:	4798      	blx	r3
}
    286a:	bd70      	pop	{r4, r5, r6, pc}
    286c:	2000      	movs	r0, #0
    286e:	e7f3      	b.n	2858 <mci_sync_start_read_blocks+0x10>
    2870:	0000b5fc 	.word	0x0000b5fc
    2874:	00002a99 	.word	0x00002a99
    2878:	00003335 	.word	0x00003335

0000287c <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    287c:	b570      	push	{r4, r5, r6, lr}
    287e:	460c      	mov	r4, r1
    2880:	4616      	mov	r6, r2
	ASSERT(mci && src);
    2882:	4605      	mov	r5, r0
    2884:	b160      	cbz	r0, 28a0 <mci_sync_start_write_blocks+0x24>
    2886:	1c08      	adds	r0, r1, #0
    2888:	bf18      	it	ne
    288a:	2001      	movne	r0, #1
    288c:	22be      	movs	r2, #190	; 0xbe
    288e:	4905      	ldr	r1, [pc, #20]	; (28a4 <mci_sync_start_write_blocks+0x28>)
    2890:	4b05      	ldr	r3, [pc, #20]	; (28a8 <mci_sync_start_write_blocks+0x2c>)
    2892:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    2894:	4632      	mov	r2, r6
    2896:	4621      	mov	r1, r4
    2898:	4628      	mov	r0, r5
    289a:	4b04      	ldr	r3, [pc, #16]	; (28ac <mci_sync_start_write_blocks+0x30>)
    289c:	4798      	blx	r3
}
    289e:	bd70      	pop	{r4, r5, r6, pc}
    28a0:	2000      	movs	r0, #0
    28a2:	e7f3      	b.n	288c <mci_sync_start_write_blocks+0x10>
    28a4:	0000b5fc 	.word	0x0000b5fc
    28a8:	00002a99 	.word	0x00002a99
    28ac:	000033b9 	.word	0x000033b9

000028b0 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    28b0:	b510      	push	{r4, lr}
	ASSERT(mci);
    28b2:	4604      	mov	r4, r0
    28b4:	22c7      	movs	r2, #199	; 0xc7
    28b6:	4905      	ldr	r1, [pc, #20]	; (28cc <mci_sync_wait_end_of_read_blocks+0x1c>)
    28b8:	3000      	adds	r0, #0
    28ba:	bf18      	it	ne
    28bc:	2001      	movne	r0, #1
    28be:	4b04      	ldr	r3, [pc, #16]	; (28d0 <mci_sync_wait_end_of_read_blocks+0x20>)
    28c0:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    28c2:	4620      	mov	r0, r4
    28c4:	4b03      	ldr	r3, [pc, #12]	; (28d4 <mci_sync_wait_end_of_read_blocks+0x24>)
    28c6:	4798      	blx	r3
}
    28c8:	bd10      	pop	{r4, pc}
    28ca:	bf00      	nop
    28cc:	0000b5fc 	.word	0x0000b5fc
    28d0:	00002a99 	.word	0x00002a99
    28d4:	0000343d 	.word	0x0000343d

000028d8 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    28d8:	b510      	push	{r4, lr}
	ASSERT(mci);
    28da:	4604      	mov	r4, r0
    28dc:	22d0      	movs	r2, #208	; 0xd0
    28de:	4905      	ldr	r1, [pc, #20]	; (28f4 <mci_sync_wait_end_of_write_blocks+0x1c>)
    28e0:	3000      	adds	r0, #0
    28e2:	bf18      	it	ne
    28e4:	2001      	movne	r0, #1
    28e6:	4b04      	ldr	r3, [pc, #16]	; (28f8 <mci_sync_wait_end_of_write_blocks+0x20>)
    28e8:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    28ea:	4620      	mov	r0, r4
    28ec:	4b03      	ldr	r3, [pc, #12]	; (28fc <mci_sync_wait_end_of_write_blocks+0x24>)
    28ee:	4798      	blx	r3
}
    28f0:	bd10      	pop	{r4, pc}
    28f2:	bf00      	nop
    28f4:	0000b5fc 	.word	0x0000b5fc
    28f8:	00002a99 	.word	0x00002a99
    28fc:	00003465 	.word	0x00003465

00002900 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2904:	460f      	mov	r7, r1
    2906:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2908:	4604      	mov	r4, r0
    290a:	b328      	cbz	r0, 2958 <usart_sync_write+0x58>
    290c:	b331      	cbz	r1, 295c <usart_sync_write+0x5c>
    290e:	1c10      	adds	r0, r2, #0
    2910:	bf18      	it	ne
    2912:	2001      	movne	r0, #1
    2914:	22f1      	movs	r2, #241	; 0xf1
    2916:	4912      	ldr	r1, [pc, #72]	; (2960 <usart_sync_write+0x60>)
    2918:	4b12      	ldr	r3, [pc, #72]	; (2964 <usart_sync_write+0x64>)
    291a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    291c:	3408      	adds	r4, #8
    291e:	4d12      	ldr	r5, [pc, #72]	; (2968 <usart_sync_write+0x68>)
    2920:	4620      	mov	r0, r4
    2922:	47a8      	blx	r5
    2924:	2800      	cmp	r0, #0
    2926:	d0fb      	beq.n	2920 <usart_sync_write+0x20>
    2928:	3f01      	subs	r7, #1
    292a:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    292c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2970 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    2930:	4d0d      	ldr	r5, [pc, #52]	; (2968 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2932:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2936:	4620      	mov	r0, r4
    2938:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    293a:	4620      	mov	r0, r4
    293c:	47a8      	blx	r5
    293e:	2800      	cmp	r0, #0
    2940:	d0fb      	beq.n	293a <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    2942:	3601      	adds	r6, #1
    2944:	4546      	cmp	r6, r8
    2946:	d3f4      	bcc.n	2932 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    2948:	4d08      	ldr	r5, [pc, #32]	; (296c <usart_sync_write+0x6c>)
    294a:	4620      	mov	r0, r4
    294c:	47a8      	blx	r5
    294e:	2800      	cmp	r0, #0
    2950:	d0fb      	beq.n	294a <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    2952:	4630      	mov	r0, r6
    2954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2958:	2000      	movs	r0, #0
    295a:	e7db      	b.n	2914 <usart_sync_write+0x14>
    295c:	2000      	movs	r0, #0
    295e:	e7d9      	b.n	2914 <usart_sync_write+0x14>
    2960:	0000b618 	.word	0x0000b618
    2964:	00002a99 	.word	0x00002a99
    2968:	0000363b 	.word	0x0000363b
    296c:	00003645 	.word	0x00003645
    2970:	0000362d 	.word	0x0000362d

00002974 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2978:	460f      	mov	r7, r1
    297a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    297c:	4604      	mov	r4, r0
    297e:	b1e0      	cbz	r0, 29ba <usart_sync_read+0x46>
    2980:	b1e9      	cbz	r1, 29be <usart_sync_read+0x4a>
    2982:	1c10      	adds	r0, r2, #0
    2984:	bf18      	it	ne
    2986:	2001      	movne	r0, #1
    2988:	f44f 7286 	mov.w	r2, #268	; 0x10c
    298c:	490d      	ldr	r1, [pc, #52]	; (29c4 <usart_sync_read+0x50>)
    298e:	4b0e      	ldr	r3, [pc, #56]	; (29c8 <usart_sync_read+0x54>)
    2990:	4798      	blx	r3
    2992:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    2994:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    2996:	3408      	adds	r4, #8
    2998:	4d0c      	ldr	r5, [pc, #48]	; (29cc <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    299a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 29d0 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    299e:	4620      	mov	r0, r4
    29a0:	47a8      	blx	r5
    29a2:	2800      	cmp	r0, #0
    29a4:	d0fb      	beq.n	299e <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    29a6:	4620      	mov	r0, r4
    29a8:	47c8      	blx	r9
    29aa:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    29ae:	3601      	adds	r6, #1
    29b0:	4546      	cmp	r6, r8
    29b2:	d3f4      	bcc.n	299e <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    29b4:	4630      	mov	r0, r6
    29b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    29ba:	2000      	movs	r0, #0
    29bc:	e7e4      	b.n	2988 <usart_sync_read+0x14>
    29be:	2000      	movs	r0, #0
    29c0:	e7e2      	b.n	2988 <usart_sync_read+0x14>
    29c2:	bf00      	nop
    29c4:	0000b618 	.word	0x0000b618
    29c8:	00002a99 	.word	0x00002a99
    29cc:	0000364f 	.word	0x0000364f
    29d0:	00003633 	.word	0x00003633

000029d4 <usart_sync_init>:
{
    29d4:	b538      	push	{r3, r4, r5, lr}
    29d6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    29d8:	4604      	mov	r4, r0
    29da:	b198      	cbz	r0, 2a04 <usart_sync_init+0x30>
    29dc:	1c08      	adds	r0, r1, #0
    29de:	bf18      	it	ne
    29e0:	2001      	movne	r0, #1
    29e2:	2234      	movs	r2, #52	; 0x34
    29e4:	4908      	ldr	r1, [pc, #32]	; (2a08 <usart_sync_init+0x34>)
    29e6:	4b09      	ldr	r3, [pc, #36]	; (2a0c <usart_sync_init+0x38>)
    29e8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    29ea:	4629      	mov	r1, r5
    29ec:	f104 0008 	add.w	r0, r4, #8
    29f0:	4b07      	ldr	r3, [pc, #28]	; (2a10 <usart_sync_init+0x3c>)
    29f2:	4798      	blx	r3
	if (init_status) {
    29f4:	4603      	mov	r3, r0
    29f6:	b918      	cbnz	r0, 2a00 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    29f8:	4a06      	ldr	r2, [pc, #24]	; (2a14 <usart_sync_init+0x40>)
    29fa:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    29fc:	4a06      	ldr	r2, [pc, #24]	; (2a18 <usart_sync_init+0x44>)
    29fe:	6022      	str	r2, [r4, #0]
}
    2a00:	4618      	mov	r0, r3
    2a02:	bd38      	pop	{r3, r4, r5, pc}
    2a04:	2000      	movs	r0, #0
    2a06:	e7ec      	b.n	29e2 <usart_sync_init+0xe>
    2a08:	0000b618 	.word	0x0000b618
    2a0c:	00002a99 	.word	0x00002a99
    2a10:	000035ed 	.word	0x000035ed
    2a14:	00002975 	.word	0x00002975
    2a18:	00002901 	.word	0x00002901

00002a1c <usart_sync_enable>:
{
    2a1c:	b510      	push	{r4, lr}
	ASSERT(descr);
    2a1e:	4604      	mov	r4, r0
    2a20:	2253      	movs	r2, #83	; 0x53
    2a22:	4906      	ldr	r1, [pc, #24]	; (2a3c <usart_sync_enable+0x20>)
    2a24:	3000      	adds	r0, #0
    2a26:	bf18      	it	ne
    2a28:	2001      	movne	r0, #1
    2a2a:	4b05      	ldr	r3, [pc, #20]	; (2a40 <usart_sync_enable+0x24>)
    2a2c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    2a2e:	f104 0008 	add.w	r0, r4, #8
    2a32:	4b04      	ldr	r3, [pc, #16]	; (2a44 <usart_sync_enable+0x28>)
    2a34:	4798      	blx	r3
}
    2a36:	2000      	movs	r0, #0
    2a38:	bd10      	pop	{r4, pc}
    2a3a:	bf00      	nop
    2a3c:	0000b618 	.word	0x0000b618
    2a40:	00002a99 	.word	0x00002a99
    2a44:	00003619 	.word	0x00003619

00002a48 <usart_sync_get_io_descriptor>:
{
    2a48:	b538      	push	{r3, r4, r5, lr}
    2a4a:	460c      	mov	r4, r1
	ASSERT(descr && io);
    2a4c:	4605      	mov	r5, r0
    2a4e:	b148      	cbz	r0, 2a64 <usart_sync_get_io_descriptor+0x1c>
    2a50:	1c08      	adds	r0, r1, #0
    2a52:	bf18      	it	ne
    2a54:	2001      	movne	r0, #1
    2a56:	2269      	movs	r2, #105	; 0x69
    2a58:	4903      	ldr	r1, [pc, #12]	; (2a68 <usart_sync_get_io_descriptor+0x20>)
    2a5a:	4b04      	ldr	r3, [pc, #16]	; (2a6c <usart_sync_get_io_descriptor+0x24>)
    2a5c:	4798      	blx	r3
	*io = &descr->io;
    2a5e:	6025      	str	r5, [r4, #0]
}
    2a60:	2000      	movs	r0, #0
    2a62:	bd38      	pop	{r3, r4, r5, pc}
    2a64:	2000      	movs	r0, #0
    2a66:	e7f6      	b.n	2a56 <usart_sync_get_io_descriptor+0xe>
    2a68:	0000b618 	.word	0x0000b618
    2a6c:	00002a99 	.word	0x00002a99

00002a70 <usart_sync_is_rx_not_empty>:
{
    2a70:	b510      	push	{r4, lr}
	ASSERT(descr);
    2a72:	4604      	mov	r4, r0
    2a74:	22d7      	movs	r2, #215	; 0xd7
    2a76:	4905      	ldr	r1, [pc, #20]	; (2a8c <usart_sync_is_rx_not_empty+0x1c>)
    2a78:	3000      	adds	r0, #0
    2a7a:	bf18      	it	ne
    2a7c:	2001      	movne	r0, #1
    2a7e:	4b04      	ldr	r3, [pc, #16]	; (2a90 <usart_sync_is_rx_not_empty+0x20>)
    2a80:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
    2a82:	f104 0008 	add.w	r0, r4, #8
    2a86:	4b03      	ldr	r3, [pc, #12]	; (2a94 <usart_sync_is_rx_not_empty+0x24>)
    2a88:	4798      	blx	r3
}
    2a8a:	bd10      	pop	{r4, pc}
    2a8c:	0000b618 	.word	0x0000b618
    2a90:	00002a99 	.word	0x00002a99
    2a94:	0000364f 	.word	0x0000364f

00002a98 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2a98:	b900      	cbnz	r0, 2a9c <assert+0x4>
		__asm("BKPT #0");
    2a9a:	be00      	bkpt	0x0000
    2a9c:	4770      	bx	lr
	...

00002aa0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2aa0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2aa2:	4a06      	ldr	r2, [pc, #24]	; (2abc <_sbrk+0x1c>)
    2aa4:	6812      	ldr	r2, [r2, #0]
    2aa6:	b122      	cbz	r2, 2ab2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2aa8:	4a04      	ldr	r2, [pc, #16]	; (2abc <_sbrk+0x1c>)
    2aaa:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2aac:	4403      	add	r3, r0
    2aae:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2ab0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2ab2:	4903      	ldr	r1, [pc, #12]	; (2ac0 <_sbrk+0x20>)
    2ab4:	4a01      	ldr	r2, [pc, #4]	; (2abc <_sbrk+0x1c>)
    2ab6:	6011      	str	r1, [r2, #0]
    2ab8:	e7f6      	b.n	2aa8 <_sbrk+0x8>
    2aba:	bf00      	nop
    2abc:	20000284 	.word	0x20000284
    2ac0:	20014598 	.word	0x20014598

00002ac4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    2ac4:	f04f 30ff 	mov.w	r0, #4294967295
    2ac8:	4770      	bx	lr

00002aca <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    2aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2ace:	604b      	str	r3, [r1, #4]

	return 0;
}
    2ad0:	2000      	movs	r0, #0
    2ad2:	4770      	bx	lr

00002ad4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    2ad4:	2001      	movs	r0, #1
    2ad6:	4770      	bx	lr

00002ad8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    2ad8:	2000      	movs	r0, #0
    2ada:	4770      	bx	lr

00002adc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2adc:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2ade:	4a08      	ldr	r2, [pc, #32]	; (2b00 <_init_chip+0x24>)
    2ae0:	8813      	ldrh	r3, [r2, #0]
    2ae2:	b29b      	uxth	r3, r3
    2ae4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2ae6:	4b07      	ldr	r3, [pc, #28]	; (2b04 <_init_chip+0x28>)
    2ae8:	4798      	blx	r3
	_oscctrl_init_sources();
    2aea:	4b07      	ldr	r3, [pc, #28]	; (2b08 <_init_chip+0x2c>)
    2aec:	4798      	blx	r3
	_mclk_init();
    2aee:	4b07      	ldr	r3, [pc, #28]	; (2b0c <_init_chip+0x30>)
    2af0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2af2:	4b07      	ldr	r3, [pc, #28]	; (2b10 <_init_chip+0x34>)
    2af4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2af6:	f640 70ff 	movw	r0, #4095	; 0xfff
    2afa:	4b06      	ldr	r3, [pc, #24]	; (2b14 <_init_chip+0x38>)
    2afc:	4798      	blx	r3
    2afe:	bd08      	pop	{r3, pc}
    2b00:	41004000 	.word	0x41004000
    2b04:	00002b49 	.word	0x00002b49
    2b08:	00002b5d 	.word	0x00002b5d
    2b0c:	00002b3d 	.word	0x00002b3d
    2b10:	00002b79 	.word	0x00002b79
    2b14:	00002b19 	.word	0x00002b19

00002b18 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2b18:	f010 0f01 	tst.w	r0, #1
    2b1c:	d008      	beq.n	2b30 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b1e:	4a05      	ldr	r2, [pc, #20]	; (2b34 <_gclk_init_generators_by_fref+0x1c>)
    2b20:	4b05      	ldr	r3, [pc, #20]	; (2b38 <_gclk_init_generators_by_fref+0x20>)
    2b22:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b24:	4619      	mov	r1, r3
    2b26:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b2a:	684b      	ldr	r3, [r1, #4]
    2b2c:	4213      	tst	r3, r2
    2b2e:	d1fc      	bne.n	2b2a <_gclk_init_generators_by_fref+0x12>
    2b30:	4770      	bx	lr
    2b32:	bf00      	nop
    2b34:	00010101 	.word	0x00010101
    2b38:	40001c00 	.word	0x40001c00

00002b3c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2b3c:	2201      	movs	r2, #1
    2b3e:	4b01      	ldr	r3, [pc, #4]	; (2b44 <_mclk_init+0x8>)
    2b40:	715a      	strb	r2, [r3, #5]
    2b42:	4770      	bx	lr
    2b44:	40000800 	.word	0x40000800

00002b48 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2b48:	4b03      	ldr	r3, [pc, #12]	; (2b58 <_osc32kctrl_init_sources+0x10>)
    2b4a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2b4c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2b50:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2b52:	2201      	movs	r2, #1
    2b54:	741a      	strb	r2, [r3, #16]
    2b56:	4770      	bx	lr
    2b58:	40001400 	.word	0x40001400

00002b5c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    2b5c:	4a04      	ldr	r2, [pc, #16]	; (2b70 <_oscctrl_init_sources+0x14>)
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <_oscctrl_init_sources+0x18>)
    2b60:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2b62:	461a      	mov	r2, r3
    2b64:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    2b66:	f013 0f02 	tst.w	r3, #2
    2b6a:	d0fb      	beq.n	2b64 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2b6c:	4770      	bx	lr
    2b6e:	bf00      	nop
    2b70:	03002606 	.word	0x03002606
    2b74:	40001000 	.word	0x40001000

00002b78 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2b78:	4770      	bx	lr
	...

00002b7c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2b7c:	b500      	push	{lr}
    2b7e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2b80:	4b0d      	ldr	r3, [pc, #52]	; (2bb8 <RAMECC_Handler+0x3c>)
    2b82:	789b      	ldrb	r3, [r3, #2]
    2b84:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2b86:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2b88:	9b01      	ldr	r3, [sp, #4]
    2b8a:	f013 0f02 	tst.w	r3, #2
    2b8e:	d006      	beq.n	2b9e <RAMECC_Handler+0x22>
    2b90:	4b0a      	ldr	r3, [pc, #40]	; (2bbc <RAMECC_Handler+0x40>)
    2b92:	681b      	ldr	r3, [r3, #0]
    2b94:	b11b      	cbz	r3, 2b9e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2b96:	4a08      	ldr	r2, [pc, #32]	; (2bb8 <RAMECC_Handler+0x3c>)
    2b98:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2b9a:	4798      	blx	r3
    2b9c:	e009      	b.n	2bb2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	f013 0f01 	tst.w	r3, #1
    2ba4:	d005      	beq.n	2bb2 <RAMECC_Handler+0x36>
    2ba6:	4b05      	ldr	r3, [pc, #20]	; (2bbc <RAMECC_Handler+0x40>)
    2ba8:	685b      	ldr	r3, [r3, #4]
    2baa:	b113      	cbz	r3, 2bb2 <RAMECC_Handler+0x36>
    2bac:	4a02      	ldr	r2, [pc, #8]	; (2bb8 <RAMECC_Handler+0x3c>)
    2bae:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2bb0:	4798      	blx	r3
	} else {
		return;
	}
}
    2bb2:	b003      	add	sp, #12
    2bb4:	f85d fb04 	ldr.w	pc, [sp], #4
    2bb8:	41020000 	.word	0x41020000
    2bbc:	20004450 	.word	0x20004450

00002bc0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2bc0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2bc2:	4604      	mov	r4, r0
    2bc4:	2800      	cmp	r0, #0
    2bc6:	d03e      	beq.n	2c46 <_calendar_init+0x86>
    2bc8:	6800      	ldr	r0, [r0, #0]
    2bca:	3000      	adds	r0, #0
    2bcc:	bf18      	it	ne
    2bce:	2001      	movne	r0, #1
    2bd0:	222f      	movs	r2, #47	; 0x2f
    2bd2:	491e      	ldr	r1, [pc, #120]	; (2c4c <_calendar_init+0x8c>)
    2bd4:	4b1e      	ldr	r3, [pc, #120]	; (2c50 <_calendar_init+0x90>)
    2bd6:	4798      	blx	r3

	_rtc_dev = dev;
    2bd8:	4b1e      	ldr	r3, [pc, #120]	; (2c54 <_calendar_init+0x94>)
    2bda:	601c      	str	r4, [r3, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2bdc:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2bde:	f248 0103 	movw	r1, #32771	; 0x8003
    2be2:	6913      	ldr	r3, [r2, #16]
    2be4:	420b      	tst	r3, r1
    2be6:	d1fc      	bne.n	2be2 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2be8:	8813      	ldrh	r3, [r2, #0]
    2bea:	f013 0f02 	tst.w	r3, #2
    2bee:	d00f      	beq.n	2c10 <_calendar_init+0x50>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2bf0:	8813      	ldrh	r3, [r2, #0]
    2bf2:	f023 0302 	bic.w	r3, r3, #2
    2bf6:	041b      	lsls	r3, r3, #16
    2bf8:	0c1b      	lsrs	r3, r3, #16
    2bfa:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2bfc:	f248 0103 	movw	r1, #32771	; 0x8003
    2c00:	6913      	ldr	r3, [r2, #16]
    2c02:	420b      	tst	r3, r1
    2c04:	d1fc      	bne.n	2c00 <_calendar_init+0x40>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    2c06:	6822      	ldr	r2, [r4, #0]
    2c08:	6913      	ldr	r3, [r2, #16]
    2c0a:	f013 0f02 	tst.w	r3, #2
    2c0e:	d1fb      	bne.n	2c08 <_calendar_init+0x48>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2c10:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    2c12:	8813      	ldrh	r3, [r2, #0]
    2c14:	b29b      	uxth	r3, r3
    2c16:	f043 0301 	orr.w	r3, r3, #1
    2c1a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2c1c:	6913      	ldr	r3, [r2, #16]
    2c1e:	f013 0f01 	tst.w	r3, #1
    2c22:	d1fb      	bne.n	2c1c <_calendar_init+0x5c>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2c24:	6823      	ldr	r3, [r4, #0]
    2c26:	691a      	ldr	r2, [r3, #16]
    2c28:	f012 0f01 	tst.w	r2, #1
    2c2c:	d1fb      	bne.n	2c26 <_calendar_init+0x66>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2c2e:	f44f 4201 	mov.w	r2, #33024	; 0x8100
    2c32:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2c34:	f248 0103 	movw	r1, #32771	; 0x8003
    2c38:	691a      	ldr	r2, [r3, #16]
    2c3a:	420a      	tst	r2, r1
    2c3c:	d1fc      	bne.n	2c38 <_calendar_init+0x78>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    2c3e:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    2c40:	2000      	movs	r0, #0
    2c42:	6618      	str	r0, [r3, #96]	; 0x60
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
}
    2c44:	bd10      	pop	{r4, pc}
    2c46:	2000      	movs	r0, #0
    2c48:	e7c2      	b.n	2bd0 <_calendar_init+0x10>
    2c4a:	bf00      	nop
    2c4c:	0000b634 	.word	0x0000b634
    2c50:	00002a99 	.word	0x00002a99
    2c54:	20000288 	.word	0x20000288

00002c58 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2c58:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2c5a:	4604      	mov	r4, r0
    2c5c:	b170      	cbz	r0, 2c7c <_calendar_get_counter+0x24>
    2c5e:	6800      	ldr	r0, [r0, #0]
    2c60:	3000      	adds	r0, #0
    2c62:	bf18      	it	ne
    2c64:	2001      	movne	r0, #1
    2c66:	2299      	movs	r2, #153	; 0x99
    2c68:	4905      	ldr	r1, [pc, #20]	; (2c80 <_calendar_get_counter+0x28>)
    2c6a:	4b06      	ldr	r3, [pc, #24]	; (2c84 <_calendar_get_counter+0x2c>)
    2c6c:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2c6e:	6822      	ldr	r2, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2c70:	6913      	ldr	r3, [r2, #16]
    2c72:	f013 0f08 	tst.w	r3, #8
    2c76:	d1fb      	bne.n	2c70 <_calendar_get_counter+0x18>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    2c78:	6990      	ldr	r0, [r2, #24]
}
    2c7a:	bd10      	pop	{r4, pc}
    2c7c:	2000      	movs	r0, #0
    2c7e:	e7f2      	b.n	2c66 <_calendar_get_counter+0xe>
    2c80:	0000b634 	.word	0x0000b634
    2c84:	00002a99 	.word	0x00002a99

00002c88 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2c88:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    2c8a:	4b0f      	ldr	r3, [pc, #60]	; (2cc8 <RTC_Handler+0x40>)
    2c8c:	681c      	ldr	r4, [r3, #0]
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2c8e:	6822      	ldr	r2, [r4, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2c90:	8991      	ldrh	r1, [r2, #12]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    2c92:	8953      	ldrh	r3, [r2, #10]
    2c94:	b29b      	uxth	r3, r3
	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    2c96:	400b      	ands	r3, r1
    2c98:	f413 7f80 	tst.w	r3, #256	; 0x100
    2c9c:	d103      	bne.n	2ca6 <RTC_Handler+0x1e>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    2c9e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    2ca2:	d108      	bne.n	2cb6 <RTC_Handler+0x2e>
    2ca4:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    2ca6:	6863      	ldr	r3, [r4, #4]
    2ca8:	4620      	mov	r0, r4
    2caa:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2cac:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2cae:	f44f 7280 	mov.w	r2, #256	; 0x100
    2cb2:	819a      	strh	r2, [r3, #12]
    2cb4:	bd10      	pop	{r4, pc}
		dev->callback_tamper(dev);
    2cb6:	68a3      	ldr	r3, [r4, #8]
    2cb8:	4620      	mov	r0, r4
    2cba:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    2cbc:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    2cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2cc2:	819a      	strh	r2, [r3, #12]
}
    2cc4:	e7ee      	b.n	2ca4 <RTC_Handler+0x1c>
    2cc6:	bf00      	nop
    2cc8:	20000288 	.word	0x20000288

00002ccc <_mci_reset>:
 * \brief Reset the SDHC interface
 *
 * \param hw The pointer to MCI hardware instance
 */
static void _mci_reset(const void *const hw)
{
    2ccc:	b510      	push	{r4, lr}
	ASSERT(hw);
    2cce:	4604      	mov	r4, r0
    2cd0:	2234      	movs	r2, #52	; 0x34
    2cd2:	4906      	ldr	r1, [pc, #24]	; (2cec <_mci_reset+0x20>)
    2cd4:	3000      	adds	r0, #0
    2cd6:	bf18      	it	ne
    2cd8:	2001      	movne	r0, #1
    2cda:	4b05      	ldr	r3, [pc, #20]	; (2cf0 <_mci_reset+0x24>)
    2cdc:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    2cde:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2ce2:	f043 0302 	orr.w	r3, r3, #2
    2ce6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    2cea:	bd10      	pop	{r4, pc}
    2cec:	0000b64c 	.word	0x0000b64c
    2cf0:	00002a99 	.word	0x00002a99

00002cf4 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    2cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cf8:	4688      	mov	r8, r1
    2cfa:	4615      	mov	r5, r2
    2cfc:	461f      	mov	r7, r3
	uint32_t sr;
	ASSERT(hw);
    2cfe:	4604      	mov	r4, r0
    2d00:	1c06      	adds	r6, r0, #0
    2d02:	bf18      	it	ne
    2d04:	2601      	movne	r6, #1
    2d06:	2299      	movs	r2, #153	; 0x99
    2d08:	493c      	ldr	r1, [pc, #240]	; (2dfc <_mci_send_cmd_execute+0x108>)
    2d0a:	4630      	mov	r0, r6
    2d0c:	4b3c      	ldr	r3, [pc, #240]	; (2e00 <_mci_send_cmd_execute+0x10c>)
    2d0e:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    2d10:	0229      	lsls	r1, r5, #8
    2d12:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    2d16:	ea41 0108 	orr.w	r1, r1, r8

	if (cmd & MCI_RESP_PRESENT) {
    2d1a:	f415 7f80 	tst.w	r5, #256	; 0x100
    2d1e:	d004      	beq.n	2d2a <_mci_send_cmd_execute+0x36>

		if (cmd & MCI_RESP_136) {
    2d20:	f415 6f00 	tst.w	r5, #2048	; 0x800
    2d24:	d016      	beq.n	2d54 <_mci_send_cmd_execute+0x60>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    2d26:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    2d2a:	f415 4f80 	tst.w	r5, #16384	; 0x4000
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    2d2e:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    2d32:	bf14      	ite	ne
    2d34:	f043 0310 	orrne.w	r3, r3, #16
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    2d38:	f003 03ef 	andeq.w	r3, r3, #239	; 0xef
    2d3c:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    2d40:	60a7      	str	r7, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    2d42:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    2d44:	81e3      	strh	r3, [r4, #14]

	/* Wait end of command */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (cmd & MCI_RESP_CRC) {
    2d46:	f405 5280 	and.w	r2, r5, #4096	; 0x1000
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    2d4a:	f240 277f 	movw	r7, #639	; 0x27f
			if (sr
    2d4e:	f240 205d 	movw	r0, #605	; 0x25d
    2d52:	e00d      	b.n	2d70 <_mci_send_cmd_execute+0x7c>
		} else if (cmd & MCI_RESP_BUSY) {
    2d54:	f415 5f00 	tst.w	r5, #8192	; 0x2000
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    2d58:	bf14      	ite	ne
    2d5a:	f041 0103 	orrne.w	r1, r1, #3
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    2d5e:	f041 0102 	orreq.w	r1, r1, #2
    2d62:	e7e2      	b.n	2d2a <_mci_send_cmd_execute+0x36>
			if (sr
    2d64:	423b      	tst	r3, r7
    2d66:	d116      	bne.n	2d96 <_mci_send_cmd_execute+0xa2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2d68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    2d6a:	f013 0f01 	tst.w	r3, #1
    2d6e:	d11f      	bne.n	2db0 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    2d70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2d72:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    2d74:	2a00      	cmp	r2, #0
    2d76:	d0f5      	beq.n	2d64 <_mci_send_cmd_execute+0x70>
			if (sr
    2d78:	4203      	tst	r3, r0
    2d7a:	d0f5      	beq.n	2d68 <_mci_send_cmd_execute+0x74>
				_mci_reset(hw);
    2d7c:	4620      	mov	r0, r4
    2d7e:	4b21      	ldr	r3, [pc, #132]	; (2e04 <_mci_send_cmd_execute+0x110>)
    2d80:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    2d82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2d84:	b29b      	uxth	r3, r3
    2d86:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2d8a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2d8e:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2d90:	2000      	movs	r0, #0
    2d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				_mci_reset(hw);
    2d96:	4620      	mov	r0, r4
    2d98:	4b1a      	ldr	r3, [pc, #104]	; (2e04 <_mci_send_cmd_execute+0x110>)
    2d9a:	4798      	blx	r3
    2d9c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2d9e:	b29b      	uxth	r3, r3
    2da0:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2da4:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2da8:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2daa:	2000      	movs	r0, #0
    2dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2db0:	f011 0f20 	tst.w	r1, #32
    2db4:	d104      	bne.n	2dc0 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    2db6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2db8:	b29b      	uxth	r3, r3
    2dba:	f043 0301 	orr.w	r3, r3, #1
    2dbe:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2dc0:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2dc4:	d102      	bne.n	2dcc <_mci_send_cmd_execute+0xd8>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    2dc6:	2001      	movs	r0, #1
}
    2dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(hw);
    2dcc:	227f      	movs	r2, #127	; 0x7f
    2dce:	490b      	ldr	r1, [pc, #44]	; (2dfc <_mci_send_cmd_execute+0x108>)
    2dd0:	4630      	mov	r0, r6
    2dd2:	4b0b      	ldr	r3, [pc, #44]	; (2e00 <_mci_send_cmd_execute+0x10c>)
    2dd4:	4798      	blx	r3
	return ((Sdhc *)hw)->PSR.reg;
    2dd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2dd8:	f04f 33ff 	mov.w	r3, #4294967295
	} while (!(psr & SDHC_PSR_DATLL(1)));
    2ddc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    2de0:	d108      	bne.n	2df4 <_mci_send_cmd_execute+0x100>
    2de2:	6a62      	ldr	r2, [r4, #36]	; 0x24
		if (busy_wait-- == 0) {
    2de4:	3b01      	subs	r3, #1
    2de6:	d1f9      	bne.n	2ddc <_mci_send_cmd_execute+0xe8>
			_mci_reset(hw);
    2de8:	4620      	mov	r0, r4
    2dea:	4b06      	ldr	r3, [pc, #24]	; (2e04 <_mci_send_cmd_execute+0x110>)
    2dec:	4798      	blx	r3
			return false;
    2dee:	2000      	movs	r0, #0
    2df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
    2df4:	2001      	movs	r0, #1
    2df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dfa:	bf00      	nop
    2dfc:	0000b64c 	.word	0x0000b64c
    2e00:	00002a99 	.word	0x00002a99
    2e04:	00002ccd 	.word	0x00002ccd

00002e08 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    2e08:	b538      	push	{r3, r4, r5, lr}
    2e0a:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2e0c:	4605      	mov	r5, r0
    2e0e:	b340      	cbz	r0, 2e62 <_mci_sync_init+0x5a>
    2e10:	1c08      	adds	r0, r1, #0
    2e12:	bf18      	it	ne
    2e14:	2001      	movne	r0, #1
    2e16:	22d8      	movs	r2, #216	; 0xd8
    2e18:	4913      	ldr	r1, [pc, #76]	; (2e68 <_mci_sync_init+0x60>)
    2e1a:	4b14      	ldr	r3, [pc, #80]	; (2e6c <_mci_sync_init+0x64>)
    2e1c:	4798      	blx	r3

	mci_dev->hw = hw;
    2e1e:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    2e20:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2e24:	f043 0301 	orr.w	r3, r3, #1
    2e28:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    2e2c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    2e30:	f013 0f01 	tst.w	r3, #1
    2e34:	d1fa      	bne.n	2e2c <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
    2e36:	230e      	movs	r3, #14
    2e38:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    2e3c:	230f      	movs	r3, #15
    2e3e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    2e42:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2e44:	b29b      	uxth	r3, r3
    2e46:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2e4a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2e4e:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    2e50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2e52:	b29b      	uxth	r3, r3
    2e54:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2e58:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2e5c:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    2e5e:	2000      	movs	r0, #0
    2e60:	bd38      	pop	{r3, r4, r5, pc}
    2e62:	2000      	movs	r0, #0
    2e64:	e7d7      	b.n	2e16 <_mci_sync_init+0xe>
    2e66:	bf00      	nop
    2e68:	0000b64c 	.word	0x0000b64c
    2e6c:	00002a99 	.word	0x00002a99

00002e70 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    2e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e72:	4615      	mov	r5, r2
    2e74:	461c      	mov	r4, r3
    2e76:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    2e7a:	4606      	mov	r6, r0
    2e7c:	b1d8      	cbz	r0, 2eb6 <_mci_sync_select_device+0x46>
    2e7e:	6800      	ldr	r0, [r0, #0]
    2e80:	3000      	adds	r0, #0
    2e82:	bf18      	it	ne
    2e84:	2001      	movne	r0, #1
    2e86:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e8a:	493a      	ldr	r1, [pc, #232]	; (2f74 <_mci_sync_select_device+0x104>)
    2e8c:	4b3a      	ldr	r3, [pc, #232]	; (2f78 <_mci_sync_select_device+0x108>)
    2e8e:	4798      	blx	r3
	hw = mci_dev->hw;
    2e90:	6833      	ldr	r3, [r6, #0]

	if (high_speed) {
    2e92:	b197      	cbz	r7, 2eba <_mci_sync_select_device+0x4a>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    2e94:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2e98:	f042 0204 	orr.w	r2, r2, #4
    2e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    2ea0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    2ea2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    2ea6:	d00f      	beq.n	2ec8 <_mci_sync_select_device+0x58>
		_mci_set_speed(hw, clock, CONF_SDHC1_CLK_GEN_SEL);
	}

	switch (bus_width) {
    2ea8:	2c01      	cmp	r4, #1
    2eaa:	d053      	beq.n	2f54 <_mci_sync_select_device+0xe4>
    2eac:	2c04      	cmp	r4, #4
    2eae:	d059      	beq.n	2f64 <_mci_sync_select_device+0xf4>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    2eb0:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    2eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eb6:	2000      	movs	r0, #0
    2eb8:	e7e5      	b.n	2e86 <_mci_sync_select_device+0x16>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    2eba:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2ebe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2ec6:	e7eb      	b.n	2ea0 <_mci_sync_select_device+0x30>
	tmp = ((Sdhc *)hw)->CCR.reg;
    2ec8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    2eca:	f012 0f04 	tst.w	r2, #4
    2ece:	d009      	beq.n	2ee4 <_mci_sync_select_device+0x74>
	return ((Sdhc *)hw)->PSR.reg;
    2ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2ed2:	f012 0f03 	tst.w	r2, #3
    2ed6:	d1fb      	bne.n	2ed0 <_mci_sync_select_device+0x60>
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    2ed8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2eda:	f022 0204 	bic.w	r2, r2, #4
    2ede:	0412      	lsls	r2, r2, #16
    2ee0:	0c12      	lsrs	r2, r2, #16
    2ee2:	859a      	strh	r2, [r3, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2ee4:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2ee6:	f3c1 4107 	ubfx	r1, r1, #16, #8
		clkbase = clkbase / 2;
    2eea:	4824      	ldr	r0, [pc, #144]	; (2f7c <_mci_sync_select_device+0x10c>)
    2eec:	4a24      	ldr	r2, [pc, #144]	; (2f80 <_mci_sync_select_device+0x110>)
    2eee:	2900      	cmp	r1, #0
    2ef0:	bf18      	it	ne
    2ef2:	4602      	movne	r2, r0
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    2ef4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    2ef6:	f021 0120 	bic.w	r1, r1, #32
    2efa:	0409      	lsls	r1, r1, #16
    2efc:	0c09      	lsrs	r1, r1, #16
    2efe:	8599      	strh	r1, [r3, #44]	; 0x2c
		div = (clkbase / speed) / 2;
    2f00:	fbb2 f2f5 	udiv	r2, r2, r5
    2f04:	0852      	lsrs	r2, r2, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    2f06:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    2f0a:	f011 0f04 	tst.w	r1, #4
    2f0e:	d002      	beq.n	2f16 <_mci_sync_select_device+0xa6>
		div = 1;
    2f10:	2a00      	cmp	r2, #0
    2f12:	bf08      	it	eq
    2f14:	2201      	moveq	r2, #1
	tmp = ((Sdhc *)hw)->CCR.reg;
    2f16:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    2f18:	b2c9      	uxtb	r1, r1
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    2f1a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    2f1e:	b289      	uxth	r1, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    2f20:	8599      	strh	r1, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2f22:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    2f24:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    2f28:	0409      	lsls	r1, r1, #16
    2f2a:	0c09      	lsrs	r1, r1, #16
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    2f2c:	0892      	lsrs	r2, r2, #2
    2f2e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    2f32:	430a      	orrs	r2, r1
	((Sdhc *)hw)->CCR.reg = tmp;
    2f34:	859a      	strh	r2, [r3, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    2f36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2f38:	b292      	uxth	r2, r2
    2f3a:	f042 0201 	orr.w	r2, r2, #1
    2f3e:	859a      	strh	r2, [r3, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2f40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    2f42:	f012 0f02 	tst.w	r2, #2
    2f46:	d0fb      	beq.n	2f40 <_mci_sync_select_device+0xd0>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    2f48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2f4a:	b292      	uxth	r2, r2
    2f4c:	f042 0204 	orr.w	r2, r2, #4
    2f50:	859a      	strh	r2, [r3, #44]	; 0x2c
    2f52:	e7a9      	b.n	2ea8 <_mci_sync_select_device+0x38>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    2f54:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2f58:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    2f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    2f60:	2000      	movs	r0, #0
    2f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    2f64:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2f68:	f042 0202 	orr.w	r2, r2, #2
    2f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2f70:	2000      	movs	r0, #0
    2f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f74:	0000b64c 	.word	0x0000b64c
    2f78:	00002a99 	.word	0x00002a99
    2f7c:	005b8d80 	.word	0x005b8d80
    2f80:	00b71b00 	.word	0x00b71b00

00002f84 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2f84:	2000      	movs	r0, #0
    2f86:	4770      	bx	lr

00002f88 <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    2f88:	2900      	cmp	r1, #0

	default:
		/* Slot number wrong */
		return 0;
	}
}
    2f8a:	bf0c      	ite	eq
    2f8c:	2004      	moveq	r0, #4
    2f8e:	2000      	movne	r0, #0
    2f90:	4770      	bx	lr

00002f92 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    2f92:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2f94:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2f96:	f3c0 5040 	ubfx	r0, r0, #21, #1
    2f9a:	4770      	bx	lr

00002f9c <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    2f9c:	b500      	push	{lr}
    2f9e:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    2fa0:	f240 1249 	movw	r2, #329	; 0x149
    2fa4:	490b      	ldr	r1, [pc, #44]	; (2fd4 <_mci_sync_send_clock+0x38>)
    2fa6:	3000      	adds	r0, #0
    2fa8:	bf18      	it	ne
    2faa:	2001      	movne	r0, #1
    2fac:	4b0a      	ldr	r3, [pc, #40]	; (2fd8 <_mci_sync_send_clock+0x3c>)
    2fae:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    2fb0:	2300      	movs	r3, #0
    2fb2:	9301      	str	r3, [sp, #4]
    2fb4:	9a01      	ldr	r2, [sp, #4]
    2fb6:	f241 3387 	movw	r3, #4999	; 0x1387
    2fba:	429a      	cmp	r2, r3
    2fbc:	d806      	bhi.n	2fcc <_mci_sync_send_clock+0x30>
    2fbe:	461a      	mov	r2, r3
    2fc0:	9b01      	ldr	r3, [sp, #4]
    2fc2:	3301      	adds	r3, #1
    2fc4:	9301      	str	r3, [sp, #4]
    2fc6:	9b01      	ldr	r3, [sp, #4]
    2fc8:	4293      	cmp	r3, r2
    2fca:	d9f9      	bls.n	2fc0 <_mci_sync_send_clock+0x24>
		;
}
    2fcc:	b003      	add	sp, #12
    2fce:	f85d fb04 	ldr.w	pc, [sp], #4
    2fd2:	bf00      	nop
    2fd4:	0000b64c 	.word	0x0000b64c
    2fd8:	00002a99 	.word	0x00002a99

00002fdc <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    2fdc:	b570      	push	{r4, r5, r6, lr}
    2fde:	460d      	mov	r5, r1
    2fe0:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2fe2:	4604      	mov	r4, r0
    2fe4:	b178      	cbz	r0, 3006 <_mci_sync_send_cmd+0x2a>
    2fe6:	6800      	ldr	r0, [r0, #0]
    2fe8:	3000      	adds	r0, #0
    2fea:	bf18      	it	ne
    2fec:	2001      	movne	r0, #1
    2fee:	f44f 72ab 	mov.w	r2, #342	; 0x156
    2ff2:	490c      	ldr	r1, [pc, #48]	; (3024 <_mci_sync_send_cmd+0x48>)
    2ff4:	4b0c      	ldr	r3, [pc, #48]	; (3028 <_mci_sync_send_cmd+0x4c>)
    2ff6:	4798      	blx	r3
	hw = mci_dev->hw;
    2ff8:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2ffa:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    2ffc:	f013 0f01 	tst.w	r3, #1
    3000:	d003      	beq.n	300a <_mci_sync_send_cmd+0x2e>
		return false;
    3002:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    3004:	bd70      	pop	{r4, r5, r6, pc}
    3006:	2000      	movs	r0, #0
    3008:	e7f1      	b.n	2fee <_mci_sync_send_cmd+0x12>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    300a:	8983      	ldrh	r3, [r0, #12]
    300c:	f023 0301 	bic.w	r3, r3, #1
    3010:	041b      	lsls	r3, r3, #16
    3012:	0c1b      	lsrs	r3, r3, #16
    3014:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    3016:	2100      	movs	r1, #0
    3018:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    301a:	4633      	mov	r3, r6
    301c:	462a      	mov	r2, r5
    301e:	4c03      	ldr	r4, [pc, #12]	; (302c <_mci_sync_send_cmd+0x50>)
    3020:	47a0      	blx	r4
    3022:	bd70      	pop	{r4, r5, r6, pc}
    3024:	0000b64c 	.word	0x0000b64c
    3028:	00002a99 	.word	0x00002a99
    302c:	00002cf5 	.word	0x00002cf5

00003030 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    3030:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    3032:	4604      	mov	r4, r0
    3034:	b158      	cbz	r0, 304e <_mci_sync_get_response+0x1e>
    3036:	6800      	ldr	r0, [r0, #0]
    3038:	3000      	adds	r0, #0
    303a:	bf18      	it	ne
    303c:	2001      	movne	r0, #1
    303e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    3042:	4904      	ldr	r1, [pc, #16]	; (3054 <_mci_sync_get_response+0x24>)
    3044:	4b04      	ldr	r3, [pc, #16]	; (3058 <_mci_sync_get_response+0x28>)
    3046:	4798      	blx	r3
	hw = mci_dev->hw;
    3048:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    304a:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    304c:	bd10      	pop	{r4, pc}
    304e:	2000      	movs	r0, #0
    3050:	e7f5      	b.n	303e <_mci_sync_get_response+0xe>
    3052:	bf00      	nop
    3054:	0000b64c 	.word	0x0000b64c
    3058:	00002a99 	.word	0x00002a99

0000305c <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    305c:	b538      	push	{r3, r4, r5, lr}
    305e:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    3060:	4605      	mov	r5, r0
    3062:	b160      	cbz	r0, 307e <_mci_sync_get_response_128+0x22>
    3064:	6800      	ldr	r0, [r0, #0]
    3066:	3000      	adds	r0, #0
    3068:	bf18      	it	ne
    306a:	2001      	movne	r0, #1
    306c:	f240 1277 	movw	r2, #375	; 0x177
    3070:	4911      	ldr	r1, [pc, #68]	; (30b8 <_mci_sync_get_response_128+0x5c>)
    3072:	4b12      	ldr	r3, [pc, #72]	; (30bc <_mci_sync_get_response_128+0x60>)
    3074:	4798      	blx	r3
	hw = mci_dev->hw;
    3076:	682d      	ldr	r5, [r5, #0]
    3078:	2102      	movs	r1, #2
    307a:	2303      	movs	r3, #3
    307c:	e00b      	b.n	3096 <_mci_sync_get_response_128+0x3a>
    307e:	2000      	movs	r0, #0
    3080:	e7f4      	b.n	306c <_mci_sync_get_response_128+0x10>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    3082:	0c10      	lsrs	r0, r2, #16
    3084:	7020      	strb	r0, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    3086:	0a10      	lsrs	r0, r2, #8
    3088:	7060      	strb	r0, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    308a:	70a2      	strb	r2, [r4, #2]
		response++;
    308c:	3403      	adds	r4, #3
    308e:	3b01      	subs	r3, #1
    3090:	b2db      	uxtb	r3, r3
    3092:	3901      	subs	r1, #1
    3094:	b2c9      	uxtb	r1, r1
    3096:	1d1a      	adds	r2, r3, #4
    3098:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
		if (i != 3) {
    309c:	2b03      	cmp	r3, #3
    309e:	d0f0      	beq.n	3082 <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    30a0:	0e10      	lsrs	r0, r2, #24
    30a2:	7020      	strb	r0, [r4, #0]
		*response = (response_32 >> 16) & 0xFF;
    30a4:	0c10      	lsrs	r0, r2, #16
    30a6:	7060      	strb	r0, [r4, #1]
		*response = (response_32 >> 8) & 0xFF;
    30a8:	0a10      	lsrs	r0, r2, #8
    30aa:	70a0      	strb	r0, [r4, #2]
		*response = (response_32 >> 0) & 0xFF;
    30ac:	70e2      	strb	r2, [r4, #3]
		response++;
    30ae:	3404      	adds	r4, #4
	for (int8_t i = 3; i >= 0; i--) {
    30b0:	f011 0f80 	tst.w	r1, #128	; 0x80
    30b4:	d0eb      	beq.n	308e <_mci_sync_get_response_128+0x32>
    30b6:	bd38      	pop	{r3, r4, r5, pc}
    30b8:	0000b64c 	.word	0x0000b64c
    30bc:	00002a99 	.word	0x00002a99

000030c0 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    30c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c4:	460d      	mov	r5, r1
    30c6:	4690      	mov	r8, r2
    30c8:	461f      	mov	r7, r3
    30ca:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    30ce:	4604      	mov	r4, r0
    30d0:	2800      	cmp	r0, #0
    30d2:	d032      	beq.n	313a <_mci_sync_adtc_start+0x7a>
    30d4:	6800      	ldr	r0, [r0, #0]
    30d6:	3000      	adds	r0, #0
    30d8:	bf18      	it	ne
    30da:	2001      	movne	r0, #1
    30dc:	f240 1293 	movw	r2, #403	; 0x193
    30e0:	4920      	ldr	r1, [pc, #128]	; (3164 <_mci_sync_adtc_start+0xa4>)
    30e2:	4b21      	ldr	r3, [pc, #132]	; (3168 <_mci_sync_adtc_start+0xa8>)
    30e4:	4798      	blx	r3
	hw = mci_dev->hw;
    30e6:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    30e8:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    30ea:	f013 0f01 	tst.w	r3, #1
    30ee:	d12f      	bne.n	3150 <_mci_sync_adtc_start+0x90>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    30f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    30f2:	f013 0f02 	tst.w	r3, #2
    30f6:	d12e      	bne.n	3156 <_mci_sync_adtc_start+0x96>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    30f8:	f405 4300 	and.w	r3, r5, #32768	; 0x8000
		tmr = SDHC_TMR_DTDSEL_WRITE;
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
    30fc:	2b00      	cmp	r3, #0
    30fe:	bf14      	ite	ne
    3100:	2300      	movne	r3, #0
    3102:	2310      	moveq	r3, #16
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    3104:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    3108:	d104      	bne.n	3114 <_mci_sync_adtc_start+0x54>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    310a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    310e:	d016      	beq.n	313e <_mci_sync_adtc_start+0x7e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    3110:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    3114:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    3116:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    3118:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    311c:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    311e:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    3120:	2200      	movs	r2, #0
    3122:	2300      	movs	r3, #0
    3124:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    3128:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    312a:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    312c:	4643      	mov	r3, r8
    312e:	462a      	mov	r2, r5
    3130:	2120      	movs	r1, #32
    3132:	4c0e      	ldr	r4, [pc, #56]	; (316c <_mci_sync_adtc_start+0xac>)
    3134:	47a0      	blx	r4
    3136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    313a:	2000      	movs	r0, #0
    313c:	e7ce      	b.n	30dc <_mci_sync_adtc_start+0x1c>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    313e:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    3142:	d1e7      	bne.n	3114 <_mci_sync_adtc_start+0x54>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    3144:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    3148:	d008      	beq.n	315c <_mci_sync_adtc_start+0x9c>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    314a:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    314e:	e7e1      	b.n	3114 <_mci_sync_adtc_start+0x54>
		return false;
    3150:	2000      	movs	r0, #0
    3152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3156:	2000      	movs	r0, #0
    3158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    315c:	2000      	movs	r0, #0
}
    315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3162:	bf00      	nop
    3164:	0000b64c 	.word	0x0000b64c
    3168:	00002a99 	.word	0x00002a99
    316c:	00002cf5 	.word	0x00002cf5

00003170 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    3170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3174:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    3176:	4605      	mov	r5, r0
    3178:	2800      	cmp	r0, #0
    317a:	d04d      	beq.n	3218 <_mci_sync_read_word+0xa8>
    317c:	6800      	ldr	r0, [r0, #0]
    317e:	3000      	adds	r0, #0
    3180:	bf18      	it	ne
    3182:	2001      	movne	r0, #1
    3184:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    3188:	4939      	ldr	r1, [pc, #228]	; (3270 <_mci_sync_read_word+0x100>)
    318a:	4b3a      	ldr	r3, [pc, #232]	; (3274 <_mci_sync_read_word+0x104>)
    318c:	4798      	blx	r3
	hw = mci_dev->hw;
    318e:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    3190:	8a2a      	ldrh	r2, [r5, #16]
    3192:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    3196:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    319a:	fb02 f808 	mul.w	r8, r2, r8
    319e:	ea4f 79e8 	mov.w	r9, r8, asr #31
    31a2:	ebb8 0800 	subs.w	r8, r8, r0
    31a6:	eb69 0901 	sbc.w	r9, r9, r1
    31aa:	f1b9 0f00 	cmp.w	r9, #0
    31ae:	bf08      	it	eq
    31b0:	f1b8 0f04 	cmpeq.w	r8, #4
    31b4:	d245      	bcs.n	3242 <_mci_sync_read_word+0xd2>
    31b6:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    31ba:	b292      	uxth	r2, r2
    31bc:	2300      	movs	r3, #0
    31be:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 327c <_mci_sync_read_word+0x10c>
    31c2:	47c0      	blx	r8
    31c4:	4313      	orrs	r3, r2
    31c6:	d043      	beq.n	3250 <_mci_sync_read_word+0xe0>
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    31c8:	2e04      	cmp	r6, #4
    31ca:	d02d      	beq.n	3228 <_mci_sync_read_word+0xb8>
	return ((Sdhc *)hw)->BDPR.reg;
    31cc:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    31ce:	1e72      	subs	r2, r6, #1
    31d0:	2a02      	cmp	r2, #2
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    31d2:	bf9c      	itt	ls
    31d4:	b2db      	uxtbls	r3, r3
    31d6:	603b      	strls	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    31d8:	b2f6      	uxtb	r6, r6
    31da:	2700      	movs	r7, #0
    31dc:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    31e0:	18b6      	adds	r6, r6, r2
    31e2:	415f      	adcs	r7, r3
    31e4:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    31e8:	8a2a      	ldrh	r2, [r5, #16]
    31ea:	8a68      	ldrh	r0, [r5, #18]
    31ec:	fba2 2300 	umull	r2, r3, r2, r0
    31f0:	429f      	cmp	r7, r3
    31f2:	bf08      	it	eq
    31f4:	4296      	cmpeq	r6, r2
    31f6:	d321      	bcc.n	323c <_mci_sync_read_word+0xcc>
	return ((Sdhc *)hw)->EISTR.reg;
    31f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    31fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
    31fe:	b9bb      	cbnz	r3, 3230 <_mci_sync_read_word+0xc0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3200:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    3202:	f013 0f02 	tst.w	r3, #2
    3206:	d0f7      	beq.n	31f8 <_mci_sync_read_word+0x88>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    3208:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    320a:	b29b      	uxth	r3, r3
    320c:	f043 0302 	orr.w	r3, r3, #2
    3210:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    3212:	2001      	movs	r0, #1
    3214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3218:	2000      	movs	r0, #0
    321a:	e7b3      	b.n	3184 <_mci_sync_read_word+0x14>
				_mci_reset(hw);
    321c:	4620      	mov	r0, r4
    321e:	4b16      	ldr	r3, [pc, #88]	; (3278 <_mci_sync_read_word+0x108>)
    3220:	4798      	blx	r3
				return false;
    3222:	2000      	movs	r0, #0
    3224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    3228:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    322a:	603b      	str	r3, [r7, #0]
    322c:	2604      	movs	r6, #4
    322e:	e7d3      	b.n	31d8 <_mci_sync_read_word+0x68>
			_mci_reset(hw);
    3230:	4620      	mov	r0, r4
    3232:	4b11      	ldr	r3, [pc, #68]	; (3278 <_mci_sync_read_word+0x108>)
    3234:	4798      	blx	r3
			return false;
    3236:	2000      	movs	r0, #0
    3238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    323c:	2001      	movs	r0, #1
    323e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    3242:	b292      	uxth	r2, r2
    3244:	2300      	movs	r3, #0
    3246:	4e0d      	ldr	r6, [pc, #52]	; (327c <_mci_sync_read_word+0x10c>)
    3248:	47b0      	blx	r6
    324a:	4313      	orrs	r3, r2
    324c:	d1ec      	bne.n	3228 <_mci_sync_read_word+0xb8>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    324e:	2604      	movs	r6, #4
	return ((Sdhc *)hw)->EISTR.reg;
    3250:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    3252:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3256:	2b00      	cmp	r3, #0
    3258:	d1e0      	bne.n	321c <_mci_sync_read_word+0xac>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    325a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    325c:	f013 0f20 	tst.w	r3, #32
    3260:	d0f6      	beq.n	3250 <_mci_sync_read_word+0xe0>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    3262:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3264:	b29b      	uxth	r3, r3
    3266:	f043 0320 	orr.w	r3, r3, #32
    326a:	8623      	strh	r3, [r4, #48]	; 0x30
    326c:	e7ac      	b.n	31c8 <_mci_sync_read_word+0x58>
    326e:	bf00      	nop
    3270:	0000b64c 	.word	0x0000b64c
    3274:	00002a99 	.word	0x00002a99
    3278:	00002ccd 	.word	0x00002ccd
    327c:	00007add 	.word	0x00007add

00003280 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    3280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3282:	460e      	mov	r6, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    3284:	4605      	mov	r5, r0
    3286:	2800      	cmp	r0, #0
    3288:	d03d      	beq.n	3306 <_mci_sync_write_word+0x86>
    328a:	6800      	ldr	r0, [r0, #0]
    328c:	3000      	adds	r0, #0
    328e:	bf18      	it	ne
    3290:	2001      	movne	r0, #1
    3292:	f240 220f 	movw	r2, #527	; 0x20f
    3296:	4923      	ldr	r1, [pc, #140]	; (3324 <_mci_sync_write_word+0xa4>)
    3298:	4b23      	ldr	r3, [pc, #140]	; (3328 <_mci_sync_write_word+0xa8>)
    329a:	4798      	blx	r3
	hw = mci_dev->hw;
    329c:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    329e:	8a2a      	ldrh	r2, [r5, #16]
    32a0:	2300      	movs	r3, #0
    32a2:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    32a6:	4f21      	ldr	r7, [pc, #132]	; (332c <_mci_sync_write_word+0xac>)
    32a8:	47b8      	blx	r7
    32aa:	4313      	orrs	r3, r2
    32ac:	d10c      	bne.n	32c8 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    32ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    32b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    32b4:	bb4b      	cbnz	r3, 330a <_mci_sync_write_word+0x8a>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    32b6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    32b8:	f013 0f10 	tst.w	r3, #16
    32bc:	d0f7      	beq.n	32ae <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    32be:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    32c0:	b29b      	uxth	r3, r3
    32c2:	f043 0310 	orr.w	r3, r3, #16
    32c6:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    32c8:	6226      	str	r6, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    32ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    32ce:	3204      	adds	r2, #4
    32d0:	f143 0300 	adc.w	r3, r3, #0
    32d4:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    32d8:	8a28      	ldrh	r0, [r5, #16]
    32da:	8a6e      	ldrh	r6, [r5, #18]
    32dc:	fba0 0106 	umull	r0, r1, r0, r6
    32e0:	428b      	cmp	r3, r1
    32e2:	bf08      	it	eq
    32e4:	4282      	cmpeq	r2, r0
    32e6:	d31a      	bcc.n	331e <_mci_sync_write_word+0x9e>
	return ((Sdhc *)hw)->EISTR.reg;
    32e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    32ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
    32ee:	b98b      	cbnz	r3, 3314 <_mci_sync_write_word+0x94>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    32f0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    32f2:	f013 0f02 	tst.w	r3, #2
    32f6:	d0f7      	beq.n	32e8 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    32f8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    32fa:	b29b      	uxth	r3, r3
    32fc:	f043 0302 	orr.w	r3, r3, #2
    3300:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    3302:	2001      	movs	r0, #1
    3304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3306:	2000      	movs	r0, #0
    3308:	e7c3      	b.n	3292 <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    330a:	4620      	mov	r0, r4
    330c:	4b08      	ldr	r3, [pc, #32]	; (3330 <_mci_sync_write_word+0xb0>)
    330e:	4798      	blx	r3
				return false;
    3310:	2000      	movs	r0, #0
    3312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    3314:	4620      	mov	r0, r4
    3316:	4b06      	ldr	r3, [pc, #24]	; (3330 <_mci_sync_write_word+0xb0>)
    3318:	4798      	blx	r3
			return false;
    331a:	2000      	movs	r0, #0
    331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    331e:	2001      	movs	r0, #1
}
    3320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3322:	bf00      	nop
    3324:	0000b64c 	.word	0x0000b64c
    3328:	00002a99 	.word	0x00002a99
    332c:	00007add 	.word	0x00007add
    3330:	00002ccd 	.word	0x00002ccd

00003334 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    3334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3338:	460e      	mov	r6, r1
    333a:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    333c:	4607      	mov	r7, r0
    333e:	b300      	cbz	r0, 3382 <_mci_sync_start_read_blocks+0x4e>
    3340:	6800      	ldr	r0, [r0, #0]
    3342:	3000      	adds	r0, #0
    3344:	bf18      	it	ne
    3346:	2001      	movne	r0, #1
    3348:	4d18      	ldr	r5, [pc, #96]	; (33ac <_mci_sync_start_read_blocks+0x78>)
    334a:	f240 223e 	movw	r2, #574	; 0x23e
    334e:	4629      	mov	r1, r5
    3350:	4c17      	ldr	r4, [pc, #92]	; (33b0 <_mci_sync_start_read_blocks+0x7c>)
    3352:	47a0      	blx	r4
	ASSERT(nb_block);
    3354:	f240 223f 	movw	r2, #575	; 0x23f
    3358:	4629      	mov	r1, r5
    335a:	f118 0000 	adds.w	r0, r8, #0
    335e:	bf18      	it	ne
    3360:	2001      	movne	r0, #1
    3362:	47a0      	blx	r4
	ASSERT(dst);
    3364:	f44f 7210 	mov.w	r2, #576	; 0x240
    3368:	4629      	mov	r1, r5
    336a:	1c30      	adds	r0, r6, #0
    336c:	bf18      	it	ne
    336e:	2001      	movne	r0, #1
    3370:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    3372:	8a3d      	ldrh	r5, [r7, #16]
    3374:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    3378:	b1a5      	cbz	r5, 33a4 <_mci_sync_start_read_blocks+0x70>
    337a:	2404      	movs	r4, #4
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    337c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 33b4 <_mci_sync_start_read_blocks+0x80>
    3380:	e004      	b.n	338c <_mci_sync_start_read_blocks+0x58>
    3382:	2000      	movs	r0, #0
    3384:	e7e0      	b.n	3348 <_mci_sync_start_read_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    3386:	4426      	add	r6, r4
	while (nb_data) {
    3388:	1b2d      	subs	r5, r5, r4
    338a:	d00b      	beq.n	33a4 <_mci_sync_start_read_blocks+0x70>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    338c:	4631      	mov	r1, r6
    338e:	4638      	mov	r0, r7
    3390:	47c0      	blx	r8
		if (nb_data < nbytes) {
    3392:	42ac      	cmp	r4, r5
    3394:	d9f7      	bls.n	3386 <_mci_sync_start_read_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    3396:	8a3b      	ldrh	r3, [r7, #16]
    3398:	fb93 f2f4 	sdiv	r2, r3, r4
    339c:	fb04 3412 	mls	r4, r4, r2, r3
    33a0:	b2e4      	uxtb	r4, r4
    33a2:	e7f0      	b.n	3386 <_mci_sync_start_read_blocks+0x52>
	}

	return true;
}
    33a4:	2001      	movs	r0, #1
    33a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33aa:	bf00      	nop
    33ac:	0000b64c 	.word	0x0000b64c
    33b0:	00002a99 	.word	0x00002a99
    33b4:	00003171 	.word	0x00003171

000033b8 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    33b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33bc:	460e      	mov	r6, r1
    33be:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    33c0:	4607      	mov	r7, r0
    33c2:	b300      	cbz	r0, 3406 <_mci_sync_start_write_blocks+0x4e>
    33c4:	6800      	ldr	r0, [r0, #0]
    33c6:	3000      	adds	r0, #0
    33c8:	bf18      	it	ne
    33ca:	2001      	movne	r0, #1
    33cc:	4d18      	ldr	r5, [pc, #96]	; (3430 <_mci_sync_start_write_blocks+0x78>)
    33ce:	f240 225a 	movw	r2, #602	; 0x25a
    33d2:	4629      	mov	r1, r5
    33d4:	4c17      	ldr	r4, [pc, #92]	; (3434 <_mci_sync_start_write_blocks+0x7c>)
    33d6:	47a0      	blx	r4
	ASSERT(nb_block);
    33d8:	f240 225b 	movw	r2, #603	; 0x25b
    33dc:	4629      	mov	r1, r5
    33de:	f118 0000 	adds.w	r0, r8, #0
    33e2:	bf18      	it	ne
    33e4:	2001      	movne	r0, #1
    33e6:	47a0      	blx	r4
	ASSERT(src);
    33e8:	f44f 7217 	mov.w	r2, #604	; 0x25c
    33ec:	4629      	mov	r1, r5
    33ee:	1c30      	adds	r0, r6, #0
    33f0:	bf18      	it	ne
    33f2:	2001      	movne	r0, #1
    33f4:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    33f6:	8a3d      	ldrh	r5, [r7, #16]
    33f8:	fb08 f505 	mul.w	r5, r8, r5

	while (nb_data) {
    33fc:	b1a5      	cbz	r5, 3428 <_mci_sync_start_write_blocks+0x70>
    33fe:	2404      	movs	r4, #4
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    3400:	f8df 8034 	ldr.w	r8, [pc, #52]	; 3438 <_mci_sync_start_write_blocks+0x80>
    3404:	e004      	b.n	3410 <_mci_sync_start_write_blocks+0x58>
    3406:	2000      	movs	r0, #0
    3408:	e7e0      	b.n	33cc <_mci_sync_start_write_blocks+0x14>
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
		ptr += nbytes;
    340a:	4426      	add	r6, r4
	while (nb_data) {
    340c:	1b2d      	subs	r5, r5, r4
    340e:	d00b      	beq.n	3428 <_mci_sync_start_write_blocks+0x70>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    3410:	6831      	ldr	r1, [r6, #0]
    3412:	4638      	mov	r0, r7
    3414:	47c0      	blx	r8
		if (nb_data < nbytes) {
    3416:	42ac      	cmp	r4, r5
    3418:	d9f7      	bls.n	340a <_mci_sync_start_write_blocks+0x52>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    341a:	8a3b      	ldrh	r3, [r7, #16]
    341c:	fb93 f2f4 	sdiv	r2, r3, r4
    3420:	fb04 3412 	mls	r4, r4, r2, r3
    3424:	b2e4      	uxtb	r4, r4
    3426:	e7f0      	b.n	340a <_mci_sync_start_write_blocks+0x52>
	}

	return true;
}
    3428:	2001      	movs	r0, #1
    342a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    342e:	bf00      	nop
    3430:	0000b64c 	.word	0x0000b64c
    3434:	00002a99 	.word	0x00002a99
    3438:	00003281 	.word	0x00003281

0000343c <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    343c:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    343e:	b150      	cbz	r0, 3456 <_mci_sync_wait_end_of_read_blocks+0x1a>
    3440:	6800      	ldr	r0, [r0, #0]
    3442:	3000      	adds	r0, #0
    3444:	bf18      	it	ne
    3446:	2001      	movne	r0, #1
    3448:	f240 2271 	movw	r2, #625	; 0x271
    344c:	4903      	ldr	r1, [pc, #12]	; (345c <_mci_sync_wait_end_of_read_blocks+0x20>)
    344e:	4b04      	ldr	r3, [pc, #16]	; (3460 <_mci_sync_wait_end_of_read_blocks+0x24>)
    3450:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    3452:	2001      	movs	r0, #1
    3454:	bd08      	pop	{r3, pc}
    3456:	2000      	movs	r0, #0
    3458:	e7f6      	b.n	3448 <_mci_sync_wait_end_of_read_blocks+0xc>
    345a:	bf00      	nop
    345c:	0000b64c 	.word	0x0000b64c
    3460:	00002a99 	.word	0x00002a99

00003464 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    3464:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    3466:	b150      	cbz	r0, 347e <_mci_sync_wait_end_of_write_blocks+0x1a>
    3468:	6800      	ldr	r0, [r0, #0]
    346a:	3000      	adds	r0, #0
    346c:	bf18      	it	ne
    346e:	2001      	movne	r0, #1
    3470:	f44f 721f 	mov.w	r2, #636	; 0x27c
    3474:	4903      	ldr	r1, [pc, #12]	; (3484 <_mci_sync_wait_end_of_write_blocks+0x20>)
    3476:	4b04      	ldr	r3, [pc, #16]	; (3488 <_mci_sync_wait_end_of_write_blocks+0x24>)
    3478:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    347a:	2001      	movs	r0, #1
    347c:	bd08      	pop	{r3, pc}
    347e:	2000      	movs	r0, #0
    3480:	e7f6      	b.n	3470 <_mci_sync_wait_end_of_write_blocks+0xc>
    3482:	bf00      	nop
    3484:	0000b64c 	.word	0x0000b64c
    3488:	00002a99 	.word	0x00002a99

0000348c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    348c:	b470      	push	{r4, r5, r6}
    348e:	b089      	sub	sp, #36	; 0x24
    3490:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3492:	466c      	mov	r4, sp
    3494:	4d0d      	ldr	r5, [pc, #52]	; (34cc <_sercom_get_hardware_index+0x40>)
    3496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    349a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    349e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    34a2:	9b00      	ldr	r3, [sp, #0]
    34a4:	42b3      	cmp	r3, r6
    34a6:	d00d      	beq.n	34c4 <_sercom_get_hardware_index+0x38>
    34a8:	4631      	mov	r1, r6
    34aa:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    34ac:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    34ae:	f853 2b04 	ldr.w	r2, [r3], #4
    34b2:	428a      	cmp	r2, r1
    34b4:	d007      	beq.n	34c6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    34b6:	3001      	adds	r0, #1
    34b8:	2808      	cmp	r0, #8
    34ba:	d1f8      	bne.n	34ae <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    34bc:	2000      	movs	r0, #0
}
    34be:	b009      	add	sp, #36	; 0x24
    34c0:	bc70      	pop	{r4, r5, r6}
    34c2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    34c4:	2000      	movs	r0, #0
			return i;
    34c6:	b2c0      	uxtb	r0, r0
    34c8:	e7f9      	b.n	34be <_sercom_get_hardware_index+0x32>
    34ca:	bf00      	nop
    34cc:	0000b664 	.word	0x0000b664

000034d0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    34d0:	b510      	push	{r4, lr}
    34d2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    34d4:	4b41      	ldr	r3, [pc, #260]	; (35dc <_usart_init+0x10c>)
    34d6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    34d8:	2800      	cmp	r0, #0
    34da:	d05c      	beq.n	3596 <_usart_init+0xc6>
    34dc:	2802      	cmp	r0, #2
    34de:	d05c      	beq.n	359a <_usart_init+0xca>
	ASSERT(false);
    34e0:	f240 2247 	movw	r2, #583	; 0x247
    34e4:	493e      	ldr	r1, [pc, #248]	; (35e0 <_usart_init+0x110>)
    34e6:	2000      	movs	r0, #0
    34e8:	4b3e      	ldr	r3, [pc, #248]	; (35e4 <_usart_init+0x114>)
    34ea:	4798      	blx	r3
	return 0;
    34ec:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    34ee:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    34f0:	f013 0f01 	tst.w	r3, #1
    34f4:	d122      	bne.n	353c <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    34f6:	004b      	lsls	r3, r1, #1
    34f8:	185a      	adds	r2, r3, r1
    34fa:	4b3b      	ldr	r3, [pc, #236]	; (35e8 <_usart_init+0x118>)
    34fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3502:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3506:	69e3      	ldr	r3, [r4, #28]
    3508:	f013 0f03 	tst.w	r3, #3
    350c:	d1fb      	bne.n	3506 <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    350e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3510:	f013 0f02 	tst.w	r3, #2
    3514:	d00b      	beq.n	352e <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3516:	6823      	ldr	r3, [r4, #0]
    3518:	f023 0302 	bic.w	r3, r3, #2
    351c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    351e:	69e3      	ldr	r3, [r4, #28]
    3520:	f013 0f03 	tst.w	r3, #3
    3524:	d1fb      	bne.n	351e <_usart_init+0x4e>
    3526:	69e3      	ldr	r3, [r4, #28]
    3528:	f013 0f02 	tst.w	r3, #2
    352c:	d1fb      	bne.n	3526 <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    352e:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3532:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3534:	69e3      	ldr	r3, [r4, #28]
    3536:	f013 0f03 	tst.w	r3, #3
    353a:	d1fb      	bne.n	3534 <_usart_init+0x64>
    353c:	69e3      	ldr	r3, [r4, #28]
    353e:	f013 0f01 	tst.w	r3, #1
    3542:	d1fb      	bne.n	353c <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3544:	460a      	mov	r2, r1
    3546:	004b      	lsls	r3, r1, #1
    3548:	440b      	add	r3, r1
    354a:	4927      	ldr	r1, [pc, #156]	; (35e8 <_usart_init+0x118>)
    354c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    3550:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3552:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3554:	69e3      	ldr	r3, [r4, #28]
    3556:	f013 0f03 	tst.w	r3, #3
    355a:	d1fb      	bne.n	3554 <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    355c:	0053      	lsls	r3, r2, #1
    355e:	1899      	adds	r1, r3, r2
    3560:	4b21      	ldr	r3, [pc, #132]	; (35e8 <_usart_init+0x118>)
    3562:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3568:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    356a:	69e3      	ldr	r3, [r4, #28]
    356c:	f013 0f1f 	tst.w	r3, #31
    3570:	d1fb      	bne.n	356a <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3572:	0053      	lsls	r3, r2, #1
    3574:	1899      	adds	r1, r3, r2
    3576:	4b1c      	ldr	r3, [pc, #112]	; (35e8 <_usart_init+0x118>)
    3578:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    357e:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3580:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3584:	d10b      	bne.n	359e <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3586:	0053      	lsls	r3, r2, #1
    3588:	1899      	adds	r1, r3, r2
    358a:	4b17      	ldr	r3, [pc, #92]	; (35e8 <_usart_init+0x118>)
    358c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3590:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    3592:	81a3      	strh	r3, [r4, #12]
    3594:	e011      	b.n	35ba <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3596:	2100      	movs	r1, #0
    3598:	e7a9      	b.n	34ee <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
    359a:	2101      	movs	r1, #1
    359c:	e7a7      	b.n	34ee <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    359e:	4b12      	ldr	r3, [pc, #72]	; (35e8 <_usart_init+0x118>)
    35a0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    35a4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    35a6:	89a1      	ldrh	r1, [r4, #12]
    35a8:	f360 010c 	bfi	r1, r0, #0, #13
    35ac:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    35ae:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    35b2:	89a3      	ldrh	r3, [r4, #12]
    35b4:	f361 334f 	bfi	r3, r1, #13, #3
    35b8:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    35ba:	4b0b      	ldr	r3, [pc, #44]	; (35e8 <_usart_init+0x118>)
    35bc:	0051      	lsls	r1, r2, #1
    35be:	1888      	adds	r0, r1, r2
    35c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    35c4:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    35c8:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    35ca:	440a      	add	r2, r1
    35cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    35d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    35d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    35d8:	2000      	movs	r0, #0
    35da:	bd10      	pop	{r4, pc}
    35dc:	0000348d 	.word	0x0000348d
    35e0:	0000b6cc 	.word	0x0000b6cc
    35e4:	00002a99 	.word	0x00002a99
    35e8:	0000b664 	.word	0x0000b664

000035ec <_usart_sync_init>:
{
    35ec:	b538      	push	{r3, r4, r5, lr}
    35ee:	460c      	mov	r4, r1
	ASSERT(device);
    35f0:	4605      	mov	r5, r0
    35f2:	22bb      	movs	r2, #187	; 0xbb
    35f4:	4905      	ldr	r1, [pc, #20]	; (360c <_usart_sync_init+0x20>)
    35f6:	3000      	adds	r0, #0
    35f8:	bf18      	it	ne
    35fa:	2001      	movne	r0, #1
    35fc:	4b04      	ldr	r3, [pc, #16]	; (3610 <_usart_sync_init+0x24>)
    35fe:	4798      	blx	r3
	device->hw = hw;
    3600:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    3602:	4620      	mov	r0, r4
    3604:	4b03      	ldr	r3, [pc, #12]	; (3614 <_usart_sync_init+0x28>)
    3606:	4798      	blx	r3
}
    3608:	bd38      	pop	{r3, r4, r5, pc}
    360a:	bf00      	nop
    360c:	0000b6cc 	.word	0x0000b6cc
    3610:	00002a99 	.word	0x00002a99
    3614:	000034d1 	.word	0x000034d1

00003618 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3618:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    361a:	6813      	ldr	r3, [r2, #0]
    361c:	f043 0302 	orr.w	r3, r3, #2
    3620:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3622:	69d3      	ldr	r3, [r2, #28]
    3624:	f013 0f03 	tst.w	r3, #3
    3628:	d1fb      	bne.n	3622 <_usart_sync_enable+0xa>
}
    362a:	4770      	bx	lr

0000362c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    362c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    362e:	6299      	str	r1, [r3, #40]	; 0x28
    3630:	4770      	bx	lr

00003632 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    3632:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    3634:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3636:	b2c0      	uxtb	r0, r0
    3638:	4770      	bx	lr

0000363a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    363a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    363c:	7e18      	ldrb	r0, [r3, #24]
}
    363e:	f000 0001 	and.w	r0, r0, #1
    3642:	4770      	bx	lr

00003644 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3644:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3646:	7e18      	ldrb	r0, [r3, #24]
}
    3648:	f3c0 0040 	ubfx	r0, r0, #1, #1
    364c:	4770      	bx	lr

0000364e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    364e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3650:	7e18      	ldrb	r0, [r3, #24]
}
    3652:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3656:	4770      	bx	lr

00003658 <HardFault_Handler>:
  * and passes it to the handler written in C as a pointer. Also extracts the LR
  * value as the second parameter
  */
void HardFault_Handler(void)
{
	__asm volatile
    3658:	f01e 0f04 	tst.w	lr, #4
    365c:	bf0c      	ite	eq
    365e:	f3ef 8008 	mrseq	r0, MSP
    3662:	f3ef 8009 	mrsne	r0, PSP
    3666:	4671      	mov	r1, lr
    3668:	f000 b800 	b.w	366c <HardFault_Handler_C>

0000366c <HardFault_Handler_C>:
/**
  * HardFault Handler in C, with stack frame location and LR value extracted from
  * assembly wrapper as input parameters. Same for all Cortex-M4 Processors.
  */
void HardFault_Handler_C(unsigned int * hardfault_args, unsigned int lr_value)
{	
    366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3670:	b087      	sub	sp, #28
    3672:	9105      	str	r1, [sp, #20]
	unsigned int stacked_psr;
	uint32_t cfsr;
	uint32_t bus_fault_address;
	uint32_t memmanage_fault_address;
	
	bus_fault_address       = SCB->BFAR;
    3674:	4e34      	ldr	r6, [pc, #208]	; (3748 <HardFault_Handler_C+0xdc>)
    3676:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3678:	9300      	str	r3, [sp, #0]
	memmanage_fault_address = SCB->MMFAR;
    367a:	6b72      	ldr	r2, [r6, #52]	; 0x34
    367c:	9201      	str	r2, [sp, #4]
	cfsr                    = SCB->CFSR;
    367e:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	
	stacked_r0  = ((unsigned int) hardfault_args[0]);
    3680:	6804      	ldr	r4, [r0, #0]
	stacked_r1  = ((unsigned int) hardfault_args[1]);
    3682:	f8d0 b004 	ldr.w	fp, [r0, #4]
	stacked_r2  = ((unsigned int) hardfault_args[2]);
    3686:	f8d0 a008 	ldr.w	sl, [r0, #8]
	stacked_r3  = ((unsigned int) hardfault_args[3]);
    368a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	stacked_r12 = ((unsigned int) hardfault_args[4]);
    368e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	stacked_lr  = ((unsigned int) hardfault_args[5]);
    3692:	6945      	ldr	r5, [r0, #20]
    3694:	9502      	str	r5, [sp, #8]
	stacked_pc  = ((unsigned int) hardfault_args[6]);
    3696:	6983      	ldr	r3, [r0, #24]
    3698:	9303      	str	r3, [sp, #12]
	stacked_psr = ((unsigned int) hardfault_args[7]);
    369a:	69c0      	ldr	r0, [r0, #28]
    369c:	9004      	str	r0, [sp, #16]
	
	printf("[HardFault]\r\n");
    369e:	482b      	ldr	r0, [pc, #172]	; (374c <HardFault_Handler_C+0xe0>)
    36a0:	4d2b      	ldr	r5, [pc, #172]	; (3750 <HardFault_Handler_C+0xe4>)
    36a2:	47a8      	blx	r5
	printf(" | Stack frame:\r\n");
    36a4:	482b      	ldr	r0, [pc, #172]	; (3754 <HardFault_Handler_C+0xe8>)
    36a6:	47a8      	blx	r5
	printf(" | | R0   = 0x%08X\r\n", (unsigned)stacked_r0);
    36a8:	4621      	mov	r1, r4
    36aa:	482b      	ldr	r0, [pc, #172]	; (3758 <HardFault_Handler_C+0xec>)
    36ac:	4c2b      	ldr	r4, [pc, #172]	; (375c <HardFault_Handler_C+0xf0>)
    36ae:	47a0      	blx	r4
	printf(" | | R1   = 0x%08X\r\n", (unsigned)stacked_r1);
    36b0:	4659      	mov	r1, fp
    36b2:	482b      	ldr	r0, [pc, #172]	; (3760 <HardFault_Handler_C+0xf4>)
    36b4:	47a0      	blx	r4
	printf(" | | R2   = 0x%08X\r\n", (unsigned)stacked_r2);
    36b6:	4651      	mov	r1, sl
    36b8:	482a      	ldr	r0, [pc, #168]	; (3764 <HardFault_Handler_C+0xf8>)
    36ba:	47a0      	blx	r4
	printf(" | | R3   = 0x%08X\r\n", (unsigned)stacked_r3);
    36bc:	4649      	mov	r1, r9
    36be:	482a      	ldr	r0, [pc, #168]	; (3768 <HardFault_Handler_C+0xfc>)
    36c0:	47a0      	blx	r4
	printf(" | | R12  = 0x%08X\r\n", (unsigned)stacked_r12);
    36c2:	4641      	mov	r1, r8
    36c4:	4829      	ldr	r0, [pc, #164]	; (376c <HardFault_Handler_C+0x100>)
    36c6:	47a0      	blx	r4
	printf(" | | LR   = 0x%08X\r\n", (unsigned)stacked_lr);
    36c8:	9902      	ldr	r1, [sp, #8]
    36ca:	4829      	ldr	r0, [pc, #164]	; (3770 <HardFault_Handler_C+0x104>)
    36cc:	47a0      	blx	r4
	printf(" | | PC   = 0x%08X\r\n", (unsigned)stacked_pc);
    36ce:	9903      	ldr	r1, [sp, #12]
    36d0:	4828      	ldr	r0, [pc, #160]	; (3774 <HardFault_Handler_C+0x108>)
    36d2:	47a0      	blx	r4
	printf(" | | PSR  = 0x%08X\r\n", (unsigned)stacked_psr);
    36d4:	9904      	ldr	r1, [sp, #16]
    36d6:	4828      	ldr	r0, [pc, #160]	; (3778 <HardFault_Handler_C+0x10c>)
    36d8:	47a0      	blx	r4
	printf(" | FSR/FAR:\r\n");
    36da:	4828      	ldr	r0, [pc, #160]	; (377c <HardFault_Handler_C+0x110>)
    36dc:	47a8      	blx	r5
	
	printf(" | | Configurable Fault Status Register\r\n");
    36de:	4828      	ldr	r0, [pc, #160]	; (3780 <HardFault_Handler_C+0x114>)
    36e0:	47a8      	blx	r5
	printf(" | | | CFSR  = 0x%08X\r\n", (unsigned)cfsr);
    36e2:	4639      	mov	r1, r7
    36e4:	4827      	ldr	r0, [pc, #156]	; (3784 <HardFault_Handler_C+0x118>)
    36e6:	47a0      	blx	r4
	printf(" | | | | MemManage Status Register\r\n");
    36e8:	4827      	ldr	r0, [pc, #156]	; (3788 <HardFault_Handler_C+0x11c>)
    36ea:	47a8      	blx	r5
	printf(" | | | | | MMFSR = 0x%02X\r\n", (unsigned)(cfsr & 0xFF));
    36ec:	b2f9      	uxtb	r1, r7
    36ee:	4827      	ldr	r0, [pc, #156]	; (378c <HardFault_Handler_C+0x120>)
    36f0:	47a0      	blx	r4
	printf(" | | | | BusFault Status Register\r\n");
    36f2:	4827      	ldr	r0, [pc, #156]	; (3790 <HardFault_Handler_C+0x124>)
    36f4:	47a8      	blx	r5
	printf(" | | | | | BFSR = 0x%02X\r\n", (unsigned)((cfsr >> 8) & 0xFF));
    36f6:	f3c7 2107 	ubfx	r1, r7, #8, #8
    36fa:	4826      	ldr	r0, [pc, #152]	; (3794 <HardFault_Handler_C+0x128>)
    36fc:	47a0      	blx	r4
	printf(" | | | | UsageFault Status Register\r\n");
    36fe:	4826      	ldr	r0, [pc, #152]	; (3798 <HardFault_Handler_C+0x12c>)
    3700:	47a8      	blx	r5
	printf(" | | | | | UFSR = 0x%02X\r\n", (unsigned)((cfsr >> 16) & 0xFF));
    3702:	f3c7 4107 	ubfx	r1, r7, #16, #8
    3706:	4825      	ldr	r0, [pc, #148]	; (379c <HardFault_Handler_C+0x130>)
    3708:	47a0      	blx	r4
	
	printf(" | | MemManage Address Register (validity: %X)\r\n", (unsigned)((cfsr >> 7) & 0x1));
    370a:	f3c7 11c0 	ubfx	r1, r7, #7, #1
    370e:	4824      	ldr	r0, [pc, #144]	; (37a0 <HardFault_Handler_C+0x134>)
    3710:	47a0      	blx	r4
	printf(" | | | MMFAR = 0x%08X\r\n", (unsigned)memmanage_fault_address);
    3712:	9901      	ldr	r1, [sp, #4]
    3714:	4823      	ldr	r0, [pc, #140]	; (37a4 <HardFault_Handler_C+0x138>)
    3716:	47a0      	blx	r4
	printf(" | | BusFault Address Register  (validity: %X)\r\n", (unsigned)((cfsr >> 15) & 0x1));
    3718:	f3c7 31c0 	ubfx	r1, r7, #15, #1
    371c:	4822      	ldr	r0, [pc, #136]	; (37a8 <HardFault_Handler_C+0x13c>)
    371e:	47a0      	blx	r4
	printf(" | | | BFAR = 0x%08X\r\n", (unsigned)bus_fault_address);
    3720:	9900      	ldr	r1, [sp, #0]
    3722:	4822      	ldr	r0, [pc, #136]	; (37ac <HardFault_Handler_C+0x140>)
    3724:	47a0      	blx	r4
	
	printf(" | | Hard Fault Status Register\r\n");
    3726:	4822      	ldr	r0, [pc, #136]	; (37b0 <HardFault_Handler_C+0x144>)
    3728:	47a8      	blx	r5
	printf(" | | | HFSR  = 0x%08X\r\n", (unsigned)SCB->HFSR);
    372a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    372c:	4821      	ldr	r0, [pc, #132]	; (37b4 <HardFault_Handler_C+0x148>)
    372e:	47a0      	blx	r4
	
	printf(" | | DFSR = 0x%08X\r\n", (unsigned)SCB->DFSR);
    3730:	6b31      	ldr	r1, [r6, #48]	; 0x30
    3732:	4821      	ldr	r0, [pc, #132]	; (37b8 <HardFault_Handler_C+0x14c>)
    3734:	47a0      	blx	r4
	printf(" | | AFSR = 0x%08X\r\n", (unsigned)SCB->AFSR);
    3736:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    3738:	4820      	ldr	r0, [pc, #128]	; (37bc <HardFault_Handler_C+0x150>)
    373a:	47a0      	blx	r4

	printf(" | Misc\r\n");
    373c:	4820      	ldr	r0, [pc, #128]	; (37c0 <HardFault_Handler_C+0x154>)
    373e:	47a8      	blx	r5
	printf(" | | LR/EXC_RETURN= 0x%04X\r\n", (unsigned)lr_value);
    3740:	9905      	ldr	r1, [sp, #20]
    3742:	4820      	ldr	r0, [pc, #128]	; (37c4 <HardFault_Handler_C+0x158>)
    3744:	47a0      	blx	r4
    3746:	e7fe      	b.n	3746 <HardFault_Handler_C+0xda>
    3748:	e000ed00 	.word	0xe000ed00
    374c:	0000b6e8 	.word	0x0000b6e8
    3750:	000083d9 	.word	0x000083d9
    3754:	0000b6f8 	.word	0x0000b6f8
    3758:	0000b70c 	.word	0x0000b70c
    375c:	000082f1 	.word	0x000082f1
    3760:	0000b724 	.word	0x0000b724
    3764:	0000b73c 	.word	0x0000b73c
    3768:	0000b754 	.word	0x0000b754
    376c:	0000b76c 	.word	0x0000b76c
    3770:	0000b784 	.word	0x0000b784
    3774:	0000b79c 	.word	0x0000b79c
    3778:	0000b7b4 	.word	0x0000b7b4
    377c:	0000b7cc 	.word	0x0000b7cc
    3780:	0000b7dc 	.word	0x0000b7dc
    3784:	0000b808 	.word	0x0000b808
    3788:	0000b820 	.word	0x0000b820
    378c:	0000b844 	.word	0x0000b844
    3790:	0000b860 	.word	0x0000b860
    3794:	0000b884 	.word	0x0000b884
    3798:	0000b8a0 	.word	0x0000b8a0
    379c:	0000b8c8 	.word	0x0000b8c8
    37a0:	0000b8e4 	.word	0x0000b8e4
    37a4:	0000b918 	.word	0x0000b918
    37a8:	0000b930 	.word	0x0000b930
    37ac:	0000b964 	.word	0x0000b964
    37b0:	0000b97c 	.word	0x0000b97c
    37b4:	0000b9a0 	.word	0x0000b9a0
    37b8:	0000b9b8 	.word	0x0000b9b8
    37bc:	0000b9d0 	.word	0x0000b9d0
    37c0:	0000b9e8 	.word	0x0000b9e8
    37c4:	0000b9f4 	.word	0x0000b9f4

000037c8 <SysTick_Handler>:
/**
  *	SysTick Handler
  */
void SysTick_Handler(void)
{
	systick_count++;
    37c8:	4a1a      	ldr	r2, [pc, #104]	; (3834 <SysTick_Handler+0x6c>)
    37ca:	6813      	ldr	r3, [r2, #0]
    37cc:	3301      	adds	r3, #1
    37ce:	6013      	str	r3, [r2, #0]
	
	if (timer > 0) {
    37d0:	4b19      	ldr	r3, [pc, #100]	; (3838 <SysTick_Handler+0x70>)
    37d2:	681b      	ldr	r3, [r3, #0]
    37d4:	b11b      	cbz	r3, 37de <SysTick_Handler+0x16>
		if (LAMS_DEBUG) {
			if (timer % 1000 == 0)
				printf("%"PRIu32".", (uint32_t)(timer / 1000));
		}
		timer--;
    37d6:	4a18      	ldr	r2, [pc, #96]	; (3838 <SysTick_Handler+0x70>)
    37d8:	6813      	ldr	r3, [r2, #0]
    37da:	3b01      	subs	r3, #1
    37dc:	6013      	str	r3, [r2, #0]
	}
	
	switch (status) {
    37de:	4b17      	ldr	r3, [pc, #92]	; (383c <SysTick_Handler+0x74>)
    37e0:	781b      	ldrb	r3, [r3, #0]
    37e2:	b2db      	uxtb	r3, r3
    37e4:	2b01      	cmp	r3, #1
    37e6:	d007      	beq.n	37f8 <SysTick_Handler+0x30>
    37e8:	b113      	cbz	r3, 37f0 <SysTick_Handler+0x28>
    37ea:	2b02      	cmp	r3, #2
    37ec:	d013      	beq.n	3816 <SysTick_Handler+0x4e>
    37ee:	4770      	bx	lr
    37f0:	2240      	movs	r2, #64	; 0x40
    37f2:	4b13      	ldr	r3, [pc, #76]	; (3840 <SysTick_Handler+0x78>)
    37f4:	619a      	str	r2, [r3, #24]
    37f6:	4770      	bx	lr
		case STATUS_IDLE: /* Solid light */
			gpio_set_pin_level(LED_STATUS, true);
			break;
		case STATUS_PROCESSING:
			if (systick_count % BLINK_PROCESSING == 0)
    37f8:	4b0e      	ldr	r3, [pc, #56]	; (3834 <SysTick_Handler+0x6c>)
    37fa:	681a      	ldr	r2, [r3, #0]
    37fc:	4b11      	ldr	r3, [pc, #68]	; (3844 <SysTick_Handler+0x7c>)
    37fe:	fba3 1302 	umull	r1, r3, r3, r2
    3802:	095b      	lsrs	r3, r3, #5
    3804:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3808:	fb01 2313 	mls	r3, r1, r3, r2
    380c:	b983      	cbnz	r3, 3830 <SysTick_Handler+0x68>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    380e:	2240      	movs	r2, #64	; 0x40
    3810:	4b0b      	ldr	r3, [pc, #44]	; (3840 <SysTick_Handler+0x78>)
    3812:	61da      	str	r2, [r3, #28]
    3814:	4770      	bx	lr
				gpio_toggle_pin_level(LED_STATUS);
			break;
		case STATUS_ERROR:
			if (systick_count % BLINK_ERROR == 0)
    3816:	4b07      	ldr	r3, [pc, #28]	; (3834 <SysTick_Handler+0x6c>)
    3818:	681a      	ldr	r2, [r3, #0]
    381a:	4b0b      	ldr	r3, [pc, #44]	; (3848 <SysTick_Handler+0x80>)
    381c:	fba3 1302 	umull	r1, r3, r3, r2
    3820:	095b      	lsrs	r3, r3, #5
    3822:	2164      	movs	r1, #100	; 0x64
    3824:	fb01 2313 	mls	r3, r1, r3, r2
    3828:	b913      	cbnz	r3, 3830 <SysTick_Handler+0x68>
    382a:	2240      	movs	r2, #64	; 0x40
    382c:	4b04      	ldr	r3, [pc, #16]	; (3840 <SysTick_Handler+0x78>)
    382e:	61da      	str	r2, [r3, #28]
    3830:	4770      	bx	lr
    3832:	bf00      	nop
    3834:	2000446c 	.word	0x2000446c
    3838:	20004470 	.word	0x20004470
    383c:	20004474 	.word	0x20004474
    3840:	41008000 	.word	0x41008000
    3844:	10624dd3 	.word	0x10624dd3
    3848:	51eb851f 	.word	0x51eb851f

0000384c <SDMMC_init>:

/**
  *	Initializes SD MMC stack
  */
void SDMMC_init(void)
{
    384c:	b508      	push	{r3, lr}
	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    384e:	4903      	ldr	r1, [pc, #12]	; (385c <SDMMC_init+0x10>)
    3850:	460a      	mov	r2, r1
    3852:	3104      	adds	r1, #4
    3854:	4802      	ldr	r0, [pc, #8]	; (3860 <SDMMC_init+0x14>)
    3856:	4b03      	ldr	r3, [pc, #12]	; (3864 <SDMMC_init+0x18>)
    3858:	4798      	blx	r3
    385a:	bd08      	pop	{r3, pc}
    385c:	20000084 	.word	0x20000084
    3860:	20004178 	.word	0x20004178
    3864:	00005371 	.word	0x00005371

00003868 <LIDAR_PWM_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    3868:	4a3b      	ldr	r2, [pc, #236]	; (3958 <LIDAR_PWM_init+0xf0>)
    386a:	69d3      	ldr	r3, [r2, #28]
    386c:	f043 0320 	orr.w	r3, r3, #32
    3870:	61d3      	str	r3, [r2, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    3872:	2240      	movs	r2, #64	; 0x40
    3874:	4b39      	ldr	r3, [pc, #228]	; (395c <LIDAR_PWM_init+0xf4>)
    3876:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    387a:	4b39      	ldr	r3, [pc, #228]	; (3960 <LIDAR_PWM_init+0xf8>)
    387c:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    3880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3884:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3888:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    388c:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3890:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3898:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    389c:	f44f 7100 	mov.w	r1, #512	; 0x200
    38a0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    38a4:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    38a8:	f042 0204 	orr.w	r2, r2, #4
    38ac:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    38b0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    38b4:	4b2b      	ldr	r3, [pc, #172]	; (3964 <LIDAR_PWM_init+0xfc>)
    38b6:	691b      	ldr	r3, [r3, #16]
void LIDAR_PWM_init(void)
{
	LIDAR_PWM_CLOCK_init();
	LIDAR_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    38b8:	f013 0f01 	tst.w	r3, #1
    38bc:	d11f      	bne.n	38fe <LIDAR_PWM_init+0x96>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38be:	4a29      	ldr	r2, [pc, #164]	; (3964 <LIDAR_PWM_init+0xfc>)
    38c0:	6913      	ldr	r3, [r2, #16]
    38c2:	f013 0f03 	tst.w	r3, #3
    38c6:	d1fb      	bne.n	38c0 <LIDAR_PWM_init+0x58>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    38c8:	4b26      	ldr	r3, [pc, #152]	; (3964 <LIDAR_PWM_init+0xfc>)
    38ca:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    38cc:	f013 0f02 	tst.w	r3, #2
    38d0:	d00d      	beq.n	38ee <LIDAR_PWM_init+0x86>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    38d2:	4a24      	ldr	r2, [pc, #144]	; (3964 <LIDAR_PWM_init+0xfc>)
    38d4:	6813      	ldr	r3, [r2, #0]
    38d6:	f023 0302 	bic.w	r3, r3, #2
    38da:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38dc:	6913      	ldr	r3, [r2, #16]
    38de:	f013 0f03 	tst.w	r3, #3
    38e2:	d1fb      	bne.n	38dc <LIDAR_PWM_init+0x74>
    38e4:	4a1f      	ldr	r2, [pc, #124]	; (3964 <LIDAR_PWM_init+0xfc>)
    38e6:	6913      	ldr	r3, [r2, #16]
    38e8:	f013 0f02 	tst.w	r3, #2
    38ec:	d1fb      	bne.n	38e6 <LIDAR_PWM_init+0x7e>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    38ee:	2201      	movs	r2, #1
    38f0:	4b1c      	ldr	r3, [pc, #112]	; (3964 <LIDAR_PWM_init+0xfc>)
    38f2:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38f4:	461a      	mov	r2, r3
    38f6:	6913      	ldr	r3, [r2, #16]
    38f8:	f013 0f03 	tst.w	r3, #3
    38fc:	d1fb      	bne.n	38f6 <LIDAR_PWM_init+0x8e>
    38fe:	4a19      	ldr	r2, [pc, #100]	; (3964 <LIDAR_PWM_init+0xfc>)
    3900:	6913      	ldr	r3, [r2, #16]
    3902:	f013 0f01 	tst.w	r3, #1
    3906:	d1fb      	bne.n	3900 <LIDAR_PWM_init+0x98>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3908:	4a17      	ldr	r2, [pc, #92]	; (3968 <LIDAR_PWM_init+0x100>)
    390a:	4b16      	ldr	r3, [pc, #88]	; (3964 <LIDAR_PWM_init+0xfc>)
    390c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    390e:	461a      	mov	r2, r3
    3910:	6913      	ldr	r3, [r2, #16]
    3912:	f013 0f03 	tst.w	r3, #3
    3916:	d1fb      	bne.n	3910 <LIDAR_PWM_init+0xa8>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    3918:	4b12      	ldr	r3, [pc, #72]	; (3964 <LIDAR_PWM_init+0xfc>)
    391a:	2200      	movs	r2, #0
    391c:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    391e:	22ff      	movs	r2, #255	; 0xff
    3920:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3922:	2203      	movs	r2, #3
    3924:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3926:	223c      	movs	r2, #60	; 0x3c
    3928:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    392a:	461a      	mov	r2, r3
    392c:	6913      	ldr	r3, [r2, #16]
    392e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3932:	d1fb      	bne.n	392c <LIDAR_PWM_init+0xc4>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3934:	2200      	movs	r2, #0
    3936:	4b0b      	ldr	r3, [pc, #44]	; (3964 <LIDAR_PWM_init+0xfc>)
    3938:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    393a:	461a      	mov	r2, r3
    393c:	6913      	ldr	r3, [r2, #16]
    393e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3942:	d1fb      	bne.n	393c <LIDAR_PWM_init+0xd4>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3944:	4a07      	ldr	r2, [pc, #28]	; (3964 <LIDAR_PWM_init+0xfc>)
    3946:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3948:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    394c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    394e:	6913      	ldr	r3, [r2, #16]
    3950:	f013 0f03 	tst.w	r3, #3
    3954:	d1fb      	bne.n	394e <LIDAR_PWM_init+0xe6>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
    3956:	4770      	bx	lr
    3958:	40000800 	.word	0x40000800
    395c:	40001c00 	.word	0x40001c00
    3960:	41008000 	.word	0x41008000
    3964:	42001400 	.word	0x42001400
    3968:	12000310 	.word	0x12000310

0000396c <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    396c:	4b19      	ldr	r3, [pc, #100]	; (39d4 <LIDAR_PWM_start+0x68>)
    396e:	691b      	ldr	r3, [r3, #16]
/**
  * Starts LiDAR PWM motor
  */ 
void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    3970:	f013 0f01 	tst.w	r3, #1
    3974:	d117      	bne.n	39a6 <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3976:	4a17      	ldr	r2, [pc, #92]	; (39d4 <LIDAR_PWM_start+0x68>)
    3978:	6913      	ldr	r3, [r2, #16]
    397a:	f013 0f03 	tst.w	r3, #3
    397e:	d1fb      	bne.n	3978 <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3980:	4b14      	ldr	r3, [pc, #80]	; (39d4 <LIDAR_PWM_start+0x68>)
    3982:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    3984:	f013 0f02 	tst.w	r3, #2
    3988:	d00d      	beq.n	39a6 <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    398a:	4a12      	ldr	r2, [pc, #72]	; (39d4 <LIDAR_PWM_start+0x68>)
    398c:	6813      	ldr	r3, [r2, #0]
    398e:	f023 0302 	bic.w	r3, r3, #2
    3992:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3994:	6913      	ldr	r3, [r2, #16]
    3996:	f013 0f03 	tst.w	r3, #3
    399a:	d1fb      	bne.n	3994 <LIDAR_PWM_start+0x28>
    399c:	4a0d      	ldr	r2, [pc, #52]	; (39d4 <LIDAR_PWM_start+0x68>)
    399e:	6913      	ldr	r3, [r2, #16]
    39a0:	f013 0f02 	tst.w	r3, #2
    39a4:	d1fb      	bne.n	399e <LIDAR_PWM_start+0x32>
    39a6:	4a0b      	ldr	r2, [pc, #44]	; (39d4 <LIDAR_PWM_start+0x68>)
    39a8:	6913      	ldr	r3, [r2, #16]
    39aa:	f013 0f01 	tst.w	r3, #1
    39ae:	d1fb      	bne.n	39a8 <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    39b0:	2224      	movs	r2, #36	; 0x24
    39b2:	4b08      	ldr	r3, [pc, #32]	; (39d4 <LIDAR_PWM_start+0x68>)
    39b4:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    39b6:	461a      	mov	r2, r3
    39b8:	6913      	ldr	r3, [r2, #16]
    39ba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    39be:	d1fb      	bne.n	39b8 <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39c0:	4a04      	ldr	r2, [pc, #16]	; (39d4 <LIDAR_PWM_start+0x68>)
    39c2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    39c4:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    39c8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    39ca:	6913      	ldr	r3, [r2, #16]
    39cc:	f013 0f03 	tst.w	r3, #3
    39d0:	d1fb      	bne.n	39ca <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    39d2:	4770      	bx	lr
    39d4:	42001400 	.word	0x42001400

000039d8 <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    39d8:	4b19      	ldr	r3, [pc, #100]	; (3a40 <LIDAR_PWM_stop+0x68>)
    39da:	691b      	ldr	r3, [r3, #16]
/**
  * Stops LiDAR PWM motor
  */ 
void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    39dc:	f013 0f01 	tst.w	r3, #1
    39e0:	d117      	bne.n	3a12 <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    39e2:	4a17      	ldr	r2, [pc, #92]	; (3a40 <LIDAR_PWM_stop+0x68>)
    39e4:	6913      	ldr	r3, [r2, #16]
    39e6:	f013 0f03 	tst.w	r3, #3
    39ea:	d1fb      	bne.n	39e4 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39ec:	4b14      	ldr	r3, [pc, #80]	; (3a40 <LIDAR_PWM_stop+0x68>)
    39ee:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    39f0:	f013 0f02 	tst.w	r3, #2
    39f4:	d00d      	beq.n	3a12 <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    39f6:	4a12      	ldr	r2, [pc, #72]	; (3a40 <LIDAR_PWM_stop+0x68>)
    39f8:	6813      	ldr	r3, [r2, #0]
    39fa:	f023 0302 	bic.w	r3, r3, #2
    39fe:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a00:	6913      	ldr	r3, [r2, #16]
    3a02:	f013 0f03 	tst.w	r3, #3
    3a06:	d1fb      	bne.n	3a00 <LIDAR_PWM_stop+0x28>
    3a08:	4a0d      	ldr	r2, [pc, #52]	; (3a40 <LIDAR_PWM_stop+0x68>)
    3a0a:	6913      	ldr	r3, [r2, #16]
    3a0c:	f013 0f02 	tst.w	r3, #2
    3a10:	d1fb      	bne.n	3a0a <LIDAR_PWM_stop+0x32>
    3a12:	4a0b      	ldr	r2, [pc, #44]	; (3a40 <LIDAR_PWM_stop+0x68>)
    3a14:	6913      	ldr	r3, [r2, #16]
    3a16:	f013 0f01 	tst.w	r3, #1
    3a1a:	d1fb      	bne.n	3a14 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3a1c:	2200      	movs	r2, #0
    3a1e:	4b08      	ldr	r3, [pc, #32]	; (3a40 <LIDAR_PWM_stop+0x68>)
    3a20:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a22:	461a      	mov	r2, r3
    3a24:	6913      	ldr	r3, [r2, #16]
    3a26:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3a2a:	d1fb      	bne.n	3a24 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3a2c:	4a04      	ldr	r2, [pc, #16]	; (3a40 <LIDAR_PWM_stop+0x68>)
    3a2e:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3a30:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3a34:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a36:	6913      	ldr	r3, [r2, #16]
    3a38:	f013 0f03 	tst.w	r3, #3
    3a3c:	d1fb      	bne.n	3a36 <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    3a3e:	4770      	bx	lr
    3a40:	42001400 	.word	0x42001400

00003a44 <LIDAR_USART_init>:

/**
  * Initializes USART for LiDAR
  */ 
void LIDAR_USART_init(void)
{
    3a44:	b510      	push	{r4, lr}
    3a46:	4b1b      	ldr	r3, [pc, #108]	; (3ab4 <LIDAR_USART_init+0x70>)
    3a48:	2240      	movs	r2, #64	; 0x40
    3a4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    3a4e:	2243      	movs	r2, #67	; 0x43
    3a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    3a54:	4a18      	ldr	r2, [pc, #96]	; (3ab8 <LIDAR_USART_init+0x74>)
    3a56:	6953      	ldr	r3, [r2, #20]
    3a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3a5c:	6153      	str	r3, [r2, #20]
	LIDAR_USART_CLOCK_init();
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
    3a5e:	4c17      	ldr	r4, [pc, #92]	; (3abc <LIDAR_USART_init+0x78>)
    3a60:	2200      	movs	r2, #0
    3a62:	4917      	ldr	r1, [pc, #92]	; (3ac0 <LIDAR_USART_init+0x7c>)
    3a64:	4620      	mov	r0, r4
    3a66:	4b17      	ldr	r3, [pc, #92]	; (3ac4 <LIDAR_USART_init+0x80>)
    3a68:	4798      	blx	r3
	usart_sync_enable(&LIDAR_USART);
    3a6a:	4620      	mov	r0, r4
    3a6c:	4b16      	ldr	r3, [pc, #88]	; (3ac8 <LIDAR_USART_init+0x84>)
    3a6e:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3a70:	4b16      	ldr	r3, [pc, #88]	; (3acc <LIDAR_USART_init+0x88>)
    3a72:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    3a76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3a7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3a82:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3a86:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3a8a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3a8e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3a92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    3a96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3a9a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3aa2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3aa6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3aaa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3aae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    3ab2:	bd10      	pop	{r4, pc}
    3ab4:	40001c00 	.word	0x40001c00
    3ab8:	40000800 	.word	0x40000800
    3abc:	20004460 	.word	0x20004460
    3ac0:	40003000 	.word	0x40003000
    3ac4:	000029d5 	.word	0x000029d5
    3ac8:	00002a1d 	.word	0x00002a1d
    3acc:	41008000 	.word	0x41008000

00003ad0 <LIDAR_USART_send>:

/**
  * Sends data through USART to LiDAR
  */ 
void LIDAR_USART_send(uint8_t* message, uint16_t length)
{
    3ad0:	b530      	push	{r4, r5, lr}
    3ad2:	b083      	sub	sp, #12
    3ad4:	4604      	mov	r4, r0
    3ad6:	460d      	mov	r5, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    3ad8:	a901      	add	r1, sp, #4
    3ada:	4805      	ldr	r0, [pc, #20]	; (3af0 <LIDAR_USART_send+0x20>)
    3adc:	4b05      	ldr	r3, [pc, #20]	; (3af4 <LIDAR_USART_send+0x24>)
    3ade:	4798      	blx	r3
	
	io_write(io, message, length);
    3ae0:	462a      	mov	r2, r5
    3ae2:	4621      	mov	r1, r4
    3ae4:	9801      	ldr	r0, [sp, #4]
    3ae6:	4b04      	ldr	r3, [pc, #16]	; (3af8 <LIDAR_USART_send+0x28>)
    3ae8:	4798      	blx	r3
}
    3aea:	b003      	add	sp, #12
    3aec:	bd30      	pop	{r4, r5, pc}
    3aee:	bf00      	nop
    3af0:	20004460 	.word	0x20004460
    3af4:	00002a49 	.word	0x00002a49
    3af8:	00002609 	.word	0x00002609

00003afc <LIDAR_USART_read_byte>:
  * Reads received byte from LiDAR through USART
  * 
  * @return uint8_t : received byte
  */ 
uint8_t LIDAR_USART_read_byte(void)
{
    3afc:	b500      	push	{lr}
    3afe:	b083      	sub	sp, #12
	uint8_t buf;
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    3b00:	4669      	mov	r1, sp
    3b02:	4807      	ldr	r0, [pc, #28]	; (3b20 <LIDAR_USART_read_byte+0x24>)
    3b04:	4b07      	ldr	r3, [pc, #28]	; (3b24 <LIDAR_USART_read_byte+0x28>)
    3b06:	4798      	blx	r3
	
	io_read(io, &buf, 1);
    3b08:	2201      	movs	r2, #1
    3b0a:	f10d 0107 	add.w	r1, sp, #7
    3b0e:	9800      	ldr	r0, [sp, #0]
    3b10:	4b05      	ldr	r3, [pc, #20]	; (3b28 <LIDAR_USART_read_byte+0x2c>)
    3b12:	4798      	blx	r3
	return buf;
}
    3b14:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3b18:	b003      	add	sp, #12
    3b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    3b1e:	bf00      	nop
    3b20:	20004460 	.word	0x20004460
    3b24:	00002a49 	.word	0x00002a49
    3b28:	00002639 	.word	0x00002639

00003b2c <reset_print_buffer>:

/** 
  * Resets local print buffer.
  */
void reset_print_buffer(void)
{
    3b2c:	4a04      	ldr	r2, [pc, #16]	; (3b40 <reset_print_buffer+0x14>)
    3b2e:	1e53      	subs	r3, r2, #1
    3b30:	32ff      	adds	r2, #255	; 0xff
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
    3b32:	2100      	movs	r1, #0
    3b34:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    3b38:	4293      	cmp	r3, r2
    3b3a:	d1fb      	bne.n	3b34 <reset_print_buffer+0x8>
}
    3b3c:	4770      	bx	lr
    3b3e:	bf00      	nop
    3b40:	20003b4c 	.word	0x20003b4c

00003b44 <LIDAR_REQ_stop>:
{
    3b44:	b530      	push	{r4, r5, lr}
    3b46:	b083      	sub	sp, #12
	byte_count = 0;
    3b48:	2200      	movs	r2, #0
    3b4a:	4b0e      	ldr	r3, [pc, #56]	; (3b84 <LIDAR_REQ_stop+0x40>)
    3b4c:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    3b4e:	4b0e      	ldr	r3, [pc, #56]	; (3b88 <LIDAR_REQ_stop+0x44>)
    3b50:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3b52:	4c0e      	ldr	r4, [pc, #56]	; (3b8c <LIDAR_REQ_stop+0x48>)
    3b54:	2325      	movs	r3, #37	; 0x25
    3b56:	9300      	str	r3, [sp, #0]
    3b58:	23a5      	movs	r3, #165	; 0xa5
    3b5a:	4a0d      	ldr	r2, [pc, #52]	; (3b90 <LIDAR_REQ_stop+0x4c>)
    3b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3b60:	4620      	mov	r0, r4
    3b62:	4d0c      	ldr	r5, [pc, #48]	; (3b94 <LIDAR_REQ_stop+0x50>)
    3b64:	47a8      	blx	r5
    3b66:	b281      	uxth	r1, r0
    3b68:	4b0b      	ldr	r3, [pc, #44]	; (3b98 <LIDAR_REQ_stop+0x54>)
    3b6a:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3b6c:	4620      	mov	r0, r4
    3b6e:	4b0b      	ldr	r3, [pc, #44]	; (3b9c <LIDAR_REQ_stop+0x58>)
    3b70:	4798      	blx	r3
	timer = 100;
    3b72:	2264      	movs	r2, #100	; 0x64
    3b74:	4b0a      	ldr	r3, [pc, #40]	; (3ba0 <LIDAR_REQ_stop+0x5c>)
    3b76:	601a      	str	r2, [r3, #0]
	while (timer);
    3b78:	461a      	mov	r2, r3
    3b7a:	6813      	ldr	r3, [r2, #0]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d1fc      	bne.n	3b7a <LIDAR_REQ_stop+0x36>
}
    3b80:	b003      	add	sp, #12
    3b82:	bd30      	pop	{r4, r5, pc}
    3b84:	2000031c 	.word	0x2000031c
    3b88:	00003b2d 	.word	0x00003b2d
    3b8c:	20003b4c 	.word	0x20003b4c
    3b90:	0000ba14 	.word	0x0000ba14
    3b94:	00008575 	.word	0x00008575
    3b98:	20000318 	.word	0x20000318
    3b9c:	00003ad1 	.word	0x00003ad1
    3ba0:	20004470 	.word	0x20004470

00003ba4 <LIDAR_REQ_reset>:
{
    3ba4:	b530      	push	{r4, r5, lr}
    3ba6:	b083      	sub	sp, #12
	lidar_request = LIDAR_RESET;
    3ba8:	2540      	movs	r5, #64	; 0x40
    3baa:	4b10      	ldr	r3, [pc, #64]	; (3bec <LIDAR_REQ_reset+0x48>)
    3bac:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3bae:	2200      	movs	r2, #0
    3bb0:	4b0f      	ldr	r3, [pc, #60]	; (3bf0 <LIDAR_REQ_reset+0x4c>)
    3bb2:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    3bb4:	4b0f      	ldr	r3, [pc, #60]	; (3bf4 <LIDAR_REQ_reset+0x50>)
    3bb6:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3bb8:	4c0f      	ldr	r4, [pc, #60]	; (3bf8 <LIDAR_REQ_reset+0x54>)
    3bba:	9500      	str	r5, [sp, #0]
    3bbc:	23a5      	movs	r3, #165	; 0xa5
    3bbe:	4a0f      	ldr	r2, [pc, #60]	; (3bfc <LIDAR_REQ_reset+0x58>)
    3bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
    3bc4:	4620      	mov	r0, r4
    3bc6:	4d0e      	ldr	r5, [pc, #56]	; (3c00 <LIDAR_REQ_reset+0x5c>)
    3bc8:	47a8      	blx	r5
    3bca:	b281      	uxth	r1, r0
    3bcc:	4b0d      	ldr	r3, [pc, #52]	; (3c04 <LIDAR_REQ_reset+0x60>)
    3bce:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3bd0:	4620      	mov	r0, r4
    3bd2:	4b0d      	ldr	r3, [pc, #52]	; (3c08 <LIDAR_REQ_reset+0x64>)
    3bd4:	4798      	blx	r3
	timer = 900;
    3bd6:	f44f 7261 	mov.w	r2, #900	; 0x384
    3bda:	4b0c      	ldr	r3, [pc, #48]	; (3c0c <LIDAR_REQ_reset+0x68>)
    3bdc:	601a      	str	r2, [r3, #0]
	while (timer);
    3bde:	461a      	mov	r2, r3
    3be0:	6813      	ldr	r3, [r2, #0]
    3be2:	2b00      	cmp	r3, #0
    3be4:	d1fc      	bne.n	3be0 <LIDAR_REQ_reset+0x3c>
}
    3be6:	b003      	add	sp, #12
    3be8:	bd30      	pop	{r4, r5, pc}
    3bea:	bf00      	nop
    3bec:	20000321 	.word	0x20000321
    3bf0:	2000031c 	.word	0x2000031c
    3bf4:	00003b2d 	.word	0x00003b2d
    3bf8:	20003b4c 	.word	0x20003b4c
    3bfc:	0000ba14 	.word	0x0000ba14
    3c00:	00008575 	.word	0x00008575
    3c04:	20000318 	.word	0x20000318
    3c08:	00003ad1 	.word	0x00003ad1
    3c0c:	20004470 	.word	0x20004470

00003c10 <LIDAR_REQ_scan>:
{
    3c10:	b530      	push	{r4, r5, lr}
    3c12:	b083      	sub	sp, #12
	lidar_request = LIDAR_SCAN;
    3c14:	2520      	movs	r5, #32
    3c16:	4b0d      	ldr	r3, [pc, #52]	; (3c4c <LIDAR_REQ_scan+0x3c>)
    3c18:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3c1a:	2300      	movs	r3, #0
    3c1c:	4a0c      	ldr	r2, [pc, #48]	; (3c50 <LIDAR_REQ_scan+0x40>)
    3c1e:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    3c20:	4a0c      	ldr	r2, [pc, #48]	; (3c54 <LIDAR_REQ_scan+0x44>)
    3c22:	6013      	str	r3, [r2, #0]
	reset_print_buffer();
    3c24:	4b0c      	ldr	r3, [pc, #48]	; (3c58 <LIDAR_REQ_scan+0x48>)
    3c26:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3c28:	4c0c      	ldr	r4, [pc, #48]	; (3c5c <LIDAR_REQ_scan+0x4c>)
    3c2a:	9500      	str	r5, [sp, #0]
    3c2c:	23a5      	movs	r3, #165	; 0xa5
    3c2e:	4a0c      	ldr	r2, [pc, #48]	; (3c60 <LIDAR_REQ_scan+0x50>)
    3c30:	f44f 7180 	mov.w	r1, #256	; 0x100
    3c34:	4620      	mov	r0, r4
    3c36:	4d0b      	ldr	r5, [pc, #44]	; (3c64 <LIDAR_REQ_scan+0x54>)
    3c38:	47a8      	blx	r5
    3c3a:	b281      	uxth	r1, r0
    3c3c:	4b0a      	ldr	r3, [pc, #40]	; (3c68 <LIDAR_REQ_scan+0x58>)
    3c3e:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3c40:	4620      	mov	r0, r4
    3c42:	4b0a      	ldr	r3, [pc, #40]	; (3c6c <LIDAR_REQ_scan+0x5c>)
    3c44:	4798      	blx	r3
}
    3c46:	b003      	add	sp, #12
    3c48:	bd30      	pop	{r4, r5, pc}
    3c4a:	bf00      	nop
    3c4c:	20000321 	.word	0x20000321
    3c50:	2000031c 	.word	0x2000031c
    3c54:	20000328 	.word	0x20000328
    3c58:	00003b2d 	.word	0x00003b2d
    3c5c:	20003b4c 	.word	0x20003b4c
    3c60:	0000ba14 	.word	0x0000ba14
    3c64:	00008575 	.word	0x00008575
    3c68:	20000318 	.word	0x20000318
    3c6c:	00003ad1 	.word	0x00003ad1

00003c70 <LIDAR_REQ_express_scan>:
{	
    3c70:	b530      	push	{r4, r5, lr}
    3c72:	b087      	sub	sp, #28
    3c74:	f88d 000f 	strb.w	r0, [sp, #15]
	char reserved_fields = 0;
    3c78:	2300      	movs	r3, #0
    3c7a:	f88d 3017 	strb.w	r3, [sp, #23]
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_EXPRESS_SCAN ^ scan_mode ^ payload_size;
    3c7e:	f080 0022 	eor.w	r0, r0, #34	; 0x22
    3c82:	f88d 0016 	strb.w	r0, [sp, #22]
	lidar_request = LIDAR_EXPRESS_SCAN;
    3c86:	2582      	movs	r5, #130	; 0x82
    3c88:	4a1a      	ldr	r2, [pc, #104]	; (3cf4 <LIDAR_REQ_express_scan+0x84>)
    3c8a:	7015      	strb	r5, [r2, #0]
	invalid_exp_scans = 0;
    3c8c:	4a1a      	ldr	r2, [pc, #104]	; (3cf8 <LIDAR_REQ_express_scan+0x88>)
    3c8e:	6013      	str	r3, [r2, #0]
    scan_count = 0;
    3c90:	4a1a      	ldr	r2, [pc, #104]	; (3cfc <LIDAR_REQ_express_scan+0x8c>)
    3c92:	6013      	str	r3, [r2, #0]
	byte_count = 0;
    3c94:	4a1a      	ldr	r2, [pc, #104]	; (3d00 <LIDAR_REQ_express_scan+0x90>)
    3c96:	6013      	str	r3, [r2, #0]
	reset_print_buffer();
    3c98:	4b1a      	ldr	r3, [pc, #104]	; (3d04 <LIDAR_REQ_express_scan+0x94>)
    3c9a:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3c9c:	4c1a      	ldr	r4, [pc, #104]	; (3d08 <LIDAR_REQ_express_scan+0x98>)
    3c9e:	2305      	movs	r3, #5
    3ca0:	9301      	str	r3, [sp, #4]
    3ca2:	9500      	str	r5, [sp, #0]
    3ca4:	23a5      	movs	r3, #165	; 0xa5
    3ca6:	4a19      	ldr	r2, [pc, #100]	; (3d0c <LIDAR_REQ_express_scan+0x9c>)
    3ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
    3cac:	4620      	mov	r0, r4
    3cae:	4d18      	ldr	r5, [pc, #96]	; (3d10 <LIDAR_REQ_express_scan+0xa0>)
    3cb0:	47a8      	blx	r5
    3cb2:	b281      	uxth	r1, r0
    3cb4:	4b17      	ldr	r3, [pc, #92]	; (3d14 <LIDAR_REQ_express_scan+0xa4>)
    3cb6:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3cb8:	4620      	mov	r0, r4
    3cba:	4c17      	ldr	r4, [pc, #92]	; (3d18 <LIDAR_REQ_express_scan+0xa8>)
    3cbc:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&scan_mode, 1);
    3cbe:	2101      	movs	r1, #1
    3cc0:	f10d 000f 	add.w	r0, sp, #15
    3cc4:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3cc6:	2101      	movs	r1, #1
    3cc8:	f10d 0017 	add.w	r0, sp, #23
    3ccc:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3cce:	2101      	movs	r1, #1
    3cd0:	f10d 0017 	add.w	r0, sp, #23
    3cd4:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3cd6:	2101      	movs	r1, #1
    3cd8:	f10d 0017 	add.w	r0, sp, #23
    3cdc:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    3cde:	2101      	movs	r1, #1
    3ce0:	f10d 0017 	add.w	r0, sp, #23
    3ce4:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    3ce6:	2101      	movs	r1, #1
    3ce8:	f10d 0016 	add.w	r0, sp, #22
    3cec:	47a0      	blx	r4
}
    3cee:	b007      	add	sp, #28
    3cf0:	bd30      	pop	{r4, r5, pc}
    3cf2:	bf00      	nop
    3cf4:	20000321 	.word	0x20000321
    3cf8:	20000324 	.word	0x20000324
    3cfc:	20000328 	.word	0x20000328
    3d00:	2000031c 	.word	0x2000031c
    3d04:	00003b2d 	.word	0x00003b2d
    3d08:	20003b4c 	.word	0x20003b4c
    3d0c:	0000ba1c 	.word	0x0000ba1c
    3d10:	00008575 	.word	0x00008575
    3d14:	20000318 	.word	0x20000318
    3d18:	00003ad1 	.word	0x00003ad1

00003d1c <LIDAR_REQ_force_scan>:
{
    3d1c:	b530      	push	{r4, r5, lr}
    3d1e:	b083      	sub	sp, #12
	lidar_request = LIDAR_FORCE_SCAN;
    3d20:	2521      	movs	r5, #33	; 0x21
    3d22:	4b0d      	ldr	r3, [pc, #52]	; (3d58 <LIDAR_REQ_force_scan+0x3c>)
    3d24:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3d26:	2300      	movs	r3, #0
    3d28:	4a0c      	ldr	r2, [pc, #48]	; (3d5c <LIDAR_REQ_force_scan+0x40>)
    3d2a:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    3d2c:	4a0c      	ldr	r2, [pc, #48]	; (3d60 <LIDAR_REQ_force_scan+0x44>)
    3d2e:	6013      	str	r3, [r2, #0]
	reset_print_buffer();
    3d30:	4b0c      	ldr	r3, [pc, #48]	; (3d64 <LIDAR_REQ_force_scan+0x48>)
    3d32:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3d34:	4c0c      	ldr	r4, [pc, #48]	; (3d68 <LIDAR_REQ_force_scan+0x4c>)
    3d36:	9500      	str	r5, [sp, #0]
    3d38:	23a5      	movs	r3, #165	; 0xa5
    3d3a:	4a0c      	ldr	r2, [pc, #48]	; (3d6c <LIDAR_REQ_force_scan+0x50>)
    3d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3d40:	4620      	mov	r0, r4
    3d42:	4d0b      	ldr	r5, [pc, #44]	; (3d70 <LIDAR_REQ_force_scan+0x54>)
    3d44:	47a8      	blx	r5
    3d46:	b281      	uxth	r1, r0
    3d48:	4b0a      	ldr	r3, [pc, #40]	; (3d74 <LIDAR_REQ_force_scan+0x58>)
    3d4a:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3d4c:	4620      	mov	r0, r4
    3d4e:	4b0a      	ldr	r3, [pc, #40]	; (3d78 <LIDAR_REQ_force_scan+0x5c>)
    3d50:	4798      	blx	r3
}
    3d52:	b003      	add	sp, #12
    3d54:	bd30      	pop	{r4, r5, pc}
    3d56:	bf00      	nop
    3d58:	20000321 	.word	0x20000321
    3d5c:	2000031c 	.word	0x2000031c
    3d60:	20000328 	.word	0x20000328
    3d64:	00003b2d 	.word	0x00003b2d
    3d68:	20003b4c 	.word	0x20003b4c
    3d6c:	0000ba14 	.word	0x0000ba14
    3d70:	00008575 	.word	0x00008575
    3d74:	20000318 	.word	0x20000318
    3d78:	00003ad1 	.word	0x00003ad1

00003d7c <LIDAR_REQ_get_info>:
{
    3d7c:	b530      	push	{r4, r5, lr}
    3d7e:	b083      	sub	sp, #12
	lidar_request = LIDAR_GET_INFO;
    3d80:	2550      	movs	r5, #80	; 0x50
    3d82:	4b0c      	ldr	r3, [pc, #48]	; (3db4 <LIDAR_REQ_get_info+0x38>)
    3d84:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3d86:	2200      	movs	r2, #0
    3d88:	4b0b      	ldr	r3, [pc, #44]	; (3db8 <LIDAR_REQ_get_info+0x3c>)
    3d8a:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    3d8c:	4b0b      	ldr	r3, [pc, #44]	; (3dbc <LIDAR_REQ_get_info+0x40>)
    3d8e:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3d90:	4c0b      	ldr	r4, [pc, #44]	; (3dc0 <LIDAR_REQ_get_info+0x44>)
    3d92:	9500      	str	r5, [sp, #0]
    3d94:	23a5      	movs	r3, #165	; 0xa5
    3d96:	4a0b      	ldr	r2, [pc, #44]	; (3dc4 <LIDAR_REQ_get_info+0x48>)
    3d98:	f44f 7180 	mov.w	r1, #256	; 0x100
    3d9c:	4620      	mov	r0, r4
    3d9e:	4d0a      	ldr	r5, [pc, #40]	; (3dc8 <LIDAR_REQ_get_info+0x4c>)
    3da0:	47a8      	blx	r5
    3da2:	b281      	uxth	r1, r0
    3da4:	4b09      	ldr	r3, [pc, #36]	; (3dcc <LIDAR_REQ_get_info+0x50>)
    3da6:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3da8:	4620      	mov	r0, r4
    3daa:	4b09      	ldr	r3, [pc, #36]	; (3dd0 <LIDAR_REQ_get_info+0x54>)
    3dac:	4798      	blx	r3
}
    3dae:	b003      	add	sp, #12
    3db0:	bd30      	pop	{r4, r5, pc}
    3db2:	bf00      	nop
    3db4:	20000321 	.word	0x20000321
    3db8:	2000031c 	.word	0x2000031c
    3dbc:	00003b2d 	.word	0x00003b2d
    3dc0:	20003b4c 	.word	0x20003b4c
    3dc4:	0000ba14 	.word	0x0000ba14
    3dc8:	00008575 	.word	0x00008575
    3dcc:	20000318 	.word	0x20000318
    3dd0:	00003ad1 	.word	0x00003ad1

00003dd4 <LIDAR_REQ_get_health>:
{
    3dd4:	b530      	push	{r4, r5, lr}
    3dd6:	b083      	sub	sp, #12
	lidar_request = LIDAR_GET_HEALTH;
    3dd8:	2552      	movs	r5, #82	; 0x52
    3dda:	4b0c      	ldr	r3, [pc, #48]	; (3e0c <LIDAR_REQ_get_health+0x38>)
    3ddc:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3dde:	2200      	movs	r2, #0
    3de0:	4b0b      	ldr	r3, [pc, #44]	; (3e10 <LIDAR_REQ_get_health+0x3c>)
    3de2:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    3de4:	4b0b      	ldr	r3, [pc, #44]	; (3e14 <LIDAR_REQ_get_health+0x40>)
    3de6:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3de8:	4c0b      	ldr	r4, [pc, #44]	; (3e18 <LIDAR_REQ_get_health+0x44>)
    3dea:	9500      	str	r5, [sp, #0]
    3dec:	23a5      	movs	r3, #165	; 0xa5
    3dee:	4a0b      	ldr	r2, [pc, #44]	; (3e1c <LIDAR_REQ_get_health+0x48>)
    3df0:	f44f 7180 	mov.w	r1, #256	; 0x100
    3df4:	4620      	mov	r0, r4
    3df6:	4d0a      	ldr	r5, [pc, #40]	; (3e20 <LIDAR_REQ_get_health+0x4c>)
    3df8:	47a8      	blx	r5
    3dfa:	b281      	uxth	r1, r0
    3dfc:	4b09      	ldr	r3, [pc, #36]	; (3e24 <LIDAR_REQ_get_health+0x50>)
    3dfe:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3e00:	4620      	mov	r0, r4
    3e02:	4b09      	ldr	r3, [pc, #36]	; (3e28 <LIDAR_REQ_get_health+0x54>)
    3e04:	4798      	blx	r3
}
    3e06:	b003      	add	sp, #12
    3e08:	bd30      	pop	{r4, r5, pc}
    3e0a:	bf00      	nop
    3e0c:	20000321 	.word	0x20000321
    3e10:	2000031c 	.word	0x2000031c
    3e14:	00003b2d 	.word	0x00003b2d
    3e18:	20003b4c 	.word	0x20003b4c
    3e1c:	0000ba14 	.word	0x0000ba14
    3e20:	00008575 	.word	0x00008575
    3e24:	20000318 	.word	0x20000318
    3e28:	00003ad1 	.word	0x00003ad1

00003e2c <LIDAR_REQ_get_samplerate>:
{
    3e2c:	b530      	push	{r4, r5, lr}
    3e2e:	b083      	sub	sp, #12
	lidar_request = LIDAR_GET_SAMPLERATE;
    3e30:	2559      	movs	r5, #89	; 0x59
    3e32:	4b0c      	ldr	r3, [pc, #48]	; (3e64 <LIDAR_REQ_get_samplerate+0x38>)
    3e34:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    3e36:	2200      	movs	r2, #0
    3e38:	4b0b      	ldr	r3, [pc, #44]	; (3e68 <LIDAR_REQ_get_samplerate+0x3c>)
    3e3a:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    3e3c:	4b0b      	ldr	r3, [pc, #44]	; (3e6c <LIDAR_REQ_get_samplerate+0x40>)
    3e3e:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    3e40:	4c0b      	ldr	r4, [pc, #44]	; (3e70 <LIDAR_REQ_get_samplerate+0x44>)
    3e42:	9500      	str	r5, [sp, #0]
    3e44:	23a5      	movs	r3, #165	; 0xa5
    3e46:	4a0b      	ldr	r2, [pc, #44]	; (3e74 <LIDAR_REQ_get_samplerate+0x48>)
    3e48:	f44f 7180 	mov.w	r1, #256	; 0x100
    3e4c:	4620      	mov	r0, r4
    3e4e:	4d0a      	ldr	r5, [pc, #40]	; (3e78 <LIDAR_REQ_get_samplerate+0x4c>)
    3e50:	47a8      	blx	r5
    3e52:	b281      	uxth	r1, r0
    3e54:	4b09      	ldr	r3, [pc, #36]	; (3e7c <LIDAR_REQ_get_samplerate+0x50>)
    3e56:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3e58:	4620      	mov	r0, r4
    3e5a:	4b09      	ldr	r3, [pc, #36]	; (3e80 <LIDAR_REQ_get_samplerate+0x54>)
    3e5c:	4798      	blx	r3
}
    3e5e:	b003      	add	sp, #12
    3e60:	bd30      	pop	{r4, r5, pc}
    3e62:	bf00      	nop
    3e64:	20000321 	.word	0x20000321
    3e68:	2000031c 	.word	0x2000031c
    3e6c:	00003b2d 	.word	0x00003b2d
    3e70:	20003b4c 	.word	0x20003b4c
    3e74:	0000ba14 	.word	0x0000ba14
    3e78:	00008575 	.word	0x00008575
    3e7c:	20000318 	.word	0x20000318
    3e80:	00003ad1 	.word	0x00003ad1

00003e84 <LIDAR_REQ_get_lidar_conf>:
{
    3e84:	b570      	push	{r4, r5, r6, lr}
    3e86:	b086      	sub	sp, #24
	uint8_t payload[2] = {0};
    3e88:	2300      	movs	r3, #0
    3e8a:	f8ad 3010 	strh.w	r3, [sp, #16]
	lidar_config = conf_type;
    3e8e:	b2cb      	uxtb	r3, r1
    3e90:	4a35      	ldr	r2, [pc, #212]	; (3f68 <LIDAR_REQ_get_lidar_conf+0xe4>)
    3e92:	7013      	strb	r3, [r2, #0]
		ctype[i] = conf_type << (i*8);
    3e94:	f88d 3014 	strb.w	r3, [sp, #20]
    3e98:	020a      	lsls	r2, r1, #8
    3e9a:	f88d 2015 	strb.w	r2, [sp, #21]
    3e9e:	040a      	lsls	r2, r1, #16
    3ea0:	f88d 2016 	strb.w	r2, [sp, #22]
    3ea4:	060a      	lsls	r2, r1, #24
    3ea6:	f88d 2017 	strb.w	r2, [sp, #23]
	switch (conf_type) {
    3eaa:	3970      	subs	r1, #112	; 0x70
    3eac:	290f      	cmp	r1, #15
    3eae:	d855      	bhi.n	3f5c <LIDAR_REQ_get_lidar_conf+0xd8>
    3eb0:	e8df f001 	tbb	[pc, r1]
    3eb4:	54543808 	.word	0x54543808
    3eb8:	5454463f 	.word	0x5454463f
    3ebc:	54545454 	.word	0x54545454
    3ec0:	4d545408 	.word	0x4d545408
			payload_size = 0x4;
    3ec4:	2404      	movs	r4, #4
					payload_size ^ payload[0] ^ payload[1];
    3ec6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3eca:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3ece:	404a      	eors	r2, r1
    3ed0:	f082 0221 	eor.w	r2, r2, #33	; 0x21
    3ed4:	4053      	eors	r3, r2
    3ed6:	4063      	eors	r3, r4
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_GET_LIDAR_CONF ^ conf_type ^ 
    3ed8:	f88d 300f 	strb.w	r3, [sp, #15]
	lidar_request = LIDAR_GET_LIDAR_CONF;
    3edc:	2684      	movs	r6, #132	; 0x84
    3ede:	4b23      	ldr	r3, [pc, #140]	; (3f6c <LIDAR_REQ_get_lidar_conf+0xe8>)
    3ee0:	701e      	strb	r6, [r3, #0]
	byte_count = 0;
    3ee2:	2200      	movs	r2, #0
    3ee4:	4b22      	ldr	r3, [pc, #136]	; (3f70 <LIDAR_REQ_get_lidar_conf+0xec>)
    3ee6:	601a      	str	r2, [r3, #0]
	reset_print_buffer();
    3ee8:	4b22      	ldr	r3, [pc, #136]	; (3f74 <LIDAR_REQ_get_lidar_conf+0xf0>)
    3eea:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE,
    3eec:	4d22      	ldr	r5, [pc, #136]	; (3f78 <LIDAR_REQ_get_lidar_conf+0xf4>)
    3eee:	9401      	str	r4, [sp, #4]
    3ef0:	9600      	str	r6, [sp, #0]
    3ef2:	23a5      	movs	r3, #165	; 0xa5
    3ef4:	4a21      	ldr	r2, [pc, #132]	; (3f7c <LIDAR_REQ_get_lidar_conf+0xf8>)
    3ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
    3efa:	4628      	mov	r0, r5
    3efc:	4e20      	ldr	r6, [pc, #128]	; (3f80 <LIDAR_REQ_get_lidar_conf+0xfc>)
    3efe:	47b0      	blx	r6
    3f00:	b281      	uxth	r1, r0
    3f02:	4b20      	ldr	r3, [pc, #128]	; (3f84 <LIDAR_REQ_get_lidar_conf+0x100>)
    3f04:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    3f06:	4628      	mov	r0, r5
    3f08:	4d1f      	ldr	r5, [pc, #124]	; (3f88 <LIDAR_REQ_get_lidar_conf+0x104>)
    3f0a:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)ctype, 4);
    3f0c:	2104      	movs	r1, #4
    3f0e:	a805      	add	r0, sp, #20
    3f10:	47a8      	blx	r5
	if (payload_size > 4) {
    3f12:	2c04      	cmp	r4, #4
    3f14:	d824      	bhi.n	3f60 <LIDAR_REQ_get_lidar_conf+0xdc>
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    3f16:	2101      	movs	r1, #1
    3f18:	f10d 000f 	add.w	r0, sp, #15
    3f1c:	4b1a      	ldr	r3, [pc, #104]	; (3f88 <LIDAR_REQ_get_lidar_conf+0x104>)
    3f1e:	4798      	blx	r3
}
    3f20:	b006      	add	sp, #24
    3f22:	bd70      	pop	{r4, r5, r6, pc}
			payload[0] = scan_mode;
    3f24:	f88d 0010 	strb.w	r0, [sp, #16]
			payload[1] = scan_mode >> 8;
    3f28:	0a00      	lsrs	r0, r0, #8
    3f2a:	f88d 0011 	strb.w	r0, [sp, #17]
			payload_size = 0x6;
    3f2e:	2406      	movs	r4, #6
			break;
    3f30:	e7c9      	b.n	3ec6 <LIDAR_REQ_get_lidar_conf+0x42>
			payload[0] = scan_mode;
    3f32:	f88d 0010 	strb.w	r0, [sp, #16]
			payload[1] = scan_mode >> 8;
    3f36:	0a00      	lsrs	r0, r0, #8
    3f38:	f88d 0011 	strb.w	r0, [sp, #17]
			payload_size = 0x6;
    3f3c:	2406      	movs	r4, #6
			break;
    3f3e:	e7c2      	b.n	3ec6 <LIDAR_REQ_get_lidar_conf+0x42>
			payload[0] = scan_mode;
    3f40:	f88d 0010 	strb.w	r0, [sp, #16]
			payload[1] = scan_mode >> 8;
    3f44:	0a00      	lsrs	r0, r0, #8
    3f46:	f88d 0011 	strb.w	r0, [sp, #17]
			payload_size = 0x6;
    3f4a:	2406      	movs	r4, #6
			break;
    3f4c:	e7bb      	b.n	3ec6 <LIDAR_REQ_get_lidar_conf+0x42>
			payload[0] = scan_mode;
    3f4e:	f88d 0010 	strb.w	r0, [sp, #16]
			payload[1] = scan_mode >> 8;
    3f52:	0a00      	lsrs	r0, r0, #8
    3f54:	f88d 0011 	strb.w	r0, [sp, #17]
			payload_size = 0x6;
    3f58:	2406      	movs	r4, #6
			break;
    3f5a:	e7b4      	b.n	3ec6 <LIDAR_REQ_get_lidar_conf+0x42>
	char payload_size = 0x0;
    3f5c:	2400      	movs	r4, #0
    3f5e:	e7b2      	b.n	3ec6 <LIDAR_REQ_get_lidar_conf+0x42>
		LIDAR_USART_send((uint8_t *)payload, 2);	
    3f60:	2102      	movs	r1, #2
    3f62:	a804      	add	r0, sp, #16
    3f64:	47a8      	blx	r5
    3f66:	e7d6      	b.n	3f16 <LIDAR_REQ_get_lidar_conf+0x92>
    3f68:	20000320 	.word	0x20000320
    3f6c:	20000321 	.word	0x20000321
    3f70:	2000031c 	.word	0x2000031c
    3f74:	00003b2d 	.word	0x00003b2d
    3f78:	20003b4c 	.word	0x20003b4c
    3f7c:	0000ba1c 	.word	0x0000ba1c
    3f80:	00008575 	.word	0x00008575
    3f84:	20000318 	.word	0x20000318
    3f88:	00003ad1 	.word	0x00003ad1

00003f8c <LIDAR_RES_express_scan>:
  *						+3		major[7:0]
  *	
  *				Dense:	+0		distance[15:0]
  */
uint8_t LIDAR_RES_express_scan(void) 
{ 
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t calc_checksum;
	uint8_t PAYLOAD_SIZE=(resp_desc.response_info & 0x3FFFFFFF), CABIN_START=4;
	uint16_t i, pos;
	
	uint8_t checksum = ((uint8_t)DATA_RESPONSE[1] << 4) | ((uint8_t)DATA_RESPONSE[0] & 0x0F);
    3f8e:	4b54      	ldr	r3, [pc, #336]	; (40e0 <LIDAR_RES_express_scan+0x154>)
    3f90:	785a      	ldrb	r2, [r3, #1]
    3f92:	781e      	ldrb	r6, [r3, #0]
    3f94:	f006 060f 	and.w	r6, r6, #15
    3f98:	ea46 1602 	orr.w	r6, r6, r2, lsl #4
    3f9c:	b2f6      	uxtb	r6, r6
	uint16_t start_angle = (uint8_t)DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    3f9e:	789c      	ldrb	r4, [r3, #2]
    3fa0:	fa5f fe84 	uxtb.w	lr, r4
    3fa4:	78df      	ldrb	r7, [r3, #3]
    3fa6:	b2ff      	uxtb	r7, r7
	uint8_t S_flag = (uint8_t)DATA_RESPONSE[3] >> 7;
    3fa8:	78dd      	ldrb	r5, [r3, #3]
    3faa:	b2ed      	uxtb	r5, r5

    /* Decrement byte count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= PAYLOAD_SIZE;
    3fac:	494d      	ldr	r1, [pc, #308]	; (40e4 <LIDAR_RES_express_scan+0x158>)
    3fae:	4b4e      	ldr	r3, [pc, #312]	; (40e8 <LIDAR_RES_express_scan+0x15c>)
    3fb0:	791b      	ldrb	r3, [r3, #4]
    3fb2:	680a      	ldr	r2, [r1, #0]
    3fb4:	1ad2      	subs	r2, r2, r3
    3fb6:	600a      	str	r2, [r1, #0]
	
	/* Check if data valid */
	calc_checksum = 0;
	for (i=2; i<PAYLOAD_SIZE; i++)
    3fb8:	b29b      	uxth	r3, r3
    3fba:	2b02      	cmp	r3, #2
    3fbc:	d912      	bls.n	3fe4 <LIDAR_RES_express_scan+0x58>
    3fbe:	3b03      	subs	r3, #3
    3fc0:	b298      	uxth	r0, r3
    3fc2:	3003      	adds	r0, #3
    3fc4:	2302      	movs	r3, #2
    3fc6:	2200      	movs	r2, #0
		calc_checksum ^= DATA_RESPONSE[i];
    3fc8:	4c45      	ldr	r4, [pc, #276]	; (40e0 <LIDAR_RES_express_scan+0x154>)
    3fca:	5ce1      	ldrb	r1, [r4, r3]
    3fcc:	404a      	eors	r2, r1
    3fce:	3301      	adds	r3, #1
	for (i=2; i<PAYLOAD_SIZE; i++)
    3fd0:	4283      	cmp	r3, r0
    3fd2:	d1fa      	bne.n	3fca <LIDAR_RES_express_scan+0x3e>
		
	if (checksum != calc_checksum) {
    3fd4:	4296      	cmp	r6, r2
    3fd6:	d007      	beq.n	3fe8 <LIDAR_RES_express_scan+0x5c>
		invalid_exp_scans++;
    3fd8:	4a44      	ldr	r2, [pc, #272]	; (40ec <LIDAR_RES_express_scan+0x160>)
    3fda:	6813      	ldr	r3, [r2, #0]
    3fdc:	3301      	adds	r3, #1
    3fde:	6013      	str	r3, [r2, #0]
		return 0;
    3fe0:	2000      	movs	r0, #0
    3fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	calc_checksum = 0;
    3fe4:	2200      	movs	r2, #0
    3fe6:	e7f5      	b.n	3fd4 <LIDAR_RES_express_scan+0x48>
	uint16_t start_angle = (uint8_t)DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    3fe8:	023c      	lsls	r4, r7, #8
    3fea:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
    3fee:	ea44 040e 	orr.w	r4, r4, lr
	uint8_t S_flag = (uint8_t)DATA_RESPONSE[3] >> 7;
    3ff2:	09ed      	lsrs	r5, r5, #7
	}

    switch (resp_desc.data_type) {
    3ff4:	4b3c      	ldr	r3, [pc, #240]	; (40e8 <LIDAR_RES_express_scan+0x15c>)
    3ff6:	7a1b      	ldrb	r3, [r3, #8]
    3ff8:	2b84      	cmp	r3, #132	; 0x84
    3ffa:	d035      	beq.n	4068 <LIDAR_RES_express_scan+0xdc>
    3ffc:	2b85      	cmp	r3, #133	; 0x85
    3ffe:	d05a      	beq.n	40b6 <LIDAR_RES_express_scan+0x12a>
    4000:	2b82      	cmp	r3, #130	; 0x82
    4002:	d001      	beq.n	4008 <LIDAR_RES_express_scan+0x7c>
											( (uint8_t)DATA_RESPONSE[pos+1]);
				dense_cabins[i].start_angle = start_angle;
			}
			break;
    }
	return 1;
    4004:	2001      	movs	r0, #1
}
    4006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4008:	4b39      	ldr	r3, [pc, #228]	; (40f0 <LIDAR_RES_express_scan+0x164>)
    400a:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
    switch (resp_desc.data_type) {
    400e:	2104      	movs	r1, #4
                legacy_cabins[i].distance1 =    ( (uint8_t)DATA_RESPONSE[pos+0] >> 1 ) |
    4010:	4a33      	ldr	r2, [pc, #204]	; (40e0 <LIDAR_RES_express_scan+0x154>)
				legacy_cabins[i].start_angle = start_angle;
    4012:	811c      	strh	r4, [r3, #8]
                legacy_cabins[i].distance1 =    ( (uint8_t)DATA_RESPONSE[pos+0] >> 1 ) |
    4014:	5c56      	ldrb	r6, [r2, r1]
    4016:	1c48      	adds	r0, r1, #1
												( (uint8_t)DATA_RESPONSE[pos+1] << 7 );
    4018:	5c10      	ldrb	r0, [r2, r0]
    401a:	01c0      	lsls	r0, r0, #7
                legacy_cabins[i].distance1 =    ( (uint8_t)DATA_RESPONSE[pos+0] >> 1 ) |
    401c:	ea40 0056 	orr.w	r0, r0, r6, lsr #1
    4020:	8098      	strh	r0, [r3, #4]
    4022:	1c8f      	adds	r7, r1, #2
				legacy_cabins[i].distance2 =	( (uint8_t)DATA_RESPONSE[pos+2] >> 1 ) |
    4024:	5dd6      	ldrb	r6, [r2, r7]
    4026:	1cc8      	adds	r0, r1, #3
												( (uint8_t)DATA_RESPONSE[pos+3] << 7 );
    4028:	5c10      	ldrb	r0, [r2, r0]
    402a:	01c0      	lsls	r0, r0, #7
				legacy_cabins[i].distance2 =	( (uint8_t)DATA_RESPONSE[pos+2] >> 1 ) |
    402c:	ea40 0056 	orr.w	r0, r0, r6, lsr #1
    4030:	80d8      	strh	r0, [r3, #6]
                legacy_cabins[i].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1 ) << 4) |
    4032:	5c50      	ldrb	r0, [r2, r1]
    4034:	f101 0e04 	add.w	lr, r1, #4
												( (uint8_t)DATA_RESPONSE[pos+4] & 0x0F );
    4038:	f812 600e 	ldrb.w	r6, [r2, lr]
                legacy_cabins[i].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1 ) << 4) |
    403c:	0100      	lsls	r0, r0, #4
    403e:	f000 0010 	and.w	r0, r0, #16
												( (uint8_t)DATA_RESPONSE[pos+4] & 0x0F );
    4042:	f006 060f 	and.w	r6, r6, #15
                legacy_cabins[i].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1 ) << 4) |
    4046:	4330      	orrs	r0, r6
    4048:	7058      	strb	r0, [r3, #1]
				legacy_cabins[i].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1 ) << 4) |
    404a:	5dd0      	ldrb	r0, [r2, r7]
												( (uint8_t)DATA_RESPONSE[pos+4] >> 4 );
    404c:	f812 600e 	ldrb.w	r6, [r2, lr]
				legacy_cabins[i].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1 ) << 4) |
    4050:	0100      	lsls	r0, r0, #4
    4052:	f000 0010 	and.w	r0, r0, #16
    4056:	ea40 1016 	orr.w	r0, r0, r6, lsr #4
    405a:	7098      	strb	r0, [r3, #2]
    405c:	330a      	adds	r3, #10
    405e:	3105      	adds	r1, #5
            for (i = 0; i < LEGACY_CABIN_COUNT; i++) {
    4060:	42ab      	cmp	r3, r5
    4062:	d1d6      	bne.n	4012 <LIDAR_RES_express_scan+0x86>
	return 1;
    4064:	2001      	movs	r0, #1
    4066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4068:	4e21      	ldr	r6, [pc, #132]	; (40f0 <LIDAR_RES_express_scan+0x164>)
    406a:	f106 03a0 	add.w	r3, r6, #160	; 0xa0
    406e:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
    switch (resp_desc.data_type) {
    4072:	2004      	movs	r0, #4
				ultra_cabins[i].predict2 =  ( (uint8_t)DATA_RESPONSE[pos+0] << 2 ) |
    4074:	491a      	ldr	r1, [pc, #104]	; (40e0 <LIDAR_RES_express_scan+0x154>)
				ultra_cabins[i].S = S_flag;
    4076:	701d      	strb	r5, [r3, #0]
				ultra_cabins[i].start_angle = start_angle;
    4078:	805c      	strh	r4, [r3, #2]
				ultra_cabins[i].predict2 =  ( (uint8_t)DATA_RESPONSE[pos+0] << 2 ) |
    407a:	f811 e000 	ldrb.w	lr, [r1, r0]
    407e:	1c47      	adds	r7, r0, #1
										    ( (uint8_t)DATA_RESPONSE[pos+1] >> 6 );
    4080:	5dca      	ldrb	r2, [r1, r7]
				ultra_cabins[i].predict2 =  ( (uint8_t)DATA_RESPONSE[pos+0] << 2 ) |
    4082:	0992      	lsrs	r2, r2, #6
    4084:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
    4088:	80da      	strh	r2, [r3, #6]
				ultra_cabins[i].predict1 =  (((uint8_t)DATA_RESPONSE[pos+1] & 0x3F ) << 4 ) |
    408a:	5dca      	ldrb	r2, [r1, r7]
    408c:	1c87      	adds	r7, r0, #2
										    ( (uint8_t)DATA_RESPONSE[pos+2] >> 4 );
    408e:	f811 e007 	ldrb.w	lr, [r1, r7]
				ultra_cabins[i].predict1 =  (((uint8_t)DATA_RESPONSE[pos+1] & 0x3F ) << 4 ) |
    4092:	0112      	lsls	r2, r2, #4
    4094:	f402 727c 	and.w	r2, r2, #1008	; 0x3f0
    4098:	ea42 121e 	orr.w	r2, r2, lr, lsr #4
    409c:	809a      	strh	r2, [r3, #4]
				ultra_cabins[i].major =     ( (uint8_t)DATA_RESPONSE[pos+2] << 8 ) |
    409e:	5dcf      	ldrb	r7, [r1, r7]
    40a0:	1cc2      	adds	r2, r0, #3
											( (uint8_t)DATA_RESPONSE[pos+3] );
    40a2:	5c8a      	ldrb	r2, [r1, r2]
				ultra_cabins[i].major =     ( (uint8_t)DATA_RESPONSE[pos+2] << 8 ) |
    40a4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    40a8:	811a      	strh	r2, [r3, #8]
    40aa:	330a      	adds	r3, #10
    40ac:	3004      	adds	r0, #4
			for (i = 0; i < EXT_CABIN_COUNT; i++) {
    40ae:	42b3      	cmp	r3, r6
    40b0:	d1e1      	bne.n	4076 <LIDAR_RES_express_scan+0xea>
	return 1;
    40b2:	2001      	movs	r0, #1
    40b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40b6:	4f0e      	ldr	r7, [pc, #56]	; (40f0 <LIDAR_RES_express_scan+0x164>)
    40b8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
    40bc:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
    switch (resp_desc.data_type) {
    40c0:	2204      	movs	r2, #4
				dense_cabins[i].distance =  ( (uint8_t)DATA_RESPONSE[pos+0] << 8) |
    40c2:	4807      	ldr	r0, [pc, #28]	; (40e0 <LIDAR_RES_express_scan+0x154>)
				dense_cabins[i].S = S_flag;
    40c4:	701d      	strb	r5, [r3, #0]
				dense_cabins[i].distance =  ( (uint8_t)DATA_RESPONSE[pos+0] << 8) |
    40c6:	5c86      	ldrb	r6, [r0, r2]
    40c8:	1c51      	adds	r1, r2, #1
											( (uint8_t)DATA_RESPONSE[pos+1]);
    40ca:	5c41      	ldrb	r1, [r0, r1]
				dense_cabins[i].distance =  ( (uint8_t)DATA_RESPONSE[pos+0] << 8) |
    40cc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    40d0:	8099      	strh	r1, [r3, #4]
				dense_cabins[i].start_angle = start_angle;
    40d2:	805c      	strh	r4, [r3, #2]
    40d4:	3306      	adds	r3, #6
    40d6:	3202      	adds	r2, #2
			for (i = 0; i < DENSE_CABIN_COUNT; i++) {
    40d8:	42bb      	cmp	r3, r7
    40da:	d1f3      	bne.n	40c4 <LIDAR_RES_express_scan+0x138>
	return 1;
    40dc:	2001      	movs	r0, #1
    40de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40e0:	20000290 	.word	0x20000290
    40e4:	2000031c 	.word	0x2000031c
    40e8:	20003b40 	.word	0x20003b40
    40ec:	20000324 	.word	0x20000324
    40f0:	20003c4c 	.word	0x20003c4c

000040f4 <LIDAR_RES_get_info>:
  *						+19 	serial_number[15]		
  * When converting serial_number to text from hex, the least significant byte 
  *	prints first.
  */
char* LIDAR_RES_get_info(void) 
{	
    40f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40f8:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	uint8_t model_id 		 = DATA_RESPONSE[0];
    40fc:	4b27      	ldr	r3, [pc, #156]	; (419c <LIDAR_RES_get_info+0xa8>)
    40fe:	f893 b000 	ldrb.w	fp, [r3]
    4102:	fa5f fb8b 	uxtb.w	fp, fp
	uint8_t firmware_minor	 = DATA_RESPONSE[1];
    4106:	f893 a001 	ldrb.w	sl, [r3, #1]
    410a:	fa5f fa8a 	uxtb.w	sl, sl
	uint8_t firmware_major	 = DATA_RESPONSE[2];
    410e:	f893 9002 	ldrb.w	r9, [r3, #2]
    4112:	fa5f f989 	uxtb.w	r9, r9
	uint8_t hardware_version = DATA_RESPONSE[3];
    4116:	f893 8003 	ldrb.w	r8, [r3, #3]
    411a:	fa5f f888 	uxtb.w	r8, r8
	char serial_number[16]	 = {0};
    411e:	2100      	movs	r1, #0
    4120:	9180      	str	r1, [sp, #512]	; 0x200
    4122:	9181      	str	r1, [sp, #516]	; 0x204
    4124:	9182      	str	r1, [sp, #520]	; 0x208
    4126:	9183      	str	r1, [sp, #524]	; 0x20c
	char tmp_info[512] = "";
    4128:	9100      	str	r1, [sp, #0]
    412a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
    412e:	a801      	add	r0, sp, #4
    4130:	4b1b      	ldr	r3, [pc, #108]	; (41a0 <LIDAR_RES_get_info+0xac>)
    4132:	4798      	blx	r3
    4134:	2404      	movs	r4, #4
	
	/** Get hexadecimal string output */
	int i;
	for (i=0; i<15; i++) {
		sprintf(&serial_number[i], "%02X", DATA_RESPONSE[i+4]);
    4136:	4f19      	ldr	r7, [pc, #100]	; (419c <LIDAR_RES_get_info+0xa8>)
    4138:	4e1a      	ldr	r6, [pc, #104]	; (41a4 <LIDAR_RES_get_info+0xb0>)
    413a:	4d1b      	ldr	r5, [pc, #108]	; (41a8 <LIDAR_RES_get_info+0xb4>)
    413c:	5d3a      	ldrb	r2, [r7, r4]
    413e:	ab84      	add	r3, sp, #528	; 0x210
    4140:	1918      	adds	r0, r3, r4
    4142:	4631      	mov	r1, r6
    4144:	3814      	subs	r0, #20
    4146:	47a8      	blx	r5
    4148:	3401      	adds	r4, #1
	for (i=0; i<15; i++) {
    414a:	2c13      	cmp	r4, #19
    414c:	d1f6      	bne.n	413c <LIDAR_RES_get_info+0x48>
	}
	
	/* Format string to print as header in .lam file */
	sprintf(tmp_info, "# RPLiDAR Model ID: %u\r\n", model_id);
    414e:	465a      	mov	r2, fp
    4150:	4916      	ldr	r1, [pc, #88]	; (41ac <LIDAR_RES_get_info+0xb8>)
    4152:	4668      	mov	r0, sp
    4154:	4d14      	ldr	r5, [pc, #80]	; (41a8 <LIDAR_RES_get_info+0xb4>)
    4156:	47a8      	blx	r5
	strcpy(info, tmp_info);
    4158:	4c15      	ldr	r4, [pc, #84]	; (41b0 <LIDAR_RES_get_info+0xbc>)
    415a:	4669      	mov	r1, sp
    415c:	4620      	mov	r0, r4
    415e:	4b15      	ldr	r3, [pc, #84]	; (41b4 <LIDAR_RES_get_info+0xc0>)
    4160:	4798      	blx	r3
	sprintf(tmp_info, "# RPLiDAR Firmware Version: %u.%u\r\n", firmware_major, firmware_minor);
    4162:	4653      	mov	r3, sl
    4164:	464a      	mov	r2, r9
    4166:	4914      	ldr	r1, [pc, #80]	; (41b8 <LIDAR_RES_get_info+0xc4>)
    4168:	4668      	mov	r0, sp
    416a:	47a8      	blx	r5
	strcat(info, tmp_info);
    416c:	4669      	mov	r1, sp
    416e:	4620      	mov	r0, r4
    4170:	4e12      	ldr	r6, [pc, #72]	; (41bc <LIDAR_RES_get_info+0xc8>)
    4172:	47b0      	blx	r6
	sprintf(tmp_info, "# Hardware Version: %u\r\n", hardware_version);
    4174:	4642      	mov	r2, r8
    4176:	4912      	ldr	r1, [pc, #72]	; (41c0 <LIDAR_RES_get_info+0xcc>)
    4178:	4668      	mov	r0, sp
    417a:	47a8      	blx	r5
	strcat(info, tmp_info);
    417c:	4669      	mov	r1, sp
    417e:	4620      	mov	r0, r4
    4180:	47b0      	blx	r6
	sprintf(tmp_info, "# Serial Number: 0x%s\r\n", serial_number);
    4182:	aa80      	add	r2, sp, #512	; 0x200
    4184:	490f      	ldr	r1, [pc, #60]	; (41c4 <LIDAR_RES_get_info+0xd0>)
    4186:	4668      	mov	r0, sp
    4188:	47a8      	blx	r5
	strcat(info, tmp_info);
    418a:	4669      	mov	r1, sp
    418c:	4620      	mov	r0, r4
    418e:	47b0      	blx	r6
	return info;
}
    4190:	4620      	mov	r0, r4
    4192:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    4196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    419a:	bf00      	nop
    419c:	20000290 	.word	0x20000290
    41a0:	00008189 	.word	0x00008189
    41a4:	0000ba24 	.word	0x0000ba24
    41a8:	000085dd 	.word	0x000085dd
    41ac:	0000ba2c 	.word	0x0000ba2c
    41b0:	20003f1c 	.word	0x20003f1c
    41b4:	000086dd 	.word	0x000086dd
    41b8:	0000ba48 	.word	0x0000ba48
    41bc:	000086ab 	.word	0x000086ab
    41c0:	0000ba6c 	.word	0x0000ba6c
    41c4:	0000ba88 	.word	0x0000ba88

000041c8 <LIDAR_RES_get_health>:
uint16_t LIDAR_RES_get_health(void) 
{
	char* status;
	uint16_t error_code;  
	
	switch(DATA_RESPONSE[0]) {
    41c8:	4b03      	ldr	r3, [pc, #12]	; (41d8 <LIDAR_RES_get_health+0x10>)
    41ca:	781a      	ldrb	r2, [r3, #0]
		case 1: status = "WARNING"; break;
		case 2: status = "ERROR"; break;
		default: status = "UNKNOWN"; break;
	}
	
	error_code = DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8);
    41cc:	7818      	ldrb	r0, [r3, #0]
    41ce:	785b      	ldrb	r3, [r3, #1]
    41d0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			printf(" : LiDAR Health is %s!\r\n : Error code: %u\r\n", 
				    status, error_code);
    }
	
	return error_code;
}
    41d4:	b280      	uxth	r0, r0
    41d6:	4770      	bx	lr
    41d8:	20000290 	.word	0x20000290

000041dc <LIDAR_RES_get_lidar_conf>:
  *						+(n+4)	payload[n]	
  */
void LIDAR_RES_get_lidar_conf(void)
{
	int i;
	uint32_t conf_type = (uint8_t)DATA_RESPONSE[0] | ((uint8_t)DATA_RESPONSE[1] << 8) |
    41dc:	493c      	ldr	r1, [pc, #240]	; (42d0 <LIDAR_RES_get_lidar_conf+0xf4>)
    41de:	780b      	ldrb	r3, [r1, #0]
    41e0:	7848      	ldrb	r0, [r1, #1]
						 ((uint8_t)DATA_RESPONSE[2] << 16) | ((uint8_t)DATA_RESPONSE[3] << 24);
    41e2:	788a      	ldrb	r2, [r1, #2]
    41e4:	78c9      	ldrb	r1, [r1, #3]
    41e6:	0412      	lsls	r2, r2, #16
	uint32_t conf_type = (uint8_t)DATA_RESPONSE[0] | ((uint8_t)DATA_RESPONSE[1] << 8) |
    41e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    41ec:	4313      	orrs	r3, r2
						 ((uint8_t)DATA_RESPONSE[2] << 16) | ((uint8_t)DATA_RESPONSE[3] << 24);
    41ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	
	switch (conf_type) {
    41f2:	3b70      	subs	r3, #112	; 0x70
    41f4:	2b0f      	cmp	r3, #15
    41f6:	d869      	bhi.n	42cc <LIDAR_RES_get_lidar_conf+0xf0>
    41f8:	e8df f003 	tbb	[pc, r3]
    41fc:	68683d35 	.word	0x68683d35
    4200:	68685b4c 	.word	0x68685b4c
    4204:	68686868 	.word	0x68686868
    4208:	08686860 	.word	0x08686860
				printf(" : Typical scan mode id of LiDAR is %"PRIu16"\r\n", conf_data.resp1);
			conf_data.resp1 = conf_data.resp1;
			return;
		
		case CONF_SCAN_MODE_NAME:
			for (i=0; i<(resp_desc.response_info & 0x3FFFFFFF); i++)
    420c:	4b31      	ldr	r3, [pc, #196]	; (42d4 <LIDAR_RES_get_lidar_conf+0xf8>)
    420e:	685b      	ldr	r3, [r3, #4]
    4210:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
    4214:	d026      	beq.n	4264 <LIDAR_RES_get_lidar_conf+0x88>
{
    4216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    421a:	b082      	sub	sp, #8
    421c:	4d2e      	ldr	r5, [pc, #184]	; (42d8 <LIDAR_RES_get_lidar_conf+0xfc>)
			for (i=0; i<(resp_desc.response_info & 0x3FFFFFFF); i++)
    421e:	2400      	movs	r4, #0
				conf_data.resp3[i] = toupper(DATA_RESPONSE[i+4]);
    4220:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 42d0 <LIDAR_RES_get_lidar_conf+0xf4>
    4224:	4f2d      	ldr	r7, [pc, #180]	; (42dc <LIDAR_RES_get_lidar_conf+0x100>)
			for (i=0; i<(resp_desc.response_info & 0x3FFFFFFF); i++)
    4226:	4e2b      	ldr	r6, [pc, #172]	; (42d4 <LIDAR_RES_get_lidar_conf+0xf8>)
    4228:	1d23      	adds	r3, r4, #4
				conf_data.resp3[i] = toupper(DATA_RESPONSE[i+4]);
    422a:	f818 3003 	ldrb.w	r3, [r8, r3]
    422e:	b2db      	uxtb	r3, r3
    4230:	f88d 3007 	strb.w	r3, [sp, #7]
    4234:	47b8      	blx	r7
    4236:	f89d 3007 	ldrb.w	r3, [sp, #7]
    423a:	4418      	add	r0, r3
    423c:	7843      	ldrb	r3, [r0, #1]
    423e:	f003 0303 	and.w	r3, r3, #3
    4242:	2b02      	cmp	r3, #2
    4244:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4248:	bf0c      	ite	eq
    424a:	3b20      	subeq	r3, #32
    424c:	b2db      	uxtbne	r3, r3
    424e:	f805 3f01 	strb.w	r3, [r5, #1]!
			for (i=0; i<(resp_desc.response_info & 0x3FFFFFFF); i++)
    4252:	3401      	adds	r4, #1
    4254:	6873      	ldr	r3, [r6, #4]
    4256:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    425a:	42a3      	cmp	r3, r4
    425c:	d8e4      	bhi.n	4228 <LIDAR_RES_get_lidar_conf+0x4c>
			if (LAMS_DEBUG)
				printf(" : Specified scan mode name is %s\r\n", conf_data.resp3);
			return;
	}
    425e:	b002      	add	sp, #8
    4260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4264:	4770      	bx	lr
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) | 
    4266:	4a1a      	ldr	r2, [pc, #104]	; (42d0 <LIDAR_RES_get_lidar_conf+0xf4>)
    4268:	7913      	ldrb	r3, [r2, #4]
								((uint8_t)DATA_RESPONSE[5] << 8) );
    426a:	7952      	ldrb	r2, [r2, #5]
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) | 
    426c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4270:	4a1b      	ldr	r2, [pc, #108]	; (42e0 <LIDAR_RES_get_lidar_conf+0x104>)
    4272:	8013      	strh	r3, [r2, #0]
			return;
    4274:	4770      	bx	lr
			conf_data.resp2 = ( ((uint8_t)DATA_RESPONSE[4])       |
    4276:	4916      	ldr	r1, [pc, #88]	; (42d0 <LIDAR_RES_get_lidar_conf+0xf4>)
    4278:	790b      	ldrb	r3, [r1, #4]
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    427a:	7948      	ldrb	r0, [r1, #5]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    427c:	798a      	ldrb	r2, [r1, #6]
								((uint8_t)DATA_RESPONSE[7] << 24) );
    427e:	79c9      	ldrb	r1, [r1, #7]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4280:	0412      	lsls	r2, r2, #16
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    4282:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4286:	4313      	orrs	r3, r2
								((uint8_t)DATA_RESPONSE[6] << 16) |
    4288:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
			conf_data.resp2 = conf_data.resp2 / (1 << 8);
    428c:	0a1b      	lsrs	r3, r3, #8
    428e:	4a14      	ldr	r2, [pc, #80]	; (42e0 <LIDAR_RES_get_lidar_conf+0x104>)
    4290:	6013      	str	r3, [r2, #0]
			return;
    4292:	4770      	bx	lr
			conf_data.resp2 = ( ((uint8_t)DATA_RESPONSE[4])       |
    4294:	490e      	ldr	r1, [pc, #56]	; (42d0 <LIDAR_RES_get_lidar_conf+0xf4>)
    4296:	790b      	ldrb	r3, [r1, #4]
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    4298:	7948      	ldrb	r0, [r1, #5]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    429a:	798a      	ldrb	r2, [r1, #6]
								((uint8_t)DATA_RESPONSE[7] << 24) );
    429c:	79c9      	ldrb	r1, [r1, #7]
								((uint8_t)DATA_RESPONSE[6] << 16) |
    429e:	0412      	lsls	r2, r2, #16
								((uint8_t)DATA_RESPONSE[5] << 8 ) |
    42a0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    42a4:	4313      	orrs	r3, r2
								((uint8_t)DATA_RESPONSE[6] << 16) |
    42a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
			conf_data.resp2 = conf_data.resp2 / (1 << 8);
    42aa:	0a1b      	lsrs	r3, r3, #8
    42ac:	4a0c      	ldr	r2, [pc, #48]	; (42e0 <LIDAR_RES_get_lidar_conf+0x104>)
    42ae:	6013      	str	r3, [r2, #0]
			return;
    42b0:	4770      	bx	lr
			conf_data.resp0 = (uint8_t)DATA_RESPONSE[4];
    42b2:	4b07      	ldr	r3, [pc, #28]	; (42d0 <LIDAR_RES_get_lidar_conf+0xf4>)
    42b4:	791a      	ldrb	r2, [r3, #4]
    42b6:	4b0a      	ldr	r3, [pc, #40]	; (42e0 <LIDAR_RES_get_lidar_conf+0x104>)
    42b8:	701a      	strb	r2, [r3, #0]
			return;
    42ba:	4770      	bx	lr
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) |
    42bc:	4a04      	ldr	r2, [pc, #16]	; (42d0 <LIDAR_RES_get_lidar_conf+0xf4>)
    42be:	7913      	ldrb	r3, [r2, #4]
								((uint8_t)DATA_RESPONSE[5] << 8) );
    42c0:	7952      	ldrb	r2, [r2, #5]
			conf_data.resp1 = ( ((uint8_t)DATA_RESPONSE[4]) |
    42c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    42c6:	4a06      	ldr	r2, [pc, #24]	; (42e0 <LIDAR_RES_get_lidar_conf+0x104>)
    42c8:	8013      	strh	r3, [r2, #0]
			return;
    42ca:	4770      	bx	lr
    42cc:	4770      	bx	lr
    42ce:	bf00      	nop
    42d0:	20000290 	.word	0x20000290
    42d4:	20003b40 	.word	0x20003b40
    42d8:	2000032f 	.word	0x2000032f
    42dc:	00008149 	.word	0x00008149
    42e0:	20000330 	.word	0x20000330

000042e4 <main>:

/** 
  * Application entry point
  */ 
int main(void)
{
    42e4:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	start_init();
    42e6:	4b0e      	ldr	r3, [pc, #56]	; (4320 <main+0x3c>)
    42e8:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    42ea:	4b0e      	ldr	r3, [pc, #56]	; (4324 <main+0x40>)
    42ec:	f642 62df 	movw	r2, #11999	; 0x2edf
    42f0:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    42f2:	21e0      	movs	r1, #224	; 0xe0
    42f4:	4a0c      	ldr	r2, [pc, #48]	; (4328 <main+0x44>)
    42f6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    42fa:	2100      	movs	r1, #0
    42fc:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    42fe:	2207      	movs	r2, #7
    4300:	601a      	str	r2, [r3, #0]
	//delay_init(0);
	SysTick_Config(12000UL); /* 12M ticks/seconds / 1k ticks/second = 120000 */
	
	status = STATUS_IDLE;
    4302:	4b0a      	ldr	r3, [pc, #40]	; (432c <main+0x48>)
    4304:	7019      	strb	r1, [r3, #0]
	
	printf("\r\nLAMS_DEBUG = %u\r\n", LAMS_DEBUG);
    4306:	480a      	ldr	r0, [pc, #40]	; (4330 <main+0x4c>)
    4308:	4b0a      	ldr	r3, [pc, #40]	; (4334 <main+0x50>)
    430a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    430c:	2240      	movs	r2, #64	; 0x40
    430e:	4b0a      	ldr	r3, [pc, #40]	; (4338 <main+0x54>)
    4310:	615a      	str	r2, [r3, #20]
	
	gpio_set_pin_level(LED_STATUS, 0);
	SERVO_set_angle(0);
    4312:	2000      	movs	r0, #0
    4314:	2100      	movs	r1, #0
    4316:	4b09      	ldr	r3, [pc, #36]	; (433c <main+0x58>)
    4318:	4798      	blx	r3
		} 
	} 
    /* LAMS_DEBUG = 0 */
    else {
		while (1) {
			scan();
    431a:	4c09      	ldr	r4, [pc, #36]	; (4340 <main+0x5c>)
    431c:	47a0      	blx	r4
    431e:	e7fd      	b.n	431c <main+0x38>
    4320:	00005f39 	.word	0x00005f39
    4324:	e000e010 	.word	0xe000e010
    4328:	e000ed00 	.word	0xe000ed00
    432c:	20004474 	.word	0x20004474
    4330:	0000baa0 	.word	0x0000baa0
    4334:	000082f1 	.word	0x000082f1
    4338:	41008000 	.word	0x41008000
    433c:	00005e71 	.word	0x00005e71
    4340:	000044a1 	.word	0x000044a1

00004344 <process>:

/**
  * Process bytes coming from lidar in order to read valid responses
  */ 
 uint8_t process(void)
 {
    4344:	b510      	push	{r4, lr}
     unsigned data_idx;

     if (!usart_sync_is_rx_not_empty(&LIDAR_USART))
    4346:	484e      	ldr	r0, [pc, #312]	; (4480 <process+0x13c>)
    4348:	4b4e      	ldr	r3, [pc, #312]	; (4484 <process+0x140>)
    434a:	4798      	blx	r3
    434c:	2800      	cmp	r0, #0
    434e:	f000 8092 	beq.w	4476 <process+0x132>
		return PROCESSING;
	
	/* Process response descriptor */
	switch (byte_count) {
    4352:	4b4d      	ldr	r3, [pc, #308]	; (4488 <process+0x144>)
    4354:	681c      	ldr	r4, [r3, #0]
    4356:	2c06      	cmp	r4, #6
    4358:	d85c      	bhi.n	4414 <process+0xd0>
    435a:	e8df f004 	tbb	[pc, r4]
    435e:	1204      	.short	0x1204
    4360:	44372a20 	.word	0x44372a20
    4364:	51          	.byte	0x51
    4365:	00          	.byte	0x00
		case 0:
			resp_desc.start1 = LIDAR_USART_read_byte();
    4366:	4b49      	ldr	r3, [pc, #292]	; (448c <process+0x148>)
    4368:	4798      	blx	r3
    436a:	4b49      	ldr	r3, [pc, #292]	; (4490 <process+0x14c>)
    436c:	7018      	strb	r0, [r3, #0]
			/* check sync -- 0xA5 */
			if (resp_desc.start1 == 0xA5)
    436e:	28a5      	cmp	r0, #165	; 0xa5
    4370:	d001      	beq.n	4376 <process+0x32>
				byte_count++;
			return PROCESSING;
    4372:	2000      	movs	r0, #0
    4374:	bd10      	pop	{r4, pc}
				byte_count++;
    4376:	4a44      	ldr	r2, [pc, #272]	; (4488 <process+0x144>)
    4378:	6813      	ldr	r3, [r2, #0]
    437a:	3301      	adds	r3, #1
    437c:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    437e:	2000      	movs	r0, #0
    4380:	bd10      	pop	{r4, pc}
		
		case 1:
			resp_desc.start2 = LIDAR_USART_read_byte();
    4382:	4b42      	ldr	r3, [pc, #264]	; (448c <process+0x148>)
    4384:	4798      	blx	r3
    4386:	4b42      	ldr	r3, [pc, #264]	; (4490 <process+0x14c>)
    4388:	7058      	strb	r0, [r3, #1]
			/* check sync -- 0x5A */
			if (resp_desc.start2 != 0x5A)
    438a:	285a      	cmp	r0, #90	; 0x5a
				byte_count--;
    438c:	4a3e      	ldr	r2, [pc, #248]	; (4488 <process+0x144>)
    438e:	6813      	ldr	r3, [r2, #0]
    4390:	bf14      	ite	ne
    4392:	f103 33ff 	addne.w	r3, r3, #4294967295
			else
				byte_count++;
    4396:	3301      	addeq	r3, #1
    4398:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    439a:	2000      	movs	r0, #0
    439c:	bd10      	pop	{r4, pc}
		
		case 2:
			resp_desc.response_info = LIDAR_USART_read_byte();
    439e:	4b3b      	ldr	r3, [pc, #236]	; (448c <process+0x148>)
    43a0:	4798      	blx	r3
    43a2:	4b3b      	ldr	r3, [pc, #236]	; (4490 <process+0x14c>)
    43a4:	6058      	str	r0, [r3, #4]
			byte_count++;
    43a6:	4a38      	ldr	r2, [pc, #224]	; (4488 <process+0x144>)
    43a8:	6813      	ldr	r3, [r2, #0]
    43aa:	3301      	adds	r3, #1
    43ac:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    43ae:	2000      	movs	r0, #0
    43b0:	bd10      	pop	{r4, pc}
		
		case 3:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    43b2:	4b36      	ldr	r3, [pc, #216]	; (448c <process+0x148>)
    43b4:	4798      	blx	r3
    43b6:	4a36      	ldr	r2, [pc, #216]	; (4490 <process+0x14c>)
    43b8:	6853      	ldr	r3, [r2, #4]
    43ba:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    43be:	6050      	str	r0, [r2, #4]
			byte_count++;
    43c0:	4a31      	ldr	r2, [pc, #196]	; (4488 <process+0x144>)
    43c2:	6813      	ldr	r3, [r2, #0]
    43c4:	3301      	adds	r3, #1
    43c6:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    43c8:	2000      	movs	r0, #0
    43ca:	bd10      	pop	{r4, pc}
		
		case 4:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    43cc:	4b2f      	ldr	r3, [pc, #188]	; (448c <process+0x148>)
    43ce:	4798      	blx	r3
    43d0:	4a2f      	ldr	r2, [pc, #188]	; (4490 <process+0x14c>)
    43d2:	6853      	ldr	r3, [r2, #4]
    43d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    43d8:	6050      	str	r0, [r2, #4]
			byte_count++;
    43da:	4a2b      	ldr	r2, [pc, #172]	; (4488 <process+0x144>)
    43dc:	6813      	ldr	r3, [r2, #0]
    43de:	3301      	adds	r3, #1
    43e0:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    43e2:	2000      	movs	r0, #0
    43e4:	bd10      	pop	{r4, pc}
		
		case 5:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    43e6:	4b29      	ldr	r3, [pc, #164]	; (448c <process+0x148>)
    43e8:	4798      	blx	r3
    43ea:	4a29      	ldr	r2, [pc, #164]	; (4490 <process+0x14c>)
    43ec:	6853      	ldr	r3, [r2, #4]
    43ee:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    43f2:	6050      	str	r0, [r2, #4]
			byte_count++;
    43f4:	4a24      	ldr	r2, [pc, #144]	; (4488 <process+0x144>)
    43f6:	6813      	ldr	r3, [r2, #0]
    43f8:	3301      	adds	r3, #1
    43fa:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    43fc:	2000      	movs	r0, #0
    43fe:	bd10      	pop	{r4, pc}
		
		case 6:
			resp_desc.data_type = LIDAR_USART_read_byte();
    4400:	4b22      	ldr	r3, [pc, #136]	; (448c <process+0x148>)
    4402:	4798      	blx	r3
    4404:	4b22      	ldr	r3, [pc, #136]	; (4490 <process+0x14c>)
    4406:	7218      	strb	r0, [r3, #8]
			byte_count++;
    4408:	4a1f      	ldr	r2, [pc, #124]	; (4488 <process+0x144>)
    440a:	6813      	ldr	r3, [r2, #0]
    440c:	3301      	adds	r3, #1
    440e:	6013      	str	r3, [r2, #0]
			return PROCESSING;
    4410:	2000      	movs	r0, #0
    4412:	bd10      	pop	{r4, pc}
		
		/* Process response data packets */
		default:
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    4414:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    4416:	4b1d      	ldr	r3, [pc, #116]	; (448c <process+0x148>)
    4418:	4798      	blx	r3
    441a:	4b1e      	ldr	r3, [pc, #120]	; (4494 <process+0x150>)
    441c:	5518      	strb	r0, [r3, r4]
			
			if (lidar_request == LIDAR_EXPRESS_SCAN) {
    441e:	4b1e      	ldr	r3, [pc, #120]	; (4498 <process+0x154>)
    4420:	781b      	ldrb	r3, [r3, #0]
    4422:	2b82      	cmp	r3, #130	; 0x82
    4424:	d00d      	beq.n	4442 <process+0xfe>
						byte_count--;
						return PROCESSING;
					}
				}
			}
			byte_count++;
    4426:	4b18      	ldr	r3, [pc, #96]	; (4488 <process+0x144>)
    4428:	681a      	ldr	r2, [r3, #0]
    442a:	3201      	adds	r2, #1
    442c:	601a      	str	r2, [r3, #0]
	};
	
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    442e:	4b18      	ldr	r3, [pc, #96]	; (4490 <process+0x14c>)
    4430:	685b      	ldr	r3, [r3, #4]
    4432:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    4436:	3307      	adds	r3, #7
    4438:	429a      	cmp	r2, r3
    443a:	d01e      	beq.n	447a <process+0x136>
		return COMPLETED;
	} else if (byte_count > (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    443c:	d816      	bhi.n	446c <process+0x128>
		scan_error(SCAN_ERR_OUT_OF_BOUNDS);
	}
	
	return PROCESSING;
    443e:	2000      	movs	r0, #0
}
    4440:	bd10      	pop	{r4, pc}
				if (data_idx == 0) {
    4442:	b934      	cbnz	r4, 4452 <process+0x10e>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    4444:	4b13      	ldr	r3, [pc, #76]	; (4494 <process+0x150>)
    4446:	781b      	ldrb	r3, [r3, #0]
    4448:	091b      	lsrs	r3, r3, #4
    444a:	2b0a      	cmp	r3, #10
    444c:	d0eb      	beq.n	4426 <process+0xe2>
						return PROCESSING;
    444e:	2000      	movs	r0, #0
    4450:	bd10      	pop	{r4, pc}
				else if (data_idx == 1) {
    4452:	2c01      	cmp	r4, #1
    4454:	d1e7      	bne.n	4426 <process+0xe2>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    4456:	4b0f      	ldr	r3, [pc, #60]	; (4494 <process+0x150>)
    4458:	785b      	ldrb	r3, [r3, #1]
    445a:	091b      	lsrs	r3, r3, #4
    445c:	2b05      	cmp	r3, #5
    445e:	d0e2      	beq.n	4426 <process+0xe2>
						byte_count--;
    4460:	4a09      	ldr	r2, [pc, #36]	; (4488 <process+0x144>)
    4462:	6813      	ldr	r3, [r2, #0]
    4464:	3b01      	subs	r3, #1
    4466:	6013      	str	r3, [r2, #0]
						return PROCESSING;
    4468:	2000      	movs	r0, #0
    446a:	bd10      	pop	{r4, pc}
		scan_error(SCAN_ERR_OUT_OF_BOUNDS);
    446c:	2001      	movs	r0, #1
    446e:	4b0b      	ldr	r3, [pc, #44]	; (449c <process+0x158>)
    4470:	4798      	blx	r3
	return PROCESSING;
    4472:	2000      	movs	r0, #0
    4474:	bd10      	pop	{r4, pc}
		return PROCESSING;
    4476:	2000      	movs	r0, #0
    4478:	bd10      	pop	{r4, pc}
		return COMPLETED;
    447a:	2001      	movs	r0, #1
    447c:	bd10      	pop	{r4, pc}
    447e:	bf00      	nop
    4480:	20004460 	.word	0x20004460
    4484:	00002a71 	.word	0x00002a71
    4488:	2000031c 	.word	0x2000031c
    448c:	00003afd 	.word	0x00003afd
    4490:	20003b40 	.word	0x20003b40
    4494:	20000290 	.word	0x20000290
    4498:	20000321 	.word	0x20000321
    449c:	00004901 	.word	0x00004901

000044a0 <scan>:
 {
    44a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44a4:	b083      	sub	sp, #12
	SERVO_set_angle(0);
    44a6:	2000      	movs	r0, #0
    44a8:	2100      	movs	r1, #0
    44aa:	4b80      	ldr	r3, [pc, #512]	; (46ac <scan+0x20c>)
    44ac:	4798      	blx	r3
	dstatus = disk_initialize(0);
    44ae:	2000      	movs	r0, #0
    44b0:	4b7f      	ldr	r3, [pc, #508]	; (46b0 <scan+0x210>)
    44b2:	4798      	blx	r3
    44b4:	4b7f      	ldr	r3, [pc, #508]	; (46b4 <scan+0x214>)
    44b6:	7018      	strb	r0, [r3, #0]
	if (dstatus)
    44b8:	2800      	cmp	r0, #0
    44ba:	f040 808b 	bne.w	45d4 <scan+0x134>
	fresult = f_mount(&fatfs, path, 0);
    44be:	2200      	movs	r2, #0
    44c0:	497d      	ldr	r1, [pc, #500]	; (46b8 <scan+0x218>)
    44c2:	487e      	ldr	r0, [pc, #504]	; (46bc <scan+0x21c>)
    44c4:	4b7e      	ldr	r3, [pc, #504]	; (46c0 <scan+0x220>)
    44c6:	4798      	blx	r3
    44c8:	4b7e      	ldr	r3, [pc, #504]	; (46c4 <scan+0x224>)
    44ca:	7018      	strb	r0, [r3, #0]
	if (fresult)
    44cc:	2800      	cmp	r0, #0
    44ce:	f040 8085 	bne.w	45dc <scan+0x13c>
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    44d2:	4f7d      	ldr	r7, [pc, #500]	; (46c8 <scan+0x228>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    44d4:	4d7d      	ldr	r5, [pc, #500]	; (46cc <scan+0x22c>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    44d6:	4e7e      	ldr	r6, [pc, #504]	; (46d0 <scan+0x230>)
	CRITICAL_SECTION_ENTER();
    44d8:	a801      	add	r0, sp, #4
    44da:	47b8      	blx	r7
    44dc:	682a      	ldr	r2, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    44de:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    44e0:	692c      	ldr	r4, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    44e2:	405c      	eors	r4, r3
    44e4:	4014      	ands	r4, r2
    44e6:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    44e8:	a801      	add	r0, sp, #4
    44ea:	47b0      	blx	r6
	while (!gpio_get_pin_level(START_BTN));
    44ec:	f014 6f00 	tst.w	r4, #134217728	; 0x8000000
    44f0:	d0f2      	beq.n	44d8 <scan+0x38>
	status = STATUS_PROCESSING;
    44f2:	2201      	movs	r2, #1
    44f4:	4b77      	ldr	r3, [pc, #476]	; (46d4 <scan+0x234>)
    44f6:	701a      	strb	r2, [r3, #0]
	timer = 10000;
    44f8:	f242 7210 	movw	r2, #10000	; 0x2710
    44fc:	4b76      	ldr	r3, [pc, #472]	; (46d8 <scan+0x238>)
    44fe:	601a      	str	r2, [r3, #0]
	while (timer);
    4500:	461a      	mov	r2, r3
    4502:	6813      	ldr	r3, [r2, #0]
    4504:	2b00      	cmp	r3, #0
    4506:	d1fc      	bne.n	4502 <scan+0x62>
	printf("0\r\n");
    4508:	4874      	ldr	r0, [pc, #464]	; (46dc <scan+0x23c>)
    450a:	4b75      	ldr	r3, [pc, #468]	; (46e0 <scan+0x240>)
    450c:	4798      	blx	r3
	fresult = f_open(&fptr, get_new_filename(), FA_READ | FA_WRITE | FA_CREATE_NEW);
    450e:	4b75      	ldr	r3, [pc, #468]	; (46e4 <scan+0x244>)
    4510:	4798      	blx	r3
    4512:	2207      	movs	r2, #7
    4514:	4601      	mov	r1, r0
    4516:	4874      	ldr	r0, [pc, #464]	; (46e8 <scan+0x248>)
    4518:	4b74      	ldr	r3, [pc, #464]	; (46ec <scan+0x24c>)
    451a:	4798      	blx	r3
    451c:	4b69      	ldr	r3, [pc, #420]	; (46c4 <scan+0x224>)
    451e:	7018      	strb	r0, [r3, #0]
	if (fresult)
    4520:	2800      	cmp	r0, #0
    4522:	d15f      	bne.n	45e4 <scan+0x144>
	write_print_buffer(sprintf(scan_print_buffer, "# filename: %s\r\n", filename));
    4524:	4a72      	ldr	r2, [pc, #456]	; (46f0 <scan+0x250>)
    4526:	4973      	ldr	r1, [pc, #460]	; (46f4 <scan+0x254>)
    4528:	4873      	ldr	r0, [pc, #460]	; (46f8 <scan+0x258>)
    452a:	4b74      	ldr	r3, [pc, #464]	; (46fc <scan+0x25c>)
    452c:	4798      	blx	r3
    452e:	4b74      	ldr	r3, [pc, #464]	; (4700 <scan+0x260>)
    4530:	4798      	blx	r3
	LIDAR_REQ_reset();
    4532:	4b74      	ldr	r3, [pc, #464]	; (4704 <scan+0x264>)
    4534:	4798      	blx	r3
	LIDAR_REQ_get_health();
    4536:	4b74      	ldr	r3, [pc, #464]	; (4708 <scan+0x268>)
    4538:	4798      	blx	r3
	while (!process());
    453a:	4c74      	ldr	r4, [pc, #464]	; (470c <scan+0x26c>)
    453c:	47a0      	blx	r4
    453e:	2800      	cmp	r0, #0
    4540:	d0fc      	beq.n	453c <scan+0x9c>
	error_code = LIDAR_RES_get_health();
    4542:	4b73      	ldr	r3, [pc, #460]	; (4710 <scan+0x270>)
    4544:	4798      	blx	r3
	if (error_code)
    4546:	2800      	cmp	r0, #0
    4548:	d150      	bne.n	45ec <scan+0x14c>
	LIDAR_REQ_get_info();
    454a:	4b72      	ldr	r3, [pc, #456]	; (4714 <scan+0x274>)
    454c:	4798      	blx	r3
	while (!process());
    454e:	4c6f      	ldr	r4, [pc, #444]	; (470c <scan+0x26c>)
    4550:	47a0      	blx	r4
    4552:	2800      	cmp	r0, #0
    4554:	d0fc      	beq.n	4550 <scan+0xb0>
	info = LIDAR_RES_get_info();
    4556:	4b70      	ldr	r3, [pc, #448]	; (4718 <scan+0x278>)
    4558:	4798      	blx	r3
	write_print_buffer(sprintf(scan_print_buffer, "%s", info));
    455a:	4602      	mov	r2, r0
    455c:	496f      	ldr	r1, [pc, #444]	; (471c <scan+0x27c>)
    455e:	4866      	ldr	r0, [pc, #408]	; (46f8 <scan+0x258>)
    4560:	4b66      	ldr	r3, [pc, #408]	; (46fc <scan+0x25c>)
    4562:	4798      	blx	r3
    4564:	4b66      	ldr	r3, [pc, #408]	; (4700 <scan+0x260>)
    4566:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_NAME);
    4568:	217f      	movs	r1, #127	; 0x7f
    456a:	2001      	movs	r0, #1
    456c:	4b6c      	ldr	r3, [pc, #432]	; (4720 <scan+0x280>)
    456e:	4798      	blx	r3
	while (!process());
    4570:	4c66      	ldr	r4, [pc, #408]	; (470c <scan+0x26c>)
    4572:	47a0      	blx	r4
    4574:	2800      	cmp	r0, #0
    4576:	d0fc      	beq.n	4572 <scan+0xd2>
	LIDAR_RES_get_lidar_conf();
    4578:	4b6a      	ldr	r3, [pc, #424]	; (4724 <scan+0x284>)
    457a:	4798      	blx	r3
	write_print_buffer(sprintf(scan_print_buffer, "# Scan mode is \"%s\"\r\n", conf_data.resp3));
    457c:	4a6a      	ldr	r2, [pc, #424]	; (4728 <scan+0x288>)
    457e:	496b      	ldr	r1, [pc, #428]	; (472c <scan+0x28c>)
    4580:	485d      	ldr	r0, [pc, #372]	; (46f8 <scan+0x258>)
    4582:	4b5e      	ldr	r3, [pc, #376]	; (46fc <scan+0x25c>)
    4584:	4798      	blx	r3
    4586:	4b5e      	ldr	r3, [pc, #376]	; (4700 <scan+0x260>)
    4588:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_COUNT);
    458a:	2170      	movs	r1, #112	; 0x70
    458c:	2001      	movs	r0, #1
    458e:	4b64      	ldr	r3, [pc, #400]	; (4720 <scan+0x280>)
    4590:	4798      	blx	r3
	while (!process());
    4592:	4c5e      	ldr	r4, [pc, #376]	; (470c <scan+0x26c>)
    4594:	47a0      	blx	r4
    4596:	2800      	cmp	r0, #0
    4598:	d0fc      	beq.n	4594 <scan+0xf4>
	LIDAR_RES_get_lidar_conf();
    459a:	4b62      	ldr	r3, [pc, #392]	; (4724 <scan+0x284>)
    459c:	4798      	blx	r3
	conf_count.resp1 = conf_data.resp1;
    459e:	4b62      	ldr	r3, [pc, #392]	; (4728 <scan+0x288>)
    45a0:	881f      	ldrh	r7, [r3, #0]
	write_print_buffer(sprintf(scan_print_buffer, "# Alternative modes: ["));
    45a2:	4d55      	ldr	r5, [pc, #340]	; (46f8 <scan+0x258>)
    45a4:	4c62      	ldr	r4, [pc, #392]	; (4730 <scan+0x290>)
    45a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    45a8:	6028      	str	r0, [r5, #0]
    45aa:	6069      	str	r1, [r5, #4]
    45ac:	60aa      	str	r2, [r5, #8]
    45ae:	60eb      	str	r3, [r5, #12]
    45b0:	6820      	ldr	r0, [r4, #0]
    45b2:	6128      	str	r0, [r5, #16]
    45b4:	88a2      	ldrh	r2, [r4, #4]
    45b6:	79a3      	ldrb	r3, [r4, #6]
    45b8:	82aa      	strh	r2, [r5, #20]
    45ba:	75ab      	strb	r3, [r5, #22]
    45bc:	2016      	movs	r0, #22
    45be:	4b50      	ldr	r3, [pc, #320]	; (4700 <scan+0x260>)
    45c0:	4798      	blx	r3
	for (i = 0; i < conf_count.resp1; i++) {
    45c2:	463e      	mov	r6, r7
    45c4:	2f00      	cmp	r7, #0
    45c6:	d030      	beq.n	462a <scan+0x18a>
    45c8:	2500      	movs	r5, #0
		LIDAR_REQ_get_lidar_conf(i, CONF_SCAN_MODE_NAME);
    45ca:	f8df 8154 	ldr.w	r8, [pc, #340]	; 4720 <scan+0x280>
		while (!process());
    45ce:	4c4f      	ldr	r4, [pc, #316]	; (470c <scan+0x26c>)
		LIDAR_RES_get_lidar_conf();
    45d0:	4f54      	ldr	r7, [pc, #336]	; (4724 <scan+0x284>)
    45d2:	e011      	b.n	45f8 <scan+0x158>
		scan_error(SCAN_ERR_DISK_INIT);
    45d4:	2002      	movs	r0, #2
    45d6:	4b57      	ldr	r3, [pc, #348]	; (4734 <scan+0x294>)
    45d8:	4798      	blx	r3
    45da:	e770      	b.n	44be <scan+0x1e>
		scan_error(SCAN_ERR_DISK_MOUNT);
    45dc:	2003      	movs	r0, #3
    45de:	4b55      	ldr	r3, [pc, #340]	; (4734 <scan+0x294>)
    45e0:	4798      	blx	r3
    45e2:	e776      	b.n	44d2 <scan+0x32>
		scan_error(SCAN_ERR_FILE_CREATE);
    45e4:	2004      	movs	r0, #4
    45e6:	4b53      	ldr	r3, [pc, #332]	; (4734 <scan+0x294>)
    45e8:	4798      	blx	r3
    45ea:	e79b      	b.n	4524 <scan+0x84>
		scan_error(error_code);
    45ec:	4b51      	ldr	r3, [pc, #324]	; (4734 <scan+0x294>)
    45ee:	4798      	blx	r3
    45f0:	e7ab      	b.n	454a <scan+0xaa>
	for (i = 0; i < conf_count.resp1; i++) {
    45f2:	3501      	adds	r5, #1
    45f4:	42b5      	cmp	r5, r6
    45f6:	d018      	beq.n	462a <scan+0x18a>
		LIDAR_REQ_get_lidar_conf(i, CONF_SCAN_MODE_NAME);
    45f8:	217f      	movs	r1, #127	; 0x7f
    45fa:	b2a8      	uxth	r0, r5
    45fc:	47c0      	blx	r8
		while (!process());
    45fe:	47a0      	blx	r4
    4600:	2800      	cmp	r0, #0
    4602:	d0fc      	beq.n	45fe <scan+0x15e>
		LIDAR_RES_get_lidar_conf();
    4604:	47b8      	blx	r7
		write_print_buffer(sprintf(scan_print_buffer, "\"%s\"", conf_data.resp3));
    4606:	4a48      	ldr	r2, [pc, #288]	; (4728 <scan+0x288>)
    4608:	494b      	ldr	r1, [pc, #300]	; (4738 <scan+0x298>)
    460a:	483b      	ldr	r0, [pc, #236]	; (46f8 <scan+0x258>)
    460c:	4b3b      	ldr	r3, [pc, #236]	; (46fc <scan+0x25c>)
    460e:	4798      	blx	r3
    4610:	4b3b      	ldr	r3, [pc, #236]	; (4700 <scan+0x260>)
    4612:	4798      	blx	r3
		if (i < (conf_count.resp1 - 1))
    4614:	1e73      	subs	r3, r6, #1
    4616:	42ab      	cmp	r3, r5
    4618:	ddeb      	ble.n	45f2 <scan+0x152>
			write_print_buffer(sprintf(scan_print_buffer, ","));
    461a:	4b48      	ldr	r3, [pc, #288]	; (473c <scan+0x29c>)
    461c:	881a      	ldrh	r2, [r3, #0]
    461e:	4b36      	ldr	r3, [pc, #216]	; (46f8 <scan+0x258>)
    4620:	801a      	strh	r2, [r3, #0]
    4622:	2001      	movs	r0, #1
    4624:	4b36      	ldr	r3, [pc, #216]	; (4700 <scan+0x260>)
    4626:	4798      	blx	r3
    4628:	e7e3      	b.n	45f2 <scan+0x152>
	write_print_buffer(sprintf(scan_print_buffer, "]\r\n"));
    462a:	4b45      	ldr	r3, [pc, #276]	; (4740 <scan+0x2a0>)
    462c:	6818      	ldr	r0, [r3, #0]
    462e:	4b32      	ldr	r3, [pc, #200]	; (46f8 <scan+0x258>)
    4630:	6018      	str	r0, [r3, #0]
    4632:	2003      	movs	r0, #3
    4634:	4b32      	ldr	r3, [pc, #200]	; (4700 <scan+0x260>)
    4636:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_US_PER_SAMPLE);
    4638:	2171      	movs	r1, #113	; 0x71
    463a:	2001      	movs	r0, #1
    463c:	4b38      	ldr	r3, [pc, #224]	; (4720 <scan+0x280>)
    463e:	4798      	blx	r3
	while (!process());
    4640:	4c32      	ldr	r4, [pc, #200]	; (470c <scan+0x26c>)
    4642:	47a0      	blx	r4
    4644:	2800      	cmp	r0, #0
    4646:	d0fc      	beq.n	4642 <scan+0x1a2>
	LIDAR_RES_get_lidar_conf();
    4648:	4b36      	ldr	r3, [pc, #216]	; (4724 <scan+0x284>)
    464a:	4798      	blx	r3
	write_print_buffer(sprintf(scan_print_buffer, "# Scan costs %"PRIu32"us per sample\r\n", conf_data.resp2));
    464c:	4b36      	ldr	r3, [pc, #216]	; (4728 <scan+0x288>)
    464e:	681a      	ldr	r2, [r3, #0]
    4650:	493c      	ldr	r1, [pc, #240]	; (4744 <scan+0x2a4>)
    4652:	4829      	ldr	r0, [pc, #164]	; (46f8 <scan+0x258>)
    4654:	4b29      	ldr	r3, [pc, #164]	; (46fc <scan+0x25c>)
    4656:	4798      	blx	r3
    4658:	4b29      	ldr	r3, [pc, #164]	; (4700 <scan+0x260>)
    465a:	4798      	blx	r3
	LIDAR_REQ_get_lidar_conf(SCAN_MODE, CONF_SCAN_MODE_MAX_DISTANCE);
    465c:	2174      	movs	r1, #116	; 0x74
    465e:	2001      	movs	r0, #1
    4660:	4b2f      	ldr	r3, [pc, #188]	; (4720 <scan+0x280>)
    4662:	4798      	blx	r3
	while (!process());
    4664:	4c29      	ldr	r4, [pc, #164]	; (470c <scan+0x26c>)
    4666:	47a0      	blx	r4
    4668:	2800      	cmp	r0, #0
    466a:	d0fc      	beq.n	4666 <scan+0x1c6>
	LIDAR_RES_get_lidar_conf();
    466c:	4b2d      	ldr	r3, [pc, #180]	; (4724 <scan+0x284>)
    466e:	4798      	blx	r3
	write_print_buffer(sprintf(scan_print_buffer, "# Max measuring distance is %"PRIu32"m\r\n", conf_data.resp2));
    4670:	4b2d      	ldr	r3, [pc, #180]	; (4728 <scan+0x288>)
    4672:	681a      	ldr	r2, [r3, #0]
    4674:	4934      	ldr	r1, [pc, #208]	; (4748 <scan+0x2a8>)
    4676:	4820      	ldr	r0, [pc, #128]	; (46f8 <scan+0x258>)
    4678:	4b20      	ldr	r3, [pc, #128]	; (46fc <scan+0x25c>)
    467a:	4798      	blx	r3
    467c:	4c20      	ldr	r4, [pc, #128]	; (4700 <scan+0x260>)
    467e:	47a0      	blx	r4
	write_print_buffer(set_data_format(EXPRESS_SCAN_MODE));
    4680:	2000      	movs	r0, #0
    4682:	4b32      	ldr	r3, [pc, #200]	; (474c <scan+0x2ac>)
    4684:	4798      	blx	r3
    4686:	47a0      	blx	r4
	format_header_file_data();
    4688:	4b31      	ldr	r3, [pc, #196]	; (4750 <scan+0x2b0>)
    468a:	4798      	blx	r3
	LIDAR_PWM_start();
    468c:	4b31      	ldr	r3, [pc, #196]	; (4754 <scan+0x2b4>)
    468e:	4798      	blx	r3
	for (angle = 0.0; angle <= 180.0; angle+=0.25) {
    4690:	f04f 0800 	mov.w	r8, #0
    4694:	f04f 0900 	mov.w	r9, #0
    4698:	4b2f      	ldr	r3, [pc, #188]	; (4758 <scan+0x2b8>)
    469a:	e9c3 8900 	strd	r8, r9, [r3]
		SERVO_set_angle(angle);
    469e:	f8df b00c 	ldr.w	fp, [pc, #12]	; 46ac <scan+0x20c>
		timer = 50;
    46a2:	f8df a034 	ldr.w	sl, [pc, #52]	; 46d8 <scan+0x238>
			while (!process());
    46a6:	4c19      	ldr	r4, [pc, #100]	; (470c <scan+0x26c>)
    46a8:	e06d      	b.n	4786 <scan+0x2e6>
    46aa:	bf00      	nop
    46ac:	00005e71 	.word	0x00005e71
    46b0:	000003b1 	.word	0x000003b1
    46b4:	200041b8 	.word	0x200041b8
    46b8:	0000b960 	.word	0x0000b960
    46bc:	2000421c 	.word	0x2000421c
    46c0:	00001b11 	.word	0x00001b11
    46c4:	20004218 	.word	0x20004218
    46c8:	00002451 	.word	0x00002451
    46cc:	41008000 	.word	0x41008000
    46d0:	0000245f 	.word	0x0000245f
    46d4:	20004474 	.word	0x20004474
    46d8:	20004470 	.word	0x20004470
    46dc:	0000bab4 	.word	0x0000bab4
    46e0:	000083d9 	.word	0x000083d9
    46e4:	00004b45 	.word	0x00004b45
    46e8:	20004194 	.word	0x20004194
    46ec:	00001b7d 	.word	0x00001b7d
    46f0:	20004478 	.word	0x20004478
    46f4:	0000bab8 	.word	0x0000bab8
    46f8:	20004490 	.word	0x20004490
    46fc:	000085dd 	.word	0x000085dd
    4700:	00004f29 	.word	0x00004f29
    4704:	00003ba5 	.word	0x00003ba5
    4708:	00003dd5 	.word	0x00003dd5
    470c:	00004345 	.word	0x00004345
    4710:	000041c9 	.word	0x000041c9
    4714:	00003d7d 	.word	0x00003d7d
    4718:	000040f5 	.word	0x000040f5
    471c:	0000bacc 	.word	0x0000bacc
    4720:	00003e85 	.word	0x00003e85
    4724:	000041dd 	.word	0x000041dd
    4728:	20000330 	.word	0x20000330
    472c:	0000bad0 	.word	0x0000bad0
    4730:	0000bae8 	.word	0x0000bae8
    4734:	00004901 	.word	0x00004901
    4738:	0000bb00 	.word	0x0000bb00
    473c:	0000bb08 	.word	0x0000bb08
    4740:	0000bcf0 	.word	0x0000bcf0
    4744:	0000bb0c 	.word	0x0000bb0c
    4748:	0000bb2c 	.word	0x0000bb2c
    474c:	00004bd1 	.word	0x00004bd1
    4750:	00004fcd 	.word	0x00004fcd
    4754:	0000396d 	.word	0x0000396d
    4758:	20004488 	.word	0x20004488
		write_scans();
    475c:	4b25      	ldr	r3, [pc, #148]	; (47f4 <scan+0x354>)
    475e:	4798      	blx	r3
		scan_count = 0;
    4760:	2200      	movs	r2, #0
    4762:	4b25      	ldr	r3, [pc, #148]	; (47f8 <scan+0x358>)
    4764:	601a      	str	r2, [r3, #0]
	for (angle = 0.0; angle <= 180.0; angle+=0.25) {
    4766:	4d25      	ldr	r5, [pc, #148]	; (47fc <scan+0x35c>)
    4768:	2200      	movs	r2, #0
    476a:	4b25      	ldr	r3, [pc, #148]	; (4800 <scan+0x360>)
    476c:	e9d5 0100 	ldrd	r0, r1, [r5]
    4770:	4e24      	ldr	r6, [pc, #144]	; (4804 <scan+0x364>)
    4772:	47b0      	blx	r6
    4774:	4680      	mov	r8, r0
    4776:	4689      	mov	r9, r1
    4778:	e9c5 8900 	strd	r8, r9, [r5]
    477c:	2200      	movs	r2, #0
    477e:	4b22      	ldr	r3, [pc, #136]	; (4808 <scan+0x368>)
    4780:	4d22      	ldr	r5, [pc, #136]	; (480c <scan+0x36c>)
    4782:	47a8      	blx	r5
    4784:	b1e8      	cbz	r0, 47c2 <scan+0x322>
		SERVO_set_angle(angle);
    4786:	4640      	mov	r0, r8
    4788:	4649      	mov	r1, r9
    478a:	47d8      	blx	fp
		timer = 50;
    478c:	2332      	movs	r3, #50	; 0x32
    478e:	f8ca 3000 	str.w	r3, [sl]
		while (timer);
    4792:	f8da 3000 	ldr.w	r3, [sl]
    4796:	2b00      	cmp	r3, #0
    4798:	d1fb      	bne.n	4792 <scan+0x2f2>
		LIDAR_REQ_express_scan(EXPRESS_SCAN_MODE);
    479a:	2000      	movs	r0, #0
    479c:	4b1c      	ldr	r3, [pc, #112]	; (4810 <scan+0x370>)
    479e:	4798      	blx	r3
		while (scan_count < MAX_SCANS) {
    47a0:	4d15      	ldr	r5, [pc, #84]	; (47f8 <scan+0x358>)
			if (LIDAR_RES_express_scan()) {
    47a2:	4e1c      	ldr	r6, [pc, #112]	; (4814 <scan+0x374>)
				average_samples(angle);
    47a4:	4f15      	ldr	r7, [pc, #84]	; (47fc <scan+0x35c>)
		while (scan_count < MAX_SCANS) {
    47a6:	682b      	ldr	r3, [r5, #0]
    47a8:	2b7f      	cmp	r3, #127	; 0x7f
    47aa:	d8d7      	bhi.n	475c <scan+0x2bc>
			while (!process());
    47ac:	47a0      	blx	r4
    47ae:	2800      	cmp	r0, #0
    47b0:	d0fc      	beq.n	47ac <scan+0x30c>
			if (LIDAR_RES_express_scan()) {
    47b2:	47b0      	blx	r6
    47b4:	2800      	cmp	r0, #0
    47b6:	d0f6      	beq.n	47a6 <scan+0x306>
				average_samples(angle);
    47b8:	e9d7 0100 	ldrd	r0, r1, [r7]
    47bc:	4b16      	ldr	r3, [pc, #88]	; (4818 <scan+0x378>)
    47be:	4798      	blx	r3
    47c0:	e7f1      	b.n	47a6 <scan+0x306>
	LIDAR_PWM_stop();
    47c2:	4b16      	ldr	r3, [pc, #88]	; (481c <scan+0x37c>)
    47c4:	4798      	blx	r3
	LIDAR_REQ_stop();
    47c6:	4b16      	ldr	r3, [pc, #88]	; (4820 <scan+0x380>)
    47c8:	4798      	blx	r3
	fresult = f_close(&fptr);
    47ca:	4816      	ldr	r0, [pc, #88]	; (4824 <scan+0x384>)
    47cc:	4b16      	ldr	r3, [pc, #88]	; (4828 <scan+0x388>)
    47ce:	4798      	blx	r3
    47d0:	4b16      	ldr	r3, [pc, #88]	; (482c <scan+0x38c>)
    47d2:	7018      	strb	r0, [r3, #0]
	if (fresult)
    47d4:	b110      	cbz	r0, 47dc <scan+0x33c>
		scan_error(SCAN_ERR_FILE_CLOSE);
    47d6:	2006      	movs	r0, #6
    47d8:	4b15      	ldr	r3, [pc, #84]	; (4830 <scan+0x390>)
    47da:	4798      	blx	r3
	f_mount(0, "", 0);
    47dc:	2200      	movs	r2, #0
    47de:	4915      	ldr	r1, [pc, #84]	; (4834 <scan+0x394>)
    47e0:	4610      	mov	r0, r2
    47e2:	4b15      	ldr	r3, [pc, #84]	; (4838 <scan+0x398>)
    47e4:	4798      	blx	r3
	status = STATUS_IDLE;
    47e6:	2200      	movs	r2, #0
    47e8:	4b14      	ldr	r3, [pc, #80]	; (483c <scan+0x39c>)
    47ea:	701a      	strb	r2, [r3, #0]
 }
    47ec:	b003      	add	sp, #12
    47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47f2:	bf00      	nop
    47f4:	00004f71 	.word	0x00004f71
    47f8:	20000328 	.word	0x20000328
    47fc:	20004488 	.word	0x20004488
    4800:	3fd00000 	.word	0x3fd00000
    4804:	00007189 	.word	0x00007189
    4808:	40668000 	.word	0x40668000
    480c:	000079e5 	.word	0x000079e5
    4810:	00003c71 	.word	0x00003c71
    4814:	00003f8d 	.word	0x00003f8d
    4818:	00004c89 	.word	0x00004c89
    481c:	000039d9 	.word	0x000039d9
    4820:	00003b45 	.word	0x00003b45
    4824:	20004194 	.word	0x20004194
    4828:	00002105 	.word	0x00002105
    482c:	20004218 	.word	0x20004218
    4830:	00004901 	.word	0x00004901
    4834:	0000b960 	.word	0x0000b960
    4838:	00001b11 	.word	0x00001b11
    483c:	20004474 	.word	0x20004474

00004840 <clear_scan_data>:
		//case LIDAR_MOTOR_SPEED_CTRL:	LIDAR_REQ_motor_speed_ctrl(); return;
	}
}

void clear_scan_data(void)
{
    4840:	b4f0      	push	{r4, r5, r6, r7}
	int i, j;
	/* clear written scans */
	for (i = 0; i < MAX_SCANS; i++) {
    4842:	2600      	movs	r6, #0
		sd_scan_data[i].repeated_n = 0;
    4844:	4f0e      	ldr	r7, [pc, #56]	; (4880 <clear_scan_data+0x40>)
    4846:	4631      	mov	r1, r6
		sd_scan_data[i].servo_angle = 0;
    4848:	2400      	movs	r4, #0
    484a:	2500      	movs	r5, #0
    484c:	e002      	b.n	4854 <clear_scan_data+0x14>
	for (i = 0; i < MAX_SCANS; i++) {
    484e:	3601      	adds	r6, #1
    4850:	2e80      	cmp	r6, #128	; 0x80
    4852:	d012      	beq.n	487a <clear_scan_data+0x3a>
		sd_scan_data[i].repeated_n = 0;
    4854:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    4858:	011b      	lsls	r3, r3, #4
    485a:	18fa      	adds	r2, r7, r3
    485c:	54f9      	strb	r1, [r7, r3]
		sd_scan_data[i].servo_angle = 0;
    485e:	e9c2 4502 	strd	r4, r5, [r2, #8]
		for (j = 0; j < 32; j++) {
    4862:	460b      	mov	r3, r1
			sd_scan_data[i].distance[j] = '\0';
    4864:	4610      	mov	r0, r2
    4866:	18c2      	adds	r2, r0, r3
    4868:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			sd_scan_data[i].lidar_angle[j] = '\0';
    486c:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
			sd_scan_data[i].servo_angle_str[j] = '\0';
    4870:	7411      	strb	r1, [r2, #16]
		for (j = 0; j < 32; j++) {
    4872:	3301      	adds	r3, #1
    4874:	2b20      	cmp	r3, #32
    4876:	d1f6      	bne.n	4866 <clear_scan_data+0x26>
    4878:	e7e9      	b.n	484e <clear_scan_data+0xe>
		}
	}
    487a:	bcf0      	pop	{r4, r5, r6, r7}
    487c:	4770      	bx	lr
    487e:	bf00      	nop
    4880:	20000340 	.word	0x20000340

00004884 <check_repeated_angles>:
{
    4884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4888:	b083      	sub	sp, #12
    488a:	9001      	str	r0, [sp, #4]
    488c:	4692      	mov	sl, r2
    488e:	469b      	mov	fp, r3
	for (i = 0; i <= scan_count; i++) {
    4890:	4b16      	ldr	r3, [pc, #88]	; (48ec <check_repeated_angles+0x68>)
    4892:	f8d3 8000 	ldr.w	r8, [r3]
    4896:	4d16      	ldr	r5, [pc, #88]	; (48f0 <check_repeated_angles+0x6c>)
    4898:	2400      	movs	r4, #0
		if (sd_scan_data[i].servo_angle == servo_angle) {
    489a:	f1a5 0750 	sub.w	r7, r5, #80	; 0x50
    489e:	4e15      	ldr	r6, [pc, #84]	; (48f4 <check_repeated_angles+0x70>)
			if (!strcmp((char*)angle, (char*)sd_scan_data[i].lidar_angle)) {
    48a0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 48fc <check_repeated_angles+0x78>
    48a4:	e003      	b.n	48ae <check_repeated_angles+0x2a>
	for (i = 0; i <= scan_count; i++) {
    48a6:	3401      	adds	r4, #1
    48a8:	3570      	adds	r5, #112	; 0x70
    48aa:	45a0      	cmp	r8, r4
    48ac:	d318      	bcc.n	48e0 <check_repeated_angles+0x5c>
		if (sd_scan_data[i].servo_angle == servo_angle) {
    48ae:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    48b2:	eb07 1101 	add.w	r1, r7, r1, lsl #4
    48b6:	4652      	mov	r2, sl
    48b8:	465b      	mov	r3, fp
    48ba:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    48be:	47b0      	blx	r6
    48c0:	2800      	cmp	r0, #0
    48c2:	d0f0      	beq.n	48a6 <check_repeated_angles+0x22>
			if (!strcmp((char*)angle, (char*)sd_scan_data[i].lidar_angle)) {
    48c4:	4629      	mov	r1, r5
    48c6:	9801      	ldr	r0, [sp, #4]
    48c8:	47c8      	blx	r9
    48ca:	2800      	cmp	r0, #0
    48cc:	d1eb      	bne.n	48a6 <check_repeated_angles+0x22>
				sd_scan_data[i].repeated_n++;
    48ce:	490a      	ldr	r1, [pc, #40]	; (48f8 <check_repeated_angles+0x74>)
    48d0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    48d4:	0112      	lsls	r2, r2, #4
    48d6:	5c8b      	ldrb	r3, [r1, r2]
    48d8:	3301      	adds	r3, #1
    48da:	b2db      	uxtb	r3, r3
    48dc:	548b      	strb	r3, [r1, r2]
				return i;
    48de:	e001      	b.n	48e4 <check_repeated_angles+0x60>
	return -1;
    48e0:	f04f 34ff 	mov.w	r4, #4294967295
}
    48e4:	4620      	mov	r0, r4
    48e6:	b003      	add	sp, #12
    48e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48ec:	20000328 	.word	0x20000328
    48f0:	20000390 	.word	0x20000390
    48f4:	000079bd 	.word	0x000079bd
    48f8:	20000340 	.word	0x20000340
    48fc:	000086c9 	.word	0x000086c9

00004900 <scan_error>:
{
    4900:	b510      	push	{r4, lr}
    4902:	4604      	mov	r4, r0
		printf("\r\n[Scan Error]\r\n");
    4904:	4867      	ldr	r0, [pc, #412]	; (4aa4 <scan_error+0x1a4>)
    4906:	4b68      	ldr	r3, [pc, #416]	; (4aa8 <scan_error+0x1a8>)
    4908:	4798      	blx	r3
	status = STATUS_ERROR;
    490a:	2202      	movs	r2, #2
    490c:	4b67      	ldr	r3, [pc, #412]	; (4aac <scan_error+0x1ac>)
    490e:	701a      	strb	r2, [r3, #0]
	LIDAR_REQ_stop();
    4910:	4b67      	ldr	r3, [pc, #412]	; (4ab0 <scan_error+0x1b0>)
    4912:	4798      	blx	r3
		switch (error_code) {
    4914:	2c08      	cmp	r4, #8
    4916:	f200 8082 	bhi.w	4a1e <scan_error+0x11e>
    491a:	e8df f004 	tbb	[pc, r4]
    491e:	0905      	.short	0x0905
    4920:	5044382c 	.word	0x5044382c
    4924:	685c      	.short	0x685c
    4926:	74          	.byte	0x74
    4927:	00          	.byte	0x00
				printf(" | Timeout Error\r\n");
    4928:	4862      	ldr	r0, [pc, #392]	; (4ab4 <scan_error+0x1b4>)
    492a:	4b5f      	ldr	r3, [pc, #380]	; (4aa8 <scan_error+0x1a8>)
    492c:	4798      	blx	r3
				break;
    492e:	e07c      	b.n	4a2a <scan_error+0x12a>
				printf(" | Out-of-Bounds Error\r\n");
    4930:	4861      	ldr	r0, [pc, #388]	; (4ab8 <scan_error+0x1b8>)
    4932:	4b5d      	ldr	r3, [pc, #372]	; (4aa8 <scan_error+0x1a8>)
    4934:	4798      	blx	r3
						byte_count, (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE);
    4936:	4b61      	ldr	r3, [pc, #388]	; (4abc <scan_error+0x1bc>)
    4938:	685a      	ldr	r2, [r3, #4]
    493a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
				printf(" | | byte count (%"PRIu32") went past the response descriptor limit (%lu)\r\n",
    493e:	3207      	adds	r2, #7
    4940:	4b5f      	ldr	r3, [pc, #380]	; (4ac0 <scan_error+0x1c0>)
    4942:	6819      	ldr	r1, [r3, #0]
    4944:	485f      	ldr	r0, [pc, #380]	; (4ac4 <scan_error+0x1c4>)
    4946:	4b60      	ldr	r3, [pc, #384]	; (4ac8 <scan_error+0x1c8>)
    4948:	4798      	blx	r3
	if ((error_code == 1) && (restart_count <= 10)) {
    494a:	4b60      	ldr	r3, [pc, #384]	; (4acc <scan_error+0x1cc>)
    494c:	781b      	ldrb	r3, [r3, #0]
    494e:	2b0a      	cmp	r3, #10
    4950:	d86b      	bhi.n	4a2a <scan_error+0x12a>
	clear_scan_data();
    4952:	4b5f      	ldr	r3, [pc, #380]	; (4ad0 <scan_error+0x1d0>)
    4954:	4798      	blx	r3
	status = STATUS_PROCESSING;
    4956:	2201      	movs	r2, #1
    4958:	4b54      	ldr	r3, [pc, #336]	; (4aac <scan_error+0x1ac>)
    495a:	701a      	strb	r2, [r3, #0]
	switch (lidar_request) {
    495c:	4b5d      	ldr	r3, [pc, #372]	; (4ad4 <scan_error+0x1d4>)
    495e:	781b      	ldrb	r3, [r3, #0]
    4960:	2b50      	cmp	r3, #80	; 0x50
    4962:	f000 808f 	beq.w	4a84 <scan_error+0x184>
    4966:	d872      	bhi.n	4a4e <scan_error+0x14e>
    4968:	2b21      	cmp	r3, #33	; 0x21
    496a:	f000 8088 	beq.w	4a7e <scan_error+0x17e>
    496e:	d869      	bhi.n	4a44 <scan_error+0x144>
    4970:	2b20      	cmp	r3, #32
    4972:	d07d      	beq.n	4a70 <scan_error+0x170>
    4974:	bd10      	pop	{r4, pc}
				printf(" | Disk Initialization Error\r\n");
    4976:	4858      	ldr	r0, [pc, #352]	; (4ad8 <scan_error+0x1d8>)
    4978:	4b4b      	ldr	r3, [pc, #300]	; (4aa8 <scan_error+0x1a8>)
    497a:	4798      	blx	r3
				printf(" | | %s\r\n", DISKIO_dstatus_desc(dstatus));
    497c:	4b57      	ldr	r3, [pc, #348]	; (4adc <scan_error+0x1dc>)
    497e:	7818      	ldrb	r0, [r3, #0]
    4980:	4b57      	ldr	r3, [pc, #348]	; (4ae0 <scan_error+0x1e0>)
    4982:	4798      	blx	r3
    4984:	4601      	mov	r1, r0
    4986:	4857      	ldr	r0, [pc, #348]	; (4ae4 <scan_error+0x1e4>)
    4988:	4b4f      	ldr	r3, [pc, #316]	; (4ac8 <scan_error+0x1c8>)
    498a:	4798      	blx	r3
				break;
    498c:	e04d      	b.n	4a2a <scan_error+0x12a>
				printf(" | Disk Mount Error\r\n");
    498e:	4856      	ldr	r0, [pc, #344]	; (4ae8 <scan_error+0x1e8>)
    4990:	4b45      	ldr	r3, [pc, #276]	; (4aa8 <scan_error+0x1a8>)
    4992:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4994:	4b55      	ldr	r3, [pc, #340]	; (4aec <scan_error+0x1ec>)
    4996:	7818      	ldrb	r0, [r3, #0]
    4998:	4b55      	ldr	r3, [pc, #340]	; (4af0 <scan_error+0x1f0>)
    499a:	4798      	blx	r3
    499c:	4601      	mov	r1, r0
    499e:	4851      	ldr	r0, [pc, #324]	; (4ae4 <scan_error+0x1e4>)
    49a0:	4b49      	ldr	r3, [pc, #292]	; (4ac8 <scan_error+0x1c8>)
    49a2:	4798      	blx	r3
				break;
    49a4:	e041      	b.n	4a2a <scan_error+0x12a>
				printf(" | File Create Error\r\n");
    49a6:	4853      	ldr	r0, [pc, #332]	; (4af4 <scan_error+0x1f4>)
    49a8:	4b3f      	ldr	r3, [pc, #252]	; (4aa8 <scan_error+0x1a8>)
    49aa:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    49ac:	4b4f      	ldr	r3, [pc, #316]	; (4aec <scan_error+0x1ec>)
    49ae:	7818      	ldrb	r0, [r3, #0]
    49b0:	4b4f      	ldr	r3, [pc, #316]	; (4af0 <scan_error+0x1f0>)
    49b2:	4798      	blx	r3
    49b4:	4601      	mov	r1, r0
    49b6:	484b      	ldr	r0, [pc, #300]	; (4ae4 <scan_error+0x1e4>)
    49b8:	4b43      	ldr	r3, [pc, #268]	; (4ac8 <scan_error+0x1c8>)
    49ba:	4798      	blx	r3
				break;
    49bc:	e035      	b.n	4a2a <scan_error+0x12a>
				printf(" | File Write Error\r\n");
    49be:	484e      	ldr	r0, [pc, #312]	; (4af8 <scan_error+0x1f8>)
    49c0:	4b39      	ldr	r3, [pc, #228]	; (4aa8 <scan_error+0x1a8>)
    49c2:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    49c4:	4b49      	ldr	r3, [pc, #292]	; (4aec <scan_error+0x1ec>)
    49c6:	7818      	ldrb	r0, [r3, #0]
    49c8:	4b49      	ldr	r3, [pc, #292]	; (4af0 <scan_error+0x1f0>)
    49ca:	4798      	blx	r3
    49cc:	4601      	mov	r1, r0
    49ce:	4845      	ldr	r0, [pc, #276]	; (4ae4 <scan_error+0x1e4>)
    49d0:	4b3d      	ldr	r3, [pc, #244]	; (4ac8 <scan_error+0x1c8>)
    49d2:	4798      	blx	r3
				break;
    49d4:	e029      	b.n	4a2a <scan_error+0x12a>
				printf(" | File Close Error\r\n");
    49d6:	4849      	ldr	r0, [pc, #292]	; (4afc <scan_error+0x1fc>)
    49d8:	4b33      	ldr	r3, [pc, #204]	; (4aa8 <scan_error+0x1a8>)
    49da:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    49dc:	4b43      	ldr	r3, [pc, #268]	; (4aec <scan_error+0x1ec>)
    49de:	7818      	ldrb	r0, [r3, #0]
    49e0:	4b43      	ldr	r3, [pc, #268]	; (4af0 <scan_error+0x1f0>)
    49e2:	4798      	blx	r3
    49e4:	4601      	mov	r1, r0
    49e6:	483f      	ldr	r0, [pc, #252]	; (4ae4 <scan_error+0x1e4>)
    49e8:	4b37      	ldr	r3, [pc, #220]	; (4ac8 <scan_error+0x1c8>)
    49ea:	4798      	blx	r3
				break;
    49ec:	e01d      	b.n	4a2a <scan_error+0x12a>
				printf(" | Error Generating New Filename\r\n");
    49ee:	4844      	ldr	r0, [pc, #272]	; (4b00 <scan_error+0x200>)
    49f0:	4b2d      	ldr	r3, [pc, #180]	; (4aa8 <scan_error+0x1a8>)
    49f2:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    49f4:	4b3d      	ldr	r3, [pc, #244]	; (4aec <scan_error+0x1ec>)
    49f6:	7818      	ldrb	r0, [r3, #0]
    49f8:	4b3d      	ldr	r3, [pc, #244]	; (4af0 <scan_error+0x1f0>)
    49fa:	4798      	blx	r3
    49fc:	4601      	mov	r1, r0
    49fe:	4839      	ldr	r0, [pc, #228]	; (4ae4 <scan_error+0x1e4>)
    4a00:	4b31      	ldr	r3, [pc, #196]	; (4ac8 <scan_error+0x1c8>)
    4a02:	4798      	blx	r3
				break;
    4a04:	e011      	b.n	4a2a <scan_error+0x12a>
				printf(" | Error Formatting Header of File\r\n");
    4a06:	483f      	ldr	r0, [pc, #252]	; (4b04 <scan_error+0x204>)
    4a08:	4b27      	ldr	r3, [pc, #156]	; (4aa8 <scan_error+0x1a8>)
    4a0a:	4798      	blx	r3
				printf(" | | %s\r\n", FATFS_fresult_desc(fresult));
    4a0c:	4b37      	ldr	r3, [pc, #220]	; (4aec <scan_error+0x1ec>)
    4a0e:	7818      	ldrb	r0, [r3, #0]
    4a10:	4b37      	ldr	r3, [pc, #220]	; (4af0 <scan_error+0x1f0>)
    4a12:	4798      	blx	r3
    4a14:	4601      	mov	r1, r0
    4a16:	4833      	ldr	r0, [pc, #204]	; (4ae4 <scan_error+0x1e4>)
    4a18:	4b2b      	ldr	r3, [pc, #172]	; (4ac8 <scan_error+0x1c8>)
    4a1a:	4798      	blx	r3
				break;
    4a1c:	e005      	b.n	4a2a <scan_error+0x12a>
				printf(" | Error code %u\r\n", error_code);
    4a1e:	4621      	mov	r1, r4
    4a20:	4839      	ldr	r0, [pc, #228]	; (4b08 <scan_error+0x208>)
    4a22:	4b29      	ldr	r3, [pc, #164]	; (4ac8 <scan_error+0x1c8>)
    4a24:	4798      	blx	r3
	if ((error_code == 1) && (restart_count <= 10)) {
    4a26:	2c01      	cmp	r4, #1
    4a28:	d08f      	beq.n	494a <scan_error+0x4a>
		LIDAR_PWM_stop();
    4a2a:	4b38      	ldr	r3, [pc, #224]	; (4b0c <scan_error+0x20c>)
    4a2c:	4798      	blx	r3
		fresult = f_unlink(filename);
    4a2e:	4838      	ldr	r0, [pc, #224]	; (4b10 <scan_error+0x210>)
    4a30:	4b38      	ldr	r3, [pc, #224]	; (4b14 <scan_error+0x214>)
    4a32:	4798      	blx	r3
    4a34:	4b2d      	ldr	r3, [pc, #180]	; (4aec <scan_error+0x1ec>)
    4a36:	7018      	strb	r0, [r3, #0]
		f_mount(0, "", 0);
    4a38:	2200      	movs	r2, #0
    4a3a:	4937      	ldr	r1, [pc, #220]	; (4b18 <scan_error+0x218>)
    4a3c:	4610      	mov	r0, r2
    4a3e:	4b37      	ldr	r3, [pc, #220]	; (4b1c <scan_error+0x21c>)
    4a40:	4798      	blx	r3
    4a42:	e7fe      	b.n	4a42 <scan_error+0x142>
	switch (lidar_request) {
    4a44:	2b25      	cmp	r3, #37	; 0x25
    4a46:	d00d      	beq.n	4a64 <scan_error+0x164>
    4a48:	2b40      	cmp	r3, #64	; 0x40
    4a4a:	d00e      	beq.n	4a6a <scan_error+0x16a>
    4a4c:	bd10      	pop	{r4, pc}
    4a4e:	2b59      	cmp	r3, #89	; 0x59
    4a50:	d01e      	beq.n	4a90 <scan_error+0x190>
    4a52:	d802      	bhi.n	4a5a <scan_error+0x15a>
    4a54:	2b52      	cmp	r3, #82	; 0x52
    4a56:	d018      	beq.n	4a8a <scan_error+0x18a>
    4a58:	bd10      	pop	{r4, pc}
    4a5a:	2b82      	cmp	r3, #130	; 0x82
    4a5c:	d00b      	beq.n	4a76 <scan_error+0x176>
    4a5e:	2b84      	cmp	r3, #132	; 0x84
    4a60:	d019      	beq.n	4a96 <scan_error+0x196>
    4a62:	bd10      	pop	{r4, pc}
		case LIDAR_STOP:				LIDAR_REQ_stop(); return;
    4a64:	4b12      	ldr	r3, [pc, #72]	; (4ab0 <scan_error+0x1b0>)
    4a66:	4798      	blx	r3
    4a68:	bd10      	pop	{r4, pc}
		case LIDAR_RESET:				LIDAR_REQ_reset(); return;
    4a6a:	4b2d      	ldr	r3, [pc, #180]	; (4b20 <scan_error+0x220>)
    4a6c:	4798      	blx	r3
    4a6e:	bd10      	pop	{r4, pc}
		case LIDAR_SCAN:				LIDAR_REQ_scan(); return;
    4a70:	4b2c      	ldr	r3, [pc, #176]	; (4b24 <scan_error+0x224>)
    4a72:	4798      	blx	r3
    4a74:	bd10      	pop	{r4, pc}
		case LIDAR_EXPRESS_SCAN:		LIDAR_REQ_express_scan(EXPRESS_SCAN_MODE); return;
    4a76:	2000      	movs	r0, #0
    4a78:	4b2b      	ldr	r3, [pc, #172]	; (4b28 <scan_error+0x228>)
    4a7a:	4798      	blx	r3
    4a7c:	bd10      	pop	{r4, pc}
		case LIDAR_FORCE_SCAN:			LIDAR_REQ_force_scan(); return;
    4a7e:	4b2b      	ldr	r3, [pc, #172]	; (4b2c <scan_error+0x22c>)
    4a80:	4798      	blx	r3
    4a82:	bd10      	pop	{r4, pc}
		case LIDAR_GET_INFO:			LIDAR_REQ_get_info(); return;
    4a84:	4b2a      	ldr	r3, [pc, #168]	; (4b30 <scan_error+0x230>)
    4a86:	4798      	blx	r3
    4a88:	bd10      	pop	{r4, pc}
		case LIDAR_GET_HEALTH:			LIDAR_REQ_get_health(); return;
    4a8a:	4b2a      	ldr	r3, [pc, #168]	; (4b34 <scan_error+0x234>)
    4a8c:	4798      	blx	r3
    4a8e:	bd10      	pop	{r4, pc}
		case LIDAR_GET_SAMPLERATE:		LIDAR_REQ_get_samplerate(); return;
    4a90:	4b29      	ldr	r3, [pc, #164]	; (4b38 <scan_error+0x238>)
    4a92:	4798      	blx	r3
    4a94:	bd10      	pop	{r4, pc}
		case LIDAR_GET_LIDAR_CONF:		LIDAR_REQ_get_lidar_conf(SCAN_MODE, lidar_config); return;
    4a96:	4b29      	ldr	r3, [pc, #164]	; (4b3c <scan_error+0x23c>)
    4a98:	7819      	ldrb	r1, [r3, #0]
    4a9a:	2001      	movs	r0, #1
    4a9c:	4b28      	ldr	r3, [pc, #160]	; (4b40 <scan_error+0x240>)
    4a9e:	4798      	blx	r3
		return;
    4aa0:	bd10      	pop	{r4, pc}
    4aa2:	bf00      	nop
    4aa4:	0000bb50 	.word	0x0000bb50
    4aa8:	000083d9 	.word	0x000083d9
    4aac:	20004474 	.word	0x20004474
    4ab0:	00003b45 	.word	0x00003b45
    4ab4:	0000bb60 	.word	0x0000bb60
    4ab8:	0000bb74 	.word	0x0000bb74
    4abc:	20003b40 	.word	0x20003b40
    4ac0:	2000031c 	.word	0x2000031c
    4ac4:	0000bb8c 	.word	0x0000bb8c
    4ac8:	000082f1 	.word	0x000082f1
    4acc:	2000411c 	.word	0x2000411c
    4ad0:	00004841 	.word	0x00004841
    4ad4:	20000321 	.word	0x20000321
    4ad8:	0000bbd4 	.word	0x0000bbd4
    4adc:	200041b8 	.word	0x200041b8
    4ae0:	00000ac1 	.word	0x00000ac1
    4ae4:	0000bbf4 	.word	0x0000bbf4
    4ae8:	0000bc00 	.word	0x0000bc00
    4aec:	20004218 	.word	0x20004218
    4af0:	00000a01 	.word	0x00000a01
    4af4:	0000bc18 	.word	0x0000bc18
    4af8:	0000bc30 	.word	0x0000bc30
    4afc:	0000bc48 	.word	0x0000bc48
    4b00:	0000bc60 	.word	0x0000bc60
    4b04:	0000bc84 	.word	0x0000bc84
    4b08:	0000bca8 	.word	0x0000bca8
    4b0c:	000039d9 	.word	0x000039d9
    4b10:	20004478 	.word	0x20004478
    4b14:	00002365 	.word	0x00002365
    4b18:	0000b960 	.word	0x0000b960
    4b1c:	00001b11 	.word	0x00001b11
    4b20:	00003ba5 	.word	0x00003ba5
    4b24:	00003c11 	.word	0x00003c11
    4b28:	00003c71 	.word	0x00003c71
    4b2c:	00003d1d 	.word	0x00003d1d
    4b30:	00003d7d 	.word	0x00003d7d
    4b34:	00003dd5 	.word	0x00003dd5
    4b38:	00003e2d 	.word	0x00003e2d
    4b3c:	20000320 	.word	0x20000320
    4b40:	00003e85 	.word	0x00003e85

00004b44 <get_new_filename>:
{
    4b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b46:	b08b      	sub	sp, #44	; 0x2c
	fresult = f_opendir(&fdir, path);
    4b48:	4917      	ldr	r1, [pc, #92]	; (4ba8 <get_new_filename+0x64>)
    4b4a:	a801      	add	r0, sp, #4
    4b4c:	4b17      	ldr	r3, [pc, #92]	; (4bac <get_new_filename+0x68>)
    4b4e:	4798      	blx	r3
    4b50:	4b17      	ldr	r3, [pc, #92]	; (4bb0 <get_new_filename+0x6c>)
    4b52:	7018      	strb	r0, [r3, #0]
	if (fresult)
    4b54:	b9d0      	cbnz	r0, 4b8c <get_new_filename+0x48>
{
    4b56:	2500      	movs	r5, #0
		fresult = f_readdir(&fdir, &finfo);
    4b58:	4c16      	ldr	r4, [pc, #88]	; (4bb4 <get_new_filename+0x70>)
    4b5a:	4f17      	ldr	r7, [pc, #92]	; (4bb8 <get_new_filename+0x74>)
    4b5c:	4e14      	ldr	r6, [pc, #80]	; (4bb0 <get_new_filename+0x6c>)
    4b5e:	4621      	mov	r1, r4
    4b60:	a801      	add	r0, sp, #4
    4b62:	47b8      	blx	r7
    4b64:	7030      	strb	r0, [r6, #0]
		if (fresult || !finfo.fname[0])
    4b66:	b9a8      	cbnz	r0, 4b94 <get_new_filename+0x50>
    4b68:	7a63      	ldrb	r3, [r4, #9]
    4b6a:	b19b      	cbz	r3, 4b94 <get_new_filename+0x50>
			lfilenum[i] = finfo.fname[i+4];
    4b6c:	7b63      	ldrb	r3, [r4, #13]
    4b6e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    4b72:	7ba3      	ldrb	r3, [r4, #14]
    4b74:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    4b78:	7be3      	ldrb	r3, [r4, #15]
    4b7a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		filenum = atoi((char*)&lfilenum);
    4b7e:	a809      	add	r0, sp, #36	; 0x24
    4b80:	4b0e      	ldr	r3, [pc, #56]	; (4bbc <get_new_filename+0x78>)
    4b82:	4798      	blx	r3
    4b84:	4285      	cmp	r5, r0
    4b86:	bfb8      	it	lt
    4b88:	4605      	movlt	r5, r0
    4b8a:	e7e8      	b.n	4b5e <get_new_filename+0x1a>
		scan_error(SCAN_ERR_NEW_FILENAME);
    4b8c:	2007      	movs	r0, #7
    4b8e:	4b0c      	ldr	r3, [pc, #48]	; (4bc0 <get_new_filename+0x7c>)
    4b90:	4798      	blx	r3
    4b92:	e7e0      	b.n	4b56 <get_new_filename+0x12>
	sprintf(filename, "SCAN%03u.LAM", highfilenum + 1);
    4b94:	4c0b      	ldr	r4, [pc, #44]	; (4bc4 <get_new_filename+0x80>)
    4b96:	1c6a      	adds	r2, r5, #1
    4b98:	490b      	ldr	r1, [pc, #44]	; (4bc8 <get_new_filename+0x84>)
    4b9a:	4620      	mov	r0, r4
    4b9c:	4b0b      	ldr	r3, [pc, #44]	; (4bcc <get_new_filename+0x88>)
    4b9e:	4798      	blx	r3
}
    4ba0:	4620      	mov	r0, r4
    4ba2:	b00b      	add	sp, #44	; 0x2c
    4ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ba6:	bf00      	nop
    4ba8:	0000b960 	.word	0x0000b960
    4bac:	00002269 	.word	0x00002269
    4bb0:	20004218 	.word	0x20004218
    4bb4:	200041dc 	.word	0x200041dc
    4bb8:	000022f5 	.word	0x000022f5
    4bbc:	00007ded 	.word	0x00007ded
    4bc0:	00004901 	.word	0x00004901
    4bc4:	20004478 	.word	0x20004478
    4bc8:	0000b4b8 	.word	0x0000b4b8
    4bcc:	000085dd 	.word	0x000085dd

00004bd0 <set_data_format>:
{
    4bd0:	b4f0      	push	{r4, r5, r6, r7}
    return sprintf(scan_print_buffer,
    4bd2:	4c0a      	ldr	r4, [pc, #40]	; (4bfc <set_data_format+0x2c>)
    4bd4:	4d0a      	ldr	r5, [pc, #40]	; (4c00 <set_data_format+0x30>)
    4bd6:	f104 0730 	add.w	r7, r4, #48	; 0x30
    4bda:	4626      	mov	r6, r4
    4bdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4bde:	6028      	str	r0, [r5, #0]
    4be0:	6069      	str	r1, [r5, #4]
    4be2:	60aa      	str	r2, [r5, #8]
    4be4:	60eb      	str	r3, [r5, #12]
    4be6:	4634      	mov	r4, r6
    4be8:	3510      	adds	r5, #16
    4bea:	42be      	cmp	r6, r7
    4bec:	d1f5      	bne.n	4bda <set_data_format+0xa>
    4bee:	cc03      	ldmia	r4!, {r0, r1}
    4bf0:	6028      	str	r0, [r5, #0]
    4bf2:	6069      	str	r1, [r5, #4]
}
    4bf4:	2037      	movs	r0, #55	; 0x37
    4bf6:	bcf0      	pop	{r4, r5, r6, r7}
    4bf8:	4770      	bx	lr
    4bfa:	bf00      	nop
    4bfc:	0000bcbc 	.word	0x0000bcbc
    4c00:	20004490 	.word	0x20004490

00004c04 <set_double_repres>:
{
    4c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c08:	b085      	sub	sp, #20
    4c0a:	4682      	mov	sl, r0
    4c0c:	4690      	mov	r8, r2
    4c0e:	4699      	mov	r9, r3
    4c10:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
	num_int = (uint32_t) num;
    4c14:	4e13      	ldr	r6, [pc, #76]	; (4c64 <set_double_repres+0x60>)
    4c16:	4610      	mov	r0, r2
    4c18:	4619      	mov	r1, r3
    4c1a:	47b0      	blx	r6
    4c1c:	4683      	mov	fp, r0
	num_precision = (uint32_t)((num - num_int) * pow(10, precision));
    4c1e:	4f12      	ldr	r7, [pc, #72]	; (4c68 <set_double_repres+0x64>)
    4c20:	4628      	mov	r0, r5
    4c22:	47b8      	blx	r7
    4c24:	4602      	mov	r2, r0
    4c26:	460b      	mov	r3, r1
    4c28:	2000      	movs	r0, #0
    4c2a:	4910      	ldr	r1, [pc, #64]	; (4c6c <set_double_repres+0x68>)
    4c2c:	4c10      	ldr	r4, [pc, #64]	; (4c70 <set_double_repres+0x6c>)
    4c2e:	47a0      	blx	r4
    4c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4c34:	4658      	mov	r0, fp
    4c36:	47b8      	blx	r7
    4c38:	4602      	mov	r2, r0
    4c3a:	460b      	mov	r3, r1
    4c3c:	4640      	mov	r0, r8
    4c3e:	4649      	mov	r1, r9
    4c40:	4f0c      	ldr	r7, [pc, #48]	; (4c74 <set_double_repres+0x70>)
    4c42:	47b8      	blx	r7
    4c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4c48:	4f0b      	ldr	r7, [pc, #44]	; (4c78 <set_double_repres+0x74>)
    4c4a:	47b8      	blx	r7
    4c4c:	47b0      	blx	r6
	sprintf((char*)buf, "%"PRIu32".%.*"PRIu32"", num_int, precision, num_precision);
    4c4e:	9000      	str	r0, [sp, #0]
    4c50:	462b      	mov	r3, r5
    4c52:	465a      	mov	r2, fp
    4c54:	4909      	ldr	r1, [pc, #36]	; (4c7c <set_double_repres+0x78>)
    4c56:	4650      	mov	r0, sl
    4c58:	4c09      	ldr	r4, [pc, #36]	; (4c80 <set_double_repres+0x7c>)
    4c5a:	47a0      	blx	r4
}
    4c5c:	b005      	add	sp, #20
    4c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c62:	bf00      	nop
    4c64:	00007a9d 	.word	0x00007a9d
    4c68:	00007401 	.word	0x00007401
    4c6c:	40240000 	.word	0x40240000
    4c70:	00006035 	.word	0x00006035
    4c74:	00007185 	.word	0x00007185
    4c78:	000074ed 	.word	0x000074ed
    4c7c:	0000bcf4 	.word	0x0000bcf4
    4c80:	000085dd 	.word	0x000085dd
    4c84:	00000000 	.word	0x00000000

00004c88 <average_samples>:
	switch (resp_desc.data_type) {
    4c88:	4b91      	ldr	r3, [pc, #580]	; (4ed0 <average_samples+0x248>)
    4c8a:	7a1b      	ldrb	r3, [r3, #8]
    4c8c:	2b82      	cmp	r3, #130	; 0x82
    4c8e:	f040 8119 	bne.w	4ec4 <average_samples+0x23c>
{
    4c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c96:	b08b      	sub	sp, #44	; 0x2c
    4c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
			start_angle = legacy_cabins[0].start_angle / 64.0;
    4c9c:	4c8d      	ldr	r4, [pc, #564]	; (4ed4 <average_samples+0x24c>)
    4c9e:	8920      	ldrh	r0, [r4, #8]
    4ca0:	4b8d      	ldr	r3, [pc, #564]	; (4ed8 <average_samples+0x250>)
    4ca2:	4798      	blx	r3
    4ca4:	2200      	movs	r2, #0
    4ca6:	4b8d      	ldr	r3, [pc, #564]	; (4edc <average_samples+0x254>)
    4ca8:	4d8d      	ldr	r5, [pc, #564]	; (4ee0 <average_samples+0x258>)
    4caa:	47a8      	blx	r5
    4cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4cb0:	46a2      	mov	sl, r4
    4cb2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    4cb6:	9309      	str	r3, [sp, #36]	; 0x24
				sd_scan_data[scan_count].servo_angle = servo_angle;
    4cb8:	4d8a      	ldr	r5, [pc, #552]	; (4ee4 <average_samples+0x25c>)
    4cba:	4c8b      	ldr	r4, [pc, #556]	; (4ee8 <average_samples+0x260>)
				set_double_repres((char*)sd_scan_data[scan_count].servo_angle_str, servo_angle, 2);
    4cbc:	4e8b      	ldr	r6, [pc, #556]	; (4eec <average_samples+0x264>)
				if (angle > 360)
    4cbe:	f8df 924c 	ldr.w	r9, [pc, #588]	; 4f0c <average_samples+0x284>
    4cc2:	e020      	b.n	4d06 <average_samples+0x7e>
						set_double_repres((char*)sd_scan_data[scan_count].distance,
    4cc4:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    4cc8:	eb04 1007 	add.w	r0, r4, r7, lsl #4
    4ccc:	2306      	movs	r3, #6
    4cce:	9300      	str	r3, [sp, #0]
    4cd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4cd4:	3030      	adds	r0, #48	; 0x30
    4cd6:	47b0      	blx	r6
						scan_count++;	
    4cd8:	682b      	ldr	r3, [r5, #0]
    4cda:	3301      	adds	r3, #1
    4cdc:	602b      	str	r3, [r5, #0]
    4cde:	e088      	b.n	4df2 <average_samples+0x16a>
						set_double_repres((char*)sd_scan_data[scan_count].distance,
    4ce0:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    4ce4:	eb04 1007 	add.w	r0, r4, r7, lsl #4
    4ce8:	2306      	movs	r3, #6
    4cea:	9300      	str	r3, [sp, #0]
    4cec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4cf0:	3030      	adds	r0, #48	; 0x30
    4cf2:	47b0      	blx	r6
						scan_count++;
    4cf4:	682b      	ldr	r3, [r5, #0]
    4cf6:	3301      	adds	r3, #1
    4cf8:	602b      	str	r3, [r5, #0]
    4cfa:	f10a 0a0a 	add.w	sl, sl, #10
			for (i = 0; i < LEGACY_CABIN_COUNT; i++) {
    4cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4d00:	459a      	cmp	sl, r3
    4d02:	f000 80dc 	beq.w	4ebe <average_samples+0x236>
				sd_scan_data[scan_count].servo_angle = servo_angle;
    4d06:	682b      	ldr	r3, [r5, #0]
    4d08:	00d8      	lsls	r0, r3, #3
    4d0a:	1ac2      	subs	r2, r0, r3
    4d0c:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    4d10:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
    4d14:	e9c2 7802 	strd	r7, r8, [r2, #8]
				set_double_repres((char*)sd_scan_data[scan_count].servo_angle_str, servo_angle, 2);
    4d18:	4610      	mov	r0, r2
    4d1a:	2302      	movs	r3, #2
    4d1c:	9300      	str	r3, [sp, #0]
    4d1e:	463a      	mov	r2, r7
    4d20:	4643      	mov	r3, r8
    4d22:	3010      	adds	r0, #16
    4d24:	47b0      	blx	r6
    4d26:	46d3      	mov	fp, sl
				angle = (legacy_cabins[i].angle_value1 & 0x0F) / 8.0;
    4d28:	f89a 7001 	ldrb.w	r7, [sl, #1]
    4d2c:	f007 000f 	and.w	r0, r7, #15
    4d30:	4b69      	ldr	r3, [pc, #420]	; (4ed8 <average_samples+0x250>)
    4d32:	4798      	blx	r3
    4d34:	2200      	movs	r2, #0
    4d36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    4d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 4ee0 <average_samples+0x258>
    4d3e:	47c0      	blx	r8
    4d40:	4684      	mov	ip, r0
    4d42:	468e      	mov	lr, r1
				if (legacy_cabins[i].angle_value1 >> 4) angle = -angle;
    4d44:	093b      	lsrs	r3, r7, #4
    4d46:	bf18      	it	ne
    4d48:	f101 4e00 	addne.w	lr, r1, #2147483648	; 0x80000000
				angle += start_angle;
    4d4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4d50:	4660      	mov	r0, ip
    4d52:	4671      	mov	r1, lr
    4d54:	4f66      	ldr	r7, [pc, #408]	; (4ef0 <average_samples+0x268>)
    4d56:	47b8      	blx	r7
    4d58:	4607      	mov	r7, r0
    4d5a:	4688      	mov	r8, r1
				if (angle > 360)
    4d5c:	2200      	movs	r2, #0
    4d5e:	4b65      	ldr	r3, [pc, #404]	; (4ef4 <average_samples+0x26c>)
    4d60:	47c8      	blx	r9
    4d62:	b138      	cbz	r0, 4d74 <average_samples+0xec>
					angle -= 360;
    4d64:	2200      	movs	r2, #0
    4d66:	4b63      	ldr	r3, [pc, #396]	; (4ef4 <average_samples+0x26c>)
    4d68:	4638      	mov	r0, r7
    4d6a:	4641      	mov	r1, r8
    4d6c:	4f62      	ldr	r7, [pc, #392]	; (4ef8 <average_samples+0x270>)
    4d6e:	47b8      	blx	r7
    4d70:	4607      	mov	r7, r0
    4d72:	4688      	mov	r8, r1
				set_double_repres((char*)sd_scan_data[scan_count].lidar_angle,
    4d74:	6828      	ldr	r0, [r5, #0]
    4d76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    4d7a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    4d7e:	2319      	movs	r3, #25
    4d80:	9300      	str	r3, [sp, #0]
    4d82:	463a      	mov	r2, r7
    4d84:	4643      	mov	r3, r8
    4d86:	3050      	adds	r0, #80	; 0x50
    4d88:	47b0      	blx	r6
				repeated_idx = check_repeated_angles(sd_scan_data[scan_count].lidar_angle, servo_angle);
    4d8a:	6828      	ldr	r0, [r5, #0]
    4d8c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    4d90:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    4d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4d98:	3050      	adds	r0, #80	; 0x50
    4d9a:	4958      	ldr	r1, [pc, #352]	; (4efc <average_samples+0x274>)
    4d9c:	4788      	blx	r1
    4d9e:	4607      	mov	r7, r0
				distance = legacy_cabins[i].distance1;
    4da0:	f8bb 0004 	ldrh.w	r0, [fp, #4]
    4da4:	4b56      	ldr	r3, [pc, #344]	; (4f00 <average_samples+0x278>)
    4da6:	4798      	blx	r3
    4da8:	e9cd 0106 	strd	r0, r1, [sp, #24]
				if (distance > 0.001) {
    4dac:	a346      	add	r3, pc, #280	; (adr r3, 4ec8 <average_samples+0x240>)
    4dae:	e9d3 2300 	ldrd	r2, r3, [r3]
    4db2:	47c8      	blx	r9
    4db4:	b1e8      	cbz	r0, 4df2 <average_samples+0x16a>
					if (repeated_idx != scan_count) {
    4db6:	682b      	ldr	r3, [r5, #0]
    4db8:	429f      	cmp	r7, r3
    4dba:	d083      	beq.n	4cc4 <average_samples+0x3c>
						distance += strtod((char*)sd_scan_data[repeated_idx].distance, NULL);
    4dbc:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    4dc0:	eb04 1707 	add.w	r7, r4, r7, lsl #4
    4dc4:	3730      	adds	r7, #48	; 0x30
    4dc6:	2100      	movs	r1, #0
    4dc8:	4638      	mov	r0, r7
    4dca:	4b4e      	ldr	r3, [pc, #312]	; (4f04 <average_samples+0x27c>)
    4dcc:	4798      	blx	r3
    4dce:	4602      	mov	r2, r0
    4dd0:	460b      	mov	r3, r1
    4dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4dd6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4ef0 <average_samples+0x268>
    4dda:	47c0      	blx	r8
						distance /= 2.0;
    4ddc:	2200      	movs	r2, #0
    4dde:	4b4a      	ldr	r3, [pc, #296]	; (4f08 <average_samples+0x280>)
    4de0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 4ee0 <average_samples+0x258>
    4de4:	47c0      	blx	r8
						set_double_repres((char*)sd_scan_data[repeated_idx].distance,
    4de6:	2306      	movs	r3, #6
    4de8:	9300      	str	r3, [sp, #0]
    4dea:	4602      	mov	r2, r0
    4dec:	460b      	mov	r3, r1
    4dee:	4638      	mov	r0, r7
    4df0:	47b0      	blx	r6
				sd_scan_data[scan_count].servo_angle = servo_angle;
    4df2:	682b      	ldr	r3, [r5, #0]
    4df4:	00d8      	lsls	r0, r3, #3
    4df6:	1ac2      	subs	r2, r0, r3
    4df8:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    4dfc:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
    4e00:	e9c2 7802 	strd	r7, r8, [r2, #8]
				set_double_repres((char*)sd_scan_data[scan_count].servo_angle_str, servo_angle, 2);
    4e04:	4610      	mov	r0, r2
    4e06:	2302      	movs	r3, #2
    4e08:	9300      	str	r3, [sp, #0]
    4e0a:	463a      	mov	r2, r7
    4e0c:	4643      	mov	r3, r8
    4e0e:	3010      	adds	r0, #16
    4e10:	47b0      	blx	r6
				angle = (legacy_cabins[i].angle_value2 & 0x0F) / 8;
    4e12:	f89b 7002 	ldrb.w	r7, [fp, #2]
    4e16:	f3c7 00c0 	ubfx	r0, r7, #3, #1
    4e1a:	4b2f      	ldr	r3, [pc, #188]	; (4ed8 <average_samples+0x250>)
    4e1c:	4798      	blx	r3
    4e1e:	4684      	mov	ip, r0
    4e20:	468e      	mov	lr, r1
				if (legacy_cabins[i].angle_value2 >> 4) angle = -angle;
    4e22:	093b      	lsrs	r3, r7, #4
    4e24:	bf18      	it	ne
    4e26:	f101 4e00 	addne.w	lr, r1, #2147483648	; 0x80000000
				angle += start_angle;
    4e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4e2e:	4660      	mov	r0, ip
    4e30:	4671      	mov	r1, lr
    4e32:	4f2f      	ldr	r7, [pc, #188]	; (4ef0 <average_samples+0x268>)
    4e34:	47b8      	blx	r7
				set_double_repres((char*)sd_scan_data[scan_count].lidar_angle,
    4e36:	682b      	ldr	r3, [r5, #0]
    4e38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4e3c:	eb04 1703 	add.w	r7, r4, r3, lsl #4
    4e40:	2319      	movs	r3, #25
    4e42:	9300      	str	r3, [sp, #0]
    4e44:	4602      	mov	r2, r0
    4e46:	460b      	mov	r3, r1
    4e48:	f107 0050 	add.w	r0, r7, #80	; 0x50
    4e4c:	47b0      	blx	r6
				repeated_idx = check_repeated_angles(sd_scan_data[scan_count].lidar_angle, servo_angle);
    4e4e:	6828      	ldr	r0, [r5, #0]
    4e50:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    4e54:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    4e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4e5c:	3050      	adds	r0, #80	; 0x50
    4e5e:	4927      	ldr	r1, [pc, #156]	; (4efc <average_samples+0x274>)
    4e60:	4788      	blx	r1
    4e62:	4607      	mov	r7, r0
				distance = legacy_cabins[i].distance2;
    4e64:	f8bb 0006 	ldrh.w	r0, [fp, #6]
    4e68:	4b25      	ldr	r3, [pc, #148]	; (4f00 <average_samples+0x278>)
    4e6a:	4798      	blx	r3
    4e6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
				if (distance > 0.001) {
    4e70:	a315      	add	r3, pc, #84	; (adr r3, 4ec8 <average_samples+0x240>)
    4e72:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e76:	47c8      	blx	r9
    4e78:	2800      	cmp	r0, #0
    4e7a:	f43f af3e 	beq.w	4cfa <average_samples+0x72>
					if (repeated_idx != scan_count) {
    4e7e:	682b      	ldr	r3, [r5, #0]
    4e80:	429f      	cmp	r7, r3
    4e82:	f43f af2d 	beq.w	4ce0 <average_samples+0x58>
						distance += strtod((char*)sd_scan_data[repeated_idx].distance, NULL);
    4e86:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    4e8a:	eb04 1707 	add.w	r7, r4, r7, lsl #4
    4e8e:	3730      	adds	r7, #48	; 0x30
    4e90:	2100      	movs	r1, #0
    4e92:	4638      	mov	r0, r7
    4e94:	4b1b      	ldr	r3, [pc, #108]	; (4f04 <average_samples+0x27c>)
    4e96:	4798      	blx	r3
    4e98:	4602      	mov	r2, r0
    4e9a:	460b      	mov	r3, r1
    4e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4ea0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4ef0 <average_samples+0x268>
    4ea4:	47c0      	blx	r8
						distance /= 2.0;
    4ea6:	2200      	movs	r2, #0
    4ea8:	4b17      	ldr	r3, [pc, #92]	; (4f08 <average_samples+0x280>)
    4eaa:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4ee0 <average_samples+0x258>
    4eae:	47c0      	blx	r8
						set_double_repres((char*)sd_scan_data[repeated_idx].distance,
    4eb0:	2306      	movs	r3, #6
    4eb2:	9300      	str	r3, [sp, #0]
    4eb4:	4602      	mov	r2, r0
    4eb6:	460b      	mov	r3, r1
    4eb8:	4638      	mov	r0, r7
    4eba:	47b0      	blx	r6
    4ebc:	e71d      	b.n	4cfa <average_samples+0x72>
}
    4ebe:	b00b      	add	sp, #44	; 0x2c
    4ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ec4:	4770      	bx	lr
    4ec6:	bf00      	nop
    4ec8:	d2f1a9fc 	.word	0xd2f1a9fc
    4ecc:	3f50624d 	.word	0x3f50624d
    4ed0:	20003b40 	.word	0x20003b40
    4ed4:	20003c4c 	.word	0x20003c4c
    4ed8:	00007421 	.word	0x00007421
    4edc:	3f900000 	.word	0x3f900000
    4ee0:	000074ed 	.word	0x000074ed
    4ee4:	20000328 	.word	0x20000328
    4ee8:	20000340 	.word	0x20000340
    4eec:	00004c05 	.word	0x00004c05
    4ef0:	00007189 	.word	0x00007189
    4ef4:	40768000 	.word	0x40768000
    4ef8:	00007185 	.word	0x00007185
    4efc:	00004885 	.word	0x00004885
    4f00:	00007401 	.word	0x00007401
    4f04:	00009351 	.word	0x00009351
    4f08:	3fe00000 	.word	0x3fe00000
    4f0c:	00007a0d 	.word	0x00007a0d

00004f10 <reset_print_buffer>:
{
    4f10:	4b04      	ldr	r3, [pc, #16]	; (4f24 <reset_print_buffer+0x14>)
    4f12:	f503 7180 	add.w	r1, r3, #256	; 0x100
		scan_print_buffer[i] = '\0';
    4f16:	2200      	movs	r2, #0
    4f18:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    4f1c:	428b      	cmp	r3, r1
    4f1e:	d1fb      	bne.n	4f18 <reset_print_buffer+0x8>
}
    4f20:	4770      	bx	lr
    4f22:	bf00      	nop
    4f24:	2000448f 	.word	0x2000448f

00004f28 <write_print_buffer>:
{
    4f28:	b538      	push	{r3, r4, r5, lr}
    4f2a:	4604      	mov	r4, r0
    fresult = f_write(&fptr, scan_print_buffer, data_length, &bwritten);
    4f2c:	4b09      	ldr	r3, [pc, #36]	; (4f54 <write_print_buffer+0x2c>)
    4f2e:	4602      	mov	r2, r0
    4f30:	4909      	ldr	r1, [pc, #36]	; (4f58 <write_print_buffer+0x30>)
    4f32:	480a      	ldr	r0, [pc, #40]	; (4f5c <write_print_buffer+0x34>)
    4f34:	4d0a      	ldr	r5, [pc, #40]	; (4f60 <write_print_buffer+0x38>)
    4f36:	47a8      	blx	r5
    4f38:	4b0a      	ldr	r3, [pc, #40]	; (4f64 <write_print_buffer+0x3c>)
    4f3a:	7018      	strb	r0, [r3, #0]
    if (!fresult && bwritten != data_length)
    4f3c:	b930      	cbnz	r0, 4f4c <write_print_buffer+0x24>
    4f3e:	4b05      	ldr	r3, [pc, #20]	; (4f54 <write_print_buffer+0x2c>)
    4f40:	681b      	ldr	r3, [r3, #0]
    4f42:	429c      	cmp	r4, r3
    4f44:	d002      	beq.n	4f4c <write_print_buffer+0x24>
        scan_error(SCAN_ERR_FILE_WRITE);
    4f46:	2005      	movs	r0, #5
    4f48:	4b07      	ldr	r3, [pc, #28]	; (4f68 <write_print_buffer+0x40>)
    4f4a:	4798      	blx	r3
    reset_print_buffer();
    4f4c:	4b07      	ldr	r3, [pc, #28]	; (4f6c <write_print_buffer+0x44>)
    4f4e:	4798      	blx	r3
    4f50:	bd38      	pop	{r3, r4, r5, pc}
    4f52:	bf00      	nop
    4f54:	200041f4 	.word	0x200041f4
    4f58:	20004490 	.word	0x20004490
    4f5c:	20004194 	.word	0x20004194
    4f60:	00001e95 	.word	0x00001e95
    4f64:	20004218 	.word	0x20004218
    4f68:	00004901 	.word	0x00004901
    4f6c:	00004f11 	.word	0x00004f11

00004f70 <write_scans>:
{
    4f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f74:	b082      	sub	sp, #8
    4f76:	4c0e      	ldr	r4, [pc, #56]	; (4fb0 <write_scans+0x40>)
    4f78:	f504 5860 	add.w	r8, r4, #14336	; 0x3800
			sprintf(scan_print_buffer,
    4f7c:	4f0d      	ldr	r7, [pc, #52]	; (4fb4 <write_scans+0x44>)
    4f7e:	4e0e      	ldr	r6, [pc, #56]	; (4fb8 <write_scans+0x48>)
    4f80:	4d0e      	ldr	r5, [pc, #56]	; (4fbc <write_scans+0x4c>)
    4f82:	f1a4 0320 	sub.w	r3, r4, #32
    4f86:	9300      	str	r3, [sp, #0]
    4f88:	f104 0320 	add.w	r3, r4, #32
    4f8c:	4622      	mov	r2, r4
    4f8e:	4639      	mov	r1, r7
    4f90:	4630      	mov	r0, r6
    4f92:	47a8      	blx	r5
		write_print_buffer (
    4f94:	4b0a      	ldr	r3, [pc, #40]	; (4fc0 <write_scans+0x50>)
    4f96:	4798      	blx	r3
    4f98:	3470      	adds	r4, #112	; 0x70
	for (i = 0; i < MAX_SCANS; i++)
    4f9a:	4544      	cmp	r4, r8
    4f9c:	d1f1      	bne.n	4f82 <write_scans+0x12>
	clear_scan_data();
    4f9e:	4b09      	ldr	r3, [pc, #36]	; (4fc4 <write_scans+0x54>)
    4fa0:	4798      	blx	r3
	restart_count = 0;
    4fa2:	2200      	movs	r2, #0
    4fa4:	4b08      	ldr	r3, [pc, #32]	; (4fc8 <write_scans+0x58>)
    4fa6:	701a      	strb	r2, [r3, #0]
}
    4fa8:	b002      	add	sp, #8
    4faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fae:	bf00      	nop
    4fb0:	20000370 	.word	0x20000370
    4fb4:	0000bd00 	.word	0x0000bd00
    4fb8:	20004490 	.word	0x20004490
    4fbc:	000085dd 	.word	0x000085dd
    4fc0:	00004f29 	.word	0x00004f29
    4fc4:	00004841 	.word	0x00004841
    4fc8:	2000411c 	.word	0x2000411c

00004fcc <format_header_file_data>:
{
    4fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fd0:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    char read_characters[512] = {0};
    4fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
    4fd8:	2100      	movs	r1, #0
    4fda:	a806      	add	r0, sp, #24
    4fdc:	4b64      	ldr	r3, [pc, #400]	; (5170 <format_header_file_data+0x1a4>)
    4fde:	4798      	blx	r3
	UINT i, j, bytes_read = 0, longest_length = 0, line_length = 0, tmp_longest_line = 0;
    4fe0:	2100      	movs	r1, #0
    4fe2:	9105      	str	r1, [sp, #20]
	fresult = f_rewind(&fptr);
    4fe4:	4863      	ldr	r0, [pc, #396]	; (5174 <format_header_file_data+0x1a8>)
    4fe6:	4b64      	ldr	r3, [pc, #400]	; (5178 <format_header_file_data+0x1ac>)
    4fe8:	4798      	blx	r3
    4fea:	4b64      	ldr	r3, [pc, #400]	; (517c <format_header_file_data+0x1b0>)
    4fec:	7018      	strb	r0, [r3, #0]
	if (fresult)
    4fee:	b9e0      	cbnz	r0, 502a <format_header_file_data+0x5e>
	fresult = f_read(&fptr, &read_characters, 512, &bytes_read);
    4ff0:	ab05      	add	r3, sp, #20
    4ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
    4ff6:	a906      	add	r1, sp, #24
    4ff8:	485e      	ldr	r0, [pc, #376]	; (5174 <format_header_file_data+0x1a8>)
    4ffa:	4c61      	ldr	r4, [pc, #388]	; (5180 <format_header_file_data+0x1b4>)
    4ffc:	47a0      	blx	r4
    4ffe:	4b5f      	ldr	r3, [pc, #380]	; (517c <format_header_file_data+0x1b0>)
    5000:	7018      	strb	r0, [r3, #0]
	if (fresult) 
    5002:	b9b0      	cbnz	r0, 5032 <format_header_file_data+0x66>
	fresult = f_rewind(&fptr);
    5004:	2100      	movs	r1, #0
    5006:	485b      	ldr	r0, [pc, #364]	; (5174 <format_header_file_data+0x1a8>)
    5008:	4b5b      	ldr	r3, [pc, #364]	; (5178 <format_header_file_data+0x1ac>)
    500a:	4798      	blx	r3
    500c:	4b5b      	ldr	r3, [pc, #364]	; (517c <format_header_file_data+0x1b0>)
    500e:	7018      	strb	r0, [r3, #0]
	if (fresult)
    5010:	b998      	cbnz	r0, 503a <format_header_file_data+0x6e>
	for (i = 0; i < bytes_read; i++) {
    5012:	9c05      	ldr	r4, [sp, #20]
    5014:	2c00      	cmp	r4, #0
    5016:	d045      	beq.n	50a4 <format_header_file_data+0xd8>
    5018:	f10d 0317 	add.w	r3, sp, #23
    501c:	aa86      	add	r2, sp, #536	; 0x218
    501e:	1910      	adds	r0, r2, r4
    5020:	f2a0 2001 	subw	r0, r0, #513	; 0x201
    5024:	2200      	movs	r2, #0
    5026:	4615      	mov	r5, r2
    5028:	e010      	b.n	504c <format_header_file_data+0x80>
		scan_error(SCAN_ERR_FILE_FORMATTING);
    502a:	2008      	movs	r0, #8
    502c:	4b55      	ldr	r3, [pc, #340]	; (5184 <format_header_file_data+0x1b8>)
    502e:	4798      	blx	r3
    5030:	e7de      	b.n	4ff0 <format_header_file_data+0x24>
		scan_error(SCAN_ERR_FILE_FORMATTING);
    5032:	2008      	movs	r0, #8
    5034:	4b53      	ldr	r3, [pc, #332]	; (5184 <format_header_file_data+0x1b8>)
    5036:	4798      	blx	r3
    5038:	e7e4      	b.n	5004 <format_header_file_data+0x38>
		scan_error(fresult);
    503a:	4b52      	ldr	r3, [pc, #328]	; (5184 <format_header_file_data+0x1b8>)
    503c:	4798      	blx	r3
    503e:	e7e8      	b.n	5012 <format_header_file_data+0x46>
    5040:	4295      	cmp	r5, r2
    5042:	bf38      	it	cc
    5044:	4615      	movcc	r5, r2
			tmp_longest_line = 0;
    5046:	2200      	movs	r2, #0
	for (i = 0; i < bytes_read; i++) {
    5048:	4283      	cmp	r3, r0
    504a:	d005      	beq.n	5058 <format_header_file_data+0x8c>
		if (read_characters[i] == '\n') {
    504c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5050:	290a      	cmp	r1, #10
    5052:	d0f5      	beq.n	5040 <format_header_file_data+0x74>
		tmp_longest_line++;
    5054:	3201      	adds	r2, #1
    5056:	e7f7      	b.n	5048 <format_header_file_data+0x7c>
    5058:	9502      	str	r5, [sp, #8]
	for (i = 0; i < longest_length + 3; i++)
    505a:	1ceb      	adds	r3, r5, #3
    505c:	9303      	str	r3, [sp, #12]
    505e:	d07b      	beq.n	5158 <format_header_file_data+0x18c>
    5060:	2500      	movs	r5, #0
		strncat(scan_print_buffer, "#", 1);
    5062:	4e49      	ldr	r6, [pc, #292]	; (5188 <format_header_file_data+0x1bc>)
    5064:	f8df 8128 	ldr.w	r8, [pc, #296]	; 5190 <format_header_file_data+0x1c4>
    5068:	4b48      	ldr	r3, [pc, #288]	; (518c <format_header_file_data+0x1c0>)
    506a:	881f      	ldrh	r7, [r3, #0]
    506c:	f8dd 900c 	ldr.w	r9, [sp, #12]
    5070:	4630      	mov	r0, r6
    5072:	47c0      	blx	r8
    5074:	5237      	strh	r7, [r6, r0]
	for (i = 0; i < longest_length + 3; i++)
    5076:	3501      	adds	r5, #1
    5078:	454d      	cmp	r5, r9
    507a:	d3f9      	bcc.n	5070 <format_header_file_data+0xa4>
	strncat(scan_print_buffer, "\r\n", 2);
    507c:	4d42      	ldr	r5, [pc, #264]	; (5188 <format_header_file_data+0x1bc>)
    507e:	4628      	mov	r0, r5
    5080:	4b43      	ldr	r3, [pc, #268]	; (5190 <format_header_file_data+0x1c4>)
    5082:	4798      	blx	r3
    5084:	1942      	adds	r2, r0, r5
    5086:	4b43      	ldr	r3, [pc, #268]	; (5194 <format_header_file_data+0x1c8>)
    5088:	8819      	ldrh	r1, [r3, #0]
    508a:	789b      	ldrb	r3, [r3, #2]
    508c:	5341      	strh	r1, [r0, r5]
    508e:	7093      	strb	r3, [r2, #2]
	while (i != bytes_read) {
    5090:	2c00      	cmp	r4, #0
    5092:	d041      	beq.n	5118 <format_header_file_data+0x14c>
    5094:	f10d 0617 	add.w	r6, sp, #23
	for (i = 0; i < longest_length + 3; i++)
    5098:	f04f 0b00 	mov.w	fp, #0
    509c:	46da      	mov	sl, fp
			strncat(scan_print_buffer, "#", 1);
    509e:	4d3a      	ldr	r5, [pc, #232]	; (5188 <format_header_file_data+0x1bc>)
    50a0:	4f3b      	ldr	r7, [pc, #236]	; (5190 <format_header_file_data+0x1c4>)
    50a2:	e026      	b.n	50f2 <format_header_file_data+0x126>
	UINT i, j, bytes_read = 0, longest_length = 0, line_length = 0, tmp_longest_line = 0;
    50a4:	9402      	str	r4, [sp, #8]
	for (i = 0; i < longest_length + 3; i++)
    50a6:	2303      	movs	r3, #3
    50a8:	9303      	str	r3, [sp, #12]
    50aa:	e7d9      	b.n	5060 <format_header_file_data+0x94>
			for (j = 0; j < (longest_length - line_length); j++) 
    50ac:	9b02      	ldr	r3, [sp, #8]
    50ae:	ebb3 080b 	subs.w	r8, r3, fp
    50b2:	d00a      	beq.n	50ca <format_header_file_data+0xfe>
    50b4:	2400      	movs	r4, #0
				strncat(scan_print_buffer, " " , 1);
    50b6:	4b38      	ldr	r3, [pc, #224]	; (5198 <format_header_file_data+0x1cc>)
    50b8:	f8b3 9000 	ldrh.w	r9, [r3]
    50bc:	4628      	mov	r0, r5
    50be:	47b8      	blx	r7
    50c0:	f825 9000 	strh.w	r9, [r5, r0]
			for (j = 0; j < (longest_length - line_length); j++) 
    50c4:	3401      	adds	r4, #1
    50c6:	4544      	cmp	r4, r8
    50c8:	d1f8      	bne.n	50bc <format_header_file_data+0xf0>
			strncat(scan_print_buffer, "##", 2);
    50ca:	4628      	mov	r0, r5
    50cc:	47b8      	blx	r7
    50ce:	1942      	adds	r2, r0, r5
    50d0:	4b32      	ldr	r3, [pc, #200]	; (519c <format_header_file_data+0x1d0>)
    50d2:	8819      	ldrh	r1, [r3, #0]
    50d4:	789b      	ldrb	r3, [r3, #2]
    50d6:	5341      	strh	r1, [r0, r5]
    50d8:	7093      	strb	r3, [r2, #2]
		strncat(scan_print_buffer, &read_characters[i++], 1);
    50da:	f10a 0a01 	add.w	sl, sl, #1
    50de:	2201      	movs	r2, #1
    50e0:	9901      	ldr	r1, [sp, #4]
    50e2:	4628      	mov	r0, r5
    50e4:	4b2e      	ldr	r3, [pc, #184]	; (51a0 <format_header_file_data+0x1d4>)
    50e6:	4798      	blx	r3
		line_length++;
    50e8:	f10b 0b01 	add.w	fp, fp, #1
	while (i != bytes_read) {
    50ec:	9b05      	ldr	r3, [sp, #20]
    50ee:	4553      	cmp	r3, sl
    50f0:	d012      	beq.n	5118 <format_header_file_data+0x14c>
    50f2:	3601      	adds	r6, #1
    50f4:	9601      	str	r6, [sp, #4]
		if (read_characters[i] == '\r') {
    50f6:	7833      	ldrb	r3, [r6, #0]
    50f8:	2b0d      	cmp	r3, #13
    50fa:	d0d7      	beq.n	50ac <format_header_file_data+0xe0>
		else if (read_characters[i] == '#') {
    50fc:	2b23      	cmp	r3, #35	; 0x23
    50fe:	d1ec      	bne.n	50da <format_header_file_data+0x10e>
			strncat(scan_print_buffer, "#", 1);
    5100:	4628      	mov	r0, r5
    5102:	47b8      	blx	r7
    5104:	4b21      	ldr	r3, [pc, #132]	; (518c <format_header_file_data+0x1c0>)
    5106:	881b      	ldrh	r3, [r3, #0]
    5108:	522b      	strh	r3, [r5, r0]
			write_print_buffer((UINT)strlen(scan_print_buffer));
    510a:	4628      	mov	r0, r5
    510c:	47b8      	blx	r7
    510e:	4b25      	ldr	r3, [pc, #148]	; (51a4 <format_header_file_data+0x1d8>)
    5110:	4798      	blx	r3
			line_length = 0;
    5112:	f04f 0b00 	mov.w	fp, #0
    5116:	e7e0      	b.n	50da <format_header_file_data+0x10e>
	for (i = 0; i < longest_length + 3; i++)
    5118:	9a03      	ldr	r2, [sp, #12]
    511a:	b15a      	cbz	r2, 5134 <format_header_file_data+0x168>
    511c:	2400      	movs	r4, #0
		strncat(scan_print_buffer, "#", 1);
    511e:	4d1a      	ldr	r5, [pc, #104]	; (5188 <format_header_file_data+0x1bc>)
    5120:	4f1b      	ldr	r7, [pc, #108]	; (5190 <format_header_file_data+0x1c4>)
    5122:	4b1a      	ldr	r3, [pc, #104]	; (518c <format_header_file_data+0x1c0>)
    5124:	881e      	ldrh	r6, [r3, #0]
    5126:	4690      	mov	r8, r2
    5128:	4628      	mov	r0, r5
    512a:	47b8      	blx	r7
    512c:	522e      	strh	r6, [r5, r0]
	for (i = 0; i < longest_length + 3; i++)
    512e:	3401      	adds	r4, #1
    5130:	4544      	cmp	r4, r8
    5132:	d1f9      	bne.n	5128 <format_header_file_data+0x15c>
	strncat(scan_print_buffer, "\r\n", 2);
    5134:	4c14      	ldr	r4, [pc, #80]	; (5188 <format_header_file_data+0x1bc>)
    5136:	4620      	mov	r0, r4
    5138:	4d15      	ldr	r5, [pc, #84]	; (5190 <format_header_file_data+0x1c4>)
    513a:	47a8      	blx	r5
    513c:	1902      	adds	r2, r0, r4
    513e:	4b15      	ldr	r3, [pc, #84]	; (5194 <format_header_file_data+0x1c8>)
    5140:	8819      	ldrh	r1, [r3, #0]
    5142:	789b      	ldrb	r3, [r3, #2]
    5144:	5301      	strh	r1, [r0, r4]
    5146:	7093      	strb	r3, [r2, #2]
	write_print_buffer((UINT)strlen(scan_print_buffer));
    5148:	4620      	mov	r0, r4
    514a:	47a8      	blx	r5
    514c:	4b15      	ldr	r3, [pc, #84]	; (51a4 <format_header_file_data+0x1d8>)
    514e:	4798      	blx	r3
}
    5150:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
    5154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strncat(scan_print_buffer, "\r\n", 2);
    5158:	4c0b      	ldr	r4, [pc, #44]	; (5188 <format_header_file_data+0x1bc>)
    515a:	4620      	mov	r0, r4
    515c:	4b0c      	ldr	r3, [pc, #48]	; (5190 <format_header_file_data+0x1c4>)
    515e:	4798      	blx	r3
    5160:	1902      	adds	r2, r0, r4
    5162:	4b0c      	ldr	r3, [pc, #48]	; (5194 <format_header_file_data+0x1c8>)
    5164:	8819      	ldrh	r1, [r3, #0]
    5166:	789b      	ldrb	r3, [r3, #2]
    5168:	5301      	strh	r1, [r0, r4]
    516a:	7093      	strb	r3, [r2, #2]
    516c:	e792      	b.n	5094 <format_header_file_data+0xc8>
    516e:	bf00      	nop
    5170:	00008189 	.word	0x00008189
    5174:	20004194 	.word	0x20004194
    5178:	00002131 	.word	0x00002131
    517c:	20004218 	.word	0x20004218
    5180:	00001d29 	.word	0x00001d29
    5184:	00004901 	.word	0x00004901
    5188:	20004490 	.word	0x20004490
    518c:	0000bd0c 	.word	0x0000bd0c
    5190:	000086ed 	.word	0x000086ed
    5194:	0000b89c 	.word	0x0000b89c
    5198:	0000bd10 	.word	0x0000bd10
    519c:	0000bd14 	.word	0x0000bd14
    51a0:	000086fd 	.word	0x000086fd
    51a4:	00004f29 	.word	0x00004f29

000051a8 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    51a8:	b510      	push	{r4, lr}
    51aa:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    51ac:	4807      	ldr	r0, [pc, #28]	; (51cc <sd_mmc_configure_slot+0x24>)
    51ae:	6804      	ldr	r4, [r0, #0]
	driver_select_device(
    51b0:	7b63      	ldrb	r3, [r4, #13]
    51b2:	6822      	ldr	r2, [r4, #0]
    51b4:	7901      	ldrb	r1, [r0, #4]
    51b6:	6880      	ldr	r0, [r0, #8]
    51b8:	7fa4      	ldrb	r4, [r4, #30]
    51ba:	3400      	adds	r4, #0
    51bc:	bf18      	it	ne
    51be:	2401      	movne	r4, #1
    51c0:	9400      	str	r4, [sp, #0]
    51c2:	4c03      	ldr	r4, [pc, #12]	; (51d0 <sd_mmc_configure_slot+0x28>)
    51c4:	47a0      	blx	r4
}
    51c6:	b002      	add	sp, #8
    51c8:	bd10      	pop	{r4, pc}
    51ca:	bf00      	nop
    51cc:	20004120 	.word	0x20004120
    51d0:	00002699 	.word	0x00002699

000051d4 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    51d4:	b108      	cbz	r0, 51da <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    51d6:	2004      	movs	r0, #4
    51d8:	4770      	bx	lr
{
    51da:	b530      	push	{r4, r5, lr}
    51dc:	b083      	sub	sp, #12
	if (_cd && _cd[slot].pin != -1) {
    51de:	4b3a      	ldr	r3, [pc, #232]	; (52c8 <sd_mmc_select_slot+0xf4>)
    51e0:	68db      	ldr	r3, [r3, #12]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d041      	beq.n	526a <sd_mmc_select_slot+0x96>
    51e6:	f9b3 3000 	ldrsh.w	r3, [r3]
    51ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    51ee:	d03c      	beq.n	526a <sd_mmc_select_slot+0x96>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    51f0:	b2dd      	uxtb	r5, r3
	CRITICAL_SECTION_ENTER();
    51f2:	a801      	add	r0, sp, #4
    51f4:	4b35      	ldr	r3, [pc, #212]	; (52cc <sd_mmc_select_slot+0xf8>)
    51f6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    51f8:	096b      	lsrs	r3, r5, #5
    51fa:	4935      	ldr	r1, [pc, #212]	; (52d0 <sd_mmc_select_slot+0xfc>)
    51fc:	01db      	lsls	r3, r3, #7
    51fe:	18ca      	adds	r2, r1, r3
    5200:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5202:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5204:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5206:	405c      	eors	r4, r3
    5208:	400c      	ands	r4, r1
    520a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    520c:	a801      	add	r0, sp, #4
    520e:	4b31      	ldr	r3, [pc, #196]	; (52d4 <sd_mmc_select_slot+0x100>)
    5210:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    5212:	f005 031f 	and.w	r3, r5, #31
    5216:	2201      	movs	r2, #1
    5218:	fa02 f303 	lsl.w	r3, r2, r3
    521c:	4223      	tst	r3, r4
    521e:	bf08      	it	eq
    5220:	2200      	moveq	r2, #0
    5222:	4b29      	ldr	r3, [pc, #164]	; (52c8 <sd_mmc_select_slot+0xf4>)
    5224:	68db      	ldr	r3, [r3, #12]
    5226:	885b      	ldrh	r3, [r3, #2]
    5228:	429a      	cmp	r2, r3
    522a:	d004      	beq.n	5236 <sd_mmc_select_slot+0x62>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    522c:	2204      	movs	r2, #4
    522e:	4b26      	ldr	r3, [pc, #152]	; (52c8 <sd_mmc_select_slot+0xf4>)
    5230:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    5232:	2002      	movs	r0, #2
    5234:	e039      	b.n	52aa <sd_mmc_select_slot+0xd6>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    5236:	4b24      	ldr	r3, [pc, #144]	; (52c8 <sd_mmc_select_slot+0xf4>)
    5238:	7e9b      	ldrb	r3, [r3, #26]
    523a:	2b04      	cmp	r3, #4
    523c:	d005      	beq.n	524a <sd_mmc_select_slot+0x76>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    523e:	2b01      	cmp	r3, #1
    5240:	d008      	beq.n	5254 <sd_mmc_select_slot+0x80>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    5242:	2b03      	cmp	r3, #3
    5244:	d117      	bne.n	5276 <sd_mmc_select_slot+0xa2>
			return SD_MMC_ERR_UNUSABLE;
    5246:	2003      	movs	r0, #3
    5248:	e02f      	b.n	52aa <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    524a:	2201      	movs	r2, #1
    524c:	4b1e      	ldr	r3, [pc, #120]	; (52c8 <sd_mmc_select_slot+0xf4>)
    524e:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
    5250:	2002      	movs	r0, #2
    5252:	e02a      	b.n	52aa <sd_mmc_select_slot+0xd6>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    5254:	4b1c      	ldr	r3, [pc, #112]	; (52c8 <sd_mmc_select_slot+0xf4>)
    5256:	2202      	movs	r2, #2
    5258:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    525a:	4a1f      	ldr	r2, [pc, #124]	; (52d8 <sd_mmc_select_slot+0x104>)
    525c:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    525e:	2201      	movs	r2, #1
    5260:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    5262:	2200      	movs	r2, #0
    5264:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    5268:	e005      	b.n	5276 <sd_mmc_select_slot+0xa2>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    526a:	4b17      	ldr	r3, [pc, #92]	; (52c8 <sd_mmc_select_slot+0xf4>)
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    526c:	7e9b      	ldrb	r3, [r3, #26]
    526e:	3b03      	subs	r3, #3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    5270:	b2db      	uxtb	r3, r3
    5272:	2b01      	cmp	r3, #1
    5274:	d91b      	bls.n	52ae <sd_mmc_select_slot+0xda>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    5276:	4b14      	ldr	r3, [pc, #80]	; (52c8 <sd_mmc_select_slot+0xf4>)
    5278:	791b      	ldrb	r3, [r3, #4]
    527a:	b31b      	cbz	r3, 52c4 <sd_mmc_select_slot+0xf0>
    527c:	4b12      	ldr	r3, [pc, #72]	; (52c8 <sd_mmc_select_slot+0xf4>)
    527e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    5280:	fab0 f080 	clz	r0, r0
    5284:	0940      	lsrs	r0, r0, #5
    5286:	f240 422c 	movw	r2, #1068	; 0x42c
    528a:	4914      	ldr	r1, [pc, #80]	; (52dc <sd_mmc_select_slot+0x108>)
    528c:	4b14      	ldr	r3, [pc, #80]	; (52e0 <sd_mmc_select_slot+0x10c>)
    528e:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    5290:	4c0d      	ldr	r4, [pc, #52]	; (52c8 <sd_mmc_select_slot+0xf4>)
    5292:	2300      	movs	r3, #0
    5294:	7123      	strb	r3, [r4, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    5296:	f104 0310 	add.w	r3, r4, #16
    529a:	6023      	str	r3, [r4, #0]
	sd_mmc_configure_slot();
    529c:	4b11      	ldr	r3, [pc, #68]	; (52e4 <sd_mmc_select_slot+0x110>)
    529e:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    52a0:	7ea0      	ldrb	r0, [r4, #26]
    52a2:	2802      	cmp	r0, #2
    52a4:	bf14      	ite	ne
    52a6:	2000      	movne	r0, #0
    52a8:	2001      	moveq	r0, #1
}
    52aa:	b003      	add	sp, #12
    52ac:	bd30      	pop	{r4, r5, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    52ae:	4b06      	ldr	r3, [pc, #24]	; (52c8 <sd_mmc_select_slot+0xf4>)
    52b0:	2202      	movs	r2, #2
    52b2:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    52b4:	4a08      	ldr	r2, [pc, #32]	; (52d8 <sd_mmc_select_slot+0x104>)
    52b6:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    52b8:	2201      	movs	r2, #1
    52ba:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    52bc:	2200      	movs	r2, #0
    52be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    52c2:	e7d8      	b.n	5276 <sd_mmc_select_slot+0xa2>
    52c4:	2001      	movs	r0, #1
    52c6:	e7de      	b.n	5286 <sd_mmc_select_slot+0xb2>
    52c8:	20004120 	.word	0x20004120
    52cc:	00002451 	.word	0x00002451
    52d0:	41008000 	.word	0x41008000
    52d4:	0000245f 	.word	0x0000245f
    52d8:	00061a80 	.word	0x00061a80
    52dc:	0000bdb4 	.word	0x0000bdb4
    52e0:	00002a99 	.word	0x00002a99
    52e4:	000051a9 	.word	0x000051a9

000052e8 <sdio_cmd52>:
{
    52e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52ec:	4606      	mov	r6, r0
    52ee:	460f      	mov	r7, r1
    52f0:	4614      	mov	r4, r2
    52f2:	4698      	mov	r8, r3
    52f4:	9d06      	ldr	r5, [sp, #24]
	ASSERT(io_data != NULL);
    52f6:	f240 3276 	movw	r2, #886	; 0x376
    52fa:	4910      	ldr	r1, [pc, #64]	; (533c <sdio_cmd52+0x54>)
    52fc:	1c28      	adds	r0, r5, #0
    52fe:	bf18      	it	ne
    5300:	2001      	movne	r0, #1
    5302:	4b0f      	ldr	r3, [pc, #60]	; (5340 <sdio_cmd52+0x58>)
    5304:	4798      	blx	r3
	                         | ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
    5306:	0260      	lsls	r0, r4, #9
	if (!driver_send_cmd(sd_mmc_hal,
    5308:	ea40 60c8 	orr.w	r0, r0, r8, lsl #27
    530c:	ea40 7007 	orr.w	r0, r0, r7, lsl #28
    5310:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    5314:	782a      	ldrb	r2, [r5, #0]
	if (!driver_send_cmd(sd_mmc_hal,
    5316:	4302      	orrs	r2, r0
    5318:	f241 3134 	movw	r1, #4916	; 0x1334
    531c:	4b09      	ldr	r3, [pc, #36]	; (5344 <sdio_cmd52+0x5c>)
    531e:	6898      	ldr	r0, [r3, #8]
    5320:	4b09      	ldr	r3, [pc, #36]	; (5348 <sdio_cmd52+0x60>)
    5322:	4798      	blx	r3
    5324:	4604      	mov	r4, r0
    5326:	b910      	cbnz	r0, 532e <sdio_cmd52+0x46>
}
    5328:	4620      	mov	r0, r4
    532a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    532e:	4b05      	ldr	r3, [pc, #20]	; (5344 <sdio_cmd52+0x5c>)
    5330:	6898      	ldr	r0, [r3, #8]
    5332:	4b06      	ldr	r3, [pc, #24]	; (534c <sdio_cmd52+0x64>)
    5334:	4798      	blx	r3
    5336:	7028      	strb	r0, [r5, #0]
	return true;
    5338:	e7f6      	b.n	5328 <sdio_cmd52+0x40>
    533a:	bf00      	nop
    533c:	0000bdb4 	.word	0x0000bdb4
    5340:	00002a99 	.word	0x00002a99
    5344:	20004120 	.word	0x20004120
    5348:	0000277d 	.word	0x0000277d
    534c:	000027ad 	.word	0x000027ad

00005350 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    5350:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    5352:	4b05      	ldr	r3, [pc, #20]	; (5368 <sd_mmc_deselect_slot+0x18>)
    5354:	791b      	ldrb	r3, [r3, #4]
    5356:	b103      	cbz	r3, 535a <sd_mmc_deselect_slot+0xa>
    5358:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    535a:	2100      	movs	r1, #0
    535c:	4b02      	ldr	r3, [pc, #8]	; (5368 <sd_mmc_deselect_slot+0x18>)
    535e:	6898      	ldr	r0, [r3, #8]
    5360:	4b02      	ldr	r3, [pc, #8]	; (536c <sd_mmc_deselect_slot+0x1c>)
    5362:	4798      	blx	r3
	}
}
    5364:	e7f8      	b.n	5358 <sd_mmc_deselect_slot+0x8>
    5366:	bf00      	nop
    5368:	20004120 	.word	0x20004120
    536c:	000026d5 	.word	0x000026d5

00005370 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    5370:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    5372:	4b05      	ldr	r3, [pc, #20]	; (5388 <sd_mmc_init+0x18>)
    5374:	2404      	movs	r4, #4
    5376:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    5378:	24ff      	movs	r4, #255	; 0xff
    537a:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    537c:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    537e:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    5380:	635a      	str	r2, [r3, #52]	; 0x34
}
    5382:	bc10      	pop	{r4}
    5384:	4770      	bx	lr
    5386:	bf00      	nop
    5388:	20004120 	.word	0x20004120

0000538c <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    538c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5390:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    5392:	4baa      	ldr	r3, [pc, #680]	; (563c <sd_mmc_check+0x2b0>)
    5394:	4798      	blx	r3
    5396:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    5398:	2801      	cmp	r0, #1
    539a:	d005      	beq.n	53a8 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
    539c:	4ba8      	ldr	r3, [pc, #672]	; (5640 <sd_mmc_check+0x2b4>)
    539e:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    53a0:	4620      	mov	r0, r4
    53a2:	b015      	add	sp, #84	; 0x54
    53a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
    53a8:	af14      	add	r7, sp, #80	; 0x50
    53aa:	2308      	movs	r3, #8
    53ac:	f807 3d45 	strb.w	r3, [r7, #-69]!
	sd_mmc_card->type    = CARD_TYPE_SD;
    53b0:	4ea4      	ldr	r6, [pc, #656]	; (5644 <sd_mmc_check+0x2b8>)
    53b2:	6833      	ldr	r3, [r6, #0]
    53b4:	f04f 0801 	mov.w	r8, #1
    53b8:	f883 800b 	strb.w	r8, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    53bc:	2500      	movs	r5, #0
    53be:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca     = 0;
    53c0:	811d      	strh	r5, [r3, #8]
	driver_send_clock(sd_mmc_hal);
    53c2:	68b0      	ldr	r0, [r6, #8]
    53c4:	4ba0      	ldr	r3, [pc, #640]	; (5648 <sd_mmc_check+0x2bc>)
    53c6:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    53c8:	9700      	str	r7, [sp, #0]
    53ca:	462b      	mov	r3, r5
    53cc:	2206      	movs	r2, #6
    53ce:	4629      	mov	r1, r5
    53d0:	4640      	mov	r0, r8
    53d2:	4f9e      	ldr	r7, [pc, #632]	; (564c <sd_mmc_check+0x2c0>)
    53d4:	47b8      	blx	r7
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    53d6:	462a      	mov	r2, r5
    53d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    53dc:	68b0      	ldr	r0, [r6, #8]
    53de:	4b9c      	ldr	r3, [pc, #624]	; (5650 <sd_mmc_check+0x2c4>)
    53e0:	4798      	blx	r3
    53e2:	b930      	cbnz	r0, 53f2 <sd_mmc_check+0x66>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    53e4:	4b97      	ldr	r3, [pc, #604]	; (5644 <sd_mmc_check+0x2b8>)
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	2403      	movs	r4, #3
    53ea:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    53ec:	4b94      	ldr	r3, [pc, #592]	; (5640 <sd_mmc_check+0x2b4>)
    53ee:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    53f0:	e7d6      	b.n	53a0 <sd_mmc_check+0x14>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    53f2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    53f6:	f245 5108 	movw	r1, #21768	; 0x5508
    53fa:	68b0      	ldr	r0, [r6, #8]
    53fc:	4b94      	ldr	r3, [pc, #592]	; (5650 <sd_mmc_check+0x2c4>)
    53fe:	4798      	blx	r3
    5400:	2800      	cmp	r0, #0
    5402:	f040 80a4 	bne.w	554e <sd_mmc_check+0x1c2>
	*v2 = 0;
    5406:	f04f 0800 	mov.w	r8, #0
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    540a:	2200      	movs	r2, #0
    540c:	f244 5105 	movw	r1, #17669	; 0x4505
    5410:	4b8c      	ldr	r3, [pc, #560]	; (5644 <sd_mmc_check+0x2b8>)
    5412:	6898      	ldr	r0, [r3, #8]
    5414:	4b8e      	ldr	r3, [pc, #568]	; (5650 <sd_mmc_check+0x2c4>)
    5416:	4798      	blx	r3
    5418:	2800      	cmp	r0, #0
    541a:	f040 80a6 	bne.w	556a <sd_mmc_check+0x1de>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    541e:	4b89      	ldr	r3, [pc, #548]	; (5644 <sd_mmc_check+0x2b8>)
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	7adb      	ldrb	r3, [r3, #11]
    5424:	f013 0f01 	tst.w	r3, #1
    5428:	f040 80c9 	bne.w	55be <sd_mmc_check+0x232>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    542c:	2200      	movs	r2, #0
    542e:	f245 1103 	movw	r1, #20739	; 0x5103
    5432:	4b84      	ldr	r3, [pc, #528]	; (5644 <sd_mmc_check+0x2b8>)
    5434:	6898      	ldr	r0, [r3, #8]
    5436:	4b86      	ldr	r3, [pc, #536]	; (5650 <sd_mmc_check+0x2c4>)
    5438:	4798      	blx	r3
    543a:	2800      	cmp	r0, #0
    543c:	d0d2      	beq.n	53e4 <sd_mmc_check+0x58>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    543e:	4d81      	ldr	r5, [pc, #516]	; (5644 <sd_mmc_check+0x2b8>)
    5440:	682e      	ldr	r6, [r5, #0]
    5442:	68a8      	ldr	r0, [r5, #8]
    5444:	4b83      	ldr	r3, [pc, #524]	; (5654 <sd_mmc_check+0x2c8>)
    5446:	4798      	blx	r3
    5448:	0c00      	lsrs	r0, r0, #16
    544a:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    544c:	682b      	ldr	r3, [r5, #0]
    544e:	7ada      	ldrb	r2, [r3, #11]
    5450:	f012 0f01 	tst.w	r2, #1
    5454:	d03e      	beq.n	54d4 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    5456:	891a      	ldrh	r2, [r3, #8]
    5458:	0412      	lsls	r2, r2, #16
    545a:	f641 3109 	movw	r1, #6921	; 0x1b09
    545e:	68a8      	ldr	r0, [r5, #8]
    5460:	4b7b      	ldr	r3, [pc, #492]	; (5650 <sd_mmc_check+0x2c4>)
    5462:	4798      	blx	r3
    5464:	2800      	cmp	r0, #0
    5466:	d0bd      	beq.n	53e4 <sd_mmc_check+0x58>
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    5468:	6829      	ldr	r1, [r5, #0]
    546a:	310e      	adds	r1, #14
    546c:	68a8      	ldr	r0, [r5, #8]
    546e:	4b7a      	ldr	r3, [pc, #488]	; (5658 <sd_mmc_check+0x2cc>)
    5470:	4798      	blx	r3
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    5472:	682a      	ldr	r2, [r5, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    5474:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    5476:	4b79      	ldr	r3, [pc, #484]	; (565c <sd_mmc_check+0x2d0>)
    5478:	f001 0007 	and.w	r0, r1, #7
	sd_mmc_card->clock = unit * mul * 1000;
    547c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    5480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5484:	fb00 f005 	mul.w	r0, r0, r5
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    5488:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    548c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    5490:	69db      	ldr	r3, [r3, #28]
    5492:	fb03 f300 	mul.w	r3, r3, r0
    5496:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    5498:	7b93      	ldrb	r3, [r2, #14]
    549a:	099b      	lsrs	r3, r3, #6
    549c:	f040 80e2 	bne.w	5664 <sd_mmc_check+0x2d8>
    54a0:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    54a2:	7d50      	ldrb	r0, [r2, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    54a4:	7d13      	ldrb	r3, [r2, #20]
    54a6:	029b      	lsls	r3, r3, #10
    54a8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    54ac:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    54b0:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    54b2:	7dd1      	ldrb	r1, [r2, #23]
    54b4:	0049      	lsls	r1, r1, #1
    54b6:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    54ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    54be:	3301      	adds	r3, #1
    54c0:	f001 0107 	and.w	r1, r1, #7
    54c4:	3102      	adds	r1, #2
		uint32_t blocknr
    54c6:	408b      	lsls	r3, r1
    54c8:	7cd1      	ldrb	r1, [r2, #19]
    54ca:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    54ce:	408b      	lsls	r3, r1
    54d0:	0a9b      	lsrs	r3, r3, #10
    54d2:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    54d4:	4b5b      	ldr	r3, [pc, #364]	; (5644 <sd_mmc_check+0x2b8>)
    54d6:	681a      	ldr	r2, [r3, #0]
    54d8:	8912      	ldrh	r2, [r2, #8]
    54da:	0412      	lsls	r2, r2, #16
    54dc:	f243 1107 	movw	r1, #12551	; 0x3107
    54e0:	6898      	ldr	r0, [r3, #8]
    54e2:	4b5b      	ldr	r3, [pc, #364]	; (5650 <sd_mmc_check+0x2c4>)
    54e4:	4798      	blx	r3
    54e6:	2800      	cmp	r0, #0
    54e8:	f43f af7c 	beq.w	53e4 <sd_mmc_check+0x58>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    54ec:	4b55      	ldr	r3, [pc, #340]	; (5644 <sd_mmc_check+0x2b8>)
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	7ada      	ldrb	r2, [r3, #11]
    54f2:	f012 0f01 	tst.w	r2, #1
    54f6:	f040 80c2 	bne.w	567e <sd_mmc_check+0x2f2>
	if (IS_SDIO()) {
    54fa:	4b52      	ldr	r3, [pc, #328]	; (5644 <sd_mmc_check+0x2b8>)
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	7adb      	ldrb	r3, [r3, #11]
    5500:	f013 0f04 	tst.w	r3, #4
    5504:	f000 8152 	beq.w	57ac <sd_mmc_check+0x420>
    5508:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    550a:	2700      	movs	r7, #0
    550c:	4e4f      	ldr	r6, [pc, #316]	; (564c <sd_mmc_check+0x2c0>)
    550e:	f1a5 0309 	sub.w	r3, r5, #9
    5512:	aa03      	add	r2, sp, #12
    5514:	4413      	add	r3, r2
    5516:	9300      	str	r3, [sp, #0]
    5518:	463b      	mov	r3, r7
    551a:	462a      	mov	r2, r5
    551c:	4639      	mov	r1, r7
    551e:	4638      	mov	r0, r7
    5520:	47b0      	blx	r6
		addr_old++;
    5522:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    5524:	2d0d      	cmp	r5, #13
    5526:	d1f2      	bne.n	550e <sd_mmc_check+0x182>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    5528:	f89d 300d 	ldrb.w	r3, [sp, #13]
    552c:	f89d 900c 	ldrb.w	r9, [sp, #12]
    5530:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    5534:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5538:	eb09 4903 	add.w	r9, r9, r3, lsl #16
    553c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5540:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
    5544:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    5546:	f04f 0800 	mov.w	r8, #0
    554a:	4f40      	ldr	r7, [pc, #256]	; (564c <sd_mmc_check+0x2c0>)
    554c:	e0ed      	b.n	572a <sd_mmc_check+0x39e>
	resp = driver_get_response(sd_mmc_hal);
    554e:	68b0      	ldr	r0, [r6, #8]
    5550:	4b40      	ldr	r3, [pc, #256]	; (5654 <sd_mmc_check+0x2c8>)
    5552:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    5554:	f1b0 3fff 	cmp.w	r0, #4294967295
    5558:	f000 8227 	beq.w	59aa <sd_mmc_check+0x61e>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    555c:	f3c0 000b 	ubfx	r0, r0, #0, #12
    5560:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    5564:	f47f af3e 	bne.w	53e4 <sd_mmc_check+0x58>
    5568:	e74f      	b.n	540a <sd_mmc_check+0x7e>
	resp = driver_get_response(sd_mmc_hal);
    556a:	4b36      	ldr	r3, [pc, #216]	; (5644 <sd_mmc_check+0x2b8>)
    556c:	6898      	ldr	r0, [r3, #8]
    556e:	4b39      	ldr	r3, [pc, #228]	; (5654 <sd_mmc_check+0x2c8>)
    5570:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    5572:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    5576:	f43f af52 	beq.w	541e <sd_mmc_check+0x92>
    557a:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    557e:	4e31      	ldr	r6, [pc, #196]	; (5644 <sd_mmc_check+0x2b8>)
    5580:	4f33      	ldr	r7, [pc, #204]	; (5650 <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    5582:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 5654 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    5586:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    558a:	f244 5105 	movw	r1, #17669	; 0x4505
    558e:	68b0      	ldr	r0, [r6, #8]
    5590:	47b8      	blx	r7
    5592:	2800      	cmp	r0, #0
    5594:	f43f af26 	beq.w	53e4 <sd_mmc_check+0x58>
		resp = driver_get_response(sd_mmc_hal);
    5598:	68b0      	ldr	r0, [r6, #8]
    559a:	47c8      	blx	r9
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    559c:	2800      	cmp	r0, #0
    559e:	db02      	blt.n	55a6 <sd_mmc_check+0x21a>
		if (cmd5_retry-- == 0) {
    55a0:	3d01      	subs	r5, #1
    55a2:	d1f0      	bne.n	5586 <sd_mmc_check+0x1fa>
    55a4:	e71e      	b.n	53e4 <sd_mmc_check+0x58>
	if ((resp & OCR_SDIO_MP) > 0) {
    55a6:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    55aa:	d104      	bne.n	55b6 <sd_mmc_check+0x22a>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    55ac:	4b25      	ldr	r3, [pc, #148]	; (5644 <sd_mmc_check+0x2b8>)
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	2204      	movs	r2, #4
    55b2:	72da      	strb	r2, [r3, #11]
    55b4:	e73a      	b.n	542c <sd_mmc_check+0xa0>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    55b6:	4b23      	ldr	r3, [pc, #140]	; (5644 <sd_mmc_check+0x2b8>)
    55b8:	681b      	ldr	r3, [r3, #0]
    55ba:	2205      	movs	r2, #5
    55bc:	72da      	strb	r2, [r3, #11]
    55be:	f1b8 0f00 	cmp.w	r8, #0
    55c2:	4b27      	ldr	r3, [pc, #156]	; (5660 <sd_mmc_check+0x2d4>)
    55c4:	bf14      	ite	ne
    55c6:	4698      	movne	r8, r3
    55c8:	f44f 18fc 	moveq.w	r8, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
    55cc:	f640 0635 	movw	r6, #2101	; 0x835
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    55d0:	4d1c      	ldr	r5, [pc, #112]	; (5644 <sd_mmc_check+0x2b8>)
    55d2:	4f1f      	ldr	r7, [pc, #124]	; (5650 <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
    55d4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 5654 <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    55d8:	2200      	movs	r2, #0
    55da:	f241 1137 	movw	r1, #4407	; 0x1137
    55de:	68a8      	ldr	r0, [r5, #8]
    55e0:	47b8      	blx	r7
    55e2:	b158      	cbz	r0, 55fc <sd_mmc_check+0x270>
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    55e4:	4642      	mov	r2, r8
    55e6:	f244 5129 	movw	r1, #17705	; 0x4529
    55ea:	68a8      	ldr	r0, [r5, #8]
    55ec:	47b8      	blx	r7
    55ee:	b128      	cbz	r0, 55fc <sd_mmc_check+0x270>
		resp = driver_get_response(sd_mmc_hal);
    55f0:	68a8      	ldr	r0, [r5, #8]
    55f2:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
    55f4:	2800      	cmp	r0, #0
    55f6:	db06      	blt.n	5606 <sd_mmc_check+0x27a>
		if (retry-- == 0) {
    55f8:	3e01      	subs	r6, #1
    55fa:	d1ed      	bne.n	55d8 <sd_mmc_check+0x24c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    55fc:	4b11      	ldr	r3, [pc, #68]	; (5644 <sd_mmc_check+0x2b8>)
    55fe:	681b      	ldr	r3, [r3, #0]
    5600:	2200      	movs	r2, #0
    5602:	72da      	strb	r2, [r3, #11]
    5604:	e6ee      	b.n	53e4 <sd_mmc_check+0x58>
			if ((resp & OCR_CCS) != 0) {
    5606:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    560a:	d005      	beq.n	5618 <sd_mmc_check+0x28c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    560c:	4b0d      	ldr	r3, [pc, #52]	; (5644 <sd_mmc_check+0x2b8>)
    560e:	681a      	ldr	r2, [r3, #0]
    5610:	7ad3      	ldrb	r3, [r2, #11]
    5612:	f043 0308 	orr.w	r3, r3, #8
    5616:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5618:	4b0a      	ldr	r3, [pc, #40]	; (5644 <sd_mmc_check+0x2b8>)
    561a:	681b      	ldr	r3, [r3, #0]
    561c:	7adb      	ldrb	r3, [r3, #11]
    561e:	f013 0f01 	tst.w	r3, #1
    5622:	f43f af03 	beq.w	542c <sd_mmc_check+0xa0>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    5626:	2200      	movs	r2, #0
    5628:	f645 3102 	movw	r1, #23298	; 0x5b02
    562c:	4b05      	ldr	r3, [pc, #20]	; (5644 <sd_mmc_check+0x2b8>)
    562e:	6898      	ldr	r0, [r3, #8]
    5630:	4b07      	ldr	r3, [pc, #28]	; (5650 <sd_mmc_check+0x2c4>)
    5632:	4798      	blx	r3
    5634:	2800      	cmp	r0, #0
    5636:	f47f aef9 	bne.w	542c <sd_mmc_check+0xa0>
    563a:	e6d3      	b.n	53e4 <sd_mmc_check+0x58>
    563c:	000051d5 	.word	0x000051d5
    5640:	00005351 	.word	0x00005351
    5644:	20004120 	.word	0x20004120
    5648:	00002755 	.word	0x00002755
    564c:	000052e9 	.word	0x000052e9
    5650:	0000277d 	.word	0x0000277d
    5654:	000027ad 	.word	0x000027ad
    5658:	000027d5 	.word	0x000027d5
    565c:	0000bd18 	.word	0x0000bd18
    5660:	401f8000 	.word	0x401f8000
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    5664:	7dd1      	ldrb	r1, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    5666:	7d90      	ldrb	r0, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    5668:	7d53      	ldrb	r3, [r2, #21]
    566a:	041b      	lsls	r3, r3, #16
    566c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    5670:	430b      	orrs	r3, r1
	value &= ((uint32_t)1 << size) - 1;
    5672:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    5676:	3301      	adds	r3, #1
    5678:	025b      	lsls	r3, r3, #9
    567a:	6053      	str	r3, [r2, #4]
    567c:	e72a      	b.n	54d4 <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    567e:	891a      	ldrh	r2, [r3, #8]
    5680:	0412      	lsls	r2, r2, #16
    5682:	f241 1137 	movw	r1, #4407	; 0x1137
    5686:	4b9a      	ldr	r3, [pc, #616]	; (58f0 <sd_mmc_check+0x564>)
    5688:	6898      	ldr	r0, [r3, #8]
    568a:	4b9a      	ldr	r3, [pc, #616]	; (58f4 <sd_mmc_check+0x568>)
    568c:	4798      	blx	r3
    568e:	2800      	cmp	r0, #0
    5690:	f43f aea8 	beq.w	53e4 <sd_mmc_check+0x58>
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    5694:	2301      	movs	r3, #1
    5696:	9301      	str	r3, [sp, #4]
    5698:	9300      	str	r3, [sp, #0]
    569a:	2308      	movs	r3, #8
    569c:	2200      	movs	r2, #0
    569e:	4996      	ldr	r1, [pc, #600]	; (58f8 <sd_mmc_check+0x56c>)
    56a0:	4893      	ldr	r0, [pc, #588]	; (58f0 <sd_mmc_check+0x564>)
    56a2:	6880      	ldr	r0, [r0, #8]
    56a4:	4d95      	ldr	r5, [pc, #596]	; (58fc <sd_mmc_check+0x570>)
    56a6:	47a8      	blx	r5
    56a8:	2800      	cmp	r0, #0
    56aa:	f43f ae9b 	beq.w	53e4 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    56ae:	2201      	movs	r2, #1
    56b0:	a904      	add	r1, sp, #16
    56b2:	4b8f      	ldr	r3, [pc, #572]	; (58f0 <sd_mmc_check+0x564>)
    56b4:	6898      	ldr	r0, [r3, #8]
    56b6:	4b92      	ldr	r3, [pc, #584]	; (5900 <sd_mmc_check+0x574>)
    56b8:	4798      	blx	r3
    56ba:	2800      	cmp	r0, #0
    56bc:	f43f ae92 	beq.w	53e4 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    56c0:	4b8b      	ldr	r3, [pc, #556]	; (58f0 <sd_mmc_check+0x564>)
    56c2:	6898      	ldr	r0, [r3, #8]
    56c4:	4b8f      	ldr	r3, [pc, #572]	; (5904 <sd_mmc_check+0x578>)
    56c6:	4798      	blx	r3
    56c8:	2800      	cmp	r0, #0
    56ca:	f43f ae8b 	beq.w	53e4 <sd_mmc_check+0x58>
	switch (SD_SCR_SD_SPEC(scr)) {
    56ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
    56d2:	f003 030f 	and.w	r3, r3, #15
    56d6:	2b01      	cmp	r3, #1
    56d8:	d00c      	beq.n	56f4 <sd_mmc_check+0x368>
    56da:	b133      	cbz	r3, 56ea <sd_mmc_check+0x35e>
    56dc:	2b02      	cmp	r3, #2
    56de:	d00e      	beq.n	56fe <sd_mmc_check+0x372>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    56e0:	4b83      	ldr	r3, [pc, #524]	; (58f0 <sd_mmc_check+0x564>)
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	2210      	movs	r2, #16
    56e6:	731a      	strb	r2, [r3, #12]
    56e8:	e707      	b.n	54fa <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    56ea:	4b81      	ldr	r3, [pc, #516]	; (58f0 <sd_mmc_check+0x564>)
    56ec:	681b      	ldr	r3, [r3, #0]
    56ee:	2210      	movs	r2, #16
    56f0:	731a      	strb	r2, [r3, #12]
    56f2:	e702      	b.n	54fa <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    56f4:	4b7e      	ldr	r3, [pc, #504]	; (58f0 <sd_mmc_check+0x564>)
    56f6:	681b      	ldr	r3, [r3, #0]
    56f8:	221a      	movs	r2, #26
    56fa:	731a      	strb	r2, [r3, #12]
    56fc:	e6fd      	b.n	54fa <sd_mmc_check+0x16e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    56fe:	f89d 3012 	ldrb.w	r3, [sp, #18]
    5702:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
    5704:	4b7a      	ldr	r3, [pc, #488]	; (58f0 <sd_mmc_check+0x564>)
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	bf14      	ite	ne
    570a:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
    570c:	2220      	moveq	r2, #32
    570e:	731a      	strb	r2, [r3, #12]
    5710:	e6f3      	b.n	54fa <sd_mmc_check+0x16e>
		if (buf[1] == 0) {
    5712:	f89d 3011 	ldrb.w	r3, [sp, #17]
    5716:	2b00      	cmp	r3, #0
    5718:	f43f ae64 	beq.w	53e4 <sd_mmc_check+0x58>
		addr_new += buf[1] - 1;
    571c:	3302      	adds	r3, #2
    571e:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
    5720:	f509 7380 	add.w	r3, r9, #256	; 0x100
    5724:	429e      	cmp	r6, r3
    5726:	f63f ae5d 	bhi.w	53e4 <sd_mmc_check+0x58>
	addr_new = addr_old;
    572a:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    572c:	ab04      	add	r3, sp, #16
    572e:	442b      	add	r3, r5
    5730:	9300      	str	r3, [sp, #0]
    5732:	4643      	mov	r3, r8
    5734:	19aa      	adds	r2, r5, r6
    5736:	4641      	mov	r1, r8
    5738:	4640      	mov	r0, r8
    573a:	47b8      	blx	r7
    573c:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    573e:	2d03      	cmp	r5, #3
    5740:	d1f4      	bne.n	572c <sd_mmc_check+0x3a0>
		if (buf[0] == SDIO_CISTPL_END) {
    5742:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5746:	2bff      	cmp	r3, #255	; 0xff
    5748:	f43f ae4c 	beq.w	53e4 <sd_mmc_check+0x58>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    574c:	2b22      	cmp	r3, #34	; 0x22
    574e:	d1e0      	bne.n	5712 <sd_mmc_check+0x386>
    5750:	f89d 3012 	ldrb.w	r3, [sp, #18]
    5754:	2b00      	cmp	r3, #0
    5756:	d1dc      	bne.n	5712 <sd_mmc_check+0x386>
    5758:	f106 0906 	add.w	r9, r6, #6
	addr_new -= 3;
    575c:	4635      	mov	r5, r6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    575e:	f04f 0800 	mov.w	r8, #0
    5762:	4f69      	ldr	r7, [pc, #420]	; (5908 <sd_mmc_check+0x57c>)
    5764:	1bab      	subs	r3, r5, r6
    5766:	aa04      	add	r2, sp, #16
    5768:	4413      	add	r3, r2
    576a:	9300      	str	r3, [sp, #0]
    576c:	4643      	mov	r3, r8
    576e:	462a      	mov	r2, r5
    5770:	4641      	mov	r1, r8
    5772:	4640      	mov	r0, r8
    5774:	47b8      	blx	r7
		addr_new++;
    5776:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    5778:	45a9      	cmp	r9, r5
    577a:	d1f3      	bne.n	5764 <sd_mmc_check+0x3d8>
	tplfe_max_tran_speed = buf[5];
    577c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    5780:	2b32      	cmp	r3, #50	; 0x32
    5782:	bf28      	it	cs
    5784:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
    5786:	4a5a      	ldr	r2, [pc, #360]	; (58f0 <sd_mmc_check+0x564>)
    5788:	6810      	ldr	r0, [r2, #0]
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    578a:	4a60      	ldr	r2, [pc, #384]	; (590c <sd_mmc_check+0x580>)
    578c:	f003 0107 	and.w	r1, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
    5790:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
    5794:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5798:	fb01 f105 	mul.w	r1, r1, r5
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    579c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    57a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
    57a4:	69db      	ldr	r3, [r3, #28]
    57a6:	fb03 f301 	mul.w	r3, r3, r1
    57aa:	6003      	str	r3, [r0, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    57ac:	4b50      	ldr	r3, [pc, #320]	; (58f0 <sd_mmc_check+0x564>)
    57ae:	7919      	ldrb	r1, [r3, #4]
    57b0:	6898      	ldr	r0, [r3, #8]
    57b2:	4b57      	ldr	r3, [pc, #348]	; (5910 <sd_mmc_check+0x584>)
    57b4:	4798      	blx	r3
    57b6:	2803      	cmp	r0, #3
    57b8:	d926      	bls.n	5808 <sd_mmc_check+0x47c>
		if (IS_SDIO()) {
    57ba:	4b4d      	ldr	r3, [pc, #308]	; (58f0 <sd_mmc_check+0x564>)
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	7adb      	ldrb	r3, [r3, #11]
    57c0:	f013 0f04 	tst.w	r3, #4
    57c4:	d14e      	bne.n	5864 <sd_mmc_check+0x4d8>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    57c6:	4b4a      	ldr	r3, [pc, #296]	; (58f0 <sd_mmc_check+0x564>)
    57c8:	681b      	ldr	r3, [r3, #0]
    57ca:	7ada      	ldrb	r2, [r3, #11]
    57cc:	f012 0f01 	tst.w	r2, #1
    57d0:	d018      	beq.n	5804 <sd_mmc_check+0x478>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    57d2:	891a      	ldrh	r2, [r3, #8]
    57d4:	0412      	lsls	r2, r2, #16
    57d6:	f241 1137 	movw	r1, #4407	; 0x1137
    57da:	4b45      	ldr	r3, [pc, #276]	; (58f0 <sd_mmc_check+0x564>)
    57dc:	6898      	ldr	r0, [r3, #8]
    57de:	4b45      	ldr	r3, [pc, #276]	; (58f4 <sd_mmc_check+0x568>)
    57e0:	4798      	blx	r3
    57e2:	2800      	cmp	r0, #0
    57e4:	f43f adfe 	beq.w	53e4 <sd_mmc_check+0x58>
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    57e8:	2202      	movs	r2, #2
    57ea:	f241 1106 	movw	r1, #4358	; 0x1106
    57ee:	4b40      	ldr	r3, [pc, #256]	; (58f0 <sd_mmc_check+0x564>)
    57f0:	6898      	ldr	r0, [r3, #8]
    57f2:	4b40      	ldr	r3, [pc, #256]	; (58f4 <sd_mmc_check+0x568>)
    57f4:	4798      	blx	r3
    57f6:	2800      	cmp	r0, #0
    57f8:	f43f adf4 	beq.w	53e4 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    57fc:	4b3c      	ldr	r3, [pc, #240]	; (58f0 <sd_mmc_check+0x564>)
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	2204      	movs	r2, #4
    5802:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
    5804:	4b43      	ldr	r3, [pc, #268]	; (5914 <sd_mmc_check+0x588>)
    5806:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    5808:	4b39      	ldr	r3, [pc, #228]	; (58f0 <sd_mmc_check+0x564>)
    580a:	6898      	ldr	r0, [r3, #8]
    580c:	4b42      	ldr	r3, [pc, #264]	; (5918 <sd_mmc_check+0x58c>)
    580e:	4798      	blx	r3
    5810:	b180      	cbz	r0, 5834 <sd_mmc_check+0x4a8>
		if (IS_SDIO()) {
    5812:	4b37      	ldr	r3, [pc, #220]	; (58f0 <sd_mmc_check+0x564>)
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	7adb      	ldrb	r3, [r3, #11]
    5818:	f013 0f04 	tst.w	r3, #4
    581c:	d143      	bne.n	58a6 <sd_mmc_check+0x51a>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    581e:	4b34      	ldr	r3, [pc, #208]	; (58f0 <sd_mmc_check+0x564>)
    5820:	681b      	ldr	r3, [r3, #0]
    5822:	7ada      	ldrb	r2, [r3, #11]
    5824:	f012 0f01 	tst.w	r2, #1
    5828:	d002      	beq.n	5830 <sd_mmc_check+0x4a4>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    582a:	7b1b      	ldrb	r3, [r3, #12]
    582c:	2b10      	cmp	r3, #16
    582e:	d877      	bhi.n	5920 <sd_mmc_check+0x594>
		sd_mmc_configure_slot();
    5830:	4b38      	ldr	r3, [pc, #224]	; (5914 <sd_mmc_check+0x588>)
    5832:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    5834:	4b2e      	ldr	r3, [pc, #184]	; (58f0 <sd_mmc_check+0x564>)
    5836:	681b      	ldr	r3, [r3, #0]
    5838:	7adb      	ldrb	r3, [r3, #11]
    583a:	f013 0f01 	tst.w	r3, #1
    583e:	d00a      	beq.n	5856 <sd_mmc_check+0x4ca>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    5840:	f44f 7200 	mov.w	r2, #512	; 0x200
    5844:	f241 1110 	movw	r1, #4368	; 0x1110
    5848:	4b29      	ldr	r3, [pc, #164]	; (58f0 <sd_mmc_check+0x564>)
    584a:	6898      	ldr	r0, [r3, #8]
    584c:	4b29      	ldr	r3, [pc, #164]	; (58f4 <sd_mmc_check+0x568>)
    584e:	4798      	blx	r3
	if (sd_mmc_mci_card_init()) {
    5850:	2800      	cmp	r0, #0
    5852:	f43f adc7 	beq.w	53e4 <sd_mmc_check+0x58>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    5856:	4b26      	ldr	r3, [pc, #152]	; (58f0 <sd_mmc_check+0x564>)
    5858:	681b      	ldr	r3, [r3, #0]
    585a:	2200      	movs	r2, #0
    585c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    585e:	4b2f      	ldr	r3, [pc, #188]	; (591c <sd_mmc_check+0x590>)
    5860:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    5862:	e59d      	b.n	53a0 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    5864:	ab04      	add	r3, sp, #16
    5866:	9300      	str	r3, [sp, #0]
    5868:	2300      	movs	r3, #0
    586a:	2208      	movs	r2, #8
    586c:	4619      	mov	r1, r3
    586e:	4618      	mov	r0, r3
    5870:	4d25      	ldr	r5, [pc, #148]	; (5908 <sd_mmc_check+0x57c>)
    5872:	47a8      	blx	r5
    5874:	2800      	cmp	r0, #0
    5876:	f43f adb5 	beq.w	53e4 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    587a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    587e:	2b00      	cmp	r3, #0
    5880:	daa1      	bge.n	57c6 <sd_mmc_check+0x43a>
	u8_value = SDIO_BUSWIDTH_4B;
    5882:	ab14      	add	r3, sp, #80	; 0x50
    5884:	2202      	movs	r2, #2
    5886:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    588a:	9300      	str	r3, [sp, #0]
    588c:	2301      	movs	r3, #1
    588e:	2207      	movs	r2, #7
    5890:	2100      	movs	r1, #0
    5892:	4618      	mov	r0, r3
    5894:	47a8      	blx	r5
    5896:	2800      	cmp	r0, #0
    5898:	f43f ada4 	beq.w	53e4 <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
    589c:	4b14      	ldr	r3, [pc, #80]	; (58f0 <sd_mmc_check+0x564>)
    589e:	681b      	ldr	r3, [r3, #0]
    58a0:	2204      	movs	r2, #4
    58a2:	735a      	strb	r2, [r3, #13]
    58a4:	e78f      	b.n	57c6 <sd_mmc_check+0x43a>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    58a6:	ab04      	add	r3, sp, #16
    58a8:	9300      	str	r3, [sp, #0]
    58aa:	2300      	movs	r3, #0
    58ac:	2213      	movs	r2, #19
    58ae:	4619      	mov	r1, r3
    58b0:	4618      	mov	r0, r3
    58b2:	4d15      	ldr	r5, [pc, #84]	; (5908 <sd_mmc_check+0x57c>)
    58b4:	47a8      	blx	r5
    58b6:	2800      	cmp	r0, #0
    58b8:	f43f ad94 	beq.w	53e4 <sd_mmc_check+0x58>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    58bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    58c0:	f013 0f01 	tst.w	r3, #1
    58c4:	d0ab      	beq.n	581e <sd_mmc_check+0x492>
	u8_value = SDIO_EHS;
    58c6:	ab14      	add	r3, sp, #80	; 0x50
    58c8:	2202      	movs	r2, #2
    58ca:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    58ce:	9300      	str	r3, [sp, #0]
    58d0:	2301      	movs	r3, #1
    58d2:	2213      	movs	r2, #19
    58d4:	2100      	movs	r1, #0
    58d6:	4618      	mov	r0, r3
    58d8:	47a8      	blx	r5
    58da:	2800      	cmp	r0, #0
    58dc:	f43f ad82 	beq.w	53e4 <sd_mmc_check+0x58>
	sd_mmc_card->high_speed = 1;
    58e0:	4b03      	ldr	r3, [pc, #12]	; (58f0 <sd_mmc_check+0x564>)
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	2201      	movs	r2, #1
    58e6:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    58e8:	681a      	ldr	r2, [r3, #0]
    58ea:	0052      	lsls	r2, r2, #1
    58ec:	601a      	str	r2, [r3, #0]
    58ee:	e796      	b.n	581e <sd_mmc_check+0x492>
    58f0:	20004120 	.word	0x20004120
    58f4:	0000277d 	.word	0x0000277d
    58f8:	00081133 	.word	0x00081133
    58fc:	00002805 	.word	0x00002805
    5900:	00002849 	.word	0x00002849
    5904:	000028b1 	.word	0x000028b1
    5908:	000052e9 	.word	0x000052e9
    590c:	0000bd18 	.word	0x0000bd18
    5910:	00002701 	.word	0x00002701
    5914:	000051a9 	.word	0x000051a9
    5918:	0000272d 	.word	0x0000272d
    591c:	00005351 	.word	0x00005351
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    5920:	2540      	movs	r5, #64	; 0x40
    5922:	462a      	mov	r2, r5
    5924:	2100      	movs	r1, #0
    5926:	a804      	add	r0, sp, #16
    5928:	4b21      	ldr	r3, [pc, #132]	; (59b0 <sd_mmc_check+0x624>)
    592a:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    592c:	2301      	movs	r3, #1
    592e:	9301      	str	r3, [sp, #4]
    5930:	9300      	str	r3, [sp, #0]
    5932:	462b      	mov	r3, r5
    5934:	4a1f      	ldr	r2, [pc, #124]	; (59b4 <sd_mmc_check+0x628>)
    5936:	4920      	ldr	r1, [pc, #128]	; (59b8 <sd_mmc_check+0x62c>)
    5938:	4820      	ldr	r0, [pc, #128]	; (59bc <sd_mmc_check+0x630>)
    593a:	6880      	ldr	r0, [r0, #8]
    593c:	4d20      	ldr	r5, [pc, #128]	; (59c0 <sd_mmc_check+0x634>)
    593e:	47a8      	blx	r5
    5940:	2800      	cmp	r0, #0
    5942:	f43f ad4f 	beq.w	53e4 <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    5946:	2201      	movs	r2, #1
    5948:	a904      	add	r1, sp, #16
    594a:	4b1c      	ldr	r3, [pc, #112]	; (59bc <sd_mmc_check+0x630>)
    594c:	6898      	ldr	r0, [r3, #8]
    594e:	4b1d      	ldr	r3, [pc, #116]	; (59c4 <sd_mmc_check+0x638>)
    5950:	4798      	blx	r3
    5952:	2800      	cmp	r0, #0
    5954:	f43f ad46 	beq.w	53e4 <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    5958:	4b18      	ldr	r3, [pc, #96]	; (59bc <sd_mmc_check+0x630>)
    595a:	6898      	ldr	r0, [r3, #8]
    595c:	4b1a      	ldr	r3, [pc, #104]	; (59c8 <sd_mmc_check+0x63c>)
    595e:	4798      	blx	r3
    5960:	2800      	cmp	r0, #0
    5962:	f43f ad3f 	beq.w	53e4 <sd_mmc_check+0x58>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    5966:	4b15      	ldr	r3, [pc, #84]	; (59bc <sd_mmc_check+0x630>)
    5968:	6898      	ldr	r0, [r3, #8]
    596a:	4b18      	ldr	r3, [pc, #96]	; (59cc <sd_mmc_check+0x640>)
    596c:	4798      	blx	r3
    596e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5972:	f47f ad37 	bne.w	53e4 <sd_mmc_check+0x58>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    5976:	f89d 3020 	ldrb.w	r3, [sp, #32]
    597a:	f003 030f 	and.w	r3, r3, #15
    597e:	2b0f      	cmp	r3, #15
    5980:	f43f af56 	beq.w	5830 <sd_mmc_check+0x4a4>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    5984:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    5988:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    598c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    5990:	f47f ad28 	bne.w	53e4 <sd_mmc_check+0x58>
	driver_send_clock(sd_mmc_hal);
    5994:	4d09      	ldr	r5, [pc, #36]	; (59bc <sd_mmc_check+0x630>)
    5996:	68a8      	ldr	r0, [r5, #8]
    5998:	4b0d      	ldr	r3, [pc, #52]	; (59d0 <sd_mmc_check+0x644>)
    599a:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    599c:	682b      	ldr	r3, [r5, #0]
    599e:	2201      	movs	r2, #1
    59a0:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    59a2:	681a      	ldr	r2, [r3, #0]
    59a4:	0052      	lsls	r2, r2, #1
    59a6:	601a      	str	r2, [r3, #0]
    59a8:	e742      	b.n	5830 <sd_mmc_check+0x4a4>
	*v2 = 0;
    59aa:	f04f 0800 	mov.w	r8, #0
    59ae:	e52c      	b.n	540a <sd_mmc_check+0x7e>
    59b0:	00008189 	.word	0x00008189
    59b4:	80ffff01 	.word	0x80ffff01
    59b8:	00081106 	.word	0x00081106
    59bc:	20004120 	.word	0x20004120
    59c0:	00002805 	.word	0x00002805
    59c4:	00002849 	.word	0x00002849
    59c8:	000028b1 	.word	0x000028b1
    59cc:	000027ad 	.word	0x000027ad
    59d0:	00002755 	.word	0x00002755

000059d4 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    59d4:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    59d6:	4b05      	ldr	r3, [pc, #20]	; (59ec <sd_mmc_get_type+0x18>)
    59d8:	4798      	blx	r3
    59da:	b108      	cbz	r0, 59e0 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
    59dc:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    59de:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    59e0:	4b03      	ldr	r3, [pc, #12]	; (59f0 <sd_mmc_get_type+0x1c>)
    59e2:	4798      	blx	r3
	return sd_mmc_card->type;
    59e4:	4b03      	ldr	r3, [pc, #12]	; (59f4 <sd_mmc_get_type+0x20>)
    59e6:	681b      	ldr	r3, [r3, #0]
    59e8:	7ad8      	ldrb	r0, [r3, #11]
    59ea:	bd08      	pop	{r3, pc}
    59ec:	000051d5 	.word	0x000051d5
    59f0:	00005351 	.word	0x00005351
    59f4:	20004120 	.word	0x20004120

000059f8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    59f8:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    59fa:	4b05      	ldr	r3, [pc, #20]	; (5a10 <sd_mmc_get_capacity+0x18>)
    59fc:	4798      	blx	r3
    59fe:	b108      	cbz	r0, 5a04 <sd_mmc_get_capacity+0xc>
		return 0;
    5a00:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    5a02:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    5a04:	4b03      	ldr	r3, [pc, #12]	; (5a14 <sd_mmc_get_capacity+0x1c>)
    5a06:	4798      	blx	r3
	return sd_mmc_card->capacity;
    5a08:	4b03      	ldr	r3, [pc, #12]	; (5a18 <sd_mmc_get_capacity+0x20>)
    5a0a:	681b      	ldr	r3, [r3, #0]
    5a0c:	6858      	ldr	r0, [r3, #4]
    5a0e:	bd08      	pop	{r3, pc}
    5a10:	000051d5 	.word	0x000051d5
    5a14:	00005351 	.word	0x00005351
    5a18:	20004120 	.word	0x20004120

00005a1c <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    5a1c:	4b19      	ldr	r3, [pc, #100]	; (5a84 <sd_mmc_is_write_protected+0x68>)
    5a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5a20:	2b00      	cmp	r3, #0
    5a22:	d02b      	beq.n	5a7c <sd_mmc_is_write_protected+0x60>
{
    5a24:	b570      	push	{r4, r5, r6, lr}
    5a26:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    5a28:	0085      	lsls	r5, r0, #2
    5a2a:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    5a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5a32:	d025      	beq.n	5a80 <sd_mmc_is_write_protected+0x64>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    5a34:	b2de      	uxtb	r6, r3
	CRITICAL_SECTION_ENTER();
    5a36:	a801      	add	r0, sp, #4
    5a38:	4b13      	ldr	r3, [pc, #76]	; (5a88 <sd_mmc_is_write_protected+0x6c>)
    5a3a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5a3c:	0973      	lsrs	r3, r6, #5
    5a3e:	4913      	ldr	r1, [pc, #76]	; (5a8c <sd_mmc_is_write_protected+0x70>)
    5a40:	01db      	lsls	r3, r3, #7
    5a42:	18ca      	adds	r2, r1, r3
    5a44:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5a46:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5a48:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5a4a:	405c      	eors	r4, r3
    5a4c:	400c      	ands	r4, r1
    5a4e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    5a50:	a801      	add	r0, sp, #4
    5a52:	4b0f      	ldr	r3, [pc, #60]	; (5a90 <sd_mmc_is_write_protected+0x74>)
    5a54:	4798      	blx	r3
    5a56:	f006 031f 	and.w	r3, r6, #31
    5a5a:	2201      	movs	r2, #1
    5a5c:	fa02 f303 	lsl.w	r3, r2, r3
    5a60:	4223      	tst	r3, r4
    5a62:	bf14      	ite	ne
    5a64:	4610      	movne	r0, r2
    5a66:	2000      	moveq	r0, #0
    5a68:	4b06      	ldr	r3, [pc, #24]	; (5a84 <sd_mmc_is_write_protected+0x68>)
    5a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5a6c:	441d      	add	r5, r3
    5a6e:	886b      	ldrh	r3, [r5, #2]
    5a70:	4298      	cmp	r0, r3
    5a72:	bf14      	ite	ne
    5a74:	2000      	movne	r0, #0
    5a76:	2001      	moveq	r0, #1
		return true;
	}
	return false;
}
    5a78:	b002      	add	sp, #8
    5a7a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5a7c:	2000      	movs	r0, #0
    5a7e:	4770      	bx	lr
    5a80:	2000      	movs	r0, #0
    5a82:	e7f9      	b.n	5a78 <sd_mmc_is_write_protected+0x5c>
    5a84:	20004120 	.word	0x20004120
    5a88:	00002451 	.word	0x00002451
    5a8c:	41008000 	.word	0x41008000
    5a90:	0000245f 	.word	0x0000245f

00005a94 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    5a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a98:	b082      	sub	sp, #8
    5a9a:	468a      	mov	sl, r1
    5a9c:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    5a9e:	4b29      	ldr	r3, [pc, #164]	; (5b44 <sd_mmc_init_read_blocks+0xb0>)
    5aa0:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    5aa2:	4680      	mov	r8, r0
    5aa4:	b118      	cbz	r0, 5aae <sd_mmc_init_read_blocks+0x1a>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    5aa6:	4640      	mov	r0, r8
    5aa8:	b002      	add	sp, #8
    5aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5aae:	4d26      	ldr	r5, [pc, #152]	; (5b48 <sd_mmc_init_read_blocks+0xb4>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    5ab0:	4c26      	ldr	r4, [pc, #152]	; (5b4c <sd_mmc_init_read_blocks+0xb8>)
    5ab2:	4e27      	ldr	r6, [pc, #156]	; (5b50 <sd_mmc_init_read_blocks+0xbc>)
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    5ab4:	4f27      	ldr	r7, [pc, #156]	; (5b54 <sd_mmc_init_read_blocks+0xc0>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    5ab6:	6823      	ldr	r3, [r4, #0]
    5ab8:	891a      	ldrh	r2, [r3, #8]
    5aba:	0412      	lsls	r2, r2, #16
    5abc:	f241 110d 	movw	r1, #4365	; 0x110d
    5ac0:	68a0      	ldr	r0, [r4, #8]
    5ac2:	47b0      	blx	r6
    5ac4:	b130      	cbz	r0, 5ad4 <sd_mmc_init_read_blocks+0x40>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    5ac6:	68a0      	ldr	r0, [r4, #8]
    5ac8:	47b8      	blx	r7
    5aca:	f410 7f80 	tst.w	r0, #256	; 0x100
    5ace:	d118      	bne.n	5b02 <sd_mmc_init_read_blocks+0x6e>
		if (nec_timeout-- == 0) {
    5ad0:	3d01      	subs	r5, #1
    5ad2:	d1f0      	bne.n	5ab6 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
    5ad4:	4b20      	ldr	r3, [pc, #128]	; (5b58 <sd_mmc_init_read_blocks+0xc4>)
    5ad6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5ad8:	f04f 0805 	mov.w	r8, #5
    5adc:	e7e3      	b.n	5aa6 <sd_mmc_init_read_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    5ade:	4b1b      	ldr	r3, [pc, #108]	; (5b4c <sd_mmc_init_read_blocks+0xb8>)
    5ae0:	6898      	ldr	r0, [r3, #8]
    5ae2:	4b1c      	ldr	r3, [pc, #112]	; (5b54 <sd_mmc_init_read_blocks+0xc0>)
    5ae4:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    5ae6:	4b1d      	ldr	r3, [pc, #116]	; (5b5c <sd_mmc_init_read_blocks+0xc8>)
    5ae8:	4003      	ands	r3, r0
    5aea:	b92b      	cbnz	r3, 5af8 <sd_mmc_init_read_blocks+0x64>
	sd_mmc_nb_block_remaining  = nb_block;
    5aec:	4b17      	ldr	r3, [pc, #92]	; (5b4c <sd_mmc_init_read_blocks+0xb8>)
    5aee:	f8a3 9030 	strh.w	r9, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    5af2:	f8a3 9038 	strh.w	r9, [r3, #56]	; 0x38
	return SD_MMC_OK;
    5af6:	e7d6      	b.n	5aa6 <sd_mmc_init_read_blocks+0x12>
		sd_mmc_deselect_slot();
    5af8:	4b17      	ldr	r3, [pc, #92]	; (5b58 <sd_mmc_init_read_blocks+0xc4>)
    5afa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5afc:	f04f 0805 	mov.w	r8, #5
    5b00:	e7d1      	b.n	5aa6 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    5b02:	4b17      	ldr	r3, [pc, #92]	; (5b60 <sd_mmc_init_read_blocks+0xcc>)
    5b04:	4917      	ldr	r1, [pc, #92]	; (5b64 <sd_mmc_init_read_blocks+0xd0>)
    5b06:	f1b9 0f01 	cmp.w	r9, #1
    5b0a:	bf98      	it	ls
    5b0c:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    5b0e:	4b0f      	ldr	r3, [pc, #60]	; (5b4c <sd_mmc_init_read_blocks+0xb8>)
    5b10:	681b      	ldr	r3, [r3, #0]
    5b12:	7adb      	ldrb	r3, [r3, #11]
    5b14:	f013 0f08 	tst.w	r3, #8
    5b18:	d101      	bne.n	5b1e <sd_mmc_init_read_blocks+0x8a>
		arg = (start * SD_MMC_BLOCK_SIZE);
    5b1a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    5b1e:	4b0b      	ldr	r3, [pc, #44]	; (5b4c <sd_mmc_init_read_blocks+0xb8>)
    5b20:	6898      	ldr	r0, [r3, #8]
    5b22:	2301      	movs	r3, #1
    5b24:	9301      	str	r3, [sp, #4]
    5b26:	f8cd 9000 	str.w	r9, [sp]
    5b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
    5b2e:	4652      	mov	r2, sl
    5b30:	4c0d      	ldr	r4, [pc, #52]	; (5b68 <sd_mmc_init_read_blocks+0xd4>)
    5b32:	47a0      	blx	r4
    5b34:	2800      	cmp	r0, #0
    5b36:	d1d2      	bne.n	5ade <sd_mmc_init_read_blocks+0x4a>
		sd_mmc_deselect_slot();
    5b38:	4b07      	ldr	r3, [pc, #28]	; (5b58 <sd_mmc_init_read_blocks+0xc4>)
    5b3a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5b3c:	f04f 0805 	mov.w	r8, #5
    5b40:	e7b1      	b.n	5aa6 <sd_mmc_init_read_blocks+0x12>
    5b42:	bf00      	nop
    5b44:	000051d5 	.word	0x000051d5
    5b48:	00030d41 	.word	0x00030d41
    5b4c:	20004120 	.word	0x20004120
    5b50:	0000277d 	.word	0x0000277d
    5b54:	000027ad 	.word	0x000027ad
    5b58:	00005351 	.word	0x00005351
    5b5c:	e4580000 	.word	0xe4580000
    5b60:	00081111 	.word	0x00081111
    5b64:	00101112 	.word	0x00101112
    5b68:	00002805 	.word	0x00002805

00005b6c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    5b6c:	b570      	push	{r4, r5, r6, lr}
    5b6e:	4606      	mov	r6, r0
    5b70:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    5b72:	4d0d      	ldr	r5, [pc, #52]	; (5ba8 <sd_mmc_start_read_blocks+0x3c>)
    5b74:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    5b76:	f240 52a7 	movw	r2, #1447	; 0x5a7
    5b7a:	490c      	ldr	r1, [pc, #48]	; (5bac <sd_mmc_start_read_blocks+0x40>)
    5b7c:	42a0      	cmp	r0, r4
    5b7e:	bf34      	ite	cc
    5b80:	2000      	movcc	r0, #0
    5b82:	2001      	movcs	r0, #1
    5b84:	4b0a      	ldr	r3, [pc, #40]	; (5bb0 <sd_mmc_start_read_blocks+0x44>)
    5b86:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    5b88:	4622      	mov	r2, r4
    5b8a:	4631      	mov	r1, r6
    5b8c:	68a8      	ldr	r0, [r5, #8]
    5b8e:	4b09      	ldr	r3, [pc, #36]	; (5bb4 <sd_mmc_start_read_blocks+0x48>)
    5b90:	4798      	blx	r3
    5b92:	b918      	cbnz	r0, 5b9c <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    5b94:	2200      	movs	r2, #0
    5b96:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    5b98:	2005      	movs	r0, #5
    5b9a:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    5b9c:	4a02      	ldr	r2, [pc, #8]	; (5ba8 <sd_mmc_start_read_blocks+0x3c>)
    5b9e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    5ba0:	1b1c      	subs	r4, r3, r4
    5ba2:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    5ba4:	2000      	movs	r0, #0
}
    5ba6:	bd70      	pop	{r4, r5, r6, pc}
    5ba8:	20004120 	.word	0x20004120
    5bac:	0000bdb4 	.word	0x0000bdb4
    5bb0:	00002a99 	.word	0x00002a99
    5bb4:	00002849 	.word	0x00002849

00005bb8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    5bb8:	b510      	push	{r4, lr}
    5bba:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    5bbc:	4b16      	ldr	r3, [pc, #88]	; (5c18 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5bbe:	6898      	ldr	r0, [r3, #8]
    5bc0:	4b16      	ldr	r3, [pc, #88]	; (5c1c <sd_mmc_wait_end_of_read_blocks+0x64>)
    5bc2:	4798      	blx	r3
    5bc4:	b908      	cbnz	r0, 5bca <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    5bc6:	2005      	movs	r0, #5
    5bc8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    5bca:	b194      	cbz	r4, 5bf2 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    5bcc:	2200      	movs	r2, #0
    5bce:	4b12      	ldr	r3, [pc, #72]	; (5c18 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5bd0:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    5bd2:	4b11      	ldr	r3, [pc, #68]	; (5c18 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5bd4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5bd6:	2b01      	cmp	r3, #1
    5bd8:	d011      	beq.n	5bfe <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    5bda:	2200      	movs	r2, #0
    5bdc:	f243 110c 	movw	r1, #12556	; 0x310c
    5be0:	4b0d      	ldr	r3, [pc, #52]	; (5c18 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5be2:	6898      	ldr	r0, [r3, #8]
    5be4:	4b0e      	ldr	r3, [pc, #56]	; (5c20 <sd_mmc_wait_end_of_read_blocks+0x68>)
    5be6:	4798      	blx	r3
    5be8:	b168      	cbz	r0, 5c06 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    5bea:	4b0e      	ldr	r3, [pc, #56]	; (5c24 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    5bec:	4798      	blx	r3
	return SD_MMC_OK;
    5bee:	2000      	movs	r0, #0
    5bf0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    5bf2:	4b09      	ldr	r3, [pc, #36]	; (5c18 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5bf4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d0eb      	beq.n	5bd2 <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    5bfa:	2000      	movs	r0, #0
}
    5bfc:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    5bfe:	4b09      	ldr	r3, [pc, #36]	; (5c24 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    5c00:	4798      	blx	r3
		return SD_MMC_OK;
    5c02:	2000      	movs	r0, #0
    5c04:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    5c06:	2200      	movs	r2, #0
    5c08:	f243 110c 	movw	r1, #12556	; 0x310c
    5c0c:	4b02      	ldr	r3, [pc, #8]	; (5c18 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5c0e:	6898      	ldr	r0, [r3, #8]
    5c10:	4b03      	ldr	r3, [pc, #12]	; (5c20 <sd_mmc_wait_end_of_read_blocks+0x68>)
    5c12:	4798      	blx	r3
    5c14:	e7e9      	b.n	5bea <sd_mmc_wait_end_of_read_blocks+0x32>
    5c16:	bf00      	nop
    5c18:	20004120 	.word	0x20004120
    5c1c:	000028b1 	.word	0x000028b1
    5c20:	0000277d 	.word	0x0000277d
    5c24:	00005351 	.word	0x00005351

00005c28 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    5c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c2a:	b083      	sub	sp, #12
    5c2c:	4607      	mov	r7, r0
    5c2e:	460e      	mov	r6, r1
    5c30:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    5c32:	4b1c      	ldr	r3, [pc, #112]	; (5ca4 <sd_mmc_init_write_blocks+0x7c>)
    5c34:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    5c36:	4604      	mov	r4, r0
    5c38:	b110      	cbz	r0, 5c40 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    5c3a:	4620      	mov	r0, r4
    5c3c:	b003      	add	sp, #12
    5c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    5c40:	4638      	mov	r0, r7
    5c42:	4b19      	ldr	r3, [pc, #100]	; (5ca8 <sd_mmc_init_write_blocks+0x80>)
    5c44:	4798      	blx	r3
    5c46:	b9d0      	cbnz	r0, 5c7e <sd_mmc_init_write_blocks+0x56>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    5c48:	4b18      	ldr	r3, [pc, #96]	; (5cac <sd_mmc_init_write_blocks+0x84>)
    5c4a:	4919      	ldr	r1, [pc, #100]	; (5cb0 <sd_mmc_init_write_blocks+0x88>)
    5c4c:	2d01      	cmp	r5, #1
    5c4e:	bf98      	it	ls
    5c50:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    5c52:	4b18      	ldr	r3, [pc, #96]	; (5cb4 <sd_mmc_init_write_blocks+0x8c>)
    5c54:	681b      	ldr	r3, [r3, #0]
    5c56:	7adb      	ldrb	r3, [r3, #11]
    5c58:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
    5c5c:	bf08      	it	eq
    5c5e:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    5c60:	4b14      	ldr	r3, [pc, #80]	; (5cb4 <sd_mmc_init_write_blocks+0x8c>)
    5c62:	6898      	ldr	r0, [r3, #8]
    5c64:	2301      	movs	r3, #1
    5c66:	9301      	str	r3, [sp, #4]
    5c68:	9500      	str	r5, [sp, #0]
    5c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
    5c6e:	4632      	mov	r2, r6
    5c70:	4e11      	ldr	r6, [pc, #68]	; (5cb8 <sd_mmc_init_write_blocks+0x90>)
    5c72:	47b0      	blx	r6
    5c74:	b938      	cbnz	r0, 5c86 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    5c76:	4b11      	ldr	r3, [pc, #68]	; (5cbc <sd_mmc_init_write_blocks+0x94>)
    5c78:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5c7a:	2405      	movs	r4, #5
    5c7c:	e7dd      	b.n	5c3a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    5c7e:	4b0f      	ldr	r3, [pc, #60]	; (5cbc <sd_mmc_init_write_blocks+0x94>)
    5c80:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    5c82:	2407      	movs	r4, #7
    5c84:	e7d9      	b.n	5c3a <sd_mmc_init_write_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
    5c86:	4b0b      	ldr	r3, [pc, #44]	; (5cb4 <sd_mmc_init_write_blocks+0x8c>)
    5c88:	6898      	ldr	r0, [r3, #8]
    5c8a:	4b0d      	ldr	r3, [pc, #52]	; (5cc0 <sd_mmc_init_write_blocks+0x98>)
    5c8c:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    5c8e:	4b0d      	ldr	r3, [pc, #52]	; (5cc4 <sd_mmc_init_write_blocks+0x9c>)
    5c90:	4003      	ands	r3, r0
    5c92:	b91b      	cbnz	r3, 5c9c <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    5c94:	4b07      	ldr	r3, [pc, #28]	; (5cb4 <sd_mmc_init_write_blocks+0x8c>)
    5c96:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    5c98:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    5c9a:	e7ce      	b.n	5c3a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <sd_mmc_init_write_blocks+0x94>)
    5c9e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5ca0:	2405      	movs	r4, #5
    5ca2:	e7ca      	b.n	5c3a <sd_mmc_init_write_blocks+0x12>
    5ca4:	000051d5 	.word	0x000051d5
    5ca8:	00005a1d 	.word	0x00005a1d
    5cac:	00089118 	.word	0x00089118
    5cb0:	00109119 	.word	0x00109119
    5cb4:	20004120 	.word	0x20004120
    5cb8:	00002805 	.word	0x00002805
    5cbc:	00005351 	.word	0x00005351
    5cc0:	000027ad 	.word	0x000027ad
    5cc4:	e4580000 	.word	0xe4580000

00005cc8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    5cc8:	b570      	push	{r4, r5, r6, lr}
    5cca:	4606      	mov	r6, r0
    5ccc:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    5cce:	4d0d      	ldr	r5, [pc, #52]	; (5d04 <sd_mmc_start_write_blocks+0x3c>)
    5cd0:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    5cd2:	f240 52fa 	movw	r2, #1530	; 0x5fa
    5cd6:	490c      	ldr	r1, [pc, #48]	; (5d08 <sd_mmc_start_write_blocks+0x40>)
    5cd8:	42a0      	cmp	r0, r4
    5cda:	bf34      	ite	cc
    5cdc:	2000      	movcc	r0, #0
    5cde:	2001      	movcs	r0, #1
    5ce0:	4b0a      	ldr	r3, [pc, #40]	; (5d0c <sd_mmc_start_write_blocks+0x44>)
    5ce2:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    5ce4:	4622      	mov	r2, r4
    5ce6:	4631      	mov	r1, r6
    5ce8:	68a8      	ldr	r0, [r5, #8]
    5cea:	4b09      	ldr	r3, [pc, #36]	; (5d10 <sd_mmc_start_write_blocks+0x48>)
    5cec:	4798      	blx	r3
    5cee:	b918      	cbnz	r0, 5cf8 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    5cf0:	2200      	movs	r2, #0
    5cf2:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    5cf4:	2005      	movs	r0, #5
    5cf6:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    5cf8:	4a02      	ldr	r2, [pc, #8]	; (5d04 <sd_mmc_start_write_blocks+0x3c>)
    5cfa:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    5cfc:	1b1c      	subs	r4, r3, r4
    5cfe:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    5d00:	2000      	movs	r0, #0
}
    5d02:	bd70      	pop	{r4, r5, r6, pc}
    5d04:	20004120 	.word	0x20004120
    5d08:	0000bdb4 	.word	0x0000bdb4
    5d0c:	00002a99 	.word	0x00002a99
    5d10:	0000287d 	.word	0x0000287d

00005d14 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    5d14:	b510      	push	{r4, lr}
    5d16:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    5d18:	4b14      	ldr	r3, [pc, #80]	; (5d6c <sd_mmc_wait_end_of_write_blocks+0x58>)
    5d1a:	6898      	ldr	r0, [r3, #8]
    5d1c:	4b14      	ldr	r3, [pc, #80]	; (5d70 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    5d1e:	4798      	blx	r3
    5d20:	b908      	cbnz	r0, 5d26 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    5d22:	2005      	movs	r0, #5
    5d24:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    5d26:	b194      	cbz	r4, 5d4e <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    5d28:	2200      	movs	r2, #0
    5d2a:	4b10      	ldr	r3, [pc, #64]	; (5d6c <sd_mmc_wait_end_of_write_blocks+0x58>)
    5d2c:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    5d2e:	4b0f      	ldr	r3, [pc, #60]	; (5d6c <sd_mmc_wait_end_of_write_blocks+0x58>)
    5d30:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5d32:	2b01      	cmp	r3, #1
    5d34:	d011      	beq.n	5d5a <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    5d36:	2200      	movs	r2, #0
    5d38:	f243 110c 	movw	r1, #12556	; 0x310c
    5d3c:	4b0b      	ldr	r3, [pc, #44]	; (5d6c <sd_mmc_wait_end_of_write_blocks+0x58>)
    5d3e:	6898      	ldr	r0, [r3, #8]
    5d40:	4b0c      	ldr	r3, [pc, #48]	; (5d74 <sd_mmc_wait_end_of_write_blocks+0x60>)
    5d42:	4798      	blx	r3
    5d44:	b968      	cbnz	r0, 5d62 <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    5d46:	4b0c      	ldr	r3, [pc, #48]	; (5d78 <sd_mmc_wait_end_of_write_blocks+0x64>)
    5d48:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5d4a:	2005      	movs	r0, #5
    5d4c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    5d4e:	4b07      	ldr	r3, [pc, #28]	; (5d6c <sd_mmc_wait_end_of_write_blocks+0x58>)
    5d50:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5d52:	2b00      	cmp	r3, #0
    5d54:	d0eb      	beq.n	5d2e <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    5d56:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    5d58:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    5d5a:	4b07      	ldr	r3, [pc, #28]	; (5d78 <sd_mmc_wait_end_of_write_blocks+0x64>)
    5d5c:	4798      	blx	r3
		return SD_MMC_OK;
    5d5e:	2000      	movs	r0, #0
    5d60:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    5d62:	4b05      	ldr	r3, [pc, #20]	; (5d78 <sd_mmc_wait_end_of_write_blocks+0x64>)
    5d64:	4798      	blx	r3
	return SD_MMC_OK;
    5d66:	2000      	movs	r0, #0
    5d68:	bd10      	pop	{r4, pc}
    5d6a:	bf00      	nop
    5d6c:	20004120 	.word	0x20004120
    5d70:	000028d9 	.word	0x000028d9
    5d74:	0000277d 	.word	0x0000277d
    5d78:	00005351 	.word	0x00005351

00005d7c <SERVO_PWM_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    5d7c:	4a36      	ldr	r2, [pc, #216]	; (5e58 <SERVO_PWM_init+0xdc>)
    5d7e:	6953      	ldr	r3, [r2, #20]
    5d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5d84:	6153      	str	r3, [r2, #20]
    5d86:	2240      	movs	r2, #64	; 0x40
    5d88:	4b34      	ldr	r3, [pc, #208]	; (5e5c <SERVO_PWM_init+0xe0>)
    5d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5d8e:	4a34      	ldr	r2, [pc, #208]	; (5e60 <SERVO_PWM_init+0xe4>)
    5d90:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    5d94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    5d98:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5d9c:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    5da0:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    5da4:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    5da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    5dac:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    5db0:	4b2c      	ldr	r3, [pc, #176]	; (5e64 <SERVO_PWM_init+0xe8>)
    5db2:	691b      	ldr	r3, [r3, #16]
void SERVO_PWM_init(void)
{
	SERVO_PWM_CLOCK_init();
	SERVO_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    5db4:	f013 0f01 	tst.w	r3, #1
    5db8:	d11f      	bne.n	5dfa <SERVO_PWM_init+0x7e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5dba:	4a2a      	ldr	r2, [pc, #168]	; (5e64 <SERVO_PWM_init+0xe8>)
    5dbc:	6913      	ldr	r3, [r2, #16]
    5dbe:	f013 0f03 	tst.w	r3, #3
    5dc2:	d1fb      	bne.n	5dbc <SERVO_PWM_init+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5dc4:	4b27      	ldr	r3, [pc, #156]	; (5e64 <SERVO_PWM_init+0xe8>)
    5dc6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    5dc8:	f013 0f02 	tst.w	r3, #2
    5dcc:	d00d      	beq.n	5dea <SERVO_PWM_init+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5dce:	4a25      	ldr	r2, [pc, #148]	; (5e64 <SERVO_PWM_init+0xe8>)
    5dd0:	6813      	ldr	r3, [r2, #0]
    5dd2:	f023 0302 	bic.w	r3, r3, #2
    5dd6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5dd8:	6913      	ldr	r3, [r2, #16]
    5dda:	f013 0f03 	tst.w	r3, #3
    5dde:	d1fb      	bne.n	5dd8 <SERVO_PWM_init+0x5c>
    5de0:	4a20      	ldr	r2, [pc, #128]	; (5e64 <SERVO_PWM_init+0xe8>)
    5de2:	6913      	ldr	r3, [r2, #16]
    5de4:	f013 0f02 	tst.w	r3, #2
    5de8:	d1fb      	bne.n	5de2 <SERVO_PWM_init+0x66>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    5dea:	2201      	movs	r2, #1
    5dec:	4b1d      	ldr	r3, [pc, #116]	; (5e64 <SERVO_PWM_init+0xe8>)
    5dee:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5df0:	461a      	mov	r2, r3
    5df2:	6913      	ldr	r3, [r2, #16]
    5df4:	f013 0f03 	tst.w	r3, #3
    5df8:	d1fb      	bne.n	5df2 <SERVO_PWM_init+0x76>
    5dfa:	4a1a      	ldr	r2, [pc, #104]	; (5e64 <SERVO_PWM_init+0xe8>)
    5dfc:	6913      	ldr	r3, [r2, #16]
    5dfe:	f013 0f01 	tst.w	r3, #1
    5e02:	d1fb      	bne.n	5dfc <SERVO_PWM_init+0x80>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    5e04:	4a18      	ldr	r2, [pc, #96]	; (5e68 <SERVO_PWM_init+0xec>)
    5e06:	4b17      	ldr	r3, [pc, #92]	; (5e64 <SERVO_PWM_init+0xe8>)
    5e08:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5e0a:	461a      	mov	r2, r3
    5e0c:	6913      	ldr	r3, [r2, #16]
    5e0e:	f013 0f03 	tst.w	r3, #3
    5e12:	d1fb      	bne.n	5e0c <SERVO_PWM_init+0x90>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    5e14:	4b13      	ldr	r3, [pc, #76]	; (5e64 <SERVO_PWM_init+0xe8>)
    5e16:	2200      	movs	r2, #0
    5e18:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    5e1a:	22ff      	movs	r2, #255	; 0xff
    5e1c:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    5e1e:	2203      	movs	r2, #3
    5e20:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5e22:	f640 02e1 	movw	r2, #2273	; 0x8e1
    5e26:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5e28:	461a      	mov	r2, r3
    5e2a:	6913      	ldr	r3, [r2, #16]
    5e2c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5e30:	d1fb      	bne.n	5e2a <SERVO_PWM_init+0xae>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5e32:	f240 1277 	movw	r2, #375	; 0x177
    5e36:	4b0b      	ldr	r3, [pc, #44]	; (5e64 <SERVO_PWM_init+0xe8>)
    5e38:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5e3a:	461a      	mov	r2, r3
    5e3c:	6913      	ldr	r3, [r2, #16]
    5e3e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5e42:	d1fb      	bne.n	5e3c <SERVO_PWM_init+0xc0>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5e44:	4a07      	ldr	r2, [pc, #28]	; (5e64 <SERVO_PWM_init+0xe8>)
    5e46:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    5e48:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    5e4c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5e4e:	6913      	ldr	r3, [r2, #16]
    5e50:	f013 0f03 	tst.w	r3, #3
    5e54:	d1fb      	bne.n	5e4e <SERVO_PWM_init+0xd2>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    5e56:	4770      	bx	lr
    5e58:	40000800 	.word	0x40000800
    5e5c:	40001c00 	.word	0x40001c00
    5e60:	41008000 	.word	0x41008000
    5e64:	40003c00 	.word	0x40003c00
    5e68:	12000410 	.word	0x12000410
    5e6c:	00000000 	.word	0x00000000

00005e70 <SERVO_set_angle>:
  * Sets servo position to given angle
  * 
  * @param int : angle to set servo to
  */ 
void SERVO_set_angle(double angle)
{
    5e70:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    5e72:	4c29      	ldr	r4, [pc, #164]	; (5f18 <SERVO_set_angle+0xa8>)
    5e74:	2200      	movs	r2, #0
    5e76:	4b29      	ldr	r3, [pc, #164]	; (5f1c <SERVO_set_angle+0xac>)
    5e78:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    5e7a:	4d29      	ldr	r5, [pc, #164]	; (5f20 <SERVO_set_angle+0xb0>)
    5e7c:	2200      	movs	r2, #0
    5e7e:	4b29      	ldr	r3, [pc, #164]	; (5f24 <SERVO_set_angle+0xb4>)
    5e80:	47a8      	blx	r5
    5e82:	2200      	movs	r2, #0
    5e84:	4b28      	ldr	r3, [pc, #160]	; (5f28 <SERVO_set_angle+0xb8>)
    5e86:	4e29      	ldr	r6, [pc, #164]	; (5f2c <SERVO_set_angle+0xbc>)
    5e88:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    5e8a:	a31f      	add	r3, pc, #124	; (adr r3, 5f08 <SERVO_set_angle+0x98>)
    5e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e90:	47a8      	blx	r5
    5e92:	a31f      	add	r3, pc, #124	; (adr r3, 5f10 <SERVO_set_angle+0xa0>)
    5e94:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e98:	47a0      	blx	r4
    5e9a:	4b25      	ldr	r3, [pc, #148]	; (5f30 <SERVO_set_angle+0xc0>)
    5e9c:	4798      	blx	r3
    5e9e:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    5ea0:	4b24      	ldr	r3, [pc, #144]	; (5f34 <SERVO_set_angle+0xc4>)
    5ea2:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    5ea4:	f013 0f01 	tst.w	r3, #1
    5ea8:	d117      	bne.n	5eda <SERVO_set_angle+0x6a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5eaa:	4a22      	ldr	r2, [pc, #136]	; (5f34 <SERVO_set_angle+0xc4>)
    5eac:	6913      	ldr	r3, [r2, #16]
    5eae:	f013 0f03 	tst.w	r3, #3
    5eb2:	d1fb      	bne.n	5eac <SERVO_set_angle+0x3c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5eb4:	4b1f      	ldr	r3, [pc, #124]	; (5f34 <SERVO_set_angle+0xc4>)
    5eb6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    5eb8:	f013 0f02 	tst.w	r3, #2
    5ebc:	d00d      	beq.n	5eda <SERVO_set_angle+0x6a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5ebe:	4a1d      	ldr	r2, [pc, #116]	; (5f34 <SERVO_set_angle+0xc4>)
    5ec0:	6813      	ldr	r3, [r2, #0]
    5ec2:	f023 0302 	bic.w	r3, r3, #2
    5ec6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5ec8:	6913      	ldr	r3, [r2, #16]
    5eca:	f013 0f03 	tst.w	r3, #3
    5ece:	d1fb      	bne.n	5ec8 <SERVO_set_angle+0x58>
    5ed0:	4a18      	ldr	r2, [pc, #96]	; (5f34 <SERVO_set_angle+0xc4>)
    5ed2:	6913      	ldr	r3, [r2, #16]
    5ed4:	f013 0f02 	tst.w	r3, #2
    5ed8:	d1fb      	bne.n	5ed2 <SERVO_set_angle+0x62>
    5eda:	4a16      	ldr	r2, [pc, #88]	; (5f34 <SERVO_set_angle+0xc4>)
    5edc:	6913      	ldr	r3, [r2, #16]
    5ede:	f013 0f01 	tst.w	r3, #1
    5ee2:	d1fb      	bne.n	5edc <SERVO_set_angle+0x6c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    5ee4:	4b13      	ldr	r3, [pc, #76]	; (5f34 <SERVO_set_angle+0xc4>)
    5ee6:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5ee8:	461a      	mov	r2, r3
    5eea:	6913      	ldr	r3, [r2, #16]
    5eec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5ef0:	d1fb      	bne.n	5eea <SERVO_set_angle+0x7a>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5ef2:	4a10      	ldr	r2, [pc, #64]	; (5f34 <SERVO_set_angle+0xc4>)
    5ef4:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    5ef6:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    5efa:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5efc:	6913      	ldr	r3, [r2, #16]
    5efe:	f013 0f03 	tst.w	r3, #3
    5f02:	d1fb      	bne.n	5efc <SERVO_set_angle+0x8c>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);
}
    5f04:	bd70      	pop	{r4, r5, r6, pc}
    5f06:	bf00      	nop
    5f08:	00000000 	.word	0x00000000
    5f0c:	40a1c200 	.word	0x40a1c200
    5f10:	00000000 	.word	0x00000000
    5f14:	40a7ac00 	.word	0x40a7ac00
    5f18:	00007741 	.word	0x00007741
    5f1c:	40668000 	.word	0x40668000
    5f20:	000074ed 	.word	0x000074ed
    5f24:	409f4000 	.word	0x409f4000
    5f28:	407f4000 	.word	0x407f4000
    5f2c:	00007189 	.word	0x00007189
    5f30:	00007a9d 	.word	0x00007a9d
    5f34:	40003c00 	.word	0x40003c00

00005f38 <start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void start_init(void)
{
    5f38:	b508      	push	{r3, lr}
	system_init();
    5f3a:	4b04      	ldr	r3, [pc, #16]	; (5f4c <start_init+0x14>)
    5f3c:	4798      	blx	r3
	stdio_redirect_init();
    5f3e:	4b04      	ldr	r3, [pc, #16]	; (5f50 <start_init+0x18>)
    5f40:	4798      	blx	r3
	SDMMC_init();
    5f42:	4b04      	ldr	r3, [pc, #16]	; (5f54 <start_init+0x1c>)
    5f44:	4798      	blx	r3
	EEPROM_init();
    5f46:	4b04      	ldr	r3, [pc, #16]	; (5f58 <start_init+0x20>)
    5f48:	4798      	blx	r3
    5f4a:	bd08      	pop	{r3, pc}
    5f4c:	0000088d 	.word	0x0000088d
    5f50:	00005f5d 	.word	0x00005f5d
    5f54:	0000384d 	.word	0x0000384d
    5f58:	0000092d 	.word	0x0000092d

00005f5c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    5f5c:	b510      	push	{r4, lr}
	usart_sync_enable(&STDIO_IO);
    5f5e:	4c04      	ldr	r4, [pc, #16]	; (5f70 <stdio_redirect_init+0x14>)
    5f60:	4620      	mov	r0, r4
    5f62:	4b04      	ldr	r3, [pc, #16]	; (5f74 <stdio_redirect_init+0x18>)
    5f64:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    5f66:	4620      	mov	r0, r4
    5f68:	4b03      	ldr	r3, [pc, #12]	; (5f78 <stdio_redirect_init+0x1c>)
    5f6a:	4798      	blx	r3
    5f6c:	bd10      	pop	{r4, pc}
    5f6e:	bf00      	nop
    5f70:	20004168 	.word	0x20004168
    5f74:	00002a1d 	.word	0x00002a1d
    5f78:	00005fc1 	.word	0x00005fc1

00005f7c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    5f7c:	b940      	cbnz	r0, 5f90 <_read+0x14>
{
    5f7e:	b508      	push	{r3, lr}
    5f80:	460b      	mov	r3, r1
    5f82:	4611      	mov	r1, r2
    5f84:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    5f86:	4b04      	ldr	r3, [pc, #16]	; (5f98 <_read+0x1c>)
    5f88:	4798      	blx	r3
    5f8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5f8e:	bd08      	pop	{r3, pc}
		return -1;
    5f90:	f04f 30ff 	mov.w	r0, #4294967295
    5f94:	4770      	bx	lr
    5f96:	bf00      	nop
    5f98:	00005fed 	.word	0x00005fed

00005f9c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    5f9c:	3801      	subs	r0, #1
    5f9e:	2802      	cmp	r0, #2
    5fa0:	d808      	bhi.n	5fb4 <_write+0x18>
{
    5fa2:	b508      	push	{r3, lr}
    5fa4:	460b      	mov	r3, r1
    5fa6:	4611      	mov	r1, r2
    5fa8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    5faa:	4b04      	ldr	r3, [pc, #16]	; (5fbc <_write+0x20>)
    5fac:	4798      	blx	r3
    5fae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5fb2:	bd08      	pop	{r3, pc}
		return -1;
    5fb4:	f04f 30ff 	mov.w	r0, #4294967295
    5fb8:	4770      	bx	lr
    5fba:	bf00      	nop
    5fbc:	00006011 	.word	0x00006011

00005fc0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    5fc0:	b570      	push	{r4, r5, r6, lr}
    5fc2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    5fc4:	4d06      	ldr	r5, [pc, #24]	; (5fe0 <stdio_io_init+0x20>)
    5fc6:	682b      	ldr	r3, [r5, #0]
    5fc8:	2100      	movs	r1, #0
    5fca:	6898      	ldr	r0, [r3, #8]
    5fcc:	4c05      	ldr	r4, [pc, #20]	; (5fe4 <stdio_io_init+0x24>)
    5fce:	47a0      	blx	r4
	setbuf(stdin, NULL);
    5fd0:	682b      	ldr	r3, [r5, #0]
    5fd2:	2100      	movs	r1, #0
    5fd4:	6858      	ldr	r0, [r3, #4]
    5fd6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    5fd8:	4b03      	ldr	r3, [pc, #12]	; (5fe8 <stdio_io_init+0x28>)
    5fda:	601e      	str	r6, [r3, #0]
    5fdc:	bd70      	pop	{r4, r5, r6, pc}
    5fde:	bf00      	nop
    5fe0:	20000090 	.word	0x20000090
    5fe4:	00008409 	.word	0x00008409
    5fe8:	2000415c 	.word	0x2000415c

00005fec <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    5fec:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5fee:	4b06      	ldr	r3, [pc, #24]	; (6008 <stdio_io_read+0x1c>)
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	b133      	cbz	r3, 6002 <stdio_io_read+0x16>
    5ff4:	460a      	mov	r2, r1
    5ff6:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    5ff8:	b292      	uxth	r2, r2
    5ffa:	4618      	mov	r0, r3
    5ffc:	4b03      	ldr	r3, [pc, #12]	; (600c <stdio_io_read+0x20>)
    5ffe:	4798      	blx	r3
    6000:	bd08      	pop	{r3, pc}
		return 0;
    6002:	2000      	movs	r0, #0
}
    6004:	bd08      	pop	{r3, pc}
    6006:	bf00      	nop
    6008:	2000415c 	.word	0x2000415c
    600c:	00002639 	.word	0x00002639

00006010 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    6010:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    6012:	4b06      	ldr	r3, [pc, #24]	; (602c <stdio_io_write+0x1c>)
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	b133      	cbz	r3, 6026 <stdio_io_write+0x16>
    6018:	460a      	mov	r2, r1
    601a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    601c:	b292      	uxth	r2, r2
    601e:	4618      	mov	r0, r3
    6020:	4b03      	ldr	r3, [pc, #12]	; (6030 <stdio_io_write+0x20>)
    6022:	4798      	blx	r3
    6024:	bd08      	pop	{r3, pc}
		return 0;
    6026:	2000      	movs	r0, #0
}
    6028:	bd08      	pop	{r3, pc}
    602a:	bf00      	nop
    602c:	2000415c 	.word	0x2000415c
    6030:	00002609 	.word	0x00002609

00006034 <pow>:
    6034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6038:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 632c <pow+0x2f8>
    603c:	b08d      	sub	sp, #52	; 0x34
    603e:	4606      	mov	r6, r0
    6040:	460f      	mov	r7, r1
    6042:	4614      	mov	r4, r2
    6044:	461d      	mov	r5, r3
    6046:	f000 f973 	bl	6330 <__ieee754_pow>
    604a:	f999 8000 	ldrsb.w	r8, [r9]
    604e:	f1b8 3fff 	cmp.w	r8, #4294967295
    6052:	e9cd 0100 	strd	r0, r1, [sp]
    6056:	d036      	beq.n	60c6 <pow+0x92>
    6058:	4622      	mov	r2, r4
    605a:	462b      	mov	r3, r5
    605c:	4620      	mov	r0, r4
    605e:	4629      	mov	r1, r5
    6060:	f001 fcde 	bl	7a20 <__aeabi_dcmpun>
    6064:	4683      	mov	fp, r0
    6066:	bb70      	cbnz	r0, 60c6 <pow+0x92>
    6068:	4632      	mov	r2, r6
    606a:	463b      	mov	r3, r7
    606c:	4630      	mov	r0, r6
    606e:	4639      	mov	r1, r7
    6070:	f001 fcd6 	bl	7a20 <__aeabi_dcmpun>
    6074:	2200      	movs	r2, #0
    6076:	4682      	mov	sl, r0
    6078:	2300      	movs	r3, #0
    607a:	2800      	cmp	r0, #0
    607c:	f040 80a0 	bne.w	61c0 <pow+0x18c>
    6080:	4630      	mov	r0, r6
    6082:	4639      	mov	r1, r7
    6084:	f001 fc9a 	bl	79bc <__aeabi_dcmpeq>
    6088:	b310      	cbz	r0, 60d0 <pow+0x9c>
    608a:	2200      	movs	r2, #0
    608c:	2300      	movs	r3, #0
    608e:	4620      	mov	r0, r4
    6090:	4629      	mov	r1, r5
    6092:	f001 fc93 	bl	79bc <__aeabi_dcmpeq>
    6096:	4683      	mov	fp, r0
    6098:	2800      	cmp	r0, #0
    609a:	d06a      	beq.n	6172 <pow+0x13e>
    609c:	2201      	movs	r2, #1
    609e:	4b9c      	ldr	r3, [pc, #624]	; (6310 <pow+0x2dc>)
    60a0:	9202      	str	r2, [sp, #8]
    60a2:	2100      	movs	r1, #0
    60a4:	2200      	movs	r2, #0
    60a6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    60aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
    60ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
    60b2:	e9cd 1208 	strd	r1, r2, [sp, #32]
    60b6:	9303      	str	r3, [sp, #12]
    60b8:	f1b8 0f00 	cmp.w	r8, #0
    60bc:	d045      	beq.n	614a <pow+0x116>
    60be:	4c95      	ldr	r4, [pc, #596]	; (6314 <pow+0x2e0>)
    60c0:	2300      	movs	r3, #0
    60c2:	e9cd 3400 	strd	r3, r4, [sp]
    60c6:	e9dd 0100 	ldrd	r0, r1, [sp]
    60ca:	b00d      	add	sp, #52	; 0x34
    60cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60d0:	e9dd 0100 	ldrd	r0, r1, [sp]
    60d4:	f000 ff32 	bl	6f3c <finite>
    60d8:	4680      	mov	r8, r0
    60da:	2800      	cmp	r0, #0
    60dc:	f000 808b 	beq.w	61f6 <pow+0x1c2>
    60e0:	f04f 0a00 	mov.w	sl, #0
    60e4:	f04f 0b00 	mov.w	fp, #0
    60e8:	4652      	mov	r2, sl
    60ea:	465b      	mov	r3, fp
    60ec:	e9dd 0100 	ldrd	r0, r1, [sp]
    60f0:	f001 fc64 	bl	79bc <__aeabi_dcmpeq>
    60f4:	2800      	cmp	r0, #0
    60f6:	d0e6      	beq.n	60c6 <pow+0x92>
    60f8:	4630      	mov	r0, r6
    60fa:	4639      	mov	r1, r7
    60fc:	f000 ff1e 	bl	6f3c <finite>
    6100:	2800      	cmp	r0, #0
    6102:	d0e0      	beq.n	60c6 <pow+0x92>
    6104:	4620      	mov	r0, r4
    6106:	4629      	mov	r1, r5
    6108:	f000 ff18 	bl	6f3c <finite>
    610c:	2800      	cmp	r0, #0
    610e:	d0da      	beq.n	60c6 <pow+0x92>
    6110:	f999 3000 	ldrsb.w	r3, [r9]
    6114:	4a7e      	ldr	r2, [pc, #504]	; (6310 <pow+0x2dc>)
    6116:	9203      	str	r2, [sp, #12]
    6118:	2104      	movs	r1, #4
    611a:	2200      	movs	r2, #0
    611c:	2b02      	cmp	r3, #2
    611e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    6122:	e9cd 4506 	strd	r4, r5, [sp, #24]
    6126:	e9cd ab08 	strd	sl, fp, [sp, #32]
    612a:	9102      	str	r1, [sp, #8]
    612c:	920a      	str	r2, [sp, #40]	; 0x28
    612e:	d003      	beq.n	6138 <pow+0x104>
    6130:	a802      	add	r0, sp, #8
    6132:	f000 ff09 	bl	6f48 <matherr>
    6136:	b968      	cbnz	r0, 6154 <pow+0x120>
    6138:	f001 fe5c 	bl	7df4 <__errno>
    613c:	2322      	movs	r3, #34	; 0x22
    613e:	6003      	str	r3, [r0, #0]
    6140:	e008      	b.n	6154 <pow+0x120>
    6142:	2300      	movs	r3, #0
    6144:	2400      	movs	r4, #0
    6146:	e9cd 3408 	strd	r3, r4, [sp, #32]
    614a:	a802      	add	r0, sp, #8
    614c:	f000 fefc 	bl	6f48 <matherr>
    6150:	2800      	cmp	r0, #0
    6152:	d030      	beq.n	61b6 <pow+0x182>
    6154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6156:	b11b      	cbz	r3, 6160 <pow+0x12c>
    6158:	f001 fe4c 	bl	7df4 <__errno>
    615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    615e:	6003      	str	r3, [r0, #0]
    6160:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    6164:	e9cd 3400 	strd	r3, r4, [sp]
    6168:	e9dd 0100 	ldrd	r0, r1, [sp]
    616c:	b00d      	add	sp, #52	; 0x34
    616e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6172:	4620      	mov	r0, r4
    6174:	4629      	mov	r1, r5
    6176:	f000 fee1 	bl	6f3c <finite>
    617a:	2800      	cmp	r0, #0
    617c:	d0a3      	beq.n	60c6 <pow+0x92>
    617e:	2200      	movs	r2, #0
    6180:	2300      	movs	r3, #0
    6182:	4620      	mov	r0, r4
    6184:	4629      	mov	r1, r5
    6186:	f001 fc23 	bl	79d0 <__aeabi_dcmplt>
    618a:	2800      	cmp	r0, #0
    618c:	d09b      	beq.n	60c6 <pow+0x92>
    618e:	f999 3000 	ldrsb.w	r3, [r9]
    6192:	4a5f      	ldr	r2, [pc, #380]	; (6310 <pow+0x2dc>)
    6194:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    6198:	2101      	movs	r1, #1
    619a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    619e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    61a2:	9102      	str	r1, [sp, #8]
    61a4:	9203      	str	r2, [sp, #12]
    61a6:	2b00      	cmp	r3, #0
    61a8:	d0cb      	beq.n	6142 <pow+0x10e>
    61aa:	495b      	ldr	r1, [pc, #364]	; (6318 <pow+0x2e4>)
    61ac:	2000      	movs	r0, #0
    61ae:	2b02      	cmp	r3, #2
    61b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    61b4:	d1c9      	bne.n	614a <pow+0x116>
    61b6:	f001 fe1d 	bl	7df4 <__errno>
    61ba:	2321      	movs	r3, #33	; 0x21
    61bc:	6003      	str	r3, [r0, #0]
    61be:	e7c9      	b.n	6154 <pow+0x120>
    61c0:	4620      	mov	r0, r4
    61c2:	4629      	mov	r1, r5
    61c4:	f001 fbfa 	bl	79bc <__aeabi_dcmpeq>
    61c8:	2800      	cmp	r0, #0
    61ca:	f43f af7c 	beq.w	60c6 <pow+0x92>
    61ce:	4b51      	ldr	r3, [pc, #324]	; (6314 <pow+0x2e0>)
    61d0:	494f      	ldr	r1, [pc, #316]	; (6310 <pow+0x2dc>)
    61d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    61d6:	2001      	movs	r0, #1
    61d8:	2200      	movs	r2, #0
    61da:	f1b8 0f02 	cmp.w	r8, #2
    61de:	e9cd 6704 	strd	r6, r7, [sp, #16]
    61e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    61e6:	9002      	str	r0, [sp, #8]
    61e8:	9103      	str	r1, [sp, #12]
    61ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
    61ee:	d1ac      	bne.n	614a <pow+0x116>
    61f0:	e9cd 2300 	strd	r2, r3, [sp]
    61f4:	e767      	b.n	60c6 <pow+0x92>
    61f6:	4630      	mov	r0, r6
    61f8:	4639      	mov	r1, r7
    61fa:	f000 fe9f 	bl	6f3c <finite>
    61fe:	2800      	cmp	r0, #0
    6200:	f43f af6e 	beq.w	60e0 <pow+0xac>
    6204:	4620      	mov	r0, r4
    6206:	4629      	mov	r1, r5
    6208:	f000 fe98 	bl	6f3c <finite>
    620c:	2800      	cmp	r0, #0
    620e:	f43f af67 	beq.w	60e0 <pow+0xac>
    6212:	e9dd 2300 	ldrd	r2, r3, [sp]
    6216:	4610      	mov	r0, r2
    6218:	4619      	mov	r1, r3
    621a:	f001 fc01 	bl	7a20 <__aeabi_dcmpun>
    621e:	2800      	cmp	r0, #0
    6220:	d158      	bne.n	62d4 <pow+0x2a0>
    6222:	2303      	movs	r3, #3
    6224:	f999 8000 	ldrsb.w	r8, [r9]
    6228:	9302      	str	r3, [sp, #8]
    622a:	4b39      	ldr	r3, [pc, #228]	; (6310 <pow+0x2dc>)
    622c:	900a      	str	r0, [sp, #40]	; 0x28
    622e:	9303      	str	r3, [sp, #12]
    6230:	e9cd 6704 	strd	r6, r7, [sp, #16]
    6234:	e9cd 4506 	strd	r4, r5, [sp, #24]
    6238:	2200      	movs	r2, #0
    623a:	2300      	movs	r3, #0
    623c:	4630      	mov	r0, r6
    623e:	4639      	mov	r1, r7
    6240:	f1b8 0f00 	cmp.w	r8, #0
    6244:	d126      	bne.n	6294 <pow+0x260>
    6246:	4f35      	ldr	r7, [pc, #212]	; (631c <pow+0x2e8>)
    6248:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    624c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    6250:	f001 fbbe 	bl	79d0 <__aeabi_dcmplt>
    6254:	2800      	cmp	r0, #0
    6256:	f43f af6b 	beq.w	6130 <pow+0xfc>
    625a:	2200      	movs	r2, #0
    625c:	4b30      	ldr	r3, [pc, #192]	; (6320 <pow+0x2ec>)
    625e:	4620      	mov	r0, r4
    6260:	4629      	mov	r1, r5
    6262:	f001 f943 	bl	74ec <__aeabi_dmul>
    6266:	4604      	mov	r4, r0
    6268:	460d      	mov	r5, r1
    626a:	f000 fe75 	bl	6f58 <rint>
    626e:	4602      	mov	r2, r0
    6270:	460b      	mov	r3, r1
    6272:	4620      	mov	r0, r4
    6274:	4629      	mov	r1, r5
    6276:	f001 fba1 	bl	79bc <__aeabi_dcmpeq>
    627a:	bb40      	cbnz	r0, 62ce <pow+0x29a>
    627c:	4b29      	ldr	r3, [pc, #164]	; (6324 <pow+0x2f0>)
    627e:	f999 8000 	ldrsb.w	r8, [r9]
    6282:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    6286:	e9cd 2308 	strd	r2, r3, [sp, #32]
    628a:	f1b8 0f02 	cmp.w	r8, #2
    628e:	f47f af4f 	bne.w	6130 <pow+0xfc>
    6292:	e751      	b.n	6138 <pow+0x104>
    6294:	4f24      	ldr	r7, [pc, #144]	; (6328 <pow+0x2f4>)
    6296:	2600      	movs	r6, #0
    6298:	e9cd 6708 	strd	r6, r7, [sp, #32]
    629c:	f001 fb98 	bl	79d0 <__aeabi_dcmplt>
    62a0:	2800      	cmp	r0, #0
    62a2:	d0f2      	beq.n	628a <pow+0x256>
    62a4:	2200      	movs	r2, #0
    62a6:	4b1e      	ldr	r3, [pc, #120]	; (6320 <pow+0x2ec>)
    62a8:	4620      	mov	r0, r4
    62aa:	4629      	mov	r1, r5
    62ac:	f001 f91e 	bl	74ec <__aeabi_dmul>
    62b0:	4604      	mov	r4, r0
    62b2:	460d      	mov	r5, r1
    62b4:	f000 fe50 	bl	6f58 <rint>
    62b8:	4602      	mov	r2, r0
    62ba:	460b      	mov	r3, r1
    62bc:	4620      	mov	r0, r4
    62be:	4629      	mov	r1, r5
    62c0:	f001 fb7c 	bl	79bc <__aeabi_dcmpeq>
    62c4:	b918      	cbnz	r0, 62ce <pow+0x29a>
    62c6:	4b14      	ldr	r3, [pc, #80]	; (6318 <pow+0x2e4>)
    62c8:	2200      	movs	r2, #0
    62ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
    62ce:	f999 8000 	ldrsb.w	r8, [r9]
    62d2:	e7da      	b.n	628a <pow+0x256>
    62d4:	f999 9000 	ldrsb.w	r9, [r9]
    62d8:	4b0d      	ldr	r3, [pc, #52]	; (6310 <pow+0x2dc>)
    62da:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    62de:	2201      	movs	r2, #1
    62e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    62e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    62e8:	9202      	str	r2, [sp, #8]
    62ea:	9303      	str	r3, [sp, #12]
    62ec:	f1b9 0f00 	cmp.w	r9, #0
    62f0:	f43f af27 	beq.w	6142 <pow+0x10e>
    62f4:	2200      	movs	r2, #0
    62f6:	2300      	movs	r3, #0
    62f8:	4610      	mov	r0, r2
    62fa:	4619      	mov	r1, r3
    62fc:	f001 fa20 	bl	7740 <__aeabi_ddiv>
    6300:	f1b9 0f02 	cmp.w	r9, #2
    6304:	e9cd 0108 	strd	r0, r1, [sp, #32]
    6308:	f43f af55 	beq.w	61b6 <pow+0x182>
    630c:	e71d      	b.n	614a <pow+0x116>
    630e:	bf00      	nop
    6310:	0000bdc8 	.word	0x0000bdc8
    6314:	3ff00000 	.word	0x3ff00000
    6318:	fff00000 	.word	0xfff00000
    631c:	47efffff 	.word	0x47efffff
    6320:	3fe00000 	.word	0x3fe00000
    6324:	c7efffff 	.word	0xc7efffff
    6328:	7ff00000 	.word	0x7ff00000
    632c:	2000008c 	.word	0x2000008c

00006330 <__ieee754_pow>:
    6330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6334:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    6338:	ea57 0402 	orrs.w	r4, r7, r2
    633c:	b093      	sub	sp, #76	; 0x4c
    633e:	d037      	beq.n	63b0 <__ieee754_pow+0x80>
    6340:	4c67      	ldr	r4, [pc, #412]	; (64e0 <__ieee754_pow+0x1b0>)
    6342:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    6346:	42a6      	cmp	r6, r4
    6348:	4683      	mov	fp, r0
    634a:	460d      	mov	r5, r1
    634c:	dc29      	bgt.n	63a2 <__ieee754_pow+0x72>
    634e:	469a      	mov	sl, r3
    6350:	4696      	mov	lr, r2
    6352:	d025      	beq.n	63a0 <__ieee754_pow+0x70>
    6354:	42a7      	cmp	r7, r4
    6356:	dc24      	bgt.n	63a2 <__ieee754_pow+0x72>
    6358:	4c61      	ldr	r4, [pc, #388]	; (64e0 <__ieee754_pow+0x1b0>)
    635a:	42a7      	cmp	r7, r4
    635c:	d079      	beq.n	6452 <__ieee754_pow+0x122>
    635e:	2d00      	cmp	r5, #0
    6360:	4689      	mov	r9, r1
    6362:	4680      	mov	r8, r0
    6364:	e9cd 2300 	strd	r2, r3, [sp]
    6368:	db77      	blt.n	645a <__ieee754_pow+0x12a>
    636a:	2400      	movs	r4, #0
    636c:	f1be 0f00 	cmp.w	lr, #0
    6370:	d12c      	bne.n	63cc <__ieee754_pow+0x9c>
    6372:	4b5b      	ldr	r3, [pc, #364]	; (64e0 <__ieee754_pow+0x1b0>)
    6374:	429f      	cmp	r7, r3
    6376:	f000 808b 	beq.w	6490 <__ieee754_pow+0x160>
    637a:	4b5a      	ldr	r3, [pc, #360]	; (64e4 <__ieee754_pow+0x1b4>)
    637c:	429f      	cmp	r7, r3
    637e:	d061      	beq.n	6444 <__ieee754_pow+0x114>
    6380:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    6384:	f000 83ba 	beq.w	6afc <__ieee754_pow+0x7cc>
    6388:	4b57      	ldr	r3, [pc, #348]	; (64e8 <__ieee754_pow+0x1b8>)
    638a:	459a      	cmp	sl, r3
    638c:	d11e      	bne.n	63cc <__ieee754_pow+0x9c>
    638e:	2d00      	cmp	r5, #0
    6390:	db1c      	blt.n	63cc <__ieee754_pow+0x9c>
    6392:	4640      	mov	r0, r8
    6394:	4649      	mov	r1, r9
    6396:	b013      	add	sp, #76	; 0x4c
    6398:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    639c:	f000 bd0e 	b.w	6dbc <__ieee754_sqrt>
    63a0:	b158      	cbz	r0, 63ba <__ieee754_pow+0x8a>
    63a2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    63a6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    63aa:	ea56 030b 	orrs.w	r3, r6, fp
    63ae:	d106      	bne.n	63be <__ieee754_pow+0x8e>
    63b0:	494c      	ldr	r1, [pc, #304]	; (64e4 <__ieee754_pow+0x1b4>)
    63b2:	2000      	movs	r0, #0
    63b4:	b013      	add	sp, #76	; 0x4c
    63b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63ba:	42b7      	cmp	r7, r6
    63bc:	ddcc      	ble.n	6358 <__ieee754_pow+0x28>
    63be:	484b      	ldr	r0, [pc, #300]	; (64ec <__ieee754_pow+0x1bc>)
    63c0:	b013      	add	sp, #76	; 0x4c
    63c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63c6:	f000 bdc1 	b.w	6f4c <nan>
    63ca:	2400      	movs	r4, #0
    63cc:	4640      	mov	r0, r8
    63ce:	4649      	mov	r1, r9
    63d0:	f000 fdb0 	bl	6f34 <fabs>
    63d4:	f1bb 0f00 	cmp.w	fp, #0
    63d8:	d119      	bne.n	640e <__ieee754_pow+0xde>
    63da:	b126      	cbz	r6, 63e6 <__ieee754_pow+0xb6>
    63dc:	4b41      	ldr	r3, [pc, #260]	; (64e4 <__ieee754_pow+0x1b4>)
    63de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    63e2:	429a      	cmp	r2, r3
    63e4:	d113      	bne.n	640e <__ieee754_pow+0xde>
    63e6:	f1ba 0f00 	cmp.w	sl, #0
    63ea:	f2c0 83bc 	blt.w	6b66 <__ieee754_pow+0x836>
    63ee:	2d00      	cmp	r5, #0
    63f0:	dae0      	bge.n	63b4 <__ieee754_pow+0x84>
    63f2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    63f6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    63fa:	ea56 0304 	orrs.w	r3, r6, r4
    63fe:	f000 848f 	beq.w	6d20 <__ieee754_pow+0x9f0>
    6402:	2c01      	cmp	r4, #1
    6404:	d1d6      	bne.n	63b4 <__ieee754_pow+0x84>
    6406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    640a:	4619      	mov	r1, r3
    640c:	e7d2      	b.n	63b4 <__ieee754_pow+0x84>
    640e:	0fed      	lsrs	r5, r5, #31
    6410:	3d01      	subs	r5, #1
    6412:	ea54 0305 	orrs.w	r3, r4, r5
    6416:	d04e      	beq.n	64b6 <__ieee754_pow+0x186>
    6418:	4b35      	ldr	r3, [pc, #212]	; (64f0 <__ieee754_pow+0x1c0>)
    641a:	429f      	cmp	r7, r3
    641c:	dd6e      	ble.n	64fc <__ieee754_pow+0x1cc>
    641e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    6422:	429f      	cmp	r7, r3
    6424:	f340 83e8 	ble.w	6bf8 <__ieee754_pow+0x8c8>
    6428:	4b32      	ldr	r3, [pc, #200]	; (64f4 <__ieee754_pow+0x1c4>)
    642a:	429e      	cmp	r6, r3
    642c:	dd4e      	ble.n	64cc <__ieee754_pow+0x19c>
    642e:	f1ba 0f00 	cmp.w	sl, #0
    6432:	dd4e      	ble.n	64d2 <__ieee754_pow+0x1a2>
    6434:	a328      	add	r3, pc, #160	; (adr r3, 64d8 <__ieee754_pow+0x1a8>)
    6436:	e9d3 2300 	ldrd	r2, r3, [r3]
    643a:	4610      	mov	r0, r2
    643c:	4619      	mov	r1, r3
    643e:	f001 f855 	bl	74ec <__aeabi_dmul>
    6442:	e7b7      	b.n	63b4 <__ieee754_pow+0x84>
    6444:	f1ba 0f00 	cmp.w	sl, #0
    6448:	f2c0 843c 	blt.w	6cc4 <__ieee754_pow+0x994>
    644c:	4640      	mov	r0, r8
    644e:	4649      	mov	r1, r9
    6450:	e7b0      	b.n	63b4 <__ieee754_pow+0x84>
    6452:	f1be 0f00 	cmp.w	lr, #0
    6456:	d082      	beq.n	635e <__ieee754_pow+0x2e>
    6458:	e7a3      	b.n	63a2 <__ieee754_pow+0x72>
    645a:	4b27      	ldr	r3, [pc, #156]	; (64f8 <__ieee754_pow+0x1c8>)
    645c:	429f      	cmp	r7, r3
    645e:	dc28      	bgt.n	64b2 <__ieee754_pow+0x182>
    6460:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    6464:	429f      	cmp	r7, r3
    6466:	dd80      	ble.n	636a <__ieee754_pow+0x3a>
    6468:	153b      	asrs	r3, r7, #20
    646a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    646e:	2b14      	cmp	r3, #20
    6470:	f340 843e 	ble.w	6cf0 <__ieee754_pow+0x9c0>
    6474:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    6478:	fa2e f203 	lsr.w	r2, lr, r3
    647c:	fa02 f303 	lsl.w	r3, r2, r3
    6480:	459e      	cmp	lr, r3
    6482:	f47f af72 	bne.w	636a <__ieee754_pow+0x3a>
    6486:	f002 0201 	and.w	r2, r2, #1
    648a:	f1c2 0402 	rsb	r4, r2, #2
    648e:	e76d      	b.n	636c <__ieee754_pow+0x3c>
    6490:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    6494:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    6498:	ea53 030b 	orrs.w	r3, r3, fp
    649c:	d088      	beq.n	63b0 <__ieee754_pow+0x80>
    649e:	4b15      	ldr	r3, [pc, #84]	; (64f4 <__ieee754_pow+0x1c4>)
    64a0:	429e      	cmp	r6, r3
    64a2:	f340 8332 	ble.w	6b0a <__ieee754_pow+0x7da>
    64a6:	f1ba 0f00 	cmp.w	sl, #0
    64aa:	db12      	blt.n	64d2 <__ieee754_pow+0x1a2>
    64ac:	e9dd 0100 	ldrd	r0, r1, [sp]
    64b0:	e780      	b.n	63b4 <__ieee754_pow+0x84>
    64b2:	2402      	movs	r4, #2
    64b4:	e75a      	b.n	636c <__ieee754_pow+0x3c>
    64b6:	4642      	mov	r2, r8
    64b8:	464b      	mov	r3, r9
    64ba:	4640      	mov	r0, r8
    64bc:	4649      	mov	r1, r9
    64be:	f000 fe61 	bl	7184 <__aeabi_dsub>
    64c2:	4602      	mov	r2, r0
    64c4:	460b      	mov	r3, r1
    64c6:	f001 f93b 	bl	7740 <__aeabi_ddiv>
    64ca:	e773      	b.n	63b4 <__ieee754_pow+0x84>
    64cc:	f1ba 0f00 	cmp.w	sl, #0
    64d0:	dbb0      	blt.n	6434 <__ieee754_pow+0x104>
    64d2:	2000      	movs	r0, #0
    64d4:	2100      	movs	r1, #0
    64d6:	e76d      	b.n	63b4 <__ieee754_pow+0x84>
    64d8:	8800759c 	.word	0x8800759c
    64dc:	7e37e43c 	.word	0x7e37e43c
    64e0:	7ff00000 	.word	0x7ff00000
    64e4:	3ff00000 	.word	0x3ff00000
    64e8:	3fe00000 	.word	0x3fe00000
    64ec:	0000b960 	.word	0x0000b960
    64f0:	41e00000 	.word	0x41e00000
    64f4:	3fefffff 	.word	0x3fefffff
    64f8:	433fffff 	.word	0x433fffff
    64fc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    6500:	f04f 0200 	mov.w	r2, #0
    6504:	da05      	bge.n	6512 <__ieee754_pow+0x1e2>
    6506:	4bd4      	ldr	r3, [pc, #848]	; (6858 <__ieee754_pow+0x528>)
    6508:	f000 fff0 	bl	74ec <__aeabi_dmul>
    650c:	f06f 0234 	mvn.w	r2, #52	; 0x34
    6510:	460e      	mov	r6, r1
    6512:	1533      	asrs	r3, r6, #20
    6514:	4fd1      	ldr	r7, [pc, #836]	; (685c <__ieee754_pow+0x52c>)
    6516:	f3c6 0613 	ubfx	r6, r6, #0, #20
    651a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    651e:	4413      	add	r3, r2
    6520:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    6524:	42be      	cmp	r6, r7
    6526:	461a      	mov	r2, r3
    6528:	930d      	str	r3, [sp, #52]	; 0x34
    652a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    652e:	f340 8321 	ble.w	6b74 <__ieee754_pow+0x844>
    6532:	4bcb      	ldr	r3, [pc, #812]	; (6860 <__ieee754_pow+0x530>)
    6534:	429e      	cmp	r6, r3
    6536:	f340 83fd 	ble.w	6d34 <__ieee754_pow+0xa04>
    653a:	4613      	mov	r3, r2
    653c:	3301      	adds	r3, #1
    653e:	930d      	str	r3, [sp, #52]	; 0x34
    6540:	4bc8      	ldr	r3, [pc, #800]	; (6864 <__ieee754_pow+0x534>)
    6542:	2200      	movs	r2, #0
    6544:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6548:	2700      	movs	r7, #0
    654a:	2600      	movs	r6, #0
    654c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    6550:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    6554:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    6558:	2700      	movs	r7, #0
    655a:	4602      	mov	r2, r0
    655c:	4653      	mov	r3, sl
    655e:	4651      	mov	r1, sl
    6560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    6564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    6568:	f000 fe0c 	bl	7184 <__aeabi_dsub>
    656c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    6570:	4680      	mov	r8, r0
    6572:	4689      	mov	r9, r1
    6574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    6578:	f000 fe06 	bl	7188 <__adddf3>
    657c:	4602      	mov	r2, r0
    657e:	460b      	mov	r3, r1
    6580:	2000      	movs	r0, #0
    6582:	49b8      	ldr	r1, [pc, #736]	; (6864 <__ieee754_pow+0x534>)
    6584:	f001 f8dc 	bl	7740 <__aeabi_ddiv>
    6588:	460a      	mov	r2, r1
    658a:	4601      	mov	r1, r0
    658c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    6590:	4613      	mov	r3, r2
    6592:	4649      	mov	r1, r9
    6594:	4602      	mov	r2, r0
    6596:	4640      	mov	r0, r8
    6598:	f000 ffa8 	bl	74ec <__aeabi_dmul>
    659c:	ea4f 036a 	mov.w	r3, sl, asr #1
    65a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    65a4:	468c      	mov	ip, r1
    65a6:	4683      	mov	fp, r0
    65a8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    65ac:	e9cd bc04 	strd	fp, ip, [sp, #16]
    65b0:	46da      	mov	sl, fp
    65b2:	468b      	mov	fp, r1
    65b4:	19d9      	adds	r1, r3, r7
    65b6:	2300      	movs	r3, #0
    65b8:	e9cd ab02 	strd	sl, fp, [sp, #8]
    65bc:	9302      	str	r3, [sp, #8]
    65be:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    65c2:	2000      	movs	r0, #0
    65c4:	4606      	mov	r6, r0
    65c6:	460f      	mov	r7, r1
    65c8:	4602      	mov	r2, r0
    65ca:	460b      	mov	r3, r1
    65cc:	4650      	mov	r0, sl
    65ce:	4659      	mov	r1, fp
    65d0:	f000 ff8c 	bl	74ec <__aeabi_dmul>
    65d4:	4602      	mov	r2, r0
    65d6:	460b      	mov	r3, r1
    65d8:	4640      	mov	r0, r8
    65da:	4649      	mov	r1, r9
    65dc:	f000 fdd2 	bl	7184 <__aeabi_dsub>
    65e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    65e4:	4680      	mov	r8, r0
    65e6:	4689      	mov	r9, r1
    65e8:	4630      	mov	r0, r6
    65ea:	4639      	mov	r1, r7
    65ec:	f000 fdca 	bl	7184 <__aeabi_dsub>
    65f0:	4602      	mov	r2, r0
    65f2:	460b      	mov	r3, r1
    65f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    65f8:	f000 fdc4 	bl	7184 <__aeabi_dsub>
    65fc:	4652      	mov	r2, sl
    65fe:	465b      	mov	r3, fp
    6600:	f000 ff74 	bl	74ec <__aeabi_dmul>
    6604:	4602      	mov	r2, r0
    6606:	460b      	mov	r3, r1
    6608:	4640      	mov	r0, r8
    660a:	4649      	mov	r1, r9
    660c:	f000 fdba 	bl	7184 <__aeabi_dsub>
    6610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    6614:	f000 ff6a 	bl	74ec <__aeabi_dmul>
    6618:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    661c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6620:	4632      	mov	r2, r6
    6622:	463b      	mov	r3, r7
    6624:	4630      	mov	r0, r6
    6626:	4639      	mov	r1, r7
    6628:	f000 ff60 	bl	74ec <__aeabi_dmul>
    662c:	a378      	add	r3, pc, #480	; (adr r3, 6810 <__ieee754_pow+0x4e0>)
    662e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6632:	4606      	mov	r6, r0
    6634:	460f      	mov	r7, r1
    6636:	f000 ff59 	bl	74ec <__aeabi_dmul>
    663a:	a377      	add	r3, pc, #476	; (adr r3, 6818 <__ieee754_pow+0x4e8>)
    663c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6640:	f000 fda2 	bl	7188 <__adddf3>
    6644:	4632      	mov	r2, r6
    6646:	463b      	mov	r3, r7
    6648:	f000 ff50 	bl	74ec <__aeabi_dmul>
    664c:	a374      	add	r3, pc, #464	; (adr r3, 6820 <__ieee754_pow+0x4f0>)
    664e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6652:	f000 fd99 	bl	7188 <__adddf3>
    6656:	4632      	mov	r2, r6
    6658:	463b      	mov	r3, r7
    665a:	f000 ff47 	bl	74ec <__aeabi_dmul>
    665e:	a372      	add	r3, pc, #456	; (adr r3, 6828 <__ieee754_pow+0x4f8>)
    6660:	e9d3 2300 	ldrd	r2, r3, [r3]
    6664:	f000 fd90 	bl	7188 <__adddf3>
    6668:	4632      	mov	r2, r6
    666a:	463b      	mov	r3, r7
    666c:	f000 ff3e 	bl	74ec <__aeabi_dmul>
    6670:	a36f      	add	r3, pc, #444	; (adr r3, 6830 <__ieee754_pow+0x500>)
    6672:	e9d3 2300 	ldrd	r2, r3, [r3]
    6676:	f000 fd87 	bl	7188 <__adddf3>
    667a:	4632      	mov	r2, r6
    667c:	463b      	mov	r3, r7
    667e:	f000 ff35 	bl	74ec <__aeabi_dmul>
    6682:	a36d      	add	r3, pc, #436	; (adr r3, 6838 <__ieee754_pow+0x508>)
    6684:	e9d3 2300 	ldrd	r2, r3, [r3]
    6688:	f000 fd7e 	bl	7188 <__adddf3>
    668c:	4632      	mov	r2, r6
    668e:	4680      	mov	r8, r0
    6690:	4689      	mov	r9, r1
    6692:	463b      	mov	r3, r7
    6694:	4630      	mov	r0, r6
    6696:	4639      	mov	r1, r7
    6698:	f000 ff28 	bl	74ec <__aeabi_dmul>
    669c:	4602      	mov	r2, r0
    669e:	460b      	mov	r3, r1
    66a0:	4640      	mov	r0, r8
    66a2:	4649      	mov	r1, r9
    66a4:	f000 ff22 	bl	74ec <__aeabi_dmul>
    66a8:	4652      	mov	r2, sl
    66aa:	4606      	mov	r6, r0
    66ac:	460f      	mov	r7, r1
    66ae:	465b      	mov	r3, fp
    66b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    66b4:	f000 fd68 	bl	7188 <__adddf3>
    66b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    66bc:	f000 ff16 	bl	74ec <__aeabi_dmul>
    66c0:	4632      	mov	r2, r6
    66c2:	463b      	mov	r3, r7
    66c4:	f000 fd60 	bl	7188 <__adddf3>
    66c8:	4652      	mov	r2, sl
    66ca:	4680      	mov	r8, r0
    66cc:	4689      	mov	r9, r1
    66ce:	465b      	mov	r3, fp
    66d0:	4650      	mov	r0, sl
    66d2:	4659      	mov	r1, fp
    66d4:	f000 ff0a 	bl	74ec <__aeabi_dmul>
    66d8:	2200      	movs	r2, #0
    66da:	4b63      	ldr	r3, [pc, #396]	; (6868 <__ieee754_pow+0x538>)
    66dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    66e0:	f000 fd52 	bl	7188 <__adddf3>
    66e4:	4642      	mov	r2, r8
    66e6:	464b      	mov	r3, r9
    66e8:	f000 fd4e 	bl	7188 <__adddf3>
    66ec:	9802      	ldr	r0, [sp, #8]
    66ee:	460f      	mov	r7, r1
    66f0:	4606      	mov	r6, r0
    66f2:	4632      	mov	r2, r6
    66f4:	463b      	mov	r3, r7
    66f6:	4650      	mov	r0, sl
    66f8:	4659      	mov	r1, fp
    66fa:	f000 fef7 	bl	74ec <__aeabi_dmul>
    66fe:	2200      	movs	r2, #0
    6700:	4682      	mov	sl, r0
    6702:	468b      	mov	fp, r1
    6704:	4b58      	ldr	r3, [pc, #352]	; (6868 <__ieee754_pow+0x538>)
    6706:	4630      	mov	r0, r6
    6708:	4639      	mov	r1, r7
    670a:	f000 fd3b 	bl	7184 <__aeabi_dsub>
    670e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    6712:	f000 fd37 	bl	7184 <__aeabi_dsub>
    6716:	4602      	mov	r2, r0
    6718:	460b      	mov	r3, r1
    671a:	4640      	mov	r0, r8
    671c:	4649      	mov	r1, r9
    671e:	f000 fd31 	bl	7184 <__aeabi_dsub>
    6722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6726:	f000 fee1 	bl	74ec <__aeabi_dmul>
    672a:	4632      	mov	r2, r6
    672c:	4680      	mov	r8, r0
    672e:	4689      	mov	r9, r1
    6730:	463b      	mov	r3, r7
    6732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    6736:	f000 fed9 	bl	74ec <__aeabi_dmul>
    673a:	4602      	mov	r2, r0
    673c:	460b      	mov	r3, r1
    673e:	4640      	mov	r0, r8
    6740:	4649      	mov	r1, r9
    6742:	f000 fd21 	bl	7188 <__adddf3>
    6746:	4680      	mov	r8, r0
    6748:	4689      	mov	r9, r1
    674a:	4602      	mov	r2, r0
    674c:	460b      	mov	r3, r1
    674e:	4650      	mov	r0, sl
    6750:	4659      	mov	r1, fp
    6752:	e9cd ab04 	strd	sl, fp, [sp, #16]
    6756:	f000 fd17 	bl	7188 <__adddf3>
    675a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    675e:	a338      	add	r3, pc, #224	; (adr r3, 6840 <__ieee754_pow+0x510>)
    6760:	e9d3 2300 	ldrd	r2, r3, [r3]
    6764:	4650      	mov	r0, sl
    6766:	460f      	mov	r7, r1
    6768:	f000 fec0 	bl	74ec <__aeabi_dmul>
    676c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6770:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6774:	4639      	mov	r1, r7
    6776:	4650      	mov	r0, sl
    6778:	f000 fd04 	bl	7184 <__aeabi_dsub>
    677c:	4602      	mov	r2, r0
    677e:	460b      	mov	r3, r1
    6780:	4640      	mov	r0, r8
    6782:	4649      	mov	r1, r9
    6784:	f000 fcfe 	bl	7184 <__aeabi_dsub>
    6788:	a32f      	add	r3, pc, #188	; (adr r3, 6848 <__ieee754_pow+0x518>)
    678a:	e9d3 2300 	ldrd	r2, r3, [r3]
    678e:	f000 fead 	bl	74ec <__aeabi_dmul>
    6792:	a32f      	add	r3, pc, #188	; (adr r3, 6850 <__ieee754_pow+0x520>)
    6794:	e9d3 2300 	ldrd	r2, r3, [r3]
    6798:	4680      	mov	r8, r0
    679a:	4689      	mov	r9, r1
    679c:	4650      	mov	r0, sl
    679e:	4639      	mov	r1, r7
    67a0:	f000 fea4 	bl	74ec <__aeabi_dmul>
    67a4:	4602      	mov	r2, r0
    67a6:	460b      	mov	r3, r1
    67a8:	4640      	mov	r0, r8
    67aa:	4649      	mov	r1, r9
    67ac:	f000 fcec 	bl	7188 <__adddf3>
    67b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    67b4:	f000 fce8 	bl	7188 <__adddf3>
    67b8:	4680      	mov	r8, r0
    67ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    67bc:	4689      	mov	r9, r1
    67be:	f000 fe2f 	bl	7420 <__aeabi_i2d>
    67c2:	4642      	mov	r2, r8
    67c4:	4606      	mov	r6, r0
    67c6:	460f      	mov	r7, r1
    67c8:	464b      	mov	r3, r9
    67ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    67ce:	f000 fcdb 	bl	7188 <__adddf3>
    67d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    67d6:	f000 fcd7 	bl	7188 <__adddf3>
    67da:	4632      	mov	r2, r6
    67dc:	463b      	mov	r3, r7
    67de:	f000 fcd3 	bl	7188 <__adddf3>
    67e2:	4632      	mov	r2, r6
    67e4:	463b      	mov	r3, r7
    67e6:	4650      	mov	r0, sl
    67e8:	468b      	mov	fp, r1
    67ea:	f000 fccb 	bl	7184 <__aeabi_dsub>
    67ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    67f2:	f000 fcc7 	bl	7184 <__aeabi_dsub>
    67f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    67fa:	f000 fcc3 	bl	7184 <__aeabi_dsub>
    67fe:	4602      	mov	r2, r0
    6800:	460b      	mov	r3, r1
    6802:	4640      	mov	r0, r8
    6804:	4649      	mov	r1, r9
    6806:	f000 fcbd 	bl	7184 <__aeabi_dsub>
    680a:	4680      	mov	r8, r0
    680c:	e02e      	b.n	686c <__ieee754_pow+0x53c>
    680e:	bf00      	nop
    6810:	4a454eef 	.word	0x4a454eef
    6814:	3fca7e28 	.word	0x3fca7e28
    6818:	93c9db65 	.word	0x93c9db65
    681c:	3fcd864a 	.word	0x3fcd864a
    6820:	a91d4101 	.word	0xa91d4101
    6824:	3fd17460 	.word	0x3fd17460
    6828:	518f264d 	.word	0x518f264d
    682c:	3fd55555 	.word	0x3fd55555
    6830:	db6fabff 	.word	0xdb6fabff
    6834:	3fdb6db6 	.word	0x3fdb6db6
    6838:	33333303 	.word	0x33333303
    683c:	3fe33333 	.word	0x3fe33333
    6840:	e0000000 	.word	0xe0000000
    6844:	3feec709 	.word	0x3feec709
    6848:	dc3a03fd 	.word	0xdc3a03fd
    684c:	3feec709 	.word	0x3feec709
    6850:	145b01f5 	.word	0x145b01f5
    6854:	be3e2fe0 	.word	0xbe3e2fe0
    6858:	43400000 	.word	0x43400000
    685c:	0003988e 	.word	0x0003988e
    6860:	000bb679 	.word	0x000bb679
    6864:	3ff00000 	.word	0x3ff00000
    6868:	40080000 	.word	0x40080000
    686c:	4689      	mov	r9, r1
    686e:	3c01      	subs	r4, #1
    6870:	ea54 0305 	orrs.w	r3, r4, r5
    6874:	e9dd 0100 	ldrd	r0, r1, [sp]
    6878:	bf14      	ite	ne
    687a:	4cd9      	ldrne	r4, [pc, #868]	; (6be0 <__ieee754_pow+0x8b0>)
    687c:	4cd9      	ldreq	r4, [pc, #868]	; (6be4 <__ieee754_pow+0x8b4>)
    687e:	2300      	movs	r3, #0
    6880:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6884:	4603      	mov	r3, r0
    6886:	460c      	mov	r4, r1
    6888:	e9cd 3402 	strd	r3, r4, [sp, #8]
    688c:	2300      	movs	r3, #0
    688e:	9302      	str	r3, [sp, #8]
    6890:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    6894:	4622      	mov	r2, r4
    6896:	462b      	mov	r3, r5
    6898:	f000 fc74 	bl	7184 <__aeabi_dsub>
    689c:	4652      	mov	r2, sl
    689e:	465b      	mov	r3, fp
    68a0:	f000 fe24 	bl	74ec <__aeabi_dmul>
    68a4:	e9dd 2300 	ldrd	r2, r3, [sp]
    68a8:	4606      	mov	r6, r0
    68aa:	460f      	mov	r7, r1
    68ac:	4640      	mov	r0, r8
    68ae:	4649      	mov	r1, r9
    68b0:	f000 fe1c 	bl	74ec <__aeabi_dmul>
    68b4:	4602      	mov	r2, r0
    68b6:	460b      	mov	r3, r1
    68b8:	4630      	mov	r0, r6
    68ba:	4639      	mov	r1, r7
    68bc:	f000 fc64 	bl	7188 <__adddf3>
    68c0:	4622      	mov	r2, r4
    68c2:	4680      	mov	r8, r0
    68c4:	4689      	mov	r9, r1
    68c6:	462b      	mov	r3, r5
    68c8:	4650      	mov	r0, sl
    68ca:	4659      	mov	r1, fp
    68cc:	e9cd 8900 	strd	r8, r9, [sp]
    68d0:	f000 fe0c 	bl	74ec <__aeabi_dmul>
    68d4:	460b      	mov	r3, r1
    68d6:	4602      	mov	r2, r0
    68d8:	4606      	mov	r6, r0
    68da:	460f      	mov	r7, r1
    68dc:	4640      	mov	r0, r8
    68de:	4649      	mov	r1, r9
    68e0:	f000 fc52 	bl	7188 <__adddf3>
    68e4:	4bc0      	ldr	r3, [pc, #768]	; (6be8 <__ieee754_pow+0x8b8>)
    68e6:	4299      	cmp	r1, r3
    68e8:	4604      	mov	r4, r0
    68ea:	460d      	mov	r5, r1
    68ec:	468a      	mov	sl, r1
    68ee:	f340 8116 	ble.w	6b1e <__ieee754_pow+0x7ee>
    68f2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    68f6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    68fa:	4303      	orrs	r3, r0
    68fc:	f040 81ea 	bne.w	6cd4 <__ieee754_pow+0x9a4>
    6900:	a3a3      	add	r3, pc, #652	; (adr r3, 6b90 <__ieee754_pow+0x860>)
    6902:	e9d3 2300 	ldrd	r2, r3, [r3]
    6906:	e9dd 0100 	ldrd	r0, r1, [sp]
    690a:	f000 fc3d 	bl	7188 <__adddf3>
    690e:	4632      	mov	r2, r6
    6910:	4680      	mov	r8, r0
    6912:	4689      	mov	r9, r1
    6914:	463b      	mov	r3, r7
    6916:	4620      	mov	r0, r4
    6918:	4629      	mov	r1, r5
    691a:	f000 fc33 	bl	7184 <__aeabi_dsub>
    691e:	4602      	mov	r2, r0
    6920:	460b      	mov	r3, r1
    6922:	4640      	mov	r0, r8
    6924:	4649      	mov	r1, r9
    6926:	f001 f871 	bl	7a0c <__aeabi_dcmpgt>
    692a:	2800      	cmp	r0, #0
    692c:	f040 81d2 	bne.w	6cd4 <__ieee754_pow+0x9a4>
    6930:	46a8      	mov	r8, r5
    6932:	ea4f 5328 	mov.w	r3, r8, asr #20
    6936:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    693a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    693e:	fa42 f303 	asr.w	r3, r2, r3
    6942:	4453      	add	r3, sl
    6944:	f3c3 520a 	ubfx	r2, r3, #20, #11
    6948:	4da8      	ldr	r5, [pc, #672]	; (6bec <__ieee754_pow+0x8bc>)
    694a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    694e:	4115      	asrs	r5, r2
    6950:	f3c3 0413 	ubfx	r4, r3, #0, #20
    6954:	ea23 0105 	bic.w	r1, r3, r5
    6958:	2000      	movs	r0, #0
    695a:	f1c2 0b14 	rsb	fp, r2, #20
    695e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    6962:	f1ba 0f00 	cmp.w	sl, #0
    6966:	4602      	mov	r2, r0
    6968:	460b      	mov	r3, r1
    696a:	fa44 fb0b 	asr.w	fp, r4, fp
    696e:	4630      	mov	r0, r6
    6970:	4639      	mov	r1, r7
    6972:	bfb8      	it	lt
    6974:	f1cb 0b00 	rsblt	fp, fp, #0
    6978:	f000 fc04 	bl	7184 <__aeabi_dsub>
    697c:	4602      	mov	r2, r0
    697e:	460b      	mov	r3, r1
    6980:	4606      	mov	r6, r0
    6982:	460f      	mov	r7, r1
    6984:	e9dd 0100 	ldrd	r0, r1, [sp]
    6988:	f000 fbfe 	bl	7188 <__adddf3>
    698c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    6990:	460d      	mov	r5, r1
    6992:	2400      	movs	r4, #0
    6994:	a380      	add	r3, pc, #512	; (adr r3, 6b98 <__ieee754_pow+0x868>)
    6996:	e9d3 2300 	ldrd	r2, r3, [r3]
    699a:	4620      	mov	r0, r4
    699c:	4629      	mov	r1, r5
    699e:	f000 fda5 	bl	74ec <__aeabi_dmul>
    69a2:	4632      	mov	r2, r6
    69a4:	4680      	mov	r8, r0
    69a6:	4689      	mov	r9, r1
    69a8:	463b      	mov	r3, r7
    69aa:	4620      	mov	r0, r4
    69ac:	4629      	mov	r1, r5
    69ae:	f000 fbe9 	bl	7184 <__aeabi_dsub>
    69b2:	4602      	mov	r2, r0
    69b4:	460b      	mov	r3, r1
    69b6:	e9dd 0100 	ldrd	r0, r1, [sp]
    69ba:	f000 fbe3 	bl	7184 <__aeabi_dsub>
    69be:	a378      	add	r3, pc, #480	; (adr r3, 6ba0 <__ieee754_pow+0x870>)
    69c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    69c4:	f000 fd92 	bl	74ec <__aeabi_dmul>
    69c8:	a377      	add	r3, pc, #476	; (adr r3, 6ba8 <__ieee754_pow+0x878>)
    69ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    69ce:	4606      	mov	r6, r0
    69d0:	460f      	mov	r7, r1
    69d2:	4620      	mov	r0, r4
    69d4:	4629      	mov	r1, r5
    69d6:	f000 fd89 	bl	74ec <__aeabi_dmul>
    69da:	4602      	mov	r2, r0
    69dc:	460b      	mov	r3, r1
    69de:	4630      	mov	r0, r6
    69e0:	4639      	mov	r1, r7
    69e2:	f000 fbd1 	bl	7188 <__adddf3>
    69e6:	4606      	mov	r6, r0
    69e8:	460f      	mov	r7, r1
    69ea:	4602      	mov	r2, r0
    69ec:	460b      	mov	r3, r1
    69ee:	4640      	mov	r0, r8
    69f0:	4649      	mov	r1, r9
    69f2:	f000 fbc9 	bl	7188 <__adddf3>
    69f6:	4642      	mov	r2, r8
    69f8:	464b      	mov	r3, r9
    69fa:	4604      	mov	r4, r0
    69fc:	460d      	mov	r5, r1
    69fe:	f000 fbc1 	bl	7184 <__aeabi_dsub>
    6a02:	4602      	mov	r2, r0
    6a04:	460b      	mov	r3, r1
    6a06:	4630      	mov	r0, r6
    6a08:	4639      	mov	r1, r7
    6a0a:	f000 fbbb 	bl	7184 <__aeabi_dsub>
    6a0e:	4622      	mov	r2, r4
    6a10:	4680      	mov	r8, r0
    6a12:	4689      	mov	r9, r1
    6a14:	462b      	mov	r3, r5
    6a16:	4620      	mov	r0, r4
    6a18:	4629      	mov	r1, r5
    6a1a:	f000 fd67 	bl	74ec <__aeabi_dmul>
    6a1e:	a364      	add	r3, pc, #400	; (adr r3, 6bb0 <__ieee754_pow+0x880>)
    6a20:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a24:	4606      	mov	r6, r0
    6a26:	460f      	mov	r7, r1
    6a28:	f000 fd60 	bl	74ec <__aeabi_dmul>
    6a2c:	a362      	add	r3, pc, #392	; (adr r3, 6bb8 <__ieee754_pow+0x888>)
    6a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a32:	f000 fba7 	bl	7184 <__aeabi_dsub>
    6a36:	4632      	mov	r2, r6
    6a38:	463b      	mov	r3, r7
    6a3a:	f000 fd57 	bl	74ec <__aeabi_dmul>
    6a3e:	a360      	add	r3, pc, #384	; (adr r3, 6bc0 <__ieee754_pow+0x890>)
    6a40:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a44:	f000 fba0 	bl	7188 <__adddf3>
    6a48:	4632      	mov	r2, r6
    6a4a:	463b      	mov	r3, r7
    6a4c:	f000 fd4e 	bl	74ec <__aeabi_dmul>
    6a50:	a35d      	add	r3, pc, #372	; (adr r3, 6bc8 <__ieee754_pow+0x898>)
    6a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a56:	f000 fb95 	bl	7184 <__aeabi_dsub>
    6a5a:	4632      	mov	r2, r6
    6a5c:	463b      	mov	r3, r7
    6a5e:	f000 fd45 	bl	74ec <__aeabi_dmul>
    6a62:	a35b      	add	r3, pc, #364	; (adr r3, 6bd0 <__ieee754_pow+0x8a0>)
    6a64:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a68:	f000 fb8e 	bl	7188 <__adddf3>
    6a6c:	4632      	mov	r2, r6
    6a6e:	463b      	mov	r3, r7
    6a70:	f000 fd3c 	bl	74ec <__aeabi_dmul>
    6a74:	4602      	mov	r2, r0
    6a76:	460b      	mov	r3, r1
    6a78:	4620      	mov	r0, r4
    6a7a:	4629      	mov	r1, r5
    6a7c:	f000 fb82 	bl	7184 <__aeabi_dsub>
    6a80:	4606      	mov	r6, r0
    6a82:	460f      	mov	r7, r1
    6a84:	4602      	mov	r2, r0
    6a86:	460b      	mov	r3, r1
    6a88:	4620      	mov	r0, r4
    6a8a:	4629      	mov	r1, r5
    6a8c:	f000 fd2e 	bl	74ec <__aeabi_dmul>
    6a90:	2200      	movs	r2, #0
    6a92:	e9cd 0100 	strd	r0, r1, [sp]
    6a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a9a:	4630      	mov	r0, r6
    6a9c:	4639      	mov	r1, r7
    6a9e:	f000 fb71 	bl	7184 <__aeabi_dsub>
    6aa2:	4602      	mov	r2, r0
    6aa4:	460b      	mov	r3, r1
    6aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
    6aaa:	f000 fe49 	bl	7740 <__aeabi_ddiv>
    6aae:	4642      	mov	r2, r8
    6ab0:	4606      	mov	r6, r0
    6ab2:	460f      	mov	r7, r1
    6ab4:	464b      	mov	r3, r9
    6ab6:	4620      	mov	r0, r4
    6ab8:	4629      	mov	r1, r5
    6aba:	f000 fd17 	bl	74ec <__aeabi_dmul>
    6abe:	4642      	mov	r2, r8
    6ac0:	464b      	mov	r3, r9
    6ac2:	f000 fb61 	bl	7188 <__adddf3>
    6ac6:	4602      	mov	r2, r0
    6ac8:	460b      	mov	r3, r1
    6aca:	4630      	mov	r0, r6
    6acc:	4639      	mov	r1, r7
    6ace:	f000 fb59 	bl	7184 <__aeabi_dsub>
    6ad2:	4622      	mov	r2, r4
    6ad4:	462b      	mov	r3, r5
    6ad6:	f000 fb55 	bl	7184 <__aeabi_dsub>
    6ada:	4602      	mov	r2, r0
    6adc:	460b      	mov	r3, r1
    6ade:	2000      	movs	r0, #0
    6ae0:	493f      	ldr	r1, [pc, #252]	; (6be0 <__ieee754_pow+0x8b0>)
    6ae2:	f000 fb4f 	bl	7184 <__aeabi_dsub>
    6ae6:	448a      	add	sl, r1
    6ae8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    6aec:	f2c0 8133 	blt.w	6d56 <__ieee754_pow+0xa26>
    6af0:	4651      	mov	r1, sl
    6af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6af6:	f000 fcf9 	bl	74ec <__aeabi_dmul>
    6afa:	e45b      	b.n	63b4 <__ieee754_pow+0x84>
    6afc:	4642      	mov	r2, r8
    6afe:	4640      	mov	r0, r8
    6b00:	464b      	mov	r3, r9
    6b02:	4649      	mov	r1, r9
    6b04:	f000 fcf2 	bl	74ec <__aeabi_dmul>
    6b08:	e454      	b.n	63b4 <__ieee754_pow+0x84>
    6b0a:	f1ba 0f00 	cmp.w	sl, #0
    6b0e:	f6bf ace0 	bge.w	64d2 <__ieee754_pow+0x1a2>
    6b12:	e9dd 3400 	ldrd	r3, r4, [sp]
    6b16:	4618      	mov	r0, r3
    6b18:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    6b1c:	e44a      	b.n	63b4 <__ieee754_pow+0x84>
    6b1e:	4b34      	ldr	r3, [pc, #208]	; (6bf0 <__ieee754_pow+0x8c0>)
    6b20:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    6b24:	4598      	cmp	r8, r3
    6b26:	f340 80f2 	ble.w	6d0e <__ieee754_pow+0x9de>
    6b2a:	4b32      	ldr	r3, [pc, #200]	; (6bf4 <__ieee754_pow+0x8c4>)
    6b2c:	440b      	add	r3, r1
    6b2e:	4303      	orrs	r3, r0
    6b30:	d10c      	bne.n	6b4c <__ieee754_pow+0x81c>
    6b32:	4632      	mov	r2, r6
    6b34:	463b      	mov	r3, r7
    6b36:	f000 fb25 	bl	7184 <__aeabi_dsub>
    6b3a:	4602      	mov	r2, r0
    6b3c:	460b      	mov	r3, r1
    6b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
    6b42:	f000 ff4f 	bl	79e4 <__aeabi_dcmple>
    6b46:	2800      	cmp	r0, #0
    6b48:	f43f aef3 	beq.w	6932 <__ieee754_pow+0x602>
    6b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    6b50:	a321      	add	r3, pc, #132	; (adr r3, 6bd8 <__ieee754_pow+0x8a8>)
    6b52:	e9d3 2300 	ldrd	r2, r3, [r3]
    6b56:	f000 fcc9 	bl	74ec <__aeabi_dmul>
    6b5a:	a31f      	add	r3, pc, #124	; (adr r3, 6bd8 <__ieee754_pow+0x8a8>)
    6b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6b60:	f000 fcc4 	bl	74ec <__aeabi_dmul>
    6b64:	e426      	b.n	63b4 <__ieee754_pow+0x84>
    6b66:	4602      	mov	r2, r0
    6b68:	460b      	mov	r3, r1
    6b6a:	2000      	movs	r0, #0
    6b6c:	491c      	ldr	r1, [pc, #112]	; (6be0 <__ieee754_pow+0x8b0>)
    6b6e:	f000 fde7 	bl	7740 <__aeabi_ddiv>
    6b72:	e43c      	b.n	63ee <__ieee754_pow+0xbe>
    6b74:	2200      	movs	r2, #0
    6b76:	2300      	movs	r3, #0
    6b78:	e9cd 2308 	strd	r2, r3, [sp, #32]
    6b7c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    6b80:	4b17      	ldr	r3, [pc, #92]	; (6be0 <__ieee754_pow+0x8b0>)
    6b82:	2200      	movs	r2, #0
    6b84:	2700      	movs	r7, #0
    6b86:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6b8a:	e4e6      	b.n	655a <__ieee754_pow+0x22a>
    6b8c:	f3af 8000 	nop.w
    6b90:	652b82fe 	.word	0x652b82fe
    6b94:	3c971547 	.word	0x3c971547
    6b98:	00000000 	.word	0x00000000
    6b9c:	3fe62e43 	.word	0x3fe62e43
    6ba0:	fefa39ef 	.word	0xfefa39ef
    6ba4:	3fe62e42 	.word	0x3fe62e42
    6ba8:	0ca86c39 	.word	0x0ca86c39
    6bac:	be205c61 	.word	0xbe205c61
    6bb0:	72bea4d0 	.word	0x72bea4d0
    6bb4:	3e663769 	.word	0x3e663769
    6bb8:	c5d26bf1 	.word	0xc5d26bf1
    6bbc:	3ebbbd41 	.word	0x3ebbbd41
    6bc0:	af25de2c 	.word	0xaf25de2c
    6bc4:	3f11566a 	.word	0x3f11566a
    6bc8:	16bebd93 	.word	0x16bebd93
    6bcc:	3f66c16c 	.word	0x3f66c16c
    6bd0:	5555553e 	.word	0x5555553e
    6bd4:	3fc55555 	.word	0x3fc55555
    6bd8:	c2f8f359 	.word	0xc2f8f359
    6bdc:	01a56e1f 	.word	0x01a56e1f
    6be0:	3ff00000 	.word	0x3ff00000
    6be4:	bff00000 	.word	0xbff00000
    6be8:	408fffff 	.word	0x408fffff
    6bec:	000fffff 	.word	0x000fffff
    6bf0:	4090cbff 	.word	0x4090cbff
    6bf4:	3f6f3400 	.word	0x3f6f3400
    6bf8:	4b6b      	ldr	r3, [pc, #428]	; (6da8 <__ieee754_pow+0xa78>)
    6bfa:	429e      	cmp	r6, r3
    6bfc:	f77f ac66 	ble.w	64cc <__ieee754_pow+0x19c>
    6c00:	4b6a      	ldr	r3, [pc, #424]	; (6dac <__ieee754_pow+0xa7c>)
    6c02:	429e      	cmp	r6, r3
    6c04:	f73f ac13 	bgt.w	642e <__ieee754_pow+0xfe>
    6c08:	2200      	movs	r2, #0
    6c0a:	4b68      	ldr	r3, [pc, #416]	; (6dac <__ieee754_pow+0xa7c>)
    6c0c:	f000 faba 	bl	7184 <__aeabi_dsub>
    6c10:	a357      	add	r3, pc, #348	; (adr r3, 6d70 <__ieee754_pow+0xa40>)
    6c12:	e9d3 2300 	ldrd	r2, r3, [r3]
    6c16:	4606      	mov	r6, r0
    6c18:	460f      	mov	r7, r1
    6c1a:	f000 fc67 	bl	74ec <__aeabi_dmul>
    6c1e:	a356      	add	r3, pc, #344	; (adr r3, 6d78 <__ieee754_pow+0xa48>)
    6c20:	e9d3 2300 	ldrd	r2, r3, [r3]
    6c24:	4680      	mov	r8, r0
    6c26:	4689      	mov	r9, r1
    6c28:	4630      	mov	r0, r6
    6c2a:	4639      	mov	r1, r7
    6c2c:	f000 fc5e 	bl	74ec <__aeabi_dmul>
    6c30:	2200      	movs	r2, #0
    6c32:	4682      	mov	sl, r0
    6c34:	468b      	mov	fp, r1
    6c36:	4b5e      	ldr	r3, [pc, #376]	; (6db0 <__ieee754_pow+0xa80>)
    6c38:	4630      	mov	r0, r6
    6c3a:	4639      	mov	r1, r7
    6c3c:	f000 fc56 	bl	74ec <__aeabi_dmul>
    6c40:	4602      	mov	r2, r0
    6c42:	460b      	mov	r3, r1
    6c44:	a14e      	add	r1, pc, #312	; (adr r1, 6d80 <__ieee754_pow+0xa50>)
    6c46:	e9d1 0100 	ldrd	r0, r1, [r1]
    6c4a:	f000 fa9b 	bl	7184 <__aeabi_dsub>
    6c4e:	4632      	mov	r2, r6
    6c50:	463b      	mov	r3, r7
    6c52:	f000 fc4b 	bl	74ec <__aeabi_dmul>
    6c56:	4602      	mov	r2, r0
    6c58:	460b      	mov	r3, r1
    6c5a:	2000      	movs	r0, #0
    6c5c:	4955      	ldr	r1, [pc, #340]	; (6db4 <__ieee754_pow+0xa84>)
    6c5e:	f000 fa91 	bl	7184 <__aeabi_dsub>
    6c62:	4632      	mov	r2, r6
    6c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6c68:	463b      	mov	r3, r7
    6c6a:	4630      	mov	r0, r6
    6c6c:	4639      	mov	r1, r7
    6c6e:	f000 fc3d 	bl	74ec <__aeabi_dmul>
    6c72:	4602      	mov	r2, r0
    6c74:	460b      	mov	r3, r1
    6c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6c7a:	f000 fc37 	bl	74ec <__aeabi_dmul>
    6c7e:	a342      	add	r3, pc, #264	; (adr r3, 6d88 <__ieee754_pow+0xa58>)
    6c80:	e9d3 2300 	ldrd	r2, r3, [r3]
    6c84:	f000 fc32 	bl	74ec <__aeabi_dmul>
    6c88:	4602      	mov	r2, r0
    6c8a:	460b      	mov	r3, r1
    6c8c:	4650      	mov	r0, sl
    6c8e:	4659      	mov	r1, fp
    6c90:	f000 fa78 	bl	7184 <__aeabi_dsub>
    6c94:	4602      	mov	r2, r0
    6c96:	460b      	mov	r3, r1
    6c98:	4606      	mov	r6, r0
    6c9a:	460f      	mov	r7, r1
    6c9c:	4640      	mov	r0, r8
    6c9e:	4649      	mov	r1, r9
    6ca0:	f000 fa72 	bl	7188 <__adddf3>
    6ca4:	4642      	mov	r2, r8
    6ca6:	464b      	mov	r3, r9
    6ca8:	2000      	movs	r0, #0
    6caa:	4682      	mov	sl, r0
    6cac:	468b      	mov	fp, r1
    6cae:	f000 fa69 	bl	7184 <__aeabi_dsub>
    6cb2:	4602      	mov	r2, r0
    6cb4:	460b      	mov	r3, r1
    6cb6:	4630      	mov	r0, r6
    6cb8:	4639      	mov	r1, r7
    6cba:	f000 fa63 	bl	7184 <__aeabi_dsub>
    6cbe:	4680      	mov	r8, r0
    6cc0:	4689      	mov	r9, r1
    6cc2:	e5d4      	b.n	686e <__ieee754_pow+0x53e>
    6cc4:	4642      	mov	r2, r8
    6cc6:	464b      	mov	r3, r9
    6cc8:	2000      	movs	r0, #0
    6cca:	4938      	ldr	r1, [pc, #224]	; (6dac <__ieee754_pow+0xa7c>)
    6ccc:	f000 fd38 	bl	7740 <__aeabi_ddiv>
    6cd0:	f7ff bb70 	b.w	63b4 <__ieee754_pow+0x84>
    6cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    6cd8:	a32d      	add	r3, pc, #180	; (adr r3, 6d90 <__ieee754_pow+0xa60>)
    6cda:	e9d3 2300 	ldrd	r2, r3, [r3]
    6cde:	f000 fc05 	bl	74ec <__aeabi_dmul>
    6ce2:	a32b      	add	r3, pc, #172	; (adr r3, 6d90 <__ieee754_pow+0xa60>)
    6ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ce8:	f000 fc00 	bl	74ec <__aeabi_dmul>
    6cec:	f7ff bb62 	b.w	63b4 <__ieee754_pow+0x84>
    6cf0:	f1be 0f00 	cmp.w	lr, #0
    6cf4:	f47f ab69 	bne.w	63ca <__ieee754_pow+0x9a>
    6cf8:	f1c3 0314 	rsb	r3, r3, #20
    6cfc:	fa47 f203 	asr.w	r2, r7, r3
    6d00:	fa02 f303 	lsl.w	r3, r2, r3
    6d04:	429f      	cmp	r7, r3
    6d06:	d02a      	beq.n	6d5e <__ieee754_pow+0xa2e>
    6d08:	4674      	mov	r4, lr
    6d0a:	f7ff bb36 	b.w	637a <__ieee754_pow+0x4a>
    6d0e:	4b29      	ldr	r3, [pc, #164]	; (6db4 <__ieee754_pow+0xa84>)
    6d10:	4598      	cmp	r8, r3
    6d12:	f73f ae0e 	bgt.w	6932 <__ieee754_pow+0x602>
    6d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6d1a:	4692      	mov	sl, r2
    6d1c:	4693      	mov	fp, r2
    6d1e:	e638      	b.n	6992 <__ieee754_pow+0x662>
    6d20:	4602      	mov	r2, r0
    6d22:	460b      	mov	r3, r1
    6d24:	f000 fa2e 	bl	7184 <__aeabi_dsub>
    6d28:	4602      	mov	r2, r0
    6d2a:	460b      	mov	r3, r1
    6d2c:	f000 fd08 	bl	7740 <__aeabi_ddiv>
    6d30:	f7ff bb40 	b.w	63b4 <__ieee754_pow+0x84>
    6d34:	a318      	add	r3, pc, #96	; (adr r3, 6d98 <__ieee754_pow+0xa68>)
    6d36:	e9d3 2300 	ldrd	r2, r3, [r3]
    6d3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    6d3e:	a318      	add	r3, pc, #96	; (adr r3, 6da0 <__ieee754_pow+0xa70>)
    6d40:	e9d3 2300 	ldrd	r2, r3, [r3]
    6d44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    6d48:	4b1b      	ldr	r3, [pc, #108]	; (6db8 <__ieee754_pow+0xa88>)
    6d4a:	2200      	movs	r2, #0
    6d4c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    6d50:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6d54:	e401      	b.n	655a <__ieee754_pow+0x22a>
    6d56:	465a      	mov	r2, fp
    6d58:	f000 f98a 	bl	7070 <scalbn>
    6d5c:	e6c9      	b.n	6af2 <__ieee754_pow+0x7c2>
    6d5e:	f002 0201 	and.w	r2, r2, #1
    6d62:	f1c2 0402 	rsb	r4, r2, #2
    6d66:	f7ff bb08 	b.w	637a <__ieee754_pow+0x4a>
    6d6a:	bf00      	nop
    6d6c:	f3af 8000 	nop.w
    6d70:	60000000 	.word	0x60000000
    6d74:	3ff71547 	.word	0x3ff71547
    6d78:	f85ddf44 	.word	0xf85ddf44
    6d7c:	3e54ae0b 	.word	0x3e54ae0b
    6d80:	55555555 	.word	0x55555555
    6d84:	3fd55555 	.word	0x3fd55555
    6d88:	652b82fe 	.word	0x652b82fe
    6d8c:	3ff71547 	.word	0x3ff71547
    6d90:	8800759c 	.word	0x8800759c
    6d94:	7e37e43c 	.word	0x7e37e43c
    6d98:	40000000 	.word	0x40000000
    6d9c:	3fe2b803 	.word	0x3fe2b803
    6da0:	43cfd006 	.word	0x43cfd006
    6da4:	3e4cfdeb 	.word	0x3e4cfdeb
    6da8:	3feffffe 	.word	0x3feffffe
    6dac:	3ff00000 	.word	0x3ff00000
    6db0:	3fd00000 	.word	0x3fd00000
    6db4:	3fe00000 	.word	0x3fe00000
    6db8:	3ff80000 	.word	0x3ff80000

00006dbc <__ieee754_sqrt>:
    6dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6dc0:	4f5b      	ldr	r7, [pc, #364]	; (6f30 <__ieee754_sqrt+0x174>)
    6dc2:	438f      	bics	r7, r1
    6dc4:	4605      	mov	r5, r0
    6dc6:	460c      	mov	r4, r1
    6dc8:	f000 8092 	beq.w	6ef0 <__ieee754_sqrt+0x134>
    6dcc:	2900      	cmp	r1, #0
    6dce:	460b      	mov	r3, r1
    6dd0:	4602      	mov	r2, r0
    6dd2:	dd6f      	ble.n	6eb4 <__ieee754_sqrt+0xf8>
    6dd4:	150f      	asrs	r7, r1, #20
    6dd6:	d07b      	beq.n	6ed0 <__ieee754_sqrt+0x114>
    6dd8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    6ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6de0:	07f8      	lsls	r0, r7, #31
    6de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6de6:	d45c      	bmi.n	6ea2 <__ieee754_sqrt+0xe6>
    6de8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    6dec:	2600      	movs	r6, #0
    6dee:	440b      	add	r3, r1
    6df0:	107f      	asrs	r7, r7, #1
    6df2:	0052      	lsls	r2, r2, #1
    6df4:	46b6      	mov	lr, r6
    6df6:	2016      	movs	r0, #22
    6df8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6dfc:	eb0e 0401 	add.w	r4, lr, r1
    6e00:	429c      	cmp	r4, r3
    6e02:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    6e06:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6e0a:	dc03      	bgt.n	6e14 <__ieee754_sqrt+0x58>
    6e0c:	1b1b      	subs	r3, r3, r4
    6e0e:	eb04 0e01 	add.w	lr, r4, r1
    6e12:	440e      	add	r6, r1
    6e14:	3801      	subs	r0, #1
    6e16:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    6e1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    6e1e:	d1ed      	bne.n	6dfc <__ieee754_sqrt+0x40>
    6e20:	4684      	mov	ip, r0
    6e22:	2420      	movs	r4, #32
    6e24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    6e28:	e009      	b.n	6e3e <__ieee754_sqrt+0x82>
    6e2a:	d020      	beq.n	6e6e <__ieee754_sqrt+0xb2>
    6e2c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    6e30:	3c01      	subs	r4, #1
    6e32:	ea4f 0151 	mov.w	r1, r1, lsr #1
    6e36:	442b      	add	r3, r5
    6e38:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6e3c:	d020      	beq.n	6e80 <__ieee754_sqrt+0xc4>
    6e3e:	4573      	cmp	r3, lr
    6e40:	eb01 050c 	add.w	r5, r1, ip
    6e44:	ddf1      	ble.n	6e2a <__ieee754_sqrt+0x6e>
    6e46:	2d00      	cmp	r5, #0
    6e48:	eb05 0c01 	add.w	ip, r5, r1
    6e4c:	db09      	blt.n	6e62 <__ieee754_sqrt+0xa6>
    6e4e:	46f0      	mov	r8, lr
    6e50:	4295      	cmp	r5, r2
    6e52:	eba3 030e 	sub.w	r3, r3, lr
    6e56:	d900      	bls.n	6e5a <__ieee754_sqrt+0x9e>
    6e58:	3b01      	subs	r3, #1
    6e5a:	1b52      	subs	r2, r2, r5
    6e5c:	4408      	add	r0, r1
    6e5e:	46c6      	mov	lr, r8
    6e60:	e7e4      	b.n	6e2c <__ieee754_sqrt+0x70>
    6e62:	f1bc 0f00 	cmp.w	ip, #0
    6e66:	dbf2      	blt.n	6e4e <__ieee754_sqrt+0x92>
    6e68:	f10e 0801 	add.w	r8, lr, #1
    6e6c:	e7f0      	b.n	6e50 <__ieee754_sqrt+0x94>
    6e6e:	4295      	cmp	r5, r2
    6e70:	d8dc      	bhi.n	6e2c <__ieee754_sqrt+0x70>
    6e72:	2d00      	cmp	r5, #0
    6e74:	eb05 0c01 	add.w	ip, r5, r1
    6e78:	db44      	blt.n	6f04 <__ieee754_sqrt+0x148>
    6e7a:	4698      	mov	r8, r3
    6e7c:	2300      	movs	r3, #0
    6e7e:	e7ec      	b.n	6e5a <__ieee754_sqrt+0x9e>
    6e80:	4313      	orrs	r3, r2
    6e82:	d113      	bne.n	6eac <__ieee754_sqrt+0xf0>
    6e84:	0840      	lsrs	r0, r0, #1
    6e86:	1073      	asrs	r3, r6, #1
    6e88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    6e8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6e90:	07f2      	lsls	r2, r6, #31
    6e92:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    6e96:	bf48      	it	mi
    6e98:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    6e9c:	4649      	mov	r1, r9
    6e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6ea2:	005b      	lsls	r3, r3, #1
    6ea4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    6ea8:	0052      	lsls	r2, r2, #1
    6eaa:	e79d      	b.n	6de8 <__ieee754_sqrt+0x2c>
    6eac:	1c41      	adds	r1, r0, #1
    6eae:	d02d      	beq.n	6f0c <__ieee754_sqrt+0x150>
    6eb0:	3001      	adds	r0, #1
    6eb2:	e7e7      	b.n	6e84 <__ieee754_sqrt+0xc8>
    6eb4:	4606      	mov	r6, r0
    6eb6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    6eba:	433e      	orrs	r6, r7
    6ebc:	d0ef      	beq.n	6e9e <__ieee754_sqrt+0xe2>
    6ebe:	bb69      	cbnz	r1, 6f1c <__ieee754_sqrt+0x160>
    6ec0:	460f      	mov	r7, r1
    6ec2:	0ad3      	lsrs	r3, r2, #11
    6ec4:	3f15      	subs	r7, #21
    6ec6:	0552      	lsls	r2, r2, #21
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d0fa      	beq.n	6ec2 <__ieee754_sqrt+0x106>
    6ecc:	02de      	lsls	r6, r3, #11
    6ece:	d420      	bmi.n	6f12 <__ieee754_sqrt+0x156>
    6ed0:	2400      	movs	r4, #0
    6ed2:	e000      	b.n	6ed6 <__ieee754_sqrt+0x11a>
    6ed4:	4604      	mov	r4, r0
    6ed6:	005b      	lsls	r3, r3, #1
    6ed8:	02dd      	lsls	r5, r3, #11
    6eda:	f104 0001 	add.w	r0, r4, #1
    6ede:	d5f9      	bpl.n	6ed4 <__ieee754_sqrt+0x118>
    6ee0:	f1c0 0120 	rsb	r1, r0, #32
    6ee4:	fa22 f101 	lsr.w	r1, r2, r1
    6ee8:	430b      	orrs	r3, r1
    6eea:	1b3f      	subs	r7, r7, r4
    6eec:	4082      	lsls	r2, r0
    6eee:	e773      	b.n	6dd8 <__ieee754_sqrt+0x1c>
    6ef0:	4602      	mov	r2, r0
    6ef2:	460b      	mov	r3, r1
    6ef4:	f000 fafa 	bl	74ec <__aeabi_dmul>
    6ef8:	462a      	mov	r2, r5
    6efa:	4623      	mov	r3, r4
    6efc:	f000 f944 	bl	7188 <__adddf3>
    6f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f04:	f1bc 0f00 	cmp.w	ip, #0
    6f08:	daae      	bge.n	6e68 <__ieee754_sqrt+0xac>
    6f0a:	e7b6      	b.n	6e7a <__ieee754_sqrt+0xbe>
    6f0c:	3601      	adds	r6, #1
    6f0e:	4620      	mov	r0, r4
    6f10:	e7b9      	b.n	6e86 <__ieee754_sqrt+0xca>
    6f12:	2000      	movs	r0, #0
    6f14:	2120      	movs	r1, #32
    6f16:	f04f 34ff 	mov.w	r4, #4294967295
    6f1a:	e7e3      	b.n	6ee4 <__ieee754_sqrt+0x128>
    6f1c:	4602      	mov	r2, r0
    6f1e:	460b      	mov	r3, r1
    6f20:	f000 f930 	bl	7184 <__aeabi_dsub>
    6f24:	4602      	mov	r2, r0
    6f26:	460b      	mov	r3, r1
    6f28:	f000 fc0a 	bl	7740 <__aeabi_ddiv>
    6f2c:	e7b7      	b.n	6e9e <__ieee754_sqrt+0xe2>
    6f2e:	bf00      	nop
    6f30:	7ff00000 	.word	0x7ff00000

00006f34 <fabs>:
    6f34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6f38:	4770      	bx	lr
    6f3a:	bf00      	nop

00006f3c <finite>:
    6f3c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    6f40:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    6f44:	0fc0      	lsrs	r0, r0, #31
    6f46:	4770      	bx	lr

00006f48 <matherr>:
    6f48:	2000      	movs	r0, #0
    6f4a:	4770      	bx	lr

00006f4c <nan>:
    6f4c:	2000      	movs	r0, #0
    6f4e:	4901      	ldr	r1, [pc, #4]	; (6f54 <nan+0x8>)
    6f50:	4770      	bx	lr
    6f52:	bf00      	nop
    6f54:	7ff80000 	.word	0x7ff80000

00006f58 <rint>:
    6f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f5a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
    6f5e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
    6f62:	2e13      	cmp	r6, #19
    6f64:	b083      	sub	sp, #12
    6f66:	4602      	mov	r2, r0
    6f68:	460b      	mov	r3, r1
    6f6a:	460c      	mov	r4, r1
    6f6c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
    6f70:	4607      	mov	r7, r0
    6f72:	dc2e      	bgt.n	6fd2 <rint+0x7a>
    6f74:	2e00      	cmp	r6, #0
    6f76:	db49      	blt.n	700c <rint+0xb4>
    6f78:	493a      	ldr	r1, [pc, #232]	; (7064 <rint+0x10c>)
    6f7a:	4131      	asrs	r1, r6
    6f7c:	ea03 0001 	and.w	r0, r3, r1
    6f80:	4310      	orrs	r0, r2
    6f82:	d02b      	beq.n	6fdc <rint+0x84>
    6f84:	0849      	lsrs	r1, r1, #1
    6f86:	400b      	ands	r3, r1
    6f88:	ea53 0702 	orrs.w	r7, r3, r2
    6f8c:	d00c      	beq.n	6fa8 <rint+0x50>
    6f8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    6f92:	2e13      	cmp	r6, #19
    6f94:	ea24 0101 	bic.w	r1, r4, r1
    6f98:	fa43 f406 	asr.w	r4, r3, r6
    6f9c:	ea44 0401 	orr.w	r4, r4, r1
    6fa0:	bf0c      	ite	eq
    6fa2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
    6fa6:	2700      	movne	r7, #0
    6fa8:	4b2f      	ldr	r3, [pc, #188]	; (7068 <rint+0x110>)
    6faa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    6fae:	4621      	mov	r1, r4
    6fb0:	e9d5 4500 	ldrd	r4, r5, [r5]
    6fb4:	4638      	mov	r0, r7
    6fb6:	4622      	mov	r2, r4
    6fb8:	462b      	mov	r3, r5
    6fba:	f000 f8e5 	bl	7188 <__adddf3>
    6fbe:	e9cd 0100 	strd	r0, r1, [sp]
    6fc2:	4622      	mov	r2, r4
    6fc4:	462b      	mov	r3, r5
    6fc6:	e9dd 0100 	ldrd	r0, r1, [sp]
    6fca:	f000 f8db 	bl	7184 <__aeabi_dsub>
    6fce:	b003      	add	sp, #12
    6fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fd2:	2e33      	cmp	r6, #51	; 0x33
    6fd4:	dd06      	ble.n	6fe4 <rint+0x8c>
    6fd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    6fda:	d040      	beq.n	705e <rint+0x106>
    6fdc:	4610      	mov	r0, r2
    6fde:	4619      	mov	r1, r3
    6fe0:	b003      	add	sp, #12
    6fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fe4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
    6fe8:	f04f 31ff 	mov.w	r1, #4294967295
    6fec:	fa21 f10e 	lsr.w	r1, r1, lr
    6ff0:	4208      	tst	r0, r1
    6ff2:	d0f3      	beq.n	6fdc <rint+0x84>
    6ff4:	0849      	lsrs	r1, r1, #1
    6ff6:	4208      	tst	r0, r1
    6ff8:	d0d6      	beq.n	6fa8 <rint+0x50>
    6ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ffe:	ea20 0101 	bic.w	r1, r0, r1
    7002:	fa43 fe0e 	asr.w	lr, r3, lr
    7006:	ea4e 0701 	orr.w	r7, lr, r1
    700a:	e7cd      	b.n	6fa8 <rint+0x50>
    700c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7010:	4301      	orrs	r1, r0
    7012:	d0e3      	beq.n	6fdc <rint+0x84>
    7014:	f3c3 0113 	ubfx	r1, r3, #0, #20
    7018:	4e13      	ldr	r6, [pc, #76]	; (7068 <rint+0x110>)
    701a:	4301      	orrs	r1, r0
    701c:	f1c1 0c00 	rsb	ip, r1, #0
    7020:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    7024:	e9d6 6700 	ldrd	r6, r7, [r6]
    7028:	ea4c 0c01 	orr.w	ip, ip, r1
    702c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
    7030:	0c5c      	lsrs	r4, r3, #17
    7032:	0464      	lsls	r4, r4, #17
    7034:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
    7038:	ea43 0104 	orr.w	r1, r3, r4
    703c:	4632      	mov	r2, r6
    703e:	463b      	mov	r3, r7
    7040:	f000 f8a2 	bl	7188 <__adddf3>
    7044:	e9cd 0100 	strd	r0, r1, [sp]
    7048:	4632      	mov	r2, r6
    704a:	463b      	mov	r3, r7
    704c:	e9dd 0100 	ldrd	r0, r1, [sp]
    7050:	f000 f898 	bl	7184 <__aeabi_dsub>
    7054:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    7058:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
    705c:	e7c0      	b.n	6fe0 <rint+0x88>
    705e:	f000 f893 	bl	7188 <__adddf3>
    7062:	e7bd      	b.n	6fe0 <rint+0x88>
    7064:	000fffff 	.word	0x000fffff
    7068:	0000bdd0 	.word	0x0000bdd0
    706c:	00000000 	.word	0x00000000

00007070 <scalbn>:
    7070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7072:	f3c1 560a 	ubfx	r6, r1, #20, #11
    7076:	4604      	mov	r4, r0
    7078:	460d      	mov	r5, r1
    707a:	460b      	mov	r3, r1
    707c:	4617      	mov	r7, r2
    707e:	bb0e      	cbnz	r6, 70c4 <scalbn+0x54>
    7080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    7084:	4303      	orrs	r3, r0
    7086:	4686      	mov	lr, r0
    7088:	d025      	beq.n	70d6 <scalbn+0x66>
    708a:	2200      	movs	r2, #0
    708c:	4b34      	ldr	r3, [pc, #208]	; (7160 <scalbn+0xf0>)
    708e:	f000 fa2d 	bl	74ec <__aeabi_dmul>
    7092:	4a34      	ldr	r2, [pc, #208]	; (7164 <scalbn+0xf4>)
    7094:	4297      	cmp	r7, r2
    7096:	4604      	mov	r4, r0
    7098:	460d      	mov	r5, r1
    709a:	460b      	mov	r3, r1
    709c:	db2a      	blt.n	70f4 <scalbn+0x84>
    709e:	f3c1 560a 	ubfx	r6, r1, #20, #11
    70a2:	3e36      	subs	r6, #54	; 0x36
    70a4:	443e      	add	r6, r7
    70a6:	f240 72fe 	movw	r2, #2046	; 0x7fe
    70aa:	4296      	cmp	r6, r2
    70ac:	dc28      	bgt.n	7100 <scalbn+0x90>
    70ae:	2e00      	cmp	r6, #0
    70b0:	dd12      	ble.n	70d8 <scalbn+0x68>
    70b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    70b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    70ba:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    70be:	4620      	mov	r0, r4
    70c0:	4629      	mov	r1, r5
    70c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
    70c8:	4296      	cmp	r6, r2
    70ca:	d1eb      	bne.n	70a4 <scalbn+0x34>
    70cc:	4602      	mov	r2, r0
    70ce:	460b      	mov	r3, r1
    70d0:	f000 f85a 	bl	7188 <__adddf3>
    70d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70d8:	f116 0f35 	cmn.w	r6, #53	; 0x35
    70dc:	da1d      	bge.n	711a <scalbn+0xaa>
    70de:	f24c 3350 	movw	r3, #50000	; 0xc350
    70e2:	429f      	cmp	r7, r3
    70e4:	4622      	mov	r2, r4
    70e6:	462b      	mov	r3, r5
    70e8:	dc25      	bgt.n	7136 <scalbn+0xc6>
    70ea:	a119      	add	r1, pc, #100	; (adr r1, 7150 <scalbn+0xe0>)
    70ec:	e9d1 0100 	ldrd	r0, r1, [r1]
    70f0:	f000 f83c 	bl	716c <copysign>
    70f4:	a316      	add	r3, pc, #88	; (adr r3, 7150 <scalbn+0xe0>)
    70f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    70fa:	f000 f9f7 	bl	74ec <__aeabi_dmul>
    70fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7100:	4622      	mov	r2, r4
    7102:	462b      	mov	r3, r5
    7104:	a114      	add	r1, pc, #80	; (adr r1, 7158 <scalbn+0xe8>)
    7106:	e9d1 0100 	ldrd	r0, r1, [r1]
    710a:	f000 f82f 	bl	716c <copysign>
    710e:	a312      	add	r3, pc, #72	; (adr r3, 7158 <scalbn+0xe8>)
    7110:	e9d3 2300 	ldrd	r2, r3, [r3]
    7114:	f000 f9ea 	bl	74ec <__aeabi_dmul>
    7118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    711a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    711e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    7122:	3636      	adds	r6, #54	; 0x36
    7124:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    7128:	4620      	mov	r0, r4
    712a:	4629      	mov	r1, r5
    712c:	2200      	movs	r2, #0
    712e:	4b0e      	ldr	r3, [pc, #56]	; (7168 <scalbn+0xf8>)
    7130:	f000 f9dc 	bl	74ec <__aeabi_dmul>
    7134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7136:	a108      	add	r1, pc, #32	; (adr r1, 7158 <scalbn+0xe8>)
    7138:	e9d1 0100 	ldrd	r0, r1, [r1]
    713c:	f000 f816 	bl	716c <copysign>
    7140:	a305      	add	r3, pc, #20	; (adr r3, 7158 <scalbn+0xe8>)
    7142:	e9d3 2300 	ldrd	r2, r3, [r3]
    7146:	f000 f9d1 	bl	74ec <__aeabi_dmul>
    714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    714c:	f3af 8000 	nop.w
    7150:	c2f8f359 	.word	0xc2f8f359
    7154:	01a56e1f 	.word	0x01a56e1f
    7158:	8800759c 	.word	0x8800759c
    715c:	7e37e43c 	.word	0x7e37e43c
    7160:	43500000 	.word	0x43500000
    7164:	ffff3cb0 	.word	0xffff3cb0
    7168:	3c900000 	.word	0x3c900000

0000716c <copysign>:
    716c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    7170:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    7174:	ea42 0103 	orr.w	r1, r2, r3
    7178:	4770      	bx	lr
    717a:	bf00      	nop

0000717c <__aeabi_drsub>:
    717c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    7180:	e002      	b.n	7188 <__adddf3>
    7182:	bf00      	nop

00007184 <__aeabi_dsub>:
    7184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00007188 <__adddf3>:
    7188:	b530      	push	{r4, r5, lr}
    718a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    718e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    7192:	ea94 0f05 	teq	r4, r5
    7196:	bf08      	it	eq
    7198:	ea90 0f02 	teqeq	r0, r2
    719c:	bf1f      	itttt	ne
    719e:	ea54 0c00 	orrsne.w	ip, r4, r0
    71a2:	ea55 0c02 	orrsne.w	ip, r5, r2
    71a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    71aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    71ae:	f000 80e2 	beq.w	7376 <__adddf3+0x1ee>
    71b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    71b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    71ba:	bfb8      	it	lt
    71bc:	426d      	neglt	r5, r5
    71be:	dd0c      	ble.n	71da <__adddf3+0x52>
    71c0:	442c      	add	r4, r5
    71c2:	ea80 0202 	eor.w	r2, r0, r2
    71c6:	ea81 0303 	eor.w	r3, r1, r3
    71ca:	ea82 0000 	eor.w	r0, r2, r0
    71ce:	ea83 0101 	eor.w	r1, r3, r1
    71d2:	ea80 0202 	eor.w	r2, r0, r2
    71d6:	ea81 0303 	eor.w	r3, r1, r3
    71da:	2d36      	cmp	r5, #54	; 0x36
    71dc:	bf88      	it	hi
    71de:	bd30      	pophi	{r4, r5, pc}
    71e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    71e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    71e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    71ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    71f0:	d002      	beq.n	71f8 <__adddf3+0x70>
    71f2:	4240      	negs	r0, r0
    71f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    71f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    71fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    7200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    7204:	d002      	beq.n	720c <__adddf3+0x84>
    7206:	4252      	negs	r2, r2
    7208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    720c:	ea94 0f05 	teq	r4, r5
    7210:	f000 80a7 	beq.w	7362 <__adddf3+0x1da>
    7214:	f1a4 0401 	sub.w	r4, r4, #1
    7218:	f1d5 0e20 	rsbs	lr, r5, #32
    721c:	db0d      	blt.n	723a <__adddf3+0xb2>
    721e:	fa02 fc0e 	lsl.w	ip, r2, lr
    7222:	fa22 f205 	lsr.w	r2, r2, r5
    7226:	1880      	adds	r0, r0, r2
    7228:	f141 0100 	adc.w	r1, r1, #0
    722c:	fa03 f20e 	lsl.w	r2, r3, lr
    7230:	1880      	adds	r0, r0, r2
    7232:	fa43 f305 	asr.w	r3, r3, r5
    7236:	4159      	adcs	r1, r3
    7238:	e00e      	b.n	7258 <__adddf3+0xd0>
    723a:	f1a5 0520 	sub.w	r5, r5, #32
    723e:	f10e 0e20 	add.w	lr, lr, #32
    7242:	2a01      	cmp	r2, #1
    7244:	fa03 fc0e 	lsl.w	ip, r3, lr
    7248:	bf28      	it	cs
    724a:	f04c 0c02 	orrcs.w	ip, ip, #2
    724e:	fa43 f305 	asr.w	r3, r3, r5
    7252:	18c0      	adds	r0, r0, r3
    7254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    7258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    725c:	d507      	bpl.n	726e <__adddf3+0xe6>
    725e:	f04f 0e00 	mov.w	lr, #0
    7262:	f1dc 0c00 	rsbs	ip, ip, #0
    7266:	eb7e 0000 	sbcs.w	r0, lr, r0
    726a:	eb6e 0101 	sbc.w	r1, lr, r1
    726e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    7272:	d31b      	bcc.n	72ac <__adddf3+0x124>
    7274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    7278:	d30c      	bcc.n	7294 <__adddf3+0x10c>
    727a:	0849      	lsrs	r1, r1, #1
    727c:	ea5f 0030 	movs.w	r0, r0, rrx
    7280:	ea4f 0c3c 	mov.w	ip, ip, rrx
    7284:	f104 0401 	add.w	r4, r4, #1
    7288:	ea4f 5244 	mov.w	r2, r4, lsl #21
    728c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    7290:	f080 809a 	bcs.w	73c8 <__adddf3+0x240>
    7294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7298:	bf08      	it	eq
    729a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    729e:	f150 0000 	adcs.w	r0, r0, #0
    72a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    72a6:	ea41 0105 	orr.w	r1, r1, r5
    72aa:	bd30      	pop	{r4, r5, pc}
    72ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    72b0:	4140      	adcs	r0, r0
    72b2:	eb41 0101 	adc.w	r1, r1, r1
    72b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    72ba:	f1a4 0401 	sub.w	r4, r4, #1
    72be:	d1e9      	bne.n	7294 <__adddf3+0x10c>
    72c0:	f091 0f00 	teq	r1, #0
    72c4:	bf04      	itt	eq
    72c6:	4601      	moveq	r1, r0
    72c8:	2000      	moveq	r0, #0
    72ca:	fab1 f381 	clz	r3, r1
    72ce:	bf08      	it	eq
    72d0:	3320      	addeq	r3, #32
    72d2:	f1a3 030b 	sub.w	r3, r3, #11
    72d6:	f1b3 0220 	subs.w	r2, r3, #32
    72da:	da0c      	bge.n	72f6 <__adddf3+0x16e>
    72dc:	320c      	adds	r2, #12
    72de:	dd08      	ble.n	72f2 <__adddf3+0x16a>
    72e0:	f102 0c14 	add.w	ip, r2, #20
    72e4:	f1c2 020c 	rsb	r2, r2, #12
    72e8:	fa01 f00c 	lsl.w	r0, r1, ip
    72ec:	fa21 f102 	lsr.w	r1, r1, r2
    72f0:	e00c      	b.n	730c <__adddf3+0x184>
    72f2:	f102 0214 	add.w	r2, r2, #20
    72f6:	bfd8      	it	le
    72f8:	f1c2 0c20 	rsble	ip, r2, #32
    72fc:	fa01 f102 	lsl.w	r1, r1, r2
    7300:	fa20 fc0c 	lsr.w	ip, r0, ip
    7304:	bfdc      	itt	le
    7306:	ea41 010c 	orrle.w	r1, r1, ip
    730a:	4090      	lslle	r0, r2
    730c:	1ae4      	subs	r4, r4, r3
    730e:	bfa2      	ittt	ge
    7310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    7314:	4329      	orrge	r1, r5
    7316:	bd30      	popge	{r4, r5, pc}
    7318:	ea6f 0404 	mvn.w	r4, r4
    731c:	3c1f      	subs	r4, #31
    731e:	da1c      	bge.n	735a <__adddf3+0x1d2>
    7320:	340c      	adds	r4, #12
    7322:	dc0e      	bgt.n	7342 <__adddf3+0x1ba>
    7324:	f104 0414 	add.w	r4, r4, #20
    7328:	f1c4 0220 	rsb	r2, r4, #32
    732c:	fa20 f004 	lsr.w	r0, r0, r4
    7330:	fa01 f302 	lsl.w	r3, r1, r2
    7334:	ea40 0003 	orr.w	r0, r0, r3
    7338:	fa21 f304 	lsr.w	r3, r1, r4
    733c:	ea45 0103 	orr.w	r1, r5, r3
    7340:	bd30      	pop	{r4, r5, pc}
    7342:	f1c4 040c 	rsb	r4, r4, #12
    7346:	f1c4 0220 	rsb	r2, r4, #32
    734a:	fa20 f002 	lsr.w	r0, r0, r2
    734e:	fa01 f304 	lsl.w	r3, r1, r4
    7352:	ea40 0003 	orr.w	r0, r0, r3
    7356:	4629      	mov	r1, r5
    7358:	bd30      	pop	{r4, r5, pc}
    735a:	fa21 f004 	lsr.w	r0, r1, r4
    735e:	4629      	mov	r1, r5
    7360:	bd30      	pop	{r4, r5, pc}
    7362:	f094 0f00 	teq	r4, #0
    7366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    736a:	bf06      	itte	eq
    736c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    7370:	3401      	addeq	r4, #1
    7372:	3d01      	subne	r5, #1
    7374:	e74e      	b.n	7214 <__adddf3+0x8c>
    7376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    737a:	bf18      	it	ne
    737c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    7380:	d029      	beq.n	73d6 <__adddf3+0x24e>
    7382:	ea94 0f05 	teq	r4, r5
    7386:	bf08      	it	eq
    7388:	ea90 0f02 	teqeq	r0, r2
    738c:	d005      	beq.n	739a <__adddf3+0x212>
    738e:	ea54 0c00 	orrs.w	ip, r4, r0
    7392:	bf04      	itt	eq
    7394:	4619      	moveq	r1, r3
    7396:	4610      	moveq	r0, r2
    7398:	bd30      	pop	{r4, r5, pc}
    739a:	ea91 0f03 	teq	r1, r3
    739e:	bf1e      	ittt	ne
    73a0:	2100      	movne	r1, #0
    73a2:	2000      	movne	r0, #0
    73a4:	bd30      	popne	{r4, r5, pc}
    73a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    73aa:	d105      	bne.n	73b8 <__adddf3+0x230>
    73ac:	0040      	lsls	r0, r0, #1
    73ae:	4149      	adcs	r1, r1
    73b0:	bf28      	it	cs
    73b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    73b6:	bd30      	pop	{r4, r5, pc}
    73b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    73bc:	bf3c      	itt	cc
    73be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    73c2:	bd30      	popcc	{r4, r5, pc}
    73c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    73c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    73cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    73d0:	f04f 0000 	mov.w	r0, #0
    73d4:	bd30      	pop	{r4, r5, pc}
    73d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    73da:	bf1a      	itte	ne
    73dc:	4619      	movne	r1, r3
    73de:	4610      	movne	r0, r2
    73e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    73e4:	bf1c      	itt	ne
    73e6:	460b      	movne	r3, r1
    73e8:	4602      	movne	r2, r0
    73ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    73ee:	bf06      	itte	eq
    73f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    73f4:	ea91 0f03 	teqeq	r1, r3
    73f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    73fc:	bd30      	pop	{r4, r5, pc}
    73fe:	bf00      	nop

00007400 <__aeabi_ui2d>:
    7400:	f090 0f00 	teq	r0, #0
    7404:	bf04      	itt	eq
    7406:	2100      	moveq	r1, #0
    7408:	4770      	bxeq	lr
    740a:	b530      	push	{r4, r5, lr}
    740c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7410:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7414:	f04f 0500 	mov.w	r5, #0
    7418:	f04f 0100 	mov.w	r1, #0
    741c:	e750      	b.n	72c0 <__adddf3+0x138>
    741e:	bf00      	nop

00007420 <__aeabi_i2d>:
    7420:	f090 0f00 	teq	r0, #0
    7424:	bf04      	itt	eq
    7426:	2100      	moveq	r1, #0
    7428:	4770      	bxeq	lr
    742a:	b530      	push	{r4, r5, lr}
    742c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7430:	f104 0432 	add.w	r4, r4, #50	; 0x32
    7434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    7438:	bf48      	it	mi
    743a:	4240      	negmi	r0, r0
    743c:	f04f 0100 	mov.w	r1, #0
    7440:	e73e      	b.n	72c0 <__adddf3+0x138>
    7442:	bf00      	nop

00007444 <__aeabi_f2d>:
    7444:	0042      	lsls	r2, r0, #1
    7446:	ea4f 01e2 	mov.w	r1, r2, asr #3
    744a:	ea4f 0131 	mov.w	r1, r1, rrx
    744e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    7452:	bf1f      	itttt	ne
    7454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    7458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    745c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    7460:	4770      	bxne	lr
    7462:	f092 0f00 	teq	r2, #0
    7466:	bf14      	ite	ne
    7468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    746c:	4770      	bxeq	lr
    746e:	b530      	push	{r4, r5, lr}
    7470:	f44f 7460 	mov.w	r4, #896	; 0x380
    7474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    7478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    747c:	e720      	b.n	72c0 <__adddf3+0x138>
    747e:	bf00      	nop

00007480 <__aeabi_ul2d>:
    7480:	ea50 0201 	orrs.w	r2, r0, r1
    7484:	bf08      	it	eq
    7486:	4770      	bxeq	lr
    7488:	b530      	push	{r4, r5, lr}
    748a:	f04f 0500 	mov.w	r5, #0
    748e:	e00a      	b.n	74a6 <__aeabi_l2d+0x16>

00007490 <__aeabi_l2d>:
    7490:	ea50 0201 	orrs.w	r2, r0, r1
    7494:	bf08      	it	eq
    7496:	4770      	bxeq	lr
    7498:	b530      	push	{r4, r5, lr}
    749a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    749e:	d502      	bpl.n	74a6 <__aeabi_l2d+0x16>
    74a0:	4240      	negs	r0, r0
    74a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    74a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    74aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
    74ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    74b2:	f43f aedc 	beq.w	726e <__adddf3+0xe6>
    74b6:	f04f 0203 	mov.w	r2, #3
    74ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    74be:	bf18      	it	ne
    74c0:	3203      	addne	r2, #3
    74c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    74c6:	bf18      	it	ne
    74c8:	3203      	addne	r2, #3
    74ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    74ce:	f1c2 0320 	rsb	r3, r2, #32
    74d2:	fa00 fc03 	lsl.w	ip, r0, r3
    74d6:	fa20 f002 	lsr.w	r0, r0, r2
    74da:	fa01 fe03 	lsl.w	lr, r1, r3
    74de:	ea40 000e 	orr.w	r0, r0, lr
    74e2:	fa21 f102 	lsr.w	r1, r1, r2
    74e6:	4414      	add	r4, r2
    74e8:	e6c1      	b.n	726e <__adddf3+0xe6>
    74ea:	bf00      	nop

000074ec <__aeabi_dmul>:
    74ec:	b570      	push	{r4, r5, r6, lr}
    74ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
    74f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    74f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    74fa:	bf1d      	ittte	ne
    74fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    7500:	ea94 0f0c 	teqne	r4, ip
    7504:	ea95 0f0c 	teqne	r5, ip
    7508:	f000 f8de 	bleq	76c8 <__aeabi_dmul+0x1dc>
    750c:	442c      	add	r4, r5
    750e:	ea81 0603 	eor.w	r6, r1, r3
    7512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    7516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    751a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    751e:	bf18      	it	ne
    7520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    7524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    752c:	d038      	beq.n	75a0 <__aeabi_dmul+0xb4>
    752e:	fba0 ce02 	umull	ip, lr, r0, r2
    7532:	f04f 0500 	mov.w	r5, #0
    7536:	fbe1 e502 	umlal	lr, r5, r1, r2
    753a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    753e:	fbe0 e503 	umlal	lr, r5, r0, r3
    7542:	f04f 0600 	mov.w	r6, #0
    7546:	fbe1 5603 	umlal	r5, r6, r1, r3
    754a:	f09c 0f00 	teq	ip, #0
    754e:	bf18      	it	ne
    7550:	f04e 0e01 	orrne.w	lr, lr, #1
    7554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    7558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    755c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    7560:	d204      	bcs.n	756c <__aeabi_dmul+0x80>
    7562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    7566:	416d      	adcs	r5, r5
    7568:	eb46 0606 	adc.w	r6, r6, r6
    756c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    7570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    7574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    7578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    757c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    7580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    7584:	bf88      	it	hi
    7586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    758a:	d81e      	bhi.n	75ca <__aeabi_dmul+0xde>
    758c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    7590:	bf08      	it	eq
    7592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    7596:	f150 0000 	adcs.w	r0, r0, #0
    759a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    759e:	bd70      	pop	{r4, r5, r6, pc}
    75a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    75a4:	ea46 0101 	orr.w	r1, r6, r1
    75a8:	ea40 0002 	orr.w	r0, r0, r2
    75ac:	ea81 0103 	eor.w	r1, r1, r3
    75b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    75b4:	bfc2      	ittt	gt
    75b6:	ebd4 050c 	rsbsgt	r5, r4, ip
    75ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    75be:	bd70      	popgt	{r4, r5, r6, pc}
    75c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    75c4:	f04f 0e00 	mov.w	lr, #0
    75c8:	3c01      	subs	r4, #1
    75ca:	f300 80ab 	bgt.w	7724 <__aeabi_dmul+0x238>
    75ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
    75d2:	bfde      	ittt	le
    75d4:	2000      	movle	r0, #0
    75d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    75da:	bd70      	pople	{r4, r5, r6, pc}
    75dc:	f1c4 0400 	rsb	r4, r4, #0
    75e0:	3c20      	subs	r4, #32
    75e2:	da35      	bge.n	7650 <__aeabi_dmul+0x164>
    75e4:	340c      	adds	r4, #12
    75e6:	dc1b      	bgt.n	7620 <__aeabi_dmul+0x134>
    75e8:	f104 0414 	add.w	r4, r4, #20
    75ec:	f1c4 0520 	rsb	r5, r4, #32
    75f0:	fa00 f305 	lsl.w	r3, r0, r5
    75f4:	fa20 f004 	lsr.w	r0, r0, r4
    75f8:	fa01 f205 	lsl.w	r2, r1, r5
    75fc:	ea40 0002 	orr.w	r0, r0, r2
    7600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    7604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    760c:	fa21 f604 	lsr.w	r6, r1, r4
    7610:	eb42 0106 	adc.w	r1, r2, r6
    7614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    7618:	bf08      	it	eq
    761a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    761e:	bd70      	pop	{r4, r5, r6, pc}
    7620:	f1c4 040c 	rsb	r4, r4, #12
    7624:	f1c4 0520 	rsb	r5, r4, #32
    7628:	fa00 f304 	lsl.w	r3, r0, r4
    762c:	fa20 f005 	lsr.w	r0, r0, r5
    7630:	fa01 f204 	lsl.w	r2, r1, r4
    7634:	ea40 0002 	orr.w	r0, r0, r2
    7638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    763c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    7640:	f141 0100 	adc.w	r1, r1, #0
    7644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    7648:	bf08      	it	eq
    764a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    764e:	bd70      	pop	{r4, r5, r6, pc}
    7650:	f1c4 0520 	rsb	r5, r4, #32
    7654:	fa00 f205 	lsl.w	r2, r0, r5
    7658:	ea4e 0e02 	orr.w	lr, lr, r2
    765c:	fa20 f304 	lsr.w	r3, r0, r4
    7660:	fa01 f205 	lsl.w	r2, r1, r5
    7664:	ea43 0302 	orr.w	r3, r3, r2
    7668:	fa21 f004 	lsr.w	r0, r1, r4
    766c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7670:	fa21 f204 	lsr.w	r2, r1, r4
    7674:	ea20 0002 	bic.w	r0, r0, r2
    7678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    767c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    7680:	bf08      	it	eq
    7682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    7686:	bd70      	pop	{r4, r5, r6, pc}
    7688:	f094 0f00 	teq	r4, #0
    768c:	d10f      	bne.n	76ae <__aeabi_dmul+0x1c2>
    768e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    7692:	0040      	lsls	r0, r0, #1
    7694:	eb41 0101 	adc.w	r1, r1, r1
    7698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    769c:	bf08      	it	eq
    769e:	3c01      	subeq	r4, #1
    76a0:	d0f7      	beq.n	7692 <__aeabi_dmul+0x1a6>
    76a2:	ea41 0106 	orr.w	r1, r1, r6
    76a6:	f095 0f00 	teq	r5, #0
    76aa:	bf18      	it	ne
    76ac:	4770      	bxne	lr
    76ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    76b2:	0052      	lsls	r2, r2, #1
    76b4:	eb43 0303 	adc.w	r3, r3, r3
    76b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    76bc:	bf08      	it	eq
    76be:	3d01      	subeq	r5, #1
    76c0:	d0f7      	beq.n	76b2 <__aeabi_dmul+0x1c6>
    76c2:	ea43 0306 	orr.w	r3, r3, r6
    76c6:	4770      	bx	lr
    76c8:	ea94 0f0c 	teq	r4, ip
    76cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    76d0:	bf18      	it	ne
    76d2:	ea95 0f0c 	teqne	r5, ip
    76d6:	d00c      	beq.n	76f2 <__aeabi_dmul+0x206>
    76d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    76dc:	bf18      	it	ne
    76de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    76e2:	d1d1      	bne.n	7688 <__aeabi_dmul+0x19c>
    76e4:	ea81 0103 	eor.w	r1, r1, r3
    76e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    76ec:	f04f 0000 	mov.w	r0, #0
    76f0:	bd70      	pop	{r4, r5, r6, pc}
    76f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    76f6:	bf06      	itte	eq
    76f8:	4610      	moveq	r0, r2
    76fa:	4619      	moveq	r1, r3
    76fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    7700:	d019      	beq.n	7736 <__aeabi_dmul+0x24a>
    7702:	ea94 0f0c 	teq	r4, ip
    7706:	d102      	bne.n	770e <__aeabi_dmul+0x222>
    7708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    770c:	d113      	bne.n	7736 <__aeabi_dmul+0x24a>
    770e:	ea95 0f0c 	teq	r5, ip
    7712:	d105      	bne.n	7720 <__aeabi_dmul+0x234>
    7714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    7718:	bf1c      	itt	ne
    771a:	4610      	movne	r0, r2
    771c:	4619      	movne	r1, r3
    771e:	d10a      	bne.n	7736 <__aeabi_dmul+0x24a>
    7720:	ea81 0103 	eor.w	r1, r1, r3
    7724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    772c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    7730:	f04f 0000 	mov.w	r0, #0
    7734:	bd70      	pop	{r4, r5, r6, pc}
    7736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    773a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    773e:	bd70      	pop	{r4, r5, r6, pc}

00007740 <__aeabi_ddiv>:
    7740:	b570      	push	{r4, r5, r6, lr}
    7742:	f04f 0cff 	mov.w	ip, #255	; 0xff
    7746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    774a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    774e:	bf1d      	ittte	ne
    7750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    7754:	ea94 0f0c 	teqne	r4, ip
    7758:	ea95 0f0c 	teqne	r5, ip
    775c:	f000 f8a7 	bleq	78ae <__aeabi_ddiv+0x16e>
    7760:	eba4 0405 	sub.w	r4, r4, r5
    7764:	ea81 0e03 	eor.w	lr, r1, r3
    7768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    776c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    7770:	f000 8088 	beq.w	7884 <__aeabi_ddiv+0x144>
    7774:	ea4f 3303 	mov.w	r3, r3, lsl #12
    7778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    777c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    7780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    7784:	ea4f 2202 	mov.w	r2, r2, lsl #8
    7788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    778c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    7790:	ea4f 2600 	mov.w	r6, r0, lsl #8
    7794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    7798:	429d      	cmp	r5, r3
    779a:	bf08      	it	eq
    779c:	4296      	cmpeq	r6, r2
    779e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    77a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    77a6:	d202      	bcs.n	77ae <__aeabi_ddiv+0x6e>
    77a8:	085b      	lsrs	r3, r3, #1
    77aa:	ea4f 0232 	mov.w	r2, r2, rrx
    77ae:	1ab6      	subs	r6, r6, r2
    77b0:	eb65 0503 	sbc.w	r5, r5, r3
    77b4:	085b      	lsrs	r3, r3, #1
    77b6:	ea4f 0232 	mov.w	r2, r2, rrx
    77ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    77be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    77c2:	ebb6 0e02 	subs.w	lr, r6, r2
    77c6:	eb75 0e03 	sbcs.w	lr, r5, r3
    77ca:	bf22      	ittt	cs
    77cc:	1ab6      	subcs	r6, r6, r2
    77ce:	4675      	movcs	r5, lr
    77d0:	ea40 000c 	orrcs.w	r0, r0, ip
    77d4:	085b      	lsrs	r3, r3, #1
    77d6:	ea4f 0232 	mov.w	r2, r2, rrx
    77da:	ebb6 0e02 	subs.w	lr, r6, r2
    77de:	eb75 0e03 	sbcs.w	lr, r5, r3
    77e2:	bf22      	ittt	cs
    77e4:	1ab6      	subcs	r6, r6, r2
    77e6:	4675      	movcs	r5, lr
    77e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    77ec:	085b      	lsrs	r3, r3, #1
    77ee:	ea4f 0232 	mov.w	r2, r2, rrx
    77f2:	ebb6 0e02 	subs.w	lr, r6, r2
    77f6:	eb75 0e03 	sbcs.w	lr, r5, r3
    77fa:	bf22      	ittt	cs
    77fc:	1ab6      	subcs	r6, r6, r2
    77fe:	4675      	movcs	r5, lr
    7800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    7804:	085b      	lsrs	r3, r3, #1
    7806:	ea4f 0232 	mov.w	r2, r2, rrx
    780a:	ebb6 0e02 	subs.w	lr, r6, r2
    780e:	eb75 0e03 	sbcs.w	lr, r5, r3
    7812:	bf22      	ittt	cs
    7814:	1ab6      	subcs	r6, r6, r2
    7816:	4675      	movcs	r5, lr
    7818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    781c:	ea55 0e06 	orrs.w	lr, r5, r6
    7820:	d018      	beq.n	7854 <__aeabi_ddiv+0x114>
    7822:	ea4f 1505 	mov.w	r5, r5, lsl #4
    7826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    782a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    782e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    7832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    7836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    783a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    783e:	d1c0      	bne.n	77c2 <__aeabi_ddiv+0x82>
    7840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7844:	d10b      	bne.n	785e <__aeabi_ddiv+0x11e>
    7846:	ea41 0100 	orr.w	r1, r1, r0
    784a:	f04f 0000 	mov.w	r0, #0
    784e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    7852:	e7b6      	b.n	77c2 <__aeabi_ddiv+0x82>
    7854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7858:	bf04      	itt	eq
    785a:	4301      	orreq	r1, r0
    785c:	2000      	moveq	r0, #0
    785e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    7862:	bf88      	it	hi
    7864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    7868:	f63f aeaf 	bhi.w	75ca <__aeabi_dmul+0xde>
    786c:	ebb5 0c03 	subs.w	ip, r5, r3
    7870:	bf04      	itt	eq
    7872:	ebb6 0c02 	subseq.w	ip, r6, r2
    7876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    787a:	f150 0000 	adcs.w	r0, r0, #0
    787e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    7882:	bd70      	pop	{r4, r5, r6, pc}
    7884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    7888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    788c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    7890:	bfc2      	ittt	gt
    7892:	ebd4 050c 	rsbsgt	r5, r4, ip
    7896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    789a:	bd70      	popgt	{r4, r5, r6, pc}
    789c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    78a0:	f04f 0e00 	mov.w	lr, #0
    78a4:	3c01      	subs	r4, #1
    78a6:	e690      	b.n	75ca <__aeabi_dmul+0xde>
    78a8:	ea45 0e06 	orr.w	lr, r5, r6
    78ac:	e68d      	b.n	75ca <__aeabi_dmul+0xde>
    78ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    78b2:	ea94 0f0c 	teq	r4, ip
    78b6:	bf08      	it	eq
    78b8:	ea95 0f0c 	teqeq	r5, ip
    78bc:	f43f af3b 	beq.w	7736 <__aeabi_dmul+0x24a>
    78c0:	ea94 0f0c 	teq	r4, ip
    78c4:	d10a      	bne.n	78dc <__aeabi_ddiv+0x19c>
    78c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    78ca:	f47f af34 	bne.w	7736 <__aeabi_dmul+0x24a>
    78ce:	ea95 0f0c 	teq	r5, ip
    78d2:	f47f af25 	bne.w	7720 <__aeabi_dmul+0x234>
    78d6:	4610      	mov	r0, r2
    78d8:	4619      	mov	r1, r3
    78da:	e72c      	b.n	7736 <__aeabi_dmul+0x24a>
    78dc:	ea95 0f0c 	teq	r5, ip
    78e0:	d106      	bne.n	78f0 <__aeabi_ddiv+0x1b0>
    78e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    78e6:	f43f aefd 	beq.w	76e4 <__aeabi_dmul+0x1f8>
    78ea:	4610      	mov	r0, r2
    78ec:	4619      	mov	r1, r3
    78ee:	e722      	b.n	7736 <__aeabi_dmul+0x24a>
    78f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    78f4:	bf18      	it	ne
    78f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    78fa:	f47f aec5 	bne.w	7688 <__aeabi_dmul+0x19c>
    78fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    7902:	f47f af0d 	bne.w	7720 <__aeabi_dmul+0x234>
    7906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    790a:	f47f aeeb 	bne.w	76e4 <__aeabi_dmul+0x1f8>
    790e:	e712      	b.n	7736 <__aeabi_dmul+0x24a>

00007910 <__gedf2>:
    7910:	f04f 3cff 	mov.w	ip, #4294967295
    7914:	e006      	b.n	7924 <__cmpdf2+0x4>
    7916:	bf00      	nop

00007918 <__ledf2>:
    7918:	f04f 0c01 	mov.w	ip, #1
    791c:	e002      	b.n	7924 <__cmpdf2+0x4>
    791e:	bf00      	nop

00007920 <__cmpdf2>:
    7920:	f04f 0c01 	mov.w	ip, #1
    7924:	f84d cd04 	str.w	ip, [sp, #-4]!
    7928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    792c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7934:	bf18      	it	ne
    7936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    793a:	d01b      	beq.n	7974 <__cmpdf2+0x54>
    793c:	b001      	add	sp, #4
    793e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    7942:	bf0c      	ite	eq
    7944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    7948:	ea91 0f03 	teqne	r1, r3
    794c:	bf02      	ittt	eq
    794e:	ea90 0f02 	teqeq	r0, r2
    7952:	2000      	moveq	r0, #0
    7954:	4770      	bxeq	lr
    7956:	f110 0f00 	cmn.w	r0, #0
    795a:	ea91 0f03 	teq	r1, r3
    795e:	bf58      	it	pl
    7960:	4299      	cmppl	r1, r3
    7962:	bf08      	it	eq
    7964:	4290      	cmpeq	r0, r2
    7966:	bf2c      	ite	cs
    7968:	17d8      	asrcs	r0, r3, #31
    796a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    796e:	f040 0001 	orr.w	r0, r0, #1
    7972:	4770      	bx	lr
    7974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    7978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    797c:	d102      	bne.n	7984 <__cmpdf2+0x64>
    797e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    7982:	d107      	bne.n	7994 <__cmpdf2+0x74>
    7984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    798c:	d1d6      	bne.n	793c <__cmpdf2+0x1c>
    798e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    7992:	d0d3      	beq.n	793c <__cmpdf2+0x1c>
    7994:	f85d 0b04 	ldr.w	r0, [sp], #4
    7998:	4770      	bx	lr
    799a:	bf00      	nop

0000799c <__aeabi_cdrcmple>:
    799c:	4684      	mov	ip, r0
    799e:	4610      	mov	r0, r2
    79a0:	4662      	mov	r2, ip
    79a2:	468c      	mov	ip, r1
    79a4:	4619      	mov	r1, r3
    79a6:	4663      	mov	r3, ip
    79a8:	e000      	b.n	79ac <__aeabi_cdcmpeq>
    79aa:	bf00      	nop

000079ac <__aeabi_cdcmpeq>:
    79ac:	b501      	push	{r0, lr}
    79ae:	f7ff ffb7 	bl	7920 <__cmpdf2>
    79b2:	2800      	cmp	r0, #0
    79b4:	bf48      	it	mi
    79b6:	f110 0f00 	cmnmi.w	r0, #0
    79ba:	bd01      	pop	{r0, pc}

000079bc <__aeabi_dcmpeq>:
    79bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    79c0:	f7ff fff4 	bl	79ac <__aeabi_cdcmpeq>
    79c4:	bf0c      	ite	eq
    79c6:	2001      	moveq	r0, #1
    79c8:	2000      	movne	r0, #0
    79ca:	f85d fb08 	ldr.w	pc, [sp], #8
    79ce:	bf00      	nop

000079d0 <__aeabi_dcmplt>:
    79d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    79d4:	f7ff ffea 	bl	79ac <__aeabi_cdcmpeq>
    79d8:	bf34      	ite	cc
    79da:	2001      	movcc	r0, #1
    79dc:	2000      	movcs	r0, #0
    79de:	f85d fb08 	ldr.w	pc, [sp], #8
    79e2:	bf00      	nop

000079e4 <__aeabi_dcmple>:
    79e4:	f84d ed08 	str.w	lr, [sp, #-8]!
    79e8:	f7ff ffe0 	bl	79ac <__aeabi_cdcmpeq>
    79ec:	bf94      	ite	ls
    79ee:	2001      	movls	r0, #1
    79f0:	2000      	movhi	r0, #0
    79f2:	f85d fb08 	ldr.w	pc, [sp], #8
    79f6:	bf00      	nop

000079f8 <__aeabi_dcmpge>:
    79f8:	f84d ed08 	str.w	lr, [sp, #-8]!
    79fc:	f7ff ffce 	bl	799c <__aeabi_cdrcmple>
    7a00:	bf94      	ite	ls
    7a02:	2001      	movls	r0, #1
    7a04:	2000      	movhi	r0, #0
    7a06:	f85d fb08 	ldr.w	pc, [sp], #8
    7a0a:	bf00      	nop

00007a0c <__aeabi_dcmpgt>:
    7a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
    7a10:	f7ff ffc4 	bl	799c <__aeabi_cdrcmple>
    7a14:	bf34      	ite	cc
    7a16:	2001      	movcc	r0, #1
    7a18:	2000      	movcs	r0, #0
    7a1a:	f85d fb08 	ldr.w	pc, [sp], #8
    7a1e:	bf00      	nop

00007a20 <__aeabi_dcmpun>:
    7a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    7a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7a28:	d102      	bne.n	7a30 <__aeabi_dcmpun+0x10>
    7a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    7a2e:	d10a      	bne.n	7a46 <__aeabi_dcmpun+0x26>
    7a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7a38:	d102      	bne.n	7a40 <__aeabi_dcmpun+0x20>
    7a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    7a3e:	d102      	bne.n	7a46 <__aeabi_dcmpun+0x26>
    7a40:	f04f 0000 	mov.w	r0, #0
    7a44:	4770      	bx	lr
    7a46:	f04f 0001 	mov.w	r0, #1
    7a4a:	4770      	bx	lr

00007a4c <__aeabi_d2iz>:
    7a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    7a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    7a54:	d215      	bcs.n	7a82 <__aeabi_d2iz+0x36>
    7a56:	d511      	bpl.n	7a7c <__aeabi_d2iz+0x30>
    7a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    7a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    7a60:	d912      	bls.n	7a88 <__aeabi_d2iz+0x3c>
    7a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    7a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    7a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    7a72:	fa23 f002 	lsr.w	r0, r3, r2
    7a76:	bf18      	it	ne
    7a78:	4240      	negne	r0, r0
    7a7a:	4770      	bx	lr
    7a7c:	f04f 0000 	mov.w	r0, #0
    7a80:	4770      	bx	lr
    7a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    7a86:	d105      	bne.n	7a94 <__aeabi_d2iz+0x48>
    7a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    7a8c:	bf08      	it	eq
    7a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    7a92:	4770      	bx	lr
    7a94:	f04f 0000 	mov.w	r0, #0
    7a98:	4770      	bx	lr
    7a9a:	bf00      	nop

00007a9c <__aeabi_d2uiz>:
    7a9c:	004a      	lsls	r2, r1, #1
    7a9e:	d211      	bcs.n	7ac4 <__aeabi_d2uiz+0x28>
    7aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    7aa4:	d211      	bcs.n	7aca <__aeabi_d2uiz+0x2e>
    7aa6:	d50d      	bpl.n	7ac4 <__aeabi_d2uiz+0x28>
    7aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    7aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    7ab0:	d40e      	bmi.n	7ad0 <__aeabi_d2uiz+0x34>
    7ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    7ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    7abe:	fa23 f002 	lsr.w	r0, r3, r2
    7ac2:	4770      	bx	lr
    7ac4:	f04f 0000 	mov.w	r0, #0
    7ac8:	4770      	bx	lr
    7aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    7ace:	d102      	bne.n	7ad6 <__aeabi_d2uiz+0x3a>
    7ad0:	f04f 30ff 	mov.w	r0, #4294967295
    7ad4:	4770      	bx	lr
    7ad6:	f04f 0000 	mov.w	r0, #0
    7ada:	4770      	bx	lr

00007adc <__aeabi_uldivmod>:
    7adc:	b953      	cbnz	r3, 7af4 <__aeabi_uldivmod+0x18>
    7ade:	b94a      	cbnz	r2, 7af4 <__aeabi_uldivmod+0x18>
    7ae0:	2900      	cmp	r1, #0
    7ae2:	bf08      	it	eq
    7ae4:	2800      	cmpeq	r0, #0
    7ae6:	bf1c      	itt	ne
    7ae8:	f04f 31ff 	movne.w	r1, #4294967295
    7aec:	f04f 30ff 	movne.w	r0, #4294967295
    7af0:	f000 b97a 	b.w	7de8 <__aeabi_idiv0>
    7af4:	f1ad 0c08 	sub.w	ip, sp, #8
    7af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    7afc:	f000 f806 	bl	7b0c <__udivmoddi4>
    7b00:	f8dd e004 	ldr.w	lr, [sp, #4]
    7b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7b08:	b004      	add	sp, #16
    7b0a:	4770      	bx	lr

00007b0c <__udivmoddi4>:
    7b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b10:	468c      	mov	ip, r1
    7b12:	460d      	mov	r5, r1
    7b14:	4604      	mov	r4, r0
    7b16:	9e08      	ldr	r6, [sp, #32]
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d151      	bne.n	7bc0 <__udivmoddi4+0xb4>
    7b1c:	428a      	cmp	r2, r1
    7b1e:	4617      	mov	r7, r2
    7b20:	d96d      	bls.n	7bfe <__udivmoddi4+0xf2>
    7b22:	fab2 fe82 	clz	lr, r2
    7b26:	f1be 0f00 	cmp.w	lr, #0
    7b2a:	d00b      	beq.n	7b44 <__udivmoddi4+0x38>
    7b2c:	f1ce 0c20 	rsb	ip, lr, #32
    7b30:	fa01 f50e 	lsl.w	r5, r1, lr
    7b34:	fa20 fc0c 	lsr.w	ip, r0, ip
    7b38:	fa02 f70e 	lsl.w	r7, r2, lr
    7b3c:	ea4c 0c05 	orr.w	ip, ip, r5
    7b40:	fa00 f40e 	lsl.w	r4, r0, lr
    7b44:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    7b48:	0c25      	lsrs	r5, r4, #16
    7b4a:	fbbc f8fa 	udiv	r8, ip, sl
    7b4e:	fa1f f987 	uxth.w	r9, r7
    7b52:	fb0a cc18 	mls	ip, sl, r8, ip
    7b56:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    7b5a:	fb08 f309 	mul.w	r3, r8, r9
    7b5e:	42ab      	cmp	r3, r5
    7b60:	d90a      	bls.n	7b78 <__udivmoddi4+0x6c>
    7b62:	19ed      	adds	r5, r5, r7
    7b64:	f108 32ff 	add.w	r2, r8, #4294967295
    7b68:	f080 8123 	bcs.w	7db2 <__udivmoddi4+0x2a6>
    7b6c:	42ab      	cmp	r3, r5
    7b6e:	f240 8120 	bls.w	7db2 <__udivmoddi4+0x2a6>
    7b72:	f1a8 0802 	sub.w	r8, r8, #2
    7b76:	443d      	add	r5, r7
    7b78:	1aed      	subs	r5, r5, r3
    7b7a:	b2a4      	uxth	r4, r4
    7b7c:	fbb5 f0fa 	udiv	r0, r5, sl
    7b80:	fb0a 5510 	mls	r5, sl, r0, r5
    7b84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    7b88:	fb00 f909 	mul.w	r9, r0, r9
    7b8c:	45a1      	cmp	r9, r4
    7b8e:	d909      	bls.n	7ba4 <__udivmoddi4+0x98>
    7b90:	19e4      	adds	r4, r4, r7
    7b92:	f100 33ff 	add.w	r3, r0, #4294967295
    7b96:	f080 810a 	bcs.w	7dae <__udivmoddi4+0x2a2>
    7b9a:	45a1      	cmp	r9, r4
    7b9c:	f240 8107 	bls.w	7dae <__udivmoddi4+0x2a2>
    7ba0:	3802      	subs	r0, #2
    7ba2:	443c      	add	r4, r7
    7ba4:	eba4 0409 	sub.w	r4, r4, r9
    7ba8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    7bac:	2100      	movs	r1, #0
    7bae:	2e00      	cmp	r6, #0
    7bb0:	d061      	beq.n	7c76 <__udivmoddi4+0x16a>
    7bb2:	fa24 f40e 	lsr.w	r4, r4, lr
    7bb6:	2300      	movs	r3, #0
    7bb8:	6034      	str	r4, [r6, #0]
    7bba:	6073      	str	r3, [r6, #4]
    7bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bc0:	428b      	cmp	r3, r1
    7bc2:	d907      	bls.n	7bd4 <__udivmoddi4+0xc8>
    7bc4:	2e00      	cmp	r6, #0
    7bc6:	d054      	beq.n	7c72 <__udivmoddi4+0x166>
    7bc8:	2100      	movs	r1, #0
    7bca:	e886 0021 	stmia.w	r6, {r0, r5}
    7bce:	4608      	mov	r0, r1
    7bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bd4:	fab3 f183 	clz	r1, r3
    7bd8:	2900      	cmp	r1, #0
    7bda:	f040 808e 	bne.w	7cfa <__udivmoddi4+0x1ee>
    7bde:	42ab      	cmp	r3, r5
    7be0:	d302      	bcc.n	7be8 <__udivmoddi4+0xdc>
    7be2:	4282      	cmp	r2, r0
    7be4:	f200 80fa 	bhi.w	7ddc <__udivmoddi4+0x2d0>
    7be8:	1a84      	subs	r4, r0, r2
    7bea:	eb65 0503 	sbc.w	r5, r5, r3
    7bee:	2001      	movs	r0, #1
    7bf0:	46ac      	mov	ip, r5
    7bf2:	2e00      	cmp	r6, #0
    7bf4:	d03f      	beq.n	7c76 <__udivmoddi4+0x16a>
    7bf6:	e886 1010 	stmia.w	r6, {r4, ip}
    7bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bfe:	b912      	cbnz	r2, 7c06 <__udivmoddi4+0xfa>
    7c00:	2701      	movs	r7, #1
    7c02:	fbb7 f7f2 	udiv	r7, r7, r2
    7c06:	fab7 fe87 	clz	lr, r7
    7c0a:	f1be 0f00 	cmp.w	lr, #0
    7c0e:	d134      	bne.n	7c7a <__udivmoddi4+0x16e>
    7c10:	1beb      	subs	r3, r5, r7
    7c12:	0c3a      	lsrs	r2, r7, #16
    7c14:	fa1f fc87 	uxth.w	ip, r7
    7c18:	2101      	movs	r1, #1
    7c1a:	fbb3 f8f2 	udiv	r8, r3, r2
    7c1e:	0c25      	lsrs	r5, r4, #16
    7c20:	fb02 3318 	mls	r3, r2, r8, r3
    7c24:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    7c28:	fb0c f308 	mul.w	r3, ip, r8
    7c2c:	42ab      	cmp	r3, r5
    7c2e:	d907      	bls.n	7c40 <__udivmoddi4+0x134>
    7c30:	19ed      	adds	r5, r5, r7
    7c32:	f108 30ff 	add.w	r0, r8, #4294967295
    7c36:	d202      	bcs.n	7c3e <__udivmoddi4+0x132>
    7c38:	42ab      	cmp	r3, r5
    7c3a:	f200 80d1 	bhi.w	7de0 <__udivmoddi4+0x2d4>
    7c3e:	4680      	mov	r8, r0
    7c40:	1aed      	subs	r5, r5, r3
    7c42:	b2a3      	uxth	r3, r4
    7c44:	fbb5 f0f2 	udiv	r0, r5, r2
    7c48:	fb02 5510 	mls	r5, r2, r0, r5
    7c4c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    7c50:	fb0c fc00 	mul.w	ip, ip, r0
    7c54:	45a4      	cmp	ip, r4
    7c56:	d907      	bls.n	7c68 <__udivmoddi4+0x15c>
    7c58:	19e4      	adds	r4, r4, r7
    7c5a:	f100 33ff 	add.w	r3, r0, #4294967295
    7c5e:	d202      	bcs.n	7c66 <__udivmoddi4+0x15a>
    7c60:	45a4      	cmp	ip, r4
    7c62:	f200 80b8 	bhi.w	7dd6 <__udivmoddi4+0x2ca>
    7c66:	4618      	mov	r0, r3
    7c68:	eba4 040c 	sub.w	r4, r4, ip
    7c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    7c70:	e79d      	b.n	7bae <__udivmoddi4+0xa2>
    7c72:	4631      	mov	r1, r6
    7c74:	4630      	mov	r0, r6
    7c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c7a:	f1ce 0420 	rsb	r4, lr, #32
    7c7e:	fa05 f30e 	lsl.w	r3, r5, lr
    7c82:	fa07 f70e 	lsl.w	r7, r7, lr
    7c86:	fa20 f804 	lsr.w	r8, r0, r4
    7c8a:	0c3a      	lsrs	r2, r7, #16
    7c8c:	fa25 f404 	lsr.w	r4, r5, r4
    7c90:	ea48 0803 	orr.w	r8, r8, r3
    7c94:	fbb4 f1f2 	udiv	r1, r4, r2
    7c98:	ea4f 4518 	mov.w	r5, r8, lsr #16
    7c9c:	fb02 4411 	mls	r4, r2, r1, r4
    7ca0:	fa1f fc87 	uxth.w	ip, r7
    7ca4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    7ca8:	fb01 f30c 	mul.w	r3, r1, ip
    7cac:	42ab      	cmp	r3, r5
    7cae:	fa00 f40e 	lsl.w	r4, r0, lr
    7cb2:	d909      	bls.n	7cc8 <__udivmoddi4+0x1bc>
    7cb4:	19ed      	adds	r5, r5, r7
    7cb6:	f101 30ff 	add.w	r0, r1, #4294967295
    7cba:	f080 808a 	bcs.w	7dd2 <__udivmoddi4+0x2c6>
    7cbe:	42ab      	cmp	r3, r5
    7cc0:	f240 8087 	bls.w	7dd2 <__udivmoddi4+0x2c6>
    7cc4:	3902      	subs	r1, #2
    7cc6:	443d      	add	r5, r7
    7cc8:	1aeb      	subs	r3, r5, r3
    7cca:	fa1f f588 	uxth.w	r5, r8
    7cce:	fbb3 f0f2 	udiv	r0, r3, r2
    7cd2:	fb02 3310 	mls	r3, r2, r0, r3
    7cd6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    7cda:	fb00 f30c 	mul.w	r3, r0, ip
    7cde:	42ab      	cmp	r3, r5
    7ce0:	d907      	bls.n	7cf2 <__udivmoddi4+0x1e6>
    7ce2:	19ed      	adds	r5, r5, r7
    7ce4:	f100 38ff 	add.w	r8, r0, #4294967295
    7ce8:	d26f      	bcs.n	7dca <__udivmoddi4+0x2be>
    7cea:	42ab      	cmp	r3, r5
    7cec:	d96d      	bls.n	7dca <__udivmoddi4+0x2be>
    7cee:	3802      	subs	r0, #2
    7cf0:	443d      	add	r5, r7
    7cf2:	1aeb      	subs	r3, r5, r3
    7cf4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    7cf8:	e78f      	b.n	7c1a <__udivmoddi4+0x10e>
    7cfa:	f1c1 0720 	rsb	r7, r1, #32
    7cfe:	fa22 f807 	lsr.w	r8, r2, r7
    7d02:	408b      	lsls	r3, r1
    7d04:	fa05 f401 	lsl.w	r4, r5, r1
    7d08:	ea48 0303 	orr.w	r3, r8, r3
    7d0c:	fa20 fe07 	lsr.w	lr, r0, r7
    7d10:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    7d14:	40fd      	lsrs	r5, r7
    7d16:	ea4e 0e04 	orr.w	lr, lr, r4
    7d1a:	fbb5 f9fc 	udiv	r9, r5, ip
    7d1e:	ea4f 441e 	mov.w	r4, lr, lsr #16
    7d22:	fb0c 5519 	mls	r5, ip, r9, r5
    7d26:	fa1f f883 	uxth.w	r8, r3
    7d2a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    7d2e:	fb09 f408 	mul.w	r4, r9, r8
    7d32:	42ac      	cmp	r4, r5
    7d34:	fa02 f201 	lsl.w	r2, r2, r1
    7d38:	fa00 fa01 	lsl.w	sl, r0, r1
    7d3c:	d908      	bls.n	7d50 <__udivmoddi4+0x244>
    7d3e:	18ed      	adds	r5, r5, r3
    7d40:	f109 30ff 	add.w	r0, r9, #4294967295
    7d44:	d243      	bcs.n	7dce <__udivmoddi4+0x2c2>
    7d46:	42ac      	cmp	r4, r5
    7d48:	d941      	bls.n	7dce <__udivmoddi4+0x2c2>
    7d4a:	f1a9 0902 	sub.w	r9, r9, #2
    7d4e:	441d      	add	r5, r3
    7d50:	1b2d      	subs	r5, r5, r4
    7d52:	fa1f fe8e 	uxth.w	lr, lr
    7d56:	fbb5 f0fc 	udiv	r0, r5, ip
    7d5a:	fb0c 5510 	mls	r5, ip, r0, r5
    7d5e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    7d62:	fb00 f808 	mul.w	r8, r0, r8
    7d66:	45a0      	cmp	r8, r4
    7d68:	d907      	bls.n	7d7a <__udivmoddi4+0x26e>
    7d6a:	18e4      	adds	r4, r4, r3
    7d6c:	f100 35ff 	add.w	r5, r0, #4294967295
    7d70:	d229      	bcs.n	7dc6 <__udivmoddi4+0x2ba>
    7d72:	45a0      	cmp	r8, r4
    7d74:	d927      	bls.n	7dc6 <__udivmoddi4+0x2ba>
    7d76:	3802      	subs	r0, #2
    7d78:	441c      	add	r4, r3
    7d7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    7d7e:	eba4 0408 	sub.w	r4, r4, r8
    7d82:	fba0 8902 	umull	r8, r9, r0, r2
    7d86:	454c      	cmp	r4, r9
    7d88:	46c6      	mov	lr, r8
    7d8a:	464d      	mov	r5, r9
    7d8c:	d315      	bcc.n	7dba <__udivmoddi4+0x2ae>
    7d8e:	d012      	beq.n	7db6 <__udivmoddi4+0x2aa>
    7d90:	b156      	cbz	r6, 7da8 <__udivmoddi4+0x29c>
    7d92:	ebba 030e 	subs.w	r3, sl, lr
    7d96:	eb64 0405 	sbc.w	r4, r4, r5
    7d9a:	fa04 f707 	lsl.w	r7, r4, r7
    7d9e:	40cb      	lsrs	r3, r1
    7da0:	431f      	orrs	r7, r3
    7da2:	40cc      	lsrs	r4, r1
    7da4:	6037      	str	r7, [r6, #0]
    7da6:	6074      	str	r4, [r6, #4]
    7da8:	2100      	movs	r1, #0
    7daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dae:	4618      	mov	r0, r3
    7db0:	e6f8      	b.n	7ba4 <__udivmoddi4+0x98>
    7db2:	4690      	mov	r8, r2
    7db4:	e6e0      	b.n	7b78 <__udivmoddi4+0x6c>
    7db6:	45c2      	cmp	sl, r8
    7db8:	d2ea      	bcs.n	7d90 <__udivmoddi4+0x284>
    7dba:	ebb8 0e02 	subs.w	lr, r8, r2
    7dbe:	eb69 0503 	sbc.w	r5, r9, r3
    7dc2:	3801      	subs	r0, #1
    7dc4:	e7e4      	b.n	7d90 <__udivmoddi4+0x284>
    7dc6:	4628      	mov	r0, r5
    7dc8:	e7d7      	b.n	7d7a <__udivmoddi4+0x26e>
    7dca:	4640      	mov	r0, r8
    7dcc:	e791      	b.n	7cf2 <__udivmoddi4+0x1e6>
    7dce:	4681      	mov	r9, r0
    7dd0:	e7be      	b.n	7d50 <__udivmoddi4+0x244>
    7dd2:	4601      	mov	r1, r0
    7dd4:	e778      	b.n	7cc8 <__udivmoddi4+0x1bc>
    7dd6:	3802      	subs	r0, #2
    7dd8:	443c      	add	r4, r7
    7dda:	e745      	b.n	7c68 <__udivmoddi4+0x15c>
    7ddc:	4608      	mov	r0, r1
    7dde:	e708      	b.n	7bf2 <__udivmoddi4+0xe6>
    7de0:	f1a8 0802 	sub.w	r8, r8, #2
    7de4:	443d      	add	r5, r7
    7de6:	e72b      	b.n	7c40 <__udivmoddi4+0x134>

00007de8 <__aeabi_idiv0>:
    7de8:	4770      	bx	lr
    7dea:	bf00      	nop

00007dec <atoi>:
    7dec:	220a      	movs	r2, #10
    7dee:	2100      	movs	r1, #0
    7df0:	f001 bb40 	b.w	9474 <strtol>

00007df4 <__errno>:
    7df4:	4b01      	ldr	r3, [pc, #4]	; (7dfc <__errno+0x8>)
    7df6:	6818      	ldr	r0, [r3, #0]
    7df8:	4770      	bx	lr
    7dfa:	bf00      	nop
    7dfc:	20000090 	.word	0x20000090

00007e00 <__sflush_r>:
    7e00:	898a      	ldrh	r2, [r1, #12]
    7e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e06:	4605      	mov	r5, r0
    7e08:	0710      	lsls	r0, r2, #28
    7e0a:	460c      	mov	r4, r1
    7e0c:	d45a      	bmi.n	7ec4 <__sflush_r+0xc4>
    7e0e:	684b      	ldr	r3, [r1, #4]
    7e10:	2b00      	cmp	r3, #0
    7e12:	dc05      	bgt.n	7e20 <__sflush_r+0x20>
    7e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7e16:	2b00      	cmp	r3, #0
    7e18:	dc02      	bgt.n	7e20 <__sflush_r+0x20>
    7e1a:	2000      	movs	r0, #0
    7e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    7e22:	2e00      	cmp	r6, #0
    7e24:	d0f9      	beq.n	7e1a <__sflush_r+0x1a>
    7e26:	2300      	movs	r3, #0
    7e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    7e2c:	682f      	ldr	r7, [r5, #0]
    7e2e:	602b      	str	r3, [r5, #0]
    7e30:	d033      	beq.n	7e9a <__sflush_r+0x9a>
    7e32:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7e34:	89a3      	ldrh	r3, [r4, #12]
    7e36:	075a      	lsls	r2, r3, #29
    7e38:	d505      	bpl.n	7e46 <__sflush_r+0x46>
    7e3a:	6863      	ldr	r3, [r4, #4]
    7e3c:	1ac0      	subs	r0, r0, r3
    7e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7e40:	b10b      	cbz	r3, 7e46 <__sflush_r+0x46>
    7e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7e44:	1ac0      	subs	r0, r0, r3
    7e46:	2300      	movs	r3, #0
    7e48:	4602      	mov	r2, r0
    7e4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    7e4c:	6a21      	ldr	r1, [r4, #32]
    7e4e:	4628      	mov	r0, r5
    7e50:	47b0      	blx	r6
    7e52:	1c43      	adds	r3, r0, #1
    7e54:	89a3      	ldrh	r3, [r4, #12]
    7e56:	d106      	bne.n	7e66 <__sflush_r+0x66>
    7e58:	6829      	ldr	r1, [r5, #0]
    7e5a:	291d      	cmp	r1, #29
    7e5c:	d84b      	bhi.n	7ef6 <__sflush_r+0xf6>
    7e5e:	4a2b      	ldr	r2, [pc, #172]	; (7f0c <__sflush_r+0x10c>)
    7e60:	40ca      	lsrs	r2, r1
    7e62:	07d6      	lsls	r6, r2, #31
    7e64:	d547      	bpl.n	7ef6 <__sflush_r+0xf6>
    7e66:	2200      	movs	r2, #0
    7e68:	6062      	str	r2, [r4, #4]
    7e6a:	04d9      	lsls	r1, r3, #19
    7e6c:	6922      	ldr	r2, [r4, #16]
    7e6e:	6022      	str	r2, [r4, #0]
    7e70:	d504      	bpl.n	7e7c <__sflush_r+0x7c>
    7e72:	1c42      	adds	r2, r0, #1
    7e74:	d101      	bne.n	7e7a <__sflush_r+0x7a>
    7e76:	682b      	ldr	r3, [r5, #0]
    7e78:	b903      	cbnz	r3, 7e7c <__sflush_r+0x7c>
    7e7a:	6560      	str	r0, [r4, #84]	; 0x54
    7e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7e7e:	602f      	str	r7, [r5, #0]
    7e80:	2900      	cmp	r1, #0
    7e82:	d0ca      	beq.n	7e1a <__sflush_r+0x1a>
    7e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
    7e88:	4299      	cmp	r1, r3
    7e8a:	d002      	beq.n	7e92 <__sflush_r+0x92>
    7e8c:	4628      	mov	r0, r5
    7e8e:	f000 f983 	bl	8198 <_free_r>
    7e92:	2000      	movs	r0, #0
    7e94:	6360      	str	r0, [r4, #52]	; 0x34
    7e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e9a:	6a21      	ldr	r1, [r4, #32]
    7e9c:	2301      	movs	r3, #1
    7e9e:	4628      	mov	r0, r5
    7ea0:	47b0      	blx	r6
    7ea2:	1c41      	adds	r1, r0, #1
    7ea4:	d1c6      	bne.n	7e34 <__sflush_r+0x34>
    7ea6:	682b      	ldr	r3, [r5, #0]
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d0c3      	beq.n	7e34 <__sflush_r+0x34>
    7eac:	2b1d      	cmp	r3, #29
    7eae:	d001      	beq.n	7eb4 <__sflush_r+0xb4>
    7eb0:	2b16      	cmp	r3, #22
    7eb2:	d101      	bne.n	7eb8 <__sflush_r+0xb8>
    7eb4:	602f      	str	r7, [r5, #0]
    7eb6:	e7b0      	b.n	7e1a <__sflush_r+0x1a>
    7eb8:	89a3      	ldrh	r3, [r4, #12]
    7eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7ebe:	81a3      	strh	r3, [r4, #12]
    7ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ec4:	690f      	ldr	r7, [r1, #16]
    7ec6:	2f00      	cmp	r7, #0
    7ec8:	d0a7      	beq.n	7e1a <__sflush_r+0x1a>
    7eca:	0793      	lsls	r3, r2, #30
    7ecc:	680e      	ldr	r6, [r1, #0]
    7ece:	bf08      	it	eq
    7ed0:	694b      	ldreq	r3, [r1, #20]
    7ed2:	600f      	str	r7, [r1, #0]
    7ed4:	bf18      	it	ne
    7ed6:	2300      	movne	r3, #0
    7ed8:	eba6 0807 	sub.w	r8, r6, r7
    7edc:	608b      	str	r3, [r1, #8]
    7ede:	f1b8 0f00 	cmp.w	r8, #0
    7ee2:	dd9a      	ble.n	7e1a <__sflush_r+0x1a>
    7ee4:	4643      	mov	r3, r8
    7ee6:	463a      	mov	r2, r7
    7ee8:	6a21      	ldr	r1, [r4, #32]
    7eea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7eec:	4628      	mov	r0, r5
    7eee:	47b0      	blx	r6
    7ef0:	2800      	cmp	r0, #0
    7ef2:	dc07      	bgt.n	7f04 <__sflush_r+0x104>
    7ef4:	89a3      	ldrh	r3, [r4, #12]
    7ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7efa:	81a3      	strh	r3, [r4, #12]
    7efc:	f04f 30ff 	mov.w	r0, #4294967295
    7f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f04:	4407      	add	r7, r0
    7f06:	eba8 0800 	sub.w	r8, r8, r0
    7f0a:	e7e8      	b.n	7ede <__sflush_r+0xde>
    7f0c:	20400001 	.word	0x20400001

00007f10 <_fflush_r>:
    7f10:	b538      	push	{r3, r4, r5, lr}
    7f12:	690b      	ldr	r3, [r1, #16]
    7f14:	4605      	mov	r5, r0
    7f16:	460c      	mov	r4, r1
    7f18:	b1db      	cbz	r3, 7f52 <_fflush_r+0x42>
    7f1a:	b118      	cbz	r0, 7f24 <_fflush_r+0x14>
    7f1c:	6983      	ldr	r3, [r0, #24]
    7f1e:	b90b      	cbnz	r3, 7f24 <_fflush_r+0x14>
    7f20:	f000 f860 	bl	7fe4 <__sinit>
    7f24:	4b0c      	ldr	r3, [pc, #48]	; (7f58 <_fflush_r+0x48>)
    7f26:	429c      	cmp	r4, r3
    7f28:	d109      	bne.n	7f3e <_fflush_r+0x2e>
    7f2a:	686c      	ldr	r4, [r5, #4]
    7f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7f30:	b17b      	cbz	r3, 7f52 <_fflush_r+0x42>
    7f32:	4621      	mov	r1, r4
    7f34:	4628      	mov	r0, r5
    7f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f3a:	f7ff bf61 	b.w	7e00 <__sflush_r>
    7f3e:	4b07      	ldr	r3, [pc, #28]	; (7f5c <_fflush_r+0x4c>)
    7f40:	429c      	cmp	r4, r3
    7f42:	d101      	bne.n	7f48 <_fflush_r+0x38>
    7f44:	68ac      	ldr	r4, [r5, #8]
    7f46:	e7f1      	b.n	7f2c <_fflush_r+0x1c>
    7f48:	4b05      	ldr	r3, [pc, #20]	; (7f60 <_fflush_r+0x50>)
    7f4a:	429c      	cmp	r4, r3
    7f4c:	bf08      	it	eq
    7f4e:	68ec      	ldreq	r4, [r5, #12]
    7f50:	e7ec      	b.n	7f2c <_fflush_r+0x1c>
    7f52:	2000      	movs	r0, #0
    7f54:	bd38      	pop	{r3, r4, r5, pc}
    7f56:	bf00      	nop
    7f58:	0000be00 	.word	0x0000be00
    7f5c:	0000be20 	.word	0x0000be20
    7f60:	0000bde0 	.word	0x0000bde0

00007f64 <_cleanup_r>:
    7f64:	4901      	ldr	r1, [pc, #4]	; (7f6c <_cleanup_r+0x8>)
    7f66:	f000 b8a9 	b.w	80bc <_fwalk_reent>
    7f6a:	bf00      	nop
    7f6c:	00007f11 	.word	0x00007f11

00007f70 <std.isra.0>:
    7f70:	2300      	movs	r3, #0
    7f72:	b510      	push	{r4, lr}
    7f74:	4604      	mov	r4, r0
    7f76:	6003      	str	r3, [r0, #0]
    7f78:	6043      	str	r3, [r0, #4]
    7f7a:	6083      	str	r3, [r0, #8]
    7f7c:	8181      	strh	r1, [r0, #12]
    7f7e:	6643      	str	r3, [r0, #100]	; 0x64
    7f80:	81c2      	strh	r2, [r0, #14]
    7f82:	6103      	str	r3, [r0, #16]
    7f84:	6143      	str	r3, [r0, #20]
    7f86:	6183      	str	r3, [r0, #24]
    7f88:	4619      	mov	r1, r3
    7f8a:	2208      	movs	r2, #8
    7f8c:	305c      	adds	r0, #92	; 0x5c
    7f8e:	f000 f8fb 	bl	8188 <memset>
    7f92:	4b05      	ldr	r3, [pc, #20]	; (7fa8 <std.isra.0+0x38>)
    7f94:	6263      	str	r3, [r4, #36]	; 0x24
    7f96:	4b05      	ldr	r3, [pc, #20]	; (7fac <std.isra.0+0x3c>)
    7f98:	62a3      	str	r3, [r4, #40]	; 0x28
    7f9a:	4b05      	ldr	r3, [pc, #20]	; (7fb0 <std.isra.0+0x40>)
    7f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
    7f9e:	4b05      	ldr	r3, [pc, #20]	; (7fb4 <std.isra.0+0x44>)
    7fa0:	6224      	str	r4, [r4, #32]
    7fa2:	6323      	str	r3, [r4, #48]	; 0x30
    7fa4:	bd10      	pop	{r4, pc}
    7fa6:	bf00      	nop
    7fa8:	00008625 	.word	0x00008625
    7fac:	00008647 	.word	0x00008647
    7fb0:	0000867f 	.word	0x0000867f
    7fb4:	000086a3 	.word	0x000086a3

00007fb8 <__sfmoreglue>:
    7fb8:	b570      	push	{r4, r5, r6, lr}
    7fba:	1e4a      	subs	r2, r1, #1
    7fbc:	2568      	movs	r5, #104	; 0x68
    7fbe:	4355      	muls	r5, r2
    7fc0:	460e      	mov	r6, r1
    7fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
    7fc6:	f000 f935 	bl	8234 <_malloc_r>
    7fca:	4604      	mov	r4, r0
    7fcc:	b140      	cbz	r0, 7fe0 <__sfmoreglue+0x28>
    7fce:	2100      	movs	r1, #0
    7fd0:	e880 0042 	stmia.w	r0, {r1, r6}
    7fd4:	300c      	adds	r0, #12
    7fd6:	60a0      	str	r0, [r4, #8]
    7fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
    7fdc:	f000 f8d4 	bl	8188 <memset>
    7fe0:	4620      	mov	r0, r4
    7fe2:	bd70      	pop	{r4, r5, r6, pc}

00007fe4 <__sinit>:
    7fe4:	6983      	ldr	r3, [r0, #24]
    7fe6:	b510      	push	{r4, lr}
    7fe8:	4604      	mov	r4, r0
    7fea:	bb33      	cbnz	r3, 803a <__sinit+0x56>
    7fec:	6483      	str	r3, [r0, #72]	; 0x48
    7fee:	64c3      	str	r3, [r0, #76]	; 0x4c
    7ff0:	6503      	str	r3, [r0, #80]	; 0x50
    7ff2:	4b12      	ldr	r3, [pc, #72]	; (803c <__sinit+0x58>)
    7ff4:	4a12      	ldr	r2, [pc, #72]	; (8040 <__sinit+0x5c>)
    7ff6:	681b      	ldr	r3, [r3, #0]
    7ff8:	6282      	str	r2, [r0, #40]	; 0x28
    7ffa:	4298      	cmp	r0, r3
    7ffc:	bf04      	itt	eq
    7ffe:	2301      	moveq	r3, #1
    8000:	6183      	streq	r3, [r0, #24]
    8002:	f000 f81f 	bl	8044 <__sfp>
    8006:	6060      	str	r0, [r4, #4]
    8008:	4620      	mov	r0, r4
    800a:	f000 f81b 	bl	8044 <__sfp>
    800e:	60a0      	str	r0, [r4, #8]
    8010:	4620      	mov	r0, r4
    8012:	f000 f817 	bl	8044 <__sfp>
    8016:	2200      	movs	r2, #0
    8018:	60e0      	str	r0, [r4, #12]
    801a:	2104      	movs	r1, #4
    801c:	6860      	ldr	r0, [r4, #4]
    801e:	f7ff ffa7 	bl	7f70 <std.isra.0>
    8022:	2201      	movs	r2, #1
    8024:	2109      	movs	r1, #9
    8026:	68a0      	ldr	r0, [r4, #8]
    8028:	f7ff ffa2 	bl	7f70 <std.isra.0>
    802c:	2202      	movs	r2, #2
    802e:	2112      	movs	r1, #18
    8030:	68e0      	ldr	r0, [r4, #12]
    8032:	f7ff ff9d 	bl	7f70 <std.isra.0>
    8036:	2301      	movs	r3, #1
    8038:	61a3      	str	r3, [r4, #24]
    803a:	bd10      	pop	{r4, pc}
    803c:	0000be40 	.word	0x0000be40
    8040:	00007f65 	.word	0x00007f65

00008044 <__sfp>:
    8044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8046:	4b1c      	ldr	r3, [pc, #112]	; (80b8 <__sfp+0x74>)
    8048:	681e      	ldr	r6, [r3, #0]
    804a:	69b3      	ldr	r3, [r6, #24]
    804c:	4607      	mov	r7, r0
    804e:	b913      	cbnz	r3, 8056 <__sfp+0x12>
    8050:	4630      	mov	r0, r6
    8052:	f7ff ffc7 	bl	7fe4 <__sinit>
    8056:	3648      	adds	r6, #72	; 0x48
    8058:	68b4      	ldr	r4, [r6, #8]
    805a:	6873      	ldr	r3, [r6, #4]
    805c:	3b01      	subs	r3, #1
    805e:	d503      	bpl.n	8068 <__sfp+0x24>
    8060:	6833      	ldr	r3, [r6, #0]
    8062:	b133      	cbz	r3, 8072 <__sfp+0x2e>
    8064:	6836      	ldr	r6, [r6, #0]
    8066:	e7f7      	b.n	8058 <__sfp+0x14>
    8068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    806c:	b16d      	cbz	r5, 808a <__sfp+0x46>
    806e:	3468      	adds	r4, #104	; 0x68
    8070:	e7f4      	b.n	805c <__sfp+0x18>
    8072:	2104      	movs	r1, #4
    8074:	4638      	mov	r0, r7
    8076:	f7ff ff9f 	bl	7fb8 <__sfmoreglue>
    807a:	6030      	str	r0, [r6, #0]
    807c:	2800      	cmp	r0, #0
    807e:	d1f1      	bne.n	8064 <__sfp+0x20>
    8080:	230c      	movs	r3, #12
    8082:	603b      	str	r3, [r7, #0]
    8084:	4604      	mov	r4, r0
    8086:	4620      	mov	r0, r4
    8088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    808a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    808e:	81e3      	strh	r3, [r4, #14]
    8090:	2301      	movs	r3, #1
    8092:	81a3      	strh	r3, [r4, #12]
    8094:	6665      	str	r5, [r4, #100]	; 0x64
    8096:	6025      	str	r5, [r4, #0]
    8098:	60a5      	str	r5, [r4, #8]
    809a:	6065      	str	r5, [r4, #4]
    809c:	6125      	str	r5, [r4, #16]
    809e:	6165      	str	r5, [r4, #20]
    80a0:	61a5      	str	r5, [r4, #24]
    80a2:	2208      	movs	r2, #8
    80a4:	4629      	mov	r1, r5
    80a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    80aa:	f000 f86d 	bl	8188 <memset>
    80ae:	6365      	str	r5, [r4, #52]	; 0x34
    80b0:	63a5      	str	r5, [r4, #56]	; 0x38
    80b2:	64a5      	str	r5, [r4, #72]	; 0x48
    80b4:	64e5      	str	r5, [r4, #76]	; 0x4c
    80b6:	e7e6      	b.n	8086 <__sfp+0x42>
    80b8:	0000be40 	.word	0x0000be40

000080bc <_fwalk_reent>:
    80bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    80c0:	4680      	mov	r8, r0
    80c2:	4689      	mov	r9, r1
    80c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
    80c8:	2600      	movs	r6, #0
    80ca:	b914      	cbnz	r4, 80d2 <_fwalk_reent+0x16>
    80cc:	4630      	mov	r0, r6
    80ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    80d2:	68a5      	ldr	r5, [r4, #8]
    80d4:	6867      	ldr	r7, [r4, #4]
    80d6:	3f01      	subs	r7, #1
    80d8:	d501      	bpl.n	80de <_fwalk_reent+0x22>
    80da:	6824      	ldr	r4, [r4, #0]
    80dc:	e7f5      	b.n	80ca <_fwalk_reent+0xe>
    80de:	89ab      	ldrh	r3, [r5, #12]
    80e0:	2b01      	cmp	r3, #1
    80e2:	d907      	bls.n	80f4 <_fwalk_reent+0x38>
    80e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    80e8:	3301      	adds	r3, #1
    80ea:	d003      	beq.n	80f4 <_fwalk_reent+0x38>
    80ec:	4629      	mov	r1, r5
    80ee:	4640      	mov	r0, r8
    80f0:	47c8      	blx	r9
    80f2:	4306      	orrs	r6, r0
    80f4:	3568      	adds	r5, #104	; 0x68
    80f6:	e7ee      	b.n	80d6 <_fwalk_reent+0x1a>

000080f8 <__libc_init_array>:
    80f8:	b570      	push	{r4, r5, r6, lr}
    80fa:	4e0d      	ldr	r6, [pc, #52]	; (8130 <__libc_init_array+0x38>)
    80fc:	4c0d      	ldr	r4, [pc, #52]	; (8134 <__libc_init_array+0x3c>)
    80fe:	1ba4      	subs	r4, r4, r6
    8100:	10a4      	asrs	r4, r4, #2
    8102:	2500      	movs	r5, #0
    8104:	42a5      	cmp	r5, r4
    8106:	d109      	bne.n	811c <__libc_init_array+0x24>
    8108:	4e0b      	ldr	r6, [pc, #44]	; (8138 <__libc_init_array+0x40>)
    810a:	4c0c      	ldr	r4, [pc, #48]	; (813c <__libc_init_array+0x44>)
    810c:	f003 ffec 	bl	c0e8 <_init>
    8110:	1ba4      	subs	r4, r4, r6
    8112:	10a4      	asrs	r4, r4, #2
    8114:	2500      	movs	r5, #0
    8116:	42a5      	cmp	r5, r4
    8118:	d105      	bne.n	8126 <__libc_init_array+0x2e>
    811a:	bd70      	pop	{r4, r5, r6, pc}
    811c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8120:	4798      	blx	r3
    8122:	3501      	adds	r5, #1
    8124:	e7ee      	b.n	8104 <__libc_init_array+0xc>
    8126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    812a:	4798      	blx	r3
    812c:	3501      	adds	r5, #1
    812e:	e7f2      	b.n	8116 <__libc_init_array+0x1e>
    8130:	0000c0f4 	.word	0x0000c0f4
    8134:	0000c0f4 	.word	0x0000c0f4
    8138:	0000c0f4 	.word	0x0000c0f4
    813c:	0000c0f8 	.word	0x0000c0f8

00008140 <__locale_ctype_ptr_l>:
    8140:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    8144:	4770      	bx	lr
	...

00008148 <__locale_ctype_ptr>:
    8148:	4b04      	ldr	r3, [pc, #16]	; (815c <__locale_ctype_ptr+0x14>)
    814a:	4a05      	ldr	r2, [pc, #20]	; (8160 <__locale_ctype_ptr+0x18>)
    814c:	681b      	ldr	r3, [r3, #0]
    814e:	6a1b      	ldr	r3, [r3, #32]
    8150:	2b00      	cmp	r3, #0
    8152:	bf08      	it	eq
    8154:	4613      	moveq	r3, r2
    8156:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    815a:	4770      	bx	lr
    815c:	20000090 	.word	0x20000090
    8160:	200000f4 	.word	0x200000f4

00008164 <__ascii_mbtowc>:
    8164:	b082      	sub	sp, #8
    8166:	b901      	cbnz	r1, 816a <__ascii_mbtowc+0x6>
    8168:	a901      	add	r1, sp, #4
    816a:	b142      	cbz	r2, 817e <__ascii_mbtowc+0x1a>
    816c:	b14b      	cbz	r3, 8182 <__ascii_mbtowc+0x1e>
    816e:	7813      	ldrb	r3, [r2, #0]
    8170:	600b      	str	r3, [r1, #0]
    8172:	7812      	ldrb	r2, [r2, #0]
    8174:	1c10      	adds	r0, r2, #0
    8176:	bf18      	it	ne
    8178:	2001      	movne	r0, #1
    817a:	b002      	add	sp, #8
    817c:	4770      	bx	lr
    817e:	4610      	mov	r0, r2
    8180:	e7fb      	b.n	817a <__ascii_mbtowc+0x16>
    8182:	f06f 0001 	mvn.w	r0, #1
    8186:	e7f8      	b.n	817a <__ascii_mbtowc+0x16>

00008188 <memset>:
    8188:	4402      	add	r2, r0
    818a:	4603      	mov	r3, r0
    818c:	4293      	cmp	r3, r2
    818e:	d100      	bne.n	8192 <memset+0xa>
    8190:	4770      	bx	lr
    8192:	f803 1b01 	strb.w	r1, [r3], #1
    8196:	e7f9      	b.n	818c <memset+0x4>

00008198 <_free_r>:
    8198:	b538      	push	{r3, r4, r5, lr}
    819a:	4605      	mov	r5, r0
    819c:	2900      	cmp	r1, #0
    819e:	d045      	beq.n	822c <_free_r+0x94>
    81a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    81a4:	1f0c      	subs	r4, r1, #4
    81a6:	2b00      	cmp	r3, #0
    81a8:	bfb8      	it	lt
    81aa:	18e4      	addlt	r4, r4, r3
    81ac:	f001 fe11 	bl	9dd2 <__malloc_lock>
    81b0:	4a1f      	ldr	r2, [pc, #124]	; (8230 <_free_r+0x98>)
    81b2:	6813      	ldr	r3, [r2, #0]
    81b4:	4610      	mov	r0, r2
    81b6:	b933      	cbnz	r3, 81c6 <_free_r+0x2e>
    81b8:	6063      	str	r3, [r4, #4]
    81ba:	6014      	str	r4, [r2, #0]
    81bc:	4628      	mov	r0, r5
    81be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    81c2:	f001 be07 	b.w	9dd4 <__malloc_unlock>
    81c6:	42a3      	cmp	r3, r4
    81c8:	d90c      	bls.n	81e4 <_free_r+0x4c>
    81ca:	6821      	ldr	r1, [r4, #0]
    81cc:	1862      	adds	r2, r4, r1
    81ce:	4293      	cmp	r3, r2
    81d0:	bf04      	itt	eq
    81d2:	681a      	ldreq	r2, [r3, #0]
    81d4:	685b      	ldreq	r3, [r3, #4]
    81d6:	6063      	str	r3, [r4, #4]
    81d8:	bf04      	itt	eq
    81da:	1852      	addeq	r2, r2, r1
    81dc:	6022      	streq	r2, [r4, #0]
    81de:	6004      	str	r4, [r0, #0]
    81e0:	e7ec      	b.n	81bc <_free_r+0x24>
    81e2:	4613      	mov	r3, r2
    81e4:	685a      	ldr	r2, [r3, #4]
    81e6:	b10a      	cbz	r2, 81ec <_free_r+0x54>
    81e8:	42a2      	cmp	r2, r4
    81ea:	d9fa      	bls.n	81e2 <_free_r+0x4a>
    81ec:	6819      	ldr	r1, [r3, #0]
    81ee:	1858      	adds	r0, r3, r1
    81f0:	42a0      	cmp	r0, r4
    81f2:	d10b      	bne.n	820c <_free_r+0x74>
    81f4:	6820      	ldr	r0, [r4, #0]
    81f6:	4401      	add	r1, r0
    81f8:	1858      	adds	r0, r3, r1
    81fa:	4282      	cmp	r2, r0
    81fc:	6019      	str	r1, [r3, #0]
    81fe:	d1dd      	bne.n	81bc <_free_r+0x24>
    8200:	6810      	ldr	r0, [r2, #0]
    8202:	6852      	ldr	r2, [r2, #4]
    8204:	605a      	str	r2, [r3, #4]
    8206:	4401      	add	r1, r0
    8208:	6019      	str	r1, [r3, #0]
    820a:	e7d7      	b.n	81bc <_free_r+0x24>
    820c:	d902      	bls.n	8214 <_free_r+0x7c>
    820e:	230c      	movs	r3, #12
    8210:	602b      	str	r3, [r5, #0]
    8212:	e7d3      	b.n	81bc <_free_r+0x24>
    8214:	6820      	ldr	r0, [r4, #0]
    8216:	1821      	adds	r1, r4, r0
    8218:	428a      	cmp	r2, r1
    821a:	bf04      	itt	eq
    821c:	6811      	ldreq	r1, [r2, #0]
    821e:	6852      	ldreq	r2, [r2, #4]
    8220:	6062      	str	r2, [r4, #4]
    8222:	bf04      	itt	eq
    8224:	1809      	addeq	r1, r1, r0
    8226:	6021      	streq	r1, [r4, #0]
    8228:	605c      	str	r4, [r3, #4]
    822a:	e7c7      	b.n	81bc <_free_r+0x24>
    822c:	bd38      	pop	{r3, r4, r5, pc}
    822e:	bf00      	nop
    8230:	20004160 	.word	0x20004160

00008234 <_malloc_r>:
    8234:	b570      	push	{r4, r5, r6, lr}
    8236:	1ccd      	adds	r5, r1, #3
    8238:	f025 0503 	bic.w	r5, r5, #3
    823c:	3508      	adds	r5, #8
    823e:	2d0c      	cmp	r5, #12
    8240:	bf38      	it	cc
    8242:	250c      	movcc	r5, #12
    8244:	2d00      	cmp	r5, #0
    8246:	4606      	mov	r6, r0
    8248:	db01      	blt.n	824e <_malloc_r+0x1a>
    824a:	42a9      	cmp	r1, r5
    824c:	d903      	bls.n	8256 <_malloc_r+0x22>
    824e:	230c      	movs	r3, #12
    8250:	6033      	str	r3, [r6, #0]
    8252:	2000      	movs	r0, #0
    8254:	bd70      	pop	{r4, r5, r6, pc}
    8256:	f001 fdbc 	bl	9dd2 <__malloc_lock>
    825a:	4a23      	ldr	r2, [pc, #140]	; (82e8 <_malloc_r+0xb4>)
    825c:	6814      	ldr	r4, [r2, #0]
    825e:	4621      	mov	r1, r4
    8260:	b991      	cbnz	r1, 8288 <_malloc_r+0x54>
    8262:	4c22      	ldr	r4, [pc, #136]	; (82ec <_malloc_r+0xb8>)
    8264:	6823      	ldr	r3, [r4, #0]
    8266:	b91b      	cbnz	r3, 8270 <_malloc_r+0x3c>
    8268:	4630      	mov	r0, r6
    826a:	f000 f8bd 	bl	83e8 <_sbrk_r>
    826e:	6020      	str	r0, [r4, #0]
    8270:	4629      	mov	r1, r5
    8272:	4630      	mov	r0, r6
    8274:	f000 f8b8 	bl	83e8 <_sbrk_r>
    8278:	1c43      	adds	r3, r0, #1
    827a:	d126      	bne.n	82ca <_malloc_r+0x96>
    827c:	230c      	movs	r3, #12
    827e:	6033      	str	r3, [r6, #0]
    8280:	4630      	mov	r0, r6
    8282:	f001 fda7 	bl	9dd4 <__malloc_unlock>
    8286:	e7e4      	b.n	8252 <_malloc_r+0x1e>
    8288:	680b      	ldr	r3, [r1, #0]
    828a:	1b5b      	subs	r3, r3, r5
    828c:	d41a      	bmi.n	82c4 <_malloc_r+0x90>
    828e:	2b0b      	cmp	r3, #11
    8290:	d90f      	bls.n	82b2 <_malloc_r+0x7e>
    8292:	600b      	str	r3, [r1, #0]
    8294:	50cd      	str	r5, [r1, r3]
    8296:	18cc      	adds	r4, r1, r3
    8298:	4630      	mov	r0, r6
    829a:	f001 fd9b 	bl	9dd4 <__malloc_unlock>
    829e:	f104 000b 	add.w	r0, r4, #11
    82a2:	1d23      	adds	r3, r4, #4
    82a4:	f020 0007 	bic.w	r0, r0, #7
    82a8:	1ac3      	subs	r3, r0, r3
    82aa:	d01b      	beq.n	82e4 <_malloc_r+0xb0>
    82ac:	425a      	negs	r2, r3
    82ae:	50e2      	str	r2, [r4, r3]
    82b0:	bd70      	pop	{r4, r5, r6, pc}
    82b2:	428c      	cmp	r4, r1
    82b4:	bf0d      	iteet	eq
    82b6:	6863      	ldreq	r3, [r4, #4]
    82b8:	684b      	ldrne	r3, [r1, #4]
    82ba:	6063      	strne	r3, [r4, #4]
    82bc:	6013      	streq	r3, [r2, #0]
    82be:	bf18      	it	ne
    82c0:	460c      	movne	r4, r1
    82c2:	e7e9      	b.n	8298 <_malloc_r+0x64>
    82c4:	460c      	mov	r4, r1
    82c6:	6849      	ldr	r1, [r1, #4]
    82c8:	e7ca      	b.n	8260 <_malloc_r+0x2c>
    82ca:	1cc4      	adds	r4, r0, #3
    82cc:	f024 0403 	bic.w	r4, r4, #3
    82d0:	42a0      	cmp	r0, r4
    82d2:	d005      	beq.n	82e0 <_malloc_r+0xac>
    82d4:	1a21      	subs	r1, r4, r0
    82d6:	4630      	mov	r0, r6
    82d8:	f000 f886 	bl	83e8 <_sbrk_r>
    82dc:	3001      	adds	r0, #1
    82de:	d0cd      	beq.n	827c <_malloc_r+0x48>
    82e0:	6025      	str	r5, [r4, #0]
    82e2:	e7d9      	b.n	8298 <_malloc_r+0x64>
    82e4:	bd70      	pop	{r4, r5, r6, pc}
    82e6:	bf00      	nop
    82e8:	20004160 	.word	0x20004160
    82ec:	20004164 	.word	0x20004164

000082f0 <iprintf>:
    82f0:	b40f      	push	{r0, r1, r2, r3}
    82f2:	4b0a      	ldr	r3, [pc, #40]	; (831c <iprintf+0x2c>)
    82f4:	b513      	push	{r0, r1, r4, lr}
    82f6:	681c      	ldr	r4, [r3, #0]
    82f8:	b124      	cbz	r4, 8304 <iprintf+0x14>
    82fa:	69a3      	ldr	r3, [r4, #24]
    82fc:	b913      	cbnz	r3, 8304 <iprintf+0x14>
    82fe:	4620      	mov	r0, r4
    8300:	f7ff fe70 	bl	7fe4 <__sinit>
    8304:	ab05      	add	r3, sp, #20
    8306:	9a04      	ldr	r2, [sp, #16]
    8308:	68a1      	ldr	r1, [r4, #8]
    830a:	9301      	str	r3, [sp, #4]
    830c:	4620      	mov	r0, r4
    830e:	f002 fad1 	bl	a8b4 <_vfiprintf_r>
    8312:	b002      	add	sp, #8
    8314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8318:	b004      	add	sp, #16
    831a:	4770      	bx	lr
    831c:	20000090 	.word	0x20000090

00008320 <_puts_r>:
    8320:	b570      	push	{r4, r5, r6, lr}
    8322:	460e      	mov	r6, r1
    8324:	4605      	mov	r5, r0
    8326:	b118      	cbz	r0, 8330 <_puts_r+0x10>
    8328:	6983      	ldr	r3, [r0, #24]
    832a:	b90b      	cbnz	r3, 8330 <_puts_r+0x10>
    832c:	f7ff fe5a 	bl	7fe4 <__sinit>
    8330:	69ab      	ldr	r3, [r5, #24]
    8332:	68ac      	ldr	r4, [r5, #8]
    8334:	b913      	cbnz	r3, 833c <_puts_r+0x1c>
    8336:	4628      	mov	r0, r5
    8338:	f7ff fe54 	bl	7fe4 <__sinit>
    833c:	4b23      	ldr	r3, [pc, #140]	; (83cc <_puts_r+0xac>)
    833e:	429c      	cmp	r4, r3
    8340:	d117      	bne.n	8372 <_puts_r+0x52>
    8342:	686c      	ldr	r4, [r5, #4]
    8344:	89a3      	ldrh	r3, [r4, #12]
    8346:	071b      	lsls	r3, r3, #28
    8348:	d51d      	bpl.n	8386 <_puts_r+0x66>
    834a:	6923      	ldr	r3, [r4, #16]
    834c:	b1db      	cbz	r3, 8386 <_puts_r+0x66>
    834e:	3e01      	subs	r6, #1
    8350:	68a3      	ldr	r3, [r4, #8]
    8352:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    8356:	3b01      	subs	r3, #1
    8358:	60a3      	str	r3, [r4, #8]
    835a:	b9e9      	cbnz	r1, 8398 <_puts_r+0x78>
    835c:	2b00      	cmp	r3, #0
    835e:	da2e      	bge.n	83be <_puts_r+0x9e>
    8360:	4622      	mov	r2, r4
    8362:	210a      	movs	r1, #10
    8364:	4628      	mov	r0, r5
    8366:	f001 f89b 	bl	94a0 <__swbuf_r>
    836a:	3001      	adds	r0, #1
    836c:	d011      	beq.n	8392 <_puts_r+0x72>
    836e:	200a      	movs	r0, #10
    8370:	bd70      	pop	{r4, r5, r6, pc}
    8372:	4b17      	ldr	r3, [pc, #92]	; (83d0 <_puts_r+0xb0>)
    8374:	429c      	cmp	r4, r3
    8376:	d101      	bne.n	837c <_puts_r+0x5c>
    8378:	68ac      	ldr	r4, [r5, #8]
    837a:	e7e3      	b.n	8344 <_puts_r+0x24>
    837c:	4b15      	ldr	r3, [pc, #84]	; (83d4 <_puts_r+0xb4>)
    837e:	429c      	cmp	r4, r3
    8380:	bf08      	it	eq
    8382:	68ec      	ldreq	r4, [r5, #12]
    8384:	e7de      	b.n	8344 <_puts_r+0x24>
    8386:	4621      	mov	r1, r4
    8388:	4628      	mov	r0, r5
    838a:	f001 f8fb 	bl	9584 <__swsetup_r>
    838e:	2800      	cmp	r0, #0
    8390:	d0dd      	beq.n	834e <_puts_r+0x2e>
    8392:	f04f 30ff 	mov.w	r0, #4294967295
    8396:	bd70      	pop	{r4, r5, r6, pc}
    8398:	2b00      	cmp	r3, #0
    839a:	da04      	bge.n	83a6 <_puts_r+0x86>
    839c:	69a2      	ldr	r2, [r4, #24]
    839e:	4293      	cmp	r3, r2
    83a0:	db06      	blt.n	83b0 <_puts_r+0x90>
    83a2:	290a      	cmp	r1, #10
    83a4:	d004      	beq.n	83b0 <_puts_r+0x90>
    83a6:	6823      	ldr	r3, [r4, #0]
    83a8:	1c5a      	adds	r2, r3, #1
    83aa:	6022      	str	r2, [r4, #0]
    83ac:	7019      	strb	r1, [r3, #0]
    83ae:	e7cf      	b.n	8350 <_puts_r+0x30>
    83b0:	4622      	mov	r2, r4
    83b2:	4628      	mov	r0, r5
    83b4:	f001 f874 	bl	94a0 <__swbuf_r>
    83b8:	3001      	adds	r0, #1
    83ba:	d1c9      	bne.n	8350 <_puts_r+0x30>
    83bc:	e7e9      	b.n	8392 <_puts_r+0x72>
    83be:	6823      	ldr	r3, [r4, #0]
    83c0:	200a      	movs	r0, #10
    83c2:	1c5a      	adds	r2, r3, #1
    83c4:	6022      	str	r2, [r4, #0]
    83c6:	7018      	strb	r0, [r3, #0]
    83c8:	bd70      	pop	{r4, r5, r6, pc}
    83ca:	bf00      	nop
    83cc:	0000be00 	.word	0x0000be00
    83d0:	0000be20 	.word	0x0000be20
    83d4:	0000bde0 	.word	0x0000bde0

000083d8 <puts>:
    83d8:	4b02      	ldr	r3, [pc, #8]	; (83e4 <puts+0xc>)
    83da:	4601      	mov	r1, r0
    83dc:	6818      	ldr	r0, [r3, #0]
    83de:	f7ff bf9f 	b.w	8320 <_puts_r>
    83e2:	bf00      	nop
    83e4:	20000090 	.word	0x20000090

000083e8 <_sbrk_r>:
    83e8:	b538      	push	{r3, r4, r5, lr}
    83ea:	4c06      	ldr	r4, [pc, #24]	; (8404 <_sbrk_r+0x1c>)
    83ec:	2300      	movs	r3, #0
    83ee:	4605      	mov	r5, r0
    83f0:	4608      	mov	r0, r1
    83f2:	6023      	str	r3, [r4, #0]
    83f4:	f7fa fb54 	bl	2aa0 <_sbrk>
    83f8:	1c43      	adds	r3, r0, #1
    83fa:	d102      	bne.n	8402 <_sbrk_r+0x1a>
    83fc:	6823      	ldr	r3, [r4, #0]
    83fe:	b103      	cbz	r3, 8402 <_sbrk_r+0x1a>
    8400:	602b      	str	r3, [r5, #0]
    8402:	bd38      	pop	{r3, r4, r5, pc}
    8404:	20004590 	.word	0x20004590

00008408 <setbuf>:
    8408:	2900      	cmp	r1, #0
    840a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    840e:	bf0c      	ite	eq
    8410:	2202      	moveq	r2, #2
    8412:	2200      	movne	r2, #0
    8414:	f000 b800 	b.w	8418 <setvbuf>

00008418 <setvbuf>:
    8418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    841c:	461d      	mov	r5, r3
    841e:	4b51      	ldr	r3, [pc, #324]	; (8564 <setvbuf+0x14c>)
    8420:	681e      	ldr	r6, [r3, #0]
    8422:	4604      	mov	r4, r0
    8424:	460f      	mov	r7, r1
    8426:	4690      	mov	r8, r2
    8428:	b126      	cbz	r6, 8434 <setvbuf+0x1c>
    842a:	69b3      	ldr	r3, [r6, #24]
    842c:	b913      	cbnz	r3, 8434 <setvbuf+0x1c>
    842e:	4630      	mov	r0, r6
    8430:	f7ff fdd8 	bl	7fe4 <__sinit>
    8434:	4b4c      	ldr	r3, [pc, #304]	; (8568 <setvbuf+0x150>)
    8436:	429c      	cmp	r4, r3
    8438:	d152      	bne.n	84e0 <setvbuf+0xc8>
    843a:	6874      	ldr	r4, [r6, #4]
    843c:	f1b8 0f02 	cmp.w	r8, #2
    8440:	d006      	beq.n	8450 <setvbuf+0x38>
    8442:	f1b8 0f01 	cmp.w	r8, #1
    8446:	f200 8089 	bhi.w	855c <setvbuf+0x144>
    844a:	2d00      	cmp	r5, #0
    844c:	f2c0 8086 	blt.w	855c <setvbuf+0x144>
    8450:	4621      	mov	r1, r4
    8452:	4630      	mov	r0, r6
    8454:	f7ff fd5c 	bl	7f10 <_fflush_r>
    8458:	6b61      	ldr	r1, [r4, #52]	; 0x34
    845a:	b141      	cbz	r1, 846e <setvbuf+0x56>
    845c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8460:	4299      	cmp	r1, r3
    8462:	d002      	beq.n	846a <setvbuf+0x52>
    8464:	4630      	mov	r0, r6
    8466:	f7ff fe97 	bl	8198 <_free_r>
    846a:	2300      	movs	r3, #0
    846c:	6363      	str	r3, [r4, #52]	; 0x34
    846e:	2300      	movs	r3, #0
    8470:	61a3      	str	r3, [r4, #24]
    8472:	6063      	str	r3, [r4, #4]
    8474:	89a3      	ldrh	r3, [r4, #12]
    8476:	061b      	lsls	r3, r3, #24
    8478:	d503      	bpl.n	8482 <setvbuf+0x6a>
    847a:	6921      	ldr	r1, [r4, #16]
    847c:	4630      	mov	r0, r6
    847e:	f7ff fe8b 	bl	8198 <_free_r>
    8482:	89a3      	ldrh	r3, [r4, #12]
    8484:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    8488:	f023 0303 	bic.w	r3, r3, #3
    848c:	f1b8 0f02 	cmp.w	r8, #2
    8490:	81a3      	strh	r3, [r4, #12]
    8492:	d05d      	beq.n	8550 <setvbuf+0x138>
    8494:	ab01      	add	r3, sp, #4
    8496:	466a      	mov	r2, sp
    8498:	4621      	mov	r1, r4
    849a:	4630      	mov	r0, r6
    849c:	f001 fc22 	bl	9ce4 <__swhatbuf_r>
    84a0:	89a3      	ldrh	r3, [r4, #12]
    84a2:	4318      	orrs	r0, r3
    84a4:	81a0      	strh	r0, [r4, #12]
    84a6:	bb2d      	cbnz	r5, 84f4 <setvbuf+0xdc>
    84a8:	9d00      	ldr	r5, [sp, #0]
    84aa:	4628      	mov	r0, r5
    84ac:	f001 fc7e 	bl	9dac <malloc>
    84b0:	4607      	mov	r7, r0
    84b2:	2800      	cmp	r0, #0
    84b4:	d14e      	bne.n	8554 <setvbuf+0x13c>
    84b6:	f8dd 9000 	ldr.w	r9, [sp]
    84ba:	45a9      	cmp	r9, r5
    84bc:	d13c      	bne.n	8538 <setvbuf+0x120>
    84be:	f04f 30ff 	mov.w	r0, #4294967295
    84c2:	89a3      	ldrh	r3, [r4, #12]
    84c4:	f043 0302 	orr.w	r3, r3, #2
    84c8:	81a3      	strh	r3, [r4, #12]
    84ca:	2300      	movs	r3, #0
    84cc:	60a3      	str	r3, [r4, #8]
    84ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
    84d2:	6023      	str	r3, [r4, #0]
    84d4:	6123      	str	r3, [r4, #16]
    84d6:	2301      	movs	r3, #1
    84d8:	6163      	str	r3, [r4, #20]
    84da:	b003      	add	sp, #12
    84dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    84e0:	4b22      	ldr	r3, [pc, #136]	; (856c <setvbuf+0x154>)
    84e2:	429c      	cmp	r4, r3
    84e4:	d101      	bne.n	84ea <setvbuf+0xd2>
    84e6:	68b4      	ldr	r4, [r6, #8]
    84e8:	e7a8      	b.n	843c <setvbuf+0x24>
    84ea:	4b21      	ldr	r3, [pc, #132]	; (8570 <setvbuf+0x158>)
    84ec:	429c      	cmp	r4, r3
    84ee:	bf08      	it	eq
    84f0:	68f4      	ldreq	r4, [r6, #12]
    84f2:	e7a3      	b.n	843c <setvbuf+0x24>
    84f4:	2f00      	cmp	r7, #0
    84f6:	d0d8      	beq.n	84aa <setvbuf+0x92>
    84f8:	69b3      	ldr	r3, [r6, #24]
    84fa:	b913      	cbnz	r3, 8502 <setvbuf+0xea>
    84fc:	4630      	mov	r0, r6
    84fe:	f7ff fd71 	bl	7fe4 <__sinit>
    8502:	f1b8 0f01 	cmp.w	r8, #1
    8506:	bf08      	it	eq
    8508:	89a3      	ldrheq	r3, [r4, #12]
    850a:	6027      	str	r7, [r4, #0]
    850c:	bf04      	itt	eq
    850e:	f043 0301 	orreq.w	r3, r3, #1
    8512:	81a3      	strheq	r3, [r4, #12]
    8514:	89a3      	ldrh	r3, [r4, #12]
    8516:	6127      	str	r7, [r4, #16]
    8518:	f013 0008 	ands.w	r0, r3, #8
    851c:	6165      	str	r5, [r4, #20]
    851e:	d01b      	beq.n	8558 <setvbuf+0x140>
    8520:	f013 0001 	ands.w	r0, r3, #1
    8524:	bf18      	it	ne
    8526:	426d      	negne	r5, r5
    8528:	f04f 0300 	mov.w	r3, #0
    852c:	bf1d      	ittte	ne
    852e:	60a3      	strne	r3, [r4, #8]
    8530:	61a5      	strne	r5, [r4, #24]
    8532:	4618      	movne	r0, r3
    8534:	60a5      	streq	r5, [r4, #8]
    8536:	e7d0      	b.n	84da <setvbuf+0xc2>
    8538:	4648      	mov	r0, r9
    853a:	f001 fc37 	bl	9dac <malloc>
    853e:	4607      	mov	r7, r0
    8540:	2800      	cmp	r0, #0
    8542:	d0bc      	beq.n	84be <setvbuf+0xa6>
    8544:	89a3      	ldrh	r3, [r4, #12]
    8546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    854a:	81a3      	strh	r3, [r4, #12]
    854c:	464d      	mov	r5, r9
    854e:	e7d3      	b.n	84f8 <setvbuf+0xe0>
    8550:	2000      	movs	r0, #0
    8552:	e7b6      	b.n	84c2 <setvbuf+0xaa>
    8554:	46a9      	mov	r9, r5
    8556:	e7f5      	b.n	8544 <setvbuf+0x12c>
    8558:	60a0      	str	r0, [r4, #8]
    855a:	e7be      	b.n	84da <setvbuf+0xc2>
    855c:	f04f 30ff 	mov.w	r0, #4294967295
    8560:	e7bb      	b.n	84da <setvbuf+0xc2>
    8562:	bf00      	nop
    8564:	20000090 	.word	0x20000090
    8568:	0000be00 	.word	0x0000be00
    856c:	0000be20 	.word	0x0000be20
    8570:	0000bde0 	.word	0x0000bde0

00008574 <sniprintf>:
    8574:	b40c      	push	{r2, r3}
    8576:	b530      	push	{r4, r5, lr}
    8578:	4b17      	ldr	r3, [pc, #92]	; (85d8 <sniprintf+0x64>)
    857a:	1e0c      	subs	r4, r1, #0
    857c:	b09d      	sub	sp, #116	; 0x74
    857e:	681d      	ldr	r5, [r3, #0]
    8580:	da08      	bge.n	8594 <sniprintf+0x20>
    8582:	238b      	movs	r3, #139	; 0x8b
    8584:	602b      	str	r3, [r5, #0]
    8586:	f04f 30ff 	mov.w	r0, #4294967295
    858a:	b01d      	add	sp, #116	; 0x74
    858c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8590:	b002      	add	sp, #8
    8592:	4770      	bx	lr
    8594:	f44f 7302 	mov.w	r3, #520	; 0x208
    8598:	f8ad 3014 	strh.w	r3, [sp, #20]
    859c:	bf14      	ite	ne
    859e:	f104 33ff 	addne.w	r3, r4, #4294967295
    85a2:	4623      	moveq	r3, r4
    85a4:	9304      	str	r3, [sp, #16]
    85a6:	9307      	str	r3, [sp, #28]
    85a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    85ac:	9002      	str	r0, [sp, #8]
    85ae:	9006      	str	r0, [sp, #24]
    85b0:	f8ad 3016 	strh.w	r3, [sp, #22]
    85b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    85b6:	ab21      	add	r3, sp, #132	; 0x84
    85b8:	a902      	add	r1, sp, #8
    85ba:	4628      	mov	r0, r5
    85bc:	9301      	str	r3, [sp, #4]
    85be:	f002 f85d 	bl	a67c <_svfiprintf_r>
    85c2:	1c43      	adds	r3, r0, #1
    85c4:	bfbc      	itt	lt
    85c6:	238b      	movlt	r3, #139	; 0x8b
    85c8:	602b      	strlt	r3, [r5, #0]
    85ca:	2c00      	cmp	r4, #0
    85cc:	d0dd      	beq.n	858a <sniprintf+0x16>
    85ce:	9b02      	ldr	r3, [sp, #8]
    85d0:	2200      	movs	r2, #0
    85d2:	701a      	strb	r2, [r3, #0]
    85d4:	e7d9      	b.n	858a <sniprintf+0x16>
    85d6:	bf00      	nop
    85d8:	20000090 	.word	0x20000090

000085dc <siprintf>:
    85dc:	b40e      	push	{r1, r2, r3}
    85de:	b500      	push	{lr}
    85e0:	b09c      	sub	sp, #112	; 0x70
    85e2:	f44f 7102 	mov.w	r1, #520	; 0x208
    85e6:	ab1d      	add	r3, sp, #116	; 0x74
    85e8:	f8ad 1014 	strh.w	r1, [sp, #20]
    85ec:	9002      	str	r0, [sp, #8]
    85ee:	9006      	str	r0, [sp, #24]
    85f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    85f4:	480a      	ldr	r0, [pc, #40]	; (8620 <siprintf+0x44>)
    85f6:	9104      	str	r1, [sp, #16]
    85f8:	9107      	str	r1, [sp, #28]
    85fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    85fe:	f853 2b04 	ldr.w	r2, [r3], #4
    8602:	f8ad 1016 	strh.w	r1, [sp, #22]
    8606:	6800      	ldr	r0, [r0, #0]
    8608:	9301      	str	r3, [sp, #4]
    860a:	a902      	add	r1, sp, #8
    860c:	f002 f836 	bl	a67c <_svfiprintf_r>
    8610:	9b02      	ldr	r3, [sp, #8]
    8612:	2200      	movs	r2, #0
    8614:	701a      	strb	r2, [r3, #0]
    8616:	b01c      	add	sp, #112	; 0x70
    8618:	f85d eb04 	ldr.w	lr, [sp], #4
    861c:	b003      	add	sp, #12
    861e:	4770      	bx	lr
    8620:	20000090 	.word	0x20000090

00008624 <__sread>:
    8624:	b510      	push	{r4, lr}
    8626:	460c      	mov	r4, r1
    8628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    862c:	f002 fbee 	bl	ae0c <_read_r>
    8630:	2800      	cmp	r0, #0
    8632:	bfab      	itete	ge
    8634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    8636:	89a3      	ldrhlt	r3, [r4, #12]
    8638:	181b      	addge	r3, r3, r0
    863a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    863e:	bfac      	ite	ge
    8640:	6563      	strge	r3, [r4, #84]	; 0x54
    8642:	81a3      	strhlt	r3, [r4, #12]
    8644:	bd10      	pop	{r4, pc}

00008646 <__swrite>:
    8646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    864a:	461f      	mov	r7, r3
    864c:	898b      	ldrh	r3, [r1, #12]
    864e:	05db      	lsls	r3, r3, #23
    8650:	4605      	mov	r5, r0
    8652:	460c      	mov	r4, r1
    8654:	4616      	mov	r6, r2
    8656:	d505      	bpl.n	8664 <__swrite+0x1e>
    8658:	2302      	movs	r3, #2
    865a:	2200      	movs	r2, #0
    865c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8660:	f001 fb2e 	bl	9cc0 <_lseek_r>
    8664:	89a3      	ldrh	r3, [r4, #12]
    8666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    866a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    866e:	81a3      	strh	r3, [r4, #12]
    8670:	4632      	mov	r2, r6
    8672:	463b      	mov	r3, r7
    8674:	4628      	mov	r0, r5
    8676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    867a:	f000 bf71 	b.w	9560 <_write_r>

0000867e <__sseek>:
    867e:	b510      	push	{r4, lr}
    8680:	460c      	mov	r4, r1
    8682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8686:	f001 fb1b 	bl	9cc0 <_lseek_r>
    868a:	1c43      	adds	r3, r0, #1
    868c:	89a3      	ldrh	r3, [r4, #12]
    868e:	bf15      	itete	ne
    8690:	6560      	strne	r0, [r4, #84]	; 0x54
    8692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    8696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    869a:	81a3      	strheq	r3, [r4, #12]
    869c:	bf18      	it	ne
    869e:	81a3      	strhne	r3, [r4, #12]
    86a0:	bd10      	pop	{r4, pc}

000086a2 <__sclose>:
    86a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    86a6:	f000 bfdb 	b.w	9660 <_close_r>

000086aa <strcat>:
    86aa:	b510      	push	{r4, lr}
    86ac:	4602      	mov	r2, r0
    86ae:	4613      	mov	r3, r2
    86b0:	3201      	adds	r2, #1
    86b2:	781c      	ldrb	r4, [r3, #0]
    86b4:	2c00      	cmp	r4, #0
    86b6:	d1fa      	bne.n	86ae <strcat+0x4>
    86b8:	3b01      	subs	r3, #1
    86ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    86be:	f803 2f01 	strb.w	r2, [r3, #1]!
    86c2:	2a00      	cmp	r2, #0
    86c4:	d1f9      	bne.n	86ba <strcat+0x10>
    86c6:	bd10      	pop	{r4, pc}

000086c8 <strcmp>:
    86c8:	f810 2b01 	ldrb.w	r2, [r0], #1
    86cc:	f811 3b01 	ldrb.w	r3, [r1], #1
    86d0:	2a01      	cmp	r2, #1
    86d2:	bf28      	it	cs
    86d4:	429a      	cmpcs	r2, r3
    86d6:	d0f7      	beq.n	86c8 <strcmp>
    86d8:	1ad0      	subs	r0, r2, r3
    86da:	4770      	bx	lr

000086dc <strcpy>:
    86dc:	4603      	mov	r3, r0
    86de:	f811 2b01 	ldrb.w	r2, [r1], #1
    86e2:	f803 2b01 	strb.w	r2, [r3], #1
    86e6:	2a00      	cmp	r2, #0
    86e8:	d1f9      	bne.n	86de <strcpy+0x2>
    86ea:	4770      	bx	lr

000086ec <strlen>:
    86ec:	4603      	mov	r3, r0
    86ee:	f813 2b01 	ldrb.w	r2, [r3], #1
    86f2:	2a00      	cmp	r2, #0
    86f4:	d1fb      	bne.n	86ee <strlen+0x2>
    86f6:	1a18      	subs	r0, r3, r0
    86f8:	3801      	subs	r0, #1
    86fa:	4770      	bx	lr

000086fc <strncat>:
    86fc:	b530      	push	{r4, r5, lr}
    86fe:	4603      	mov	r3, r0
    8700:	781c      	ldrb	r4, [r3, #0]
    8702:	1c5d      	adds	r5, r3, #1
    8704:	b944      	cbnz	r4, 8718 <strncat+0x1c>
    8706:	f112 32ff 	adds.w	r2, r2, #4294967295
    870a:	d304      	bcc.n	8716 <strncat+0x1a>
    870c:	f811 4b01 	ldrb.w	r4, [r1], #1
    8710:	f803 4b01 	strb.w	r4, [r3], #1
    8714:	b914      	cbnz	r4, 871c <strncat+0x20>
    8716:	bd30      	pop	{r4, r5, pc}
    8718:	462b      	mov	r3, r5
    871a:	e7f1      	b.n	8700 <strncat+0x4>
    871c:	2a00      	cmp	r2, #0
    871e:	d1f2      	bne.n	8706 <strncat+0xa>
    8720:	701a      	strb	r2, [r3, #0]
    8722:	e7f0      	b.n	8706 <strncat+0xa>

00008724 <sulp>:
    8724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8728:	460f      	mov	r7, r1
    872a:	4690      	mov	r8, r2
    872c:	f001 fe14 	bl	a358 <__ulp>
    8730:	4604      	mov	r4, r0
    8732:	460d      	mov	r5, r1
    8734:	f1b8 0f00 	cmp.w	r8, #0
    8738:	d011      	beq.n	875e <sulp+0x3a>
    873a:	f3c7 530a 	ubfx	r3, r7, #20, #11
    873e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    8742:	2b00      	cmp	r3, #0
    8744:	dd0b      	ble.n	875e <sulp+0x3a>
    8746:	051b      	lsls	r3, r3, #20
    8748:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
    874c:	2400      	movs	r4, #0
    874e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
    8752:	4622      	mov	r2, r4
    8754:	462b      	mov	r3, r5
    8756:	f7fe fec9 	bl	74ec <__aeabi_dmul>
    875a:	4604      	mov	r4, r0
    875c:	460d      	mov	r5, r1
    875e:	4620      	mov	r0, r4
    8760:	4629      	mov	r1, r5
    8762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00008768 <_strtod_l>:
    8768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    876c:	4699      	mov	r9, r3
    876e:	b09f      	sub	sp, #124	; 0x7c
    8770:	2300      	movs	r3, #0
    8772:	4680      	mov	r8, r0
    8774:	4648      	mov	r0, r9
    8776:	460c      	mov	r4, r1
    8778:	9215      	str	r2, [sp, #84]	; 0x54
    877a:	931a      	str	r3, [sp, #104]	; 0x68
    877c:	f001 fa9d 	bl	9cba <__localeconv_l>
    8780:	4607      	mov	r7, r0
    8782:	6800      	ldr	r0, [r0, #0]
    8784:	f7ff ffb2 	bl	86ec <strlen>
    8788:	f04f 0a00 	mov.w	sl, #0
    878c:	4605      	mov	r5, r0
    878e:	f04f 0b00 	mov.w	fp, #0
    8792:	9419      	str	r4, [sp, #100]	; 0x64
    8794:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8796:	781a      	ldrb	r2, [r3, #0]
    8798:	2a0d      	cmp	r2, #13
    879a:	d833      	bhi.n	8804 <_strtod_l+0x9c>
    879c:	2a09      	cmp	r2, #9
    879e:	d237      	bcs.n	8810 <_strtod_l+0xa8>
    87a0:	2a00      	cmp	r2, #0
    87a2:	d03f      	beq.n	8824 <_strtod_l+0xbc>
    87a4:	2300      	movs	r3, #0
    87a6:	9309      	str	r3, [sp, #36]	; 0x24
    87a8:	9e19      	ldr	r6, [sp, #100]	; 0x64
    87aa:	7833      	ldrb	r3, [r6, #0]
    87ac:	2b30      	cmp	r3, #48	; 0x30
    87ae:	f040 8101 	bne.w	89b4 <_strtod_l+0x24c>
    87b2:	7873      	ldrb	r3, [r6, #1]
    87b4:	2b58      	cmp	r3, #88	; 0x58
    87b6:	d001      	beq.n	87bc <_strtod_l+0x54>
    87b8:	2b78      	cmp	r3, #120	; 0x78
    87ba:	d16b      	bne.n	8894 <_strtod_l+0x12c>
    87bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    87be:	9301      	str	r3, [sp, #4]
    87c0:	ab1a      	add	r3, sp, #104	; 0x68
    87c2:	9300      	str	r3, [sp, #0]
    87c4:	f8cd 9008 	str.w	r9, [sp, #8]
    87c8:	ab1b      	add	r3, sp, #108	; 0x6c
    87ca:	4aaa      	ldr	r2, [pc, #680]	; (8a74 <_strtod_l+0x30c>)
    87cc:	a919      	add	r1, sp, #100	; 0x64
    87ce:	4640      	mov	r0, r8
    87d0:	f000 ffa0 	bl	9714 <__gethex>
    87d4:	f010 0407 	ands.w	r4, r0, #7
    87d8:	4605      	mov	r5, r0
    87da:	d005      	beq.n	87e8 <_strtod_l+0x80>
    87dc:	2c06      	cmp	r4, #6
    87de:	d12b      	bne.n	8838 <_strtod_l+0xd0>
    87e0:	3601      	adds	r6, #1
    87e2:	2300      	movs	r3, #0
    87e4:	9619      	str	r6, [sp, #100]	; 0x64
    87e6:	9309      	str	r3, [sp, #36]	; 0x24
    87e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    87ea:	2b00      	cmp	r3, #0
    87ec:	f040 8599 	bne.w	9322 <_strtod_l+0xbba>
    87f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    87f2:	b1e3      	cbz	r3, 882e <_strtod_l+0xc6>
    87f4:	4652      	mov	r2, sl
    87f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    87fa:	4610      	mov	r0, r2
    87fc:	4619      	mov	r1, r3
    87fe:	b01f      	add	sp, #124	; 0x7c
    8800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8804:	2a2b      	cmp	r2, #43	; 0x2b
    8806:	d006      	beq.n	8816 <_strtod_l+0xae>
    8808:	2a2d      	cmp	r2, #45	; 0x2d
    880a:	d013      	beq.n	8834 <_strtod_l+0xcc>
    880c:	2a20      	cmp	r2, #32
    880e:	d1c9      	bne.n	87a4 <_strtod_l+0x3c>
    8810:	3301      	adds	r3, #1
    8812:	9319      	str	r3, [sp, #100]	; 0x64
    8814:	e7be      	b.n	8794 <_strtod_l+0x2c>
    8816:	2200      	movs	r2, #0
    8818:	9209      	str	r2, [sp, #36]	; 0x24
    881a:	1c5a      	adds	r2, r3, #1
    881c:	9219      	str	r2, [sp, #100]	; 0x64
    881e:	785b      	ldrb	r3, [r3, #1]
    8820:	2b00      	cmp	r3, #0
    8822:	d1c1      	bne.n	87a8 <_strtod_l+0x40>
    8824:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8826:	9419      	str	r4, [sp, #100]	; 0x64
    8828:	2b00      	cmp	r3, #0
    882a:	f040 8578 	bne.w	931e <_strtod_l+0xbb6>
    882e:	4652      	mov	r2, sl
    8830:	465b      	mov	r3, fp
    8832:	e7e2      	b.n	87fa <_strtod_l+0x92>
    8834:	2201      	movs	r2, #1
    8836:	e7ef      	b.n	8818 <_strtod_l+0xb0>
    8838:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    883a:	b13a      	cbz	r2, 884c <_strtod_l+0xe4>
    883c:	2135      	movs	r1, #53	; 0x35
    883e:	a81c      	add	r0, sp, #112	; 0x70
    8840:	f001 fe77 	bl	a532 <__copybits>
    8844:	991a      	ldr	r1, [sp, #104]	; 0x68
    8846:	4640      	mov	r0, r8
    8848:	f001 faf9 	bl	9e3e <_Bfree>
    884c:	3c01      	subs	r4, #1
    884e:	2c04      	cmp	r4, #4
    8850:	d808      	bhi.n	8864 <_strtod_l+0xfc>
    8852:	e8df f004 	tbb	[pc, r4]
    8856:	030c      	.short	0x030c
    8858:	1a17      	.short	0x1a17
    885a:	0c          	.byte	0x0c
    885b:	00          	.byte	0x00
    885c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    8860:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    8864:	0729      	lsls	r1, r5, #28
    8866:	d5bf      	bpl.n	87e8 <_strtod_l+0x80>
    8868:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
    886c:	e7bc      	b.n	87e8 <_strtod_l+0x80>
    886e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8870:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8872:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    8876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    887a:	f202 4233 	addw	r2, r2, #1075	; 0x433
    887e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
    8882:	e7ef      	b.n	8864 <_strtod_l+0xfc>
    8884:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8a80 <_strtod_l+0x318>
    8888:	e7ec      	b.n	8864 <_strtod_l+0xfc>
    888a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    888e:	f04f 3aff 	mov.w	sl, #4294967295
    8892:	e7e7      	b.n	8864 <_strtod_l+0xfc>
    8894:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8896:	1c5a      	adds	r2, r3, #1
    8898:	9219      	str	r2, [sp, #100]	; 0x64
    889a:	785b      	ldrb	r3, [r3, #1]
    889c:	2b30      	cmp	r3, #48	; 0x30
    889e:	d0f9      	beq.n	8894 <_strtod_l+0x12c>
    88a0:	2b00      	cmp	r3, #0
    88a2:	d0a1      	beq.n	87e8 <_strtod_l+0x80>
    88a4:	2301      	movs	r3, #1
    88a6:	9308      	str	r3, [sp, #32]
    88a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    88aa:	930a      	str	r3, [sp, #40]	; 0x28
    88ac:	2300      	movs	r3, #0
    88ae:	9305      	str	r3, [sp, #20]
    88b0:	9306      	str	r3, [sp, #24]
    88b2:	9304      	str	r3, [sp, #16]
    88b4:	220a      	movs	r2, #10
    88b6:	9819      	ldr	r0, [sp, #100]	; 0x64
    88b8:	7806      	ldrb	r6, [r0, #0]
    88ba:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    88be:	b2d9      	uxtb	r1, r3
    88c0:	2909      	cmp	r1, #9
    88c2:	d979      	bls.n	89b8 <_strtod_l+0x250>
    88c4:	462a      	mov	r2, r5
    88c6:	6839      	ldr	r1, [r7, #0]
    88c8:	f002 fab2 	bl	ae30 <strncmp>
    88cc:	2800      	cmp	r0, #0
    88ce:	f000 8085 	beq.w	89dc <_strtod_l+0x274>
    88d2:	2000      	movs	r0, #0
    88d4:	9d04      	ldr	r5, [sp, #16]
    88d6:	4633      	mov	r3, r6
    88d8:	4602      	mov	r2, r0
    88da:	4601      	mov	r1, r0
    88dc:	2b65      	cmp	r3, #101	; 0x65
    88de:	d002      	beq.n	88e6 <_strtod_l+0x17e>
    88e0:	2b45      	cmp	r3, #69	; 0x45
    88e2:	f040 80ef 	bne.w	8ac4 <_strtod_l+0x35c>
    88e6:	b925      	cbnz	r5, 88f2 <_strtod_l+0x18a>
    88e8:	b910      	cbnz	r0, 88f0 <_strtod_l+0x188>
    88ea:	9b08      	ldr	r3, [sp, #32]
    88ec:	2b00      	cmp	r3, #0
    88ee:	d099      	beq.n	8824 <_strtod_l+0xbc>
    88f0:	2500      	movs	r5, #0
    88f2:	9c19      	ldr	r4, [sp, #100]	; 0x64
    88f4:	1c63      	adds	r3, r4, #1
    88f6:	9319      	str	r3, [sp, #100]	; 0x64
    88f8:	7863      	ldrb	r3, [r4, #1]
    88fa:	2b2b      	cmp	r3, #43	; 0x2b
    88fc:	f000 80cf 	beq.w	8a9e <_strtod_l+0x336>
    8900:	2b2d      	cmp	r3, #45	; 0x2d
    8902:	f000 80d2 	beq.w	8aaa <_strtod_l+0x342>
    8906:	2600      	movs	r6, #0
    8908:	9607      	str	r6, [sp, #28]
    890a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
    890e:	2e09      	cmp	r6, #9
    8910:	f200 80d7 	bhi.w	8ac2 <_strtod_l+0x35a>
    8914:	2b30      	cmp	r3, #48	; 0x30
    8916:	f000 80ca 	beq.w	8aae <_strtod_l+0x346>
    891a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
    891e:	2e08      	cmp	r6, #8
    8920:	f200 80d0 	bhi.w	8ac4 <_strtod_l+0x35c>
    8924:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    8928:	9b19      	ldr	r3, [sp, #100]	; 0x64
    892a:	f04f 0c0a 	mov.w	ip, #10
    892e:	461f      	mov	r7, r3
    8930:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8932:	1c5e      	adds	r6, r3, #1
    8934:	9619      	str	r6, [sp, #100]	; 0x64
    8936:	785b      	ldrb	r3, [r3, #1]
    8938:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
    893c:	f1b9 0f09 	cmp.w	r9, #9
    8940:	f240 80ba 	bls.w	8ab8 <_strtod_l+0x350>
    8944:	1bf6      	subs	r6, r6, r7
    8946:	2e08      	cmp	r6, #8
    8948:	f644 691f 	movw	r9, #19999	; 0x4e1f
    894c:	dc02      	bgt.n	8954 <_strtod_l+0x1ec>
    894e:	45f1      	cmp	r9, lr
    8950:	bfa8      	it	ge
    8952:	46f1      	movge	r9, lr
    8954:	9e07      	ldr	r6, [sp, #28]
    8956:	b10e      	cbz	r6, 895c <_strtod_l+0x1f4>
    8958:	f1c9 0900 	rsb	r9, r9, #0
    895c:	2d00      	cmp	r5, #0
    895e:	f040 80d7 	bne.w	8b10 <_strtod_l+0x3a8>
    8962:	2800      	cmp	r0, #0
    8964:	f47f af40 	bne.w	87e8 <_strtod_l+0x80>
    8968:	9a08      	ldr	r2, [sp, #32]
    896a:	2a00      	cmp	r2, #0
    896c:	f47f af3c 	bne.w	87e8 <_strtod_l+0x80>
    8970:	2900      	cmp	r1, #0
    8972:	f47f af57 	bne.w	8824 <_strtod_l+0xbc>
    8976:	2b4e      	cmp	r3, #78	; 0x4e
    8978:	f000 80ad 	beq.w	8ad6 <_strtod_l+0x36e>
    897c:	f300 80a5 	bgt.w	8aca <_strtod_l+0x362>
    8980:	2b49      	cmp	r3, #73	; 0x49
    8982:	f47f af4f 	bne.w	8824 <_strtod_l+0xbc>
    8986:	493c      	ldr	r1, [pc, #240]	; (8a78 <_strtod_l+0x310>)
    8988:	a819      	add	r0, sp, #100	; 0x64
    898a:	f001 f8f3 	bl	9b74 <__match>
    898e:	2800      	cmp	r0, #0
    8990:	f43f af48 	beq.w	8824 <_strtod_l+0xbc>
    8994:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8996:	4939      	ldr	r1, [pc, #228]	; (8a7c <_strtod_l+0x314>)
    8998:	3b01      	subs	r3, #1
    899a:	a819      	add	r0, sp, #100	; 0x64
    899c:	9319      	str	r3, [sp, #100]	; 0x64
    899e:	f001 f8e9 	bl	9b74 <__match>
    89a2:	b910      	cbnz	r0, 89aa <_strtod_l+0x242>
    89a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    89a6:	3301      	adds	r3, #1
    89a8:	9319      	str	r3, [sp, #100]	; 0x64
    89aa:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8a80 <_strtod_l+0x318>
    89ae:	f04f 0a00 	mov.w	sl, #0
    89b2:	e719      	b.n	87e8 <_strtod_l+0x80>
    89b4:	2300      	movs	r3, #0
    89b6:	e776      	b.n	88a6 <_strtod_l+0x13e>
    89b8:	9904      	ldr	r1, [sp, #16]
    89ba:	2908      	cmp	r1, #8
    89bc:	bfd5      	itete	le
    89be:	9906      	ldrle	r1, [sp, #24]
    89c0:	9905      	ldrgt	r1, [sp, #20]
    89c2:	fb02 3301 	mlale	r3, r2, r1, r3
    89c6:	fb02 3301 	mlagt	r3, r2, r1, r3
    89ca:	bfd4      	ite	le
    89cc:	9306      	strle	r3, [sp, #24]
    89ce:	9305      	strgt	r3, [sp, #20]
    89d0:	9b04      	ldr	r3, [sp, #16]
    89d2:	3001      	adds	r0, #1
    89d4:	3301      	adds	r3, #1
    89d6:	9304      	str	r3, [sp, #16]
    89d8:	9019      	str	r0, [sp, #100]	; 0x64
    89da:	e76c      	b.n	88b6 <_strtod_l+0x14e>
    89dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    89de:	195a      	adds	r2, r3, r5
    89e0:	9219      	str	r2, [sp, #100]	; 0x64
    89e2:	9a04      	ldr	r2, [sp, #16]
    89e4:	5d5b      	ldrb	r3, [r3, r5]
    89e6:	2a00      	cmp	r2, #0
    89e8:	d154      	bne.n	8a94 <_strtod_l+0x32c>
    89ea:	4610      	mov	r0, r2
    89ec:	2b30      	cmp	r3, #48	; 0x30
    89ee:	d02a      	beq.n	8a46 <_strtod_l+0x2de>
    89f0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
    89f4:	2a08      	cmp	r2, #8
    89f6:	f200 8499 	bhi.w	932c <_strtod_l+0xbc4>
    89fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    89fc:	920a      	str	r2, [sp, #40]	; 0x28
    89fe:	4602      	mov	r2, r0
    8a00:	2000      	movs	r0, #0
    8a02:	4605      	mov	r5, r0
    8a04:	3b30      	subs	r3, #48	; 0x30
    8a06:	f100 0101 	add.w	r1, r0, #1
    8a0a:	d011      	beq.n	8a30 <_strtod_l+0x2c8>
    8a0c:	440a      	add	r2, r1
    8a0e:	eb00 0c05 	add.w	ip, r0, r5
    8a12:	4629      	mov	r1, r5
    8a14:	260a      	movs	r6, #10
    8a16:	4561      	cmp	r1, ip
    8a18:	d11b      	bne.n	8a52 <_strtod_l+0x2ea>
    8a1a:	4428      	add	r0, r5
    8a1c:	2808      	cmp	r0, #8
    8a1e:	f100 0501 	add.w	r5, r0, #1
    8a22:	dc2f      	bgt.n	8a84 <_strtod_l+0x31c>
    8a24:	9806      	ldr	r0, [sp, #24]
    8a26:	210a      	movs	r1, #10
    8a28:	fb01 3300 	mla	r3, r1, r0, r3
    8a2c:	9306      	str	r3, [sp, #24]
    8a2e:	2100      	movs	r1, #0
    8a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8a32:	1c58      	adds	r0, r3, #1
    8a34:	9019      	str	r0, [sp, #100]	; 0x64
    8a36:	785b      	ldrb	r3, [r3, #1]
    8a38:	4608      	mov	r0, r1
    8a3a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    8a3e:	2909      	cmp	r1, #9
    8a40:	d9e0      	bls.n	8a04 <_strtod_l+0x29c>
    8a42:	2101      	movs	r1, #1
    8a44:	e74a      	b.n	88dc <_strtod_l+0x174>
    8a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8a48:	1c5a      	adds	r2, r3, #1
    8a4a:	9219      	str	r2, [sp, #100]	; 0x64
    8a4c:	3001      	adds	r0, #1
    8a4e:	785b      	ldrb	r3, [r3, #1]
    8a50:	e7cc      	b.n	89ec <_strtod_l+0x284>
    8a52:	3101      	adds	r1, #1
    8a54:	f101 3eff 	add.w	lr, r1, #4294967295
    8a58:	f1be 0f08 	cmp.w	lr, #8
    8a5c:	dc03      	bgt.n	8a66 <_strtod_l+0x2fe>
    8a5e:	9f06      	ldr	r7, [sp, #24]
    8a60:	4377      	muls	r7, r6
    8a62:	9706      	str	r7, [sp, #24]
    8a64:	e7d7      	b.n	8a16 <_strtod_l+0x2ae>
    8a66:	2910      	cmp	r1, #16
    8a68:	bfde      	ittt	le
    8a6a:	9f05      	ldrle	r7, [sp, #20]
    8a6c:	4377      	mulle	r7, r6
    8a6e:	9705      	strle	r7, [sp, #20]
    8a70:	e7d1      	b.n	8a16 <_strtod_l+0x2ae>
    8a72:	bf00      	nop
    8a74:	0000be5c 	.word	0x0000be5c
    8a78:	0000be4e 	.word	0x0000be4e
    8a7c:	0000be51 	.word	0x0000be51
    8a80:	7ff00000 	.word	0x7ff00000
    8a84:	2d10      	cmp	r5, #16
    8a86:	bfdf      	itttt	le
    8a88:	9805      	ldrle	r0, [sp, #20]
    8a8a:	210a      	movle	r1, #10
    8a8c:	fb01 3300 	mlale	r3, r1, r0, r3
    8a90:	9305      	strle	r3, [sp, #20]
    8a92:	e7cc      	b.n	8a2e <_strtod_l+0x2c6>
    8a94:	4602      	mov	r2, r0
    8a96:	9d04      	ldr	r5, [sp, #16]
    8a98:	e7cf      	b.n	8a3a <_strtod_l+0x2d2>
    8a9a:	2101      	movs	r1, #1
    8a9c:	e724      	b.n	88e8 <_strtod_l+0x180>
    8a9e:	2300      	movs	r3, #0
    8aa0:	9307      	str	r3, [sp, #28]
    8aa2:	1ca3      	adds	r3, r4, #2
    8aa4:	9319      	str	r3, [sp, #100]	; 0x64
    8aa6:	78a3      	ldrb	r3, [r4, #2]
    8aa8:	e72f      	b.n	890a <_strtod_l+0x1a2>
    8aaa:	2301      	movs	r3, #1
    8aac:	e7f8      	b.n	8aa0 <_strtod_l+0x338>
    8aae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8ab0:	1c5e      	adds	r6, r3, #1
    8ab2:	9619      	str	r6, [sp, #100]	; 0x64
    8ab4:	785b      	ldrb	r3, [r3, #1]
    8ab6:	e72d      	b.n	8914 <_strtod_l+0x1ac>
    8ab8:	fb0c 3e0e 	mla	lr, ip, lr, r3
    8abc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
    8ac0:	e736      	b.n	8930 <_strtod_l+0x1c8>
    8ac2:	9419      	str	r4, [sp, #100]	; 0x64
    8ac4:	f04f 0900 	mov.w	r9, #0
    8ac8:	e748      	b.n	895c <_strtod_l+0x1f4>
    8aca:	2b69      	cmp	r3, #105	; 0x69
    8acc:	f43f af5b 	beq.w	8986 <_strtod_l+0x21e>
    8ad0:	2b6e      	cmp	r3, #110	; 0x6e
    8ad2:	f47f aea7 	bne.w	8824 <_strtod_l+0xbc>
    8ad6:	498c      	ldr	r1, [pc, #560]	; (8d08 <_strtod_l+0x5a0>)
    8ad8:	a819      	add	r0, sp, #100	; 0x64
    8ada:	f001 f84b 	bl	9b74 <__match>
    8ade:	2800      	cmp	r0, #0
    8ae0:	f43f aea0 	beq.w	8824 <_strtod_l+0xbc>
    8ae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8ae6:	781b      	ldrb	r3, [r3, #0]
    8ae8:	2b28      	cmp	r3, #40	; 0x28
    8aea:	d10e      	bne.n	8b0a <_strtod_l+0x3a2>
    8aec:	aa1c      	add	r2, sp, #112	; 0x70
    8aee:	4987      	ldr	r1, [pc, #540]	; (8d0c <_strtod_l+0x5a4>)
    8af0:	a819      	add	r0, sp, #100	; 0x64
    8af2:	f001 f852 	bl	9b9a <__hexnan>
    8af6:	2805      	cmp	r0, #5
    8af8:	d107      	bne.n	8b0a <_strtod_l+0x3a2>
    8afa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8afc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    8b00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
    8b04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
    8b08:	e66e      	b.n	87e8 <_strtod_l+0x80>
    8b0a:	f8df b210 	ldr.w	fp, [pc, #528]	; 8d1c <_strtod_l+0x5b4>
    8b0e:	e74e      	b.n	89ae <_strtod_l+0x246>
    8b10:	9b04      	ldr	r3, [sp, #16]
    8b12:	9806      	ldr	r0, [sp, #24]
    8b14:	2b00      	cmp	r3, #0
    8b16:	bf08      	it	eq
    8b18:	462b      	moveq	r3, r5
    8b1a:	2d10      	cmp	r5, #16
    8b1c:	462c      	mov	r4, r5
    8b1e:	eba9 0902 	sub.w	r9, r9, r2
    8b22:	bfa8      	it	ge
    8b24:	2410      	movge	r4, #16
    8b26:	9304      	str	r3, [sp, #16]
    8b28:	f7fe fc6a 	bl	7400 <__aeabi_ui2d>
    8b2c:	2c09      	cmp	r4, #9
    8b2e:	4682      	mov	sl, r0
    8b30:	468b      	mov	fp, r1
    8b32:	dd13      	ble.n	8b5c <_strtod_l+0x3f4>
    8b34:	4b76      	ldr	r3, [pc, #472]	; (8d10 <_strtod_l+0x5a8>)
    8b36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8b3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    8b3e:	f7fe fcd5 	bl	74ec <__aeabi_dmul>
    8b42:	4606      	mov	r6, r0
    8b44:	9805      	ldr	r0, [sp, #20]
    8b46:	460f      	mov	r7, r1
    8b48:	f7fe fc5a 	bl	7400 <__aeabi_ui2d>
    8b4c:	4602      	mov	r2, r0
    8b4e:	460b      	mov	r3, r1
    8b50:	4630      	mov	r0, r6
    8b52:	4639      	mov	r1, r7
    8b54:	f7fe fb18 	bl	7188 <__adddf3>
    8b58:	4682      	mov	sl, r0
    8b5a:	468b      	mov	fp, r1
    8b5c:	2d0f      	cmp	r5, #15
    8b5e:	dc36      	bgt.n	8bce <_strtod_l+0x466>
    8b60:	f1b9 0f00 	cmp.w	r9, #0
    8b64:	f43f ae40 	beq.w	87e8 <_strtod_l+0x80>
    8b68:	dd24      	ble.n	8bb4 <_strtod_l+0x44c>
    8b6a:	f1b9 0f16 	cmp.w	r9, #22
    8b6e:	dc0b      	bgt.n	8b88 <_strtod_l+0x420>
    8b70:	4d67      	ldr	r5, [pc, #412]	; (8d10 <_strtod_l+0x5a8>)
    8b72:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    8b76:	e9d9 0100 	ldrd	r0, r1, [r9]
    8b7a:	4652      	mov	r2, sl
    8b7c:	465b      	mov	r3, fp
    8b7e:	f7fe fcb5 	bl	74ec <__aeabi_dmul>
    8b82:	4682      	mov	sl, r0
    8b84:	468b      	mov	fp, r1
    8b86:	e62f      	b.n	87e8 <_strtod_l+0x80>
    8b88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    8b8c:	4599      	cmp	r9, r3
    8b8e:	dc1e      	bgt.n	8bce <_strtod_l+0x466>
    8b90:	4c5f      	ldr	r4, [pc, #380]	; (8d10 <_strtod_l+0x5a8>)
    8b92:	f1c5 050f 	rsb	r5, r5, #15
    8b96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    8b9a:	eba9 0505 	sub.w	r5, r9, r5
    8b9e:	4652      	mov	r2, sl
    8ba0:	465b      	mov	r3, fp
    8ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
    8ba6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    8baa:	f7fe fc9f 	bl	74ec <__aeabi_dmul>
    8bae:	e9d4 2300 	ldrd	r2, r3, [r4]
    8bb2:	e7e4      	b.n	8b7e <_strtod_l+0x416>
    8bb4:	f119 0f16 	cmn.w	r9, #22
    8bb8:	db09      	blt.n	8bce <_strtod_l+0x466>
    8bba:	4d55      	ldr	r5, [pc, #340]	; (8d10 <_strtod_l+0x5a8>)
    8bbc:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
    8bc0:	e9d9 2300 	ldrd	r2, r3, [r9]
    8bc4:	4650      	mov	r0, sl
    8bc6:	4659      	mov	r1, fp
    8bc8:	f7fe fdba 	bl	7740 <__aeabi_ddiv>
    8bcc:	e7d9      	b.n	8b82 <_strtod_l+0x41a>
    8bce:	1b2c      	subs	r4, r5, r4
    8bd0:	444c      	add	r4, r9
    8bd2:	2c00      	cmp	r4, #0
    8bd4:	dd73      	ble.n	8cbe <_strtod_l+0x556>
    8bd6:	f014 030f 	ands.w	r3, r4, #15
    8bda:	d00a      	beq.n	8bf2 <_strtod_l+0x48a>
    8bdc:	494c      	ldr	r1, [pc, #304]	; (8d10 <_strtod_l+0x5a8>)
    8bde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    8be2:	4652      	mov	r2, sl
    8be4:	465b      	mov	r3, fp
    8be6:	e9d1 0100 	ldrd	r0, r1, [r1]
    8bea:	f7fe fc7f 	bl	74ec <__aeabi_dmul>
    8bee:	4682      	mov	sl, r0
    8bf0:	468b      	mov	fp, r1
    8bf2:	f034 040f 	bics.w	r4, r4, #15
    8bf6:	d054      	beq.n	8ca2 <_strtod_l+0x53a>
    8bf8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    8bfc:	dd27      	ble.n	8c4e <_strtod_l+0x4e6>
    8bfe:	f04f 0900 	mov.w	r9, #0
    8c02:	f8cd 9010 	str.w	r9, [sp, #16]
    8c06:	f8cd 901c 	str.w	r9, [sp, #28]
    8c0a:	f8cd 9018 	str.w	r9, [sp, #24]
    8c0e:	2322      	movs	r3, #34	; 0x22
    8c10:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8d20 <_strtod_l+0x5b8>
    8c14:	f8c8 3000 	str.w	r3, [r8]
    8c18:	f04f 0a00 	mov.w	sl, #0
    8c1c:	9b07      	ldr	r3, [sp, #28]
    8c1e:	2b00      	cmp	r3, #0
    8c20:	f43f ade2 	beq.w	87e8 <_strtod_l+0x80>
    8c24:	991a      	ldr	r1, [sp, #104]	; 0x68
    8c26:	4640      	mov	r0, r8
    8c28:	f001 f909 	bl	9e3e <_Bfree>
    8c2c:	9906      	ldr	r1, [sp, #24]
    8c2e:	4640      	mov	r0, r8
    8c30:	f001 f905 	bl	9e3e <_Bfree>
    8c34:	9904      	ldr	r1, [sp, #16]
    8c36:	4640      	mov	r0, r8
    8c38:	f001 f901 	bl	9e3e <_Bfree>
    8c3c:	9907      	ldr	r1, [sp, #28]
    8c3e:	4640      	mov	r0, r8
    8c40:	f001 f8fd 	bl	9e3e <_Bfree>
    8c44:	4649      	mov	r1, r9
    8c46:	4640      	mov	r0, r8
    8c48:	f001 f8f9 	bl	9e3e <_Bfree>
    8c4c:	e5cc      	b.n	87e8 <_strtod_l+0x80>
    8c4e:	2300      	movs	r3, #0
    8c50:	4e30      	ldr	r6, [pc, #192]	; (8d14 <_strtod_l+0x5ac>)
    8c52:	1124      	asrs	r4, r4, #4
    8c54:	4650      	mov	r0, sl
    8c56:	4659      	mov	r1, fp
    8c58:	461f      	mov	r7, r3
    8c5a:	2c01      	cmp	r4, #1
    8c5c:	dc24      	bgt.n	8ca8 <_strtod_l+0x540>
    8c5e:	b10b      	cbz	r3, 8c64 <_strtod_l+0x4fc>
    8c60:	4682      	mov	sl, r0
    8c62:	468b      	mov	fp, r1
    8c64:	4b2b      	ldr	r3, [pc, #172]	; (8d14 <_strtod_l+0x5ac>)
    8c66:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
    8c6a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    8c6e:	4652      	mov	r2, sl
    8c70:	465b      	mov	r3, fp
    8c72:	e9d7 0100 	ldrd	r0, r1, [r7]
    8c76:	f7fe fc39 	bl	74ec <__aeabi_dmul>
    8c7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    8c7e:	468b      	mov	fp, r1
    8c80:	460a      	mov	r2, r1
    8c82:	0d1b      	lsrs	r3, r3, #20
    8c84:	4924      	ldr	r1, [pc, #144]	; (8d18 <_strtod_l+0x5b0>)
    8c86:	051b      	lsls	r3, r3, #20
    8c88:	428b      	cmp	r3, r1
    8c8a:	4682      	mov	sl, r0
    8c8c:	d8b7      	bhi.n	8bfe <_strtod_l+0x496>
    8c8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    8c92:	428b      	cmp	r3, r1
    8c94:	bf86      	itte	hi
    8c96:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 8d24 <_strtod_l+0x5bc>
    8c9a:	f04f 3aff 	movhi.w	sl, #4294967295
    8c9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
    8ca2:	2300      	movs	r3, #0
    8ca4:	9305      	str	r3, [sp, #20]
    8ca6:	e070      	b.n	8d8a <_strtod_l+0x622>
    8ca8:	07e2      	lsls	r2, r4, #31
    8caa:	d504      	bpl.n	8cb6 <_strtod_l+0x54e>
    8cac:	e9d6 2300 	ldrd	r2, r3, [r6]
    8cb0:	f7fe fc1c 	bl	74ec <__aeabi_dmul>
    8cb4:	2301      	movs	r3, #1
    8cb6:	3701      	adds	r7, #1
    8cb8:	1064      	asrs	r4, r4, #1
    8cba:	3608      	adds	r6, #8
    8cbc:	e7cd      	b.n	8c5a <_strtod_l+0x4f2>
    8cbe:	d0f0      	beq.n	8ca2 <_strtod_l+0x53a>
    8cc0:	4264      	negs	r4, r4
    8cc2:	f014 020f 	ands.w	r2, r4, #15
    8cc6:	d00a      	beq.n	8cde <_strtod_l+0x576>
    8cc8:	4b11      	ldr	r3, [pc, #68]	; (8d10 <_strtod_l+0x5a8>)
    8cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8cce:	4650      	mov	r0, sl
    8cd0:	4659      	mov	r1, fp
    8cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    8cd6:	f7fe fd33 	bl	7740 <__aeabi_ddiv>
    8cda:	4682      	mov	sl, r0
    8cdc:	468b      	mov	fp, r1
    8cde:	1124      	asrs	r4, r4, #4
    8ce0:	d0df      	beq.n	8ca2 <_strtod_l+0x53a>
    8ce2:	2c1f      	cmp	r4, #31
    8ce4:	dd20      	ble.n	8d28 <_strtod_l+0x5c0>
    8ce6:	f04f 0900 	mov.w	r9, #0
    8cea:	f8cd 9010 	str.w	r9, [sp, #16]
    8cee:	f8cd 901c 	str.w	r9, [sp, #28]
    8cf2:	f8cd 9018 	str.w	r9, [sp, #24]
    8cf6:	2322      	movs	r3, #34	; 0x22
    8cf8:	f04f 0a00 	mov.w	sl, #0
    8cfc:	f04f 0b00 	mov.w	fp, #0
    8d00:	f8c8 3000 	str.w	r3, [r8]
    8d04:	e78a      	b.n	8c1c <_strtod_l+0x4b4>
    8d06:	bf00      	nop
    8d08:	0000be57 	.word	0x0000be57
    8d0c:	0000be70 	.word	0x0000be70
    8d10:	0000bfe0 	.word	0x0000bfe0
    8d14:	0000bfb8 	.word	0x0000bfb8
    8d18:	7ca00000 	.word	0x7ca00000
    8d1c:	fff80000 	.word	0xfff80000
    8d20:	7ff00000 	.word	0x7ff00000
    8d24:	7fefffff 	.word	0x7fefffff
    8d28:	f014 0310 	ands.w	r3, r4, #16
    8d2c:	bf18      	it	ne
    8d2e:	236a      	movne	r3, #106	; 0x6a
    8d30:	4e9f      	ldr	r6, [pc, #636]	; (8fb0 <_strtod_l+0x848>)
    8d32:	9305      	str	r3, [sp, #20]
    8d34:	4650      	mov	r0, sl
    8d36:	4659      	mov	r1, fp
    8d38:	2300      	movs	r3, #0
    8d3a:	2c00      	cmp	r4, #0
    8d3c:	f300 8106 	bgt.w	8f4c <_strtod_l+0x7e4>
    8d40:	b10b      	cbz	r3, 8d46 <_strtod_l+0x5de>
    8d42:	4682      	mov	sl, r0
    8d44:	468b      	mov	fp, r1
    8d46:	9b05      	ldr	r3, [sp, #20]
    8d48:	b1bb      	cbz	r3, 8d7a <_strtod_l+0x612>
    8d4a:	f3cb 530a 	ubfx	r3, fp, #20, #11
    8d4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    8d52:	2b00      	cmp	r3, #0
    8d54:	4659      	mov	r1, fp
    8d56:	dd10      	ble.n	8d7a <_strtod_l+0x612>
    8d58:	2b1f      	cmp	r3, #31
    8d5a:	f340 8101 	ble.w	8f60 <_strtod_l+0x7f8>
    8d5e:	2b34      	cmp	r3, #52	; 0x34
    8d60:	bfde      	ittt	le
    8d62:	3b20      	suble	r3, #32
    8d64:	f04f 32ff 	movle.w	r2, #4294967295
    8d68:	fa02 f303 	lslle.w	r3, r2, r3
    8d6c:	f04f 0a00 	mov.w	sl, #0
    8d70:	bfcc      	ite	gt
    8d72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
    8d76:	ea03 0b01 	andle.w	fp, r3, r1
    8d7a:	2200      	movs	r2, #0
    8d7c:	2300      	movs	r3, #0
    8d7e:	4650      	mov	r0, sl
    8d80:	4659      	mov	r1, fp
    8d82:	f7fe fe1b 	bl	79bc <__aeabi_dcmpeq>
    8d86:	2800      	cmp	r0, #0
    8d88:	d1ad      	bne.n	8ce6 <_strtod_l+0x57e>
    8d8a:	9b06      	ldr	r3, [sp, #24]
    8d8c:	9300      	str	r3, [sp, #0]
    8d8e:	9a04      	ldr	r2, [sp, #16]
    8d90:	990a      	ldr	r1, [sp, #40]	; 0x28
    8d92:	462b      	mov	r3, r5
    8d94:	4640      	mov	r0, r8
    8d96:	f001 f8a4 	bl	9ee2 <__s2b>
    8d9a:	9007      	str	r0, [sp, #28]
    8d9c:	2800      	cmp	r0, #0
    8d9e:	f43f af2e 	beq.w	8bfe <_strtod_l+0x496>
    8da2:	f1b9 0f00 	cmp.w	r9, #0
    8da6:	f1c9 0300 	rsb	r3, r9, #0
    8daa:	bfa8      	it	ge
    8dac:	2300      	movge	r3, #0
    8dae:	930e      	str	r3, [sp, #56]	; 0x38
    8db0:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
    8db4:	f04f 0900 	mov.w	r9, #0
    8db8:	930f      	str	r3, [sp, #60]	; 0x3c
    8dba:	f8cd 9010 	str.w	r9, [sp, #16]
    8dbe:	9b07      	ldr	r3, [sp, #28]
    8dc0:	4640      	mov	r0, r8
    8dc2:	6859      	ldr	r1, [r3, #4]
    8dc4:	f001 f807 	bl	9dd6 <_Balloc>
    8dc8:	9006      	str	r0, [sp, #24]
    8dca:	2800      	cmp	r0, #0
    8dcc:	f43f af1f 	beq.w	8c0e <_strtod_l+0x4a6>
    8dd0:	9b07      	ldr	r3, [sp, #28]
    8dd2:	691a      	ldr	r2, [r3, #16]
    8dd4:	3202      	adds	r2, #2
    8dd6:	f103 010c 	add.w	r1, r3, #12
    8dda:	0092      	lsls	r2, r2, #2
    8ddc:	300c      	adds	r0, #12
    8dde:	f000 ffed 	bl	9dbc <memcpy>
    8de2:	ab1c      	add	r3, sp, #112	; 0x70
    8de4:	9301      	str	r3, [sp, #4]
    8de6:	ab1b      	add	r3, sp, #108	; 0x6c
    8de8:	9300      	str	r3, [sp, #0]
    8dea:	4652      	mov	r2, sl
    8dec:	465b      	mov	r3, fp
    8dee:	4640      	mov	r0, r8
    8df0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
    8df4:	f001 fb26 	bl	a444 <__d2b>
    8df8:	901a      	str	r0, [sp, #104]	; 0x68
    8dfa:	2800      	cmp	r0, #0
    8dfc:	f43f af07 	beq.w	8c0e <_strtod_l+0x4a6>
    8e00:	2101      	movs	r1, #1
    8e02:	4640      	mov	r0, r8
    8e04:	f001 f8f9 	bl	9ffa <__i2b>
    8e08:	9004      	str	r0, [sp, #16]
    8e0a:	4603      	mov	r3, r0
    8e0c:	2800      	cmp	r0, #0
    8e0e:	f43f aefe 	beq.w	8c0e <_strtod_l+0x4a6>
    8e12:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    8e14:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8e16:	2d00      	cmp	r5, #0
    8e18:	bfab      	itete	ge
    8e1a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
    8e1c:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
    8e1e:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
    8e20:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
    8e22:	bfac      	ite	ge
    8e24:	195e      	addge	r6, r3, r5
    8e26:	1b5c      	sublt	r4, r3, r5
    8e28:	9b05      	ldr	r3, [sp, #20]
    8e2a:	1aed      	subs	r5, r5, r3
    8e2c:	4415      	add	r5, r2
    8e2e:	4b61      	ldr	r3, [pc, #388]	; (8fb4 <_strtod_l+0x84c>)
    8e30:	3d01      	subs	r5, #1
    8e32:	429d      	cmp	r5, r3
    8e34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    8e38:	f280 80a4 	bge.w	8f84 <_strtod_l+0x81c>
    8e3c:	1b5b      	subs	r3, r3, r5
    8e3e:	2b1f      	cmp	r3, #31
    8e40:	eba2 0203 	sub.w	r2, r2, r3
    8e44:	f04f 0701 	mov.w	r7, #1
    8e48:	f300 8091 	bgt.w	8f6e <_strtod_l+0x806>
    8e4c:	fa07 f303 	lsl.w	r3, r7, r3
    8e50:	9314      	str	r3, [sp, #80]	; 0x50
    8e52:	2500      	movs	r5, #0
    8e54:	18b7      	adds	r7, r6, r2
    8e56:	9b05      	ldr	r3, [sp, #20]
    8e58:	42be      	cmp	r6, r7
    8e5a:	4414      	add	r4, r2
    8e5c:	441c      	add	r4, r3
    8e5e:	4633      	mov	r3, r6
    8e60:	bfa8      	it	ge
    8e62:	463b      	movge	r3, r7
    8e64:	42a3      	cmp	r3, r4
    8e66:	bfa8      	it	ge
    8e68:	4623      	movge	r3, r4
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	bfc2      	ittt	gt
    8e6e:	1aff      	subgt	r7, r7, r3
    8e70:	1ae4      	subgt	r4, r4, r3
    8e72:	1af6      	subgt	r6, r6, r3
    8e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8e76:	b1bb      	cbz	r3, 8ea8 <_strtod_l+0x740>
    8e78:	461a      	mov	r2, r3
    8e7a:	9904      	ldr	r1, [sp, #16]
    8e7c:	4640      	mov	r0, r8
    8e7e:	f001 f953 	bl	a128 <__pow5mult>
    8e82:	9004      	str	r0, [sp, #16]
    8e84:	2800      	cmp	r0, #0
    8e86:	f43f aec2 	beq.w	8c0e <_strtod_l+0x4a6>
    8e8a:	4601      	mov	r1, r0
    8e8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8e8e:	4640      	mov	r0, r8
    8e90:	f001 f8bc 	bl	a00c <__multiply>
    8e94:	9008      	str	r0, [sp, #32]
    8e96:	2800      	cmp	r0, #0
    8e98:	f43f aeb9 	beq.w	8c0e <_strtod_l+0x4a6>
    8e9c:	991a      	ldr	r1, [sp, #104]	; 0x68
    8e9e:	4640      	mov	r0, r8
    8ea0:	f000 ffcd 	bl	9e3e <_Bfree>
    8ea4:	9b08      	ldr	r3, [sp, #32]
    8ea6:	931a      	str	r3, [sp, #104]	; 0x68
    8ea8:	2f00      	cmp	r7, #0
    8eaa:	dc6f      	bgt.n	8f8c <_strtod_l+0x824>
    8eac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d175      	bne.n	8f9e <_strtod_l+0x836>
    8eb2:	2c00      	cmp	r4, #0
    8eb4:	dd08      	ble.n	8ec8 <_strtod_l+0x760>
    8eb6:	4622      	mov	r2, r4
    8eb8:	9906      	ldr	r1, [sp, #24]
    8eba:	4640      	mov	r0, r8
    8ebc:	f001 f982 	bl	a1c4 <__lshift>
    8ec0:	9006      	str	r0, [sp, #24]
    8ec2:	2800      	cmp	r0, #0
    8ec4:	f43f aea3 	beq.w	8c0e <_strtod_l+0x4a6>
    8ec8:	2e00      	cmp	r6, #0
    8eca:	dd08      	ble.n	8ede <_strtod_l+0x776>
    8ecc:	4632      	mov	r2, r6
    8ece:	9904      	ldr	r1, [sp, #16]
    8ed0:	4640      	mov	r0, r8
    8ed2:	f001 f977 	bl	a1c4 <__lshift>
    8ed6:	9004      	str	r0, [sp, #16]
    8ed8:	2800      	cmp	r0, #0
    8eda:	f43f ae98 	beq.w	8c0e <_strtod_l+0x4a6>
    8ede:	9a06      	ldr	r2, [sp, #24]
    8ee0:	991a      	ldr	r1, [sp, #104]	; 0x68
    8ee2:	4640      	mov	r0, r8
    8ee4:	f001 f9d9 	bl	a29a <__mdiff>
    8ee8:	4681      	mov	r9, r0
    8eea:	2800      	cmp	r0, #0
    8eec:	f43f ae8f 	beq.w	8c0e <_strtod_l+0x4a6>
    8ef0:	2400      	movs	r4, #0
    8ef2:	68c3      	ldr	r3, [r0, #12]
    8ef4:	9904      	ldr	r1, [sp, #16]
    8ef6:	60c4      	str	r4, [r0, #12]
    8ef8:	9308      	str	r3, [sp, #32]
    8efa:	f001 f9b4 	bl	a266 <__mcmp>
    8efe:	42a0      	cmp	r0, r4
    8f00:	da5a      	bge.n	8fb8 <_strtod_l+0x850>
    8f02:	9b08      	ldr	r3, [sp, #32]
    8f04:	b9f3      	cbnz	r3, 8f44 <_strtod_l+0x7dc>
    8f06:	f1ba 0f00 	cmp.w	sl, #0
    8f0a:	d11b      	bne.n	8f44 <_strtod_l+0x7dc>
    8f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
    8f10:	b9c3      	cbnz	r3, 8f44 <_strtod_l+0x7dc>
    8f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    8f16:	0d1b      	lsrs	r3, r3, #20
    8f18:	051b      	lsls	r3, r3, #20
    8f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    8f1e:	d911      	bls.n	8f44 <_strtod_l+0x7dc>
    8f20:	f8d9 3014 	ldr.w	r3, [r9, #20]
    8f24:	b91b      	cbnz	r3, 8f2e <_strtod_l+0x7c6>
    8f26:	f8d9 3010 	ldr.w	r3, [r9, #16]
    8f2a:	2b01      	cmp	r3, #1
    8f2c:	dd0a      	ble.n	8f44 <_strtod_l+0x7dc>
    8f2e:	4649      	mov	r1, r9
    8f30:	2201      	movs	r2, #1
    8f32:	4640      	mov	r0, r8
    8f34:	f001 f946 	bl	a1c4 <__lshift>
    8f38:	9904      	ldr	r1, [sp, #16]
    8f3a:	4681      	mov	r9, r0
    8f3c:	f001 f993 	bl	a266 <__mcmp>
    8f40:	2800      	cmp	r0, #0
    8f42:	dc6a      	bgt.n	901a <_strtod_l+0x8b2>
    8f44:	9b05      	ldr	r3, [sp, #20]
    8f46:	2b00      	cmp	r3, #0
    8f48:	d174      	bne.n	9034 <_strtod_l+0x8cc>
    8f4a:	e66b      	b.n	8c24 <_strtod_l+0x4bc>
    8f4c:	07e2      	lsls	r2, r4, #31
    8f4e:	d504      	bpl.n	8f5a <_strtod_l+0x7f2>
    8f50:	e9d6 2300 	ldrd	r2, r3, [r6]
    8f54:	f7fe faca 	bl	74ec <__aeabi_dmul>
    8f58:	2301      	movs	r3, #1
    8f5a:	1064      	asrs	r4, r4, #1
    8f5c:	3608      	adds	r6, #8
    8f5e:	e6ec      	b.n	8d3a <_strtod_l+0x5d2>
    8f60:	f04f 32ff 	mov.w	r2, #4294967295
    8f64:	fa02 f303 	lsl.w	r3, r2, r3
    8f68:	ea03 0a0a 	and.w	sl, r3, sl
    8f6c:	e705      	b.n	8d7a <_strtod_l+0x612>
    8f6e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
    8f72:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
    8f76:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
    8f7a:	35e2      	adds	r5, #226	; 0xe2
    8f7c:	fa07 f505 	lsl.w	r5, r7, r5
    8f80:	9714      	str	r7, [sp, #80]	; 0x50
    8f82:	e767      	b.n	8e54 <_strtod_l+0x6ec>
    8f84:	2301      	movs	r3, #1
    8f86:	2500      	movs	r5, #0
    8f88:	9314      	str	r3, [sp, #80]	; 0x50
    8f8a:	e763      	b.n	8e54 <_strtod_l+0x6ec>
    8f8c:	463a      	mov	r2, r7
    8f8e:	991a      	ldr	r1, [sp, #104]	; 0x68
    8f90:	4640      	mov	r0, r8
    8f92:	f001 f917 	bl	a1c4 <__lshift>
    8f96:	901a      	str	r0, [sp, #104]	; 0x68
    8f98:	2800      	cmp	r0, #0
    8f9a:	d187      	bne.n	8eac <_strtod_l+0x744>
    8f9c:	e637      	b.n	8c0e <_strtod_l+0x4a6>
    8f9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8fa0:	9906      	ldr	r1, [sp, #24]
    8fa2:	4640      	mov	r0, r8
    8fa4:	f001 f8c0 	bl	a128 <__pow5mult>
    8fa8:	9006      	str	r0, [sp, #24]
    8faa:	2800      	cmp	r0, #0
    8fac:	d181      	bne.n	8eb2 <_strtod_l+0x74a>
    8fae:	e62e      	b.n	8c0e <_strtod_l+0x4a6>
    8fb0:	0000be88 	.word	0x0000be88
    8fb4:	fffffc02 	.word	0xfffffc02
    8fb8:	f040 8086 	bne.w	90c8 <_strtod_l+0x960>
    8fbc:	9a08      	ldr	r2, [sp, #32]
    8fbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
    8fc2:	b332      	cbz	r2, 9012 <_strtod_l+0x8aa>
    8fc4:	4aac      	ldr	r2, [pc, #688]	; (9278 <_strtod_l+0xb10>)
    8fc6:	4293      	cmp	r3, r2
    8fc8:	4659      	mov	r1, fp
    8fca:	d152      	bne.n	9072 <_strtod_l+0x90a>
    8fcc:	9b05      	ldr	r3, [sp, #20]
    8fce:	4650      	mov	r0, sl
    8fd0:	b1d3      	cbz	r3, 9008 <_strtod_l+0x8a0>
    8fd2:	4aaa      	ldr	r2, [pc, #680]	; (927c <_strtod_l+0xb14>)
    8fd4:	400a      	ands	r2, r1
    8fd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
    8fda:	f04f 34ff 	mov.w	r4, #4294967295
    8fde:	d816      	bhi.n	900e <_strtod_l+0x8a6>
    8fe0:	0d12      	lsrs	r2, r2, #20
    8fe2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    8fe6:	fa04 f303 	lsl.w	r3, r4, r3
    8fea:	4283      	cmp	r3, r0
    8fec:	d141      	bne.n	9072 <_strtod_l+0x90a>
    8fee:	4aa4      	ldr	r2, [pc, #656]	; (9280 <_strtod_l+0xb18>)
    8ff0:	4291      	cmp	r1, r2
    8ff2:	d102      	bne.n	8ffa <_strtod_l+0x892>
    8ff4:	3301      	adds	r3, #1
    8ff6:	f43f ae0a 	beq.w	8c0e <_strtod_l+0x4a6>
    8ffa:	4ba0      	ldr	r3, [pc, #640]	; (927c <_strtod_l+0xb14>)
    8ffc:	400b      	ands	r3, r1
    8ffe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
    9002:	f04f 0a00 	mov.w	sl, #0
    9006:	e79d      	b.n	8f44 <_strtod_l+0x7dc>
    9008:	f04f 33ff 	mov.w	r3, #4294967295
    900c:	e7ed      	b.n	8fea <_strtod_l+0x882>
    900e:	4623      	mov	r3, r4
    9010:	e7eb      	b.n	8fea <_strtod_l+0x882>
    9012:	bb73      	cbnz	r3, 9072 <_strtod_l+0x90a>
    9014:	f1ba 0f00 	cmp.w	sl, #0
    9018:	d12b      	bne.n	9072 <_strtod_l+0x90a>
    901a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    901e:	9a05      	ldr	r2, [sp, #20]
    9020:	0d1b      	lsrs	r3, r3, #20
    9022:	051b      	lsls	r3, r3, #20
    9024:	b1e2      	cbz	r2, 9060 <_strtod_l+0x8f8>
    9026:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    902a:	dc19      	bgt.n	9060 <_strtod_l+0x8f8>
    902c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    9030:	f77f ae61 	ble.w	8cf6 <_strtod_l+0x58e>
    9034:	4b93      	ldr	r3, [pc, #588]	; (9284 <_strtod_l+0xb1c>)
    9036:	930d      	str	r3, [sp, #52]	; 0x34
    9038:	2300      	movs	r3, #0
    903a:	930c      	str	r3, [sp, #48]	; 0x30
    903c:	4650      	mov	r0, sl
    903e:	4659      	mov	r1, fp
    9040:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9044:	f7fe fa52 	bl	74ec <__aeabi_dmul>
    9048:	4682      	mov	sl, r0
    904a:	468b      	mov	fp, r1
    904c:	2900      	cmp	r1, #0
    904e:	f47f ade9 	bne.w	8c24 <_strtod_l+0x4bc>
    9052:	2800      	cmp	r0, #0
    9054:	f47f ade6 	bne.w	8c24 <_strtod_l+0x4bc>
    9058:	2322      	movs	r3, #34	; 0x22
    905a:	f8c8 3000 	str.w	r3, [r8]
    905e:	e5e1      	b.n	8c24 <_strtod_l+0x4bc>
    9060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    9064:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
    9068:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
    906c:	f04f 3aff 	mov.w	sl, #4294967295
    9070:	e768      	b.n	8f44 <_strtod_l+0x7dc>
    9072:	b19d      	cbz	r5, 909c <_strtod_l+0x934>
    9074:	ea15 0f0b 	tst.w	r5, fp
    9078:	f43f af64 	beq.w	8f44 <_strtod_l+0x7dc>
    907c:	9b08      	ldr	r3, [sp, #32]
    907e:	9a05      	ldr	r2, [sp, #20]
    9080:	4650      	mov	r0, sl
    9082:	4659      	mov	r1, fp
    9084:	b173      	cbz	r3, 90a4 <_strtod_l+0x93c>
    9086:	f7ff fb4d 	bl	8724 <sulp>
    908a:	4602      	mov	r2, r0
    908c:	460b      	mov	r3, r1
    908e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9092:	f7fe f879 	bl	7188 <__adddf3>
    9096:	4682      	mov	sl, r0
    9098:	468b      	mov	fp, r1
    909a:	e753      	b.n	8f44 <_strtod_l+0x7dc>
    909c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    909e:	ea13 0f0a 	tst.w	r3, sl
    90a2:	e7e9      	b.n	9078 <_strtod_l+0x910>
    90a4:	f7ff fb3e 	bl	8724 <sulp>
    90a8:	4602      	mov	r2, r0
    90aa:	460b      	mov	r3, r1
    90ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    90b0:	f7fe f868 	bl	7184 <__aeabi_dsub>
    90b4:	2200      	movs	r2, #0
    90b6:	2300      	movs	r3, #0
    90b8:	4682      	mov	sl, r0
    90ba:	468b      	mov	fp, r1
    90bc:	f7fe fc7e 	bl	79bc <__aeabi_dcmpeq>
    90c0:	2800      	cmp	r0, #0
    90c2:	f47f ae18 	bne.w	8cf6 <_strtod_l+0x58e>
    90c6:	e73d      	b.n	8f44 <_strtod_l+0x7dc>
    90c8:	9904      	ldr	r1, [sp, #16]
    90ca:	4648      	mov	r0, r9
    90cc:	f001 fa09 	bl	a4e2 <__ratio>
    90d0:	2200      	movs	r2, #0
    90d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    90d6:	4606      	mov	r6, r0
    90d8:	460f      	mov	r7, r1
    90da:	f7fe fc83 	bl	79e4 <__aeabi_dcmple>
    90de:	2800      	cmp	r0, #0
    90e0:	d070      	beq.n	91c4 <_strtod_l+0xa5c>
    90e2:	9b08      	ldr	r3, [sp, #32]
    90e4:	2b00      	cmp	r3, #0
    90e6:	d043      	beq.n	9170 <_strtod_l+0xa08>
    90e8:	4f67      	ldr	r7, [pc, #412]	; (9288 <_strtod_l+0xb20>)
    90ea:	2600      	movs	r6, #0
    90ec:	4d66      	ldr	r5, [pc, #408]	; (9288 <_strtod_l+0xb20>)
    90ee:	4b63      	ldr	r3, [pc, #396]	; (927c <_strtod_l+0xb14>)
    90f0:	ea0b 0303 	and.w	r3, fp, r3
    90f4:	9314      	str	r3, [sp, #80]	; 0x50
    90f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    90f8:	4b64      	ldr	r3, [pc, #400]	; (928c <_strtod_l+0xb24>)
    90fa:	429a      	cmp	r2, r3
    90fc:	f040 80ce 	bne.w	929c <_strtod_l+0xb34>
    9100:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    9104:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
    9108:	4650      	mov	r0, sl
    910a:	4659      	mov	r1, fp
    910c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9110:	f001 f922 	bl	a358 <__ulp>
    9114:	4602      	mov	r2, r0
    9116:	460b      	mov	r3, r1
    9118:	4630      	mov	r0, r6
    911a:	4639      	mov	r1, r7
    911c:	f7fe f9e6 	bl	74ec <__aeabi_dmul>
    9120:	4652      	mov	r2, sl
    9122:	465b      	mov	r3, fp
    9124:	f7fe f830 	bl	7188 <__adddf3>
    9128:	4a54      	ldr	r2, [pc, #336]	; (927c <_strtod_l+0xb14>)
    912a:	4b59      	ldr	r3, [pc, #356]	; (9290 <_strtod_l+0xb28>)
    912c:	400a      	ands	r2, r1
    912e:	429a      	cmp	r2, r3
    9130:	4682      	mov	sl, r0
    9132:	d95d      	bls.n	91f0 <_strtod_l+0xa88>
    9134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9136:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    913a:	429a      	cmp	r2, r3
    913c:	d103      	bne.n	9146 <_strtod_l+0x9de>
    913e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9140:	3301      	adds	r3, #1
    9142:	f43f ad64 	beq.w	8c0e <_strtod_l+0x4a6>
    9146:	f8df b138 	ldr.w	fp, [pc, #312]	; 9280 <_strtod_l+0xb18>
    914a:	f04f 3aff 	mov.w	sl, #4294967295
    914e:	991a      	ldr	r1, [sp, #104]	; 0x68
    9150:	4640      	mov	r0, r8
    9152:	f000 fe74 	bl	9e3e <_Bfree>
    9156:	9906      	ldr	r1, [sp, #24]
    9158:	4640      	mov	r0, r8
    915a:	f000 fe70 	bl	9e3e <_Bfree>
    915e:	9904      	ldr	r1, [sp, #16]
    9160:	4640      	mov	r0, r8
    9162:	f000 fe6c 	bl	9e3e <_Bfree>
    9166:	4649      	mov	r1, r9
    9168:	4640      	mov	r0, r8
    916a:	f000 fe68 	bl	9e3e <_Bfree>
    916e:	e626      	b.n	8dbe <_strtod_l+0x656>
    9170:	f1ba 0f00 	cmp.w	sl, #0
    9174:	d118      	bne.n	91a8 <_strtod_l+0xa40>
    9176:	f3cb 0313 	ubfx	r3, fp, #0, #20
    917a:	b9e3      	cbnz	r3, 91b6 <_strtod_l+0xa4e>
    917c:	2200      	movs	r2, #0
    917e:	4b42      	ldr	r3, [pc, #264]	; (9288 <_strtod_l+0xb20>)
    9180:	4630      	mov	r0, r6
    9182:	4639      	mov	r1, r7
    9184:	f7fe fc24 	bl	79d0 <__aeabi_dcmplt>
    9188:	b9c8      	cbnz	r0, 91be <_strtod_l+0xa56>
    918a:	2200      	movs	r2, #0
    918c:	4b41      	ldr	r3, [pc, #260]	; (9294 <_strtod_l+0xb2c>)
    918e:	4630      	mov	r0, r6
    9190:	4639      	mov	r1, r7
    9192:	f7fe f9ab 	bl	74ec <__aeabi_dmul>
    9196:	4604      	mov	r4, r0
    9198:	460d      	mov	r5, r1
    919a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    919e:	9416      	str	r4, [sp, #88]	; 0x58
    91a0:	9317      	str	r3, [sp, #92]	; 0x5c
    91a2:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    91a6:	e7a2      	b.n	90ee <_strtod_l+0x986>
    91a8:	f1ba 0f01 	cmp.w	sl, #1
    91ac:	d103      	bne.n	91b6 <_strtod_l+0xa4e>
    91ae:	f1bb 0f00 	cmp.w	fp, #0
    91b2:	f43f ada0 	beq.w	8cf6 <_strtod_l+0x58e>
    91b6:	2600      	movs	r6, #0
    91b8:	4f37      	ldr	r7, [pc, #220]	; (9298 <_strtod_l+0xb30>)
    91ba:	2400      	movs	r4, #0
    91bc:	e796      	b.n	90ec <_strtod_l+0x984>
    91be:	9c08      	ldr	r4, [sp, #32]
    91c0:	4d34      	ldr	r5, [pc, #208]	; (9294 <_strtod_l+0xb2c>)
    91c2:	e7ea      	b.n	919a <_strtod_l+0xa32>
    91c4:	4b33      	ldr	r3, [pc, #204]	; (9294 <_strtod_l+0xb2c>)
    91c6:	2200      	movs	r2, #0
    91c8:	4630      	mov	r0, r6
    91ca:	4639      	mov	r1, r7
    91cc:	f7fe f98e 	bl	74ec <__aeabi_dmul>
    91d0:	9b08      	ldr	r3, [sp, #32]
    91d2:	4604      	mov	r4, r0
    91d4:	460d      	mov	r5, r1
    91d6:	b933      	cbnz	r3, 91e6 <_strtod_l+0xa7e>
    91d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    91dc:	9010      	str	r0, [sp, #64]	; 0x40
    91de:	9311      	str	r3, [sp, #68]	; 0x44
    91e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    91e4:	e783      	b.n	90ee <_strtod_l+0x986>
    91e6:	4602      	mov	r2, r0
    91e8:	460b      	mov	r3, r1
    91ea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    91ee:	e7f7      	b.n	91e0 <_strtod_l+0xa78>
    91f0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
    91f4:	9b05      	ldr	r3, [sp, #20]
    91f6:	2b00      	cmp	r3, #0
    91f8:	d1a9      	bne.n	914e <_strtod_l+0x9e6>
    91fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    91fe:	0d1b      	lsrs	r3, r3, #20
    9200:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9202:	051b      	lsls	r3, r3, #20
    9204:	429a      	cmp	r2, r3
    9206:	465e      	mov	r6, fp
    9208:	d1a1      	bne.n	914e <_strtod_l+0x9e6>
    920a:	4629      	mov	r1, r5
    920c:	4620      	mov	r0, r4
    920e:	f7fe fc1d 	bl	7a4c <__aeabi_d2iz>
    9212:	f7fe f905 	bl	7420 <__aeabi_i2d>
    9216:	460b      	mov	r3, r1
    9218:	4602      	mov	r2, r0
    921a:	4629      	mov	r1, r5
    921c:	4620      	mov	r0, r4
    921e:	f7fd ffb1 	bl	7184 <__aeabi_dsub>
    9222:	9b08      	ldr	r3, [sp, #32]
    9224:	4604      	mov	r4, r0
    9226:	460d      	mov	r5, r1
    9228:	b933      	cbnz	r3, 9238 <_strtod_l+0xad0>
    922a:	f1ba 0f00 	cmp.w	sl, #0
    922e:	d103      	bne.n	9238 <_strtod_l+0xad0>
    9230:	f3cb 0613 	ubfx	r6, fp, #0, #20
    9234:	2e00      	cmp	r6, #0
    9236:	d06c      	beq.n	9312 <_strtod_l+0xbaa>
    9238:	a30b      	add	r3, pc, #44	; (adr r3, 9268 <_strtod_l+0xb00>)
    923a:	e9d3 2300 	ldrd	r2, r3, [r3]
    923e:	4620      	mov	r0, r4
    9240:	4629      	mov	r1, r5
    9242:	f7fe fbc5 	bl	79d0 <__aeabi_dcmplt>
    9246:	2800      	cmp	r0, #0
    9248:	f47f acec 	bne.w	8c24 <_strtod_l+0x4bc>
    924c:	a308      	add	r3, pc, #32	; (adr r3, 9270 <_strtod_l+0xb08>)
    924e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9252:	4620      	mov	r0, r4
    9254:	4629      	mov	r1, r5
    9256:	f7fe fbd9 	bl	7a0c <__aeabi_dcmpgt>
    925a:	2800      	cmp	r0, #0
    925c:	f43f af77 	beq.w	914e <_strtod_l+0x9e6>
    9260:	e4e0      	b.n	8c24 <_strtod_l+0x4bc>
    9262:	bf00      	nop
    9264:	f3af 8000 	nop.w
    9268:	94a03595 	.word	0x94a03595
    926c:	3fdfffff 	.word	0x3fdfffff
    9270:	35afe535 	.word	0x35afe535
    9274:	3fe00000 	.word	0x3fe00000
    9278:	000fffff 	.word	0x000fffff
    927c:	7ff00000 	.word	0x7ff00000
    9280:	7fefffff 	.word	0x7fefffff
    9284:	39500000 	.word	0x39500000
    9288:	3ff00000 	.word	0x3ff00000
    928c:	7fe00000 	.word	0x7fe00000
    9290:	7c9fffff 	.word	0x7c9fffff
    9294:	3fe00000 	.word	0x3fe00000
    9298:	bff00000 	.word	0xbff00000
    929c:	9b05      	ldr	r3, [sp, #20]
    929e:	b313      	cbz	r3, 92e6 <_strtod_l+0xb7e>
    92a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    92a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    92a6:	d81e      	bhi.n	92e6 <_strtod_l+0xb7e>
    92a8:	a325      	add	r3, pc, #148	; (adr r3, 9340 <_strtod_l+0xbd8>)
    92aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    92ae:	4620      	mov	r0, r4
    92b0:	4629      	mov	r1, r5
    92b2:	f7fe fb97 	bl	79e4 <__aeabi_dcmple>
    92b6:	b190      	cbz	r0, 92de <_strtod_l+0xb76>
    92b8:	4629      	mov	r1, r5
    92ba:	4620      	mov	r0, r4
    92bc:	f7fe fbee 	bl	7a9c <__aeabi_d2uiz>
    92c0:	2800      	cmp	r0, #0
    92c2:	bf08      	it	eq
    92c4:	2001      	moveq	r0, #1
    92c6:	f7fe f89b 	bl	7400 <__aeabi_ui2d>
    92ca:	9b08      	ldr	r3, [sp, #32]
    92cc:	4604      	mov	r4, r0
    92ce:	460d      	mov	r5, r1
    92d0:	b9d3      	cbnz	r3, 9308 <_strtod_l+0xba0>
    92d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    92d6:	9012      	str	r0, [sp, #72]	; 0x48
    92d8:	9313      	str	r3, [sp, #76]	; 0x4c
    92da:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    92de:	9a14      	ldr	r2, [sp, #80]	; 0x50
    92e0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    92e4:	1a9f      	subs	r7, r3, r2
    92e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    92ea:	f001 f835 	bl	a358 <__ulp>
    92ee:	4602      	mov	r2, r0
    92f0:	460b      	mov	r3, r1
    92f2:	4630      	mov	r0, r6
    92f4:	4639      	mov	r1, r7
    92f6:	f7fe f8f9 	bl	74ec <__aeabi_dmul>
    92fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    92fe:	f7fd ff43 	bl	7188 <__adddf3>
    9302:	4682      	mov	sl, r0
    9304:	468b      	mov	fp, r1
    9306:	e775      	b.n	91f4 <_strtod_l+0xa8c>
    9308:	4602      	mov	r2, r0
    930a:	460b      	mov	r3, r1
    930c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    9310:	e7e3      	b.n	92da <_strtod_l+0xb72>
    9312:	a30d      	add	r3, pc, #52	; (adr r3, 9348 <_strtod_l+0xbe0>)
    9314:	e9d3 2300 	ldrd	r2, r3, [r3]
    9318:	f7fe fb5a 	bl	79d0 <__aeabi_dcmplt>
    931c:	e79d      	b.n	925a <_strtod_l+0xaf2>
    931e:	2300      	movs	r3, #0
    9320:	9309      	str	r3, [sp, #36]	; 0x24
    9322:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9324:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9326:	6013      	str	r3, [r2, #0]
    9328:	f7ff ba62 	b.w	87f0 <_strtod_l+0x88>
    932c:	2b65      	cmp	r3, #101	; 0x65
    932e:	f04f 0200 	mov.w	r2, #0
    9332:	f43f abb2 	beq.w	8a9a <_strtod_l+0x332>
    9336:	4615      	mov	r5, r2
    9338:	2101      	movs	r1, #1
    933a:	f7ff bad1 	b.w	88e0 <_strtod_l+0x178>
    933e:	bf00      	nop
    9340:	ffc00000 	.word	0xffc00000
    9344:	41dfffff 	.word	0x41dfffff
    9348:	94a03595 	.word	0x94a03595
    934c:	3fcfffff 	.word	0x3fcfffff

00009350 <strtod>:
    9350:	4b06      	ldr	r3, [pc, #24]	; (936c <strtod+0x1c>)
    9352:	4a07      	ldr	r2, [pc, #28]	; (9370 <strtod+0x20>)
    9354:	b410      	push	{r4}
    9356:	681c      	ldr	r4, [r3, #0]
    9358:	6a23      	ldr	r3, [r4, #32]
    935a:	2b00      	cmp	r3, #0
    935c:	bf08      	it	eq
    935e:	4613      	moveq	r3, r2
    9360:	460a      	mov	r2, r1
    9362:	4601      	mov	r1, r0
    9364:	4620      	mov	r0, r4
    9366:	bc10      	pop	{r4}
    9368:	f7ff b9fe 	b.w	8768 <_strtod_l>
    936c:	20000090 	.word	0x20000090
    9370:	200000f4 	.word	0x200000f4

00009374 <_strtol_l.isra.0>:
    9374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9378:	4680      	mov	r8, r0
    937a:	4689      	mov	r9, r1
    937c:	4692      	mov	sl, r2
    937e:	461f      	mov	r7, r3
    9380:	468b      	mov	fp, r1
    9382:	465d      	mov	r5, fp
    9384:	980a      	ldr	r0, [sp, #40]	; 0x28
    9386:	f815 4b01 	ldrb.w	r4, [r5], #1
    938a:	f7fe fed9 	bl	8140 <__locale_ctype_ptr_l>
    938e:	4420      	add	r0, r4
    9390:	7846      	ldrb	r6, [r0, #1]
    9392:	f016 0608 	ands.w	r6, r6, #8
    9396:	d10b      	bne.n	93b0 <_strtol_l.isra.0+0x3c>
    9398:	2c2d      	cmp	r4, #45	; 0x2d
    939a:	d10b      	bne.n	93b4 <_strtol_l.isra.0+0x40>
    939c:	782c      	ldrb	r4, [r5, #0]
    939e:	2601      	movs	r6, #1
    93a0:	f10b 0502 	add.w	r5, fp, #2
    93a4:	b167      	cbz	r7, 93c0 <_strtol_l.isra.0+0x4c>
    93a6:	2f10      	cmp	r7, #16
    93a8:	d114      	bne.n	93d4 <_strtol_l.isra.0+0x60>
    93aa:	2c30      	cmp	r4, #48	; 0x30
    93ac:	d00a      	beq.n	93c4 <_strtol_l.isra.0+0x50>
    93ae:	e011      	b.n	93d4 <_strtol_l.isra.0+0x60>
    93b0:	46ab      	mov	fp, r5
    93b2:	e7e6      	b.n	9382 <_strtol_l.isra.0+0xe>
    93b4:	2c2b      	cmp	r4, #43	; 0x2b
    93b6:	bf04      	itt	eq
    93b8:	782c      	ldrbeq	r4, [r5, #0]
    93ba:	f10b 0502 	addeq.w	r5, fp, #2
    93be:	e7f1      	b.n	93a4 <_strtol_l.isra.0+0x30>
    93c0:	2c30      	cmp	r4, #48	; 0x30
    93c2:	d127      	bne.n	9414 <_strtol_l.isra.0+0xa0>
    93c4:	782b      	ldrb	r3, [r5, #0]
    93c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    93ca:	2b58      	cmp	r3, #88	; 0x58
    93cc:	d14b      	bne.n	9466 <_strtol_l.isra.0+0xf2>
    93ce:	786c      	ldrb	r4, [r5, #1]
    93d0:	2710      	movs	r7, #16
    93d2:	3502      	adds	r5, #2
    93d4:	2e00      	cmp	r6, #0
    93d6:	bf0c      	ite	eq
    93d8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    93dc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    93e0:	2200      	movs	r2, #0
    93e2:	fbb1 fef7 	udiv	lr, r1, r7
    93e6:	4610      	mov	r0, r2
    93e8:	fb07 1c1e 	mls	ip, r7, lr, r1
    93ec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    93f0:	2b09      	cmp	r3, #9
    93f2:	d811      	bhi.n	9418 <_strtol_l.isra.0+0xa4>
    93f4:	461c      	mov	r4, r3
    93f6:	42a7      	cmp	r7, r4
    93f8:	dd1d      	ble.n	9436 <_strtol_l.isra.0+0xc2>
    93fa:	1c53      	adds	r3, r2, #1
    93fc:	d007      	beq.n	940e <_strtol_l.isra.0+0x9a>
    93fe:	4586      	cmp	lr, r0
    9400:	d316      	bcc.n	9430 <_strtol_l.isra.0+0xbc>
    9402:	d101      	bne.n	9408 <_strtol_l.isra.0+0x94>
    9404:	45a4      	cmp	ip, r4
    9406:	db13      	blt.n	9430 <_strtol_l.isra.0+0xbc>
    9408:	fb00 4007 	mla	r0, r0, r7, r4
    940c:	2201      	movs	r2, #1
    940e:	f815 4b01 	ldrb.w	r4, [r5], #1
    9412:	e7eb      	b.n	93ec <_strtol_l.isra.0+0x78>
    9414:	270a      	movs	r7, #10
    9416:	e7dd      	b.n	93d4 <_strtol_l.isra.0+0x60>
    9418:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    941c:	2b19      	cmp	r3, #25
    941e:	d801      	bhi.n	9424 <_strtol_l.isra.0+0xb0>
    9420:	3c37      	subs	r4, #55	; 0x37
    9422:	e7e8      	b.n	93f6 <_strtol_l.isra.0+0x82>
    9424:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    9428:	2b19      	cmp	r3, #25
    942a:	d804      	bhi.n	9436 <_strtol_l.isra.0+0xc2>
    942c:	3c57      	subs	r4, #87	; 0x57
    942e:	e7e2      	b.n	93f6 <_strtol_l.isra.0+0x82>
    9430:	f04f 32ff 	mov.w	r2, #4294967295
    9434:	e7eb      	b.n	940e <_strtol_l.isra.0+0x9a>
    9436:	1c53      	adds	r3, r2, #1
    9438:	d108      	bne.n	944c <_strtol_l.isra.0+0xd8>
    943a:	2322      	movs	r3, #34	; 0x22
    943c:	f8c8 3000 	str.w	r3, [r8]
    9440:	4608      	mov	r0, r1
    9442:	f1ba 0f00 	cmp.w	sl, #0
    9446:	d107      	bne.n	9458 <_strtol_l.isra.0+0xe4>
    9448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    944c:	b106      	cbz	r6, 9450 <_strtol_l.isra.0+0xdc>
    944e:	4240      	negs	r0, r0
    9450:	f1ba 0f00 	cmp.w	sl, #0
    9454:	d00c      	beq.n	9470 <_strtol_l.isra.0+0xfc>
    9456:	b122      	cbz	r2, 9462 <_strtol_l.isra.0+0xee>
    9458:	3d01      	subs	r5, #1
    945a:	f8ca 5000 	str.w	r5, [sl]
    945e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9462:	464d      	mov	r5, r9
    9464:	e7f9      	b.n	945a <_strtol_l.isra.0+0xe6>
    9466:	2430      	movs	r4, #48	; 0x30
    9468:	2f00      	cmp	r7, #0
    946a:	d1b3      	bne.n	93d4 <_strtol_l.isra.0+0x60>
    946c:	2708      	movs	r7, #8
    946e:	e7b1      	b.n	93d4 <_strtol_l.isra.0+0x60>
    9470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009474 <strtol>:
    9474:	4b08      	ldr	r3, [pc, #32]	; (9498 <strtol+0x24>)
    9476:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9478:	681c      	ldr	r4, [r3, #0]
    947a:	4d08      	ldr	r5, [pc, #32]	; (949c <strtol+0x28>)
    947c:	6a23      	ldr	r3, [r4, #32]
    947e:	2b00      	cmp	r3, #0
    9480:	bf08      	it	eq
    9482:	462b      	moveq	r3, r5
    9484:	9300      	str	r3, [sp, #0]
    9486:	4613      	mov	r3, r2
    9488:	460a      	mov	r2, r1
    948a:	4601      	mov	r1, r0
    948c:	4620      	mov	r0, r4
    948e:	f7ff ff71 	bl	9374 <_strtol_l.isra.0>
    9492:	b003      	add	sp, #12
    9494:	bd30      	pop	{r4, r5, pc}
    9496:	bf00      	nop
    9498:	20000090 	.word	0x20000090
    949c:	200000f4 	.word	0x200000f4

000094a0 <__swbuf_r>:
    94a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94a2:	460e      	mov	r6, r1
    94a4:	4614      	mov	r4, r2
    94a6:	4605      	mov	r5, r0
    94a8:	b118      	cbz	r0, 94b2 <__swbuf_r+0x12>
    94aa:	6983      	ldr	r3, [r0, #24]
    94ac:	b90b      	cbnz	r3, 94b2 <__swbuf_r+0x12>
    94ae:	f7fe fd99 	bl	7fe4 <__sinit>
    94b2:	4b21      	ldr	r3, [pc, #132]	; (9538 <__swbuf_r+0x98>)
    94b4:	429c      	cmp	r4, r3
    94b6:	d12a      	bne.n	950e <__swbuf_r+0x6e>
    94b8:	686c      	ldr	r4, [r5, #4]
    94ba:	69a3      	ldr	r3, [r4, #24]
    94bc:	60a3      	str	r3, [r4, #8]
    94be:	89a3      	ldrh	r3, [r4, #12]
    94c0:	071a      	lsls	r2, r3, #28
    94c2:	d52e      	bpl.n	9522 <__swbuf_r+0x82>
    94c4:	6923      	ldr	r3, [r4, #16]
    94c6:	b363      	cbz	r3, 9522 <__swbuf_r+0x82>
    94c8:	6923      	ldr	r3, [r4, #16]
    94ca:	6820      	ldr	r0, [r4, #0]
    94cc:	1ac0      	subs	r0, r0, r3
    94ce:	6963      	ldr	r3, [r4, #20]
    94d0:	b2f6      	uxtb	r6, r6
    94d2:	4298      	cmp	r0, r3
    94d4:	4637      	mov	r7, r6
    94d6:	db04      	blt.n	94e2 <__swbuf_r+0x42>
    94d8:	4621      	mov	r1, r4
    94da:	4628      	mov	r0, r5
    94dc:	f7fe fd18 	bl	7f10 <_fflush_r>
    94e0:	bb28      	cbnz	r0, 952e <__swbuf_r+0x8e>
    94e2:	68a3      	ldr	r3, [r4, #8]
    94e4:	3b01      	subs	r3, #1
    94e6:	60a3      	str	r3, [r4, #8]
    94e8:	6823      	ldr	r3, [r4, #0]
    94ea:	1c5a      	adds	r2, r3, #1
    94ec:	6022      	str	r2, [r4, #0]
    94ee:	701e      	strb	r6, [r3, #0]
    94f0:	6963      	ldr	r3, [r4, #20]
    94f2:	3001      	adds	r0, #1
    94f4:	4298      	cmp	r0, r3
    94f6:	d004      	beq.n	9502 <__swbuf_r+0x62>
    94f8:	89a3      	ldrh	r3, [r4, #12]
    94fa:	07db      	lsls	r3, r3, #31
    94fc:	d519      	bpl.n	9532 <__swbuf_r+0x92>
    94fe:	2e0a      	cmp	r6, #10
    9500:	d117      	bne.n	9532 <__swbuf_r+0x92>
    9502:	4621      	mov	r1, r4
    9504:	4628      	mov	r0, r5
    9506:	f7fe fd03 	bl	7f10 <_fflush_r>
    950a:	b190      	cbz	r0, 9532 <__swbuf_r+0x92>
    950c:	e00f      	b.n	952e <__swbuf_r+0x8e>
    950e:	4b0b      	ldr	r3, [pc, #44]	; (953c <__swbuf_r+0x9c>)
    9510:	429c      	cmp	r4, r3
    9512:	d101      	bne.n	9518 <__swbuf_r+0x78>
    9514:	68ac      	ldr	r4, [r5, #8]
    9516:	e7d0      	b.n	94ba <__swbuf_r+0x1a>
    9518:	4b09      	ldr	r3, [pc, #36]	; (9540 <__swbuf_r+0xa0>)
    951a:	429c      	cmp	r4, r3
    951c:	bf08      	it	eq
    951e:	68ec      	ldreq	r4, [r5, #12]
    9520:	e7cb      	b.n	94ba <__swbuf_r+0x1a>
    9522:	4621      	mov	r1, r4
    9524:	4628      	mov	r0, r5
    9526:	f000 f82d 	bl	9584 <__swsetup_r>
    952a:	2800      	cmp	r0, #0
    952c:	d0cc      	beq.n	94c8 <__swbuf_r+0x28>
    952e:	f04f 37ff 	mov.w	r7, #4294967295
    9532:	4638      	mov	r0, r7
    9534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9536:	bf00      	nop
    9538:	0000be00 	.word	0x0000be00
    953c:	0000be20 	.word	0x0000be20
    9540:	0000bde0 	.word	0x0000bde0

00009544 <__ascii_wctomb>:
    9544:	b149      	cbz	r1, 955a <__ascii_wctomb+0x16>
    9546:	2aff      	cmp	r2, #255	; 0xff
    9548:	bf85      	ittet	hi
    954a:	238a      	movhi	r3, #138	; 0x8a
    954c:	6003      	strhi	r3, [r0, #0]
    954e:	700a      	strbls	r2, [r1, #0]
    9550:	f04f 30ff 	movhi.w	r0, #4294967295
    9554:	bf98      	it	ls
    9556:	2001      	movls	r0, #1
    9558:	4770      	bx	lr
    955a:	4608      	mov	r0, r1
    955c:	4770      	bx	lr
	...

00009560 <_write_r>:
    9560:	b538      	push	{r3, r4, r5, lr}
    9562:	4c07      	ldr	r4, [pc, #28]	; (9580 <_write_r+0x20>)
    9564:	4605      	mov	r5, r0
    9566:	4608      	mov	r0, r1
    9568:	4611      	mov	r1, r2
    956a:	2200      	movs	r2, #0
    956c:	6022      	str	r2, [r4, #0]
    956e:	461a      	mov	r2, r3
    9570:	f7fc fd14 	bl	5f9c <_write>
    9574:	1c43      	adds	r3, r0, #1
    9576:	d102      	bne.n	957e <_write_r+0x1e>
    9578:	6823      	ldr	r3, [r4, #0]
    957a:	b103      	cbz	r3, 957e <_write_r+0x1e>
    957c:	602b      	str	r3, [r5, #0]
    957e:	bd38      	pop	{r3, r4, r5, pc}
    9580:	20004590 	.word	0x20004590

00009584 <__swsetup_r>:
    9584:	4b32      	ldr	r3, [pc, #200]	; (9650 <__swsetup_r+0xcc>)
    9586:	b570      	push	{r4, r5, r6, lr}
    9588:	681d      	ldr	r5, [r3, #0]
    958a:	4606      	mov	r6, r0
    958c:	460c      	mov	r4, r1
    958e:	b125      	cbz	r5, 959a <__swsetup_r+0x16>
    9590:	69ab      	ldr	r3, [r5, #24]
    9592:	b913      	cbnz	r3, 959a <__swsetup_r+0x16>
    9594:	4628      	mov	r0, r5
    9596:	f7fe fd25 	bl	7fe4 <__sinit>
    959a:	4b2e      	ldr	r3, [pc, #184]	; (9654 <__swsetup_r+0xd0>)
    959c:	429c      	cmp	r4, r3
    959e:	d10f      	bne.n	95c0 <__swsetup_r+0x3c>
    95a0:	686c      	ldr	r4, [r5, #4]
    95a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    95a6:	b29a      	uxth	r2, r3
    95a8:	0715      	lsls	r5, r2, #28
    95aa:	d42c      	bmi.n	9606 <__swsetup_r+0x82>
    95ac:	06d0      	lsls	r0, r2, #27
    95ae:	d411      	bmi.n	95d4 <__swsetup_r+0x50>
    95b0:	2209      	movs	r2, #9
    95b2:	6032      	str	r2, [r6, #0]
    95b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    95b8:	81a3      	strh	r3, [r4, #12]
    95ba:	f04f 30ff 	mov.w	r0, #4294967295
    95be:	bd70      	pop	{r4, r5, r6, pc}
    95c0:	4b25      	ldr	r3, [pc, #148]	; (9658 <__swsetup_r+0xd4>)
    95c2:	429c      	cmp	r4, r3
    95c4:	d101      	bne.n	95ca <__swsetup_r+0x46>
    95c6:	68ac      	ldr	r4, [r5, #8]
    95c8:	e7eb      	b.n	95a2 <__swsetup_r+0x1e>
    95ca:	4b24      	ldr	r3, [pc, #144]	; (965c <__swsetup_r+0xd8>)
    95cc:	429c      	cmp	r4, r3
    95ce:	bf08      	it	eq
    95d0:	68ec      	ldreq	r4, [r5, #12]
    95d2:	e7e6      	b.n	95a2 <__swsetup_r+0x1e>
    95d4:	0751      	lsls	r1, r2, #29
    95d6:	d512      	bpl.n	95fe <__swsetup_r+0x7a>
    95d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    95da:	b141      	cbz	r1, 95ee <__swsetup_r+0x6a>
    95dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    95e0:	4299      	cmp	r1, r3
    95e2:	d002      	beq.n	95ea <__swsetup_r+0x66>
    95e4:	4630      	mov	r0, r6
    95e6:	f7fe fdd7 	bl	8198 <_free_r>
    95ea:	2300      	movs	r3, #0
    95ec:	6363      	str	r3, [r4, #52]	; 0x34
    95ee:	89a3      	ldrh	r3, [r4, #12]
    95f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    95f4:	81a3      	strh	r3, [r4, #12]
    95f6:	2300      	movs	r3, #0
    95f8:	6063      	str	r3, [r4, #4]
    95fa:	6923      	ldr	r3, [r4, #16]
    95fc:	6023      	str	r3, [r4, #0]
    95fe:	89a3      	ldrh	r3, [r4, #12]
    9600:	f043 0308 	orr.w	r3, r3, #8
    9604:	81a3      	strh	r3, [r4, #12]
    9606:	6923      	ldr	r3, [r4, #16]
    9608:	b94b      	cbnz	r3, 961e <__swsetup_r+0x9a>
    960a:	89a3      	ldrh	r3, [r4, #12]
    960c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    9610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9614:	d003      	beq.n	961e <__swsetup_r+0x9a>
    9616:	4621      	mov	r1, r4
    9618:	4630      	mov	r0, r6
    961a:	f000 fb87 	bl	9d2c <__smakebuf_r>
    961e:	89a2      	ldrh	r2, [r4, #12]
    9620:	f012 0301 	ands.w	r3, r2, #1
    9624:	d00c      	beq.n	9640 <__swsetup_r+0xbc>
    9626:	2300      	movs	r3, #0
    9628:	60a3      	str	r3, [r4, #8]
    962a:	6963      	ldr	r3, [r4, #20]
    962c:	425b      	negs	r3, r3
    962e:	61a3      	str	r3, [r4, #24]
    9630:	6923      	ldr	r3, [r4, #16]
    9632:	b953      	cbnz	r3, 964a <__swsetup_r+0xc6>
    9634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    963c:	d1ba      	bne.n	95b4 <__swsetup_r+0x30>
    963e:	bd70      	pop	{r4, r5, r6, pc}
    9640:	0792      	lsls	r2, r2, #30
    9642:	bf58      	it	pl
    9644:	6963      	ldrpl	r3, [r4, #20]
    9646:	60a3      	str	r3, [r4, #8]
    9648:	e7f2      	b.n	9630 <__swsetup_r+0xac>
    964a:	2000      	movs	r0, #0
    964c:	e7f7      	b.n	963e <__swsetup_r+0xba>
    964e:	bf00      	nop
    9650:	20000090 	.word	0x20000090
    9654:	0000be00 	.word	0x0000be00
    9658:	0000be20 	.word	0x0000be20
    965c:	0000bde0 	.word	0x0000bde0

00009660 <_close_r>:
    9660:	b538      	push	{r3, r4, r5, lr}
    9662:	4c06      	ldr	r4, [pc, #24]	; (967c <_close_r+0x1c>)
    9664:	2300      	movs	r3, #0
    9666:	4605      	mov	r5, r0
    9668:	4608      	mov	r0, r1
    966a:	6023      	str	r3, [r4, #0]
    966c:	f7f9 fa2a 	bl	2ac4 <_close>
    9670:	1c43      	adds	r3, r0, #1
    9672:	d102      	bne.n	967a <_close_r+0x1a>
    9674:	6823      	ldr	r3, [r4, #0]
    9676:	b103      	cbz	r3, 967a <_close_r+0x1a>
    9678:	602b      	str	r3, [r5, #0]
    967a:	bd38      	pop	{r3, r4, r5, pc}
    967c:	20004590 	.word	0x20004590

00009680 <rshift>:
    9680:	b5f0      	push	{r4, r5, r6, r7, lr}
    9682:	6906      	ldr	r6, [r0, #16]
    9684:	114b      	asrs	r3, r1, #5
    9686:	42b3      	cmp	r3, r6
    9688:	f100 0514 	add.w	r5, r0, #20
    968c:	da2b      	bge.n	96e6 <rshift+0x66>
    968e:	f011 011f 	ands.w	r1, r1, #31
    9692:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    9696:	eb05 0283 	add.w	r2, r5, r3, lsl #2
    969a:	d108      	bne.n	96ae <rshift+0x2e>
    969c:	4629      	mov	r1, r5
    969e:	42b2      	cmp	r2, r6
    96a0:	460b      	mov	r3, r1
    96a2:	d210      	bcs.n	96c6 <rshift+0x46>
    96a4:	f852 3b04 	ldr.w	r3, [r2], #4
    96a8:	f841 3b04 	str.w	r3, [r1], #4
    96ac:	e7f7      	b.n	969e <rshift+0x1e>
    96ae:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    96b2:	f1c1 0e20 	rsb	lr, r1, #32
    96b6:	3204      	adds	r2, #4
    96b8:	40cc      	lsrs	r4, r1
    96ba:	462b      	mov	r3, r5
    96bc:	42b2      	cmp	r2, r6
    96be:	d308      	bcc.n	96d2 <rshift+0x52>
    96c0:	601c      	str	r4, [r3, #0]
    96c2:	b104      	cbz	r4, 96c6 <rshift+0x46>
    96c4:	3304      	adds	r3, #4
    96c6:	1b5b      	subs	r3, r3, r5
    96c8:	109b      	asrs	r3, r3, #2
    96ca:	6103      	str	r3, [r0, #16]
    96cc:	b903      	cbnz	r3, 96d0 <rshift+0x50>
    96ce:	6143      	str	r3, [r0, #20]
    96d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96d2:	6817      	ldr	r7, [r2, #0]
    96d4:	fa07 f70e 	lsl.w	r7, r7, lr
    96d8:	433c      	orrs	r4, r7
    96da:	f843 4b04 	str.w	r4, [r3], #4
    96de:	f852 4b04 	ldr.w	r4, [r2], #4
    96e2:	40cc      	lsrs	r4, r1
    96e4:	e7ea      	b.n	96bc <rshift+0x3c>
    96e6:	462b      	mov	r3, r5
    96e8:	e7ed      	b.n	96c6 <rshift+0x46>

000096ea <__hexdig_fun>:
    96ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    96ee:	2b09      	cmp	r3, #9
    96f0:	d802      	bhi.n	96f8 <__hexdig_fun+0xe>
    96f2:	3820      	subs	r0, #32
    96f4:	b2c0      	uxtb	r0, r0
    96f6:	4770      	bx	lr
    96f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    96fc:	2b05      	cmp	r3, #5
    96fe:	d801      	bhi.n	9704 <__hexdig_fun+0x1a>
    9700:	3847      	subs	r0, #71	; 0x47
    9702:	e7f7      	b.n	96f4 <__hexdig_fun+0xa>
    9704:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    9708:	2b05      	cmp	r3, #5
    970a:	d801      	bhi.n	9710 <__hexdig_fun+0x26>
    970c:	3827      	subs	r0, #39	; 0x27
    970e:	e7f1      	b.n	96f4 <__hexdig_fun+0xa>
    9710:	2000      	movs	r0, #0
    9712:	4770      	bx	lr

00009714 <__gethex>:
    9714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9718:	b08b      	sub	sp, #44	; 0x2c
    971a:	468a      	mov	sl, r1
    971c:	9002      	str	r0, [sp, #8]
    971e:	9816      	ldr	r0, [sp, #88]	; 0x58
    9720:	9306      	str	r3, [sp, #24]
    9722:	4690      	mov	r8, r2
    9724:	f000 fac9 	bl	9cba <__localeconv_l>
    9728:	6803      	ldr	r3, [r0, #0]
    972a:	9303      	str	r3, [sp, #12]
    972c:	4618      	mov	r0, r3
    972e:	f7fe ffdd 	bl	86ec <strlen>
    9732:	9b03      	ldr	r3, [sp, #12]
    9734:	9001      	str	r0, [sp, #4]
    9736:	4403      	add	r3, r0
    9738:	f04f 0b00 	mov.w	fp, #0
    973c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9740:	9307      	str	r3, [sp, #28]
    9742:	f8da 3000 	ldr.w	r3, [sl]
    9746:	3302      	adds	r3, #2
    9748:	461f      	mov	r7, r3
    974a:	f813 0b01 	ldrb.w	r0, [r3], #1
    974e:	2830      	cmp	r0, #48	; 0x30
    9750:	d06c      	beq.n	982c <__gethex+0x118>
    9752:	f7ff ffca 	bl	96ea <__hexdig_fun>
    9756:	4604      	mov	r4, r0
    9758:	2800      	cmp	r0, #0
    975a:	d16a      	bne.n	9832 <__gethex+0x11e>
    975c:	9a01      	ldr	r2, [sp, #4]
    975e:	9903      	ldr	r1, [sp, #12]
    9760:	4638      	mov	r0, r7
    9762:	f001 fb65 	bl	ae30 <strncmp>
    9766:	2800      	cmp	r0, #0
    9768:	d166      	bne.n	9838 <__gethex+0x124>
    976a:	9b01      	ldr	r3, [sp, #4]
    976c:	5cf8      	ldrb	r0, [r7, r3]
    976e:	18fe      	adds	r6, r7, r3
    9770:	f7ff ffbb 	bl	96ea <__hexdig_fun>
    9774:	2800      	cmp	r0, #0
    9776:	d062      	beq.n	983e <__gethex+0x12a>
    9778:	4633      	mov	r3, r6
    977a:	7818      	ldrb	r0, [r3, #0]
    977c:	2830      	cmp	r0, #48	; 0x30
    977e:	461f      	mov	r7, r3
    9780:	f103 0301 	add.w	r3, r3, #1
    9784:	d0f9      	beq.n	977a <__gethex+0x66>
    9786:	f7ff ffb0 	bl	96ea <__hexdig_fun>
    978a:	fab0 f580 	clz	r5, r0
    978e:	096d      	lsrs	r5, r5, #5
    9790:	4634      	mov	r4, r6
    9792:	f04f 0b01 	mov.w	fp, #1
    9796:	463a      	mov	r2, r7
    9798:	4616      	mov	r6, r2
    979a:	3201      	adds	r2, #1
    979c:	7830      	ldrb	r0, [r6, #0]
    979e:	f7ff ffa4 	bl	96ea <__hexdig_fun>
    97a2:	2800      	cmp	r0, #0
    97a4:	d1f8      	bne.n	9798 <__gethex+0x84>
    97a6:	9a01      	ldr	r2, [sp, #4]
    97a8:	9903      	ldr	r1, [sp, #12]
    97aa:	4630      	mov	r0, r6
    97ac:	f001 fb40 	bl	ae30 <strncmp>
    97b0:	b950      	cbnz	r0, 97c8 <__gethex+0xb4>
    97b2:	b954      	cbnz	r4, 97ca <__gethex+0xb6>
    97b4:	9b01      	ldr	r3, [sp, #4]
    97b6:	18f4      	adds	r4, r6, r3
    97b8:	4622      	mov	r2, r4
    97ba:	4616      	mov	r6, r2
    97bc:	3201      	adds	r2, #1
    97be:	7830      	ldrb	r0, [r6, #0]
    97c0:	f7ff ff93 	bl	96ea <__hexdig_fun>
    97c4:	2800      	cmp	r0, #0
    97c6:	d1f8      	bne.n	97ba <__gethex+0xa6>
    97c8:	b10c      	cbz	r4, 97ce <__gethex+0xba>
    97ca:	1ba4      	subs	r4, r4, r6
    97cc:	00a4      	lsls	r4, r4, #2
    97ce:	7833      	ldrb	r3, [r6, #0]
    97d0:	2b50      	cmp	r3, #80	; 0x50
    97d2:	d001      	beq.n	97d8 <__gethex+0xc4>
    97d4:	2b70      	cmp	r3, #112	; 0x70
    97d6:	d140      	bne.n	985a <__gethex+0x146>
    97d8:	7873      	ldrb	r3, [r6, #1]
    97da:	2b2b      	cmp	r3, #43	; 0x2b
    97dc:	d035      	beq.n	984a <__gethex+0x136>
    97de:	2b2d      	cmp	r3, #45	; 0x2d
    97e0:	d02f      	beq.n	9842 <__gethex+0x12e>
    97e2:	1c71      	adds	r1, r6, #1
    97e4:	f04f 0900 	mov.w	r9, #0
    97e8:	7808      	ldrb	r0, [r1, #0]
    97ea:	f7ff ff7e 	bl	96ea <__hexdig_fun>
    97ee:	1e43      	subs	r3, r0, #1
    97f0:	b2db      	uxtb	r3, r3
    97f2:	2b18      	cmp	r3, #24
    97f4:	d831      	bhi.n	985a <__gethex+0x146>
    97f6:	f1a0 0210 	sub.w	r2, r0, #16
    97fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    97fe:	f7ff ff74 	bl	96ea <__hexdig_fun>
    9802:	1e43      	subs	r3, r0, #1
    9804:	b2db      	uxtb	r3, r3
    9806:	2b18      	cmp	r3, #24
    9808:	d922      	bls.n	9850 <__gethex+0x13c>
    980a:	f1b9 0f00 	cmp.w	r9, #0
    980e:	d000      	beq.n	9812 <__gethex+0xfe>
    9810:	4252      	negs	r2, r2
    9812:	4414      	add	r4, r2
    9814:	f8ca 1000 	str.w	r1, [sl]
    9818:	b30d      	cbz	r5, 985e <__gethex+0x14a>
    981a:	f1bb 0f00 	cmp.w	fp, #0
    981e:	bf14      	ite	ne
    9820:	2700      	movne	r7, #0
    9822:	2706      	moveq	r7, #6
    9824:	4638      	mov	r0, r7
    9826:	b00b      	add	sp, #44	; 0x2c
    9828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    982c:	f10b 0b01 	add.w	fp, fp, #1
    9830:	e78a      	b.n	9748 <__gethex+0x34>
    9832:	2500      	movs	r5, #0
    9834:	462c      	mov	r4, r5
    9836:	e7ae      	b.n	9796 <__gethex+0x82>
    9838:	463e      	mov	r6, r7
    983a:	2501      	movs	r5, #1
    983c:	e7c7      	b.n	97ce <__gethex+0xba>
    983e:	4604      	mov	r4, r0
    9840:	e7fb      	b.n	983a <__gethex+0x126>
    9842:	f04f 0901 	mov.w	r9, #1
    9846:	1cb1      	adds	r1, r6, #2
    9848:	e7ce      	b.n	97e8 <__gethex+0xd4>
    984a:	f04f 0900 	mov.w	r9, #0
    984e:	e7fa      	b.n	9846 <__gethex+0x132>
    9850:	230a      	movs	r3, #10
    9852:	fb03 0202 	mla	r2, r3, r2, r0
    9856:	3a10      	subs	r2, #16
    9858:	e7cf      	b.n	97fa <__gethex+0xe6>
    985a:	4631      	mov	r1, r6
    985c:	e7da      	b.n	9814 <__gethex+0x100>
    985e:	1bf3      	subs	r3, r6, r7
    9860:	3b01      	subs	r3, #1
    9862:	4629      	mov	r1, r5
    9864:	2b07      	cmp	r3, #7
    9866:	dc49      	bgt.n	98fc <__gethex+0x1e8>
    9868:	9802      	ldr	r0, [sp, #8]
    986a:	f000 fab4 	bl	9dd6 <_Balloc>
    986e:	9b01      	ldr	r3, [sp, #4]
    9870:	f100 0914 	add.w	r9, r0, #20
    9874:	f04f 0b00 	mov.w	fp, #0
    9878:	f1c3 0301 	rsb	r3, r3, #1
    987c:	4605      	mov	r5, r0
    987e:	f8cd 9010 	str.w	r9, [sp, #16]
    9882:	46da      	mov	sl, fp
    9884:	9308      	str	r3, [sp, #32]
    9886:	42b7      	cmp	r7, r6
    9888:	d33b      	bcc.n	9902 <__gethex+0x1ee>
    988a:	9804      	ldr	r0, [sp, #16]
    988c:	f840 ab04 	str.w	sl, [r0], #4
    9890:	eba0 0009 	sub.w	r0, r0, r9
    9894:	1080      	asrs	r0, r0, #2
    9896:	6128      	str	r0, [r5, #16]
    9898:	0147      	lsls	r7, r0, #5
    989a:	4650      	mov	r0, sl
    989c:	f000 fb5f 	bl	9f5e <__hi0bits>
    98a0:	f8d8 6000 	ldr.w	r6, [r8]
    98a4:	1a3f      	subs	r7, r7, r0
    98a6:	42b7      	cmp	r7, r6
    98a8:	dd64      	ble.n	9974 <__gethex+0x260>
    98aa:	1bbf      	subs	r7, r7, r6
    98ac:	4639      	mov	r1, r7
    98ae:	4628      	mov	r0, r5
    98b0:	f000 fe59 	bl	a566 <__any_on>
    98b4:	4682      	mov	sl, r0
    98b6:	b178      	cbz	r0, 98d8 <__gethex+0x1c4>
    98b8:	1e7b      	subs	r3, r7, #1
    98ba:	1159      	asrs	r1, r3, #5
    98bc:	f003 021f 	and.w	r2, r3, #31
    98c0:	f04f 0a01 	mov.w	sl, #1
    98c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
    98c8:	fa0a f202 	lsl.w	r2, sl, r2
    98cc:	420a      	tst	r2, r1
    98ce:	d003      	beq.n	98d8 <__gethex+0x1c4>
    98d0:	4553      	cmp	r3, sl
    98d2:	dc46      	bgt.n	9962 <__gethex+0x24e>
    98d4:	f04f 0a02 	mov.w	sl, #2
    98d8:	4639      	mov	r1, r7
    98da:	4628      	mov	r0, r5
    98dc:	f7ff fed0 	bl	9680 <rshift>
    98e0:	443c      	add	r4, r7
    98e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    98e6:	429c      	cmp	r4, r3
    98e8:	dd52      	ble.n	9990 <__gethex+0x27c>
    98ea:	4629      	mov	r1, r5
    98ec:	9802      	ldr	r0, [sp, #8]
    98ee:	f000 faa6 	bl	9e3e <_Bfree>
    98f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    98f4:	2300      	movs	r3, #0
    98f6:	6013      	str	r3, [r2, #0]
    98f8:	27a3      	movs	r7, #163	; 0xa3
    98fa:	e793      	b.n	9824 <__gethex+0x110>
    98fc:	3101      	adds	r1, #1
    98fe:	105b      	asrs	r3, r3, #1
    9900:	e7b0      	b.n	9864 <__gethex+0x150>
    9902:	1e73      	subs	r3, r6, #1
    9904:	9305      	str	r3, [sp, #20]
    9906:	9a07      	ldr	r2, [sp, #28]
    9908:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    990c:	4293      	cmp	r3, r2
    990e:	d018      	beq.n	9942 <__gethex+0x22e>
    9910:	f1bb 0f20 	cmp.w	fp, #32
    9914:	d107      	bne.n	9926 <__gethex+0x212>
    9916:	9b04      	ldr	r3, [sp, #16]
    9918:	f8c3 a000 	str.w	sl, [r3]
    991c:	3304      	adds	r3, #4
    991e:	f04f 0a00 	mov.w	sl, #0
    9922:	9304      	str	r3, [sp, #16]
    9924:	46d3      	mov	fp, sl
    9926:	f816 0c01 	ldrb.w	r0, [r6, #-1]
    992a:	f7ff fede 	bl	96ea <__hexdig_fun>
    992e:	f000 000f 	and.w	r0, r0, #15
    9932:	fa00 f00b 	lsl.w	r0, r0, fp
    9936:	ea4a 0a00 	orr.w	sl, sl, r0
    993a:	f10b 0b04 	add.w	fp, fp, #4
    993e:	9b05      	ldr	r3, [sp, #20]
    9940:	e00d      	b.n	995e <__gethex+0x24a>
    9942:	9b05      	ldr	r3, [sp, #20]
    9944:	9a08      	ldr	r2, [sp, #32]
    9946:	4413      	add	r3, r2
    9948:	429f      	cmp	r7, r3
    994a:	d8e1      	bhi.n	9910 <__gethex+0x1fc>
    994c:	4618      	mov	r0, r3
    994e:	9a01      	ldr	r2, [sp, #4]
    9950:	9903      	ldr	r1, [sp, #12]
    9952:	9309      	str	r3, [sp, #36]	; 0x24
    9954:	f001 fa6c 	bl	ae30 <strncmp>
    9958:	9b09      	ldr	r3, [sp, #36]	; 0x24
    995a:	2800      	cmp	r0, #0
    995c:	d1d8      	bne.n	9910 <__gethex+0x1fc>
    995e:	461e      	mov	r6, r3
    9960:	e791      	b.n	9886 <__gethex+0x172>
    9962:	1eb9      	subs	r1, r7, #2
    9964:	4628      	mov	r0, r5
    9966:	f000 fdfe 	bl	a566 <__any_on>
    996a:	2800      	cmp	r0, #0
    996c:	d0b2      	beq.n	98d4 <__gethex+0x1c0>
    996e:	f04f 0a03 	mov.w	sl, #3
    9972:	e7b1      	b.n	98d8 <__gethex+0x1c4>
    9974:	da09      	bge.n	998a <__gethex+0x276>
    9976:	1bf7      	subs	r7, r6, r7
    9978:	4629      	mov	r1, r5
    997a:	463a      	mov	r2, r7
    997c:	9802      	ldr	r0, [sp, #8]
    997e:	f000 fc21 	bl	a1c4 <__lshift>
    9982:	1be4      	subs	r4, r4, r7
    9984:	4605      	mov	r5, r0
    9986:	f100 0914 	add.w	r9, r0, #20
    998a:	f04f 0a00 	mov.w	sl, #0
    998e:	e7a8      	b.n	98e2 <__gethex+0x1ce>
    9990:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9994:	4284      	cmp	r4, r0
    9996:	da6a      	bge.n	9a6e <__gethex+0x35a>
    9998:	1b04      	subs	r4, r0, r4
    999a:	42a6      	cmp	r6, r4
    999c:	dc2e      	bgt.n	99fc <__gethex+0x2e8>
    999e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    99a2:	2b02      	cmp	r3, #2
    99a4:	d022      	beq.n	99ec <__gethex+0x2d8>
    99a6:	2b03      	cmp	r3, #3
    99a8:	d024      	beq.n	99f4 <__gethex+0x2e0>
    99aa:	2b01      	cmp	r3, #1
    99ac:	d115      	bne.n	99da <__gethex+0x2c6>
    99ae:	42a6      	cmp	r6, r4
    99b0:	d113      	bne.n	99da <__gethex+0x2c6>
    99b2:	2e01      	cmp	r6, #1
    99b4:	dc0b      	bgt.n	99ce <__gethex+0x2ba>
    99b6:	9a06      	ldr	r2, [sp, #24]
    99b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    99bc:	6013      	str	r3, [r2, #0]
    99be:	2301      	movs	r3, #1
    99c0:	612b      	str	r3, [r5, #16]
    99c2:	f8c9 3000 	str.w	r3, [r9]
    99c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    99c8:	2762      	movs	r7, #98	; 0x62
    99ca:	601d      	str	r5, [r3, #0]
    99cc:	e72a      	b.n	9824 <__gethex+0x110>
    99ce:	1e71      	subs	r1, r6, #1
    99d0:	4628      	mov	r0, r5
    99d2:	f000 fdc8 	bl	a566 <__any_on>
    99d6:	2800      	cmp	r0, #0
    99d8:	d1ed      	bne.n	99b6 <__gethex+0x2a2>
    99da:	4629      	mov	r1, r5
    99dc:	9802      	ldr	r0, [sp, #8]
    99de:	f000 fa2e 	bl	9e3e <_Bfree>
    99e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    99e4:	2300      	movs	r3, #0
    99e6:	6013      	str	r3, [r2, #0]
    99e8:	2750      	movs	r7, #80	; 0x50
    99ea:	e71b      	b.n	9824 <__gethex+0x110>
    99ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
    99ee:	2b00      	cmp	r3, #0
    99f0:	d0e1      	beq.n	99b6 <__gethex+0x2a2>
    99f2:	e7f2      	b.n	99da <__gethex+0x2c6>
    99f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    99f6:	2b00      	cmp	r3, #0
    99f8:	d1dd      	bne.n	99b6 <__gethex+0x2a2>
    99fa:	e7ee      	b.n	99da <__gethex+0x2c6>
    99fc:	1e67      	subs	r7, r4, #1
    99fe:	f1ba 0f00 	cmp.w	sl, #0
    9a02:	d131      	bne.n	9a68 <__gethex+0x354>
    9a04:	b127      	cbz	r7, 9a10 <__gethex+0x2fc>
    9a06:	4639      	mov	r1, r7
    9a08:	4628      	mov	r0, r5
    9a0a:	f000 fdac 	bl	a566 <__any_on>
    9a0e:	4682      	mov	sl, r0
    9a10:	117a      	asrs	r2, r7, #5
    9a12:	2301      	movs	r3, #1
    9a14:	f007 071f 	and.w	r7, r7, #31
    9a18:	fa03 f707 	lsl.w	r7, r3, r7
    9a1c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
    9a20:	4621      	mov	r1, r4
    9a22:	421f      	tst	r7, r3
    9a24:	4628      	mov	r0, r5
    9a26:	bf18      	it	ne
    9a28:	f04a 0a02 	orrne.w	sl, sl, #2
    9a2c:	1b36      	subs	r6, r6, r4
    9a2e:	f7ff fe27 	bl	9680 <rshift>
    9a32:	f8d8 4004 	ldr.w	r4, [r8, #4]
    9a36:	2702      	movs	r7, #2
    9a38:	f1ba 0f00 	cmp.w	sl, #0
    9a3c:	d045      	beq.n	9aca <__gethex+0x3b6>
    9a3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    9a42:	2b02      	cmp	r3, #2
    9a44:	d015      	beq.n	9a72 <__gethex+0x35e>
    9a46:	2b03      	cmp	r3, #3
    9a48:	d017      	beq.n	9a7a <__gethex+0x366>
    9a4a:	2b01      	cmp	r3, #1
    9a4c:	d109      	bne.n	9a62 <__gethex+0x34e>
    9a4e:	f01a 0f02 	tst.w	sl, #2
    9a52:	d006      	beq.n	9a62 <__gethex+0x34e>
    9a54:	f8d9 3000 	ldr.w	r3, [r9]
    9a58:	ea4a 0a03 	orr.w	sl, sl, r3
    9a5c:	f01a 0f01 	tst.w	sl, #1
    9a60:	d10e      	bne.n	9a80 <__gethex+0x36c>
    9a62:	f047 0710 	orr.w	r7, r7, #16
    9a66:	e030      	b.n	9aca <__gethex+0x3b6>
    9a68:	f04f 0a01 	mov.w	sl, #1
    9a6c:	e7d0      	b.n	9a10 <__gethex+0x2fc>
    9a6e:	2701      	movs	r7, #1
    9a70:	e7e2      	b.n	9a38 <__gethex+0x324>
    9a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9a74:	f1c3 0301 	rsb	r3, r3, #1
    9a78:	9315      	str	r3, [sp, #84]	; 0x54
    9a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d0f0      	beq.n	9a62 <__gethex+0x34e>
    9a80:	f8d5 9010 	ldr.w	r9, [r5, #16]
    9a84:	f105 0314 	add.w	r3, r5, #20
    9a88:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    9a8c:	eb03 010a 	add.w	r1, r3, sl
    9a90:	2000      	movs	r0, #0
    9a92:	681a      	ldr	r2, [r3, #0]
    9a94:	f1b2 3fff 	cmp.w	r2, #4294967295
    9a98:	d01c      	beq.n	9ad4 <__gethex+0x3c0>
    9a9a:	3201      	adds	r2, #1
    9a9c:	601a      	str	r2, [r3, #0]
    9a9e:	2f02      	cmp	r7, #2
    9aa0:	f105 0314 	add.w	r3, r5, #20
    9aa4:	d138      	bne.n	9b18 <__gethex+0x404>
    9aa6:	f8d8 2000 	ldr.w	r2, [r8]
    9aaa:	3a01      	subs	r2, #1
    9aac:	4296      	cmp	r6, r2
    9aae:	d10a      	bne.n	9ac6 <__gethex+0x3b2>
    9ab0:	1171      	asrs	r1, r6, #5
    9ab2:	2201      	movs	r2, #1
    9ab4:	f006 061f 	and.w	r6, r6, #31
    9ab8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9abc:	fa02 f606 	lsl.w	r6, r2, r6
    9ac0:	421e      	tst	r6, r3
    9ac2:	bf18      	it	ne
    9ac4:	4617      	movne	r7, r2
    9ac6:	f047 0720 	orr.w	r7, r7, #32
    9aca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9acc:	601d      	str	r5, [r3, #0]
    9ace:	9b06      	ldr	r3, [sp, #24]
    9ad0:	601c      	str	r4, [r3, #0]
    9ad2:	e6a7      	b.n	9824 <__gethex+0x110>
    9ad4:	f843 0b04 	str.w	r0, [r3], #4
    9ad8:	4299      	cmp	r1, r3
    9ada:	d8da      	bhi.n	9a92 <__gethex+0x37e>
    9adc:	68ab      	ldr	r3, [r5, #8]
    9ade:	4599      	cmp	r9, r3
    9ae0:	db12      	blt.n	9b08 <__gethex+0x3f4>
    9ae2:	6869      	ldr	r1, [r5, #4]
    9ae4:	9802      	ldr	r0, [sp, #8]
    9ae6:	3101      	adds	r1, #1
    9ae8:	f000 f975 	bl	9dd6 <_Balloc>
    9aec:	692a      	ldr	r2, [r5, #16]
    9aee:	3202      	adds	r2, #2
    9af0:	f105 010c 	add.w	r1, r5, #12
    9af4:	4683      	mov	fp, r0
    9af6:	0092      	lsls	r2, r2, #2
    9af8:	300c      	adds	r0, #12
    9afa:	f000 f95f 	bl	9dbc <memcpy>
    9afe:	4629      	mov	r1, r5
    9b00:	9802      	ldr	r0, [sp, #8]
    9b02:	f000 f99c 	bl	9e3e <_Bfree>
    9b06:	465d      	mov	r5, fp
    9b08:	692b      	ldr	r3, [r5, #16]
    9b0a:	1c5a      	adds	r2, r3, #1
    9b0c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9b10:	612a      	str	r2, [r5, #16]
    9b12:	2201      	movs	r2, #1
    9b14:	615a      	str	r2, [r3, #20]
    9b16:	e7c2      	b.n	9a9e <__gethex+0x38a>
    9b18:	692a      	ldr	r2, [r5, #16]
    9b1a:	4591      	cmp	r9, r2
    9b1c:	da0b      	bge.n	9b36 <__gethex+0x422>
    9b1e:	2101      	movs	r1, #1
    9b20:	4628      	mov	r0, r5
    9b22:	f7ff fdad 	bl	9680 <rshift>
    9b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
    9b2a:	3401      	adds	r4, #1
    9b2c:	429c      	cmp	r4, r3
    9b2e:	f73f aedc 	bgt.w	98ea <__gethex+0x1d6>
    9b32:	2701      	movs	r7, #1
    9b34:	e7c7      	b.n	9ac6 <__gethex+0x3b2>
    9b36:	f016 061f 	ands.w	r6, r6, #31
    9b3a:	d0fa      	beq.n	9b32 <__gethex+0x41e>
    9b3c:	449a      	add	sl, r3
    9b3e:	f1c6 0620 	rsb	r6, r6, #32
    9b42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
    9b46:	f000 fa0a 	bl	9f5e <__hi0bits>
    9b4a:	42b0      	cmp	r0, r6
    9b4c:	dbe7      	blt.n	9b1e <__gethex+0x40a>
    9b4e:	e7f0      	b.n	9b32 <__gethex+0x41e>

00009b50 <L_shift>:
    9b50:	f1c2 0208 	rsb	r2, r2, #8
    9b54:	0092      	lsls	r2, r2, #2
    9b56:	b570      	push	{r4, r5, r6, lr}
    9b58:	f1c2 0620 	rsb	r6, r2, #32
    9b5c:	6843      	ldr	r3, [r0, #4]
    9b5e:	6804      	ldr	r4, [r0, #0]
    9b60:	fa03 f506 	lsl.w	r5, r3, r6
    9b64:	432c      	orrs	r4, r5
    9b66:	40d3      	lsrs	r3, r2
    9b68:	6004      	str	r4, [r0, #0]
    9b6a:	f840 3f04 	str.w	r3, [r0, #4]!
    9b6e:	4288      	cmp	r0, r1
    9b70:	d3f4      	bcc.n	9b5c <L_shift+0xc>
    9b72:	bd70      	pop	{r4, r5, r6, pc}

00009b74 <__match>:
    9b74:	b530      	push	{r4, r5, lr}
    9b76:	6803      	ldr	r3, [r0, #0]
    9b78:	f811 4b01 	ldrb.w	r4, [r1], #1
    9b7c:	3301      	adds	r3, #1
    9b7e:	b914      	cbnz	r4, 9b86 <__match+0x12>
    9b80:	6003      	str	r3, [r0, #0]
    9b82:	2001      	movs	r0, #1
    9b84:	bd30      	pop	{r4, r5, pc}
    9b86:	781a      	ldrb	r2, [r3, #0]
    9b88:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
    9b8c:	2d19      	cmp	r5, #25
    9b8e:	bf98      	it	ls
    9b90:	3220      	addls	r2, #32
    9b92:	42a2      	cmp	r2, r4
    9b94:	d0f0      	beq.n	9b78 <__match+0x4>
    9b96:	2000      	movs	r0, #0
    9b98:	bd30      	pop	{r4, r5, pc}

00009b9a <__hexnan>:
    9b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b9e:	680b      	ldr	r3, [r1, #0]
    9ba0:	6801      	ldr	r1, [r0, #0]
    9ba2:	115f      	asrs	r7, r3, #5
    9ba4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    9ba8:	f013 031f 	ands.w	r3, r3, #31
    9bac:	b087      	sub	sp, #28
    9bae:	bf18      	it	ne
    9bb0:	3704      	addne	r7, #4
    9bb2:	2500      	movs	r5, #0
    9bb4:	1f3e      	subs	r6, r7, #4
    9bb6:	4682      	mov	sl, r0
    9bb8:	4690      	mov	r8, r2
    9bba:	9302      	str	r3, [sp, #8]
    9bbc:	f847 5c04 	str.w	r5, [r7, #-4]
    9bc0:	46b1      	mov	r9, r6
    9bc2:	4634      	mov	r4, r6
    9bc4:	9501      	str	r5, [sp, #4]
    9bc6:	46ab      	mov	fp, r5
    9bc8:	784a      	ldrb	r2, [r1, #1]
    9bca:	1c4b      	adds	r3, r1, #1
    9bcc:	9303      	str	r3, [sp, #12]
    9bce:	b342      	cbz	r2, 9c22 <__hexnan+0x88>
    9bd0:	4610      	mov	r0, r2
    9bd2:	9105      	str	r1, [sp, #20]
    9bd4:	9204      	str	r2, [sp, #16]
    9bd6:	f7ff fd88 	bl	96ea <__hexdig_fun>
    9bda:	2800      	cmp	r0, #0
    9bdc:	d143      	bne.n	9c66 <__hexnan+0xcc>
    9bde:	9a04      	ldr	r2, [sp, #16]
    9be0:	9905      	ldr	r1, [sp, #20]
    9be2:	2a20      	cmp	r2, #32
    9be4:	d818      	bhi.n	9c18 <__hexnan+0x7e>
    9be6:	9b01      	ldr	r3, [sp, #4]
    9be8:	459b      	cmp	fp, r3
    9bea:	dd13      	ble.n	9c14 <__hexnan+0x7a>
    9bec:	454c      	cmp	r4, r9
    9bee:	d206      	bcs.n	9bfe <__hexnan+0x64>
    9bf0:	2d07      	cmp	r5, #7
    9bf2:	dc04      	bgt.n	9bfe <__hexnan+0x64>
    9bf4:	462a      	mov	r2, r5
    9bf6:	4649      	mov	r1, r9
    9bf8:	4620      	mov	r0, r4
    9bfa:	f7ff ffa9 	bl	9b50 <L_shift>
    9bfe:	4544      	cmp	r4, r8
    9c00:	d944      	bls.n	9c8c <__hexnan+0xf2>
    9c02:	2300      	movs	r3, #0
    9c04:	f1a4 0904 	sub.w	r9, r4, #4
    9c08:	f844 3c04 	str.w	r3, [r4, #-4]
    9c0c:	f8cd b004 	str.w	fp, [sp, #4]
    9c10:	464c      	mov	r4, r9
    9c12:	461d      	mov	r5, r3
    9c14:	9903      	ldr	r1, [sp, #12]
    9c16:	e7d7      	b.n	9bc8 <__hexnan+0x2e>
    9c18:	2a29      	cmp	r2, #41	; 0x29
    9c1a:	d14a      	bne.n	9cb2 <__hexnan+0x118>
    9c1c:	3102      	adds	r1, #2
    9c1e:	f8ca 1000 	str.w	r1, [sl]
    9c22:	f1bb 0f00 	cmp.w	fp, #0
    9c26:	d044      	beq.n	9cb2 <__hexnan+0x118>
    9c28:	454c      	cmp	r4, r9
    9c2a:	d206      	bcs.n	9c3a <__hexnan+0xa0>
    9c2c:	2d07      	cmp	r5, #7
    9c2e:	dc04      	bgt.n	9c3a <__hexnan+0xa0>
    9c30:	462a      	mov	r2, r5
    9c32:	4649      	mov	r1, r9
    9c34:	4620      	mov	r0, r4
    9c36:	f7ff ff8b 	bl	9b50 <L_shift>
    9c3a:	4544      	cmp	r4, r8
    9c3c:	d928      	bls.n	9c90 <__hexnan+0xf6>
    9c3e:	4643      	mov	r3, r8
    9c40:	f854 2b04 	ldr.w	r2, [r4], #4
    9c44:	f843 2b04 	str.w	r2, [r3], #4
    9c48:	42a6      	cmp	r6, r4
    9c4a:	d2f9      	bcs.n	9c40 <__hexnan+0xa6>
    9c4c:	2200      	movs	r2, #0
    9c4e:	f843 2b04 	str.w	r2, [r3], #4
    9c52:	429e      	cmp	r6, r3
    9c54:	d2fb      	bcs.n	9c4e <__hexnan+0xb4>
    9c56:	6833      	ldr	r3, [r6, #0]
    9c58:	b91b      	cbnz	r3, 9c62 <__hexnan+0xc8>
    9c5a:	4546      	cmp	r6, r8
    9c5c:	d127      	bne.n	9cae <__hexnan+0x114>
    9c5e:	2301      	movs	r3, #1
    9c60:	6033      	str	r3, [r6, #0]
    9c62:	2005      	movs	r0, #5
    9c64:	e026      	b.n	9cb4 <__hexnan+0x11a>
    9c66:	3501      	adds	r5, #1
    9c68:	2d08      	cmp	r5, #8
    9c6a:	f10b 0b01 	add.w	fp, fp, #1
    9c6e:	dd06      	ble.n	9c7e <__hexnan+0xe4>
    9c70:	4544      	cmp	r4, r8
    9c72:	d9cf      	bls.n	9c14 <__hexnan+0x7a>
    9c74:	2300      	movs	r3, #0
    9c76:	f844 3c04 	str.w	r3, [r4, #-4]
    9c7a:	2501      	movs	r5, #1
    9c7c:	3c04      	subs	r4, #4
    9c7e:	6822      	ldr	r2, [r4, #0]
    9c80:	f000 000f 	and.w	r0, r0, #15
    9c84:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
    9c88:	6020      	str	r0, [r4, #0]
    9c8a:	e7c3      	b.n	9c14 <__hexnan+0x7a>
    9c8c:	2508      	movs	r5, #8
    9c8e:	e7c1      	b.n	9c14 <__hexnan+0x7a>
    9c90:	9b02      	ldr	r3, [sp, #8]
    9c92:	2b00      	cmp	r3, #0
    9c94:	d0df      	beq.n	9c56 <__hexnan+0xbc>
    9c96:	f04f 32ff 	mov.w	r2, #4294967295
    9c9a:	f1c3 0320 	rsb	r3, r3, #32
    9c9e:	fa22 f303 	lsr.w	r3, r2, r3
    9ca2:	f857 2c04 	ldr.w	r2, [r7, #-4]
    9ca6:	401a      	ands	r2, r3
    9ca8:	f847 2c04 	str.w	r2, [r7, #-4]
    9cac:	e7d3      	b.n	9c56 <__hexnan+0xbc>
    9cae:	3e04      	subs	r6, #4
    9cb0:	e7d1      	b.n	9c56 <__hexnan+0xbc>
    9cb2:	2004      	movs	r0, #4
    9cb4:	b007      	add	sp, #28
    9cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009cba <__localeconv_l>:
    9cba:	30f0      	adds	r0, #240	; 0xf0
    9cbc:	4770      	bx	lr
	...

00009cc0 <_lseek_r>:
    9cc0:	b538      	push	{r3, r4, r5, lr}
    9cc2:	4c07      	ldr	r4, [pc, #28]	; (9ce0 <_lseek_r+0x20>)
    9cc4:	4605      	mov	r5, r0
    9cc6:	4608      	mov	r0, r1
    9cc8:	4611      	mov	r1, r2
    9cca:	2200      	movs	r2, #0
    9ccc:	6022      	str	r2, [r4, #0]
    9cce:	461a      	mov	r2, r3
    9cd0:	f7f8 ff02 	bl	2ad8 <_lseek>
    9cd4:	1c43      	adds	r3, r0, #1
    9cd6:	d102      	bne.n	9cde <_lseek_r+0x1e>
    9cd8:	6823      	ldr	r3, [r4, #0]
    9cda:	b103      	cbz	r3, 9cde <_lseek_r+0x1e>
    9cdc:	602b      	str	r3, [r5, #0]
    9cde:	bd38      	pop	{r3, r4, r5, pc}
    9ce0:	20004590 	.word	0x20004590

00009ce4 <__swhatbuf_r>:
    9ce4:	b570      	push	{r4, r5, r6, lr}
    9ce6:	460e      	mov	r6, r1
    9ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9cec:	2900      	cmp	r1, #0
    9cee:	b090      	sub	sp, #64	; 0x40
    9cf0:	4614      	mov	r4, r2
    9cf2:	461d      	mov	r5, r3
    9cf4:	da07      	bge.n	9d06 <__swhatbuf_r+0x22>
    9cf6:	2300      	movs	r3, #0
    9cf8:	602b      	str	r3, [r5, #0]
    9cfa:	89b3      	ldrh	r3, [r6, #12]
    9cfc:	061a      	lsls	r2, r3, #24
    9cfe:	d410      	bmi.n	9d22 <__swhatbuf_r+0x3e>
    9d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9d04:	e00e      	b.n	9d24 <__swhatbuf_r+0x40>
    9d06:	aa01      	add	r2, sp, #4
    9d08:	f001 f8a4 	bl	ae54 <_fstat_r>
    9d0c:	2800      	cmp	r0, #0
    9d0e:	dbf2      	blt.n	9cf6 <__swhatbuf_r+0x12>
    9d10:	9a02      	ldr	r2, [sp, #8]
    9d12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    9d16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    9d1a:	425a      	negs	r2, r3
    9d1c:	415a      	adcs	r2, r3
    9d1e:	602a      	str	r2, [r5, #0]
    9d20:	e7ee      	b.n	9d00 <__swhatbuf_r+0x1c>
    9d22:	2340      	movs	r3, #64	; 0x40
    9d24:	2000      	movs	r0, #0
    9d26:	6023      	str	r3, [r4, #0]
    9d28:	b010      	add	sp, #64	; 0x40
    9d2a:	bd70      	pop	{r4, r5, r6, pc}

00009d2c <__smakebuf_r>:
    9d2c:	898b      	ldrh	r3, [r1, #12]
    9d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9d30:	079d      	lsls	r5, r3, #30
    9d32:	4606      	mov	r6, r0
    9d34:	460c      	mov	r4, r1
    9d36:	d507      	bpl.n	9d48 <__smakebuf_r+0x1c>
    9d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
    9d3c:	6023      	str	r3, [r4, #0]
    9d3e:	6123      	str	r3, [r4, #16]
    9d40:	2301      	movs	r3, #1
    9d42:	6163      	str	r3, [r4, #20]
    9d44:	b002      	add	sp, #8
    9d46:	bd70      	pop	{r4, r5, r6, pc}
    9d48:	ab01      	add	r3, sp, #4
    9d4a:	466a      	mov	r2, sp
    9d4c:	f7ff ffca 	bl	9ce4 <__swhatbuf_r>
    9d50:	9900      	ldr	r1, [sp, #0]
    9d52:	4605      	mov	r5, r0
    9d54:	4630      	mov	r0, r6
    9d56:	f7fe fa6d 	bl	8234 <_malloc_r>
    9d5a:	b948      	cbnz	r0, 9d70 <__smakebuf_r+0x44>
    9d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d60:	059a      	lsls	r2, r3, #22
    9d62:	d4ef      	bmi.n	9d44 <__smakebuf_r+0x18>
    9d64:	f023 0303 	bic.w	r3, r3, #3
    9d68:	f043 0302 	orr.w	r3, r3, #2
    9d6c:	81a3      	strh	r3, [r4, #12]
    9d6e:	e7e3      	b.n	9d38 <__smakebuf_r+0xc>
    9d70:	4b0d      	ldr	r3, [pc, #52]	; (9da8 <__smakebuf_r+0x7c>)
    9d72:	62b3      	str	r3, [r6, #40]	; 0x28
    9d74:	89a3      	ldrh	r3, [r4, #12]
    9d76:	6020      	str	r0, [r4, #0]
    9d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9d7c:	81a3      	strh	r3, [r4, #12]
    9d7e:	9b00      	ldr	r3, [sp, #0]
    9d80:	6163      	str	r3, [r4, #20]
    9d82:	9b01      	ldr	r3, [sp, #4]
    9d84:	6120      	str	r0, [r4, #16]
    9d86:	b15b      	cbz	r3, 9da0 <__smakebuf_r+0x74>
    9d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9d8c:	4630      	mov	r0, r6
    9d8e:	f001 f873 	bl	ae78 <_isatty_r>
    9d92:	b128      	cbz	r0, 9da0 <__smakebuf_r+0x74>
    9d94:	89a3      	ldrh	r3, [r4, #12]
    9d96:	f023 0303 	bic.w	r3, r3, #3
    9d9a:	f043 0301 	orr.w	r3, r3, #1
    9d9e:	81a3      	strh	r3, [r4, #12]
    9da0:	89a3      	ldrh	r3, [r4, #12]
    9da2:	431d      	orrs	r5, r3
    9da4:	81a5      	strh	r5, [r4, #12]
    9da6:	e7cd      	b.n	9d44 <__smakebuf_r+0x18>
    9da8:	00007f65 	.word	0x00007f65

00009dac <malloc>:
    9dac:	4b02      	ldr	r3, [pc, #8]	; (9db8 <malloc+0xc>)
    9dae:	4601      	mov	r1, r0
    9db0:	6818      	ldr	r0, [r3, #0]
    9db2:	f7fe ba3f 	b.w	8234 <_malloc_r>
    9db6:	bf00      	nop
    9db8:	20000090 	.word	0x20000090

00009dbc <memcpy>:
    9dbc:	b510      	push	{r4, lr}
    9dbe:	1e43      	subs	r3, r0, #1
    9dc0:	440a      	add	r2, r1
    9dc2:	4291      	cmp	r1, r2
    9dc4:	d100      	bne.n	9dc8 <memcpy+0xc>
    9dc6:	bd10      	pop	{r4, pc}
    9dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
    9dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
    9dd0:	e7f7      	b.n	9dc2 <memcpy+0x6>

00009dd2 <__malloc_lock>:
    9dd2:	4770      	bx	lr

00009dd4 <__malloc_unlock>:
    9dd4:	4770      	bx	lr

00009dd6 <_Balloc>:
    9dd6:	b570      	push	{r4, r5, r6, lr}
    9dd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    9dda:	4604      	mov	r4, r0
    9ddc:	460e      	mov	r6, r1
    9dde:	b93d      	cbnz	r5, 9df0 <_Balloc+0x1a>
    9de0:	2010      	movs	r0, #16
    9de2:	f7ff ffe3 	bl	9dac <malloc>
    9de6:	6260      	str	r0, [r4, #36]	; 0x24
    9de8:	6045      	str	r5, [r0, #4]
    9dea:	6085      	str	r5, [r0, #8]
    9dec:	6005      	str	r5, [r0, #0]
    9dee:	60c5      	str	r5, [r0, #12]
    9df0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9df2:	68eb      	ldr	r3, [r5, #12]
    9df4:	b183      	cbz	r3, 9e18 <_Balloc+0x42>
    9df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9df8:	68db      	ldr	r3, [r3, #12]
    9dfa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    9dfe:	b9b8      	cbnz	r0, 9e30 <_Balloc+0x5a>
    9e00:	2101      	movs	r1, #1
    9e02:	fa01 f506 	lsl.w	r5, r1, r6
    9e06:	1d6a      	adds	r2, r5, #5
    9e08:	0092      	lsls	r2, r2, #2
    9e0a:	4620      	mov	r0, r4
    9e0c:	f000 fbcc 	bl	a5a8 <_calloc_r>
    9e10:	b160      	cbz	r0, 9e2c <_Balloc+0x56>
    9e12:	6046      	str	r6, [r0, #4]
    9e14:	6085      	str	r5, [r0, #8]
    9e16:	e00e      	b.n	9e36 <_Balloc+0x60>
    9e18:	2221      	movs	r2, #33	; 0x21
    9e1a:	2104      	movs	r1, #4
    9e1c:	4620      	mov	r0, r4
    9e1e:	f000 fbc3 	bl	a5a8 <_calloc_r>
    9e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9e24:	60e8      	str	r0, [r5, #12]
    9e26:	68db      	ldr	r3, [r3, #12]
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d1e4      	bne.n	9df6 <_Balloc+0x20>
    9e2c:	2000      	movs	r0, #0
    9e2e:	bd70      	pop	{r4, r5, r6, pc}
    9e30:	6802      	ldr	r2, [r0, #0]
    9e32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    9e36:	2300      	movs	r3, #0
    9e38:	6103      	str	r3, [r0, #16]
    9e3a:	60c3      	str	r3, [r0, #12]
    9e3c:	bd70      	pop	{r4, r5, r6, pc}

00009e3e <_Bfree>:
    9e3e:	b570      	push	{r4, r5, r6, lr}
    9e40:	6a44      	ldr	r4, [r0, #36]	; 0x24
    9e42:	4606      	mov	r6, r0
    9e44:	460d      	mov	r5, r1
    9e46:	b93c      	cbnz	r4, 9e58 <_Bfree+0x1a>
    9e48:	2010      	movs	r0, #16
    9e4a:	f7ff ffaf 	bl	9dac <malloc>
    9e4e:	6270      	str	r0, [r6, #36]	; 0x24
    9e50:	6044      	str	r4, [r0, #4]
    9e52:	6084      	str	r4, [r0, #8]
    9e54:	6004      	str	r4, [r0, #0]
    9e56:	60c4      	str	r4, [r0, #12]
    9e58:	b13d      	cbz	r5, 9e6a <_Bfree+0x2c>
    9e5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    9e5c:	686a      	ldr	r2, [r5, #4]
    9e5e:	68db      	ldr	r3, [r3, #12]
    9e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9e64:	6029      	str	r1, [r5, #0]
    9e66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    9e6a:	bd70      	pop	{r4, r5, r6, pc}

00009e6c <__multadd>:
    9e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e70:	690d      	ldr	r5, [r1, #16]
    9e72:	461f      	mov	r7, r3
    9e74:	4606      	mov	r6, r0
    9e76:	460c      	mov	r4, r1
    9e78:	f101 0e14 	add.w	lr, r1, #20
    9e7c:	2300      	movs	r3, #0
    9e7e:	f8de 0000 	ldr.w	r0, [lr]
    9e82:	b281      	uxth	r1, r0
    9e84:	fb02 7101 	mla	r1, r2, r1, r7
    9e88:	0c0f      	lsrs	r7, r1, #16
    9e8a:	0c00      	lsrs	r0, r0, #16
    9e8c:	fb02 7000 	mla	r0, r2, r0, r7
    9e90:	b289      	uxth	r1, r1
    9e92:	3301      	adds	r3, #1
    9e94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
    9e98:	429d      	cmp	r5, r3
    9e9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
    9e9e:	f84e 1b04 	str.w	r1, [lr], #4
    9ea2:	dcec      	bgt.n	9e7e <__multadd+0x12>
    9ea4:	b1d7      	cbz	r7, 9edc <__multadd+0x70>
    9ea6:	68a3      	ldr	r3, [r4, #8]
    9ea8:	429d      	cmp	r5, r3
    9eaa:	db12      	blt.n	9ed2 <__multadd+0x66>
    9eac:	6861      	ldr	r1, [r4, #4]
    9eae:	4630      	mov	r0, r6
    9eb0:	3101      	adds	r1, #1
    9eb2:	f7ff ff90 	bl	9dd6 <_Balloc>
    9eb6:	6922      	ldr	r2, [r4, #16]
    9eb8:	3202      	adds	r2, #2
    9eba:	f104 010c 	add.w	r1, r4, #12
    9ebe:	4680      	mov	r8, r0
    9ec0:	0092      	lsls	r2, r2, #2
    9ec2:	300c      	adds	r0, #12
    9ec4:	f7ff ff7a 	bl	9dbc <memcpy>
    9ec8:	4621      	mov	r1, r4
    9eca:	4630      	mov	r0, r6
    9ecc:	f7ff ffb7 	bl	9e3e <_Bfree>
    9ed0:	4644      	mov	r4, r8
    9ed2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    9ed6:	3501      	adds	r5, #1
    9ed8:	615f      	str	r7, [r3, #20]
    9eda:	6125      	str	r5, [r4, #16]
    9edc:	4620      	mov	r0, r4
    9ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009ee2 <__s2b>:
    9ee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ee6:	460c      	mov	r4, r1
    9ee8:	4615      	mov	r5, r2
    9eea:	461f      	mov	r7, r3
    9eec:	2209      	movs	r2, #9
    9eee:	3308      	adds	r3, #8
    9ef0:	4606      	mov	r6, r0
    9ef2:	fb93 f3f2 	sdiv	r3, r3, r2
    9ef6:	2100      	movs	r1, #0
    9ef8:	2201      	movs	r2, #1
    9efa:	429a      	cmp	r2, r3
    9efc:	db20      	blt.n	9f40 <__s2b+0x5e>
    9efe:	4630      	mov	r0, r6
    9f00:	f7ff ff69 	bl	9dd6 <_Balloc>
    9f04:	9b08      	ldr	r3, [sp, #32]
    9f06:	6143      	str	r3, [r0, #20]
    9f08:	2d09      	cmp	r5, #9
    9f0a:	f04f 0301 	mov.w	r3, #1
    9f0e:	6103      	str	r3, [r0, #16]
    9f10:	dd19      	ble.n	9f46 <__s2b+0x64>
    9f12:	f104 0909 	add.w	r9, r4, #9
    9f16:	46c8      	mov	r8, r9
    9f18:	442c      	add	r4, r5
    9f1a:	f818 3b01 	ldrb.w	r3, [r8], #1
    9f1e:	4601      	mov	r1, r0
    9f20:	3b30      	subs	r3, #48	; 0x30
    9f22:	220a      	movs	r2, #10
    9f24:	4630      	mov	r0, r6
    9f26:	f7ff ffa1 	bl	9e6c <__multadd>
    9f2a:	45a0      	cmp	r8, r4
    9f2c:	d1f5      	bne.n	9f1a <__s2b+0x38>
    9f2e:	f1a5 0408 	sub.w	r4, r5, #8
    9f32:	444c      	add	r4, r9
    9f34:	1b2d      	subs	r5, r5, r4
    9f36:	1963      	adds	r3, r4, r5
    9f38:	42bb      	cmp	r3, r7
    9f3a:	db07      	blt.n	9f4c <__s2b+0x6a>
    9f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9f40:	0052      	lsls	r2, r2, #1
    9f42:	3101      	adds	r1, #1
    9f44:	e7d9      	b.n	9efa <__s2b+0x18>
    9f46:	340a      	adds	r4, #10
    9f48:	2509      	movs	r5, #9
    9f4a:	e7f3      	b.n	9f34 <__s2b+0x52>
    9f4c:	f814 3b01 	ldrb.w	r3, [r4], #1
    9f50:	4601      	mov	r1, r0
    9f52:	3b30      	subs	r3, #48	; 0x30
    9f54:	220a      	movs	r2, #10
    9f56:	4630      	mov	r0, r6
    9f58:	f7ff ff88 	bl	9e6c <__multadd>
    9f5c:	e7eb      	b.n	9f36 <__s2b+0x54>

00009f5e <__hi0bits>:
    9f5e:	0c02      	lsrs	r2, r0, #16
    9f60:	0412      	lsls	r2, r2, #16
    9f62:	4603      	mov	r3, r0
    9f64:	b9b2      	cbnz	r2, 9f94 <__hi0bits+0x36>
    9f66:	0403      	lsls	r3, r0, #16
    9f68:	2010      	movs	r0, #16
    9f6a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    9f6e:	bf04      	itt	eq
    9f70:	021b      	lsleq	r3, r3, #8
    9f72:	3008      	addeq	r0, #8
    9f74:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    9f78:	bf04      	itt	eq
    9f7a:	011b      	lsleq	r3, r3, #4
    9f7c:	3004      	addeq	r0, #4
    9f7e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    9f82:	bf04      	itt	eq
    9f84:	009b      	lsleq	r3, r3, #2
    9f86:	3002      	addeq	r0, #2
    9f88:	2b00      	cmp	r3, #0
    9f8a:	db06      	blt.n	9f9a <__hi0bits+0x3c>
    9f8c:	005b      	lsls	r3, r3, #1
    9f8e:	d503      	bpl.n	9f98 <__hi0bits+0x3a>
    9f90:	3001      	adds	r0, #1
    9f92:	4770      	bx	lr
    9f94:	2000      	movs	r0, #0
    9f96:	e7e8      	b.n	9f6a <__hi0bits+0xc>
    9f98:	2020      	movs	r0, #32
    9f9a:	4770      	bx	lr

00009f9c <__lo0bits>:
    9f9c:	6803      	ldr	r3, [r0, #0]
    9f9e:	f013 0207 	ands.w	r2, r3, #7
    9fa2:	4601      	mov	r1, r0
    9fa4:	d00b      	beq.n	9fbe <__lo0bits+0x22>
    9fa6:	07da      	lsls	r2, r3, #31
    9fa8:	d423      	bmi.n	9ff2 <__lo0bits+0x56>
    9faa:	0798      	lsls	r0, r3, #30
    9fac:	bf49      	itett	mi
    9fae:	085b      	lsrmi	r3, r3, #1
    9fb0:	089b      	lsrpl	r3, r3, #2
    9fb2:	2001      	movmi	r0, #1
    9fb4:	600b      	strmi	r3, [r1, #0]
    9fb6:	bf5c      	itt	pl
    9fb8:	600b      	strpl	r3, [r1, #0]
    9fba:	2002      	movpl	r0, #2
    9fbc:	4770      	bx	lr
    9fbe:	b298      	uxth	r0, r3
    9fc0:	b9a8      	cbnz	r0, 9fee <__lo0bits+0x52>
    9fc2:	0c1b      	lsrs	r3, r3, #16
    9fc4:	2010      	movs	r0, #16
    9fc6:	f013 0fff 	tst.w	r3, #255	; 0xff
    9fca:	bf04      	itt	eq
    9fcc:	0a1b      	lsreq	r3, r3, #8
    9fce:	3008      	addeq	r0, #8
    9fd0:	071a      	lsls	r2, r3, #28
    9fd2:	bf04      	itt	eq
    9fd4:	091b      	lsreq	r3, r3, #4
    9fd6:	3004      	addeq	r0, #4
    9fd8:	079a      	lsls	r2, r3, #30
    9fda:	bf04      	itt	eq
    9fdc:	089b      	lsreq	r3, r3, #2
    9fde:	3002      	addeq	r0, #2
    9fe0:	07da      	lsls	r2, r3, #31
    9fe2:	d402      	bmi.n	9fea <__lo0bits+0x4e>
    9fe4:	085b      	lsrs	r3, r3, #1
    9fe6:	d006      	beq.n	9ff6 <__lo0bits+0x5a>
    9fe8:	3001      	adds	r0, #1
    9fea:	600b      	str	r3, [r1, #0]
    9fec:	4770      	bx	lr
    9fee:	4610      	mov	r0, r2
    9ff0:	e7e9      	b.n	9fc6 <__lo0bits+0x2a>
    9ff2:	2000      	movs	r0, #0
    9ff4:	4770      	bx	lr
    9ff6:	2020      	movs	r0, #32
    9ff8:	4770      	bx	lr

00009ffa <__i2b>:
    9ffa:	b510      	push	{r4, lr}
    9ffc:	460c      	mov	r4, r1
    9ffe:	2101      	movs	r1, #1
    a000:	f7ff fee9 	bl	9dd6 <_Balloc>
    a004:	2201      	movs	r2, #1
    a006:	6144      	str	r4, [r0, #20]
    a008:	6102      	str	r2, [r0, #16]
    a00a:	bd10      	pop	{r4, pc}

0000a00c <__multiply>:
    a00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a010:	4614      	mov	r4, r2
    a012:	690a      	ldr	r2, [r1, #16]
    a014:	6923      	ldr	r3, [r4, #16]
    a016:	429a      	cmp	r2, r3
    a018:	bfb8      	it	lt
    a01a:	460b      	movlt	r3, r1
    a01c:	4689      	mov	r9, r1
    a01e:	bfbc      	itt	lt
    a020:	46a1      	movlt	r9, r4
    a022:	461c      	movlt	r4, r3
    a024:	f8d9 7010 	ldr.w	r7, [r9, #16]
    a028:	f8d4 a010 	ldr.w	sl, [r4, #16]
    a02c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a030:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a034:	eb07 060a 	add.w	r6, r7, sl
    a038:	429e      	cmp	r6, r3
    a03a:	bfc8      	it	gt
    a03c:	3101      	addgt	r1, #1
    a03e:	f7ff feca 	bl	9dd6 <_Balloc>
    a042:	f100 0514 	add.w	r5, r0, #20
    a046:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    a04a:	462b      	mov	r3, r5
    a04c:	2200      	movs	r2, #0
    a04e:	4543      	cmp	r3, r8
    a050:	d316      	bcc.n	a080 <__multiply+0x74>
    a052:	f104 0214 	add.w	r2, r4, #20
    a056:	f109 0114 	add.w	r1, r9, #20
    a05a:	eb02 038a 	add.w	r3, r2, sl, lsl #2
    a05e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    a062:	9301      	str	r3, [sp, #4]
    a064:	9c01      	ldr	r4, [sp, #4]
    a066:	4294      	cmp	r4, r2
    a068:	4613      	mov	r3, r2
    a06a:	d80c      	bhi.n	a086 <__multiply+0x7a>
    a06c:	2e00      	cmp	r6, #0
    a06e:	dd03      	ble.n	a078 <__multiply+0x6c>
    a070:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    a074:	2b00      	cmp	r3, #0
    a076:	d054      	beq.n	a122 <__multiply+0x116>
    a078:	6106      	str	r6, [r0, #16]
    a07a:	b003      	add	sp, #12
    a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a080:	f843 2b04 	str.w	r2, [r3], #4
    a084:	e7e3      	b.n	a04e <__multiply+0x42>
    a086:	f8b3 a000 	ldrh.w	sl, [r3]
    a08a:	3204      	adds	r2, #4
    a08c:	f1ba 0f00 	cmp.w	sl, #0
    a090:	d020      	beq.n	a0d4 <__multiply+0xc8>
    a092:	46ae      	mov	lr, r5
    a094:	4689      	mov	r9, r1
    a096:	f04f 0c00 	mov.w	ip, #0
    a09a:	f859 4b04 	ldr.w	r4, [r9], #4
    a09e:	f8be b000 	ldrh.w	fp, [lr]
    a0a2:	b2a3      	uxth	r3, r4
    a0a4:	fb0a b303 	mla	r3, sl, r3, fp
    a0a8:	ea4f 4b14 	mov.w	fp, r4, lsr #16
    a0ac:	f8de 4000 	ldr.w	r4, [lr]
    a0b0:	4463      	add	r3, ip
    a0b2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    a0b6:	fb0a c40b 	mla	r4, sl, fp, ip
    a0ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    a0be:	b29b      	uxth	r3, r3
    a0c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    a0c4:	454f      	cmp	r7, r9
    a0c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    a0ca:	f84e 3b04 	str.w	r3, [lr], #4
    a0ce:	d8e4      	bhi.n	a09a <__multiply+0x8e>
    a0d0:	f8ce c000 	str.w	ip, [lr]
    a0d4:	f832 9c02 	ldrh.w	r9, [r2, #-2]
    a0d8:	f1b9 0f00 	cmp.w	r9, #0
    a0dc:	d01f      	beq.n	a11e <__multiply+0x112>
    a0de:	682b      	ldr	r3, [r5, #0]
    a0e0:	46ae      	mov	lr, r5
    a0e2:	468c      	mov	ip, r1
    a0e4:	f04f 0a00 	mov.w	sl, #0
    a0e8:	f8bc 4000 	ldrh.w	r4, [ip]
    a0ec:	f8be b002 	ldrh.w	fp, [lr, #2]
    a0f0:	fb09 b404 	mla	r4, r9, r4, fp
    a0f4:	44a2      	add	sl, r4
    a0f6:	b29b      	uxth	r3, r3
    a0f8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    a0fc:	f84e 3b04 	str.w	r3, [lr], #4
    a100:	f85c 3b04 	ldr.w	r3, [ip], #4
    a104:	f8be 4000 	ldrh.w	r4, [lr]
    a108:	0c1b      	lsrs	r3, r3, #16
    a10a:	fb09 4303 	mla	r3, r9, r3, r4
    a10e:	eb03 431a 	add.w	r3, r3, sl, lsr #16
    a112:	4567      	cmp	r7, ip
    a114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
    a118:	d8e6      	bhi.n	a0e8 <__multiply+0xdc>
    a11a:	f8ce 3000 	str.w	r3, [lr]
    a11e:	3504      	adds	r5, #4
    a120:	e7a0      	b.n	a064 <__multiply+0x58>
    a122:	3e01      	subs	r6, #1
    a124:	e7a2      	b.n	a06c <__multiply+0x60>
	...

0000a128 <__pow5mult>:
    a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a12c:	4615      	mov	r5, r2
    a12e:	f012 0203 	ands.w	r2, r2, #3
    a132:	4606      	mov	r6, r0
    a134:	460f      	mov	r7, r1
    a136:	d007      	beq.n	a148 <__pow5mult+0x20>
    a138:	3a01      	subs	r2, #1
    a13a:	4c21      	ldr	r4, [pc, #132]	; (a1c0 <__pow5mult+0x98>)
    a13c:	2300      	movs	r3, #0
    a13e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    a142:	f7ff fe93 	bl	9e6c <__multadd>
    a146:	4607      	mov	r7, r0
    a148:	10ad      	asrs	r5, r5, #2
    a14a:	d035      	beq.n	a1b8 <__pow5mult+0x90>
    a14c:	6a74      	ldr	r4, [r6, #36]	; 0x24
    a14e:	b93c      	cbnz	r4, a160 <__pow5mult+0x38>
    a150:	2010      	movs	r0, #16
    a152:	f7ff fe2b 	bl	9dac <malloc>
    a156:	6270      	str	r0, [r6, #36]	; 0x24
    a158:	6044      	str	r4, [r0, #4]
    a15a:	6084      	str	r4, [r0, #8]
    a15c:	6004      	str	r4, [r0, #0]
    a15e:	60c4      	str	r4, [r0, #12]
    a160:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    a164:	f8d8 4008 	ldr.w	r4, [r8, #8]
    a168:	b94c      	cbnz	r4, a17e <__pow5mult+0x56>
    a16a:	f240 2171 	movw	r1, #625	; 0x271
    a16e:	4630      	mov	r0, r6
    a170:	f7ff ff43 	bl	9ffa <__i2b>
    a174:	2300      	movs	r3, #0
    a176:	f8c8 0008 	str.w	r0, [r8, #8]
    a17a:	4604      	mov	r4, r0
    a17c:	6003      	str	r3, [r0, #0]
    a17e:	f04f 0800 	mov.w	r8, #0
    a182:	07eb      	lsls	r3, r5, #31
    a184:	d50a      	bpl.n	a19c <__pow5mult+0x74>
    a186:	4639      	mov	r1, r7
    a188:	4622      	mov	r2, r4
    a18a:	4630      	mov	r0, r6
    a18c:	f7ff ff3e 	bl	a00c <__multiply>
    a190:	4639      	mov	r1, r7
    a192:	4681      	mov	r9, r0
    a194:	4630      	mov	r0, r6
    a196:	f7ff fe52 	bl	9e3e <_Bfree>
    a19a:	464f      	mov	r7, r9
    a19c:	106d      	asrs	r5, r5, #1
    a19e:	d00b      	beq.n	a1b8 <__pow5mult+0x90>
    a1a0:	6820      	ldr	r0, [r4, #0]
    a1a2:	b938      	cbnz	r0, a1b4 <__pow5mult+0x8c>
    a1a4:	4622      	mov	r2, r4
    a1a6:	4621      	mov	r1, r4
    a1a8:	4630      	mov	r0, r6
    a1aa:	f7ff ff2f 	bl	a00c <__multiply>
    a1ae:	6020      	str	r0, [r4, #0]
    a1b0:	f8c0 8000 	str.w	r8, [r0]
    a1b4:	4604      	mov	r4, r0
    a1b6:	e7e4      	b.n	a182 <__pow5mult+0x5a>
    a1b8:	4638      	mov	r0, r7
    a1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a1be:	bf00      	nop
    a1c0:	0000c0a8 	.word	0x0000c0a8

0000a1c4 <__lshift>:
    a1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a1c8:	460c      	mov	r4, r1
    a1ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
    a1ce:	6923      	ldr	r3, [r4, #16]
    a1d0:	6849      	ldr	r1, [r1, #4]
    a1d2:	eb0a 0903 	add.w	r9, sl, r3
    a1d6:	68a3      	ldr	r3, [r4, #8]
    a1d8:	4607      	mov	r7, r0
    a1da:	4616      	mov	r6, r2
    a1dc:	f109 0501 	add.w	r5, r9, #1
    a1e0:	42ab      	cmp	r3, r5
    a1e2:	db31      	blt.n	a248 <__lshift+0x84>
    a1e4:	4638      	mov	r0, r7
    a1e6:	f7ff fdf6 	bl	9dd6 <_Balloc>
    a1ea:	2200      	movs	r2, #0
    a1ec:	4680      	mov	r8, r0
    a1ee:	f100 0314 	add.w	r3, r0, #20
    a1f2:	4611      	mov	r1, r2
    a1f4:	4552      	cmp	r2, sl
    a1f6:	db2a      	blt.n	a24e <__lshift+0x8a>
    a1f8:	6920      	ldr	r0, [r4, #16]
    a1fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    a1fe:	f104 0114 	add.w	r1, r4, #20
    a202:	f016 021f 	ands.w	r2, r6, #31
    a206:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    a20a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
    a20e:	d022      	beq.n	a256 <__lshift+0x92>
    a210:	f1c2 0c20 	rsb	ip, r2, #32
    a214:	2000      	movs	r0, #0
    a216:	680e      	ldr	r6, [r1, #0]
    a218:	4096      	lsls	r6, r2
    a21a:	4330      	orrs	r0, r6
    a21c:	f843 0b04 	str.w	r0, [r3], #4
    a220:	f851 0b04 	ldr.w	r0, [r1], #4
    a224:	458e      	cmp	lr, r1
    a226:	fa20 f00c 	lsr.w	r0, r0, ip
    a22a:	d8f4      	bhi.n	a216 <__lshift+0x52>
    a22c:	6018      	str	r0, [r3, #0]
    a22e:	b108      	cbz	r0, a234 <__lshift+0x70>
    a230:	f109 0502 	add.w	r5, r9, #2
    a234:	3d01      	subs	r5, #1
    a236:	4638      	mov	r0, r7
    a238:	f8c8 5010 	str.w	r5, [r8, #16]
    a23c:	4621      	mov	r1, r4
    a23e:	f7ff fdfe 	bl	9e3e <_Bfree>
    a242:	4640      	mov	r0, r8
    a244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a248:	3101      	adds	r1, #1
    a24a:	005b      	lsls	r3, r3, #1
    a24c:	e7c8      	b.n	a1e0 <__lshift+0x1c>
    a24e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    a252:	3201      	adds	r2, #1
    a254:	e7ce      	b.n	a1f4 <__lshift+0x30>
    a256:	3b04      	subs	r3, #4
    a258:	f851 2b04 	ldr.w	r2, [r1], #4
    a25c:	f843 2f04 	str.w	r2, [r3, #4]!
    a260:	458e      	cmp	lr, r1
    a262:	d8f9      	bhi.n	a258 <__lshift+0x94>
    a264:	e7e6      	b.n	a234 <__lshift+0x70>

0000a266 <__mcmp>:
    a266:	6903      	ldr	r3, [r0, #16]
    a268:	690a      	ldr	r2, [r1, #16]
    a26a:	1a9b      	subs	r3, r3, r2
    a26c:	b530      	push	{r4, r5, lr}
    a26e:	d10c      	bne.n	a28a <__mcmp+0x24>
    a270:	0092      	lsls	r2, r2, #2
    a272:	3014      	adds	r0, #20
    a274:	3114      	adds	r1, #20
    a276:	1884      	adds	r4, r0, r2
    a278:	4411      	add	r1, r2
    a27a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
    a27e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    a282:	4295      	cmp	r5, r2
    a284:	d003      	beq.n	a28e <__mcmp+0x28>
    a286:	d305      	bcc.n	a294 <__mcmp+0x2e>
    a288:	2301      	movs	r3, #1
    a28a:	4618      	mov	r0, r3
    a28c:	bd30      	pop	{r4, r5, pc}
    a28e:	42a0      	cmp	r0, r4
    a290:	d3f3      	bcc.n	a27a <__mcmp+0x14>
    a292:	e7fa      	b.n	a28a <__mcmp+0x24>
    a294:	f04f 33ff 	mov.w	r3, #4294967295
    a298:	e7f7      	b.n	a28a <__mcmp+0x24>

0000a29a <__mdiff>:
    a29a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a29e:	460d      	mov	r5, r1
    a2a0:	4607      	mov	r7, r0
    a2a2:	4611      	mov	r1, r2
    a2a4:	4628      	mov	r0, r5
    a2a6:	4614      	mov	r4, r2
    a2a8:	f7ff ffdd 	bl	a266 <__mcmp>
    a2ac:	1e06      	subs	r6, r0, #0
    a2ae:	d108      	bne.n	a2c2 <__mdiff+0x28>
    a2b0:	4631      	mov	r1, r6
    a2b2:	4638      	mov	r0, r7
    a2b4:	f7ff fd8f 	bl	9dd6 <_Balloc>
    a2b8:	2301      	movs	r3, #1
    a2ba:	6103      	str	r3, [r0, #16]
    a2bc:	6146      	str	r6, [r0, #20]
    a2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a2c2:	bfa4      	itt	ge
    a2c4:	4623      	movge	r3, r4
    a2c6:	462c      	movge	r4, r5
    a2c8:	4638      	mov	r0, r7
    a2ca:	6861      	ldr	r1, [r4, #4]
    a2cc:	bfa6      	itte	ge
    a2ce:	461d      	movge	r5, r3
    a2d0:	2600      	movge	r6, #0
    a2d2:	2601      	movlt	r6, #1
    a2d4:	f7ff fd7f 	bl	9dd6 <_Balloc>
    a2d8:	692b      	ldr	r3, [r5, #16]
    a2da:	60c6      	str	r6, [r0, #12]
    a2dc:	6926      	ldr	r6, [r4, #16]
    a2de:	f105 0914 	add.w	r9, r5, #20
    a2e2:	f104 0214 	add.w	r2, r4, #20
    a2e6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
    a2ea:	eb09 0883 	add.w	r8, r9, r3, lsl #2
    a2ee:	f100 0514 	add.w	r5, r0, #20
    a2f2:	f04f 0c00 	mov.w	ip, #0
    a2f6:	f852 ab04 	ldr.w	sl, [r2], #4
    a2fa:	f859 4b04 	ldr.w	r4, [r9], #4
    a2fe:	fa1c f18a 	uxtah	r1, ip, sl
    a302:	b2a3      	uxth	r3, r4
    a304:	1ac9      	subs	r1, r1, r3
    a306:	0c23      	lsrs	r3, r4, #16
    a308:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
    a30c:	eb03 4321 	add.w	r3, r3, r1, asr #16
    a310:	b289      	uxth	r1, r1
    a312:	ea4f 4c23 	mov.w	ip, r3, asr #16
    a316:	45c8      	cmp	r8, r9
    a318:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    a31c:	4696      	mov	lr, r2
    a31e:	f845 3b04 	str.w	r3, [r5], #4
    a322:	d8e8      	bhi.n	a2f6 <__mdiff+0x5c>
    a324:	45be      	cmp	lr, r7
    a326:	d305      	bcc.n	a334 <__mdiff+0x9a>
    a328:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    a32c:	b18b      	cbz	r3, a352 <__mdiff+0xb8>
    a32e:	6106      	str	r6, [r0, #16]
    a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a334:	f85e 1b04 	ldr.w	r1, [lr], #4
    a338:	fa1c f381 	uxtah	r3, ip, r1
    a33c:	141a      	asrs	r2, r3, #16
    a33e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    a342:	b29b      	uxth	r3, r3
    a344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a348:	ea4f 4c22 	mov.w	ip, r2, asr #16
    a34c:	f845 3b04 	str.w	r3, [r5], #4
    a350:	e7e8      	b.n	a324 <__mdiff+0x8a>
    a352:	3e01      	subs	r6, #1
    a354:	e7e8      	b.n	a328 <__mdiff+0x8e>
	...

0000a358 <__ulp>:
    a358:	4b10      	ldr	r3, [pc, #64]	; (a39c <__ulp+0x44>)
    a35a:	400b      	ands	r3, r1
    a35c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    a360:	2b00      	cmp	r3, #0
    a362:	dd02      	ble.n	a36a <__ulp+0x12>
    a364:	2000      	movs	r0, #0
    a366:	4619      	mov	r1, r3
    a368:	4770      	bx	lr
    a36a:	425b      	negs	r3, r3
    a36c:	151b      	asrs	r3, r3, #20
    a36e:	2b13      	cmp	r3, #19
    a370:	f04f 0000 	mov.w	r0, #0
    a374:	f04f 0100 	mov.w	r1, #0
    a378:	dc04      	bgt.n	a384 <__ulp+0x2c>
    a37a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    a37e:	fa42 f103 	asr.w	r1, r2, r3
    a382:	4770      	bx	lr
    a384:	3b14      	subs	r3, #20
    a386:	2b1e      	cmp	r3, #30
    a388:	f04f 0201 	mov.w	r2, #1
    a38c:	bfda      	itte	le
    a38e:	f1c3 031f 	rsble	r3, r3, #31
    a392:	fa02 f303 	lslle.w	r3, r2, r3
    a396:	4613      	movgt	r3, r2
    a398:	4618      	mov	r0, r3
    a39a:	4770      	bx	lr
    a39c:	7ff00000 	.word	0x7ff00000

0000a3a0 <__b2d>:
    a3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a3a4:	6907      	ldr	r7, [r0, #16]
    a3a6:	f100 0914 	add.w	r9, r0, #20
    a3aa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
    a3ae:	f1a7 0804 	sub.w	r8, r7, #4
    a3b2:	f857 6c04 	ldr.w	r6, [r7, #-4]
    a3b6:	4630      	mov	r0, r6
    a3b8:	f7ff fdd1 	bl	9f5e <__hi0bits>
    a3bc:	f1c0 0320 	rsb	r3, r0, #32
    a3c0:	280a      	cmp	r0, #10
    a3c2:	600b      	str	r3, [r1, #0]
    a3c4:	491e      	ldr	r1, [pc, #120]	; (a440 <__b2d+0xa0>)
    a3c6:	dc17      	bgt.n	a3f8 <__b2d+0x58>
    a3c8:	f1c0 0e0b 	rsb	lr, r0, #11
    a3cc:	45c1      	cmp	r9, r8
    a3ce:	fa26 f30e 	lsr.w	r3, r6, lr
    a3d2:	bf38      	it	cc
    a3d4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
    a3d8:	ea43 0501 	orr.w	r5, r3, r1
    a3dc:	bf28      	it	cs
    a3de:	2200      	movcs	r2, #0
    a3e0:	f100 0315 	add.w	r3, r0, #21
    a3e4:	fa06 f303 	lsl.w	r3, r6, r3
    a3e8:	fa22 f20e 	lsr.w	r2, r2, lr
    a3ec:	ea43 0402 	orr.w	r4, r3, r2
    a3f0:	4620      	mov	r0, r4
    a3f2:	4629      	mov	r1, r5
    a3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a3f8:	45c1      	cmp	r9, r8
    a3fa:	bf3a      	itte	cc
    a3fc:	f1a7 0808 	subcc.w	r8, r7, #8
    a400:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
    a404:	2200      	movcs	r2, #0
    a406:	f1b0 030b 	subs.w	r3, r0, #11
    a40a:	d015      	beq.n	a438 <__b2d+0x98>
    a40c:	409e      	lsls	r6, r3
    a40e:	f1c3 0720 	rsb	r7, r3, #32
    a412:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
    a416:	fa22 f107 	lsr.w	r1, r2, r7
    a41a:	45c8      	cmp	r8, r9
    a41c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
    a420:	ea46 0501 	orr.w	r5, r6, r1
    a424:	bf8c      	ite	hi
    a426:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
    a42a:	2100      	movls	r1, #0
    a42c:	fa02 f003 	lsl.w	r0, r2, r3
    a430:	40f9      	lsrs	r1, r7
    a432:	ea40 0401 	orr.w	r4, r0, r1
    a436:	e7db      	b.n	a3f0 <__b2d+0x50>
    a438:	ea46 0501 	orr.w	r5, r6, r1
    a43c:	4614      	mov	r4, r2
    a43e:	e7d7      	b.n	a3f0 <__b2d+0x50>
    a440:	3ff00000 	.word	0x3ff00000

0000a444 <__d2b>:
    a444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a448:	2101      	movs	r1, #1
    a44a:	461c      	mov	r4, r3
    a44c:	4690      	mov	r8, r2
    a44e:	9e08      	ldr	r6, [sp, #32]
    a450:	9d09      	ldr	r5, [sp, #36]	; 0x24
    a452:	f7ff fcc0 	bl	9dd6 <_Balloc>
    a456:	f3c4 0213 	ubfx	r2, r4, #0, #20
    a45a:	f3c4 540a 	ubfx	r4, r4, #20, #11
    a45e:	4607      	mov	r7, r0
    a460:	bb34      	cbnz	r4, a4b0 <__d2b+0x6c>
    a462:	9201      	str	r2, [sp, #4]
    a464:	f1b8 0f00 	cmp.w	r8, #0
    a468:	d027      	beq.n	a4ba <__d2b+0x76>
    a46a:	a802      	add	r0, sp, #8
    a46c:	f840 8d08 	str.w	r8, [r0, #-8]!
    a470:	f7ff fd94 	bl	9f9c <__lo0bits>
    a474:	9900      	ldr	r1, [sp, #0]
    a476:	b1f0      	cbz	r0, a4b6 <__d2b+0x72>
    a478:	9a01      	ldr	r2, [sp, #4]
    a47a:	f1c0 0320 	rsb	r3, r0, #32
    a47e:	fa02 f303 	lsl.w	r3, r2, r3
    a482:	430b      	orrs	r3, r1
    a484:	40c2      	lsrs	r2, r0
    a486:	617b      	str	r3, [r7, #20]
    a488:	9201      	str	r2, [sp, #4]
    a48a:	9b01      	ldr	r3, [sp, #4]
    a48c:	61bb      	str	r3, [r7, #24]
    a48e:	2b00      	cmp	r3, #0
    a490:	bf14      	ite	ne
    a492:	2102      	movne	r1, #2
    a494:	2101      	moveq	r1, #1
    a496:	6139      	str	r1, [r7, #16]
    a498:	b1c4      	cbz	r4, a4cc <__d2b+0x88>
    a49a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
    a49e:	4404      	add	r4, r0
    a4a0:	6034      	str	r4, [r6, #0]
    a4a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    a4a6:	6028      	str	r0, [r5, #0]
    a4a8:	4638      	mov	r0, r7
    a4aa:	b002      	add	sp, #8
    a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    a4b4:	e7d5      	b.n	a462 <__d2b+0x1e>
    a4b6:	6179      	str	r1, [r7, #20]
    a4b8:	e7e7      	b.n	a48a <__d2b+0x46>
    a4ba:	a801      	add	r0, sp, #4
    a4bc:	f7ff fd6e 	bl	9f9c <__lo0bits>
    a4c0:	9b01      	ldr	r3, [sp, #4]
    a4c2:	617b      	str	r3, [r7, #20]
    a4c4:	2101      	movs	r1, #1
    a4c6:	6139      	str	r1, [r7, #16]
    a4c8:	3020      	adds	r0, #32
    a4ca:	e7e5      	b.n	a498 <__d2b+0x54>
    a4cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    a4d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    a4d4:	6030      	str	r0, [r6, #0]
    a4d6:	6918      	ldr	r0, [r3, #16]
    a4d8:	f7ff fd41 	bl	9f5e <__hi0bits>
    a4dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    a4e0:	e7e1      	b.n	a4a6 <__d2b+0x62>

0000a4e2 <__ratio>:
    a4e2:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    a4e6:	4688      	mov	r8, r1
    a4e8:	4669      	mov	r1, sp
    a4ea:	4681      	mov	r9, r0
    a4ec:	f7ff ff58 	bl	a3a0 <__b2d>
    a4f0:	460d      	mov	r5, r1
    a4f2:	4604      	mov	r4, r0
    a4f4:	a901      	add	r1, sp, #4
    a4f6:	4640      	mov	r0, r8
    a4f8:	f7ff ff52 	bl	a3a0 <__b2d>
    a4fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
    a500:	f8d8 2010 	ldr.w	r2, [r8, #16]
    a504:	9e00      	ldr	r6, [sp, #0]
    a506:	1a9a      	subs	r2, r3, r2
    a508:	9b01      	ldr	r3, [sp, #4]
    a50a:	1af3      	subs	r3, r6, r3
    a50c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    a510:	2b00      	cmp	r3, #0
    a512:	bfd6      	itet	le
    a514:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
    a518:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
    a51c:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
    a520:	4602      	mov	r2, r0
    a522:	460b      	mov	r3, r1
    a524:	4620      	mov	r0, r4
    a526:	4629      	mov	r1, r5
    a528:	f7fd f90a 	bl	7740 <__aeabi_ddiv>
    a52c:	b002      	add	sp, #8
    a52e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0000a532 <__copybits>:
    a532:	3901      	subs	r1, #1
    a534:	b510      	push	{r4, lr}
    a536:	1149      	asrs	r1, r1, #5
    a538:	6914      	ldr	r4, [r2, #16]
    a53a:	3101      	adds	r1, #1
    a53c:	f102 0314 	add.w	r3, r2, #20
    a540:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    a544:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    a548:	42a3      	cmp	r3, r4
    a54a:	4602      	mov	r2, r0
    a54c:	d303      	bcc.n	a556 <__copybits+0x24>
    a54e:	2300      	movs	r3, #0
    a550:	428a      	cmp	r2, r1
    a552:	d305      	bcc.n	a560 <__copybits+0x2e>
    a554:	bd10      	pop	{r4, pc}
    a556:	f853 2b04 	ldr.w	r2, [r3], #4
    a55a:	f840 2b04 	str.w	r2, [r0], #4
    a55e:	e7f3      	b.n	a548 <__copybits+0x16>
    a560:	f842 3b04 	str.w	r3, [r2], #4
    a564:	e7f4      	b.n	a550 <__copybits+0x1e>

0000a566 <__any_on>:
    a566:	f100 0214 	add.w	r2, r0, #20
    a56a:	6900      	ldr	r0, [r0, #16]
    a56c:	114b      	asrs	r3, r1, #5
    a56e:	4298      	cmp	r0, r3
    a570:	b510      	push	{r4, lr}
    a572:	db11      	blt.n	a598 <__any_on+0x32>
    a574:	dd0a      	ble.n	a58c <__any_on+0x26>
    a576:	f011 011f 	ands.w	r1, r1, #31
    a57a:	d007      	beq.n	a58c <__any_on+0x26>
    a57c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    a580:	fa24 f001 	lsr.w	r0, r4, r1
    a584:	fa00 f101 	lsl.w	r1, r0, r1
    a588:	428c      	cmp	r4, r1
    a58a:	d10b      	bne.n	a5a4 <__any_on+0x3e>
    a58c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a590:	4293      	cmp	r3, r2
    a592:	d803      	bhi.n	a59c <__any_on+0x36>
    a594:	2000      	movs	r0, #0
    a596:	bd10      	pop	{r4, pc}
    a598:	4603      	mov	r3, r0
    a59a:	e7f7      	b.n	a58c <__any_on+0x26>
    a59c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    a5a0:	2900      	cmp	r1, #0
    a5a2:	d0f5      	beq.n	a590 <__any_on+0x2a>
    a5a4:	2001      	movs	r0, #1
    a5a6:	bd10      	pop	{r4, pc}

0000a5a8 <_calloc_r>:
    a5a8:	b538      	push	{r3, r4, r5, lr}
    a5aa:	fb02 f401 	mul.w	r4, r2, r1
    a5ae:	4621      	mov	r1, r4
    a5b0:	f7fd fe40 	bl	8234 <_malloc_r>
    a5b4:	4605      	mov	r5, r0
    a5b6:	b118      	cbz	r0, a5c0 <_calloc_r+0x18>
    a5b8:	4622      	mov	r2, r4
    a5ba:	2100      	movs	r1, #0
    a5bc:	f7fd fde4 	bl	8188 <memset>
    a5c0:	4628      	mov	r0, r5
    a5c2:	bd38      	pop	{r3, r4, r5, pc}

0000a5c4 <__ssputs_r>:
    a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5c8:	688e      	ldr	r6, [r1, #8]
    a5ca:	429e      	cmp	r6, r3
    a5cc:	4682      	mov	sl, r0
    a5ce:	460c      	mov	r4, r1
    a5d0:	4691      	mov	r9, r2
    a5d2:	4698      	mov	r8, r3
    a5d4:	d835      	bhi.n	a642 <__ssputs_r+0x7e>
    a5d6:	898a      	ldrh	r2, [r1, #12]
    a5d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    a5dc:	d031      	beq.n	a642 <__ssputs_r+0x7e>
    a5de:	6825      	ldr	r5, [r4, #0]
    a5e0:	6909      	ldr	r1, [r1, #16]
    a5e2:	1a6f      	subs	r7, r5, r1
    a5e4:	6965      	ldr	r5, [r4, #20]
    a5e6:	2302      	movs	r3, #2
    a5e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a5ec:	fb95 f5f3 	sdiv	r5, r5, r3
    a5f0:	f108 0301 	add.w	r3, r8, #1
    a5f4:	443b      	add	r3, r7
    a5f6:	429d      	cmp	r5, r3
    a5f8:	bf38      	it	cc
    a5fa:	461d      	movcc	r5, r3
    a5fc:	0553      	lsls	r3, r2, #21
    a5fe:	d531      	bpl.n	a664 <__ssputs_r+0xa0>
    a600:	4629      	mov	r1, r5
    a602:	f7fd fe17 	bl	8234 <_malloc_r>
    a606:	4606      	mov	r6, r0
    a608:	b950      	cbnz	r0, a620 <__ssputs_r+0x5c>
    a60a:	230c      	movs	r3, #12
    a60c:	f8ca 3000 	str.w	r3, [sl]
    a610:	89a3      	ldrh	r3, [r4, #12]
    a612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a616:	81a3      	strh	r3, [r4, #12]
    a618:	f04f 30ff 	mov.w	r0, #4294967295
    a61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a620:	463a      	mov	r2, r7
    a622:	6921      	ldr	r1, [r4, #16]
    a624:	f7ff fbca 	bl	9dbc <memcpy>
    a628:	89a3      	ldrh	r3, [r4, #12]
    a62a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    a62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a632:	81a3      	strh	r3, [r4, #12]
    a634:	6126      	str	r6, [r4, #16]
    a636:	6165      	str	r5, [r4, #20]
    a638:	443e      	add	r6, r7
    a63a:	1bed      	subs	r5, r5, r7
    a63c:	6026      	str	r6, [r4, #0]
    a63e:	60a5      	str	r5, [r4, #8]
    a640:	4646      	mov	r6, r8
    a642:	4546      	cmp	r6, r8
    a644:	bf28      	it	cs
    a646:	4646      	movcs	r6, r8
    a648:	4632      	mov	r2, r6
    a64a:	4649      	mov	r1, r9
    a64c:	6820      	ldr	r0, [r4, #0]
    a64e:	f000 fc77 	bl	af40 <memmove>
    a652:	68a3      	ldr	r3, [r4, #8]
    a654:	1b9b      	subs	r3, r3, r6
    a656:	60a3      	str	r3, [r4, #8]
    a658:	6823      	ldr	r3, [r4, #0]
    a65a:	441e      	add	r6, r3
    a65c:	6026      	str	r6, [r4, #0]
    a65e:	2000      	movs	r0, #0
    a660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a664:	462a      	mov	r2, r5
    a666:	f000 fc85 	bl	af74 <_realloc_r>
    a66a:	4606      	mov	r6, r0
    a66c:	2800      	cmp	r0, #0
    a66e:	d1e1      	bne.n	a634 <__ssputs_r+0x70>
    a670:	6921      	ldr	r1, [r4, #16]
    a672:	4650      	mov	r0, sl
    a674:	f7fd fd90 	bl	8198 <_free_r>
    a678:	e7c7      	b.n	a60a <__ssputs_r+0x46>
	...

0000a67c <_svfiprintf_r>:
    a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a680:	b09d      	sub	sp, #116	; 0x74
    a682:	4680      	mov	r8, r0
    a684:	9303      	str	r3, [sp, #12]
    a686:	898b      	ldrh	r3, [r1, #12]
    a688:	061c      	lsls	r4, r3, #24
    a68a:	460d      	mov	r5, r1
    a68c:	4616      	mov	r6, r2
    a68e:	d50f      	bpl.n	a6b0 <_svfiprintf_r+0x34>
    a690:	690b      	ldr	r3, [r1, #16]
    a692:	b96b      	cbnz	r3, a6b0 <_svfiprintf_r+0x34>
    a694:	2140      	movs	r1, #64	; 0x40
    a696:	f7fd fdcd 	bl	8234 <_malloc_r>
    a69a:	6028      	str	r0, [r5, #0]
    a69c:	6128      	str	r0, [r5, #16]
    a69e:	b928      	cbnz	r0, a6ac <_svfiprintf_r+0x30>
    a6a0:	230c      	movs	r3, #12
    a6a2:	f8c8 3000 	str.w	r3, [r8]
    a6a6:	f04f 30ff 	mov.w	r0, #4294967295
    a6aa:	e0c5      	b.n	a838 <_svfiprintf_r+0x1bc>
    a6ac:	2340      	movs	r3, #64	; 0x40
    a6ae:	616b      	str	r3, [r5, #20]
    a6b0:	2300      	movs	r3, #0
    a6b2:	9309      	str	r3, [sp, #36]	; 0x24
    a6b4:	2320      	movs	r3, #32
    a6b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a6ba:	2330      	movs	r3, #48	; 0x30
    a6bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a6c0:	f04f 0b01 	mov.w	fp, #1
    a6c4:	4637      	mov	r7, r6
    a6c6:	463c      	mov	r4, r7
    a6c8:	f814 3b01 	ldrb.w	r3, [r4], #1
    a6cc:	2b00      	cmp	r3, #0
    a6ce:	d13c      	bne.n	a74a <_svfiprintf_r+0xce>
    a6d0:	ebb7 0a06 	subs.w	sl, r7, r6
    a6d4:	d00b      	beq.n	a6ee <_svfiprintf_r+0x72>
    a6d6:	4653      	mov	r3, sl
    a6d8:	4632      	mov	r2, r6
    a6da:	4629      	mov	r1, r5
    a6dc:	4640      	mov	r0, r8
    a6de:	f7ff ff71 	bl	a5c4 <__ssputs_r>
    a6e2:	3001      	adds	r0, #1
    a6e4:	f000 80a3 	beq.w	a82e <_svfiprintf_r+0x1b2>
    a6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6ea:	4453      	add	r3, sl
    a6ec:	9309      	str	r3, [sp, #36]	; 0x24
    a6ee:	783b      	ldrb	r3, [r7, #0]
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	f000 809c 	beq.w	a82e <_svfiprintf_r+0x1b2>
    a6f6:	2300      	movs	r3, #0
    a6f8:	f04f 32ff 	mov.w	r2, #4294967295
    a6fc:	9304      	str	r3, [sp, #16]
    a6fe:	9307      	str	r3, [sp, #28]
    a700:	9205      	str	r2, [sp, #20]
    a702:	9306      	str	r3, [sp, #24]
    a704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a708:	931a      	str	r3, [sp, #104]	; 0x68
    a70a:	2205      	movs	r2, #5
    a70c:	7821      	ldrb	r1, [r4, #0]
    a70e:	4850      	ldr	r0, [pc, #320]	; (a850 <_svfiprintf_r+0x1d4>)
    a710:	f000 fbc6 	bl	aea0 <memchr>
    a714:	1c67      	adds	r7, r4, #1
    a716:	9b04      	ldr	r3, [sp, #16]
    a718:	b9d8      	cbnz	r0, a752 <_svfiprintf_r+0xd6>
    a71a:	06d9      	lsls	r1, r3, #27
    a71c:	bf44      	itt	mi
    a71e:	2220      	movmi	r2, #32
    a720:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a724:	071a      	lsls	r2, r3, #28
    a726:	bf44      	itt	mi
    a728:	222b      	movmi	r2, #43	; 0x2b
    a72a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a72e:	7822      	ldrb	r2, [r4, #0]
    a730:	2a2a      	cmp	r2, #42	; 0x2a
    a732:	d016      	beq.n	a762 <_svfiprintf_r+0xe6>
    a734:	9a07      	ldr	r2, [sp, #28]
    a736:	2100      	movs	r1, #0
    a738:	200a      	movs	r0, #10
    a73a:	4627      	mov	r7, r4
    a73c:	3401      	adds	r4, #1
    a73e:	783b      	ldrb	r3, [r7, #0]
    a740:	3b30      	subs	r3, #48	; 0x30
    a742:	2b09      	cmp	r3, #9
    a744:	d951      	bls.n	a7ea <_svfiprintf_r+0x16e>
    a746:	b1c9      	cbz	r1, a77c <_svfiprintf_r+0x100>
    a748:	e011      	b.n	a76e <_svfiprintf_r+0xf2>
    a74a:	2b25      	cmp	r3, #37	; 0x25
    a74c:	d0c0      	beq.n	a6d0 <_svfiprintf_r+0x54>
    a74e:	4627      	mov	r7, r4
    a750:	e7b9      	b.n	a6c6 <_svfiprintf_r+0x4a>
    a752:	4a3f      	ldr	r2, [pc, #252]	; (a850 <_svfiprintf_r+0x1d4>)
    a754:	1a80      	subs	r0, r0, r2
    a756:	fa0b f000 	lsl.w	r0, fp, r0
    a75a:	4318      	orrs	r0, r3
    a75c:	9004      	str	r0, [sp, #16]
    a75e:	463c      	mov	r4, r7
    a760:	e7d3      	b.n	a70a <_svfiprintf_r+0x8e>
    a762:	9a03      	ldr	r2, [sp, #12]
    a764:	1d11      	adds	r1, r2, #4
    a766:	6812      	ldr	r2, [r2, #0]
    a768:	9103      	str	r1, [sp, #12]
    a76a:	2a00      	cmp	r2, #0
    a76c:	db01      	blt.n	a772 <_svfiprintf_r+0xf6>
    a76e:	9207      	str	r2, [sp, #28]
    a770:	e004      	b.n	a77c <_svfiprintf_r+0x100>
    a772:	4252      	negs	r2, r2
    a774:	f043 0302 	orr.w	r3, r3, #2
    a778:	9207      	str	r2, [sp, #28]
    a77a:	9304      	str	r3, [sp, #16]
    a77c:	783b      	ldrb	r3, [r7, #0]
    a77e:	2b2e      	cmp	r3, #46	; 0x2e
    a780:	d10e      	bne.n	a7a0 <_svfiprintf_r+0x124>
    a782:	787b      	ldrb	r3, [r7, #1]
    a784:	2b2a      	cmp	r3, #42	; 0x2a
    a786:	f107 0101 	add.w	r1, r7, #1
    a78a:	d132      	bne.n	a7f2 <_svfiprintf_r+0x176>
    a78c:	9b03      	ldr	r3, [sp, #12]
    a78e:	1d1a      	adds	r2, r3, #4
    a790:	681b      	ldr	r3, [r3, #0]
    a792:	9203      	str	r2, [sp, #12]
    a794:	2b00      	cmp	r3, #0
    a796:	bfb8      	it	lt
    a798:	f04f 33ff 	movlt.w	r3, #4294967295
    a79c:	3702      	adds	r7, #2
    a79e:	9305      	str	r3, [sp, #20]
    a7a0:	4c2c      	ldr	r4, [pc, #176]	; (a854 <_svfiprintf_r+0x1d8>)
    a7a2:	7839      	ldrb	r1, [r7, #0]
    a7a4:	2203      	movs	r2, #3
    a7a6:	4620      	mov	r0, r4
    a7a8:	f000 fb7a 	bl	aea0 <memchr>
    a7ac:	b138      	cbz	r0, a7be <_svfiprintf_r+0x142>
    a7ae:	2340      	movs	r3, #64	; 0x40
    a7b0:	1b00      	subs	r0, r0, r4
    a7b2:	fa03 f000 	lsl.w	r0, r3, r0
    a7b6:	9b04      	ldr	r3, [sp, #16]
    a7b8:	4303      	orrs	r3, r0
    a7ba:	9304      	str	r3, [sp, #16]
    a7bc:	3701      	adds	r7, #1
    a7be:	7839      	ldrb	r1, [r7, #0]
    a7c0:	4825      	ldr	r0, [pc, #148]	; (a858 <_svfiprintf_r+0x1dc>)
    a7c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    a7c6:	2206      	movs	r2, #6
    a7c8:	1c7e      	adds	r6, r7, #1
    a7ca:	f000 fb69 	bl	aea0 <memchr>
    a7ce:	2800      	cmp	r0, #0
    a7d0:	d035      	beq.n	a83e <_svfiprintf_r+0x1c2>
    a7d2:	4b22      	ldr	r3, [pc, #136]	; (a85c <_svfiprintf_r+0x1e0>)
    a7d4:	b9fb      	cbnz	r3, a816 <_svfiprintf_r+0x19a>
    a7d6:	9b03      	ldr	r3, [sp, #12]
    a7d8:	3307      	adds	r3, #7
    a7da:	f023 0307 	bic.w	r3, r3, #7
    a7de:	3308      	adds	r3, #8
    a7e0:	9303      	str	r3, [sp, #12]
    a7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7e4:	444b      	add	r3, r9
    a7e6:	9309      	str	r3, [sp, #36]	; 0x24
    a7e8:	e76c      	b.n	a6c4 <_svfiprintf_r+0x48>
    a7ea:	fb00 3202 	mla	r2, r0, r2, r3
    a7ee:	2101      	movs	r1, #1
    a7f0:	e7a3      	b.n	a73a <_svfiprintf_r+0xbe>
    a7f2:	2300      	movs	r3, #0
    a7f4:	9305      	str	r3, [sp, #20]
    a7f6:	4618      	mov	r0, r3
    a7f8:	240a      	movs	r4, #10
    a7fa:	460f      	mov	r7, r1
    a7fc:	3101      	adds	r1, #1
    a7fe:	783a      	ldrb	r2, [r7, #0]
    a800:	3a30      	subs	r2, #48	; 0x30
    a802:	2a09      	cmp	r2, #9
    a804:	d903      	bls.n	a80e <_svfiprintf_r+0x192>
    a806:	2b00      	cmp	r3, #0
    a808:	d0ca      	beq.n	a7a0 <_svfiprintf_r+0x124>
    a80a:	9005      	str	r0, [sp, #20]
    a80c:	e7c8      	b.n	a7a0 <_svfiprintf_r+0x124>
    a80e:	fb04 2000 	mla	r0, r4, r0, r2
    a812:	2301      	movs	r3, #1
    a814:	e7f1      	b.n	a7fa <_svfiprintf_r+0x17e>
    a816:	ab03      	add	r3, sp, #12
    a818:	9300      	str	r3, [sp, #0]
    a81a:	462a      	mov	r2, r5
    a81c:	4b10      	ldr	r3, [pc, #64]	; (a860 <_svfiprintf_r+0x1e4>)
    a81e:	a904      	add	r1, sp, #16
    a820:	4640      	mov	r0, r8
    a822:	f3af 8000 	nop.w
    a826:	f1b0 3fff 	cmp.w	r0, #4294967295
    a82a:	4681      	mov	r9, r0
    a82c:	d1d9      	bne.n	a7e2 <_svfiprintf_r+0x166>
    a82e:	89ab      	ldrh	r3, [r5, #12]
    a830:	065b      	lsls	r3, r3, #25
    a832:	f53f af38 	bmi.w	a6a6 <_svfiprintf_r+0x2a>
    a836:	9809      	ldr	r0, [sp, #36]	; 0x24
    a838:	b01d      	add	sp, #116	; 0x74
    a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a83e:	ab03      	add	r3, sp, #12
    a840:	9300      	str	r3, [sp, #0]
    a842:	462a      	mov	r2, r5
    a844:	4b06      	ldr	r3, [pc, #24]	; (a860 <_svfiprintf_r+0x1e4>)
    a846:	a904      	add	r1, sp, #16
    a848:	4640      	mov	r0, r8
    a84a:	f000 f9bf 	bl	abcc <_printf_i>
    a84e:	e7ea      	b.n	a826 <_svfiprintf_r+0x1aa>
    a850:	0000c0b4 	.word	0x0000c0b4
    a854:	0000c0ba 	.word	0x0000c0ba
    a858:	0000c0be 	.word	0x0000c0be
    a85c:	00000000 	.word	0x00000000
    a860:	0000a5c5 	.word	0x0000a5c5

0000a864 <__sfputc_r>:
    a864:	6893      	ldr	r3, [r2, #8]
    a866:	3b01      	subs	r3, #1
    a868:	2b00      	cmp	r3, #0
    a86a:	b410      	push	{r4}
    a86c:	6093      	str	r3, [r2, #8]
    a86e:	da08      	bge.n	a882 <__sfputc_r+0x1e>
    a870:	6994      	ldr	r4, [r2, #24]
    a872:	42a3      	cmp	r3, r4
    a874:	db02      	blt.n	a87c <__sfputc_r+0x18>
    a876:	b2cb      	uxtb	r3, r1
    a878:	2b0a      	cmp	r3, #10
    a87a:	d102      	bne.n	a882 <__sfputc_r+0x1e>
    a87c:	bc10      	pop	{r4}
    a87e:	f7fe be0f 	b.w	94a0 <__swbuf_r>
    a882:	6813      	ldr	r3, [r2, #0]
    a884:	1c58      	adds	r0, r3, #1
    a886:	6010      	str	r0, [r2, #0]
    a888:	7019      	strb	r1, [r3, #0]
    a88a:	b2c8      	uxtb	r0, r1
    a88c:	bc10      	pop	{r4}
    a88e:	4770      	bx	lr

0000a890 <__sfputs_r>:
    a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a892:	4606      	mov	r6, r0
    a894:	460f      	mov	r7, r1
    a896:	4614      	mov	r4, r2
    a898:	18d5      	adds	r5, r2, r3
    a89a:	42ac      	cmp	r4, r5
    a89c:	d101      	bne.n	a8a2 <__sfputs_r+0x12>
    a89e:	2000      	movs	r0, #0
    a8a0:	e007      	b.n	a8b2 <__sfputs_r+0x22>
    a8a2:	463a      	mov	r2, r7
    a8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
    a8a8:	4630      	mov	r0, r6
    a8aa:	f7ff ffdb 	bl	a864 <__sfputc_r>
    a8ae:	1c43      	adds	r3, r0, #1
    a8b0:	d1f3      	bne.n	a89a <__sfputs_r+0xa>
    a8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a8b4 <_vfiprintf_r>:
    a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8b8:	b09d      	sub	sp, #116	; 0x74
    a8ba:	460c      	mov	r4, r1
    a8bc:	4617      	mov	r7, r2
    a8be:	9303      	str	r3, [sp, #12]
    a8c0:	4606      	mov	r6, r0
    a8c2:	b118      	cbz	r0, a8cc <_vfiprintf_r+0x18>
    a8c4:	6983      	ldr	r3, [r0, #24]
    a8c6:	b90b      	cbnz	r3, a8cc <_vfiprintf_r+0x18>
    a8c8:	f7fd fb8c 	bl	7fe4 <__sinit>
    a8cc:	4b7c      	ldr	r3, [pc, #496]	; (aac0 <_vfiprintf_r+0x20c>)
    a8ce:	429c      	cmp	r4, r3
    a8d0:	d157      	bne.n	a982 <_vfiprintf_r+0xce>
    a8d2:	6874      	ldr	r4, [r6, #4]
    a8d4:	89a3      	ldrh	r3, [r4, #12]
    a8d6:	0718      	lsls	r0, r3, #28
    a8d8:	d55d      	bpl.n	a996 <_vfiprintf_r+0xe2>
    a8da:	6923      	ldr	r3, [r4, #16]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d05a      	beq.n	a996 <_vfiprintf_r+0xe2>
    a8e0:	2300      	movs	r3, #0
    a8e2:	9309      	str	r3, [sp, #36]	; 0x24
    a8e4:	2320      	movs	r3, #32
    a8e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a8ea:	2330      	movs	r3, #48	; 0x30
    a8ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a8f0:	f04f 0b01 	mov.w	fp, #1
    a8f4:	46b8      	mov	r8, r7
    a8f6:	4645      	mov	r5, r8
    a8f8:	f815 3b01 	ldrb.w	r3, [r5], #1
    a8fc:	2b00      	cmp	r3, #0
    a8fe:	d155      	bne.n	a9ac <_vfiprintf_r+0xf8>
    a900:	ebb8 0a07 	subs.w	sl, r8, r7
    a904:	d00b      	beq.n	a91e <_vfiprintf_r+0x6a>
    a906:	4653      	mov	r3, sl
    a908:	463a      	mov	r2, r7
    a90a:	4621      	mov	r1, r4
    a90c:	4630      	mov	r0, r6
    a90e:	f7ff ffbf 	bl	a890 <__sfputs_r>
    a912:	3001      	adds	r0, #1
    a914:	f000 80c4 	beq.w	aaa0 <_vfiprintf_r+0x1ec>
    a918:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a91a:	4453      	add	r3, sl
    a91c:	9309      	str	r3, [sp, #36]	; 0x24
    a91e:	f898 3000 	ldrb.w	r3, [r8]
    a922:	2b00      	cmp	r3, #0
    a924:	f000 80bc 	beq.w	aaa0 <_vfiprintf_r+0x1ec>
    a928:	2300      	movs	r3, #0
    a92a:	f04f 32ff 	mov.w	r2, #4294967295
    a92e:	9304      	str	r3, [sp, #16]
    a930:	9307      	str	r3, [sp, #28]
    a932:	9205      	str	r2, [sp, #20]
    a934:	9306      	str	r3, [sp, #24]
    a936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a93a:	931a      	str	r3, [sp, #104]	; 0x68
    a93c:	2205      	movs	r2, #5
    a93e:	7829      	ldrb	r1, [r5, #0]
    a940:	4860      	ldr	r0, [pc, #384]	; (aac4 <_vfiprintf_r+0x210>)
    a942:	f000 faad 	bl	aea0 <memchr>
    a946:	f105 0801 	add.w	r8, r5, #1
    a94a:	9b04      	ldr	r3, [sp, #16]
    a94c:	2800      	cmp	r0, #0
    a94e:	d131      	bne.n	a9b4 <_vfiprintf_r+0x100>
    a950:	06d9      	lsls	r1, r3, #27
    a952:	bf44      	itt	mi
    a954:	2220      	movmi	r2, #32
    a956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a95a:	071a      	lsls	r2, r3, #28
    a95c:	bf44      	itt	mi
    a95e:	222b      	movmi	r2, #43	; 0x2b
    a960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a964:	782a      	ldrb	r2, [r5, #0]
    a966:	2a2a      	cmp	r2, #42	; 0x2a
    a968:	d02c      	beq.n	a9c4 <_vfiprintf_r+0x110>
    a96a:	9a07      	ldr	r2, [sp, #28]
    a96c:	2100      	movs	r1, #0
    a96e:	200a      	movs	r0, #10
    a970:	46a8      	mov	r8, r5
    a972:	3501      	adds	r5, #1
    a974:	f898 3000 	ldrb.w	r3, [r8]
    a978:	3b30      	subs	r3, #48	; 0x30
    a97a:	2b09      	cmp	r3, #9
    a97c:	d96d      	bls.n	aa5a <_vfiprintf_r+0x1a6>
    a97e:	b371      	cbz	r1, a9de <_vfiprintf_r+0x12a>
    a980:	e026      	b.n	a9d0 <_vfiprintf_r+0x11c>
    a982:	4b51      	ldr	r3, [pc, #324]	; (aac8 <_vfiprintf_r+0x214>)
    a984:	429c      	cmp	r4, r3
    a986:	d101      	bne.n	a98c <_vfiprintf_r+0xd8>
    a988:	68b4      	ldr	r4, [r6, #8]
    a98a:	e7a3      	b.n	a8d4 <_vfiprintf_r+0x20>
    a98c:	4b4f      	ldr	r3, [pc, #316]	; (aacc <_vfiprintf_r+0x218>)
    a98e:	429c      	cmp	r4, r3
    a990:	bf08      	it	eq
    a992:	68f4      	ldreq	r4, [r6, #12]
    a994:	e79e      	b.n	a8d4 <_vfiprintf_r+0x20>
    a996:	4621      	mov	r1, r4
    a998:	4630      	mov	r0, r6
    a99a:	f7fe fdf3 	bl	9584 <__swsetup_r>
    a99e:	2800      	cmp	r0, #0
    a9a0:	d09e      	beq.n	a8e0 <_vfiprintf_r+0x2c>
    a9a2:	f04f 30ff 	mov.w	r0, #4294967295
    a9a6:	b01d      	add	sp, #116	; 0x74
    a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9ac:	2b25      	cmp	r3, #37	; 0x25
    a9ae:	d0a7      	beq.n	a900 <_vfiprintf_r+0x4c>
    a9b0:	46a8      	mov	r8, r5
    a9b2:	e7a0      	b.n	a8f6 <_vfiprintf_r+0x42>
    a9b4:	4a43      	ldr	r2, [pc, #268]	; (aac4 <_vfiprintf_r+0x210>)
    a9b6:	1a80      	subs	r0, r0, r2
    a9b8:	fa0b f000 	lsl.w	r0, fp, r0
    a9bc:	4318      	orrs	r0, r3
    a9be:	9004      	str	r0, [sp, #16]
    a9c0:	4645      	mov	r5, r8
    a9c2:	e7bb      	b.n	a93c <_vfiprintf_r+0x88>
    a9c4:	9a03      	ldr	r2, [sp, #12]
    a9c6:	1d11      	adds	r1, r2, #4
    a9c8:	6812      	ldr	r2, [r2, #0]
    a9ca:	9103      	str	r1, [sp, #12]
    a9cc:	2a00      	cmp	r2, #0
    a9ce:	db01      	blt.n	a9d4 <_vfiprintf_r+0x120>
    a9d0:	9207      	str	r2, [sp, #28]
    a9d2:	e004      	b.n	a9de <_vfiprintf_r+0x12a>
    a9d4:	4252      	negs	r2, r2
    a9d6:	f043 0302 	orr.w	r3, r3, #2
    a9da:	9207      	str	r2, [sp, #28]
    a9dc:	9304      	str	r3, [sp, #16]
    a9de:	f898 3000 	ldrb.w	r3, [r8]
    a9e2:	2b2e      	cmp	r3, #46	; 0x2e
    a9e4:	d110      	bne.n	aa08 <_vfiprintf_r+0x154>
    a9e6:	f898 3001 	ldrb.w	r3, [r8, #1]
    a9ea:	2b2a      	cmp	r3, #42	; 0x2a
    a9ec:	f108 0101 	add.w	r1, r8, #1
    a9f0:	d137      	bne.n	aa62 <_vfiprintf_r+0x1ae>
    a9f2:	9b03      	ldr	r3, [sp, #12]
    a9f4:	1d1a      	adds	r2, r3, #4
    a9f6:	681b      	ldr	r3, [r3, #0]
    a9f8:	9203      	str	r2, [sp, #12]
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	bfb8      	it	lt
    a9fe:	f04f 33ff 	movlt.w	r3, #4294967295
    aa02:	f108 0802 	add.w	r8, r8, #2
    aa06:	9305      	str	r3, [sp, #20]
    aa08:	4d31      	ldr	r5, [pc, #196]	; (aad0 <_vfiprintf_r+0x21c>)
    aa0a:	f898 1000 	ldrb.w	r1, [r8]
    aa0e:	2203      	movs	r2, #3
    aa10:	4628      	mov	r0, r5
    aa12:	f000 fa45 	bl	aea0 <memchr>
    aa16:	b140      	cbz	r0, aa2a <_vfiprintf_r+0x176>
    aa18:	2340      	movs	r3, #64	; 0x40
    aa1a:	1b40      	subs	r0, r0, r5
    aa1c:	fa03 f000 	lsl.w	r0, r3, r0
    aa20:	9b04      	ldr	r3, [sp, #16]
    aa22:	4303      	orrs	r3, r0
    aa24:	9304      	str	r3, [sp, #16]
    aa26:	f108 0801 	add.w	r8, r8, #1
    aa2a:	f898 1000 	ldrb.w	r1, [r8]
    aa2e:	4829      	ldr	r0, [pc, #164]	; (aad4 <_vfiprintf_r+0x220>)
    aa30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    aa34:	2206      	movs	r2, #6
    aa36:	f108 0701 	add.w	r7, r8, #1
    aa3a:	f000 fa31 	bl	aea0 <memchr>
    aa3e:	2800      	cmp	r0, #0
    aa40:	d034      	beq.n	aaac <_vfiprintf_r+0x1f8>
    aa42:	4b25      	ldr	r3, [pc, #148]	; (aad8 <_vfiprintf_r+0x224>)
    aa44:	bb03      	cbnz	r3, aa88 <_vfiprintf_r+0x1d4>
    aa46:	9b03      	ldr	r3, [sp, #12]
    aa48:	3307      	adds	r3, #7
    aa4a:	f023 0307 	bic.w	r3, r3, #7
    aa4e:	3308      	adds	r3, #8
    aa50:	9303      	str	r3, [sp, #12]
    aa52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa54:	444b      	add	r3, r9
    aa56:	9309      	str	r3, [sp, #36]	; 0x24
    aa58:	e74c      	b.n	a8f4 <_vfiprintf_r+0x40>
    aa5a:	fb00 3202 	mla	r2, r0, r2, r3
    aa5e:	2101      	movs	r1, #1
    aa60:	e786      	b.n	a970 <_vfiprintf_r+0xbc>
    aa62:	2300      	movs	r3, #0
    aa64:	9305      	str	r3, [sp, #20]
    aa66:	4618      	mov	r0, r3
    aa68:	250a      	movs	r5, #10
    aa6a:	4688      	mov	r8, r1
    aa6c:	3101      	adds	r1, #1
    aa6e:	f898 2000 	ldrb.w	r2, [r8]
    aa72:	3a30      	subs	r2, #48	; 0x30
    aa74:	2a09      	cmp	r2, #9
    aa76:	d903      	bls.n	aa80 <_vfiprintf_r+0x1cc>
    aa78:	2b00      	cmp	r3, #0
    aa7a:	d0c5      	beq.n	aa08 <_vfiprintf_r+0x154>
    aa7c:	9005      	str	r0, [sp, #20]
    aa7e:	e7c3      	b.n	aa08 <_vfiprintf_r+0x154>
    aa80:	fb05 2000 	mla	r0, r5, r0, r2
    aa84:	2301      	movs	r3, #1
    aa86:	e7f0      	b.n	aa6a <_vfiprintf_r+0x1b6>
    aa88:	ab03      	add	r3, sp, #12
    aa8a:	9300      	str	r3, [sp, #0]
    aa8c:	4622      	mov	r2, r4
    aa8e:	4b13      	ldr	r3, [pc, #76]	; (aadc <_vfiprintf_r+0x228>)
    aa90:	a904      	add	r1, sp, #16
    aa92:	4630      	mov	r0, r6
    aa94:	f3af 8000 	nop.w
    aa98:	f1b0 3fff 	cmp.w	r0, #4294967295
    aa9c:	4681      	mov	r9, r0
    aa9e:	d1d8      	bne.n	aa52 <_vfiprintf_r+0x19e>
    aaa0:	89a3      	ldrh	r3, [r4, #12]
    aaa2:	065b      	lsls	r3, r3, #25
    aaa4:	f53f af7d 	bmi.w	a9a2 <_vfiprintf_r+0xee>
    aaa8:	9809      	ldr	r0, [sp, #36]	; 0x24
    aaaa:	e77c      	b.n	a9a6 <_vfiprintf_r+0xf2>
    aaac:	ab03      	add	r3, sp, #12
    aaae:	9300      	str	r3, [sp, #0]
    aab0:	4622      	mov	r2, r4
    aab2:	4b0a      	ldr	r3, [pc, #40]	; (aadc <_vfiprintf_r+0x228>)
    aab4:	a904      	add	r1, sp, #16
    aab6:	4630      	mov	r0, r6
    aab8:	f000 f888 	bl	abcc <_printf_i>
    aabc:	e7ec      	b.n	aa98 <_vfiprintf_r+0x1e4>
    aabe:	bf00      	nop
    aac0:	0000be00 	.word	0x0000be00
    aac4:	0000c0b4 	.word	0x0000c0b4
    aac8:	0000be20 	.word	0x0000be20
    aacc:	0000bde0 	.word	0x0000bde0
    aad0:	0000c0ba 	.word	0x0000c0ba
    aad4:	0000c0be 	.word	0x0000c0be
    aad8:	00000000 	.word	0x00000000
    aadc:	0000a891 	.word	0x0000a891

0000aae0 <_printf_common>:
    aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aae4:	4691      	mov	r9, r2
    aae6:	461f      	mov	r7, r3
    aae8:	688a      	ldr	r2, [r1, #8]
    aaea:	690b      	ldr	r3, [r1, #16]
    aaec:	f8dd 8020 	ldr.w	r8, [sp, #32]
    aaf0:	4293      	cmp	r3, r2
    aaf2:	bfb8      	it	lt
    aaf4:	4613      	movlt	r3, r2
    aaf6:	f8c9 3000 	str.w	r3, [r9]
    aafa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    aafe:	4606      	mov	r6, r0
    ab00:	460c      	mov	r4, r1
    ab02:	b112      	cbz	r2, ab0a <_printf_common+0x2a>
    ab04:	3301      	adds	r3, #1
    ab06:	f8c9 3000 	str.w	r3, [r9]
    ab0a:	6823      	ldr	r3, [r4, #0]
    ab0c:	0699      	lsls	r1, r3, #26
    ab0e:	bf42      	ittt	mi
    ab10:	f8d9 3000 	ldrmi.w	r3, [r9]
    ab14:	3302      	addmi	r3, #2
    ab16:	f8c9 3000 	strmi.w	r3, [r9]
    ab1a:	6825      	ldr	r5, [r4, #0]
    ab1c:	f015 0506 	ands.w	r5, r5, #6
    ab20:	d107      	bne.n	ab32 <_printf_common+0x52>
    ab22:	f104 0a19 	add.w	sl, r4, #25
    ab26:	68e3      	ldr	r3, [r4, #12]
    ab28:	f8d9 2000 	ldr.w	r2, [r9]
    ab2c:	1a9b      	subs	r3, r3, r2
    ab2e:	429d      	cmp	r5, r3
    ab30:	db29      	blt.n	ab86 <_printf_common+0xa6>
    ab32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    ab36:	6822      	ldr	r2, [r4, #0]
    ab38:	3300      	adds	r3, #0
    ab3a:	bf18      	it	ne
    ab3c:	2301      	movne	r3, #1
    ab3e:	0692      	lsls	r2, r2, #26
    ab40:	d42e      	bmi.n	aba0 <_printf_common+0xc0>
    ab42:	f104 0243 	add.w	r2, r4, #67	; 0x43
    ab46:	4639      	mov	r1, r7
    ab48:	4630      	mov	r0, r6
    ab4a:	47c0      	blx	r8
    ab4c:	3001      	adds	r0, #1
    ab4e:	d021      	beq.n	ab94 <_printf_common+0xb4>
    ab50:	6823      	ldr	r3, [r4, #0]
    ab52:	68e5      	ldr	r5, [r4, #12]
    ab54:	f8d9 2000 	ldr.w	r2, [r9]
    ab58:	f003 0306 	and.w	r3, r3, #6
    ab5c:	2b04      	cmp	r3, #4
    ab5e:	bf08      	it	eq
    ab60:	1aad      	subeq	r5, r5, r2
    ab62:	68a3      	ldr	r3, [r4, #8]
    ab64:	6922      	ldr	r2, [r4, #16]
    ab66:	bf0c      	ite	eq
    ab68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    ab6c:	2500      	movne	r5, #0
    ab6e:	4293      	cmp	r3, r2
    ab70:	bfc4      	itt	gt
    ab72:	1a9b      	subgt	r3, r3, r2
    ab74:	18ed      	addgt	r5, r5, r3
    ab76:	f04f 0900 	mov.w	r9, #0
    ab7a:	341a      	adds	r4, #26
    ab7c:	454d      	cmp	r5, r9
    ab7e:	d11b      	bne.n	abb8 <_printf_common+0xd8>
    ab80:	2000      	movs	r0, #0
    ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab86:	2301      	movs	r3, #1
    ab88:	4652      	mov	r2, sl
    ab8a:	4639      	mov	r1, r7
    ab8c:	4630      	mov	r0, r6
    ab8e:	47c0      	blx	r8
    ab90:	3001      	adds	r0, #1
    ab92:	d103      	bne.n	ab9c <_printf_common+0xbc>
    ab94:	f04f 30ff 	mov.w	r0, #4294967295
    ab98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab9c:	3501      	adds	r5, #1
    ab9e:	e7c2      	b.n	ab26 <_printf_common+0x46>
    aba0:	18e1      	adds	r1, r4, r3
    aba2:	1c5a      	adds	r2, r3, #1
    aba4:	2030      	movs	r0, #48	; 0x30
    aba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    abaa:	4422      	add	r2, r4
    abac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    abb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    abb4:	3302      	adds	r3, #2
    abb6:	e7c4      	b.n	ab42 <_printf_common+0x62>
    abb8:	2301      	movs	r3, #1
    abba:	4622      	mov	r2, r4
    abbc:	4639      	mov	r1, r7
    abbe:	4630      	mov	r0, r6
    abc0:	47c0      	blx	r8
    abc2:	3001      	adds	r0, #1
    abc4:	d0e6      	beq.n	ab94 <_printf_common+0xb4>
    abc6:	f109 0901 	add.w	r9, r9, #1
    abca:	e7d7      	b.n	ab7c <_printf_common+0x9c>

0000abcc <_printf_i>:
    abcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    abd0:	4617      	mov	r7, r2
    abd2:	7e0a      	ldrb	r2, [r1, #24]
    abd4:	b085      	sub	sp, #20
    abd6:	2a6e      	cmp	r2, #110	; 0x6e
    abd8:	4698      	mov	r8, r3
    abda:	4606      	mov	r6, r0
    abdc:	460c      	mov	r4, r1
    abde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    abe0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    abe4:	f000 80bc 	beq.w	ad60 <_printf_i+0x194>
    abe8:	d81a      	bhi.n	ac20 <_printf_i+0x54>
    abea:	2a63      	cmp	r2, #99	; 0x63
    abec:	d02e      	beq.n	ac4c <_printf_i+0x80>
    abee:	d80a      	bhi.n	ac06 <_printf_i+0x3a>
    abf0:	2a00      	cmp	r2, #0
    abf2:	f000 80c8 	beq.w	ad86 <_printf_i+0x1ba>
    abf6:	2a58      	cmp	r2, #88	; 0x58
    abf8:	f000 808a 	beq.w	ad10 <_printf_i+0x144>
    abfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    ac00:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    ac04:	e02a      	b.n	ac5c <_printf_i+0x90>
    ac06:	2a64      	cmp	r2, #100	; 0x64
    ac08:	d001      	beq.n	ac0e <_printf_i+0x42>
    ac0a:	2a69      	cmp	r2, #105	; 0x69
    ac0c:	d1f6      	bne.n	abfc <_printf_i+0x30>
    ac0e:	6821      	ldr	r1, [r4, #0]
    ac10:	681a      	ldr	r2, [r3, #0]
    ac12:	f011 0f80 	tst.w	r1, #128	; 0x80
    ac16:	d023      	beq.n	ac60 <_printf_i+0x94>
    ac18:	1d11      	adds	r1, r2, #4
    ac1a:	6019      	str	r1, [r3, #0]
    ac1c:	6813      	ldr	r3, [r2, #0]
    ac1e:	e027      	b.n	ac70 <_printf_i+0xa4>
    ac20:	2a73      	cmp	r2, #115	; 0x73
    ac22:	f000 80b4 	beq.w	ad8e <_printf_i+0x1c2>
    ac26:	d808      	bhi.n	ac3a <_printf_i+0x6e>
    ac28:	2a6f      	cmp	r2, #111	; 0x6f
    ac2a:	d02a      	beq.n	ac82 <_printf_i+0xb6>
    ac2c:	2a70      	cmp	r2, #112	; 0x70
    ac2e:	d1e5      	bne.n	abfc <_printf_i+0x30>
    ac30:	680a      	ldr	r2, [r1, #0]
    ac32:	f042 0220 	orr.w	r2, r2, #32
    ac36:	600a      	str	r2, [r1, #0]
    ac38:	e003      	b.n	ac42 <_printf_i+0x76>
    ac3a:	2a75      	cmp	r2, #117	; 0x75
    ac3c:	d021      	beq.n	ac82 <_printf_i+0xb6>
    ac3e:	2a78      	cmp	r2, #120	; 0x78
    ac40:	d1dc      	bne.n	abfc <_printf_i+0x30>
    ac42:	2278      	movs	r2, #120	; 0x78
    ac44:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    ac48:	496e      	ldr	r1, [pc, #440]	; (ae04 <_printf_i+0x238>)
    ac4a:	e064      	b.n	ad16 <_printf_i+0x14a>
    ac4c:	681a      	ldr	r2, [r3, #0]
    ac4e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    ac52:	1d11      	adds	r1, r2, #4
    ac54:	6019      	str	r1, [r3, #0]
    ac56:	6813      	ldr	r3, [r2, #0]
    ac58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    ac5c:	2301      	movs	r3, #1
    ac5e:	e0a3      	b.n	ada8 <_printf_i+0x1dc>
    ac60:	f011 0f40 	tst.w	r1, #64	; 0x40
    ac64:	f102 0104 	add.w	r1, r2, #4
    ac68:	6019      	str	r1, [r3, #0]
    ac6a:	d0d7      	beq.n	ac1c <_printf_i+0x50>
    ac6c:	f9b2 3000 	ldrsh.w	r3, [r2]
    ac70:	2b00      	cmp	r3, #0
    ac72:	da03      	bge.n	ac7c <_printf_i+0xb0>
    ac74:	222d      	movs	r2, #45	; 0x2d
    ac76:	425b      	negs	r3, r3
    ac78:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    ac7c:	4962      	ldr	r1, [pc, #392]	; (ae08 <_printf_i+0x23c>)
    ac7e:	220a      	movs	r2, #10
    ac80:	e017      	b.n	acb2 <_printf_i+0xe6>
    ac82:	6820      	ldr	r0, [r4, #0]
    ac84:	6819      	ldr	r1, [r3, #0]
    ac86:	f010 0f80 	tst.w	r0, #128	; 0x80
    ac8a:	d003      	beq.n	ac94 <_printf_i+0xc8>
    ac8c:	1d08      	adds	r0, r1, #4
    ac8e:	6018      	str	r0, [r3, #0]
    ac90:	680b      	ldr	r3, [r1, #0]
    ac92:	e006      	b.n	aca2 <_printf_i+0xd6>
    ac94:	f010 0f40 	tst.w	r0, #64	; 0x40
    ac98:	f101 0004 	add.w	r0, r1, #4
    ac9c:	6018      	str	r0, [r3, #0]
    ac9e:	d0f7      	beq.n	ac90 <_printf_i+0xc4>
    aca0:	880b      	ldrh	r3, [r1, #0]
    aca2:	4959      	ldr	r1, [pc, #356]	; (ae08 <_printf_i+0x23c>)
    aca4:	2a6f      	cmp	r2, #111	; 0x6f
    aca6:	bf14      	ite	ne
    aca8:	220a      	movne	r2, #10
    acaa:	2208      	moveq	r2, #8
    acac:	2000      	movs	r0, #0
    acae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    acb2:	6865      	ldr	r5, [r4, #4]
    acb4:	60a5      	str	r5, [r4, #8]
    acb6:	2d00      	cmp	r5, #0
    acb8:	f2c0 809c 	blt.w	adf4 <_printf_i+0x228>
    acbc:	6820      	ldr	r0, [r4, #0]
    acbe:	f020 0004 	bic.w	r0, r0, #4
    acc2:	6020      	str	r0, [r4, #0]
    acc4:	2b00      	cmp	r3, #0
    acc6:	d13f      	bne.n	ad48 <_printf_i+0x17c>
    acc8:	2d00      	cmp	r5, #0
    acca:	f040 8095 	bne.w	adf8 <_printf_i+0x22c>
    acce:	4675      	mov	r5, lr
    acd0:	2a08      	cmp	r2, #8
    acd2:	d10b      	bne.n	acec <_printf_i+0x120>
    acd4:	6823      	ldr	r3, [r4, #0]
    acd6:	07da      	lsls	r2, r3, #31
    acd8:	d508      	bpl.n	acec <_printf_i+0x120>
    acda:	6923      	ldr	r3, [r4, #16]
    acdc:	6862      	ldr	r2, [r4, #4]
    acde:	429a      	cmp	r2, r3
    ace0:	bfde      	ittt	le
    ace2:	2330      	movle	r3, #48	; 0x30
    ace4:	f805 3c01 	strble.w	r3, [r5, #-1]
    ace8:	f105 35ff 	addle.w	r5, r5, #4294967295
    acec:	ebae 0305 	sub.w	r3, lr, r5
    acf0:	6123      	str	r3, [r4, #16]
    acf2:	f8cd 8000 	str.w	r8, [sp]
    acf6:	463b      	mov	r3, r7
    acf8:	aa03      	add	r2, sp, #12
    acfa:	4621      	mov	r1, r4
    acfc:	4630      	mov	r0, r6
    acfe:	f7ff feef 	bl	aae0 <_printf_common>
    ad02:	3001      	adds	r0, #1
    ad04:	d155      	bne.n	adb2 <_printf_i+0x1e6>
    ad06:	f04f 30ff 	mov.w	r0, #4294967295
    ad0a:	b005      	add	sp, #20
    ad0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad10:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    ad14:	493c      	ldr	r1, [pc, #240]	; (ae08 <_printf_i+0x23c>)
    ad16:	6822      	ldr	r2, [r4, #0]
    ad18:	6818      	ldr	r0, [r3, #0]
    ad1a:	f012 0f80 	tst.w	r2, #128	; 0x80
    ad1e:	f100 0504 	add.w	r5, r0, #4
    ad22:	601d      	str	r5, [r3, #0]
    ad24:	d001      	beq.n	ad2a <_printf_i+0x15e>
    ad26:	6803      	ldr	r3, [r0, #0]
    ad28:	e002      	b.n	ad30 <_printf_i+0x164>
    ad2a:	0655      	lsls	r5, r2, #25
    ad2c:	d5fb      	bpl.n	ad26 <_printf_i+0x15a>
    ad2e:	8803      	ldrh	r3, [r0, #0]
    ad30:	07d0      	lsls	r0, r2, #31
    ad32:	bf44      	itt	mi
    ad34:	f042 0220 	orrmi.w	r2, r2, #32
    ad38:	6022      	strmi	r2, [r4, #0]
    ad3a:	b91b      	cbnz	r3, ad44 <_printf_i+0x178>
    ad3c:	6822      	ldr	r2, [r4, #0]
    ad3e:	f022 0220 	bic.w	r2, r2, #32
    ad42:	6022      	str	r2, [r4, #0]
    ad44:	2210      	movs	r2, #16
    ad46:	e7b1      	b.n	acac <_printf_i+0xe0>
    ad48:	4675      	mov	r5, lr
    ad4a:	fbb3 f0f2 	udiv	r0, r3, r2
    ad4e:	fb02 3310 	mls	r3, r2, r0, r3
    ad52:	5ccb      	ldrb	r3, [r1, r3]
    ad54:	f805 3d01 	strb.w	r3, [r5, #-1]!
    ad58:	4603      	mov	r3, r0
    ad5a:	2800      	cmp	r0, #0
    ad5c:	d1f5      	bne.n	ad4a <_printf_i+0x17e>
    ad5e:	e7b7      	b.n	acd0 <_printf_i+0x104>
    ad60:	6808      	ldr	r0, [r1, #0]
    ad62:	681a      	ldr	r2, [r3, #0]
    ad64:	6949      	ldr	r1, [r1, #20]
    ad66:	f010 0f80 	tst.w	r0, #128	; 0x80
    ad6a:	d004      	beq.n	ad76 <_printf_i+0x1aa>
    ad6c:	1d10      	adds	r0, r2, #4
    ad6e:	6018      	str	r0, [r3, #0]
    ad70:	6813      	ldr	r3, [r2, #0]
    ad72:	6019      	str	r1, [r3, #0]
    ad74:	e007      	b.n	ad86 <_printf_i+0x1ba>
    ad76:	f010 0f40 	tst.w	r0, #64	; 0x40
    ad7a:	f102 0004 	add.w	r0, r2, #4
    ad7e:	6018      	str	r0, [r3, #0]
    ad80:	6813      	ldr	r3, [r2, #0]
    ad82:	d0f6      	beq.n	ad72 <_printf_i+0x1a6>
    ad84:	8019      	strh	r1, [r3, #0]
    ad86:	2300      	movs	r3, #0
    ad88:	6123      	str	r3, [r4, #16]
    ad8a:	4675      	mov	r5, lr
    ad8c:	e7b1      	b.n	acf2 <_printf_i+0x126>
    ad8e:	681a      	ldr	r2, [r3, #0]
    ad90:	1d11      	adds	r1, r2, #4
    ad92:	6019      	str	r1, [r3, #0]
    ad94:	6815      	ldr	r5, [r2, #0]
    ad96:	6862      	ldr	r2, [r4, #4]
    ad98:	2100      	movs	r1, #0
    ad9a:	4628      	mov	r0, r5
    ad9c:	f000 f880 	bl	aea0 <memchr>
    ada0:	b108      	cbz	r0, ada6 <_printf_i+0x1da>
    ada2:	1b40      	subs	r0, r0, r5
    ada4:	6060      	str	r0, [r4, #4]
    ada6:	6863      	ldr	r3, [r4, #4]
    ada8:	6123      	str	r3, [r4, #16]
    adaa:	2300      	movs	r3, #0
    adac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    adb0:	e79f      	b.n	acf2 <_printf_i+0x126>
    adb2:	6923      	ldr	r3, [r4, #16]
    adb4:	462a      	mov	r2, r5
    adb6:	4639      	mov	r1, r7
    adb8:	4630      	mov	r0, r6
    adba:	47c0      	blx	r8
    adbc:	3001      	adds	r0, #1
    adbe:	d0a2      	beq.n	ad06 <_printf_i+0x13a>
    adc0:	6823      	ldr	r3, [r4, #0]
    adc2:	079b      	lsls	r3, r3, #30
    adc4:	d507      	bpl.n	add6 <_printf_i+0x20a>
    adc6:	2500      	movs	r5, #0
    adc8:	f104 0919 	add.w	r9, r4, #25
    adcc:	68e3      	ldr	r3, [r4, #12]
    adce:	9a03      	ldr	r2, [sp, #12]
    add0:	1a9b      	subs	r3, r3, r2
    add2:	429d      	cmp	r5, r3
    add4:	db05      	blt.n	ade2 <_printf_i+0x216>
    add6:	68e0      	ldr	r0, [r4, #12]
    add8:	9b03      	ldr	r3, [sp, #12]
    adda:	4298      	cmp	r0, r3
    addc:	bfb8      	it	lt
    adde:	4618      	movlt	r0, r3
    ade0:	e793      	b.n	ad0a <_printf_i+0x13e>
    ade2:	2301      	movs	r3, #1
    ade4:	464a      	mov	r2, r9
    ade6:	4639      	mov	r1, r7
    ade8:	4630      	mov	r0, r6
    adea:	47c0      	blx	r8
    adec:	3001      	adds	r0, #1
    adee:	d08a      	beq.n	ad06 <_printf_i+0x13a>
    adf0:	3501      	adds	r5, #1
    adf2:	e7eb      	b.n	adcc <_printf_i+0x200>
    adf4:	2b00      	cmp	r3, #0
    adf6:	d1a7      	bne.n	ad48 <_printf_i+0x17c>
    adf8:	780b      	ldrb	r3, [r1, #0]
    adfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    adfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
    ae02:	e765      	b.n	acd0 <_printf_i+0x104>
    ae04:	0000c0d6 	.word	0x0000c0d6
    ae08:	0000c0c5 	.word	0x0000c0c5

0000ae0c <_read_r>:
    ae0c:	b538      	push	{r3, r4, r5, lr}
    ae0e:	4c07      	ldr	r4, [pc, #28]	; (ae2c <_read_r+0x20>)
    ae10:	4605      	mov	r5, r0
    ae12:	4608      	mov	r0, r1
    ae14:	4611      	mov	r1, r2
    ae16:	2200      	movs	r2, #0
    ae18:	6022      	str	r2, [r4, #0]
    ae1a:	461a      	mov	r2, r3
    ae1c:	f7fb f8ae 	bl	5f7c <_read>
    ae20:	1c43      	adds	r3, r0, #1
    ae22:	d102      	bne.n	ae2a <_read_r+0x1e>
    ae24:	6823      	ldr	r3, [r4, #0]
    ae26:	b103      	cbz	r3, ae2a <_read_r+0x1e>
    ae28:	602b      	str	r3, [r5, #0]
    ae2a:	bd38      	pop	{r3, r4, r5, pc}
    ae2c:	20004590 	.word	0x20004590

0000ae30 <strncmp>:
    ae30:	b510      	push	{r4, lr}
    ae32:	b16a      	cbz	r2, ae50 <strncmp+0x20>
    ae34:	3901      	subs	r1, #1
    ae36:	1884      	adds	r4, r0, r2
    ae38:	f810 3b01 	ldrb.w	r3, [r0], #1
    ae3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ae40:	4293      	cmp	r3, r2
    ae42:	d103      	bne.n	ae4c <strncmp+0x1c>
    ae44:	42a0      	cmp	r0, r4
    ae46:	d001      	beq.n	ae4c <strncmp+0x1c>
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d1f5      	bne.n	ae38 <strncmp+0x8>
    ae4c:	1a98      	subs	r0, r3, r2
    ae4e:	bd10      	pop	{r4, pc}
    ae50:	4610      	mov	r0, r2
    ae52:	bd10      	pop	{r4, pc}

0000ae54 <_fstat_r>:
    ae54:	b538      	push	{r3, r4, r5, lr}
    ae56:	4c07      	ldr	r4, [pc, #28]	; (ae74 <_fstat_r+0x20>)
    ae58:	2300      	movs	r3, #0
    ae5a:	4605      	mov	r5, r0
    ae5c:	4608      	mov	r0, r1
    ae5e:	4611      	mov	r1, r2
    ae60:	6023      	str	r3, [r4, #0]
    ae62:	f7f7 fe32 	bl	2aca <_fstat>
    ae66:	1c43      	adds	r3, r0, #1
    ae68:	d102      	bne.n	ae70 <_fstat_r+0x1c>
    ae6a:	6823      	ldr	r3, [r4, #0]
    ae6c:	b103      	cbz	r3, ae70 <_fstat_r+0x1c>
    ae6e:	602b      	str	r3, [r5, #0]
    ae70:	bd38      	pop	{r3, r4, r5, pc}
    ae72:	bf00      	nop
    ae74:	20004590 	.word	0x20004590

0000ae78 <_isatty_r>:
    ae78:	b538      	push	{r3, r4, r5, lr}
    ae7a:	4c06      	ldr	r4, [pc, #24]	; (ae94 <_isatty_r+0x1c>)
    ae7c:	2300      	movs	r3, #0
    ae7e:	4605      	mov	r5, r0
    ae80:	4608      	mov	r0, r1
    ae82:	6023      	str	r3, [r4, #0]
    ae84:	f7f7 fe26 	bl	2ad4 <_isatty>
    ae88:	1c43      	adds	r3, r0, #1
    ae8a:	d102      	bne.n	ae92 <_isatty_r+0x1a>
    ae8c:	6823      	ldr	r3, [r4, #0]
    ae8e:	b103      	cbz	r3, ae92 <_isatty_r+0x1a>
    ae90:	602b      	str	r3, [r5, #0]
    ae92:	bd38      	pop	{r3, r4, r5, pc}
    ae94:	20004590 	.word	0x20004590
	...

0000aea0 <memchr>:
    aea0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    aea4:	2a10      	cmp	r2, #16
    aea6:	db2b      	blt.n	af00 <memchr+0x60>
    aea8:	f010 0f07 	tst.w	r0, #7
    aeac:	d008      	beq.n	aec0 <memchr+0x20>
    aeae:	f810 3b01 	ldrb.w	r3, [r0], #1
    aeb2:	3a01      	subs	r2, #1
    aeb4:	428b      	cmp	r3, r1
    aeb6:	d02d      	beq.n	af14 <memchr+0x74>
    aeb8:	f010 0f07 	tst.w	r0, #7
    aebc:	b342      	cbz	r2, af10 <memchr+0x70>
    aebe:	d1f6      	bne.n	aeae <memchr+0xe>
    aec0:	b4f0      	push	{r4, r5, r6, r7}
    aec2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    aec6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    aeca:	f022 0407 	bic.w	r4, r2, #7
    aece:	f07f 0700 	mvns.w	r7, #0
    aed2:	2300      	movs	r3, #0
    aed4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    aed8:	3c08      	subs	r4, #8
    aeda:	ea85 0501 	eor.w	r5, r5, r1
    aede:	ea86 0601 	eor.w	r6, r6, r1
    aee2:	fa85 f547 	uadd8	r5, r5, r7
    aee6:	faa3 f587 	sel	r5, r3, r7
    aeea:	fa86 f647 	uadd8	r6, r6, r7
    aeee:	faa5 f687 	sel	r6, r5, r7
    aef2:	b98e      	cbnz	r6, af18 <memchr+0x78>
    aef4:	d1ee      	bne.n	aed4 <memchr+0x34>
    aef6:	bcf0      	pop	{r4, r5, r6, r7}
    aef8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    aefc:	f002 0207 	and.w	r2, r2, #7
    af00:	b132      	cbz	r2, af10 <memchr+0x70>
    af02:	f810 3b01 	ldrb.w	r3, [r0], #1
    af06:	3a01      	subs	r2, #1
    af08:	ea83 0301 	eor.w	r3, r3, r1
    af0c:	b113      	cbz	r3, af14 <memchr+0x74>
    af0e:	d1f8      	bne.n	af02 <memchr+0x62>
    af10:	2000      	movs	r0, #0
    af12:	4770      	bx	lr
    af14:	3801      	subs	r0, #1
    af16:	4770      	bx	lr
    af18:	2d00      	cmp	r5, #0
    af1a:	bf06      	itte	eq
    af1c:	4635      	moveq	r5, r6
    af1e:	3803      	subeq	r0, #3
    af20:	3807      	subne	r0, #7
    af22:	f015 0f01 	tst.w	r5, #1
    af26:	d107      	bne.n	af38 <memchr+0x98>
    af28:	3001      	adds	r0, #1
    af2a:	f415 7f80 	tst.w	r5, #256	; 0x100
    af2e:	bf02      	ittt	eq
    af30:	3001      	addeq	r0, #1
    af32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    af36:	3001      	addeq	r0, #1
    af38:	bcf0      	pop	{r4, r5, r6, r7}
    af3a:	3801      	subs	r0, #1
    af3c:	4770      	bx	lr
    af3e:	bf00      	nop

0000af40 <memmove>:
    af40:	4288      	cmp	r0, r1
    af42:	b510      	push	{r4, lr}
    af44:	eb01 0302 	add.w	r3, r1, r2
    af48:	d803      	bhi.n	af52 <memmove+0x12>
    af4a:	1e42      	subs	r2, r0, #1
    af4c:	4299      	cmp	r1, r3
    af4e:	d10c      	bne.n	af6a <memmove+0x2a>
    af50:	bd10      	pop	{r4, pc}
    af52:	4298      	cmp	r0, r3
    af54:	d2f9      	bcs.n	af4a <memmove+0xa>
    af56:	1881      	adds	r1, r0, r2
    af58:	1ad2      	subs	r2, r2, r3
    af5a:	42d3      	cmn	r3, r2
    af5c:	d100      	bne.n	af60 <memmove+0x20>
    af5e:	bd10      	pop	{r4, pc}
    af60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    af64:	f801 4d01 	strb.w	r4, [r1, #-1]!
    af68:	e7f7      	b.n	af5a <memmove+0x1a>
    af6a:	f811 4b01 	ldrb.w	r4, [r1], #1
    af6e:	f802 4f01 	strb.w	r4, [r2, #1]!
    af72:	e7eb      	b.n	af4c <memmove+0xc>

0000af74 <_realloc_r>:
    af74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af76:	4607      	mov	r7, r0
    af78:	4614      	mov	r4, r2
    af7a:	460e      	mov	r6, r1
    af7c:	b921      	cbnz	r1, af88 <_realloc_r+0x14>
    af7e:	4611      	mov	r1, r2
    af80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    af84:	f7fd b956 	b.w	8234 <_malloc_r>
    af88:	b922      	cbnz	r2, af94 <_realloc_r+0x20>
    af8a:	f7fd f905 	bl	8198 <_free_r>
    af8e:	4625      	mov	r5, r4
    af90:	4628      	mov	r0, r5
    af92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af94:	f000 f814 	bl	afc0 <_malloc_usable_size_r>
    af98:	4284      	cmp	r4, r0
    af9a:	d90f      	bls.n	afbc <_realloc_r+0x48>
    af9c:	4621      	mov	r1, r4
    af9e:	4638      	mov	r0, r7
    afa0:	f7fd f948 	bl	8234 <_malloc_r>
    afa4:	4605      	mov	r5, r0
    afa6:	2800      	cmp	r0, #0
    afa8:	d0f2      	beq.n	af90 <_realloc_r+0x1c>
    afaa:	4631      	mov	r1, r6
    afac:	4622      	mov	r2, r4
    afae:	f7fe ff05 	bl	9dbc <memcpy>
    afb2:	4631      	mov	r1, r6
    afb4:	4638      	mov	r0, r7
    afb6:	f7fd f8ef 	bl	8198 <_free_r>
    afba:	e7e9      	b.n	af90 <_realloc_r+0x1c>
    afbc:	4635      	mov	r5, r6
    afbe:	e7e7      	b.n	af90 <_realloc_r+0x1c>

0000afc0 <_malloc_usable_size_r>:
    afc0:	f851 0c04 	ldr.w	r0, [r1, #-4]
    afc4:	2800      	cmp	r0, #0
    afc6:	f1a0 0004 	sub.w	r0, r0, #4
    afca:	bfbc      	itt	lt
    afcc:	580b      	ldrlt	r3, [r1, r0]
    afce:	18c0      	addlt	r0, r0, r3
    afd0:	4770      	bx	lr
    afd2:	0000      	movs	r0, r0
    afd4:	6e490a0d 	.word	0x6e490a0d
    afd8:	72207469 	.word	0x72207469
    afdc:	6c757365 	.word	0x6c757365
    afe0:	203d2074 	.word	0x203d2074
    afe4:	0a0d7525 	.word	0x0a0d7525
    afe8:	00000000 	.word	0x00000000
    afec:	6e756f4d 	.word	0x6e756f4d
    aff0:	65722074 	.word	0x65722074
    aff4:	746c7573 	.word	0x746c7573
    aff8:	25203d20 	.word	0x25203d20
    affc:	000a0d75 	.word	0x000a0d75
    b000:	6b736944 	.word	0x6b736944
    b004:	61747320 	.word	0x61747320
    b008:	20737574 	.word	0x20737574
    b00c:	7525203d 	.word	0x7525203d
    b010:	00000a0d 	.word	0x00000a0d
    b014:	43435553 	.word	0x43435553
    b018:	21535345 	.word	0x21535345
    b01c:	0000000d 	.word	0x0000000d
    b020:	6c696146 	.word	0x6c696146
    b024:	74206465 	.word	0x74206465
    b028:	616d206f 	.word	0x616d206f
    b02c:	6620656b 	.word	0x6620656b
    b030:	2e656c69 	.word	0x2e656c69
    b034:	6c696620 	.word	0x6c696620
    b038:	65725f65 	.word	0x65725f65
    b03c:	746c7573 	.word	0x746c7573
    b040:	25203d20 	.word	0x25203d20
    b044:	000a0d75 	.word	0x000a0d75
    b048:	64726148 	.word	0x64726148
    b04c:	72726520 	.word	0x72726520
    b050:	6f20726f 	.word	0x6f20726f
    b054:	72756363 	.word	0x72756363
    b058:	20646572 	.word	0x20646572
    b05c:	74206e69 	.word	0x74206e69
    b060:	6c206568 	.word	0x6c206568
    b064:	6c20776f 	.word	0x6c20776f
    b068:	6c657665 	.word	0x6c657665
    b06c:	73696420 	.word	0x73696420
    b070:	2f49206b 	.word	0x2f49206b
    b074:	616c204f 	.word	0x616c204f
    b078:	00726579 	.word	0x00726579
    b07c:	65737341 	.word	0x65737341
    b080:	6f697472 	.word	0x6f697472
    b084:	6166206e 	.word	0x6166206e
    b088:	64656c69 	.word	0x64656c69
    b08c:	00000000 	.word	0x00000000
    b090:	73796850 	.word	0x73796850
    b094:	6c616369 	.word	0x6c616369
    b098:	69726420 	.word	0x69726420
    b09c:	63206576 	.word	0x63206576
    b0a0:	6f6e6e61 	.word	0x6f6e6e61
    b0a4:	6f772074 	.word	0x6f772074
    b0a8:	00006b72 	.word	0x00006b72
    b0ac:	6c756f43 	.word	0x6c756f43
    b0b0:	6f6e2064 	.word	0x6f6e2064
    b0b4:	69662074 	.word	0x69662074
    b0b8:	6620646e 	.word	0x6620646e
    b0bc:	00656c69 	.word	0x00656c69
    b0c0:	6c756f43 	.word	0x6c756f43
    b0c4:	6f6e2064 	.word	0x6f6e2064
    b0c8:	69662074 	.word	0x69662074
    b0cc:	7020646e 	.word	0x7020646e
    b0d0:	00687461 	.word	0x00687461
    b0d4:	68746150 	.word	0x68746150
    b0d8:	6d616e20 	.word	0x6d616e20
    b0dc:	6f662065 	.word	0x6f662065
    b0e0:	74616d72 	.word	0x74616d72
    b0e4:	766e6920 	.word	0x766e6920
    b0e8:	64696c61 	.word	0x64696c61
    b0ec:	00000000 	.word	0x00000000
    b0f0:	65636341 	.word	0x65636341
    b0f4:	64207373 	.word	0x64207373
    b0f8:	65696e65 	.word	0x65696e65
    b0fc:	75642064 	.word	0x75642064
    b100:	6f742065 	.word	0x6f742065
    b104:	6f727020 	.word	0x6f727020
    b108:	69626968 	.word	0x69626968
    b10c:	20646574 	.word	0x20646574
    b110:	65636361 	.word	0x65636361
    b114:	6f207373 	.word	0x6f207373
    b118:	69642072 	.word	0x69642072
    b11c:	74636572 	.word	0x74636572
    b120:	2079726f 	.word	0x2079726f
    b124:	6c6c7566 	.word	0x6c6c7566
    b128:	00000000 	.word	0x00000000
    b12c:	65636341 	.word	0x65636341
    b130:	64207373 	.word	0x64207373
    b134:	65696e65 	.word	0x65696e65
    b138:	75642064 	.word	0x75642064
    b13c:	6f742065 	.word	0x6f742065
    b140:	6f727020 	.word	0x6f727020
    b144:	69626968 	.word	0x69626968
    b148:	20646574 	.word	0x20646574
    b14c:	65636361 	.word	0x65636361
    b150:	00007373 	.word	0x00007373
    b154:	20656854 	.word	0x20656854
    b158:	656c6966 	.word	0x656c6966
    b15c:	7269642f 	.word	0x7269642f
    b160:	6f746365 	.word	0x6f746365
    b164:	6f207972 	.word	0x6f207972
    b168:	63656a62 	.word	0x63656a62
    b16c:	73692074 	.word	0x73692074
    b170:	766e6920 	.word	0x766e6920
    b174:	64696c61 	.word	0x64696c61
    b178:	00000000 	.word	0x00000000
    b17c:	20656854 	.word	0x20656854
    b180:	73796870 	.word	0x73796870
    b184:	6c616369 	.word	0x6c616369
    b188:	69726420 	.word	0x69726420
    b18c:	69206576 	.word	0x69206576
    b190:	72772073 	.word	0x72772073
    b194:	20657469 	.word	0x20657469
    b198:	746f7270 	.word	0x746f7270
    b19c:	65746365 	.word	0x65746365
    b1a0:	00000064 	.word	0x00000064
    b1a4:	20656854 	.word	0x20656854
    b1a8:	69676f6c 	.word	0x69676f6c
    b1ac:	206c6163 	.word	0x206c6163
    b1b0:	76697264 	.word	0x76697264
    b1b4:	756e2065 	.word	0x756e2065
    b1b8:	7265626d 	.word	0x7265626d
    b1bc:	20736920 	.word	0x20736920
    b1c0:	61766e69 	.word	0x61766e69
    b1c4:	0064696c 	.word	0x0064696c
    b1c8:	20656854 	.word	0x20656854
    b1cc:	756c6f76 	.word	0x756c6f76
    b1d0:	6820656d 	.word	0x6820656d
    b1d4:	6e207361 	.word	0x6e207361
    b1d8:	6f77206f 	.word	0x6f77206f
    b1dc:	61206b72 	.word	0x61206b72
    b1e0:	00616572 	.word	0x00616572
    b1e4:	72656854 	.word	0x72656854
    b1e8:	73692065 	.word	0x73692065
    b1ec:	206f6e20 	.word	0x206f6e20
    b1f0:	696c6176 	.word	0x696c6176
    b1f4:	41462064 	.word	0x41462064
    b1f8:	6f762054 	.word	0x6f762054
    b1fc:	656d756c 	.word	0x656d756c
    b200:	00000000 	.word	0x00000000
    b204:	20656854 	.word	0x20656854
    b208:	6b6d5f66 	.word	0x6b6d5f66
    b20c:	29287366 	.word	0x29287366
    b210:	6f626120 	.word	0x6f626120
    b214:	64657472 	.word	0x64657472
    b218:	65756420 	.word	0x65756420
    b21c:	206f7420 	.word	0x206f7420
    b220:	20796e61 	.word	0x20796e61
    b224:	61726170 	.word	0x61726170
    b228:	6574656d 	.word	0x6574656d
    b22c:	72652072 	.word	0x72652072
    b230:	00726f72 	.word	0x00726f72
    b234:	6c756f43 	.word	0x6c756f43
    b238:	6f6e2064 	.word	0x6f6e2064
    b23c:	65672074 	.word	0x65672074
    b240:	20612074 	.word	0x20612074
    b244:	6e617267 	.word	0x6e617267
    b248:	6f742074 	.word	0x6f742074
    b24c:	63636120 	.word	0x63636120
    b250:	20737365 	.word	0x20737365
    b254:	20656874 	.word	0x20656874
    b258:	756c6f76 	.word	0x756c6f76
    b25c:	7720656d 	.word	0x7720656d
    b260:	69687469 	.word	0x69687469
    b264:	6564206e 	.word	0x6564206e
    b268:	656e6966 	.word	0x656e6966
    b26c:	65702064 	.word	0x65702064
    b270:	646f6972 	.word	0x646f6972
    b274:	00000000 	.word	0x00000000
    b278:	20656854 	.word	0x20656854
    b27c:	7265706f 	.word	0x7265706f
    b280:	6f697461 	.word	0x6f697461
    b284:	7369206e 	.word	0x7369206e
    b288:	6a657220 	.word	0x6a657220
    b28c:	65746365 	.word	0x65746365
    b290:	63612064 	.word	0x63612064
    b294:	64726f63 	.word	0x64726f63
    b298:	20676e69 	.word	0x20676e69
    b29c:	74206f74 	.word	0x74206f74
    b2a0:	66206568 	.word	0x66206568
    b2a4:	20656c69 	.word	0x20656c69
    b2a8:	72616873 	.word	0x72616873
    b2ac:	20676e69 	.word	0x20676e69
    b2b0:	696c6f70 	.word	0x696c6f70
    b2b4:	00007963 	.word	0x00007963
    b2b8:	204e464c 	.word	0x204e464c
    b2bc:	6b726f77 	.word	0x6b726f77
    b2c0:	20676e69 	.word	0x20676e69
    b2c4:	66667562 	.word	0x66667562
    b2c8:	63207265 	.word	0x63207265
    b2cc:	646c756f 	.word	0x646c756f
    b2d0:	746f6e20 	.word	0x746f6e20
    b2d4:	20656220 	.word	0x20656220
    b2d8:	6f6c6c61 	.word	0x6f6c6c61
    b2dc:	65746163 	.word	0x65746163
    b2e0:	00000064 	.word	0x00000064
    b2e4:	626d754e 	.word	0x626d754e
    b2e8:	6f207265 	.word	0x6f207265
    b2ec:	706f2066 	.word	0x706f2066
    b2f0:	66206e65 	.word	0x66206e65
    b2f4:	73656c69 	.word	0x73656c69
    b2f8:	5f203e20 	.word	0x5f203e20
    b2fc:	4c5f5346 	.word	0x4c5f5346
    b300:	004b434f 	.word	0x004b434f
    b304:	65766947 	.word	0x65766947
    b308:	6170206e 	.word	0x6170206e
    b30c:	656d6172 	.word	0x656d6172
    b310:	20726574 	.word	0x20726574
    b314:	69207369 	.word	0x69207369
    b318:	6c61766e 	.word	0x6c61766e
    b31c:	00006469 	.word	0x00006469
    b320:	63637553 	.word	0x63637553
    b324:	00737365 	.word	0x00737365
    b328:	6b736944 	.word	0x6b736944
    b32c:	746f6e20 	.word	0x746f6e20
    b330:	696e6920 	.word	0x696e6920
    b334:	6c616974 	.word	0x6c616974
    b338:	64657a69 	.word	0x64657a69
    b33c:	00000000 	.word	0x00000000
    b340:	6d206f4e 	.word	0x6d206f4e
    b344:	75696465 	.word	0x75696465
    b348:	6e69206d 	.word	0x6e69206d
    b34c:	65687420 	.word	0x65687420
    b350:	69726420 	.word	0x69726420
    b354:	00006576 	.word	0x00006576
    b358:	6b736944 	.word	0x6b736944
    b35c:	69727720 	.word	0x69727720
    b360:	70206574 	.word	0x70206574
    b364:	65746f72 	.word	0x65746f72
    b368:	64657463 	.word	0x64657463
    b36c:	00000000 	.word	0x00000000
    b370:	2d204409 	.word	0x2d204409
    b374:	72694420 	.word	0x72694420
    b378:	6f746365 	.word	0x6f746365
    b37c:	000d7972 	.word	0x000d7972
    b380:	2d205209 	.word	0x2d205209
    b384:	61655220 	.word	0x61655220
    b388:	6e4f2d64 	.word	0x6e4f2d64
    b38c:	000d796c 	.word	0x000d796c
    b390:	2d204809 	.word	0x2d204809
    b394:	64694820 	.word	0x64694820
    b398:	0d6e6564 	.word	0x0d6e6564
    b39c:	00000000 	.word	0x00000000
    b3a0:	2d205309 	.word	0x2d205309
    b3a4:	73795320 	.word	0x73795320
    b3a8:	0d6d6574 	.word	0x0d6d6574
    b3ac:	00000000 	.word	0x00000000
    b3b0:	2d204109 	.word	0x2d204109
    b3b4:	63724120 	.word	0x63724120
    b3b8:	65766968 	.word	0x65766968
    b3bc:	0000000d 	.word	0x0000000d
    b3c0:	63256325 	.word	0x63256325
    b3c4:	63256325 	.word	0x63256325
    b3c8:	25206325 	.word	0x25206325
    b3cc:	30252f75 	.word	0x30252f75
    b3d0:	252f7532 	.word	0x252f7532
    b3d4:	20753230 	.word	0x20753230
    b3d8:	75323025 	.word	0x75323025
    b3dc:	3230253a 	.word	0x3230253a
    b3e0:	39252075 	.word	0x39252075
    b3e4:	2020756c 	.word	0x2020756c
    b3e8:	0a0d7325 	.word	0x0a0d7325
    b3ec:	00000000 	.word	0x00000000
    b3f0:	20753425 	.word	0x20753425
    b3f4:	656c6946 	.word	0x656c6946
    b3f8:	2c297328 	.word	0x2c297328
    b3fc:	6c303125 	.word	0x6c303125
    b400:	79622075 	.word	0x79622075
    b404:	20736574 	.word	0x20736574
    b408:	61746f74 	.word	0x61746f74
    b40c:	34250a6c 	.word	0x34250a6c
    b410:	69442075 	.word	0x69442075
    b414:	29732872 	.word	0x29732872
    b418:	00000000 	.word	0x00000000
    b41c:	3125202c 	.word	0x3125202c
    b420:	20756c30 	.word	0x20756c30
    b424:	65747962 	.word	0x65747962
    b428:	72662073 	.word	0x72662073
    b42c:	0a0d6565 	.word	0x0a0d6565
    b430:	00000000 	.word	0x00000000
    b434:	73250a0d 	.word	0x73250a0d
    b438:	00000a0d 	.word	0x00000a0d
    b43c:	0000002f 	.word	0x0000002f
    b440:	63637553 	.word	0x63637553
    b444:	66737365 	.word	0x66737365
    b448:	796c6c75 	.word	0x796c6c75
    b44c:	6d657220 	.word	0x6d657220
    b450:	6465766f 	.word	0x6465766f
    b454:	0d732520 	.word	0x0d732520
    b458:	0000000a 	.word	0x0000000a
    b45c:	6f430a0d 	.word	0x6f430a0d
    b460:	20646c75 	.word	0x20646c75
    b464:	20746f6e 	.word	0x20746f6e
    b468:	6f6d6572 	.word	0x6f6d6572
    b46c:	20646576 	.word	0x20646576
    b470:	203a7325 	.word	0x203a7325
    b474:	0a0d7325 	.word	0x0a0d7325
    b478:	00000000 	.word	0x00000000
    b47c:	63637553 	.word	0x63637553
    b480:	66737365 	.word	0x66737365
    b484:	796c6c75 	.word	0x796c6c75
    b488:	6e657220 	.word	0x6e657220
    b48c:	64656d61 	.word	0x64656d61
    b490:	20732520 	.word	0x20732520
    b494:	25206f74 	.word	0x25206f74
    b498:	000a0d73 	.word	0x000a0d73
    b49c:	6f430a0d 	.word	0x6f430a0d
    b4a0:	20646c75 	.word	0x20646c75
    b4a4:	20746f6e 	.word	0x20746f6e
    b4a8:	616e6572 	.word	0x616e6572
    b4ac:	2520656d 	.word	0x2520656d
    b4b0:	25203a73 	.word	0x25203a73
    b4b4:	000a0d73 	.word	0x000a0d73
    b4b8:	4e414353 	.word	0x4e414353
    b4bc:	75333025 	.word	0x75333025
    b4c0:	4d414c2e 	.word	0x4d414c2e
    b4c4:	00000000 	.word	0x00000000

0000b4c8 <ExCvt>:
    b4c8:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
    b4d8:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    b4e8:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    b4f8:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    b508:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    b518:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    b528:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    b538:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000b548 <vst.4938>:
    b548:	02000400 00800100 00200040 00080010     ........@. .....
    b558:	00020004 00000000                       ........

0000b560 <cst.4939>:
    b560:	40008000 10002000 40000800 10002000     ...@. .....@. ..
    b570:	04000800 00000200 2c2b2a22 3d3c3b3a     ........"*+,:;<=
    b580:	5d5b3f3e 00007f7c 2c2b2a22 3c3b3a2e     >?[]|..."*+,.:;<
    b590:	5b3f3e3d 007f7c5d 4d90feeb 534f4453     =>?[]|.....MSDOS
    b5a0:	00302e35 4e204f4e 20454d41 46202020     5.0.NO NAME    F
    b5b0:	32335441 00202020 4e204f4e 20454d41     AT32   .NO NAME 
    b5c0:	46202020 20205441 00202020 682f2e2e        FAT     .../h
    b5d0:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
    b5e0:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
    b5f0:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    b600:	732f6c61 682f6372 6d5f6c61 735f6963     al/src/hal_mci_s
    b610:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    b620:	682f6372 755f6c61 74726173 6e79735f     rc/hal_usart_syn
    b630:	00632e63 682f2e2e 722f6c70 682f6374     c.c.../hpl/rtc/h
    b640:	725f6c70 632e6374 00000000 682f2e2e     pl_rtc.c....../h
    b650:	732f6c70 2f636864 5f6c7068 63686473     pl/sdhc/hpl_sdhc
    b660:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
    b670:	41014000 43000000 43000400 43000800     .@.A...C...C...C
    b680:	43000c00                                ...C

0000b684 <_usarts>:
    b684:	00000000 40100004 00030000 00700002     .......@......p.
    b694:	0000d8ad 00000000 00000002 40100004     ...............@
    b6a4:	00030000 00700002 0000d8ad 00000000     ......p.........

0000b6b4 <_i2cms>:
	...
    b6cc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    b6dc:	65735f6c 6d6f6372 0000632e 7261485b     l_sercom.c..[Har
    b6ec:	75614664 0d5d746c 00000000 53207c20     dFault]..... | S
    b6fc:	6b636174 61726620 0d3a656d 00000000     tack frame:.....
    b70c:	7c207c20 20305220 203d2020 30257830      | | R0   = 0x%0
    b71c:	0a0d5838 00000000 7c207c20 20315220     8X...... | | R1 
    b72c:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    b73c:	7c207c20 20325220 203d2020 30257830      | | R2   = 0x%0
    b74c:	0a0d5838 00000000 7c207c20 20335220     8X...... | | R3 
    b75c:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    b76c:	7c207c20 32315220 203d2020 30257830      | | R12  = 0x%0
    b77c:	0a0d5838 00000000 7c207c20 20524c20     8X...... | | LR 
    b78c:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    b79c:	7c207c20 20435020 203d2020 30257830      | | PC   = 0x%0
    b7ac:	0a0d5838 00000000 7c207c20 52535020     8X...... | | PSR
    b7bc:	203d2020 30257830 0a0d5838 00000000       = 0x%08X......
    b7cc:	46207c20 462f5253 0d3a5241 00000000      | FSR/FAR:.....
    b7dc:	7c207c20 6e6f4320 75676966 6c626172      | | Configurabl
    b7ec:	61462065 20746c75 74617453 52207375     e Fault Status R
    b7fc:	73696765 0d726574 00000000 7c207c20     egister..... | |
    b80c:	43207c20 20525346 30203d20 38302578      | CFSR  = 0x%08
    b81c:	000a0d58 7c207c20 7c207c20 6d654d20     X... | | | | Mem
    b82c:	616e614d 53206567 75746174 65522073     Manage Status Re
    b83c:	74736967 000d7265 7c207c20 7c207c20     gister.. | | | |
    b84c:	4d207c20 5253464d 30203d20 32302578      | MMFSR = 0x%02
    b85c:	000a0d58 7c207c20 7c207c20 73754220     X... | | | | Bus
    b86c:	6c756146 74532074 73757461 67655220     Fault Status Reg
    b87c:	65747369 00000d72 7c207c20 7c207c20     ister... | | | |
    b88c:	42207c20 20525346 7830203d 58323025      | BFSR = 0x%02X
    b89c:	00000a0d 7c207c20 7c207c20 61735520     .... | | | | Usa
    b8ac:	61466567 20746c75 74617453 52207375     geFault Status R
    b8bc:	73696765 0d726574 00000000 7c207c20     egister..... | |
    b8cc:	7c207c20 55207c20 20525346 7830203d      | | | UFSR = 0x
    b8dc:	58323025 00000a0d 7c207c20 6d654d20     %02X.... | | Mem
    b8ec:	616e614d 41206567 65726464 52207373     Manage Address R
    b8fc:	73696765 20726574 6c617628 74696469     egister (validit
    b90c:	25203a79 0a0d2958 00000000 7c207c20     y: %X)...... | |
    b91c:	4d207c20 5241464d 30203d20 38302578      | MMFAR = 0x%08
    b92c:	000a0d58 7c207c20 73754220 6c756146     X... | | BusFaul
    b93c:	64412074 73657264 65522073 74736967     t Address Regist
    b94c:	20207265 6c617628 74696469 25203a79     er  (validity: %
    b95c:	0a0d2958 00000000 7c207c20 42207c20     X)...... | | | B
    b96c:	20524146 7830203d 58383025 00000a0d     FAR = 0x%08X....
    b97c:	7c207c20 72614820 61462064 20746c75      | | Hard Fault 
    b98c:	74617453 52207375 73696765 0d726574     Status Register.
    b99c:	00000000 7c207c20 48207c20 20525346     .... | | | HFSR 
    b9ac:	30203d20 38302578 000a0d58 7c207c20      = 0x%08X... | |
    b9bc:	53464420 203d2052 30257830 0a0d5838      DFSR = 0x%08X..
    b9cc:	00000000 7c207c20 53464120 203d2052     .... | | AFSR = 
    b9dc:	30257830 0a0d5838 00000000 4d207c20     0x%08X...... | M
    b9ec:	0d637369 00000000 7c207c20 2f524c20     isc..... | | LR/
    b9fc:	5f435845 55544552 203d4e52 30257830     EXC_RETURN= 0x%0
    ba0c:	0a0d5834 00000000 63256325 00000000     4X......%c%c....
    ba1c:	63256325 00006325 58323025 00000000     %c%c%c..%02X....
    ba2c:	50522023 4144694c 6f4d2052 206c6564     # RPLiDAR Model 
    ba3c:	203a4449 0a0d7525 00000000 50522023     ID: %u......# RP
    ba4c:	4144694c 69462052 61776d72 56206572     LiDAR Firmware V
    ba5c:	69737265 203a6e6f 252e7525 000a0d75     ersion: %u.%u...
    ba6c:	61482023 61776472 56206572 69737265     # Hardware Versi
    ba7c:	203a6e6f 0a0d7525 00000000 65532023     on: %u......# Se
    ba8c:	6c616972 6d754e20 3a726562 25783020     rial Number: 0x%
    ba9c:	000a0d73 414c0a0d 445f534d 47554245     s.....LAMS_DEBUG
    baac:	25203d20 000a0d75 00000d30 69662023      = %u...0...# fi
    babc:	616e656c 203a656d 0a0d7325 00000000     lename: %s......
    bacc:	00007325 63532023 6d206e61 2065646f     %s..# Scan mode 
    badc:	22207369 0d227325 0000000a 6c412023     is "%s".....# Al
    baec:	6e726574 76697461 6f6d2065 3a736564     ternative modes:
    bafc:	00005b20 22732522 00000000 0000002c      [.."%s"....,...
    bb0c:	63532023 63206e61 7374736f 756c2520     # Scan costs %lu
    bb1c:	70207375 73207265 6c706d61 000a0d65     us per sample...
    bb2c:	614d2023 656d2078 72757361 20676e69     # Max measuring 
    bb3c:	74736964 65636e61 20736920 6d756c25     distance is %lum
    bb4c:	00000a0d 535b0a0d 206e6163 6f727245     ......[Scan Erro
    bb5c:	000d5d72 54207c20 6f656d69 45207475     r].. | Timeout E
    bb6c:	726f7272 0000000d 4f207c20 6f2d7475     rror.... | Out-o
    bb7c:	6f422d66 73646e75 72724520 000d726f     f-Bounds Error..
    bb8c:	7c207c20 74796220 6f632065 20746e75      | | byte count 
    bb9c:	756c2528 65772029 7020746e 20747361     (%lu) went past 
    bbac:	20656874 70736572 65736e6f 73656420     the response des
    bbbc:	70697263 20726f74 696d696c 25282074     criptor limit (%
    bbcc:	0d29756c 0000000a 44207c20 206b7369     lu)..... | Disk 
    bbdc:	74696e49 696c6169 6974617a 45206e6f     Initialization E
    bbec:	726f7272 0000000d 7c207c20 0d732520     rror.... | | %s.
    bbfc:	0000000a 44207c20 206b7369 6e756f4d     .... | Disk Moun
    bc0c:	72452074 0d726f72 00000000 46207c20     t Error..... | F
    bc1c:	20656c69 61657243 45206574 726f7272     ile Create Error
    bc2c:	0000000d 46207c20 20656c69 74697257     .... | File Writ
    bc3c:	72452065 0d726f72 00000000 46207c20     e Error..... | F
    bc4c:	20656c69 736f6c43 72452065 0d726f72     ile Close Error.
    bc5c:	00000000 45207c20 726f7272 6e654720     .... | Error Gen
    bc6c:	74617265 20676e69 2077654e 656c6946     erating New File
    bc7c:	656d616e 0000000d 45207c20 726f7272     name.... | Error
    bc8c:	726f4620 7474616d 20676e69 64616548      Formatting Head
    bc9c:	6f207265 69462066 000d656c 45207c20     er of File.. | E
    bcac:	726f7272 646f6320 75252065 00000a0d     rror code %u....
    bcbc:	69462023 6620656c 616d726f 5b203a74     # File format: [
    bccc:	54534944 45434e41 4c5b2c5d 52414449     DISTANCE],[LIDAR
    bcdc:	474e4120 2c5d454c 5245535b 41204f56      ANGLE],[SERVO A
    bcec:	454c474e 000a0d5d 2e756c25 6c2a2e25     NGLE]...%lu.%.*l
    bcfc:	00000075 252c7325 73252c73 00000a0d     u...%s,%s,%s....
    bd0c:	00000023 00000020 00002323              #... ...##..

0000bd18 <sd_mmc_trans_units>:
    bd18:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000bd34 <sd_trans_multipliers>:
    bd34:	00000000 0000000a 0000000c 0000000d     ................
    bd44:	0000000f 00000014 00000019 0000001e     ................
    bd54:	00000023 00000028 0000002d 00000032     #...(...-...2...
    bd64:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000bd74 <mmc_trans_multipliers>:
    bd74:	00000000 0000000a 0000000c 0000000d     ................
    bd84:	0000000f 00000014 0000001a 0000001e     ................
    bd94:	00000023 00000028 0000002d 00000034     #...(...-...4...
    bda4:	00000037 0000003c 00000046 00000050     7...<...F...P...
    bdb4:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    bdc4:	0000632e 00776f70 00000000              .c..pow.....

0000bdd0 <TWO52>:
    bdd0:	00000000 43300000 00000000 c3300000     ......0C......0.

0000bde0 <__sf_fake_stderr>:
	...

0000be00 <__sf_fake_stdin>:
	...

0000be20 <__sf_fake_stdout>:
	...

0000be40 <_global_impure_ptr>:
    be40:	20000094 4f500043 00584953 666e002e     ... C.POSIX...nf
    be50:	696e6900 61007974 0000006e              .inity.an...

0000be5c <fpi.6129>:
    be5c:	00000035 fffffbce 000003cb 00000001     5...............
    be6c:	00000000                                ....

0000be70 <fpinan.6165>:
    be70:	00000034 fffffbce 000003cb 00000001     4...............
	...

0000be88 <tinytens>:
    be88:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    be98:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    bea8:	64ac6f43 11680628                       Co.d(.h.

0000beb0 <_ctype_>:
    beb0:	20202000 20202020 28282020 20282828     .         ((((( 
    bec0:	20202020 20202020 20202020 20202020                     
    bed0:	10108820 10101010 10101010 10101010      ...............
    bee0:	04040410 04040404 10040404 10101010     ................
    bef0:	41411010 41414141 01010101 01010101     ..AAAAAA........
    bf00:	01010101 01010101 01010101 10101010     ................
    bf10:	42421010 42424242 02020202 02020202     ..BBBBBB........
    bf20:	02020202 02020202 02020202 10101010     ................
    bf30:	00000020 00000000 00000000 00000000      ...............
	...

0000bfb8 <__mprec_bigtens>:
    bfb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    bfc8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    bfd8:	7f73bf3c 75154fdd                       <.s..O.u

0000bfe0 <__mprec_tens>:
    bfe0:	00000000 3ff00000 00000000 40240000     .......?......$@
    bff0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    c000:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    c010:	00000000 412e8480 00000000 416312d0     .......A......cA
    c020:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    c030:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    c040:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    c050:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    c060:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    c070:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    c080:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    c090:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    c0a0:	79d99db4 44ea7843                       ...yCx.D

0000c0a8 <p05.6047>:
    c0a8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    c0b8:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    c0c8:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    c0d8:	35343332 39383736 64636261 00006665     23456789abcdef..

0000c0e8 <_init>:
    c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0ea:	bf00      	nop
    c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c0ee:	bc08      	pop	{r3}
    c0f0:	469e      	mov	lr, r3
    c0f2:	4770      	bx	lr

0000c0f4 <__init_array_start>:
    c0f4:	00000289 	.word	0x00000289

0000c0f8 <_fini>:
    c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0fa:	bf00      	nop
    c0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c0fe:	bc08      	pop	{r3}
    c100:	469e      	mov	lr, r3
    c102:	4770      	bx	lr

0000c104 <__fini_array_start>:
    c104:	00000265 	.word	0x00000265
