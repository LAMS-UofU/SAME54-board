
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005350  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00005350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002043c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002043c  2**0
                  CONTENTS
  4 .bss          000042c4  20000440  00005790  0002043c  2**3
                  ALLOC
  5 .stack        00010004  20004704  00009a54  0002043c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00038c79  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004e34  00000000  00000000  0005913c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f901  00000000  00000000  0005df70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d40  00000000  00000000  0006d871  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010e0  00000000  00000000  0006e5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037df0  00000000  00000000  0006f691  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d5c0  00000000  00000000  000a7481  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00126c79  00000000  00000000  000c4a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003138  00000000  00000000  001eb6bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 47 01 20 d5 02 00 00 d1 02 00 00 ad 19 00 00     .G. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	c1 19 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	c1 06 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000440 	.word	0x20000440
     280:	00000000 	.word	0x00000000
     284:	00005350 	.word	0x00005350

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005350 	.word	0x00005350
     2c4:	20000444 	.word	0x20000444
     2c8:	00005350 	.word	0x00005350
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b1c      	ldr	r3, [pc, #112]	; (348 <Reset_Handler+0x74>)
     2d8:	4a1c      	ldr	r2, [pc, #112]	; (34c <Reset_Handler+0x78>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b1c      	ldr	r3, [pc, #112]	; (350 <Reset_Handler+0x7c>)
     2e0:	4a19      	ldr	r2, [pc, #100]	; (348 <Reset_Handler+0x74>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4916      	ldr	r1, [pc, #88]	; (34c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b14      	ldr	r3, [pc, #80]	; (354 <Reset_Handler+0x80>)
     302:	4a15      	ldr	r2, [pc, #84]	; (358 <Reset_Handler+0x84>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x88>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x8c>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x90>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x94>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x70>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	00005350 	.word	0x00005350
     350:	2000043c 	.word	0x2000043c
     354:	20004704 	.word	0x20004704
     358:	20000440 	.word	0x20000440
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	00002c81 	.word	0x00002c81
     368:	000019f9 	.word	0x000019f9

0000036c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     36c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     36e:	4b04      	ldr	r3, [pc, #16]	; (380 <delay_ms+0x14>)
     370:	681c      	ldr	r4, [r3, #0]
     372:	4b04      	ldr	r3, [pc, #16]	; (384 <delay_ms+0x18>)
     374:	4798      	blx	r3
     376:	4601      	mov	r1, r0
     378:	4620      	mov	r0, r4
     37a:	4b03      	ldr	r3, [pc, #12]	; (388 <delay_ms+0x1c>)
     37c:	4798      	blx	r3
     37e:	bd10      	pop	{r4, pc}
     380:	2000045c 	.word	0x2000045c
     384:	000005f9 	.word	0x000005f9
     388:	00000619 	.word	0x00000619

0000038c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	460d      	mov	r5, r1
     390:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     392:	4604      	mov	r4, r0
     394:	b160      	cbz	r0, 3b0 <io_write+0x24>
     396:	1c08      	adds	r0, r1, #0
     398:	bf18      	it	ne
     39a:	2001      	movne	r0, #1
     39c:	2234      	movs	r2, #52	; 0x34
     39e:	4905      	ldr	r1, [pc, #20]	; (3b4 <io_write+0x28>)
     3a0:	4b05      	ldr	r3, [pc, #20]	; (3b8 <io_write+0x2c>)
     3a2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     3a4:	6823      	ldr	r3, [r4, #0]
     3a6:	4632      	mov	r2, r6
     3a8:	4629      	mov	r1, r5
     3aa:	4620      	mov	r0, r4
     3ac:	4798      	blx	r3
}
     3ae:	bd70      	pop	{r4, r5, r6, pc}
     3b0:	2000      	movs	r0, #0
     3b2:	e7f3      	b.n	39c <io_write+0x10>
     3b4:	00004a14 	.word	0x00004a14
     3b8:	000005b5 	.word	0x000005b5

000003bc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     3bc:	b570      	push	{r4, r5, r6, lr}
     3be:	460d      	mov	r5, r1
     3c0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     3c2:	4604      	mov	r4, r0
     3c4:	b160      	cbz	r0, 3e0 <io_read+0x24>
     3c6:	1c08      	adds	r0, r1, #0
     3c8:	bf18      	it	ne
     3ca:	2001      	movne	r0, #1
     3cc:	223d      	movs	r2, #61	; 0x3d
     3ce:	4905      	ldr	r1, [pc, #20]	; (3e4 <io_read+0x28>)
     3d0:	4b05      	ldr	r3, [pc, #20]	; (3e8 <io_read+0x2c>)
     3d2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     3d4:	6863      	ldr	r3, [r4, #4]
     3d6:	4632      	mov	r2, r6
     3d8:	4629      	mov	r1, r5
     3da:	4620      	mov	r0, r4
     3dc:	4798      	blx	r3
}
     3de:	bd70      	pop	{r4, r5, r6, pc}
     3e0:	2000      	movs	r0, #0
     3e2:	e7f3      	b.n	3cc <io_read+0x10>
     3e4:	00004a14 	.word	0x00004a14
     3e8:	000005b5 	.word	0x000005b5

000003ec <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     3ec:	b538      	push	{r3, r4, r5, lr}
     3ee:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     3f0:	4605      	mov	r5, r0
     3f2:	b158      	cbz	r0, 40c <mci_sync_init+0x20>
     3f4:	1c08      	adds	r0, r1, #0
     3f6:	bf18      	it	ne
     3f8:	2001      	movne	r0, #1
     3fa:	2231      	movs	r2, #49	; 0x31
     3fc:	4904      	ldr	r1, [pc, #16]	; (410 <mci_sync_init+0x24>)
     3fe:	4b05      	ldr	r3, [pc, #20]	; (414 <mci_sync_init+0x28>)
     400:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     402:	4621      	mov	r1, r4
     404:	4628      	mov	r0, r5
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <mci_sync_init+0x2c>)
     408:	4798      	blx	r3
}
     40a:	bd38      	pop	{r3, r4, r5, pc}
     40c:	2000      	movs	r0, #0
     40e:	e7f4      	b.n	3fa <mci_sync_init+0xe>
     410:	00004a28 	.word	0x00004a28
     414:	000005b5 	.word	0x000005b5
     418:	00000705 	.word	0x00000705

0000041c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     420:	460f      	mov	r7, r1
     422:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     424:	4604      	mov	r4, r0
     426:	b328      	cbz	r0, 474 <usart_sync_write+0x58>
     428:	b331      	cbz	r1, 478 <usart_sync_write+0x5c>
     42a:	1c10      	adds	r0, r2, #0
     42c:	bf18      	it	ne
     42e:	2001      	movne	r0, #1
     430:	22f1      	movs	r2, #241	; 0xf1
     432:	4912      	ldr	r1, [pc, #72]	; (47c <usart_sync_write+0x60>)
     434:	4b12      	ldr	r3, [pc, #72]	; (480 <usart_sync_write+0x64>)
     436:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     438:	3408      	adds	r4, #8
     43a:	4d12      	ldr	r5, [pc, #72]	; (484 <usart_sync_write+0x68>)
     43c:	4620      	mov	r0, r4
     43e:	47a8      	blx	r5
     440:	2800      	cmp	r0, #0
     442:	d0fb      	beq.n	43c <usart_sync_write+0x20>
     444:	3f01      	subs	r7, #1
     446:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     448:	f8df 9040 	ldr.w	r9, [pc, #64]	; 48c <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     44c:	4d0d      	ldr	r5, [pc, #52]	; (484 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     44e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     452:	4620      	mov	r0, r4
     454:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     456:	4620      	mov	r0, r4
     458:	47a8      	blx	r5
     45a:	2800      	cmp	r0, #0
     45c:	d0fb      	beq.n	456 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     45e:	3601      	adds	r6, #1
     460:	4546      	cmp	r6, r8
     462:	d3f4      	bcc.n	44e <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     464:	4d08      	ldr	r5, [pc, #32]	; (488 <usart_sync_write+0x6c>)
     466:	4620      	mov	r0, r4
     468:	47a8      	blx	r5
     46a:	2800      	cmp	r0, #0
     46c:	d0fb      	beq.n	466 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     46e:	4630      	mov	r0, r6
     470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     474:	2000      	movs	r0, #0
     476:	e7db      	b.n	430 <usart_sync_write+0x14>
     478:	2000      	movs	r0, #0
     47a:	e7d9      	b.n	430 <usart_sync_write+0x14>
     47c:	00004a44 	.word	0x00004a44
     480:	000005b5 	.word	0x000005b5
     484:	0000091b 	.word	0x0000091b
     488:	00000925 	.word	0x00000925
     48c:	0000090d 	.word	0x0000090d

00000490 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     494:	460f      	mov	r7, r1
     496:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     498:	4604      	mov	r4, r0
     49a:	b1e0      	cbz	r0, 4d6 <usart_sync_read+0x46>
     49c:	b1e9      	cbz	r1, 4da <usart_sync_read+0x4a>
     49e:	1c10      	adds	r0, r2, #0
     4a0:	bf18      	it	ne
     4a2:	2001      	movne	r0, #1
     4a4:	f44f 7286 	mov.w	r2, #268	; 0x10c
     4a8:	490d      	ldr	r1, [pc, #52]	; (4e0 <usart_sync_read+0x50>)
     4aa:	4b0e      	ldr	r3, [pc, #56]	; (4e4 <usart_sync_read+0x54>)
     4ac:	4798      	blx	r3
     4ae:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     4b0:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     4b2:	3408      	adds	r4, #8
     4b4:	4d0c      	ldr	r5, [pc, #48]	; (4e8 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     4b6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4ec <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     4ba:	4620      	mov	r0, r4
     4bc:	47a8      	blx	r5
     4be:	2800      	cmp	r0, #0
     4c0:	d0fb      	beq.n	4ba <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     4c2:	4620      	mov	r0, r4
     4c4:	47c8      	blx	r9
     4c6:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     4ca:	3601      	adds	r6, #1
     4cc:	4546      	cmp	r6, r8
     4ce:	d3f4      	bcc.n	4ba <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     4d0:	4630      	mov	r0, r6
     4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     4d6:	2000      	movs	r0, #0
     4d8:	e7e4      	b.n	4a4 <usart_sync_read+0x14>
     4da:	2000      	movs	r0, #0
     4dc:	e7e2      	b.n	4a4 <usart_sync_read+0x14>
     4de:	bf00      	nop
     4e0:	00004a44 	.word	0x00004a44
     4e4:	000005b5 	.word	0x000005b5
     4e8:	0000092f 	.word	0x0000092f
     4ec:	00000913 	.word	0x00000913

000004f0 <usart_sync_init>:
{
     4f0:	b538      	push	{r3, r4, r5, lr}
     4f2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     4f4:	4604      	mov	r4, r0
     4f6:	b198      	cbz	r0, 520 <usart_sync_init+0x30>
     4f8:	1c08      	adds	r0, r1, #0
     4fa:	bf18      	it	ne
     4fc:	2001      	movne	r0, #1
     4fe:	2234      	movs	r2, #52	; 0x34
     500:	4908      	ldr	r1, [pc, #32]	; (524 <usart_sync_init+0x34>)
     502:	4b09      	ldr	r3, [pc, #36]	; (528 <usart_sync_init+0x38>)
     504:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     506:	4629      	mov	r1, r5
     508:	f104 0008 	add.w	r0, r4, #8
     50c:	4b07      	ldr	r3, [pc, #28]	; (52c <usart_sync_init+0x3c>)
     50e:	4798      	blx	r3
	if (init_status) {
     510:	4603      	mov	r3, r0
     512:	b918      	cbnz	r0, 51c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     514:	4a06      	ldr	r2, [pc, #24]	; (530 <usart_sync_init+0x40>)
     516:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     518:	4a06      	ldr	r2, [pc, #24]	; (534 <usart_sync_init+0x44>)
     51a:	6022      	str	r2, [r4, #0]
}
     51c:	4618      	mov	r0, r3
     51e:	bd38      	pop	{r3, r4, r5, pc}
     520:	2000      	movs	r0, #0
     522:	e7ec      	b.n	4fe <usart_sync_init+0xe>
     524:	00004a44 	.word	0x00004a44
     528:	000005b5 	.word	0x000005b5
     52c:	000008cd 	.word	0x000008cd
     530:	00000491 	.word	0x00000491
     534:	0000041d 	.word	0x0000041d

00000538 <usart_sync_enable>:
{
     538:	b510      	push	{r4, lr}
	ASSERT(descr);
     53a:	4604      	mov	r4, r0
     53c:	2253      	movs	r2, #83	; 0x53
     53e:	4906      	ldr	r1, [pc, #24]	; (558 <usart_sync_enable+0x20>)
     540:	3000      	adds	r0, #0
     542:	bf18      	it	ne
     544:	2001      	movne	r0, #1
     546:	4b05      	ldr	r3, [pc, #20]	; (55c <usart_sync_enable+0x24>)
     548:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     54a:	f104 0008 	add.w	r0, r4, #8
     54e:	4b04      	ldr	r3, [pc, #16]	; (560 <usart_sync_enable+0x28>)
     550:	4798      	blx	r3
}
     552:	2000      	movs	r0, #0
     554:	bd10      	pop	{r4, pc}
     556:	bf00      	nop
     558:	00004a44 	.word	0x00004a44
     55c:	000005b5 	.word	0x000005b5
     560:	000008f9 	.word	0x000008f9

00000564 <usart_sync_get_io_descriptor>:
{
     564:	b538      	push	{r3, r4, r5, lr}
     566:	460c      	mov	r4, r1
	ASSERT(descr && io);
     568:	4605      	mov	r5, r0
     56a:	b148      	cbz	r0, 580 <usart_sync_get_io_descriptor+0x1c>
     56c:	1c08      	adds	r0, r1, #0
     56e:	bf18      	it	ne
     570:	2001      	movne	r0, #1
     572:	2269      	movs	r2, #105	; 0x69
     574:	4903      	ldr	r1, [pc, #12]	; (584 <usart_sync_get_io_descriptor+0x20>)
     576:	4b04      	ldr	r3, [pc, #16]	; (588 <usart_sync_get_io_descriptor+0x24>)
     578:	4798      	blx	r3
	*io = &descr->io;
     57a:	6025      	str	r5, [r4, #0]
}
     57c:	2000      	movs	r0, #0
     57e:	bd38      	pop	{r3, r4, r5, pc}
     580:	2000      	movs	r0, #0
     582:	e7f6      	b.n	572 <usart_sync_get_io_descriptor+0xe>
     584:	00004a44 	.word	0x00004a44
     588:	000005b5 	.word	0x000005b5

0000058c <usart_sync_is_rx_not_empty>:
{
     58c:	b510      	push	{r4, lr}
	ASSERT(descr);
     58e:	4604      	mov	r4, r0
     590:	22d7      	movs	r2, #215	; 0xd7
     592:	4905      	ldr	r1, [pc, #20]	; (5a8 <usart_sync_is_rx_not_empty+0x1c>)
     594:	3000      	adds	r0, #0
     596:	bf18      	it	ne
     598:	2001      	movne	r0, #1
     59a:	4b04      	ldr	r3, [pc, #16]	; (5ac <usart_sync_is_rx_not_empty+0x20>)
     59c:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
     59e:	f104 0008 	add.w	r0, r4, #8
     5a2:	4b03      	ldr	r3, [pc, #12]	; (5b0 <usart_sync_is_rx_not_empty+0x24>)
     5a4:	4798      	blx	r3
}
     5a6:	bd10      	pop	{r4, pc}
     5a8:	00004a44 	.word	0x00004a44
     5ac:	000005b5 	.word	0x000005b5
     5b0:	0000092f 	.word	0x0000092f

000005b4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     5b4:	b900      	cbnz	r0, 5b8 <assert+0x4>
		__asm("BKPT #0");
     5b6:	be00      	bkpt	0x0000
     5b8:	4770      	bx	lr
	...

000005bc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     5bc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     5be:	4a06      	ldr	r2, [pc, #24]	; (5d8 <_sbrk+0x1c>)
     5c0:	6812      	ldr	r2, [r2, #0]
     5c2:	b122      	cbz	r2, 5ce <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     5c4:	4a04      	ldr	r2, [pc, #16]	; (5d8 <_sbrk+0x1c>)
     5c6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     5c8:	4403      	add	r3, r0
     5ca:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     5cc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     5ce:	4903      	ldr	r1, [pc, #12]	; (5dc <_sbrk+0x20>)
     5d0:	4a01      	ldr	r2, [pc, #4]	; (5d8 <_sbrk+0x1c>)
     5d2:	6011      	str	r1, [r2, #0]
     5d4:	e7f6      	b.n	5c4 <_sbrk+0x8>
     5d6:	bf00      	nop
     5d8:	20000460 	.word	0x20000460
     5dc:	20014708 	.word	0x20014708

000005e0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     5e0:	f04f 30ff 	mov.w	r0, #4294967295
     5e4:	4770      	bx	lr

000005e6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     5e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ea:	604b      	str	r3, [r1, #4]

	return 0;
}
     5ec:	2000      	movs	r0, #0
     5ee:	4770      	bx	lr

000005f0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     5f0:	2001      	movs	r0, #1
     5f2:	4770      	bx	lr

000005f4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     5f4:	2000      	movs	r0, #0
     5f6:	4770      	bx	lr

000005f8 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     5f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     5fc:	00c3      	lsls	r3, r0, #3
     5fe:	3302      	adds	r3, #2
     600:	4803      	ldr	r0, [pc, #12]	; (610 <_get_cycles_for_ms+0x18>)
     602:	fba0 2303 	umull	r2, r3, r0, r3
     606:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     608:	2064      	movs	r0, #100	; 0x64
     60a:	fb00 f003 	mul.w	r0, r0, r3
     60e:	4770      	bx	lr
     610:	aaaaaaab 	.word	0xaaaaaaab
     614:	00000000 	.word	0x00000000

00000618 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     618:	3901      	subs	r1, #1
     61a:	d8fd      	bhi.n	618 <_delay_cycles>
     61c:	4770      	bx	lr
     61e:	bf00      	nop

00000620 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     620:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     622:	4a08      	ldr	r2, [pc, #32]	; (644 <_init_chip+0x24>)
     624:	8813      	ldrh	r3, [r2, #0]
     626:	b29b      	uxth	r3, r3
     628:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     62a:	4b07      	ldr	r3, [pc, #28]	; (648 <_init_chip+0x28>)
     62c:	4798      	blx	r3
	_oscctrl_init_sources();
     62e:	4b07      	ldr	r3, [pc, #28]	; (64c <_init_chip+0x2c>)
     630:	4798      	blx	r3
	_mclk_init();
     632:	4b07      	ldr	r3, [pc, #28]	; (650 <_init_chip+0x30>)
     634:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     636:	4b07      	ldr	r3, [pc, #28]	; (654 <_init_chip+0x34>)
     638:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     63a:	f640 70ff 	movw	r0, #4095	; 0xfff
     63e:	4b06      	ldr	r3, [pc, #24]	; (658 <_init_chip+0x38>)
     640:	4798      	blx	r3
     642:	bd08      	pop	{r3, pc}
     644:	41004000 	.word	0x41004000
     648:	0000068d 	.word	0x0000068d
     64c:	000006a1 	.word	0x000006a1
     650:	00000681 	.word	0x00000681
     654:	000006bd 	.word	0x000006bd
     658:	0000065d 	.word	0x0000065d

0000065c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     65c:	f010 0f01 	tst.w	r0, #1
     660:	d008      	beq.n	674 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     662:	4a05      	ldr	r2, [pc, #20]	; (678 <_gclk_init_generators_by_fref+0x1c>)
     664:	4b05      	ldr	r3, [pc, #20]	; (67c <_gclk_init_generators_by_fref+0x20>)
     666:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     668:	4619      	mov	r1, r3
     66a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     66e:	684b      	ldr	r3, [r1, #4]
     670:	4213      	tst	r3, r2
     672:	d1fc      	bne.n	66e <_gclk_init_generators_by_fref+0x12>
     674:	4770      	bx	lr
     676:	bf00      	nop
     678:	00010101 	.word	0x00010101
     67c:	40001c00 	.word	0x40001c00

00000680 <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
     680:	2201      	movs	r2, #1
     682:	4b01      	ldr	r3, [pc, #4]	; (688 <_mclk_init+0x8>)
     684:	715a      	strb	r2, [r3, #5]
     686:	4770      	bx	lr
     688:	40000800 	.word	0x40000800

0000068c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <_osc32kctrl_init_sources+0x10>)
     68e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     690:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     694:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     696:	2201      	movs	r2, #1
     698:	741a      	strb	r2, [r3, #16]
     69a:	4770      	bx	lr
     69c:	40001400 	.word	0x40001400

000006a0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     6a0:	4a04      	ldr	r2, [pc, #16]	; (6b4 <_oscctrl_init_sources+0x14>)
     6a2:	4b05      	ldr	r3, [pc, #20]	; (6b8 <_oscctrl_init_sources+0x18>)
     6a4:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     6a6:	461a      	mov	r2, r3
     6a8:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     6aa:	f013 0f02 	tst.w	r3, #2
     6ae:	d0fb      	beq.n	6a8 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     6b0:	4770      	bx	lr
     6b2:	bf00      	nop
     6b4:	03002606 	.word	0x03002606
     6b8:	40001000 	.word	0x40001000

000006bc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     6bc:	4770      	bx	lr
	...

000006c0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     6c0:	b500      	push	{lr}
     6c2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     6c4:	4b0d      	ldr	r3, [pc, #52]	; (6fc <RAMECC_Handler+0x3c>)
     6c6:	789b      	ldrb	r3, [r3, #2]
     6c8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     6ca:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     6cc:	9b01      	ldr	r3, [sp, #4]
     6ce:	f013 0f02 	tst.w	r3, #2
     6d2:	d006      	beq.n	6e2 <RAMECC_Handler+0x22>
     6d4:	4b0a      	ldr	r3, [pc, #40]	; (700 <RAMECC_Handler+0x40>)
     6d6:	681b      	ldr	r3, [r3, #0]
     6d8:	b11b      	cbz	r3, 6e2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     6da:	4a08      	ldr	r2, [pc, #32]	; (6fc <RAMECC_Handler+0x3c>)
     6dc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     6de:	4798      	blx	r3
     6e0:	e009      	b.n	6f6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     6e2:	9b01      	ldr	r3, [sp, #4]
     6e4:	f013 0f01 	tst.w	r3, #1
     6e8:	d005      	beq.n	6f6 <RAMECC_Handler+0x36>
     6ea:	4b05      	ldr	r3, [pc, #20]	; (700 <RAMECC_Handler+0x40>)
     6ec:	685b      	ldr	r3, [r3, #4]
     6ee:	b113      	cbz	r3, 6f6 <RAMECC_Handler+0x36>
     6f0:	4a02      	ldr	r2, [pc, #8]	; (6fc <RAMECC_Handler+0x3c>)
     6f2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     6f4:	4798      	blx	r3
	} else {
		return;
	}
}
     6f6:	b003      	add	sp, #12
     6f8:	f85d fb04 	ldr.w	pc, [sp], #4
     6fc:	41020000 	.word	0x41020000
     700:	200046b4 	.word	0x200046b4

00000704 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
     704:	b538      	push	{r3, r4, r5, lr}
     706:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
     708:	4605      	mov	r5, r0
     70a:	b340      	cbz	r0, 75e <_mci_sync_init+0x5a>
     70c:	1c08      	adds	r0, r1, #0
     70e:	bf18      	it	ne
     710:	2001      	movne	r0, #1
     712:	22d8      	movs	r2, #216	; 0xd8
     714:	4913      	ldr	r1, [pc, #76]	; (764 <_mci_sync_init+0x60>)
     716:	4b14      	ldr	r3, [pc, #80]	; (768 <_mci_sync_init+0x64>)
     718:	4798      	blx	r3

	mci_dev->hw = hw;
     71a:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
     71c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
     720:	f043 0301 	orr.w	r3, r3, #1
     724:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
     728:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
     72c:	f013 0f01 	tst.w	r3, #1
     730:	d1fa      	bne.n	728 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
     732:	230e      	movs	r3, #14
     734:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
     738:	230f      	movs	r3, #15
     73a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
     73e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     740:	b29b      	uxth	r3, r3
     742:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     746:	ea6f 2343 	mvn.w	r3, r3, lsl #9
     74a:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
     74c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
     74e:	b29b      	uxth	r3, r3
     750:	ea6f 2393 	mvn.w	r3, r3, lsr #10
     754:	ea6f 2383 	mvn.w	r3, r3, lsl #10
     758:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
     75a:	2000      	movs	r0, #0
     75c:	bd38      	pop	{r3, r4, r5, pc}
     75e:	2000      	movs	r0, #0
     760:	e7d7      	b.n	712 <_mci_sync_init+0xe>
     762:	bf00      	nop
     764:	00004a60 	.word	0x00004a60
     768:	000005b5 	.word	0x000005b5

0000076c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     76c:	b470      	push	{r4, r5, r6}
     76e:	b089      	sub	sp, #36	; 0x24
     770:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     772:	466c      	mov	r4, sp
     774:	4d0d      	ldr	r5, [pc, #52]	; (7ac <_sercom_get_hardware_index+0x40>)
     776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     77a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     77e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     782:	9b00      	ldr	r3, [sp, #0]
     784:	42b3      	cmp	r3, r6
     786:	d00d      	beq.n	7a4 <_sercom_get_hardware_index+0x38>
     788:	4631      	mov	r1, r6
     78a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     78c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     78e:	f853 2b04 	ldr.w	r2, [r3], #4
     792:	428a      	cmp	r2, r1
     794:	d007      	beq.n	7a6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     796:	3001      	adds	r0, #1
     798:	2808      	cmp	r0, #8
     79a:	d1f8      	bne.n	78e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     79c:	2000      	movs	r0, #0
}
     79e:	b009      	add	sp, #36	; 0x24
     7a0:	bc70      	pop	{r4, r5, r6}
     7a2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7a4:	2000      	movs	r0, #0
			return i;
     7a6:	b2c0      	uxtb	r0, r0
     7a8:	e7f9      	b.n	79e <_sercom_get_hardware_index+0x32>
     7aa:	bf00      	nop
     7ac:	00004a78 	.word	0x00004a78

000007b0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     7b0:	b510      	push	{r4, lr}
     7b2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     7b4:	4b41      	ldr	r3, [pc, #260]	; (8bc <_usart_init+0x10c>)
     7b6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     7b8:	2800      	cmp	r0, #0
     7ba:	d05c      	beq.n	876 <_usart_init+0xc6>
     7bc:	2802      	cmp	r0, #2
     7be:	d05c      	beq.n	87a <_usart_init+0xca>
	ASSERT(false);
     7c0:	f240 2247 	movw	r2, #583	; 0x247
     7c4:	493e      	ldr	r1, [pc, #248]	; (8c0 <_usart_init+0x110>)
     7c6:	2000      	movs	r0, #0
     7c8:	4b3e      	ldr	r3, [pc, #248]	; (8c4 <_usart_init+0x114>)
     7ca:	4798      	blx	r3
	return 0;
     7cc:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     7ce:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     7d0:	f013 0f01 	tst.w	r3, #1
     7d4:	d122      	bne.n	81c <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     7d6:	004b      	lsls	r3, r1, #1
     7d8:	185a      	adds	r2, r3, r1
     7da:	4b3b      	ldr	r3, [pc, #236]	; (8c8 <_usart_init+0x118>)
     7dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     7e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     7e2:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7e6:	69e3      	ldr	r3, [r4, #28]
     7e8:	f013 0f03 	tst.w	r3, #3
     7ec:	d1fb      	bne.n	7e6 <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     7ee:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     7f0:	f013 0f02 	tst.w	r3, #2
     7f4:	d00b      	beq.n	80e <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     7f6:	6823      	ldr	r3, [r4, #0]
     7f8:	f023 0302 	bic.w	r3, r3, #2
     7fc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7fe:	69e3      	ldr	r3, [r4, #28]
     800:	f013 0f03 	tst.w	r3, #3
     804:	d1fb      	bne.n	7fe <_usart_init+0x4e>
     806:	69e3      	ldr	r3, [r4, #28]
     808:	f013 0f02 	tst.w	r3, #2
     80c:	d1fb      	bne.n	806 <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     80e:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     812:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     814:	69e3      	ldr	r3, [r4, #28]
     816:	f013 0f03 	tst.w	r3, #3
     81a:	d1fb      	bne.n	814 <_usart_init+0x64>
     81c:	69e3      	ldr	r3, [r4, #28]
     81e:	f013 0f01 	tst.w	r3, #1
     822:	d1fb      	bne.n	81c <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     824:	460a      	mov	r2, r1
     826:	004b      	lsls	r3, r1, #1
     828:	440b      	add	r3, r1
     82a:	4927      	ldr	r1, [pc, #156]	; (8c8 <_usart_init+0x118>)
     82c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
     830:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     832:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     834:	69e3      	ldr	r3, [r4, #28]
     836:	f013 0f03 	tst.w	r3, #3
     83a:	d1fb      	bne.n	834 <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     83c:	0053      	lsls	r3, r2, #1
     83e:	1899      	adds	r1, r3, r2
     840:	4b21      	ldr	r3, [pc, #132]	; (8c8 <_usart_init+0x118>)
     842:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     848:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     84a:	69e3      	ldr	r3, [r4, #28]
     84c:	f013 0f1f 	tst.w	r3, #31
     850:	d1fb      	bne.n	84a <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     852:	0053      	lsls	r3, r2, #1
     854:	1899      	adds	r1, r3, r2
     856:	4b1c      	ldr	r3, [pc, #112]	; (8c8 <_usart_init+0x118>)
     858:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     85e:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     860:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
     864:	d10b      	bne.n	87e <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     866:	0053      	lsls	r3, r2, #1
     868:	1899      	adds	r1, r3, r2
     86a:	4b17      	ldr	r3, [pc, #92]	; (8c8 <_usart_init+0x118>)
     86c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     870:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     872:	81a3      	strh	r3, [r4, #12]
     874:	e011      	b.n	89a <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     876:	2100      	movs	r1, #0
     878:	e7a9      	b.n	7ce <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
     87a:	2101      	movs	r1, #1
     87c:	e7a7      	b.n	7ce <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     87e:	4b12      	ldr	r3, [pc, #72]	; (8c8 <_usart_init+0x118>)
     880:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     884:	8e18      	ldrh	r0, [r3, #48]	; 0x30
     886:	89a1      	ldrh	r1, [r4, #12]
     888:	f360 010c 	bfi	r1, r0, #0, #13
     88c:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     88e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
     892:	89a3      	ldrh	r3, [r4, #12]
     894:	f361 334f 	bfi	r3, r1, #13, #3
     898:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     89a:	4b0b      	ldr	r3, [pc, #44]	; (8c8 <_usart_init+0x118>)
     89c:	0051      	lsls	r1, r2, #1
     89e:	1888      	adds	r0, r1, r2
     8a0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     8a4:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     8a8:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     8aa:	440a      	add	r2, r1
     8ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     8b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     8b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     8b8:	2000      	movs	r0, #0
     8ba:	bd10      	pop	{r4, pc}
     8bc:	0000076d 	.word	0x0000076d
     8c0:	00004ae0 	.word	0x00004ae0
     8c4:	000005b5 	.word	0x000005b5
     8c8:	00004a78 	.word	0x00004a78

000008cc <_usart_sync_init>:
{
     8cc:	b538      	push	{r3, r4, r5, lr}
     8ce:	460c      	mov	r4, r1
	ASSERT(device);
     8d0:	4605      	mov	r5, r0
     8d2:	22bb      	movs	r2, #187	; 0xbb
     8d4:	4905      	ldr	r1, [pc, #20]	; (8ec <_usart_sync_init+0x20>)
     8d6:	3000      	adds	r0, #0
     8d8:	bf18      	it	ne
     8da:	2001      	movne	r0, #1
     8dc:	4b04      	ldr	r3, [pc, #16]	; (8f0 <_usart_sync_init+0x24>)
     8de:	4798      	blx	r3
	device->hw = hw;
     8e0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     8e2:	4620      	mov	r0, r4
     8e4:	4b03      	ldr	r3, [pc, #12]	; (8f4 <_usart_sync_init+0x28>)
     8e6:	4798      	blx	r3
}
     8e8:	bd38      	pop	{r3, r4, r5, pc}
     8ea:	bf00      	nop
     8ec:	00004ae0 	.word	0x00004ae0
     8f0:	000005b5 	.word	0x000005b5
     8f4:	000007b1 	.word	0x000007b1

000008f8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     8f8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     8fa:	6813      	ldr	r3, [r2, #0]
     8fc:	f043 0302 	orr.w	r3, r3, #2
     900:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     902:	69d3      	ldr	r3, [r2, #28]
     904:	f013 0f03 	tst.w	r3, #3
     908:	d1fb      	bne.n	902 <_usart_sync_enable+0xa>
}
     90a:	4770      	bx	lr

0000090c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     90c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     90e:	6299      	str	r1, [r3, #40]	; 0x28
     910:	4770      	bx	lr

00000912 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     912:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     914:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     916:	b2c0      	uxtb	r0, r0
     918:	4770      	bx	lr

0000091a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     91a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     91c:	7e18      	ldrb	r0, [r3, #24]
}
     91e:	f000 0001 	and.w	r0, r0, #1
     922:	4770      	bx	lr

00000924 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     924:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     926:	7e18      	ldrb	r0, [r3, #24]
}
     928:	f3c0 0040 	ubfx	r0, r0, #1, #1
     92c:	4770      	bx	lr

0000092e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     92e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     930:	7e18      	ldrb	r0, [r3, #24]
}
     932:	f3c0 0080 	ubfx	r0, r0, #2, #1
     936:	4770      	bx	lr

00000938 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
     938:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     93a:	4b05      	ldr	r3, [pc, #20]	; (950 <sd_mmc_init+0x18>)
     93c:	2404      	movs	r4, #4
     93e:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
     940:	24ff      	movs	r4, #255	; 0xff
     942:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
     944:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
     946:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
     948:	635a      	str	r2, [r3, #52]	; 0x34
}
     94a:	f85d 4b04 	ldr.w	r4, [sp], #4
     94e:	4770      	bx	lr
     950:	20000464 	.word	0x20000464

00000954 <start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void start_init(void)
{
     954:	b508      	push	{r3, lr}
	system_init();
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <start_init+0x10>)
     958:	4798      	blx	r3
	stdio_redirect_init();
     95a:	4b03      	ldr	r3, [pc, #12]	; (968 <start_init+0x14>)
     95c:	4798      	blx	r3
	sd_mmc_stack_init();
     95e:	4b03      	ldr	r3, [pc, #12]	; (96c <start_init+0x18>)
     960:	4798      	blx	r3
     962:	bd08      	pop	{r3, pc}
     964:	00000ca9 	.word	0x00000ca9
     968:	00002081 	.word	0x00002081
     96c:	00001ad5 	.word	0x00001ad5

00000970 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     970:	4b10      	ldr	r3, [pc, #64]	; (9b4 <STDIO_IO_PORT_init+0x44>)
     972:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     976:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     97a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     982:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     986:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     98a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     992:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     996:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     99a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     99e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9a2:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9aa:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9ae:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     9b2:	4770      	bx	lr
     9b4:	41008000 	.word	0x41008000

000009b8 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9b8:	4b06      	ldr	r3, [pc, #24]	; (9d4 <STDIO_IO_CLOCK_init+0x1c>)
     9ba:	2240      	movs	r2, #64	; 0x40
     9bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     9c0:	2243      	movs	r2, #67	; 0x43
     9c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     9c6:	4a04      	ldr	r2, [pc, #16]	; (9d8 <STDIO_IO_CLOCK_init+0x20>)
     9c8:	6993      	ldr	r3, [r2, #24]
     9ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     9ce:	6193      	str	r3, [r2, #24]
     9d0:	4770      	bx	lr
     9d2:	bf00      	nop
     9d4:	40001c00 	.word	0x40001c00
     9d8:	40000800 	.word	0x40000800

000009dc <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     9dc:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <STDIO_IO_init+0x18>)
     9e0:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     9e2:	2200      	movs	r2, #0
     9e4:	4904      	ldr	r1, [pc, #16]	; (9f8 <STDIO_IO_init+0x1c>)
     9e6:	4805      	ldr	r0, [pc, #20]	; (9fc <STDIO_IO_init+0x20>)
     9e8:	4b05      	ldr	r3, [pc, #20]	; (a00 <STDIO_IO_init+0x24>)
     9ea:	4798      	blx	r3
	STDIO_IO_PORT_init();
     9ec:	4b05      	ldr	r3, [pc, #20]	; (a04 <STDIO_IO_init+0x28>)
     9ee:	4798      	blx	r3
     9f0:	bd08      	pop	{r3, pc}
     9f2:	bf00      	nop
     9f4:	000009b9 	.word	0x000009b9
     9f8:	41012000 	.word	0x41012000
     9fc:	200046c8 	.word	0x200046c8
     a00:	000004f1 	.word	0x000004f1
     a04:	00000971 	.word	0x00000971

00000a08 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     a08:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0a:	4b72      	ldr	r3, [pc, #456]	; (bd4 <SDHC_IO_BUS_PORT_init+0x1cc>)
     a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     a10:	6099      	str	r1, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a16:	629a      	str	r2, [r3, #40]	; 0x28
     a18:	4d6f      	ldr	r5, [pc, #444]	; (bd8 <SDHC_IO_BUS_PORT_init+0x1d0>)
     a1a:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a1c:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a1e:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
     a22:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     a26:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a2a:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     a2e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a32:	f040 0001 	orr.w	r0, r0, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a36:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a3a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a3e:	f000 000f 	and.w	r0, r0, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a42:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a46:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     a4e:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	629a      	str	r2, [r3, #40]	; 0x28
     a52:	4e62      	ldr	r6, [pc, #392]	; (bdc <SDHC_IO_BUS_PORT_init+0x1d4>)
     a54:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a56:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a58:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
     a5c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     a60:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a64:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     a68:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a6c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a70:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a74:	f893 403a 	ldrb.w	r4, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a78:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a7c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a80:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a84:	f44f 2480 	mov.w	r4, #262144	; 0x40000
     a88:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a8c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a90:	4f53      	ldr	r7, [pc, #332]	; (be0 <SDHC_IO_BUS_PORT_init+0x1d8>)
     a92:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a96:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a9a:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
     a9e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     aa2:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa6:	f893 40d2 	ldrb.w	r4, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     aaa:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     aae:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab2:	f883 40d2 	strb.w	r4, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ab6:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     aba:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     abe:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ac2:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ac6:	f44f 2400 	mov.w	r4, #524288	; 0x80000
     aca:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ace:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ad2:	3704      	adds	r7, #4
     ad4:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ad8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     adc:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
     ae0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     ae4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae8:	f893 40d3 	ldrb.w	r4, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     aec:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af0:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af4:	f883 40d3 	strb.w	r4, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     af8:	f893 40b9 	ldrb.w	r4, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     afc:	f004 040f 	and.w	r4, r4, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b00:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b04:	f883 40b9 	strb.w	r4, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b08:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b10:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b14:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b18:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
     b1c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     b20:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b24:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     b28:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b2c:	f044 0401 	orr.w	r4, r4, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b30:	f883 40d4 	strb.w	r4, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b34:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b38:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b3c:	f044 0408 	orr.w	r4, r4, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b40:	f883 40ba 	strb.w	r4, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b44:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b4c:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b50:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b54:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     b58:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b5c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b60:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b68:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b6c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b70:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b74:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b7c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b80:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b84:	4817      	ldr	r0, [pc, #92]	; (be4 <SDHC_IO_BUS_PORT_init+0x1dc>)
     b86:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     b8a:	4a17      	ldr	r2, [pc, #92]	; (be8 <SDHC_IO_BUS_PORT_init+0x1e0>)
     b8c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b90:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     b94:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b98:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba4:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ba8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bac:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
     bb0:	4a0e      	ldr	r2, [pc, #56]	; (bec <SDHC_IO_BUS_PORT_init+0x1e4>)
     bb2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bb6:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     bba:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bbe:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc2:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     bc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bca:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	gpio_set_pin_function(CARD_DETECT_0, GPIO_PIN_FUNCTION_OFF);
	
	gpio_set_pin_direction(WRITE_PROTECT_0, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(WRITE_PROTECT_0, GPIO_PULL_OFF);
	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);
}
     bce:	bcf0      	pop	{r4, r5, r6, r7}
     bd0:	4770      	bx	lr
     bd2:	bf00      	nop
     bd4:	41008000 	.word	0x41008000
     bd8:	c0000020 	.word	0xc0000020
     bdc:	c0000010 	.word	0xc0000010
     be0:	c0000004 	.word	0xc0000004
     be4:	40020000 	.word	0x40020000
     be8:	c0020010 	.word	0xc0020010
     bec:	c0020020 	.word	0xc0020020

00000bf0 <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     bf0:	4a05      	ldr	r2, [pc, #20]	; (c08 <SDHC_IO_BUS_CLOCK_init+0x18>)
     bf2:	6913      	ldr	r3, [r2, #16]
     bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     bf8:	6113      	str	r3, [r2, #16]
     bfa:	4b04      	ldr	r3, [pc, #16]	; (c0c <SDHC_IO_BUS_CLOCK_init+0x1c>)
     bfc:	2240      	movs	r2, #64	; 0x40
     bfe:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     c06:	4770      	bx	lr
     c08:	40000800 	.word	0x40000800
     c0c:	40001c00 	.word	0x40001c00

00000c10 <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     c10:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <SDHC_IO_BUS_init+0x18>)
     c14:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     c16:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     c1a:	4804      	ldr	r0, [pc, #16]	; (c2c <SDHC_IO_BUS_init+0x1c>)
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <SDHC_IO_BUS_init+0x20>)
     c1e:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     c20:	4b04      	ldr	r3, [pc, #16]	; (c34 <SDHC_IO_BUS_init+0x24>)
     c22:	4798      	blx	r3
     c24:	bd08      	pop	{r3, pc}
     c26:	bf00      	nop
     c28:	00000bf1 	.word	0x00000bf1
     c2c:	200046d8 	.word	0x200046d8
     c30:	000003ed 	.word	0x000003ed
     c34:	00000a09 	.word	0x00000a09

00000c38 <GPIO_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	4b18      	ldr	r3, [pc, #96]	; (c9c <GPIO_init+0x64>)
     c3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     c3e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c42:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     c4a:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     c4e:	4a14      	ldr	r2, [pc, #80]	; (ca0 <GPIO_init+0x68>)
     c50:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c54:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     c58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     c64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c66:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	6299      	str	r1, [r3, #40]	; 0x28
     c6a:	4a0e      	ldr	r2, [pc, #56]	; (ca4 <GPIO_init+0x6c>)
     c6c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c6e:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
	tmp &= ~PORT_PINCFG_PMUXEN;
     c72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c76:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c7a:	2240      	movs	r2, #64	; 0x40
     c7c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c7e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c80:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c84:	629a      	str	r2, [r3, #40]	; 0x28
     c86:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c8a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c8c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
     c98:	4770      	bx	lr
     c9a:	bf00      	nop
     c9c:	41008000 	.word	0x41008000
     ca0:	c0000004 	.word	0xc0000004
     ca4:	c0000800 	.word	0xc0000800

00000ca8 <system_init>:
	gpio_set_pin_function(LED_STATUS, GPIO_PIN_FUNCTION_OFF);
	
}

void system_init(void)
{
     ca8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     caa:	4b07      	ldr	r3, [pc, #28]	; (cc8 <system_init+0x20>)
     cac:	4798      	blx	r3
	init_mcu();

	GPIO_init();
     cae:	4b07      	ldr	r3, [pc, #28]	; (ccc <system_init+0x24>)
     cb0:	4798      	blx	r3
	LIDAR_USART_init();
     cb2:	4b07      	ldr	r3, [pc, #28]	; (cd0 <system_init+0x28>)
     cb4:	4798      	blx	r3
	STDIO_IO_init();
     cb6:	4b07      	ldr	r3, [pc, #28]	; (cd4 <system_init+0x2c>)
     cb8:	4798      	blx	r3
	SDHC_IO_BUS_init();
     cba:	4b07      	ldr	r3, [pc, #28]	; (cd8 <system_init+0x30>)
     cbc:	4798      	blx	r3
	SERVO_PWM_init();
     cbe:	4b07      	ldr	r3, [pc, #28]	; (cdc <system_init+0x34>)
     cc0:	4798      	blx	r3
	LIDAR_PWM_init();
     cc2:	4b07      	ldr	r3, [pc, #28]	; (ce0 <system_init+0x38>)
     cc4:	4798      	blx	r3
     cc6:	bd08      	pop	{r3, pc}
     cc8:	00000621 	.word	0x00000621
     ccc:	00000c39 	.word	0x00000c39
     cd0:	00000ec1 	.word	0x00000ec1
     cd4:	000009dd 	.word	0x000009dd
     cd8:	00000c11 	.word	0x00000c11
     cdc:	00001af1 	.word	0x00001af1
     ce0:	00000ce5 	.word	0x00000ce5

00000ce4 <LIDAR_PWM_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     ce4:	4a3b      	ldr	r2, [pc, #236]	; (dd4 <LIDAR_PWM_init+0xf0>)
     ce6:	69d3      	ldr	r3, [r2, #28]
     ce8:	f043 0320 	orr.w	r3, r3, #32
     cec:	61d3      	str	r3, [r2, #28]
     cee:	2240      	movs	r2, #64	; 0x40
     cf0:	4b39      	ldr	r3, [pc, #228]	; (dd8 <LIDAR_PWM_init+0xf4>)
     cf2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf6:	4b39      	ldr	r3, [pc, #228]	; (ddc <LIDAR_PWM_init+0xf8>)
     cf8:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d00:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d04:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d08:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d0c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d14:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d18:	f44f 7100 	mov.w	r1, #512	; 0x200
     d1c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d20:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
     d24:	f042 0204 	orr.w	r2, r2, #4
     d28:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     d30:	4b2b      	ldr	r3, [pc, #172]	; (de0 <LIDAR_PWM_init+0xfc>)
     d32:	691b      	ldr	r3, [r3, #16]
void LIDAR_PWM_init(void)
{
	LIDAR_PWM_CLOCK_init();
	LIDAR_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     d34:	f013 0f01 	tst.w	r3, #1
     d38:	d11f      	bne.n	d7a <LIDAR_PWM_init+0x96>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d3a:	4a29      	ldr	r2, [pc, #164]	; (de0 <LIDAR_PWM_init+0xfc>)
     d3c:	6913      	ldr	r3, [r2, #16]
     d3e:	f013 0f03 	tst.w	r3, #3
     d42:	d1fb      	bne.n	d3c <LIDAR_PWM_init+0x58>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     d44:	4b26      	ldr	r3, [pc, #152]	; (de0 <LIDAR_PWM_init+0xfc>)
     d46:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     d48:	f013 0f02 	tst.w	r3, #2
     d4c:	d00d      	beq.n	d6a <LIDAR_PWM_init+0x86>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     d4e:	4a24      	ldr	r2, [pc, #144]	; (de0 <LIDAR_PWM_init+0xfc>)
     d50:	6813      	ldr	r3, [r2, #0]
     d52:	f023 0302 	bic.w	r3, r3, #2
     d56:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d58:	6913      	ldr	r3, [r2, #16]
     d5a:	f013 0f03 	tst.w	r3, #3
     d5e:	d1fb      	bne.n	d58 <LIDAR_PWM_init+0x74>
     d60:	4a1f      	ldr	r2, [pc, #124]	; (de0 <LIDAR_PWM_init+0xfc>)
     d62:	6913      	ldr	r3, [r2, #16]
     d64:	f013 0f02 	tst.w	r3, #2
     d68:	d1fb      	bne.n	d62 <LIDAR_PWM_init+0x7e>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     d6a:	2201      	movs	r2, #1
     d6c:	4b1c      	ldr	r3, [pc, #112]	; (de0 <LIDAR_PWM_init+0xfc>)
     d6e:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d70:	461a      	mov	r2, r3
     d72:	6913      	ldr	r3, [r2, #16]
     d74:	f013 0f03 	tst.w	r3, #3
     d78:	d1fb      	bne.n	d72 <LIDAR_PWM_init+0x8e>
     d7a:	4a19      	ldr	r2, [pc, #100]	; (de0 <LIDAR_PWM_init+0xfc>)
     d7c:	6913      	ldr	r3, [r2, #16]
     d7e:	f013 0f01 	tst.w	r3, #1
     d82:	d1fb      	bne.n	d7c <LIDAR_PWM_init+0x98>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     d84:	4a17      	ldr	r2, [pc, #92]	; (de4 <LIDAR_PWM_init+0x100>)
     d86:	4b16      	ldr	r3, [pc, #88]	; (de0 <LIDAR_PWM_init+0xfc>)
     d88:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d8a:	461a      	mov	r2, r3
     d8c:	6913      	ldr	r3, [r2, #16]
     d8e:	f013 0f03 	tst.w	r3, #3
     d92:	d1fb      	bne.n	d8c <LIDAR_PWM_init+0xa8>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
     d94:	4b12      	ldr	r3, [pc, #72]	; (de0 <LIDAR_PWM_init+0xfc>)
     d96:	2200      	movs	r2, #0
     d98:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
     d9a:	22ff      	movs	r2, #255	; 0xff
     d9c:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
     d9e:	2203      	movs	r2, #3
     da0:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     da2:	223c      	movs	r2, #60	; 0x3c
     da4:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     da6:	461a      	mov	r2, r3
     da8:	6913      	ldr	r3, [r2, #16]
     daa:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     dae:	d1fb      	bne.n	da8 <LIDAR_PWM_init+0xc4>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     db0:	2200      	movs	r2, #0
     db2:	4b0b      	ldr	r3, [pc, #44]	; (de0 <LIDAR_PWM_init+0xfc>)
     db4:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     db6:	461a      	mov	r2, r3
     db8:	6913      	ldr	r3, [r2, #16]
     dba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     dbe:	d1fb      	bne.n	db8 <LIDAR_PWM_init+0xd4>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     dc0:	4a07      	ldr	r2, [pc, #28]	; (de0 <LIDAR_PWM_init+0xfc>)
     dc2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     dc4:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     dc8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dca:	6913      	ldr	r3, [r2, #16]
     dcc:	f013 0f03 	tst.w	r3, #3
     dd0:	d1fb      	bne.n	dca <LIDAR_PWM_init+0xe6>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
     dd2:	4770      	bx	lr
     dd4:	40000800 	.word	0x40000800
     dd8:	40001c00 	.word	0x40001c00
     ddc:	41008000 	.word	0x41008000
     de0:	42001400 	.word	0x42001400
     de4:	12000310 	.word	0x12000310

00000de8 <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     de8:	4b19      	ldr	r3, [pc, #100]	; (e50 <LIDAR_PWM_start+0x68>)
     dea:	691b      	ldr	r3, [r3, #16]
/**
  * Starts LiDAR PWM motor
  */ 
void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     dec:	f013 0f01 	tst.w	r3, #1
     df0:	d117      	bne.n	e22 <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     df2:	4a17      	ldr	r2, [pc, #92]	; (e50 <LIDAR_PWM_start+0x68>)
     df4:	6913      	ldr	r3, [r2, #16]
     df6:	f013 0f03 	tst.w	r3, #3
     dfa:	d1fb      	bne.n	df4 <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     dfc:	4b14      	ldr	r3, [pc, #80]	; (e50 <LIDAR_PWM_start+0x68>)
     dfe:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     e00:	f013 0f02 	tst.w	r3, #2
     e04:	d00d      	beq.n	e22 <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     e06:	4a12      	ldr	r2, [pc, #72]	; (e50 <LIDAR_PWM_start+0x68>)
     e08:	6813      	ldr	r3, [r2, #0]
     e0a:	f023 0302 	bic.w	r3, r3, #2
     e0e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e10:	6913      	ldr	r3, [r2, #16]
     e12:	f013 0f03 	tst.w	r3, #3
     e16:	d1fb      	bne.n	e10 <LIDAR_PWM_start+0x28>
     e18:	4a0d      	ldr	r2, [pc, #52]	; (e50 <LIDAR_PWM_start+0x68>)
     e1a:	6913      	ldr	r3, [r2, #16]
     e1c:	f013 0f02 	tst.w	r3, #2
     e20:	d1fb      	bne.n	e1a <LIDAR_PWM_start+0x32>
     e22:	4a0b      	ldr	r2, [pc, #44]	; (e50 <LIDAR_PWM_start+0x68>)
     e24:	6913      	ldr	r3, [r2, #16]
     e26:	f013 0f01 	tst.w	r3, #1
     e2a:	d1fb      	bne.n	e24 <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e2c:	2224      	movs	r2, #36	; 0x24
     e2e:	4b08      	ldr	r3, [pc, #32]	; (e50 <LIDAR_PWM_start+0x68>)
     e30:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e32:	461a      	mov	r2, r3
     e34:	6913      	ldr	r3, [r2, #16]
     e36:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     e3a:	d1fb      	bne.n	e34 <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e3c:	4a04      	ldr	r2, [pc, #16]	; (e50 <LIDAR_PWM_start+0x68>)
     e3e:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     e40:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     e44:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e46:	6913      	ldr	r3, [r2, #16]
     e48:	f013 0f03 	tst.w	r3, #3
     e4c:	d1fb      	bne.n	e46 <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
     e4e:	4770      	bx	lr
     e50:	42001400 	.word	0x42001400

00000e54 <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     e54:	4b19      	ldr	r3, [pc, #100]	; (ebc <LIDAR_PWM_stop+0x68>)
     e56:	691b      	ldr	r3, [r3, #16]
/**
  * Stops LiDAR PWM motor
  */ 
void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     e58:	f013 0f01 	tst.w	r3, #1
     e5c:	d117      	bne.n	e8e <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e5e:	4a17      	ldr	r2, [pc, #92]	; (ebc <LIDAR_PWM_stop+0x68>)
     e60:	6913      	ldr	r3, [r2, #16]
     e62:	f013 0f03 	tst.w	r3, #3
     e66:	d1fb      	bne.n	e60 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e68:	4b14      	ldr	r3, [pc, #80]	; (ebc <LIDAR_PWM_stop+0x68>)
     e6a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     e6c:	f013 0f02 	tst.w	r3, #2
     e70:	d00d      	beq.n	e8e <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     e72:	4a12      	ldr	r2, [pc, #72]	; (ebc <LIDAR_PWM_stop+0x68>)
     e74:	6813      	ldr	r3, [r2, #0]
     e76:	f023 0302 	bic.w	r3, r3, #2
     e7a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e7c:	6913      	ldr	r3, [r2, #16]
     e7e:	f013 0f03 	tst.w	r3, #3
     e82:	d1fb      	bne.n	e7c <LIDAR_PWM_stop+0x28>
     e84:	4a0d      	ldr	r2, [pc, #52]	; (ebc <LIDAR_PWM_stop+0x68>)
     e86:	6913      	ldr	r3, [r2, #16]
     e88:	f013 0f02 	tst.w	r3, #2
     e8c:	d1fb      	bne.n	e86 <LIDAR_PWM_stop+0x32>
     e8e:	4a0b      	ldr	r2, [pc, #44]	; (ebc <LIDAR_PWM_stop+0x68>)
     e90:	6913      	ldr	r3, [r2, #16]
     e92:	f013 0f01 	tst.w	r3, #1
     e96:	d1fb      	bne.n	e90 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e98:	2200      	movs	r2, #0
     e9a:	4b08      	ldr	r3, [pc, #32]	; (ebc <LIDAR_PWM_stop+0x68>)
     e9c:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e9e:	461a      	mov	r2, r3
     ea0:	6913      	ldr	r3, [r2, #16]
     ea2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     ea6:	d1fb      	bne.n	ea0 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     ea8:	4a04      	ldr	r2, [pc, #16]	; (ebc <LIDAR_PWM_stop+0x68>)
     eaa:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     eac:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     eb0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     eb2:	6913      	ldr	r3, [r2, #16]
     eb4:	f013 0f03 	tst.w	r3, #3
     eb8:	d1fb      	bne.n	eb2 <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
     eba:	4770      	bx	lr
     ebc:	42001400 	.word	0x42001400

00000ec0 <LIDAR_USART_init>:

/**
  * Initializes USART for LiDAR
  */ 
void LIDAR_USART_init(void)
{
     ec0:	b510      	push	{r4, lr}
     ec2:	4b1b      	ldr	r3, [pc, #108]	; (f30 <LIDAR_USART_init+0x70>)
     ec4:	2240      	movs	r2, #64	; 0x40
     ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     eca:	2243      	movs	r2, #67	; 0x43
     ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     ed0:	4a18      	ldr	r2, [pc, #96]	; (f34 <LIDAR_USART_init+0x74>)
     ed2:	6953      	ldr	r3, [r2, #20]
     ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     ed8:	6153      	str	r3, [r2, #20]
	LIDAR_USART_CLOCK_init();
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
     eda:	4c17      	ldr	r4, [pc, #92]	; (f38 <LIDAR_USART_init+0x78>)
     edc:	2200      	movs	r2, #0
     ede:	4917      	ldr	r1, [pc, #92]	; (f3c <LIDAR_USART_init+0x7c>)
     ee0:	4620      	mov	r0, r4
     ee2:	4b17      	ldr	r3, [pc, #92]	; (f40 <LIDAR_USART_init+0x80>)
     ee4:	4798      	blx	r3
	usart_sync_enable(&LIDAR_USART);
     ee6:	4620      	mov	r0, r4
     ee8:	4b16      	ldr	r3, [pc, #88]	; (f44 <LIDAR_USART_init+0x84>)
     eea:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eec:	4b16      	ldr	r3, [pc, #88]	; (f48 <LIDAR_USART_init+0x88>)
     eee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     ef2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ef6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     efe:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f02:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f06:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f0a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     f12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f16:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f1e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f22:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f26:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     f2e:	bd10      	pop	{r4, pc}
     f30:	40001c00 	.word	0x40001c00
     f34:	40000800 	.word	0x40000800
     f38:	200046f0 	.word	0x200046f0
     f3c:	40003000 	.word	0x40003000
     f40:	000004f1 	.word	0x000004f1
     f44:	00000539 	.word	0x00000539
     f48:	41008000 	.word	0x41008000

00000f4c <LIDAR_USART_send>:

/**
  * Sends data through USART to LiDAR
  */ 
void LIDAR_USART_send(uint8_t* message, uint16_t length)
{
     f4c:	b530      	push	{r4, r5, lr}
     f4e:	b083      	sub	sp, #12
     f50:	4604      	mov	r4, r0
     f52:	460d      	mov	r5, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
     f54:	a901      	add	r1, sp, #4
     f56:	4805      	ldr	r0, [pc, #20]	; (f6c <LIDAR_USART_send+0x20>)
     f58:	4b05      	ldr	r3, [pc, #20]	; (f70 <LIDAR_USART_send+0x24>)
     f5a:	4798      	blx	r3
	
	io_write(io, message, length);
     f5c:	462a      	mov	r2, r5
     f5e:	4621      	mov	r1, r4
     f60:	9801      	ldr	r0, [sp, #4]
     f62:	4b04      	ldr	r3, [pc, #16]	; (f74 <LIDAR_USART_send+0x28>)
     f64:	4798      	blx	r3
}
     f66:	b003      	add	sp, #12
     f68:	bd30      	pop	{r4, r5, pc}
     f6a:	bf00      	nop
     f6c:	200046f0 	.word	0x200046f0
     f70:	00000565 	.word	0x00000565
     f74:	0000038d 	.word	0x0000038d

00000f78 <LIDAR_USART_read_byte>:
  * Reads received byte from LiDAR through USART
  * 
  * @return uint8_t : received byte
  */ 
uint8_t LIDAR_USART_read_byte(void)
{
     f78:	b500      	push	{lr}
     f7a:	b083      	sub	sp, #12
	uint8_t buf;
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
     f7c:	4669      	mov	r1, sp
     f7e:	4807      	ldr	r0, [pc, #28]	; (f9c <LIDAR_USART_read_byte+0x24>)
     f80:	4b07      	ldr	r3, [pc, #28]	; (fa0 <LIDAR_USART_read_byte+0x28>)
     f82:	4798      	blx	r3
	
	io_read(io, &buf, 1);
     f84:	2201      	movs	r2, #1
     f86:	f10d 0107 	add.w	r1, sp, #7
     f8a:	9800      	ldr	r0, [sp, #0]
     f8c:	4b05      	ldr	r3, [pc, #20]	; (fa4 <LIDAR_USART_read_byte+0x2c>)
     f8e:	4798      	blx	r3
	return buf;
}
     f90:	f89d 0007 	ldrb.w	r0, [sp, #7]
     f94:	b003      	add	sp, #12
     f96:	f85d fb04 	ldr.w	pc, [sp], #4
     f9a:	bf00      	nop
     f9c:	200046f0 	.word	0x200046f0
     fa0:	00000565 	.word	0x00000565
     fa4:	000003bd 	.word	0x000003bd

00000fa8 <LIDAR_menu>:
/**
  * Menu for LiDAR command options in order to test and see printouts for each
  * of the requests and responses
  */ 
void LIDAR_menu(void)
{
     fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fac:	b085      	sub	sp, #20
	uint16_t user_selection = 0;
     fae:	2300      	movs	r3, #0
     fb0:	f8ad 300e 	strh.w	r3, [sp, #14]
	while (1) {
		if (processing)
     fb4:	4e8a      	ldr	r6, [pc, #552]	; (11e0 <LIDAR_menu+0x238>)
			LIDAR_process();
		else {
			printf("%s", lidar_menu_txt);
     fb6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 125c <LIDAR_menu+0x2b4>
     fba:	4f8a      	ldr	r7, [pc, #552]	; (11e4 <LIDAR_menu+0x23c>)
     fbc:	e0e2      	b.n	1184 <LIDAR_menu+0x1dc>
void LIDAR_process(void)
{
	unsigned data_idx;
	
	/* STOP and RESET requests */
	if (lidar_timing) {
     fbe:	4b8a      	ldr	r3, [pc, #552]	; (11e8 <LIDAR_menu+0x240>)
     fc0:	781b      	ldrb	r3, [r3, #0]
     fc2:	b163      	cbz	r3, fde <LIDAR_menu+0x36>
		switch (lidar_request) {
     fc4:	4b89      	ldr	r3, [pc, #548]	; (11ec <LIDAR_menu+0x244>)
     fc6:	781b      	ldrb	r3, [r3, #0]
     fc8:	2b25      	cmp	r3, #37	; 0x25
     fca:	d005      	beq.n	fd8 <LIDAR_menu+0x30>
     fcc:	2b40      	cmp	r3, #64	; 0x40
     fce:	f040 80d9 	bne.w	1184 <LIDAR_menu+0x1dc>
			case LIDAR_REQ_STOP:
				LIDAR_RES_stop();
				break;
			case LIDAR_REQ_RESET:
				LIDAR_RES_reset();
     fd2:	4b87      	ldr	r3, [pc, #540]	; (11f0 <LIDAR_menu+0x248>)
     fd4:	4798      	blx	r3
     fd6:	e0d5      	b.n	1184 <LIDAR_menu+0x1dc>
				LIDAR_RES_stop();
     fd8:	4b86      	ldr	r3, [pc, #536]	; (11f4 <LIDAR_menu+0x24c>)
     fda:	4798      	blx	r3
     fdc:	e0d2      	b.n	1184 <LIDAR_menu+0x1dc>
				break;
		};
		return;
	}
	
	while (!usart_sync_is_rx_not_empty(&LIDAR_USART));
     fde:	4d86      	ldr	r5, [pc, #536]	; (11f8 <LIDAR_menu+0x250>)
     fe0:	4c86      	ldr	r4, [pc, #536]	; (11fc <LIDAR_menu+0x254>)
     fe2:	4628      	mov	r0, r5
     fe4:	47a0      	blx	r4
     fe6:	2800      	cmp	r0, #0
     fe8:	d0fb      	beq.n	fe2 <LIDAR_menu+0x3a>
	
	/* Process response descriptor */
	switch (byte_count) {
     fea:	4b85      	ldr	r3, [pc, #532]	; (1200 <LIDAR_menu+0x258>)
     fec:	681c      	ldr	r4, [r3, #0]
     fee:	2c06      	cmp	r4, #6
     ff0:	d84d      	bhi.n	108e <LIDAR_menu+0xe6>
     ff2:	e8df f004 	tbb	[pc, r4]
     ff6:	0d04      	.short	0x0d04
     ff8:	372b1f16 	.word	0x372b1f16
     ffc:	43          	.byte	0x43
     ffd:	00          	.byte	0x00
		case 0:
			resp_desc.start1 = LIDAR_USART_read_byte();
     ffe:	4b81      	ldr	r3, [pc, #516]	; (1204 <LIDAR_menu+0x25c>)
    1000:	4798      	blx	r3
    1002:	4b81      	ldr	r3, [pc, #516]	; (1208 <LIDAR_menu+0x260>)
    1004:	7018      	strb	r0, [r3, #0]
			byte_count++;
    1006:	4a7e      	ldr	r2, [pc, #504]	; (1200 <LIDAR_menu+0x258>)
    1008:	6813      	ldr	r3, [r2, #0]
    100a:	3301      	adds	r3, #1
    100c:	6013      	str	r3, [r2, #0]
    100e:	e0b9      	b.n	1184 <LIDAR_menu+0x1dc>
			return;
		
		case 1:
			resp_desc.start2 = LIDAR_USART_read_byte();
    1010:	4b7c      	ldr	r3, [pc, #496]	; (1204 <LIDAR_menu+0x25c>)
    1012:	4798      	blx	r3
    1014:	4b7c      	ldr	r3, [pc, #496]	; (1208 <LIDAR_menu+0x260>)
    1016:	7058      	strb	r0, [r3, #1]
			byte_count++;
    1018:	4a79      	ldr	r2, [pc, #484]	; (1200 <LIDAR_menu+0x258>)
    101a:	6813      	ldr	r3, [r2, #0]
    101c:	3301      	adds	r3, #1
    101e:	6013      	str	r3, [r2, #0]
    1020:	e0b0      	b.n	1184 <LIDAR_menu+0x1dc>
			return;
		
		case 2:
			resp_desc.response_info = LIDAR_USART_read_byte();
    1022:	4b78      	ldr	r3, [pc, #480]	; (1204 <LIDAR_menu+0x25c>)
    1024:	4798      	blx	r3
    1026:	4b78      	ldr	r3, [pc, #480]	; (1208 <LIDAR_menu+0x260>)
    1028:	6058      	str	r0, [r3, #4]
			byte_count++;
    102a:	4a75      	ldr	r2, [pc, #468]	; (1200 <LIDAR_menu+0x258>)
    102c:	6813      	ldr	r3, [r2, #0]
    102e:	3301      	adds	r3, #1
    1030:	6013      	str	r3, [r2, #0]
    1032:	e0a7      	b.n	1184 <LIDAR_menu+0x1dc>
			return;
		
		case 3:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    1034:	4b73      	ldr	r3, [pc, #460]	; (1204 <LIDAR_menu+0x25c>)
    1036:	4798      	blx	r3
    1038:	4a73      	ldr	r2, [pc, #460]	; (1208 <LIDAR_menu+0x260>)
    103a:	6853      	ldr	r3, [r2, #4]
    103c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    1040:	6053      	str	r3, [r2, #4]
			byte_count++;
    1042:	4a6f      	ldr	r2, [pc, #444]	; (1200 <LIDAR_menu+0x258>)
    1044:	6813      	ldr	r3, [r2, #0]
    1046:	3301      	adds	r3, #1
    1048:	6013      	str	r3, [r2, #0]
    104a:	e09b      	b.n	1184 <LIDAR_menu+0x1dc>
			return;
		
		case 4:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    104c:	4b6d      	ldr	r3, [pc, #436]	; (1204 <LIDAR_menu+0x25c>)
    104e:	4798      	blx	r3
    1050:	4a6d      	ldr	r2, [pc, #436]	; (1208 <LIDAR_menu+0x260>)
    1052:	6853      	ldr	r3, [r2, #4]
    1054:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1058:	6053      	str	r3, [r2, #4]
			byte_count++;
    105a:	4a69      	ldr	r2, [pc, #420]	; (1200 <LIDAR_menu+0x258>)
    105c:	6813      	ldr	r3, [r2, #0]
    105e:	3301      	adds	r3, #1
    1060:	6013      	str	r3, [r2, #0]
    1062:	e08f      	b.n	1184 <LIDAR_menu+0x1dc>
			return;
		
		case 5:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    1064:	4b67      	ldr	r3, [pc, #412]	; (1204 <LIDAR_menu+0x25c>)
    1066:	4798      	blx	r3
    1068:	4a67      	ldr	r2, [pc, #412]	; (1208 <LIDAR_menu+0x260>)
    106a:	6853      	ldr	r3, [r2, #4]
    106c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    1070:	6053      	str	r3, [r2, #4]
			byte_count++;
    1072:	4a63      	ldr	r2, [pc, #396]	; (1200 <LIDAR_menu+0x258>)
    1074:	6813      	ldr	r3, [r2, #0]
    1076:	3301      	adds	r3, #1
    1078:	6013      	str	r3, [r2, #0]
    107a:	e083      	b.n	1184 <LIDAR_menu+0x1dc>
			return;
		
		case 6:
			resp_desc.data_type = LIDAR_USART_read_byte();
    107c:	4b61      	ldr	r3, [pc, #388]	; (1204 <LIDAR_menu+0x25c>)
    107e:	4798      	blx	r3
    1080:	4b61      	ldr	r3, [pc, #388]	; (1208 <LIDAR_menu+0x260>)
    1082:	7218      	strb	r0, [r3, #8]
			byte_count++;
    1084:	4a5e      	ldr	r2, [pc, #376]	; (1200 <LIDAR_menu+0x258>)
    1086:	6813      	ldr	r3, [r2, #0]
    1088:	3301      	adds	r3, #1
    108a:	6013      	str	r3, [r2, #0]
    108c:	e07a      	b.n	1184 <LIDAR_menu+0x1dc>
			return;
		
        /* Process response data packets */
		default:
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    108e:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    1090:	4b5c      	ldr	r3, [pc, #368]	; (1204 <LIDAR_menu+0x25c>)
    1092:	4798      	blx	r3
    1094:	4b5d      	ldr	r3, [pc, #372]	; (120c <LIDAR_menu+0x264>)
    1096:	5518      	strb	r0, [r3, r4]
			if (lidar_request == LIDAR_REQ_EXPRESS_SCAN) {
    1098:	4b54      	ldr	r3, [pc, #336]	; (11ec <LIDAR_menu+0x244>)
    109a:	7819      	ldrb	r1, [r3, #0]
    109c:	2982      	cmp	r1, #130	; 0x82
    109e:	d016      	beq.n	10ce <LIDAR_menu+0x126>
						byte_count--;
						return;
					}
				}
			}
			byte_count++;
    10a0:	4b57      	ldr	r3, [pc, #348]	; (1200 <LIDAR_menu+0x258>)
    10a2:	681a      	ldr	r2, [r3, #0]
    10a4:	3201      	adds	r2, #1
    10a6:	601a      	str	r2, [r3, #0]
	};
	
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    10a8:	4b57      	ldr	r3, [pc, #348]	; (1208 <LIDAR_menu+0x260>)
    10aa:	685b      	ldr	r3, [r3, #4]
    10ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    10b0:	3307      	adds	r3, #7
    10b2:	429a      	cmp	r2, r3
    10b4:	d166      	bne.n	1184 <LIDAR_menu+0x1dc>
		switch(lidar_request) {
    10b6:	2950      	cmp	r1, #80	; 0x50
    10b8:	d055      	beq.n	1166 <LIDAR_menu+0x1be>
    10ba:	d932      	bls.n	1122 <LIDAR_menu+0x17a>
    10bc:	2959      	cmp	r1, #89	; 0x59
    10be:	d059      	beq.n	1174 <LIDAR_menu+0x1cc>
    10c0:	2982      	cmp	r1, #130	; 0x82
    10c2:	d018      	beq.n	10f6 <LIDAR_menu+0x14e>
    10c4:	2952      	cmp	r1, #82	; 0x52
    10c6:	d15d      	bne.n	1184 <LIDAR_menu+0x1dc>
			case LIDAR_REQ_GET_INFO:
				LIDAR_RES_get_info();
				break;

			case LIDAR_REQ_GET_HEALTH:
				LIDAR_RES_get_health();
    10c8:	4b51      	ldr	r3, [pc, #324]	; (1210 <LIDAR_menu+0x268>)
    10ca:	4798      	blx	r3
    10cc:	e04d      	b.n	116a <LIDAR_menu+0x1c2>
                if (data_idx == 0) { 
    10ce:	b92c      	cbnz	r4, 10dc <LIDAR_menu+0x134>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    10d0:	4b4e      	ldr	r3, [pc, #312]	; (120c <LIDAR_menu+0x264>)
    10d2:	781b      	ldrb	r3, [r3, #0]
    10d4:	091b      	lsrs	r3, r3, #4
    10d6:	2b0a      	cmp	r3, #10
    10d8:	d154      	bne.n	1184 <LIDAR_menu+0x1dc>
    10da:	e001      	b.n	10e0 <LIDAR_menu+0x138>
				else if (data_idx == 1) {
    10dc:	2c01      	cmp	r4, #1
    10de:	d016      	beq.n	110e <LIDAR_menu+0x166>
			byte_count++;
    10e0:	4b47      	ldr	r3, [pc, #284]	; (1200 <LIDAR_menu+0x258>)
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	3201      	adds	r2, #1
    10e6:	601a      	str	r2, [r3, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    10e8:	4b47      	ldr	r3, [pc, #284]	; (1208 <LIDAR_menu+0x260>)
    10ea:	685b      	ldr	r3, [r3, #4]
    10ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    10f0:	3307      	adds	r3, #7
    10f2:	429a      	cmp	r2, r3
    10f4:	d146      	bne.n	1184 <LIDAR_menu+0x1dc>
				LIDAR_RES_express_scan();
    10f6:	4b47      	ldr	r3, [pc, #284]	; (1214 <LIDAR_menu+0x26c>)
    10f8:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    10fa:	4b47      	ldr	r3, [pc, #284]	; (1218 <LIDAR_menu+0x270>)
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1102:	d33f      	bcc.n	1184 <LIDAR_menu+0x1dc>
					LIDAR_PWM_stop();
    1104:	4b45      	ldr	r3, [pc, #276]	; (121c <LIDAR_menu+0x274>)
    1106:	4798      	blx	r3
					LIDAR_REQ_stop();
    1108:	4b45      	ldr	r3, [pc, #276]	; (1220 <LIDAR_menu+0x278>)
    110a:	4798      	blx	r3
    110c:	e02d      	b.n	116a <LIDAR_menu+0x1c2>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    110e:	4b3f      	ldr	r3, [pc, #252]	; (120c <LIDAR_menu+0x264>)
    1110:	785b      	ldrb	r3, [r3, #1]
    1112:	091b      	lsrs	r3, r3, #4
    1114:	2b05      	cmp	r3, #5
    1116:	d0e3      	beq.n	10e0 <LIDAR_menu+0x138>
						byte_count--;
    1118:	4a39      	ldr	r2, [pc, #228]	; (1200 <LIDAR_menu+0x258>)
    111a:	6813      	ldr	r3, [r2, #0]
    111c:	3b01      	subs	r3, #1
    111e:	6013      	str	r3, [r2, #0]
    1120:	e030      	b.n	1184 <LIDAR_menu+0x1dc>
		switch(lidar_request) {
    1122:	3920      	subs	r1, #32
    1124:	2901      	cmp	r1, #1
    1126:	d82d      	bhi.n	1184 <LIDAR_menu+0x1dc>
				LIDAR_RES_scan();
    1128:	4b3e      	ldr	r3, [pc, #248]	; (1224 <LIDAR_menu+0x27c>)
    112a:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    112c:	4b3a      	ldr	r3, [pc, #232]	; (1218 <LIDAR_menu+0x270>)
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1134:	d326      	bcc.n	1184 <LIDAR_menu+0x1dc>
					LIDAR_PWM_stop();
    1136:	4b39      	ldr	r3, [pc, #228]	; (121c <LIDAR_menu+0x274>)
    1138:	4798      	blx	r3
					LIDAR_REQ_stop();
    113a:	4b39      	ldr	r3, [pc, #228]	; (1220 <LIDAR_menu+0x278>)
    113c:	4798      	blx	r3
    113e:	4c3a      	ldr	r4, [pc, #232]	; (1228 <LIDAR_menu+0x280>)
    1140:	f504 5bc0 	add.w	fp, r4, #6144	; 0x1800
  *	Prints scan data
  */ 
void LIDAR_print_scans(void) 
{
	int i;
	for (i=0; i<MAX_SCANS; i++) {
    1144:	2500      	movs	r5, #0
		printf("{\"S[%04u]\":{\"Q\":%u,\"A\":%u,\"D\"%u}}\r\n",
    1146:	f8df a118 	ldr.w	sl, [pc, #280]	; 1260 <LIDAR_menu+0x2b8>
    114a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 123c <LIDAR_menu+0x294>
    114e:	8863      	ldrh	r3, [r4, #2]
    1150:	7822      	ldrb	r2, [r4, #0]
    1152:	88a1      	ldrh	r1, [r4, #4]
    1154:	9100      	str	r1, [sp, #0]
    1156:	4629      	mov	r1, r5
    1158:	4650      	mov	r0, sl
    115a:	47c8      	blx	r9
	for (i=0; i<MAX_SCANS; i++) {
    115c:	3501      	adds	r5, #1
    115e:	3406      	adds	r4, #6
    1160:	455c      	cmp	r4, fp
    1162:	d1f4      	bne.n	114e <LIDAR_menu+0x1a6>
    1164:	e001      	b.n	116a <LIDAR_menu+0x1c2>
				LIDAR_RES_get_info();
    1166:	4b31      	ldr	r3, [pc, #196]	; (122c <LIDAR_menu+0x284>)
    1168:	4798      	blx	r3
		byte_count = 0;
    116a:	2300      	movs	r3, #0
    116c:	4a24      	ldr	r2, [pc, #144]	; (1200 <LIDAR_menu+0x258>)
    116e:	6013      	str	r3, [r2, #0]
		processing = 0;
    1170:	7033      	strb	r3, [r6, #0]
    1172:	e007      	b.n	1184 <LIDAR_menu+0x1dc>
				LIDAR_RES_get_samplerate();
    1174:	4b2e      	ldr	r3, [pc, #184]	; (1230 <LIDAR_menu+0x288>)
    1176:	4798      	blx	r3
    1178:	e7f7      	b.n	116a <LIDAR_menu+0x1c2>
				fflush(stdin);
    117a:	4b2e      	ldr	r3, [pc, #184]	; (1234 <LIDAR_menu+0x28c>)
    117c:	681b      	ldr	r3, [r3, #0]
    117e:	6858      	ldr	r0, [r3, #4]
    1180:	4b2d      	ldr	r3, [pc, #180]	; (1238 <LIDAR_menu+0x290>)
    1182:	4798      	blx	r3
		if (processing)
    1184:	7833      	ldrb	r3, [r6, #0]
    1186:	2b00      	cmp	r3, #0
    1188:	f47f af19 	bne.w	fbe <LIDAR_menu+0x16>
			printf("%s", lidar_menu_txt);
    118c:	4641      	mov	r1, r8
    118e:	4638      	mov	r0, r7
    1190:	4b2a      	ldr	r3, [pc, #168]	; (123c <LIDAR_menu+0x294>)
    1192:	4798      	blx	r3
			if (scanf("%hx", &user_selection) == 0) {
    1194:	f10d 010e 	add.w	r1, sp, #14
    1198:	4829      	ldr	r0, [pc, #164]	; (1240 <LIDAR_menu+0x298>)
    119a:	4b2a      	ldr	r3, [pc, #168]	; (1244 <LIDAR_menu+0x29c>)
    119c:	4798      	blx	r3
    119e:	2800      	cmp	r0, #0
    11a0:	d0eb      	beq.n	117a <LIDAR_menu+0x1d2>
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    11a2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    11a6:	4828      	ldr	r0, [pc, #160]	; (1248 <LIDAR_menu+0x2a0>)
    11a8:	4b24      	ldr	r3, [pc, #144]	; (123c <LIDAR_menu+0x294>)
    11aa:	4798      	blx	r3
			switch (user_selection) {
    11ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    11b0:	3b01      	subs	r3, #1
    11b2:	2b0a      	cmp	r3, #10
    11b4:	f200 809c 	bhi.w	12f0 <LIDAR_menu+0x348>
    11b8:	e8df f003 	tbb	[pc, r3]
    11bc:	5a540c06 	.word	0x5a540c06
    11c0:	7a726a62 	.word	0x7a726a62
    11c4:	8a82      	.short	0x8a82
    11c6:	92          	.byte	0x92
    11c7:	00          	.byte	0x00
					printf("\r\nReturning to main menu\r\n");
    11c8:	4820      	ldr	r0, [pc, #128]	; (124c <LIDAR_menu+0x2a4>)
    11ca:	4b21      	ldr	r3, [pc, #132]	; (1250 <LIDAR_menu+0x2a8>)
    11cc:	4798      	blx	r3
}
    11ce:	b005      	add	sp, #20
    11d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					printf("\r\nStarting LiDAR motor\r\n");
    11d4:	481f      	ldr	r0, [pc, #124]	; (1254 <LIDAR_menu+0x2ac>)
    11d6:	4b1e      	ldr	r3, [pc, #120]	; (1250 <LIDAR_menu+0x2a8>)
    11d8:	4798      	blx	r3
					LIDAR_PWM_start();
    11da:	4b1f      	ldr	r3, [pc, #124]	; (1258 <LIDAR_menu+0x2b0>)
    11dc:	4798      	blx	r3
					break;
    11de:	e7d1      	b.n	1184 <LIDAR_menu+0x1dc>
    11e0:	20000520 	.word	0x20000520
    11e4:	00004b20 	.word	0x00004b20
    11e8:	200046fd 	.word	0x200046fd
    11ec:	20000528 	.word	0x20000528
    11f0:	000016c1 	.word	0x000016c1
    11f4:	00001691 	.word	0x00001691
    11f8:	200046f0 	.word	0x200046f0
    11fc:	0000058d 	.word	0x0000058d
    1200:	20000524 	.word	0x20000524
    1204:	00000f79 	.word	0x00000f79
    1208:	20004534 	.word	0x20004534
    120c:	200004a0 	.word	0x200004a0
    1210:	0000191d 	.word	0x0000191d
    1214:	00001795 	.word	0x00001795
    1218:	20000530 	.word	0x20000530
    121c:	00000e55 	.word	0x00000e55
    1220:	00001361 	.word	0x00001361
    1224:	000016f1 	.word	0x000016f1
    1228:	20000534 	.word	0x20000534
    122c:	0000188d 	.word	0x0000188d
    1230:	0000197d 	.word	0x0000197d
    1234:	2000026c 	.word	0x2000026c
    1238:	00002a91 	.word	0x00002a91
    123c:	00002e31 	.word	0x00002e31
    1240:	00004b24 	.word	0x00004b24
    1244:	00002f49 	.word	0x00002f49
    1248:	00004b28 	.word	0x00004b28
    124c:	00004b44 	.word	0x00004b44
    1250:	00002f19 	.word	0x00002f19
    1254:	00004b60 	.word	0x00004b60
    1258:	00000de9 	.word	0x00000de9
    125c:	20000000 	.word	0x20000000
    1260:	00004afc 	.word	0x00004afc
					printf("\r\nStopping LiDAR motor\r\n");
    1264:	4824      	ldr	r0, [pc, #144]	; (12f8 <LIDAR_menu+0x350>)
    1266:	4b25      	ldr	r3, [pc, #148]	; (12fc <LIDAR_menu+0x354>)
    1268:	4798      	blx	r3
					LIDAR_PWM_stop();
    126a:	4b25      	ldr	r3, [pc, #148]	; (1300 <LIDAR_menu+0x358>)
    126c:	4798      	blx	r3
					break;
    126e:	e789      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRequesting LiDAR stop\r\n");
    1270:	4824      	ldr	r0, [pc, #144]	; (1304 <LIDAR_menu+0x35c>)
    1272:	4b22      	ldr	r3, [pc, #136]	; (12fc <LIDAR_menu+0x354>)
    1274:	4798      	blx	r3
					LIDAR_REQ_stop();
    1276:	4b24      	ldr	r3, [pc, #144]	; (1308 <LIDAR_menu+0x360>)
    1278:	4798      	blx	r3
					processing = 1;
    127a:	2301      	movs	r3, #1
    127c:	7033      	strb	r3, [r6, #0]
					break;
    127e:	e781      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRequesting LiDAR reset\r\n");
    1280:	4822      	ldr	r0, [pc, #136]	; (130c <LIDAR_menu+0x364>)
    1282:	4b1e      	ldr	r3, [pc, #120]	; (12fc <LIDAR_menu+0x354>)
    1284:	4798      	blx	r3
					LIDAR_REQ_reset();
    1286:	4b22      	ldr	r3, [pc, #136]	; (1310 <LIDAR_menu+0x368>)
    1288:	4798      	blx	r3
					processing = 1;
    128a:	2301      	movs	r3, #1
    128c:	7033      	strb	r3, [r6, #0]
					break;
    128e:	e779      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRequesting LiDAR start scan\r\n");
    1290:	4820      	ldr	r0, [pc, #128]	; (1314 <LIDAR_menu+0x36c>)
    1292:	4b1a      	ldr	r3, [pc, #104]	; (12fc <LIDAR_menu+0x354>)
    1294:	4798      	blx	r3
					LIDAR_REQ_scan();
    1296:	4b20      	ldr	r3, [pc, #128]	; (1318 <LIDAR_menu+0x370>)
    1298:	4798      	blx	r3
					processing = 1;
    129a:	2301      	movs	r3, #1
    129c:	7033      	strb	r3, [r6, #0]
					break;
    129e:	e771      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRequesting LiDAR start express scan\r\n");
    12a0:	481e      	ldr	r0, [pc, #120]	; (131c <LIDAR_menu+0x374>)
    12a2:	4b16      	ldr	r3, [pc, #88]	; (12fc <LIDAR_menu+0x354>)
    12a4:	4798      	blx	r3
					LIDAR_REQ_express_scan();
    12a6:	4b1e      	ldr	r3, [pc, #120]	; (1320 <LIDAR_menu+0x378>)
    12a8:	4798      	blx	r3
					processing = 1;
    12aa:	2301      	movs	r3, #1
    12ac:	7033      	strb	r3, [r6, #0]
					break;
    12ae:	e769      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRequesting LiDAR start force scan\r\n");
    12b0:	481c      	ldr	r0, [pc, #112]	; (1324 <LIDAR_menu+0x37c>)
    12b2:	4b12      	ldr	r3, [pc, #72]	; (12fc <LIDAR_menu+0x354>)
    12b4:	4798      	blx	r3
					LIDAR_REQ_force_scan();
    12b6:	4b1c      	ldr	r3, [pc, #112]	; (1328 <LIDAR_menu+0x380>)
    12b8:	4798      	blx	r3
					processing = 1;
    12ba:	2301      	movs	r3, #1
    12bc:	7033      	strb	r3, [r6, #0]
					break;
    12be:	e761      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRetrieving LiDAR info\r\n");
    12c0:	481a      	ldr	r0, [pc, #104]	; (132c <LIDAR_menu+0x384>)
    12c2:	4b0e      	ldr	r3, [pc, #56]	; (12fc <LIDAR_menu+0x354>)
    12c4:	4798      	blx	r3
					LIDAR_REQ_get_info();
    12c6:	4b1a      	ldr	r3, [pc, #104]	; (1330 <LIDAR_menu+0x388>)
    12c8:	4798      	blx	r3
					processing = 1;
    12ca:	2301      	movs	r3, #1
    12cc:	7033      	strb	r3, [r6, #0]
					break;
    12ce:	e759      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRetrieving LiDAR health\r\n");
    12d0:	4818      	ldr	r0, [pc, #96]	; (1334 <LIDAR_menu+0x38c>)
    12d2:	4b0a      	ldr	r3, [pc, #40]	; (12fc <LIDAR_menu+0x354>)
    12d4:	4798      	blx	r3
					LIDAR_REQ_get_health();
    12d6:	4b18      	ldr	r3, [pc, #96]	; (1338 <LIDAR_menu+0x390>)
    12d8:	4798      	blx	r3
					processing = 1;
    12da:	2301      	movs	r3, #1
    12dc:	7033      	strb	r3, [r6, #0]
					break;
    12de:	e751      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nRetrieving LiDAR samplerates\r\n");
    12e0:	4816      	ldr	r0, [pc, #88]	; (133c <LIDAR_menu+0x394>)
    12e2:	4b06      	ldr	r3, [pc, #24]	; (12fc <LIDAR_menu+0x354>)
    12e4:	4798      	blx	r3
					LIDAR_REQ_get_samplerate();
    12e6:	4b16      	ldr	r3, [pc, #88]	; (1340 <LIDAR_menu+0x398>)
    12e8:	4798      	blx	r3
					processing = 1;
    12ea:	2301      	movs	r3, #1
    12ec:	7033      	strb	r3, [r6, #0]
					break;
    12ee:	e749      	b.n	1184 <LIDAR_menu+0x1dc>
					printf("\r\nInvalid option\r\n");
    12f0:	4814      	ldr	r0, [pc, #80]	; (1344 <LIDAR_menu+0x39c>)
    12f2:	4b02      	ldr	r3, [pc, #8]	; (12fc <LIDAR_menu+0x354>)
    12f4:	4798      	blx	r3
					break;
    12f6:	e745      	b.n	1184 <LIDAR_menu+0x1dc>
    12f8:	00004b78 	.word	0x00004b78
    12fc:	00002f19 	.word	0x00002f19
    1300:	00000e55 	.word	0x00000e55
    1304:	00004b90 	.word	0x00004b90
    1308:	00001361 	.word	0x00001361
    130c:	00004bac 	.word	0x00004bac
    1310:	000013c1 	.word	0x000013c1
    1314:	00004bc8 	.word	0x00004bc8
    1318:	00001421 	.word	0x00001421
    131c:	00004be8 	.word	0x00004be8
    1320:	00001481 	.word	0x00001481
    1324:	00004c10 	.word	0x00004c10
    1328:	00001529 	.word	0x00001529
    132c:	00004c38 	.word	0x00004c38
    1330:	00001589 	.word	0x00001589
    1334:	00004c54 	.word	0x00004c54
    1338:	000015e1 	.word	0x000015e1
    133c:	00004c70 	.word	0x00004c70
    1340:	00001639 	.word	0x00001639
    1344:	00004c90 	.word	0x00004c90

00001348 <LIDAR_reset_print_buffer>:

/** 
  * Resets local print buffer.
  */
void LIDAR_reset_print_buffer(void)
{
    1348:	4a04      	ldr	r2, [pc, #16]	; (135c <LIDAR_reset_print_buffer+0x14>)
    134a:	1e53      	subs	r3, r2, #1
    134c:	32ff      	adds	r2, #255	; 0xff
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
    134e:	2100      	movs	r1, #0
    1350:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    1354:	4293      	cmp	r3, r2
    1356:	d1fb      	bne.n	1350 <LIDAR_reset_print_buffer+0x8>
}
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	20004540 	.word	0x20004540

00001360 <LIDAR_REQ_stop>:
{
    1360:	b530      	push	{r4, r5, lr}
    1362:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_STOP;
    1364:	2525      	movs	r5, #37	; 0x25
    1366:	4b0d      	ldr	r3, [pc, #52]	; (139c <LIDAR_REQ_stop+0x3c>)
    1368:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    136a:	2200      	movs	r2, #0
    136c:	4b0c      	ldr	r3, [pc, #48]	; (13a0 <LIDAR_REQ_stop+0x40>)
    136e:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    1370:	4b0c      	ldr	r3, [pc, #48]	; (13a4 <LIDAR_REQ_stop+0x44>)
    1372:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1374:	4c0c      	ldr	r4, [pc, #48]	; (13a8 <LIDAR_REQ_stop+0x48>)
    1376:	9500      	str	r5, [sp, #0]
    1378:	23a5      	movs	r3, #165	; 0xa5
    137a:	4a0c      	ldr	r2, [pc, #48]	; (13ac <LIDAR_REQ_stop+0x4c>)
    137c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1380:	4620      	mov	r0, r4
    1382:	4d0b      	ldr	r5, [pc, #44]	; (13b0 <LIDAR_REQ_stop+0x50>)
    1384:	47a8      	blx	r5
    1386:	b281      	uxth	r1, r0
    1388:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <LIDAR_REQ_stop+0x54>)
    138a:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    138c:	4620      	mov	r0, r4
    138e:	4b0a      	ldr	r3, [pc, #40]	; (13b8 <LIDAR_REQ_stop+0x58>)
    1390:	4798      	blx	r3
		delay_ms(1);
    1392:	2001      	movs	r0, #1
    1394:	4b09      	ldr	r3, [pc, #36]	; (13bc <LIDAR_REQ_stop+0x5c>)
    1396:	4798      	blx	r3
}
    1398:	b003      	add	sp, #12
    139a:	bd30      	pop	{r4, r5, pc}
    139c:	20000528 	.word	0x20000528
    13a0:	20000524 	.word	0x20000524
    13a4:	00001349 	.word	0x00001349
    13a8:	20004540 	.word	0x20004540
    13ac:	00004ca4 	.word	0x00004ca4
    13b0:	000030e5 	.word	0x000030e5
    13b4:	20000522 	.word	0x20000522
    13b8:	00000f4d 	.word	0x00000f4d
    13bc:	0000036d 	.word	0x0000036d

000013c0 <LIDAR_REQ_reset>:
{
    13c0:	b530      	push	{r4, r5, lr}
    13c2:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_RESET;
    13c4:	2540      	movs	r5, #64	; 0x40
    13c6:	4b0d      	ldr	r3, [pc, #52]	; (13fc <LIDAR_REQ_reset+0x3c>)
    13c8:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    13ca:	2200      	movs	r2, #0
    13cc:	4b0c      	ldr	r3, [pc, #48]	; (1400 <LIDAR_REQ_reset+0x40>)
    13ce:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    13d0:	4b0c      	ldr	r3, [pc, #48]	; (1404 <LIDAR_REQ_reset+0x44>)
    13d2:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    13d4:	4c0c      	ldr	r4, [pc, #48]	; (1408 <LIDAR_REQ_reset+0x48>)
    13d6:	9500      	str	r5, [sp, #0]
    13d8:	23a5      	movs	r3, #165	; 0xa5
    13da:	4a0c      	ldr	r2, [pc, #48]	; (140c <LIDAR_REQ_reset+0x4c>)
    13dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    13e0:	4620      	mov	r0, r4
    13e2:	4d0b      	ldr	r5, [pc, #44]	; (1410 <LIDAR_REQ_reset+0x50>)
    13e4:	47a8      	blx	r5
    13e6:	b281      	uxth	r1, r0
    13e8:	4b0a      	ldr	r3, [pc, #40]	; (1414 <LIDAR_REQ_reset+0x54>)
    13ea:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    13ec:	4620      	mov	r0, r4
    13ee:	4b0a      	ldr	r3, [pc, #40]	; (1418 <LIDAR_REQ_reset+0x58>)
    13f0:	4798      	blx	r3
		delay_ms(2);
    13f2:	2002      	movs	r0, #2
    13f4:	4b09      	ldr	r3, [pc, #36]	; (141c <LIDAR_REQ_reset+0x5c>)
    13f6:	4798      	blx	r3
}
    13f8:	b003      	add	sp, #12
    13fa:	bd30      	pop	{r4, r5, pc}
    13fc:	20000528 	.word	0x20000528
    1400:	20000524 	.word	0x20000524
    1404:	00001349 	.word	0x00001349
    1408:	20004540 	.word	0x20004540
    140c:	00004ca4 	.word	0x00004ca4
    1410:	000030e5 	.word	0x000030e5
    1414:	20000522 	.word	0x20000522
    1418:	00000f4d 	.word	0x00000f4d
    141c:	0000036d 	.word	0x0000036d

00001420 <LIDAR_REQ_scan>:
{
    1420:	b530      	push	{r4, r5, lr}
    1422:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_SCAN;
    1424:	2520      	movs	r5, #32
    1426:	4b0d      	ldr	r3, [pc, #52]	; (145c <LIDAR_REQ_scan+0x3c>)
    1428:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    142a:	2300      	movs	r3, #0
    142c:	4a0c      	ldr	r2, [pc, #48]	; (1460 <LIDAR_REQ_scan+0x40>)
    142e:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    1430:	4a0c      	ldr	r2, [pc, #48]	; (1464 <LIDAR_REQ_scan+0x44>)
    1432:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    1434:	4b0c      	ldr	r3, [pc, #48]	; (1468 <LIDAR_REQ_scan+0x48>)
    1436:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1438:	4c0c      	ldr	r4, [pc, #48]	; (146c <LIDAR_REQ_scan+0x4c>)
    143a:	9500      	str	r5, [sp, #0]
    143c:	23a5      	movs	r3, #165	; 0xa5
    143e:	4a0c      	ldr	r2, [pc, #48]	; (1470 <LIDAR_REQ_scan+0x50>)
    1440:	f44f 7180 	mov.w	r1, #256	; 0x100
    1444:	4620      	mov	r0, r4
    1446:	4d0b      	ldr	r5, [pc, #44]	; (1474 <LIDAR_REQ_scan+0x54>)
    1448:	47a8      	blx	r5
    144a:	b281      	uxth	r1, r0
    144c:	4b0a      	ldr	r3, [pc, #40]	; (1478 <LIDAR_REQ_scan+0x58>)
    144e:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1450:	4620      	mov	r0, r4
    1452:	4b0a      	ldr	r3, [pc, #40]	; (147c <LIDAR_REQ_scan+0x5c>)
    1454:	4798      	blx	r3
}
    1456:	b003      	add	sp, #12
    1458:	bd30      	pop	{r4, r5, pc}
    145a:	bf00      	nop
    145c:	20000528 	.word	0x20000528
    1460:	20000524 	.word	0x20000524
    1464:	20000530 	.word	0x20000530
    1468:	00001349 	.word	0x00001349
    146c:	20004540 	.word	0x20004540
    1470:	00004ca4 	.word	0x00004ca4
    1474:	000030e5 	.word	0x000030e5
    1478:	20000522 	.word	0x20000522
    147c:	00000f4d 	.word	0x00000f4d

00001480 <LIDAR_REQ_express_scan>:
{	
    1480:	b530      	push	{r4, r5, lr}
    1482:	b085      	sub	sp, #20
	char working_mode = 0;
    1484:	2300      	movs	r3, #0
    1486:	f88d 300f 	strb.w	r3, [sp, #15]
	char reserved_fields = 0;
    148a:	f88d 300e 	strb.w	r3, [sp, #14]
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_REQ_EXPRESS_SCAN ^ payload_size;
    148e:	2222      	movs	r2, #34	; 0x22
    1490:	f88d 200d 	strb.w	r2, [sp, #13]
	lidar_request = LIDAR_REQ_EXPRESS_SCAN;
    1494:	2582      	movs	r5, #130	; 0x82
    1496:	4a1a      	ldr	r2, [pc, #104]	; (1500 <LIDAR_REQ_express_scan+0x80>)
    1498:	7015      	strb	r5, [r2, #0]
	invalid_exp_scans = 0;
    149a:	4a1a      	ldr	r2, [pc, #104]	; (1504 <LIDAR_REQ_express_scan+0x84>)
    149c:	6013      	str	r3, [r2, #0]
    scan_count = 0;
    149e:	4a1a      	ldr	r2, [pc, #104]	; (1508 <LIDAR_REQ_express_scan+0x88>)
    14a0:	6013      	str	r3, [r2, #0]
	byte_count = 0;
    14a2:	4a1a      	ldr	r2, [pc, #104]	; (150c <LIDAR_REQ_express_scan+0x8c>)
    14a4:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    14a6:	4b1a      	ldr	r3, [pc, #104]	; (1510 <LIDAR_REQ_express_scan+0x90>)
    14a8:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    14aa:	4c1a      	ldr	r4, [pc, #104]	; (1514 <LIDAR_REQ_express_scan+0x94>)
    14ac:	2305      	movs	r3, #5
    14ae:	9301      	str	r3, [sp, #4]
    14b0:	9500      	str	r5, [sp, #0]
    14b2:	23a5      	movs	r3, #165	; 0xa5
    14b4:	4a18      	ldr	r2, [pc, #96]	; (1518 <LIDAR_REQ_express_scan+0x98>)
    14b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    14ba:	4620      	mov	r0, r4
    14bc:	4d17      	ldr	r5, [pc, #92]	; (151c <LIDAR_REQ_express_scan+0x9c>)
    14be:	47a8      	blx	r5
    14c0:	b281      	uxth	r1, r0
    14c2:	4b17      	ldr	r3, [pc, #92]	; (1520 <LIDAR_REQ_express_scan+0xa0>)
    14c4:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    14c6:	4620      	mov	r0, r4
    14c8:	4c16      	ldr	r4, [pc, #88]	; (1524 <LIDAR_REQ_express_scan+0xa4>)
    14ca:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&working_mode, 1);
    14cc:	2101      	movs	r1, #1
    14ce:	f10d 000f 	add.w	r0, sp, #15
    14d2:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14d4:	2101      	movs	r1, #1
    14d6:	f10d 000e 	add.w	r0, sp, #14
    14da:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14dc:	2101      	movs	r1, #1
    14de:	f10d 000e 	add.w	r0, sp, #14
    14e2:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14e4:	2101      	movs	r1, #1
    14e6:	f10d 000e 	add.w	r0, sp, #14
    14ea:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14ec:	2101      	movs	r1, #1
    14ee:	f10d 000e 	add.w	r0, sp, #14
    14f2:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    14f4:	2101      	movs	r1, #1
    14f6:	f10d 000d 	add.w	r0, sp, #13
    14fa:	47a0      	blx	r4
}
    14fc:	b005      	add	sp, #20
    14fe:	bd30      	pop	{r4, r5, pc}
    1500:	20000528 	.word	0x20000528
    1504:	2000052c 	.word	0x2000052c
    1508:	20000530 	.word	0x20000530
    150c:	20000524 	.word	0x20000524
    1510:	00001349 	.word	0x00001349
    1514:	20004540 	.word	0x20004540
    1518:	00004cac 	.word	0x00004cac
    151c:	000030e5 	.word	0x000030e5
    1520:	20000522 	.word	0x20000522
    1524:	00000f4d 	.word	0x00000f4d

00001528 <LIDAR_REQ_force_scan>:
{
    1528:	b530      	push	{r4, r5, lr}
    152a:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_FORCE_SCAN;
    152c:	2521      	movs	r5, #33	; 0x21
    152e:	4b0d      	ldr	r3, [pc, #52]	; (1564 <LIDAR_REQ_force_scan+0x3c>)
    1530:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    1532:	2300      	movs	r3, #0
    1534:	4a0c      	ldr	r2, [pc, #48]	; (1568 <LIDAR_REQ_force_scan+0x40>)
    1536:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    1538:	4a0c      	ldr	r2, [pc, #48]	; (156c <LIDAR_REQ_force_scan+0x44>)
    153a:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    153c:	4b0c      	ldr	r3, [pc, #48]	; (1570 <LIDAR_REQ_force_scan+0x48>)
    153e:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1540:	4c0c      	ldr	r4, [pc, #48]	; (1574 <LIDAR_REQ_force_scan+0x4c>)
    1542:	9500      	str	r5, [sp, #0]
    1544:	23a5      	movs	r3, #165	; 0xa5
    1546:	4a0c      	ldr	r2, [pc, #48]	; (1578 <LIDAR_REQ_force_scan+0x50>)
    1548:	f44f 7180 	mov.w	r1, #256	; 0x100
    154c:	4620      	mov	r0, r4
    154e:	4d0b      	ldr	r5, [pc, #44]	; (157c <LIDAR_REQ_force_scan+0x54>)
    1550:	47a8      	blx	r5
    1552:	b281      	uxth	r1, r0
    1554:	4b0a      	ldr	r3, [pc, #40]	; (1580 <LIDAR_REQ_force_scan+0x58>)
    1556:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1558:	4620      	mov	r0, r4
    155a:	4b0a      	ldr	r3, [pc, #40]	; (1584 <LIDAR_REQ_force_scan+0x5c>)
    155c:	4798      	blx	r3
}
    155e:	b003      	add	sp, #12
    1560:	bd30      	pop	{r4, r5, pc}
    1562:	bf00      	nop
    1564:	20000528 	.word	0x20000528
    1568:	20000524 	.word	0x20000524
    156c:	20000530 	.word	0x20000530
    1570:	00001349 	.word	0x00001349
    1574:	20004540 	.word	0x20004540
    1578:	00004ca4 	.word	0x00004ca4
    157c:	000030e5 	.word	0x000030e5
    1580:	20000522 	.word	0x20000522
    1584:	00000f4d 	.word	0x00000f4d

00001588 <LIDAR_REQ_get_info>:
{
    1588:	b530      	push	{r4, r5, lr}
    158a:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_INFO;
    158c:	2550      	movs	r5, #80	; 0x50
    158e:	4b0c      	ldr	r3, [pc, #48]	; (15c0 <LIDAR_REQ_get_info+0x38>)
    1590:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    1592:	2200      	movs	r2, #0
    1594:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <LIDAR_REQ_get_info+0x3c>)
    1596:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    1598:	4b0b      	ldr	r3, [pc, #44]	; (15c8 <LIDAR_REQ_get_info+0x40>)
    159a:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    159c:	4c0b      	ldr	r4, [pc, #44]	; (15cc <LIDAR_REQ_get_info+0x44>)
    159e:	9500      	str	r5, [sp, #0]
    15a0:	23a5      	movs	r3, #165	; 0xa5
    15a2:	4a0b      	ldr	r2, [pc, #44]	; (15d0 <LIDAR_REQ_get_info+0x48>)
    15a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    15a8:	4620      	mov	r0, r4
    15aa:	4d0a      	ldr	r5, [pc, #40]	; (15d4 <LIDAR_REQ_get_info+0x4c>)
    15ac:	47a8      	blx	r5
    15ae:	b281      	uxth	r1, r0
    15b0:	4b09      	ldr	r3, [pc, #36]	; (15d8 <LIDAR_REQ_get_info+0x50>)
    15b2:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    15b4:	4620      	mov	r0, r4
    15b6:	4b09      	ldr	r3, [pc, #36]	; (15dc <LIDAR_REQ_get_info+0x54>)
    15b8:	4798      	blx	r3
}
    15ba:	b003      	add	sp, #12
    15bc:	bd30      	pop	{r4, r5, pc}
    15be:	bf00      	nop
    15c0:	20000528 	.word	0x20000528
    15c4:	20000524 	.word	0x20000524
    15c8:	00001349 	.word	0x00001349
    15cc:	20004540 	.word	0x20004540
    15d0:	00004ca4 	.word	0x00004ca4
    15d4:	000030e5 	.word	0x000030e5
    15d8:	20000522 	.word	0x20000522
    15dc:	00000f4d 	.word	0x00000f4d

000015e0 <LIDAR_REQ_get_health>:
{
    15e0:	b530      	push	{r4, r5, lr}
    15e2:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_HEALTH;
    15e4:	2552      	movs	r5, #82	; 0x52
    15e6:	4b0c      	ldr	r3, [pc, #48]	; (1618 <LIDAR_REQ_get_health+0x38>)
    15e8:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    15ea:	2200      	movs	r2, #0
    15ec:	4b0b      	ldr	r3, [pc, #44]	; (161c <LIDAR_REQ_get_health+0x3c>)
    15ee:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    15f0:	4b0b      	ldr	r3, [pc, #44]	; (1620 <LIDAR_REQ_get_health+0x40>)
    15f2:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    15f4:	4c0b      	ldr	r4, [pc, #44]	; (1624 <LIDAR_REQ_get_health+0x44>)
    15f6:	9500      	str	r5, [sp, #0]
    15f8:	23a5      	movs	r3, #165	; 0xa5
    15fa:	4a0b      	ldr	r2, [pc, #44]	; (1628 <LIDAR_REQ_get_health+0x48>)
    15fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    1600:	4620      	mov	r0, r4
    1602:	4d0a      	ldr	r5, [pc, #40]	; (162c <LIDAR_REQ_get_health+0x4c>)
    1604:	47a8      	blx	r5
    1606:	b281      	uxth	r1, r0
    1608:	4b09      	ldr	r3, [pc, #36]	; (1630 <LIDAR_REQ_get_health+0x50>)
    160a:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    160c:	4620      	mov	r0, r4
    160e:	4b09      	ldr	r3, [pc, #36]	; (1634 <LIDAR_REQ_get_health+0x54>)
    1610:	4798      	blx	r3
}
    1612:	b003      	add	sp, #12
    1614:	bd30      	pop	{r4, r5, pc}
    1616:	bf00      	nop
    1618:	20000528 	.word	0x20000528
    161c:	20000524 	.word	0x20000524
    1620:	00001349 	.word	0x00001349
    1624:	20004540 	.word	0x20004540
    1628:	00004ca4 	.word	0x00004ca4
    162c:	000030e5 	.word	0x000030e5
    1630:	20000522 	.word	0x20000522
    1634:	00000f4d 	.word	0x00000f4d

00001638 <LIDAR_REQ_get_samplerate>:
{
    1638:	b530      	push	{r4, r5, lr}
    163a:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_SAMPLERATE;
    163c:	2559      	movs	r5, #89	; 0x59
    163e:	4b0c      	ldr	r3, [pc, #48]	; (1670 <LIDAR_REQ_get_samplerate+0x38>)
    1640:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    1642:	2200      	movs	r2, #0
    1644:	4b0b      	ldr	r3, [pc, #44]	; (1674 <LIDAR_REQ_get_samplerate+0x3c>)
    1646:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    1648:	4b0b      	ldr	r3, [pc, #44]	; (1678 <LIDAR_REQ_get_samplerate+0x40>)
    164a:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    164c:	4c0b      	ldr	r4, [pc, #44]	; (167c <LIDAR_REQ_get_samplerate+0x44>)
    164e:	9500      	str	r5, [sp, #0]
    1650:	23a5      	movs	r3, #165	; 0xa5
    1652:	4a0b      	ldr	r2, [pc, #44]	; (1680 <LIDAR_REQ_get_samplerate+0x48>)
    1654:	f44f 7180 	mov.w	r1, #256	; 0x100
    1658:	4620      	mov	r0, r4
    165a:	4d0a      	ldr	r5, [pc, #40]	; (1684 <LIDAR_REQ_get_samplerate+0x4c>)
    165c:	47a8      	blx	r5
    165e:	b281      	uxth	r1, r0
    1660:	4b09      	ldr	r3, [pc, #36]	; (1688 <LIDAR_REQ_get_samplerate+0x50>)
    1662:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1664:	4620      	mov	r0, r4
    1666:	4b09      	ldr	r3, [pc, #36]	; (168c <LIDAR_REQ_get_samplerate+0x54>)
    1668:	4798      	blx	r3
}
    166a:	b003      	add	sp, #12
    166c:	bd30      	pop	{r4, r5, pc}
    166e:	bf00      	nop
    1670:	20000528 	.word	0x20000528
    1674:	20000524 	.word	0x20000524
    1678:	00001349 	.word	0x00001349
    167c:	20004540 	.word	0x20004540
    1680:	00004ca4 	.word	0x00004ca4
    1684:	000030e5 	.word	0x000030e5
    1688:	20000522 	.word	0x20000522
    168c:	00000f4d 	.word	0x00000f4d

00001690 <LIDAR_RES_stop>:

/** 
  * "STOP" request has no response.
  */
void LIDAR_RES_stop(void) 
{
    1690:	b508      	push	{r3, lr}
	if (!lidar_timer) {
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <LIDAR_RES_stop+0x1c>)
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	b103      	cbz	r3, 169a <LIDAR_RES_stop+0xa>
    1698:	bd08      	pop	{r3, pc}
		lidar_timing = 0;
    169a:	4a05      	ldr	r2, [pc, #20]	; (16b0 <LIDAR_RES_stop+0x20>)
    169c:	7013      	strb	r3, [r2, #0]
		processing = 0;
    169e:	4a05      	ldr	r2, [pc, #20]	; (16b4 <LIDAR_RES_stop+0x24>)
    16a0:	7013      	strb	r3, [r2, #0]
		if (DEBUG) {
			if (SYSTICK_EN) 
				printf("lidar_timer = %u\r\nLiDAR stopped\r\n", lidar_timer);
			else 
				printf("LiDAR stopped\r\n");
    16a2:	4805      	ldr	r0, [pc, #20]	; (16b8 <LIDAR_RES_stop+0x28>)
    16a4:	4b05      	ldr	r3, [pc, #20]	; (16bc <LIDAR_RES_stop+0x2c>)
    16a6:	4798      	blx	r3
		}
	}
}
    16a8:	e7f6      	b.n	1698 <LIDAR_RES_stop+0x8>
    16aa:	bf00      	nop
    16ac:	200046fc 	.word	0x200046fc
    16b0:	200046fd 	.word	0x200046fd
    16b4:	20000520 	.word	0x20000520
    16b8:	00004cb4 	.word	0x00004cb4
    16bc:	00002f19 	.word	0x00002f19

000016c0 <LIDAR_RES_reset>:
  *           RP LIDAR System.\r\n
  *           Firmware Ver 1.27 - rc9, HW Ver 5\r\n
  *           Model: 28\r\n
  */
void LIDAR_RES_reset(void) 
{   
    16c0:	b508      	push	{r3, lr}
	if (!lidar_timer) {
    16c2:	4b06      	ldr	r3, [pc, #24]	; (16dc <LIDAR_RES_reset+0x1c>)
    16c4:	781b      	ldrb	r3, [r3, #0]
    16c6:	b103      	cbz	r3, 16ca <LIDAR_RES_reset+0xa>
    16c8:	bd08      	pop	{r3, pc}
		lidar_timing = 0;
    16ca:	4a05      	ldr	r2, [pc, #20]	; (16e0 <LIDAR_RES_reset+0x20>)
    16cc:	7013      	strb	r3, [r2, #0]
		processing = 0;
    16ce:	4a05      	ldr	r2, [pc, #20]	; (16e4 <LIDAR_RES_reset+0x24>)
    16d0:	7013      	strb	r3, [r2, #0]
		if (DEBUG) {
			if (SYSTICK_EN)
				printf("lidar_timer = %u\r\nLiDAR reset\r\n", lidar_timer);
			else
				printf("LiDAR stopped\r\n");
    16d2:	4805      	ldr	r0, [pc, #20]	; (16e8 <LIDAR_RES_reset+0x28>)
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <LIDAR_RES_reset+0x2c>)
    16d6:	4798      	blx	r3
		}
	}
}
    16d8:	e7f6      	b.n	16c8 <LIDAR_RES_reset+0x8>
    16da:	bf00      	nop
    16dc:	200046fc 	.word	0x200046fc
    16e0:	200046fd 	.word	0x200046fd
    16e4:	20000520 	.word	0x20000520
    16e8:	00004cb4 	.word	0x00004cb4
    16ec:	00002f19 	.word	0x00002f19

000016f0 <LIDAR_RES_scan>:
  *						+2		angle_q6[14:7]
  *						+3		distance_q2[7:0]
  *						+4		distance_q2[15:8]
  */
void LIDAR_RES_scan(void) 
{
    16f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* check[0] - start
	   check[1] - ~start
	   check[2] - check	 */
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    16f4:	4a21      	ldr	r2, [pc, #132]	; (177c <LIDAR_RES_scan+0x8c>)
    16f6:	7813      	ldrb	r3, [r2, #0]
    16f8:	7850      	ldrb	r0, [r2, #1]
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    16fa:	7855      	ldrb	r5, [r2, #1]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    16fc:	7891      	ldrb	r1, [r2, #2]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    16fe:	78d4      	ldrb	r4, [r2, #3]
    1700:	7916      	ldrb	r6, [r2, #4]
	
	/* Decrement byte_count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= 5;
    1702:	4f1f      	ldr	r7, [pc, #124]	; (1780 <LIDAR_RES_scan+0x90>)
    1704:	683a      	ldr	r2, [r7, #0]
    1706:	3a05      	subs	r2, #5
    1708:	603a      	str	r2, [r7, #0]
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    170a:	005b      	lsls	r3, r3, #1
    170c:	f003 0306 	and.w	r3, r3, #6
    1710:	f000 0201 	and.w	r2, r0, #1
    1714:	4313      	orrs	r3, r2
	
	/* Checking: check=1, ~start=0, start=1 */
	if (check == 0x5 || check == 0x6) {
    1716:	3b05      	subs	r3, #5
    1718:	b2db      	uxtb	r3, r3
    171a:	2b01      	cmp	r3, #1
    171c:	d906      	bls.n	172c <LIDAR_RES_scan+0x3c>
		scans[scan_count].angle = angle;
		scans[scan_count++].distance = distance;
	}
	
    if (DEBUG)
        if (scan_count % 16 == 0)
    171e:	4b19      	ldr	r3, [pc, #100]	; (1784 <LIDAR_RES_scan+0x94>)
    1720:	6819      	ldr	r1, [r3, #0]
    1722:	f011 0f0f 	tst.w	r1, #15
    1726:	d023      	beq.n	1770 <LIDAR_RES_scan+0x80>
    1728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    172c:	b2ed      	uxtb	r5, r5
    172e:	b2c9      	uxtb	r1, r1
    1730:	b2e4      	uxtb	r4, r4
    1732:	b2f6      	uxtb	r6, r6
		scans[scan_count].quality = DATA_RESPONSE[0] >> 2;
    1734:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1784 <LIDAR_RES_scan+0x94>
    1738:	f8dc 0000 	ldr.w	r0, [ip]
    173c:	4b0f      	ldr	r3, [pc, #60]	; (177c <LIDAR_RES_scan+0x8c>)
    173e:	f893 e000 	ldrb.w	lr, [r3]
    1742:	4b11      	ldr	r3, [pc, #68]	; (1788 <LIDAR_RES_scan+0x98>)
    1744:	0042      	lsls	r2, r0, #1
    1746:	1817      	adds	r7, r2, r0
    1748:	007f      	lsls	r7, r7, #1
    174a:	eb03 0807 	add.w	r8, r3, r7
    174e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    1752:	f803 e007 	strb.w	lr, [r3, r7]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    1756:	01c9      	lsls	r1, r1, #7
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    1758:	eb01 0555 	add.w	r5, r1, r5, lsr #1
		scans[scan_count].angle = angle;
    175c:	f8a8 5002 	strh.w	r5, [r8, #2]
		scans[scan_count++].distance = distance;
    1760:	1c41      	adds	r1, r0, #1
    1762:	f8cc 1000 	str.w	r1, [ip]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    1766:	eb04 2406 	add.w	r4, r4, r6, lsl #8
		scans[scan_count++].distance = distance;
    176a:	f8a8 4004 	strh.w	r4, [r8, #4]
    176e:	e7d6      	b.n	171e <LIDAR_RES_scan+0x2e>
            printf("gathered %0"PRIu32"/%0d scans...\r\n", scan_count, MAX_SCANS);
    1770:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1774:	4805      	ldr	r0, [pc, #20]	; (178c <LIDAR_RES_scan+0x9c>)
    1776:	4b06      	ldr	r3, [pc, #24]	; (1790 <LIDAR_RES_scan+0xa0>)
    1778:	4798      	blx	r3
    else {
	    printf("Invalid response: C=%u, !S=%u, S=%u\r\n",
		        (check >> 3), ((check >> 2) & 0x1), (check & 0x1));
	}
    */
}
    177a:	e7d5      	b.n	1728 <LIDAR_RES_scan+0x38>
    177c:	200004a0 	.word	0x200004a0
    1780:	20000524 	.word	0x20000524
    1784:	20000530 	.word	0x20000530
    1788:	20000534 	.word	0x20000534
    178c:	00004cc4 	.word	0x00004cc4
    1790:	00002e31 	.word	0x00002e31

00001794 <LIDAR_RES_express_scan>:
  *						+2		distance2[6:0], angle_val2[4] (sign)
  *						+3		distance2[14:7]
  *						+4		angle_val2[3:0], angle_val1[3:0]
  */
void LIDAR_RES_express_scan(void) 
{ 
    1794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t calc_checksum;
	uint8_t PAYLOAD_SIZE=84, CABIN_COUNT=16, CABIN_START=4, CABIN_BYTE_COUNT=5;
	uint16_t i, pos;
	
	uint8_t checksum = ((uint8_t)DATA_RESPONSE[1] << 4) | ((uint8_t)DATA_RESPONSE[0] & 0x0F);
    1796:	4b36      	ldr	r3, [pc, #216]	; (1870 <LIDAR_RES_express_scan+0xdc>)
    1798:	785a      	ldrb	r2, [r3, #1]
    179a:	781c      	ldrb	r4, [r3, #0]
    179c:	f004 040f 	and.w	r4, r4, #15
    17a0:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    17a4:	b2e4      	uxtb	r4, r4
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    17a6:	f893 e002 	ldrb.w	lr, [r3, #2]
    17aa:	fa5f fe8e 	uxtb.w	lr, lr
    17ae:	78df      	ldrb	r7, [r3, #3]
    17b0:	b2ff      	uxtb	r7, r7
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    17b2:	78db      	ldrb	r3, [r3, #3]
    17b4:	b2dd      	uxtb	r5, r3
	
    /* Decrement byte count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= PAYLOAD_SIZE;
    17b6:	4a2f      	ldr	r2, [pc, #188]	; (1874 <LIDAR_RES_express_scan+0xe0>)
    17b8:	6813      	ldr	r3, [r2, #0]
    17ba:	3b54      	subs	r3, #84	; 0x54
    17bc:	6013      	str	r3, [r2, #0]
    17be:	2302      	movs	r3, #2
	
	/* Check if data valid */
	calc_checksum = 0;
    17c0:	2200      	movs	r2, #0
	for (i=2; i<PAYLOAD_SIZE; i++)
		calc_checksum ^= DATA_RESPONSE[i];
    17c2:	482b      	ldr	r0, [pc, #172]	; (1870 <LIDAR_RES_express_scan+0xdc>)
    17c4:	5cc1      	ldrb	r1, [r0, r3]
    17c6:	404a      	eors	r2, r1
    17c8:	3301      	adds	r3, #1
	for (i=2; i<PAYLOAD_SIZE; i++)
    17ca:	2b54      	cmp	r3, #84	; 0x54
    17cc:	d1fa      	bne.n	17c4 <LIDAR_RES_express_scan+0x30>
		
	if (checksum != calc_checksum) {
    17ce:	4294      	cmp	r4, r2
    17d0:	d004      	beq.n	17dc <LIDAR_RES_express_scan+0x48>
			printf("First 8: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
					DATA_RESPONSE[0], DATA_RESPONSE[1], DATA_RESPONSE[2], DATA_RESPONSE[3], 
					DATA_RESPONSE[4], DATA_RESPONSE[5], DATA_RESPONSE[6], DATA_RESPONSE[7]);
		}
        */
		invalid_exp_scans++;
    17d2:	4a29      	ldr	r2, [pc, #164]	; (1878 <LIDAR_RES_express_scan+0xe4>)
    17d4:	6813      	ldr	r3, [r2, #0]
    17d6:	3301      	adds	r3, #1
    17d8:	6013      	str	r3, [r2, #0]
		return;
    17da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    17dc:	09ed      	lsrs	r5, r5, #7
    17de:	4b27      	ldr	r3, [pc, #156]	; (187c <LIDAR_RES_express_scan+0xe8>)
    17e0:	681e      	ldr	r6, [r3, #0]
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    17e2:	023c      	lsls	r4, r7, #8
    17e4:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
    17e8:	ea44 040e 	orr.w	r4, r4, lr
    17ec:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    17f0:	4b23      	ldr	r3, [pc, #140]	; (1880 <LIDAR_RES_express_scan+0xec>)
    17f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    17f6:	2105      	movs	r1, #5
	}
	
	for (i=0; i<CABIN_COUNT; i++) {
		pos = CABIN_START+(CABIN_BYTE_COUNT*i);
		cabins[scan_count].S = S_flag;
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    17f8:	4a1d      	ldr	r2, [pc, #116]	; (1870 <LIDAR_RES_express_scan+0xdc>)
		cabins[scan_count].S = S_flag;
    17fa:	701d      	strb	r5, [r3, #0]
    17fc:	f101 3eff 	add.w	lr, r1, #4294967295
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    1800:	f812 700e 	ldrb.w	r7, [r2, lr]
											((uint8_t)DATA_RESPONSE[pos+1] << 7);
    1804:	5c50      	ldrb	r0, [r2, r1]
    1806:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    1808:	ea40 0057 	orr.w	r0, r0, r7, lsr #1
    180c:	8098      	strh	r0, [r3, #4]
    180e:	1c4f      	adds	r7, r1, #1
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    1810:	f812 c007 	ldrb.w	ip, [r2, r7]
    1814:	1c88      	adds	r0, r1, #2
											((uint8_t)DATA_RESPONSE[pos+3] << 7);
    1816:	5c10      	ldrb	r0, [r2, r0]
    1818:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    181a:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    181e:	80d8      	strh	r0, [r3, #6]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    1820:	f812 000e 	ldrb.w	r0, [r2, lr]
    1824:	f101 0e03 	add.w	lr, r1, #3
											((uint8_t)DATA_RESPONSE[pos+4] >> 4);
    1828:	f812 c00e 	ldrb.w	ip, [r2, lr]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    182c:	0100      	lsls	r0, r0, #4
    182e:	f000 0010 	and.w	r0, r0, #16
    1832:	ea40 101c 	orr.w	r0, r0, ip, lsr #4
    1836:	7058      	strb	r0, [r3, #1]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    1838:	5dd0      	ldrb	r0, [r2, r7]
											(DATA_RESPONSE[pos+4] & 0x0F);
    183a:	f812 700e 	ldrb.w	r7, [r2, lr]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    183e:	0100      	lsls	r0, r0, #4
    1840:	f000 0010 	and.w	r0, r0, #16
											(DATA_RESPONSE[pos+4] & 0x0F);
    1844:	f007 070f 	and.w	r7, r7, #15
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    1848:	4338      	orrs	r0, r7
    184a:	7098      	strb	r0, [r3, #2]
		cabins[scan_count++].start_angle = start_angle;
    184c:	811c      	strh	r4, [r3, #8]
    184e:	330a      	adds	r3, #10
    1850:	3105      	adds	r1, #5
	for (i=0; i<CABIN_COUNT; i++) {
    1852:	2955      	cmp	r1, #85	; 0x55
    1854:	d1d1      	bne.n	17fa <LIDAR_RES_express_scan+0x66>
    1856:	f106 0210 	add.w	r2, r6, #16
    185a:	4b08      	ldr	r3, [pc, #32]	; (187c <LIDAR_RES_express_scan+0xe8>)
    185c:	601a      	str	r2, [r3, #0]
	}
	
    if (DEBUG)
	    printf("%0"PRIu32" invalid scans -- gathered %0"PRIu32"/%0d scans...\r\n", 
    185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1862:	4905      	ldr	r1, [pc, #20]	; (1878 <LIDAR_RES_express_scan+0xe4>)
    1864:	6809      	ldr	r1, [r1, #0]
    1866:	4807      	ldr	r0, [pc, #28]	; (1884 <LIDAR_RES_express_scan+0xf0>)
    1868:	4c07      	ldr	r4, [pc, #28]	; (1888 <LIDAR_RES_express_scan+0xf4>)
    186a:	47a0      	blx	r4
    186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    186e:	bf00      	nop
    1870:	200004a0 	.word	0x200004a0
    1874:	20000524 	.word	0x20000524
    1878:	2000052c 	.word	0x2000052c
    187c:	20000530 	.word	0x20000530
    1880:	20001d34 	.word	0x20001d34
    1884:	00004ce4 	.word	0x00004ce4
    1888:	00002e31 	.word	0x00002e31

0000188c <LIDAR_RES_get_info>:
  *						+19 	serial_number[15]		
  * When converting serial_number to text from hex, the least significant byte 
  *	prints first.
  */
void LIDAR_RES_get_info(void) 
{	
    188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1890:	b085      	sub	sp, #20
	uint8_t model_id 		 = DATA_RESPONSE[0];
    1892:	4b1a      	ldr	r3, [pc, #104]	; (18fc <LIDAR_RES_get_info+0x70>)
    1894:	f893 b000 	ldrb.w	fp, [r3]
    1898:	fa5f fb8b 	uxtb.w	fp, fp
	uint8_t firmware_minor	 = DATA_RESPONSE[1];
    189c:	f893 a001 	ldrb.w	sl, [r3, #1]
    18a0:	fa5f fa8a 	uxtb.w	sl, sl
	uint8_t firmware_major	 = DATA_RESPONSE[2];
    18a4:	f893 9002 	ldrb.w	r9, [r3, #2]
    18a8:	fa5f f989 	uxtb.w	r9, r9
	uint8_t hardware_version = DATA_RESPONSE[3];
    18ac:	f893 8003 	ldrb.w	r8, [r3, #3]
    18b0:	fa5f f888 	uxtb.w	r8, r8
	char serial_number[16]	 = {0};
    18b4:	2300      	movs	r3, #0
    18b6:	9300      	str	r3, [sp, #0]
    18b8:	9301      	str	r3, [sp, #4]
    18ba:	9302      	str	r3, [sp, #8]
    18bc:	9303      	str	r3, [sp, #12]
    18be:	2413      	movs	r4, #19
	
	/** Get hexadecimal string output */
	int i, j=0;
	for (i=15; i>=0; i--) {
		sprintf(&serial_number[j++], "%02X", DATA_RESPONSE[i+4]);
    18c0:	4f0e      	ldr	r7, [pc, #56]	; (18fc <LIDAR_RES_get_info+0x70>)
    18c2:	4e0f      	ldr	r6, [pc, #60]	; (1900 <LIDAR_RES_get_info+0x74>)
    18c4:	4d0f      	ldr	r5, [pc, #60]	; (1904 <LIDAR_RES_get_info+0x78>)
    18c6:	5d3a      	ldrb	r2, [r7, r4]
    18c8:	ab04      	add	r3, sp, #16
    18ca:	1b18      	subs	r0, r3, r4
    18cc:	4631      	mov	r1, r6
    18ce:	3003      	adds	r0, #3
    18d0:	47a8      	blx	r5
    18d2:	3c01      	subs	r4, #1
	for (i=15; i>=0; i--) {
    18d4:	2c03      	cmp	r4, #3
    18d6:	d1f6      	bne.n	18c6 <LIDAR_RES_get_info+0x3a>
	}
	
    if (DEBUG) {
        printf(" : RPLiDAR Model ID: %u\r\n", model_id);	
    18d8:	4659      	mov	r1, fp
    18da:	480b      	ldr	r0, [pc, #44]	; (1908 <LIDAR_RES_get_info+0x7c>)
    18dc:	4c0b      	ldr	r4, [pc, #44]	; (190c <LIDAR_RES_get_info+0x80>)
    18de:	47a0      	blx	r4
        printf(" : Firmware Version: %u.%u\r\n", firmware_major, firmware_minor);
    18e0:	4652      	mov	r2, sl
    18e2:	4649      	mov	r1, r9
    18e4:	480a      	ldr	r0, [pc, #40]	; (1910 <LIDAR_RES_get_info+0x84>)
    18e6:	47a0      	blx	r4
        printf(" : Hardware Version: %u\r\n", hardware_version);
    18e8:	4641      	mov	r1, r8
    18ea:	480a      	ldr	r0, [pc, #40]	; (1914 <LIDAR_RES_get_info+0x88>)
    18ec:	47a0      	blx	r4
        printf(" : Serial Number: 0x%s\r\n", serial_number);
    18ee:	4669      	mov	r1, sp
    18f0:	4809      	ldr	r0, [pc, #36]	; (1918 <LIDAR_RES_get_info+0x8c>)
    18f2:	47a0      	blx	r4
    }
}
    18f4:	b005      	add	sp, #20
    18f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18fa:	bf00      	nop
    18fc:	200004a0 	.word	0x200004a0
    1900:	00004d18 	.word	0x00004d18
    1904:	0000314d 	.word	0x0000314d
    1908:	00004d20 	.word	0x00004d20
    190c:	00002e31 	.word	0x00002e31
    1910:	00004d3c 	.word	0x00004d3c
    1914:	00004d5c 	.word	0x00004d5c
    1918:	00004d78 	.word	0x00004d78

0000191c <LIDAR_RES_get_health>:
  *		Byte Offset:	+0		status
  *		Order 8..0		+1		error_code[7:0]
  *						+2		error_code[15:8]	
  */
void LIDAR_RES_get_health(void) 
{
    191c:	b508      	push	{r3, lr}
	char* status;
	uint16_t error_code;  
	
	switch(DATA_RESPONSE[0]) {
    191e:	4b0f      	ldr	r3, [pc, #60]	; (195c <LIDAR_RES_get_health+0x40>)
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	b2db      	uxtb	r3, r3
    1924:	2b01      	cmp	r3, #1
    1926:	d010      	beq.n	194a <LIDAR_RES_get_health+0x2e>
    1928:	b18b      	cbz	r3, 194e <LIDAR_RES_get_health+0x32>
		case 0: status = "GOOD"; break;
		case 1: status = "WARNING"; break;
		case 2: status = "ERROR"; break;
		default: status = "UNKNOWN"; break;
    192a:	4a0d      	ldr	r2, [pc, #52]	; (1960 <LIDAR_RES_get_health+0x44>)
    192c:	490d      	ldr	r1, [pc, #52]	; (1964 <LIDAR_RES_get_health+0x48>)
    192e:	2b02      	cmp	r3, #2
    1930:	bf18      	it	ne
    1932:	4611      	movne	r1, r2
	}
	
	error_code = DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8);
    1934:	4b09      	ldr	r3, [pc, #36]	; (195c <LIDAR_RES_get_health+0x40>)
    1936:	781a      	ldrb	r2, [r3, #0]
    1938:	785b      	ldrb	r3, [r3, #1]
    193a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    193e:	b292      	uxth	r2, r2
	
	if (error_code == 0) {
    1940:	b13a      	cbz	r2, 1952 <LIDAR_RES_get_health+0x36>
        if (DEBUG)
		    printf(" : LiDAR Health is %s!\r\n", status);
    }
	else {
		if (DEBUG)
            printf(" : LiDAR Health is %s!\r\n : Error code: %u\r\n", 
    1942:	4809      	ldr	r0, [pc, #36]	; (1968 <LIDAR_RES_get_health+0x4c>)
    1944:	4b09      	ldr	r3, [pc, #36]	; (196c <LIDAR_RES_get_health+0x50>)
    1946:	4798      	blx	r3
    1948:	bd08      	pop	{r3, pc}
		case 1: status = "WARNING"; break;
    194a:	4909      	ldr	r1, [pc, #36]	; (1970 <LIDAR_RES_get_health+0x54>)
    194c:	e7f2      	b.n	1934 <LIDAR_RES_get_health+0x18>
		case 0: status = "GOOD"; break;
    194e:	4909      	ldr	r1, [pc, #36]	; (1974 <LIDAR_RES_get_health+0x58>)
    1950:	e7f0      	b.n	1934 <LIDAR_RES_get_health+0x18>
		    printf(" : LiDAR Health is %s!\r\n", status);
    1952:	4809      	ldr	r0, [pc, #36]	; (1978 <LIDAR_RES_get_health+0x5c>)
    1954:	4b05      	ldr	r3, [pc, #20]	; (196c <LIDAR_RES_get_health+0x50>)
    1956:	4798      	blx	r3
    1958:	bd08      	pop	{r3, pc}
    195a:	bf00      	nop
    195c:	200004a0 	.word	0x200004a0
    1960:	00004dac 	.word	0x00004dac
    1964:	00004da4 	.word	0x00004da4
    1968:	00004dd0 	.word	0x00004dd0
    196c:	00002e31 	.word	0x00002e31
    1970:	00004d9c 	.word	0x00004d9c
    1974:	00004d94 	.word	0x00004d94
    1978:	00004db4 	.word	0x00004db4

0000197c <LIDAR_RES_get_samplerate>:
  *		Order 8..0		+1		Tstandard[15:8]
  *						+2		Texpress[7:0]
  *						+3		Texpress[15:8]	
  */
void LIDAR_RES_get_samplerate(void)
{
    197c:	b538      	push	{r3, r4, r5, lr}
    if (DEBUG) {
	    printf(" : Standard Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8));
    197e:	4c07      	ldr	r4, [pc, #28]	; (199c <LIDAR_RES_get_samplerate+0x20>)
    1980:	7823      	ldrb	r3, [r4, #0]
    1982:	7861      	ldrb	r1, [r4, #1]
	    printf(" : Standard Scan Samplerate: %u\r\n", 
    1984:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    1988:	4805      	ldr	r0, [pc, #20]	; (19a0 <LIDAR_RES_get_samplerate+0x24>)
    198a:	4d06      	ldr	r5, [pc, #24]	; (19a4 <LIDAR_RES_get_samplerate+0x28>)
    198c:	47a8      	blx	r5
		printf(" : Express Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[2] + ((unsigned)DATA_RESPONSE[3] << 8));
    198e:	78a3      	ldrb	r3, [r4, #2]
    1990:	78e1      	ldrb	r1, [r4, #3]
		printf(" : Express Scan Samplerate: %u\r\n", 
    1992:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    1996:	4804      	ldr	r0, [pc, #16]	; (19a8 <LIDAR_RES_get_samplerate+0x2c>)
    1998:	47a8      	blx	r5
    199a:	bd38      	pop	{r3, r4, r5, pc}
    199c:	200004a0 	.word	0x200004a0
    19a0:	00004dfc 	.word	0x00004dfc
    19a4:	00002e31 	.word	0x00002e31
    19a8:	00004e20 	.word	0x00004e20

000019ac <HardFault_Handler>:

/**
  * HardFault Handler
  */
void HardFault_Handler(void)
{
    19ac:	b508      	push	{r3, lr}
	if (DEBUG)
		printf("\r\n!!!!!!!! In HardFault_Handler !!!!!!!!\r\n");
    19ae:	4802      	ldr	r0, [pc, #8]	; (19b8 <HardFault_Handler+0xc>)
    19b0:	4b02      	ldr	r3, [pc, #8]	; (19bc <HardFault_Handler+0x10>)
    19b2:	4798      	blx	r3
    19b4:	e7fe      	b.n	19b4 <HardFault_Handler+0x8>
    19b6:	bf00      	nop
    19b8:	00004e44 	.word	0x00004e44
    19bc:	00002f19 	.word	0x00002f19

000019c0 <SysTick_Handler>:
/**
  *	SysTick Handler
  */
void SysTick_Handler(void)
{
	systick_count++;
    19c0:	4a09      	ldr	r2, [pc, #36]	; (19e8 <SysTick_Handler+0x28>)
    19c2:	6813      	ldr	r3, [r2, #0]
    19c4:	3301      	adds	r3, #1
    19c6:	6013      	str	r3, [r2, #0]
	if (lidar_timer > 0) {
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <SysTick_Handler+0x2c>)
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	b903      	cbnz	r3, 19d0 <SysTick_Handler+0x10>
    19ce:	4770      	bx	lr
{
    19d0:	b510      	push	{r4, lr}
		if (DEBUG)
			printf("lidar_timer = %u\r\n", lidar_timer);
    19d2:	4c06      	ldr	r4, [pc, #24]	; (19ec <SysTick_Handler+0x2c>)
    19d4:	7821      	ldrb	r1, [r4, #0]
    19d6:	4806      	ldr	r0, [pc, #24]	; (19f0 <SysTick_Handler+0x30>)
    19d8:	4b06      	ldr	r3, [pc, #24]	; (19f4 <SysTick_Handler+0x34>)
    19da:	4798      	blx	r3
		lidar_timer--;
    19dc:	7823      	ldrb	r3, [r4, #0]
    19de:	3b01      	subs	r3, #1
    19e0:	b2db      	uxtb	r3, r3
    19e2:	7023      	strb	r3, [r4, #0]
    19e4:	bd10      	pop	{r4, pc}
    19e6:	bf00      	nop
    19e8:	20004640 	.word	0x20004640
    19ec:	200046fc 	.word	0x200046fc
    19f0:	00004e70 	.word	0x00004e70
    19f4:	00002e31 	.word	0x00002e31

000019f8 <main>:

/** 
  * Application entry point
  */ 
int main(void)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	start_init();
    19fc:	4b22      	ldr	r3, [pc, #136]	; (1a88 <main+0x90>)
    19fe:	4798      	blx	r3
	if (SYSTICK_EN)
		SysTick_Config(12000UL); /* 12M ticks/second / 1k ticks/second = 12000 */
	EEPROM_init();
    1a00:	4b22      	ldr	r3, [pc, #136]	; (1a8c <main+0x94>)
    1a02:	4798      	blx	r3
	
	SERVO_set_angle(0);
    1a04:	2000      	movs	r0, #0
    1a06:	4b22      	ldr	r3, [pc, #136]	; (1a90 <main+0x98>)
    1a08:	4798      	blx	r3

	if (DEBUG) {
		printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
    1a0a:	4822      	ldr	r0, [pc, #136]	; (1a94 <main+0x9c>)
    1a0c:	4b22      	ldr	r3, [pc, #136]	; (1a98 <main+0xa0>)
    1a0e:	4798      	blx	r3

		while (1) {
			uint32_t user_selection = 0;

			printf("%s", menu_txt);
    1a10:	4f22      	ldr	r7, [pc, #136]	; (1a9c <main+0xa4>)
    1a12:	4e23      	ldr	r6, [pc, #140]	; (1aa0 <main+0xa8>)
    1a14:	4d23      	ldr	r5, [pc, #140]	; (1aa4 <main+0xac>)
    1a16:	e004      	b.n	1a22 <main+0x2a>
			
			if (scanf("%"PRIu32"", &user_selection) == 0) {
				/* If its not a number, flush stdin */
				fflush(stdin);
    1a18:	4b23      	ldr	r3, [pc, #140]	; (1aa8 <main+0xb0>)
    1a1a:	681b      	ldr	r3, [r3, #0]
    1a1c:	6858      	ldr	r0, [r3, #4]
    1a1e:	4b23      	ldr	r3, [pc, #140]	; (1aac <main+0xb4>)
    1a20:	4798      	blx	r3
			uint32_t user_selection = 0;
    1a22:	ac02      	add	r4, sp, #8
    1a24:	2300      	movs	r3, #0
    1a26:	f844 3d04 	str.w	r3, [r4, #-4]!
			printf("%s", menu_txt);
    1a2a:	4639      	mov	r1, r7
    1a2c:	4630      	mov	r0, r6
    1a2e:	47a8      	blx	r5
			if (scanf("%"PRIu32"", &user_selection) == 0) {
    1a30:	4621      	mov	r1, r4
    1a32:	481f      	ldr	r0, [pc, #124]	; (1ab0 <main+0xb8>)
    1a34:	4b1f      	ldr	r3, [pc, #124]	; (1ab4 <main+0xbc>)
    1a36:	4798      	blx	r3
    1a38:	2800      	cmp	r0, #0
    1a3a:	d0ed      	beq.n	1a18 <main+0x20>
				continue;
			}
			
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1a3c:	9901      	ldr	r1, [sp, #4]
    1a3e:	481e      	ldr	r0, [pc, #120]	; (1ab8 <main+0xc0>)
    1a40:	47a8      	blx	r5
			
			switch (user_selection) {
    1a42:	9b01      	ldr	r3, [sp, #4]
    1a44:	3b01      	subs	r3, #1
    1a46:	2b03      	cmp	r3, #3
    1a48:	d819      	bhi.n	1a7e <main+0x86>
    1a4a:	e8df f003 	tbb	[pc, r3]
    1a4e:	0f02      	.short	0x0f02
    1a50:	1512      	.short	0x1512
  __ASM volatile ("dsb 0xF":::"memory");
    1a52:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1a56:	4919      	ldr	r1, [pc, #100]	; (1abc <main+0xc4>)
    1a58:	68ca      	ldr	r2, [r1, #12]
    1a5a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1a5e:	4b18      	ldr	r3, [pc, #96]	; (1ac0 <main+0xc8>)
    1a60:	4313      	orrs	r3, r2
    1a62:	60cb      	str	r3, [r1, #12]
    1a64:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1a68:	bf00      	nop
    1a6a:	e7fd      	b.n	1a68 <main+0x70>
				case 1:
					NVIC_SystemReset();
					break;
				
				case 2:
					EEPROM_menu();
    1a6c:	4b15      	ldr	r3, [pc, #84]	; (1ac4 <main+0xcc>)
    1a6e:	4798      	blx	r3
					break;
    1a70:	e7d7      	b.n	1a22 <main+0x2a>

				case 3:
					SERVO_menu();
    1a72:	4b15      	ldr	r3, [pc, #84]	; (1ac8 <main+0xd0>)
    1a74:	4798      	blx	r3
					break;
    1a76:	e7d4      	b.n	1a22 <main+0x2a>
				
				case 4:
					LIDAR_menu();
    1a78:	4b14      	ldr	r3, [pc, #80]	; (1acc <main+0xd4>)
    1a7a:	4798      	blx	r3
					break;
    1a7c:	e7d1      	b.n	1a22 <main+0x2a>
				
				default:
					printf("\r\nInvalid option \r\n");
    1a7e:	4814      	ldr	r0, [pc, #80]	; (1ad0 <main+0xd8>)
    1a80:	4b05      	ldr	r3, [pc, #20]	; (1a98 <main+0xa0>)
    1a82:	4798      	blx	r3
					break;
    1a84:	e7cd      	b.n	1a22 <main+0x2a>
    1a86:	bf00      	nop
    1a88:	00000955 	.word	0x00000955
    1a8c:	00001e55 	.word	0x00001e55
    1a90:	00001be1 	.word	0x00001be1
    1a94:	00004e84 	.word	0x00004e84
    1a98:	00002f19 	.word	0x00002f19
    1a9c:	20000138 	.word	0x20000138
    1aa0:	00004b20 	.word	0x00004b20
    1aa4:	00002e31 	.word	0x00002e31
    1aa8:	2000026c 	.word	0x2000026c
    1aac:	00002a91 	.word	0x00002a91
    1ab0:	00004ec0 	.word	0x00004ec0
    1ab4:	00002f49 	.word	0x00002f49
    1ab8:	00004b28 	.word	0x00004b28
    1abc:	e000ed00 	.word	0xe000ed00
    1ac0:	05fa0004 	.word	0x05fa0004
    1ac4:	00001fcd 	.word	0x00001fcd
    1ac8:	00001cb5 	.word	0x00001cb5
    1acc:	00000fa9 	.word	0x00000fa9
    1ad0:	00004ec4 	.word	0x00004ec4

00001ad4 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    1ad4:	b508      	push	{r3, lr}

	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    1ad6:	4903      	ldr	r1, [pc, #12]	; (1ae4 <sd_mmc_stack_init+0x10>)
    1ad8:	460a      	mov	r2, r1
    1ada:	3104      	adds	r1, #4
    1adc:	4802      	ldr	r0, [pc, #8]	; (1ae8 <sd_mmc_stack_init+0x14>)
    1ade:	4b03      	ldr	r3, [pc, #12]	; (1aec <sd_mmc_stack_init+0x18>)
    1ae0:	4798      	blx	r3
    1ae2:	bd08      	pop	{r3, pc}
    1ae4:	20000190 	.word	0x20000190
    1ae8:	200046d8 	.word	0x200046d8
    1aec:	00000939 	.word	0x00000939

00001af0 <SERVO_PWM_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1af0:	4a36      	ldr	r2, [pc, #216]	; (1bcc <SERVO_PWM_init+0xdc>)
    1af2:	6953      	ldr	r3, [r2, #20]
    1af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1af8:	6153      	str	r3, [r2, #20]
    1afa:	2240      	movs	r2, #64	; 0x40
    1afc:	4b34      	ldr	r3, [pc, #208]	; (1bd0 <SERVO_PWM_init+0xe0>)
    1afe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b02:	4a34      	ldr	r2, [pc, #208]	; (1bd4 <SERVO_PWM_init+0xe4>)
    1b04:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b0c:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b10:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b14:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b18:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b20:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1b24:	4b2c      	ldr	r3, [pc, #176]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b26:	691b      	ldr	r3, [r3, #16]
void SERVO_PWM_init(void)
{
	SERVO_PWM_CLOCK_init();
	SERVO_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1b28:	f013 0f01 	tst.w	r3, #1
    1b2c:	d11f      	bne.n	1b6e <SERVO_PWM_init+0x7e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b2e:	4a2a      	ldr	r2, [pc, #168]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b30:	6913      	ldr	r3, [r2, #16]
    1b32:	f013 0f03 	tst.w	r3, #3
    1b36:	d1fb      	bne.n	1b30 <SERVO_PWM_init+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b38:	4b27      	ldr	r3, [pc, #156]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b3a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1b3c:	f013 0f02 	tst.w	r3, #2
    1b40:	d00d      	beq.n	1b5e <SERVO_PWM_init+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1b42:	4a25      	ldr	r2, [pc, #148]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b44:	6813      	ldr	r3, [r2, #0]
    1b46:	f023 0302 	bic.w	r3, r3, #2
    1b4a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b4c:	6913      	ldr	r3, [r2, #16]
    1b4e:	f013 0f03 	tst.w	r3, #3
    1b52:	d1fb      	bne.n	1b4c <SERVO_PWM_init+0x5c>
    1b54:	4a20      	ldr	r2, [pc, #128]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b56:	6913      	ldr	r3, [r2, #16]
    1b58:	f013 0f02 	tst.w	r3, #2
    1b5c:	d1fb      	bne.n	1b56 <SERVO_PWM_init+0x66>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b5e:	2201      	movs	r2, #1
    1b60:	4b1d      	ldr	r3, [pc, #116]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b62:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b64:	461a      	mov	r2, r3
    1b66:	6913      	ldr	r3, [r2, #16]
    1b68:	f013 0f03 	tst.w	r3, #3
    1b6c:	d1fb      	bne.n	1b66 <SERVO_PWM_init+0x76>
    1b6e:	4a1a      	ldr	r2, [pc, #104]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b70:	6913      	ldr	r3, [r2, #16]
    1b72:	f013 0f01 	tst.w	r3, #1
    1b76:	d1fb      	bne.n	1b70 <SERVO_PWM_init+0x80>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b78:	4a18      	ldr	r2, [pc, #96]	; (1bdc <SERVO_PWM_init+0xec>)
    1b7a:	4b17      	ldr	r3, [pc, #92]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b7c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b7e:	461a      	mov	r2, r3
    1b80:	6913      	ldr	r3, [r2, #16]
    1b82:	f013 0f03 	tst.w	r3, #3
    1b86:	d1fb      	bne.n	1b80 <SERVO_PWM_init+0x90>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1b88:	4b13      	ldr	r3, [pc, #76]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1b8a:	2200      	movs	r2, #0
    1b8c:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1b8e:	22ff      	movs	r2, #255	; 0xff
    1b90:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1b92:	2203      	movs	r2, #3
    1b94:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1b96:	f640 02e1 	movw	r2, #2273	; 0x8e1
    1b9a:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b9c:	461a      	mov	r2, r3
    1b9e:	6913      	ldr	r3, [r2, #16]
    1ba0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ba4:	d1fb      	bne.n	1b9e <SERVO_PWM_init+0xae>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1ba6:	f240 1277 	movw	r2, #375	; 0x177
    1baa:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1bac:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bae:	461a      	mov	r2, r3
    1bb0:	6913      	ldr	r3, [r2, #16]
    1bb2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1bb6:	d1fb      	bne.n	1bb0 <SERVO_PWM_init+0xc0>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bb8:	4a07      	ldr	r2, [pc, #28]	; (1bd8 <SERVO_PWM_init+0xe8>)
    1bba:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1bbc:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1bc0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bc2:	6913      	ldr	r3, [r2, #16]
    1bc4:	f013 0f03 	tst.w	r3, #3
    1bc8:	d1fb      	bne.n	1bc2 <SERVO_PWM_init+0xd2>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    1bca:	4770      	bx	lr
    1bcc:	40000800 	.word	0x40000800
    1bd0:	40001c00 	.word	0x40001c00
    1bd4:	41008000 	.word	0x41008000
    1bd8:	40003c00 	.word	0x40003c00
    1bdc:	12000410 	.word	0x12000410

00001be0 <SERVO_set_angle>:
  * Sets servo position to given angle
  * 
  * @param int : angle to set servo to
  */ 
void SERVO_set_angle(int angle)
{
    1be0:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    1be2:	4b2b      	ldr	r3, [pc, #172]	; (1c90 <SERVO_set_angle+0xb0>)
    1be4:	4798      	blx	r3
    1be6:	4c2b      	ldr	r4, [pc, #172]	; (1c94 <SERVO_set_angle+0xb4>)
    1be8:	2200      	movs	r2, #0
    1bea:	4b2b      	ldr	r3, [pc, #172]	; (1c98 <SERVO_set_angle+0xb8>)
    1bec:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    1bee:	4d2b      	ldr	r5, [pc, #172]	; (1c9c <SERVO_set_angle+0xbc>)
    1bf0:	2200      	movs	r2, #0
    1bf2:	4b2b      	ldr	r3, [pc, #172]	; (1ca0 <SERVO_set_angle+0xc0>)
    1bf4:	47a8      	blx	r5
    1bf6:	2200      	movs	r2, #0
    1bf8:	4b2a      	ldr	r3, [pc, #168]	; (1ca4 <SERVO_set_angle+0xc4>)
    1bfa:	4e2b      	ldr	r6, [pc, #172]	; (1ca8 <SERVO_set_angle+0xc8>)
    1bfc:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    1bfe:	a320      	add	r3, pc, #128	; (adr r3, 1c80 <SERVO_set_angle+0xa0>)
    1c00:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c04:	47a8      	blx	r5
    1c06:	a320      	add	r3, pc, #128	; (adr r3, 1c88 <SERVO_set_angle+0xa8>)
    1c08:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c0c:	47a0      	blx	r4
    1c0e:	4b27      	ldr	r3, [pc, #156]	; (1cac <SERVO_set_angle+0xcc>)
    1c10:	4798      	blx	r3
    1c12:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1c14:	4b26      	ldr	r3, [pc, #152]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c16:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1c18:	f013 0f01 	tst.w	r3, #1
    1c1c:	d117      	bne.n	1c4e <SERVO_set_angle+0x6e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c1e:	4a24      	ldr	r2, [pc, #144]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c20:	6913      	ldr	r3, [r2, #16]
    1c22:	f013 0f03 	tst.w	r3, #3
    1c26:	d1fb      	bne.n	1c20 <SERVO_set_angle+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1c28:	4b21      	ldr	r3, [pc, #132]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c2a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1c2c:	f013 0f02 	tst.w	r3, #2
    1c30:	d00d      	beq.n	1c4e <SERVO_set_angle+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1c32:	4a1f      	ldr	r2, [pc, #124]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c34:	6813      	ldr	r3, [r2, #0]
    1c36:	f023 0302 	bic.w	r3, r3, #2
    1c3a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c3c:	6913      	ldr	r3, [r2, #16]
    1c3e:	f013 0f03 	tst.w	r3, #3
    1c42:	d1fb      	bne.n	1c3c <SERVO_set_angle+0x5c>
    1c44:	4a1a      	ldr	r2, [pc, #104]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c46:	6913      	ldr	r3, [r2, #16]
    1c48:	f013 0f02 	tst.w	r3, #2
    1c4c:	d1fb      	bne.n	1c46 <SERVO_set_angle+0x66>
    1c4e:	4a18      	ldr	r2, [pc, #96]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c50:	6913      	ldr	r3, [r2, #16]
    1c52:	f013 0f01 	tst.w	r3, #1
    1c56:	d1fb      	bne.n	1c50 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1c58:	4b15      	ldr	r3, [pc, #84]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c5a:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c5c:	461a      	mov	r2, r3
    1c5e:	6913      	ldr	r3, [r2, #16]
    1c60:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1c64:	d1fb      	bne.n	1c5e <SERVO_set_angle+0x7e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1c66:	4a12      	ldr	r2, [pc, #72]	; (1cb0 <SERVO_set_angle+0xd0>)
    1c68:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1c6a:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1c6e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c70:	6913      	ldr	r3, [r2, #16]
    1c72:	f013 0f03 	tst.w	r3, #3
    1c76:	d1fb      	bne.n	1c70 <SERVO_set_angle+0x90>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
}
    1c78:	bd70      	pop	{r4, r5, r6, pc}
    1c7a:	bf00      	nop
    1c7c:	f3af 8000 	nop.w
    1c80:	00000000 	.word	0x00000000
    1c84:	40a1c200 	.word	0x40a1c200
    1c88:	00000000 	.word	0x00000000
    1c8c:	40a7ac00 	.word	0x40a7ac00
    1c90:	000023fd 	.word	0x000023fd
    1c94:	0000271d 	.word	0x0000271d
    1c98:	40668000 	.word	0x40668000
    1c9c:	000024c9 	.word	0x000024c9
    1ca0:	409f4000 	.word	0x409f4000
    1ca4:	407f4000 	.word	0x407f4000
    1ca8:	00002165 	.word	0x00002165
    1cac:	000028ed 	.word	0x000028ed
    1cb0:	40003c00 	.word	0x40003c00

00001cb4 <SERVO_menu>:
/**
  * Menu for servo command options in order to test angle adjustments with
  * servo
  */ 
void SERVO_menu(void)
{
    1cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb6:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
    1cb8:	2300      	movs	r3, #0
    1cba:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    1cbc:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    1cbe:	4e1d      	ldr	r6, [pc, #116]	; (1d34 <SERVO_menu+0x80>)
    1cc0:	4d1d      	ldr	r5, [pc, #116]	; (1d38 <SERVO_menu+0x84>)
    1cc2:	4c1e      	ldr	r4, [pc, #120]	; (1d3c <SERVO_menu+0x88>)
    1cc4:	e004      	b.n	1cd0 <SERVO_menu+0x1c>
		
		if (scanf("%"PRIu32"", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    1cc6:	4b1e      	ldr	r3, [pc, #120]	; (1d40 <SERVO_menu+0x8c>)
    1cc8:	681b      	ldr	r3, [r3, #0]
    1cca:	6858      	ldr	r0, [r3, #4]
    1ccc:	4b1d      	ldr	r3, [pc, #116]	; (1d44 <SERVO_menu+0x90>)
    1cce:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    1cd0:	4631      	mov	r1, r6
    1cd2:	4628      	mov	r0, r5
    1cd4:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
    1cd6:	a901      	add	r1, sp, #4
    1cd8:	481b      	ldr	r0, [pc, #108]	; (1d48 <SERVO_menu+0x94>)
    1cda:	4b1c      	ldr	r3, [pc, #112]	; (1d4c <SERVO_menu+0x98>)
    1cdc:	4798      	blx	r3
    1cde:	2800      	cmp	r0, #0
    1ce0:	d0f1      	beq.n	1cc6 <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1ce2:	9901      	ldr	r1, [sp, #4]
    1ce4:	481a      	ldr	r0, [pc, #104]	; (1d50 <SERVO_menu+0x9c>)
    1ce6:	47a0      	blx	r4
		
		switch (user_selection) {
    1ce8:	9b01      	ldr	r3, [sp, #4]
    1cea:	2b01      	cmp	r3, #1
    1cec:	d005      	beq.n	1cfa <SERVO_menu+0x46>
    1cee:	2b02      	cmp	r3, #2
    1cf0:	d008      	beq.n	1d04 <SERVO_menu+0x50>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
				SERVO_set_angle(servo_angle);
				break;
			
			default:
				printf("\r\nInvalid option\r\n");
    1cf2:	4818      	ldr	r0, [pc, #96]	; (1d54 <SERVO_menu+0xa0>)
    1cf4:	4b18      	ldr	r3, [pc, #96]	; (1d58 <SERVO_menu+0xa4>)
    1cf6:	4798      	blx	r3
				break;
    1cf8:	e7ea      	b.n	1cd0 <SERVO_menu+0x1c>
				printf("\r\nReturning to main menu\r\n");
    1cfa:	4818      	ldr	r0, [pc, #96]	; (1d5c <SERVO_menu+0xa8>)
    1cfc:	4b16      	ldr	r3, [pc, #88]	; (1d58 <SERVO_menu+0xa4>)
    1cfe:	4798      	blx	r3
		}
	}
    1d00:	b003      	add	sp, #12
    1d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nEnter angle >> ");
    1d04:	4816      	ldr	r0, [pc, #88]	; (1d60 <SERVO_menu+0xac>)
    1d06:	47a0      	blx	r4
				scanf("%"PRIu32"", &servo_angle);
    1d08:	4f0f      	ldr	r7, [pc, #60]	; (1d48 <SERVO_menu+0x94>)
    1d0a:	4669      	mov	r1, sp
    1d0c:	4638      	mov	r0, r7
    1d0e:	4b0f      	ldr	r3, [pc, #60]	; (1d4c <SERVO_menu+0x98>)
    1d10:	4798      	blx	r3
				printf("%"PRIu32"", servo_angle);
    1d12:	9900      	ldr	r1, [sp, #0]
    1d14:	4638      	mov	r0, r7
    1d16:	47a0      	blx	r4
				if (servo_angle < 0 || servo_angle > 180) {
    1d18:	9900      	ldr	r1, [sp, #0]
    1d1a:	29b4      	cmp	r1, #180	; 0xb4
    1d1c:	d903      	bls.n	1d26 <SERVO_menu+0x72>
					printf("\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n");
    1d1e:	4811      	ldr	r0, [pc, #68]	; (1d64 <SERVO_menu+0xb0>)
    1d20:	4b0d      	ldr	r3, [pc, #52]	; (1d58 <SERVO_menu+0xa4>)
    1d22:	4798      	blx	r3
					break;
    1d24:	e7d4      	b.n	1cd0 <SERVO_menu+0x1c>
				printf("\r\nSetting servo angle to %0"PRIu32"\r\n", servo_angle);
    1d26:	4810      	ldr	r0, [pc, #64]	; (1d68 <SERVO_menu+0xb4>)
    1d28:	47a0      	blx	r4
				SERVO_set_angle(servo_angle);
    1d2a:	9800      	ldr	r0, [sp, #0]
    1d2c:	4b0f      	ldr	r3, [pc, #60]	; (1d6c <SERVO_menu+0xb8>)
    1d2e:	4798      	blx	r3
				break;
    1d30:	e7ce      	b.n	1cd0 <SERVO_menu+0x1c>
    1d32:	bf00      	nop
    1d34:	20000198 	.word	0x20000198
    1d38:	00004b20 	.word	0x00004b20
    1d3c:	00002e31 	.word	0x00002e31
    1d40:	2000026c 	.word	0x2000026c
    1d44:	00002a91 	.word	0x00002a91
    1d48:	00004ec0 	.word	0x00004ec0
    1d4c:	00002f49 	.word	0x00002f49
    1d50:	00004b28 	.word	0x00004b28
    1d54:	00004c90 	.word	0x00004c90
    1d58:	00002f19 	.word	0x00002f19
    1d5c:	00004b44 	.word	0x00004b44
    1d60:	00004ed8 	.word	0x00004ed8
    1d64:	00004eec 	.word	0x00004eec
    1d68:	00004f28 	.word	0x00004f28
    1d6c:	00001be1 	.word	0x00001be1

00001d70 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1d74:	4a0b      	ldr	r2, [pc, #44]	; (1da4 <invert_seep_byte+0x34>)
    1d76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1d78:	f013 0f04 	tst.w	r3, #4
    1d7c:	d1fb      	bne.n	1d76 <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
    1d7e:	4e0a      	ldr	r6, [pc, #40]	; (1da8 <invert_seep_byte+0x38>)
    1d80:	6833      	ldr	r3, [r6, #0]
    1d82:	5d1a      	ldrb	r2, [r3, r4]
    1d84:	4d09      	ldr	r5, [pc, #36]	; (1dac <invert_seep_byte+0x3c>)
    1d86:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
    1d88:	4621      	mov	r1, r4
    1d8a:	4809      	ldr	r0, [pc, #36]	; (1db0 <invert_seep_byte+0x40>)
    1d8c:	4b09      	ldr	r3, [pc, #36]	; (1db4 <invert_seep_byte+0x44>)
    1d8e:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
    1d90:	6832      	ldr	r2, [r6, #0]
    1d92:	782b      	ldrb	r3, [r5, #0]
    1d94:	fab3 f383 	clz	r3, r3
    1d98:	095b      	lsrs	r3, r3, #5
    1d9a:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
    1d9c:	4806      	ldr	r0, [pc, #24]	; (1db8 <invert_seep_byte+0x48>)
    1d9e:	4b07      	ldr	r3, [pc, #28]	; (1dbc <invert_seep_byte+0x4c>)
    1da0:	4798      	blx	r3
    1da2:	bd70      	pop	{r4, r5, r6, pc}
    1da4:	41004000 	.word	0x41004000
    1da8:	200001e8 	.word	0x200001e8
    1dac:	200046fe 	.word	0x200046fe
    1db0:	00004f48 	.word	0x00004f48
    1db4:	00002e31 	.word	0x00002e31
    1db8:	00004f6c 	.word	0x00004f6c
    1dbc:	00002f19 	.word	0x00002f19

00001dc0 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
    1dc0:	b508      	push	{r3, lr}
    1dc2:	4a0b      	ldr	r2, [pc, #44]	; (1df0 <verify_seep_signature+0x30>)
    1dc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1dc6:	f013 0f04 	tst.w	r3, #4
    1dca:	d1fb      	bne.n	1dc4 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
    1dcc:	4b08      	ldr	r3, [pc, #32]	; (1df0 <verify_seep_signature+0x30>)
    1dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
    1dd0:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    1dd4:	d008      	beq.n	1de8 <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
    1dd6:	4b07      	ldr	r3, [pc, #28]	; (1df4 <verify_seep_signature+0x34>)
    1dd8:	685b      	ldr	r3, [r3, #4]
    1dda:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
    1ddc:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
    1de0:	bf18      	it	ne
    1de2:	f04f 30ff 	movne.w	r0, #4294967295
    1de6:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
    1de8:	4803      	ldr	r0, [pc, #12]	; (1df8 <verify_seep_signature+0x38>)
    1dea:	4b04      	ldr	r3, [pc, #16]	; (1dfc <verify_seep_signature+0x3c>)
    1dec:	4798      	blx	r3
    1dee:	e7fe      	b.n	1dee <verify_seep_signature+0x2e>
    1df0:	41004000 	.word	0x41004000
    1df4:	200001e8 	.word	0x200001e8
    1df8:	00004fa0 	.word	0x00004fa0
    1dfc:	00002f19 	.word	0x00002f19

00001e00 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
    1e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
    1e04:	b1c9      	cbz	r1, 1e3a <print_hex_array+0x3a>
    1e06:	460e      	mov	r6, r1
    1e08:	1e45      	subs	r5, r0, #1
    1e0a:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
    1e0c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1e50 <print_hex_array+0x50>
    1e10:	4f0c      	ldr	r7, [pc, #48]	; (1e44 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
    1e12:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1e4c <print_hex_array+0x4c>
    1e16:	e003      	b.n	1e20 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
    1e18:	3401      	adds	r4, #1
    1e1a:	b2a4      	uxth	r4, r4
    1e1c:	42a6      	cmp	r6, r4
    1e1e:	d00c      	beq.n	1e3a <print_hex_array+0x3a>
		printf("%02d ", p[i]);
    1e20:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    1e24:	4640      	mov	r0, r8
    1e26:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
    1e28:	f014 0f07 	tst.w	r4, #7
    1e2c:	d1f4      	bne.n	1e18 <print_hex_array+0x18>
    1e2e:	2c00      	cmp	r4, #0
    1e30:	d0f2      	beq.n	1e18 <print_hex_array+0x18>
			printf("\r\n");
    1e32:	4648      	mov	r0, r9
    1e34:	4b04      	ldr	r3, [pc, #16]	; (1e48 <print_hex_array+0x48>)
    1e36:	4798      	blx	r3
    1e38:	e7ee      	b.n	1e18 <print_hex_array+0x18>
	}
	printf("\r\n");
    1e3a:	4804      	ldr	r0, [pc, #16]	; (1e4c <print_hex_array+0x4c>)
    1e3c:	4b02      	ldr	r3, [pc, #8]	; (1e48 <print_hex_array+0x48>)
    1e3e:	4798      	blx	r3
    1e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e44:	00002e31 	.word	0x00002e31
    1e48:	00002f19 	.word	0x00002f19
    1e4c:	00005138 	.word	0x00005138
    1e50:	00004fdc 	.word	0x00004fdc

00001e54 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
    1e54:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
    1e56:	4b19      	ldr	r3, [pc, #100]	; (1ebc <EEPROM_init+0x68>)
    1e58:	4798      	blx	r3
    1e5a:	b9d0      	cbnz	r0, 1e92 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
    1e5c:	4818      	ldr	r0, [pc, #96]	; (1ec0 <EEPROM_init+0x6c>)
    1e5e:	4b19      	ldr	r3, [pc, #100]	; (1ec4 <EEPROM_init+0x70>)
    1e60:	4798      	blx	r3
    1e62:	4b19      	ldr	r3, [pc, #100]	; (1ec8 <EEPROM_init+0x74>)
    1e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
    1e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
    1e68:	f3c2 4202 	ubfx	r2, r2, #16, #3
    1e6c:	f3c1 2103 	ubfx	r1, r1, #8, #4
    1e70:	4816      	ldr	r0, [pc, #88]	; (1ecc <EEPROM_init+0x78>)
    1e72:	4b17      	ldr	r3, [pc, #92]	; (1ed0 <EEPROM_init+0x7c>)
    1e74:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
    1e76:	2020      	movs	r0, #32
    1e78:	4b16      	ldr	r3, [pc, #88]	; (1ed4 <EEPROM_init+0x80>)
    1e7a:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
    1e7c:	4b16      	ldr	r3, [pc, #88]	; (1ed8 <EEPROM_init+0x84>)
    1e7e:	681b      	ldr	r3, [r3, #0]
    1e80:	f893 3020 	ldrb.w	r3, [r3, #32]
    1e84:	b99b      	cbnz	r3, 1eae <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1e8a:	4b14      	ldr	r3, [pc, #80]	; (1edc <EEPROM_init+0x88>)
    1e8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1e90:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
    1e92:	4813      	ldr	r0, [pc, #76]	; (1ee0 <EEPROM_init+0x8c>)
    1e94:	4b0b      	ldr	r3, [pc, #44]	; (1ec4 <EEPROM_init+0x70>)
    1e96:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1e98:	4a0b      	ldr	r2, [pc, #44]	; (1ec8 <EEPROM_init+0x74>)
    1e9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1e9c:	f013 0f04 	tst.w	r3, #4
    1ea0:	d1fb      	bne.n	1e9a <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
    1ea2:	4b0d      	ldr	r3, [pc, #52]	; (1ed8 <EEPROM_init+0x84>)
    1ea4:	685b      	ldr	r3, [r3, #4]
    1ea6:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
    1eaa:	601a      	str	r2, [r3, #0]
    1eac:	e7d9      	b.n	1e62 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1eae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1eb2:	4b0a      	ldr	r3, [pc, #40]	; (1edc <EEPROM_init+0x88>)
    1eb4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1eb8:	bd08      	pop	{r3, pc}
    1eba:	bf00      	nop
    1ebc:	00001dc1 	.word	0x00001dc1
    1ec0:	00004fe4 	.word	0x00004fe4
    1ec4:	00002f19 	.word	0x00002f19
    1ec8:	41004000 	.word	0x41004000
    1ecc:	00005044 	.word	0x00005044
    1ed0:	00002e31 	.word	0x00002e31
    1ed4:	00001d71 	.word	0x00001d71
    1ed8:	200001e8 	.word	0x200001e8
    1edc:	41008000 	.word	0x41008000
    1ee0:	00005008 	.word	0x00005008

00001ee4 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
    1ee4:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1ee6:	4b0a      	ldr	r3, [pc, #40]	; (1f10 <EEPROM_read+0x2c>)
    1ee8:	681a      	ldr	r2, [r3, #0]
    1eea:	3a01      	subs	r2, #1
    1eec:	4809      	ldr	r0, [pc, #36]	; (1f14 <EEPROM_read+0x30>)
    1eee:	1e43      	subs	r3, r0, #1
    1ef0:	3063      	adds	r0, #99	; 0x63
    1ef2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1ef6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    1efa:	4283      	cmp	r3, r0
    1efc:	d1f9      	bne.n	1ef2 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1efe:	2164      	movs	r1, #100	; 0x64
    1f00:	4805      	ldr	r0, [pc, #20]	; (1f18 <EEPROM_read+0x34>)
    1f02:	4b06      	ldr	r3, [pc, #24]	; (1f1c <EEPROM_read+0x38>)
    1f04:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    1f06:	2164      	movs	r1, #100	; 0x64
    1f08:	4802      	ldr	r0, [pc, #8]	; (1f14 <EEPROM_read+0x30>)
    1f0a:	4b05      	ldr	r3, [pc, #20]	; (1f20 <EEPROM_read+0x3c>)
    1f0c:	4798      	blx	r3
    1f0e:	bd08      	pop	{r3, pc}
    1f10:	200001e8 	.word	0x200001e8
    1f14:	20004644 	.word	0x20004644
    1f18:	000050d8 	.word	0x000050d8
    1f1c:	00002e31 	.word	0x00002e31
    1f20:	00001e01 	.word	0x00001e01

00001f24 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
    1f24:	b530      	push	{r4, r5, lr}
    1f26:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
    1f28:	2300      	movs	r3, #0
    1f2a:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
    1f2c:	ac02      	add	r4, sp, #8
    1f2e:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
    1f32:	481a      	ldr	r0, [pc, #104]	; (1f9c <EEPROM_write+0x78>)
    1f34:	4b1a      	ldr	r3, [pc, #104]	; (1fa0 <EEPROM_write+0x7c>)
    1f36:	4798      	blx	r3
	scanf("%"PRIu32"", &ee_addr);
    1f38:	4621      	mov	r1, r4
    1f3a:	481a      	ldr	r0, [pc, #104]	; (1fa4 <EEPROM_write+0x80>)
    1f3c:	4b1a      	ldr	r3, [pc, #104]	; (1fa8 <EEPROM_write+0x84>)
    1f3e:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
    1f40:	9b00      	ldr	r3, [sp, #0]
    1f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    1f46:	d224      	bcs.n	1f92 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
    1f48:	4818      	ldr	r0, [pc, #96]	; (1fac <EEPROM_write+0x88>)
    1f4a:	4d15      	ldr	r5, [pc, #84]	; (1fa0 <EEPROM_write+0x7c>)
    1f4c:	47a8      	blx	r5
	scanf("%"PRIu32"", &ee_data);
    1f4e:	a901      	add	r1, sp, #4
    1f50:	4814      	ldr	r0, [pc, #80]	; (1fa4 <EEPROM_write+0x80>)
    1f52:	4b15      	ldr	r3, [pc, #84]	; (1fa8 <EEPROM_write+0x84>)
    1f54:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
    1f56:	4c16      	ldr	r4, [pc, #88]	; (1fb0 <EEPROM_write+0x8c>)
    1f58:	6822      	ldr	r2, [r4, #0]
    1f5a:	9901      	ldr	r1, [sp, #4]
    1f5c:	9b00      	ldr	r3, [sp, #0]
    1f5e:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
    1f60:	9a00      	ldr	r2, [sp, #0]
    1f62:	9901      	ldr	r1, [sp, #4]
    1f64:	4813      	ldr	r0, [pc, #76]	; (1fb4 <EEPROM_write+0x90>)
    1f66:	47a8      	blx	r5
    1f68:	6822      	ldr	r2, [r4, #0]
    1f6a:	3a01      	subs	r2, #1
    1f6c:	4812      	ldr	r0, [pc, #72]	; (1fb8 <EEPROM_write+0x94>)
    1f6e:	1e43      	subs	r3, r0, #1
    1f70:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1f72:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1f76:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    1f7a:	4283      	cmp	r3, r0
    1f7c:	d1f9      	bne.n	1f72 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1f7e:	2164      	movs	r1, #100	; 0x64
    1f80:	480e      	ldr	r0, [pc, #56]	; (1fbc <EEPROM_write+0x98>)
    1f82:	4b07      	ldr	r3, [pc, #28]	; (1fa0 <EEPROM_write+0x7c>)
    1f84:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    1f86:	2164      	movs	r1, #100	; 0x64
    1f88:	480b      	ldr	r0, [pc, #44]	; (1fb8 <EEPROM_write+0x94>)
    1f8a:	4b0d      	ldr	r3, [pc, #52]	; (1fc0 <EEPROM_write+0x9c>)
    1f8c:	4798      	blx	r3
}
    1f8e:	b003      	add	sp, #12
    1f90:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
    1f92:	480c      	ldr	r0, [pc, #48]	; (1fc4 <EEPROM_write+0xa0>)
    1f94:	4b0c      	ldr	r3, [pc, #48]	; (1fc8 <EEPROM_write+0xa4>)
    1f96:	4798      	blx	r3
    1f98:	e7f9      	b.n	1f8e <EEPROM_write+0x6a>
    1f9a:	bf00      	nop
    1f9c:	00005100 	.word	0x00005100
    1fa0:	00002e31 	.word	0x00002e31
    1fa4:	00004ec0 	.word	0x00004ec0
    1fa8:	00002f49 	.word	0x00002f49
    1fac:	0000513c 	.word	0x0000513c
    1fb0:	200001e8 	.word	0x200001e8
    1fb4:	00005150 	.word	0x00005150
    1fb8:	20004644 	.word	0x20004644
    1fbc:	000050d8 	.word	0x000050d8
    1fc0:	00001e01 	.word	0x00001e01
    1fc4:	00005114 	.word	0x00005114
    1fc8:	00002f19 	.word	0x00002f19

00001fcc <EEPROM_menu>:
{
    1fcc:	b570      	push	{r4, r5, r6, lr}
    1fce:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
    1fd0:	2300      	movs	r3, #0
    1fd2:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
    1fd4:	4e1b      	ldr	r6, [pc, #108]	; (2044 <EEPROM_menu+0x78>)
    1fd6:	4d1c      	ldr	r5, [pc, #112]	; (2048 <EEPROM_menu+0x7c>)
    1fd8:	4c1c      	ldr	r4, [pc, #112]	; (204c <EEPROM_menu+0x80>)
    1fda:	4631      	mov	r1, r6
    1fdc:	4628      	mov	r0, r5
    1fde:	47a0      	blx	r4
		if (scanf("%"PRIu32"", &user_selection) == 0) {
    1fe0:	a901      	add	r1, sp, #4
    1fe2:	481b      	ldr	r0, [pc, #108]	; (2050 <EEPROM_menu+0x84>)
    1fe4:	4b1b      	ldr	r3, [pc, #108]	; (2054 <EEPROM_menu+0x88>)
    1fe6:	4798      	blx	r3
    1fe8:	b150      	cbz	r0, 2000 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1fea:	9901      	ldr	r1, [sp, #4]
    1fec:	481a      	ldr	r0, [pc, #104]	; (2058 <EEPROM_menu+0x8c>)
    1fee:	47a0      	blx	r4
		switch (user_selection) {
    1ff0:	9b01      	ldr	r3, [sp, #4]
    1ff2:	3b01      	subs	r3, #1
    1ff4:	2b03      	cmp	r3, #3
    1ff6:	d821      	bhi.n	203c <EEPROM_menu+0x70>
    1ff8:	e8df f003 	tbb	[pc, r3]
    1ffc:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
    2000:	4b16      	ldr	r3, [pc, #88]	; (205c <EEPROM_menu+0x90>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	6858      	ldr	r0, [r3, #4]
    2006:	4b16      	ldr	r3, [pc, #88]	; (2060 <EEPROM_menu+0x94>)
    2008:	4798      	blx	r3
    200a:	e7ee      	b.n	1fea <EEPROM_menu+0x1e>
    200c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2010:	4914      	ldr	r1, [pc, #80]	; (2064 <EEPROM_menu+0x98>)
    2012:	68ca      	ldr	r2, [r1, #12]
    2014:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2018:	4b13      	ldr	r3, [pc, #76]	; (2068 <EEPROM_menu+0x9c>)
    201a:	4313      	orrs	r3, r2
    201c:	60cb      	str	r3, [r1, #12]
    201e:	f3bf 8f4f 	dsb	sy
    __NOP();
    2022:	bf00      	nop
    2024:	e7fd      	b.n	2022 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
    2026:	4811      	ldr	r0, [pc, #68]	; (206c <EEPROM_menu+0xa0>)
    2028:	4b11      	ldr	r3, [pc, #68]	; (2070 <EEPROM_menu+0xa4>)
    202a:	4798      	blx	r3
}
    202c:	b002      	add	sp, #8
    202e:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
    2030:	4b10      	ldr	r3, [pc, #64]	; (2074 <EEPROM_menu+0xa8>)
    2032:	4798      	blx	r3
				break;
    2034:	e7d1      	b.n	1fda <EEPROM_menu+0xe>
				EEPROM_write();
    2036:	4b10      	ldr	r3, [pc, #64]	; (2078 <EEPROM_menu+0xac>)
    2038:	4798      	blx	r3
				break;
    203a:	e7ce      	b.n	1fda <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
    203c:	480f      	ldr	r0, [pc, #60]	; (207c <EEPROM_menu+0xb0>)
    203e:	4b0c      	ldr	r3, [pc, #48]	; (2070 <EEPROM_menu+0xa4>)
    2040:	4798      	blx	r3
				break;
    2042:	e7ca      	b.n	1fda <EEPROM_menu+0xe>
    2044:	200001f0 	.word	0x200001f0
    2048:	00004b20 	.word	0x00004b20
    204c:	00002e31 	.word	0x00002e31
    2050:	00004ec0 	.word	0x00004ec0
    2054:	00002f49 	.word	0x00002f49
    2058:	00004b28 	.word	0x00004b28
    205c:	2000026c 	.word	0x2000026c
    2060:	00002a91 	.word	0x00002a91
    2064:	e000ed00 	.word	0xe000ed00
    2068:	05fa0004 	.word	0x05fa0004
    206c:	00004b44 	.word	0x00004b44
    2070:	00002f19 	.word	0x00002f19
    2074:	00001ee5 	.word	0x00001ee5
    2078:	00001f25 	.word	0x00001f25
    207c:	00004c90 	.word	0x00004c90

00002080 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2080:	b510      	push	{r4, lr}

	usart_sync_enable(&STDIO_IO);
    2082:	4c04      	ldr	r4, [pc, #16]	; (2094 <stdio_redirect_init+0x14>)
    2084:	4620      	mov	r0, r4
    2086:	4b04      	ldr	r3, [pc, #16]	; (2098 <stdio_redirect_init+0x18>)
    2088:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    208a:	4620      	mov	r0, r4
    208c:	4b03      	ldr	r3, [pc, #12]	; (209c <stdio_redirect_init+0x1c>)
    208e:	4798      	blx	r3
    2090:	bd10      	pop	{r4, pc}
    2092:	bf00      	nop
    2094:	200046c8 	.word	0x200046c8
    2098:	00000539 	.word	0x00000539
    209c:	000020e5 	.word	0x000020e5

000020a0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    20a0:	b940      	cbnz	r0, 20b4 <_read+0x14>
{
    20a2:	b508      	push	{r3, lr}
    20a4:	460b      	mov	r3, r1
    20a6:	4611      	mov	r1, r2
    20a8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    20aa:	4b04      	ldr	r3, [pc, #16]	; (20bc <_read+0x1c>)
    20ac:	4798      	blx	r3
    20ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    20b2:	bd08      	pop	{r3, pc}
		return -1;
    20b4:	f04f 30ff 	mov.w	r0, #4294967295
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop
    20bc:	00002111 	.word	0x00002111

000020c0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    20c0:	3801      	subs	r0, #1
    20c2:	2802      	cmp	r0, #2
    20c4:	d808      	bhi.n	20d8 <_write+0x18>
{
    20c6:	b508      	push	{r3, lr}
    20c8:	460b      	mov	r3, r1
    20ca:	4611      	mov	r1, r2
    20cc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    20ce:	4b04      	ldr	r3, [pc, #16]	; (20e0 <_write+0x20>)
    20d0:	4798      	blx	r3
    20d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    20d6:	bd08      	pop	{r3, pc}
		return -1;
    20d8:	f04f 30ff 	mov.w	r0, #4294967295
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	00002135 	.word	0x00002135

000020e4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    20e4:	b570      	push	{r4, r5, r6, lr}
    20e6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    20e8:	4d06      	ldr	r5, [pc, #24]	; (2104 <stdio_io_init+0x20>)
    20ea:	682b      	ldr	r3, [r5, #0]
    20ec:	2100      	movs	r1, #0
    20ee:	6898      	ldr	r0, [r3, #8]
    20f0:	4c05      	ldr	r4, [pc, #20]	; (2108 <stdio_io_init+0x24>)
    20f2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    20f4:	682b      	ldr	r3, [r5, #0]
    20f6:	2100      	movs	r1, #0
    20f8:	6858      	ldr	r0, [r3, #4]
    20fa:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    20fc:	4b03      	ldr	r3, [pc, #12]	; (210c <stdio_io_init+0x28>)
    20fe:	601e      	str	r6, [r3, #0]
    2100:	bd70      	pop	{r4, r5, r6, pc}
    2102:	bf00      	nop
    2104:	2000026c 	.word	0x2000026c
    2108:	00002f79 	.word	0x00002f79
    210c:	200046a8 	.word	0x200046a8

00002110 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2110:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    2112:	4b06      	ldr	r3, [pc, #24]	; (212c <stdio_io_read+0x1c>)
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	b133      	cbz	r3, 2126 <stdio_io_read+0x16>
    2118:	460a      	mov	r2, r1
    211a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    211c:	b292      	uxth	r2, r2
    211e:	4618      	mov	r0, r3
    2120:	4b03      	ldr	r3, [pc, #12]	; (2130 <stdio_io_read+0x20>)
    2122:	4798      	blx	r3
    2124:	bd08      	pop	{r3, pc}
		return 0;
    2126:	2000      	movs	r0, #0
}
    2128:	bd08      	pop	{r3, pc}
    212a:	bf00      	nop
    212c:	200046a8 	.word	0x200046a8
    2130:	000003bd 	.word	0x000003bd

00002134 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2134:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    2136:	4b06      	ldr	r3, [pc, #24]	; (2150 <stdio_io_write+0x1c>)
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	b133      	cbz	r3, 214a <stdio_io_write+0x16>
    213c:	460a      	mov	r2, r1
    213e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    2140:	b292      	uxth	r2, r2
    2142:	4618      	mov	r0, r3
    2144:	4b03      	ldr	r3, [pc, #12]	; (2154 <stdio_io_write+0x20>)
    2146:	4798      	blx	r3
    2148:	bd08      	pop	{r3, pc}
		return 0;
    214a:	2000      	movs	r0, #0
}
    214c:	bd08      	pop	{r3, pc}
    214e:	bf00      	nop
    2150:	200046a8 	.word	0x200046a8
    2154:	0000038d 	.word	0x0000038d

00002158 <__aeabi_drsub>:
    2158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    215c:	e002      	b.n	2164 <__adddf3>
    215e:	bf00      	nop

00002160 <__aeabi_dsub>:
    2160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00002164 <__adddf3>:
    2164:	b530      	push	{r4, r5, lr}
    2166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    216a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    216e:	ea94 0f05 	teq	r4, r5
    2172:	bf08      	it	eq
    2174:	ea90 0f02 	teqeq	r0, r2
    2178:	bf1f      	itttt	ne
    217a:	ea54 0c00 	orrsne.w	ip, r4, r0
    217e:	ea55 0c02 	orrsne.w	ip, r5, r2
    2182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    2186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    218a:	f000 80e2 	beq.w	2352 <__adddf3+0x1ee>
    218e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    2192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    2196:	bfb8      	it	lt
    2198:	426d      	neglt	r5, r5
    219a:	dd0c      	ble.n	21b6 <__adddf3+0x52>
    219c:	442c      	add	r4, r5
    219e:	ea80 0202 	eor.w	r2, r0, r2
    21a2:	ea81 0303 	eor.w	r3, r1, r3
    21a6:	ea82 0000 	eor.w	r0, r2, r0
    21aa:	ea83 0101 	eor.w	r1, r3, r1
    21ae:	ea80 0202 	eor.w	r2, r0, r2
    21b2:	ea81 0303 	eor.w	r3, r1, r3
    21b6:	2d36      	cmp	r5, #54	; 0x36
    21b8:	bf88      	it	hi
    21ba:	bd30      	pophi	{r4, r5, pc}
    21bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    21c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    21c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    21c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    21cc:	d002      	beq.n	21d4 <__adddf3+0x70>
    21ce:	4240      	negs	r0, r0
    21d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    21d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    21d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    21dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    21e0:	d002      	beq.n	21e8 <__adddf3+0x84>
    21e2:	4252      	negs	r2, r2
    21e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    21e8:	ea94 0f05 	teq	r4, r5
    21ec:	f000 80a7 	beq.w	233e <__adddf3+0x1da>
    21f0:	f1a4 0401 	sub.w	r4, r4, #1
    21f4:	f1d5 0e20 	rsbs	lr, r5, #32
    21f8:	db0d      	blt.n	2216 <__adddf3+0xb2>
    21fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    21fe:	fa22 f205 	lsr.w	r2, r2, r5
    2202:	1880      	adds	r0, r0, r2
    2204:	f141 0100 	adc.w	r1, r1, #0
    2208:	fa03 f20e 	lsl.w	r2, r3, lr
    220c:	1880      	adds	r0, r0, r2
    220e:	fa43 f305 	asr.w	r3, r3, r5
    2212:	4159      	adcs	r1, r3
    2214:	e00e      	b.n	2234 <__adddf3+0xd0>
    2216:	f1a5 0520 	sub.w	r5, r5, #32
    221a:	f10e 0e20 	add.w	lr, lr, #32
    221e:	2a01      	cmp	r2, #1
    2220:	fa03 fc0e 	lsl.w	ip, r3, lr
    2224:	bf28      	it	cs
    2226:	f04c 0c02 	orrcs.w	ip, ip, #2
    222a:	fa43 f305 	asr.w	r3, r3, r5
    222e:	18c0      	adds	r0, r0, r3
    2230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    2234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2238:	d507      	bpl.n	224a <__adddf3+0xe6>
    223a:	f04f 0e00 	mov.w	lr, #0
    223e:	f1dc 0c00 	rsbs	ip, ip, #0
    2242:	eb7e 0000 	sbcs.w	r0, lr, r0
    2246:	eb6e 0101 	sbc.w	r1, lr, r1
    224a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    224e:	d31b      	bcc.n	2288 <__adddf3+0x124>
    2250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    2254:	d30c      	bcc.n	2270 <__adddf3+0x10c>
    2256:	0849      	lsrs	r1, r1, #1
    2258:	ea5f 0030 	movs.w	r0, r0, rrx
    225c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    2260:	f104 0401 	add.w	r4, r4, #1
    2264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    2268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    226c:	f080 809a 	bcs.w	23a4 <__adddf3+0x240>
    2270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    2274:	bf08      	it	eq
    2276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    227a:	f150 0000 	adcs.w	r0, r0, #0
    227e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    2282:	ea41 0105 	orr.w	r1, r1, r5
    2286:	bd30      	pop	{r4, r5, pc}
    2288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    228c:	4140      	adcs	r0, r0
    228e:	eb41 0101 	adc.w	r1, r1, r1
    2292:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2296:	f1a4 0401 	sub.w	r4, r4, #1
    229a:	d1e9      	bne.n	2270 <__adddf3+0x10c>
    229c:	f091 0f00 	teq	r1, #0
    22a0:	bf04      	itt	eq
    22a2:	4601      	moveq	r1, r0
    22a4:	2000      	moveq	r0, #0
    22a6:	fab1 f381 	clz	r3, r1
    22aa:	bf08      	it	eq
    22ac:	3320      	addeq	r3, #32
    22ae:	f1a3 030b 	sub.w	r3, r3, #11
    22b2:	f1b3 0220 	subs.w	r2, r3, #32
    22b6:	da0c      	bge.n	22d2 <__adddf3+0x16e>
    22b8:	320c      	adds	r2, #12
    22ba:	dd08      	ble.n	22ce <__adddf3+0x16a>
    22bc:	f102 0c14 	add.w	ip, r2, #20
    22c0:	f1c2 020c 	rsb	r2, r2, #12
    22c4:	fa01 f00c 	lsl.w	r0, r1, ip
    22c8:	fa21 f102 	lsr.w	r1, r1, r2
    22cc:	e00c      	b.n	22e8 <__adddf3+0x184>
    22ce:	f102 0214 	add.w	r2, r2, #20
    22d2:	bfd8      	it	le
    22d4:	f1c2 0c20 	rsble	ip, r2, #32
    22d8:	fa01 f102 	lsl.w	r1, r1, r2
    22dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    22e0:	bfdc      	itt	le
    22e2:	ea41 010c 	orrle.w	r1, r1, ip
    22e6:	4090      	lslle	r0, r2
    22e8:	1ae4      	subs	r4, r4, r3
    22ea:	bfa2      	ittt	ge
    22ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    22f0:	4329      	orrge	r1, r5
    22f2:	bd30      	popge	{r4, r5, pc}
    22f4:	ea6f 0404 	mvn.w	r4, r4
    22f8:	3c1f      	subs	r4, #31
    22fa:	da1c      	bge.n	2336 <__adddf3+0x1d2>
    22fc:	340c      	adds	r4, #12
    22fe:	dc0e      	bgt.n	231e <__adddf3+0x1ba>
    2300:	f104 0414 	add.w	r4, r4, #20
    2304:	f1c4 0220 	rsb	r2, r4, #32
    2308:	fa20 f004 	lsr.w	r0, r0, r4
    230c:	fa01 f302 	lsl.w	r3, r1, r2
    2310:	ea40 0003 	orr.w	r0, r0, r3
    2314:	fa21 f304 	lsr.w	r3, r1, r4
    2318:	ea45 0103 	orr.w	r1, r5, r3
    231c:	bd30      	pop	{r4, r5, pc}
    231e:	f1c4 040c 	rsb	r4, r4, #12
    2322:	f1c4 0220 	rsb	r2, r4, #32
    2326:	fa20 f002 	lsr.w	r0, r0, r2
    232a:	fa01 f304 	lsl.w	r3, r1, r4
    232e:	ea40 0003 	orr.w	r0, r0, r3
    2332:	4629      	mov	r1, r5
    2334:	bd30      	pop	{r4, r5, pc}
    2336:	fa21 f004 	lsr.w	r0, r1, r4
    233a:	4629      	mov	r1, r5
    233c:	bd30      	pop	{r4, r5, pc}
    233e:	f094 0f00 	teq	r4, #0
    2342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    2346:	bf06      	itte	eq
    2348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    234c:	3401      	addeq	r4, #1
    234e:	3d01      	subne	r5, #1
    2350:	e74e      	b.n	21f0 <__adddf3+0x8c>
    2352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    2356:	bf18      	it	ne
    2358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    235c:	d029      	beq.n	23b2 <__adddf3+0x24e>
    235e:	ea94 0f05 	teq	r4, r5
    2362:	bf08      	it	eq
    2364:	ea90 0f02 	teqeq	r0, r2
    2368:	d005      	beq.n	2376 <__adddf3+0x212>
    236a:	ea54 0c00 	orrs.w	ip, r4, r0
    236e:	bf04      	itt	eq
    2370:	4619      	moveq	r1, r3
    2372:	4610      	moveq	r0, r2
    2374:	bd30      	pop	{r4, r5, pc}
    2376:	ea91 0f03 	teq	r1, r3
    237a:	bf1e      	ittt	ne
    237c:	2100      	movne	r1, #0
    237e:	2000      	movne	r0, #0
    2380:	bd30      	popne	{r4, r5, pc}
    2382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    2386:	d105      	bne.n	2394 <__adddf3+0x230>
    2388:	0040      	lsls	r0, r0, #1
    238a:	4149      	adcs	r1, r1
    238c:	bf28      	it	cs
    238e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    2392:	bd30      	pop	{r4, r5, pc}
    2394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    2398:	bf3c      	itt	cc
    239a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    239e:	bd30      	popcc	{r4, r5, pc}
    23a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    23a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    23a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    23ac:	f04f 0000 	mov.w	r0, #0
    23b0:	bd30      	pop	{r4, r5, pc}
    23b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    23b6:	bf1a      	itte	ne
    23b8:	4619      	movne	r1, r3
    23ba:	4610      	movne	r0, r2
    23bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    23c0:	bf1c      	itt	ne
    23c2:	460b      	movne	r3, r1
    23c4:	4602      	movne	r2, r0
    23c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    23ca:	bf06      	itte	eq
    23cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    23d0:	ea91 0f03 	teqeq	r1, r3
    23d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    23d8:	bd30      	pop	{r4, r5, pc}
    23da:	bf00      	nop

000023dc <__aeabi_ui2d>:
    23dc:	f090 0f00 	teq	r0, #0
    23e0:	bf04      	itt	eq
    23e2:	2100      	moveq	r1, #0
    23e4:	4770      	bxeq	lr
    23e6:	b530      	push	{r4, r5, lr}
    23e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    23ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    23f0:	f04f 0500 	mov.w	r5, #0
    23f4:	f04f 0100 	mov.w	r1, #0
    23f8:	e750      	b.n	229c <__adddf3+0x138>
    23fa:	bf00      	nop

000023fc <__aeabi_i2d>:
    23fc:	f090 0f00 	teq	r0, #0
    2400:	bf04      	itt	eq
    2402:	2100      	moveq	r1, #0
    2404:	4770      	bxeq	lr
    2406:	b530      	push	{r4, r5, lr}
    2408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    240c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    2414:	bf48      	it	mi
    2416:	4240      	negmi	r0, r0
    2418:	f04f 0100 	mov.w	r1, #0
    241c:	e73e      	b.n	229c <__adddf3+0x138>
    241e:	bf00      	nop

00002420 <__aeabi_f2d>:
    2420:	0042      	lsls	r2, r0, #1
    2422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    2426:	ea4f 0131 	mov.w	r1, r1, rrx
    242a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    242e:	bf1f      	itttt	ne
    2430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    2434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    243c:	4770      	bxne	lr
    243e:	f092 0f00 	teq	r2, #0
    2442:	bf14      	ite	ne
    2444:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2448:	4770      	bxeq	lr
    244a:	b530      	push	{r4, r5, lr}
    244c:	f44f 7460 	mov.w	r4, #896	; 0x380
    2450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2458:	e720      	b.n	229c <__adddf3+0x138>
    245a:	bf00      	nop

0000245c <__aeabi_ul2d>:
    245c:	ea50 0201 	orrs.w	r2, r0, r1
    2460:	bf08      	it	eq
    2462:	4770      	bxeq	lr
    2464:	b530      	push	{r4, r5, lr}
    2466:	f04f 0500 	mov.w	r5, #0
    246a:	e00a      	b.n	2482 <__aeabi_l2d+0x16>

0000246c <__aeabi_l2d>:
    246c:	ea50 0201 	orrs.w	r2, r0, r1
    2470:	bf08      	it	eq
    2472:	4770      	bxeq	lr
    2474:	b530      	push	{r4, r5, lr}
    2476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    247a:	d502      	bpl.n	2482 <__aeabi_l2d+0x16>
    247c:	4240      	negs	r0, r0
    247e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2482:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2486:	f104 0432 	add.w	r4, r4, #50	; 0x32
    248a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    248e:	f43f aedc 	beq.w	224a <__adddf3+0xe6>
    2492:	f04f 0203 	mov.w	r2, #3
    2496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    249a:	bf18      	it	ne
    249c:	3203      	addne	r2, #3
    249e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    24a2:	bf18      	it	ne
    24a4:	3203      	addne	r2, #3
    24a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    24aa:	f1c2 0320 	rsb	r3, r2, #32
    24ae:	fa00 fc03 	lsl.w	ip, r0, r3
    24b2:	fa20 f002 	lsr.w	r0, r0, r2
    24b6:	fa01 fe03 	lsl.w	lr, r1, r3
    24ba:	ea40 000e 	orr.w	r0, r0, lr
    24be:	fa21 f102 	lsr.w	r1, r1, r2
    24c2:	4414      	add	r4, r2
    24c4:	e6c1      	b.n	224a <__adddf3+0xe6>
    24c6:	bf00      	nop

000024c8 <__aeabi_dmul>:
    24c8:	b570      	push	{r4, r5, r6, lr}
    24ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    24ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    24d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    24d6:	bf1d      	ittte	ne
    24d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    24dc:	ea94 0f0c 	teqne	r4, ip
    24e0:	ea95 0f0c 	teqne	r5, ip
    24e4:	f000 f8de 	bleq	26a4 <__aeabi_dmul+0x1dc>
    24e8:	442c      	add	r4, r5
    24ea:	ea81 0603 	eor.w	r6, r1, r3
    24ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    24f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    24f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    24fa:	bf18      	it	ne
    24fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    2500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2508:	d038      	beq.n	257c <__aeabi_dmul+0xb4>
    250a:	fba0 ce02 	umull	ip, lr, r0, r2
    250e:	f04f 0500 	mov.w	r5, #0
    2512:	fbe1 e502 	umlal	lr, r5, r1, r2
    2516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    251a:	fbe0 e503 	umlal	lr, r5, r0, r3
    251e:	f04f 0600 	mov.w	r6, #0
    2522:	fbe1 5603 	umlal	r5, r6, r1, r3
    2526:	f09c 0f00 	teq	ip, #0
    252a:	bf18      	it	ne
    252c:	f04e 0e01 	orrne.w	lr, lr, #1
    2530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    2534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    2538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    253c:	d204      	bcs.n	2548 <__aeabi_dmul+0x80>
    253e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    2542:	416d      	adcs	r5, r5
    2544:	eb46 0606 	adc.w	r6, r6, r6
    2548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    254c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    2550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    2554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    2558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    255c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    2560:	bf88      	it	hi
    2562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    2566:	d81e      	bhi.n	25a6 <__aeabi_dmul+0xde>
    2568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    256c:	bf08      	it	eq
    256e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    2572:	f150 0000 	adcs.w	r0, r0, #0
    2576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    257a:	bd70      	pop	{r4, r5, r6, pc}
    257c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    2580:	ea46 0101 	orr.w	r1, r6, r1
    2584:	ea40 0002 	orr.w	r0, r0, r2
    2588:	ea81 0103 	eor.w	r1, r1, r3
    258c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    2590:	bfc2      	ittt	gt
    2592:	ebd4 050c 	rsbsgt	r5, r4, ip
    2596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    259a:	bd70      	popgt	{r4, r5, r6, pc}
    259c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    25a0:	f04f 0e00 	mov.w	lr, #0
    25a4:	3c01      	subs	r4, #1
    25a6:	f300 80ab 	bgt.w	2700 <__aeabi_dmul+0x238>
    25aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    25ae:	bfde      	ittt	le
    25b0:	2000      	movle	r0, #0
    25b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    25b6:	bd70      	pople	{r4, r5, r6, pc}
    25b8:	f1c4 0400 	rsb	r4, r4, #0
    25bc:	3c20      	subs	r4, #32
    25be:	da35      	bge.n	262c <__aeabi_dmul+0x164>
    25c0:	340c      	adds	r4, #12
    25c2:	dc1b      	bgt.n	25fc <__aeabi_dmul+0x134>
    25c4:	f104 0414 	add.w	r4, r4, #20
    25c8:	f1c4 0520 	rsb	r5, r4, #32
    25cc:	fa00 f305 	lsl.w	r3, r0, r5
    25d0:	fa20 f004 	lsr.w	r0, r0, r4
    25d4:	fa01 f205 	lsl.w	r2, r1, r5
    25d8:	ea40 0002 	orr.w	r0, r0, r2
    25dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    25e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    25e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    25e8:	fa21 f604 	lsr.w	r6, r1, r4
    25ec:	eb42 0106 	adc.w	r1, r2, r6
    25f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    25f4:	bf08      	it	eq
    25f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    25fa:	bd70      	pop	{r4, r5, r6, pc}
    25fc:	f1c4 040c 	rsb	r4, r4, #12
    2600:	f1c4 0520 	rsb	r5, r4, #32
    2604:	fa00 f304 	lsl.w	r3, r0, r4
    2608:	fa20 f005 	lsr.w	r0, r0, r5
    260c:	fa01 f204 	lsl.w	r2, r1, r4
    2610:	ea40 0002 	orr.w	r0, r0, r2
    2614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    261c:	f141 0100 	adc.w	r1, r1, #0
    2620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2624:	bf08      	it	eq
    2626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	f1c4 0520 	rsb	r5, r4, #32
    2630:	fa00 f205 	lsl.w	r2, r0, r5
    2634:	ea4e 0e02 	orr.w	lr, lr, r2
    2638:	fa20 f304 	lsr.w	r3, r0, r4
    263c:	fa01 f205 	lsl.w	r2, r1, r5
    2640:	ea43 0302 	orr.w	r3, r3, r2
    2644:	fa21 f004 	lsr.w	r0, r1, r4
    2648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    264c:	fa21 f204 	lsr.w	r2, r1, r4
    2650:	ea20 0002 	bic.w	r0, r0, r2
    2654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    2658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    265c:	bf08      	it	eq
    265e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	f094 0f00 	teq	r4, #0
    2668:	d10f      	bne.n	268a <__aeabi_dmul+0x1c2>
    266a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    266e:	0040      	lsls	r0, r0, #1
    2670:	eb41 0101 	adc.w	r1, r1, r1
    2674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2678:	bf08      	it	eq
    267a:	3c01      	subeq	r4, #1
    267c:	d0f7      	beq.n	266e <__aeabi_dmul+0x1a6>
    267e:	ea41 0106 	orr.w	r1, r1, r6
    2682:	f095 0f00 	teq	r5, #0
    2686:	bf18      	it	ne
    2688:	4770      	bxne	lr
    268a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    268e:	0052      	lsls	r2, r2, #1
    2690:	eb43 0303 	adc.w	r3, r3, r3
    2694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    2698:	bf08      	it	eq
    269a:	3d01      	subeq	r5, #1
    269c:	d0f7      	beq.n	268e <__aeabi_dmul+0x1c6>
    269e:	ea43 0306 	orr.w	r3, r3, r6
    26a2:	4770      	bx	lr
    26a4:	ea94 0f0c 	teq	r4, ip
    26a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    26ac:	bf18      	it	ne
    26ae:	ea95 0f0c 	teqne	r5, ip
    26b2:	d00c      	beq.n	26ce <__aeabi_dmul+0x206>
    26b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    26b8:	bf18      	it	ne
    26ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    26be:	d1d1      	bne.n	2664 <__aeabi_dmul+0x19c>
    26c0:	ea81 0103 	eor.w	r1, r1, r3
    26c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    26c8:	f04f 0000 	mov.w	r0, #0
    26cc:	bd70      	pop	{r4, r5, r6, pc}
    26ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    26d2:	bf06      	itte	eq
    26d4:	4610      	moveq	r0, r2
    26d6:	4619      	moveq	r1, r3
    26d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    26dc:	d019      	beq.n	2712 <__aeabi_dmul+0x24a>
    26de:	ea94 0f0c 	teq	r4, ip
    26e2:	d102      	bne.n	26ea <__aeabi_dmul+0x222>
    26e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    26e8:	d113      	bne.n	2712 <__aeabi_dmul+0x24a>
    26ea:	ea95 0f0c 	teq	r5, ip
    26ee:	d105      	bne.n	26fc <__aeabi_dmul+0x234>
    26f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    26f4:	bf1c      	itt	ne
    26f6:	4610      	movne	r0, r2
    26f8:	4619      	movne	r1, r3
    26fa:	d10a      	bne.n	2712 <__aeabi_dmul+0x24a>
    26fc:	ea81 0103 	eor.w	r1, r1, r3
    2700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    270c:	f04f 0000 	mov.w	r0, #0
    2710:	bd70      	pop	{r4, r5, r6, pc}
    2712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    271a:	bd70      	pop	{r4, r5, r6, pc}

0000271c <__aeabi_ddiv>:
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    272a:	bf1d      	ittte	ne
    272c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    2730:	ea94 0f0c 	teqne	r4, ip
    2734:	ea95 0f0c 	teqne	r5, ip
    2738:	f000 f8a7 	bleq	288a <__aeabi_ddiv+0x16e>
    273c:	eba4 0405 	sub.w	r4, r4, r5
    2740:	ea81 0e03 	eor.w	lr, r1, r3
    2744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    2748:	ea4f 3101 	mov.w	r1, r1, lsl #12
    274c:	f000 8088 	beq.w	2860 <__aeabi_ddiv+0x144>
    2750:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    2758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    275c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    2760:	ea4f 2202 	mov.w	r2, r2, lsl #8
    2764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    2768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    276c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    2770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    2774:	429d      	cmp	r5, r3
    2776:	bf08      	it	eq
    2778:	4296      	cmpeq	r6, r2
    277a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    277e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    2782:	d202      	bcs.n	278a <__aeabi_ddiv+0x6e>
    2784:	085b      	lsrs	r3, r3, #1
    2786:	ea4f 0232 	mov.w	r2, r2, rrx
    278a:	1ab6      	subs	r6, r6, r2
    278c:	eb65 0503 	sbc.w	r5, r5, r3
    2790:	085b      	lsrs	r3, r3, #1
    2792:	ea4f 0232 	mov.w	r2, r2, rrx
    2796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    279a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    279e:	ebb6 0e02 	subs.w	lr, r6, r2
    27a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    27a6:	bf22      	ittt	cs
    27a8:	1ab6      	subcs	r6, r6, r2
    27aa:	4675      	movcs	r5, lr
    27ac:	ea40 000c 	orrcs.w	r0, r0, ip
    27b0:	085b      	lsrs	r3, r3, #1
    27b2:	ea4f 0232 	mov.w	r2, r2, rrx
    27b6:	ebb6 0e02 	subs.w	lr, r6, r2
    27ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    27be:	bf22      	ittt	cs
    27c0:	1ab6      	subcs	r6, r6, r2
    27c2:	4675      	movcs	r5, lr
    27c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    27c8:	085b      	lsrs	r3, r3, #1
    27ca:	ea4f 0232 	mov.w	r2, r2, rrx
    27ce:	ebb6 0e02 	subs.w	lr, r6, r2
    27d2:	eb75 0e03 	sbcs.w	lr, r5, r3
    27d6:	bf22      	ittt	cs
    27d8:	1ab6      	subcs	r6, r6, r2
    27da:	4675      	movcs	r5, lr
    27dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    27e0:	085b      	lsrs	r3, r3, #1
    27e2:	ea4f 0232 	mov.w	r2, r2, rrx
    27e6:	ebb6 0e02 	subs.w	lr, r6, r2
    27ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    27ee:	bf22      	ittt	cs
    27f0:	1ab6      	subcs	r6, r6, r2
    27f2:	4675      	movcs	r5, lr
    27f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    27f8:	ea55 0e06 	orrs.w	lr, r5, r6
    27fc:	d018      	beq.n	2830 <__aeabi_ddiv+0x114>
    27fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
    2802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    2806:	ea4f 1606 	mov.w	r6, r6, lsl #4
    280a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    280e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    2812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    2816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    281a:	d1c0      	bne.n	279e <__aeabi_ddiv+0x82>
    281c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2820:	d10b      	bne.n	283a <__aeabi_ddiv+0x11e>
    2822:	ea41 0100 	orr.w	r1, r1, r0
    2826:	f04f 0000 	mov.w	r0, #0
    282a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    282e:	e7b6      	b.n	279e <__aeabi_ddiv+0x82>
    2830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2834:	bf04      	itt	eq
    2836:	4301      	orreq	r1, r0
    2838:	2000      	moveq	r0, #0
    283a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    283e:	bf88      	it	hi
    2840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    2844:	f63f aeaf 	bhi.w	25a6 <__aeabi_dmul+0xde>
    2848:	ebb5 0c03 	subs.w	ip, r5, r3
    284c:	bf04      	itt	eq
    284e:	ebb6 0c02 	subseq.w	ip, r6, r2
    2852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    2856:	f150 0000 	adcs.w	r0, r0, #0
    285a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    285e:	bd70      	pop	{r4, r5, r6, pc}
    2860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    2864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    2868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    286c:	bfc2      	ittt	gt
    286e:	ebd4 050c 	rsbsgt	r5, r4, ip
    2872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    2876:	bd70      	popgt	{r4, r5, r6, pc}
    2878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    287c:	f04f 0e00 	mov.w	lr, #0
    2880:	3c01      	subs	r4, #1
    2882:	e690      	b.n	25a6 <__aeabi_dmul+0xde>
    2884:	ea45 0e06 	orr.w	lr, r5, r6
    2888:	e68d      	b.n	25a6 <__aeabi_dmul+0xde>
    288a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    288e:	ea94 0f0c 	teq	r4, ip
    2892:	bf08      	it	eq
    2894:	ea95 0f0c 	teqeq	r5, ip
    2898:	f43f af3b 	beq.w	2712 <__aeabi_dmul+0x24a>
    289c:	ea94 0f0c 	teq	r4, ip
    28a0:	d10a      	bne.n	28b8 <__aeabi_ddiv+0x19c>
    28a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    28a6:	f47f af34 	bne.w	2712 <__aeabi_dmul+0x24a>
    28aa:	ea95 0f0c 	teq	r5, ip
    28ae:	f47f af25 	bne.w	26fc <__aeabi_dmul+0x234>
    28b2:	4610      	mov	r0, r2
    28b4:	4619      	mov	r1, r3
    28b6:	e72c      	b.n	2712 <__aeabi_dmul+0x24a>
    28b8:	ea95 0f0c 	teq	r5, ip
    28bc:	d106      	bne.n	28cc <__aeabi_ddiv+0x1b0>
    28be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    28c2:	f43f aefd 	beq.w	26c0 <__aeabi_dmul+0x1f8>
    28c6:	4610      	mov	r0, r2
    28c8:	4619      	mov	r1, r3
    28ca:	e722      	b.n	2712 <__aeabi_dmul+0x24a>
    28cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    28d0:	bf18      	it	ne
    28d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    28d6:	f47f aec5 	bne.w	2664 <__aeabi_dmul+0x19c>
    28da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    28de:	f47f af0d 	bne.w	26fc <__aeabi_dmul+0x234>
    28e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    28e6:	f47f aeeb 	bne.w	26c0 <__aeabi_dmul+0x1f8>
    28ea:	e712      	b.n	2712 <__aeabi_dmul+0x24a>

000028ec <__aeabi_d2uiz>:
    28ec:	004a      	lsls	r2, r1, #1
    28ee:	d211      	bcs.n	2914 <__aeabi_d2uiz+0x28>
    28f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    28f4:	d211      	bcs.n	291a <__aeabi_d2uiz+0x2e>
    28f6:	d50d      	bpl.n	2914 <__aeabi_d2uiz+0x28>
    28f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    28fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    2900:	d40e      	bmi.n	2920 <__aeabi_d2uiz+0x34>
    2902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    2906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    290a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    290e:	fa23 f002 	lsr.w	r0, r3, r2
    2912:	4770      	bx	lr
    2914:	f04f 0000 	mov.w	r0, #0
    2918:	4770      	bx	lr
    291a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    291e:	d102      	bne.n	2926 <__aeabi_d2uiz+0x3a>
    2920:	f04f 30ff 	mov.w	r0, #4294967295
    2924:	4770      	bx	lr
    2926:	f04f 0000 	mov.w	r0, #0
    292a:	4770      	bx	lr

0000292c <__sflush_r>:
    292c:	898a      	ldrh	r2, [r1, #12]
    292e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2932:	4605      	mov	r5, r0
    2934:	0710      	lsls	r0, r2, #28
    2936:	460c      	mov	r4, r1
    2938:	d45a      	bmi.n	29f0 <__sflush_r+0xc4>
    293a:	684b      	ldr	r3, [r1, #4]
    293c:	2b00      	cmp	r3, #0
    293e:	dc05      	bgt.n	294c <__sflush_r+0x20>
    2940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2942:	2b00      	cmp	r3, #0
    2944:	dc02      	bgt.n	294c <__sflush_r+0x20>
    2946:	2000      	movs	r0, #0
    2948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    294c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    294e:	2e00      	cmp	r6, #0
    2950:	d0f9      	beq.n	2946 <__sflush_r+0x1a>
    2952:	2300      	movs	r3, #0
    2954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    2958:	682f      	ldr	r7, [r5, #0]
    295a:	602b      	str	r3, [r5, #0]
    295c:	d033      	beq.n	29c6 <__sflush_r+0x9a>
    295e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2960:	89a3      	ldrh	r3, [r4, #12]
    2962:	075a      	lsls	r2, r3, #29
    2964:	d505      	bpl.n	2972 <__sflush_r+0x46>
    2966:	6863      	ldr	r3, [r4, #4]
    2968:	1ac0      	subs	r0, r0, r3
    296a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    296c:	b10b      	cbz	r3, 2972 <__sflush_r+0x46>
    296e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2970:	1ac0      	subs	r0, r0, r3
    2972:	2300      	movs	r3, #0
    2974:	4602      	mov	r2, r0
    2976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2978:	6a21      	ldr	r1, [r4, #32]
    297a:	4628      	mov	r0, r5
    297c:	47b0      	blx	r6
    297e:	1c43      	adds	r3, r0, #1
    2980:	89a3      	ldrh	r3, [r4, #12]
    2982:	d106      	bne.n	2992 <__sflush_r+0x66>
    2984:	6829      	ldr	r1, [r5, #0]
    2986:	291d      	cmp	r1, #29
    2988:	d84b      	bhi.n	2a22 <__sflush_r+0xf6>
    298a:	4a2b      	ldr	r2, [pc, #172]	; (2a38 <__sflush_r+0x10c>)
    298c:	40ca      	lsrs	r2, r1
    298e:	07d6      	lsls	r6, r2, #31
    2990:	d547      	bpl.n	2a22 <__sflush_r+0xf6>
    2992:	2200      	movs	r2, #0
    2994:	6062      	str	r2, [r4, #4]
    2996:	04d9      	lsls	r1, r3, #19
    2998:	6922      	ldr	r2, [r4, #16]
    299a:	6022      	str	r2, [r4, #0]
    299c:	d504      	bpl.n	29a8 <__sflush_r+0x7c>
    299e:	1c42      	adds	r2, r0, #1
    29a0:	d101      	bne.n	29a6 <__sflush_r+0x7a>
    29a2:	682b      	ldr	r3, [r5, #0]
    29a4:	b903      	cbnz	r3, 29a8 <__sflush_r+0x7c>
    29a6:	6560      	str	r0, [r4, #84]	; 0x54
    29a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    29aa:	602f      	str	r7, [r5, #0]
    29ac:	2900      	cmp	r1, #0
    29ae:	d0ca      	beq.n	2946 <__sflush_r+0x1a>
    29b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    29b4:	4299      	cmp	r1, r3
    29b6:	d002      	beq.n	29be <__sflush_r+0x92>
    29b8:	4628      	mov	r0, r5
    29ba:	f000 f98d 	bl	2cd8 <_free_r>
    29be:	2000      	movs	r0, #0
    29c0:	6360      	str	r0, [r4, #52]	; 0x34
    29c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29c6:	6a21      	ldr	r1, [r4, #32]
    29c8:	2301      	movs	r3, #1
    29ca:	4628      	mov	r0, r5
    29cc:	47b0      	blx	r6
    29ce:	1c41      	adds	r1, r0, #1
    29d0:	d1c6      	bne.n	2960 <__sflush_r+0x34>
    29d2:	682b      	ldr	r3, [r5, #0]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d0c3      	beq.n	2960 <__sflush_r+0x34>
    29d8:	2b1d      	cmp	r3, #29
    29da:	d001      	beq.n	29e0 <__sflush_r+0xb4>
    29dc:	2b16      	cmp	r3, #22
    29de:	d101      	bne.n	29e4 <__sflush_r+0xb8>
    29e0:	602f      	str	r7, [r5, #0]
    29e2:	e7b0      	b.n	2946 <__sflush_r+0x1a>
    29e4:	89a3      	ldrh	r3, [r4, #12]
    29e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    29ea:	81a3      	strh	r3, [r4, #12]
    29ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29f0:	690f      	ldr	r7, [r1, #16]
    29f2:	2f00      	cmp	r7, #0
    29f4:	d0a7      	beq.n	2946 <__sflush_r+0x1a>
    29f6:	0793      	lsls	r3, r2, #30
    29f8:	680e      	ldr	r6, [r1, #0]
    29fa:	bf08      	it	eq
    29fc:	694b      	ldreq	r3, [r1, #20]
    29fe:	600f      	str	r7, [r1, #0]
    2a00:	bf18      	it	ne
    2a02:	2300      	movne	r3, #0
    2a04:	eba6 0807 	sub.w	r8, r6, r7
    2a08:	608b      	str	r3, [r1, #8]
    2a0a:	f1b8 0f00 	cmp.w	r8, #0
    2a0e:	dd9a      	ble.n	2946 <__sflush_r+0x1a>
    2a10:	4643      	mov	r3, r8
    2a12:	463a      	mov	r2, r7
    2a14:	6a21      	ldr	r1, [r4, #32]
    2a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2a18:	4628      	mov	r0, r5
    2a1a:	47b0      	blx	r6
    2a1c:	2800      	cmp	r0, #0
    2a1e:	dc07      	bgt.n	2a30 <__sflush_r+0x104>
    2a20:	89a3      	ldrh	r3, [r4, #12]
    2a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a26:	81a3      	strh	r3, [r4, #12]
    2a28:	f04f 30ff 	mov.w	r0, #4294967295
    2a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a30:	4407      	add	r7, r0
    2a32:	eba8 0800 	sub.w	r8, r8, r0
    2a36:	e7e8      	b.n	2a0a <__sflush_r+0xde>
    2a38:	20400001 	.word	0x20400001

00002a3c <_fflush_r>:
    2a3c:	b538      	push	{r3, r4, r5, lr}
    2a3e:	690b      	ldr	r3, [r1, #16]
    2a40:	4605      	mov	r5, r0
    2a42:	460c      	mov	r4, r1
    2a44:	b1db      	cbz	r3, 2a7e <_fflush_r+0x42>
    2a46:	b118      	cbz	r0, 2a50 <_fflush_r+0x14>
    2a48:	6983      	ldr	r3, [r0, #24]
    2a4a:	b90b      	cbnz	r3, 2a50 <_fflush_r+0x14>
    2a4c:	f000 f872 	bl	2b34 <__sinit>
    2a50:	4b0c      	ldr	r3, [pc, #48]	; (2a84 <_fflush_r+0x48>)
    2a52:	429c      	cmp	r4, r3
    2a54:	d109      	bne.n	2a6a <_fflush_r+0x2e>
    2a56:	686c      	ldr	r4, [r5, #4]
    2a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2a5c:	b17b      	cbz	r3, 2a7e <_fflush_r+0x42>
    2a5e:	4621      	mov	r1, r4
    2a60:	4628      	mov	r0, r5
    2a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2a66:	f7ff bf61 	b.w	292c <__sflush_r>
    2a6a:	4b07      	ldr	r3, [pc, #28]	; (2a88 <_fflush_r+0x4c>)
    2a6c:	429c      	cmp	r4, r3
    2a6e:	d101      	bne.n	2a74 <_fflush_r+0x38>
    2a70:	68ac      	ldr	r4, [r5, #8]
    2a72:	e7f1      	b.n	2a58 <_fflush_r+0x1c>
    2a74:	4b05      	ldr	r3, [pc, #20]	; (2a8c <_fflush_r+0x50>)
    2a76:	429c      	cmp	r4, r3
    2a78:	bf08      	it	eq
    2a7a:	68ec      	ldreq	r4, [r5, #12]
    2a7c:	e7ec      	b.n	2a58 <_fflush_r+0x1c>
    2a7e:	2000      	movs	r0, #0
    2a80:	bd38      	pop	{r3, r4, r5, pc}
    2a82:	bf00      	nop
    2a84:	00005184 	.word	0x00005184
    2a88:	000051a4 	.word	0x000051a4
    2a8c:	00005164 	.word	0x00005164

00002a90 <fflush>:
    2a90:	4601      	mov	r1, r0
    2a92:	b920      	cbnz	r0, 2a9e <fflush+0xe>
    2a94:	4b04      	ldr	r3, [pc, #16]	; (2aa8 <fflush+0x18>)
    2a96:	4905      	ldr	r1, [pc, #20]	; (2aac <fflush+0x1c>)
    2a98:	6818      	ldr	r0, [r3, #0]
    2a9a:	f000 b8d3 	b.w	2c44 <_fwalk_reent>
    2a9e:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <fflush+0x20>)
    2aa0:	6818      	ldr	r0, [r3, #0]
    2aa2:	f7ff bfcb 	b.w	2a3c <_fflush_r>
    2aa6:	bf00      	nop
    2aa8:	000051c4 	.word	0x000051c4
    2aac:	00002a3d 	.word	0x00002a3d
    2ab0:	2000026c 	.word	0x2000026c

00002ab4 <_cleanup_r>:
    2ab4:	4901      	ldr	r1, [pc, #4]	; (2abc <_cleanup_r+0x8>)
    2ab6:	f000 b8c5 	b.w	2c44 <_fwalk_reent>
    2aba:	bf00      	nop
    2abc:	00002a3d 	.word	0x00002a3d

00002ac0 <std.isra.0>:
    2ac0:	2300      	movs	r3, #0
    2ac2:	b510      	push	{r4, lr}
    2ac4:	4604      	mov	r4, r0
    2ac6:	6003      	str	r3, [r0, #0]
    2ac8:	6043      	str	r3, [r0, #4]
    2aca:	6083      	str	r3, [r0, #8]
    2acc:	8181      	strh	r1, [r0, #12]
    2ace:	6643      	str	r3, [r0, #100]	; 0x64
    2ad0:	81c2      	strh	r2, [r0, #14]
    2ad2:	6103      	str	r3, [r0, #16]
    2ad4:	6143      	str	r3, [r0, #20]
    2ad6:	6183      	str	r3, [r0, #24]
    2ad8:	4619      	mov	r1, r3
    2ada:	2208      	movs	r2, #8
    2adc:	305c      	adds	r0, #92	; 0x5c
    2ade:	f000 f8f3 	bl	2cc8 <memset>
    2ae2:	4b05      	ldr	r3, [pc, #20]	; (2af8 <std.isra.0+0x38>)
    2ae4:	6263      	str	r3, [r4, #36]	; 0x24
    2ae6:	4b05      	ldr	r3, [pc, #20]	; (2afc <std.isra.0+0x3c>)
    2ae8:	62a3      	str	r3, [r4, #40]	; 0x28
    2aea:	4b05      	ldr	r3, [pc, #20]	; (2b00 <std.isra.0+0x40>)
    2aec:	62e3      	str	r3, [r4, #44]	; 0x2c
    2aee:	4b05      	ldr	r3, [pc, #20]	; (2b04 <std.isra.0+0x44>)
    2af0:	6224      	str	r4, [r4, #32]
    2af2:	6323      	str	r3, [r4, #48]	; 0x30
    2af4:	bd10      	pop	{r4, pc}
    2af6:	bf00      	nop
    2af8:	00003195 	.word	0x00003195
    2afc:	000031b7 	.word	0x000031b7
    2b00:	000031ef 	.word	0x000031ef
    2b04:	00003213 	.word	0x00003213

00002b08 <__sfmoreglue>:
    2b08:	b570      	push	{r4, r5, r6, lr}
    2b0a:	1e4a      	subs	r2, r1, #1
    2b0c:	2568      	movs	r5, #104	; 0x68
    2b0e:	4355      	muls	r5, r2
    2b10:	460e      	mov	r6, r1
    2b12:	f105 0174 	add.w	r1, r5, #116	; 0x74
    2b16:	f000 f92d 	bl	2d74 <_malloc_r>
    2b1a:	4604      	mov	r4, r0
    2b1c:	b140      	cbz	r0, 2b30 <__sfmoreglue+0x28>
    2b1e:	2100      	movs	r1, #0
    2b20:	e880 0042 	stmia.w	r0, {r1, r6}
    2b24:	300c      	adds	r0, #12
    2b26:	60a0      	str	r0, [r4, #8]
    2b28:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2b2c:	f000 f8cc 	bl	2cc8 <memset>
    2b30:	4620      	mov	r0, r4
    2b32:	bd70      	pop	{r4, r5, r6, pc}

00002b34 <__sinit>:
    2b34:	6983      	ldr	r3, [r0, #24]
    2b36:	b510      	push	{r4, lr}
    2b38:	4604      	mov	r4, r0
    2b3a:	bb33      	cbnz	r3, 2b8a <__sinit+0x56>
    2b3c:	6483      	str	r3, [r0, #72]	; 0x48
    2b3e:	64c3      	str	r3, [r0, #76]	; 0x4c
    2b40:	6503      	str	r3, [r0, #80]	; 0x50
    2b42:	4b12      	ldr	r3, [pc, #72]	; (2b8c <__sinit+0x58>)
    2b44:	4a12      	ldr	r2, [pc, #72]	; (2b90 <__sinit+0x5c>)
    2b46:	681b      	ldr	r3, [r3, #0]
    2b48:	6282      	str	r2, [r0, #40]	; 0x28
    2b4a:	4298      	cmp	r0, r3
    2b4c:	bf04      	itt	eq
    2b4e:	2301      	moveq	r3, #1
    2b50:	6183      	streq	r3, [r0, #24]
    2b52:	f000 f81f 	bl	2b94 <__sfp>
    2b56:	6060      	str	r0, [r4, #4]
    2b58:	4620      	mov	r0, r4
    2b5a:	f000 f81b 	bl	2b94 <__sfp>
    2b5e:	60a0      	str	r0, [r4, #8]
    2b60:	4620      	mov	r0, r4
    2b62:	f000 f817 	bl	2b94 <__sfp>
    2b66:	2200      	movs	r2, #0
    2b68:	60e0      	str	r0, [r4, #12]
    2b6a:	2104      	movs	r1, #4
    2b6c:	6860      	ldr	r0, [r4, #4]
    2b6e:	f7ff ffa7 	bl	2ac0 <std.isra.0>
    2b72:	2201      	movs	r2, #1
    2b74:	2109      	movs	r1, #9
    2b76:	68a0      	ldr	r0, [r4, #8]
    2b78:	f7ff ffa2 	bl	2ac0 <std.isra.0>
    2b7c:	2202      	movs	r2, #2
    2b7e:	2112      	movs	r1, #18
    2b80:	68e0      	ldr	r0, [r4, #12]
    2b82:	f7ff ff9d 	bl	2ac0 <std.isra.0>
    2b86:	2301      	movs	r3, #1
    2b88:	61a3      	str	r3, [r4, #24]
    2b8a:	bd10      	pop	{r4, pc}
    2b8c:	000051c4 	.word	0x000051c4
    2b90:	00002ab5 	.word	0x00002ab5

00002b94 <__sfp>:
    2b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b96:	4b1c      	ldr	r3, [pc, #112]	; (2c08 <__sfp+0x74>)
    2b98:	681e      	ldr	r6, [r3, #0]
    2b9a:	69b3      	ldr	r3, [r6, #24]
    2b9c:	4607      	mov	r7, r0
    2b9e:	b913      	cbnz	r3, 2ba6 <__sfp+0x12>
    2ba0:	4630      	mov	r0, r6
    2ba2:	f7ff ffc7 	bl	2b34 <__sinit>
    2ba6:	3648      	adds	r6, #72	; 0x48
    2ba8:	68b4      	ldr	r4, [r6, #8]
    2baa:	6873      	ldr	r3, [r6, #4]
    2bac:	3b01      	subs	r3, #1
    2bae:	d503      	bpl.n	2bb8 <__sfp+0x24>
    2bb0:	6833      	ldr	r3, [r6, #0]
    2bb2:	b133      	cbz	r3, 2bc2 <__sfp+0x2e>
    2bb4:	6836      	ldr	r6, [r6, #0]
    2bb6:	e7f7      	b.n	2ba8 <__sfp+0x14>
    2bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    2bbc:	b16d      	cbz	r5, 2bda <__sfp+0x46>
    2bbe:	3468      	adds	r4, #104	; 0x68
    2bc0:	e7f4      	b.n	2bac <__sfp+0x18>
    2bc2:	2104      	movs	r1, #4
    2bc4:	4638      	mov	r0, r7
    2bc6:	f7ff ff9f 	bl	2b08 <__sfmoreglue>
    2bca:	6030      	str	r0, [r6, #0]
    2bcc:	2800      	cmp	r0, #0
    2bce:	d1f1      	bne.n	2bb4 <__sfp+0x20>
    2bd0:	230c      	movs	r3, #12
    2bd2:	603b      	str	r3, [r7, #0]
    2bd4:	4604      	mov	r4, r0
    2bd6:	4620      	mov	r0, r4
    2bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bde:	81e3      	strh	r3, [r4, #14]
    2be0:	2301      	movs	r3, #1
    2be2:	81a3      	strh	r3, [r4, #12]
    2be4:	6665      	str	r5, [r4, #100]	; 0x64
    2be6:	6025      	str	r5, [r4, #0]
    2be8:	60a5      	str	r5, [r4, #8]
    2bea:	6065      	str	r5, [r4, #4]
    2bec:	6125      	str	r5, [r4, #16]
    2bee:	6165      	str	r5, [r4, #20]
    2bf0:	61a5      	str	r5, [r4, #24]
    2bf2:	2208      	movs	r2, #8
    2bf4:	4629      	mov	r1, r5
    2bf6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2bfa:	f000 f865 	bl	2cc8 <memset>
    2bfe:	6365      	str	r5, [r4, #52]	; 0x34
    2c00:	63a5      	str	r5, [r4, #56]	; 0x38
    2c02:	64a5      	str	r5, [r4, #72]	; 0x48
    2c04:	64e5      	str	r5, [r4, #76]	; 0x4c
    2c06:	e7e6      	b.n	2bd6 <__sfp+0x42>
    2c08:	000051c4 	.word	0x000051c4

00002c0c <_fwalk>:
    2c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c10:	4688      	mov	r8, r1
    2c12:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2c16:	2600      	movs	r6, #0
    2c18:	b914      	cbnz	r4, 2c20 <_fwalk+0x14>
    2c1a:	4630      	mov	r0, r6
    2c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c20:	68a5      	ldr	r5, [r4, #8]
    2c22:	6867      	ldr	r7, [r4, #4]
    2c24:	3f01      	subs	r7, #1
    2c26:	d501      	bpl.n	2c2c <_fwalk+0x20>
    2c28:	6824      	ldr	r4, [r4, #0]
    2c2a:	e7f5      	b.n	2c18 <_fwalk+0xc>
    2c2c:	89ab      	ldrh	r3, [r5, #12]
    2c2e:	2b01      	cmp	r3, #1
    2c30:	d906      	bls.n	2c40 <_fwalk+0x34>
    2c32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2c36:	3301      	adds	r3, #1
    2c38:	d002      	beq.n	2c40 <_fwalk+0x34>
    2c3a:	4628      	mov	r0, r5
    2c3c:	47c0      	blx	r8
    2c3e:	4306      	orrs	r6, r0
    2c40:	3568      	adds	r5, #104	; 0x68
    2c42:	e7ef      	b.n	2c24 <_fwalk+0x18>

00002c44 <_fwalk_reent>:
    2c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2c48:	4680      	mov	r8, r0
    2c4a:	4689      	mov	r9, r1
    2c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2c50:	2600      	movs	r6, #0
    2c52:	b914      	cbnz	r4, 2c5a <_fwalk_reent+0x16>
    2c54:	4630      	mov	r0, r6
    2c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c5a:	68a5      	ldr	r5, [r4, #8]
    2c5c:	6867      	ldr	r7, [r4, #4]
    2c5e:	3f01      	subs	r7, #1
    2c60:	d501      	bpl.n	2c66 <_fwalk_reent+0x22>
    2c62:	6824      	ldr	r4, [r4, #0]
    2c64:	e7f5      	b.n	2c52 <_fwalk_reent+0xe>
    2c66:	89ab      	ldrh	r3, [r5, #12]
    2c68:	2b01      	cmp	r3, #1
    2c6a:	d907      	bls.n	2c7c <_fwalk_reent+0x38>
    2c6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2c70:	3301      	adds	r3, #1
    2c72:	d003      	beq.n	2c7c <_fwalk_reent+0x38>
    2c74:	4629      	mov	r1, r5
    2c76:	4640      	mov	r0, r8
    2c78:	47c8      	blx	r9
    2c7a:	4306      	orrs	r6, r0
    2c7c:	3568      	adds	r5, #104	; 0x68
    2c7e:	e7ee      	b.n	2c5e <_fwalk_reent+0x1a>

00002c80 <__libc_init_array>:
    2c80:	b570      	push	{r4, r5, r6, lr}
    2c82:	4e0d      	ldr	r6, [pc, #52]	; (2cb8 <__libc_init_array+0x38>)
    2c84:	4c0d      	ldr	r4, [pc, #52]	; (2cbc <__libc_init_array+0x3c>)
    2c86:	1ba4      	subs	r4, r4, r6
    2c88:	10a4      	asrs	r4, r4, #2
    2c8a:	2500      	movs	r5, #0
    2c8c:	42a5      	cmp	r5, r4
    2c8e:	d109      	bne.n	2ca4 <__libc_init_array+0x24>
    2c90:	4e0b      	ldr	r6, [pc, #44]	; (2cc0 <__libc_init_array+0x40>)
    2c92:	4c0c      	ldr	r4, [pc, #48]	; (2cc4 <__libc_init_array+0x44>)
    2c94:	f002 fb4c 	bl	5330 <_init>
    2c98:	1ba4      	subs	r4, r4, r6
    2c9a:	10a4      	asrs	r4, r4, #2
    2c9c:	2500      	movs	r5, #0
    2c9e:	42a5      	cmp	r5, r4
    2ca0:	d105      	bne.n	2cae <__libc_init_array+0x2e>
    2ca2:	bd70      	pop	{r4, r5, r6, pc}
    2ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2ca8:	4798      	blx	r3
    2caa:	3501      	adds	r5, #1
    2cac:	e7ee      	b.n	2c8c <__libc_init_array+0xc>
    2cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2cb2:	4798      	blx	r3
    2cb4:	3501      	adds	r5, #1
    2cb6:	e7f2      	b.n	2c9e <__libc_init_array+0x1e>
    2cb8:	0000533c 	.word	0x0000533c
    2cbc:	0000533c 	.word	0x0000533c
    2cc0:	0000533c 	.word	0x0000533c
    2cc4:	00005340 	.word	0x00005340

00002cc8 <memset>:
    2cc8:	4402      	add	r2, r0
    2cca:	4603      	mov	r3, r0
    2ccc:	4293      	cmp	r3, r2
    2cce:	d100      	bne.n	2cd2 <memset+0xa>
    2cd0:	4770      	bx	lr
    2cd2:	f803 1b01 	strb.w	r1, [r3], #1
    2cd6:	e7f9      	b.n	2ccc <memset+0x4>

00002cd8 <_free_r>:
    2cd8:	b538      	push	{r3, r4, r5, lr}
    2cda:	4605      	mov	r5, r0
    2cdc:	2900      	cmp	r1, #0
    2cde:	d045      	beq.n	2d6c <_free_r+0x94>
    2ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2ce4:	1f0c      	subs	r4, r1, #4
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	bfb8      	it	lt
    2cea:	18e4      	addlt	r4, r4, r3
    2cec:	f000 fbf6 	bl	34dc <__malloc_lock>
    2cf0:	4a1f      	ldr	r2, [pc, #124]	; (2d70 <_free_r+0x98>)
    2cf2:	6813      	ldr	r3, [r2, #0]
    2cf4:	4610      	mov	r0, r2
    2cf6:	b933      	cbnz	r3, 2d06 <_free_r+0x2e>
    2cf8:	6063      	str	r3, [r4, #4]
    2cfa:	6014      	str	r4, [r2, #0]
    2cfc:	4628      	mov	r0, r5
    2cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2d02:	f000 bbec 	b.w	34de <__malloc_unlock>
    2d06:	42a3      	cmp	r3, r4
    2d08:	d90c      	bls.n	2d24 <_free_r+0x4c>
    2d0a:	6821      	ldr	r1, [r4, #0]
    2d0c:	1862      	adds	r2, r4, r1
    2d0e:	4293      	cmp	r3, r2
    2d10:	bf04      	itt	eq
    2d12:	681a      	ldreq	r2, [r3, #0]
    2d14:	685b      	ldreq	r3, [r3, #4]
    2d16:	6063      	str	r3, [r4, #4]
    2d18:	bf04      	itt	eq
    2d1a:	1852      	addeq	r2, r2, r1
    2d1c:	6022      	streq	r2, [r4, #0]
    2d1e:	6004      	str	r4, [r0, #0]
    2d20:	e7ec      	b.n	2cfc <_free_r+0x24>
    2d22:	4613      	mov	r3, r2
    2d24:	685a      	ldr	r2, [r3, #4]
    2d26:	b10a      	cbz	r2, 2d2c <_free_r+0x54>
    2d28:	42a2      	cmp	r2, r4
    2d2a:	d9fa      	bls.n	2d22 <_free_r+0x4a>
    2d2c:	6819      	ldr	r1, [r3, #0]
    2d2e:	1858      	adds	r0, r3, r1
    2d30:	42a0      	cmp	r0, r4
    2d32:	d10b      	bne.n	2d4c <_free_r+0x74>
    2d34:	6820      	ldr	r0, [r4, #0]
    2d36:	4401      	add	r1, r0
    2d38:	1858      	adds	r0, r3, r1
    2d3a:	4282      	cmp	r2, r0
    2d3c:	6019      	str	r1, [r3, #0]
    2d3e:	d1dd      	bne.n	2cfc <_free_r+0x24>
    2d40:	6810      	ldr	r0, [r2, #0]
    2d42:	6852      	ldr	r2, [r2, #4]
    2d44:	605a      	str	r2, [r3, #4]
    2d46:	4401      	add	r1, r0
    2d48:	6019      	str	r1, [r3, #0]
    2d4a:	e7d7      	b.n	2cfc <_free_r+0x24>
    2d4c:	d902      	bls.n	2d54 <_free_r+0x7c>
    2d4e:	230c      	movs	r3, #12
    2d50:	602b      	str	r3, [r5, #0]
    2d52:	e7d3      	b.n	2cfc <_free_r+0x24>
    2d54:	6820      	ldr	r0, [r4, #0]
    2d56:	1821      	adds	r1, r4, r0
    2d58:	428a      	cmp	r2, r1
    2d5a:	bf04      	itt	eq
    2d5c:	6811      	ldreq	r1, [r2, #0]
    2d5e:	6852      	ldreq	r2, [r2, #4]
    2d60:	6062      	str	r2, [r4, #4]
    2d62:	bf04      	itt	eq
    2d64:	1809      	addeq	r1, r1, r0
    2d66:	6021      	streq	r1, [r4, #0]
    2d68:	605c      	str	r4, [r3, #4]
    2d6a:	e7c7      	b.n	2cfc <_free_r+0x24>
    2d6c:	bd38      	pop	{r3, r4, r5, pc}
    2d6e:	bf00      	nop
    2d70:	200046ac 	.word	0x200046ac

00002d74 <_malloc_r>:
    2d74:	b570      	push	{r4, r5, r6, lr}
    2d76:	1ccd      	adds	r5, r1, #3
    2d78:	f025 0503 	bic.w	r5, r5, #3
    2d7c:	3508      	adds	r5, #8
    2d7e:	2d0c      	cmp	r5, #12
    2d80:	bf38      	it	cc
    2d82:	250c      	movcc	r5, #12
    2d84:	2d00      	cmp	r5, #0
    2d86:	4606      	mov	r6, r0
    2d88:	db01      	blt.n	2d8e <_malloc_r+0x1a>
    2d8a:	42a9      	cmp	r1, r5
    2d8c:	d903      	bls.n	2d96 <_malloc_r+0x22>
    2d8e:	230c      	movs	r3, #12
    2d90:	6033      	str	r3, [r6, #0]
    2d92:	2000      	movs	r0, #0
    2d94:	bd70      	pop	{r4, r5, r6, pc}
    2d96:	f000 fba1 	bl	34dc <__malloc_lock>
    2d9a:	4a23      	ldr	r2, [pc, #140]	; (2e28 <_malloc_r+0xb4>)
    2d9c:	6814      	ldr	r4, [r2, #0]
    2d9e:	4621      	mov	r1, r4
    2da0:	b991      	cbnz	r1, 2dc8 <_malloc_r+0x54>
    2da2:	4c22      	ldr	r4, [pc, #136]	; (2e2c <_malloc_r+0xb8>)
    2da4:	6823      	ldr	r3, [r4, #0]
    2da6:	b91b      	cbnz	r3, 2db0 <_malloc_r+0x3c>
    2da8:	4630      	mov	r0, r6
    2daa:	f000 f8bd 	bl	2f28 <_sbrk_r>
    2dae:	6020      	str	r0, [r4, #0]
    2db0:	4629      	mov	r1, r5
    2db2:	4630      	mov	r0, r6
    2db4:	f000 f8b8 	bl	2f28 <_sbrk_r>
    2db8:	1c43      	adds	r3, r0, #1
    2dba:	d126      	bne.n	2e0a <_malloc_r+0x96>
    2dbc:	230c      	movs	r3, #12
    2dbe:	6033      	str	r3, [r6, #0]
    2dc0:	4630      	mov	r0, r6
    2dc2:	f000 fb8c 	bl	34de <__malloc_unlock>
    2dc6:	e7e4      	b.n	2d92 <_malloc_r+0x1e>
    2dc8:	680b      	ldr	r3, [r1, #0]
    2dca:	1b5b      	subs	r3, r3, r5
    2dcc:	d41a      	bmi.n	2e04 <_malloc_r+0x90>
    2dce:	2b0b      	cmp	r3, #11
    2dd0:	d90f      	bls.n	2df2 <_malloc_r+0x7e>
    2dd2:	600b      	str	r3, [r1, #0]
    2dd4:	50cd      	str	r5, [r1, r3]
    2dd6:	18cc      	adds	r4, r1, r3
    2dd8:	4630      	mov	r0, r6
    2dda:	f000 fb80 	bl	34de <__malloc_unlock>
    2dde:	f104 000b 	add.w	r0, r4, #11
    2de2:	1d23      	adds	r3, r4, #4
    2de4:	f020 0007 	bic.w	r0, r0, #7
    2de8:	1ac3      	subs	r3, r0, r3
    2dea:	d01b      	beq.n	2e24 <_malloc_r+0xb0>
    2dec:	425a      	negs	r2, r3
    2dee:	50e2      	str	r2, [r4, r3]
    2df0:	bd70      	pop	{r4, r5, r6, pc}
    2df2:	428c      	cmp	r4, r1
    2df4:	bf0d      	iteet	eq
    2df6:	6863      	ldreq	r3, [r4, #4]
    2df8:	684b      	ldrne	r3, [r1, #4]
    2dfa:	6063      	strne	r3, [r4, #4]
    2dfc:	6013      	streq	r3, [r2, #0]
    2dfe:	bf18      	it	ne
    2e00:	460c      	movne	r4, r1
    2e02:	e7e9      	b.n	2dd8 <_malloc_r+0x64>
    2e04:	460c      	mov	r4, r1
    2e06:	6849      	ldr	r1, [r1, #4]
    2e08:	e7ca      	b.n	2da0 <_malloc_r+0x2c>
    2e0a:	1cc4      	adds	r4, r0, #3
    2e0c:	f024 0403 	bic.w	r4, r4, #3
    2e10:	42a0      	cmp	r0, r4
    2e12:	d005      	beq.n	2e20 <_malloc_r+0xac>
    2e14:	1a21      	subs	r1, r4, r0
    2e16:	4630      	mov	r0, r6
    2e18:	f000 f886 	bl	2f28 <_sbrk_r>
    2e1c:	3001      	adds	r0, #1
    2e1e:	d0cd      	beq.n	2dbc <_malloc_r+0x48>
    2e20:	6025      	str	r5, [r4, #0]
    2e22:	e7d9      	b.n	2dd8 <_malloc_r+0x64>
    2e24:	bd70      	pop	{r4, r5, r6, pc}
    2e26:	bf00      	nop
    2e28:	200046ac 	.word	0x200046ac
    2e2c:	200046b0 	.word	0x200046b0

00002e30 <iprintf>:
    2e30:	b40f      	push	{r0, r1, r2, r3}
    2e32:	4b0a      	ldr	r3, [pc, #40]	; (2e5c <iprintf+0x2c>)
    2e34:	b513      	push	{r0, r1, r4, lr}
    2e36:	681c      	ldr	r4, [r3, #0]
    2e38:	b124      	cbz	r4, 2e44 <iprintf+0x14>
    2e3a:	69a3      	ldr	r3, [r4, #24]
    2e3c:	b913      	cbnz	r3, 2e44 <iprintf+0x14>
    2e3e:	4620      	mov	r0, r4
    2e40:	f7ff fe78 	bl	2b34 <__sinit>
    2e44:	ab05      	add	r3, sp, #20
    2e46:	9a04      	ldr	r2, [sp, #16]
    2e48:	68a1      	ldr	r1, [r4, #8]
    2e4a:	9301      	str	r3, [sp, #4]
    2e4c:	4620      	mov	r0, r4
    2e4e:	f000 fcbf 	bl	37d0 <_vfiprintf_r>
    2e52:	b002      	add	sp, #8
    2e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2e58:	b004      	add	sp, #16
    2e5a:	4770      	bx	lr
    2e5c:	2000026c 	.word	0x2000026c

00002e60 <_puts_r>:
    2e60:	b570      	push	{r4, r5, r6, lr}
    2e62:	460e      	mov	r6, r1
    2e64:	4605      	mov	r5, r0
    2e66:	b118      	cbz	r0, 2e70 <_puts_r+0x10>
    2e68:	6983      	ldr	r3, [r0, #24]
    2e6a:	b90b      	cbnz	r3, 2e70 <_puts_r+0x10>
    2e6c:	f7ff fe62 	bl	2b34 <__sinit>
    2e70:	69ab      	ldr	r3, [r5, #24]
    2e72:	68ac      	ldr	r4, [r5, #8]
    2e74:	b913      	cbnz	r3, 2e7c <_puts_r+0x1c>
    2e76:	4628      	mov	r0, r5
    2e78:	f7ff fe5c 	bl	2b34 <__sinit>
    2e7c:	4b23      	ldr	r3, [pc, #140]	; (2f0c <_puts_r+0xac>)
    2e7e:	429c      	cmp	r4, r3
    2e80:	d117      	bne.n	2eb2 <_puts_r+0x52>
    2e82:	686c      	ldr	r4, [r5, #4]
    2e84:	89a3      	ldrh	r3, [r4, #12]
    2e86:	071b      	lsls	r3, r3, #28
    2e88:	d51d      	bpl.n	2ec6 <_puts_r+0x66>
    2e8a:	6923      	ldr	r3, [r4, #16]
    2e8c:	b1db      	cbz	r3, 2ec6 <_puts_r+0x66>
    2e8e:	3e01      	subs	r6, #1
    2e90:	68a3      	ldr	r3, [r4, #8]
    2e92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2e96:	3b01      	subs	r3, #1
    2e98:	60a3      	str	r3, [r4, #8]
    2e9a:	b9e9      	cbnz	r1, 2ed8 <_puts_r+0x78>
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	da2e      	bge.n	2efe <_puts_r+0x9e>
    2ea0:	4622      	mov	r2, r4
    2ea2:	210a      	movs	r1, #10
    2ea4:	4628      	mov	r0, r5
    2ea6:	f000 f9b9 	bl	321c <__swbuf_r>
    2eaa:	3001      	adds	r0, #1
    2eac:	d011      	beq.n	2ed2 <_puts_r+0x72>
    2eae:	200a      	movs	r0, #10
    2eb0:	bd70      	pop	{r4, r5, r6, pc}
    2eb2:	4b17      	ldr	r3, [pc, #92]	; (2f10 <_puts_r+0xb0>)
    2eb4:	429c      	cmp	r4, r3
    2eb6:	d101      	bne.n	2ebc <_puts_r+0x5c>
    2eb8:	68ac      	ldr	r4, [r5, #8]
    2eba:	e7e3      	b.n	2e84 <_puts_r+0x24>
    2ebc:	4b15      	ldr	r3, [pc, #84]	; (2f14 <_puts_r+0xb4>)
    2ebe:	429c      	cmp	r4, r3
    2ec0:	bf08      	it	eq
    2ec2:	68ec      	ldreq	r4, [r5, #12]
    2ec4:	e7de      	b.n	2e84 <_puts_r+0x24>
    2ec6:	4621      	mov	r1, r4
    2ec8:	4628      	mov	r0, r5
    2eca:	f000 fa0b 	bl	32e4 <__swsetup_r>
    2ece:	2800      	cmp	r0, #0
    2ed0:	d0dd      	beq.n	2e8e <_puts_r+0x2e>
    2ed2:	f04f 30ff 	mov.w	r0, #4294967295
    2ed6:	bd70      	pop	{r4, r5, r6, pc}
    2ed8:	2b00      	cmp	r3, #0
    2eda:	da04      	bge.n	2ee6 <_puts_r+0x86>
    2edc:	69a2      	ldr	r2, [r4, #24]
    2ede:	4293      	cmp	r3, r2
    2ee0:	db06      	blt.n	2ef0 <_puts_r+0x90>
    2ee2:	290a      	cmp	r1, #10
    2ee4:	d004      	beq.n	2ef0 <_puts_r+0x90>
    2ee6:	6823      	ldr	r3, [r4, #0]
    2ee8:	1c5a      	adds	r2, r3, #1
    2eea:	6022      	str	r2, [r4, #0]
    2eec:	7019      	strb	r1, [r3, #0]
    2eee:	e7cf      	b.n	2e90 <_puts_r+0x30>
    2ef0:	4622      	mov	r2, r4
    2ef2:	4628      	mov	r0, r5
    2ef4:	f000 f992 	bl	321c <__swbuf_r>
    2ef8:	3001      	adds	r0, #1
    2efa:	d1c9      	bne.n	2e90 <_puts_r+0x30>
    2efc:	e7e9      	b.n	2ed2 <_puts_r+0x72>
    2efe:	6823      	ldr	r3, [r4, #0]
    2f00:	200a      	movs	r0, #10
    2f02:	1c5a      	adds	r2, r3, #1
    2f04:	6022      	str	r2, [r4, #0]
    2f06:	7018      	strb	r0, [r3, #0]
    2f08:	bd70      	pop	{r4, r5, r6, pc}
    2f0a:	bf00      	nop
    2f0c:	00005184 	.word	0x00005184
    2f10:	000051a4 	.word	0x000051a4
    2f14:	00005164 	.word	0x00005164

00002f18 <puts>:
    2f18:	4b02      	ldr	r3, [pc, #8]	; (2f24 <puts+0xc>)
    2f1a:	4601      	mov	r1, r0
    2f1c:	6818      	ldr	r0, [r3, #0]
    2f1e:	f7ff bf9f 	b.w	2e60 <_puts_r>
    2f22:	bf00      	nop
    2f24:	2000026c 	.word	0x2000026c

00002f28 <_sbrk_r>:
    2f28:	b538      	push	{r3, r4, r5, lr}
    2f2a:	4c06      	ldr	r4, [pc, #24]	; (2f44 <_sbrk_r+0x1c>)
    2f2c:	2300      	movs	r3, #0
    2f2e:	4605      	mov	r5, r0
    2f30:	4608      	mov	r0, r1
    2f32:	6023      	str	r3, [r4, #0]
    2f34:	f7fd fb42 	bl	5bc <_sbrk>
    2f38:	1c43      	adds	r3, r0, #1
    2f3a:	d102      	bne.n	2f42 <_sbrk_r+0x1a>
    2f3c:	6823      	ldr	r3, [r4, #0]
    2f3e:	b103      	cbz	r3, 2f42 <_sbrk_r+0x1a>
    2f40:	602b      	str	r3, [r5, #0]
    2f42:	bd38      	pop	{r3, r4, r5, pc}
    2f44:	20004700 	.word	0x20004700

00002f48 <iscanf>:
    2f48:	b40f      	push	{r0, r1, r2, r3}
    2f4a:	4b0a      	ldr	r3, [pc, #40]	; (2f74 <iscanf+0x2c>)
    2f4c:	b513      	push	{r0, r1, r4, lr}
    2f4e:	681c      	ldr	r4, [r3, #0]
    2f50:	b124      	cbz	r4, 2f5c <iscanf+0x14>
    2f52:	69a3      	ldr	r3, [r4, #24]
    2f54:	b913      	cbnz	r3, 2f5c <iscanf+0x14>
    2f56:	4620      	mov	r0, r4
    2f58:	f7ff fdec 	bl	2b34 <__sinit>
    2f5c:	ab05      	add	r3, sp, #20
    2f5e:	9a04      	ldr	r2, [sp, #16]
    2f60:	6861      	ldr	r1, [r4, #4]
    2f62:	9301      	str	r3, [sp, #4]
    2f64:	4620      	mov	r0, r4
    2f66:	f001 f833 	bl	3fd0 <_vfiscanf_r>
    2f6a:	b002      	add	sp, #8
    2f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f70:	b004      	add	sp, #16
    2f72:	4770      	bx	lr
    2f74:	2000026c 	.word	0x2000026c

00002f78 <setbuf>:
    2f78:	2900      	cmp	r1, #0
    2f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2f7e:	bf0c      	ite	eq
    2f80:	2202      	moveq	r2, #2
    2f82:	2200      	movne	r2, #0
    2f84:	f000 b800 	b.w	2f88 <setvbuf>

00002f88 <setvbuf>:
    2f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2f8c:	461d      	mov	r5, r3
    2f8e:	4b51      	ldr	r3, [pc, #324]	; (30d4 <setvbuf+0x14c>)
    2f90:	681e      	ldr	r6, [r3, #0]
    2f92:	4604      	mov	r4, r0
    2f94:	460f      	mov	r7, r1
    2f96:	4690      	mov	r8, r2
    2f98:	b126      	cbz	r6, 2fa4 <setvbuf+0x1c>
    2f9a:	69b3      	ldr	r3, [r6, #24]
    2f9c:	b913      	cbnz	r3, 2fa4 <setvbuf+0x1c>
    2f9e:	4630      	mov	r0, r6
    2fa0:	f7ff fdc8 	bl	2b34 <__sinit>
    2fa4:	4b4c      	ldr	r3, [pc, #304]	; (30d8 <setvbuf+0x150>)
    2fa6:	429c      	cmp	r4, r3
    2fa8:	d152      	bne.n	3050 <setvbuf+0xc8>
    2faa:	6874      	ldr	r4, [r6, #4]
    2fac:	f1b8 0f02 	cmp.w	r8, #2
    2fb0:	d006      	beq.n	2fc0 <setvbuf+0x38>
    2fb2:	f1b8 0f01 	cmp.w	r8, #1
    2fb6:	f200 8089 	bhi.w	30cc <setvbuf+0x144>
    2fba:	2d00      	cmp	r5, #0
    2fbc:	f2c0 8086 	blt.w	30cc <setvbuf+0x144>
    2fc0:	4621      	mov	r1, r4
    2fc2:	4630      	mov	r0, r6
    2fc4:	f7ff fd3a 	bl	2a3c <_fflush_r>
    2fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2fca:	b141      	cbz	r1, 2fde <setvbuf+0x56>
    2fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2fd0:	4299      	cmp	r1, r3
    2fd2:	d002      	beq.n	2fda <setvbuf+0x52>
    2fd4:	4630      	mov	r0, r6
    2fd6:	f7ff fe7f 	bl	2cd8 <_free_r>
    2fda:	2300      	movs	r3, #0
    2fdc:	6363      	str	r3, [r4, #52]	; 0x34
    2fde:	2300      	movs	r3, #0
    2fe0:	61a3      	str	r3, [r4, #24]
    2fe2:	6063      	str	r3, [r4, #4]
    2fe4:	89a3      	ldrh	r3, [r4, #12]
    2fe6:	061b      	lsls	r3, r3, #24
    2fe8:	d503      	bpl.n	2ff2 <setvbuf+0x6a>
    2fea:	6921      	ldr	r1, [r4, #16]
    2fec:	4630      	mov	r0, r6
    2fee:	f7ff fe73 	bl	2cd8 <_free_r>
    2ff2:	89a3      	ldrh	r3, [r4, #12]
    2ff4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    2ff8:	f023 0303 	bic.w	r3, r3, #3
    2ffc:	f1b8 0f02 	cmp.w	r8, #2
    3000:	81a3      	strh	r3, [r4, #12]
    3002:	d05d      	beq.n	30c0 <setvbuf+0x138>
    3004:	ab01      	add	r3, sp, #4
    3006:	466a      	mov	r2, sp
    3008:	4621      	mov	r1, r4
    300a:	4630      	mov	r0, r6
    300c:	f000 f9fa 	bl	3404 <__swhatbuf_r>
    3010:	89a3      	ldrh	r3, [r4, #12]
    3012:	4318      	orrs	r0, r3
    3014:	81a0      	strh	r0, [r4, #12]
    3016:	bb2d      	cbnz	r5, 3064 <setvbuf+0xdc>
    3018:	9d00      	ldr	r5, [sp, #0]
    301a:	4628      	mov	r0, r5
    301c:	f000 fa56 	bl	34cc <malloc>
    3020:	4607      	mov	r7, r0
    3022:	2800      	cmp	r0, #0
    3024:	d14e      	bne.n	30c4 <setvbuf+0x13c>
    3026:	f8dd 9000 	ldr.w	r9, [sp]
    302a:	45a9      	cmp	r9, r5
    302c:	d13c      	bne.n	30a8 <setvbuf+0x120>
    302e:	f04f 30ff 	mov.w	r0, #4294967295
    3032:	89a3      	ldrh	r3, [r4, #12]
    3034:	f043 0302 	orr.w	r3, r3, #2
    3038:	81a3      	strh	r3, [r4, #12]
    303a:	2300      	movs	r3, #0
    303c:	60a3      	str	r3, [r4, #8]
    303e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    3042:	6023      	str	r3, [r4, #0]
    3044:	6123      	str	r3, [r4, #16]
    3046:	2301      	movs	r3, #1
    3048:	6163      	str	r3, [r4, #20]
    304a:	b003      	add	sp, #12
    304c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3050:	4b22      	ldr	r3, [pc, #136]	; (30dc <setvbuf+0x154>)
    3052:	429c      	cmp	r4, r3
    3054:	d101      	bne.n	305a <setvbuf+0xd2>
    3056:	68b4      	ldr	r4, [r6, #8]
    3058:	e7a8      	b.n	2fac <setvbuf+0x24>
    305a:	4b21      	ldr	r3, [pc, #132]	; (30e0 <setvbuf+0x158>)
    305c:	429c      	cmp	r4, r3
    305e:	bf08      	it	eq
    3060:	68f4      	ldreq	r4, [r6, #12]
    3062:	e7a3      	b.n	2fac <setvbuf+0x24>
    3064:	2f00      	cmp	r7, #0
    3066:	d0d8      	beq.n	301a <setvbuf+0x92>
    3068:	69b3      	ldr	r3, [r6, #24]
    306a:	b913      	cbnz	r3, 3072 <setvbuf+0xea>
    306c:	4630      	mov	r0, r6
    306e:	f7ff fd61 	bl	2b34 <__sinit>
    3072:	f1b8 0f01 	cmp.w	r8, #1
    3076:	bf08      	it	eq
    3078:	89a3      	ldrheq	r3, [r4, #12]
    307a:	6027      	str	r7, [r4, #0]
    307c:	bf04      	itt	eq
    307e:	f043 0301 	orreq.w	r3, r3, #1
    3082:	81a3      	strheq	r3, [r4, #12]
    3084:	89a3      	ldrh	r3, [r4, #12]
    3086:	6127      	str	r7, [r4, #16]
    3088:	f013 0008 	ands.w	r0, r3, #8
    308c:	6165      	str	r5, [r4, #20]
    308e:	d01b      	beq.n	30c8 <setvbuf+0x140>
    3090:	f013 0001 	ands.w	r0, r3, #1
    3094:	bf18      	it	ne
    3096:	426d      	negne	r5, r5
    3098:	f04f 0300 	mov.w	r3, #0
    309c:	bf1d      	ittte	ne
    309e:	60a3      	strne	r3, [r4, #8]
    30a0:	61a5      	strne	r5, [r4, #24]
    30a2:	4618      	movne	r0, r3
    30a4:	60a5      	streq	r5, [r4, #8]
    30a6:	e7d0      	b.n	304a <setvbuf+0xc2>
    30a8:	4648      	mov	r0, r9
    30aa:	f000 fa0f 	bl	34cc <malloc>
    30ae:	4607      	mov	r7, r0
    30b0:	2800      	cmp	r0, #0
    30b2:	d0bc      	beq.n	302e <setvbuf+0xa6>
    30b4:	89a3      	ldrh	r3, [r4, #12]
    30b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    30ba:	81a3      	strh	r3, [r4, #12]
    30bc:	464d      	mov	r5, r9
    30be:	e7d3      	b.n	3068 <setvbuf+0xe0>
    30c0:	2000      	movs	r0, #0
    30c2:	e7b6      	b.n	3032 <setvbuf+0xaa>
    30c4:	46a9      	mov	r9, r5
    30c6:	e7f5      	b.n	30b4 <setvbuf+0x12c>
    30c8:	60a0      	str	r0, [r4, #8]
    30ca:	e7be      	b.n	304a <setvbuf+0xc2>
    30cc:	f04f 30ff 	mov.w	r0, #4294967295
    30d0:	e7bb      	b.n	304a <setvbuf+0xc2>
    30d2:	bf00      	nop
    30d4:	2000026c 	.word	0x2000026c
    30d8:	00005184 	.word	0x00005184
    30dc:	000051a4 	.word	0x000051a4
    30e0:	00005164 	.word	0x00005164

000030e4 <sniprintf>:
    30e4:	b40c      	push	{r2, r3}
    30e6:	b530      	push	{r4, r5, lr}
    30e8:	4b17      	ldr	r3, [pc, #92]	; (3148 <sniprintf+0x64>)
    30ea:	1e0c      	subs	r4, r1, #0
    30ec:	b09d      	sub	sp, #116	; 0x74
    30ee:	681d      	ldr	r5, [r3, #0]
    30f0:	da08      	bge.n	3104 <sniprintf+0x20>
    30f2:	238b      	movs	r3, #139	; 0x8b
    30f4:	602b      	str	r3, [r5, #0]
    30f6:	f04f 30ff 	mov.w	r0, #4294967295
    30fa:	b01d      	add	sp, #116	; 0x74
    30fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3100:	b002      	add	sp, #8
    3102:	4770      	bx	lr
    3104:	f44f 7302 	mov.w	r3, #520	; 0x208
    3108:	f8ad 3014 	strh.w	r3, [sp, #20]
    310c:	bf14      	ite	ne
    310e:	f104 33ff 	addne.w	r3, r4, #4294967295
    3112:	4623      	moveq	r3, r4
    3114:	9304      	str	r3, [sp, #16]
    3116:	9307      	str	r3, [sp, #28]
    3118:	f64f 73ff 	movw	r3, #65535	; 0xffff
    311c:	9002      	str	r0, [sp, #8]
    311e:	9006      	str	r0, [sp, #24]
    3120:	f8ad 3016 	strh.w	r3, [sp, #22]
    3124:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3126:	ab21      	add	r3, sp, #132	; 0x84
    3128:	a902      	add	r1, sp, #8
    312a:	4628      	mov	r0, r5
    312c:	9301      	str	r3, [sp, #4]
    312e:	f000 fa33 	bl	3598 <_svfiprintf_r>
    3132:	1c43      	adds	r3, r0, #1
    3134:	bfbc      	itt	lt
    3136:	238b      	movlt	r3, #139	; 0x8b
    3138:	602b      	strlt	r3, [r5, #0]
    313a:	2c00      	cmp	r4, #0
    313c:	d0dd      	beq.n	30fa <sniprintf+0x16>
    313e:	9b02      	ldr	r3, [sp, #8]
    3140:	2200      	movs	r2, #0
    3142:	701a      	strb	r2, [r3, #0]
    3144:	e7d9      	b.n	30fa <sniprintf+0x16>
    3146:	bf00      	nop
    3148:	2000026c 	.word	0x2000026c

0000314c <siprintf>:
    314c:	b40e      	push	{r1, r2, r3}
    314e:	b500      	push	{lr}
    3150:	b09c      	sub	sp, #112	; 0x70
    3152:	f44f 7102 	mov.w	r1, #520	; 0x208
    3156:	ab1d      	add	r3, sp, #116	; 0x74
    3158:	f8ad 1014 	strh.w	r1, [sp, #20]
    315c:	9002      	str	r0, [sp, #8]
    315e:	9006      	str	r0, [sp, #24]
    3160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3164:	480a      	ldr	r0, [pc, #40]	; (3190 <siprintf+0x44>)
    3166:	9104      	str	r1, [sp, #16]
    3168:	9107      	str	r1, [sp, #28]
    316a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    316e:	f853 2b04 	ldr.w	r2, [r3], #4
    3172:	f8ad 1016 	strh.w	r1, [sp, #22]
    3176:	6800      	ldr	r0, [r0, #0]
    3178:	9301      	str	r3, [sp, #4]
    317a:	a902      	add	r1, sp, #8
    317c:	f000 fa0c 	bl	3598 <_svfiprintf_r>
    3180:	9b02      	ldr	r3, [sp, #8]
    3182:	2200      	movs	r2, #0
    3184:	701a      	strb	r2, [r3, #0]
    3186:	b01c      	add	sp, #112	; 0x70
    3188:	f85d eb04 	ldr.w	lr, [sp], #4
    318c:	b003      	add	sp, #12
    318e:	4770      	bx	lr
    3190:	2000026c 	.word	0x2000026c

00003194 <__sread>:
    3194:	b510      	push	{r4, lr}
    3196:	460c      	mov	r4, r1
    3198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    319c:	f001 f898 	bl	42d0 <_read_r>
    31a0:	2800      	cmp	r0, #0
    31a2:	bfab      	itete	ge
    31a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    31a6:	89a3      	ldrhlt	r3, [r4, #12]
    31a8:	181b      	addge	r3, r3, r0
    31aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    31ae:	bfac      	ite	ge
    31b0:	6563      	strge	r3, [r4, #84]	; 0x54
    31b2:	81a3      	strhlt	r3, [r4, #12]
    31b4:	bd10      	pop	{r4, pc}

000031b6 <__swrite>:
    31b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31ba:	461f      	mov	r7, r3
    31bc:	898b      	ldrh	r3, [r1, #12]
    31be:	05db      	lsls	r3, r3, #23
    31c0:	4605      	mov	r5, r0
    31c2:	460c      	mov	r4, r1
    31c4:	4616      	mov	r6, r2
    31c6:	d505      	bpl.n	31d4 <__swrite+0x1e>
    31c8:	2302      	movs	r3, #2
    31ca:	2200      	movs	r2, #0
    31cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    31d0:	f000 f906 	bl	33e0 <_lseek_r>
    31d4:	89a3      	ldrh	r3, [r4, #12]
    31d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    31da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    31de:	81a3      	strh	r3, [r4, #12]
    31e0:	4632      	mov	r2, r6
    31e2:	463b      	mov	r3, r7
    31e4:	4628      	mov	r0, r5
    31e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    31ea:	f000 b869 	b.w	32c0 <_write_r>

000031ee <__sseek>:
    31ee:	b510      	push	{r4, lr}
    31f0:	460c      	mov	r4, r1
    31f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    31f6:	f000 f8f3 	bl	33e0 <_lseek_r>
    31fa:	1c43      	adds	r3, r0, #1
    31fc:	89a3      	ldrh	r3, [r4, #12]
    31fe:	bf15      	itete	ne
    3200:	6560      	strne	r0, [r4, #84]	; 0x54
    3202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    320a:	81a3      	strheq	r3, [r4, #12]
    320c:	bf18      	it	ne
    320e:	81a3      	strhne	r3, [r4, #12]
    3210:	bd10      	pop	{r4, pc}

00003212 <__sclose>:
    3212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3216:	f000 b8d3 	b.w	33c0 <_close_r>
	...

0000321c <__swbuf_r>:
    321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    321e:	460e      	mov	r6, r1
    3220:	4614      	mov	r4, r2
    3222:	4605      	mov	r5, r0
    3224:	b118      	cbz	r0, 322e <__swbuf_r+0x12>
    3226:	6983      	ldr	r3, [r0, #24]
    3228:	b90b      	cbnz	r3, 322e <__swbuf_r+0x12>
    322a:	f7ff fc83 	bl	2b34 <__sinit>
    322e:	4b21      	ldr	r3, [pc, #132]	; (32b4 <__swbuf_r+0x98>)
    3230:	429c      	cmp	r4, r3
    3232:	d12a      	bne.n	328a <__swbuf_r+0x6e>
    3234:	686c      	ldr	r4, [r5, #4]
    3236:	69a3      	ldr	r3, [r4, #24]
    3238:	60a3      	str	r3, [r4, #8]
    323a:	89a3      	ldrh	r3, [r4, #12]
    323c:	071a      	lsls	r2, r3, #28
    323e:	d52e      	bpl.n	329e <__swbuf_r+0x82>
    3240:	6923      	ldr	r3, [r4, #16]
    3242:	b363      	cbz	r3, 329e <__swbuf_r+0x82>
    3244:	6923      	ldr	r3, [r4, #16]
    3246:	6820      	ldr	r0, [r4, #0]
    3248:	1ac0      	subs	r0, r0, r3
    324a:	6963      	ldr	r3, [r4, #20]
    324c:	b2f6      	uxtb	r6, r6
    324e:	4298      	cmp	r0, r3
    3250:	4637      	mov	r7, r6
    3252:	db04      	blt.n	325e <__swbuf_r+0x42>
    3254:	4621      	mov	r1, r4
    3256:	4628      	mov	r0, r5
    3258:	f7ff fbf0 	bl	2a3c <_fflush_r>
    325c:	bb28      	cbnz	r0, 32aa <__swbuf_r+0x8e>
    325e:	68a3      	ldr	r3, [r4, #8]
    3260:	3b01      	subs	r3, #1
    3262:	60a3      	str	r3, [r4, #8]
    3264:	6823      	ldr	r3, [r4, #0]
    3266:	1c5a      	adds	r2, r3, #1
    3268:	6022      	str	r2, [r4, #0]
    326a:	701e      	strb	r6, [r3, #0]
    326c:	6963      	ldr	r3, [r4, #20]
    326e:	3001      	adds	r0, #1
    3270:	4298      	cmp	r0, r3
    3272:	d004      	beq.n	327e <__swbuf_r+0x62>
    3274:	89a3      	ldrh	r3, [r4, #12]
    3276:	07db      	lsls	r3, r3, #31
    3278:	d519      	bpl.n	32ae <__swbuf_r+0x92>
    327a:	2e0a      	cmp	r6, #10
    327c:	d117      	bne.n	32ae <__swbuf_r+0x92>
    327e:	4621      	mov	r1, r4
    3280:	4628      	mov	r0, r5
    3282:	f7ff fbdb 	bl	2a3c <_fflush_r>
    3286:	b190      	cbz	r0, 32ae <__swbuf_r+0x92>
    3288:	e00f      	b.n	32aa <__swbuf_r+0x8e>
    328a:	4b0b      	ldr	r3, [pc, #44]	; (32b8 <__swbuf_r+0x9c>)
    328c:	429c      	cmp	r4, r3
    328e:	d101      	bne.n	3294 <__swbuf_r+0x78>
    3290:	68ac      	ldr	r4, [r5, #8]
    3292:	e7d0      	b.n	3236 <__swbuf_r+0x1a>
    3294:	4b09      	ldr	r3, [pc, #36]	; (32bc <__swbuf_r+0xa0>)
    3296:	429c      	cmp	r4, r3
    3298:	bf08      	it	eq
    329a:	68ec      	ldreq	r4, [r5, #12]
    329c:	e7cb      	b.n	3236 <__swbuf_r+0x1a>
    329e:	4621      	mov	r1, r4
    32a0:	4628      	mov	r0, r5
    32a2:	f000 f81f 	bl	32e4 <__swsetup_r>
    32a6:	2800      	cmp	r0, #0
    32a8:	d0cc      	beq.n	3244 <__swbuf_r+0x28>
    32aa:	f04f 37ff 	mov.w	r7, #4294967295
    32ae:	4638      	mov	r0, r7
    32b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32b2:	bf00      	nop
    32b4:	00005184 	.word	0x00005184
    32b8:	000051a4 	.word	0x000051a4
    32bc:	00005164 	.word	0x00005164

000032c0 <_write_r>:
    32c0:	b538      	push	{r3, r4, r5, lr}
    32c2:	4c07      	ldr	r4, [pc, #28]	; (32e0 <_write_r+0x20>)
    32c4:	4605      	mov	r5, r0
    32c6:	4608      	mov	r0, r1
    32c8:	4611      	mov	r1, r2
    32ca:	2200      	movs	r2, #0
    32cc:	6022      	str	r2, [r4, #0]
    32ce:	461a      	mov	r2, r3
    32d0:	f7fe fef6 	bl	20c0 <_write>
    32d4:	1c43      	adds	r3, r0, #1
    32d6:	d102      	bne.n	32de <_write_r+0x1e>
    32d8:	6823      	ldr	r3, [r4, #0]
    32da:	b103      	cbz	r3, 32de <_write_r+0x1e>
    32dc:	602b      	str	r3, [r5, #0]
    32de:	bd38      	pop	{r3, r4, r5, pc}
    32e0:	20004700 	.word	0x20004700

000032e4 <__swsetup_r>:
    32e4:	4b32      	ldr	r3, [pc, #200]	; (33b0 <__swsetup_r+0xcc>)
    32e6:	b570      	push	{r4, r5, r6, lr}
    32e8:	681d      	ldr	r5, [r3, #0]
    32ea:	4606      	mov	r6, r0
    32ec:	460c      	mov	r4, r1
    32ee:	b125      	cbz	r5, 32fa <__swsetup_r+0x16>
    32f0:	69ab      	ldr	r3, [r5, #24]
    32f2:	b913      	cbnz	r3, 32fa <__swsetup_r+0x16>
    32f4:	4628      	mov	r0, r5
    32f6:	f7ff fc1d 	bl	2b34 <__sinit>
    32fa:	4b2e      	ldr	r3, [pc, #184]	; (33b4 <__swsetup_r+0xd0>)
    32fc:	429c      	cmp	r4, r3
    32fe:	d10f      	bne.n	3320 <__swsetup_r+0x3c>
    3300:	686c      	ldr	r4, [r5, #4]
    3302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3306:	b29a      	uxth	r2, r3
    3308:	0715      	lsls	r5, r2, #28
    330a:	d42c      	bmi.n	3366 <__swsetup_r+0x82>
    330c:	06d0      	lsls	r0, r2, #27
    330e:	d411      	bmi.n	3334 <__swsetup_r+0x50>
    3310:	2209      	movs	r2, #9
    3312:	6032      	str	r2, [r6, #0]
    3314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3318:	81a3      	strh	r3, [r4, #12]
    331a:	f04f 30ff 	mov.w	r0, #4294967295
    331e:	bd70      	pop	{r4, r5, r6, pc}
    3320:	4b25      	ldr	r3, [pc, #148]	; (33b8 <__swsetup_r+0xd4>)
    3322:	429c      	cmp	r4, r3
    3324:	d101      	bne.n	332a <__swsetup_r+0x46>
    3326:	68ac      	ldr	r4, [r5, #8]
    3328:	e7eb      	b.n	3302 <__swsetup_r+0x1e>
    332a:	4b24      	ldr	r3, [pc, #144]	; (33bc <__swsetup_r+0xd8>)
    332c:	429c      	cmp	r4, r3
    332e:	bf08      	it	eq
    3330:	68ec      	ldreq	r4, [r5, #12]
    3332:	e7e6      	b.n	3302 <__swsetup_r+0x1e>
    3334:	0751      	lsls	r1, r2, #29
    3336:	d512      	bpl.n	335e <__swsetup_r+0x7a>
    3338:	6b61      	ldr	r1, [r4, #52]	; 0x34
    333a:	b141      	cbz	r1, 334e <__swsetup_r+0x6a>
    333c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3340:	4299      	cmp	r1, r3
    3342:	d002      	beq.n	334a <__swsetup_r+0x66>
    3344:	4630      	mov	r0, r6
    3346:	f7ff fcc7 	bl	2cd8 <_free_r>
    334a:	2300      	movs	r3, #0
    334c:	6363      	str	r3, [r4, #52]	; 0x34
    334e:	89a3      	ldrh	r3, [r4, #12]
    3350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    3354:	81a3      	strh	r3, [r4, #12]
    3356:	2300      	movs	r3, #0
    3358:	6063      	str	r3, [r4, #4]
    335a:	6923      	ldr	r3, [r4, #16]
    335c:	6023      	str	r3, [r4, #0]
    335e:	89a3      	ldrh	r3, [r4, #12]
    3360:	f043 0308 	orr.w	r3, r3, #8
    3364:	81a3      	strh	r3, [r4, #12]
    3366:	6923      	ldr	r3, [r4, #16]
    3368:	b94b      	cbnz	r3, 337e <__swsetup_r+0x9a>
    336a:	89a3      	ldrh	r3, [r4, #12]
    336c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    3370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3374:	d003      	beq.n	337e <__swsetup_r+0x9a>
    3376:	4621      	mov	r1, r4
    3378:	4630      	mov	r0, r6
    337a:	f000 f867 	bl	344c <__smakebuf_r>
    337e:	89a2      	ldrh	r2, [r4, #12]
    3380:	f012 0301 	ands.w	r3, r2, #1
    3384:	d00c      	beq.n	33a0 <__swsetup_r+0xbc>
    3386:	2300      	movs	r3, #0
    3388:	60a3      	str	r3, [r4, #8]
    338a:	6963      	ldr	r3, [r4, #20]
    338c:	425b      	negs	r3, r3
    338e:	61a3      	str	r3, [r4, #24]
    3390:	6923      	ldr	r3, [r4, #16]
    3392:	b953      	cbnz	r3, 33aa <__swsetup_r+0xc6>
    3394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3398:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    339c:	d1ba      	bne.n	3314 <__swsetup_r+0x30>
    339e:	bd70      	pop	{r4, r5, r6, pc}
    33a0:	0792      	lsls	r2, r2, #30
    33a2:	bf58      	it	pl
    33a4:	6963      	ldrpl	r3, [r4, #20]
    33a6:	60a3      	str	r3, [r4, #8]
    33a8:	e7f2      	b.n	3390 <__swsetup_r+0xac>
    33aa:	2000      	movs	r0, #0
    33ac:	e7f7      	b.n	339e <__swsetup_r+0xba>
    33ae:	bf00      	nop
    33b0:	2000026c 	.word	0x2000026c
    33b4:	00005184 	.word	0x00005184
    33b8:	000051a4 	.word	0x000051a4
    33bc:	00005164 	.word	0x00005164

000033c0 <_close_r>:
    33c0:	b538      	push	{r3, r4, r5, lr}
    33c2:	4c06      	ldr	r4, [pc, #24]	; (33dc <_close_r+0x1c>)
    33c4:	2300      	movs	r3, #0
    33c6:	4605      	mov	r5, r0
    33c8:	4608      	mov	r0, r1
    33ca:	6023      	str	r3, [r4, #0]
    33cc:	f7fd f908 	bl	5e0 <_close>
    33d0:	1c43      	adds	r3, r0, #1
    33d2:	d102      	bne.n	33da <_close_r+0x1a>
    33d4:	6823      	ldr	r3, [r4, #0]
    33d6:	b103      	cbz	r3, 33da <_close_r+0x1a>
    33d8:	602b      	str	r3, [r5, #0]
    33da:	bd38      	pop	{r3, r4, r5, pc}
    33dc:	20004700 	.word	0x20004700

000033e0 <_lseek_r>:
    33e0:	b538      	push	{r3, r4, r5, lr}
    33e2:	4c07      	ldr	r4, [pc, #28]	; (3400 <_lseek_r+0x20>)
    33e4:	4605      	mov	r5, r0
    33e6:	4608      	mov	r0, r1
    33e8:	4611      	mov	r1, r2
    33ea:	2200      	movs	r2, #0
    33ec:	6022      	str	r2, [r4, #0]
    33ee:	461a      	mov	r2, r3
    33f0:	f7fd f900 	bl	5f4 <_lseek>
    33f4:	1c43      	adds	r3, r0, #1
    33f6:	d102      	bne.n	33fe <_lseek_r+0x1e>
    33f8:	6823      	ldr	r3, [r4, #0]
    33fa:	b103      	cbz	r3, 33fe <_lseek_r+0x1e>
    33fc:	602b      	str	r3, [r5, #0]
    33fe:	bd38      	pop	{r3, r4, r5, pc}
    3400:	20004700 	.word	0x20004700

00003404 <__swhatbuf_r>:
    3404:	b570      	push	{r4, r5, r6, lr}
    3406:	460e      	mov	r6, r1
    3408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    340c:	2900      	cmp	r1, #0
    340e:	b090      	sub	sp, #64	; 0x40
    3410:	4614      	mov	r4, r2
    3412:	461d      	mov	r5, r3
    3414:	da07      	bge.n	3426 <__swhatbuf_r+0x22>
    3416:	2300      	movs	r3, #0
    3418:	602b      	str	r3, [r5, #0]
    341a:	89b3      	ldrh	r3, [r6, #12]
    341c:	061a      	lsls	r2, r3, #24
    341e:	d410      	bmi.n	3442 <__swhatbuf_r+0x3e>
    3420:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3424:	e00e      	b.n	3444 <__swhatbuf_r+0x40>
    3426:	aa01      	add	r2, sp, #4
    3428:	f001 f9f8 	bl	481c <_fstat_r>
    342c:	2800      	cmp	r0, #0
    342e:	dbf2      	blt.n	3416 <__swhatbuf_r+0x12>
    3430:	9a02      	ldr	r2, [sp, #8]
    3432:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3436:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    343a:	425a      	negs	r2, r3
    343c:	415a      	adcs	r2, r3
    343e:	602a      	str	r2, [r5, #0]
    3440:	e7ee      	b.n	3420 <__swhatbuf_r+0x1c>
    3442:	2340      	movs	r3, #64	; 0x40
    3444:	2000      	movs	r0, #0
    3446:	6023      	str	r3, [r4, #0]
    3448:	b010      	add	sp, #64	; 0x40
    344a:	bd70      	pop	{r4, r5, r6, pc}

0000344c <__smakebuf_r>:
    344c:	898b      	ldrh	r3, [r1, #12]
    344e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3450:	079d      	lsls	r5, r3, #30
    3452:	4606      	mov	r6, r0
    3454:	460c      	mov	r4, r1
    3456:	d507      	bpl.n	3468 <__smakebuf_r+0x1c>
    3458:	f104 0347 	add.w	r3, r4, #71	; 0x47
    345c:	6023      	str	r3, [r4, #0]
    345e:	6123      	str	r3, [r4, #16]
    3460:	2301      	movs	r3, #1
    3462:	6163      	str	r3, [r4, #20]
    3464:	b002      	add	sp, #8
    3466:	bd70      	pop	{r4, r5, r6, pc}
    3468:	ab01      	add	r3, sp, #4
    346a:	466a      	mov	r2, sp
    346c:	f7ff ffca 	bl	3404 <__swhatbuf_r>
    3470:	9900      	ldr	r1, [sp, #0]
    3472:	4605      	mov	r5, r0
    3474:	4630      	mov	r0, r6
    3476:	f7ff fc7d 	bl	2d74 <_malloc_r>
    347a:	b948      	cbnz	r0, 3490 <__smakebuf_r+0x44>
    347c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3480:	059a      	lsls	r2, r3, #22
    3482:	d4ef      	bmi.n	3464 <__smakebuf_r+0x18>
    3484:	f023 0303 	bic.w	r3, r3, #3
    3488:	f043 0302 	orr.w	r3, r3, #2
    348c:	81a3      	strh	r3, [r4, #12]
    348e:	e7e3      	b.n	3458 <__smakebuf_r+0xc>
    3490:	4b0d      	ldr	r3, [pc, #52]	; (34c8 <__smakebuf_r+0x7c>)
    3492:	62b3      	str	r3, [r6, #40]	; 0x28
    3494:	89a3      	ldrh	r3, [r4, #12]
    3496:	6020      	str	r0, [r4, #0]
    3498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    349c:	81a3      	strh	r3, [r4, #12]
    349e:	9b00      	ldr	r3, [sp, #0]
    34a0:	6163      	str	r3, [r4, #20]
    34a2:	9b01      	ldr	r3, [sp, #4]
    34a4:	6120      	str	r0, [r4, #16]
    34a6:	b15b      	cbz	r3, 34c0 <__smakebuf_r+0x74>
    34a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    34ac:	4630      	mov	r0, r6
    34ae:	f001 f9c7 	bl	4840 <_isatty_r>
    34b2:	b128      	cbz	r0, 34c0 <__smakebuf_r+0x74>
    34b4:	89a3      	ldrh	r3, [r4, #12]
    34b6:	f023 0303 	bic.w	r3, r3, #3
    34ba:	f043 0301 	orr.w	r3, r3, #1
    34be:	81a3      	strh	r3, [r4, #12]
    34c0:	89a3      	ldrh	r3, [r4, #12]
    34c2:	431d      	orrs	r5, r3
    34c4:	81a5      	strh	r5, [r4, #12]
    34c6:	e7cd      	b.n	3464 <__smakebuf_r+0x18>
    34c8:	00002ab5 	.word	0x00002ab5

000034cc <malloc>:
    34cc:	4b02      	ldr	r3, [pc, #8]	; (34d8 <malloc+0xc>)
    34ce:	4601      	mov	r1, r0
    34d0:	6818      	ldr	r0, [r3, #0]
    34d2:	f7ff bc4f 	b.w	2d74 <_malloc_r>
    34d6:	bf00      	nop
    34d8:	2000026c 	.word	0x2000026c

000034dc <__malloc_lock>:
    34dc:	4770      	bx	lr

000034de <__malloc_unlock>:
    34de:	4770      	bx	lr

000034e0 <__ssputs_r>:
    34e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34e4:	688e      	ldr	r6, [r1, #8]
    34e6:	429e      	cmp	r6, r3
    34e8:	4682      	mov	sl, r0
    34ea:	460c      	mov	r4, r1
    34ec:	4691      	mov	r9, r2
    34ee:	4698      	mov	r8, r3
    34f0:	d835      	bhi.n	355e <__ssputs_r+0x7e>
    34f2:	898a      	ldrh	r2, [r1, #12]
    34f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    34f8:	d031      	beq.n	355e <__ssputs_r+0x7e>
    34fa:	6825      	ldr	r5, [r4, #0]
    34fc:	6909      	ldr	r1, [r1, #16]
    34fe:	1a6f      	subs	r7, r5, r1
    3500:	6965      	ldr	r5, [r4, #20]
    3502:	2302      	movs	r3, #2
    3504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3508:	fb95 f5f3 	sdiv	r5, r5, r3
    350c:	f108 0301 	add.w	r3, r8, #1
    3510:	443b      	add	r3, r7
    3512:	429d      	cmp	r5, r3
    3514:	bf38      	it	cc
    3516:	461d      	movcc	r5, r3
    3518:	0553      	lsls	r3, r2, #21
    351a:	d531      	bpl.n	3580 <__ssputs_r+0xa0>
    351c:	4629      	mov	r1, r5
    351e:	f7ff fc29 	bl	2d74 <_malloc_r>
    3522:	4606      	mov	r6, r0
    3524:	b950      	cbnz	r0, 353c <__ssputs_r+0x5c>
    3526:	230c      	movs	r3, #12
    3528:	f8ca 3000 	str.w	r3, [sl]
    352c:	89a3      	ldrh	r3, [r4, #12]
    352e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3532:	81a3      	strh	r3, [r4, #12]
    3534:	f04f 30ff 	mov.w	r0, #4294967295
    3538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    353c:	463a      	mov	r2, r7
    353e:	6921      	ldr	r1, [r4, #16]
    3540:	f001 fa06 	bl	4950 <memcpy>
    3544:	89a3      	ldrh	r3, [r4, #12]
    3546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    354a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    354e:	81a3      	strh	r3, [r4, #12]
    3550:	6126      	str	r6, [r4, #16]
    3552:	6165      	str	r5, [r4, #20]
    3554:	443e      	add	r6, r7
    3556:	1bed      	subs	r5, r5, r7
    3558:	6026      	str	r6, [r4, #0]
    355a:	60a5      	str	r5, [r4, #8]
    355c:	4646      	mov	r6, r8
    355e:	4546      	cmp	r6, r8
    3560:	bf28      	it	cs
    3562:	4646      	movcs	r6, r8
    3564:	4632      	mov	r2, r6
    3566:	4649      	mov	r1, r9
    3568:	6820      	ldr	r0, [r4, #0]
    356a:	f001 f9fc 	bl	4966 <memmove>
    356e:	68a3      	ldr	r3, [r4, #8]
    3570:	1b9b      	subs	r3, r3, r6
    3572:	60a3      	str	r3, [r4, #8]
    3574:	6823      	ldr	r3, [r4, #0]
    3576:	441e      	add	r6, r3
    3578:	6026      	str	r6, [r4, #0]
    357a:	2000      	movs	r0, #0
    357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3580:	462a      	mov	r2, r5
    3582:	f001 fa0a 	bl	499a <_realloc_r>
    3586:	4606      	mov	r6, r0
    3588:	2800      	cmp	r0, #0
    358a:	d1e1      	bne.n	3550 <__ssputs_r+0x70>
    358c:	6921      	ldr	r1, [r4, #16]
    358e:	4650      	mov	r0, sl
    3590:	f7ff fba2 	bl	2cd8 <_free_r>
    3594:	e7c7      	b.n	3526 <__ssputs_r+0x46>
	...

00003598 <_svfiprintf_r>:
    3598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    359c:	b09d      	sub	sp, #116	; 0x74
    359e:	4680      	mov	r8, r0
    35a0:	9303      	str	r3, [sp, #12]
    35a2:	898b      	ldrh	r3, [r1, #12]
    35a4:	061c      	lsls	r4, r3, #24
    35a6:	460d      	mov	r5, r1
    35a8:	4616      	mov	r6, r2
    35aa:	d50f      	bpl.n	35cc <_svfiprintf_r+0x34>
    35ac:	690b      	ldr	r3, [r1, #16]
    35ae:	b96b      	cbnz	r3, 35cc <_svfiprintf_r+0x34>
    35b0:	2140      	movs	r1, #64	; 0x40
    35b2:	f7ff fbdf 	bl	2d74 <_malloc_r>
    35b6:	6028      	str	r0, [r5, #0]
    35b8:	6128      	str	r0, [r5, #16]
    35ba:	b928      	cbnz	r0, 35c8 <_svfiprintf_r+0x30>
    35bc:	230c      	movs	r3, #12
    35be:	f8c8 3000 	str.w	r3, [r8]
    35c2:	f04f 30ff 	mov.w	r0, #4294967295
    35c6:	e0c5      	b.n	3754 <_svfiprintf_r+0x1bc>
    35c8:	2340      	movs	r3, #64	; 0x40
    35ca:	616b      	str	r3, [r5, #20]
    35cc:	2300      	movs	r3, #0
    35ce:	9309      	str	r3, [sp, #36]	; 0x24
    35d0:	2320      	movs	r3, #32
    35d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    35d6:	2330      	movs	r3, #48	; 0x30
    35d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    35dc:	f04f 0b01 	mov.w	fp, #1
    35e0:	4637      	mov	r7, r6
    35e2:	463c      	mov	r4, r7
    35e4:	f814 3b01 	ldrb.w	r3, [r4], #1
    35e8:	2b00      	cmp	r3, #0
    35ea:	d13c      	bne.n	3666 <_svfiprintf_r+0xce>
    35ec:	ebb7 0a06 	subs.w	sl, r7, r6
    35f0:	d00b      	beq.n	360a <_svfiprintf_r+0x72>
    35f2:	4653      	mov	r3, sl
    35f4:	4632      	mov	r2, r6
    35f6:	4629      	mov	r1, r5
    35f8:	4640      	mov	r0, r8
    35fa:	f7ff ff71 	bl	34e0 <__ssputs_r>
    35fe:	3001      	adds	r0, #1
    3600:	f000 80a3 	beq.w	374a <_svfiprintf_r+0x1b2>
    3604:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3606:	4453      	add	r3, sl
    3608:	9309      	str	r3, [sp, #36]	; 0x24
    360a:	783b      	ldrb	r3, [r7, #0]
    360c:	2b00      	cmp	r3, #0
    360e:	f000 809c 	beq.w	374a <_svfiprintf_r+0x1b2>
    3612:	2300      	movs	r3, #0
    3614:	f04f 32ff 	mov.w	r2, #4294967295
    3618:	9304      	str	r3, [sp, #16]
    361a:	9307      	str	r3, [sp, #28]
    361c:	9205      	str	r2, [sp, #20]
    361e:	9306      	str	r3, [sp, #24]
    3620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3624:	931a      	str	r3, [sp, #104]	; 0x68
    3626:	2205      	movs	r2, #5
    3628:	7821      	ldrb	r1, [r4, #0]
    362a:	4850      	ldr	r0, [pc, #320]	; (376c <_svfiprintf_r+0x1d4>)
    362c:	f001 f940 	bl	48b0 <memchr>
    3630:	1c67      	adds	r7, r4, #1
    3632:	9b04      	ldr	r3, [sp, #16]
    3634:	b9d8      	cbnz	r0, 366e <_svfiprintf_r+0xd6>
    3636:	06d9      	lsls	r1, r3, #27
    3638:	bf44      	itt	mi
    363a:	2220      	movmi	r2, #32
    363c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3640:	071a      	lsls	r2, r3, #28
    3642:	bf44      	itt	mi
    3644:	222b      	movmi	r2, #43	; 0x2b
    3646:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    364a:	7822      	ldrb	r2, [r4, #0]
    364c:	2a2a      	cmp	r2, #42	; 0x2a
    364e:	d016      	beq.n	367e <_svfiprintf_r+0xe6>
    3650:	9a07      	ldr	r2, [sp, #28]
    3652:	2100      	movs	r1, #0
    3654:	200a      	movs	r0, #10
    3656:	4627      	mov	r7, r4
    3658:	3401      	adds	r4, #1
    365a:	783b      	ldrb	r3, [r7, #0]
    365c:	3b30      	subs	r3, #48	; 0x30
    365e:	2b09      	cmp	r3, #9
    3660:	d951      	bls.n	3706 <_svfiprintf_r+0x16e>
    3662:	b1c9      	cbz	r1, 3698 <_svfiprintf_r+0x100>
    3664:	e011      	b.n	368a <_svfiprintf_r+0xf2>
    3666:	2b25      	cmp	r3, #37	; 0x25
    3668:	d0c0      	beq.n	35ec <_svfiprintf_r+0x54>
    366a:	4627      	mov	r7, r4
    366c:	e7b9      	b.n	35e2 <_svfiprintf_r+0x4a>
    366e:	4a3f      	ldr	r2, [pc, #252]	; (376c <_svfiprintf_r+0x1d4>)
    3670:	1a80      	subs	r0, r0, r2
    3672:	fa0b f000 	lsl.w	r0, fp, r0
    3676:	4318      	orrs	r0, r3
    3678:	9004      	str	r0, [sp, #16]
    367a:	463c      	mov	r4, r7
    367c:	e7d3      	b.n	3626 <_svfiprintf_r+0x8e>
    367e:	9a03      	ldr	r2, [sp, #12]
    3680:	1d11      	adds	r1, r2, #4
    3682:	6812      	ldr	r2, [r2, #0]
    3684:	9103      	str	r1, [sp, #12]
    3686:	2a00      	cmp	r2, #0
    3688:	db01      	blt.n	368e <_svfiprintf_r+0xf6>
    368a:	9207      	str	r2, [sp, #28]
    368c:	e004      	b.n	3698 <_svfiprintf_r+0x100>
    368e:	4252      	negs	r2, r2
    3690:	f043 0302 	orr.w	r3, r3, #2
    3694:	9207      	str	r2, [sp, #28]
    3696:	9304      	str	r3, [sp, #16]
    3698:	783b      	ldrb	r3, [r7, #0]
    369a:	2b2e      	cmp	r3, #46	; 0x2e
    369c:	d10e      	bne.n	36bc <_svfiprintf_r+0x124>
    369e:	787b      	ldrb	r3, [r7, #1]
    36a0:	2b2a      	cmp	r3, #42	; 0x2a
    36a2:	f107 0101 	add.w	r1, r7, #1
    36a6:	d132      	bne.n	370e <_svfiprintf_r+0x176>
    36a8:	9b03      	ldr	r3, [sp, #12]
    36aa:	1d1a      	adds	r2, r3, #4
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	9203      	str	r2, [sp, #12]
    36b0:	2b00      	cmp	r3, #0
    36b2:	bfb8      	it	lt
    36b4:	f04f 33ff 	movlt.w	r3, #4294967295
    36b8:	3702      	adds	r7, #2
    36ba:	9305      	str	r3, [sp, #20]
    36bc:	4c2c      	ldr	r4, [pc, #176]	; (3770 <_svfiprintf_r+0x1d8>)
    36be:	7839      	ldrb	r1, [r7, #0]
    36c0:	2203      	movs	r2, #3
    36c2:	4620      	mov	r0, r4
    36c4:	f001 f8f4 	bl	48b0 <memchr>
    36c8:	b138      	cbz	r0, 36da <_svfiprintf_r+0x142>
    36ca:	2340      	movs	r3, #64	; 0x40
    36cc:	1b00      	subs	r0, r0, r4
    36ce:	fa03 f000 	lsl.w	r0, r3, r0
    36d2:	9b04      	ldr	r3, [sp, #16]
    36d4:	4303      	orrs	r3, r0
    36d6:	9304      	str	r3, [sp, #16]
    36d8:	3701      	adds	r7, #1
    36da:	7839      	ldrb	r1, [r7, #0]
    36dc:	4825      	ldr	r0, [pc, #148]	; (3774 <_svfiprintf_r+0x1dc>)
    36de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    36e2:	2206      	movs	r2, #6
    36e4:	1c7e      	adds	r6, r7, #1
    36e6:	f001 f8e3 	bl	48b0 <memchr>
    36ea:	2800      	cmp	r0, #0
    36ec:	d035      	beq.n	375a <_svfiprintf_r+0x1c2>
    36ee:	4b22      	ldr	r3, [pc, #136]	; (3778 <_svfiprintf_r+0x1e0>)
    36f0:	b9fb      	cbnz	r3, 3732 <_svfiprintf_r+0x19a>
    36f2:	9b03      	ldr	r3, [sp, #12]
    36f4:	3307      	adds	r3, #7
    36f6:	f023 0307 	bic.w	r3, r3, #7
    36fa:	3308      	adds	r3, #8
    36fc:	9303      	str	r3, [sp, #12]
    36fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3700:	444b      	add	r3, r9
    3702:	9309      	str	r3, [sp, #36]	; 0x24
    3704:	e76c      	b.n	35e0 <_svfiprintf_r+0x48>
    3706:	fb00 3202 	mla	r2, r0, r2, r3
    370a:	2101      	movs	r1, #1
    370c:	e7a3      	b.n	3656 <_svfiprintf_r+0xbe>
    370e:	2300      	movs	r3, #0
    3710:	9305      	str	r3, [sp, #20]
    3712:	4618      	mov	r0, r3
    3714:	240a      	movs	r4, #10
    3716:	460f      	mov	r7, r1
    3718:	3101      	adds	r1, #1
    371a:	783a      	ldrb	r2, [r7, #0]
    371c:	3a30      	subs	r2, #48	; 0x30
    371e:	2a09      	cmp	r2, #9
    3720:	d903      	bls.n	372a <_svfiprintf_r+0x192>
    3722:	2b00      	cmp	r3, #0
    3724:	d0ca      	beq.n	36bc <_svfiprintf_r+0x124>
    3726:	9005      	str	r0, [sp, #20]
    3728:	e7c8      	b.n	36bc <_svfiprintf_r+0x124>
    372a:	fb04 2000 	mla	r0, r4, r0, r2
    372e:	2301      	movs	r3, #1
    3730:	e7f1      	b.n	3716 <_svfiprintf_r+0x17e>
    3732:	ab03      	add	r3, sp, #12
    3734:	9300      	str	r3, [sp, #0]
    3736:	462a      	mov	r2, r5
    3738:	4b10      	ldr	r3, [pc, #64]	; (377c <_svfiprintf_r+0x1e4>)
    373a:	a904      	add	r1, sp, #16
    373c:	4640      	mov	r0, r8
    373e:	f3af 8000 	nop.w
    3742:	f1b0 3fff 	cmp.w	r0, #4294967295
    3746:	4681      	mov	r9, r0
    3748:	d1d9      	bne.n	36fe <_svfiprintf_r+0x166>
    374a:	89ab      	ldrh	r3, [r5, #12]
    374c:	065b      	lsls	r3, r3, #25
    374e:	f53f af38 	bmi.w	35c2 <_svfiprintf_r+0x2a>
    3752:	9809      	ldr	r0, [sp, #36]	; 0x24
    3754:	b01d      	add	sp, #116	; 0x74
    3756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    375a:	ab03      	add	r3, sp, #12
    375c:	9300      	str	r3, [sp, #0]
    375e:	462a      	mov	r2, r5
    3760:	4b06      	ldr	r3, [pc, #24]	; (377c <_svfiprintf_r+0x1e4>)
    3762:	a904      	add	r1, sp, #16
    3764:	4640      	mov	r0, r8
    3766:	f000 f9bf 	bl	3ae8 <_printf_i>
    376a:	e7ea      	b.n	3742 <_svfiprintf_r+0x1aa>
    376c:	000051c8 	.word	0x000051c8
    3770:	000051ce 	.word	0x000051ce
    3774:	000051d2 	.word	0x000051d2
    3778:	00000000 	.word	0x00000000
    377c:	000034e1 	.word	0x000034e1

00003780 <__sfputc_r>:
    3780:	6893      	ldr	r3, [r2, #8]
    3782:	3b01      	subs	r3, #1
    3784:	2b00      	cmp	r3, #0
    3786:	b410      	push	{r4}
    3788:	6093      	str	r3, [r2, #8]
    378a:	da08      	bge.n	379e <__sfputc_r+0x1e>
    378c:	6994      	ldr	r4, [r2, #24]
    378e:	42a3      	cmp	r3, r4
    3790:	db02      	blt.n	3798 <__sfputc_r+0x18>
    3792:	b2cb      	uxtb	r3, r1
    3794:	2b0a      	cmp	r3, #10
    3796:	d102      	bne.n	379e <__sfputc_r+0x1e>
    3798:	bc10      	pop	{r4}
    379a:	f7ff bd3f 	b.w	321c <__swbuf_r>
    379e:	6813      	ldr	r3, [r2, #0]
    37a0:	1c58      	adds	r0, r3, #1
    37a2:	6010      	str	r0, [r2, #0]
    37a4:	7019      	strb	r1, [r3, #0]
    37a6:	b2c8      	uxtb	r0, r1
    37a8:	bc10      	pop	{r4}
    37aa:	4770      	bx	lr

000037ac <__sfputs_r>:
    37ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ae:	4606      	mov	r6, r0
    37b0:	460f      	mov	r7, r1
    37b2:	4614      	mov	r4, r2
    37b4:	18d5      	adds	r5, r2, r3
    37b6:	42ac      	cmp	r4, r5
    37b8:	d101      	bne.n	37be <__sfputs_r+0x12>
    37ba:	2000      	movs	r0, #0
    37bc:	e007      	b.n	37ce <__sfputs_r+0x22>
    37be:	463a      	mov	r2, r7
    37c0:	f814 1b01 	ldrb.w	r1, [r4], #1
    37c4:	4630      	mov	r0, r6
    37c6:	f7ff ffdb 	bl	3780 <__sfputc_r>
    37ca:	1c43      	adds	r3, r0, #1
    37cc:	d1f3      	bne.n	37b6 <__sfputs_r+0xa>
    37ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000037d0 <_vfiprintf_r>:
    37d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37d4:	b09d      	sub	sp, #116	; 0x74
    37d6:	460c      	mov	r4, r1
    37d8:	4617      	mov	r7, r2
    37da:	9303      	str	r3, [sp, #12]
    37dc:	4606      	mov	r6, r0
    37de:	b118      	cbz	r0, 37e8 <_vfiprintf_r+0x18>
    37e0:	6983      	ldr	r3, [r0, #24]
    37e2:	b90b      	cbnz	r3, 37e8 <_vfiprintf_r+0x18>
    37e4:	f7ff f9a6 	bl	2b34 <__sinit>
    37e8:	4b7c      	ldr	r3, [pc, #496]	; (39dc <_vfiprintf_r+0x20c>)
    37ea:	429c      	cmp	r4, r3
    37ec:	d157      	bne.n	389e <_vfiprintf_r+0xce>
    37ee:	6874      	ldr	r4, [r6, #4]
    37f0:	89a3      	ldrh	r3, [r4, #12]
    37f2:	0718      	lsls	r0, r3, #28
    37f4:	d55d      	bpl.n	38b2 <_vfiprintf_r+0xe2>
    37f6:	6923      	ldr	r3, [r4, #16]
    37f8:	2b00      	cmp	r3, #0
    37fa:	d05a      	beq.n	38b2 <_vfiprintf_r+0xe2>
    37fc:	2300      	movs	r3, #0
    37fe:	9309      	str	r3, [sp, #36]	; 0x24
    3800:	2320      	movs	r3, #32
    3802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3806:	2330      	movs	r3, #48	; 0x30
    3808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    380c:	f04f 0b01 	mov.w	fp, #1
    3810:	46b8      	mov	r8, r7
    3812:	4645      	mov	r5, r8
    3814:	f815 3b01 	ldrb.w	r3, [r5], #1
    3818:	2b00      	cmp	r3, #0
    381a:	d155      	bne.n	38c8 <_vfiprintf_r+0xf8>
    381c:	ebb8 0a07 	subs.w	sl, r8, r7
    3820:	d00b      	beq.n	383a <_vfiprintf_r+0x6a>
    3822:	4653      	mov	r3, sl
    3824:	463a      	mov	r2, r7
    3826:	4621      	mov	r1, r4
    3828:	4630      	mov	r0, r6
    382a:	f7ff ffbf 	bl	37ac <__sfputs_r>
    382e:	3001      	adds	r0, #1
    3830:	f000 80c4 	beq.w	39bc <_vfiprintf_r+0x1ec>
    3834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3836:	4453      	add	r3, sl
    3838:	9309      	str	r3, [sp, #36]	; 0x24
    383a:	f898 3000 	ldrb.w	r3, [r8]
    383e:	2b00      	cmp	r3, #0
    3840:	f000 80bc 	beq.w	39bc <_vfiprintf_r+0x1ec>
    3844:	2300      	movs	r3, #0
    3846:	f04f 32ff 	mov.w	r2, #4294967295
    384a:	9304      	str	r3, [sp, #16]
    384c:	9307      	str	r3, [sp, #28]
    384e:	9205      	str	r2, [sp, #20]
    3850:	9306      	str	r3, [sp, #24]
    3852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3856:	931a      	str	r3, [sp, #104]	; 0x68
    3858:	2205      	movs	r2, #5
    385a:	7829      	ldrb	r1, [r5, #0]
    385c:	4860      	ldr	r0, [pc, #384]	; (39e0 <_vfiprintf_r+0x210>)
    385e:	f001 f827 	bl	48b0 <memchr>
    3862:	f105 0801 	add.w	r8, r5, #1
    3866:	9b04      	ldr	r3, [sp, #16]
    3868:	2800      	cmp	r0, #0
    386a:	d131      	bne.n	38d0 <_vfiprintf_r+0x100>
    386c:	06d9      	lsls	r1, r3, #27
    386e:	bf44      	itt	mi
    3870:	2220      	movmi	r2, #32
    3872:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3876:	071a      	lsls	r2, r3, #28
    3878:	bf44      	itt	mi
    387a:	222b      	movmi	r2, #43	; 0x2b
    387c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3880:	782a      	ldrb	r2, [r5, #0]
    3882:	2a2a      	cmp	r2, #42	; 0x2a
    3884:	d02c      	beq.n	38e0 <_vfiprintf_r+0x110>
    3886:	9a07      	ldr	r2, [sp, #28]
    3888:	2100      	movs	r1, #0
    388a:	200a      	movs	r0, #10
    388c:	46a8      	mov	r8, r5
    388e:	3501      	adds	r5, #1
    3890:	f898 3000 	ldrb.w	r3, [r8]
    3894:	3b30      	subs	r3, #48	; 0x30
    3896:	2b09      	cmp	r3, #9
    3898:	d96d      	bls.n	3976 <_vfiprintf_r+0x1a6>
    389a:	b371      	cbz	r1, 38fa <_vfiprintf_r+0x12a>
    389c:	e026      	b.n	38ec <_vfiprintf_r+0x11c>
    389e:	4b51      	ldr	r3, [pc, #324]	; (39e4 <_vfiprintf_r+0x214>)
    38a0:	429c      	cmp	r4, r3
    38a2:	d101      	bne.n	38a8 <_vfiprintf_r+0xd8>
    38a4:	68b4      	ldr	r4, [r6, #8]
    38a6:	e7a3      	b.n	37f0 <_vfiprintf_r+0x20>
    38a8:	4b4f      	ldr	r3, [pc, #316]	; (39e8 <_vfiprintf_r+0x218>)
    38aa:	429c      	cmp	r4, r3
    38ac:	bf08      	it	eq
    38ae:	68f4      	ldreq	r4, [r6, #12]
    38b0:	e79e      	b.n	37f0 <_vfiprintf_r+0x20>
    38b2:	4621      	mov	r1, r4
    38b4:	4630      	mov	r0, r6
    38b6:	f7ff fd15 	bl	32e4 <__swsetup_r>
    38ba:	2800      	cmp	r0, #0
    38bc:	d09e      	beq.n	37fc <_vfiprintf_r+0x2c>
    38be:	f04f 30ff 	mov.w	r0, #4294967295
    38c2:	b01d      	add	sp, #116	; 0x74
    38c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38c8:	2b25      	cmp	r3, #37	; 0x25
    38ca:	d0a7      	beq.n	381c <_vfiprintf_r+0x4c>
    38cc:	46a8      	mov	r8, r5
    38ce:	e7a0      	b.n	3812 <_vfiprintf_r+0x42>
    38d0:	4a43      	ldr	r2, [pc, #268]	; (39e0 <_vfiprintf_r+0x210>)
    38d2:	1a80      	subs	r0, r0, r2
    38d4:	fa0b f000 	lsl.w	r0, fp, r0
    38d8:	4318      	orrs	r0, r3
    38da:	9004      	str	r0, [sp, #16]
    38dc:	4645      	mov	r5, r8
    38de:	e7bb      	b.n	3858 <_vfiprintf_r+0x88>
    38e0:	9a03      	ldr	r2, [sp, #12]
    38e2:	1d11      	adds	r1, r2, #4
    38e4:	6812      	ldr	r2, [r2, #0]
    38e6:	9103      	str	r1, [sp, #12]
    38e8:	2a00      	cmp	r2, #0
    38ea:	db01      	blt.n	38f0 <_vfiprintf_r+0x120>
    38ec:	9207      	str	r2, [sp, #28]
    38ee:	e004      	b.n	38fa <_vfiprintf_r+0x12a>
    38f0:	4252      	negs	r2, r2
    38f2:	f043 0302 	orr.w	r3, r3, #2
    38f6:	9207      	str	r2, [sp, #28]
    38f8:	9304      	str	r3, [sp, #16]
    38fa:	f898 3000 	ldrb.w	r3, [r8]
    38fe:	2b2e      	cmp	r3, #46	; 0x2e
    3900:	d110      	bne.n	3924 <_vfiprintf_r+0x154>
    3902:	f898 3001 	ldrb.w	r3, [r8, #1]
    3906:	2b2a      	cmp	r3, #42	; 0x2a
    3908:	f108 0101 	add.w	r1, r8, #1
    390c:	d137      	bne.n	397e <_vfiprintf_r+0x1ae>
    390e:	9b03      	ldr	r3, [sp, #12]
    3910:	1d1a      	adds	r2, r3, #4
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	9203      	str	r2, [sp, #12]
    3916:	2b00      	cmp	r3, #0
    3918:	bfb8      	it	lt
    391a:	f04f 33ff 	movlt.w	r3, #4294967295
    391e:	f108 0802 	add.w	r8, r8, #2
    3922:	9305      	str	r3, [sp, #20]
    3924:	4d31      	ldr	r5, [pc, #196]	; (39ec <_vfiprintf_r+0x21c>)
    3926:	f898 1000 	ldrb.w	r1, [r8]
    392a:	2203      	movs	r2, #3
    392c:	4628      	mov	r0, r5
    392e:	f000 ffbf 	bl	48b0 <memchr>
    3932:	b140      	cbz	r0, 3946 <_vfiprintf_r+0x176>
    3934:	2340      	movs	r3, #64	; 0x40
    3936:	1b40      	subs	r0, r0, r5
    3938:	fa03 f000 	lsl.w	r0, r3, r0
    393c:	9b04      	ldr	r3, [sp, #16]
    393e:	4303      	orrs	r3, r0
    3940:	9304      	str	r3, [sp, #16]
    3942:	f108 0801 	add.w	r8, r8, #1
    3946:	f898 1000 	ldrb.w	r1, [r8]
    394a:	4829      	ldr	r0, [pc, #164]	; (39f0 <_vfiprintf_r+0x220>)
    394c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3950:	2206      	movs	r2, #6
    3952:	f108 0701 	add.w	r7, r8, #1
    3956:	f000 ffab 	bl	48b0 <memchr>
    395a:	2800      	cmp	r0, #0
    395c:	d034      	beq.n	39c8 <_vfiprintf_r+0x1f8>
    395e:	4b25      	ldr	r3, [pc, #148]	; (39f4 <_vfiprintf_r+0x224>)
    3960:	bb03      	cbnz	r3, 39a4 <_vfiprintf_r+0x1d4>
    3962:	9b03      	ldr	r3, [sp, #12]
    3964:	3307      	adds	r3, #7
    3966:	f023 0307 	bic.w	r3, r3, #7
    396a:	3308      	adds	r3, #8
    396c:	9303      	str	r3, [sp, #12]
    396e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3970:	444b      	add	r3, r9
    3972:	9309      	str	r3, [sp, #36]	; 0x24
    3974:	e74c      	b.n	3810 <_vfiprintf_r+0x40>
    3976:	fb00 3202 	mla	r2, r0, r2, r3
    397a:	2101      	movs	r1, #1
    397c:	e786      	b.n	388c <_vfiprintf_r+0xbc>
    397e:	2300      	movs	r3, #0
    3980:	9305      	str	r3, [sp, #20]
    3982:	4618      	mov	r0, r3
    3984:	250a      	movs	r5, #10
    3986:	4688      	mov	r8, r1
    3988:	3101      	adds	r1, #1
    398a:	f898 2000 	ldrb.w	r2, [r8]
    398e:	3a30      	subs	r2, #48	; 0x30
    3990:	2a09      	cmp	r2, #9
    3992:	d903      	bls.n	399c <_vfiprintf_r+0x1cc>
    3994:	2b00      	cmp	r3, #0
    3996:	d0c5      	beq.n	3924 <_vfiprintf_r+0x154>
    3998:	9005      	str	r0, [sp, #20]
    399a:	e7c3      	b.n	3924 <_vfiprintf_r+0x154>
    399c:	fb05 2000 	mla	r0, r5, r0, r2
    39a0:	2301      	movs	r3, #1
    39a2:	e7f0      	b.n	3986 <_vfiprintf_r+0x1b6>
    39a4:	ab03      	add	r3, sp, #12
    39a6:	9300      	str	r3, [sp, #0]
    39a8:	4622      	mov	r2, r4
    39aa:	4b13      	ldr	r3, [pc, #76]	; (39f8 <_vfiprintf_r+0x228>)
    39ac:	a904      	add	r1, sp, #16
    39ae:	4630      	mov	r0, r6
    39b0:	f3af 8000 	nop.w
    39b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    39b8:	4681      	mov	r9, r0
    39ba:	d1d8      	bne.n	396e <_vfiprintf_r+0x19e>
    39bc:	89a3      	ldrh	r3, [r4, #12]
    39be:	065b      	lsls	r3, r3, #25
    39c0:	f53f af7d 	bmi.w	38be <_vfiprintf_r+0xee>
    39c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    39c6:	e77c      	b.n	38c2 <_vfiprintf_r+0xf2>
    39c8:	ab03      	add	r3, sp, #12
    39ca:	9300      	str	r3, [sp, #0]
    39cc:	4622      	mov	r2, r4
    39ce:	4b0a      	ldr	r3, [pc, #40]	; (39f8 <_vfiprintf_r+0x228>)
    39d0:	a904      	add	r1, sp, #16
    39d2:	4630      	mov	r0, r6
    39d4:	f000 f888 	bl	3ae8 <_printf_i>
    39d8:	e7ec      	b.n	39b4 <_vfiprintf_r+0x1e4>
    39da:	bf00      	nop
    39dc:	00005184 	.word	0x00005184
    39e0:	000051c8 	.word	0x000051c8
    39e4:	000051a4 	.word	0x000051a4
    39e8:	00005164 	.word	0x00005164
    39ec:	000051ce 	.word	0x000051ce
    39f0:	000051d2 	.word	0x000051d2
    39f4:	00000000 	.word	0x00000000
    39f8:	000037ad 	.word	0x000037ad

000039fc <_printf_common>:
    39fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a00:	4691      	mov	r9, r2
    3a02:	461f      	mov	r7, r3
    3a04:	688a      	ldr	r2, [r1, #8]
    3a06:	690b      	ldr	r3, [r1, #16]
    3a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3a0c:	4293      	cmp	r3, r2
    3a0e:	bfb8      	it	lt
    3a10:	4613      	movlt	r3, r2
    3a12:	f8c9 3000 	str.w	r3, [r9]
    3a16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    3a1a:	4606      	mov	r6, r0
    3a1c:	460c      	mov	r4, r1
    3a1e:	b112      	cbz	r2, 3a26 <_printf_common+0x2a>
    3a20:	3301      	adds	r3, #1
    3a22:	f8c9 3000 	str.w	r3, [r9]
    3a26:	6823      	ldr	r3, [r4, #0]
    3a28:	0699      	lsls	r1, r3, #26
    3a2a:	bf42      	ittt	mi
    3a2c:	f8d9 3000 	ldrmi.w	r3, [r9]
    3a30:	3302      	addmi	r3, #2
    3a32:	f8c9 3000 	strmi.w	r3, [r9]
    3a36:	6825      	ldr	r5, [r4, #0]
    3a38:	f015 0506 	ands.w	r5, r5, #6
    3a3c:	d107      	bne.n	3a4e <_printf_common+0x52>
    3a3e:	f104 0a19 	add.w	sl, r4, #25
    3a42:	68e3      	ldr	r3, [r4, #12]
    3a44:	f8d9 2000 	ldr.w	r2, [r9]
    3a48:	1a9b      	subs	r3, r3, r2
    3a4a:	429d      	cmp	r5, r3
    3a4c:	db29      	blt.n	3aa2 <_printf_common+0xa6>
    3a4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    3a52:	6822      	ldr	r2, [r4, #0]
    3a54:	3300      	adds	r3, #0
    3a56:	bf18      	it	ne
    3a58:	2301      	movne	r3, #1
    3a5a:	0692      	lsls	r2, r2, #26
    3a5c:	d42e      	bmi.n	3abc <_printf_common+0xc0>
    3a5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    3a62:	4639      	mov	r1, r7
    3a64:	4630      	mov	r0, r6
    3a66:	47c0      	blx	r8
    3a68:	3001      	adds	r0, #1
    3a6a:	d021      	beq.n	3ab0 <_printf_common+0xb4>
    3a6c:	6823      	ldr	r3, [r4, #0]
    3a6e:	68e5      	ldr	r5, [r4, #12]
    3a70:	f8d9 2000 	ldr.w	r2, [r9]
    3a74:	f003 0306 	and.w	r3, r3, #6
    3a78:	2b04      	cmp	r3, #4
    3a7a:	bf08      	it	eq
    3a7c:	1aad      	subeq	r5, r5, r2
    3a7e:	68a3      	ldr	r3, [r4, #8]
    3a80:	6922      	ldr	r2, [r4, #16]
    3a82:	bf0c      	ite	eq
    3a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3a88:	2500      	movne	r5, #0
    3a8a:	4293      	cmp	r3, r2
    3a8c:	bfc4      	itt	gt
    3a8e:	1a9b      	subgt	r3, r3, r2
    3a90:	18ed      	addgt	r5, r5, r3
    3a92:	f04f 0900 	mov.w	r9, #0
    3a96:	341a      	adds	r4, #26
    3a98:	454d      	cmp	r5, r9
    3a9a:	d11b      	bne.n	3ad4 <_printf_common+0xd8>
    3a9c:	2000      	movs	r0, #0
    3a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3aa2:	2301      	movs	r3, #1
    3aa4:	4652      	mov	r2, sl
    3aa6:	4639      	mov	r1, r7
    3aa8:	4630      	mov	r0, r6
    3aaa:	47c0      	blx	r8
    3aac:	3001      	adds	r0, #1
    3aae:	d103      	bne.n	3ab8 <_printf_common+0xbc>
    3ab0:	f04f 30ff 	mov.w	r0, #4294967295
    3ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ab8:	3501      	adds	r5, #1
    3aba:	e7c2      	b.n	3a42 <_printf_common+0x46>
    3abc:	18e1      	adds	r1, r4, r3
    3abe:	1c5a      	adds	r2, r3, #1
    3ac0:	2030      	movs	r0, #48	; 0x30
    3ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    3ac6:	4422      	add	r2, r4
    3ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3ad0:	3302      	adds	r3, #2
    3ad2:	e7c4      	b.n	3a5e <_printf_common+0x62>
    3ad4:	2301      	movs	r3, #1
    3ad6:	4622      	mov	r2, r4
    3ad8:	4639      	mov	r1, r7
    3ada:	4630      	mov	r0, r6
    3adc:	47c0      	blx	r8
    3ade:	3001      	adds	r0, #1
    3ae0:	d0e6      	beq.n	3ab0 <_printf_common+0xb4>
    3ae2:	f109 0901 	add.w	r9, r9, #1
    3ae6:	e7d7      	b.n	3a98 <_printf_common+0x9c>

00003ae8 <_printf_i>:
    3ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3aec:	4617      	mov	r7, r2
    3aee:	7e0a      	ldrb	r2, [r1, #24]
    3af0:	b085      	sub	sp, #20
    3af2:	2a6e      	cmp	r2, #110	; 0x6e
    3af4:	4698      	mov	r8, r3
    3af6:	4606      	mov	r6, r0
    3af8:	460c      	mov	r4, r1
    3afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3afc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3b00:	f000 80bc 	beq.w	3c7c <_printf_i+0x194>
    3b04:	d81a      	bhi.n	3b3c <_printf_i+0x54>
    3b06:	2a63      	cmp	r2, #99	; 0x63
    3b08:	d02e      	beq.n	3b68 <_printf_i+0x80>
    3b0a:	d80a      	bhi.n	3b22 <_printf_i+0x3a>
    3b0c:	2a00      	cmp	r2, #0
    3b0e:	f000 80c8 	beq.w	3ca2 <_printf_i+0x1ba>
    3b12:	2a58      	cmp	r2, #88	; 0x58
    3b14:	f000 808a 	beq.w	3c2c <_printf_i+0x144>
    3b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3b1c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    3b20:	e02a      	b.n	3b78 <_printf_i+0x90>
    3b22:	2a64      	cmp	r2, #100	; 0x64
    3b24:	d001      	beq.n	3b2a <_printf_i+0x42>
    3b26:	2a69      	cmp	r2, #105	; 0x69
    3b28:	d1f6      	bne.n	3b18 <_printf_i+0x30>
    3b2a:	6821      	ldr	r1, [r4, #0]
    3b2c:	681a      	ldr	r2, [r3, #0]
    3b2e:	f011 0f80 	tst.w	r1, #128	; 0x80
    3b32:	d023      	beq.n	3b7c <_printf_i+0x94>
    3b34:	1d11      	adds	r1, r2, #4
    3b36:	6019      	str	r1, [r3, #0]
    3b38:	6813      	ldr	r3, [r2, #0]
    3b3a:	e027      	b.n	3b8c <_printf_i+0xa4>
    3b3c:	2a73      	cmp	r2, #115	; 0x73
    3b3e:	f000 80b4 	beq.w	3caa <_printf_i+0x1c2>
    3b42:	d808      	bhi.n	3b56 <_printf_i+0x6e>
    3b44:	2a6f      	cmp	r2, #111	; 0x6f
    3b46:	d02a      	beq.n	3b9e <_printf_i+0xb6>
    3b48:	2a70      	cmp	r2, #112	; 0x70
    3b4a:	d1e5      	bne.n	3b18 <_printf_i+0x30>
    3b4c:	680a      	ldr	r2, [r1, #0]
    3b4e:	f042 0220 	orr.w	r2, r2, #32
    3b52:	600a      	str	r2, [r1, #0]
    3b54:	e003      	b.n	3b5e <_printf_i+0x76>
    3b56:	2a75      	cmp	r2, #117	; 0x75
    3b58:	d021      	beq.n	3b9e <_printf_i+0xb6>
    3b5a:	2a78      	cmp	r2, #120	; 0x78
    3b5c:	d1dc      	bne.n	3b18 <_printf_i+0x30>
    3b5e:	2278      	movs	r2, #120	; 0x78
    3b60:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    3b64:	496e      	ldr	r1, [pc, #440]	; (3d20 <_printf_i+0x238>)
    3b66:	e064      	b.n	3c32 <_printf_i+0x14a>
    3b68:	681a      	ldr	r2, [r3, #0]
    3b6a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    3b6e:	1d11      	adds	r1, r2, #4
    3b70:	6019      	str	r1, [r3, #0]
    3b72:	6813      	ldr	r3, [r2, #0]
    3b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3b78:	2301      	movs	r3, #1
    3b7a:	e0a3      	b.n	3cc4 <_printf_i+0x1dc>
    3b7c:	f011 0f40 	tst.w	r1, #64	; 0x40
    3b80:	f102 0104 	add.w	r1, r2, #4
    3b84:	6019      	str	r1, [r3, #0]
    3b86:	d0d7      	beq.n	3b38 <_printf_i+0x50>
    3b88:	f9b2 3000 	ldrsh.w	r3, [r2]
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	da03      	bge.n	3b98 <_printf_i+0xb0>
    3b90:	222d      	movs	r2, #45	; 0x2d
    3b92:	425b      	negs	r3, r3
    3b94:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3b98:	4962      	ldr	r1, [pc, #392]	; (3d24 <_printf_i+0x23c>)
    3b9a:	220a      	movs	r2, #10
    3b9c:	e017      	b.n	3bce <_printf_i+0xe6>
    3b9e:	6820      	ldr	r0, [r4, #0]
    3ba0:	6819      	ldr	r1, [r3, #0]
    3ba2:	f010 0f80 	tst.w	r0, #128	; 0x80
    3ba6:	d003      	beq.n	3bb0 <_printf_i+0xc8>
    3ba8:	1d08      	adds	r0, r1, #4
    3baa:	6018      	str	r0, [r3, #0]
    3bac:	680b      	ldr	r3, [r1, #0]
    3bae:	e006      	b.n	3bbe <_printf_i+0xd6>
    3bb0:	f010 0f40 	tst.w	r0, #64	; 0x40
    3bb4:	f101 0004 	add.w	r0, r1, #4
    3bb8:	6018      	str	r0, [r3, #0]
    3bba:	d0f7      	beq.n	3bac <_printf_i+0xc4>
    3bbc:	880b      	ldrh	r3, [r1, #0]
    3bbe:	4959      	ldr	r1, [pc, #356]	; (3d24 <_printf_i+0x23c>)
    3bc0:	2a6f      	cmp	r2, #111	; 0x6f
    3bc2:	bf14      	ite	ne
    3bc4:	220a      	movne	r2, #10
    3bc6:	2208      	moveq	r2, #8
    3bc8:	2000      	movs	r0, #0
    3bca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3bce:	6865      	ldr	r5, [r4, #4]
    3bd0:	60a5      	str	r5, [r4, #8]
    3bd2:	2d00      	cmp	r5, #0
    3bd4:	f2c0 809c 	blt.w	3d10 <_printf_i+0x228>
    3bd8:	6820      	ldr	r0, [r4, #0]
    3bda:	f020 0004 	bic.w	r0, r0, #4
    3bde:	6020      	str	r0, [r4, #0]
    3be0:	2b00      	cmp	r3, #0
    3be2:	d13f      	bne.n	3c64 <_printf_i+0x17c>
    3be4:	2d00      	cmp	r5, #0
    3be6:	f040 8095 	bne.w	3d14 <_printf_i+0x22c>
    3bea:	4675      	mov	r5, lr
    3bec:	2a08      	cmp	r2, #8
    3bee:	d10b      	bne.n	3c08 <_printf_i+0x120>
    3bf0:	6823      	ldr	r3, [r4, #0]
    3bf2:	07da      	lsls	r2, r3, #31
    3bf4:	d508      	bpl.n	3c08 <_printf_i+0x120>
    3bf6:	6923      	ldr	r3, [r4, #16]
    3bf8:	6862      	ldr	r2, [r4, #4]
    3bfa:	429a      	cmp	r2, r3
    3bfc:	bfde      	ittt	le
    3bfe:	2330      	movle	r3, #48	; 0x30
    3c00:	f805 3c01 	strble.w	r3, [r5, #-1]
    3c04:	f105 35ff 	addle.w	r5, r5, #4294967295
    3c08:	ebae 0305 	sub.w	r3, lr, r5
    3c0c:	6123      	str	r3, [r4, #16]
    3c0e:	f8cd 8000 	str.w	r8, [sp]
    3c12:	463b      	mov	r3, r7
    3c14:	aa03      	add	r2, sp, #12
    3c16:	4621      	mov	r1, r4
    3c18:	4630      	mov	r0, r6
    3c1a:	f7ff feef 	bl	39fc <_printf_common>
    3c1e:	3001      	adds	r0, #1
    3c20:	d155      	bne.n	3cce <_printf_i+0x1e6>
    3c22:	f04f 30ff 	mov.w	r0, #4294967295
    3c26:	b005      	add	sp, #20
    3c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c2c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    3c30:	493c      	ldr	r1, [pc, #240]	; (3d24 <_printf_i+0x23c>)
    3c32:	6822      	ldr	r2, [r4, #0]
    3c34:	6818      	ldr	r0, [r3, #0]
    3c36:	f012 0f80 	tst.w	r2, #128	; 0x80
    3c3a:	f100 0504 	add.w	r5, r0, #4
    3c3e:	601d      	str	r5, [r3, #0]
    3c40:	d001      	beq.n	3c46 <_printf_i+0x15e>
    3c42:	6803      	ldr	r3, [r0, #0]
    3c44:	e002      	b.n	3c4c <_printf_i+0x164>
    3c46:	0655      	lsls	r5, r2, #25
    3c48:	d5fb      	bpl.n	3c42 <_printf_i+0x15a>
    3c4a:	8803      	ldrh	r3, [r0, #0]
    3c4c:	07d0      	lsls	r0, r2, #31
    3c4e:	bf44      	itt	mi
    3c50:	f042 0220 	orrmi.w	r2, r2, #32
    3c54:	6022      	strmi	r2, [r4, #0]
    3c56:	b91b      	cbnz	r3, 3c60 <_printf_i+0x178>
    3c58:	6822      	ldr	r2, [r4, #0]
    3c5a:	f022 0220 	bic.w	r2, r2, #32
    3c5e:	6022      	str	r2, [r4, #0]
    3c60:	2210      	movs	r2, #16
    3c62:	e7b1      	b.n	3bc8 <_printf_i+0xe0>
    3c64:	4675      	mov	r5, lr
    3c66:	fbb3 f0f2 	udiv	r0, r3, r2
    3c6a:	fb02 3310 	mls	r3, r2, r0, r3
    3c6e:	5ccb      	ldrb	r3, [r1, r3]
    3c70:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3c74:	4603      	mov	r3, r0
    3c76:	2800      	cmp	r0, #0
    3c78:	d1f5      	bne.n	3c66 <_printf_i+0x17e>
    3c7a:	e7b7      	b.n	3bec <_printf_i+0x104>
    3c7c:	6808      	ldr	r0, [r1, #0]
    3c7e:	681a      	ldr	r2, [r3, #0]
    3c80:	6949      	ldr	r1, [r1, #20]
    3c82:	f010 0f80 	tst.w	r0, #128	; 0x80
    3c86:	d004      	beq.n	3c92 <_printf_i+0x1aa>
    3c88:	1d10      	adds	r0, r2, #4
    3c8a:	6018      	str	r0, [r3, #0]
    3c8c:	6813      	ldr	r3, [r2, #0]
    3c8e:	6019      	str	r1, [r3, #0]
    3c90:	e007      	b.n	3ca2 <_printf_i+0x1ba>
    3c92:	f010 0f40 	tst.w	r0, #64	; 0x40
    3c96:	f102 0004 	add.w	r0, r2, #4
    3c9a:	6018      	str	r0, [r3, #0]
    3c9c:	6813      	ldr	r3, [r2, #0]
    3c9e:	d0f6      	beq.n	3c8e <_printf_i+0x1a6>
    3ca0:	8019      	strh	r1, [r3, #0]
    3ca2:	2300      	movs	r3, #0
    3ca4:	6123      	str	r3, [r4, #16]
    3ca6:	4675      	mov	r5, lr
    3ca8:	e7b1      	b.n	3c0e <_printf_i+0x126>
    3caa:	681a      	ldr	r2, [r3, #0]
    3cac:	1d11      	adds	r1, r2, #4
    3cae:	6019      	str	r1, [r3, #0]
    3cb0:	6815      	ldr	r5, [r2, #0]
    3cb2:	6862      	ldr	r2, [r4, #4]
    3cb4:	2100      	movs	r1, #0
    3cb6:	4628      	mov	r0, r5
    3cb8:	f000 fdfa 	bl	48b0 <memchr>
    3cbc:	b108      	cbz	r0, 3cc2 <_printf_i+0x1da>
    3cbe:	1b40      	subs	r0, r0, r5
    3cc0:	6060      	str	r0, [r4, #4]
    3cc2:	6863      	ldr	r3, [r4, #4]
    3cc4:	6123      	str	r3, [r4, #16]
    3cc6:	2300      	movs	r3, #0
    3cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3ccc:	e79f      	b.n	3c0e <_printf_i+0x126>
    3cce:	6923      	ldr	r3, [r4, #16]
    3cd0:	462a      	mov	r2, r5
    3cd2:	4639      	mov	r1, r7
    3cd4:	4630      	mov	r0, r6
    3cd6:	47c0      	blx	r8
    3cd8:	3001      	adds	r0, #1
    3cda:	d0a2      	beq.n	3c22 <_printf_i+0x13a>
    3cdc:	6823      	ldr	r3, [r4, #0]
    3cde:	079b      	lsls	r3, r3, #30
    3ce0:	d507      	bpl.n	3cf2 <_printf_i+0x20a>
    3ce2:	2500      	movs	r5, #0
    3ce4:	f104 0919 	add.w	r9, r4, #25
    3ce8:	68e3      	ldr	r3, [r4, #12]
    3cea:	9a03      	ldr	r2, [sp, #12]
    3cec:	1a9b      	subs	r3, r3, r2
    3cee:	429d      	cmp	r5, r3
    3cf0:	db05      	blt.n	3cfe <_printf_i+0x216>
    3cf2:	68e0      	ldr	r0, [r4, #12]
    3cf4:	9b03      	ldr	r3, [sp, #12]
    3cf6:	4298      	cmp	r0, r3
    3cf8:	bfb8      	it	lt
    3cfa:	4618      	movlt	r0, r3
    3cfc:	e793      	b.n	3c26 <_printf_i+0x13e>
    3cfe:	2301      	movs	r3, #1
    3d00:	464a      	mov	r2, r9
    3d02:	4639      	mov	r1, r7
    3d04:	4630      	mov	r0, r6
    3d06:	47c0      	blx	r8
    3d08:	3001      	adds	r0, #1
    3d0a:	d08a      	beq.n	3c22 <_printf_i+0x13a>
    3d0c:	3501      	adds	r5, #1
    3d0e:	e7eb      	b.n	3ce8 <_printf_i+0x200>
    3d10:	2b00      	cmp	r3, #0
    3d12:	d1a7      	bne.n	3c64 <_printf_i+0x17c>
    3d14:	780b      	ldrb	r3, [r1, #0]
    3d16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3d1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3d1e:	e765      	b.n	3bec <_printf_i+0x104>
    3d20:	000051ea 	.word	0x000051ea
    3d24:	000051d9 	.word	0x000051d9

00003d28 <__svfiscanf_r>:
    3d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d2c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    3d30:	f10d 080c 	add.w	r8, sp, #12
    3d34:	9301      	str	r3, [sp, #4]
    3d36:	2300      	movs	r3, #0
    3d38:	9346      	str	r3, [sp, #280]	; 0x118
    3d3a:	9347      	str	r3, [sp, #284]	; 0x11c
    3d3c:	4ba0      	ldr	r3, [pc, #640]	; (3fc0 <__svfiscanf_r+0x298>)
    3d3e:	93a2      	str	r3, [sp, #648]	; 0x288
    3d40:	f8df 9284 	ldr.w	r9, [pc, #644]	; 3fc8 <__svfiscanf_r+0x2a0>
    3d44:	4b9f      	ldr	r3, [pc, #636]	; (3fc4 <__svfiscanf_r+0x29c>)
    3d46:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    3d4a:	4606      	mov	r6, r0
    3d4c:	460c      	mov	r4, r1
    3d4e:	93a3      	str	r3, [sp, #652]	; 0x28c
    3d50:	4692      	mov	sl, r2
    3d52:	270a      	movs	r7, #10
    3d54:	f89a 3000 	ldrb.w	r3, [sl]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	f000 812f 	beq.w	3fbc <__svfiscanf_r+0x294>
    3d5e:	f000 fd83 	bl	4868 <__locale_ctype_ptr>
    3d62:	f89a b000 	ldrb.w	fp, [sl]
    3d66:	4458      	add	r0, fp
    3d68:	7843      	ldrb	r3, [r0, #1]
    3d6a:	f013 0308 	ands.w	r3, r3, #8
    3d6e:	d143      	bne.n	3df8 <__svfiscanf_r+0xd0>
    3d70:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    3d74:	f10a 0501 	add.w	r5, sl, #1
    3d78:	f040 8099 	bne.w	3eae <__svfiscanf_r+0x186>
    3d7c:	9345      	str	r3, [sp, #276]	; 0x114
    3d7e:	9343      	str	r3, [sp, #268]	; 0x10c
    3d80:	f89a 3001 	ldrb.w	r3, [sl, #1]
    3d84:	2b2a      	cmp	r3, #42	; 0x2a
    3d86:	d103      	bne.n	3d90 <__svfiscanf_r+0x68>
    3d88:	2310      	movs	r3, #16
    3d8a:	9343      	str	r3, [sp, #268]	; 0x10c
    3d8c:	f10a 0502 	add.w	r5, sl, #2
    3d90:	7829      	ldrb	r1, [r5, #0]
    3d92:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    3d96:	2a09      	cmp	r2, #9
    3d98:	46aa      	mov	sl, r5
    3d9a:	f105 0501 	add.w	r5, r5, #1
    3d9e:	d941      	bls.n	3e24 <__svfiscanf_r+0xfc>
    3da0:	2203      	movs	r2, #3
    3da2:	4889      	ldr	r0, [pc, #548]	; (3fc8 <__svfiscanf_r+0x2a0>)
    3da4:	f000 fd84 	bl	48b0 <memchr>
    3da8:	b138      	cbz	r0, 3dba <__svfiscanf_r+0x92>
    3daa:	eba0 0309 	sub.w	r3, r0, r9
    3dae:	2001      	movs	r0, #1
    3db0:	4098      	lsls	r0, r3
    3db2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3db4:	4318      	orrs	r0, r3
    3db6:	9043      	str	r0, [sp, #268]	; 0x10c
    3db8:	46aa      	mov	sl, r5
    3dba:	f89a 3000 	ldrb.w	r3, [sl]
    3dbe:	2b67      	cmp	r3, #103	; 0x67
    3dc0:	f10a 0501 	add.w	r5, sl, #1
    3dc4:	d84a      	bhi.n	3e5c <__svfiscanf_r+0x134>
    3dc6:	2b65      	cmp	r3, #101	; 0x65
    3dc8:	f080 80b7 	bcs.w	3f3a <__svfiscanf_r+0x212>
    3dcc:	2b47      	cmp	r3, #71	; 0x47
    3dce:	d82f      	bhi.n	3e30 <__svfiscanf_r+0x108>
    3dd0:	2b45      	cmp	r3, #69	; 0x45
    3dd2:	f080 80b2 	bcs.w	3f3a <__svfiscanf_r+0x212>
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	f000 8082 	beq.w	3ee0 <__svfiscanf_r+0x1b8>
    3ddc:	2b25      	cmp	r3, #37	; 0x25
    3dde:	d066      	beq.n	3eae <__svfiscanf_r+0x186>
    3de0:	2303      	movs	r3, #3
    3de2:	9349      	str	r3, [sp, #292]	; 0x124
    3de4:	9744      	str	r7, [sp, #272]	; 0x110
    3de6:	e045      	b.n	3e74 <__svfiscanf_r+0x14c>
    3de8:	9947      	ldr	r1, [sp, #284]	; 0x11c
    3dea:	3101      	adds	r1, #1
    3dec:	9147      	str	r1, [sp, #284]	; 0x11c
    3dee:	6861      	ldr	r1, [r4, #4]
    3df0:	3301      	adds	r3, #1
    3df2:	3901      	subs	r1, #1
    3df4:	6061      	str	r1, [r4, #4]
    3df6:	6023      	str	r3, [r4, #0]
    3df8:	6863      	ldr	r3, [r4, #4]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	dd0b      	ble.n	3e16 <__svfiscanf_r+0xee>
    3dfe:	f000 fd33 	bl	4868 <__locale_ctype_ptr>
    3e02:	6823      	ldr	r3, [r4, #0]
    3e04:	7819      	ldrb	r1, [r3, #0]
    3e06:	4408      	add	r0, r1
    3e08:	7841      	ldrb	r1, [r0, #1]
    3e0a:	070d      	lsls	r5, r1, #28
    3e0c:	d4ec      	bmi.n	3de8 <__svfiscanf_r+0xc0>
    3e0e:	f10a 0501 	add.w	r5, sl, #1
    3e12:	46aa      	mov	sl, r5
    3e14:	e79e      	b.n	3d54 <__svfiscanf_r+0x2c>
    3e16:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3e18:	4621      	mov	r1, r4
    3e1a:	4630      	mov	r0, r6
    3e1c:	4798      	blx	r3
    3e1e:	2800      	cmp	r0, #0
    3e20:	d0ed      	beq.n	3dfe <__svfiscanf_r+0xd6>
    3e22:	e7f4      	b.n	3e0e <__svfiscanf_r+0xe6>
    3e24:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3e26:	fb07 1303 	mla	r3, r7, r3, r1
    3e2a:	3b30      	subs	r3, #48	; 0x30
    3e2c:	9345      	str	r3, [sp, #276]	; 0x114
    3e2e:	e7af      	b.n	3d90 <__svfiscanf_r+0x68>
    3e30:	2b5b      	cmp	r3, #91	; 0x5b
    3e32:	d061      	beq.n	3ef8 <__svfiscanf_r+0x1d0>
    3e34:	d80c      	bhi.n	3e50 <__svfiscanf_r+0x128>
    3e36:	2b58      	cmp	r3, #88	; 0x58
    3e38:	d1d2      	bne.n	3de0 <__svfiscanf_r+0xb8>
    3e3a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    3e40:	9243      	str	r2, [sp, #268]	; 0x10c
    3e42:	2210      	movs	r2, #16
    3e44:	9244      	str	r2, [sp, #272]	; 0x110
    3e46:	2b6f      	cmp	r3, #111	; 0x6f
    3e48:	bfb4      	ite	lt
    3e4a:	2303      	movlt	r3, #3
    3e4c:	2304      	movge	r3, #4
    3e4e:	e010      	b.n	3e72 <__svfiscanf_r+0x14a>
    3e50:	2b63      	cmp	r3, #99	; 0x63
    3e52:	d05c      	beq.n	3f0e <__svfiscanf_r+0x1e6>
    3e54:	2b64      	cmp	r3, #100	; 0x64
    3e56:	d1c3      	bne.n	3de0 <__svfiscanf_r+0xb8>
    3e58:	9744      	str	r7, [sp, #272]	; 0x110
    3e5a:	e7f4      	b.n	3e46 <__svfiscanf_r+0x11e>
    3e5c:	2b70      	cmp	r3, #112	; 0x70
    3e5e:	d042      	beq.n	3ee6 <__svfiscanf_r+0x1be>
    3e60:	d81d      	bhi.n	3e9e <__svfiscanf_r+0x176>
    3e62:	2b6e      	cmp	r3, #110	; 0x6e
    3e64:	d059      	beq.n	3f1a <__svfiscanf_r+0x1f2>
    3e66:	d843      	bhi.n	3ef0 <__svfiscanf_r+0x1c8>
    3e68:	2b69      	cmp	r3, #105	; 0x69
    3e6a:	d1b9      	bne.n	3de0 <__svfiscanf_r+0xb8>
    3e6c:	2300      	movs	r3, #0
    3e6e:	9344      	str	r3, [sp, #272]	; 0x110
    3e70:	2303      	movs	r3, #3
    3e72:	9349      	str	r3, [sp, #292]	; 0x124
    3e74:	6863      	ldr	r3, [r4, #4]
    3e76:	2b00      	cmp	r3, #0
    3e78:	dd61      	ble.n	3f3e <__svfiscanf_r+0x216>
    3e7a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3e7c:	0659      	lsls	r1, r3, #25
    3e7e:	d56f      	bpl.n	3f60 <__svfiscanf_r+0x238>
    3e80:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3e82:	2b02      	cmp	r3, #2
    3e84:	dc7c      	bgt.n	3f80 <__svfiscanf_r+0x258>
    3e86:	ab01      	add	r3, sp, #4
    3e88:	4622      	mov	r2, r4
    3e8a:	a943      	add	r1, sp, #268	; 0x10c
    3e8c:	4630      	mov	r0, r6
    3e8e:	f000 f8c7 	bl	4020 <_scanf_chars>
    3e92:	2801      	cmp	r0, #1
    3e94:	f000 8092 	beq.w	3fbc <__svfiscanf_r+0x294>
    3e98:	2802      	cmp	r0, #2
    3e9a:	d1ba      	bne.n	3e12 <__svfiscanf_r+0xea>
    3e9c:	e01d      	b.n	3eda <__svfiscanf_r+0x1b2>
    3e9e:	2b75      	cmp	r3, #117	; 0x75
    3ea0:	d0da      	beq.n	3e58 <__svfiscanf_r+0x130>
    3ea2:	2b78      	cmp	r3, #120	; 0x78
    3ea4:	d0c9      	beq.n	3e3a <__svfiscanf_r+0x112>
    3ea6:	2b73      	cmp	r3, #115	; 0x73
    3ea8:	d19a      	bne.n	3de0 <__svfiscanf_r+0xb8>
    3eaa:	2302      	movs	r3, #2
    3eac:	e7e1      	b.n	3e72 <__svfiscanf_r+0x14a>
    3eae:	6863      	ldr	r3, [r4, #4]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	dd0c      	ble.n	3ece <__svfiscanf_r+0x1a6>
    3eb4:	6823      	ldr	r3, [r4, #0]
    3eb6:	781a      	ldrb	r2, [r3, #0]
    3eb8:	4593      	cmp	fp, r2
    3eba:	d17f      	bne.n	3fbc <__svfiscanf_r+0x294>
    3ebc:	3301      	adds	r3, #1
    3ebe:	6862      	ldr	r2, [r4, #4]
    3ec0:	6023      	str	r3, [r4, #0]
    3ec2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3ec4:	3a01      	subs	r2, #1
    3ec6:	3301      	adds	r3, #1
    3ec8:	6062      	str	r2, [r4, #4]
    3eca:	9347      	str	r3, [sp, #284]	; 0x11c
    3ecc:	e7a1      	b.n	3e12 <__svfiscanf_r+0xea>
    3ece:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3ed0:	4621      	mov	r1, r4
    3ed2:	4630      	mov	r0, r6
    3ed4:	4798      	blx	r3
    3ed6:	2800      	cmp	r0, #0
    3ed8:	d0ec      	beq.n	3eb4 <__svfiscanf_r+0x18c>
    3eda:	9846      	ldr	r0, [sp, #280]	; 0x118
    3edc:	2800      	cmp	r0, #0
    3ede:	d163      	bne.n	3fa8 <__svfiscanf_r+0x280>
    3ee0:	f04f 30ff 	mov.w	r0, #4294967295
    3ee4:	e066      	b.n	3fb4 <__svfiscanf_r+0x28c>
    3ee6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3ee8:	f042 0220 	orr.w	r2, r2, #32
    3eec:	9243      	str	r2, [sp, #268]	; 0x10c
    3eee:	e7a4      	b.n	3e3a <__svfiscanf_r+0x112>
    3ef0:	2308      	movs	r3, #8
    3ef2:	9344      	str	r3, [sp, #272]	; 0x110
    3ef4:	2304      	movs	r3, #4
    3ef6:	e7bc      	b.n	3e72 <__svfiscanf_r+0x14a>
    3ef8:	4629      	mov	r1, r5
    3efa:	4640      	mov	r0, r8
    3efc:	f000 fa8e 	bl	441c <__sccl>
    3f00:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f06:	9343      	str	r3, [sp, #268]	; 0x10c
    3f08:	4605      	mov	r5, r0
    3f0a:	2301      	movs	r3, #1
    3f0c:	e7b1      	b.n	3e72 <__svfiscanf_r+0x14a>
    3f0e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f14:	9343      	str	r3, [sp, #268]	; 0x10c
    3f16:	2300      	movs	r3, #0
    3f18:	e7ab      	b.n	3e72 <__svfiscanf_r+0x14a>
    3f1a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3f1c:	06d0      	lsls	r0, r2, #27
    3f1e:	f53f af78 	bmi.w	3e12 <__svfiscanf_r+0xea>
    3f22:	f012 0f01 	tst.w	r2, #1
    3f26:	9a01      	ldr	r2, [sp, #4]
    3f28:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3f2a:	f102 0104 	add.w	r1, r2, #4
    3f2e:	9101      	str	r1, [sp, #4]
    3f30:	6812      	ldr	r2, [r2, #0]
    3f32:	bf14      	ite	ne
    3f34:	8013      	strhne	r3, [r2, #0]
    3f36:	6013      	streq	r3, [r2, #0]
    3f38:	e76b      	b.n	3e12 <__svfiscanf_r+0xea>
    3f3a:	2305      	movs	r3, #5
    3f3c:	e799      	b.n	3e72 <__svfiscanf_r+0x14a>
    3f3e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3f40:	4621      	mov	r1, r4
    3f42:	4630      	mov	r0, r6
    3f44:	4798      	blx	r3
    3f46:	2800      	cmp	r0, #0
    3f48:	d097      	beq.n	3e7a <__svfiscanf_r+0x152>
    3f4a:	e7c6      	b.n	3eda <__svfiscanf_r+0x1b2>
    3f4c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3f4e:	3201      	adds	r2, #1
    3f50:	9247      	str	r2, [sp, #284]	; 0x11c
    3f52:	6862      	ldr	r2, [r4, #4]
    3f54:	3a01      	subs	r2, #1
    3f56:	2a00      	cmp	r2, #0
    3f58:	6062      	str	r2, [r4, #4]
    3f5a:	dd0a      	ble.n	3f72 <__svfiscanf_r+0x24a>
    3f5c:	3301      	adds	r3, #1
    3f5e:	6023      	str	r3, [r4, #0]
    3f60:	f000 fc82 	bl	4868 <__locale_ctype_ptr>
    3f64:	6823      	ldr	r3, [r4, #0]
    3f66:	781a      	ldrb	r2, [r3, #0]
    3f68:	4410      	add	r0, r2
    3f6a:	7842      	ldrb	r2, [r0, #1]
    3f6c:	0712      	lsls	r2, r2, #28
    3f6e:	d4ed      	bmi.n	3f4c <__svfiscanf_r+0x224>
    3f70:	e786      	b.n	3e80 <__svfiscanf_r+0x158>
    3f72:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3f74:	4621      	mov	r1, r4
    3f76:	4630      	mov	r0, r6
    3f78:	4798      	blx	r3
    3f7a:	2800      	cmp	r0, #0
    3f7c:	d0f0      	beq.n	3f60 <__svfiscanf_r+0x238>
    3f7e:	e7ac      	b.n	3eda <__svfiscanf_r+0x1b2>
    3f80:	2b04      	cmp	r3, #4
    3f82:	dc06      	bgt.n	3f92 <__svfiscanf_r+0x26a>
    3f84:	ab01      	add	r3, sp, #4
    3f86:	4622      	mov	r2, r4
    3f88:	a943      	add	r1, sp, #268	; 0x10c
    3f8a:	4630      	mov	r0, r6
    3f8c:	f000 f8ac 	bl	40e8 <_scanf_i>
    3f90:	e77f      	b.n	3e92 <__svfiscanf_r+0x16a>
    3f92:	4b0e      	ldr	r3, [pc, #56]	; (3fcc <__svfiscanf_r+0x2a4>)
    3f94:	2b00      	cmp	r3, #0
    3f96:	f43f af3c 	beq.w	3e12 <__svfiscanf_r+0xea>
    3f9a:	ab01      	add	r3, sp, #4
    3f9c:	4622      	mov	r2, r4
    3f9e:	a943      	add	r1, sp, #268	; 0x10c
    3fa0:	4630      	mov	r0, r6
    3fa2:	f3af 8000 	nop.w
    3fa6:	e774      	b.n	3e92 <__svfiscanf_r+0x16a>
    3fa8:	89a3      	ldrh	r3, [r4, #12]
    3faa:	f013 0f40 	tst.w	r3, #64	; 0x40
    3fae:	bf18      	it	ne
    3fb0:	f04f 30ff 	movne.w	r0, #4294967295
    3fb4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    3fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fbc:	9846      	ldr	r0, [sp, #280]	; 0x118
    3fbe:	e7f9      	b.n	3fb4 <__svfiscanf_r+0x28c>
    3fc0:	00004739 	.word	0x00004739
    3fc4:	00004309 	.word	0x00004309
    3fc8:	000051ce 	.word	0x000051ce
    3fcc:	00000000 	.word	0x00000000

00003fd0 <_vfiscanf_r>:
    3fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fd4:	460c      	mov	r4, r1
    3fd6:	4616      	mov	r6, r2
    3fd8:	461f      	mov	r7, r3
    3fda:	4605      	mov	r5, r0
    3fdc:	b118      	cbz	r0, 3fe6 <_vfiscanf_r+0x16>
    3fde:	6983      	ldr	r3, [r0, #24]
    3fe0:	b90b      	cbnz	r3, 3fe6 <_vfiscanf_r+0x16>
    3fe2:	f7fe fda7 	bl	2b34 <__sinit>
    3fe6:	4b0b      	ldr	r3, [pc, #44]	; (4014 <_vfiscanf_r+0x44>)
    3fe8:	429c      	cmp	r4, r3
    3fea:	d108      	bne.n	3ffe <_vfiscanf_r+0x2e>
    3fec:	686c      	ldr	r4, [r5, #4]
    3fee:	463b      	mov	r3, r7
    3ff0:	4632      	mov	r2, r6
    3ff2:	4621      	mov	r1, r4
    3ff4:	4628      	mov	r0, r5
    3ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ffa:	f7ff be95 	b.w	3d28 <__svfiscanf_r>
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <_vfiscanf_r+0x48>)
    4000:	429c      	cmp	r4, r3
    4002:	d101      	bne.n	4008 <_vfiscanf_r+0x38>
    4004:	68ac      	ldr	r4, [r5, #8]
    4006:	e7f2      	b.n	3fee <_vfiscanf_r+0x1e>
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <_vfiscanf_r+0x4c>)
    400a:	429c      	cmp	r4, r3
    400c:	bf08      	it	eq
    400e:	68ec      	ldreq	r4, [r5, #12]
    4010:	e7ed      	b.n	3fee <_vfiscanf_r+0x1e>
    4012:	bf00      	nop
    4014:	00005184 	.word	0x00005184
    4018:	000051a4 	.word	0x000051a4
    401c:	00005164 	.word	0x00005164

00004020 <_scanf_chars>:
    4020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4024:	4615      	mov	r5, r2
    4026:	688a      	ldr	r2, [r1, #8]
    4028:	4680      	mov	r8, r0
    402a:	460c      	mov	r4, r1
    402c:	b932      	cbnz	r2, 403c <_scanf_chars+0x1c>
    402e:	698a      	ldr	r2, [r1, #24]
    4030:	2a00      	cmp	r2, #0
    4032:	bf0c      	ite	eq
    4034:	2201      	moveq	r2, #1
    4036:	f04f 32ff 	movne.w	r2, #4294967295
    403a:	608a      	str	r2, [r1, #8]
    403c:	6822      	ldr	r2, [r4, #0]
    403e:	06d1      	lsls	r1, r2, #27
    4040:	bf5f      	itttt	pl
    4042:	681a      	ldrpl	r2, [r3, #0]
    4044:	1d11      	addpl	r1, r2, #4
    4046:	6019      	strpl	r1, [r3, #0]
    4048:	6817      	ldrpl	r7, [r2, #0]
    404a:	2600      	movs	r6, #0
    404c:	69a3      	ldr	r3, [r4, #24]
    404e:	b1db      	cbz	r3, 4088 <_scanf_chars+0x68>
    4050:	2b01      	cmp	r3, #1
    4052:	d107      	bne.n	4064 <_scanf_chars+0x44>
    4054:	682b      	ldr	r3, [r5, #0]
    4056:	6962      	ldr	r2, [r4, #20]
    4058:	781b      	ldrb	r3, [r3, #0]
    405a:	5cd3      	ldrb	r3, [r2, r3]
    405c:	b9a3      	cbnz	r3, 4088 <_scanf_chars+0x68>
    405e:	2e00      	cmp	r6, #0
    4060:	d132      	bne.n	40c8 <_scanf_chars+0xa8>
    4062:	e006      	b.n	4072 <_scanf_chars+0x52>
    4064:	2b02      	cmp	r3, #2
    4066:	d007      	beq.n	4078 <_scanf_chars+0x58>
    4068:	2e00      	cmp	r6, #0
    406a:	d12d      	bne.n	40c8 <_scanf_chars+0xa8>
    406c:	69a3      	ldr	r3, [r4, #24]
    406e:	2b01      	cmp	r3, #1
    4070:	d12a      	bne.n	40c8 <_scanf_chars+0xa8>
    4072:	2001      	movs	r0, #1
    4074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4078:	f000 fbf6 	bl	4868 <__locale_ctype_ptr>
    407c:	682b      	ldr	r3, [r5, #0]
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	4418      	add	r0, r3
    4082:	7843      	ldrb	r3, [r0, #1]
    4084:	071b      	lsls	r3, r3, #28
    4086:	d4ef      	bmi.n	4068 <_scanf_chars+0x48>
    4088:	6823      	ldr	r3, [r4, #0]
    408a:	06da      	lsls	r2, r3, #27
    408c:	bf5e      	ittt	pl
    408e:	682b      	ldrpl	r3, [r5, #0]
    4090:	781b      	ldrbpl	r3, [r3, #0]
    4092:	703b      	strbpl	r3, [r7, #0]
    4094:	682a      	ldr	r2, [r5, #0]
    4096:	686b      	ldr	r3, [r5, #4]
    4098:	f102 0201 	add.w	r2, r2, #1
    409c:	602a      	str	r2, [r5, #0]
    409e:	68a2      	ldr	r2, [r4, #8]
    40a0:	f103 33ff 	add.w	r3, r3, #4294967295
    40a4:	f102 32ff 	add.w	r2, r2, #4294967295
    40a8:	606b      	str	r3, [r5, #4]
    40aa:	f106 0601 	add.w	r6, r6, #1
    40ae:	bf58      	it	pl
    40b0:	3701      	addpl	r7, #1
    40b2:	60a2      	str	r2, [r4, #8]
    40b4:	b142      	cbz	r2, 40c8 <_scanf_chars+0xa8>
    40b6:	2b00      	cmp	r3, #0
    40b8:	dcc8      	bgt.n	404c <_scanf_chars+0x2c>
    40ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    40be:	4629      	mov	r1, r5
    40c0:	4640      	mov	r0, r8
    40c2:	4798      	blx	r3
    40c4:	2800      	cmp	r0, #0
    40c6:	d0c1      	beq.n	404c <_scanf_chars+0x2c>
    40c8:	6823      	ldr	r3, [r4, #0]
    40ca:	f013 0310 	ands.w	r3, r3, #16
    40ce:	d105      	bne.n	40dc <_scanf_chars+0xbc>
    40d0:	68e2      	ldr	r2, [r4, #12]
    40d2:	3201      	adds	r2, #1
    40d4:	60e2      	str	r2, [r4, #12]
    40d6:	69a2      	ldr	r2, [r4, #24]
    40d8:	b102      	cbz	r2, 40dc <_scanf_chars+0xbc>
    40da:	703b      	strb	r3, [r7, #0]
    40dc:	6923      	ldr	r3, [r4, #16]
    40de:	441e      	add	r6, r3
    40e0:	6126      	str	r6, [r4, #16]
    40e2:	2000      	movs	r0, #0
    40e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000040e8 <_scanf_i>:
    40e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40ec:	469a      	mov	sl, r3
    40ee:	4b74      	ldr	r3, [pc, #464]	; (42c0 <_scanf_i+0x1d8>)
    40f0:	460c      	mov	r4, r1
    40f2:	4683      	mov	fp, r0
    40f4:	4616      	mov	r6, r2
    40f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    40fa:	b087      	sub	sp, #28
    40fc:	ab03      	add	r3, sp, #12
    40fe:	68a7      	ldr	r7, [r4, #8]
    4100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    4104:	4b6f      	ldr	r3, [pc, #444]	; (42c4 <_scanf_i+0x1dc>)
    4106:	69a1      	ldr	r1, [r4, #24]
    4108:	4a6f      	ldr	r2, [pc, #444]	; (42c8 <_scanf_i+0x1e0>)
    410a:	2903      	cmp	r1, #3
    410c:	bf18      	it	ne
    410e:	461a      	movne	r2, r3
    4110:	1e7b      	subs	r3, r7, #1
    4112:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    4116:	bf84      	itt	hi
    4118:	f240 135d 	movwhi	r3, #349	; 0x15d
    411c:	60a3      	strhi	r3, [r4, #8]
    411e:	6823      	ldr	r3, [r4, #0]
    4120:	9200      	str	r2, [sp, #0]
    4122:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    4126:	bf88      	it	hi
    4128:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    412c:	f104 091c 	add.w	r9, r4, #28
    4130:	6023      	str	r3, [r4, #0]
    4132:	bf8c      	ite	hi
    4134:	197f      	addhi	r7, r7, r5
    4136:	2700      	movls	r7, #0
    4138:	464b      	mov	r3, r9
    413a:	f04f 0800 	mov.w	r8, #0
    413e:	9301      	str	r3, [sp, #4]
    4140:	6831      	ldr	r1, [r6, #0]
    4142:	ab03      	add	r3, sp, #12
    4144:	2202      	movs	r2, #2
    4146:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    414a:	7809      	ldrb	r1, [r1, #0]
    414c:	f000 fbb0 	bl	48b0 <memchr>
    4150:	9b01      	ldr	r3, [sp, #4]
    4152:	b328      	cbz	r0, 41a0 <_scanf_i+0xb8>
    4154:	f1b8 0f01 	cmp.w	r8, #1
    4158:	d156      	bne.n	4208 <_scanf_i+0x120>
    415a:	6862      	ldr	r2, [r4, #4]
    415c:	b92a      	cbnz	r2, 416a <_scanf_i+0x82>
    415e:	2208      	movs	r2, #8
    4160:	6062      	str	r2, [r4, #4]
    4162:	6822      	ldr	r2, [r4, #0]
    4164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4168:	6022      	str	r2, [r4, #0]
    416a:	6822      	ldr	r2, [r4, #0]
    416c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    4170:	6022      	str	r2, [r4, #0]
    4172:	68a2      	ldr	r2, [r4, #8]
    4174:	1e51      	subs	r1, r2, #1
    4176:	60a1      	str	r1, [r4, #8]
    4178:	b192      	cbz	r2, 41a0 <_scanf_i+0xb8>
    417a:	6832      	ldr	r2, [r6, #0]
    417c:	1c51      	adds	r1, r2, #1
    417e:	6031      	str	r1, [r6, #0]
    4180:	7812      	ldrb	r2, [r2, #0]
    4182:	701a      	strb	r2, [r3, #0]
    4184:	1c5d      	adds	r5, r3, #1
    4186:	6873      	ldr	r3, [r6, #4]
    4188:	3b01      	subs	r3, #1
    418a:	2b00      	cmp	r3, #0
    418c:	6073      	str	r3, [r6, #4]
    418e:	dc06      	bgt.n	419e <_scanf_i+0xb6>
    4190:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    4194:	4631      	mov	r1, r6
    4196:	4658      	mov	r0, fp
    4198:	4798      	blx	r3
    419a:	2800      	cmp	r0, #0
    419c:	d176      	bne.n	428c <_scanf_i+0x1a4>
    419e:	462b      	mov	r3, r5
    41a0:	f108 0801 	add.w	r8, r8, #1
    41a4:	f1b8 0f03 	cmp.w	r8, #3
    41a8:	d1c9      	bne.n	413e <_scanf_i+0x56>
    41aa:	6862      	ldr	r2, [r4, #4]
    41ac:	b90a      	cbnz	r2, 41b2 <_scanf_i+0xca>
    41ae:	220a      	movs	r2, #10
    41b0:	6062      	str	r2, [r4, #4]
    41b2:	6862      	ldr	r2, [r4, #4]
    41b4:	4945      	ldr	r1, [pc, #276]	; (42cc <_scanf_i+0x1e4>)
    41b6:	6960      	ldr	r0, [r4, #20]
    41b8:	9301      	str	r3, [sp, #4]
    41ba:	1a89      	subs	r1, r1, r2
    41bc:	f000 f92e 	bl	441c <__sccl>
    41c0:	9b01      	ldr	r3, [sp, #4]
    41c2:	f04f 0800 	mov.w	r8, #0
    41c6:	461d      	mov	r5, r3
    41c8:	68a3      	ldr	r3, [r4, #8]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d038      	beq.n	4240 <_scanf_i+0x158>
    41ce:	6831      	ldr	r1, [r6, #0]
    41d0:	6960      	ldr	r0, [r4, #20]
    41d2:	780a      	ldrb	r2, [r1, #0]
    41d4:	5c80      	ldrb	r0, [r0, r2]
    41d6:	2800      	cmp	r0, #0
    41d8:	d032      	beq.n	4240 <_scanf_i+0x158>
    41da:	2a30      	cmp	r2, #48	; 0x30
    41dc:	6822      	ldr	r2, [r4, #0]
    41de:	d121      	bne.n	4224 <_scanf_i+0x13c>
    41e0:	0510      	lsls	r0, r2, #20
    41e2:	d51f      	bpl.n	4224 <_scanf_i+0x13c>
    41e4:	f108 0801 	add.w	r8, r8, #1
    41e8:	b117      	cbz	r7, 41f0 <_scanf_i+0x108>
    41ea:	3301      	adds	r3, #1
    41ec:	3f01      	subs	r7, #1
    41ee:	60a3      	str	r3, [r4, #8]
    41f0:	6873      	ldr	r3, [r6, #4]
    41f2:	3b01      	subs	r3, #1
    41f4:	2b00      	cmp	r3, #0
    41f6:	6073      	str	r3, [r6, #4]
    41f8:	dd1b      	ble.n	4232 <_scanf_i+0x14a>
    41fa:	6833      	ldr	r3, [r6, #0]
    41fc:	3301      	adds	r3, #1
    41fe:	6033      	str	r3, [r6, #0]
    4200:	68a3      	ldr	r3, [r4, #8]
    4202:	3b01      	subs	r3, #1
    4204:	60a3      	str	r3, [r4, #8]
    4206:	e7df      	b.n	41c8 <_scanf_i+0xe0>
    4208:	f1b8 0f02 	cmp.w	r8, #2
    420c:	d1b1      	bne.n	4172 <_scanf_i+0x8a>
    420e:	6822      	ldr	r2, [r4, #0]
    4210:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    4214:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4218:	d1c2      	bne.n	41a0 <_scanf_i+0xb8>
    421a:	2110      	movs	r1, #16
    421c:	6061      	str	r1, [r4, #4]
    421e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    4222:	e7a5      	b.n	4170 <_scanf_i+0x88>
    4224:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    4228:	6022      	str	r2, [r4, #0]
    422a:	780b      	ldrb	r3, [r1, #0]
    422c:	702b      	strb	r3, [r5, #0]
    422e:	3501      	adds	r5, #1
    4230:	e7de      	b.n	41f0 <_scanf_i+0x108>
    4232:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    4236:	4631      	mov	r1, r6
    4238:	4658      	mov	r0, fp
    423a:	4798      	blx	r3
    423c:	2800      	cmp	r0, #0
    423e:	d0df      	beq.n	4200 <_scanf_i+0x118>
    4240:	6823      	ldr	r3, [r4, #0]
    4242:	05d9      	lsls	r1, r3, #23
    4244:	d50c      	bpl.n	4260 <_scanf_i+0x178>
    4246:	454d      	cmp	r5, r9
    4248:	d908      	bls.n	425c <_scanf_i+0x174>
    424a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    424e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    4252:	4632      	mov	r2, r6
    4254:	4658      	mov	r0, fp
    4256:	4798      	blx	r3
    4258:	1e6f      	subs	r7, r5, #1
    425a:	463d      	mov	r5, r7
    425c:	454d      	cmp	r5, r9
    425e:	d02c      	beq.n	42ba <_scanf_i+0x1d2>
    4260:	6822      	ldr	r2, [r4, #0]
    4262:	f012 0210 	ands.w	r2, r2, #16
    4266:	d11e      	bne.n	42a6 <_scanf_i+0x1be>
    4268:	702a      	strb	r2, [r5, #0]
    426a:	6863      	ldr	r3, [r4, #4]
    426c:	9e00      	ldr	r6, [sp, #0]
    426e:	4649      	mov	r1, r9
    4270:	4658      	mov	r0, fp
    4272:	47b0      	blx	r6
    4274:	6822      	ldr	r2, [r4, #0]
    4276:	f8da 3000 	ldr.w	r3, [sl]
    427a:	f012 0f20 	tst.w	r2, #32
    427e:	d008      	beq.n	4292 <_scanf_i+0x1aa>
    4280:	1d1a      	adds	r2, r3, #4
    4282:	f8ca 2000 	str.w	r2, [sl]
    4286:	681b      	ldr	r3, [r3, #0]
    4288:	6018      	str	r0, [r3, #0]
    428a:	e009      	b.n	42a0 <_scanf_i+0x1b8>
    428c:	f04f 0800 	mov.w	r8, #0
    4290:	e7d6      	b.n	4240 <_scanf_i+0x158>
    4292:	07d2      	lsls	r2, r2, #31
    4294:	d5f4      	bpl.n	4280 <_scanf_i+0x198>
    4296:	1d1a      	adds	r2, r3, #4
    4298:	f8ca 2000 	str.w	r2, [sl]
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	8018      	strh	r0, [r3, #0]
    42a0:	68e3      	ldr	r3, [r4, #12]
    42a2:	3301      	adds	r3, #1
    42a4:	60e3      	str	r3, [r4, #12]
    42a6:	eba5 0509 	sub.w	r5, r5, r9
    42aa:	44a8      	add	r8, r5
    42ac:	6925      	ldr	r5, [r4, #16]
    42ae:	4445      	add	r5, r8
    42b0:	6125      	str	r5, [r4, #16]
    42b2:	2000      	movs	r0, #0
    42b4:	b007      	add	sp, #28
    42b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42ba:	2001      	movs	r0, #1
    42bc:	e7fa      	b.n	42b4 <_scanf_i+0x1cc>
    42be:	bf00      	nop
    42c0:	000051fc 	.word	0x000051fc
    42c4:	0000469d 	.word	0x0000469d
    42c8:	0000457d 	.word	0x0000457d
    42cc:	00005218 	.word	0x00005218

000042d0 <_read_r>:
    42d0:	b538      	push	{r3, r4, r5, lr}
    42d2:	4c07      	ldr	r4, [pc, #28]	; (42f0 <_read_r+0x20>)
    42d4:	4605      	mov	r5, r0
    42d6:	4608      	mov	r0, r1
    42d8:	4611      	mov	r1, r2
    42da:	2200      	movs	r2, #0
    42dc:	6022      	str	r2, [r4, #0]
    42de:	461a      	mov	r2, r3
    42e0:	f7fd fede 	bl	20a0 <_read>
    42e4:	1c43      	adds	r3, r0, #1
    42e6:	d102      	bne.n	42ee <_read_r+0x1e>
    42e8:	6823      	ldr	r3, [r4, #0]
    42ea:	b103      	cbz	r3, 42ee <_read_r+0x1e>
    42ec:	602b      	str	r3, [r5, #0]
    42ee:	bd38      	pop	{r3, r4, r5, pc}
    42f0:	20004700 	.word	0x20004700

000042f4 <lflush>:
    42f4:	8983      	ldrh	r3, [r0, #12]
    42f6:	f003 0309 	and.w	r3, r3, #9
    42fa:	2b09      	cmp	r3, #9
    42fc:	d101      	bne.n	4302 <lflush+0xe>
    42fe:	f7fe bbc7 	b.w	2a90 <fflush>
    4302:	2000      	movs	r0, #0
    4304:	4770      	bx	lr
	...

00004308 <__srefill_r>:
    4308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    430a:	460c      	mov	r4, r1
    430c:	4605      	mov	r5, r0
    430e:	b118      	cbz	r0, 4318 <__srefill_r+0x10>
    4310:	6983      	ldr	r3, [r0, #24]
    4312:	b90b      	cbnz	r3, 4318 <__srefill_r+0x10>
    4314:	f7fe fc0e 	bl	2b34 <__sinit>
    4318:	4b3b      	ldr	r3, [pc, #236]	; (4408 <__srefill_r+0x100>)
    431a:	429c      	cmp	r4, r3
    431c:	d10a      	bne.n	4334 <__srefill_r+0x2c>
    431e:	686c      	ldr	r4, [r5, #4]
    4320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    4324:	2300      	movs	r3, #0
    4326:	6063      	str	r3, [r4, #4]
    4328:	b293      	uxth	r3, r2
    432a:	069e      	lsls	r6, r3, #26
    432c:	d50c      	bpl.n	4348 <__srefill_r+0x40>
    432e:	f04f 30ff 	mov.w	r0, #4294967295
    4332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4334:	4b35      	ldr	r3, [pc, #212]	; (440c <__srefill_r+0x104>)
    4336:	429c      	cmp	r4, r3
    4338:	d101      	bne.n	433e <__srefill_r+0x36>
    433a:	68ac      	ldr	r4, [r5, #8]
    433c:	e7f0      	b.n	4320 <__srefill_r+0x18>
    433e:	4b34      	ldr	r3, [pc, #208]	; (4410 <__srefill_r+0x108>)
    4340:	429c      	cmp	r4, r3
    4342:	bf08      	it	eq
    4344:	68ec      	ldreq	r4, [r5, #12]
    4346:	e7eb      	b.n	4320 <__srefill_r+0x18>
    4348:	0758      	lsls	r0, r3, #29
    434a:	d448      	bmi.n	43de <__srefill_r+0xd6>
    434c:	06d9      	lsls	r1, r3, #27
    434e:	d405      	bmi.n	435c <__srefill_r+0x54>
    4350:	2309      	movs	r3, #9
    4352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    4356:	602b      	str	r3, [r5, #0]
    4358:	81a2      	strh	r2, [r4, #12]
    435a:	e7e8      	b.n	432e <__srefill_r+0x26>
    435c:	071a      	lsls	r2, r3, #28
    435e:	d50b      	bpl.n	4378 <__srefill_r+0x70>
    4360:	4621      	mov	r1, r4
    4362:	4628      	mov	r0, r5
    4364:	f7fe fb6a 	bl	2a3c <_fflush_r>
    4368:	2800      	cmp	r0, #0
    436a:	d1e0      	bne.n	432e <__srefill_r+0x26>
    436c:	89a3      	ldrh	r3, [r4, #12]
    436e:	60a0      	str	r0, [r4, #8]
    4370:	f023 0308 	bic.w	r3, r3, #8
    4374:	81a3      	strh	r3, [r4, #12]
    4376:	61a0      	str	r0, [r4, #24]
    4378:	89a3      	ldrh	r3, [r4, #12]
    437a:	f043 0304 	orr.w	r3, r3, #4
    437e:	81a3      	strh	r3, [r4, #12]
    4380:	6923      	ldr	r3, [r4, #16]
    4382:	b91b      	cbnz	r3, 438c <__srefill_r+0x84>
    4384:	4621      	mov	r1, r4
    4386:	4628      	mov	r0, r5
    4388:	f7ff f860 	bl	344c <__smakebuf_r>
    438c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    4390:	b2be      	uxth	r6, r7
    4392:	07b3      	lsls	r3, r6, #30
    4394:	d00f      	beq.n	43b6 <__srefill_r+0xae>
    4396:	2301      	movs	r3, #1
    4398:	81a3      	strh	r3, [r4, #12]
    439a:	4b1e      	ldr	r3, [pc, #120]	; (4414 <__srefill_r+0x10c>)
    439c:	491e      	ldr	r1, [pc, #120]	; (4418 <__srefill_r+0x110>)
    439e:	6818      	ldr	r0, [r3, #0]
    43a0:	f006 0609 	and.w	r6, r6, #9
    43a4:	f7fe fc32 	bl	2c0c <_fwalk>
    43a8:	2e09      	cmp	r6, #9
    43aa:	81a7      	strh	r7, [r4, #12]
    43ac:	d103      	bne.n	43b6 <__srefill_r+0xae>
    43ae:	4621      	mov	r1, r4
    43b0:	4628      	mov	r0, r5
    43b2:	f7fe fabb 	bl	292c <__sflush_r>
    43b6:	6922      	ldr	r2, [r4, #16]
    43b8:	6022      	str	r2, [r4, #0]
    43ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
    43bc:	6963      	ldr	r3, [r4, #20]
    43be:	6a21      	ldr	r1, [r4, #32]
    43c0:	4628      	mov	r0, r5
    43c2:	47b0      	blx	r6
    43c4:	2800      	cmp	r0, #0
    43c6:	6060      	str	r0, [r4, #4]
    43c8:	dc1c      	bgt.n	4404 <__srefill_r+0xfc>
    43ca:	89a3      	ldrh	r3, [r4, #12]
    43cc:	bf17      	itett	ne
    43ce:	2200      	movne	r2, #0
    43d0:	f043 0320 	orreq.w	r3, r3, #32
    43d4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    43d8:	6062      	strne	r2, [r4, #4]
    43da:	81a3      	strh	r3, [r4, #12]
    43dc:	e7a7      	b.n	432e <__srefill_r+0x26>
    43de:	6b61      	ldr	r1, [r4, #52]	; 0x34
    43e0:	2900      	cmp	r1, #0
    43e2:	d0cd      	beq.n	4380 <__srefill_r+0x78>
    43e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    43e8:	4299      	cmp	r1, r3
    43ea:	d002      	beq.n	43f2 <__srefill_r+0xea>
    43ec:	4628      	mov	r0, r5
    43ee:	f7fe fc73 	bl	2cd8 <_free_r>
    43f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    43f4:	6063      	str	r3, [r4, #4]
    43f6:	2000      	movs	r0, #0
    43f8:	6360      	str	r0, [r4, #52]	; 0x34
    43fa:	2b00      	cmp	r3, #0
    43fc:	d0c0      	beq.n	4380 <__srefill_r+0x78>
    43fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4400:	6023      	str	r3, [r4, #0]
    4402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4404:	2000      	movs	r0, #0
    4406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4408:	00005184 	.word	0x00005184
    440c:	000051a4 	.word	0x000051a4
    4410:	00005164 	.word	0x00005164
    4414:	000051c4 	.word	0x000051c4
    4418:	000042f5 	.word	0x000042f5

0000441c <__sccl>:
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	780b      	ldrb	r3, [r1, #0]
    4420:	2b5e      	cmp	r3, #94	; 0x5e
    4422:	bf13      	iteet	ne
    4424:	1c4a      	addne	r2, r1, #1
    4426:	1c8a      	addeq	r2, r1, #2
    4428:	784b      	ldrbeq	r3, [r1, #1]
    442a:	2100      	movne	r1, #0
    442c:	bf08      	it	eq
    442e:	2101      	moveq	r1, #1
    4430:	1e44      	subs	r4, r0, #1
    4432:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    4436:	f804 1f01 	strb.w	r1, [r4, #1]!
    443a:	42a5      	cmp	r5, r4
    443c:	d1fb      	bne.n	4436 <__sccl+0x1a>
    443e:	b913      	cbnz	r3, 4446 <__sccl+0x2a>
    4440:	3a01      	subs	r2, #1
    4442:	4610      	mov	r0, r2
    4444:	bd70      	pop	{r4, r5, r6, pc}
    4446:	f081 0401 	eor.w	r4, r1, #1
    444a:	54c4      	strb	r4, [r0, r3]
    444c:	4611      	mov	r1, r2
    444e:	780d      	ldrb	r5, [r1, #0]
    4450:	2d2d      	cmp	r5, #45	; 0x2d
    4452:	f101 0201 	add.w	r2, r1, #1
    4456:	d006      	beq.n	4466 <__sccl+0x4a>
    4458:	2d5d      	cmp	r5, #93	; 0x5d
    445a:	d0f2      	beq.n	4442 <__sccl+0x26>
    445c:	b90d      	cbnz	r5, 4462 <__sccl+0x46>
    445e:	460a      	mov	r2, r1
    4460:	e7ef      	b.n	4442 <__sccl+0x26>
    4462:	462b      	mov	r3, r5
    4464:	e7f1      	b.n	444a <__sccl+0x2e>
    4466:	784e      	ldrb	r6, [r1, #1]
    4468:	2e5d      	cmp	r6, #93	; 0x5d
    446a:	d0fa      	beq.n	4462 <__sccl+0x46>
    446c:	42b3      	cmp	r3, r6
    446e:	dcf8      	bgt.n	4462 <__sccl+0x46>
    4470:	3102      	adds	r1, #2
    4472:	3301      	adds	r3, #1
    4474:	429e      	cmp	r6, r3
    4476:	54c4      	strb	r4, [r0, r3]
    4478:	dcfb      	bgt.n	4472 <__sccl+0x56>
    447a:	e7e8      	b.n	444e <__sccl+0x32>

0000447c <_strtol_l.isra.0>:
    447c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4480:	4680      	mov	r8, r0
    4482:	4689      	mov	r9, r1
    4484:	4692      	mov	sl, r2
    4486:	461f      	mov	r7, r3
    4488:	468b      	mov	fp, r1
    448a:	465d      	mov	r5, fp
    448c:	980a      	ldr	r0, [sp, #40]	; 0x28
    448e:	f815 4b01 	ldrb.w	r4, [r5], #1
    4492:	f000 f9e5 	bl	4860 <__locale_ctype_ptr_l>
    4496:	4420      	add	r0, r4
    4498:	7846      	ldrb	r6, [r0, #1]
    449a:	f016 0608 	ands.w	r6, r6, #8
    449e:	d10b      	bne.n	44b8 <_strtol_l.isra.0+0x3c>
    44a0:	2c2d      	cmp	r4, #45	; 0x2d
    44a2:	d10b      	bne.n	44bc <_strtol_l.isra.0+0x40>
    44a4:	782c      	ldrb	r4, [r5, #0]
    44a6:	2601      	movs	r6, #1
    44a8:	f10b 0502 	add.w	r5, fp, #2
    44ac:	b167      	cbz	r7, 44c8 <_strtol_l.isra.0+0x4c>
    44ae:	2f10      	cmp	r7, #16
    44b0:	d114      	bne.n	44dc <_strtol_l.isra.0+0x60>
    44b2:	2c30      	cmp	r4, #48	; 0x30
    44b4:	d00a      	beq.n	44cc <_strtol_l.isra.0+0x50>
    44b6:	e011      	b.n	44dc <_strtol_l.isra.0+0x60>
    44b8:	46ab      	mov	fp, r5
    44ba:	e7e6      	b.n	448a <_strtol_l.isra.0+0xe>
    44bc:	2c2b      	cmp	r4, #43	; 0x2b
    44be:	bf04      	itt	eq
    44c0:	782c      	ldrbeq	r4, [r5, #0]
    44c2:	f10b 0502 	addeq.w	r5, fp, #2
    44c6:	e7f1      	b.n	44ac <_strtol_l.isra.0+0x30>
    44c8:	2c30      	cmp	r4, #48	; 0x30
    44ca:	d127      	bne.n	451c <_strtol_l.isra.0+0xa0>
    44cc:	782b      	ldrb	r3, [r5, #0]
    44ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    44d2:	2b58      	cmp	r3, #88	; 0x58
    44d4:	d14b      	bne.n	456e <_strtol_l.isra.0+0xf2>
    44d6:	786c      	ldrb	r4, [r5, #1]
    44d8:	2710      	movs	r7, #16
    44da:	3502      	adds	r5, #2
    44dc:	2e00      	cmp	r6, #0
    44de:	bf0c      	ite	eq
    44e0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    44e4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    44e8:	2200      	movs	r2, #0
    44ea:	fbb1 fef7 	udiv	lr, r1, r7
    44ee:	4610      	mov	r0, r2
    44f0:	fb07 1c1e 	mls	ip, r7, lr, r1
    44f4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    44f8:	2b09      	cmp	r3, #9
    44fa:	d811      	bhi.n	4520 <_strtol_l.isra.0+0xa4>
    44fc:	461c      	mov	r4, r3
    44fe:	42a7      	cmp	r7, r4
    4500:	dd1d      	ble.n	453e <_strtol_l.isra.0+0xc2>
    4502:	1c53      	adds	r3, r2, #1
    4504:	d007      	beq.n	4516 <_strtol_l.isra.0+0x9a>
    4506:	4586      	cmp	lr, r0
    4508:	d316      	bcc.n	4538 <_strtol_l.isra.0+0xbc>
    450a:	d101      	bne.n	4510 <_strtol_l.isra.0+0x94>
    450c:	45a4      	cmp	ip, r4
    450e:	db13      	blt.n	4538 <_strtol_l.isra.0+0xbc>
    4510:	fb00 4007 	mla	r0, r0, r7, r4
    4514:	2201      	movs	r2, #1
    4516:	f815 4b01 	ldrb.w	r4, [r5], #1
    451a:	e7eb      	b.n	44f4 <_strtol_l.isra.0+0x78>
    451c:	270a      	movs	r7, #10
    451e:	e7dd      	b.n	44dc <_strtol_l.isra.0+0x60>
    4520:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    4524:	2b19      	cmp	r3, #25
    4526:	d801      	bhi.n	452c <_strtol_l.isra.0+0xb0>
    4528:	3c37      	subs	r4, #55	; 0x37
    452a:	e7e8      	b.n	44fe <_strtol_l.isra.0+0x82>
    452c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    4530:	2b19      	cmp	r3, #25
    4532:	d804      	bhi.n	453e <_strtol_l.isra.0+0xc2>
    4534:	3c57      	subs	r4, #87	; 0x57
    4536:	e7e2      	b.n	44fe <_strtol_l.isra.0+0x82>
    4538:	f04f 32ff 	mov.w	r2, #4294967295
    453c:	e7eb      	b.n	4516 <_strtol_l.isra.0+0x9a>
    453e:	1c53      	adds	r3, r2, #1
    4540:	d108      	bne.n	4554 <_strtol_l.isra.0+0xd8>
    4542:	2322      	movs	r3, #34	; 0x22
    4544:	f8c8 3000 	str.w	r3, [r8]
    4548:	4608      	mov	r0, r1
    454a:	f1ba 0f00 	cmp.w	sl, #0
    454e:	d107      	bne.n	4560 <_strtol_l.isra.0+0xe4>
    4550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4554:	b106      	cbz	r6, 4558 <_strtol_l.isra.0+0xdc>
    4556:	4240      	negs	r0, r0
    4558:	f1ba 0f00 	cmp.w	sl, #0
    455c:	d00c      	beq.n	4578 <_strtol_l.isra.0+0xfc>
    455e:	b122      	cbz	r2, 456a <_strtol_l.isra.0+0xee>
    4560:	3d01      	subs	r5, #1
    4562:	f8ca 5000 	str.w	r5, [sl]
    4566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    456a:	464d      	mov	r5, r9
    456c:	e7f9      	b.n	4562 <_strtol_l.isra.0+0xe6>
    456e:	2430      	movs	r4, #48	; 0x30
    4570:	2f00      	cmp	r7, #0
    4572:	d1b3      	bne.n	44dc <_strtol_l.isra.0+0x60>
    4574:	2708      	movs	r7, #8
    4576:	e7b1      	b.n	44dc <_strtol_l.isra.0+0x60>
    4578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000457c <_strtol_r>:
    457c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    457e:	4c06      	ldr	r4, [pc, #24]	; (4598 <_strtol_r+0x1c>)
    4580:	4d06      	ldr	r5, [pc, #24]	; (459c <_strtol_r+0x20>)
    4582:	6824      	ldr	r4, [r4, #0]
    4584:	6a24      	ldr	r4, [r4, #32]
    4586:	2c00      	cmp	r4, #0
    4588:	bf08      	it	eq
    458a:	462c      	moveq	r4, r5
    458c:	9400      	str	r4, [sp, #0]
    458e:	f7ff ff75 	bl	447c <_strtol_l.isra.0>
    4592:	b003      	add	sp, #12
    4594:	bd30      	pop	{r4, r5, pc}
    4596:	bf00      	nop
    4598:	2000026c 	.word	0x2000026c
    459c:	200002d0 	.word	0x200002d0

000045a0 <_strtoul_l.isra.0>:
    45a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45a4:	4680      	mov	r8, r0
    45a6:	4689      	mov	r9, r1
    45a8:	4692      	mov	sl, r2
    45aa:	461e      	mov	r6, r3
    45ac:	460f      	mov	r7, r1
    45ae:	463d      	mov	r5, r7
    45b0:	9808      	ldr	r0, [sp, #32]
    45b2:	f815 4b01 	ldrb.w	r4, [r5], #1
    45b6:	f000 f953 	bl	4860 <__locale_ctype_ptr_l>
    45ba:	4420      	add	r0, r4
    45bc:	7843      	ldrb	r3, [r0, #1]
    45be:	f013 0308 	ands.w	r3, r3, #8
    45c2:	d10a      	bne.n	45da <_strtoul_l.isra.0+0x3a>
    45c4:	2c2d      	cmp	r4, #45	; 0x2d
    45c6:	d10a      	bne.n	45de <_strtoul_l.isra.0+0x3e>
    45c8:	782c      	ldrb	r4, [r5, #0]
    45ca:	2301      	movs	r3, #1
    45cc:	1cbd      	adds	r5, r7, #2
    45ce:	b15e      	cbz	r6, 45e8 <_strtoul_l.isra.0+0x48>
    45d0:	2e10      	cmp	r6, #16
    45d2:	d113      	bne.n	45fc <_strtoul_l.isra.0+0x5c>
    45d4:	2c30      	cmp	r4, #48	; 0x30
    45d6:	d009      	beq.n	45ec <_strtoul_l.isra.0+0x4c>
    45d8:	e010      	b.n	45fc <_strtoul_l.isra.0+0x5c>
    45da:	462f      	mov	r7, r5
    45dc:	e7e7      	b.n	45ae <_strtoul_l.isra.0+0xe>
    45de:	2c2b      	cmp	r4, #43	; 0x2b
    45e0:	bf04      	itt	eq
    45e2:	782c      	ldrbeq	r4, [r5, #0]
    45e4:	1cbd      	addeq	r5, r7, #2
    45e6:	e7f2      	b.n	45ce <_strtoul_l.isra.0+0x2e>
    45e8:	2c30      	cmp	r4, #48	; 0x30
    45ea:	d125      	bne.n	4638 <_strtoul_l.isra.0+0x98>
    45ec:	782a      	ldrb	r2, [r5, #0]
    45ee:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    45f2:	2a58      	cmp	r2, #88	; 0x58
    45f4:	d14a      	bne.n	468c <_strtoul_l.isra.0+0xec>
    45f6:	786c      	ldrb	r4, [r5, #1]
    45f8:	2610      	movs	r6, #16
    45fa:	3502      	adds	r5, #2
    45fc:	f04f 31ff 	mov.w	r1, #4294967295
    4600:	2700      	movs	r7, #0
    4602:	fbb1 f1f6 	udiv	r1, r1, r6
    4606:	fb06 fe01 	mul.w	lr, r6, r1
    460a:	ea6f 0e0e 	mvn.w	lr, lr
    460e:	4638      	mov	r0, r7
    4610:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    4614:	2a09      	cmp	r2, #9
    4616:	d811      	bhi.n	463c <_strtoul_l.isra.0+0x9c>
    4618:	4614      	mov	r4, r2
    461a:	42a6      	cmp	r6, r4
    461c:	dd1d      	ble.n	465a <_strtoul_l.isra.0+0xba>
    461e:	2f00      	cmp	r7, #0
    4620:	db18      	blt.n	4654 <_strtoul_l.isra.0+0xb4>
    4622:	4281      	cmp	r1, r0
    4624:	d316      	bcc.n	4654 <_strtoul_l.isra.0+0xb4>
    4626:	d101      	bne.n	462c <_strtoul_l.isra.0+0x8c>
    4628:	45a6      	cmp	lr, r4
    462a:	db13      	blt.n	4654 <_strtoul_l.isra.0+0xb4>
    462c:	fb00 4006 	mla	r0, r0, r6, r4
    4630:	2701      	movs	r7, #1
    4632:	f815 4b01 	ldrb.w	r4, [r5], #1
    4636:	e7eb      	b.n	4610 <_strtoul_l.isra.0+0x70>
    4638:	260a      	movs	r6, #10
    463a:	e7df      	b.n	45fc <_strtoul_l.isra.0+0x5c>
    463c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    4640:	2a19      	cmp	r2, #25
    4642:	d801      	bhi.n	4648 <_strtoul_l.isra.0+0xa8>
    4644:	3c37      	subs	r4, #55	; 0x37
    4646:	e7e8      	b.n	461a <_strtoul_l.isra.0+0x7a>
    4648:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    464c:	2a19      	cmp	r2, #25
    464e:	d804      	bhi.n	465a <_strtoul_l.isra.0+0xba>
    4650:	3c57      	subs	r4, #87	; 0x57
    4652:	e7e2      	b.n	461a <_strtoul_l.isra.0+0x7a>
    4654:	f04f 37ff 	mov.w	r7, #4294967295
    4658:	e7eb      	b.n	4632 <_strtoul_l.isra.0+0x92>
    465a:	2f00      	cmp	r7, #0
    465c:	da09      	bge.n	4672 <_strtoul_l.isra.0+0xd2>
    465e:	2322      	movs	r3, #34	; 0x22
    4660:	f8c8 3000 	str.w	r3, [r8]
    4664:	f04f 30ff 	mov.w	r0, #4294967295
    4668:	f1ba 0f00 	cmp.w	sl, #0
    466c:	d107      	bne.n	467e <_strtoul_l.isra.0+0xde>
    466e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4672:	b103      	cbz	r3, 4676 <_strtoul_l.isra.0+0xd6>
    4674:	4240      	negs	r0, r0
    4676:	f1ba 0f00 	cmp.w	sl, #0
    467a:	d00c      	beq.n	4696 <_strtoul_l.isra.0+0xf6>
    467c:	b127      	cbz	r7, 4688 <_strtoul_l.isra.0+0xe8>
    467e:	3d01      	subs	r5, #1
    4680:	f8ca 5000 	str.w	r5, [sl]
    4684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4688:	464d      	mov	r5, r9
    468a:	e7f9      	b.n	4680 <_strtoul_l.isra.0+0xe0>
    468c:	2430      	movs	r4, #48	; 0x30
    468e:	2e00      	cmp	r6, #0
    4690:	d1b4      	bne.n	45fc <_strtoul_l.isra.0+0x5c>
    4692:	2608      	movs	r6, #8
    4694:	e7b2      	b.n	45fc <_strtoul_l.isra.0+0x5c>
    4696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000469c <_strtoul_r>:
    469c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    469e:	4c06      	ldr	r4, [pc, #24]	; (46b8 <_strtoul_r+0x1c>)
    46a0:	4d06      	ldr	r5, [pc, #24]	; (46bc <_strtoul_r+0x20>)
    46a2:	6824      	ldr	r4, [r4, #0]
    46a4:	6a24      	ldr	r4, [r4, #32]
    46a6:	2c00      	cmp	r4, #0
    46a8:	bf08      	it	eq
    46aa:	462c      	moveq	r4, r5
    46ac:	9400      	str	r4, [sp, #0]
    46ae:	f7ff ff77 	bl	45a0 <_strtoul_l.isra.0>
    46b2:	b003      	add	sp, #12
    46b4:	bd30      	pop	{r4, r5, pc}
    46b6:	bf00      	nop
    46b8:	2000026c 	.word	0x2000026c
    46bc:	200002d0 	.word	0x200002d0

000046c0 <__submore>:
    46c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46c4:	460c      	mov	r4, r1
    46c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    46c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    46cc:	4299      	cmp	r1, r3
    46ce:	d11e      	bne.n	470e <__submore+0x4e>
    46d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    46d4:	f7fe fb4e 	bl	2d74 <_malloc_r>
    46d8:	b918      	cbnz	r0, 46e2 <__submore+0x22>
    46da:	f04f 30ff 	mov.w	r0, #4294967295
    46de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    46e6:	63a3      	str	r3, [r4, #56]	; 0x38
    46e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    46ec:	6360      	str	r0, [r4, #52]	; 0x34
    46ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    46f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    46f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    46fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    46fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    4702:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    4706:	6020      	str	r0, [r4, #0]
    4708:	2000      	movs	r0, #0
    470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    470e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    4710:	0077      	lsls	r7, r6, #1
    4712:	463a      	mov	r2, r7
    4714:	f000 f941 	bl	499a <_realloc_r>
    4718:	4605      	mov	r5, r0
    471a:	2800      	cmp	r0, #0
    471c:	d0dd      	beq.n	46da <__submore+0x1a>
    471e:	eb00 0806 	add.w	r8, r0, r6
    4722:	4601      	mov	r1, r0
    4724:	4632      	mov	r2, r6
    4726:	4640      	mov	r0, r8
    4728:	f000 f912 	bl	4950 <memcpy>
    472c:	f8c4 8000 	str.w	r8, [r4]
    4730:	6365      	str	r5, [r4, #52]	; 0x34
    4732:	63a7      	str	r7, [r4, #56]	; 0x38
    4734:	e7e8      	b.n	4708 <__submore+0x48>
	...

00004738 <_ungetc_r>:
    4738:	1c4b      	adds	r3, r1, #1
    473a:	b570      	push	{r4, r5, r6, lr}
    473c:	4606      	mov	r6, r0
    473e:	460d      	mov	r5, r1
    4740:	4614      	mov	r4, r2
    4742:	d103      	bne.n	474c <_ungetc_r+0x14>
    4744:	f04f 35ff 	mov.w	r5, #4294967295
    4748:	4628      	mov	r0, r5
    474a:	bd70      	pop	{r4, r5, r6, pc}
    474c:	b118      	cbz	r0, 4756 <_ungetc_r+0x1e>
    474e:	6983      	ldr	r3, [r0, #24]
    4750:	b90b      	cbnz	r3, 4756 <_ungetc_r+0x1e>
    4752:	f7fe f9ef 	bl	2b34 <__sinit>
    4756:	4b2e      	ldr	r3, [pc, #184]	; (4810 <_ungetc_r+0xd8>)
    4758:	429c      	cmp	r4, r3
    475a:	d12c      	bne.n	47b6 <_ungetc_r+0x7e>
    475c:	6874      	ldr	r4, [r6, #4]
    475e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4762:	f023 0320 	bic.w	r3, r3, #32
    4766:	81a3      	strh	r3, [r4, #12]
    4768:	b29b      	uxth	r3, r3
    476a:	0759      	lsls	r1, r3, #29
    476c:	d413      	bmi.n	4796 <_ungetc_r+0x5e>
    476e:	06da      	lsls	r2, r3, #27
    4770:	d5e8      	bpl.n	4744 <_ungetc_r+0xc>
    4772:	071b      	lsls	r3, r3, #28
    4774:	d50b      	bpl.n	478e <_ungetc_r+0x56>
    4776:	4621      	mov	r1, r4
    4778:	4630      	mov	r0, r6
    477a:	f7fe f95f 	bl	2a3c <_fflush_r>
    477e:	2800      	cmp	r0, #0
    4780:	d1e0      	bne.n	4744 <_ungetc_r+0xc>
    4782:	89a3      	ldrh	r3, [r4, #12]
    4784:	60a0      	str	r0, [r4, #8]
    4786:	f023 0308 	bic.w	r3, r3, #8
    478a:	81a3      	strh	r3, [r4, #12]
    478c:	61a0      	str	r0, [r4, #24]
    478e:	89a3      	ldrh	r3, [r4, #12]
    4790:	f043 0304 	orr.w	r3, r3, #4
    4794:	81a3      	strh	r3, [r4, #12]
    4796:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4798:	6862      	ldr	r2, [r4, #4]
    479a:	b2ed      	uxtb	r5, r5
    479c:	b1e3      	cbz	r3, 47d8 <_ungetc_r+0xa0>
    479e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    47a0:	429a      	cmp	r2, r3
    47a2:	da12      	bge.n	47ca <_ungetc_r+0x92>
    47a4:	6823      	ldr	r3, [r4, #0]
    47a6:	1e5a      	subs	r2, r3, #1
    47a8:	6022      	str	r2, [r4, #0]
    47aa:	f803 5c01 	strb.w	r5, [r3, #-1]
    47ae:	6863      	ldr	r3, [r4, #4]
    47b0:	3301      	adds	r3, #1
    47b2:	6063      	str	r3, [r4, #4]
    47b4:	e7c8      	b.n	4748 <_ungetc_r+0x10>
    47b6:	4b17      	ldr	r3, [pc, #92]	; (4814 <_ungetc_r+0xdc>)
    47b8:	429c      	cmp	r4, r3
    47ba:	d101      	bne.n	47c0 <_ungetc_r+0x88>
    47bc:	68b4      	ldr	r4, [r6, #8]
    47be:	e7ce      	b.n	475e <_ungetc_r+0x26>
    47c0:	4b15      	ldr	r3, [pc, #84]	; (4818 <_ungetc_r+0xe0>)
    47c2:	429c      	cmp	r4, r3
    47c4:	bf08      	it	eq
    47c6:	68f4      	ldreq	r4, [r6, #12]
    47c8:	e7c9      	b.n	475e <_ungetc_r+0x26>
    47ca:	4621      	mov	r1, r4
    47cc:	4630      	mov	r0, r6
    47ce:	f7ff ff77 	bl	46c0 <__submore>
    47d2:	2800      	cmp	r0, #0
    47d4:	d0e6      	beq.n	47a4 <_ungetc_r+0x6c>
    47d6:	e7b5      	b.n	4744 <_ungetc_r+0xc>
    47d8:	6921      	ldr	r1, [r4, #16]
    47da:	6823      	ldr	r3, [r4, #0]
    47dc:	b151      	cbz	r1, 47f4 <_ungetc_r+0xbc>
    47de:	4299      	cmp	r1, r3
    47e0:	d208      	bcs.n	47f4 <_ungetc_r+0xbc>
    47e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    47e6:	428d      	cmp	r5, r1
    47e8:	d104      	bne.n	47f4 <_ungetc_r+0xbc>
    47ea:	3b01      	subs	r3, #1
    47ec:	3201      	adds	r2, #1
    47ee:	6023      	str	r3, [r4, #0]
    47f0:	6062      	str	r2, [r4, #4]
    47f2:	e7a9      	b.n	4748 <_ungetc_r+0x10>
    47f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    47f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
    47fa:	6363      	str	r3, [r4, #52]	; 0x34
    47fc:	2303      	movs	r3, #3
    47fe:	63a3      	str	r3, [r4, #56]	; 0x38
    4800:	4623      	mov	r3, r4
    4802:	6422      	str	r2, [r4, #64]	; 0x40
    4804:	f803 5f46 	strb.w	r5, [r3, #70]!
    4808:	6023      	str	r3, [r4, #0]
    480a:	2301      	movs	r3, #1
    480c:	e7d1      	b.n	47b2 <_ungetc_r+0x7a>
    480e:	bf00      	nop
    4810:	00005184 	.word	0x00005184
    4814:	000051a4 	.word	0x000051a4
    4818:	00005164 	.word	0x00005164

0000481c <_fstat_r>:
    481c:	b538      	push	{r3, r4, r5, lr}
    481e:	4c07      	ldr	r4, [pc, #28]	; (483c <_fstat_r+0x20>)
    4820:	2300      	movs	r3, #0
    4822:	4605      	mov	r5, r0
    4824:	4608      	mov	r0, r1
    4826:	4611      	mov	r1, r2
    4828:	6023      	str	r3, [r4, #0]
    482a:	f7fb fedc 	bl	5e6 <_fstat>
    482e:	1c43      	adds	r3, r0, #1
    4830:	d102      	bne.n	4838 <_fstat_r+0x1c>
    4832:	6823      	ldr	r3, [r4, #0]
    4834:	b103      	cbz	r3, 4838 <_fstat_r+0x1c>
    4836:	602b      	str	r3, [r5, #0]
    4838:	bd38      	pop	{r3, r4, r5, pc}
    483a:	bf00      	nop
    483c:	20004700 	.word	0x20004700

00004840 <_isatty_r>:
    4840:	b538      	push	{r3, r4, r5, lr}
    4842:	4c06      	ldr	r4, [pc, #24]	; (485c <_isatty_r+0x1c>)
    4844:	2300      	movs	r3, #0
    4846:	4605      	mov	r5, r0
    4848:	4608      	mov	r0, r1
    484a:	6023      	str	r3, [r4, #0]
    484c:	f7fb fed0 	bl	5f0 <_isatty>
    4850:	1c43      	adds	r3, r0, #1
    4852:	d102      	bne.n	485a <_isatty_r+0x1a>
    4854:	6823      	ldr	r3, [r4, #0]
    4856:	b103      	cbz	r3, 485a <_isatty_r+0x1a>
    4858:	602b      	str	r3, [r5, #0]
    485a:	bd38      	pop	{r3, r4, r5, pc}
    485c:	20004700 	.word	0x20004700

00004860 <__locale_ctype_ptr_l>:
    4860:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    4864:	4770      	bx	lr
	...

00004868 <__locale_ctype_ptr>:
    4868:	4b04      	ldr	r3, [pc, #16]	; (487c <__locale_ctype_ptr+0x14>)
    486a:	4a05      	ldr	r2, [pc, #20]	; (4880 <__locale_ctype_ptr+0x18>)
    486c:	681b      	ldr	r3, [r3, #0]
    486e:	6a1b      	ldr	r3, [r3, #32]
    4870:	2b00      	cmp	r3, #0
    4872:	bf08      	it	eq
    4874:	4613      	moveq	r3, r2
    4876:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    487a:	4770      	bx	lr
    487c:	2000026c 	.word	0x2000026c
    4880:	200002d0 	.word	0x200002d0

00004884 <__ascii_mbtowc>:
    4884:	b082      	sub	sp, #8
    4886:	b901      	cbnz	r1, 488a <__ascii_mbtowc+0x6>
    4888:	a901      	add	r1, sp, #4
    488a:	b142      	cbz	r2, 489e <__ascii_mbtowc+0x1a>
    488c:	b14b      	cbz	r3, 48a2 <__ascii_mbtowc+0x1e>
    488e:	7813      	ldrb	r3, [r2, #0]
    4890:	600b      	str	r3, [r1, #0]
    4892:	7812      	ldrb	r2, [r2, #0]
    4894:	1c10      	adds	r0, r2, #0
    4896:	bf18      	it	ne
    4898:	2001      	movne	r0, #1
    489a:	b002      	add	sp, #8
    489c:	4770      	bx	lr
    489e:	4610      	mov	r0, r2
    48a0:	e7fb      	b.n	489a <__ascii_mbtowc+0x16>
    48a2:	f06f 0001 	mvn.w	r0, #1
    48a6:	e7f8      	b.n	489a <__ascii_mbtowc+0x16>
	...

000048b0 <memchr>:
    48b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    48b4:	2a10      	cmp	r2, #16
    48b6:	db2b      	blt.n	4910 <memchr+0x60>
    48b8:	f010 0f07 	tst.w	r0, #7
    48bc:	d008      	beq.n	48d0 <memchr+0x20>
    48be:	f810 3b01 	ldrb.w	r3, [r0], #1
    48c2:	3a01      	subs	r2, #1
    48c4:	428b      	cmp	r3, r1
    48c6:	d02d      	beq.n	4924 <memchr+0x74>
    48c8:	f010 0f07 	tst.w	r0, #7
    48cc:	b342      	cbz	r2, 4920 <memchr+0x70>
    48ce:	d1f6      	bne.n	48be <memchr+0xe>
    48d0:	b4f0      	push	{r4, r5, r6, r7}
    48d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    48d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    48da:	f022 0407 	bic.w	r4, r2, #7
    48de:	f07f 0700 	mvns.w	r7, #0
    48e2:	2300      	movs	r3, #0
    48e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    48e8:	3c08      	subs	r4, #8
    48ea:	ea85 0501 	eor.w	r5, r5, r1
    48ee:	ea86 0601 	eor.w	r6, r6, r1
    48f2:	fa85 f547 	uadd8	r5, r5, r7
    48f6:	faa3 f587 	sel	r5, r3, r7
    48fa:	fa86 f647 	uadd8	r6, r6, r7
    48fe:	faa5 f687 	sel	r6, r5, r7
    4902:	b98e      	cbnz	r6, 4928 <memchr+0x78>
    4904:	d1ee      	bne.n	48e4 <memchr+0x34>
    4906:	bcf0      	pop	{r4, r5, r6, r7}
    4908:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    490c:	f002 0207 	and.w	r2, r2, #7
    4910:	b132      	cbz	r2, 4920 <memchr+0x70>
    4912:	f810 3b01 	ldrb.w	r3, [r0], #1
    4916:	3a01      	subs	r2, #1
    4918:	ea83 0301 	eor.w	r3, r3, r1
    491c:	b113      	cbz	r3, 4924 <memchr+0x74>
    491e:	d1f8      	bne.n	4912 <memchr+0x62>
    4920:	2000      	movs	r0, #0
    4922:	4770      	bx	lr
    4924:	3801      	subs	r0, #1
    4926:	4770      	bx	lr
    4928:	2d00      	cmp	r5, #0
    492a:	bf06      	itte	eq
    492c:	4635      	moveq	r5, r6
    492e:	3803      	subeq	r0, #3
    4930:	3807      	subne	r0, #7
    4932:	f015 0f01 	tst.w	r5, #1
    4936:	d107      	bne.n	4948 <memchr+0x98>
    4938:	3001      	adds	r0, #1
    493a:	f415 7f80 	tst.w	r5, #256	; 0x100
    493e:	bf02      	ittt	eq
    4940:	3001      	addeq	r0, #1
    4942:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    4946:	3001      	addeq	r0, #1
    4948:	bcf0      	pop	{r4, r5, r6, r7}
    494a:	3801      	subs	r0, #1
    494c:	4770      	bx	lr
    494e:	bf00      	nop

00004950 <memcpy>:
    4950:	b510      	push	{r4, lr}
    4952:	1e43      	subs	r3, r0, #1
    4954:	440a      	add	r2, r1
    4956:	4291      	cmp	r1, r2
    4958:	d100      	bne.n	495c <memcpy+0xc>
    495a:	bd10      	pop	{r4, pc}
    495c:	f811 4b01 	ldrb.w	r4, [r1], #1
    4960:	f803 4f01 	strb.w	r4, [r3, #1]!
    4964:	e7f7      	b.n	4956 <memcpy+0x6>

00004966 <memmove>:
    4966:	4288      	cmp	r0, r1
    4968:	b510      	push	{r4, lr}
    496a:	eb01 0302 	add.w	r3, r1, r2
    496e:	d803      	bhi.n	4978 <memmove+0x12>
    4970:	1e42      	subs	r2, r0, #1
    4972:	4299      	cmp	r1, r3
    4974:	d10c      	bne.n	4990 <memmove+0x2a>
    4976:	bd10      	pop	{r4, pc}
    4978:	4298      	cmp	r0, r3
    497a:	d2f9      	bcs.n	4970 <memmove+0xa>
    497c:	1881      	adds	r1, r0, r2
    497e:	1ad2      	subs	r2, r2, r3
    4980:	42d3      	cmn	r3, r2
    4982:	d100      	bne.n	4986 <memmove+0x20>
    4984:	bd10      	pop	{r4, pc}
    4986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    498a:	f801 4d01 	strb.w	r4, [r1, #-1]!
    498e:	e7f7      	b.n	4980 <memmove+0x1a>
    4990:	f811 4b01 	ldrb.w	r4, [r1], #1
    4994:	f802 4f01 	strb.w	r4, [r2, #1]!
    4998:	e7eb      	b.n	4972 <memmove+0xc>

0000499a <_realloc_r>:
    499a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    499c:	4607      	mov	r7, r0
    499e:	4614      	mov	r4, r2
    49a0:	460e      	mov	r6, r1
    49a2:	b921      	cbnz	r1, 49ae <_realloc_r+0x14>
    49a4:	4611      	mov	r1, r2
    49a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    49aa:	f7fe b9e3 	b.w	2d74 <_malloc_r>
    49ae:	b922      	cbnz	r2, 49ba <_realloc_r+0x20>
    49b0:	f7fe f992 	bl	2cd8 <_free_r>
    49b4:	4625      	mov	r5, r4
    49b6:	4628      	mov	r0, r5
    49b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49ba:	f000 f821 	bl	4a00 <_malloc_usable_size_r>
    49be:	4284      	cmp	r4, r0
    49c0:	d90f      	bls.n	49e2 <_realloc_r+0x48>
    49c2:	4621      	mov	r1, r4
    49c4:	4638      	mov	r0, r7
    49c6:	f7fe f9d5 	bl	2d74 <_malloc_r>
    49ca:	4605      	mov	r5, r0
    49cc:	2800      	cmp	r0, #0
    49ce:	d0f2      	beq.n	49b6 <_realloc_r+0x1c>
    49d0:	4631      	mov	r1, r6
    49d2:	4622      	mov	r2, r4
    49d4:	f7ff ffbc 	bl	4950 <memcpy>
    49d8:	4631      	mov	r1, r6
    49da:	4638      	mov	r0, r7
    49dc:	f7fe f97c 	bl	2cd8 <_free_r>
    49e0:	e7e9      	b.n	49b6 <_realloc_r+0x1c>
    49e2:	4635      	mov	r5, r6
    49e4:	e7e7      	b.n	49b6 <_realloc_r+0x1c>

000049e6 <__ascii_wctomb>:
    49e6:	b149      	cbz	r1, 49fc <__ascii_wctomb+0x16>
    49e8:	2aff      	cmp	r2, #255	; 0xff
    49ea:	bf85      	ittet	hi
    49ec:	238a      	movhi	r3, #138	; 0x8a
    49ee:	6003      	strhi	r3, [r0, #0]
    49f0:	700a      	strbls	r2, [r1, #0]
    49f2:	f04f 30ff 	movhi.w	r0, #4294967295
    49f6:	bf98      	it	ls
    49f8:	2001      	movls	r0, #1
    49fa:	4770      	bx	lr
    49fc:	4608      	mov	r0, r1
    49fe:	4770      	bx	lr

00004a00 <_malloc_usable_size_r>:
    4a00:	f851 0c04 	ldr.w	r0, [r1, #-4]
    4a04:	2800      	cmp	r0, #0
    4a06:	f1a0 0004 	sub.w	r0, r0, #4
    4a0a:	bfbc      	itt	lt
    4a0c:	580b      	ldrlt	r3, [r1, r0]
    4a0e:	18c0      	addlt	r0, r0, r3
    4a10:	4770      	bx	lr
    4a12:	0000      	movs	r0, r0
    4a14:	682f2e2e 	.word	0x682f2e2e
    4a18:	732f6c61 	.word	0x732f6c61
    4a1c:	682f6372 	.word	0x682f6372
    4a20:	695f6c61 	.word	0x695f6c61
    4a24:	00632e6f 	.word	0x00632e6f
    4a28:	682f2e2e 	.word	0x682f2e2e
    4a2c:	732f6c61 	.word	0x732f6c61
    4a30:	682f6372 	.word	0x682f6372
    4a34:	6d5f6c61 	.word	0x6d5f6c61
    4a38:	735f6963 	.word	0x735f6963
    4a3c:	2e636e79 	.word	0x2e636e79
    4a40:	00000063 	.word	0x00000063
    4a44:	682f2e2e 	.word	0x682f2e2e
    4a48:	732f6c61 	.word	0x732f6c61
    4a4c:	682f6372 	.word	0x682f6372
    4a50:	755f6c61 	.word	0x755f6c61
    4a54:	74726173 	.word	0x74726173
    4a58:	6e79735f 	.word	0x6e79735f
    4a5c:	00632e63 	.word	0x00632e63
    4a60:	682f2e2e 	.word	0x682f2e2e
    4a64:	732f6c70 	.word	0x732f6c70
    4a68:	2f636864 	.word	0x2f636864
    4a6c:	5f6c7068 	.word	0x5f6c7068
    4a70:	63686473 	.word	0x63686473
    4a74:	0000632e 	.word	0x0000632e
    4a78:	40003000 	.word	0x40003000
    4a7c:	40003400 	.word	0x40003400
    4a80:	41012000 	.word	0x41012000
    4a84:	41014000 	.word	0x41014000
    4a88:	43000000 	.word	0x43000000
    4a8c:	43000400 	.word	0x43000400
    4a90:	43000800 	.word	0x43000800
    4a94:	43000c00 	.word	0x43000c00

00004a98 <_usarts>:
    4a98:	00000000 40100004 00030000 00700002     .......@......p.
    4aa8:	0000d8ad 00000000 00000002 40100004     ...............@
    4ab8:	00030000 00700002 0000d8ad 00000000     ......p.........

00004ac8 <_i2cms>:
	...
    4ae0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4af0:	65735f6c 6d6f6372 0000632e 5b53227b     l_sercom.c..{"S[
    4b00:	75343025 7b3a225d 3a225122 222c7525     %04u]":{"Q":%u,"
    4b10:	253a2241 44222c75 7d752522 000a0d7d     A":%u,"D"%u}}...
    4b20:	00007325 00786825 65530a0d 7463656c     %s..%hx...Select
    4b30:	6f206465 6f697470 7369206e 0d642520     ed option is %d.
    4b40:	0000000a 65520a0d 6e727574 20676e69     ......Returning 
    4b50:	6d206f74 206e6961 756e656d 0000000d     to main menu....
    4b60:	74530a0d 69747261 4c20676e 52414469     ..Starting LiDAR
    4b70:	746f6d20 000d726f 74530a0d 6970706f      motor....Stoppi
    4b80:	4c20676e 52414469 746f6d20 000d726f     ng LiDAR motor..
    4b90:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    4ba0:	73205241 0d706f74 00000000 65520a0d     AR stop.......Re
    4bb0:	73657571 676e6974 44694c20 72205241     questing LiDAR r
    4bc0:	74657365 0000000d 65520a0d 73657571     eset......Reques
    4bd0:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    4be0:	61637320 00000d6e 65520a0d 73657571      scan.....Reques
    4bf0:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    4c00:	70786520 73736572 61637320 00000d6e      express scan...
    4c10:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    4c20:	73205241 74726174 726f6620 73206563     AR start force s
    4c30:	0d6e6163 00000000 65520a0d 65697274     can.......Retrie
    4c40:	676e6976 44694c20 69205241 0d6f666e     ving LiDAR info.
    4c50:	00000000 65520a0d 65697274 676e6976     ......Retrieving
    4c60:	44694c20 68205241 746c6165 00000d68      LiDAR health...
    4c70:	65520a0d 65697274 676e6976 44694c20     ..Retrieving LiD
    4c80:	73205241 6c706d61 74617265 000d7365     AR samplerates..
    4c90:	6e490a0d 696c6176 706f2064 6e6f6974     ..Invalid option
    4ca0:	0000000d 63256325 00000000 63256325     ....%c%c....%c%c
    4cb0:	00006325 4144694c 74732052 6570706f     %c..LiDAR stoppe
    4cc0:	00000d64 68746167 64657265 6c302520     d...gathered %0l
    4cd0:	30252f75 63732064 2e736e61 0a0d2e2e     u/%0d scans.....
    4ce0:	00000000 756c3025 766e6920 64696c61     ....%0lu invalid
    4cf0:	61637320 2d20736e 6167202d 72656874      scans -- gather
    4d00:	25206465 2f756c30 20643025 6e616373     ed %0lu/%0d scan
    4d10:	2e2e2e73 00000a0d 58323025 00000000     s.......%02X....
    4d20:	52203a20 44694c50 4d205241 6c65646f      : RPLiDAR Model
    4d30:	3a444920 0d752520 0000000a 46203a20      ID: %u..... : F
    4d40:	776d7269 20657261 73726556 3a6e6f69     irmware Version:
    4d50:	2e752520 0a0d7525 00000000 48203a20      %u.%u...... : H
    4d60:	77647261 20657261 73726556 3a6e6f69     ardware Version:
    4d70:	0d752520 0000000a 53203a20 61697265      %u..... : Seria
    4d80:	754e206c 7265626d 7830203a 0a0d7325     l Number: 0x%s..
    4d90:	00000000 444f4f47 00000000 4e524157     ....GOOD....WARN
    4da0:	00474e49 4f525245 00000052 4e4b4e55     ING.ERROR...UNKN
    4db0:	004e574f 4c203a20 52414469 61654820     OWN. : LiDAR Hea
    4dc0:	2068746c 25207369 0a0d2173 00000000     lth is %s!......
    4dd0:	4c203a20 52414469 61654820 2068746c      : LiDAR Health 
    4de0:	25207369 0a0d2173 45203a20 726f7272     is %s!.. : Error
    4df0:	646f6320 25203a65 000a0d75 53203a20      code: %u... : S
    4e00:	646e6174 20647261 6e616353 6d615320     tandard Scan Sam
    4e10:	72656c70 3a657461 0d752520 0000000a     plerate: %u.....
    4e20:	45203a20 65727078 53207373 206e6163      : Express Scan 
    4e30:	706d6153 6172656c 203a6574 0a0d7525     Samplerate: %u..
    4e40:	00000000 21210a0d 21212121 49202121     ......!!!!!!!! I
    4e50:	6148206e 61466472 5f746c75 646e6148     n HardFault_Hand
    4e60:	2072656c 21212121 21212121 0000000d     ler !!!!!!!!....
    4e70:	6164696c 69745f72 2072656d 7525203d     lidar_timer = %u
    4e80:	00000a0d 0a0d0a0d 3d3d3d3d 3d3d3d3d     ........========
    4e90:	4144694c 75412052 616d6f74 20646574     LiDAR Automated 
    4ea0:	7070614d 20676e69 74737953 28206d65     Mapping System (
    4eb0:	534d414c 3d3d3d29 3d3d3d3d 00000d3d     LAMS)========...
    4ec0:	00756c25 6e490a0d 696c6176 706f2064     %lu...Invalid op
    4ed0:	6e6f6974 00000d20 6e450a0d 20726574     tion .....Enter 
    4ee0:	6c676e61 3e3e2065 00000020 52450a0d     angle >> .....ER
    4ef0:	3a524f52 766e4920 64696c61 676e6120     ROR: Invalid ang
    4f00:	202e656c 6c676e41 756d2065 62207473     le. Angle must b
    4f10:	65622065 65657774 2030206e 20646e61     e between 0 and 
    4f20:	0d303831 00000000 65530a0d 6e697474     180.......Settin
    4f30:	65732067 206f7672 6c676e61 6f742065     g servo angle to
    4f40:	6c302520 000a0d75 61440a0d 61206174      %0lu.....Data a
    4f50:	65742074 61207473 65726464 25207373     t test address %
    4f60:	73692064 25203d20 000a0d64 6e490a0d     d is = %d.....In
    4f70:	74726576 74206465 64206568 20617461     verted the data 
    4f80:	74207461 20747365 72646461 20737365     at test address 
    4f90:	20646e61 74697277 0d6e6574 00000000     and written.....
    4fa0:	6c500a0d 65736165 6e6f6320 75676966     ..Please configu
    4fb0:	53206572 204b4c42 65737566 206f7420     re SBLK fuse to 
    4fc0:	6f6c6c61 65746163 616d5320 45457472     allocate SmartEE
    4fd0:	4d4f5250 65726120 00000d61 64323025     PROM area...%02d
    4fe0:	00000020 6d530a0d 45747261 4f525045      .....SmartEEPRO
    4ff0:	6f63204d 6961746e 7620736e 64696c61     M contains valid
    5000:	74616420 000d2061 74530a0d 6e69726f      data ....Storin
    5010:	69732067 74616e67 20657275 53206f74     g signature to S
    5020:	7472616d 52504545 61204d4f 65726464     martEEPROM addre
    5030:	30207373 20303078 30206f74 0d333078     ss 0x00 to 0x03.
    5040:	00000000 75460a0d 76206573 65756c61     ......Fuse value
    5050:	6f662073 42532072 3d204b4c 2c642520     s for SBLK = %d,
    5060:	5a535020 25203d20 53202e64 74206565      PSZ = %d. See t
    5070:	74206568 656c6261 6d532720 45747261     he table 'SmartE
    5080:	4f525045 6956204d 61757472 0909206c     EPROM Virtual ..
    5090:	657a6953 206e6920 65747942 69202773     Size in Bytes' i
    50a0:	6874206e 61442065 68736174 20746565     n the Datasheet 
    50b0:	63206f74 75636c61 6574616c 746f7420     to calculate tot
    50c0:	61206c61 6c696176 656c6261 74796220     al available byt
    50d0:	0d207365 0000000a 45450a0d 4d4f5250     es .......EEPROM
    50e0:	74614420 74612061 72696620 25207473      Data at first %
    50f0:	6f6c2064 69746163 3a736e6f 000a0d20     d locations: ...
    5100:	6e450a0d 20726574 72646461 20737365     ..Enter address 
    5110:	00203e3e 52450a0d 3a524f52 64644120     >> ...ERROR: Add
    5120:	73736572 766e6920 64696c61 7254202e     ress invalid. Tr
    5130:	67612079 206e6961 0000000d 6e450a0d     y again ......En
    5140:	20726574 61746164 203e3e20 00000000     ter data >> ....
    5150:	72570a0d 65747469 6425206e 20746120     ..Written %d at 
    5160:	00006425                                %d..

00005164 <__sf_fake_stderr>:
	...

00005184 <__sf_fake_stdin>:
	...

000051a4 <__sf_fake_stdout>:
	...

000051c4 <_global_impure_ptr>:
    51c4:	20000270 2b302d23 6c680020 6665004c     p.. #-0+ .hlL.ef
    51d4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    51e4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    51f4:	64636261 00006665 0000521a 0000521d     abcdef...R...R..
    5204:	00005220 61462d41 3938662d 33323130      R..A-Fa-f890123
    5214:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    5224:	534f5000 2e005849 20200000                       .POSIX...

0000522d <_ctype_>:
    522d:	20202000 20202020 28282020 20282828     .         ((((( 
    523d:	20202020 20202020 20202020 20202020                     
    524d:	10108820 10101010 10101010 10101010      ...............
    525d:	04040410 04040404 10040404 10101010     ................
    526d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    527d:	01010101 01010101 01010101 10101010     ................
    528d:	42421010 42424242 02020202 02020202     ..BBBBBB........
    529d:	02020202 02020202 02020202 10101010     ................
    52ad:	00000020 00000000 00000000 00000000      ...............
	...

00005330 <_init>:
    5330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5332:	bf00      	nop
    5334:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5336:	bc08      	pop	{r3}
    5338:	469e      	mov	lr, r3
    533a:	4770      	bx	lr

0000533c <__init_array_start>:
    533c:	00000289 	.word	0x00000289

00005340 <_fini>:
    5340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5342:	bf00      	nop
    5344:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5346:	bc08      	pop	{r3}
    5348:	469e      	mov	lr, r3
    534a:	4770      	bx	lr

0000534c <__fini_array_start>:
    534c:	00000265 	.word	0x00000265
