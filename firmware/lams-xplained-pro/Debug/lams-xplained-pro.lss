
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052e4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  000052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002043c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002043c  2**0
                  CONTENTS
  4 .bss          000042bc  20000440  00005728  00020440  2**3
                  ALLOC
  5 .stack        00010004  200046fc  000099e4  00020440  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00039228  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004f12  00000000  00000000  000596eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f532  00000000  00000000  0005e5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d30  00000000  00000000  0006db2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010d0  00000000  00000000  0006e85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b7bf  00000000  00000000  0006f92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001dc5e  00000000  00000000  000ab0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125c3e  00000000  00000000  000c8d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003110  00000000  00000000  001ee98c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 47 01 20 f1 02 00 00 ed 02 00 00 29 19 00 00     .G. ........)...
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	11 0a 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1f4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000440 	.word	0x20000440
     280:	00000000 	.word	0x00000000
     284:	000052e4 	.word	0x000052e4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000052e4 	.word	0x000052e4
     2c4:	20000444 	.word	0x20000444
     2c8:	000052e4 	.word	0x000052e4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	sd_mmc_stack_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	000005f5 	.word	0x000005f5
     2e4:	00002099 	.word	0x00002099
     2e8:	00001a35 	.word	0x00001a35

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	000052e4 	.word	0x000052e4
     36c:	2000043c 	.word	0x2000043c
     370:	200046fc 	.word	0x200046fc
     374:	20000440 	.word	0x20000440
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	00002be1 	.word	0x00002be1
     384:	0000193d 	.word	0x0000193d

00000388 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     388:	4b10      	ldr	r3, [pc, #64]	; (3cc <STDIO_IO_PORT_init+0x44>)
     38a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     38e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     392:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     396:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     39e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3aa:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3be:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3c2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     3ca:	4770      	bx	lr
     3cc:	41008000 	.word	0x41008000

000003d0 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <STDIO_IO_CLOCK_init+0x1c>)
     3d2:	2240      	movs	r2, #64	; 0x40
     3d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     3d8:	2243      	movs	r2, #67	; 0x43
     3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3de:	4a04      	ldr	r2, [pc, #16]	; (3f0 <STDIO_IO_CLOCK_init+0x20>)
     3e0:	6993      	ldr	r3, [r2, #24]
     3e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     3e6:	6193      	str	r3, [r2, #24]
     3e8:	4770      	bx	lr
     3ea:	bf00      	nop
     3ec:	40001c00 	.word	0x40001c00
     3f0:	40000800 	.word	0x40000800

000003f4 <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     3f4:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <STDIO_IO_init+0x18>)
     3f8:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     3fa:	2200      	movs	r2, #0
     3fc:	4904      	ldr	r1, [pc, #16]	; (410 <STDIO_IO_init+0x1c>)
     3fe:	4805      	ldr	r0, [pc, #20]	; (414 <STDIO_IO_init+0x20>)
     400:	4b05      	ldr	r3, [pc, #20]	; (418 <STDIO_IO_init+0x24>)
     402:	4798      	blx	r3
	STDIO_IO_PORT_init();
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <STDIO_IO_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d1 	.word	0x000003d1
     410:	41012000 	.word	0x41012000
     414:	200046b0 	.word	0x200046b0
     418:	00000841 	.word	0x00000841
     41c:	00000389 	.word	0x00000389

00000420 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     420:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     422:	4b5e      	ldr	r3, [pc, #376]	; (59c <SDHC_IO_BUS_PORT_init+0x17c>)
     424:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     428:	6098      	str	r0, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     42e:	629a      	str	r2, [r3, #40]	; 0x28
     430:	4c5b      	ldr	r4, [pc, #364]	; (5a0 <SDHC_IO_BUS_PORT_init+0x180>)
     432:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     434:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     436:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     43a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     43e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     452:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     456:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     45a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45e:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     462:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
     466:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     468:	629a      	str	r2, [r3, #40]	; 0x28
     46a:	4e4e      	ldr	r6, [pc, #312]	; (5a4 <SDHC_IO_BUS_PORT_init+0x184>)
     46c:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     46e:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     470:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
     474:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     478:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47c:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     480:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     484:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     488:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48c:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     490:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     494:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     498:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     49c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     4a0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4a8:	4f3f      	ldr	r7, [pc, #252]	; (5a8 <SDHC_IO_BUS_PORT_init+0x188>)
     4aa:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ae:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b2:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
     4b6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4ba:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4be:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ca:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ce:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4d6:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4da:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     4e2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ea:	3704      	adds	r7, #4
     4ec:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
     4f8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4fc:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     514:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     518:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     51c:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     520:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     524:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     528:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     52c:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     530:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
     534:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     538:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53c:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     544:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     548:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54c:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     550:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     554:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     558:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     55c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     560:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     564:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     568:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     56c:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     570:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     574:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     578:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     57c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     580:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     584:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     588:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     58c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     594:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB21I_SDHC1_SDDAT3);
}
     598:	bcf0      	pop	{r4, r5, r6, r7}
     59a:	4770      	bx	lr
     59c:	41008000 	.word	0x41008000
     5a0:	c0000020 	.word	0xc0000020
     5a4:	c0000010 	.word	0xc0000010
     5a8:	c0000004 	.word	0xc0000004

000005ac <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     5ac:	4a05      	ldr	r2, [pc, #20]	; (5c4 <SDHC_IO_BUS_CLOCK_init+0x18>)
     5ae:	6913      	ldr	r3, [r2, #16]
     5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     5b4:	6113      	str	r3, [r2, #16]
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <SDHC_IO_BUS_CLOCK_init+0x1c>)
     5b8:	2240      	movs	r2, #64	; 0x40
     5ba:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     5c2:	4770      	bx	lr
     5c4:	40000800 	.word	0x40000800
     5c8:	40001c00 	.word	0x40001c00

000005cc <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     5cc:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <SDHC_IO_BUS_init+0x18>)
     5d0:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     5d2:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     5d6:	4804      	ldr	r0, [pc, #16]	; (5e8 <SDHC_IO_BUS_init+0x1c>)
     5d8:	4b04      	ldr	r3, [pc, #16]	; (5ec <SDHC_IO_BUS_init+0x20>)
     5da:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <SDHC_IO_BUS_init+0x24>)
     5de:	4798      	blx	r3
     5e0:	bd08      	pop	{r3, pc}
     5e2:	bf00      	nop
     5e4:	000005ad 	.word	0x000005ad
     5e8:	200046c0 	.word	0x200046c0
     5ec:	0000073d 	.word	0x0000073d
     5f0:	00000421 	.word	0x00000421

000005f4 <system_init>:
}

void system_init(void)
{
     5f4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5f6:	4b26      	ldr	r3, [pc, #152]	; (690 <system_init+0x9c>)
     5f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fa:	4b26      	ldr	r3, [pc, #152]	; (694 <system_init+0xa0>)
     5fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     600:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     604:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     60c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     610:	4a21      	ldr	r2, [pc, #132]	; (698 <system_init+0xa4>)
     612:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     622:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     626:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62a:	491c      	ldr	r1, [pc, #112]	; (69c <system_init+0xa8>)
     62c:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     630:	4a1b      	ldr	r2, [pc, #108]	; (6a0 <system_init+0xac>)
     632:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     636:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     63a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     63e:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     642:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     646:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     64e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     652:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     656:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     65a:	4a12      	ldr	r2, [pc, #72]	; (6a4 <system_init+0xb0>)
     65c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     660:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     664:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     668:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66c:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     674:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);

	LIDAR_USART_init();
     678:	4b0b      	ldr	r3, [pc, #44]	; (6a8 <system_init+0xb4>)
     67a:	4798      	blx	r3

	STDIO_IO_init();
     67c:	4b0b      	ldr	r3, [pc, #44]	; (6ac <system_init+0xb8>)
     67e:	4798      	blx	r3

	SDHC_IO_BUS_init();
     680:	4b0b      	ldr	r3, [pc, #44]	; (6b0 <system_init+0xbc>)
     682:	4798      	blx	r3

	SERVO_PWM_init();
     684:	4b0b      	ldr	r3, [pc, #44]	; (6b4 <system_init+0xc0>)
     686:	4798      	blx	r3

	LIDAR_PWM_init();
     688:	4b0b      	ldr	r3, [pc, #44]	; (6b8 <system_init+0xc4>)
     68a:	4798      	blx	r3
     68c:	bd08      	pop	{r3, pc}
     68e:	bf00      	nop
     690:	00000971 	.word	0x00000971
     694:	41008000 	.word	0x41008000
     698:	c0000004 	.word	0xc0000004
     69c:	40020000 	.word	0x40020000
     6a0:	c0020010 	.word	0xc0020010
     6a4:	c0020020 	.word	0xc0020020
     6a8:	00000e65 	.word	0x00000e65
     6ac:	000003f5 	.word	0x000003f5
     6b0:	000005cd 	.word	0x000005cd
     6b4:	00001a51 	.word	0x00001a51
     6b8:	00000c89 	.word	0x00000c89

000006bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <delay_ms+0x14>)
     6c0:	681c      	ldr	r4, [r3, #0]
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <delay_ms+0x18>)
     6c4:	4798      	blx	r3
     6c6:	4601      	mov	r1, r0
     6c8:	4620      	mov	r0, r4
     6ca:	4b03      	ldr	r3, [pc, #12]	; (6d8 <delay_ms+0x1c>)
     6cc:	4798      	blx	r3
     6ce:	bd10      	pop	{r4, pc}
     6d0:	2000045c 	.word	0x2000045c
     6d4:	00000949 	.word	0x00000949
     6d8:	00000969 	.word	0x00000969

000006dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6dc:	b570      	push	{r4, r5, r6, lr}
     6de:	460d      	mov	r5, r1
     6e0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     6e2:	4604      	mov	r4, r0
     6e4:	b160      	cbz	r0, 700 <io_write+0x24>
     6e6:	1c08      	adds	r0, r1, #0
     6e8:	bf18      	it	ne
     6ea:	2001      	movne	r0, #1
     6ec:	2234      	movs	r2, #52	; 0x34
     6ee:	4905      	ldr	r1, [pc, #20]	; (704 <io_write+0x28>)
     6f0:	4b05      	ldr	r3, [pc, #20]	; (708 <io_write+0x2c>)
     6f2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     6f4:	6823      	ldr	r3, [r4, #0]
     6f6:	4632      	mov	r2, r6
     6f8:	4629      	mov	r1, r5
     6fa:	4620      	mov	r0, r4
     6fc:	4798      	blx	r3
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
     700:	2000      	movs	r0, #0
     702:	e7f3      	b.n	6ec <io_write+0x10>
     704:	00004974 	.word	0x00004974
     708:	00000905 	.word	0x00000905

0000070c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	460d      	mov	r5, r1
     710:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     712:	4604      	mov	r4, r0
     714:	b160      	cbz	r0, 730 <io_read+0x24>
     716:	1c08      	adds	r0, r1, #0
     718:	bf18      	it	ne
     71a:	2001      	movne	r0, #1
     71c:	223d      	movs	r2, #61	; 0x3d
     71e:	4905      	ldr	r1, [pc, #20]	; (734 <io_read+0x28>)
     720:	4b05      	ldr	r3, [pc, #20]	; (738 <io_read+0x2c>)
     722:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     724:	6863      	ldr	r3, [r4, #4]
     726:	4632      	mov	r2, r6
     728:	4629      	mov	r1, r5
     72a:	4620      	mov	r0, r4
     72c:	4798      	blx	r3
}
     72e:	bd70      	pop	{r4, r5, r6, pc}
     730:	2000      	movs	r0, #0
     732:	e7f3      	b.n	71c <io_read+0x10>
     734:	00004974 	.word	0x00004974
     738:	00000905 	.word	0x00000905

0000073c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     73c:	b538      	push	{r3, r4, r5, lr}
     73e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     740:	4605      	mov	r5, r0
     742:	b158      	cbz	r0, 75c <mci_sync_init+0x20>
     744:	1c08      	adds	r0, r1, #0
     746:	bf18      	it	ne
     748:	2001      	movne	r0, #1
     74a:	2231      	movs	r2, #49	; 0x31
     74c:	4904      	ldr	r1, [pc, #16]	; (760 <mci_sync_init+0x24>)
     74e:	4b05      	ldr	r3, [pc, #20]	; (764 <mci_sync_init+0x28>)
     750:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     752:	4621      	mov	r1, r4
     754:	4628      	mov	r0, r5
     756:	4b04      	ldr	r3, [pc, #16]	; (768 <mci_sync_init+0x2c>)
     758:	4798      	blx	r3
}
     75a:	bd38      	pop	{r3, r4, r5, pc}
     75c:	2000      	movs	r0, #0
     75e:	e7f4      	b.n	74a <mci_sync_init+0xe>
     760:	00004988 	.word	0x00004988
     764:	00000905 	.word	0x00000905
     768:	00000a55 	.word	0x00000a55

0000076c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     770:	460f      	mov	r7, r1
     772:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     774:	4604      	mov	r4, r0
     776:	b328      	cbz	r0, 7c4 <usart_sync_write+0x58>
     778:	b331      	cbz	r1, 7c8 <usart_sync_write+0x5c>
     77a:	1c10      	adds	r0, r2, #0
     77c:	bf18      	it	ne
     77e:	2001      	movne	r0, #1
     780:	22f1      	movs	r2, #241	; 0xf1
     782:	4912      	ldr	r1, [pc, #72]	; (7cc <usart_sync_write+0x60>)
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <usart_sync_write+0x64>)
     786:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     788:	3408      	adds	r4, #8
     78a:	4d12      	ldr	r5, [pc, #72]	; (7d4 <usart_sync_write+0x68>)
     78c:	4620      	mov	r0, r4
     78e:	47a8      	blx	r5
     790:	2800      	cmp	r0, #0
     792:	d0fb      	beq.n	78c <usart_sync_write+0x20>
     794:	3f01      	subs	r7, #1
     796:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     798:	f8df 9040 	ldr.w	r9, [pc, #64]	; 7dc <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     79c:	4d0d      	ldr	r5, [pc, #52]	; (7d4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     79e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     7a2:	4620      	mov	r0, r4
     7a4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7a6:	4620      	mov	r0, r4
     7a8:	47a8      	blx	r5
     7aa:	2800      	cmp	r0, #0
     7ac:	d0fb      	beq.n	7a6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     7ae:	3601      	adds	r6, #1
     7b0:	4546      	cmp	r6, r8
     7b2:	d3f4      	bcc.n	79e <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     7b4:	4d08      	ldr	r5, [pc, #32]	; (7d8 <usart_sync_write+0x6c>)
     7b6:	4620      	mov	r0, r4
     7b8:	47a8      	blx	r5
     7ba:	2800      	cmp	r0, #0
     7bc:	d0fb      	beq.n	7b6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     7be:	4630      	mov	r0, r6
     7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     7c4:	2000      	movs	r0, #0
     7c6:	e7db      	b.n	780 <usart_sync_write+0x14>
     7c8:	2000      	movs	r0, #0
     7ca:	e7d9      	b.n	780 <usart_sync_write+0x14>
     7cc:	000049a4 	.word	0x000049a4
     7d0:	00000905 	.word	0x00000905
     7d4:	00000c6b 	.word	0x00000c6b
     7d8:	00000c75 	.word	0x00000c75
     7dc:	00000c5d 	.word	0x00000c5d

000007e0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7e4:	460f      	mov	r7, r1
     7e6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7e8:	4604      	mov	r4, r0
     7ea:	b1e0      	cbz	r0, 826 <usart_sync_read+0x46>
     7ec:	b1e9      	cbz	r1, 82a <usart_sync_read+0x4a>
     7ee:	1c10      	adds	r0, r2, #0
     7f0:	bf18      	it	ne
     7f2:	2001      	movne	r0, #1
     7f4:	f44f 7286 	mov.w	r2, #268	; 0x10c
     7f8:	490d      	ldr	r1, [pc, #52]	; (830 <usart_sync_read+0x50>)
     7fa:	4b0e      	ldr	r3, [pc, #56]	; (834 <usart_sync_read+0x54>)
     7fc:	4798      	blx	r3
     7fe:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     800:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     802:	3408      	adds	r4, #8
     804:	4d0c      	ldr	r5, [pc, #48]	; (838 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     806:	f8df 9034 	ldr.w	r9, [pc, #52]	; 83c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     80a:	4620      	mov	r0, r4
     80c:	47a8      	blx	r5
     80e:	2800      	cmp	r0, #0
     810:	d0fb      	beq.n	80a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     812:	4620      	mov	r0, r4
     814:	47c8      	blx	r9
     816:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     81a:	3601      	adds	r6, #1
     81c:	4546      	cmp	r6, r8
     81e:	d3f4      	bcc.n	80a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     820:	4630      	mov	r0, r6
     822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     826:	2000      	movs	r0, #0
     828:	e7e4      	b.n	7f4 <usart_sync_read+0x14>
     82a:	2000      	movs	r0, #0
     82c:	e7e2      	b.n	7f4 <usart_sync_read+0x14>
     82e:	bf00      	nop
     830:	000049a4 	.word	0x000049a4
     834:	00000905 	.word	0x00000905
     838:	00000c7f 	.word	0x00000c7f
     83c:	00000c63 	.word	0x00000c63

00000840 <usart_sync_init>:
{
     840:	b538      	push	{r3, r4, r5, lr}
     842:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     844:	4604      	mov	r4, r0
     846:	b198      	cbz	r0, 870 <usart_sync_init+0x30>
     848:	1c08      	adds	r0, r1, #0
     84a:	bf18      	it	ne
     84c:	2001      	movne	r0, #1
     84e:	2234      	movs	r2, #52	; 0x34
     850:	4908      	ldr	r1, [pc, #32]	; (874 <usart_sync_init+0x34>)
     852:	4b09      	ldr	r3, [pc, #36]	; (878 <usart_sync_init+0x38>)
     854:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     856:	4629      	mov	r1, r5
     858:	f104 0008 	add.w	r0, r4, #8
     85c:	4b07      	ldr	r3, [pc, #28]	; (87c <usart_sync_init+0x3c>)
     85e:	4798      	blx	r3
	if (init_status) {
     860:	4603      	mov	r3, r0
     862:	b918      	cbnz	r0, 86c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     864:	4a06      	ldr	r2, [pc, #24]	; (880 <usart_sync_init+0x40>)
     866:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     868:	4a06      	ldr	r2, [pc, #24]	; (884 <usart_sync_init+0x44>)
     86a:	6022      	str	r2, [r4, #0]
}
     86c:	4618      	mov	r0, r3
     86e:	bd38      	pop	{r3, r4, r5, pc}
     870:	2000      	movs	r0, #0
     872:	e7ec      	b.n	84e <usart_sync_init+0xe>
     874:	000049a4 	.word	0x000049a4
     878:	00000905 	.word	0x00000905
     87c:	00000c1d 	.word	0x00000c1d
     880:	000007e1 	.word	0x000007e1
     884:	0000076d 	.word	0x0000076d

00000888 <usart_sync_enable>:
{
     888:	b510      	push	{r4, lr}
	ASSERT(descr);
     88a:	4604      	mov	r4, r0
     88c:	2253      	movs	r2, #83	; 0x53
     88e:	4906      	ldr	r1, [pc, #24]	; (8a8 <usart_sync_enable+0x20>)
     890:	3000      	adds	r0, #0
     892:	bf18      	it	ne
     894:	2001      	movne	r0, #1
     896:	4b05      	ldr	r3, [pc, #20]	; (8ac <usart_sync_enable+0x24>)
     898:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     89a:	f104 0008 	add.w	r0, r4, #8
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <usart_sync_enable+0x28>)
     8a0:	4798      	blx	r3
}
     8a2:	2000      	movs	r0, #0
     8a4:	bd10      	pop	{r4, pc}
     8a6:	bf00      	nop
     8a8:	000049a4 	.word	0x000049a4
     8ac:	00000905 	.word	0x00000905
     8b0:	00000c49 	.word	0x00000c49

000008b4 <usart_sync_get_io_descriptor>:
{
     8b4:	b538      	push	{r3, r4, r5, lr}
     8b6:	460c      	mov	r4, r1
	ASSERT(descr && io);
     8b8:	4605      	mov	r5, r0
     8ba:	b148      	cbz	r0, 8d0 <usart_sync_get_io_descriptor+0x1c>
     8bc:	1c08      	adds	r0, r1, #0
     8be:	bf18      	it	ne
     8c0:	2001      	movne	r0, #1
     8c2:	2269      	movs	r2, #105	; 0x69
     8c4:	4903      	ldr	r1, [pc, #12]	; (8d4 <usart_sync_get_io_descriptor+0x20>)
     8c6:	4b04      	ldr	r3, [pc, #16]	; (8d8 <usart_sync_get_io_descriptor+0x24>)
     8c8:	4798      	blx	r3
	*io = &descr->io;
     8ca:	6025      	str	r5, [r4, #0]
}
     8cc:	2000      	movs	r0, #0
     8ce:	bd38      	pop	{r3, r4, r5, pc}
     8d0:	2000      	movs	r0, #0
     8d2:	e7f6      	b.n	8c2 <usart_sync_get_io_descriptor+0xe>
     8d4:	000049a4 	.word	0x000049a4
     8d8:	00000905 	.word	0x00000905

000008dc <usart_sync_is_rx_not_empty>:
{
     8dc:	b510      	push	{r4, lr}
	ASSERT(descr);
     8de:	4604      	mov	r4, r0
     8e0:	22d7      	movs	r2, #215	; 0xd7
     8e2:	4905      	ldr	r1, [pc, #20]	; (8f8 <usart_sync_is_rx_not_empty+0x1c>)
     8e4:	3000      	adds	r0, #0
     8e6:	bf18      	it	ne
     8e8:	2001      	movne	r0, #1
     8ea:	4b04      	ldr	r3, [pc, #16]	; (8fc <usart_sync_is_rx_not_empty+0x20>)
     8ec:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
     8ee:	f104 0008 	add.w	r0, r4, #8
     8f2:	4b03      	ldr	r3, [pc, #12]	; (900 <usart_sync_is_rx_not_empty+0x24>)
     8f4:	4798      	blx	r3
}
     8f6:	bd10      	pop	{r4, pc}
     8f8:	000049a4 	.word	0x000049a4
     8fc:	00000905 	.word	0x00000905
     900:	00000c7f 	.word	0x00000c7f

00000904 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     904:	b900      	cbnz	r0, 908 <assert+0x4>
		__asm("BKPT #0");
     906:	be00      	bkpt	0x0000
     908:	4770      	bx	lr
	...

0000090c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     90c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     90e:	4a06      	ldr	r2, [pc, #24]	; (928 <_sbrk+0x1c>)
     910:	6812      	ldr	r2, [r2, #0]
     912:	b122      	cbz	r2, 91e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     914:	4a04      	ldr	r2, [pc, #16]	; (928 <_sbrk+0x1c>)
     916:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     918:	4403      	add	r3, r0
     91a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     91c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     91e:	4903      	ldr	r1, [pc, #12]	; (92c <_sbrk+0x20>)
     920:	4a01      	ldr	r2, [pc, #4]	; (928 <_sbrk+0x1c>)
     922:	6011      	str	r1, [r2, #0]
     924:	e7f6      	b.n	914 <_sbrk+0x8>
     926:	bf00      	nop
     928:	20000460 	.word	0x20000460
     92c:	20014700 	.word	0x20014700

00000930 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     930:	f04f 30ff 	mov.w	r0, #4294967295
     934:	4770      	bx	lr

00000936 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     93a:	604b      	str	r3, [r1, #4]

	return 0;
}
     93c:	2000      	movs	r0, #0
     93e:	4770      	bx	lr

00000940 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     940:	2001      	movs	r0, #1
     942:	4770      	bx	lr

00000944 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     944:	2000      	movs	r0, #0
     946:	4770      	bx	lr

00000948 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     948:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     94c:	00c3      	lsls	r3, r0, #3
     94e:	3302      	adds	r3, #2
     950:	4803      	ldr	r0, [pc, #12]	; (960 <_get_cycles_for_ms+0x18>)
     952:	fba0 2303 	umull	r2, r3, r0, r3
     956:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     958:	2064      	movs	r0, #100	; 0x64
     95a:	fb00 f003 	mul.w	r0, r0, r3
     95e:	4770      	bx	lr
     960:	aaaaaaab 	.word	0xaaaaaaab
     964:	00000000 	.word	0x00000000

00000968 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     968:	3901      	subs	r1, #1
     96a:	d8fd      	bhi.n	968 <_delay_cycles>
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     970:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     972:	4a08      	ldr	r2, [pc, #32]	; (994 <_init_chip+0x24>)
     974:	8813      	ldrh	r3, [r2, #0]
     976:	b29b      	uxth	r3, r3
     978:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     97a:	4b07      	ldr	r3, [pc, #28]	; (998 <_init_chip+0x28>)
     97c:	4798      	blx	r3
	_oscctrl_init_sources();
     97e:	4b07      	ldr	r3, [pc, #28]	; (99c <_init_chip+0x2c>)
     980:	4798      	blx	r3
	_mclk_init();
     982:	4b07      	ldr	r3, [pc, #28]	; (9a0 <_init_chip+0x30>)
     984:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     986:	4b07      	ldr	r3, [pc, #28]	; (9a4 <_init_chip+0x34>)
     988:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     98a:	f640 70ff 	movw	r0, #4095	; 0xfff
     98e:	4b06      	ldr	r3, [pc, #24]	; (9a8 <_init_chip+0x38>)
     990:	4798      	blx	r3
     992:	bd08      	pop	{r3, pc}
     994:	41004000 	.word	0x41004000
     998:	000009dd 	.word	0x000009dd
     99c:	000009f1 	.word	0x000009f1
     9a0:	000009d1 	.word	0x000009d1
     9a4:	00000a0d 	.word	0x00000a0d
     9a8:	000009ad 	.word	0x000009ad

000009ac <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     9ac:	f010 0f01 	tst.w	r0, #1
     9b0:	d008      	beq.n	9c4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     9b2:	4a05      	ldr	r2, [pc, #20]	; (9c8 <_gclk_init_generators_by_fref+0x1c>)
     9b4:	4b05      	ldr	r3, [pc, #20]	; (9cc <_gclk_init_generators_by_fref+0x20>)
     9b6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     9b8:	4619      	mov	r1, r3
     9ba:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     9be:	684b      	ldr	r3, [r1, #4]
     9c0:	4213      	tst	r3, r2
     9c2:	d1fc      	bne.n	9be <_gclk_init_generators_by_fref+0x12>
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop
     9c8:	00010101 	.word	0x00010101
     9cc:	40001c00 	.word	0x40001c00

000009d0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     9d0:	2201      	movs	r2, #1
     9d2:	4b01      	ldr	r3, [pc, #4]	; (9d8 <_mclk_init+0x8>)
     9d4:	715a      	strb	r2, [r3, #5]
     9d6:	4770      	bx	lr
     9d8:	40000800 	.word	0x40000800

000009dc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     9dc:	4b03      	ldr	r3, [pc, #12]	; (9ec <_osc32kctrl_init_sources+0x10>)
     9de:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     9e0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     9e4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     9e6:	2201      	movs	r2, #1
     9e8:	741a      	strb	r2, [r3, #16]
     9ea:	4770      	bx	lr
     9ec:	40001400 	.word	0x40001400

000009f0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     9f0:	4a04      	ldr	r2, [pc, #16]	; (a04 <_oscctrl_init_sources+0x14>)
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <_oscctrl_init_sources+0x18>)
     9f4:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     9f6:	461a      	mov	r2, r3
     9f8:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     9fa:	f013 0f02 	tst.w	r3, #2
     9fe:	d0fb      	beq.n	9f8 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     a00:	4770      	bx	lr
     a02:	bf00      	nop
     a04:	03002606 	.word	0x03002606
     a08:	40001000 	.word	0x40001000

00000a0c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     a0c:	4770      	bx	lr
	...

00000a10 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     a10:	b500      	push	{lr}
     a12:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     a14:	4b0d      	ldr	r3, [pc, #52]	; (a4c <RAMECC_Handler+0x3c>)
     a16:	789b      	ldrb	r3, [r3, #2]
     a18:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     a1a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     a1c:	9b01      	ldr	r3, [sp, #4]
     a1e:	f013 0f02 	tst.w	r3, #2
     a22:	d006      	beq.n	a32 <RAMECC_Handler+0x22>
     a24:	4b0a      	ldr	r3, [pc, #40]	; (a50 <RAMECC_Handler+0x40>)
     a26:	681b      	ldr	r3, [r3, #0]
     a28:	b11b      	cbz	r3, a32 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     a2a:	4a08      	ldr	r2, [pc, #32]	; (a4c <RAMECC_Handler+0x3c>)
     a2c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     a2e:	4798      	blx	r3
     a30:	e009      	b.n	a46 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     a32:	9b01      	ldr	r3, [sp, #4]
     a34:	f013 0f01 	tst.w	r3, #1
     a38:	d005      	beq.n	a46 <RAMECC_Handler+0x36>
     a3a:	4b05      	ldr	r3, [pc, #20]	; (a50 <RAMECC_Handler+0x40>)
     a3c:	685b      	ldr	r3, [r3, #4]
     a3e:	b113      	cbz	r3, a46 <RAMECC_Handler+0x36>
     a40:	4a02      	ldr	r2, [pc, #8]	; (a4c <RAMECC_Handler+0x3c>)
     a42:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     a44:	4798      	blx	r3
	} else {
		return;
	}
}
     a46:	b003      	add	sp, #12
     a48:	f85d fb04 	ldr.w	pc, [sp], #4
     a4c:	41020000 	.word	0x41020000
     a50:	200046d8 	.word	0x200046d8

00000a54 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
     a54:	b538      	push	{r3, r4, r5, lr}
     a56:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
     a58:	4605      	mov	r5, r0
     a5a:	b340      	cbz	r0, aae <_mci_sync_init+0x5a>
     a5c:	1c08      	adds	r0, r1, #0
     a5e:	bf18      	it	ne
     a60:	2001      	movne	r0, #1
     a62:	22d8      	movs	r2, #216	; 0xd8
     a64:	4913      	ldr	r1, [pc, #76]	; (ab4 <_mci_sync_init+0x60>)
     a66:	4b14      	ldr	r3, [pc, #80]	; (ab8 <_mci_sync_init+0x64>)
     a68:	4798      	blx	r3

	mci_dev->hw = hw;
     a6a:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
     a6c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
     a70:	f043 0301 	orr.w	r3, r3, #1
     a74:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
     a78:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
     a7c:	f013 0f01 	tst.w	r3, #1
     a80:	d1fa      	bne.n	a78 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
     a82:	230e      	movs	r3, #14
     a84:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
     a88:	230f      	movs	r3, #15
     a8a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
     a8e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a90:	b29b      	uxth	r3, r3
     a92:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     a96:	ea6f 2343 	mvn.w	r3, r3, lsl #9
     a9a:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
     a9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
     a9e:	b29b      	uxth	r3, r3
     aa0:	ea6f 2393 	mvn.w	r3, r3, lsr #10
     aa4:	ea6f 2383 	mvn.w	r3, r3, lsl #10
     aa8:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
     aaa:	2000      	movs	r0, #0
     aac:	bd38      	pop	{r3, r4, r5, pc}
     aae:	2000      	movs	r0, #0
     ab0:	e7d7      	b.n	a62 <_mci_sync_init+0xe>
     ab2:	bf00      	nop
     ab4:	000049c0 	.word	0x000049c0
     ab8:	00000905 	.word	0x00000905

00000abc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     abc:	b470      	push	{r4, r5, r6}
     abe:	b089      	sub	sp, #36	; 0x24
     ac0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     ac2:	466c      	mov	r4, sp
     ac4:	4d0d      	ldr	r5, [pc, #52]	; (afc <_sercom_get_hardware_index+0x40>)
     ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     aca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     ad2:	9b00      	ldr	r3, [sp, #0]
     ad4:	42b3      	cmp	r3, r6
     ad6:	d00d      	beq.n	af4 <_sercom_get_hardware_index+0x38>
     ad8:	4631      	mov	r1, r6
     ada:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     adc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     ade:	f853 2b04 	ldr.w	r2, [r3], #4
     ae2:	428a      	cmp	r2, r1
     ae4:	d007      	beq.n	af6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ae6:	3001      	adds	r0, #1
     ae8:	2808      	cmp	r0, #8
     aea:	d1f8      	bne.n	ade <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     aec:	2000      	movs	r0, #0
}
     aee:	b009      	add	sp, #36	; 0x24
     af0:	bc70      	pop	{r4, r5, r6}
     af2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     af4:	2000      	movs	r0, #0
			return i;
     af6:	b2c0      	uxtb	r0, r0
     af8:	e7f9      	b.n	aee <_sercom_get_hardware_index+0x32>
     afa:	bf00      	nop
     afc:	000049d8 	.word	0x000049d8

00000b00 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     b00:	b510      	push	{r4, lr}
     b02:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     b04:	4b41      	ldr	r3, [pc, #260]	; (c0c <_usart_init+0x10c>)
     b06:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     b08:	2800      	cmp	r0, #0
     b0a:	d05c      	beq.n	bc6 <_usart_init+0xc6>
     b0c:	2802      	cmp	r0, #2
     b0e:	d05c      	beq.n	bca <_usart_init+0xca>
	ASSERT(false);
     b10:	f240 2247 	movw	r2, #583	; 0x247
     b14:	493e      	ldr	r1, [pc, #248]	; (c10 <_usart_init+0x110>)
     b16:	2000      	movs	r0, #0
     b18:	4b3e      	ldr	r3, [pc, #248]	; (c14 <_usart_init+0x114>)
     b1a:	4798      	blx	r3
	return 0;
     b1c:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     b1e:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     b20:	f013 0f01 	tst.w	r3, #1
     b24:	d122      	bne.n	b6c <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     b26:	004b      	lsls	r3, r1, #1
     b28:	185a      	adds	r2, r3, r1
     b2a:	4b3b      	ldr	r3, [pc, #236]	; (c18 <_usart_init+0x118>)
     b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     b32:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b36:	69e3      	ldr	r3, [r4, #28]
     b38:	f013 0f03 	tst.w	r3, #3
     b3c:	d1fb      	bne.n	b36 <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     b3e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     b40:	f013 0f02 	tst.w	r3, #2
     b44:	d00b      	beq.n	b5e <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     b46:	6823      	ldr	r3, [r4, #0]
     b48:	f023 0302 	bic.w	r3, r3, #2
     b4c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b4e:	69e3      	ldr	r3, [r4, #28]
     b50:	f013 0f03 	tst.w	r3, #3
     b54:	d1fb      	bne.n	b4e <_usart_init+0x4e>
     b56:	69e3      	ldr	r3, [r4, #28]
     b58:	f013 0f02 	tst.w	r3, #2
     b5c:	d1fb      	bne.n	b56 <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     b5e:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b62:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b64:	69e3      	ldr	r3, [r4, #28]
     b66:	f013 0f03 	tst.w	r3, #3
     b6a:	d1fb      	bne.n	b64 <_usart_init+0x64>
     b6c:	69e3      	ldr	r3, [r4, #28]
     b6e:	f013 0f01 	tst.w	r3, #1
     b72:	d1fb      	bne.n	b6c <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     b74:	460a      	mov	r2, r1
     b76:	004b      	lsls	r3, r1, #1
     b78:	440b      	add	r3, r1
     b7a:	4927      	ldr	r1, [pc, #156]	; (c18 <_usart_init+0x118>)
     b7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
     b80:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b82:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b84:	69e3      	ldr	r3, [r4, #28]
     b86:	f013 0f03 	tst.w	r3, #3
     b8a:	d1fb      	bne.n	b84 <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     b8c:	0053      	lsls	r3, r2, #1
     b8e:	1899      	adds	r1, r3, r2
     b90:	4b21      	ldr	r3, [pc, #132]	; (c18 <_usart_init+0x118>)
     b92:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     b98:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b9a:	69e3      	ldr	r3, [r4, #28]
     b9c:	f013 0f1f 	tst.w	r3, #31
     ba0:	d1fb      	bne.n	b9a <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     ba2:	0053      	lsls	r3, r2, #1
     ba4:	1899      	adds	r1, r3, r2
     ba6:	4b1c      	ldr	r3, [pc, #112]	; (c18 <_usart_init+0x118>)
     ba8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     bae:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     bb0:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
     bb4:	d10b      	bne.n	bce <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     bb6:	0053      	lsls	r3, r2, #1
     bb8:	1899      	adds	r1, r3, r2
     bba:	4b17      	ldr	r3, [pc, #92]	; (c18 <_usart_init+0x118>)
     bbc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     bc0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     bc2:	81a3      	strh	r3, [r4, #12]
     bc4:	e011      	b.n	bea <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     bc6:	2100      	movs	r1, #0
     bc8:	e7a9      	b.n	b1e <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
     bca:	2101      	movs	r1, #1
     bcc:	e7a7      	b.n	b1e <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     bce:	4b12      	ldr	r3, [pc, #72]	; (c18 <_usart_init+0x118>)
     bd0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     bd4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
     bd6:	89a1      	ldrh	r1, [r4, #12]
     bd8:	f360 010c 	bfi	r1, r0, #0, #13
     bdc:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     bde:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
     be2:	89a3      	ldrh	r3, [r4, #12]
     be4:	f361 334f 	bfi	r3, r1, #13, #3
     be8:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     bea:	4b0b      	ldr	r3, [pc, #44]	; (c18 <_usart_init+0x118>)
     bec:	0051      	lsls	r1, r2, #1
     bee:	1888      	adds	r0, r1, r2
     bf0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     bf4:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     bf8:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     bfa:	440a      	add	r2, r1
     bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     c00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     c04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     c08:	2000      	movs	r0, #0
     c0a:	bd10      	pop	{r4, pc}
     c0c:	00000abd 	.word	0x00000abd
     c10:	00004a40 	.word	0x00004a40
     c14:	00000905 	.word	0x00000905
     c18:	000049d8 	.word	0x000049d8

00000c1c <_usart_sync_init>:
{
     c1c:	b538      	push	{r3, r4, r5, lr}
     c1e:	460c      	mov	r4, r1
	ASSERT(device);
     c20:	4605      	mov	r5, r0
     c22:	22bb      	movs	r2, #187	; 0xbb
     c24:	4905      	ldr	r1, [pc, #20]	; (c3c <_usart_sync_init+0x20>)
     c26:	3000      	adds	r0, #0
     c28:	bf18      	it	ne
     c2a:	2001      	movne	r0, #1
     c2c:	4b04      	ldr	r3, [pc, #16]	; (c40 <_usart_sync_init+0x24>)
     c2e:	4798      	blx	r3
	device->hw = hw;
     c30:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     c32:	4620      	mov	r0, r4
     c34:	4b03      	ldr	r3, [pc, #12]	; (c44 <_usart_sync_init+0x28>)
     c36:	4798      	blx	r3
}
     c38:	bd38      	pop	{r3, r4, r5, pc}
     c3a:	bf00      	nop
     c3c:	00004a40 	.word	0x00004a40
     c40:	00000905 	.word	0x00000905
     c44:	00000b01 	.word	0x00000b01

00000c48 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     c48:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c4a:	6813      	ldr	r3, [r2, #0]
     c4c:	f043 0302 	orr.w	r3, r3, #2
     c50:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c52:	69d3      	ldr	r3, [r2, #28]
     c54:	f013 0f03 	tst.w	r3, #3
     c58:	d1fb      	bne.n	c52 <_usart_sync_enable+0xa>
}
     c5a:	4770      	bx	lr

00000c5c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     c5c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     c5e:	6299      	str	r1, [r3, #40]	; 0x28
     c60:	4770      	bx	lr

00000c62 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     c62:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     c64:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     c66:	b2c0      	uxtb	r0, r0
     c68:	4770      	bx	lr

00000c6a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     c6a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c6c:	7e18      	ldrb	r0, [r3, #24]
}
     c6e:	f000 0001 	and.w	r0, r0, #1
     c72:	4770      	bx	lr

00000c74 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     c74:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     c76:	7e18      	ldrb	r0, [r3, #24]
}
     c78:	f3c0 0040 	ubfx	r0, r0, #1, #1
     c7c:	4770      	bx	lr

00000c7e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     c7e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     c80:	7e18      	ldrb	r0, [r3, #24]
}
     c82:	f3c0 0080 	ubfx	r0, r0, #2, #1
     c86:	4770      	bx	lr

00000c88 <LIDAR_PWM_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     c88:	4a3b      	ldr	r2, [pc, #236]	; (d78 <LIDAR_PWM_init+0xf0>)
     c8a:	69d3      	ldr	r3, [r2, #28]
     c8c:	f043 0320 	orr.w	r3, r3, #32
     c90:	61d3      	str	r3, [r2, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     c92:	2240      	movs	r2, #64	; 0x40
     c94:	4b39      	ldr	r3, [pc, #228]	; (d7c <LIDAR_PWM_init+0xf4>)
     c96:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c9a:	4b39      	ldr	r3, [pc, #228]	; (d80 <LIDAR_PWM_init+0xf8>)
     c9c:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ca4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ca8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cac:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cb0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cb8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
     cc0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cc4:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
     cc8:	f042 0204 	orr.w	r2, r2, #4
     ccc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cd0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     cd4:	4b2b      	ldr	r3, [pc, #172]	; (d84 <LIDAR_PWM_init+0xfc>)
     cd6:	691b      	ldr	r3, [r3, #16]
void LIDAR_PWM_init(void)
{
	LIDAR_PWM_CLOCK_init();
	LIDAR_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     cd8:	f013 0f01 	tst.w	r3, #1
     cdc:	d11f      	bne.n	d1e <LIDAR_PWM_init+0x96>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     cde:	4a29      	ldr	r2, [pc, #164]	; (d84 <LIDAR_PWM_init+0xfc>)
     ce0:	6913      	ldr	r3, [r2, #16]
     ce2:	f013 0f03 	tst.w	r3, #3
     ce6:	d1fb      	bne.n	ce0 <LIDAR_PWM_init+0x58>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     ce8:	4b26      	ldr	r3, [pc, #152]	; (d84 <LIDAR_PWM_init+0xfc>)
     cea:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     cec:	f013 0f02 	tst.w	r3, #2
     cf0:	d00d      	beq.n	d0e <LIDAR_PWM_init+0x86>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     cf2:	4a24      	ldr	r2, [pc, #144]	; (d84 <LIDAR_PWM_init+0xfc>)
     cf4:	6813      	ldr	r3, [r2, #0]
     cf6:	f023 0302 	bic.w	r3, r3, #2
     cfa:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     cfc:	6913      	ldr	r3, [r2, #16]
     cfe:	f013 0f03 	tst.w	r3, #3
     d02:	d1fb      	bne.n	cfc <LIDAR_PWM_init+0x74>
     d04:	4a1f      	ldr	r2, [pc, #124]	; (d84 <LIDAR_PWM_init+0xfc>)
     d06:	6913      	ldr	r3, [r2, #16]
     d08:	f013 0f02 	tst.w	r3, #2
     d0c:	d1fb      	bne.n	d06 <LIDAR_PWM_init+0x7e>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     d0e:	2201      	movs	r2, #1
     d10:	4b1c      	ldr	r3, [pc, #112]	; (d84 <LIDAR_PWM_init+0xfc>)
     d12:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d14:	461a      	mov	r2, r3
     d16:	6913      	ldr	r3, [r2, #16]
     d18:	f013 0f03 	tst.w	r3, #3
     d1c:	d1fb      	bne.n	d16 <LIDAR_PWM_init+0x8e>
     d1e:	4a19      	ldr	r2, [pc, #100]	; (d84 <LIDAR_PWM_init+0xfc>)
     d20:	6913      	ldr	r3, [r2, #16]
     d22:	f013 0f01 	tst.w	r3, #1
     d26:	d1fb      	bne.n	d20 <LIDAR_PWM_init+0x98>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     d28:	4a17      	ldr	r2, [pc, #92]	; (d88 <LIDAR_PWM_init+0x100>)
     d2a:	4b16      	ldr	r3, [pc, #88]	; (d84 <LIDAR_PWM_init+0xfc>)
     d2c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d2e:	461a      	mov	r2, r3
     d30:	6913      	ldr	r3, [r2, #16]
     d32:	f013 0f03 	tst.w	r3, #3
     d36:	d1fb      	bne.n	d30 <LIDAR_PWM_init+0xa8>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
     d38:	4b12      	ldr	r3, [pc, #72]	; (d84 <LIDAR_PWM_init+0xfc>)
     d3a:	2200      	movs	r2, #0
     d3c:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
     d3e:	22ff      	movs	r2, #255	; 0xff
     d40:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
     d42:	2203      	movs	r2, #3
     d44:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     d46:	223c      	movs	r2, #60	; 0x3c
     d48:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d4a:	461a      	mov	r2, r3
     d4c:	6913      	ldr	r3, [r2, #16]
     d4e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     d52:	d1fb      	bne.n	d4c <LIDAR_PWM_init+0xc4>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     d54:	2200      	movs	r2, #0
     d56:	4b0b      	ldr	r3, [pc, #44]	; (d84 <LIDAR_PWM_init+0xfc>)
     d58:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d5a:	461a      	mov	r2, r3
     d5c:	6913      	ldr	r3, [r2, #16]
     d5e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     d62:	d1fb      	bne.n	d5c <LIDAR_PWM_init+0xd4>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     d64:	4a07      	ldr	r2, [pc, #28]	; (d84 <LIDAR_PWM_init+0xfc>)
     d66:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     d68:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     d6c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d6e:	6913      	ldr	r3, [r2, #16]
     d70:	f013 0f03 	tst.w	r3, #3
     d74:	d1fb      	bne.n	d6e <LIDAR_PWM_init+0xe6>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
     d76:	4770      	bx	lr
     d78:	40000800 	.word	0x40000800
     d7c:	40001c00 	.word	0x40001c00
     d80:	41008000 	.word	0x41008000
     d84:	42001400 	.word	0x42001400
     d88:	12000310 	.word	0x12000310

00000d8c <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     d8c:	4b19      	ldr	r3, [pc, #100]	; (df4 <LIDAR_PWM_start+0x68>)
     d8e:	691b      	ldr	r3, [r3, #16]
/**
  * Starts LiDAR PWM motor
  */ 
void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     d90:	f013 0f01 	tst.w	r3, #1
     d94:	d117      	bne.n	dc6 <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d96:	4a17      	ldr	r2, [pc, #92]	; (df4 <LIDAR_PWM_start+0x68>)
     d98:	6913      	ldr	r3, [r2, #16]
     d9a:	f013 0f03 	tst.w	r3, #3
     d9e:	d1fb      	bne.n	d98 <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     da0:	4b14      	ldr	r3, [pc, #80]	; (df4 <LIDAR_PWM_start+0x68>)
     da2:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     da4:	f013 0f02 	tst.w	r3, #2
     da8:	d00d      	beq.n	dc6 <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     daa:	4a12      	ldr	r2, [pc, #72]	; (df4 <LIDAR_PWM_start+0x68>)
     dac:	6813      	ldr	r3, [r2, #0]
     dae:	f023 0302 	bic.w	r3, r3, #2
     db2:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     db4:	6913      	ldr	r3, [r2, #16]
     db6:	f013 0f03 	tst.w	r3, #3
     dba:	d1fb      	bne.n	db4 <LIDAR_PWM_start+0x28>
     dbc:	4a0d      	ldr	r2, [pc, #52]	; (df4 <LIDAR_PWM_start+0x68>)
     dbe:	6913      	ldr	r3, [r2, #16]
     dc0:	f013 0f02 	tst.w	r3, #2
     dc4:	d1fb      	bne.n	dbe <LIDAR_PWM_start+0x32>
     dc6:	4a0b      	ldr	r2, [pc, #44]	; (df4 <LIDAR_PWM_start+0x68>)
     dc8:	6913      	ldr	r3, [r2, #16]
     dca:	f013 0f01 	tst.w	r3, #1
     dce:	d1fb      	bne.n	dc8 <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     dd0:	2224      	movs	r2, #36	; 0x24
     dd2:	4b08      	ldr	r3, [pc, #32]	; (df4 <LIDAR_PWM_start+0x68>)
     dd4:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dd6:	461a      	mov	r2, r3
     dd8:	6913      	ldr	r3, [r2, #16]
     dda:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     dde:	d1fb      	bne.n	dd8 <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     de0:	4a04      	ldr	r2, [pc, #16]	; (df4 <LIDAR_PWM_start+0x68>)
     de2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     de4:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     de8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dea:	6913      	ldr	r3, [r2, #16]
     dec:	f013 0f03 	tst.w	r3, #3
     df0:	d1fb      	bne.n	dea <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
     df2:	4770      	bx	lr
     df4:	42001400 	.word	0x42001400

00000df8 <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     df8:	4b19      	ldr	r3, [pc, #100]	; (e60 <LIDAR_PWM_stop+0x68>)
     dfa:	691b      	ldr	r3, [r3, #16]
/**
  * Stops LiDAR PWM motor
  */ 
void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     dfc:	f013 0f01 	tst.w	r3, #1
     e00:	d117      	bne.n	e32 <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e02:	4a17      	ldr	r2, [pc, #92]	; (e60 <LIDAR_PWM_stop+0x68>)
     e04:	6913      	ldr	r3, [r2, #16]
     e06:	f013 0f03 	tst.w	r3, #3
     e0a:	d1fb      	bne.n	e04 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e0c:	4b14      	ldr	r3, [pc, #80]	; (e60 <LIDAR_PWM_stop+0x68>)
     e0e:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     e10:	f013 0f02 	tst.w	r3, #2
     e14:	d00d      	beq.n	e32 <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     e16:	4a12      	ldr	r2, [pc, #72]	; (e60 <LIDAR_PWM_stop+0x68>)
     e18:	6813      	ldr	r3, [r2, #0]
     e1a:	f023 0302 	bic.w	r3, r3, #2
     e1e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e20:	6913      	ldr	r3, [r2, #16]
     e22:	f013 0f03 	tst.w	r3, #3
     e26:	d1fb      	bne.n	e20 <LIDAR_PWM_stop+0x28>
     e28:	4a0d      	ldr	r2, [pc, #52]	; (e60 <LIDAR_PWM_stop+0x68>)
     e2a:	6913      	ldr	r3, [r2, #16]
     e2c:	f013 0f02 	tst.w	r3, #2
     e30:	d1fb      	bne.n	e2a <LIDAR_PWM_stop+0x32>
     e32:	4a0b      	ldr	r2, [pc, #44]	; (e60 <LIDAR_PWM_stop+0x68>)
     e34:	6913      	ldr	r3, [r2, #16]
     e36:	f013 0f01 	tst.w	r3, #1
     e3a:	d1fb      	bne.n	e34 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e3c:	2200      	movs	r2, #0
     e3e:	4b08      	ldr	r3, [pc, #32]	; (e60 <LIDAR_PWM_stop+0x68>)
     e40:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e42:	461a      	mov	r2, r3
     e44:	6913      	ldr	r3, [r2, #16]
     e46:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     e4a:	d1fb      	bne.n	e44 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e4c:	4a04      	ldr	r2, [pc, #16]	; (e60 <LIDAR_PWM_stop+0x68>)
     e4e:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     e50:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     e54:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e56:	6913      	ldr	r3, [r2, #16]
     e58:	f013 0f03 	tst.w	r3, #3
     e5c:	d1fb      	bne.n	e56 <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
     e5e:	4770      	bx	lr
     e60:	42001400 	.word	0x42001400

00000e64 <LIDAR_USART_init>:

/**
  * Initializes USART for LiDAR
  */ 
void LIDAR_USART_init(void)
{
     e64:	b510      	push	{r4, lr}
     e66:	4b1b      	ldr	r3, [pc, #108]	; (ed4 <LIDAR_USART_init+0x70>)
     e68:	2240      	movs	r2, #64	; 0x40
     e6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     e6e:	2243      	movs	r2, #67	; 0x43
     e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     e74:	4a18      	ldr	r2, [pc, #96]	; (ed8 <LIDAR_USART_init+0x74>)
     e76:	6953      	ldr	r3, [r2, #20]
     e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     e7c:	6153      	str	r3, [r2, #20]
	LIDAR_USART_CLOCK_init();
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
     e7e:	4c17      	ldr	r4, [pc, #92]	; (edc <LIDAR_USART_init+0x78>)
     e80:	2200      	movs	r2, #0
     e82:	4917      	ldr	r1, [pc, #92]	; (ee0 <LIDAR_USART_init+0x7c>)
     e84:	4620      	mov	r0, r4
     e86:	4b17      	ldr	r3, [pc, #92]	; (ee4 <LIDAR_USART_init+0x80>)
     e88:	4798      	blx	r3
	usart_sync_enable(&LIDAR_USART);
     e8a:	4620      	mov	r0, r4
     e8c:	4b16      	ldr	r3, [pc, #88]	; (ee8 <LIDAR_USART_init+0x84>)
     e8e:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e90:	4b16      	ldr	r3, [pc, #88]	; (eec <LIDAR_USART_init+0x88>)
     e92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     e96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e9a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ea2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ea6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     eaa:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     eae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eb2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     eb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     eba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ec2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ec6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     eca:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ece:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     ed2:	bd10      	pop	{r4, pc}
     ed4:	40001c00 	.word	0x40001c00
     ed8:	40000800 	.word	0x40000800
     edc:	200046e8 	.word	0x200046e8
     ee0:	40003000 	.word	0x40003000
     ee4:	00000841 	.word	0x00000841
     ee8:	00000889 	.word	0x00000889
     eec:	41008000 	.word	0x41008000

00000ef0 <LIDAR_USART_send>:

/**
  * Sends data through USART to LiDAR
  */ 
void LIDAR_USART_send(uint8_t* message, uint16_t length)
{
     ef0:	b530      	push	{r4, r5, lr}
     ef2:	b083      	sub	sp, #12
     ef4:	4604      	mov	r4, r0
     ef6:	460d      	mov	r5, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
     ef8:	a901      	add	r1, sp, #4
     efa:	4805      	ldr	r0, [pc, #20]	; (f10 <LIDAR_USART_send+0x20>)
     efc:	4b05      	ldr	r3, [pc, #20]	; (f14 <LIDAR_USART_send+0x24>)
     efe:	4798      	blx	r3
	
	io_write(io, message, length);
     f00:	462a      	mov	r2, r5
     f02:	4621      	mov	r1, r4
     f04:	9801      	ldr	r0, [sp, #4]
     f06:	4b04      	ldr	r3, [pc, #16]	; (f18 <LIDAR_USART_send+0x28>)
     f08:	4798      	blx	r3
}
     f0a:	b003      	add	sp, #12
     f0c:	bd30      	pop	{r4, r5, pc}
     f0e:	bf00      	nop
     f10:	200046e8 	.word	0x200046e8
     f14:	000008b5 	.word	0x000008b5
     f18:	000006dd 	.word	0x000006dd

00000f1c <LIDAR_USART_read_byte>:
  * Reads received byte from LiDAR through USART
  * 
  * @return uint8_t : received byte
  */ 
uint8_t LIDAR_USART_read_byte(void)
{
     f1c:	b500      	push	{lr}
     f1e:	b083      	sub	sp, #12
	uint8_t buf;
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
     f20:	4669      	mov	r1, sp
     f22:	4807      	ldr	r0, [pc, #28]	; (f40 <LIDAR_USART_read_byte+0x24>)
     f24:	4b07      	ldr	r3, [pc, #28]	; (f44 <LIDAR_USART_read_byte+0x28>)
     f26:	4798      	blx	r3
	
	io_read(io, &buf, 1);
     f28:	2201      	movs	r2, #1
     f2a:	f10d 0107 	add.w	r1, sp, #7
     f2e:	9800      	ldr	r0, [sp, #0]
     f30:	4b05      	ldr	r3, [pc, #20]	; (f48 <LIDAR_USART_read_byte+0x2c>)
     f32:	4798      	blx	r3
	return buf;
}
     f34:	f89d 0007 	ldrb.w	r0, [sp, #7]
     f38:	b003      	add	sp, #12
     f3a:	f85d fb04 	ldr.w	pc, [sp], #4
     f3e:	bf00      	nop
     f40:	200046e8 	.word	0x200046e8
     f44:	000008b5 	.word	0x000008b5
     f48:	0000070d 	.word	0x0000070d

00000f4c <LIDAR_menu>:
/**
  * Menu for LiDAR command options in order to test and see printouts for each
  * of the requests and responses
  */ 
void LIDAR_menu(void)
{
     f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f50:	b087      	sub	sp, #28
	uint16_t user_selection = 0;
     f52:	2300      	movs	r3, #0
     f54:	f8ad 3016 	strh.w	r3, [sp, #22]
	while (1) {
		if (processing)
     f58:	4e8d      	ldr	r6, [pc, #564]	; (1190 <LIDAR_menu+0x244>)
  */ 
void LIDAR_process(void)
{
	unsigned data_idx;
	
	while (!usart_sync_is_rx_not_empty(&LIDAR_USART));
     f5a:	4d8e      	ldr	r5, [pc, #568]	; (1194 <LIDAR_menu+0x248>)
     f5c:	4c8e      	ldr	r4, [pc, #568]	; (1198 <LIDAR_menu+0x24c>)
     f5e:	e0e9      	b.n	1134 <LIDAR_menu+0x1e8>
     f60:	4628      	mov	r0, r5
     f62:	47a0      	blx	r4
     f64:	2800      	cmp	r0, #0
     f66:	d0fb      	beq.n	f60 <LIDAR_menu+0x14>
	
	/* Process response descriptor */
	switch (byte_count) {
     f68:	4b8c      	ldr	r3, [pc, #560]	; (119c <LIDAR_menu+0x250>)
     f6a:	681f      	ldr	r7, [r3, #0]
     f6c:	2f06      	cmp	r7, #6
     f6e:	d84d      	bhi.n	100c <LIDAR_menu+0xc0>
     f70:	e8df f007 	tbb	[pc, r7]
     f74:	1f160d04 	.word	0x1f160d04
     f78:	372b      	.short	0x372b
     f7a:	43          	.byte	0x43
     f7b:	00          	.byte	0x00
		case 0:
			resp_desc.start1 = LIDAR_USART_read_byte();
     f7c:	4b88      	ldr	r3, [pc, #544]	; (11a0 <LIDAR_menu+0x254>)
     f7e:	4798      	blx	r3
     f80:	4b88      	ldr	r3, [pc, #544]	; (11a4 <LIDAR_menu+0x258>)
     f82:	7018      	strb	r0, [r3, #0]
			byte_count++;
     f84:	4a85      	ldr	r2, [pc, #532]	; (119c <LIDAR_menu+0x250>)
     f86:	6813      	ldr	r3, [r2, #0]
     f88:	3301      	adds	r3, #1
     f8a:	6013      	str	r3, [r2, #0]
     f8c:	e0d2      	b.n	1134 <LIDAR_menu+0x1e8>
			return;
		
		case 1:
			resp_desc.start2 = LIDAR_USART_read_byte();
     f8e:	4b84      	ldr	r3, [pc, #528]	; (11a0 <LIDAR_menu+0x254>)
     f90:	4798      	blx	r3
     f92:	4b84      	ldr	r3, [pc, #528]	; (11a4 <LIDAR_menu+0x258>)
     f94:	7058      	strb	r0, [r3, #1]
			byte_count++;
     f96:	4a81      	ldr	r2, [pc, #516]	; (119c <LIDAR_menu+0x250>)
     f98:	6813      	ldr	r3, [r2, #0]
     f9a:	3301      	adds	r3, #1
     f9c:	6013      	str	r3, [r2, #0]
     f9e:	e0c9      	b.n	1134 <LIDAR_menu+0x1e8>
			return;
		
		case 2:
			resp_desc.response_info = LIDAR_USART_read_byte();
     fa0:	4b7f      	ldr	r3, [pc, #508]	; (11a0 <LIDAR_menu+0x254>)
     fa2:	4798      	blx	r3
     fa4:	4b7f      	ldr	r3, [pc, #508]	; (11a4 <LIDAR_menu+0x258>)
     fa6:	6058      	str	r0, [r3, #4]
			byte_count++;
     fa8:	4a7c      	ldr	r2, [pc, #496]	; (119c <LIDAR_menu+0x250>)
     faa:	6813      	ldr	r3, [r2, #0]
     fac:	3301      	adds	r3, #1
     fae:	6013      	str	r3, [r2, #0]
     fb0:	e0c0      	b.n	1134 <LIDAR_menu+0x1e8>
			return;
		
		case 3:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
     fb2:	4b7b      	ldr	r3, [pc, #492]	; (11a0 <LIDAR_menu+0x254>)
     fb4:	4798      	blx	r3
     fb6:	4a7b      	ldr	r2, [pc, #492]	; (11a4 <LIDAR_menu+0x258>)
     fb8:	6853      	ldr	r3, [r2, #4]
     fba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
     fbe:	6053      	str	r3, [r2, #4]
			byte_count++;
     fc0:	4a76      	ldr	r2, [pc, #472]	; (119c <LIDAR_menu+0x250>)
     fc2:	6813      	ldr	r3, [r2, #0]
     fc4:	3301      	adds	r3, #1
     fc6:	6013      	str	r3, [r2, #0]
     fc8:	e0b4      	b.n	1134 <LIDAR_menu+0x1e8>
			return;
		
		case 4:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
     fca:	4b75      	ldr	r3, [pc, #468]	; (11a0 <LIDAR_menu+0x254>)
     fcc:	4798      	blx	r3
     fce:	4a75      	ldr	r2, [pc, #468]	; (11a4 <LIDAR_menu+0x258>)
     fd0:	6853      	ldr	r3, [r2, #4]
     fd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     fd6:	6053      	str	r3, [r2, #4]
			byte_count++;
     fd8:	4a70      	ldr	r2, [pc, #448]	; (119c <LIDAR_menu+0x250>)
     fda:	6813      	ldr	r3, [r2, #0]
     fdc:	3301      	adds	r3, #1
     fde:	6013      	str	r3, [r2, #0]
     fe0:	e0a8      	b.n	1134 <LIDAR_menu+0x1e8>
			return;
		
		case 5:
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
     fe2:	4b6f      	ldr	r3, [pc, #444]	; (11a0 <LIDAR_menu+0x254>)
     fe4:	4798      	blx	r3
     fe6:	4a6f      	ldr	r2, [pc, #444]	; (11a4 <LIDAR_menu+0x258>)
     fe8:	6853      	ldr	r3, [r2, #4]
     fea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
     fee:	6053      	str	r3, [r2, #4]
			byte_count++;
     ff0:	4a6a      	ldr	r2, [pc, #424]	; (119c <LIDAR_menu+0x250>)
     ff2:	6813      	ldr	r3, [r2, #0]
     ff4:	3301      	adds	r3, #1
     ff6:	6013      	str	r3, [r2, #0]
     ff8:	e09c      	b.n	1134 <LIDAR_menu+0x1e8>
			return;
		
		case 6:
			resp_desc.data_type = LIDAR_USART_read_byte();
     ffa:	4b69      	ldr	r3, [pc, #420]	; (11a0 <LIDAR_menu+0x254>)
     ffc:	4798      	blx	r3
     ffe:	4b69      	ldr	r3, [pc, #420]	; (11a4 <LIDAR_menu+0x258>)
    1000:	7218      	strb	r0, [r3, #8]
			byte_count++;
    1002:	4a66      	ldr	r2, [pc, #408]	; (119c <LIDAR_menu+0x250>)
    1004:	6813      	ldr	r3, [r2, #0]
    1006:	3301      	adds	r3, #1
    1008:	6013      	str	r3, [r2, #0]
    100a:	e093      	b.n	1134 <LIDAR_menu+0x1e8>
			return;
		
        /* Process response data packets */
		default:
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    100c:	3f07      	subs	r7, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    100e:	4b64      	ldr	r3, [pc, #400]	; (11a0 <LIDAR_menu+0x254>)
    1010:	4798      	blx	r3
    1012:	4b65      	ldr	r3, [pc, #404]	; (11a8 <LIDAR_menu+0x25c>)
    1014:	55d8      	strb	r0, [r3, r7]
			if (lidar_request == LIDAR_REQ_EXPRESS_SCAN) {
    1016:	4b65      	ldr	r3, [pc, #404]	; (11ac <LIDAR_menu+0x260>)
    1018:	7819      	ldrb	r1, [r3, #0]
    101a:	2982      	cmp	r1, #130	; 0x82
    101c:	d016      	beq.n	104c <LIDAR_menu+0x100>
						byte_count--;
						return;
					}
				}
			}
			byte_count++;
    101e:	4b5f      	ldr	r3, [pc, #380]	; (119c <LIDAR_menu+0x250>)
    1020:	681a      	ldr	r2, [r3, #0]
    1022:	3201      	adds	r2, #1
    1024:	601a      	str	r2, [r3, #0]
	};
	
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    1026:	4b5f      	ldr	r3, [pc, #380]	; (11a4 <LIDAR_menu+0x258>)
    1028:	685b      	ldr	r3, [r3, #4]
    102a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    102e:	3307      	adds	r3, #7
    1030:	429a      	cmp	r2, r3
    1032:	d17f      	bne.n	1134 <LIDAR_menu+0x1e8>
		switch(lidar_request) {
    1034:	2950      	cmp	r1, #80	; 0x50
    1036:	d06e      	beq.n	1116 <LIDAR_menu+0x1ca>
    1038:	d94d      	bls.n	10d6 <LIDAR_menu+0x18a>
    103a:	2959      	cmp	r1, #89	; 0x59
    103c:	d072      	beq.n	1124 <LIDAR_menu+0x1d8>
    103e:	2982      	cmp	r1, #130	; 0x82
    1040:	d018      	beq.n	1074 <LIDAR_menu+0x128>
    1042:	2952      	cmp	r1, #82	; 0x52
    1044:	d176      	bne.n	1134 <LIDAR_menu+0x1e8>
			case LIDAR_REQ_GET_INFO:
				LIDAR_RES_get_info();
				break;

			case LIDAR_REQ_GET_HEALTH:
				LIDAR_RES_get_health();
    1046:	4b5a      	ldr	r3, [pc, #360]	; (11b0 <LIDAR_menu+0x264>)
    1048:	4798      	blx	r3
    104a:	e066      	b.n	111a <LIDAR_menu+0x1ce>
                if (data_idx == 0) { 
    104c:	b92f      	cbnz	r7, 105a <LIDAR_menu+0x10e>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    104e:	4b56      	ldr	r3, [pc, #344]	; (11a8 <LIDAR_menu+0x25c>)
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	091b      	lsrs	r3, r3, #4
    1054:	2b0a      	cmp	r3, #10
    1056:	d16d      	bne.n	1134 <LIDAR_menu+0x1e8>
    1058:	e001      	b.n	105e <LIDAR_menu+0x112>
				else if (data_idx == 1) {
    105a:	2f01      	cmp	r7, #1
    105c:	d031      	beq.n	10c2 <LIDAR_menu+0x176>
			byte_count++;
    105e:	4b4f      	ldr	r3, [pc, #316]	; (119c <LIDAR_menu+0x250>)
    1060:	681a      	ldr	r2, [r3, #0]
    1062:	3201      	adds	r2, #1
    1064:	601a      	str	r2, [r3, #0]
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    1066:	4b4f      	ldr	r3, [pc, #316]	; (11a4 <LIDAR_menu+0x258>)
    1068:	685b      	ldr	r3, [r3, #4]
    106a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    106e:	3307      	adds	r3, #7
    1070:	4293      	cmp	r3, r2
    1072:	d15f      	bne.n	1134 <LIDAR_menu+0x1e8>
				LIDAR_RES_express_scan();
    1074:	4b4f      	ldr	r3, [pc, #316]	; (11b4 <LIDAR_menu+0x268>)
    1076:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    1078:	4b4f      	ldr	r3, [pc, #316]	; (11b8 <LIDAR_menu+0x26c>)
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1080:	d358      	bcc.n	1134 <LIDAR_menu+0x1e8>
					LIDAR_PWM_stop();
    1082:	4b4e      	ldr	r3, [pc, #312]	; (11bc <LIDAR_menu+0x270>)
    1084:	4798      	blx	r3
					LIDAR_REQ_stop();
    1086:	4b4e      	ldr	r3, [pc, #312]	; (11c0 <LIDAR_menu+0x274>)
    1088:	4798      	blx	r3
    108a:	4f4e      	ldr	r7, [pc, #312]	; (11c4 <LIDAR_menu+0x278>)
    108c:	f507 5b20 	add.w	fp, r7, #10240	; 0x2800
  *	Prints cabin data
  */ 	
void LIDAR_print_cabins(void) 
{
	int i;
	for (i=0; i<MAX_SCANS; i++) {
    1090:	f04f 0800 	mov.w	r8, #0
		printf("{\"C[%04u]\":{\"S\":%u,\"SA\":%u,\"A1\":%u,\"A2\":%u,\"D1\":%u,\"D2\":%u}}\r\n",
    1094:	f8df a170 	ldr.w	sl, [pc, #368]	; 1208 <LIDAR_menu+0x2bc>
    1098:	f8df 914c 	ldr.w	r9, [pc, #332]	; 11e8 <LIDAR_menu+0x29c>
    109c:	893b      	ldrh	r3, [r7, #8]
    109e:	783a      	ldrb	r2, [r7, #0]
    10a0:	88f9      	ldrh	r1, [r7, #6]
    10a2:	9103      	str	r1, [sp, #12]
    10a4:	88b9      	ldrh	r1, [r7, #4]
    10a6:	9102      	str	r1, [sp, #8]
    10a8:	78b9      	ldrb	r1, [r7, #2]
    10aa:	9101      	str	r1, [sp, #4]
    10ac:	7879      	ldrb	r1, [r7, #1]
    10ae:	9100      	str	r1, [sp, #0]
    10b0:	4641      	mov	r1, r8
    10b2:	4650      	mov	r0, sl
    10b4:	47c8      	blx	r9
	for (i=0; i<MAX_SCANS; i++) {
    10b6:	f108 0801 	add.w	r8, r8, #1
    10ba:	370a      	adds	r7, #10
    10bc:	455f      	cmp	r7, fp
    10be:	d1ed      	bne.n	109c <LIDAR_menu+0x150>
    10c0:	e02b      	b.n	111a <LIDAR_menu+0x1ce>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    10c2:	4b39      	ldr	r3, [pc, #228]	; (11a8 <LIDAR_menu+0x25c>)
    10c4:	785b      	ldrb	r3, [r3, #1]
    10c6:	091b      	lsrs	r3, r3, #4
    10c8:	2b05      	cmp	r3, #5
    10ca:	d0c8      	beq.n	105e <LIDAR_menu+0x112>
						byte_count--;
    10cc:	4a33      	ldr	r2, [pc, #204]	; (119c <LIDAR_menu+0x250>)
    10ce:	6813      	ldr	r3, [r2, #0]
    10d0:	3b01      	subs	r3, #1
    10d2:	6013      	str	r3, [r2, #0]
    10d4:	e02e      	b.n	1134 <LIDAR_menu+0x1e8>
		switch(lidar_request) {
    10d6:	3920      	subs	r1, #32
    10d8:	2901      	cmp	r1, #1
    10da:	d82b      	bhi.n	1134 <LIDAR_menu+0x1e8>
				LIDAR_RES_scan();
    10dc:	4b3a      	ldr	r3, [pc, #232]	; (11c8 <LIDAR_menu+0x27c>)
    10de:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    10e0:	4b35      	ldr	r3, [pc, #212]	; (11b8 <LIDAR_menu+0x26c>)
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    10e8:	d324      	bcc.n	1134 <LIDAR_menu+0x1e8>
    10ea:	4f38      	ldr	r7, [pc, #224]	; (11cc <LIDAR_menu+0x280>)
    10ec:	f507 5bc0 	add.w	fp, r7, #6144	; 0x1800
    10f0:	f04f 0800 	mov.w	r8, #0
		printf("{\"S[%04u]\":{\"Q\":%u,\"A\":%u,\"D\"%u}}\r\n",
    10f4:	f8df a114 	ldr.w	sl, [pc, #276]	; 120c <LIDAR_menu+0x2c0>
    10f8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 11e8 <LIDAR_menu+0x29c>
    10fc:	887b      	ldrh	r3, [r7, #2]
    10fe:	783a      	ldrb	r2, [r7, #0]
    1100:	88b9      	ldrh	r1, [r7, #4]
    1102:	9100      	str	r1, [sp, #0]
    1104:	4641      	mov	r1, r8
    1106:	4650      	mov	r0, sl
    1108:	47c8      	blx	r9
	for (i=0; i<MAX_SCANS; i++) {
    110a:	f108 0801 	add.w	r8, r8, #1
    110e:	3706      	adds	r7, #6
    1110:	455f      	cmp	r7, fp
    1112:	d1f3      	bne.n	10fc <LIDAR_menu+0x1b0>
    1114:	e001      	b.n	111a <LIDAR_menu+0x1ce>
				LIDAR_RES_get_info();
    1116:	4b2e      	ldr	r3, [pc, #184]	; (11d0 <LIDAR_menu+0x284>)
    1118:	4798      	blx	r3
		byte_count = 0;
    111a:	2300      	movs	r3, #0
    111c:	4a1f      	ldr	r2, [pc, #124]	; (119c <LIDAR_menu+0x250>)
    111e:	6013      	str	r3, [r2, #0]
		processing = 0;
    1120:	7033      	strb	r3, [r6, #0]
    1122:	e007      	b.n	1134 <LIDAR_menu+0x1e8>
				LIDAR_RES_get_samplerate();
    1124:	4b2b      	ldr	r3, [pc, #172]	; (11d4 <LIDAR_menu+0x288>)
    1126:	4798      	blx	r3
    1128:	e7f7      	b.n	111a <LIDAR_menu+0x1ce>
				fflush(stdin);
    112a:	4b2b      	ldr	r3, [pc, #172]	; (11d8 <LIDAR_menu+0x28c>)
    112c:	681b      	ldr	r3, [r3, #0]
    112e:	6858      	ldr	r0, [r3, #4]
    1130:	4b2a      	ldr	r3, [pc, #168]	; (11dc <LIDAR_menu+0x290>)
    1132:	4798      	blx	r3
		if (processing)
    1134:	7833      	ldrb	r3, [r6, #0]
    1136:	2b00      	cmp	r3, #0
    1138:	f47f af12 	bne.w	f60 <LIDAR_menu+0x14>
			printf("%s", lidar_menu_txt);
    113c:	4928      	ldr	r1, [pc, #160]	; (11e0 <LIDAR_menu+0x294>)
    113e:	4829      	ldr	r0, [pc, #164]	; (11e4 <LIDAR_menu+0x298>)
    1140:	4b29      	ldr	r3, [pc, #164]	; (11e8 <LIDAR_menu+0x29c>)
    1142:	4798      	blx	r3
			if (scanf("%hx", &user_selection) == 0) {
    1144:	f10d 0116 	add.w	r1, sp, #22
    1148:	4828      	ldr	r0, [pc, #160]	; (11ec <LIDAR_menu+0x2a0>)
    114a:	4b29      	ldr	r3, [pc, #164]	; (11f0 <LIDAR_menu+0x2a4>)
    114c:	4798      	blx	r3
    114e:	2800      	cmp	r0, #0
    1150:	d0eb      	beq.n	112a <LIDAR_menu+0x1de>
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1152:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    1156:	4827      	ldr	r0, [pc, #156]	; (11f4 <LIDAR_menu+0x2a8>)
    1158:	4b23      	ldr	r3, [pc, #140]	; (11e8 <LIDAR_menu+0x29c>)
    115a:	4798      	blx	r3
			switch (user_selection) {
    115c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    1160:	3b01      	subs	r3, #1
    1162:	2b0a      	cmp	r3, #10
    1164:	f200 8096 	bhi.w	1294 <LIDAR_menu+0x348>
    1168:	e8df f003 	tbb	[pc, r3]
    116c:	58520c06 	.word	0x58520c06
    1170:	746c645e 	.word	0x746c645e
    1174:	847c      	.short	0x847c
    1176:	8c          	.byte	0x8c
    1177:	00          	.byte	0x00
					printf("\r\nReturning to main menu\r\n");
    1178:	481f      	ldr	r0, [pc, #124]	; (11f8 <LIDAR_menu+0x2ac>)
    117a:	4b20      	ldr	r3, [pc, #128]	; (11fc <LIDAR_menu+0x2b0>)
    117c:	4798      	blx	r3
}
    117e:	b007      	add	sp, #28
    1180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					printf("\r\nStarting LiDAR motor\r\n");
    1184:	481e      	ldr	r0, [pc, #120]	; (1200 <LIDAR_menu+0x2b4>)
    1186:	4b1d      	ldr	r3, [pc, #116]	; (11fc <LIDAR_menu+0x2b0>)
    1188:	4798      	blx	r3
					LIDAR_PWM_start();
    118a:	4b1e      	ldr	r3, [pc, #120]	; (1204 <LIDAR_menu+0x2b8>)
    118c:	4798      	blx	r3
					break;
    118e:	e7d1      	b.n	1134 <LIDAR_menu+0x1e8>
    1190:	200004e4 	.word	0x200004e4
    1194:	200046e8 	.word	0x200046e8
    1198:	000008dd 	.word	0x000008dd
    119c:	200004e8 	.word	0x200004e8
    11a0:	00000f1d 	.word	0x00000f1d
    11a4:	200044f8 	.word	0x200044f8
    11a8:	20000464 	.word	0x20000464
    11ac:	200004ec 	.word	0x200004ec
    11b0:	00001899 	.word	0x00001899
    11b4:	00001711 	.word	0x00001711
    11b8:	200004f4 	.word	0x200004f4
    11bc:	00000df9 	.word	0x00000df9
    11c0:	00001305 	.word	0x00001305
    11c4:	20001cf8 	.word	0x20001cf8
    11c8:	0000166d 	.word	0x0000166d
    11cc:	200004f8 	.word	0x200004f8
    11d0:	00001809 	.word	0x00001809
    11d4:	000018f9 	.word	0x000018f9
    11d8:	2000026c 	.word	0x2000026c
    11dc:	000029f1 	.word	0x000029f1
    11e0:	20000000 	.word	0x20000000
    11e4:	00004ac0 	.word	0x00004ac0
    11e8:	00002d91 	.word	0x00002d91
    11ec:	00004ac4 	.word	0x00004ac4
    11f0:	00002ea9 	.word	0x00002ea9
    11f4:	00004ac8 	.word	0x00004ac8
    11f8:	00004ae4 	.word	0x00004ae4
    11fc:	00002e79 	.word	0x00002e79
    1200:	00004b00 	.word	0x00004b00
    1204:	00000d8d 	.word	0x00000d8d
    1208:	00004a80 	.word	0x00004a80
    120c:	00004a5c 	.word	0x00004a5c
					printf("\r\nStopping LiDAR motor\r\n");
    1210:	4822      	ldr	r0, [pc, #136]	; (129c <LIDAR_menu+0x350>)
    1212:	4b23      	ldr	r3, [pc, #140]	; (12a0 <LIDAR_menu+0x354>)
    1214:	4798      	blx	r3
					LIDAR_PWM_stop();
    1216:	4b23      	ldr	r3, [pc, #140]	; (12a4 <LIDAR_menu+0x358>)
    1218:	4798      	blx	r3
					break;
    121a:	e78b      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRequesting LiDAR stop\r\n");
    121c:	4822      	ldr	r0, [pc, #136]	; (12a8 <LIDAR_menu+0x35c>)
    121e:	4b20      	ldr	r3, [pc, #128]	; (12a0 <LIDAR_menu+0x354>)
    1220:	4798      	blx	r3
					LIDAR_REQ_stop();
    1222:	4b22      	ldr	r3, [pc, #136]	; (12ac <LIDAR_menu+0x360>)
    1224:	4798      	blx	r3
					break;
    1226:	e785      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRequesting LiDAR reset\r\n");
    1228:	4821      	ldr	r0, [pc, #132]	; (12b0 <LIDAR_menu+0x364>)
    122a:	4b1d      	ldr	r3, [pc, #116]	; (12a0 <LIDAR_menu+0x354>)
    122c:	4798      	blx	r3
					LIDAR_REQ_reset();
    122e:	4b21      	ldr	r3, [pc, #132]	; (12b4 <LIDAR_menu+0x368>)
    1230:	4798      	blx	r3
					break;
    1232:	e77f      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRequesting LiDAR start scan\r\n");
    1234:	4820      	ldr	r0, [pc, #128]	; (12b8 <LIDAR_menu+0x36c>)
    1236:	4b1a      	ldr	r3, [pc, #104]	; (12a0 <LIDAR_menu+0x354>)
    1238:	4798      	blx	r3
					LIDAR_REQ_scan();
    123a:	4b20      	ldr	r3, [pc, #128]	; (12bc <LIDAR_menu+0x370>)
    123c:	4798      	blx	r3
					processing = 1;
    123e:	2301      	movs	r3, #1
    1240:	7033      	strb	r3, [r6, #0]
					break;
    1242:	e777      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRequesting LiDAR start express scan\r\n");
    1244:	481e      	ldr	r0, [pc, #120]	; (12c0 <LIDAR_menu+0x374>)
    1246:	4b16      	ldr	r3, [pc, #88]	; (12a0 <LIDAR_menu+0x354>)
    1248:	4798      	blx	r3
					LIDAR_REQ_express_scan();
    124a:	4b1e      	ldr	r3, [pc, #120]	; (12c4 <LIDAR_menu+0x378>)
    124c:	4798      	blx	r3
					processing = 1;
    124e:	2301      	movs	r3, #1
    1250:	7033      	strb	r3, [r6, #0]
					break;
    1252:	e76f      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRequesting LiDAR start force scan\r\n");
    1254:	481c      	ldr	r0, [pc, #112]	; (12c8 <LIDAR_menu+0x37c>)
    1256:	4b12      	ldr	r3, [pc, #72]	; (12a0 <LIDAR_menu+0x354>)
    1258:	4798      	blx	r3
					LIDAR_REQ_force_scan();
    125a:	4b1c      	ldr	r3, [pc, #112]	; (12cc <LIDAR_menu+0x380>)
    125c:	4798      	blx	r3
					processing = 1;
    125e:	2301      	movs	r3, #1
    1260:	7033      	strb	r3, [r6, #0]
					break;
    1262:	e767      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRetrieving LiDAR info\r\n");
    1264:	481a      	ldr	r0, [pc, #104]	; (12d0 <LIDAR_menu+0x384>)
    1266:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <LIDAR_menu+0x354>)
    1268:	4798      	blx	r3
					LIDAR_REQ_get_info();
    126a:	4b1a      	ldr	r3, [pc, #104]	; (12d4 <LIDAR_menu+0x388>)
    126c:	4798      	blx	r3
					processing = 1;
    126e:	2301      	movs	r3, #1
    1270:	7033      	strb	r3, [r6, #0]
					break;
    1272:	e75f      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRetrieving LiDAR health\r\n");
    1274:	4818      	ldr	r0, [pc, #96]	; (12d8 <LIDAR_menu+0x38c>)
    1276:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <LIDAR_menu+0x354>)
    1278:	4798      	blx	r3
					LIDAR_REQ_get_health();
    127a:	4b18      	ldr	r3, [pc, #96]	; (12dc <LIDAR_menu+0x390>)
    127c:	4798      	blx	r3
					processing = 1;
    127e:	2301      	movs	r3, #1
    1280:	7033      	strb	r3, [r6, #0]
					break;
    1282:	e757      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nRetrieving LiDAR samplerates\r\n");
    1284:	4816      	ldr	r0, [pc, #88]	; (12e0 <LIDAR_menu+0x394>)
    1286:	4b06      	ldr	r3, [pc, #24]	; (12a0 <LIDAR_menu+0x354>)
    1288:	4798      	blx	r3
					LIDAR_REQ_get_samplerate();
    128a:	4b16      	ldr	r3, [pc, #88]	; (12e4 <LIDAR_menu+0x398>)
    128c:	4798      	blx	r3
					processing = 1;
    128e:	2301      	movs	r3, #1
    1290:	7033      	strb	r3, [r6, #0]
					break;
    1292:	e74f      	b.n	1134 <LIDAR_menu+0x1e8>
					printf("\r\nInvalid option\r\n");
    1294:	4814      	ldr	r0, [pc, #80]	; (12e8 <LIDAR_menu+0x39c>)
    1296:	4b02      	ldr	r3, [pc, #8]	; (12a0 <LIDAR_menu+0x354>)
    1298:	4798      	blx	r3
					break;
    129a:	e74b      	b.n	1134 <LIDAR_menu+0x1e8>
    129c:	00004b18 	.word	0x00004b18
    12a0:	00002e79 	.word	0x00002e79
    12a4:	00000df9 	.word	0x00000df9
    12a8:	00004b30 	.word	0x00004b30
    12ac:	00001305 	.word	0x00001305
    12b0:	00004b4c 	.word	0x00004b4c
    12b4:	0000136d 	.word	0x0000136d
    12b8:	00004b68 	.word	0x00004b68
    12bc:	000013d5 	.word	0x000013d5
    12c0:	00004b88 	.word	0x00004b88
    12c4:	00001435 	.word	0x00001435
    12c8:	00004bb0 	.word	0x00004bb0
    12cc:	000014dd 	.word	0x000014dd
    12d0:	00004bd8 	.word	0x00004bd8
    12d4:	0000153d 	.word	0x0000153d
    12d8:	00004bf4 	.word	0x00004bf4
    12dc:	00001595 	.word	0x00001595
    12e0:	00004c10 	.word	0x00004c10
    12e4:	000015ed 	.word	0x000015ed
    12e8:	00004c30 	.word	0x00004c30

000012ec <LIDAR_reset_print_buffer>:

/** 
  * Resets local print buffer.
  */
void LIDAR_reset_print_buffer(void)
{
    12ec:	4a04      	ldr	r2, [pc, #16]	; (1300 <LIDAR_reset_print_buffer+0x14>)
    12ee:	1e53      	subs	r3, r2, #1
    12f0:	32ff      	adds	r2, #255	; 0xff
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
    12f2:	2100      	movs	r1, #0
    12f4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
    12f8:	4293      	cmp	r3, r2
    12fa:	d1fb      	bne.n	12f4 <LIDAR_reset_print_buffer+0x8>
}
    12fc:	4770      	bx	lr
    12fe:	bf00      	nop
    1300:	20004504 	.word	0x20004504

00001304 <LIDAR_REQ_stop>:
{
    1304:	b530      	push	{r4, r5, lr}
    1306:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_STOP;
    1308:	2525      	movs	r5, #37	; 0x25
    130a:	4b0e      	ldr	r3, [pc, #56]	; (1344 <LIDAR_REQ_stop+0x40>)
    130c:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    130e:	2200      	movs	r2, #0
    1310:	4b0d      	ldr	r3, [pc, #52]	; (1348 <LIDAR_REQ_stop+0x44>)
    1312:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    1314:	4b0d      	ldr	r3, [pc, #52]	; (134c <LIDAR_REQ_stop+0x48>)
    1316:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1318:	4c0d      	ldr	r4, [pc, #52]	; (1350 <LIDAR_REQ_stop+0x4c>)
    131a:	9500      	str	r5, [sp, #0]
    131c:	23a5      	movs	r3, #165	; 0xa5
    131e:	4a0d      	ldr	r2, [pc, #52]	; (1354 <LIDAR_REQ_stop+0x50>)
    1320:	f44f 7180 	mov.w	r1, #256	; 0x100
    1324:	4620      	mov	r0, r4
    1326:	4d0c      	ldr	r5, [pc, #48]	; (1358 <LIDAR_REQ_stop+0x54>)
    1328:	47a8      	blx	r5
    132a:	b281      	uxth	r1, r0
    132c:	4b0b      	ldr	r3, [pc, #44]	; (135c <LIDAR_REQ_stop+0x58>)
    132e:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1330:	4620      	mov	r0, r4
    1332:	4b0b      	ldr	r3, [pc, #44]	; (1360 <LIDAR_REQ_stop+0x5c>)
    1334:	4798      	blx	r3
	delay_ms(1);
    1336:	2001      	movs	r0, #1
    1338:	4b0a      	ldr	r3, [pc, #40]	; (1364 <LIDAR_REQ_stop+0x60>)
    133a:	4798      	blx	r3
	LIDAR_RES_stop();
    133c:	4b0a      	ldr	r3, [pc, #40]	; (1368 <LIDAR_REQ_stop+0x64>)
    133e:	4798      	blx	r3
}
    1340:	b003      	add	sp, #12
    1342:	bd30      	pop	{r4, r5, pc}
    1344:	200004ec 	.word	0x200004ec
    1348:	200004e8 	.word	0x200004e8
    134c:	000012ed 	.word	0x000012ed
    1350:	20004504 	.word	0x20004504
    1354:	00004c44 	.word	0x00004c44
    1358:	00003045 	.word	0x00003045
    135c:	200004e6 	.word	0x200004e6
    1360:	00000ef1 	.word	0x00000ef1
    1364:	000006bd 	.word	0x000006bd
    1368:	00001645 	.word	0x00001645

0000136c <LIDAR_REQ_reset>:
{
    136c:	b530      	push	{r4, r5, lr}
    136e:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_RESET;
    1370:	2540      	movs	r5, #64	; 0x40
    1372:	4b0e      	ldr	r3, [pc, #56]	; (13ac <LIDAR_REQ_reset+0x40>)
    1374:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    1376:	2200      	movs	r2, #0
    1378:	4b0d      	ldr	r3, [pc, #52]	; (13b0 <LIDAR_REQ_reset+0x44>)
    137a:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    137c:	4b0d      	ldr	r3, [pc, #52]	; (13b4 <LIDAR_REQ_reset+0x48>)
    137e:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1380:	4c0d      	ldr	r4, [pc, #52]	; (13b8 <LIDAR_REQ_reset+0x4c>)
    1382:	9500      	str	r5, [sp, #0]
    1384:	23a5      	movs	r3, #165	; 0xa5
    1386:	4a0d      	ldr	r2, [pc, #52]	; (13bc <LIDAR_REQ_reset+0x50>)
    1388:	f44f 7180 	mov.w	r1, #256	; 0x100
    138c:	4620      	mov	r0, r4
    138e:	4d0c      	ldr	r5, [pc, #48]	; (13c0 <LIDAR_REQ_reset+0x54>)
    1390:	47a8      	blx	r5
    1392:	b281      	uxth	r1, r0
    1394:	4b0b      	ldr	r3, [pc, #44]	; (13c4 <LIDAR_REQ_reset+0x58>)
    1396:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1398:	4620      	mov	r0, r4
    139a:	4b0b      	ldr	r3, [pc, #44]	; (13c8 <LIDAR_REQ_reset+0x5c>)
    139c:	4798      	blx	r3
    delay_ms(2);
    139e:	2002      	movs	r0, #2
    13a0:	4b0a      	ldr	r3, [pc, #40]	; (13cc <LIDAR_REQ_reset+0x60>)
    13a2:	4798      	blx	r3
	LIDAR_RES_reset();
    13a4:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <LIDAR_REQ_reset+0x64>)
    13a6:	4798      	blx	r3
}
    13a8:	b003      	add	sp, #12
    13aa:	bd30      	pop	{r4, r5, pc}
    13ac:	200004ec 	.word	0x200004ec
    13b0:	200004e8 	.word	0x200004e8
    13b4:	000012ed 	.word	0x000012ed
    13b8:	20004504 	.word	0x20004504
    13bc:	00004c44 	.word	0x00004c44
    13c0:	00003045 	.word	0x00003045
    13c4:	200004e6 	.word	0x200004e6
    13c8:	00000ef1 	.word	0x00000ef1
    13cc:	000006bd 	.word	0x000006bd
    13d0:	00001659 	.word	0x00001659

000013d4 <LIDAR_REQ_scan>:
{
    13d4:	b530      	push	{r4, r5, lr}
    13d6:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_SCAN;
    13d8:	2520      	movs	r5, #32
    13da:	4b0d      	ldr	r3, [pc, #52]	; (1410 <LIDAR_REQ_scan+0x3c>)
    13dc:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    13de:	2300      	movs	r3, #0
    13e0:	4a0c      	ldr	r2, [pc, #48]	; (1414 <LIDAR_REQ_scan+0x40>)
    13e2:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    13e4:	4a0c      	ldr	r2, [pc, #48]	; (1418 <LIDAR_REQ_scan+0x44>)
    13e6:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    13e8:	4b0c      	ldr	r3, [pc, #48]	; (141c <LIDAR_REQ_scan+0x48>)
    13ea:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    13ec:	4c0c      	ldr	r4, [pc, #48]	; (1420 <LIDAR_REQ_scan+0x4c>)
    13ee:	9500      	str	r5, [sp, #0]
    13f0:	23a5      	movs	r3, #165	; 0xa5
    13f2:	4a0c      	ldr	r2, [pc, #48]	; (1424 <LIDAR_REQ_scan+0x50>)
    13f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    13f8:	4620      	mov	r0, r4
    13fa:	4d0b      	ldr	r5, [pc, #44]	; (1428 <LIDAR_REQ_scan+0x54>)
    13fc:	47a8      	blx	r5
    13fe:	b281      	uxth	r1, r0
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <LIDAR_REQ_scan+0x58>)
    1402:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1404:	4620      	mov	r0, r4
    1406:	4b0a      	ldr	r3, [pc, #40]	; (1430 <LIDAR_REQ_scan+0x5c>)
    1408:	4798      	blx	r3
}
    140a:	b003      	add	sp, #12
    140c:	bd30      	pop	{r4, r5, pc}
    140e:	bf00      	nop
    1410:	200004ec 	.word	0x200004ec
    1414:	200004e8 	.word	0x200004e8
    1418:	200004f4 	.word	0x200004f4
    141c:	000012ed 	.word	0x000012ed
    1420:	20004504 	.word	0x20004504
    1424:	00004c44 	.word	0x00004c44
    1428:	00003045 	.word	0x00003045
    142c:	200004e6 	.word	0x200004e6
    1430:	00000ef1 	.word	0x00000ef1

00001434 <LIDAR_REQ_express_scan>:
{	
    1434:	b530      	push	{r4, r5, lr}
    1436:	b085      	sub	sp, #20
	char working_mode = 0;
    1438:	2300      	movs	r3, #0
    143a:	f88d 300f 	strb.w	r3, [sp, #15]
	char reserved_fields = 0;
    143e:	f88d 300e 	strb.w	r3, [sp, #14]
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_REQ_EXPRESS_SCAN ^ payload_size;
    1442:	2222      	movs	r2, #34	; 0x22
    1444:	f88d 200d 	strb.w	r2, [sp, #13]
	lidar_request = LIDAR_REQ_EXPRESS_SCAN;
    1448:	2582      	movs	r5, #130	; 0x82
    144a:	4a1a      	ldr	r2, [pc, #104]	; (14b4 <LIDAR_REQ_express_scan+0x80>)
    144c:	7015      	strb	r5, [r2, #0]
	invalid_exp_scans = 0;
    144e:	4a1a      	ldr	r2, [pc, #104]	; (14b8 <LIDAR_REQ_express_scan+0x84>)
    1450:	6013      	str	r3, [r2, #0]
    scan_count = 0;
    1452:	4a1a      	ldr	r2, [pc, #104]	; (14bc <LIDAR_REQ_express_scan+0x88>)
    1454:	6013      	str	r3, [r2, #0]
	byte_count = 0;
    1456:	4a1a      	ldr	r2, [pc, #104]	; (14c0 <LIDAR_REQ_express_scan+0x8c>)
    1458:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    145a:	4b1a      	ldr	r3, [pc, #104]	; (14c4 <LIDAR_REQ_express_scan+0x90>)
    145c:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    145e:	4c1a      	ldr	r4, [pc, #104]	; (14c8 <LIDAR_REQ_express_scan+0x94>)
    1460:	2305      	movs	r3, #5
    1462:	9301      	str	r3, [sp, #4]
    1464:	9500      	str	r5, [sp, #0]
    1466:	23a5      	movs	r3, #165	; 0xa5
    1468:	4a18      	ldr	r2, [pc, #96]	; (14cc <LIDAR_REQ_express_scan+0x98>)
    146a:	f44f 7180 	mov.w	r1, #256	; 0x100
    146e:	4620      	mov	r0, r4
    1470:	4d17      	ldr	r5, [pc, #92]	; (14d0 <LIDAR_REQ_express_scan+0x9c>)
    1472:	47a8      	blx	r5
    1474:	b281      	uxth	r1, r0
    1476:	4b17      	ldr	r3, [pc, #92]	; (14d4 <LIDAR_REQ_express_scan+0xa0>)
    1478:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    147a:	4620      	mov	r0, r4
    147c:	4c16      	ldr	r4, [pc, #88]	; (14d8 <LIDAR_REQ_express_scan+0xa4>)
    147e:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&working_mode, 1);
    1480:	2101      	movs	r1, #1
    1482:	f10d 000f 	add.w	r0, sp, #15
    1486:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    1488:	2101      	movs	r1, #1
    148a:	f10d 000e 	add.w	r0, sp, #14
    148e:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    1490:	2101      	movs	r1, #1
    1492:	f10d 000e 	add.w	r0, sp, #14
    1496:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    1498:	2101      	movs	r1, #1
    149a:	f10d 000e 	add.w	r0, sp, #14
    149e:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14a0:	2101      	movs	r1, #1
    14a2:	f10d 000e 	add.w	r0, sp, #14
    14a6:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    14a8:	2101      	movs	r1, #1
    14aa:	f10d 000d 	add.w	r0, sp, #13
    14ae:	47a0      	blx	r4
}
    14b0:	b005      	add	sp, #20
    14b2:	bd30      	pop	{r4, r5, pc}
    14b4:	200004ec 	.word	0x200004ec
    14b8:	200004f0 	.word	0x200004f0
    14bc:	200004f4 	.word	0x200004f4
    14c0:	200004e8 	.word	0x200004e8
    14c4:	000012ed 	.word	0x000012ed
    14c8:	20004504 	.word	0x20004504
    14cc:	00004c4c 	.word	0x00004c4c
    14d0:	00003045 	.word	0x00003045
    14d4:	200004e6 	.word	0x200004e6
    14d8:	00000ef1 	.word	0x00000ef1

000014dc <LIDAR_REQ_force_scan>:
{
    14dc:	b530      	push	{r4, r5, lr}
    14de:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_FORCE_SCAN;
    14e0:	2521      	movs	r5, #33	; 0x21
    14e2:	4b0d      	ldr	r3, [pc, #52]	; (1518 <LIDAR_REQ_force_scan+0x3c>)
    14e4:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    14e6:	2300      	movs	r3, #0
    14e8:	4a0c      	ldr	r2, [pc, #48]	; (151c <LIDAR_REQ_force_scan+0x40>)
    14ea:	6013      	str	r3, [r2, #0]
	scan_count = 0;
    14ec:	4a0c      	ldr	r2, [pc, #48]	; (1520 <LIDAR_REQ_force_scan+0x44>)
    14ee:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    14f0:	4b0c      	ldr	r3, [pc, #48]	; (1524 <LIDAR_REQ_force_scan+0x48>)
    14f2:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    14f4:	4c0c      	ldr	r4, [pc, #48]	; (1528 <LIDAR_REQ_force_scan+0x4c>)
    14f6:	9500      	str	r5, [sp, #0]
    14f8:	23a5      	movs	r3, #165	; 0xa5
    14fa:	4a0c      	ldr	r2, [pc, #48]	; (152c <LIDAR_REQ_force_scan+0x50>)
    14fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    1500:	4620      	mov	r0, r4
    1502:	4d0b      	ldr	r5, [pc, #44]	; (1530 <LIDAR_REQ_force_scan+0x54>)
    1504:	47a8      	blx	r5
    1506:	b281      	uxth	r1, r0
    1508:	4b0a      	ldr	r3, [pc, #40]	; (1534 <LIDAR_REQ_force_scan+0x58>)
    150a:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    150c:	4620      	mov	r0, r4
    150e:	4b0a      	ldr	r3, [pc, #40]	; (1538 <LIDAR_REQ_force_scan+0x5c>)
    1510:	4798      	blx	r3
}
    1512:	b003      	add	sp, #12
    1514:	bd30      	pop	{r4, r5, pc}
    1516:	bf00      	nop
    1518:	200004ec 	.word	0x200004ec
    151c:	200004e8 	.word	0x200004e8
    1520:	200004f4 	.word	0x200004f4
    1524:	000012ed 	.word	0x000012ed
    1528:	20004504 	.word	0x20004504
    152c:	00004c44 	.word	0x00004c44
    1530:	00003045 	.word	0x00003045
    1534:	200004e6 	.word	0x200004e6
    1538:	00000ef1 	.word	0x00000ef1

0000153c <LIDAR_REQ_get_info>:
{
    153c:	b530      	push	{r4, r5, lr}
    153e:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_INFO;
    1540:	2550      	movs	r5, #80	; 0x50
    1542:	4b0c      	ldr	r3, [pc, #48]	; (1574 <LIDAR_REQ_get_info+0x38>)
    1544:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    1546:	2200      	movs	r2, #0
    1548:	4b0b      	ldr	r3, [pc, #44]	; (1578 <LIDAR_REQ_get_info+0x3c>)
    154a:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    154c:	4b0b      	ldr	r3, [pc, #44]	; (157c <LIDAR_REQ_get_info+0x40>)
    154e:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1550:	4c0b      	ldr	r4, [pc, #44]	; (1580 <LIDAR_REQ_get_info+0x44>)
    1552:	9500      	str	r5, [sp, #0]
    1554:	23a5      	movs	r3, #165	; 0xa5
    1556:	4a0b      	ldr	r2, [pc, #44]	; (1584 <LIDAR_REQ_get_info+0x48>)
    1558:	f44f 7180 	mov.w	r1, #256	; 0x100
    155c:	4620      	mov	r0, r4
    155e:	4d0a      	ldr	r5, [pc, #40]	; (1588 <LIDAR_REQ_get_info+0x4c>)
    1560:	47a8      	blx	r5
    1562:	b281      	uxth	r1, r0
    1564:	4b09      	ldr	r3, [pc, #36]	; (158c <LIDAR_REQ_get_info+0x50>)
    1566:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1568:	4620      	mov	r0, r4
    156a:	4b09      	ldr	r3, [pc, #36]	; (1590 <LIDAR_REQ_get_info+0x54>)
    156c:	4798      	blx	r3
}
    156e:	b003      	add	sp, #12
    1570:	bd30      	pop	{r4, r5, pc}
    1572:	bf00      	nop
    1574:	200004ec 	.word	0x200004ec
    1578:	200004e8 	.word	0x200004e8
    157c:	000012ed 	.word	0x000012ed
    1580:	20004504 	.word	0x20004504
    1584:	00004c44 	.word	0x00004c44
    1588:	00003045 	.word	0x00003045
    158c:	200004e6 	.word	0x200004e6
    1590:	00000ef1 	.word	0x00000ef1

00001594 <LIDAR_REQ_get_health>:
{
    1594:	b530      	push	{r4, r5, lr}
    1596:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_HEALTH;
    1598:	2552      	movs	r5, #82	; 0x52
    159a:	4b0c      	ldr	r3, [pc, #48]	; (15cc <LIDAR_REQ_get_health+0x38>)
    159c:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    159e:	2200      	movs	r2, #0
    15a0:	4b0b      	ldr	r3, [pc, #44]	; (15d0 <LIDAR_REQ_get_health+0x3c>)
    15a2:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    15a4:	4b0b      	ldr	r3, [pc, #44]	; (15d4 <LIDAR_REQ_get_health+0x40>)
    15a6:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    15a8:	4c0b      	ldr	r4, [pc, #44]	; (15d8 <LIDAR_REQ_get_health+0x44>)
    15aa:	9500      	str	r5, [sp, #0]
    15ac:	23a5      	movs	r3, #165	; 0xa5
    15ae:	4a0b      	ldr	r2, [pc, #44]	; (15dc <LIDAR_REQ_get_health+0x48>)
    15b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    15b4:	4620      	mov	r0, r4
    15b6:	4d0a      	ldr	r5, [pc, #40]	; (15e0 <LIDAR_REQ_get_health+0x4c>)
    15b8:	47a8      	blx	r5
    15ba:	b281      	uxth	r1, r0
    15bc:	4b09      	ldr	r3, [pc, #36]	; (15e4 <LIDAR_REQ_get_health+0x50>)
    15be:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    15c0:	4620      	mov	r0, r4
    15c2:	4b09      	ldr	r3, [pc, #36]	; (15e8 <LIDAR_REQ_get_health+0x54>)
    15c4:	4798      	blx	r3
}
    15c6:	b003      	add	sp, #12
    15c8:	bd30      	pop	{r4, r5, pc}
    15ca:	bf00      	nop
    15cc:	200004ec 	.word	0x200004ec
    15d0:	200004e8 	.word	0x200004e8
    15d4:	000012ed 	.word	0x000012ed
    15d8:	20004504 	.word	0x20004504
    15dc:	00004c44 	.word	0x00004c44
    15e0:	00003045 	.word	0x00003045
    15e4:	200004e6 	.word	0x200004e6
    15e8:	00000ef1 	.word	0x00000ef1

000015ec <LIDAR_REQ_get_samplerate>:
{
    15ec:	b530      	push	{r4, r5, lr}
    15ee:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_SAMPLERATE;
    15f0:	2559      	movs	r5, #89	; 0x59
    15f2:	4b0c      	ldr	r3, [pc, #48]	; (1624 <LIDAR_REQ_get_samplerate+0x38>)
    15f4:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    15f6:	2200      	movs	r2, #0
    15f8:	4b0b      	ldr	r3, [pc, #44]	; (1628 <LIDAR_REQ_get_samplerate+0x3c>)
    15fa:	601a      	str	r2, [r3, #0]
	LIDAR_reset_print_buffer();
    15fc:	4b0b      	ldr	r3, [pc, #44]	; (162c <LIDAR_REQ_get_samplerate+0x40>)
    15fe:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1600:	4c0b      	ldr	r4, [pc, #44]	; (1630 <LIDAR_REQ_get_samplerate+0x44>)
    1602:	9500      	str	r5, [sp, #0]
    1604:	23a5      	movs	r3, #165	; 0xa5
    1606:	4a0b      	ldr	r2, [pc, #44]	; (1634 <LIDAR_REQ_get_samplerate+0x48>)
    1608:	f44f 7180 	mov.w	r1, #256	; 0x100
    160c:	4620      	mov	r0, r4
    160e:	4d0a      	ldr	r5, [pc, #40]	; (1638 <LIDAR_REQ_get_samplerate+0x4c>)
    1610:	47a8      	blx	r5
    1612:	b281      	uxth	r1, r0
    1614:	4b09      	ldr	r3, [pc, #36]	; (163c <LIDAR_REQ_get_samplerate+0x50>)
    1616:	8019      	strh	r1, [r3, #0]
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1618:	4620      	mov	r0, r4
    161a:	4b09      	ldr	r3, [pc, #36]	; (1640 <LIDAR_REQ_get_samplerate+0x54>)
    161c:	4798      	blx	r3
}
    161e:	b003      	add	sp, #12
    1620:	bd30      	pop	{r4, r5, pc}
    1622:	bf00      	nop
    1624:	200004ec 	.word	0x200004ec
    1628:	200004e8 	.word	0x200004e8
    162c:	000012ed 	.word	0x000012ed
    1630:	20004504 	.word	0x20004504
    1634:	00004c44 	.word	0x00004c44
    1638:	00003045 	.word	0x00003045
    163c:	200004e6 	.word	0x200004e6
    1640:	00000ef1 	.word	0x00000ef1

00001644 <LIDAR_RES_stop>:

/** 
  * "STOP" request has no response.
  */
void LIDAR_RES_stop(void) 
{
    1644:	b508      	push	{r3, lr}
    if (DEBUG)
	    printf("LiDAR stopped\r\n");
    1646:	4802      	ldr	r0, [pc, #8]	; (1650 <LIDAR_RES_stop+0xc>)
    1648:	4b02      	ldr	r3, [pc, #8]	; (1654 <LIDAR_RES_stop+0x10>)
    164a:	4798      	blx	r3
    164c:	bd08      	pop	{r3, pc}
    164e:	bf00      	nop
    1650:	00004c54 	.word	0x00004c54
    1654:	00002e79 	.word	0x00002e79

00001658 <LIDAR_RES_reset>:
  *           RP LIDAR System.\r\n
  *           Firmware Ver 1.27 - rc9, HW Ver 5\r\n
  *           Model: 28\r\n
  */
void LIDAR_RES_reset(void) 
{   
    1658:	b508      	push	{r3, lr}
    if (DEBUG)
	    printf("LiDAR reset\r\n");
    165a:	4802      	ldr	r0, [pc, #8]	; (1664 <LIDAR_RES_reset+0xc>)
    165c:	4b02      	ldr	r3, [pc, #8]	; (1668 <LIDAR_RES_reset+0x10>)
    165e:	4798      	blx	r3
    1660:	bd08      	pop	{r3, pc}
    1662:	bf00      	nop
    1664:	00004c64 	.word	0x00004c64
    1668:	00002e79 	.word	0x00002e79

0000166c <LIDAR_RES_scan>:
  *						+2		angle_q6[14:7]
  *						+3		distance_q2[7:0]
  *						+4		distance_q2[15:8]
  */
void LIDAR_RES_scan(void) 
{
    166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* check[0] - start
	   check[1] - ~start
	   check[2] - check	 */
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    1670:	4a21      	ldr	r2, [pc, #132]	; (16f8 <LIDAR_RES_scan+0x8c>)
    1672:	7813      	ldrb	r3, [r2, #0]
    1674:	7850      	ldrb	r0, [r2, #1]
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    1676:	7855      	ldrb	r5, [r2, #1]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    1678:	7891      	ldrb	r1, [r2, #2]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    167a:	78d4      	ldrb	r4, [r2, #3]
    167c:	7916      	ldrb	r6, [r2, #4]
	
	/* Decrement byte_count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= 5;
    167e:	4f1f      	ldr	r7, [pc, #124]	; (16fc <LIDAR_RES_scan+0x90>)
    1680:	683a      	ldr	r2, [r7, #0]
    1682:	3a05      	subs	r2, #5
    1684:	603a      	str	r2, [r7, #0]
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
    1686:	005b      	lsls	r3, r3, #1
    1688:	f003 0306 	and.w	r3, r3, #6
    168c:	f000 0201 	and.w	r2, r0, #1
    1690:	4313      	orrs	r3, r2
	
	/* Checking: check=1, ~start=0, start=1 */
	if (check == 0x5 || check == 0x6) {
    1692:	3b05      	subs	r3, #5
    1694:	b2db      	uxtb	r3, r3
    1696:	2b01      	cmp	r3, #1
    1698:	d906      	bls.n	16a8 <LIDAR_RES_scan+0x3c>
		scans[scan_count].angle = angle;
		scans[scan_count++].distance = distance;
	}
	
    if (DEBUG)
        if (scan_count % 16 == 0)
    169a:	4b19      	ldr	r3, [pc, #100]	; (1700 <LIDAR_RES_scan+0x94>)
    169c:	6819      	ldr	r1, [r3, #0]
    169e:	f011 0f0f 	tst.w	r1, #15
    16a2:	d023      	beq.n	16ec <LIDAR_RES_scan+0x80>
    16a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16a8:	b2ed      	uxtb	r5, r5
    16aa:	b2c9      	uxtb	r1, r1
    16ac:	b2e4      	uxtb	r4, r4
    16ae:	b2f6      	uxtb	r6, r6
		scans[scan_count].quality = DATA_RESPONSE[0] >> 2;
    16b0:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1700 <LIDAR_RES_scan+0x94>
    16b4:	f8dc 0000 	ldr.w	r0, [ip]
    16b8:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <LIDAR_RES_scan+0x8c>)
    16ba:	f893 e000 	ldrb.w	lr, [r3]
    16be:	4b11      	ldr	r3, [pc, #68]	; (1704 <LIDAR_RES_scan+0x98>)
    16c0:	0042      	lsls	r2, r0, #1
    16c2:	1817      	adds	r7, r2, r0
    16c4:	007f      	lsls	r7, r7, #1
    16c6:	eb03 0807 	add.w	r8, r3, r7
    16ca:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    16ce:	f803 e007 	strb.w	lr, [r3, r7]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
    16d2:	01c9      	lsls	r1, r1, #7
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
    16d4:	eb01 0555 	add.w	r5, r1, r5, lsr #1
		scans[scan_count].angle = angle;
    16d8:	f8a8 5002 	strh.w	r5, [r8, #2]
		scans[scan_count++].distance = distance;
    16dc:	1c41      	adds	r1, r0, #1
    16de:	f8cc 1000 	str.w	r1, [ip]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
    16e2:	eb04 2406 	add.w	r4, r4, r6, lsl #8
		scans[scan_count++].distance = distance;
    16e6:	f8a8 4004 	strh.w	r4, [r8, #4]
    16ea:	e7d6      	b.n	169a <LIDAR_RES_scan+0x2e>
            printf("gathered %0d/%0d scans...\r\n", scan_count, MAX_SCANS);
    16ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    16f0:	4805      	ldr	r0, [pc, #20]	; (1708 <LIDAR_RES_scan+0x9c>)
    16f2:	4b06      	ldr	r3, [pc, #24]	; (170c <LIDAR_RES_scan+0xa0>)
    16f4:	4798      	blx	r3
    else {
	    printf("Invalid response: C=%u, !S=%u, S=%u\r\n",
		        (check >> 3), ((check >> 2) & 0x1), (check & 0x1));
	}
    */
}
    16f6:	e7d5      	b.n	16a4 <LIDAR_RES_scan+0x38>
    16f8:	20000464 	.word	0x20000464
    16fc:	200004e8 	.word	0x200004e8
    1700:	200004f4 	.word	0x200004f4
    1704:	200004f8 	.word	0x200004f8
    1708:	00004c74 	.word	0x00004c74
    170c:	00002d91 	.word	0x00002d91

00001710 <LIDAR_RES_express_scan>:
  *						+2		distance2[6:0], angle_val2[4] (sign)
  *						+3		distance2[14:7]
  *						+4		angle_val2[3:0], angle_val1[3:0]
  */
void LIDAR_RES_express_scan(void) 
{ 
    1710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t calc_checksum;
	uint8_t PAYLOAD_SIZE=84, CABIN_COUNT=16, CABIN_START=4, CABIN_BYTE_COUNT=5;
	uint16_t i, pos;
	
	uint8_t checksum = ((uint8_t)DATA_RESPONSE[1] << 4) | ((uint8_t)DATA_RESPONSE[0] & 0x0F);
    1712:	4b36      	ldr	r3, [pc, #216]	; (17ec <LIDAR_RES_express_scan+0xdc>)
    1714:	785a      	ldrb	r2, [r3, #1]
    1716:	781c      	ldrb	r4, [r3, #0]
    1718:	f004 040f 	and.w	r4, r4, #15
    171c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    1720:	b2e4      	uxtb	r4, r4
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    1722:	f893 e002 	ldrb.w	lr, [r3, #2]
    1726:	fa5f fe8e 	uxtb.w	lr, lr
    172a:	78df      	ldrb	r7, [r3, #3]
    172c:	b2ff      	uxtb	r7, r7
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    172e:	78db      	ldrb	r3, [r3, #3]
    1730:	b2dd      	uxtb	r5, r3
	
    /* Decrement byte count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= PAYLOAD_SIZE;
    1732:	4a2f      	ldr	r2, [pc, #188]	; (17f0 <LIDAR_RES_express_scan+0xe0>)
    1734:	6813      	ldr	r3, [r2, #0]
    1736:	3b54      	subs	r3, #84	; 0x54
    1738:	6013      	str	r3, [r2, #0]
    173a:	2302      	movs	r3, #2
	
	/* Check if data valid */
	calc_checksum = 0;
    173c:	2200      	movs	r2, #0
	for (i=2; i<PAYLOAD_SIZE; i++)
		calc_checksum ^= DATA_RESPONSE[i];
    173e:	482b      	ldr	r0, [pc, #172]	; (17ec <LIDAR_RES_express_scan+0xdc>)
    1740:	5cc1      	ldrb	r1, [r0, r3]
    1742:	404a      	eors	r2, r1
    1744:	3301      	adds	r3, #1
	for (i=2; i<PAYLOAD_SIZE; i++)
    1746:	2b54      	cmp	r3, #84	; 0x54
    1748:	d1fa      	bne.n	1740 <LIDAR_RES_express_scan+0x30>
		
	if (checksum != calc_checksum) {
    174a:	4294      	cmp	r4, r2
    174c:	d004      	beq.n	1758 <LIDAR_RES_express_scan+0x48>
			printf("First 8: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
					DATA_RESPONSE[0], DATA_RESPONSE[1], DATA_RESPONSE[2], DATA_RESPONSE[3], 
					DATA_RESPONSE[4], DATA_RESPONSE[5], DATA_RESPONSE[6], DATA_RESPONSE[7]);
		}
        */
		invalid_exp_scans++;
    174e:	4a29      	ldr	r2, [pc, #164]	; (17f4 <LIDAR_RES_express_scan+0xe4>)
    1750:	6813      	ldr	r3, [r2, #0]
    1752:	3301      	adds	r3, #1
    1754:	6013      	str	r3, [r2, #0]
		return;
    1756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
    1758:	09ed      	lsrs	r5, r5, #7
    175a:	4b27      	ldr	r3, [pc, #156]	; (17f8 <LIDAR_RES_express_scan+0xe8>)
    175c:	681e      	ldr	r6, [r3, #0]
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
    175e:	023c      	lsls	r4, r7, #8
    1760:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
    1764:	ea44 040e 	orr.w	r4, r4, lr
    1768:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    176c:	4b23      	ldr	r3, [pc, #140]	; (17fc <LIDAR_RES_express_scan+0xec>)
    176e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    1772:	2105      	movs	r1, #5
	}
	
	for (i=0; i<CABIN_COUNT; i++) {
		pos = CABIN_START+(CABIN_BYTE_COUNT*i);
		cabins[scan_count].S = S_flag;
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    1774:	4a1d      	ldr	r2, [pc, #116]	; (17ec <LIDAR_RES_express_scan+0xdc>)
		cabins[scan_count].S = S_flag;
    1776:	701d      	strb	r5, [r3, #0]
    1778:	f101 3eff 	add.w	lr, r1, #4294967295
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    177c:	f812 700e 	ldrb.w	r7, [r2, lr]
											((uint8_t)DATA_RESPONSE[pos+1] << 7);
    1780:	5c50      	ldrb	r0, [r2, r1]
    1782:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
    1784:	ea40 0057 	orr.w	r0, r0, r7, lsr #1
    1788:	8098      	strh	r0, [r3, #4]
    178a:	1c4f      	adds	r7, r1, #1
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    178c:	f812 c007 	ldrb.w	ip, [r2, r7]
    1790:	1c88      	adds	r0, r1, #2
											((uint8_t)DATA_RESPONSE[pos+3] << 7);
    1792:	5c10      	ldrb	r0, [r2, r0]
    1794:	01c0      	lsls	r0, r0, #7
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
    1796:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    179a:	80d8      	strh	r0, [r3, #6]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    179c:	f812 000e 	ldrb.w	r0, [r2, lr]
    17a0:	f101 0e03 	add.w	lr, r1, #3
											((uint8_t)DATA_RESPONSE[pos+4] >> 4);
    17a4:	f812 c00e 	ldrb.w	ip, [r2, lr]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
    17a8:	0100      	lsls	r0, r0, #4
    17aa:	f000 0010 	and.w	r0, r0, #16
    17ae:	ea40 101c 	orr.w	r0, r0, ip, lsr #4
    17b2:	7058      	strb	r0, [r3, #1]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    17b4:	5dd0      	ldrb	r0, [r2, r7]
											(DATA_RESPONSE[pos+4] & 0x0F);
    17b6:	f812 700e 	ldrb.w	r7, [r2, lr]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    17ba:	0100      	lsls	r0, r0, #4
    17bc:	f000 0010 	and.w	r0, r0, #16
											(DATA_RESPONSE[pos+4] & 0x0F);
    17c0:	f007 070f 	and.w	r7, r7, #15
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
    17c4:	4338      	orrs	r0, r7
    17c6:	7098      	strb	r0, [r3, #2]
		cabins[scan_count++].start_angle = start_angle;
    17c8:	811c      	strh	r4, [r3, #8]
    17ca:	330a      	adds	r3, #10
    17cc:	3105      	adds	r1, #5
	for (i=0; i<CABIN_COUNT; i++) {
    17ce:	2955      	cmp	r1, #85	; 0x55
    17d0:	d1d1      	bne.n	1776 <LIDAR_RES_express_scan+0x66>
    17d2:	f106 0210 	add.w	r2, r6, #16
    17d6:	4b08      	ldr	r3, [pc, #32]	; (17f8 <LIDAR_RES_express_scan+0xe8>)
    17d8:	601a      	str	r2, [r3, #0]
	}
	
    if (DEBUG)
	    printf("%0d invalid scans -- gathered %0d/%0d scans...\r\n", invalid_exp_scans, scan_count, MAX_SCANS);
    17da:	f44f 6380 	mov.w	r3, #1024	; 0x400
    17de:	4905      	ldr	r1, [pc, #20]	; (17f4 <LIDAR_RES_express_scan+0xe4>)
    17e0:	6809      	ldr	r1, [r1, #0]
    17e2:	4807      	ldr	r0, [pc, #28]	; (1800 <LIDAR_RES_express_scan+0xf0>)
    17e4:	4c07      	ldr	r4, [pc, #28]	; (1804 <LIDAR_RES_express_scan+0xf4>)
    17e6:	47a0      	blx	r4
    17e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17ea:	bf00      	nop
    17ec:	20000464 	.word	0x20000464
    17f0:	200004e8 	.word	0x200004e8
    17f4:	200004f0 	.word	0x200004f0
    17f8:	200004f4 	.word	0x200004f4
    17fc:	20001cf8 	.word	0x20001cf8
    1800:	00004c90 	.word	0x00004c90
    1804:	00002d91 	.word	0x00002d91

00001808 <LIDAR_RES_get_info>:
  *						+19 	serial_number[15]		
  * When converting serial_number to text from hex, the least significant byte 
  *	prints first.
  */
void LIDAR_RES_get_info(void) 
{	
    1808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    180c:	b085      	sub	sp, #20
	uint8_t model_id 		 = DATA_RESPONSE[0];
    180e:	4b1a      	ldr	r3, [pc, #104]	; (1878 <LIDAR_RES_get_info+0x70>)
    1810:	f893 b000 	ldrb.w	fp, [r3]
    1814:	fa5f fb8b 	uxtb.w	fp, fp
	uint8_t firmware_minor	 = DATA_RESPONSE[1];
    1818:	f893 a001 	ldrb.w	sl, [r3, #1]
    181c:	fa5f fa8a 	uxtb.w	sl, sl
	uint8_t firmware_major	 = DATA_RESPONSE[2];
    1820:	f893 9002 	ldrb.w	r9, [r3, #2]
    1824:	fa5f f989 	uxtb.w	r9, r9
	uint8_t hardware_version = DATA_RESPONSE[3];
    1828:	f893 8003 	ldrb.w	r8, [r3, #3]
    182c:	fa5f f888 	uxtb.w	r8, r8
	char serial_number[16]	 = {0};
    1830:	2300      	movs	r3, #0
    1832:	9300      	str	r3, [sp, #0]
    1834:	9301      	str	r3, [sp, #4]
    1836:	9302      	str	r3, [sp, #8]
    1838:	9303      	str	r3, [sp, #12]
    183a:	2413      	movs	r4, #19
	
	/** Get hexadecimal string output */
	int i, j=0;
	for (i=15; i>=0; i--) {
		sprintf(&serial_number[j++], "%02X", DATA_RESPONSE[i+4]);
    183c:	4f0e      	ldr	r7, [pc, #56]	; (1878 <LIDAR_RES_get_info+0x70>)
    183e:	4e0f      	ldr	r6, [pc, #60]	; (187c <LIDAR_RES_get_info+0x74>)
    1840:	4d0f      	ldr	r5, [pc, #60]	; (1880 <LIDAR_RES_get_info+0x78>)
    1842:	5d3a      	ldrb	r2, [r7, r4]
    1844:	ab04      	add	r3, sp, #16
    1846:	1b18      	subs	r0, r3, r4
    1848:	4631      	mov	r1, r6
    184a:	3003      	adds	r0, #3
    184c:	47a8      	blx	r5
    184e:	3c01      	subs	r4, #1
	for (i=15; i>=0; i--) {
    1850:	2c03      	cmp	r4, #3
    1852:	d1f6      	bne.n	1842 <LIDAR_RES_get_info+0x3a>
	}
	
    if (DEBUG) {
        printf(" : RPLiDAR Model ID: %u\r\n", model_id);	
    1854:	4659      	mov	r1, fp
    1856:	480b      	ldr	r0, [pc, #44]	; (1884 <LIDAR_RES_get_info+0x7c>)
    1858:	4c0b      	ldr	r4, [pc, #44]	; (1888 <LIDAR_RES_get_info+0x80>)
    185a:	47a0      	blx	r4
        printf(" : Firmware Version: %u.%u\r\n", firmware_major, firmware_minor);
    185c:	4652      	mov	r2, sl
    185e:	4649      	mov	r1, r9
    1860:	480a      	ldr	r0, [pc, #40]	; (188c <LIDAR_RES_get_info+0x84>)
    1862:	47a0      	blx	r4
        printf(" : Hardware Version: %u\r\n", hardware_version);
    1864:	4641      	mov	r1, r8
    1866:	480a      	ldr	r0, [pc, #40]	; (1890 <LIDAR_RES_get_info+0x88>)
    1868:	47a0      	blx	r4
        printf(" : Serial Number: 0x%s\r\n", serial_number);
    186a:	4669      	mov	r1, sp
    186c:	4809      	ldr	r0, [pc, #36]	; (1894 <LIDAR_RES_get_info+0x8c>)
    186e:	47a0      	blx	r4
    }
}
    1870:	b005      	add	sp, #20
    1872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1876:	bf00      	nop
    1878:	20000464 	.word	0x20000464
    187c:	00004cc4 	.word	0x00004cc4
    1880:	000030ad 	.word	0x000030ad
    1884:	00004ccc 	.word	0x00004ccc
    1888:	00002d91 	.word	0x00002d91
    188c:	00004ce8 	.word	0x00004ce8
    1890:	00004d08 	.word	0x00004d08
    1894:	00004d24 	.word	0x00004d24

00001898 <LIDAR_RES_get_health>:
  *		Byte Offset:	+0		status
  *		Order 8..0		+1		error_code[7:0]
  *						+2		error_code[15:8]	
  */
void LIDAR_RES_get_health(void) 
{
    1898:	b508      	push	{r3, lr}
	char* status;
	uint16_t error_code;  
	
	switch(DATA_RESPONSE[0]) {
    189a:	4b0f      	ldr	r3, [pc, #60]	; (18d8 <LIDAR_RES_get_health+0x40>)
    189c:	781b      	ldrb	r3, [r3, #0]
    189e:	b2db      	uxtb	r3, r3
    18a0:	2b01      	cmp	r3, #1
    18a2:	d010      	beq.n	18c6 <LIDAR_RES_get_health+0x2e>
    18a4:	b18b      	cbz	r3, 18ca <LIDAR_RES_get_health+0x32>
		case 0: status = "GOOD"; break;
		case 1: status = "WARNING"; break;
		case 2: status = "ERROR"; break;
		default: status = "UNKNOWN"; break;
    18a6:	4a0d      	ldr	r2, [pc, #52]	; (18dc <LIDAR_RES_get_health+0x44>)
    18a8:	490d      	ldr	r1, [pc, #52]	; (18e0 <LIDAR_RES_get_health+0x48>)
    18aa:	2b02      	cmp	r3, #2
    18ac:	bf18      	it	ne
    18ae:	4611      	movne	r1, r2
	}
	
	error_code = DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8);
    18b0:	4b09      	ldr	r3, [pc, #36]	; (18d8 <LIDAR_RES_get_health+0x40>)
    18b2:	781a      	ldrb	r2, [r3, #0]
    18b4:	785b      	ldrb	r3, [r3, #1]
    18b6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    18ba:	b292      	uxth	r2, r2
	
	if (error_code == 0) {
    18bc:	b13a      	cbz	r2, 18ce <LIDAR_RES_get_health+0x36>
        if (DEBUG)
		    printf(" : LiDAR Health is %s!\r\n", status);
    }
	else {
		if (DEBUG)
            printf(" : LiDAR Health is %s!\r\n : Error code: %u\r\n", 
    18be:	4809      	ldr	r0, [pc, #36]	; (18e4 <LIDAR_RES_get_health+0x4c>)
    18c0:	4b09      	ldr	r3, [pc, #36]	; (18e8 <LIDAR_RES_get_health+0x50>)
    18c2:	4798      	blx	r3
    18c4:	bd08      	pop	{r3, pc}
		case 1: status = "WARNING"; break;
    18c6:	4909      	ldr	r1, [pc, #36]	; (18ec <LIDAR_RES_get_health+0x54>)
    18c8:	e7f2      	b.n	18b0 <LIDAR_RES_get_health+0x18>
		case 0: status = "GOOD"; break;
    18ca:	4909      	ldr	r1, [pc, #36]	; (18f0 <LIDAR_RES_get_health+0x58>)
    18cc:	e7f0      	b.n	18b0 <LIDAR_RES_get_health+0x18>
		    printf(" : LiDAR Health is %s!\r\n", status);
    18ce:	4809      	ldr	r0, [pc, #36]	; (18f4 <LIDAR_RES_get_health+0x5c>)
    18d0:	4b05      	ldr	r3, [pc, #20]	; (18e8 <LIDAR_RES_get_health+0x50>)
    18d2:	4798      	blx	r3
    18d4:	bd08      	pop	{r3, pc}
    18d6:	bf00      	nop
    18d8:	20000464 	.word	0x20000464
    18dc:	00004d58 	.word	0x00004d58
    18e0:	00004d50 	.word	0x00004d50
    18e4:	00004d7c 	.word	0x00004d7c
    18e8:	00002d91 	.word	0x00002d91
    18ec:	00004d48 	.word	0x00004d48
    18f0:	00004d40 	.word	0x00004d40
    18f4:	00004d60 	.word	0x00004d60

000018f8 <LIDAR_RES_get_samplerate>:
  *		Order 8..0		+1		Tstandard[15:8]
  *						+2		Texpress[7:0]
  *						+3		Texpress[15:8]	
  */
void LIDAR_RES_get_samplerate(void)
{
    18f8:	b538      	push	{r3, r4, r5, lr}
    if (DEBUG) {
	    printf(" : Standard Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8));
    18fa:	4c07      	ldr	r4, [pc, #28]	; (1918 <LIDAR_RES_get_samplerate+0x20>)
    18fc:	7823      	ldrb	r3, [r4, #0]
    18fe:	7861      	ldrb	r1, [r4, #1]
	    printf(" : Standard Scan Samplerate: %u\r\n", 
    1900:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    1904:	4805      	ldr	r0, [pc, #20]	; (191c <LIDAR_RES_get_samplerate+0x24>)
    1906:	4d06      	ldr	r5, [pc, #24]	; (1920 <LIDAR_RES_get_samplerate+0x28>)
    1908:	47a8      	blx	r5
		printf(" : Express Scan Samplerate: %u\r\n", 
			    DATA_RESPONSE[2] + ((unsigned)DATA_RESPONSE[3] << 8));
    190a:	78a3      	ldrb	r3, [r4, #2]
    190c:	78e1      	ldrb	r1, [r4, #3]
		printf(" : Express Scan Samplerate: %u\r\n", 
    190e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    1912:	4804      	ldr	r0, [pc, #16]	; (1924 <LIDAR_RES_get_samplerate+0x2c>)
    1914:	47a8      	blx	r5
    1916:	bd38      	pop	{r3, r4, r5, pc}
    1918:	20000464 	.word	0x20000464
    191c:	00004da8 	.word	0x00004da8
    1920:	00002d91 	.word	0x00002d91
    1924:	00004dcc 	.word	0x00004dcc

00001928 <HardFault_Handler>:

/**
  * HardFault Handler
  */
void HardFault_Handler(void)
{
    1928:	b508      	push	{r3, lr}
	if (DEBUG)
		printf("\r\n!!!!!!!! In HardFault_Handler !!!!!!!!\r\n");
    192a:	4802      	ldr	r0, [pc, #8]	; (1934 <HardFault_Handler+0xc>)
    192c:	4b02      	ldr	r3, [pc, #8]	; (1938 <HardFault_Handler+0x10>)
    192e:	4798      	blx	r3
    1930:	e7fe      	b.n	1930 <HardFault_Handler+0x8>
    1932:	bf00      	nop
    1934:	00004df0 	.word	0x00004df0
    1938:	00002e79 	.word	0x00002e79

0000193c <main>:

/** 
  * Application entry point
  */ 
int main(void)
{
    193c:	b580      	push	{r7, lr}
    193e:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1940:	4b22      	ldr	r3, [pc, #136]	; (19cc <main+0x90>)
    1942:	4798      	blx	r3
	
	EEPROM_init();
    1944:	4b22      	ldr	r3, [pc, #136]	; (19d0 <main+0x94>)
    1946:	4798      	blx	r3
	SERVO_set_angle(0);
    1948:	2000      	movs	r0, #0
    194a:	4b22      	ldr	r3, [pc, #136]	; (19d4 <main+0x98>)
    194c:	4798      	blx	r3

	if (DEBUG) {
		printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
    194e:	4822      	ldr	r0, [pc, #136]	; (19d8 <main+0x9c>)
    1950:	4b22      	ldr	r3, [pc, #136]	; (19dc <main+0xa0>)
    1952:	4798      	blx	r3

		while (1) {
			uint32_t user_selection = 0;

			printf("%s", menu_txt);
    1954:	4f22      	ldr	r7, [pc, #136]	; (19e0 <main+0xa4>)
    1956:	4e23      	ldr	r6, [pc, #140]	; (19e4 <main+0xa8>)
    1958:	4d23      	ldr	r5, [pc, #140]	; (19e8 <main+0xac>)
    195a:	e004      	b.n	1966 <main+0x2a>
			
			if (scanf("%d", &user_selection) == 0) {
				/* If its not a number, flush stdin */
				fflush(stdin);
    195c:	4b23      	ldr	r3, [pc, #140]	; (19ec <main+0xb0>)
    195e:	681b      	ldr	r3, [r3, #0]
    1960:	6858      	ldr	r0, [r3, #4]
    1962:	4b23      	ldr	r3, [pc, #140]	; (19f0 <main+0xb4>)
    1964:	4798      	blx	r3
			uint32_t user_selection = 0;
    1966:	ac02      	add	r4, sp, #8
    1968:	2300      	movs	r3, #0
    196a:	f844 3d04 	str.w	r3, [r4, #-4]!
			printf("%s", menu_txt);
    196e:	4639      	mov	r1, r7
    1970:	4630      	mov	r0, r6
    1972:	47a8      	blx	r5
			if (scanf("%d", &user_selection) == 0) {
    1974:	4621      	mov	r1, r4
    1976:	481f      	ldr	r0, [pc, #124]	; (19f4 <main+0xb8>)
    1978:	4b1f      	ldr	r3, [pc, #124]	; (19f8 <main+0xbc>)
    197a:	4798      	blx	r3
    197c:	2800      	cmp	r0, #0
    197e:	d0ed      	beq.n	195c <main+0x20>
				continue;
			}
			
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1980:	9901      	ldr	r1, [sp, #4]
    1982:	481e      	ldr	r0, [pc, #120]	; (19fc <main+0xc0>)
    1984:	47a8      	blx	r5
			
			switch (user_selection) {
    1986:	9b01      	ldr	r3, [sp, #4]
    1988:	3b01      	subs	r3, #1
    198a:	2b03      	cmp	r3, #3
    198c:	d819      	bhi.n	19c2 <main+0x86>
    198e:	e8df f003 	tbb	[pc, r3]
    1992:	0f02      	.short	0x0f02
    1994:	1512      	.short	0x1512
  __ASM volatile ("dsb 0xF":::"memory");
    1996:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    199a:	4919      	ldr	r1, [pc, #100]	; (1a00 <main+0xc4>)
    199c:	68ca      	ldr	r2, [r1, #12]
    199e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    19a2:	4b18      	ldr	r3, [pc, #96]	; (1a04 <main+0xc8>)
    19a4:	4313      	orrs	r3, r2
    19a6:	60cb      	str	r3, [r1, #12]
    19a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    19ac:	bf00      	nop
    19ae:	e7fd      	b.n	19ac <main+0x70>
				case 1:
					NVIC_SystemReset();
					break;
				
				case 2:
					EEPROM_menu();
    19b0:	4b15      	ldr	r3, [pc, #84]	; (1a08 <main+0xcc>)
    19b2:	4798      	blx	r3
					break;
    19b4:	e7d7      	b.n	1966 <main+0x2a>

				case 3:
					SERVO_menu();
    19b6:	4b15      	ldr	r3, [pc, #84]	; (1a0c <main+0xd0>)
    19b8:	4798      	blx	r3
					break;
    19ba:	e7d4      	b.n	1966 <main+0x2a>
				
				case 4:
					LIDAR_menu();
    19bc:	4b14      	ldr	r3, [pc, #80]	; (1a10 <main+0xd4>)
    19be:	4798      	blx	r3
					break;
    19c0:	e7d1      	b.n	1966 <main+0x2a>
				
				default:
					printf("\r\nInvalid option \r\n");
    19c2:	4814      	ldr	r0, [pc, #80]	; (1a14 <main+0xd8>)
    19c4:	4b05      	ldr	r3, [pc, #20]	; (19dc <main+0xa0>)
    19c6:	4798      	blx	r3
					break;
    19c8:	e7cd      	b.n	1966 <main+0x2a>
    19ca:	bf00      	nop
    19cc:	000002d1 	.word	0x000002d1
    19d0:	00001db5 	.word	0x00001db5
    19d4:	00001b41 	.word	0x00001b41
    19d8:	00004e1c 	.word	0x00004e1c
    19dc:	00002e79 	.word	0x00002e79
    19e0:	20000138 	.word	0x20000138
    19e4:	00004ac0 	.word	0x00004ac0
    19e8:	00002d91 	.word	0x00002d91
    19ec:	2000026c 	.word	0x2000026c
    19f0:	000029f1 	.word	0x000029f1
    19f4:	000050f4 	.word	0x000050f4
    19f8:	00002ea9 	.word	0x00002ea9
    19fc:	00004ac8 	.word	0x00004ac8
    1a00:	e000ed00 	.word	0xe000ed00
    1a04:	05fa0004 	.word	0x05fa0004
    1a08:	00001f2d 	.word	0x00001f2d
    1a0c:	00001c15 	.word	0x00001c15
    1a10:	00000f4d 	.word	0x00000f4d
    1a14:	00004e58 	.word	0x00004e58

00001a18 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    1a18:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1a1a:	4b05      	ldr	r3, [pc, #20]	; (1a30 <sd_mmc_init+0x18>)
    1a1c:	2404      	movs	r4, #4
    1a1e:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    1a20:	24ff      	movs	r4, #255	; 0xff
    1a22:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    1a24:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    1a26:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    1a28:	635a      	str	r2, [r3, #52]	; 0x34
}
    1a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a2e:	4770      	bx	lr
    1a30:	20004604 	.word	0x20004604

00001a34 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    1a34:	b508      	push	{r3, lr}

	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    1a36:	4903      	ldr	r1, [pc, #12]	; (1a44 <sd_mmc_stack_init+0x10>)
    1a38:	460a      	mov	r2, r1
    1a3a:	3104      	adds	r1, #4
    1a3c:	4802      	ldr	r0, [pc, #8]	; (1a48 <sd_mmc_stack_init+0x14>)
    1a3e:	4b03      	ldr	r3, [pc, #12]	; (1a4c <sd_mmc_stack_init+0x18>)
    1a40:	4798      	blx	r3
    1a42:	bd08      	pop	{r3, pc}
    1a44:	20000190 	.word	0x20000190
    1a48:	200046c0 	.word	0x200046c0
    1a4c:	00001a19 	.word	0x00001a19

00001a50 <SERVO_PWM_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1a50:	4a36      	ldr	r2, [pc, #216]	; (1b2c <SERVO_PWM_init+0xdc>)
    1a52:	6953      	ldr	r3, [r2, #20]
    1a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1a58:	6153      	str	r3, [r2, #20]
    1a5a:	2240      	movs	r2, #64	; 0x40
    1a5c:	4b34      	ldr	r3, [pc, #208]	; (1b30 <SERVO_PWM_init+0xe0>)
    1a5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a62:	4a34      	ldr	r2, [pc, #208]	; (1b34 <SERVO_PWM_init+0xe4>)
    1a64:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a6c:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a70:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a74:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1a78:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1a80:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1a84:	4b2c      	ldr	r3, [pc, #176]	; (1b38 <SERVO_PWM_init+0xe8>)
    1a86:	691b      	ldr	r3, [r3, #16]
void SERVO_PWM_init(void)
{
	SERVO_PWM_CLOCK_init();
	SERVO_PWM_PORT_init();
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1a88:	f013 0f01 	tst.w	r3, #1
    1a8c:	d11f      	bne.n	1ace <SERVO_PWM_init+0x7e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a8e:	4a2a      	ldr	r2, [pc, #168]	; (1b38 <SERVO_PWM_init+0xe8>)
    1a90:	6913      	ldr	r3, [r2, #16]
    1a92:	f013 0f03 	tst.w	r3, #3
    1a96:	d1fb      	bne.n	1a90 <SERVO_PWM_init+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a98:	4b27      	ldr	r3, [pc, #156]	; (1b38 <SERVO_PWM_init+0xe8>)
    1a9a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1a9c:	f013 0f02 	tst.w	r3, #2
    1aa0:	d00d      	beq.n	1abe <SERVO_PWM_init+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1aa2:	4a25      	ldr	r2, [pc, #148]	; (1b38 <SERVO_PWM_init+0xe8>)
    1aa4:	6813      	ldr	r3, [r2, #0]
    1aa6:	f023 0302 	bic.w	r3, r3, #2
    1aaa:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1aac:	6913      	ldr	r3, [r2, #16]
    1aae:	f013 0f03 	tst.w	r3, #3
    1ab2:	d1fb      	bne.n	1aac <SERVO_PWM_init+0x5c>
    1ab4:	4a20      	ldr	r2, [pc, #128]	; (1b38 <SERVO_PWM_init+0xe8>)
    1ab6:	6913      	ldr	r3, [r2, #16]
    1ab8:	f013 0f02 	tst.w	r3, #2
    1abc:	d1fb      	bne.n	1ab6 <SERVO_PWM_init+0x66>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1abe:	2201      	movs	r2, #1
    1ac0:	4b1d      	ldr	r3, [pc, #116]	; (1b38 <SERVO_PWM_init+0xe8>)
    1ac2:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ac4:	461a      	mov	r2, r3
    1ac6:	6913      	ldr	r3, [r2, #16]
    1ac8:	f013 0f03 	tst.w	r3, #3
    1acc:	d1fb      	bne.n	1ac6 <SERVO_PWM_init+0x76>
    1ace:	4a1a      	ldr	r2, [pc, #104]	; (1b38 <SERVO_PWM_init+0xe8>)
    1ad0:	6913      	ldr	r3, [r2, #16]
    1ad2:	f013 0f01 	tst.w	r3, #1
    1ad6:	d1fb      	bne.n	1ad0 <SERVO_PWM_init+0x80>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1ad8:	4a18      	ldr	r2, [pc, #96]	; (1b3c <SERVO_PWM_init+0xec>)
    1ada:	4b17      	ldr	r3, [pc, #92]	; (1b38 <SERVO_PWM_init+0xe8>)
    1adc:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ade:	461a      	mov	r2, r3
    1ae0:	6913      	ldr	r3, [r2, #16]
    1ae2:	f013 0f03 	tst.w	r3, #3
    1ae6:	d1fb      	bne.n	1ae0 <SERVO_PWM_init+0x90>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1ae8:	4b13      	ldr	r3, [pc, #76]	; (1b38 <SERVO_PWM_init+0xe8>)
    1aea:	2200      	movs	r2, #0
    1aec:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1aee:	22ff      	movs	r2, #255	; 0xff
    1af0:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1af2:	2203      	movs	r2, #3
    1af4:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1af6:	f640 02e1 	movw	r2, #2273	; 0x8e1
    1afa:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1afc:	461a      	mov	r2, r3
    1afe:	6913      	ldr	r3, [r2, #16]
    1b00:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b04:	d1fb      	bne.n	1afe <SERVO_PWM_init+0xae>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1b06:	f240 1277 	movw	r2, #375	; 0x177
    1b0a:	4b0b      	ldr	r3, [pc, #44]	; (1b38 <SERVO_PWM_init+0xe8>)
    1b0c:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b0e:	461a      	mov	r2, r3
    1b10:	6913      	ldr	r3, [r2, #16]
    1b12:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b16:	d1fb      	bne.n	1b10 <SERVO_PWM_init+0xc0>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b18:	4a07      	ldr	r2, [pc, #28]	; (1b38 <SERVO_PWM_init+0xe8>)
    1b1a:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1b1c:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1b20:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b22:	6913      	ldr	r3, [r2, #16]
    1b24:	f013 0f03 	tst.w	r3, #3
    1b28:	d1fb      	bne.n	1b22 <SERVO_PWM_init+0xd2>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    1b2a:	4770      	bx	lr
    1b2c:	40000800 	.word	0x40000800
    1b30:	40001c00 	.word	0x40001c00
    1b34:	41008000 	.word	0x41008000
    1b38:	40003c00 	.word	0x40003c00
    1b3c:	12000410 	.word	0x12000410

00001b40 <SERVO_set_angle>:
  * Sets servo position to given angle
  * 
  * @param int : angle to set servo to
  */ 
void SERVO_set_angle(int angle)
{
    1b40:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    1b42:	4b2b      	ldr	r3, [pc, #172]	; (1bf0 <SERVO_set_angle+0xb0>)
    1b44:	4798      	blx	r3
    1b46:	4c2b      	ldr	r4, [pc, #172]	; (1bf4 <SERVO_set_angle+0xb4>)
    1b48:	2200      	movs	r2, #0
    1b4a:	4b2b      	ldr	r3, [pc, #172]	; (1bf8 <SERVO_set_angle+0xb8>)
    1b4c:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    1b4e:	4d2b      	ldr	r5, [pc, #172]	; (1bfc <SERVO_set_angle+0xbc>)
    1b50:	2200      	movs	r2, #0
    1b52:	4b2b      	ldr	r3, [pc, #172]	; (1c00 <SERVO_set_angle+0xc0>)
    1b54:	47a8      	blx	r5
    1b56:	2200      	movs	r2, #0
    1b58:	4b2a      	ldr	r3, [pc, #168]	; (1c04 <SERVO_set_angle+0xc4>)
    1b5a:	4e2b      	ldr	r6, [pc, #172]	; (1c08 <SERVO_set_angle+0xc8>)
    1b5c:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    1b5e:	a320      	add	r3, pc, #128	; (adr r3, 1be0 <SERVO_set_angle+0xa0>)
    1b60:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b64:	47a8      	blx	r5
    1b66:	a320      	add	r3, pc, #128	; (adr r3, 1be8 <SERVO_set_angle+0xa8>)
    1b68:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b6c:	47a0      	blx	r4
    1b6e:	4b27      	ldr	r3, [pc, #156]	; (1c0c <SERVO_set_angle+0xcc>)
    1b70:	4798      	blx	r3
    1b72:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1b74:	4b26      	ldr	r3, [pc, #152]	; (1c10 <SERVO_set_angle+0xd0>)
    1b76:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1b78:	f013 0f01 	tst.w	r3, #1
    1b7c:	d117      	bne.n	1bae <SERVO_set_angle+0x6e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b7e:	4a24      	ldr	r2, [pc, #144]	; (1c10 <SERVO_set_angle+0xd0>)
    1b80:	6913      	ldr	r3, [r2, #16]
    1b82:	f013 0f03 	tst.w	r3, #3
    1b86:	d1fb      	bne.n	1b80 <SERVO_set_angle+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b88:	4b21      	ldr	r3, [pc, #132]	; (1c10 <SERVO_set_angle+0xd0>)
    1b8a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1b8c:	f013 0f02 	tst.w	r3, #2
    1b90:	d00d      	beq.n	1bae <SERVO_set_angle+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1b92:	4a1f      	ldr	r2, [pc, #124]	; (1c10 <SERVO_set_angle+0xd0>)
    1b94:	6813      	ldr	r3, [r2, #0]
    1b96:	f023 0302 	bic.w	r3, r3, #2
    1b9a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b9c:	6913      	ldr	r3, [r2, #16]
    1b9e:	f013 0f03 	tst.w	r3, #3
    1ba2:	d1fb      	bne.n	1b9c <SERVO_set_angle+0x5c>
    1ba4:	4a1a      	ldr	r2, [pc, #104]	; (1c10 <SERVO_set_angle+0xd0>)
    1ba6:	6913      	ldr	r3, [r2, #16]
    1ba8:	f013 0f02 	tst.w	r3, #2
    1bac:	d1fb      	bne.n	1ba6 <SERVO_set_angle+0x66>
    1bae:	4a18      	ldr	r2, [pc, #96]	; (1c10 <SERVO_set_angle+0xd0>)
    1bb0:	6913      	ldr	r3, [r2, #16]
    1bb2:	f013 0f01 	tst.w	r3, #1
    1bb6:	d1fb      	bne.n	1bb0 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1bb8:	4b15      	ldr	r3, [pc, #84]	; (1c10 <SERVO_set_angle+0xd0>)
    1bba:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bbc:	461a      	mov	r2, r3
    1bbe:	6913      	ldr	r3, [r2, #16]
    1bc0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1bc4:	d1fb      	bne.n	1bbe <SERVO_set_angle+0x7e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bc6:	4a12      	ldr	r2, [pc, #72]	; (1c10 <SERVO_set_angle+0xd0>)
    1bc8:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1bca:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1bce:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bd0:	6913      	ldr	r3, [r2, #16]
    1bd2:	f013 0f03 	tst.w	r3, #3
    1bd6:	d1fb      	bne.n	1bd0 <SERVO_set_angle+0x90>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
}
    1bd8:	bd70      	pop	{r4, r5, r6, pc}
    1bda:	bf00      	nop
    1bdc:	f3af 8000 	nop.w
    1be0:	00000000 	.word	0x00000000
    1be4:	40a1c200 	.word	0x40a1c200
    1be8:	00000000 	.word	0x00000000
    1bec:	40a7ac00 	.word	0x40a7ac00
    1bf0:	0000235d 	.word	0x0000235d
    1bf4:	0000267d 	.word	0x0000267d
    1bf8:	40668000 	.word	0x40668000
    1bfc:	00002429 	.word	0x00002429
    1c00:	409f4000 	.word	0x409f4000
    1c04:	407f4000 	.word	0x407f4000
    1c08:	000020c5 	.word	0x000020c5
    1c0c:	0000284d 	.word	0x0000284d
    1c10:	40003c00 	.word	0x40003c00

00001c14 <SERVO_menu>:
/**
  * Menu for servo command options in order to test angle adjustments with
  * servo
  */ 
void SERVO_menu(void)
{
    1c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c16:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
    1c18:	2300      	movs	r3, #0
    1c1a:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    1c1c:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    1c1e:	4e1d      	ldr	r6, [pc, #116]	; (1c94 <SERVO_menu+0x80>)
    1c20:	4d1d      	ldr	r5, [pc, #116]	; (1c98 <SERVO_menu+0x84>)
    1c22:	4c1e      	ldr	r4, [pc, #120]	; (1c9c <SERVO_menu+0x88>)
    1c24:	e004      	b.n	1c30 <SERVO_menu+0x1c>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    1c26:	4b1e      	ldr	r3, [pc, #120]	; (1ca0 <SERVO_menu+0x8c>)
    1c28:	681b      	ldr	r3, [r3, #0]
    1c2a:	6858      	ldr	r0, [r3, #4]
    1c2c:	4b1d      	ldr	r3, [pc, #116]	; (1ca4 <SERVO_menu+0x90>)
    1c2e:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    1c30:	4631      	mov	r1, r6
    1c32:	4628      	mov	r0, r5
    1c34:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    1c36:	a901      	add	r1, sp, #4
    1c38:	481b      	ldr	r0, [pc, #108]	; (1ca8 <SERVO_menu+0x94>)
    1c3a:	4b1c      	ldr	r3, [pc, #112]	; (1cac <SERVO_menu+0x98>)
    1c3c:	4798      	blx	r3
    1c3e:	2800      	cmp	r0, #0
    1c40:	d0f1      	beq.n	1c26 <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1c42:	9901      	ldr	r1, [sp, #4]
    1c44:	481a      	ldr	r0, [pc, #104]	; (1cb0 <SERVO_menu+0x9c>)
    1c46:	47a0      	blx	r4
		
		switch (user_selection) {
    1c48:	9b01      	ldr	r3, [sp, #4]
    1c4a:	2b01      	cmp	r3, #1
    1c4c:	d005      	beq.n	1c5a <SERVO_menu+0x46>
    1c4e:	2b02      	cmp	r3, #2
    1c50:	d008      	beq.n	1c64 <SERVO_menu+0x50>
				printf("\r\nSetting servo angle to %0d\r\n", servo_angle);
				SERVO_set_angle(servo_angle);
				break;
			
			default:
				printf("\r\nInvalid option\r\n");
    1c52:	4818      	ldr	r0, [pc, #96]	; (1cb4 <SERVO_menu+0xa0>)
    1c54:	4b18      	ldr	r3, [pc, #96]	; (1cb8 <SERVO_menu+0xa4>)
    1c56:	4798      	blx	r3
				break;
    1c58:	e7ea      	b.n	1c30 <SERVO_menu+0x1c>
				printf("\r\nReturning to main menu\r\n");
    1c5a:	4818      	ldr	r0, [pc, #96]	; (1cbc <SERVO_menu+0xa8>)
    1c5c:	4b16      	ldr	r3, [pc, #88]	; (1cb8 <SERVO_menu+0xa4>)
    1c5e:	4798      	blx	r3
		}
	}
    1c60:	b003      	add	sp, #12
    1c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nEnter angle >> ");
    1c64:	4816      	ldr	r0, [pc, #88]	; (1cc0 <SERVO_menu+0xac>)
    1c66:	47a0      	blx	r4
				scanf("%d", &servo_angle);
    1c68:	4f0f      	ldr	r7, [pc, #60]	; (1ca8 <SERVO_menu+0x94>)
    1c6a:	4669      	mov	r1, sp
    1c6c:	4638      	mov	r0, r7
    1c6e:	4b0f      	ldr	r3, [pc, #60]	; (1cac <SERVO_menu+0x98>)
    1c70:	4798      	blx	r3
				printf("%d", servo_angle);
    1c72:	9900      	ldr	r1, [sp, #0]
    1c74:	4638      	mov	r0, r7
    1c76:	47a0      	blx	r4
				if (servo_angle < 0 || servo_angle > 180) {
    1c78:	9900      	ldr	r1, [sp, #0]
    1c7a:	29b4      	cmp	r1, #180	; 0xb4
    1c7c:	d903      	bls.n	1c86 <SERVO_menu+0x72>
					printf("\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n");
    1c7e:	4811      	ldr	r0, [pc, #68]	; (1cc4 <SERVO_menu+0xb0>)
    1c80:	4b0d      	ldr	r3, [pc, #52]	; (1cb8 <SERVO_menu+0xa4>)
    1c82:	4798      	blx	r3
					break;
    1c84:	e7d4      	b.n	1c30 <SERVO_menu+0x1c>
				printf("\r\nSetting servo angle to %0d\r\n", servo_angle);
    1c86:	4810      	ldr	r0, [pc, #64]	; (1cc8 <SERVO_menu+0xb4>)
    1c88:	47a0      	blx	r4
				SERVO_set_angle(servo_angle);
    1c8a:	9800      	ldr	r0, [sp, #0]
    1c8c:	4b0f      	ldr	r3, [pc, #60]	; (1ccc <SERVO_menu+0xb8>)
    1c8e:	4798      	blx	r3
				break;
    1c90:	e7ce      	b.n	1c30 <SERVO_menu+0x1c>
    1c92:	bf00      	nop
    1c94:	20000198 	.word	0x20000198
    1c98:	00004ac0 	.word	0x00004ac0
    1c9c:	00002d91 	.word	0x00002d91
    1ca0:	2000026c 	.word	0x2000026c
    1ca4:	000029f1 	.word	0x000029f1
    1ca8:	000050f4 	.word	0x000050f4
    1cac:	00002ea9 	.word	0x00002ea9
    1cb0:	00004ac8 	.word	0x00004ac8
    1cb4:	00004c30 	.word	0x00004c30
    1cb8:	00002e79 	.word	0x00002e79
    1cbc:	00004ae4 	.word	0x00004ae4
    1cc0:	00004e6c 	.word	0x00004e6c
    1cc4:	00004e80 	.word	0x00004e80
    1cc8:	00004ebc 	.word	0x00004ebc
    1ccc:	00001b41 	.word	0x00001b41

00001cd0 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
    1cd0:	b570      	push	{r4, r5, r6, lr}
    1cd2:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1cd4:	4a0b      	ldr	r2, [pc, #44]	; (1d04 <invert_seep_byte+0x34>)
    1cd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1cd8:	f013 0f04 	tst.w	r3, #4
    1cdc:	d1fb      	bne.n	1cd6 <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
    1cde:	4e0a      	ldr	r6, [pc, #40]	; (1d08 <invert_seep_byte+0x38>)
    1ce0:	6833      	ldr	r3, [r6, #0]
    1ce2:	5d1a      	ldrb	r2, [r3, r4]
    1ce4:	4d09      	ldr	r5, [pc, #36]	; (1d0c <invert_seep_byte+0x3c>)
    1ce6:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
    1ce8:	4621      	mov	r1, r4
    1cea:	4809      	ldr	r0, [pc, #36]	; (1d10 <invert_seep_byte+0x40>)
    1cec:	4b09      	ldr	r3, [pc, #36]	; (1d14 <invert_seep_byte+0x44>)
    1cee:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
    1cf0:	6832      	ldr	r2, [r6, #0]
    1cf2:	782b      	ldrb	r3, [r5, #0]
    1cf4:	fab3 f383 	clz	r3, r3
    1cf8:	095b      	lsrs	r3, r3, #5
    1cfa:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
    1cfc:	4806      	ldr	r0, [pc, #24]	; (1d18 <invert_seep_byte+0x48>)
    1cfe:	4b07      	ldr	r3, [pc, #28]	; (1d1c <invert_seep_byte+0x4c>)
    1d00:	4798      	blx	r3
    1d02:	bd70      	pop	{r4, r5, r6, pc}
    1d04:	41004000 	.word	0x41004000
    1d08:	200001e8 	.word	0x200001e8
    1d0c:	200046f4 	.word	0x200046f4
    1d10:	00004edc 	.word	0x00004edc
    1d14:	00002d91 	.word	0x00002d91
    1d18:	00004f00 	.word	0x00004f00
    1d1c:	00002e79 	.word	0x00002e79

00001d20 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
    1d20:	b508      	push	{r3, lr}
    1d22:	4a0b      	ldr	r2, [pc, #44]	; (1d50 <verify_seep_signature+0x30>)
    1d24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1d26:	f013 0f04 	tst.w	r3, #4
    1d2a:	d1fb      	bne.n	1d24 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
    1d2c:	4b08      	ldr	r3, [pc, #32]	; (1d50 <verify_seep_signature+0x30>)
    1d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
    1d30:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    1d34:	d008      	beq.n	1d48 <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
    1d36:	4b07      	ldr	r3, [pc, #28]	; (1d54 <verify_seep_signature+0x34>)
    1d38:	685b      	ldr	r3, [r3, #4]
    1d3a:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
    1d3c:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
    1d40:	bf18      	it	ne
    1d42:	f04f 30ff 	movne.w	r0, #4294967295
    1d46:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
    1d48:	4803      	ldr	r0, [pc, #12]	; (1d58 <verify_seep_signature+0x38>)
    1d4a:	4b04      	ldr	r3, [pc, #16]	; (1d5c <verify_seep_signature+0x3c>)
    1d4c:	4798      	blx	r3
    1d4e:	e7fe      	b.n	1d4e <verify_seep_signature+0x2e>
    1d50:	41004000 	.word	0x41004000
    1d54:	200001e8 	.word	0x200001e8
    1d58:	00004f34 	.word	0x00004f34
    1d5c:	00002e79 	.word	0x00002e79

00001d60 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
    1d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
    1d64:	b1c9      	cbz	r1, 1d9a <print_hex_array+0x3a>
    1d66:	460e      	mov	r6, r1
    1d68:	1e45      	subs	r5, r0, #1
    1d6a:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
    1d6c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1db0 <print_hex_array+0x50>
    1d70:	4f0c      	ldr	r7, [pc, #48]	; (1da4 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
    1d72:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1dac <print_hex_array+0x4c>
    1d76:	e003      	b.n	1d80 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
    1d78:	3401      	adds	r4, #1
    1d7a:	b2a4      	uxth	r4, r4
    1d7c:	42a6      	cmp	r6, r4
    1d7e:	d00c      	beq.n	1d9a <print_hex_array+0x3a>
		printf("%02d ", p[i]);
    1d80:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    1d84:	4640      	mov	r0, r8
    1d86:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
    1d88:	f014 0f07 	tst.w	r4, #7
    1d8c:	d1f4      	bne.n	1d78 <print_hex_array+0x18>
    1d8e:	2c00      	cmp	r4, #0
    1d90:	d0f2      	beq.n	1d78 <print_hex_array+0x18>
			printf("\r\n");
    1d92:	4648      	mov	r0, r9
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <print_hex_array+0x48>)
    1d96:	4798      	blx	r3
    1d98:	e7ee      	b.n	1d78 <print_hex_array+0x18>
	}
	printf("\r\n");
    1d9a:	4804      	ldr	r0, [pc, #16]	; (1dac <print_hex_array+0x4c>)
    1d9c:	4b02      	ldr	r3, [pc, #8]	; (1da8 <print_hex_array+0x48>)
    1d9e:	4798      	blx	r3
    1da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1da4:	00002d91 	.word	0x00002d91
    1da8:	00002e79 	.word	0x00002e79
    1dac:	000050cc 	.word	0x000050cc
    1db0:	00004f70 	.word	0x00004f70

00001db4 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
    1db4:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
    1db6:	4b19      	ldr	r3, [pc, #100]	; (1e1c <EEPROM_init+0x68>)
    1db8:	4798      	blx	r3
    1dba:	b9d0      	cbnz	r0, 1df2 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
    1dbc:	4818      	ldr	r0, [pc, #96]	; (1e20 <EEPROM_init+0x6c>)
    1dbe:	4b19      	ldr	r3, [pc, #100]	; (1e24 <EEPROM_init+0x70>)
    1dc0:	4798      	blx	r3
    1dc2:	4b19      	ldr	r3, [pc, #100]	; (1e28 <EEPROM_init+0x74>)
    1dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
    1dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
    1dc8:	f3c2 4202 	ubfx	r2, r2, #16, #3
    1dcc:	f3c1 2103 	ubfx	r1, r1, #8, #4
    1dd0:	4816      	ldr	r0, [pc, #88]	; (1e2c <EEPROM_init+0x78>)
    1dd2:	4b17      	ldr	r3, [pc, #92]	; (1e30 <EEPROM_init+0x7c>)
    1dd4:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
    1dd6:	2020      	movs	r0, #32
    1dd8:	4b16      	ldr	r3, [pc, #88]	; (1e34 <EEPROM_init+0x80>)
    1dda:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
    1ddc:	4b16      	ldr	r3, [pc, #88]	; (1e38 <EEPROM_init+0x84>)
    1dde:	681b      	ldr	r3, [r3, #0]
    1de0:	f893 3020 	ldrb.w	r3, [r3, #32]
    1de4:	b99b      	cbnz	r3, 1e0e <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1de6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1dea:	4b14      	ldr	r3, [pc, #80]	; (1e3c <EEPROM_init+0x88>)
    1dec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1df0:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
    1df2:	4813      	ldr	r0, [pc, #76]	; (1e40 <EEPROM_init+0x8c>)
    1df4:	4b0b      	ldr	r3, [pc, #44]	; (1e24 <EEPROM_init+0x70>)
    1df6:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1df8:	4a0b      	ldr	r2, [pc, #44]	; (1e28 <EEPROM_init+0x74>)
    1dfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1dfc:	f013 0f04 	tst.w	r3, #4
    1e00:	d1fb      	bne.n	1dfa <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
    1e02:	4b0d      	ldr	r3, [pc, #52]	; (1e38 <EEPROM_init+0x84>)
    1e04:	685b      	ldr	r3, [r3, #4]
    1e06:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
    1e0a:	601a      	str	r2, [r3, #0]
    1e0c:	e7d9      	b.n	1dc2 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1e12:	4b0a      	ldr	r3, [pc, #40]	; (1e3c <EEPROM_init+0x88>)
    1e14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1e18:	bd08      	pop	{r3, pc}
    1e1a:	bf00      	nop
    1e1c:	00001d21 	.word	0x00001d21
    1e20:	00004f78 	.word	0x00004f78
    1e24:	00002e79 	.word	0x00002e79
    1e28:	41004000 	.word	0x41004000
    1e2c:	00004fd8 	.word	0x00004fd8
    1e30:	00002d91 	.word	0x00002d91
    1e34:	00001cd1 	.word	0x00001cd1
    1e38:	200001e8 	.word	0x200001e8
    1e3c:	41008000 	.word	0x41008000
    1e40:	00004f9c 	.word	0x00004f9c

00001e44 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
    1e44:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1e46:	4b0a      	ldr	r3, [pc, #40]	; (1e70 <EEPROM_read+0x2c>)
    1e48:	681a      	ldr	r2, [r3, #0]
    1e4a:	3a01      	subs	r2, #1
    1e4c:	4809      	ldr	r0, [pc, #36]	; (1e74 <EEPROM_read+0x30>)
    1e4e:	1e43      	subs	r3, r0, #1
    1e50:	3063      	adds	r0, #99	; 0x63
    1e52:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1e56:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    1e5a:	4283      	cmp	r3, r0
    1e5c:	d1f9      	bne.n	1e52 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1e5e:	2164      	movs	r1, #100	; 0x64
    1e60:	4805      	ldr	r0, [pc, #20]	; (1e78 <EEPROM_read+0x34>)
    1e62:	4b06      	ldr	r3, [pc, #24]	; (1e7c <EEPROM_read+0x38>)
    1e64:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    1e66:	2164      	movs	r1, #100	; 0x64
    1e68:	4802      	ldr	r0, [pc, #8]	; (1e74 <EEPROM_read+0x30>)
    1e6a:	4b05      	ldr	r3, [pc, #20]	; (1e80 <EEPROM_read+0x3c>)
    1e6c:	4798      	blx	r3
    1e6e:	bd08      	pop	{r3, pc}
    1e70:	200001e8 	.word	0x200001e8
    1e74:	20004640 	.word	0x20004640
    1e78:	0000506c 	.word	0x0000506c
    1e7c:	00002d91 	.word	0x00002d91
    1e80:	00001d61 	.word	0x00001d61

00001e84 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
    1e84:	b530      	push	{r4, r5, lr}
    1e86:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
    1e88:	2300      	movs	r3, #0
    1e8a:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
    1e8c:	ac02      	add	r4, sp, #8
    1e8e:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
    1e92:	481a      	ldr	r0, [pc, #104]	; (1efc <EEPROM_write+0x78>)
    1e94:	4b1a      	ldr	r3, [pc, #104]	; (1f00 <EEPROM_write+0x7c>)
    1e96:	4798      	blx	r3
	scanf("%d", &ee_addr);
    1e98:	4621      	mov	r1, r4
    1e9a:	481a      	ldr	r0, [pc, #104]	; (1f04 <EEPROM_write+0x80>)
    1e9c:	4b1a      	ldr	r3, [pc, #104]	; (1f08 <EEPROM_write+0x84>)
    1e9e:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
    1ea0:	9b00      	ldr	r3, [sp, #0]
    1ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    1ea6:	d224      	bcs.n	1ef2 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
    1ea8:	4818      	ldr	r0, [pc, #96]	; (1f0c <EEPROM_write+0x88>)
    1eaa:	4d15      	ldr	r5, [pc, #84]	; (1f00 <EEPROM_write+0x7c>)
    1eac:	47a8      	blx	r5
	scanf("%d", &ee_data);
    1eae:	a901      	add	r1, sp, #4
    1eb0:	4814      	ldr	r0, [pc, #80]	; (1f04 <EEPROM_write+0x80>)
    1eb2:	4b15      	ldr	r3, [pc, #84]	; (1f08 <EEPROM_write+0x84>)
    1eb4:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
    1eb6:	4c16      	ldr	r4, [pc, #88]	; (1f10 <EEPROM_write+0x8c>)
    1eb8:	6822      	ldr	r2, [r4, #0]
    1eba:	9901      	ldr	r1, [sp, #4]
    1ebc:	9b00      	ldr	r3, [sp, #0]
    1ebe:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
    1ec0:	9a00      	ldr	r2, [sp, #0]
    1ec2:	9901      	ldr	r1, [sp, #4]
    1ec4:	4813      	ldr	r0, [pc, #76]	; (1f14 <EEPROM_write+0x90>)
    1ec6:	47a8      	blx	r5
    1ec8:	6822      	ldr	r2, [r4, #0]
    1eca:	3a01      	subs	r2, #1
    1ecc:	4812      	ldr	r0, [pc, #72]	; (1f18 <EEPROM_write+0x94>)
    1ece:	1e43      	subs	r3, r0, #1
    1ed0:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1ed2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1ed6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    1eda:	4283      	cmp	r3, r0
    1edc:	d1f9      	bne.n	1ed2 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1ede:	2164      	movs	r1, #100	; 0x64
    1ee0:	480e      	ldr	r0, [pc, #56]	; (1f1c <EEPROM_write+0x98>)
    1ee2:	4b07      	ldr	r3, [pc, #28]	; (1f00 <EEPROM_write+0x7c>)
    1ee4:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    1ee6:	2164      	movs	r1, #100	; 0x64
    1ee8:	480b      	ldr	r0, [pc, #44]	; (1f18 <EEPROM_write+0x94>)
    1eea:	4b0d      	ldr	r3, [pc, #52]	; (1f20 <EEPROM_write+0x9c>)
    1eec:	4798      	blx	r3
}
    1eee:	b003      	add	sp, #12
    1ef0:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
    1ef2:	480c      	ldr	r0, [pc, #48]	; (1f24 <EEPROM_write+0xa0>)
    1ef4:	4b0c      	ldr	r3, [pc, #48]	; (1f28 <EEPROM_write+0xa4>)
    1ef6:	4798      	blx	r3
    1ef8:	e7f9      	b.n	1eee <EEPROM_write+0x6a>
    1efa:	bf00      	nop
    1efc:	00005094 	.word	0x00005094
    1f00:	00002d91 	.word	0x00002d91
    1f04:	000050f4 	.word	0x000050f4
    1f08:	00002ea9 	.word	0x00002ea9
    1f0c:	000050d0 	.word	0x000050d0
    1f10:	200001e8 	.word	0x200001e8
    1f14:	000050e4 	.word	0x000050e4
    1f18:	20004640 	.word	0x20004640
    1f1c:	0000506c 	.word	0x0000506c
    1f20:	00001d61 	.word	0x00001d61
    1f24:	000050a8 	.word	0x000050a8
    1f28:	00002e79 	.word	0x00002e79

00001f2c <EEPROM_menu>:
{
    1f2c:	b570      	push	{r4, r5, r6, lr}
    1f2e:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
    1f30:	2300      	movs	r3, #0
    1f32:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
    1f34:	4e1b      	ldr	r6, [pc, #108]	; (1fa4 <EEPROM_menu+0x78>)
    1f36:	4d1c      	ldr	r5, [pc, #112]	; (1fa8 <EEPROM_menu+0x7c>)
    1f38:	4c1c      	ldr	r4, [pc, #112]	; (1fac <EEPROM_menu+0x80>)
    1f3a:	4631      	mov	r1, r6
    1f3c:	4628      	mov	r0, r5
    1f3e:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    1f40:	a901      	add	r1, sp, #4
    1f42:	481b      	ldr	r0, [pc, #108]	; (1fb0 <EEPROM_menu+0x84>)
    1f44:	4b1b      	ldr	r3, [pc, #108]	; (1fb4 <EEPROM_menu+0x88>)
    1f46:	4798      	blx	r3
    1f48:	b150      	cbz	r0, 1f60 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1f4a:	9901      	ldr	r1, [sp, #4]
    1f4c:	481a      	ldr	r0, [pc, #104]	; (1fb8 <EEPROM_menu+0x8c>)
    1f4e:	47a0      	blx	r4
		switch (user_selection) {
    1f50:	9b01      	ldr	r3, [sp, #4]
    1f52:	3b01      	subs	r3, #1
    1f54:	2b03      	cmp	r3, #3
    1f56:	d821      	bhi.n	1f9c <EEPROM_menu+0x70>
    1f58:	e8df f003 	tbb	[pc, r3]
    1f5c:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
    1f60:	4b16      	ldr	r3, [pc, #88]	; (1fbc <EEPROM_menu+0x90>)
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	6858      	ldr	r0, [r3, #4]
    1f66:	4b16      	ldr	r3, [pc, #88]	; (1fc0 <EEPROM_menu+0x94>)
    1f68:	4798      	blx	r3
    1f6a:	e7ee      	b.n	1f4a <EEPROM_menu+0x1e>
    1f6c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1f70:	4914      	ldr	r1, [pc, #80]	; (1fc4 <EEPROM_menu+0x98>)
    1f72:	68ca      	ldr	r2, [r1, #12]
    1f74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1f78:	4b13      	ldr	r3, [pc, #76]	; (1fc8 <EEPROM_menu+0x9c>)
    1f7a:	4313      	orrs	r3, r2
    1f7c:	60cb      	str	r3, [r1, #12]
    1f7e:	f3bf 8f4f 	dsb	sy
    __NOP();
    1f82:	bf00      	nop
    1f84:	e7fd      	b.n	1f82 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
    1f86:	4811      	ldr	r0, [pc, #68]	; (1fcc <EEPROM_menu+0xa0>)
    1f88:	4b11      	ldr	r3, [pc, #68]	; (1fd0 <EEPROM_menu+0xa4>)
    1f8a:	4798      	blx	r3
}
    1f8c:	b002      	add	sp, #8
    1f8e:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
    1f90:	4b10      	ldr	r3, [pc, #64]	; (1fd4 <EEPROM_menu+0xa8>)
    1f92:	4798      	blx	r3
				break;
    1f94:	e7d1      	b.n	1f3a <EEPROM_menu+0xe>
				EEPROM_write();
    1f96:	4b10      	ldr	r3, [pc, #64]	; (1fd8 <EEPROM_menu+0xac>)
    1f98:	4798      	blx	r3
				break;
    1f9a:	e7ce      	b.n	1f3a <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
    1f9c:	480f      	ldr	r0, [pc, #60]	; (1fdc <EEPROM_menu+0xb0>)
    1f9e:	4b0c      	ldr	r3, [pc, #48]	; (1fd0 <EEPROM_menu+0xa4>)
    1fa0:	4798      	blx	r3
				break;
    1fa2:	e7ca      	b.n	1f3a <EEPROM_menu+0xe>
    1fa4:	200001f0 	.word	0x200001f0
    1fa8:	00004ac0 	.word	0x00004ac0
    1fac:	00002d91 	.word	0x00002d91
    1fb0:	000050f4 	.word	0x000050f4
    1fb4:	00002ea9 	.word	0x00002ea9
    1fb8:	00004ac8 	.word	0x00004ac8
    1fbc:	2000026c 	.word	0x2000026c
    1fc0:	000029f1 	.word	0x000029f1
    1fc4:	e000ed00 	.word	0xe000ed00
    1fc8:	05fa0004 	.word	0x05fa0004
    1fcc:	00004ae4 	.word	0x00004ae4
    1fd0:	00002e79 	.word	0x00002e79
    1fd4:	00001e45 	.word	0x00001e45
    1fd8:	00001e85 	.word	0x00001e85
    1fdc:	00004c30 	.word	0x00004c30

00001fe0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    1fe0:	b940      	cbnz	r0, 1ff4 <_read+0x14>
{
    1fe2:	b508      	push	{r3, lr}
    1fe4:	460b      	mov	r3, r1
    1fe6:	4611      	mov	r1, r2
    1fe8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1fea:	4b04      	ldr	r3, [pc, #16]	; (1ffc <_read+0x1c>)
    1fec:	4798      	blx	r3
    1fee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    1ff2:	bd08      	pop	{r3, pc}
		return -1;
    1ff4:	f04f 30ff 	mov.w	r0, #4294967295
    1ff8:	4770      	bx	lr
    1ffa:	bf00      	nop
    1ffc:	00002051 	.word	0x00002051

00002000 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    2000:	3801      	subs	r0, #1
    2002:	2802      	cmp	r0, #2
    2004:	d808      	bhi.n	2018 <_write+0x18>
{
    2006:	b508      	push	{r3, lr}
    2008:	460b      	mov	r3, r1
    200a:	4611      	mov	r1, r2
    200c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    200e:	4b04      	ldr	r3, [pc, #16]	; (2020 <_write+0x20>)
    2010:	4798      	blx	r3
    2012:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    2016:	bd08      	pop	{r3, pc}
		return -1;
    2018:	f04f 30ff 	mov.w	r0, #4294967295
    201c:	4770      	bx	lr
    201e:	bf00      	nop
    2020:	00002075 	.word	0x00002075

00002024 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    2024:	b570      	push	{r4, r5, r6, lr}
    2026:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    2028:	4d06      	ldr	r5, [pc, #24]	; (2044 <stdio_io_init+0x20>)
    202a:	682b      	ldr	r3, [r5, #0]
    202c:	2100      	movs	r1, #0
    202e:	6898      	ldr	r0, [r3, #8]
    2030:	4c05      	ldr	r4, [pc, #20]	; (2048 <stdio_io_init+0x24>)
    2032:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2034:	682b      	ldr	r3, [r5, #0]
    2036:	2100      	movs	r1, #0
    2038:	6858      	ldr	r0, [r3, #4]
    203a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    203c:	4b03      	ldr	r3, [pc, #12]	; (204c <stdio_io_init+0x28>)
    203e:	601e      	str	r6, [r3, #0]
    2040:	bd70      	pop	{r4, r5, r6, pc}
    2042:	bf00      	nop
    2044:	2000026c 	.word	0x2000026c
    2048:	00002ed9 	.word	0x00002ed9
    204c:	200046a4 	.word	0x200046a4

00002050 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2050:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    2052:	4b06      	ldr	r3, [pc, #24]	; (206c <stdio_io_read+0x1c>)
    2054:	681b      	ldr	r3, [r3, #0]
    2056:	b133      	cbz	r3, 2066 <stdio_io_read+0x16>
    2058:	460a      	mov	r2, r1
    205a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    205c:	b292      	uxth	r2, r2
    205e:	4618      	mov	r0, r3
    2060:	4b03      	ldr	r3, [pc, #12]	; (2070 <stdio_io_read+0x20>)
    2062:	4798      	blx	r3
    2064:	bd08      	pop	{r3, pc}
		return 0;
    2066:	2000      	movs	r0, #0
}
    2068:	bd08      	pop	{r3, pc}
    206a:	bf00      	nop
    206c:	200046a4 	.word	0x200046a4
    2070:	0000070d 	.word	0x0000070d

00002074 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2074:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    2076:	4b06      	ldr	r3, [pc, #24]	; (2090 <stdio_io_write+0x1c>)
    2078:	681b      	ldr	r3, [r3, #0]
    207a:	b133      	cbz	r3, 208a <stdio_io_write+0x16>
    207c:	460a      	mov	r2, r1
    207e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    2080:	b292      	uxth	r2, r2
    2082:	4618      	mov	r0, r3
    2084:	4b03      	ldr	r3, [pc, #12]	; (2094 <stdio_io_write+0x20>)
    2086:	4798      	blx	r3
    2088:	bd08      	pop	{r3, pc}
		return 0;
    208a:	2000      	movs	r0, #0
}
    208c:	bd08      	pop	{r3, pc}
    208e:	bf00      	nop
    2090:	200046a4 	.word	0x200046a4
    2094:	000006dd 	.word	0x000006dd

00002098 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2098:	b510      	push	{r4, lr}

	usart_sync_enable(&STDIO_IO);
    209a:	4c04      	ldr	r4, [pc, #16]	; (20ac <stdio_redirect_init+0x14>)
    209c:	4620      	mov	r0, r4
    209e:	4b04      	ldr	r3, [pc, #16]	; (20b0 <stdio_redirect_init+0x18>)
    20a0:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    20a2:	4620      	mov	r0, r4
    20a4:	4b03      	ldr	r3, [pc, #12]	; (20b4 <stdio_redirect_init+0x1c>)
    20a6:	4798      	blx	r3
    20a8:	bd10      	pop	{r4, pc}
    20aa:	bf00      	nop
    20ac:	200046b0 	.word	0x200046b0
    20b0:	00000889 	.word	0x00000889
    20b4:	00002025 	.word	0x00002025

000020b8 <__aeabi_drsub>:
    20b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    20bc:	e002      	b.n	20c4 <__adddf3>
    20be:	bf00      	nop

000020c0 <__aeabi_dsub>:
    20c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000020c4 <__adddf3>:
    20c4:	b530      	push	{r4, r5, lr}
    20c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    20ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
    20ce:	ea94 0f05 	teq	r4, r5
    20d2:	bf08      	it	eq
    20d4:	ea90 0f02 	teqeq	r0, r2
    20d8:	bf1f      	itttt	ne
    20da:	ea54 0c00 	orrsne.w	ip, r4, r0
    20de:	ea55 0c02 	orrsne.w	ip, r5, r2
    20e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    20e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    20ea:	f000 80e2 	beq.w	22b2 <__adddf3+0x1ee>
    20ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
    20f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    20f6:	bfb8      	it	lt
    20f8:	426d      	neglt	r5, r5
    20fa:	dd0c      	ble.n	2116 <__adddf3+0x52>
    20fc:	442c      	add	r4, r5
    20fe:	ea80 0202 	eor.w	r2, r0, r2
    2102:	ea81 0303 	eor.w	r3, r1, r3
    2106:	ea82 0000 	eor.w	r0, r2, r0
    210a:	ea83 0101 	eor.w	r1, r3, r1
    210e:	ea80 0202 	eor.w	r2, r0, r2
    2112:	ea81 0303 	eor.w	r3, r1, r3
    2116:	2d36      	cmp	r5, #54	; 0x36
    2118:	bf88      	it	hi
    211a:	bd30      	pophi	{r4, r5, pc}
    211c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    2120:	ea4f 3101 	mov.w	r1, r1, lsl #12
    2124:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    2128:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    212c:	d002      	beq.n	2134 <__adddf3+0x70>
    212e:	4240      	negs	r0, r0
    2130:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2134:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    2138:	ea4f 3303 	mov.w	r3, r3, lsl #12
    213c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    2140:	d002      	beq.n	2148 <__adddf3+0x84>
    2142:	4252      	negs	r2, r2
    2144:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2148:	ea94 0f05 	teq	r4, r5
    214c:	f000 80a7 	beq.w	229e <__adddf3+0x1da>
    2150:	f1a4 0401 	sub.w	r4, r4, #1
    2154:	f1d5 0e20 	rsbs	lr, r5, #32
    2158:	db0d      	blt.n	2176 <__adddf3+0xb2>
    215a:	fa02 fc0e 	lsl.w	ip, r2, lr
    215e:	fa22 f205 	lsr.w	r2, r2, r5
    2162:	1880      	adds	r0, r0, r2
    2164:	f141 0100 	adc.w	r1, r1, #0
    2168:	fa03 f20e 	lsl.w	r2, r3, lr
    216c:	1880      	adds	r0, r0, r2
    216e:	fa43 f305 	asr.w	r3, r3, r5
    2172:	4159      	adcs	r1, r3
    2174:	e00e      	b.n	2194 <__adddf3+0xd0>
    2176:	f1a5 0520 	sub.w	r5, r5, #32
    217a:	f10e 0e20 	add.w	lr, lr, #32
    217e:	2a01      	cmp	r2, #1
    2180:	fa03 fc0e 	lsl.w	ip, r3, lr
    2184:	bf28      	it	cs
    2186:	f04c 0c02 	orrcs.w	ip, ip, #2
    218a:	fa43 f305 	asr.w	r3, r3, r5
    218e:	18c0      	adds	r0, r0, r3
    2190:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    2194:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2198:	d507      	bpl.n	21aa <__adddf3+0xe6>
    219a:	f04f 0e00 	mov.w	lr, #0
    219e:	f1dc 0c00 	rsbs	ip, ip, #0
    21a2:	eb7e 0000 	sbcs.w	r0, lr, r0
    21a6:	eb6e 0101 	sbc.w	r1, lr, r1
    21aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    21ae:	d31b      	bcc.n	21e8 <__adddf3+0x124>
    21b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    21b4:	d30c      	bcc.n	21d0 <__adddf3+0x10c>
    21b6:	0849      	lsrs	r1, r1, #1
    21b8:	ea5f 0030 	movs.w	r0, r0, rrx
    21bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    21c0:	f104 0401 	add.w	r4, r4, #1
    21c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    21c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    21cc:	f080 809a 	bcs.w	2304 <__adddf3+0x240>
    21d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    21d4:	bf08      	it	eq
    21d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    21da:	f150 0000 	adcs.w	r0, r0, #0
    21de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    21e2:	ea41 0105 	orr.w	r1, r1, r5
    21e6:	bd30      	pop	{r4, r5, pc}
    21e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    21ec:	4140      	adcs	r0, r0
    21ee:	eb41 0101 	adc.w	r1, r1, r1
    21f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    21f6:	f1a4 0401 	sub.w	r4, r4, #1
    21fa:	d1e9      	bne.n	21d0 <__adddf3+0x10c>
    21fc:	f091 0f00 	teq	r1, #0
    2200:	bf04      	itt	eq
    2202:	4601      	moveq	r1, r0
    2204:	2000      	moveq	r0, #0
    2206:	fab1 f381 	clz	r3, r1
    220a:	bf08      	it	eq
    220c:	3320      	addeq	r3, #32
    220e:	f1a3 030b 	sub.w	r3, r3, #11
    2212:	f1b3 0220 	subs.w	r2, r3, #32
    2216:	da0c      	bge.n	2232 <__adddf3+0x16e>
    2218:	320c      	adds	r2, #12
    221a:	dd08      	ble.n	222e <__adddf3+0x16a>
    221c:	f102 0c14 	add.w	ip, r2, #20
    2220:	f1c2 020c 	rsb	r2, r2, #12
    2224:	fa01 f00c 	lsl.w	r0, r1, ip
    2228:	fa21 f102 	lsr.w	r1, r1, r2
    222c:	e00c      	b.n	2248 <__adddf3+0x184>
    222e:	f102 0214 	add.w	r2, r2, #20
    2232:	bfd8      	it	le
    2234:	f1c2 0c20 	rsble	ip, r2, #32
    2238:	fa01 f102 	lsl.w	r1, r1, r2
    223c:	fa20 fc0c 	lsr.w	ip, r0, ip
    2240:	bfdc      	itt	le
    2242:	ea41 010c 	orrle.w	r1, r1, ip
    2246:	4090      	lslle	r0, r2
    2248:	1ae4      	subs	r4, r4, r3
    224a:	bfa2      	ittt	ge
    224c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    2250:	4329      	orrge	r1, r5
    2252:	bd30      	popge	{r4, r5, pc}
    2254:	ea6f 0404 	mvn.w	r4, r4
    2258:	3c1f      	subs	r4, #31
    225a:	da1c      	bge.n	2296 <__adddf3+0x1d2>
    225c:	340c      	adds	r4, #12
    225e:	dc0e      	bgt.n	227e <__adddf3+0x1ba>
    2260:	f104 0414 	add.w	r4, r4, #20
    2264:	f1c4 0220 	rsb	r2, r4, #32
    2268:	fa20 f004 	lsr.w	r0, r0, r4
    226c:	fa01 f302 	lsl.w	r3, r1, r2
    2270:	ea40 0003 	orr.w	r0, r0, r3
    2274:	fa21 f304 	lsr.w	r3, r1, r4
    2278:	ea45 0103 	orr.w	r1, r5, r3
    227c:	bd30      	pop	{r4, r5, pc}
    227e:	f1c4 040c 	rsb	r4, r4, #12
    2282:	f1c4 0220 	rsb	r2, r4, #32
    2286:	fa20 f002 	lsr.w	r0, r0, r2
    228a:	fa01 f304 	lsl.w	r3, r1, r4
    228e:	ea40 0003 	orr.w	r0, r0, r3
    2292:	4629      	mov	r1, r5
    2294:	bd30      	pop	{r4, r5, pc}
    2296:	fa21 f004 	lsr.w	r0, r1, r4
    229a:	4629      	mov	r1, r5
    229c:	bd30      	pop	{r4, r5, pc}
    229e:	f094 0f00 	teq	r4, #0
    22a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    22a6:	bf06      	itte	eq
    22a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    22ac:	3401      	addeq	r4, #1
    22ae:	3d01      	subne	r5, #1
    22b0:	e74e      	b.n	2150 <__adddf3+0x8c>
    22b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    22b6:	bf18      	it	ne
    22b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    22bc:	d029      	beq.n	2312 <__adddf3+0x24e>
    22be:	ea94 0f05 	teq	r4, r5
    22c2:	bf08      	it	eq
    22c4:	ea90 0f02 	teqeq	r0, r2
    22c8:	d005      	beq.n	22d6 <__adddf3+0x212>
    22ca:	ea54 0c00 	orrs.w	ip, r4, r0
    22ce:	bf04      	itt	eq
    22d0:	4619      	moveq	r1, r3
    22d2:	4610      	moveq	r0, r2
    22d4:	bd30      	pop	{r4, r5, pc}
    22d6:	ea91 0f03 	teq	r1, r3
    22da:	bf1e      	ittt	ne
    22dc:	2100      	movne	r1, #0
    22de:	2000      	movne	r0, #0
    22e0:	bd30      	popne	{r4, r5, pc}
    22e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    22e6:	d105      	bne.n	22f4 <__adddf3+0x230>
    22e8:	0040      	lsls	r0, r0, #1
    22ea:	4149      	adcs	r1, r1
    22ec:	bf28      	it	cs
    22ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    22f2:	bd30      	pop	{r4, r5, pc}
    22f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    22f8:	bf3c      	itt	cc
    22fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    22fe:	bd30      	popcc	{r4, r5, pc}
    2300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2304:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    2308:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    230c:	f04f 0000 	mov.w	r0, #0
    2310:	bd30      	pop	{r4, r5, pc}
    2312:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    2316:	bf1a      	itte	ne
    2318:	4619      	movne	r1, r3
    231a:	4610      	movne	r0, r2
    231c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    2320:	bf1c      	itt	ne
    2322:	460b      	movne	r3, r1
    2324:	4602      	movne	r2, r0
    2326:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    232a:	bf06      	itte	eq
    232c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    2330:	ea91 0f03 	teqeq	r1, r3
    2334:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    2338:	bd30      	pop	{r4, r5, pc}
    233a:	bf00      	nop

0000233c <__aeabi_ui2d>:
    233c:	f090 0f00 	teq	r0, #0
    2340:	bf04      	itt	eq
    2342:	2100      	moveq	r1, #0
    2344:	4770      	bxeq	lr
    2346:	b530      	push	{r4, r5, lr}
    2348:	f44f 6480 	mov.w	r4, #1024	; 0x400
    234c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2350:	f04f 0500 	mov.w	r5, #0
    2354:	f04f 0100 	mov.w	r1, #0
    2358:	e750      	b.n	21fc <__adddf3+0x138>
    235a:	bf00      	nop

0000235c <__aeabi_i2d>:
    235c:	f090 0f00 	teq	r0, #0
    2360:	bf04      	itt	eq
    2362:	2100      	moveq	r1, #0
    2364:	4770      	bxeq	lr
    2366:	b530      	push	{r4, r5, lr}
    2368:	f44f 6480 	mov.w	r4, #1024	; 0x400
    236c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2370:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    2374:	bf48      	it	mi
    2376:	4240      	negmi	r0, r0
    2378:	f04f 0100 	mov.w	r1, #0
    237c:	e73e      	b.n	21fc <__adddf3+0x138>
    237e:	bf00      	nop

00002380 <__aeabi_f2d>:
    2380:	0042      	lsls	r2, r0, #1
    2382:	ea4f 01e2 	mov.w	r1, r2, asr #3
    2386:	ea4f 0131 	mov.w	r1, r1, rrx
    238a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    238e:	bf1f      	itttt	ne
    2390:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    2394:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2398:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    239c:	4770      	bxne	lr
    239e:	f092 0f00 	teq	r2, #0
    23a2:	bf14      	ite	ne
    23a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    23a8:	4770      	bxeq	lr
    23aa:	b530      	push	{r4, r5, lr}
    23ac:	f44f 7460 	mov.w	r4, #896	; 0x380
    23b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    23b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    23b8:	e720      	b.n	21fc <__adddf3+0x138>
    23ba:	bf00      	nop

000023bc <__aeabi_ul2d>:
    23bc:	ea50 0201 	orrs.w	r2, r0, r1
    23c0:	bf08      	it	eq
    23c2:	4770      	bxeq	lr
    23c4:	b530      	push	{r4, r5, lr}
    23c6:	f04f 0500 	mov.w	r5, #0
    23ca:	e00a      	b.n	23e2 <__aeabi_l2d+0x16>

000023cc <__aeabi_l2d>:
    23cc:	ea50 0201 	orrs.w	r2, r0, r1
    23d0:	bf08      	it	eq
    23d2:	4770      	bxeq	lr
    23d4:	b530      	push	{r4, r5, lr}
    23d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    23da:	d502      	bpl.n	23e2 <__aeabi_l2d+0x16>
    23dc:	4240      	negs	r0, r0
    23de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    23e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    23e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    23ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    23ee:	f43f aedc 	beq.w	21aa <__adddf3+0xe6>
    23f2:	f04f 0203 	mov.w	r2, #3
    23f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    23fa:	bf18      	it	ne
    23fc:	3203      	addne	r2, #3
    23fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    2402:	bf18      	it	ne
    2404:	3203      	addne	r2, #3
    2406:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    240a:	f1c2 0320 	rsb	r3, r2, #32
    240e:	fa00 fc03 	lsl.w	ip, r0, r3
    2412:	fa20 f002 	lsr.w	r0, r0, r2
    2416:	fa01 fe03 	lsl.w	lr, r1, r3
    241a:	ea40 000e 	orr.w	r0, r0, lr
    241e:	fa21 f102 	lsr.w	r1, r1, r2
    2422:	4414      	add	r4, r2
    2424:	e6c1      	b.n	21aa <__adddf3+0xe6>
    2426:	bf00      	nop

00002428 <__aeabi_dmul>:
    2428:	b570      	push	{r4, r5, r6, lr}
    242a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    242e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2432:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    2436:	bf1d      	ittte	ne
    2438:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    243c:	ea94 0f0c 	teqne	r4, ip
    2440:	ea95 0f0c 	teqne	r5, ip
    2444:	f000 f8de 	bleq	2604 <__aeabi_dmul+0x1dc>
    2448:	442c      	add	r4, r5
    244a:	ea81 0603 	eor.w	r6, r1, r3
    244e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    2452:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    2456:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    245a:	bf18      	it	ne
    245c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    2460:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2468:	d038      	beq.n	24dc <__aeabi_dmul+0xb4>
    246a:	fba0 ce02 	umull	ip, lr, r0, r2
    246e:	f04f 0500 	mov.w	r5, #0
    2472:	fbe1 e502 	umlal	lr, r5, r1, r2
    2476:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    247a:	fbe0 e503 	umlal	lr, r5, r0, r3
    247e:	f04f 0600 	mov.w	r6, #0
    2482:	fbe1 5603 	umlal	r5, r6, r1, r3
    2486:	f09c 0f00 	teq	ip, #0
    248a:	bf18      	it	ne
    248c:	f04e 0e01 	orrne.w	lr, lr, #1
    2490:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    2494:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    2498:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    249c:	d204      	bcs.n	24a8 <__aeabi_dmul+0x80>
    249e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    24a2:	416d      	adcs	r5, r5
    24a4:	eb46 0606 	adc.w	r6, r6, r6
    24a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    24ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    24b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    24b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    24b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    24bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    24c0:	bf88      	it	hi
    24c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    24c6:	d81e      	bhi.n	2506 <__aeabi_dmul+0xde>
    24c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    24cc:	bf08      	it	eq
    24ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    24d2:	f150 0000 	adcs.w	r0, r0, #0
    24d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    24da:	bd70      	pop	{r4, r5, r6, pc}
    24dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    24e0:	ea46 0101 	orr.w	r1, r6, r1
    24e4:	ea40 0002 	orr.w	r0, r0, r2
    24e8:	ea81 0103 	eor.w	r1, r1, r3
    24ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    24f0:	bfc2      	ittt	gt
    24f2:	ebd4 050c 	rsbsgt	r5, r4, ip
    24f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    24fa:	bd70      	popgt	{r4, r5, r6, pc}
    24fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2500:	f04f 0e00 	mov.w	lr, #0
    2504:	3c01      	subs	r4, #1
    2506:	f300 80ab 	bgt.w	2660 <__aeabi_dmul+0x238>
    250a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    250e:	bfde      	ittt	le
    2510:	2000      	movle	r0, #0
    2512:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    2516:	bd70      	pople	{r4, r5, r6, pc}
    2518:	f1c4 0400 	rsb	r4, r4, #0
    251c:	3c20      	subs	r4, #32
    251e:	da35      	bge.n	258c <__aeabi_dmul+0x164>
    2520:	340c      	adds	r4, #12
    2522:	dc1b      	bgt.n	255c <__aeabi_dmul+0x134>
    2524:	f104 0414 	add.w	r4, r4, #20
    2528:	f1c4 0520 	rsb	r5, r4, #32
    252c:	fa00 f305 	lsl.w	r3, r0, r5
    2530:	fa20 f004 	lsr.w	r0, r0, r4
    2534:	fa01 f205 	lsl.w	r2, r1, r5
    2538:	ea40 0002 	orr.w	r0, r0, r2
    253c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    2540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    2548:	fa21 f604 	lsr.w	r6, r1, r4
    254c:	eb42 0106 	adc.w	r1, r2, r6
    2550:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2554:	bf08      	it	eq
    2556:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    255a:	bd70      	pop	{r4, r5, r6, pc}
    255c:	f1c4 040c 	rsb	r4, r4, #12
    2560:	f1c4 0520 	rsb	r5, r4, #32
    2564:	fa00 f304 	lsl.w	r3, r0, r4
    2568:	fa20 f005 	lsr.w	r0, r0, r5
    256c:	fa01 f204 	lsl.w	r2, r1, r4
    2570:	ea40 0002 	orr.w	r0, r0, r2
    2574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2578:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    257c:	f141 0100 	adc.w	r1, r1, #0
    2580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2584:	bf08      	it	eq
    2586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	f1c4 0520 	rsb	r5, r4, #32
    2590:	fa00 f205 	lsl.w	r2, r0, r5
    2594:	ea4e 0e02 	orr.w	lr, lr, r2
    2598:	fa20 f304 	lsr.w	r3, r0, r4
    259c:	fa01 f205 	lsl.w	r2, r1, r5
    25a0:	ea43 0302 	orr.w	r3, r3, r2
    25a4:	fa21 f004 	lsr.w	r0, r1, r4
    25a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    25ac:	fa21 f204 	lsr.w	r2, r1, r4
    25b0:	ea20 0002 	bic.w	r0, r0, r2
    25b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    25b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    25bc:	bf08      	it	eq
    25be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    25c2:	bd70      	pop	{r4, r5, r6, pc}
    25c4:	f094 0f00 	teq	r4, #0
    25c8:	d10f      	bne.n	25ea <__aeabi_dmul+0x1c2>
    25ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    25ce:	0040      	lsls	r0, r0, #1
    25d0:	eb41 0101 	adc.w	r1, r1, r1
    25d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    25d8:	bf08      	it	eq
    25da:	3c01      	subeq	r4, #1
    25dc:	d0f7      	beq.n	25ce <__aeabi_dmul+0x1a6>
    25de:	ea41 0106 	orr.w	r1, r1, r6
    25e2:	f095 0f00 	teq	r5, #0
    25e6:	bf18      	it	ne
    25e8:	4770      	bxne	lr
    25ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    25ee:	0052      	lsls	r2, r2, #1
    25f0:	eb43 0303 	adc.w	r3, r3, r3
    25f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    25f8:	bf08      	it	eq
    25fa:	3d01      	subeq	r5, #1
    25fc:	d0f7      	beq.n	25ee <__aeabi_dmul+0x1c6>
    25fe:	ea43 0306 	orr.w	r3, r3, r6
    2602:	4770      	bx	lr
    2604:	ea94 0f0c 	teq	r4, ip
    2608:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    260c:	bf18      	it	ne
    260e:	ea95 0f0c 	teqne	r5, ip
    2612:	d00c      	beq.n	262e <__aeabi_dmul+0x206>
    2614:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2618:	bf18      	it	ne
    261a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    261e:	d1d1      	bne.n	25c4 <__aeabi_dmul+0x19c>
    2620:	ea81 0103 	eor.w	r1, r1, r3
    2624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2628:	f04f 0000 	mov.w	r0, #0
    262c:	bd70      	pop	{r4, r5, r6, pc}
    262e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2632:	bf06      	itte	eq
    2634:	4610      	moveq	r0, r2
    2636:	4619      	moveq	r1, r3
    2638:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    263c:	d019      	beq.n	2672 <__aeabi_dmul+0x24a>
    263e:	ea94 0f0c 	teq	r4, ip
    2642:	d102      	bne.n	264a <__aeabi_dmul+0x222>
    2644:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    2648:	d113      	bne.n	2672 <__aeabi_dmul+0x24a>
    264a:	ea95 0f0c 	teq	r5, ip
    264e:	d105      	bne.n	265c <__aeabi_dmul+0x234>
    2650:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    2654:	bf1c      	itt	ne
    2656:	4610      	movne	r0, r2
    2658:	4619      	movne	r1, r3
    265a:	d10a      	bne.n	2672 <__aeabi_dmul+0x24a>
    265c:	ea81 0103 	eor.w	r1, r1, r3
    2660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2664:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2668:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    266c:	f04f 0000 	mov.w	r0, #0
    2670:	bd70      	pop	{r4, r5, r6, pc}
    2672:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2676:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    267a:	bd70      	pop	{r4, r5, r6, pc}

0000267c <__aeabi_ddiv>:
    267c:	b570      	push	{r4, r5, r6, lr}
    267e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2682:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2686:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    268a:	bf1d      	ittte	ne
    268c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    2690:	ea94 0f0c 	teqne	r4, ip
    2694:	ea95 0f0c 	teqne	r5, ip
    2698:	f000 f8a7 	bleq	27ea <__aeabi_ddiv+0x16e>
    269c:	eba4 0405 	sub.w	r4, r4, r5
    26a0:	ea81 0e03 	eor.w	lr, r1, r3
    26a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    26a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    26ac:	f000 8088 	beq.w	27c0 <__aeabi_ddiv+0x144>
    26b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    26b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    26b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    26bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    26c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    26c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    26c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    26cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    26d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    26d4:	429d      	cmp	r5, r3
    26d6:	bf08      	it	eq
    26d8:	4296      	cmpeq	r6, r2
    26da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    26de:	f504 7440 	add.w	r4, r4, #768	; 0x300
    26e2:	d202      	bcs.n	26ea <__aeabi_ddiv+0x6e>
    26e4:	085b      	lsrs	r3, r3, #1
    26e6:	ea4f 0232 	mov.w	r2, r2, rrx
    26ea:	1ab6      	subs	r6, r6, r2
    26ec:	eb65 0503 	sbc.w	r5, r5, r3
    26f0:	085b      	lsrs	r3, r3, #1
    26f2:	ea4f 0232 	mov.w	r2, r2, rrx
    26f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    26fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    26fe:	ebb6 0e02 	subs.w	lr, r6, r2
    2702:	eb75 0e03 	sbcs.w	lr, r5, r3
    2706:	bf22      	ittt	cs
    2708:	1ab6      	subcs	r6, r6, r2
    270a:	4675      	movcs	r5, lr
    270c:	ea40 000c 	orrcs.w	r0, r0, ip
    2710:	085b      	lsrs	r3, r3, #1
    2712:	ea4f 0232 	mov.w	r2, r2, rrx
    2716:	ebb6 0e02 	subs.w	lr, r6, r2
    271a:	eb75 0e03 	sbcs.w	lr, r5, r3
    271e:	bf22      	ittt	cs
    2720:	1ab6      	subcs	r6, r6, r2
    2722:	4675      	movcs	r5, lr
    2724:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    2728:	085b      	lsrs	r3, r3, #1
    272a:	ea4f 0232 	mov.w	r2, r2, rrx
    272e:	ebb6 0e02 	subs.w	lr, r6, r2
    2732:	eb75 0e03 	sbcs.w	lr, r5, r3
    2736:	bf22      	ittt	cs
    2738:	1ab6      	subcs	r6, r6, r2
    273a:	4675      	movcs	r5, lr
    273c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    2740:	085b      	lsrs	r3, r3, #1
    2742:	ea4f 0232 	mov.w	r2, r2, rrx
    2746:	ebb6 0e02 	subs.w	lr, r6, r2
    274a:	eb75 0e03 	sbcs.w	lr, r5, r3
    274e:	bf22      	ittt	cs
    2750:	1ab6      	subcs	r6, r6, r2
    2752:	4675      	movcs	r5, lr
    2754:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    2758:	ea55 0e06 	orrs.w	lr, r5, r6
    275c:	d018      	beq.n	2790 <__aeabi_ddiv+0x114>
    275e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    2762:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    2766:	ea4f 1606 	mov.w	r6, r6, lsl #4
    276a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    276e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    2772:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    2776:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    277a:	d1c0      	bne.n	26fe <__aeabi_ddiv+0x82>
    277c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2780:	d10b      	bne.n	279a <__aeabi_ddiv+0x11e>
    2782:	ea41 0100 	orr.w	r1, r1, r0
    2786:	f04f 0000 	mov.w	r0, #0
    278a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    278e:	e7b6      	b.n	26fe <__aeabi_ddiv+0x82>
    2790:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2794:	bf04      	itt	eq
    2796:	4301      	orreq	r1, r0
    2798:	2000      	moveq	r0, #0
    279a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    279e:	bf88      	it	hi
    27a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    27a4:	f63f aeaf 	bhi.w	2506 <__aeabi_dmul+0xde>
    27a8:	ebb5 0c03 	subs.w	ip, r5, r3
    27ac:	bf04      	itt	eq
    27ae:	ebb6 0c02 	subseq.w	ip, r6, r2
    27b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    27b6:	f150 0000 	adcs.w	r0, r0, #0
    27ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    27be:	bd70      	pop	{r4, r5, r6, pc}
    27c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    27c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    27c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    27cc:	bfc2      	ittt	gt
    27ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    27d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    27d6:	bd70      	popgt	{r4, r5, r6, pc}
    27d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    27dc:	f04f 0e00 	mov.w	lr, #0
    27e0:	3c01      	subs	r4, #1
    27e2:	e690      	b.n	2506 <__aeabi_dmul+0xde>
    27e4:	ea45 0e06 	orr.w	lr, r5, r6
    27e8:	e68d      	b.n	2506 <__aeabi_dmul+0xde>
    27ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    27ee:	ea94 0f0c 	teq	r4, ip
    27f2:	bf08      	it	eq
    27f4:	ea95 0f0c 	teqeq	r5, ip
    27f8:	f43f af3b 	beq.w	2672 <__aeabi_dmul+0x24a>
    27fc:	ea94 0f0c 	teq	r4, ip
    2800:	d10a      	bne.n	2818 <__aeabi_ddiv+0x19c>
    2802:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    2806:	f47f af34 	bne.w	2672 <__aeabi_dmul+0x24a>
    280a:	ea95 0f0c 	teq	r5, ip
    280e:	f47f af25 	bne.w	265c <__aeabi_dmul+0x234>
    2812:	4610      	mov	r0, r2
    2814:	4619      	mov	r1, r3
    2816:	e72c      	b.n	2672 <__aeabi_dmul+0x24a>
    2818:	ea95 0f0c 	teq	r5, ip
    281c:	d106      	bne.n	282c <__aeabi_ddiv+0x1b0>
    281e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    2822:	f43f aefd 	beq.w	2620 <__aeabi_dmul+0x1f8>
    2826:	4610      	mov	r0, r2
    2828:	4619      	mov	r1, r3
    282a:	e722      	b.n	2672 <__aeabi_dmul+0x24a>
    282c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2830:	bf18      	it	ne
    2832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2836:	f47f aec5 	bne.w	25c4 <__aeabi_dmul+0x19c>
    283a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    283e:	f47f af0d 	bne.w	265c <__aeabi_dmul+0x234>
    2842:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    2846:	f47f aeeb 	bne.w	2620 <__aeabi_dmul+0x1f8>
    284a:	e712      	b.n	2672 <__aeabi_dmul+0x24a>

0000284c <__aeabi_d2uiz>:
    284c:	004a      	lsls	r2, r1, #1
    284e:	d211      	bcs.n	2874 <__aeabi_d2uiz+0x28>
    2850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    2854:	d211      	bcs.n	287a <__aeabi_d2uiz+0x2e>
    2856:	d50d      	bpl.n	2874 <__aeabi_d2uiz+0x28>
    2858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    285c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    2860:	d40e      	bmi.n	2880 <__aeabi_d2uiz+0x34>
    2862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    2866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    286a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    286e:	fa23 f002 	lsr.w	r0, r3, r2
    2872:	4770      	bx	lr
    2874:	f04f 0000 	mov.w	r0, #0
    2878:	4770      	bx	lr
    287a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    287e:	d102      	bne.n	2886 <__aeabi_d2uiz+0x3a>
    2880:	f04f 30ff 	mov.w	r0, #4294967295
    2884:	4770      	bx	lr
    2886:	f04f 0000 	mov.w	r0, #0
    288a:	4770      	bx	lr

0000288c <__sflush_r>:
    288c:	898a      	ldrh	r2, [r1, #12]
    288e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2892:	4605      	mov	r5, r0
    2894:	0710      	lsls	r0, r2, #28
    2896:	460c      	mov	r4, r1
    2898:	d45a      	bmi.n	2950 <__sflush_r+0xc4>
    289a:	684b      	ldr	r3, [r1, #4]
    289c:	2b00      	cmp	r3, #0
    289e:	dc05      	bgt.n	28ac <__sflush_r+0x20>
    28a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    28a2:	2b00      	cmp	r3, #0
    28a4:	dc02      	bgt.n	28ac <__sflush_r+0x20>
    28a6:	2000      	movs	r0, #0
    28a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    28ae:	2e00      	cmp	r6, #0
    28b0:	d0f9      	beq.n	28a6 <__sflush_r+0x1a>
    28b2:	2300      	movs	r3, #0
    28b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    28b8:	682f      	ldr	r7, [r5, #0]
    28ba:	602b      	str	r3, [r5, #0]
    28bc:	d033      	beq.n	2926 <__sflush_r+0x9a>
    28be:	6d60      	ldr	r0, [r4, #84]	; 0x54
    28c0:	89a3      	ldrh	r3, [r4, #12]
    28c2:	075a      	lsls	r2, r3, #29
    28c4:	d505      	bpl.n	28d2 <__sflush_r+0x46>
    28c6:	6863      	ldr	r3, [r4, #4]
    28c8:	1ac0      	subs	r0, r0, r3
    28ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    28cc:	b10b      	cbz	r3, 28d2 <__sflush_r+0x46>
    28ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
    28d0:	1ac0      	subs	r0, r0, r3
    28d2:	2300      	movs	r3, #0
    28d4:	4602      	mov	r2, r0
    28d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    28d8:	6a21      	ldr	r1, [r4, #32]
    28da:	4628      	mov	r0, r5
    28dc:	47b0      	blx	r6
    28de:	1c43      	adds	r3, r0, #1
    28e0:	89a3      	ldrh	r3, [r4, #12]
    28e2:	d106      	bne.n	28f2 <__sflush_r+0x66>
    28e4:	6829      	ldr	r1, [r5, #0]
    28e6:	291d      	cmp	r1, #29
    28e8:	d84b      	bhi.n	2982 <__sflush_r+0xf6>
    28ea:	4a2b      	ldr	r2, [pc, #172]	; (2998 <__sflush_r+0x10c>)
    28ec:	40ca      	lsrs	r2, r1
    28ee:	07d6      	lsls	r6, r2, #31
    28f0:	d547      	bpl.n	2982 <__sflush_r+0xf6>
    28f2:	2200      	movs	r2, #0
    28f4:	6062      	str	r2, [r4, #4]
    28f6:	04d9      	lsls	r1, r3, #19
    28f8:	6922      	ldr	r2, [r4, #16]
    28fa:	6022      	str	r2, [r4, #0]
    28fc:	d504      	bpl.n	2908 <__sflush_r+0x7c>
    28fe:	1c42      	adds	r2, r0, #1
    2900:	d101      	bne.n	2906 <__sflush_r+0x7a>
    2902:	682b      	ldr	r3, [r5, #0]
    2904:	b903      	cbnz	r3, 2908 <__sflush_r+0x7c>
    2906:	6560      	str	r0, [r4, #84]	; 0x54
    2908:	6b61      	ldr	r1, [r4, #52]	; 0x34
    290a:	602f      	str	r7, [r5, #0]
    290c:	2900      	cmp	r1, #0
    290e:	d0ca      	beq.n	28a6 <__sflush_r+0x1a>
    2910:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2914:	4299      	cmp	r1, r3
    2916:	d002      	beq.n	291e <__sflush_r+0x92>
    2918:	4628      	mov	r0, r5
    291a:	f000 f98d 	bl	2c38 <_free_r>
    291e:	2000      	movs	r0, #0
    2920:	6360      	str	r0, [r4, #52]	; 0x34
    2922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2926:	6a21      	ldr	r1, [r4, #32]
    2928:	2301      	movs	r3, #1
    292a:	4628      	mov	r0, r5
    292c:	47b0      	blx	r6
    292e:	1c41      	adds	r1, r0, #1
    2930:	d1c6      	bne.n	28c0 <__sflush_r+0x34>
    2932:	682b      	ldr	r3, [r5, #0]
    2934:	2b00      	cmp	r3, #0
    2936:	d0c3      	beq.n	28c0 <__sflush_r+0x34>
    2938:	2b1d      	cmp	r3, #29
    293a:	d001      	beq.n	2940 <__sflush_r+0xb4>
    293c:	2b16      	cmp	r3, #22
    293e:	d101      	bne.n	2944 <__sflush_r+0xb8>
    2940:	602f      	str	r7, [r5, #0]
    2942:	e7b0      	b.n	28a6 <__sflush_r+0x1a>
    2944:	89a3      	ldrh	r3, [r4, #12]
    2946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    294a:	81a3      	strh	r3, [r4, #12]
    294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2950:	690f      	ldr	r7, [r1, #16]
    2952:	2f00      	cmp	r7, #0
    2954:	d0a7      	beq.n	28a6 <__sflush_r+0x1a>
    2956:	0793      	lsls	r3, r2, #30
    2958:	680e      	ldr	r6, [r1, #0]
    295a:	bf08      	it	eq
    295c:	694b      	ldreq	r3, [r1, #20]
    295e:	600f      	str	r7, [r1, #0]
    2960:	bf18      	it	ne
    2962:	2300      	movne	r3, #0
    2964:	eba6 0807 	sub.w	r8, r6, r7
    2968:	608b      	str	r3, [r1, #8]
    296a:	f1b8 0f00 	cmp.w	r8, #0
    296e:	dd9a      	ble.n	28a6 <__sflush_r+0x1a>
    2970:	4643      	mov	r3, r8
    2972:	463a      	mov	r2, r7
    2974:	6a21      	ldr	r1, [r4, #32]
    2976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2978:	4628      	mov	r0, r5
    297a:	47b0      	blx	r6
    297c:	2800      	cmp	r0, #0
    297e:	dc07      	bgt.n	2990 <__sflush_r+0x104>
    2980:	89a3      	ldrh	r3, [r4, #12]
    2982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2986:	81a3      	strh	r3, [r4, #12]
    2988:	f04f 30ff 	mov.w	r0, #4294967295
    298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2990:	4407      	add	r7, r0
    2992:	eba8 0800 	sub.w	r8, r8, r0
    2996:	e7e8      	b.n	296a <__sflush_r+0xde>
    2998:	20400001 	.word	0x20400001

0000299c <_fflush_r>:
    299c:	b538      	push	{r3, r4, r5, lr}
    299e:	690b      	ldr	r3, [r1, #16]
    29a0:	4605      	mov	r5, r0
    29a2:	460c      	mov	r4, r1
    29a4:	b1db      	cbz	r3, 29de <_fflush_r+0x42>
    29a6:	b118      	cbz	r0, 29b0 <_fflush_r+0x14>
    29a8:	6983      	ldr	r3, [r0, #24]
    29aa:	b90b      	cbnz	r3, 29b0 <_fflush_r+0x14>
    29ac:	f000 f872 	bl	2a94 <__sinit>
    29b0:	4b0c      	ldr	r3, [pc, #48]	; (29e4 <_fflush_r+0x48>)
    29b2:	429c      	cmp	r4, r3
    29b4:	d109      	bne.n	29ca <_fflush_r+0x2e>
    29b6:	686c      	ldr	r4, [r5, #4]
    29b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    29bc:	b17b      	cbz	r3, 29de <_fflush_r+0x42>
    29be:	4621      	mov	r1, r4
    29c0:	4628      	mov	r0, r5
    29c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    29c6:	f7ff bf61 	b.w	288c <__sflush_r>
    29ca:	4b07      	ldr	r3, [pc, #28]	; (29e8 <_fflush_r+0x4c>)
    29cc:	429c      	cmp	r4, r3
    29ce:	d101      	bne.n	29d4 <_fflush_r+0x38>
    29d0:	68ac      	ldr	r4, [r5, #8]
    29d2:	e7f1      	b.n	29b8 <_fflush_r+0x1c>
    29d4:	4b05      	ldr	r3, [pc, #20]	; (29ec <_fflush_r+0x50>)
    29d6:	429c      	cmp	r4, r3
    29d8:	bf08      	it	eq
    29da:	68ec      	ldreq	r4, [r5, #12]
    29dc:	e7ec      	b.n	29b8 <_fflush_r+0x1c>
    29de:	2000      	movs	r0, #0
    29e0:	bd38      	pop	{r3, r4, r5, pc}
    29e2:	bf00      	nop
    29e4:	00005118 	.word	0x00005118
    29e8:	00005138 	.word	0x00005138
    29ec:	000050f8 	.word	0x000050f8

000029f0 <fflush>:
    29f0:	4601      	mov	r1, r0
    29f2:	b920      	cbnz	r0, 29fe <fflush+0xe>
    29f4:	4b04      	ldr	r3, [pc, #16]	; (2a08 <fflush+0x18>)
    29f6:	4905      	ldr	r1, [pc, #20]	; (2a0c <fflush+0x1c>)
    29f8:	6818      	ldr	r0, [r3, #0]
    29fa:	f000 b8d3 	b.w	2ba4 <_fwalk_reent>
    29fe:	4b04      	ldr	r3, [pc, #16]	; (2a10 <fflush+0x20>)
    2a00:	6818      	ldr	r0, [r3, #0]
    2a02:	f7ff bfcb 	b.w	299c <_fflush_r>
    2a06:	bf00      	nop
    2a08:	00005158 	.word	0x00005158
    2a0c:	0000299d 	.word	0x0000299d
    2a10:	2000026c 	.word	0x2000026c

00002a14 <_cleanup_r>:
    2a14:	4901      	ldr	r1, [pc, #4]	; (2a1c <_cleanup_r+0x8>)
    2a16:	f000 b8c5 	b.w	2ba4 <_fwalk_reent>
    2a1a:	bf00      	nop
    2a1c:	0000299d 	.word	0x0000299d

00002a20 <std.isra.0>:
    2a20:	2300      	movs	r3, #0
    2a22:	b510      	push	{r4, lr}
    2a24:	4604      	mov	r4, r0
    2a26:	6003      	str	r3, [r0, #0]
    2a28:	6043      	str	r3, [r0, #4]
    2a2a:	6083      	str	r3, [r0, #8]
    2a2c:	8181      	strh	r1, [r0, #12]
    2a2e:	6643      	str	r3, [r0, #100]	; 0x64
    2a30:	81c2      	strh	r2, [r0, #14]
    2a32:	6103      	str	r3, [r0, #16]
    2a34:	6143      	str	r3, [r0, #20]
    2a36:	6183      	str	r3, [r0, #24]
    2a38:	4619      	mov	r1, r3
    2a3a:	2208      	movs	r2, #8
    2a3c:	305c      	adds	r0, #92	; 0x5c
    2a3e:	f000 f8f3 	bl	2c28 <memset>
    2a42:	4b05      	ldr	r3, [pc, #20]	; (2a58 <std.isra.0+0x38>)
    2a44:	6263      	str	r3, [r4, #36]	; 0x24
    2a46:	4b05      	ldr	r3, [pc, #20]	; (2a5c <std.isra.0+0x3c>)
    2a48:	62a3      	str	r3, [r4, #40]	; 0x28
    2a4a:	4b05      	ldr	r3, [pc, #20]	; (2a60 <std.isra.0+0x40>)
    2a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    2a4e:	4b05      	ldr	r3, [pc, #20]	; (2a64 <std.isra.0+0x44>)
    2a50:	6224      	str	r4, [r4, #32]
    2a52:	6323      	str	r3, [r4, #48]	; 0x30
    2a54:	bd10      	pop	{r4, pc}
    2a56:	bf00      	nop
    2a58:	000030f5 	.word	0x000030f5
    2a5c:	00003117 	.word	0x00003117
    2a60:	0000314f 	.word	0x0000314f
    2a64:	00003173 	.word	0x00003173

00002a68 <__sfmoreglue>:
    2a68:	b570      	push	{r4, r5, r6, lr}
    2a6a:	1e4a      	subs	r2, r1, #1
    2a6c:	2568      	movs	r5, #104	; 0x68
    2a6e:	4355      	muls	r5, r2
    2a70:	460e      	mov	r6, r1
    2a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
    2a76:	f000 f92d 	bl	2cd4 <_malloc_r>
    2a7a:	4604      	mov	r4, r0
    2a7c:	b140      	cbz	r0, 2a90 <__sfmoreglue+0x28>
    2a7e:	2100      	movs	r1, #0
    2a80:	e880 0042 	stmia.w	r0, {r1, r6}
    2a84:	300c      	adds	r0, #12
    2a86:	60a0      	str	r0, [r4, #8]
    2a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2a8c:	f000 f8cc 	bl	2c28 <memset>
    2a90:	4620      	mov	r0, r4
    2a92:	bd70      	pop	{r4, r5, r6, pc}

00002a94 <__sinit>:
    2a94:	6983      	ldr	r3, [r0, #24]
    2a96:	b510      	push	{r4, lr}
    2a98:	4604      	mov	r4, r0
    2a9a:	bb33      	cbnz	r3, 2aea <__sinit+0x56>
    2a9c:	6483      	str	r3, [r0, #72]	; 0x48
    2a9e:	64c3      	str	r3, [r0, #76]	; 0x4c
    2aa0:	6503      	str	r3, [r0, #80]	; 0x50
    2aa2:	4b12      	ldr	r3, [pc, #72]	; (2aec <__sinit+0x58>)
    2aa4:	4a12      	ldr	r2, [pc, #72]	; (2af0 <__sinit+0x5c>)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	6282      	str	r2, [r0, #40]	; 0x28
    2aaa:	4298      	cmp	r0, r3
    2aac:	bf04      	itt	eq
    2aae:	2301      	moveq	r3, #1
    2ab0:	6183      	streq	r3, [r0, #24]
    2ab2:	f000 f81f 	bl	2af4 <__sfp>
    2ab6:	6060      	str	r0, [r4, #4]
    2ab8:	4620      	mov	r0, r4
    2aba:	f000 f81b 	bl	2af4 <__sfp>
    2abe:	60a0      	str	r0, [r4, #8]
    2ac0:	4620      	mov	r0, r4
    2ac2:	f000 f817 	bl	2af4 <__sfp>
    2ac6:	2200      	movs	r2, #0
    2ac8:	60e0      	str	r0, [r4, #12]
    2aca:	2104      	movs	r1, #4
    2acc:	6860      	ldr	r0, [r4, #4]
    2ace:	f7ff ffa7 	bl	2a20 <std.isra.0>
    2ad2:	2201      	movs	r2, #1
    2ad4:	2109      	movs	r1, #9
    2ad6:	68a0      	ldr	r0, [r4, #8]
    2ad8:	f7ff ffa2 	bl	2a20 <std.isra.0>
    2adc:	2202      	movs	r2, #2
    2ade:	2112      	movs	r1, #18
    2ae0:	68e0      	ldr	r0, [r4, #12]
    2ae2:	f7ff ff9d 	bl	2a20 <std.isra.0>
    2ae6:	2301      	movs	r3, #1
    2ae8:	61a3      	str	r3, [r4, #24]
    2aea:	bd10      	pop	{r4, pc}
    2aec:	00005158 	.word	0x00005158
    2af0:	00002a15 	.word	0x00002a15

00002af4 <__sfp>:
    2af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2af6:	4b1c      	ldr	r3, [pc, #112]	; (2b68 <__sfp+0x74>)
    2af8:	681e      	ldr	r6, [r3, #0]
    2afa:	69b3      	ldr	r3, [r6, #24]
    2afc:	4607      	mov	r7, r0
    2afe:	b913      	cbnz	r3, 2b06 <__sfp+0x12>
    2b00:	4630      	mov	r0, r6
    2b02:	f7ff ffc7 	bl	2a94 <__sinit>
    2b06:	3648      	adds	r6, #72	; 0x48
    2b08:	68b4      	ldr	r4, [r6, #8]
    2b0a:	6873      	ldr	r3, [r6, #4]
    2b0c:	3b01      	subs	r3, #1
    2b0e:	d503      	bpl.n	2b18 <__sfp+0x24>
    2b10:	6833      	ldr	r3, [r6, #0]
    2b12:	b133      	cbz	r3, 2b22 <__sfp+0x2e>
    2b14:	6836      	ldr	r6, [r6, #0]
    2b16:	e7f7      	b.n	2b08 <__sfp+0x14>
    2b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    2b1c:	b16d      	cbz	r5, 2b3a <__sfp+0x46>
    2b1e:	3468      	adds	r4, #104	; 0x68
    2b20:	e7f4      	b.n	2b0c <__sfp+0x18>
    2b22:	2104      	movs	r1, #4
    2b24:	4638      	mov	r0, r7
    2b26:	f7ff ff9f 	bl	2a68 <__sfmoreglue>
    2b2a:	6030      	str	r0, [r6, #0]
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d1f1      	bne.n	2b14 <__sfp+0x20>
    2b30:	230c      	movs	r3, #12
    2b32:	603b      	str	r3, [r7, #0]
    2b34:	4604      	mov	r4, r0
    2b36:	4620      	mov	r0, r4
    2b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b3e:	81e3      	strh	r3, [r4, #14]
    2b40:	2301      	movs	r3, #1
    2b42:	81a3      	strh	r3, [r4, #12]
    2b44:	6665      	str	r5, [r4, #100]	; 0x64
    2b46:	6025      	str	r5, [r4, #0]
    2b48:	60a5      	str	r5, [r4, #8]
    2b4a:	6065      	str	r5, [r4, #4]
    2b4c:	6125      	str	r5, [r4, #16]
    2b4e:	6165      	str	r5, [r4, #20]
    2b50:	61a5      	str	r5, [r4, #24]
    2b52:	2208      	movs	r2, #8
    2b54:	4629      	mov	r1, r5
    2b56:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2b5a:	f000 f865 	bl	2c28 <memset>
    2b5e:	6365      	str	r5, [r4, #52]	; 0x34
    2b60:	63a5      	str	r5, [r4, #56]	; 0x38
    2b62:	64a5      	str	r5, [r4, #72]	; 0x48
    2b64:	64e5      	str	r5, [r4, #76]	; 0x4c
    2b66:	e7e6      	b.n	2b36 <__sfp+0x42>
    2b68:	00005158 	.word	0x00005158

00002b6c <_fwalk>:
    2b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b70:	4688      	mov	r8, r1
    2b72:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2b76:	2600      	movs	r6, #0
    2b78:	b914      	cbnz	r4, 2b80 <_fwalk+0x14>
    2b7a:	4630      	mov	r0, r6
    2b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b80:	68a5      	ldr	r5, [r4, #8]
    2b82:	6867      	ldr	r7, [r4, #4]
    2b84:	3f01      	subs	r7, #1
    2b86:	d501      	bpl.n	2b8c <_fwalk+0x20>
    2b88:	6824      	ldr	r4, [r4, #0]
    2b8a:	e7f5      	b.n	2b78 <_fwalk+0xc>
    2b8c:	89ab      	ldrh	r3, [r5, #12]
    2b8e:	2b01      	cmp	r3, #1
    2b90:	d906      	bls.n	2ba0 <_fwalk+0x34>
    2b92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2b96:	3301      	adds	r3, #1
    2b98:	d002      	beq.n	2ba0 <_fwalk+0x34>
    2b9a:	4628      	mov	r0, r5
    2b9c:	47c0      	blx	r8
    2b9e:	4306      	orrs	r6, r0
    2ba0:	3568      	adds	r5, #104	; 0x68
    2ba2:	e7ef      	b.n	2b84 <_fwalk+0x18>

00002ba4 <_fwalk_reent>:
    2ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ba8:	4680      	mov	r8, r0
    2baa:	4689      	mov	r9, r1
    2bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2bb0:	2600      	movs	r6, #0
    2bb2:	b914      	cbnz	r4, 2bba <_fwalk_reent+0x16>
    2bb4:	4630      	mov	r0, r6
    2bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2bba:	68a5      	ldr	r5, [r4, #8]
    2bbc:	6867      	ldr	r7, [r4, #4]
    2bbe:	3f01      	subs	r7, #1
    2bc0:	d501      	bpl.n	2bc6 <_fwalk_reent+0x22>
    2bc2:	6824      	ldr	r4, [r4, #0]
    2bc4:	e7f5      	b.n	2bb2 <_fwalk_reent+0xe>
    2bc6:	89ab      	ldrh	r3, [r5, #12]
    2bc8:	2b01      	cmp	r3, #1
    2bca:	d907      	bls.n	2bdc <_fwalk_reent+0x38>
    2bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2bd0:	3301      	adds	r3, #1
    2bd2:	d003      	beq.n	2bdc <_fwalk_reent+0x38>
    2bd4:	4629      	mov	r1, r5
    2bd6:	4640      	mov	r0, r8
    2bd8:	47c8      	blx	r9
    2bda:	4306      	orrs	r6, r0
    2bdc:	3568      	adds	r5, #104	; 0x68
    2bde:	e7ee      	b.n	2bbe <_fwalk_reent+0x1a>

00002be0 <__libc_init_array>:
    2be0:	b570      	push	{r4, r5, r6, lr}
    2be2:	4e0d      	ldr	r6, [pc, #52]	; (2c18 <__libc_init_array+0x38>)
    2be4:	4c0d      	ldr	r4, [pc, #52]	; (2c1c <__libc_init_array+0x3c>)
    2be6:	1ba4      	subs	r4, r4, r6
    2be8:	10a4      	asrs	r4, r4, #2
    2bea:	2500      	movs	r5, #0
    2bec:	42a5      	cmp	r5, r4
    2bee:	d109      	bne.n	2c04 <__libc_init_array+0x24>
    2bf0:	4e0b      	ldr	r6, [pc, #44]	; (2c20 <__libc_init_array+0x40>)
    2bf2:	4c0c      	ldr	r4, [pc, #48]	; (2c24 <__libc_init_array+0x44>)
    2bf4:	f002 fb66 	bl	52c4 <_init>
    2bf8:	1ba4      	subs	r4, r4, r6
    2bfa:	10a4      	asrs	r4, r4, #2
    2bfc:	2500      	movs	r5, #0
    2bfe:	42a5      	cmp	r5, r4
    2c00:	d105      	bne.n	2c0e <__libc_init_array+0x2e>
    2c02:	bd70      	pop	{r4, r5, r6, pc}
    2c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2c08:	4798      	blx	r3
    2c0a:	3501      	adds	r5, #1
    2c0c:	e7ee      	b.n	2bec <__libc_init_array+0xc>
    2c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2c12:	4798      	blx	r3
    2c14:	3501      	adds	r5, #1
    2c16:	e7f2      	b.n	2bfe <__libc_init_array+0x1e>
    2c18:	000052d0 	.word	0x000052d0
    2c1c:	000052d0 	.word	0x000052d0
    2c20:	000052d0 	.word	0x000052d0
    2c24:	000052d4 	.word	0x000052d4

00002c28 <memset>:
    2c28:	4402      	add	r2, r0
    2c2a:	4603      	mov	r3, r0
    2c2c:	4293      	cmp	r3, r2
    2c2e:	d100      	bne.n	2c32 <memset+0xa>
    2c30:	4770      	bx	lr
    2c32:	f803 1b01 	strb.w	r1, [r3], #1
    2c36:	e7f9      	b.n	2c2c <memset+0x4>

00002c38 <_free_r>:
    2c38:	b538      	push	{r3, r4, r5, lr}
    2c3a:	4605      	mov	r5, r0
    2c3c:	2900      	cmp	r1, #0
    2c3e:	d045      	beq.n	2ccc <_free_r+0x94>
    2c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2c44:	1f0c      	subs	r4, r1, #4
    2c46:	2b00      	cmp	r3, #0
    2c48:	bfb8      	it	lt
    2c4a:	18e4      	addlt	r4, r4, r3
    2c4c:	f000 fbf6 	bl	343c <__malloc_lock>
    2c50:	4a1f      	ldr	r2, [pc, #124]	; (2cd0 <_free_r+0x98>)
    2c52:	6813      	ldr	r3, [r2, #0]
    2c54:	4610      	mov	r0, r2
    2c56:	b933      	cbnz	r3, 2c66 <_free_r+0x2e>
    2c58:	6063      	str	r3, [r4, #4]
    2c5a:	6014      	str	r4, [r2, #0]
    2c5c:	4628      	mov	r0, r5
    2c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c62:	f000 bbec 	b.w	343e <__malloc_unlock>
    2c66:	42a3      	cmp	r3, r4
    2c68:	d90c      	bls.n	2c84 <_free_r+0x4c>
    2c6a:	6821      	ldr	r1, [r4, #0]
    2c6c:	1862      	adds	r2, r4, r1
    2c6e:	4293      	cmp	r3, r2
    2c70:	bf04      	itt	eq
    2c72:	681a      	ldreq	r2, [r3, #0]
    2c74:	685b      	ldreq	r3, [r3, #4]
    2c76:	6063      	str	r3, [r4, #4]
    2c78:	bf04      	itt	eq
    2c7a:	1852      	addeq	r2, r2, r1
    2c7c:	6022      	streq	r2, [r4, #0]
    2c7e:	6004      	str	r4, [r0, #0]
    2c80:	e7ec      	b.n	2c5c <_free_r+0x24>
    2c82:	4613      	mov	r3, r2
    2c84:	685a      	ldr	r2, [r3, #4]
    2c86:	b10a      	cbz	r2, 2c8c <_free_r+0x54>
    2c88:	42a2      	cmp	r2, r4
    2c8a:	d9fa      	bls.n	2c82 <_free_r+0x4a>
    2c8c:	6819      	ldr	r1, [r3, #0]
    2c8e:	1858      	adds	r0, r3, r1
    2c90:	42a0      	cmp	r0, r4
    2c92:	d10b      	bne.n	2cac <_free_r+0x74>
    2c94:	6820      	ldr	r0, [r4, #0]
    2c96:	4401      	add	r1, r0
    2c98:	1858      	adds	r0, r3, r1
    2c9a:	4282      	cmp	r2, r0
    2c9c:	6019      	str	r1, [r3, #0]
    2c9e:	d1dd      	bne.n	2c5c <_free_r+0x24>
    2ca0:	6810      	ldr	r0, [r2, #0]
    2ca2:	6852      	ldr	r2, [r2, #4]
    2ca4:	605a      	str	r2, [r3, #4]
    2ca6:	4401      	add	r1, r0
    2ca8:	6019      	str	r1, [r3, #0]
    2caa:	e7d7      	b.n	2c5c <_free_r+0x24>
    2cac:	d902      	bls.n	2cb4 <_free_r+0x7c>
    2cae:	230c      	movs	r3, #12
    2cb0:	602b      	str	r3, [r5, #0]
    2cb2:	e7d3      	b.n	2c5c <_free_r+0x24>
    2cb4:	6820      	ldr	r0, [r4, #0]
    2cb6:	1821      	adds	r1, r4, r0
    2cb8:	428a      	cmp	r2, r1
    2cba:	bf04      	itt	eq
    2cbc:	6811      	ldreq	r1, [r2, #0]
    2cbe:	6852      	ldreq	r2, [r2, #4]
    2cc0:	6062      	str	r2, [r4, #4]
    2cc2:	bf04      	itt	eq
    2cc4:	1809      	addeq	r1, r1, r0
    2cc6:	6021      	streq	r1, [r4, #0]
    2cc8:	605c      	str	r4, [r3, #4]
    2cca:	e7c7      	b.n	2c5c <_free_r+0x24>
    2ccc:	bd38      	pop	{r3, r4, r5, pc}
    2cce:	bf00      	nop
    2cd0:	200046a8 	.word	0x200046a8

00002cd4 <_malloc_r>:
    2cd4:	b570      	push	{r4, r5, r6, lr}
    2cd6:	1ccd      	adds	r5, r1, #3
    2cd8:	f025 0503 	bic.w	r5, r5, #3
    2cdc:	3508      	adds	r5, #8
    2cde:	2d0c      	cmp	r5, #12
    2ce0:	bf38      	it	cc
    2ce2:	250c      	movcc	r5, #12
    2ce4:	2d00      	cmp	r5, #0
    2ce6:	4606      	mov	r6, r0
    2ce8:	db01      	blt.n	2cee <_malloc_r+0x1a>
    2cea:	42a9      	cmp	r1, r5
    2cec:	d903      	bls.n	2cf6 <_malloc_r+0x22>
    2cee:	230c      	movs	r3, #12
    2cf0:	6033      	str	r3, [r6, #0]
    2cf2:	2000      	movs	r0, #0
    2cf4:	bd70      	pop	{r4, r5, r6, pc}
    2cf6:	f000 fba1 	bl	343c <__malloc_lock>
    2cfa:	4a23      	ldr	r2, [pc, #140]	; (2d88 <_malloc_r+0xb4>)
    2cfc:	6814      	ldr	r4, [r2, #0]
    2cfe:	4621      	mov	r1, r4
    2d00:	b991      	cbnz	r1, 2d28 <_malloc_r+0x54>
    2d02:	4c22      	ldr	r4, [pc, #136]	; (2d8c <_malloc_r+0xb8>)
    2d04:	6823      	ldr	r3, [r4, #0]
    2d06:	b91b      	cbnz	r3, 2d10 <_malloc_r+0x3c>
    2d08:	4630      	mov	r0, r6
    2d0a:	f000 f8bd 	bl	2e88 <_sbrk_r>
    2d0e:	6020      	str	r0, [r4, #0]
    2d10:	4629      	mov	r1, r5
    2d12:	4630      	mov	r0, r6
    2d14:	f000 f8b8 	bl	2e88 <_sbrk_r>
    2d18:	1c43      	adds	r3, r0, #1
    2d1a:	d126      	bne.n	2d6a <_malloc_r+0x96>
    2d1c:	230c      	movs	r3, #12
    2d1e:	6033      	str	r3, [r6, #0]
    2d20:	4630      	mov	r0, r6
    2d22:	f000 fb8c 	bl	343e <__malloc_unlock>
    2d26:	e7e4      	b.n	2cf2 <_malloc_r+0x1e>
    2d28:	680b      	ldr	r3, [r1, #0]
    2d2a:	1b5b      	subs	r3, r3, r5
    2d2c:	d41a      	bmi.n	2d64 <_malloc_r+0x90>
    2d2e:	2b0b      	cmp	r3, #11
    2d30:	d90f      	bls.n	2d52 <_malloc_r+0x7e>
    2d32:	600b      	str	r3, [r1, #0]
    2d34:	50cd      	str	r5, [r1, r3]
    2d36:	18cc      	adds	r4, r1, r3
    2d38:	4630      	mov	r0, r6
    2d3a:	f000 fb80 	bl	343e <__malloc_unlock>
    2d3e:	f104 000b 	add.w	r0, r4, #11
    2d42:	1d23      	adds	r3, r4, #4
    2d44:	f020 0007 	bic.w	r0, r0, #7
    2d48:	1ac3      	subs	r3, r0, r3
    2d4a:	d01b      	beq.n	2d84 <_malloc_r+0xb0>
    2d4c:	425a      	negs	r2, r3
    2d4e:	50e2      	str	r2, [r4, r3]
    2d50:	bd70      	pop	{r4, r5, r6, pc}
    2d52:	428c      	cmp	r4, r1
    2d54:	bf0d      	iteet	eq
    2d56:	6863      	ldreq	r3, [r4, #4]
    2d58:	684b      	ldrne	r3, [r1, #4]
    2d5a:	6063      	strne	r3, [r4, #4]
    2d5c:	6013      	streq	r3, [r2, #0]
    2d5e:	bf18      	it	ne
    2d60:	460c      	movne	r4, r1
    2d62:	e7e9      	b.n	2d38 <_malloc_r+0x64>
    2d64:	460c      	mov	r4, r1
    2d66:	6849      	ldr	r1, [r1, #4]
    2d68:	e7ca      	b.n	2d00 <_malloc_r+0x2c>
    2d6a:	1cc4      	adds	r4, r0, #3
    2d6c:	f024 0403 	bic.w	r4, r4, #3
    2d70:	42a0      	cmp	r0, r4
    2d72:	d005      	beq.n	2d80 <_malloc_r+0xac>
    2d74:	1a21      	subs	r1, r4, r0
    2d76:	4630      	mov	r0, r6
    2d78:	f000 f886 	bl	2e88 <_sbrk_r>
    2d7c:	3001      	adds	r0, #1
    2d7e:	d0cd      	beq.n	2d1c <_malloc_r+0x48>
    2d80:	6025      	str	r5, [r4, #0]
    2d82:	e7d9      	b.n	2d38 <_malloc_r+0x64>
    2d84:	bd70      	pop	{r4, r5, r6, pc}
    2d86:	bf00      	nop
    2d88:	200046a8 	.word	0x200046a8
    2d8c:	200046ac 	.word	0x200046ac

00002d90 <iprintf>:
    2d90:	b40f      	push	{r0, r1, r2, r3}
    2d92:	4b0a      	ldr	r3, [pc, #40]	; (2dbc <iprintf+0x2c>)
    2d94:	b513      	push	{r0, r1, r4, lr}
    2d96:	681c      	ldr	r4, [r3, #0]
    2d98:	b124      	cbz	r4, 2da4 <iprintf+0x14>
    2d9a:	69a3      	ldr	r3, [r4, #24]
    2d9c:	b913      	cbnz	r3, 2da4 <iprintf+0x14>
    2d9e:	4620      	mov	r0, r4
    2da0:	f7ff fe78 	bl	2a94 <__sinit>
    2da4:	ab05      	add	r3, sp, #20
    2da6:	9a04      	ldr	r2, [sp, #16]
    2da8:	68a1      	ldr	r1, [r4, #8]
    2daa:	9301      	str	r3, [sp, #4]
    2dac:	4620      	mov	r0, r4
    2dae:	f000 fcbf 	bl	3730 <_vfiprintf_r>
    2db2:	b002      	add	sp, #8
    2db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2db8:	b004      	add	sp, #16
    2dba:	4770      	bx	lr
    2dbc:	2000026c 	.word	0x2000026c

00002dc0 <_puts_r>:
    2dc0:	b570      	push	{r4, r5, r6, lr}
    2dc2:	460e      	mov	r6, r1
    2dc4:	4605      	mov	r5, r0
    2dc6:	b118      	cbz	r0, 2dd0 <_puts_r+0x10>
    2dc8:	6983      	ldr	r3, [r0, #24]
    2dca:	b90b      	cbnz	r3, 2dd0 <_puts_r+0x10>
    2dcc:	f7ff fe62 	bl	2a94 <__sinit>
    2dd0:	69ab      	ldr	r3, [r5, #24]
    2dd2:	68ac      	ldr	r4, [r5, #8]
    2dd4:	b913      	cbnz	r3, 2ddc <_puts_r+0x1c>
    2dd6:	4628      	mov	r0, r5
    2dd8:	f7ff fe5c 	bl	2a94 <__sinit>
    2ddc:	4b23      	ldr	r3, [pc, #140]	; (2e6c <_puts_r+0xac>)
    2dde:	429c      	cmp	r4, r3
    2de0:	d117      	bne.n	2e12 <_puts_r+0x52>
    2de2:	686c      	ldr	r4, [r5, #4]
    2de4:	89a3      	ldrh	r3, [r4, #12]
    2de6:	071b      	lsls	r3, r3, #28
    2de8:	d51d      	bpl.n	2e26 <_puts_r+0x66>
    2dea:	6923      	ldr	r3, [r4, #16]
    2dec:	b1db      	cbz	r3, 2e26 <_puts_r+0x66>
    2dee:	3e01      	subs	r6, #1
    2df0:	68a3      	ldr	r3, [r4, #8]
    2df2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2df6:	3b01      	subs	r3, #1
    2df8:	60a3      	str	r3, [r4, #8]
    2dfa:	b9e9      	cbnz	r1, 2e38 <_puts_r+0x78>
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	da2e      	bge.n	2e5e <_puts_r+0x9e>
    2e00:	4622      	mov	r2, r4
    2e02:	210a      	movs	r1, #10
    2e04:	4628      	mov	r0, r5
    2e06:	f000 f9b9 	bl	317c <__swbuf_r>
    2e0a:	3001      	adds	r0, #1
    2e0c:	d011      	beq.n	2e32 <_puts_r+0x72>
    2e0e:	200a      	movs	r0, #10
    2e10:	bd70      	pop	{r4, r5, r6, pc}
    2e12:	4b17      	ldr	r3, [pc, #92]	; (2e70 <_puts_r+0xb0>)
    2e14:	429c      	cmp	r4, r3
    2e16:	d101      	bne.n	2e1c <_puts_r+0x5c>
    2e18:	68ac      	ldr	r4, [r5, #8]
    2e1a:	e7e3      	b.n	2de4 <_puts_r+0x24>
    2e1c:	4b15      	ldr	r3, [pc, #84]	; (2e74 <_puts_r+0xb4>)
    2e1e:	429c      	cmp	r4, r3
    2e20:	bf08      	it	eq
    2e22:	68ec      	ldreq	r4, [r5, #12]
    2e24:	e7de      	b.n	2de4 <_puts_r+0x24>
    2e26:	4621      	mov	r1, r4
    2e28:	4628      	mov	r0, r5
    2e2a:	f000 fa0b 	bl	3244 <__swsetup_r>
    2e2e:	2800      	cmp	r0, #0
    2e30:	d0dd      	beq.n	2dee <_puts_r+0x2e>
    2e32:	f04f 30ff 	mov.w	r0, #4294967295
    2e36:	bd70      	pop	{r4, r5, r6, pc}
    2e38:	2b00      	cmp	r3, #0
    2e3a:	da04      	bge.n	2e46 <_puts_r+0x86>
    2e3c:	69a2      	ldr	r2, [r4, #24]
    2e3e:	4293      	cmp	r3, r2
    2e40:	db06      	blt.n	2e50 <_puts_r+0x90>
    2e42:	290a      	cmp	r1, #10
    2e44:	d004      	beq.n	2e50 <_puts_r+0x90>
    2e46:	6823      	ldr	r3, [r4, #0]
    2e48:	1c5a      	adds	r2, r3, #1
    2e4a:	6022      	str	r2, [r4, #0]
    2e4c:	7019      	strb	r1, [r3, #0]
    2e4e:	e7cf      	b.n	2df0 <_puts_r+0x30>
    2e50:	4622      	mov	r2, r4
    2e52:	4628      	mov	r0, r5
    2e54:	f000 f992 	bl	317c <__swbuf_r>
    2e58:	3001      	adds	r0, #1
    2e5a:	d1c9      	bne.n	2df0 <_puts_r+0x30>
    2e5c:	e7e9      	b.n	2e32 <_puts_r+0x72>
    2e5e:	6823      	ldr	r3, [r4, #0]
    2e60:	200a      	movs	r0, #10
    2e62:	1c5a      	adds	r2, r3, #1
    2e64:	6022      	str	r2, [r4, #0]
    2e66:	7018      	strb	r0, [r3, #0]
    2e68:	bd70      	pop	{r4, r5, r6, pc}
    2e6a:	bf00      	nop
    2e6c:	00005118 	.word	0x00005118
    2e70:	00005138 	.word	0x00005138
    2e74:	000050f8 	.word	0x000050f8

00002e78 <puts>:
    2e78:	4b02      	ldr	r3, [pc, #8]	; (2e84 <puts+0xc>)
    2e7a:	4601      	mov	r1, r0
    2e7c:	6818      	ldr	r0, [r3, #0]
    2e7e:	f7ff bf9f 	b.w	2dc0 <_puts_r>
    2e82:	bf00      	nop
    2e84:	2000026c 	.word	0x2000026c

00002e88 <_sbrk_r>:
    2e88:	b538      	push	{r3, r4, r5, lr}
    2e8a:	4c06      	ldr	r4, [pc, #24]	; (2ea4 <_sbrk_r+0x1c>)
    2e8c:	2300      	movs	r3, #0
    2e8e:	4605      	mov	r5, r0
    2e90:	4608      	mov	r0, r1
    2e92:	6023      	str	r3, [r4, #0]
    2e94:	f7fd fd3a 	bl	90c <_sbrk>
    2e98:	1c43      	adds	r3, r0, #1
    2e9a:	d102      	bne.n	2ea2 <_sbrk_r+0x1a>
    2e9c:	6823      	ldr	r3, [r4, #0]
    2e9e:	b103      	cbz	r3, 2ea2 <_sbrk_r+0x1a>
    2ea0:	602b      	str	r3, [r5, #0]
    2ea2:	bd38      	pop	{r3, r4, r5, pc}
    2ea4:	200046f8 	.word	0x200046f8

00002ea8 <iscanf>:
    2ea8:	b40f      	push	{r0, r1, r2, r3}
    2eaa:	4b0a      	ldr	r3, [pc, #40]	; (2ed4 <iscanf+0x2c>)
    2eac:	b513      	push	{r0, r1, r4, lr}
    2eae:	681c      	ldr	r4, [r3, #0]
    2eb0:	b124      	cbz	r4, 2ebc <iscanf+0x14>
    2eb2:	69a3      	ldr	r3, [r4, #24]
    2eb4:	b913      	cbnz	r3, 2ebc <iscanf+0x14>
    2eb6:	4620      	mov	r0, r4
    2eb8:	f7ff fdec 	bl	2a94 <__sinit>
    2ebc:	ab05      	add	r3, sp, #20
    2ebe:	9a04      	ldr	r2, [sp, #16]
    2ec0:	6861      	ldr	r1, [r4, #4]
    2ec2:	9301      	str	r3, [sp, #4]
    2ec4:	4620      	mov	r0, r4
    2ec6:	f001 f833 	bl	3f30 <_vfiscanf_r>
    2eca:	b002      	add	sp, #8
    2ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ed0:	b004      	add	sp, #16
    2ed2:	4770      	bx	lr
    2ed4:	2000026c 	.word	0x2000026c

00002ed8 <setbuf>:
    2ed8:	2900      	cmp	r1, #0
    2eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2ede:	bf0c      	ite	eq
    2ee0:	2202      	moveq	r2, #2
    2ee2:	2200      	movne	r2, #0
    2ee4:	f000 b800 	b.w	2ee8 <setvbuf>

00002ee8 <setvbuf>:
    2ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2eec:	461d      	mov	r5, r3
    2eee:	4b51      	ldr	r3, [pc, #324]	; (3034 <setvbuf+0x14c>)
    2ef0:	681e      	ldr	r6, [r3, #0]
    2ef2:	4604      	mov	r4, r0
    2ef4:	460f      	mov	r7, r1
    2ef6:	4690      	mov	r8, r2
    2ef8:	b126      	cbz	r6, 2f04 <setvbuf+0x1c>
    2efa:	69b3      	ldr	r3, [r6, #24]
    2efc:	b913      	cbnz	r3, 2f04 <setvbuf+0x1c>
    2efe:	4630      	mov	r0, r6
    2f00:	f7ff fdc8 	bl	2a94 <__sinit>
    2f04:	4b4c      	ldr	r3, [pc, #304]	; (3038 <setvbuf+0x150>)
    2f06:	429c      	cmp	r4, r3
    2f08:	d152      	bne.n	2fb0 <setvbuf+0xc8>
    2f0a:	6874      	ldr	r4, [r6, #4]
    2f0c:	f1b8 0f02 	cmp.w	r8, #2
    2f10:	d006      	beq.n	2f20 <setvbuf+0x38>
    2f12:	f1b8 0f01 	cmp.w	r8, #1
    2f16:	f200 8089 	bhi.w	302c <setvbuf+0x144>
    2f1a:	2d00      	cmp	r5, #0
    2f1c:	f2c0 8086 	blt.w	302c <setvbuf+0x144>
    2f20:	4621      	mov	r1, r4
    2f22:	4630      	mov	r0, r6
    2f24:	f7ff fd3a 	bl	299c <_fflush_r>
    2f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2f2a:	b141      	cbz	r1, 2f3e <setvbuf+0x56>
    2f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2f30:	4299      	cmp	r1, r3
    2f32:	d002      	beq.n	2f3a <setvbuf+0x52>
    2f34:	4630      	mov	r0, r6
    2f36:	f7ff fe7f 	bl	2c38 <_free_r>
    2f3a:	2300      	movs	r3, #0
    2f3c:	6363      	str	r3, [r4, #52]	; 0x34
    2f3e:	2300      	movs	r3, #0
    2f40:	61a3      	str	r3, [r4, #24]
    2f42:	6063      	str	r3, [r4, #4]
    2f44:	89a3      	ldrh	r3, [r4, #12]
    2f46:	061b      	lsls	r3, r3, #24
    2f48:	d503      	bpl.n	2f52 <setvbuf+0x6a>
    2f4a:	6921      	ldr	r1, [r4, #16]
    2f4c:	4630      	mov	r0, r6
    2f4e:	f7ff fe73 	bl	2c38 <_free_r>
    2f52:	89a3      	ldrh	r3, [r4, #12]
    2f54:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    2f58:	f023 0303 	bic.w	r3, r3, #3
    2f5c:	f1b8 0f02 	cmp.w	r8, #2
    2f60:	81a3      	strh	r3, [r4, #12]
    2f62:	d05d      	beq.n	3020 <setvbuf+0x138>
    2f64:	ab01      	add	r3, sp, #4
    2f66:	466a      	mov	r2, sp
    2f68:	4621      	mov	r1, r4
    2f6a:	4630      	mov	r0, r6
    2f6c:	f000 f9fa 	bl	3364 <__swhatbuf_r>
    2f70:	89a3      	ldrh	r3, [r4, #12]
    2f72:	4318      	orrs	r0, r3
    2f74:	81a0      	strh	r0, [r4, #12]
    2f76:	bb2d      	cbnz	r5, 2fc4 <setvbuf+0xdc>
    2f78:	9d00      	ldr	r5, [sp, #0]
    2f7a:	4628      	mov	r0, r5
    2f7c:	f000 fa56 	bl	342c <malloc>
    2f80:	4607      	mov	r7, r0
    2f82:	2800      	cmp	r0, #0
    2f84:	d14e      	bne.n	3024 <setvbuf+0x13c>
    2f86:	f8dd 9000 	ldr.w	r9, [sp]
    2f8a:	45a9      	cmp	r9, r5
    2f8c:	d13c      	bne.n	3008 <setvbuf+0x120>
    2f8e:	f04f 30ff 	mov.w	r0, #4294967295
    2f92:	89a3      	ldrh	r3, [r4, #12]
    2f94:	f043 0302 	orr.w	r3, r3, #2
    2f98:	81a3      	strh	r3, [r4, #12]
    2f9a:	2300      	movs	r3, #0
    2f9c:	60a3      	str	r3, [r4, #8]
    2f9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    2fa2:	6023      	str	r3, [r4, #0]
    2fa4:	6123      	str	r3, [r4, #16]
    2fa6:	2301      	movs	r3, #1
    2fa8:	6163      	str	r3, [r4, #20]
    2faa:	b003      	add	sp, #12
    2fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2fb0:	4b22      	ldr	r3, [pc, #136]	; (303c <setvbuf+0x154>)
    2fb2:	429c      	cmp	r4, r3
    2fb4:	d101      	bne.n	2fba <setvbuf+0xd2>
    2fb6:	68b4      	ldr	r4, [r6, #8]
    2fb8:	e7a8      	b.n	2f0c <setvbuf+0x24>
    2fba:	4b21      	ldr	r3, [pc, #132]	; (3040 <setvbuf+0x158>)
    2fbc:	429c      	cmp	r4, r3
    2fbe:	bf08      	it	eq
    2fc0:	68f4      	ldreq	r4, [r6, #12]
    2fc2:	e7a3      	b.n	2f0c <setvbuf+0x24>
    2fc4:	2f00      	cmp	r7, #0
    2fc6:	d0d8      	beq.n	2f7a <setvbuf+0x92>
    2fc8:	69b3      	ldr	r3, [r6, #24]
    2fca:	b913      	cbnz	r3, 2fd2 <setvbuf+0xea>
    2fcc:	4630      	mov	r0, r6
    2fce:	f7ff fd61 	bl	2a94 <__sinit>
    2fd2:	f1b8 0f01 	cmp.w	r8, #1
    2fd6:	bf08      	it	eq
    2fd8:	89a3      	ldrheq	r3, [r4, #12]
    2fda:	6027      	str	r7, [r4, #0]
    2fdc:	bf04      	itt	eq
    2fde:	f043 0301 	orreq.w	r3, r3, #1
    2fe2:	81a3      	strheq	r3, [r4, #12]
    2fe4:	89a3      	ldrh	r3, [r4, #12]
    2fe6:	6127      	str	r7, [r4, #16]
    2fe8:	f013 0008 	ands.w	r0, r3, #8
    2fec:	6165      	str	r5, [r4, #20]
    2fee:	d01b      	beq.n	3028 <setvbuf+0x140>
    2ff0:	f013 0001 	ands.w	r0, r3, #1
    2ff4:	bf18      	it	ne
    2ff6:	426d      	negne	r5, r5
    2ff8:	f04f 0300 	mov.w	r3, #0
    2ffc:	bf1d      	ittte	ne
    2ffe:	60a3      	strne	r3, [r4, #8]
    3000:	61a5      	strne	r5, [r4, #24]
    3002:	4618      	movne	r0, r3
    3004:	60a5      	streq	r5, [r4, #8]
    3006:	e7d0      	b.n	2faa <setvbuf+0xc2>
    3008:	4648      	mov	r0, r9
    300a:	f000 fa0f 	bl	342c <malloc>
    300e:	4607      	mov	r7, r0
    3010:	2800      	cmp	r0, #0
    3012:	d0bc      	beq.n	2f8e <setvbuf+0xa6>
    3014:	89a3      	ldrh	r3, [r4, #12]
    3016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    301a:	81a3      	strh	r3, [r4, #12]
    301c:	464d      	mov	r5, r9
    301e:	e7d3      	b.n	2fc8 <setvbuf+0xe0>
    3020:	2000      	movs	r0, #0
    3022:	e7b6      	b.n	2f92 <setvbuf+0xaa>
    3024:	46a9      	mov	r9, r5
    3026:	e7f5      	b.n	3014 <setvbuf+0x12c>
    3028:	60a0      	str	r0, [r4, #8]
    302a:	e7be      	b.n	2faa <setvbuf+0xc2>
    302c:	f04f 30ff 	mov.w	r0, #4294967295
    3030:	e7bb      	b.n	2faa <setvbuf+0xc2>
    3032:	bf00      	nop
    3034:	2000026c 	.word	0x2000026c
    3038:	00005118 	.word	0x00005118
    303c:	00005138 	.word	0x00005138
    3040:	000050f8 	.word	0x000050f8

00003044 <sniprintf>:
    3044:	b40c      	push	{r2, r3}
    3046:	b530      	push	{r4, r5, lr}
    3048:	4b17      	ldr	r3, [pc, #92]	; (30a8 <sniprintf+0x64>)
    304a:	1e0c      	subs	r4, r1, #0
    304c:	b09d      	sub	sp, #116	; 0x74
    304e:	681d      	ldr	r5, [r3, #0]
    3050:	da08      	bge.n	3064 <sniprintf+0x20>
    3052:	238b      	movs	r3, #139	; 0x8b
    3054:	602b      	str	r3, [r5, #0]
    3056:	f04f 30ff 	mov.w	r0, #4294967295
    305a:	b01d      	add	sp, #116	; 0x74
    305c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3060:	b002      	add	sp, #8
    3062:	4770      	bx	lr
    3064:	f44f 7302 	mov.w	r3, #520	; 0x208
    3068:	f8ad 3014 	strh.w	r3, [sp, #20]
    306c:	bf14      	ite	ne
    306e:	f104 33ff 	addne.w	r3, r4, #4294967295
    3072:	4623      	moveq	r3, r4
    3074:	9304      	str	r3, [sp, #16]
    3076:	9307      	str	r3, [sp, #28]
    3078:	f64f 73ff 	movw	r3, #65535	; 0xffff
    307c:	9002      	str	r0, [sp, #8]
    307e:	9006      	str	r0, [sp, #24]
    3080:	f8ad 3016 	strh.w	r3, [sp, #22]
    3084:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3086:	ab21      	add	r3, sp, #132	; 0x84
    3088:	a902      	add	r1, sp, #8
    308a:	4628      	mov	r0, r5
    308c:	9301      	str	r3, [sp, #4]
    308e:	f000 fa33 	bl	34f8 <_svfiprintf_r>
    3092:	1c43      	adds	r3, r0, #1
    3094:	bfbc      	itt	lt
    3096:	238b      	movlt	r3, #139	; 0x8b
    3098:	602b      	strlt	r3, [r5, #0]
    309a:	2c00      	cmp	r4, #0
    309c:	d0dd      	beq.n	305a <sniprintf+0x16>
    309e:	9b02      	ldr	r3, [sp, #8]
    30a0:	2200      	movs	r2, #0
    30a2:	701a      	strb	r2, [r3, #0]
    30a4:	e7d9      	b.n	305a <sniprintf+0x16>
    30a6:	bf00      	nop
    30a8:	2000026c 	.word	0x2000026c

000030ac <siprintf>:
    30ac:	b40e      	push	{r1, r2, r3}
    30ae:	b500      	push	{lr}
    30b0:	b09c      	sub	sp, #112	; 0x70
    30b2:	f44f 7102 	mov.w	r1, #520	; 0x208
    30b6:	ab1d      	add	r3, sp, #116	; 0x74
    30b8:	f8ad 1014 	strh.w	r1, [sp, #20]
    30bc:	9002      	str	r0, [sp, #8]
    30be:	9006      	str	r0, [sp, #24]
    30c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    30c4:	480a      	ldr	r0, [pc, #40]	; (30f0 <siprintf+0x44>)
    30c6:	9104      	str	r1, [sp, #16]
    30c8:	9107      	str	r1, [sp, #28]
    30ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    30ce:	f853 2b04 	ldr.w	r2, [r3], #4
    30d2:	f8ad 1016 	strh.w	r1, [sp, #22]
    30d6:	6800      	ldr	r0, [r0, #0]
    30d8:	9301      	str	r3, [sp, #4]
    30da:	a902      	add	r1, sp, #8
    30dc:	f000 fa0c 	bl	34f8 <_svfiprintf_r>
    30e0:	9b02      	ldr	r3, [sp, #8]
    30e2:	2200      	movs	r2, #0
    30e4:	701a      	strb	r2, [r3, #0]
    30e6:	b01c      	add	sp, #112	; 0x70
    30e8:	f85d eb04 	ldr.w	lr, [sp], #4
    30ec:	b003      	add	sp, #12
    30ee:	4770      	bx	lr
    30f0:	2000026c 	.word	0x2000026c

000030f4 <__sread>:
    30f4:	b510      	push	{r4, lr}
    30f6:	460c      	mov	r4, r1
    30f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    30fc:	f001 f898 	bl	4230 <_read_r>
    3100:	2800      	cmp	r0, #0
    3102:	bfab      	itete	ge
    3104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    3106:	89a3      	ldrhlt	r3, [r4, #12]
    3108:	181b      	addge	r3, r3, r0
    310a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    310e:	bfac      	ite	ge
    3110:	6563      	strge	r3, [r4, #84]	; 0x54
    3112:	81a3      	strhlt	r3, [r4, #12]
    3114:	bd10      	pop	{r4, pc}

00003116 <__swrite>:
    3116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    311a:	461f      	mov	r7, r3
    311c:	898b      	ldrh	r3, [r1, #12]
    311e:	05db      	lsls	r3, r3, #23
    3120:	4605      	mov	r5, r0
    3122:	460c      	mov	r4, r1
    3124:	4616      	mov	r6, r2
    3126:	d505      	bpl.n	3134 <__swrite+0x1e>
    3128:	2302      	movs	r3, #2
    312a:	2200      	movs	r2, #0
    312c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3130:	f000 f906 	bl	3340 <_lseek_r>
    3134:	89a3      	ldrh	r3, [r4, #12]
    3136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    313a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    313e:	81a3      	strh	r3, [r4, #12]
    3140:	4632      	mov	r2, r6
    3142:	463b      	mov	r3, r7
    3144:	4628      	mov	r0, r5
    3146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    314a:	f000 b869 	b.w	3220 <_write_r>

0000314e <__sseek>:
    314e:	b510      	push	{r4, lr}
    3150:	460c      	mov	r4, r1
    3152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3156:	f000 f8f3 	bl	3340 <_lseek_r>
    315a:	1c43      	adds	r3, r0, #1
    315c:	89a3      	ldrh	r3, [r4, #12]
    315e:	bf15      	itete	ne
    3160:	6560      	strne	r0, [r4, #84]	; 0x54
    3162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    316a:	81a3      	strheq	r3, [r4, #12]
    316c:	bf18      	it	ne
    316e:	81a3      	strhne	r3, [r4, #12]
    3170:	bd10      	pop	{r4, pc}

00003172 <__sclose>:
    3172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3176:	f000 b8d3 	b.w	3320 <_close_r>
	...

0000317c <__swbuf_r>:
    317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    317e:	460e      	mov	r6, r1
    3180:	4614      	mov	r4, r2
    3182:	4605      	mov	r5, r0
    3184:	b118      	cbz	r0, 318e <__swbuf_r+0x12>
    3186:	6983      	ldr	r3, [r0, #24]
    3188:	b90b      	cbnz	r3, 318e <__swbuf_r+0x12>
    318a:	f7ff fc83 	bl	2a94 <__sinit>
    318e:	4b21      	ldr	r3, [pc, #132]	; (3214 <__swbuf_r+0x98>)
    3190:	429c      	cmp	r4, r3
    3192:	d12a      	bne.n	31ea <__swbuf_r+0x6e>
    3194:	686c      	ldr	r4, [r5, #4]
    3196:	69a3      	ldr	r3, [r4, #24]
    3198:	60a3      	str	r3, [r4, #8]
    319a:	89a3      	ldrh	r3, [r4, #12]
    319c:	071a      	lsls	r2, r3, #28
    319e:	d52e      	bpl.n	31fe <__swbuf_r+0x82>
    31a0:	6923      	ldr	r3, [r4, #16]
    31a2:	b363      	cbz	r3, 31fe <__swbuf_r+0x82>
    31a4:	6923      	ldr	r3, [r4, #16]
    31a6:	6820      	ldr	r0, [r4, #0]
    31a8:	1ac0      	subs	r0, r0, r3
    31aa:	6963      	ldr	r3, [r4, #20]
    31ac:	b2f6      	uxtb	r6, r6
    31ae:	4298      	cmp	r0, r3
    31b0:	4637      	mov	r7, r6
    31b2:	db04      	blt.n	31be <__swbuf_r+0x42>
    31b4:	4621      	mov	r1, r4
    31b6:	4628      	mov	r0, r5
    31b8:	f7ff fbf0 	bl	299c <_fflush_r>
    31bc:	bb28      	cbnz	r0, 320a <__swbuf_r+0x8e>
    31be:	68a3      	ldr	r3, [r4, #8]
    31c0:	3b01      	subs	r3, #1
    31c2:	60a3      	str	r3, [r4, #8]
    31c4:	6823      	ldr	r3, [r4, #0]
    31c6:	1c5a      	adds	r2, r3, #1
    31c8:	6022      	str	r2, [r4, #0]
    31ca:	701e      	strb	r6, [r3, #0]
    31cc:	6963      	ldr	r3, [r4, #20]
    31ce:	3001      	adds	r0, #1
    31d0:	4298      	cmp	r0, r3
    31d2:	d004      	beq.n	31de <__swbuf_r+0x62>
    31d4:	89a3      	ldrh	r3, [r4, #12]
    31d6:	07db      	lsls	r3, r3, #31
    31d8:	d519      	bpl.n	320e <__swbuf_r+0x92>
    31da:	2e0a      	cmp	r6, #10
    31dc:	d117      	bne.n	320e <__swbuf_r+0x92>
    31de:	4621      	mov	r1, r4
    31e0:	4628      	mov	r0, r5
    31e2:	f7ff fbdb 	bl	299c <_fflush_r>
    31e6:	b190      	cbz	r0, 320e <__swbuf_r+0x92>
    31e8:	e00f      	b.n	320a <__swbuf_r+0x8e>
    31ea:	4b0b      	ldr	r3, [pc, #44]	; (3218 <__swbuf_r+0x9c>)
    31ec:	429c      	cmp	r4, r3
    31ee:	d101      	bne.n	31f4 <__swbuf_r+0x78>
    31f0:	68ac      	ldr	r4, [r5, #8]
    31f2:	e7d0      	b.n	3196 <__swbuf_r+0x1a>
    31f4:	4b09      	ldr	r3, [pc, #36]	; (321c <__swbuf_r+0xa0>)
    31f6:	429c      	cmp	r4, r3
    31f8:	bf08      	it	eq
    31fa:	68ec      	ldreq	r4, [r5, #12]
    31fc:	e7cb      	b.n	3196 <__swbuf_r+0x1a>
    31fe:	4621      	mov	r1, r4
    3200:	4628      	mov	r0, r5
    3202:	f000 f81f 	bl	3244 <__swsetup_r>
    3206:	2800      	cmp	r0, #0
    3208:	d0cc      	beq.n	31a4 <__swbuf_r+0x28>
    320a:	f04f 37ff 	mov.w	r7, #4294967295
    320e:	4638      	mov	r0, r7
    3210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3212:	bf00      	nop
    3214:	00005118 	.word	0x00005118
    3218:	00005138 	.word	0x00005138
    321c:	000050f8 	.word	0x000050f8

00003220 <_write_r>:
    3220:	b538      	push	{r3, r4, r5, lr}
    3222:	4c07      	ldr	r4, [pc, #28]	; (3240 <_write_r+0x20>)
    3224:	4605      	mov	r5, r0
    3226:	4608      	mov	r0, r1
    3228:	4611      	mov	r1, r2
    322a:	2200      	movs	r2, #0
    322c:	6022      	str	r2, [r4, #0]
    322e:	461a      	mov	r2, r3
    3230:	f7fe fee6 	bl	2000 <_write>
    3234:	1c43      	adds	r3, r0, #1
    3236:	d102      	bne.n	323e <_write_r+0x1e>
    3238:	6823      	ldr	r3, [r4, #0]
    323a:	b103      	cbz	r3, 323e <_write_r+0x1e>
    323c:	602b      	str	r3, [r5, #0]
    323e:	bd38      	pop	{r3, r4, r5, pc}
    3240:	200046f8 	.word	0x200046f8

00003244 <__swsetup_r>:
    3244:	4b32      	ldr	r3, [pc, #200]	; (3310 <__swsetup_r+0xcc>)
    3246:	b570      	push	{r4, r5, r6, lr}
    3248:	681d      	ldr	r5, [r3, #0]
    324a:	4606      	mov	r6, r0
    324c:	460c      	mov	r4, r1
    324e:	b125      	cbz	r5, 325a <__swsetup_r+0x16>
    3250:	69ab      	ldr	r3, [r5, #24]
    3252:	b913      	cbnz	r3, 325a <__swsetup_r+0x16>
    3254:	4628      	mov	r0, r5
    3256:	f7ff fc1d 	bl	2a94 <__sinit>
    325a:	4b2e      	ldr	r3, [pc, #184]	; (3314 <__swsetup_r+0xd0>)
    325c:	429c      	cmp	r4, r3
    325e:	d10f      	bne.n	3280 <__swsetup_r+0x3c>
    3260:	686c      	ldr	r4, [r5, #4]
    3262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3266:	b29a      	uxth	r2, r3
    3268:	0715      	lsls	r5, r2, #28
    326a:	d42c      	bmi.n	32c6 <__swsetup_r+0x82>
    326c:	06d0      	lsls	r0, r2, #27
    326e:	d411      	bmi.n	3294 <__swsetup_r+0x50>
    3270:	2209      	movs	r2, #9
    3272:	6032      	str	r2, [r6, #0]
    3274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3278:	81a3      	strh	r3, [r4, #12]
    327a:	f04f 30ff 	mov.w	r0, #4294967295
    327e:	bd70      	pop	{r4, r5, r6, pc}
    3280:	4b25      	ldr	r3, [pc, #148]	; (3318 <__swsetup_r+0xd4>)
    3282:	429c      	cmp	r4, r3
    3284:	d101      	bne.n	328a <__swsetup_r+0x46>
    3286:	68ac      	ldr	r4, [r5, #8]
    3288:	e7eb      	b.n	3262 <__swsetup_r+0x1e>
    328a:	4b24      	ldr	r3, [pc, #144]	; (331c <__swsetup_r+0xd8>)
    328c:	429c      	cmp	r4, r3
    328e:	bf08      	it	eq
    3290:	68ec      	ldreq	r4, [r5, #12]
    3292:	e7e6      	b.n	3262 <__swsetup_r+0x1e>
    3294:	0751      	lsls	r1, r2, #29
    3296:	d512      	bpl.n	32be <__swsetup_r+0x7a>
    3298:	6b61      	ldr	r1, [r4, #52]	; 0x34
    329a:	b141      	cbz	r1, 32ae <__swsetup_r+0x6a>
    329c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    32a0:	4299      	cmp	r1, r3
    32a2:	d002      	beq.n	32aa <__swsetup_r+0x66>
    32a4:	4630      	mov	r0, r6
    32a6:	f7ff fcc7 	bl	2c38 <_free_r>
    32aa:	2300      	movs	r3, #0
    32ac:	6363      	str	r3, [r4, #52]	; 0x34
    32ae:	89a3      	ldrh	r3, [r4, #12]
    32b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    32b4:	81a3      	strh	r3, [r4, #12]
    32b6:	2300      	movs	r3, #0
    32b8:	6063      	str	r3, [r4, #4]
    32ba:	6923      	ldr	r3, [r4, #16]
    32bc:	6023      	str	r3, [r4, #0]
    32be:	89a3      	ldrh	r3, [r4, #12]
    32c0:	f043 0308 	orr.w	r3, r3, #8
    32c4:	81a3      	strh	r3, [r4, #12]
    32c6:	6923      	ldr	r3, [r4, #16]
    32c8:	b94b      	cbnz	r3, 32de <__swsetup_r+0x9a>
    32ca:	89a3      	ldrh	r3, [r4, #12]
    32cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
    32d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    32d4:	d003      	beq.n	32de <__swsetup_r+0x9a>
    32d6:	4621      	mov	r1, r4
    32d8:	4630      	mov	r0, r6
    32da:	f000 f867 	bl	33ac <__smakebuf_r>
    32de:	89a2      	ldrh	r2, [r4, #12]
    32e0:	f012 0301 	ands.w	r3, r2, #1
    32e4:	d00c      	beq.n	3300 <__swsetup_r+0xbc>
    32e6:	2300      	movs	r3, #0
    32e8:	60a3      	str	r3, [r4, #8]
    32ea:	6963      	ldr	r3, [r4, #20]
    32ec:	425b      	negs	r3, r3
    32ee:	61a3      	str	r3, [r4, #24]
    32f0:	6923      	ldr	r3, [r4, #16]
    32f2:	b953      	cbnz	r3, 330a <__swsetup_r+0xc6>
    32f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    32f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    32fc:	d1ba      	bne.n	3274 <__swsetup_r+0x30>
    32fe:	bd70      	pop	{r4, r5, r6, pc}
    3300:	0792      	lsls	r2, r2, #30
    3302:	bf58      	it	pl
    3304:	6963      	ldrpl	r3, [r4, #20]
    3306:	60a3      	str	r3, [r4, #8]
    3308:	e7f2      	b.n	32f0 <__swsetup_r+0xac>
    330a:	2000      	movs	r0, #0
    330c:	e7f7      	b.n	32fe <__swsetup_r+0xba>
    330e:	bf00      	nop
    3310:	2000026c 	.word	0x2000026c
    3314:	00005118 	.word	0x00005118
    3318:	00005138 	.word	0x00005138
    331c:	000050f8 	.word	0x000050f8

00003320 <_close_r>:
    3320:	b538      	push	{r3, r4, r5, lr}
    3322:	4c06      	ldr	r4, [pc, #24]	; (333c <_close_r+0x1c>)
    3324:	2300      	movs	r3, #0
    3326:	4605      	mov	r5, r0
    3328:	4608      	mov	r0, r1
    332a:	6023      	str	r3, [r4, #0]
    332c:	f7fd fb00 	bl	930 <_close>
    3330:	1c43      	adds	r3, r0, #1
    3332:	d102      	bne.n	333a <_close_r+0x1a>
    3334:	6823      	ldr	r3, [r4, #0]
    3336:	b103      	cbz	r3, 333a <_close_r+0x1a>
    3338:	602b      	str	r3, [r5, #0]
    333a:	bd38      	pop	{r3, r4, r5, pc}
    333c:	200046f8 	.word	0x200046f8

00003340 <_lseek_r>:
    3340:	b538      	push	{r3, r4, r5, lr}
    3342:	4c07      	ldr	r4, [pc, #28]	; (3360 <_lseek_r+0x20>)
    3344:	4605      	mov	r5, r0
    3346:	4608      	mov	r0, r1
    3348:	4611      	mov	r1, r2
    334a:	2200      	movs	r2, #0
    334c:	6022      	str	r2, [r4, #0]
    334e:	461a      	mov	r2, r3
    3350:	f7fd faf8 	bl	944 <_lseek>
    3354:	1c43      	adds	r3, r0, #1
    3356:	d102      	bne.n	335e <_lseek_r+0x1e>
    3358:	6823      	ldr	r3, [r4, #0]
    335a:	b103      	cbz	r3, 335e <_lseek_r+0x1e>
    335c:	602b      	str	r3, [r5, #0]
    335e:	bd38      	pop	{r3, r4, r5, pc}
    3360:	200046f8 	.word	0x200046f8

00003364 <__swhatbuf_r>:
    3364:	b570      	push	{r4, r5, r6, lr}
    3366:	460e      	mov	r6, r1
    3368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    336c:	2900      	cmp	r1, #0
    336e:	b090      	sub	sp, #64	; 0x40
    3370:	4614      	mov	r4, r2
    3372:	461d      	mov	r5, r3
    3374:	da07      	bge.n	3386 <__swhatbuf_r+0x22>
    3376:	2300      	movs	r3, #0
    3378:	602b      	str	r3, [r5, #0]
    337a:	89b3      	ldrh	r3, [r6, #12]
    337c:	061a      	lsls	r2, r3, #24
    337e:	d410      	bmi.n	33a2 <__swhatbuf_r+0x3e>
    3380:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3384:	e00e      	b.n	33a4 <__swhatbuf_r+0x40>
    3386:	aa01      	add	r2, sp, #4
    3388:	f001 f9f8 	bl	477c <_fstat_r>
    338c:	2800      	cmp	r0, #0
    338e:	dbf2      	blt.n	3376 <__swhatbuf_r+0x12>
    3390:	9a02      	ldr	r2, [sp, #8]
    3392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    339a:	425a      	negs	r2, r3
    339c:	415a      	adcs	r2, r3
    339e:	602a      	str	r2, [r5, #0]
    33a0:	e7ee      	b.n	3380 <__swhatbuf_r+0x1c>
    33a2:	2340      	movs	r3, #64	; 0x40
    33a4:	2000      	movs	r0, #0
    33a6:	6023      	str	r3, [r4, #0]
    33a8:	b010      	add	sp, #64	; 0x40
    33aa:	bd70      	pop	{r4, r5, r6, pc}

000033ac <__smakebuf_r>:
    33ac:	898b      	ldrh	r3, [r1, #12]
    33ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
    33b0:	079d      	lsls	r5, r3, #30
    33b2:	4606      	mov	r6, r0
    33b4:	460c      	mov	r4, r1
    33b6:	d507      	bpl.n	33c8 <__smakebuf_r+0x1c>
    33b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    33bc:	6023      	str	r3, [r4, #0]
    33be:	6123      	str	r3, [r4, #16]
    33c0:	2301      	movs	r3, #1
    33c2:	6163      	str	r3, [r4, #20]
    33c4:	b002      	add	sp, #8
    33c6:	bd70      	pop	{r4, r5, r6, pc}
    33c8:	ab01      	add	r3, sp, #4
    33ca:	466a      	mov	r2, sp
    33cc:	f7ff ffca 	bl	3364 <__swhatbuf_r>
    33d0:	9900      	ldr	r1, [sp, #0]
    33d2:	4605      	mov	r5, r0
    33d4:	4630      	mov	r0, r6
    33d6:	f7ff fc7d 	bl	2cd4 <_malloc_r>
    33da:	b948      	cbnz	r0, 33f0 <__smakebuf_r+0x44>
    33dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    33e0:	059a      	lsls	r2, r3, #22
    33e2:	d4ef      	bmi.n	33c4 <__smakebuf_r+0x18>
    33e4:	f023 0303 	bic.w	r3, r3, #3
    33e8:	f043 0302 	orr.w	r3, r3, #2
    33ec:	81a3      	strh	r3, [r4, #12]
    33ee:	e7e3      	b.n	33b8 <__smakebuf_r+0xc>
    33f0:	4b0d      	ldr	r3, [pc, #52]	; (3428 <__smakebuf_r+0x7c>)
    33f2:	62b3      	str	r3, [r6, #40]	; 0x28
    33f4:	89a3      	ldrh	r3, [r4, #12]
    33f6:	6020      	str	r0, [r4, #0]
    33f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    33fc:	81a3      	strh	r3, [r4, #12]
    33fe:	9b00      	ldr	r3, [sp, #0]
    3400:	6163      	str	r3, [r4, #20]
    3402:	9b01      	ldr	r3, [sp, #4]
    3404:	6120      	str	r0, [r4, #16]
    3406:	b15b      	cbz	r3, 3420 <__smakebuf_r+0x74>
    3408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    340c:	4630      	mov	r0, r6
    340e:	f001 f9c7 	bl	47a0 <_isatty_r>
    3412:	b128      	cbz	r0, 3420 <__smakebuf_r+0x74>
    3414:	89a3      	ldrh	r3, [r4, #12]
    3416:	f023 0303 	bic.w	r3, r3, #3
    341a:	f043 0301 	orr.w	r3, r3, #1
    341e:	81a3      	strh	r3, [r4, #12]
    3420:	89a3      	ldrh	r3, [r4, #12]
    3422:	431d      	orrs	r5, r3
    3424:	81a5      	strh	r5, [r4, #12]
    3426:	e7cd      	b.n	33c4 <__smakebuf_r+0x18>
    3428:	00002a15 	.word	0x00002a15

0000342c <malloc>:
    342c:	4b02      	ldr	r3, [pc, #8]	; (3438 <malloc+0xc>)
    342e:	4601      	mov	r1, r0
    3430:	6818      	ldr	r0, [r3, #0]
    3432:	f7ff bc4f 	b.w	2cd4 <_malloc_r>
    3436:	bf00      	nop
    3438:	2000026c 	.word	0x2000026c

0000343c <__malloc_lock>:
    343c:	4770      	bx	lr

0000343e <__malloc_unlock>:
    343e:	4770      	bx	lr

00003440 <__ssputs_r>:
    3440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3444:	688e      	ldr	r6, [r1, #8]
    3446:	429e      	cmp	r6, r3
    3448:	4682      	mov	sl, r0
    344a:	460c      	mov	r4, r1
    344c:	4691      	mov	r9, r2
    344e:	4698      	mov	r8, r3
    3450:	d835      	bhi.n	34be <__ssputs_r+0x7e>
    3452:	898a      	ldrh	r2, [r1, #12]
    3454:	f412 6f90 	tst.w	r2, #1152	; 0x480
    3458:	d031      	beq.n	34be <__ssputs_r+0x7e>
    345a:	6825      	ldr	r5, [r4, #0]
    345c:	6909      	ldr	r1, [r1, #16]
    345e:	1a6f      	subs	r7, r5, r1
    3460:	6965      	ldr	r5, [r4, #20]
    3462:	2302      	movs	r3, #2
    3464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3468:	fb95 f5f3 	sdiv	r5, r5, r3
    346c:	f108 0301 	add.w	r3, r8, #1
    3470:	443b      	add	r3, r7
    3472:	429d      	cmp	r5, r3
    3474:	bf38      	it	cc
    3476:	461d      	movcc	r5, r3
    3478:	0553      	lsls	r3, r2, #21
    347a:	d531      	bpl.n	34e0 <__ssputs_r+0xa0>
    347c:	4629      	mov	r1, r5
    347e:	f7ff fc29 	bl	2cd4 <_malloc_r>
    3482:	4606      	mov	r6, r0
    3484:	b950      	cbnz	r0, 349c <__ssputs_r+0x5c>
    3486:	230c      	movs	r3, #12
    3488:	f8ca 3000 	str.w	r3, [sl]
    348c:	89a3      	ldrh	r3, [r4, #12]
    348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3492:	81a3      	strh	r3, [r4, #12]
    3494:	f04f 30ff 	mov.w	r0, #4294967295
    3498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    349c:	463a      	mov	r2, r7
    349e:	6921      	ldr	r1, [r4, #16]
    34a0:	f001 fa06 	bl	48b0 <memcpy>
    34a4:	89a3      	ldrh	r3, [r4, #12]
    34a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    34aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    34ae:	81a3      	strh	r3, [r4, #12]
    34b0:	6126      	str	r6, [r4, #16]
    34b2:	6165      	str	r5, [r4, #20]
    34b4:	443e      	add	r6, r7
    34b6:	1bed      	subs	r5, r5, r7
    34b8:	6026      	str	r6, [r4, #0]
    34ba:	60a5      	str	r5, [r4, #8]
    34bc:	4646      	mov	r6, r8
    34be:	4546      	cmp	r6, r8
    34c0:	bf28      	it	cs
    34c2:	4646      	movcs	r6, r8
    34c4:	4632      	mov	r2, r6
    34c6:	4649      	mov	r1, r9
    34c8:	6820      	ldr	r0, [r4, #0]
    34ca:	f001 f9fc 	bl	48c6 <memmove>
    34ce:	68a3      	ldr	r3, [r4, #8]
    34d0:	1b9b      	subs	r3, r3, r6
    34d2:	60a3      	str	r3, [r4, #8]
    34d4:	6823      	ldr	r3, [r4, #0]
    34d6:	441e      	add	r6, r3
    34d8:	6026      	str	r6, [r4, #0]
    34da:	2000      	movs	r0, #0
    34dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34e0:	462a      	mov	r2, r5
    34e2:	f001 fa0a 	bl	48fa <_realloc_r>
    34e6:	4606      	mov	r6, r0
    34e8:	2800      	cmp	r0, #0
    34ea:	d1e1      	bne.n	34b0 <__ssputs_r+0x70>
    34ec:	6921      	ldr	r1, [r4, #16]
    34ee:	4650      	mov	r0, sl
    34f0:	f7ff fba2 	bl	2c38 <_free_r>
    34f4:	e7c7      	b.n	3486 <__ssputs_r+0x46>
	...

000034f8 <_svfiprintf_r>:
    34f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34fc:	b09d      	sub	sp, #116	; 0x74
    34fe:	4680      	mov	r8, r0
    3500:	9303      	str	r3, [sp, #12]
    3502:	898b      	ldrh	r3, [r1, #12]
    3504:	061c      	lsls	r4, r3, #24
    3506:	460d      	mov	r5, r1
    3508:	4616      	mov	r6, r2
    350a:	d50f      	bpl.n	352c <_svfiprintf_r+0x34>
    350c:	690b      	ldr	r3, [r1, #16]
    350e:	b96b      	cbnz	r3, 352c <_svfiprintf_r+0x34>
    3510:	2140      	movs	r1, #64	; 0x40
    3512:	f7ff fbdf 	bl	2cd4 <_malloc_r>
    3516:	6028      	str	r0, [r5, #0]
    3518:	6128      	str	r0, [r5, #16]
    351a:	b928      	cbnz	r0, 3528 <_svfiprintf_r+0x30>
    351c:	230c      	movs	r3, #12
    351e:	f8c8 3000 	str.w	r3, [r8]
    3522:	f04f 30ff 	mov.w	r0, #4294967295
    3526:	e0c5      	b.n	36b4 <_svfiprintf_r+0x1bc>
    3528:	2340      	movs	r3, #64	; 0x40
    352a:	616b      	str	r3, [r5, #20]
    352c:	2300      	movs	r3, #0
    352e:	9309      	str	r3, [sp, #36]	; 0x24
    3530:	2320      	movs	r3, #32
    3532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3536:	2330      	movs	r3, #48	; 0x30
    3538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    353c:	f04f 0b01 	mov.w	fp, #1
    3540:	4637      	mov	r7, r6
    3542:	463c      	mov	r4, r7
    3544:	f814 3b01 	ldrb.w	r3, [r4], #1
    3548:	2b00      	cmp	r3, #0
    354a:	d13c      	bne.n	35c6 <_svfiprintf_r+0xce>
    354c:	ebb7 0a06 	subs.w	sl, r7, r6
    3550:	d00b      	beq.n	356a <_svfiprintf_r+0x72>
    3552:	4653      	mov	r3, sl
    3554:	4632      	mov	r2, r6
    3556:	4629      	mov	r1, r5
    3558:	4640      	mov	r0, r8
    355a:	f7ff ff71 	bl	3440 <__ssputs_r>
    355e:	3001      	adds	r0, #1
    3560:	f000 80a3 	beq.w	36aa <_svfiprintf_r+0x1b2>
    3564:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3566:	4453      	add	r3, sl
    3568:	9309      	str	r3, [sp, #36]	; 0x24
    356a:	783b      	ldrb	r3, [r7, #0]
    356c:	2b00      	cmp	r3, #0
    356e:	f000 809c 	beq.w	36aa <_svfiprintf_r+0x1b2>
    3572:	2300      	movs	r3, #0
    3574:	f04f 32ff 	mov.w	r2, #4294967295
    3578:	9304      	str	r3, [sp, #16]
    357a:	9307      	str	r3, [sp, #28]
    357c:	9205      	str	r2, [sp, #20]
    357e:	9306      	str	r3, [sp, #24]
    3580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3584:	931a      	str	r3, [sp, #104]	; 0x68
    3586:	2205      	movs	r2, #5
    3588:	7821      	ldrb	r1, [r4, #0]
    358a:	4850      	ldr	r0, [pc, #320]	; (36cc <_svfiprintf_r+0x1d4>)
    358c:	f001 f940 	bl	4810 <memchr>
    3590:	1c67      	adds	r7, r4, #1
    3592:	9b04      	ldr	r3, [sp, #16]
    3594:	b9d8      	cbnz	r0, 35ce <_svfiprintf_r+0xd6>
    3596:	06d9      	lsls	r1, r3, #27
    3598:	bf44      	itt	mi
    359a:	2220      	movmi	r2, #32
    359c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    35a0:	071a      	lsls	r2, r3, #28
    35a2:	bf44      	itt	mi
    35a4:	222b      	movmi	r2, #43	; 0x2b
    35a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    35aa:	7822      	ldrb	r2, [r4, #0]
    35ac:	2a2a      	cmp	r2, #42	; 0x2a
    35ae:	d016      	beq.n	35de <_svfiprintf_r+0xe6>
    35b0:	9a07      	ldr	r2, [sp, #28]
    35b2:	2100      	movs	r1, #0
    35b4:	200a      	movs	r0, #10
    35b6:	4627      	mov	r7, r4
    35b8:	3401      	adds	r4, #1
    35ba:	783b      	ldrb	r3, [r7, #0]
    35bc:	3b30      	subs	r3, #48	; 0x30
    35be:	2b09      	cmp	r3, #9
    35c0:	d951      	bls.n	3666 <_svfiprintf_r+0x16e>
    35c2:	b1c9      	cbz	r1, 35f8 <_svfiprintf_r+0x100>
    35c4:	e011      	b.n	35ea <_svfiprintf_r+0xf2>
    35c6:	2b25      	cmp	r3, #37	; 0x25
    35c8:	d0c0      	beq.n	354c <_svfiprintf_r+0x54>
    35ca:	4627      	mov	r7, r4
    35cc:	e7b9      	b.n	3542 <_svfiprintf_r+0x4a>
    35ce:	4a3f      	ldr	r2, [pc, #252]	; (36cc <_svfiprintf_r+0x1d4>)
    35d0:	1a80      	subs	r0, r0, r2
    35d2:	fa0b f000 	lsl.w	r0, fp, r0
    35d6:	4318      	orrs	r0, r3
    35d8:	9004      	str	r0, [sp, #16]
    35da:	463c      	mov	r4, r7
    35dc:	e7d3      	b.n	3586 <_svfiprintf_r+0x8e>
    35de:	9a03      	ldr	r2, [sp, #12]
    35e0:	1d11      	adds	r1, r2, #4
    35e2:	6812      	ldr	r2, [r2, #0]
    35e4:	9103      	str	r1, [sp, #12]
    35e6:	2a00      	cmp	r2, #0
    35e8:	db01      	blt.n	35ee <_svfiprintf_r+0xf6>
    35ea:	9207      	str	r2, [sp, #28]
    35ec:	e004      	b.n	35f8 <_svfiprintf_r+0x100>
    35ee:	4252      	negs	r2, r2
    35f0:	f043 0302 	orr.w	r3, r3, #2
    35f4:	9207      	str	r2, [sp, #28]
    35f6:	9304      	str	r3, [sp, #16]
    35f8:	783b      	ldrb	r3, [r7, #0]
    35fa:	2b2e      	cmp	r3, #46	; 0x2e
    35fc:	d10e      	bne.n	361c <_svfiprintf_r+0x124>
    35fe:	787b      	ldrb	r3, [r7, #1]
    3600:	2b2a      	cmp	r3, #42	; 0x2a
    3602:	f107 0101 	add.w	r1, r7, #1
    3606:	d132      	bne.n	366e <_svfiprintf_r+0x176>
    3608:	9b03      	ldr	r3, [sp, #12]
    360a:	1d1a      	adds	r2, r3, #4
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	9203      	str	r2, [sp, #12]
    3610:	2b00      	cmp	r3, #0
    3612:	bfb8      	it	lt
    3614:	f04f 33ff 	movlt.w	r3, #4294967295
    3618:	3702      	adds	r7, #2
    361a:	9305      	str	r3, [sp, #20]
    361c:	4c2c      	ldr	r4, [pc, #176]	; (36d0 <_svfiprintf_r+0x1d8>)
    361e:	7839      	ldrb	r1, [r7, #0]
    3620:	2203      	movs	r2, #3
    3622:	4620      	mov	r0, r4
    3624:	f001 f8f4 	bl	4810 <memchr>
    3628:	b138      	cbz	r0, 363a <_svfiprintf_r+0x142>
    362a:	2340      	movs	r3, #64	; 0x40
    362c:	1b00      	subs	r0, r0, r4
    362e:	fa03 f000 	lsl.w	r0, r3, r0
    3632:	9b04      	ldr	r3, [sp, #16]
    3634:	4303      	orrs	r3, r0
    3636:	9304      	str	r3, [sp, #16]
    3638:	3701      	adds	r7, #1
    363a:	7839      	ldrb	r1, [r7, #0]
    363c:	4825      	ldr	r0, [pc, #148]	; (36d4 <_svfiprintf_r+0x1dc>)
    363e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3642:	2206      	movs	r2, #6
    3644:	1c7e      	adds	r6, r7, #1
    3646:	f001 f8e3 	bl	4810 <memchr>
    364a:	2800      	cmp	r0, #0
    364c:	d035      	beq.n	36ba <_svfiprintf_r+0x1c2>
    364e:	4b22      	ldr	r3, [pc, #136]	; (36d8 <_svfiprintf_r+0x1e0>)
    3650:	b9fb      	cbnz	r3, 3692 <_svfiprintf_r+0x19a>
    3652:	9b03      	ldr	r3, [sp, #12]
    3654:	3307      	adds	r3, #7
    3656:	f023 0307 	bic.w	r3, r3, #7
    365a:	3308      	adds	r3, #8
    365c:	9303      	str	r3, [sp, #12]
    365e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3660:	444b      	add	r3, r9
    3662:	9309      	str	r3, [sp, #36]	; 0x24
    3664:	e76c      	b.n	3540 <_svfiprintf_r+0x48>
    3666:	fb00 3202 	mla	r2, r0, r2, r3
    366a:	2101      	movs	r1, #1
    366c:	e7a3      	b.n	35b6 <_svfiprintf_r+0xbe>
    366e:	2300      	movs	r3, #0
    3670:	9305      	str	r3, [sp, #20]
    3672:	4618      	mov	r0, r3
    3674:	240a      	movs	r4, #10
    3676:	460f      	mov	r7, r1
    3678:	3101      	adds	r1, #1
    367a:	783a      	ldrb	r2, [r7, #0]
    367c:	3a30      	subs	r2, #48	; 0x30
    367e:	2a09      	cmp	r2, #9
    3680:	d903      	bls.n	368a <_svfiprintf_r+0x192>
    3682:	2b00      	cmp	r3, #0
    3684:	d0ca      	beq.n	361c <_svfiprintf_r+0x124>
    3686:	9005      	str	r0, [sp, #20]
    3688:	e7c8      	b.n	361c <_svfiprintf_r+0x124>
    368a:	fb04 2000 	mla	r0, r4, r0, r2
    368e:	2301      	movs	r3, #1
    3690:	e7f1      	b.n	3676 <_svfiprintf_r+0x17e>
    3692:	ab03      	add	r3, sp, #12
    3694:	9300      	str	r3, [sp, #0]
    3696:	462a      	mov	r2, r5
    3698:	4b10      	ldr	r3, [pc, #64]	; (36dc <_svfiprintf_r+0x1e4>)
    369a:	a904      	add	r1, sp, #16
    369c:	4640      	mov	r0, r8
    369e:	f3af 8000 	nop.w
    36a2:	f1b0 3fff 	cmp.w	r0, #4294967295
    36a6:	4681      	mov	r9, r0
    36a8:	d1d9      	bne.n	365e <_svfiprintf_r+0x166>
    36aa:	89ab      	ldrh	r3, [r5, #12]
    36ac:	065b      	lsls	r3, r3, #25
    36ae:	f53f af38 	bmi.w	3522 <_svfiprintf_r+0x2a>
    36b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    36b4:	b01d      	add	sp, #116	; 0x74
    36b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36ba:	ab03      	add	r3, sp, #12
    36bc:	9300      	str	r3, [sp, #0]
    36be:	462a      	mov	r2, r5
    36c0:	4b06      	ldr	r3, [pc, #24]	; (36dc <_svfiprintf_r+0x1e4>)
    36c2:	a904      	add	r1, sp, #16
    36c4:	4640      	mov	r0, r8
    36c6:	f000 f9bf 	bl	3a48 <_printf_i>
    36ca:	e7ea      	b.n	36a2 <_svfiprintf_r+0x1aa>
    36cc:	0000515c 	.word	0x0000515c
    36d0:	00005162 	.word	0x00005162
    36d4:	00005166 	.word	0x00005166
    36d8:	00000000 	.word	0x00000000
    36dc:	00003441 	.word	0x00003441

000036e0 <__sfputc_r>:
    36e0:	6893      	ldr	r3, [r2, #8]
    36e2:	3b01      	subs	r3, #1
    36e4:	2b00      	cmp	r3, #0
    36e6:	b410      	push	{r4}
    36e8:	6093      	str	r3, [r2, #8]
    36ea:	da08      	bge.n	36fe <__sfputc_r+0x1e>
    36ec:	6994      	ldr	r4, [r2, #24]
    36ee:	42a3      	cmp	r3, r4
    36f0:	db02      	blt.n	36f8 <__sfputc_r+0x18>
    36f2:	b2cb      	uxtb	r3, r1
    36f4:	2b0a      	cmp	r3, #10
    36f6:	d102      	bne.n	36fe <__sfputc_r+0x1e>
    36f8:	bc10      	pop	{r4}
    36fa:	f7ff bd3f 	b.w	317c <__swbuf_r>
    36fe:	6813      	ldr	r3, [r2, #0]
    3700:	1c58      	adds	r0, r3, #1
    3702:	6010      	str	r0, [r2, #0]
    3704:	7019      	strb	r1, [r3, #0]
    3706:	b2c8      	uxtb	r0, r1
    3708:	bc10      	pop	{r4}
    370a:	4770      	bx	lr

0000370c <__sfputs_r>:
    370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    370e:	4606      	mov	r6, r0
    3710:	460f      	mov	r7, r1
    3712:	4614      	mov	r4, r2
    3714:	18d5      	adds	r5, r2, r3
    3716:	42ac      	cmp	r4, r5
    3718:	d101      	bne.n	371e <__sfputs_r+0x12>
    371a:	2000      	movs	r0, #0
    371c:	e007      	b.n	372e <__sfputs_r+0x22>
    371e:	463a      	mov	r2, r7
    3720:	f814 1b01 	ldrb.w	r1, [r4], #1
    3724:	4630      	mov	r0, r6
    3726:	f7ff ffdb 	bl	36e0 <__sfputc_r>
    372a:	1c43      	adds	r3, r0, #1
    372c:	d1f3      	bne.n	3716 <__sfputs_r+0xa>
    372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003730 <_vfiprintf_r>:
    3730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3734:	b09d      	sub	sp, #116	; 0x74
    3736:	460c      	mov	r4, r1
    3738:	4617      	mov	r7, r2
    373a:	9303      	str	r3, [sp, #12]
    373c:	4606      	mov	r6, r0
    373e:	b118      	cbz	r0, 3748 <_vfiprintf_r+0x18>
    3740:	6983      	ldr	r3, [r0, #24]
    3742:	b90b      	cbnz	r3, 3748 <_vfiprintf_r+0x18>
    3744:	f7ff f9a6 	bl	2a94 <__sinit>
    3748:	4b7c      	ldr	r3, [pc, #496]	; (393c <_vfiprintf_r+0x20c>)
    374a:	429c      	cmp	r4, r3
    374c:	d157      	bne.n	37fe <_vfiprintf_r+0xce>
    374e:	6874      	ldr	r4, [r6, #4]
    3750:	89a3      	ldrh	r3, [r4, #12]
    3752:	0718      	lsls	r0, r3, #28
    3754:	d55d      	bpl.n	3812 <_vfiprintf_r+0xe2>
    3756:	6923      	ldr	r3, [r4, #16]
    3758:	2b00      	cmp	r3, #0
    375a:	d05a      	beq.n	3812 <_vfiprintf_r+0xe2>
    375c:	2300      	movs	r3, #0
    375e:	9309      	str	r3, [sp, #36]	; 0x24
    3760:	2320      	movs	r3, #32
    3762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3766:	2330      	movs	r3, #48	; 0x30
    3768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    376c:	f04f 0b01 	mov.w	fp, #1
    3770:	46b8      	mov	r8, r7
    3772:	4645      	mov	r5, r8
    3774:	f815 3b01 	ldrb.w	r3, [r5], #1
    3778:	2b00      	cmp	r3, #0
    377a:	d155      	bne.n	3828 <_vfiprintf_r+0xf8>
    377c:	ebb8 0a07 	subs.w	sl, r8, r7
    3780:	d00b      	beq.n	379a <_vfiprintf_r+0x6a>
    3782:	4653      	mov	r3, sl
    3784:	463a      	mov	r2, r7
    3786:	4621      	mov	r1, r4
    3788:	4630      	mov	r0, r6
    378a:	f7ff ffbf 	bl	370c <__sfputs_r>
    378e:	3001      	adds	r0, #1
    3790:	f000 80c4 	beq.w	391c <_vfiprintf_r+0x1ec>
    3794:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3796:	4453      	add	r3, sl
    3798:	9309      	str	r3, [sp, #36]	; 0x24
    379a:	f898 3000 	ldrb.w	r3, [r8]
    379e:	2b00      	cmp	r3, #0
    37a0:	f000 80bc 	beq.w	391c <_vfiprintf_r+0x1ec>
    37a4:	2300      	movs	r3, #0
    37a6:	f04f 32ff 	mov.w	r2, #4294967295
    37aa:	9304      	str	r3, [sp, #16]
    37ac:	9307      	str	r3, [sp, #28]
    37ae:	9205      	str	r2, [sp, #20]
    37b0:	9306      	str	r3, [sp, #24]
    37b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    37b6:	931a      	str	r3, [sp, #104]	; 0x68
    37b8:	2205      	movs	r2, #5
    37ba:	7829      	ldrb	r1, [r5, #0]
    37bc:	4860      	ldr	r0, [pc, #384]	; (3940 <_vfiprintf_r+0x210>)
    37be:	f001 f827 	bl	4810 <memchr>
    37c2:	f105 0801 	add.w	r8, r5, #1
    37c6:	9b04      	ldr	r3, [sp, #16]
    37c8:	2800      	cmp	r0, #0
    37ca:	d131      	bne.n	3830 <_vfiprintf_r+0x100>
    37cc:	06d9      	lsls	r1, r3, #27
    37ce:	bf44      	itt	mi
    37d0:	2220      	movmi	r2, #32
    37d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    37d6:	071a      	lsls	r2, r3, #28
    37d8:	bf44      	itt	mi
    37da:	222b      	movmi	r2, #43	; 0x2b
    37dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    37e0:	782a      	ldrb	r2, [r5, #0]
    37e2:	2a2a      	cmp	r2, #42	; 0x2a
    37e4:	d02c      	beq.n	3840 <_vfiprintf_r+0x110>
    37e6:	9a07      	ldr	r2, [sp, #28]
    37e8:	2100      	movs	r1, #0
    37ea:	200a      	movs	r0, #10
    37ec:	46a8      	mov	r8, r5
    37ee:	3501      	adds	r5, #1
    37f0:	f898 3000 	ldrb.w	r3, [r8]
    37f4:	3b30      	subs	r3, #48	; 0x30
    37f6:	2b09      	cmp	r3, #9
    37f8:	d96d      	bls.n	38d6 <_vfiprintf_r+0x1a6>
    37fa:	b371      	cbz	r1, 385a <_vfiprintf_r+0x12a>
    37fc:	e026      	b.n	384c <_vfiprintf_r+0x11c>
    37fe:	4b51      	ldr	r3, [pc, #324]	; (3944 <_vfiprintf_r+0x214>)
    3800:	429c      	cmp	r4, r3
    3802:	d101      	bne.n	3808 <_vfiprintf_r+0xd8>
    3804:	68b4      	ldr	r4, [r6, #8]
    3806:	e7a3      	b.n	3750 <_vfiprintf_r+0x20>
    3808:	4b4f      	ldr	r3, [pc, #316]	; (3948 <_vfiprintf_r+0x218>)
    380a:	429c      	cmp	r4, r3
    380c:	bf08      	it	eq
    380e:	68f4      	ldreq	r4, [r6, #12]
    3810:	e79e      	b.n	3750 <_vfiprintf_r+0x20>
    3812:	4621      	mov	r1, r4
    3814:	4630      	mov	r0, r6
    3816:	f7ff fd15 	bl	3244 <__swsetup_r>
    381a:	2800      	cmp	r0, #0
    381c:	d09e      	beq.n	375c <_vfiprintf_r+0x2c>
    381e:	f04f 30ff 	mov.w	r0, #4294967295
    3822:	b01d      	add	sp, #116	; 0x74
    3824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3828:	2b25      	cmp	r3, #37	; 0x25
    382a:	d0a7      	beq.n	377c <_vfiprintf_r+0x4c>
    382c:	46a8      	mov	r8, r5
    382e:	e7a0      	b.n	3772 <_vfiprintf_r+0x42>
    3830:	4a43      	ldr	r2, [pc, #268]	; (3940 <_vfiprintf_r+0x210>)
    3832:	1a80      	subs	r0, r0, r2
    3834:	fa0b f000 	lsl.w	r0, fp, r0
    3838:	4318      	orrs	r0, r3
    383a:	9004      	str	r0, [sp, #16]
    383c:	4645      	mov	r5, r8
    383e:	e7bb      	b.n	37b8 <_vfiprintf_r+0x88>
    3840:	9a03      	ldr	r2, [sp, #12]
    3842:	1d11      	adds	r1, r2, #4
    3844:	6812      	ldr	r2, [r2, #0]
    3846:	9103      	str	r1, [sp, #12]
    3848:	2a00      	cmp	r2, #0
    384a:	db01      	blt.n	3850 <_vfiprintf_r+0x120>
    384c:	9207      	str	r2, [sp, #28]
    384e:	e004      	b.n	385a <_vfiprintf_r+0x12a>
    3850:	4252      	negs	r2, r2
    3852:	f043 0302 	orr.w	r3, r3, #2
    3856:	9207      	str	r2, [sp, #28]
    3858:	9304      	str	r3, [sp, #16]
    385a:	f898 3000 	ldrb.w	r3, [r8]
    385e:	2b2e      	cmp	r3, #46	; 0x2e
    3860:	d110      	bne.n	3884 <_vfiprintf_r+0x154>
    3862:	f898 3001 	ldrb.w	r3, [r8, #1]
    3866:	2b2a      	cmp	r3, #42	; 0x2a
    3868:	f108 0101 	add.w	r1, r8, #1
    386c:	d137      	bne.n	38de <_vfiprintf_r+0x1ae>
    386e:	9b03      	ldr	r3, [sp, #12]
    3870:	1d1a      	adds	r2, r3, #4
    3872:	681b      	ldr	r3, [r3, #0]
    3874:	9203      	str	r2, [sp, #12]
    3876:	2b00      	cmp	r3, #0
    3878:	bfb8      	it	lt
    387a:	f04f 33ff 	movlt.w	r3, #4294967295
    387e:	f108 0802 	add.w	r8, r8, #2
    3882:	9305      	str	r3, [sp, #20]
    3884:	4d31      	ldr	r5, [pc, #196]	; (394c <_vfiprintf_r+0x21c>)
    3886:	f898 1000 	ldrb.w	r1, [r8]
    388a:	2203      	movs	r2, #3
    388c:	4628      	mov	r0, r5
    388e:	f000 ffbf 	bl	4810 <memchr>
    3892:	b140      	cbz	r0, 38a6 <_vfiprintf_r+0x176>
    3894:	2340      	movs	r3, #64	; 0x40
    3896:	1b40      	subs	r0, r0, r5
    3898:	fa03 f000 	lsl.w	r0, r3, r0
    389c:	9b04      	ldr	r3, [sp, #16]
    389e:	4303      	orrs	r3, r0
    38a0:	9304      	str	r3, [sp, #16]
    38a2:	f108 0801 	add.w	r8, r8, #1
    38a6:	f898 1000 	ldrb.w	r1, [r8]
    38aa:	4829      	ldr	r0, [pc, #164]	; (3950 <_vfiprintf_r+0x220>)
    38ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    38b0:	2206      	movs	r2, #6
    38b2:	f108 0701 	add.w	r7, r8, #1
    38b6:	f000 ffab 	bl	4810 <memchr>
    38ba:	2800      	cmp	r0, #0
    38bc:	d034      	beq.n	3928 <_vfiprintf_r+0x1f8>
    38be:	4b25      	ldr	r3, [pc, #148]	; (3954 <_vfiprintf_r+0x224>)
    38c0:	bb03      	cbnz	r3, 3904 <_vfiprintf_r+0x1d4>
    38c2:	9b03      	ldr	r3, [sp, #12]
    38c4:	3307      	adds	r3, #7
    38c6:	f023 0307 	bic.w	r3, r3, #7
    38ca:	3308      	adds	r3, #8
    38cc:	9303      	str	r3, [sp, #12]
    38ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    38d0:	444b      	add	r3, r9
    38d2:	9309      	str	r3, [sp, #36]	; 0x24
    38d4:	e74c      	b.n	3770 <_vfiprintf_r+0x40>
    38d6:	fb00 3202 	mla	r2, r0, r2, r3
    38da:	2101      	movs	r1, #1
    38dc:	e786      	b.n	37ec <_vfiprintf_r+0xbc>
    38de:	2300      	movs	r3, #0
    38e0:	9305      	str	r3, [sp, #20]
    38e2:	4618      	mov	r0, r3
    38e4:	250a      	movs	r5, #10
    38e6:	4688      	mov	r8, r1
    38e8:	3101      	adds	r1, #1
    38ea:	f898 2000 	ldrb.w	r2, [r8]
    38ee:	3a30      	subs	r2, #48	; 0x30
    38f0:	2a09      	cmp	r2, #9
    38f2:	d903      	bls.n	38fc <_vfiprintf_r+0x1cc>
    38f4:	2b00      	cmp	r3, #0
    38f6:	d0c5      	beq.n	3884 <_vfiprintf_r+0x154>
    38f8:	9005      	str	r0, [sp, #20]
    38fa:	e7c3      	b.n	3884 <_vfiprintf_r+0x154>
    38fc:	fb05 2000 	mla	r0, r5, r0, r2
    3900:	2301      	movs	r3, #1
    3902:	e7f0      	b.n	38e6 <_vfiprintf_r+0x1b6>
    3904:	ab03      	add	r3, sp, #12
    3906:	9300      	str	r3, [sp, #0]
    3908:	4622      	mov	r2, r4
    390a:	4b13      	ldr	r3, [pc, #76]	; (3958 <_vfiprintf_r+0x228>)
    390c:	a904      	add	r1, sp, #16
    390e:	4630      	mov	r0, r6
    3910:	f3af 8000 	nop.w
    3914:	f1b0 3fff 	cmp.w	r0, #4294967295
    3918:	4681      	mov	r9, r0
    391a:	d1d8      	bne.n	38ce <_vfiprintf_r+0x19e>
    391c:	89a3      	ldrh	r3, [r4, #12]
    391e:	065b      	lsls	r3, r3, #25
    3920:	f53f af7d 	bmi.w	381e <_vfiprintf_r+0xee>
    3924:	9809      	ldr	r0, [sp, #36]	; 0x24
    3926:	e77c      	b.n	3822 <_vfiprintf_r+0xf2>
    3928:	ab03      	add	r3, sp, #12
    392a:	9300      	str	r3, [sp, #0]
    392c:	4622      	mov	r2, r4
    392e:	4b0a      	ldr	r3, [pc, #40]	; (3958 <_vfiprintf_r+0x228>)
    3930:	a904      	add	r1, sp, #16
    3932:	4630      	mov	r0, r6
    3934:	f000 f888 	bl	3a48 <_printf_i>
    3938:	e7ec      	b.n	3914 <_vfiprintf_r+0x1e4>
    393a:	bf00      	nop
    393c:	00005118 	.word	0x00005118
    3940:	0000515c 	.word	0x0000515c
    3944:	00005138 	.word	0x00005138
    3948:	000050f8 	.word	0x000050f8
    394c:	00005162 	.word	0x00005162
    3950:	00005166 	.word	0x00005166
    3954:	00000000 	.word	0x00000000
    3958:	0000370d 	.word	0x0000370d

0000395c <_printf_common>:
    395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3960:	4691      	mov	r9, r2
    3962:	461f      	mov	r7, r3
    3964:	688a      	ldr	r2, [r1, #8]
    3966:	690b      	ldr	r3, [r1, #16]
    3968:	f8dd 8020 	ldr.w	r8, [sp, #32]
    396c:	4293      	cmp	r3, r2
    396e:	bfb8      	it	lt
    3970:	4613      	movlt	r3, r2
    3972:	f8c9 3000 	str.w	r3, [r9]
    3976:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    397a:	4606      	mov	r6, r0
    397c:	460c      	mov	r4, r1
    397e:	b112      	cbz	r2, 3986 <_printf_common+0x2a>
    3980:	3301      	adds	r3, #1
    3982:	f8c9 3000 	str.w	r3, [r9]
    3986:	6823      	ldr	r3, [r4, #0]
    3988:	0699      	lsls	r1, r3, #26
    398a:	bf42      	ittt	mi
    398c:	f8d9 3000 	ldrmi.w	r3, [r9]
    3990:	3302      	addmi	r3, #2
    3992:	f8c9 3000 	strmi.w	r3, [r9]
    3996:	6825      	ldr	r5, [r4, #0]
    3998:	f015 0506 	ands.w	r5, r5, #6
    399c:	d107      	bne.n	39ae <_printf_common+0x52>
    399e:	f104 0a19 	add.w	sl, r4, #25
    39a2:	68e3      	ldr	r3, [r4, #12]
    39a4:	f8d9 2000 	ldr.w	r2, [r9]
    39a8:	1a9b      	subs	r3, r3, r2
    39aa:	429d      	cmp	r5, r3
    39ac:	db29      	blt.n	3a02 <_printf_common+0xa6>
    39ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    39b2:	6822      	ldr	r2, [r4, #0]
    39b4:	3300      	adds	r3, #0
    39b6:	bf18      	it	ne
    39b8:	2301      	movne	r3, #1
    39ba:	0692      	lsls	r2, r2, #26
    39bc:	d42e      	bmi.n	3a1c <_printf_common+0xc0>
    39be:	f104 0243 	add.w	r2, r4, #67	; 0x43
    39c2:	4639      	mov	r1, r7
    39c4:	4630      	mov	r0, r6
    39c6:	47c0      	blx	r8
    39c8:	3001      	adds	r0, #1
    39ca:	d021      	beq.n	3a10 <_printf_common+0xb4>
    39cc:	6823      	ldr	r3, [r4, #0]
    39ce:	68e5      	ldr	r5, [r4, #12]
    39d0:	f8d9 2000 	ldr.w	r2, [r9]
    39d4:	f003 0306 	and.w	r3, r3, #6
    39d8:	2b04      	cmp	r3, #4
    39da:	bf08      	it	eq
    39dc:	1aad      	subeq	r5, r5, r2
    39de:	68a3      	ldr	r3, [r4, #8]
    39e0:	6922      	ldr	r2, [r4, #16]
    39e2:	bf0c      	ite	eq
    39e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    39e8:	2500      	movne	r5, #0
    39ea:	4293      	cmp	r3, r2
    39ec:	bfc4      	itt	gt
    39ee:	1a9b      	subgt	r3, r3, r2
    39f0:	18ed      	addgt	r5, r5, r3
    39f2:	f04f 0900 	mov.w	r9, #0
    39f6:	341a      	adds	r4, #26
    39f8:	454d      	cmp	r5, r9
    39fa:	d11b      	bne.n	3a34 <_printf_common+0xd8>
    39fc:	2000      	movs	r0, #0
    39fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a02:	2301      	movs	r3, #1
    3a04:	4652      	mov	r2, sl
    3a06:	4639      	mov	r1, r7
    3a08:	4630      	mov	r0, r6
    3a0a:	47c0      	blx	r8
    3a0c:	3001      	adds	r0, #1
    3a0e:	d103      	bne.n	3a18 <_printf_common+0xbc>
    3a10:	f04f 30ff 	mov.w	r0, #4294967295
    3a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a18:	3501      	adds	r5, #1
    3a1a:	e7c2      	b.n	39a2 <_printf_common+0x46>
    3a1c:	18e1      	adds	r1, r4, r3
    3a1e:	1c5a      	adds	r2, r3, #1
    3a20:	2030      	movs	r0, #48	; 0x30
    3a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    3a26:	4422      	add	r2, r4
    3a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3a30:	3302      	adds	r3, #2
    3a32:	e7c4      	b.n	39be <_printf_common+0x62>
    3a34:	2301      	movs	r3, #1
    3a36:	4622      	mov	r2, r4
    3a38:	4639      	mov	r1, r7
    3a3a:	4630      	mov	r0, r6
    3a3c:	47c0      	blx	r8
    3a3e:	3001      	adds	r0, #1
    3a40:	d0e6      	beq.n	3a10 <_printf_common+0xb4>
    3a42:	f109 0901 	add.w	r9, r9, #1
    3a46:	e7d7      	b.n	39f8 <_printf_common+0x9c>

00003a48 <_printf_i>:
    3a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a4c:	4617      	mov	r7, r2
    3a4e:	7e0a      	ldrb	r2, [r1, #24]
    3a50:	b085      	sub	sp, #20
    3a52:	2a6e      	cmp	r2, #110	; 0x6e
    3a54:	4698      	mov	r8, r3
    3a56:	4606      	mov	r6, r0
    3a58:	460c      	mov	r4, r1
    3a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3a5c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3a60:	f000 80bc 	beq.w	3bdc <_printf_i+0x194>
    3a64:	d81a      	bhi.n	3a9c <_printf_i+0x54>
    3a66:	2a63      	cmp	r2, #99	; 0x63
    3a68:	d02e      	beq.n	3ac8 <_printf_i+0x80>
    3a6a:	d80a      	bhi.n	3a82 <_printf_i+0x3a>
    3a6c:	2a00      	cmp	r2, #0
    3a6e:	f000 80c8 	beq.w	3c02 <_printf_i+0x1ba>
    3a72:	2a58      	cmp	r2, #88	; 0x58
    3a74:	f000 808a 	beq.w	3b8c <_printf_i+0x144>
    3a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3a7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    3a80:	e02a      	b.n	3ad8 <_printf_i+0x90>
    3a82:	2a64      	cmp	r2, #100	; 0x64
    3a84:	d001      	beq.n	3a8a <_printf_i+0x42>
    3a86:	2a69      	cmp	r2, #105	; 0x69
    3a88:	d1f6      	bne.n	3a78 <_printf_i+0x30>
    3a8a:	6821      	ldr	r1, [r4, #0]
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	f011 0f80 	tst.w	r1, #128	; 0x80
    3a92:	d023      	beq.n	3adc <_printf_i+0x94>
    3a94:	1d11      	adds	r1, r2, #4
    3a96:	6019      	str	r1, [r3, #0]
    3a98:	6813      	ldr	r3, [r2, #0]
    3a9a:	e027      	b.n	3aec <_printf_i+0xa4>
    3a9c:	2a73      	cmp	r2, #115	; 0x73
    3a9e:	f000 80b4 	beq.w	3c0a <_printf_i+0x1c2>
    3aa2:	d808      	bhi.n	3ab6 <_printf_i+0x6e>
    3aa4:	2a6f      	cmp	r2, #111	; 0x6f
    3aa6:	d02a      	beq.n	3afe <_printf_i+0xb6>
    3aa8:	2a70      	cmp	r2, #112	; 0x70
    3aaa:	d1e5      	bne.n	3a78 <_printf_i+0x30>
    3aac:	680a      	ldr	r2, [r1, #0]
    3aae:	f042 0220 	orr.w	r2, r2, #32
    3ab2:	600a      	str	r2, [r1, #0]
    3ab4:	e003      	b.n	3abe <_printf_i+0x76>
    3ab6:	2a75      	cmp	r2, #117	; 0x75
    3ab8:	d021      	beq.n	3afe <_printf_i+0xb6>
    3aba:	2a78      	cmp	r2, #120	; 0x78
    3abc:	d1dc      	bne.n	3a78 <_printf_i+0x30>
    3abe:	2278      	movs	r2, #120	; 0x78
    3ac0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    3ac4:	496e      	ldr	r1, [pc, #440]	; (3c80 <_printf_i+0x238>)
    3ac6:	e064      	b.n	3b92 <_printf_i+0x14a>
    3ac8:	681a      	ldr	r2, [r3, #0]
    3aca:	f101 0542 	add.w	r5, r1, #66	; 0x42
    3ace:	1d11      	adds	r1, r2, #4
    3ad0:	6019      	str	r1, [r3, #0]
    3ad2:	6813      	ldr	r3, [r2, #0]
    3ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3ad8:	2301      	movs	r3, #1
    3ada:	e0a3      	b.n	3c24 <_printf_i+0x1dc>
    3adc:	f011 0f40 	tst.w	r1, #64	; 0x40
    3ae0:	f102 0104 	add.w	r1, r2, #4
    3ae4:	6019      	str	r1, [r3, #0]
    3ae6:	d0d7      	beq.n	3a98 <_printf_i+0x50>
    3ae8:	f9b2 3000 	ldrsh.w	r3, [r2]
    3aec:	2b00      	cmp	r3, #0
    3aee:	da03      	bge.n	3af8 <_printf_i+0xb0>
    3af0:	222d      	movs	r2, #45	; 0x2d
    3af2:	425b      	negs	r3, r3
    3af4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3af8:	4962      	ldr	r1, [pc, #392]	; (3c84 <_printf_i+0x23c>)
    3afa:	220a      	movs	r2, #10
    3afc:	e017      	b.n	3b2e <_printf_i+0xe6>
    3afe:	6820      	ldr	r0, [r4, #0]
    3b00:	6819      	ldr	r1, [r3, #0]
    3b02:	f010 0f80 	tst.w	r0, #128	; 0x80
    3b06:	d003      	beq.n	3b10 <_printf_i+0xc8>
    3b08:	1d08      	adds	r0, r1, #4
    3b0a:	6018      	str	r0, [r3, #0]
    3b0c:	680b      	ldr	r3, [r1, #0]
    3b0e:	e006      	b.n	3b1e <_printf_i+0xd6>
    3b10:	f010 0f40 	tst.w	r0, #64	; 0x40
    3b14:	f101 0004 	add.w	r0, r1, #4
    3b18:	6018      	str	r0, [r3, #0]
    3b1a:	d0f7      	beq.n	3b0c <_printf_i+0xc4>
    3b1c:	880b      	ldrh	r3, [r1, #0]
    3b1e:	4959      	ldr	r1, [pc, #356]	; (3c84 <_printf_i+0x23c>)
    3b20:	2a6f      	cmp	r2, #111	; 0x6f
    3b22:	bf14      	ite	ne
    3b24:	220a      	movne	r2, #10
    3b26:	2208      	moveq	r2, #8
    3b28:	2000      	movs	r0, #0
    3b2a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3b2e:	6865      	ldr	r5, [r4, #4]
    3b30:	60a5      	str	r5, [r4, #8]
    3b32:	2d00      	cmp	r5, #0
    3b34:	f2c0 809c 	blt.w	3c70 <_printf_i+0x228>
    3b38:	6820      	ldr	r0, [r4, #0]
    3b3a:	f020 0004 	bic.w	r0, r0, #4
    3b3e:	6020      	str	r0, [r4, #0]
    3b40:	2b00      	cmp	r3, #0
    3b42:	d13f      	bne.n	3bc4 <_printf_i+0x17c>
    3b44:	2d00      	cmp	r5, #0
    3b46:	f040 8095 	bne.w	3c74 <_printf_i+0x22c>
    3b4a:	4675      	mov	r5, lr
    3b4c:	2a08      	cmp	r2, #8
    3b4e:	d10b      	bne.n	3b68 <_printf_i+0x120>
    3b50:	6823      	ldr	r3, [r4, #0]
    3b52:	07da      	lsls	r2, r3, #31
    3b54:	d508      	bpl.n	3b68 <_printf_i+0x120>
    3b56:	6923      	ldr	r3, [r4, #16]
    3b58:	6862      	ldr	r2, [r4, #4]
    3b5a:	429a      	cmp	r2, r3
    3b5c:	bfde      	ittt	le
    3b5e:	2330      	movle	r3, #48	; 0x30
    3b60:	f805 3c01 	strble.w	r3, [r5, #-1]
    3b64:	f105 35ff 	addle.w	r5, r5, #4294967295
    3b68:	ebae 0305 	sub.w	r3, lr, r5
    3b6c:	6123      	str	r3, [r4, #16]
    3b6e:	f8cd 8000 	str.w	r8, [sp]
    3b72:	463b      	mov	r3, r7
    3b74:	aa03      	add	r2, sp, #12
    3b76:	4621      	mov	r1, r4
    3b78:	4630      	mov	r0, r6
    3b7a:	f7ff feef 	bl	395c <_printf_common>
    3b7e:	3001      	adds	r0, #1
    3b80:	d155      	bne.n	3c2e <_printf_i+0x1e6>
    3b82:	f04f 30ff 	mov.w	r0, #4294967295
    3b86:	b005      	add	sp, #20
    3b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b8c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    3b90:	493c      	ldr	r1, [pc, #240]	; (3c84 <_printf_i+0x23c>)
    3b92:	6822      	ldr	r2, [r4, #0]
    3b94:	6818      	ldr	r0, [r3, #0]
    3b96:	f012 0f80 	tst.w	r2, #128	; 0x80
    3b9a:	f100 0504 	add.w	r5, r0, #4
    3b9e:	601d      	str	r5, [r3, #0]
    3ba0:	d001      	beq.n	3ba6 <_printf_i+0x15e>
    3ba2:	6803      	ldr	r3, [r0, #0]
    3ba4:	e002      	b.n	3bac <_printf_i+0x164>
    3ba6:	0655      	lsls	r5, r2, #25
    3ba8:	d5fb      	bpl.n	3ba2 <_printf_i+0x15a>
    3baa:	8803      	ldrh	r3, [r0, #0]
    3bac:	07d0      	lsls	r0, r2, #31
    3bae:	bf44      	itt	mi
    3bb0:	f042 0220 	orrmi.w	r2, r2, #32
    3bb4:	6022      	strmi	r2, [r4, #0]
    3bb6:	b91b      	cbnz	r3, 3bc0 <_printf_i+0x178>
    3bb8:	6822      	ldr	r2, [r4, #0]
    3bba:	f022 0220 	bic.w	r2, r2, #32
    3bbe:	6022      	str	r2, [r4, #0]
    3bc0:	2210      	movs	r2, #16
    3bc2:	e7b1      	b.n	3b28 <_printf_i+0xe0>
    3bc4:	4675      	mov	r5, lr
    3bc6:	fbb3 f0f2 	udiv	r0, r3, r2
    3bca:	fb02 3310 	mls	r3, r2, r0, r3
    3bce:	5ccb      	ldrb	r3, [r1, r3]
    3bd0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3bd4:	4603      	mov	r3, r0
    3bd6:	2800      	cmp	r0, #0
    3bd8:	d1f5      	bne.n	3bc6 <_printf_i+0x17e>
    3bda:	e7b7      	b.n	3b4c <_printf_i+0x104>
    3bdc:	6808      	ldr	r0, [r1, #0]
    3bde:	681a      	ldr	r2, [r3, #0]
    3be0:	6949      	ldr	r1, [r1, #20]
    3be2:	f010 0f80 	tst.w	r0, #128	; 0x80
    3be6:	d004      	beq.n	3bf2 <_printf_i+0x1aa>
    3be8:	1d10      	adds	r0, r2, #4
    3bea:	6018      	str	r0, [r3, #0]
    3bec:	6813      	ldr	r3, [r2, #0]
    3bee:	6019      	str	r1, [r3, #0]
    3bf0:	e007      	b.n	3c02 <_printf_i+0x1ba>
    3bf2:	f010 0f40 	tst.w	r0, #64	; 0x40
    3bf6:	f102 0004 	add.w	r0, r2, #4
    3bfa:	6018      	str	r0, [r3, #0]
    3bfc:	6813      	ldr	r3, [r2, #0]
    3bfe:	d0f6      	beq.n	3bee <_printf_i+0x1a6>
    3c00:	8019      	strh	r1, [r3, #0]
    3c02:	2300      	movs	r3, #0
    3c04:	6123      	str	r3, [r4, #16]
    3c06:	4675      	mov	r5, lr
    3c08:	e7b1      	b.n	3b6e <_printf_i+0x126>
    3c0a:	681a      	ldr	r2, [r3, #0]
    3c0c:	1d11      	adds	r1, r2, #4
    3c0e:	6019      	str	r1, [r3, #0]
    3c10:	6815      	ldr	r5, [r2, #0]
    3c12:	6862      	ldr	r2, [r4, #4]
    3c14:	2100      	movs	r1, #0
    3c16:	4628      	mov	r0, r5
    3c18:	f000 fdfa 	bl	4810 <memchr>
    3c1c:	b108      	cbz	r0, 3c22 <_printf_i+0x1da>
    3c1e:	1b40      	subs	r0, r0, r5
    3c20:	6060      	str	r0, [r4, #4]
    3c22:	6863      	ldr	r3, [r4, #4]
    3c24:	6123      	str	r3, [r4, #16]
    3c26:	2300      	movs	r3, #0
    3c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3c2c:	e79f      	b.n	3b6e <_printf_i+0x126>
    3c2e:	6923      	ldr	r3, [r4, #16]
    3c30:	462a      	mov	r2, r5
    3c32:	4639      	mov	r1, r7
    3c34:	4630      	mov	r0, r6
    3c36:	47c0      	blx	r8
    3c38:	3001      	adds	r0, #1
    3c3a:	d0a2      	beq.n	3b82 <_printf_i+0x13a>
    3c3c:	6823      	ldr	r3, [r4, #0]
    3c3e:	079b      	lsls	r3, r3, #30
    3c40:	d507      	bpl.n	3c52 <_printf_i+0x20a>
    3c42:	2500      	movs	r5, #0
    3c44:	f104 0919 	add.w	r9, r4, #25
    3c48:	68e3      	ldr	r3, [r4, #12]
    3c4a:	9a03      	ldr	r2, [sp, #12]
    3c4c:	1a9b      	subs	r3, r3, r2
    3c4e:	429d      	cmp	r5, r3
    3c50:	db05      	blt.n	3c5e <_printf_i+0x216>
    3c52:	68e0      	ldr	r0, [r4, #12]
    3c54:	9b03      	ldr	r3, [sp, #12]
    3c56:	4298      	cmp	r0, r3
    3c58:	bfb8      	it	lt
    3c5a:	4618      	movlt	r0, r3
    3c5c:	e793      	b.n	3b86 <_printf_i+0x13e>
    3c5e:	2301      	movs	r3, #1
    3c60:	464a      	mov	r2, r9
    3c62:	4639      	mov	r1, r7
    3c64:	4630      	mov	r0, r6
    3c66:	47c0      	blx	r8
    3c68:	3001      	adds	r0, #1
    3c6a:	d08a      	beq.n	3b82 <_printf_i+0x13a>
    3c6c:	3501      	adds	r5, #1
    3c6e:	e7eb      	b.n	3c48 <_printf_i+0x200>
    3c70:	2b00      	cmp	r3, #0
    3c72:	d1a7      	bne.n	3bc4 <_printf_i+0x17c>
    3c74:	780b      	ldrb	r3, [r1, #0]
    3c76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3c7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3c7e:	e765      	b.n	3b4c <_printf_i+0x104>
    3c80:	0000517e 	.word	0x0000517e
    3c84:	0000516d 	.word	0x0000516d

00003c88 <__svfiscanf_r>:
    3c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c8c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    3c90:	f10d 080c 	add.w	r8, sp, #12
    3c94:	9301      	str	r3, [sp, #4]
    3c96:	2300      	movs	r3, #0
    3c98:	9346      	str	r3, [sp, #280]	; 0x118
    3c9a:	9347      	str	r3, [sp, #284]	; 0x11c
    3c9c:	4ba0      	ldr	r3, [pc, #640]	; (3f20 <__svfiscanf_r+0x298>)
    3c9e:	93a2      	str	r3, [sp, #648]	; 0x288
    3ca0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 3f28 <__svfiscanf_r+0x2a0>
    3ca4:	4b9f      	ldr	r3, [pc, #636]	; (3f24 <__svfiscanf_r+0x29c>)
    3ca6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    3caa:	4606      	mov	r6, r0
    3cac:	460c      	mov	r4, r1
    3cae:	93a3      	str	r3, [sp, #652]	; 0x28c
    3cb0:	4692      	mov	sl, r2
    3cb2:	270a      	movs	r7, #10
    3cb4:	f89a 3000 	ldrb.w	r3, [sl]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	f000 812f 	beq.w	3f1c <__svfiscanf_r+0x294>
    3cbe:	f000 fd83 	bl	47c8 <__locale_ctype_ptr>
    3cc2:	f89a b000 	ldrb.w	fp, [sl]
    3cc6:	4458      	add	r0, fp
    3cc8:	7843      	ldrb	r3, [r0, #1]
    3cca:	f013 0308 	ands.w	r3, r3, #8
    3cce:	d143      	bne.n	3d58 <__svfiscanf_r+0xd0>
    3cd0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    3cd4:	f10a 0501 	add.w	r5, sl, #1
    3cd8:	f040 8099 	bne.w	3e0e <__svfiscanf_r+0x186>
    3cdc:	9345      	str	r3, [sp, #276]	; 0x114
    3cde:	9343      	str	r3, [sp, #268]	; 0x10c
    3ce0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    3ce4:	2b2a      	cmp	r3, #42	; 0x2a
    3ce6:	d103      	bne.n	3cf0 <__svfiscanf_r+0x68>
    3ce8:	2310      	movs	r3, #16
    3cea:	9343      	str	r3, [sp, #268]	; 0x10c
    3cec:	f10a 0502 	add.w	r5, sl, #2
    3cf0:	7829      	ldrb	r1, [r5, #0]
    3cf2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    3cf6:	2a09      	cmp	r2, #9
    3cf8:	46aa      	mov	sl, r5
    3cfa:	f105 0501 	add.w	r5, r5, #1
    3cfe:	d941      	bls.n	3d84 <__svfiscanf_r+0xfc>
    3d00:	2203      	movs	r2, #3
    3d02:	4889      	ldr	r0, [pc, #548]	; (3f28 <__svfiscanf_r+0x2a0>)
    3d04:	f000 fd84 	bl	4810 <memchr>
    3d08:	b138      	cbz	r0, 3d1a <__svfiscanf_r+0x92>
    3d0a:	eba0 0309 	sub.w	r3, r0, r9
    3d0e:	2001      	movs	r0, #1
    3d10:	4098      	lsls	r0, r3
    3d12:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3d14:	4318      	orrs	r0, r3
    3d16:	9043      	str	r0, [sp, #268]	; 0x10c
    3d18:	46aa      	mov	sl, r5
    3d1a:	f89a 3000 	ldrb.w	r3, [sl]
    3d1e:	2b67      	cmp	r3, #103	; 0x67
    3d20:	f10a 0501 	add.w	r5, sl, #1
    3d24:	d84a      	bhi.n	3dbc <__svfiscanf_r+0x134>
    3d26:	2b65      	cmp	r3, #101	; 0x65
    3d28:	f080 80b7 	bcs.w	3e9a <__svfiscanf_r+0x212>
    3d2c:	2b47      	cmp	r3, #71	; 0x47
    3d2e:	d82f      	bhi.n	3d90 <__svfiscanf_r+0x108>
    3d30:	2b45      	cmp	r3, #69	; 0x45
    3d32:	f080 80b2 	bcs.w	3e9a <__svfiscanf_r+0x212>
    3d36:	2b00      	cmp	r3, #0
    3d38:	f000 8082 	beq.w	3e40 <__svfiscanf_r+0x1b8>
    3d3c:	2b25      	cmp	r3, #37	; 0x25
    3d3e:	d066      	beq.n	3e0e <__svfiscanf_r+0x186>
    3d40:	2303      	movs	r3, #3
    3d42:	9349      	str	r3, [sp, #292]	; 0x124
    3d44:	9744      	str	r7, [sp, #272]	; 0x110
    3d46:	e045      	b.n	3dd4 <__svfiscanf_r+0x14c>
    3d48:	9947      	ldr	r1, [sp, #284]	; 0x11c
    3d4a:	3101      	adds	r1, #1
    3d4c:	9147      	str	r1, [sp, #284]	; 0x11c
    3d4e:	6861      	ldr	r1, [r4, #4]
    3d50:	3301      	adds	r3, #1
    3d52:	3901      	subs	r1, #1
    3d54:	6061      	str	r1, [r4, #4]
    3d56:	6023      	str	r3, [r4, #0]
    3d58:	6863      	ldr	r3, [r4, #4]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	dd0b      	ble.n	3d76 <__svfiscanf_r+0xee>
    3d5e:	f000 fd33 	bl	47c8 <__locale_ctype_ptr>
    3d62:	6823      	ldr	r3, [r4, #0]
    3d64:	7819      	ldrb	r1, [r3, #0]
    3d66:	4408      	add	r0, r1
    3d68:	7841      	ldrb	r1, [r0, #1]
    3d6a:	070d      	lsls	r5, r1, #28
    3d6c:	d4ec      	bmi.n	3d48 <__svfiscanf_r+0xc0>
    3d6e:	f10a 0501 	add.w	r5, sl, #1
    3d72:	46aa      	mov	sl, r5
    3d74:	e79e      	b.n	3cb4 <__svfiscanf_r+0x2c>
    3d76:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3d78:	4621      	mov	r1, r4
    3d7a:	4630      	mov	r0, r6
    3d7c:	4798      	blx	r3
    3d7e:	2800      	cmp	r0, #0
    3d80:	d0ed      	beq.n	3d5e <__svfiscanf_r+0xd6>
    3d82:	e7f4      	b.n	3d6e <__svfiscanf_r+0xe6>
    3d84:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3d86:	fb07 1303 	mla	r3, r7, r3, r1
    3d8a:	3b30      	subs	r3, #48	; 0x30
    3d8c:	9345      	str	r3, [sp, #276]	; 0x114
    3d8e:	e7af      	b.n	3cf0 <__svfiscanf_r+0x68>
    3d90:	2b5b      	cmp	r3, #91	; 0x5b
    3d92:	d061      	beq.n	3e58 <__svfiscanf_r+0x1d0>
    3d94:	d80c      	bhi.n	3db0 <__svfiscanf_r+0x128>
    3d96:	2b58      	cmp	r3, #88	; 0x58
    3d98:	d1d2      	bne.n	3d40 <__svfiscanf_r+0xb8>
    3d9a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    3da0:	9243      	str	r2, [sp, #268]	; 0x10c
    3da2:	2210      	movs	r2, #16
    3da4:	9244      	str	r2, [sp, #272]	; 0x110
    3da6:	2b6f      	cmp	r3, #111	; 0x6f
    3da8:	bfb4      	ite	lt
    3daa:	2303      	movlt	r3, #3
    3dac:	2304      	movge	r3, #4
    3dae:	e010      	b.n	3dd2 <__svfiscanf_r+0x14a>
    3db0:	2b63      	cmp	r3, #99	; 0x63
    3db2:	d05c      	beq.n	3e6e <__svfiscanf_r+0x1e6>
    3db4:	2b64      	cmp	r3, #100	; 0x64
    3db6:	d1c3      	bne.n	3d40 <__svfiscanf_r+0xb8>
    3db8:	9744      	str	r7, [sp, #272]	; 0x110
    3dba:	e7f4      	b.n	3da6 <__svfiscanf_r+0x11e>
    3dbc:	2b70      	cmp	r3, #112	; 0x70
    3dbe:	d042      	beq.n	3e46 <__svfiscanf_r+0x1be>
    3dc0:	d81d      	bhi.n	3dfe <__svfiscanf_r+0x176>
    3dc2:	2b6e      	cmp	r3, #110	; 0x6e
    3dc4:	d059      	beq.n	3e7a <__svfiscanf_r+0x1f2>
    3dc6:	d843      	bhi.n	3e50 <__svfiscanf_r+0x1c8>
    3dc8:	2b69      	cmp	r3, #105	; 0x69
    3dca:	d1b9      	bne.n	3d40 <__svfiscanf_r+0xb8>
    3dcc:	2300      	movs	r3, #0
    3dce:	9344      	str	r3, [sp, #272]	; 0x110
    3dd0:	2303      	movs	r3, #3
    3dd2:	9349      	str	r3, [sp, #292]	; 0x124
    3dd4:	6863      	ldr	r3, [r4, #4]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	dd61      	ble.n	3e9e <__svfiscanf_r+0x216>
    3dda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3ddc:	0659      	lsls	r1, r3, #25
    3dde:	d56f      	bpl.n	3ec0 <__svfiscanf_r+0x238>
    3de0:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3de2:	2b02      	cmp	r3, #2
    3de4:	dc7c      	bgt.n	3ee0 <__svfiscanf_r+0x258>
    3de6:	ab01      	add	r3, sp, #4
    3de8:	4622      	mov	r2, r4
    3dea:	a943      	add	r1, sp, #268	; 0x10c
    3dec:	4630      	mov	r0, r6
    3dee:	f000 f8c7 	bl	3f80 <_scanf_chars>
    3df2:	2801      	cmp	r0, #1
    3df4:	f000 8092 	beq.w	3f1c <__svfiscanf_r+0x294>
    3df8:	2802      	cmp	r0, #2
    3dfa:	d1ba      	bne.n	3d72 <__svfiscanf_r+0xea>
    3dfc:	e01d      	b.n	3e3a <__svfiscanf_r+0x1b2>
    3dfe:	2b75      	cmp	r3, #117	; 0x75
    3e00:	d0da      	beq.n	3db8 <__svfiscanf_r+0x130>
    3e02:	2b78      	cmp	r3, #120	; 0x78
    3e04:	d0c9      	beq.n	3d9a <__svfiscanf_r+0x112>
    3e06:	2b73      	cmp	r3, #115	; 0x73
    3e08:	d19a      	bne.n	3d40 <__svfiscanf_r+0xb8>
    3e0a:	2302      	movs	r3, #2
    3e0c:	e7e1      	b.n	3dd2 <__svfiscanf_r+0x14a>
    3e0e:	6863      	ldr	r3, [r4, #4]
    3e10:	2b00      	cmp	r3, #0
    3e12:	dd0c      	ble.n	3e2e <__svfiscanf_r+0x1a6>
    3e14:	6823      	ldr	r3, [r4, #0]
    3e16:	781a      	ldrb	r2, [r3, #0]
    3e18:	4593      	cmp	fp, r2
    3e1a:	d17f      	bne.n	3f1c <__svfiscanf_r+0x294>
    3e1c:	3301      	adds	r3, #1
    3e1e:	6862      	ldr	r2, [r4, #4]
    3e20:	6023      	str	r3, [r4, #0]
    3e22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3e24:	3a01      	subs	r2, #1
    3e26:	3301      	adds	r3, #1
    3e28:	6062      	str	r2, [r4, #4]
    3e2a:	9347      	str	r3, [sp, #284]	; 0x11c
    3e2c:	e7a1      	b.n	3d72 <__svfiscanf_r+0xea>
    3e2e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3e30:	4621      	mov	r1, r4
    3e32:	4630      	mov	r0, r6
    3e34:	4798      	blx	r3
    3e36:	2800      	cmp	r0, #0
    3e38:	d0ec      	beq.n	3e14 <__svfiscanf_r+0x18c>
    3e3a:	9846      	ldr	r0, [sp, #280]	; 0x118
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d163      	bne.n	3f08 <__svfiscanf_r+0x280>
    3e40:	f04f 30ff 	mov.w	r0, #4294967295
    3e44:	e066      	b.n	3f14 <__svfiscanf_r+0x28c>
    3e46:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3e48:	f042 0220 	orr.w	r2, r2, #32
    3e4c:	9243      	str	r2, [sp, #268]	; 0x10c
    3e4e:	e7a4      	b.n	3d9a <__svfiscanf_r+0x112>
    3e50:	2308      	movs	r3, #8
    3e52:	9344      	str	r3, [sp, #272]	; 0x110
    3e54:	2304      	movs	r3, #4
    3e56:	e7bc      	b.n	3dd2 <__svfiscanf_r+0x14a>
    3e58:	4629      	mov	r1, r5
    3e5a:	4640      	mov	r0, r8
    3e5c:	f000 fa8e 	bl	437c <__sccl>
    3e60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3e66:	9343      	str	r3, [sp, #268]	; 0x10c
    3e68:	4605      	mov	r5, r0
    3e6a:	2301      	movs	r3, #1
    3e6c:	e7b1      	b.n	3dd2 <__svfiscanf_r+0x14a>
    3e6e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3e74:	9343      	str	r3, [sp, #268]	; 0x10c
    3e76:	2300      	movs	r3, #0
    3e78:	e7ab      	b.n	3dd2 <__svfiscanf_r+0x14a>
    3e7a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3e7c:	06d0      	lsls	r0, r2, #27
    3e7e:	f53f af78 	bmi.w	3d72 <__svfiscanf_r+0xea>
    3e82:	f012 0f01 	tst.w	r2, #1
    3e86:	9a01      	ldr	r2, [sp, #4]
    3e88:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3e8a:	f102 0104 	add.w	r1, r2, #4
    3e8e:	9101      	str	r1, [sp, #4]
    3e90:	6812      	ldr	r2, [r2, #0]
    3e92:	bf14      	ite	ne
    3e94:	8013      	strhne	r3, [r2, #0]
    3e96:	6013      	streq	r3, [r2, #0]
    3e98:	e76b      	b.n	3d72 <__svfiscanf_r+0xea>
    3e9a:	2305      	movs	r3, #5
    3e9c:	e799      	b.n	3dd2 <__svfiscanf_r+0x14a>
    3e9e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3ea0:	4621      	mov	r1, r4
    3ea2:	4630      	mov	r0, r6
    3ea4:	4798      	blx	r3
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d097      	beq.n	3dda <__svfiscanf_r+0x152>
    3eaa:	e7c6      	b.n	3e3a <__svfiscanf_r+0x1b2>
    3eac:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3eae:	3201      	adds	r2, #1
    3eb0:	9247      	str	r2, [sp, #284]	; 0x11c
    3eb2:	6862      	ldr	r2, [r4, #4]
    3eb4:	3a01      	subs	r2, #1
    3eb6:	2a00      	cmp	r2, #0
    3eb8:	6062      	str	r2, [r4, #4]
    3eba:	dd0a      	ble.n	3ed2 <__svfiscanf_r+0x24a>
    3ebc:	3301      	adds	r3, #1
    3ebe:	6023      	str	r3, [r4, #0]
    3ec0:	f000 fc82 	bl	47c8 <__locale_ctype_ptr>
    3ec4:	6823      	ldr	r3, [r4, #0]
    3ec6:	781a      	ldrb	r2, [r3, #0]
    3ec8:	4410      	add	r0, r2
    3eca:	7842      	ldrb	r2, [r0, #1]
    3ecc:	0712      	lsls	r2, r2, #28
    3ece:	d4ed      	bmi.n	3eac <__svfiscanf_r+0x224>
    3ed0:	e786      	b.n	3de0 <__svfiscanf_r+0x158>
    3ed2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3ed4:	4621      	mov	r1, r4
    3ed6:	4630      	mov	r0, r6
    3ed8:	4798      	blx	r3
    3eda:	2800      	cmp	r0, #0
    3edc:	d0f0      	beq.n	3ec0 <__svfiscanf_r+0x238>
    3ede:	e7ac      	b.n	3e3a <__svfiscanf_r+0x1b2>
    3ee0:	2b04      	cmp	r3, #4
    3ee2:	dc06      	bgt.n	3ef2 <__svfiscanf_r+0x26a>
    3ee4:	ab01      	add	r3, sp, #4
    3ee6:	4622      	mov	r2, r4
    3ee8:	a943      	add	r1, sp, #268	; 0x10c
    3eea:	4630      	mov	r0, r6
    3eec:	f000 f8ac 	bl	4048 <_scanf_i>
    3ef0:	e77f      	b.n	3df2 <__svfiscanf_r+0x16a>
    3ef2:	4b0e      	ldr	r3, [pc, #56]	; (3f2c <__svfiscanf_r+0x2a4>)
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	f43f af3c 	beq.w	3d72 <__svfiscanf_r+0xea>
    3efa:	ab01      	add	r3, sp, #4
    3efc:	4622      	mov	r2, r4
    3efe:	a943      	add	r1, sp, #268	; 0x10c
    3f00:	4630      	mov	r0, r6
    3f02:	f3af 8000 	nop.w
    3f06:	e774      	b.n	3df2 <__svfiscanf_r+0x16a>
    3f08:	89a3      	ldrh	r3, [r4, #12]
    3f0a:	f013 0f40 	tst.w	r3, #64	; 0x40
    3f0e:	bf18      	it	ne
    3f10:	f04f 30ff 	movne.w	r0, #4294967295
    3f14:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    3f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f1c:	9846      	ldr	r0, [sp, #280]	; 0x118
    3f1e:	e7f9      	b.n	3f14 <__svfiscanf_r+0x28c>
    3f20:	00004699 	.word	0x00004699
    3f24:	00004269 	.word	0x00004269
    3f28:	00005162 	.word	0x00005162
    3f2c:	00000000 	.word	0x00000000

00003f30 <_vfiscanf_r>:
    3f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f34:	460c      	mov	r4, r1
    3f36:	4616      	mov	r6, r2
    3f38:	461f      	mov	r7, r3
    3f3a:	4605      	mov	r5, r0
    3f3c:	b118      	cbz	r0, 3f46 <_vfiscanf_r+0x16>
    3f3e:	6983      	ldr	r3, [r0, #24]
    3f40:	b90b      	cbnz	r3, 3f46 <_vfiscanf_r+0x16>
    3f42:	f7fe fda7 	bl	2a94 <__sinit>
    3f46:	4b0b      	ldr	r3, [pc, #44]	; (3f74 <_vfiscanf_r+0x44>)
    3f48:	429c      	cmp	r4, r3
    3f4a:	d108      	bne.n	3f5e <_vfiscanf_r+0x2e>
    3f4c:	686c      	ldr	r4, [r5, #4]
    3f4e:	463b      	mov	r3, r7
    3f50:	4632      	mov	r2, r6
    3f52:	4621      	mov	r1, r4
    3f54:	4628      	mov	r0, r5
    3f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f5a:	f7ff be95 	b.w	3c88 <__svfiscanf_r>
    3f5e:	4b06      	ldr	r3, [pc, #24]	; (3f78 <_vfiscanf_r+0x48>)
    3f60:	429c      	cmp	r4, r3
    3f62:	d101      	bne.n	3f68 <_vfiscanf_r+0x38>
    3f64:	68ac      	ldr	r4, [r5, #8]
    3f66:	e7f2      	b.n	3f4e <_vfiscanf_r+0x1e>
    3f68:	4b04      	ldr	r3, [pc, #16]	; (3f7c <_vfiscanf_r+0x4c>)
    3f6a:	429c      	cmp	r4, r3
    3f6c:	bf08      	it	eq
    3f6e:	68ec      	ldreq	r4, [r5, #12]
    3f70:	e7ed      	b.n	3f4e <_vfiscanf_r+0x1e>
    3f72:	bf00      	nop
    3f74:	00005118 	.word	0x00005118
    3f78:	00005138 	.word	0x00005138
    3f7c:	000050f8 	.word	0x000050f8

00003f80 <_scanf_chars>:
    3f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f84:	4615      	mov	r5, r2
    3f86:	688a      	ldr	r2, [r1, #8]
    3f88:	4680      	mov	r8, r0
    3f8a:	460c      	mov	r4, r1
    3f8c:	b932      	cbnz	r2, 3f9c <_scanf_chars+0x1c>
    3f8e:	698a      	ldr	r2, [r1, #24]
    3f90:	2a00      	cmp	r2, #0
    3f92:	bf0c      	ite	eq
    3f94:	2201      	moveq	r2, #1
    3f96:	f04f 32ff 	movne.w	r2, #4294967295
    3f9a:	608a      	str	r2, [r1, #8]
    3f9c:	6822      	ldr	r2, [r4, #0]
    3f9e:	06d1      	lsls	r1, r2, #27
    3fa0:	bf5f      	itttt	pl
    3fa2:	681a      	ldrpl	r2, [r3, #0]
    3fa4:	1d11      	addpl	r1, r2, #4
    3fa6:	6019      	strpl	r1, [r3, #0]
    3fa8:	6817      	ldrpl	r7, [r2, #0]
    3faa:	2600      	movs	r6, #0
    3fac:	69a3      	ldr	r3, [r4, #24]
    3fae:	b1db      	cbz	r3, 3fe8 <_scanf_chars+0x68>
    3fb0:	2b01      	cmp	r3, #1
    3fb2:	d107      	bne.n	3fc4 <_scanf_chars+0x44>
    3fb4:	682b      	ldr	r3, [r5, #0]
    3fb6:	6962      	ldr	r2, [r4, #20]
    3fb8:	781b      	ldrb	r3, [r3, #0]
    3fba:	5cd3      	ldrb	r3, [r2, r3]
    3fbc:	b9a3      	cbnz	r3, 3fe8 <_scanf_chars+0x68>
    3fbe:	2e00      	cmp	r6, #0
    3fc0:	d132      	bne.n	4028 <_scanf_chars+0xa8>
    3fc2:	e006      	b.n	3fd2 <_scanf_chars+0x52>
    3fc4:	2b02      	cmp	r3, #2
    3fc6:	d007      	beq.n	3fd8 <_scanf_chars+0x58>
    3fc8:	2e00      	cmp	r6, #0
    3fca:	d12d      	bne.n	4028 <_scanf_chars+0xa8>
    3fcc:	69a3      	ldr	r3, [r4, #24]
    3fce:	2b01      	cmp	r3, #1
    3fd0:	d12a      	bne.n	4028 <_scanf_chars+0xa8>
    3fd2:	2001      	movs	r0, #1
    3fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fd8:	f000 fbf6 	bl	47c8 <__locale_ctype_ptr>
    3fdc:	682b      	ldr	r3, [r5, #0]
    3fde:	781b      	ldrb	r3, [r3, #0]
    3fe0:	4418      	add	r0, r3
    3fe2:	7843      	ldrb	r3, [r0, #1]
    3fe4:	071b      	lsls	r3, r3, #28
    3fe6:	d4ef      	bmi.n	3fc8 <_scanf_chars+0x48>
    3fe8:	6823      	ldr	r3, [r4, #0]
    3fea:	06da      	lsls	r2, r3, #27
    3fec:	bf5e      	ittt	pl
    3fee:	682b      	ldrpl	r3, [r5, #0]
    3ff0:	781b      	ldrbpl	r3, [r3, #0]
    3ff2:	703b      	strbpl	r3, [r7, #0]
    3ff4:	682a      	ldr	r2, [r5, #0]
    3ff6:	686b      	ldr	r3, [r5, #4]
    3ff8:	f102 0201 	add.w	r2, r2, #1
    3ffc:	602a      	str	r2, [r5, #0]
    3ffe:	68a2      	ldr	r2, [r4, #8]
    4000:	f103 33ff 	add.w	r3, r3, #4294967295
    4004:	f102 32ff 	add.w	r2, r2, #4294967295
    4008:	606b      	str	r3, [r5, #4]
    400a:	f106 0601 	add.w	r6, r6, #1
    400e:	bf58      	it	pl
    4010:	3701      	addpl	r7, #1
    4012:	60a2      	str	r2, [r4, #8]
    4014:	b142      	cbz	r2, 4028 <_scanf_chars+0xa8>
    4016:	2b00      	cmp	r3, #0
    4018:	dcc8      	bgt.n	3fac <_scanf_chars+0x2c>
    401a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    401e:	4629      	mov	r1, r5
    4020:	4640      	mov	r0, r8
    4022:	4798      	blx	r3
    4024:	2800      	cmp	r0, #0
    4026:	d0c1      	beq.n	3fac <_scanf_chars+0x2c>
    4028:	6823      	ldr	r3, [r4, #0]
    402a:	f013 0310 	ands.w	r3, r3, #16
    402e:	d105      	bne.n	403c <_scanf_chars+0xbc>
    4030:	68e2      	ldr	r2, [r4, #12]
    4032:	3201      	adds	r2, #1
    4034:	60e2      	str	r2, [r4, #12]
    4036:	69a2      	ldr	r2, [r4, #24]
    4038:	b102      	cbz	r2, 403c <_scanf_chars+0xbc>
    403a:	703b      	strb	r3, [r7, #0]
    403c:	6923      	ldr	r3, [r4, #16]
    403e:	441e      	add	r6, r3
    4040:	6126      	str	r6, [r4, #16]
    4042:	2000      	movs	r0, #0
    4044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004048 <_scanf_i>:
    4048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    404c:	469a      	mov	sl, r3
    404e:	4b74      	ldr	r3, [pc, #464]	; (4220 <_scanf_i+0x1d8>)
    4050:	460c      	mov	r4, r1
    4052:	4683      	mov	fp, r0
    4054:	4616      	mov	r6, r2
    4056:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    405a:	b087      	sub	sp, #28
    405c:	ab03      	add	r3, sp, #12
    405e:	68a7      	ldr	r7, [r4, #8]
    4060:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    4064:	4b6f      	ldr	r3, [pc, #444]	; (4224 <_scanf_i+0x1dc>)
    4066:	69a1      	ldr	r1, [r4, #24]
    4068:	4a6f      	ldr	r2, [pc, #444]	; (4228 <_scanf_i+0x1e0>)
    406a:	2903      	cmp	r1, #3
    406c:	bf18      	it	ne
    406e:	461a      	movne	r2, r3
    4070:	1e7b      	subs	r3, r7, #1
    4072:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    4076:	bf84      	itt	hi
    4078:	f240 135d 	movwhi	r3, #349	; 0x15d
    407c:	60a3      	strhi	r3, [r4, #8]
    407e:	6823      	ldr	r3, [r4, #0]
    4080:	9200      	str	r2, [sp, #0]
    4082:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    4086:	bf88      	it	hi
    4088:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    408c:	f104 091c 	add.w	r9, r4, #28
    4090:	6023      	str	r3, [r4, #0]
    4092:	bf8c      	ite	hi
    4094:	197f      	addhi	r7, r7, r5
    4096:	2700      	movls	r7, #0
    4098:	464b      	mov	r3, r9
    409a:	f04f 0800 	mov.w	r8, #0
    409e:	9301      	str	r3, [sp, #4]
    40a0:	6831      	ldr	r1, [r6, #0]
    40a2:	ab03      	add	r3, sp, #12
    40a4:	2202      	movs	r2, #2
    40a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    40aa:	7809      	ldrb	r1, [r1, #0]
    40ac:	f000 fbb0 	bl	4810 <memchr>
    40b0:	9b01      	ldr	r3, [sp, #4]
    40b2:	b328      	cbz	r0, 4100 <_scanf_i+0xb8>
    40b4:	f1b8 0f01 	cmp.w	r8, #1
    40b8:	d156      	bne.n	4168 <_scanf_i+0x120>
    40ba:	6862      	ldr	r2, [r4, #4]
    40bc:	b92a      	cbnz	r2, 40ca <_scanf_i+0x82>
    40be:	2208      	movs	r2, #8
    40c0:	6062      	str	r2, [r4, #4]
    40c2:	6822      	ldr	r2, [r4, #0]
    40c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    40c8:	6022      	str	r2, [r4, #0]
    40ca:	6822      	ldr	r2, [r4, #0]
    40cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    40d0:	6022      	str	r2, [r4, #0]
    40d2:	68a2      	ldr	r2, [r4, #8]
    40d4:	1e51      	subs	r1, r2, #1
    40d6:	60a1      	str	r1, [r4, #8]
    40d8:	b192      	cbz	r2, 4100 <_scanf_i+0xb8>
    40da:	6832      	ldr	r2, [r6, #0]
    40dc:	1c51      	adds	r1, r2, #1
    40de:	6031      	str	r1, [r6, #0]
    40e0:	7812      	ldrb	r2, [r2, #0]
    40e2:	701a      	strb	r2, [r3, #0]
    40e4:	1c5d      	adds	r5, r3, #1
    40e6:	6873      	ldr	r3, [r6, #4]
    40e8:	3b01      	subs	r3, #1
    40ea:	2b00      	cmp	r3, #0
    40ec:	6073      	str	r3, [r6, #4]
    40ee:	dc06      	bgt.n	40fe <_scanf_i+0xb6>
    40f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    40f4:	4631      	mov	r1, r6
    40f6:	4658      	mov	r0, fp
    40f8:	4798      	blx	r3
    40fa:	2800      	cmp	r0, #0
    40fc:	d176      	bne.n	41ec <_scanf_i+0x1a4>
    40fe:	462b      	mov	r3, r5
    4100:	f108 0801 	add.w	r8, r8, #1
    4104:	f1b8 0f03 	cmp.w	r8, #3
    4108:	d1c9      	bne.n	409e <_scanf_i+0x56>
    410a:	6862      	ldr	r2, [r4, #4]
    410c:	b90a      	cbnz	r2, 4112 <_scanf_i+0xca>
    410e:	220a      	movs	r2, #10
    4110:	6062      	str	r2, [r4, #4]
    4112:	6862      	ldr	r2, [r4, #4]
    4114:	4945      	ldr	r1, [pc, #276]	; (422c <_scanf_i+0x1e4>)
    4116:	6960      	ldr	r0, [r4, #20]
    4118:	9301      	str	r3, [sp, #4]
    411a:	1a89      	subs	r1, r1, r2
    411c:	f000 f92e 	bl	437c <__sccl>
    4120:	9b01      	ldr	r3, [sp, #4]
    4122:	f04f 0800 	mov.w	r8, #0
    4126:	461d      	mov	r5, r3
    4128:	68a3      	ldr	r3, [r4, #8]
    412a:	2b00      	cmp	r3, #0
    412c:	d038      	beq.n	41a0 <_scanf_i+0x158>
    412e:	6831      	ldr	r1, [r6, #0]
    4130:	6960      	ldr	r0, [r4, #20]
    4132:	780a      	ldrb	r2, [r1, #0]
    4134:	5c80      	ldrb	r0, [r0, r2]
    4136:	2800      	cmp	r0, #0
    4138:	d032      	beq.n	41a0 <_scanf_i+0x158>
    413a:	2a30      	cmp	r2, #48	; 0x30
    413c:	6822      	ldr	r2, [r4, #0]
    413e:	d121      	bne.n	4184 <_scanf_i+0x13c>
    4140:	0510      	lsls	r0, r2, #20
    4142:	d51f      	bpl.n	4184 <_scanf_i+0x13c>
    4144:	f108 0801 	add.w	r8, r8, #1
    4148:	b117      	cbz	r7, 4150 <_scanf_i+0x108>
    414a:	3301      	adds	r3, #1
    414c:	3f01      	subs	r7, #1
    414e:	60a3      	str	r3, [r4, #8]
    4150:	6873      	ldr	r3, [r6, #4]
    4152:	3b01      	subs	r3, #1
    4154:	2b00      	cmp	r3, #0
    4156:	6073      	str	r3, [r6, #4]
    4158:	dd1b      	ble.n	4192 <_scanf_i+0x14a>
    415a:	6833      	ldr	r3, [r6, #0]
    415c:	3301      	adds	r3, #1
    415e:	6033      	str	r3, [r6, #0]
    4160:	68a3      	ldr	r3, [r4, #8]
    4162:	3b01      	subs	r3, #1
    4164:	60a3      	str	r3, [r4, #8]
    4166:	e7df      	b.n	4128 <_scanf_i+0xe0>
    4168:	f1b8 0f02 	cmp.w	r8, #2
    416c:	d1b1      	bne.n	40d2 <_scanf_i+0x8a>
    416e:	6822      	ldr	r2, [r4, #0]
    4170:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    4174:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4178:	d1c2      	bne.n	4100 <_scanf_i+0xb8>
    417a:	2110      	movs	r1, #16
    417c:	6061      	str	r1, [r4, #4]
    417e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    4182:	e7a5      	b.n	40d0 <_scanf_i+0x88>
    4184:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    4188:	6022      	str	r2, [r4, #0]
    418a:	780b      	ldrb	r3, [r1, #0]
    418c:	702b      	strb	r3, [r5, #0]
    418e:	3501      	adds	r5, #1
    4190:	e7de      	b.n	4150 <_scanf_i+0x108>
    4192:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    4196:	4631      	mov	r1, r6
    4198:	4658      	mov	r0, fp
    419a:	4798      	blx	r3
    419c:	2800      	cmp	r0, #0
    419e:	d0df      	beq.n	4160 <_scanf_i+0x118>
    41a0:	6823      	ldr	r3, [r4, #0]
    41a2:	05d9      	lsls	r1, r3, #23
    41a4:	d50c      	bpl.n	41c0 <_scanf_i+0x178>
    41a6:	454d      	cmp	r5, r9
    41a8:	d908      	bls.n	41bc <_scanf_i+0x174>
    41aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    41ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    41b2:	4632      	mov	r2, r6
    41b4:	4658      	mov	r0, fp
    41b6:	4798      	blx	r3
    41b8:	1e6f      	subs	r7, r5, #1
    41ba:	463d      	mov	r5, r7
    41bc:	454d      	cmp	r5, r9
    41be:	d02c      	beq.n	421a <_scanf_i+0x1d2>
    41c0:	6822      	ldr	r2, [r4, #0]
    41c2:	f012 0210 	ands.w	r2, r2, #16
    41c6:	d11e      	bne.n	4206 <_scanf_i+0x1be>
    41c8:	702a      	strb	r2, [r5, #0]
    41ca:	6863      	ldr	r3, [r4, #4]
    41cc:	9e00      	ldr	r6, [sp, #0]
    41ce:	4649      	mov	r1, r9
    41d0:	4658      	mov	r0, fp
    41d2:	47b0      	blx	r6
    41d4:	6822      	ldr	r2, [r4, #0]
    41d6:	f8da 3000 	ldr.w	r3, [sl]
    41da:	f012 0f20 	tst.w	r2, #32
    41de:	d008      	beq.n	41f2 <_scanf_i+0x1aa>
    41e0:	1d1a      	adds	r2, r3, #4
    41e2:	f8ca 2000 	str.w	r2, [sl]
    41e6:	681b      	ldr	r3, [r3, #0]
    41e8:	6018      	str	r0, [r3, #0]
    41ea:	e009      	b.n	4200 <_scanf_i+0x1b8>
    41ec:	f04f 0800 	mov.w	r8, #0
    41f0:	e7d6      	b.n	41a0 <_scanf_i+0x158>
    41f2:	07d2      	lsls	r2, r2, #31
    41f4:	d5f4      	bpl.n	41e0 <_scanf_i+0x198>
    41f6:	1d1a      	adds	r2, r3, #4
    41f8:	f8ca 2000 	str.w	r2, [sl]
    41fc:	681b      	ldr	r3, [r3, #0]
    41fe:	8018      	strh	r0, [r3, #0]
    4200:	68e3      	ldr	r3, [r4, #12]
    4202:	3301      	adds	r3, #1
    4204:	60e3      	str	r3, [r4, #12]
    4206:	eba5 0509 	sub.w	r5, r5, r9
    420a:	44a8      	add	r8, r5
    420c:	6925      	ldr	r5, [r4, #16]
    420e:	4445      	add	r5, r8
    4210:	6125      	str	r5, [r4, #16]
    4212:	2000      	movs	r0, #0
    4214:	b007      	add	sp, #28
    4216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    421a:	2001      	movs	r0, #1
    421c:	e7fa      	b.n	4214 <_scanf_i+0x1cc>
    421e:	bf00      	nop
    4220:	00005190 	.word	0x00005190
    4224:	000045fd 	.word	0x000045fd
    4228:	000044dd 	.word	0x000044dd
    422c:	000051ac 	.word	0x000051ac

00004230 <_read_r>:
    4230:	b538      	push	{r3, r4, r5, lr}
    4232:	4c07      	ldr	r4, [pc, #28]	; (4250 <_read_r+0x20>)
    4234:	4605      	mov	r5, r0
    4236:	4608      	mov	r0, r1
    4238:	4611      	mov	r1, r2
    423a:	2200      	movs	r2, #0
    423c:	6022      	str	r2, [r4, #0]
    423e:	461a      	mov	r2, r3
    4240:	f7fd fece 	bl	1fe0 <_read>
    4244:	1c43      	adds	r3, r0, #1
    4246:	d102      	bne.n	424e <_read_r+0x1e>
    4248:	6823      	ldr	r3, [r4, #0]
    424a:	b103      	cbz	r3, 424e <_read_r+0x1e>
    424c:	602b      	str	r3, [r5, #0]
    424e:	bd38      	pop	{r3, r4, r5, pc}
    4250:	200046f8 	.word	0x200046f8

00004254 <lflush>:
    4254:	8983      	ldrh	r3, [r0, #12]
    4256:	f003 0309 	and.w	r3, r3, #9
    425a:	2b09      	cmp	r3, #9
    425c:	d101      	bne.n	4262 <lflush+0xe>
    425e:	f7fe bbc7 	b.w	29f0 <fflush>
    4262:	2000      	movs	r0, #0
    4264:	4770      	bx	lr
	...

00004268 <__srefill_r>:
    4268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    426a:	460c      	mov	r4, r1
    426c:	4605      	mov	r5, r0
    426e:	b118      	cbz	r0, 4278 <__srefill_r+0x10>
    4270:	6983      	ldr	r3, [r0, #24]
    4272:	b90b      	cbnz	r3, 4278 <__srefill_r+0x10>
    4274:	f7fe fc0e 	bl	2a94 <__sinit>
    4278:	4b3b      	ldr	r3, [pc, #236]	; (4368 <__srefill_r+0x100>)
    427a:	429c      	cmp	r4, r3
    427c:	d10a      	bne.n	4294 <__srefill_r+0x2c>
    427e:	686c      	ldr	r4, [r5, #4]
    4280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    4284:	2300      	movs	r3, #0
    4286:	6063      	str	r3, [r4, #4]
    4288:	b293      	uxth	r3, r2
    428a:	069e      	lsls	r6, r3, #26
    428c:	d50c      	bpl.n	42a8 <__srefill_r+0x40>
    428e:	f04f 30ff 	mov.w	r0, #4294967295
    4292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4294:	4b35      	ldr	r3, [pc, #212]	; (436c <__srefill_r+0x104>)
    4296:	429c      	cmp	r4, r3
    4298:	d101      	bne.n	429e <__srefill_r+0x36>
    429a:	68ac      	ldr	r4, [r5, #8]
    429c:	e7f0      	b.n	4280 <__srefill_r+0x18>
    429e:	4b34      	ldr	r3, [pc, #208]	; (4370 <__srefill_r+0x108>)
    42a0:	429c      	cmp	r4, r3
    42a2:	bf08      	it	eq
    42a4:	68ec      	ldreq	r4, [r5, #12]
    42a6:	e7eb      	b.n	4280 <__srefill_r+0x18>
    42a8:	0758      	lsls	r0, r3, #29
    42aa:	d448      	bmi.n	433e <__srefill_r+0xd6>
    42ac:	06d9      	lsls	r1, r3, #27
    42ae:	d405      	bmi.n	42bc <__srefill_r+0x54>
    42b0:	2309      	movs	r3, #9
    42b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    42b6:	602b      	str	r3, [r5, #0]
    42b8:	81a2      	strh	r2, [r4, #12]
    42ba:	e7e8      	b.n	428e <__srefill_r+0x26>
    42bc:	071a      	lsls	r2, r3, #28
    42be:	d50b      	bpl.n	42d8 <__srefill_r+0x70>
    42c0:	4621      	mov	r1, r4
    42c2:	4628      	mov	r0, r5
    42c4:	f7fe fb6a 	bl	299c <_fflush_r>
    42c8:	2800      	cmp	r0, #0
    42ca:	d1e0      	bne.n	428e <__srefill_r+0x26>
    42cc:	89a3      	ldrh	r3, [r4, #12]
    42ce:	60a0      	str	r0, [r4, #8]
    42d0:	f023 0308 	bic.w	r3, r3, #8
    42d4:	81a3      	strh	r3, [r4, #12]
    42d6:	61a0      	str	r0, [r4, #24]
    42d8:	89a3      	ldrh	r3, [r4, #12]
    42da:	f043 0304 	orr.w	r3, r3, #4
    42de:	81a3      	strh	r3, [r4, #12]
    42e0:	6923      	ldr	r3, [r4, #16]
    42e2:	b91b      	cbnz	r3, 42ec <__srefill_r+0x84>
    42e4:	4621      	mov	r1, r4
    42e6:	4628      	mov	r0, r5
    42e8:	f7ff f860 	bl	33ac <__smakebuf_r>
    42ec:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    42f0:	b2be      	uxth	r6, r7
    42f2:	07b3      	lsls	r3, r6, #30
    42f4:	d00f      	beq.n	4316 <__srefill_r+0xae>
    42f6:	2301      	movs	r3, #1
    42f8:	81a3      	strh	r3, [r4, #12]
    42fa:	4b1e      	ldr	r3, [pc, #120]	; (4374 <__srefill_r+0x10c>)
    42fc:	491e      	ldr	r1, [pc, #120]	; (4378 <__srefill_r+0x110>)
    42fe:	6818      	ldr	r0, [r3, #0]
    4300:	f006 0609 	and.w	r6, r6, #9
    4304:	f7fe fc32 	bl	2b6c <_fwalk>
    4308:	2e09      	cmp	r6, #9
    430a:	81a7      	strh	r7, [r4, #12]
    430c:	d103      	bne.n	4316 <__srefill_r+0xae>
    430e:	4621      	mov	r1, r4
    4310:	4628      	mov	r0, r5
    4312:	f7fe fabb 	bl	288c <__sflush_r>
    4316:	6922      	ldr	r2, [r4, #16]
    4318:	6022      	str	r2, [r4, #0]
    431a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    431c:	6963      	ldr	r3, [r4, #20]
    431e:	6a21      	ldr	r1, [r4, #32]
    4320:	4628      	mov	r0, r5
    4322:	47b0      	blx	r6
    4324:	2800      	cmp	r0, #0
    4326:	6060      	str	r0, [r4, #4]
    4328:	dc1c      	bgt.n	4364 <__srefill_r+0xfc>
    432a:	89a3      	ldrh	r3, [r4, #12]
    432c:	bf17      	itett	ne
    432e:	2200      	movne	r2, #0
    4330:	f043 0320 	orreq.w	r3, r3, #32
    4334:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    4338:	6062      	strne	r2, [r4, #4]
    433a:	81a3      	strh	r3, [r4, #12]
    433c:	e7a7      	b.n	428e <__srefill_r+0x26>
    433e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4340:	2900      	cmp	r1, #0
    4342:	d0cd      	beq.n	42e0 <__srefill_r+0x78>
    4344:	f104 0344 	add.w	r3, r4, #68	; 0x44
    4348:	4299      	cmp	r1, r3
    434a:	d002      	beq.n	4352 <__srefill_r+0xea>
    434c:	4628      	mov	r0, r5
    434e:	f7fe fc73 	bl	2c38 <_free_r>
    4352:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4354:	6063      	str	r3, [r4, #4]
    4356:	2000      	movs	r0, #0
    4358:	6360      	str	r0, [r4, #52]	; 0x34
    435a:	2b00      	cmp	r3, #0
    435c:	d0c0      	beq.n	42e0 <__srefill_r+0x78>
    435e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4360:	6023      	str	r3, [r4, #0]
    4362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4364:	2000      	movs	r0, #0
    4366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4368:	00005118 	.word	0x00005118
    436c:	00005138 	.word	0x00005138
    4370:	000050f8 	.word	0x000050f8
    4374:	00005158 	.word	0x00005158
    4378:	00004255 	.word	0x00004255

0000437c <__sccl>:
    437c:	b570      	push	{r4, r5, r6, lr}
    437e:	780b      	ldrb	r3, [r1, #0]
    4380:	2b5e      	cmp	r3, #94	; 0x5e
    4382:	bf13      	iteet	ne
    4384:	1c4a      	addne	r2, r1, #1
    4386:	1c8a      	addeq	r2, r1, #2
    4388:	784b      	ldrbeq	r3, [r1, #1]
    438a:	2100      	movne	r1, #0
    438c:	bf08      	it	eq
    438e:	2101      	moveq	r1, #1
    4390:	1e44      	subs	r4, r0, #1
    4392:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    4396:	f804 1f01 	strb.w	r1, [r4, #1]!
    439a:	42a5      	cmp	r5, r4
    439c:	d1fb      	bne.n	4396 <__sccl+0x1a>
    439e:	b913      	cbnz	r3, 43a6 <__sccl+0x2a>
    43a0:	3a01      	subs	r2, #1
    43a2:	4610      	mov	r0, r2
    43a4:	bd70      	pop	{r4, r5, r6, pc}
    43a6:	f081 0401 	eor.w	r4, r1, #1
    43aa:	54c4      	strb	r4, [r0, r3]
    43ac:	4611      	mov	r1, r2
    43ae:	780d      	ldrb	r5, [r1, #0]
    43b0:	2d2d      	cmp	r5, #45	; 0x2d
    43b2:	f101 0201 	add.w	r2, r1, #1
    43b6:	d006      	beq.n	43c6 <__sccl+0x4a>
    43b8:	2d5d      	cmp	r5, #93	; 0x5d
    43ba:	d0f2      	beq.n	43a2 <__sccl+0x26>
    43bc:	b90d      	cbnz	r5, 43c2 <__sccl+0x46>
    43be:	460a      	mov	r2, r1
    43c0:	e7ef      	b.n	43a2 <__sccl+0x26>
    43c2:	462b      	mov	r3, r5
    43c4:	e7f1      	b.n	43aa <__sccl+0x2e>
    43c6:	784e      	ldrb	r6, [r1, #1]
    43c8:	2e5d      	cmp	r6, #93	; 0x5d
    43ca:	d0fa      	beq.n	43c2 <__sccl+0x46>
    43cc:	42b3      	cmp	r3, r6
    43ce:	dcf8      	bgt.n	43c2 <__sccl+0x46>
    43d0:	3102      	adds	r1, #2
    43d2:	3301      	adds	r3, #1
    43d4:	429e      	cmp	r6, r3
    43d6:	54c4      	strb	r4, [r0, r3]
    43d8:	dcfb      	bgt.n	43d2 <__sccl+0x56>
    43da:	e7e8      	b.n	43ae <__sccl+0x32>

000043dc <_strtol_l.isra.0>:
    43dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43e0:	4680      	mov	r8, r0
    43e2:	4689      	mov	r9, r1
    43e4:	4692      	mov	sl, r2
    43e6:	461f      	mov	r7, r3
    43e8:	468b      	mov	fp, r1
    43ea:	465d      	mov	r5, fp
    43ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    43ee:	f815 4b01 	ldrb.w	r4, [r5], #1
    43f2:	f000 f9e5 	bl	47c0 <__locale_ctype_ptr_l>
    43f6:	4420      	add	r0, r4
    43f8:	7846      	ldrb	r6, [r0, #1]
    43fa:	f016 0608 	ands.w	r6, r6, #8
    43fe:	d10b      	bne.n	4418 <_strtol_l.isra.0+0x3c>
    4400:	2c2d      	cmp	r4, #45	; 0x2d
    4402:	d10b      	bne.n	441c <_strtol_l.isra.0+0x40>
    4404:	782c      	ldrb	r4, [r5, #0]
    4406:	2601      	movs	r6, #1
    4408:	f10b 0502 	add.w	r5, fp, #2
    440c:	b167      	cbz	r7, 4428 <_strtol_l.isra.0+0x4c>
    440e:	2f10      	cmp	r7, #16
    4410:	d114      	bne.n	443c <_strtol_l.isra.0+0x60>
    4412:	2c30      	cmp	r4, #48	; 0x30
    4414:	d00a      	beq.n	442c <_strtol_l.isra.0+0x50>
    4416:	e011      	b.n	443c <_strtol_l.isra.0+0x60>
    4418:	46ab      	mov	fp, r5
    441a:	e7e6      	b.n	43ea <_strtol_l.isra.0+0xe>
    441c:	2c2b      	cmp	r4, #43	; 0x2b
    441e:	bf04      	itt	eq
    4420:	782c      	ldrbeq	r4, [r5, #0]
    4422:	f10b 0502 	addeq.w	r5, fp, #2
    4426:	e7f1      	b.n	440c <_strtol_l.isra.0+0x30>
    4428:	2c30      	cmp	r4, #48	; 0x30
    442a:	d127      	bne.n	447c <_strtol_l.isra.0+0xa0>
    442c:	782b      	ldrb	r3, [r5, #0]
    442e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4432:	2b58      	cmp	r3, #88	; 0x58
    4434:	d14b      	bne.n	44ce <_strtol_l.isra.0+0xf2>
    4436:	786c      	ldrb	r4, [r5, #1]
    4438:	2710      	movs	r7, #16
    443a:	3502      	adds	r5, #2
    443c:	2e00      	cmp	r6, #0
    443e:	bf0c      	ite	eq
    4440:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    4444:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    4448:	2200      	movs	r2, #0
    444a:	fbb1 fef7 	udiv	lr, r1, r7
    444e:	4610      	mov	r0, r2
    4450:	fb07 1c1e 	mls	ip, r7, lr, r1
    4454:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    4458:	2b09      	cmp	r3, #9
    445a:	d811      	bhi.n	4480 <_strtol_l.isra.0+0xa4>
    445c:	461c      	mov	r4, r3
    445e:	42a7      	cmp	r7, r4
    4460:	dd1d      	ble.n	449e <_strtol_l.isra.0+0xc2>
    4462:	1c53      	adds	r3, r2, #1
    4464:	d007      	beq.n	4476 <_strtol_l.isra.0+0x9a>
    4466:	4586      	cmp	lr, r0
    4468:	d316      	bcc.n	4498 <_strtol_l.isra.0+0xbc>
    446a:	d101      	bne.n	4470 <_strtol_l.isra.0+0x94>
    446c:	45a4      	cmp	ip, r4
    446e:	db13      	blt.n	4498 <_strtol_l.isra.0+0xbc>
    4470:	fb00 4007 	mla	r0, r0, r7, r4
    4474:	2201      	movs	r2, #1
    4476:	f815 4b01 	ldrb.w	r4, [r5], #1
    447a:	e7eb      	b.n	4454 <_strtol_l.isra.0+0x78>
    447c:	270a      	movs	r7, #10
    447e:	e7dd      	b.n	443c <_strtol_l.isra.0+0x60>
    4480:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    4484:	2b19      	cmp	r3, #25
    4486:	d801      	bhi.n	448c <_strtol_l.isra.0+0xb0>
    4488:	3c37      	subs	r4, #55	; 0x37
    448a:	e7e8      	b.n	445e <_strtol_l.isra.0+0x82>
    448c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    4490:	2b19      	cmp	r3, #25
    4492:	d804      	bhi.n	449e <_strtol_l.isra.0+0xc2>
    4494:	3c57      	subs	r4, #87	; 0x57
    4496:	e7e2      	b.n	445e <_strtol_l.isra.0+0x82>
    4498:	f04f 32ff 	mov.w	r2, #4294967295
    449c:	e7eb      	b.n	4476 <_strtol_l.isra.0+0x9a>
    449e:	1c53      	adds	r3, r2, #1
    44a0:	d108      	bne.n	44b4 <_strtol_l.isra.0+0xd8>
    44a2:	2322      	movs	r3, #34	; 0x22
    44a4:	f8c8 3000 	str.w	r3, [r8]
    44a8:	4608      	mov	r0, r1
    44aa:	f1ba 0f00 	cmp.w	sl, #0
    44ae:	d107      	bne.n	44c0 <_strtol_l.isra.0+0xe4>
    44b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44b4:	b106      	cbz	r6, 44b8 <_strtol_l.isra.0+0xdc>
    44b6:	4240      	negs	r0, r0
    44b8:	f1ba 0f00 	cmp.w	sl, #0
    44bc:	d00c      	beq.n	44d8 <_strtol_l.isra.0+0xfc>
    44be:	b122      	cbz	r2, 44ca <_strtol_l.isra.0+0xee>
    44c0:	3d01      	subs	r5, #1
    44c2:	f8ca 5000 	str.w	r5, [sl]
    44c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44ca:	464d      	mov	r5, r9
    44cc:	e7f9      	b.n	44c2 <_strtol_l.isra.0+0xe6>
    44ce:	2430      	movs	r4, #48	; 0x30
    44d0:	2f00      	cmp	r7, #0
    44d2:	d1b3      	bne.n	443c <_strtol_l.isra.0+0x60>
    44d4:	2708      	movs	r7, #8
    44d6:	e7b1      	b.n	443c <_strtol_l.isra.0+0x60>
    44d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000044dc <_strtol_r>:
    44dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    44de:	4c06      	ldr	r4, [pc, #24]	; (44f8 <_strtol_r+0x1c>)
    44e0:	4d06      	ldr	r5, [pc, #24]	; (44fc <_strtol_r+0x20>)
    44e2:	6824      	ldr	r4, [r4, #0]
    44e4:	6a24      	ldr	r4, [r4, #32]
    44e6:	2c00      	cmp	r4, #0
    44e8:	bf08      	it	eq
    44ea:	462c      	moveq	r4, r5
    44ec:	9400      	str	r4, [sp, #0]
    44ee:	f7ff ff75 	bl	43dc <_strtol_l.isra.0>
    44f2:	b003      	add	sp, #12
    44f4:	bd30      	pop	{r4, r5, pc}
    44f6:	bf00      	nop
    44f8:	2000026c 	.word	0x2000026c
    44fc:	200002d0 	.word	0x200002d0

00004500 <_strtoul_l.isra.0>:
    4500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4504:	4680      	mov	r8, r0
    4506:	4689      	mov	r9, r1
    4508:	4692      	mov	sl, r2
    450a:	461e      	mov	r6, r3
    450c:	460f      	mov	r7, r1
    450e:	463d      	mov	r5, r7
    4510:	9808      	ldr	r0, [sp, #32]
    4512:	f815 4b01 	ldrb.w	r4, [r5], #1
    4516:	f000 f953 	bl	47c0 <__locale_ctype_ptr_l>
    451a:	4420      	add	r0, r4
    451c:	7843      	ldrb	r3, [r0, #1]
    451e:	f013 0308 	ands.w	r3, r3, #8
    4522:	d10a      	bne.n	453a <_strtoul_l.isra.0+0x3a>
    4524:	2c2d      	cmp	r4, #45	; 0x2d
    4526:	d10a      	bne.n	453e <_strtoul_l.isra.0+0x3e>
    4528:	782c      	ldrb	r4, [r5, #0]
    452a:	2301      	movs	r3, #1
    452c:	1cbd      	adds	r5, r7, #2
    452e:	b15e      	cbz	r6, 4548 <_strtoul_l.isra.0+0x48>
    4530:	2e10      	cmp	r6, #16
    4532:	d113      	bne.n	455c <_strtoul_l.isra.0+0x5c>
    4534:	2c30      	cmp	r4, #48	; 0x30
    4536:	d009      	beq.n	454c <_strtoul_l.isra.0+0x4c>
    4538:	e010      	b.n	455c <_strtoul_l.isra.0+0x5c>
    453a:	462f      	mov	r7, r5
    453c:	e7e7      	b.n	450e <_strtoul_l.isra.0+0xe>
    453e:	2c2b      	cmp	r4, #43	; 0x2b
    4540:	bf04      	itt	eq
    4542:	782c      	ldrbeq	r4, [r5, #0]
    4544:	1cbd      	addeq	r5, r7, #2
    4546:	e7f2      	b.n	452e <_strtoul_l.isra.0+0x2e>
    4548:	2c30      	cmp	r4, #48	; 0x30
    454a:	d125      	bne.n	4598 <_strtoul_l.isra.0+0x98>
    454c:	782a      	ldrb	r2, [r5, #0]
    454e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    4552:	2a58      	cmp	r2, #88	; 0x58
    4554:	d14a      	bne.n	45ec <_strtoul_l.isra.0+0xec>
    4556:	786c      	ldrb	r4, [r5, #1]
    4558:	2610      	movs	r6, #16
    455a:	3502      	adds	r5, #2
    455c:	f04f 31ff 	mov.w	r1, #4294967295
    4560:	2700      	movs	r7, #0
    4562:	fbb1 f1f6 	udiv	r1, r1, r6
    4566:	fb06 fe01 	mul.w	lr, r6, r1
    456a:	ea6f 0e0e 	mvn.w	lr, lr
    456e:	4638      	mov	r0, r7
    4570:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    4574:	2a09      	cmp	r2, #9
    4576:	d811      	bhi.n	459c <_strtoul_l.isra.0+0x9c>
    4578:	4614      	mov	r4, r2
    457a:	42a6      	cmp	r6, r4
    457c:	dd1d      	ble.n	45ba <_strtoul_l.isra.0+0xba>
    457e:	2f00      	cmp	r7, #0
    4580:	db18      	blt.n	45b4 <_strtoul_l.isra.0+0xb4>
    4582:	4281      	cmp	r1, r0
    4584:	d316      	bcc.n	45b4 <_strtoul_l.isra.0+0xb4>
    4586:	d101      	bne.n	458c <_strtoul_l.isra.0+0x8c>
    4588:	45a6      	cmp	lr, r4
    458a:	db13      	blt.n	45b4 <_strtoul_l.isra.0+0xb4>
    458c:	fb00 4006 	mla	r0, r0, r6, r4
    4590:	2701      	movs	r7, #1
    4592:	f815 4b01 	ldrb.w	r4, [r5], #1
    4596:	e7eb      	b.n	4570 <_strtoul_l.isra.0+0x70>
    4598:	260a      	movs	r6, #10
    459a:	e7df      	b.n	455c <_strtoul_l.isra.0+0x5c>
    459c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    45a0:	2a19      	cmp	r2, #25
    45a2:	d801      	bhi.n	45a8 <_strtoul_l.isra.0+0xa8>
    45a4:	3c37      	subs	r4, #55	; 0x37
    45a6:	e7e8      	b.n	457a <_strtoul_l.isra.0+0x7a>
    45a8:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    45ac:	2a19      	cmp	r2, #25
    45ae:	d804      	bhi.n	45ba <_strtoul_l.isra.0+0xba>
    45b0:	3c57      	subs	r4, #87	; 0x57
    45b2:	e7e2      	b.n	457a <_strtoul_l.isra.0+0x7a>
    45b4:	f04f 37ff 	mov.w	r7, #4294967295
    45b8:	e7eb      	b.n	4592 <_strtoul_l.isra.0+0x92>
    45ba:	2f00      	cmp	r7, #0
    45bc:	da09      	bge.n	45d2 <_strtoul_l.isra.0+0xd2>
    45be:	2322      	movs	r3, #34	; 0x22
    45c0:	f8c8 3000 	str.w	r3, [r8]
    45c4:	f04f 30ff 	mov.w	r0, #4294967295
    45c8:	f1ba 0f00 	cmp.w	sl, #0
    45cc:	d107      	bne.n	45de <_strtoul_l.isra.0+0xde>
    45ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    45d2:	b103      	cbz	r3, 45d6 <_strtoul_l.isra.0+0xd6>
    45d4:	4240      	negs	r0, r0
    45d6:	f1ba 0f00 	cmp.w	sl, #0
    45da:	d00c      	beq.n	45f6 <_strtoul_l.isra.0+0xf6>
    45dc:	b127      	cbz	r7, 45e8 <_strtoul_l.isra.0+0xe8>
    45de:	3d01      	subs	r5, #1
    45e0:	f8ca 5000 	str.w	r5, [sl]
    45e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    45e8:	464d      	mov	r5, r9
    45ea:	e7f9      	b.n	45e0 <_strtoul_l.isra.0+0xe0>
    45ec:	2430      	movs	r4, #48	; 0x30
    45ee:	2e00      	cmp	r6, #0
    45f0:	d1b4      	bne.n	455c <_strtoul_l.isra.0+0x5c>
    45f2:	2608      	movs	r6, #8
    45f4:	e7b2      	b.n	455c <_strtoul_l.isra.0+0x5c>
    45f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000045fc <_strtoul_r>:
    45fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    45fe:	4c06      	ldr	r4, [pc, #24]	; (4618 <_strtoul_r+0x1c>)
    4600:	4d06      	ldr	r5, [pc, #24]	; (461c <_strtoul_r+0x20>)
    4602:	6824      	ldr	r4, [r4, #0]
    4604:	6a24      	ldr	r4, [r4, #32]
    4606:	2c00      	cmp	r4, #0
    4608:	bf08      	it	eq
    460a:	462c      	moveq	r4, r5
    460c:	9400      	str	r4, [sp, #0]
    460e:	f7ff ff77 	bl	4500 <_strtoul_l.isra.0>
    4612:	b003      	add	sp, #12
    4614:	bd30      	pop	{r4, r5, pc}
    4616:	bf00      	nop
    4618:	2000026c 	.word	0x2000026c
    461c:	200002d0 	.word	0x200002d0

00004620 <__submore>:
    4620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4624:	460c      	mov	r4, r1
    4626:	6b49      	ldr	r1, [r1, #52]	; 0x34
    4628:	f104 0344 	add.w	r3, r4, #68	; 0x44
    462c:	4299      	cmp	r1, r3
    462e:	d11e      	bne.n	466e <__submore+0x4e>
    4630:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4634:	f7fe fb4e 	bl	2cd4 <_malloc_r>
    4638:	b918      	cbnz	r0, 4642 <__submore+0x22>
    463a:	f04f 30ff 	mov.w	r0, #4294967295
    463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4642:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4646:	63a3      	str	r3, [r4, #56]	; 0x38
    4648:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    464c:	6360      	str	r0, [r4, #52]	; 0x34
    464e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    4652:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4656:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    465a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    465e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    4662:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    4666:	6020      	str	r0, [r4, #0]
    4668:	2000      	movs	r0, #0
    466a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    466e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    4670:	0077      	lsls	r7, r6, #1
    4672:	463a      	mov	r2, r7
    4674:	f000 f941 	bl	48fa <_realloc_r>
    4678:	4605      	mov	r5, r0
    467a:	2800      	cmp	r0, #0
    467c:	d0dd      	beq.n	463a <__submore+0x1a>
    467e:	eb00 0806 	add.w	r8, r0, r6
    4682:	4601      	mov	r1, r0
    4684:	4632      	mov	r2, r6
    4686:	4640      	mov	r0, r8
    4688:	f000 f912 	bl	48b0 <memcpy>
    468c:	f8c4 8000 	str.w	r8, [r4]
    4690:	6365      	str	r5, [r4, #52]	; 0x34
    4692:	63a7      	str	r7, [r4, #56]	; 0x38
    4694:	e7e8      	b.n	4668 <__submore+0x48>
	...

00004698 <_ungetc_r>:
    4698:	1c4b      	adds	r3, r1, #1
    469a:	b570      	push	{r4, r5, r6, lr}
    469c:	4606      	mov	r6, r0
    469e:	460d      	mov	r5, r1
    46a0:	4614      	mov	r4, r2
    46a2:	d103      	bne.n	46ac <_ungetc_r+0x14>
    46a4:	f04f 35ff 	mov.w	r5, #4294967295
    46a8:	4628      	mov	r0, r5
    46aa:	bd70      	pop	{r4, r5, r6, pc}
    46ac:	b118      	cbz	r0, 46b6 <_ungetc_r+0x1e>
    46ae:	6983      	ldr	r3, [r0, #24]
    46b0:	b90b      	cbnz	r3, 46b6 <_ungetc_r+0x1e>
    46b2:	f7fe f9ef 	bl	2a94 <__sinit>
    46b6:	4b2e      	ldr	r3, [pc, #184]	; (4770 <_ungetc_r+0xd8>)
    46b8:	429c      	cmp	r4, r3
    46ba:	d12c      	bne.n	4716 <_ungetc_r+0x7e>
    46bc:	6874      	ldr	r4, [r6, #4]
    46be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    46c2:	f023 0320 	bic.w	r3, r3, #32
    46c6:	81a3      	strh	r3, [r4, #12]
    46c8:	b29b      	uxth	r3, r3
    46ca:	0759      	lsls	r1, r3, #29
    46cc:	d413      	bmi.n	46f6 <_ungetc_r+0x5e>
    46ce:	06da      	lsls	r2, r3, #27
    46d0:	d5e8      	bpl.n	46a4 <_ungetc_r+0xc>
    46d2:	071b      	lsls	r3, r3, #28
    46d4:	d50b      	bpl.n	46ee <_ungetc_r+0x56>
    46d6:	4621      	mov	r1, r4
    46d8:	4630      	mov	r0, r6
    46da:	f7fe f95f 	bl	299c <_fflush_r>
    46de:	2800      	cmp	r0, #0
    46e0:	d1e0      	bne.n	46a4 <_ungetc_r+0xc>
    46e2:	89a3      	ldrh	r3, [r4, #12]
    46e4:	60a0      	str	r0, [r4, #8]
    46e6:	f023 0308 	bic.w	r3, r3, #8
    46ea:	81a3      	strh	r3, [r4, #12]
    46ec:	61a0      	str	r0, [r4, #24]
    46ee:	89a3      	ldrh	r3, [r4, #12]
    46f0:	f043 0304 	orr.w	r3, r3, #4
    46f4:	81a3      	strh	r3, [r4, #12]
    46f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    46f8:	6862      	ldr	r2, [r4, #4]
    46fa:	b2ed      	uxtb	r5, r5
    46fc:	b1e3      	cbz	r3, 4738 <_ungetc_r+0xa0>
    46fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4700:	429a      	cmp	r2, r3
    4702:	da12      	bge.n	472a <_ungetc_r+0x92>
    4704:	6823      	ldr	r3, [r4, #0]
    4706:	1e5a      	subs	r2, r3, #1
    4708:	6022      	str	r2, [r4, #0]
    470a:	f803 5c01 	strb.w	r5, [r3, #-1]
    470e:	6863      	ldr	r3, [r4, #4]
    4710:	3301      	adds	r3, #1
    4712:	6063      	str	r3, [r4, #4]
    4714:	e7c8      	b.n	46a8 <_ungetc_r+0x10>
    4716:	4b17      	ldr	r3, [pc, #92]	; (4774 <_ungetc_r+0xdc>)
    4718:	429c      	cmp	r4, r3
    471a:	d101      	bne.n	4720 <_ungetc_r+0x88>
    471c:	68b4      	ldr	r4, [r6, #8]
    471e:	e7ce      	b.n	46be <_ungetc_r+0x26>
    4720:	4b15      	ldr	r3, [pc, #84]	; (4778 <_ungetc_r+0xe0>)
    4722:	429c      	cmp	r4, r3
    4724:	bf08      	it	eq
    4726:	68f4      	ldreq	r4, [r6, #12]
    4728:	e7c9      	b.n	46be <_ungetc_r+0x26>
    472a:	4621      	mov	r1, r4
    472c:	4630      	mov	r0, r6
    472e:	f7ff ff77 	bl	4620 <__submore>
    4732:	2800      	cmp	r0, #0
    4734:	d0e6      	beq.n	4704 <_ungetc_r+0x6c>
    4736:	e7b5      	b.n	46a4 <_ungetc_r+0xc>
    4738:	6921      	ldr	r1, [r4, #16]
    473a:	6823      	ldr	r3, [r4, #0]
    473c:	b151      	cbz	r1, 4754 <_ungetc_r+0xbc>
    473e:	4299      	cmp	r1, r3
    4740:	d208      	bcs.n	4754 <_ungetc_r+0xbc>
    4742:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    4746:	428d      	cmp	r5, r1
    4748:	d104      	bne.n	4754 <_ungetc_r+0xbc>
    474a:	3b01      	subs	r3, #1
    474c:	3201      	adds	r2, #1
    474e:	6023      	str	r3, [r4, #0]
    4750:	6062      	str	r2, [r4, #4]
    4752:	e7a9      	b.n	46a8 <_ungetc_r+0x10>
    4754:	63e3      	str	r3, [r4, #60]	; 0x3c
    4756:	f104 0344 	add.w	r3, r4, #68	; 0x44
    475a:	6363      	str	r3, [r4, #52]	; 0x34
    475c:	2303      	movs	r3, #3
    475e:	63a3      	str	r3, [r4, #56]	; 0x38
    4760:	4623      	mov	r3, r4
    4762:	6422      	str	r2, [r4, #64]	; 0x40
    4764:	f803 5f46 	strb.w	r5, [r3, #70]!
    4768:	6023      	str	r3, [r4, #0]
    476a:	2301      	movs	r3, #1
    476c:	e7d1      	b.n	4712 <_ungetc_r+0x7a>
    476e:	bf00      	nop
    4770:	00005118 	.word	0x00005118
    4774:	00005138 	.word	0x00005138
    4778:	000050f8 	.word	0x000050f8

0000477c <_fstat_r>:
    477c:	b538      	push	{r3, r4, r5, lr}
    477e:	4c07      	ldr	r4, [pc, #28]	; (479c <_fstat_r+0x20>)
    4780:	2300      	movs	r3, #0
    4782:	4605      	mov	r5, r0
    4784:	4608      	mov	r0, r1
    4786:	4611      	mov	r1, r2
    4788:	6023      	str	r3, [r4, #0]
    478a:	f7fc f8d4 	bl	936 <_fstat>
    478e:	1c43      	adds	r3, r0, #1
    4790:	d102      	bne.n	4798 <_fstat_r+0x1c>
    4792:	6823      	ldr	r3, [r4, #0]
    4794:	b103      	cbz	r3, 4798 <_fstat_r+0x1c>
    4796:	602b      	str	r3, [r5, #0]
    4798:	bd38      	pop	{r3, r4, r5, pc}
    479a:	bf00      	nop
    479c:	200046f8 	.word	0x200046f8

000047a0 <_isatty_r>:
    47a0:	b538      	push	{r3, r4, r5, lr}
    47a2:	4c06      	ldr	r4, [pc, #24]	; (47bc <_isatty_r+0x1c>)
    47a4:	2300      	movs	r3, #0
    47a6:	4605      	mov	r5, r0
    47a8:	4608      	mov	r0, r1
    47aa:	6023      	str	r3, [r4, #0]
    47ac:	f7fc f8c8 	bl	940 <_isatty>
    47b0:	1c43      	adds	r3, r0, #1
    47b2:	d102      	bne.n	47ba <_isatty_r+0x1a>
    47b4:	6823      	ldr	r3, [r4, #0]
    47b6:	b103      	cbz	r3, 47ba <_isatty_r+0x1a>
    47b8:	602b      	str	r3, [r5, #0]
    47ba:	bd38      	pop	{r3, r4, r5, pc}
    47bc:	200046f8 	.word	0x200046f8

000047c0 <__locale_ctype_ptr_l>:
    47c0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    47c4:	4770      	bx	lr
	...

000047c8 <__locale_ctype_ptr>:
    47c8:	4b04      	ldr	r3, [pc, #16]	; (47dc <__locale_ctype_ptr+0x14>)
    47ca:	4a05      	ldr	r2, [pc, #20]	; (47e0 <__locale_ctype_ptr+0x18>)
    47cc:	681b      	ldr	r3, [r3, #0]
    47ce:	6a1b      	ldr	r3, [r3, #32]
    47d0:	2b00      	cmp	r3, #0
    47d2:	bf08      	it	eq
    47d4:	4613      	moveq	r3, r2
    47d6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    47da:	4770      	bx	lr
    47dc:	2000026c 	.word	0x2000026c
    47e0:	200002d0 	.word	0x200002d0

000047e4 <__ascii_mbtowc>:
    47e4:	b082      	sub	sp, #8
    47e6:	b901      	cbnz	r1, 47ea <__ascii_mbtowc+0x6>
    47e8:	a901      	add	r1, sp, #4
    47ea:	b142      	cbz	r2, 47fe <__ascii_mbtowc+0x1a>
    47ec:	b14b      	cbz	r3, 4802 <__ascii_mbtowc+0x1e>
    47ee:	7813      	ldrb	r3, [r2, #0]
    47f0:	600b      	str	r3, [r1, #0]
    47f2:	7812      	ldrb	r2, [r2, #0]
    47f4:	1c10      	adds	r0, r2, #0
    47f6:	bf18      	it	ne
    47f8:	2001      	movne	r0, #1
    47fa:	b002      	add	sp, #8
    47fc:	4770      	bx	lr
    47fe:	4610      	mov	r0, r2
    4800:	e7fb      	b.n	47fa <__ascii_mbtowc+0x16>
    4802:	f06f 0001 	mvn.w	r0, #1
    4806:	e7f8      	b.n	47fa <__ascii_mbtowc+0x16>
	...

00004810 <memchr>:
    4810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4814:	2a10      	cmp	r2, #16
    4816:	db2b      	blt.n	4870 <memchr+0x60>
    4818:	f010 0f07 	tst.w	r0, #7
    481c:	d008      	beq.n	4830 <memchr+0x20>
    481e:	f810 3b01 	ldrb.w	r3, [r0], #1
    4822:	3a01      	subs	r2, #1
    4824:	428b      	cmp	r3, r1
    4826:	d02d      	beq.n	4884 <memchr+0x74>
    4828:	f010 0f07 	tst.w	r0, #7
    482c:	b342      	cbz	r2, 4880 <memchr+0x70>
    482e:	d1f6      	bne.n	481e <memchr+0xe>
    4830:	b4f0      	push	{r4, r5, r6, r7}
    4832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    4836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    483a:	f022 0407 	bic.w	r4, r2, #7
    483e:	f07f 0700 	mvns.w	r7, #0
    4842:	2300      	movs	r3, #0
    4844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    4848:	3c08      	subs	r4, #8
    484a:	ea85 0501 	eor.w	r5, r5, r1
    484e:	ea86 0601 	eor.w	r6, r6, r1
    4852:	fa85 f547 	uadd8	r5, r5, r7
    4856:	faa3 f587 	sel	r5, r3, r7
    485a:	fa86 f647 	uadd8	r6, r6, r7
    485e:	faa5 f687 	sel	r6, r5, r7
    4862:	b98e      	cbnz	r6, 4888 <memchr+0x78>
    4864:	d1ee      	bne.n	4844 <memchr+0x34>
    4866:	bcf0      	pop	{r4, r5, r6, r7}
    4868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    486c:	f002 0207 	and.w	r2, r2, #7
    4870:	b132      	cbz	r2, 4880 <memchr+0x70>
    4872:	f810 3b01 	ldrb.w	r3, [r0], #1
    4876:	3a01      	subs	r2, #1
    4878:	ea83 0301 	eor.w	r3, r3, r1
    487c:	b113      	cbz	r3, 4884 <memchr+0x74>
    487e:	d1f8      	bne.n	4872 <memchr+0x62>
    4880:	2000      	movs	r0, #0
    4882:	4770      	bx	lr
    4884:	3801      	subs	r0, #1
    4886:	4770      	bx	lr
    4888:	2d00      	cmp	r5, #0
    488a:	bf06      	itte	eq
    488c:	4635      	moveq	r5, r6
    488e:	3803      	subeq	r0, #3
    4890:	3807      	subne	r0, #7
    4892:	f015 0f01 	tst.w	r5, #1
    4896:	d107      	bne.n	48a8 <memchr+0x98>
    4898:	3001      	adds	r0, #1
    489a:	f415 7f80 	tst.w	r5, #256	; 0x100
    489e:	bf02      	ittt	eq
    48a0:	3001      	addeq	r0, #1
    48a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    48a6:	3001      	addeq	r0, #1
    48a8:	bcf0      	pop	{r4, r5, r6, r7}
    48aa:	3801      	subs	r0, #1
    48ac:	4770      	bx	lr
    48ae:	bf00      	nop

000048b0 <memcpy>:
    48b0:	b510      	push	{r4, lr}
    48b2:	1e43      	subs	r3, r0, #1
    48b4:	440a      	add	r2, r1
    48b6:	4291      	cmp	r1, r2
    48b8:	d100      	bne.n	48bc <memcpy+0xc>
    48ba:	bd10      	pop	{r4, pc}
    48bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    48c0:	f803 4f01 	strb.w	r4, [r3, #1]!
    48c4:	e7f7      	b.n	48b6 <memcpy+0x6>

000048c6 <memmove>:
    48c6:	4288      	cmp	r0, r1
    48c8:	b510      	push	{r4, lr}
    48ca:	eb01 0302 	add.w	r3, r1, r2
    48ce:	d803      	bhi.n	48d8 <memmove+0x12>
    48d0:	1e42      	subs	r2, r0, #1
    48d2:	4299      	cmp	r1, r3
    48d4:	d10c      	bne.n	48f0 <memmove+0x2a>
    48d6:	bd10      	pop	{r4, pc}
    48d8:	4298      	cmp	r0, r3
    48da:	d2f9      	bcs.n	48d0 <memmove+0xa>
    48dc:	1881      	adds	r1, r0, r2
    48de:	1ad2      	subs	r2, r2, r3
    48e0:	42d3      	cmn	r3, r2
    48e2:	d100      	bne.n	48e6 <memmove+0x20>
    48e4:	bd10      	pop	{r4, pc}
    48e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    48ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
    48ee:	e7f7      	b.n	48e0 <memmove+0x1a>
    48f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    48f4:	f802 4f01 	strb.w	r4, [r2, #1]!
    48f8:	e7eb      	b.n	48d2 <memmove+0xc>

000048fa <_realloc_r>:
    48fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48fc:	4607      	mov	r7, r0
    48fe:	4614      	mov	r4, r2
    4900:	460e      	mov	r6, r1
    4902:	b921      	cbnz	r1, 490e <_realloc_r+0x14>
    4904:	4611      	mov	r1, r2
    4906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    490a:	f7fe b9e3 	b.w	2cd4 <_malloc_r>
    490e:	b922      	cbnz	r2, 491a <_realloc_r+0x20>
    4910:	f7fe f992 	bl	2c38 <_free_r>
    4914:	4625      	mov	r5, r4
    4916:	4628      	mov	r0, r5
    4918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    491a:	f000 f821 	bl	4960 <_malloc_usable_size_r>
    491e:	4284      	cmp	r4, r0
    4920:	d90f      	bls.n	4942 <_realloc_r+0x48>
    4922:	4621      	mov	r1, r4
    4924:	4638      	mov	r0, r7
    4926:	f7fe f9d5 	bl	2cd4 <_malloc_r>
    492a:	4605      	mov	r5, r0
    492c:	2800      	cmp	r0, #0
    492e:	d0f2      	beq.n	4916 <_realloc_r+0x1c>
    4930:	4631      	mov	r1, r6
    4932:	4622      	mov	r2, r4
    4934:	f7ff ffbc 	bl	48b0 <memcpy>
    4938:	4631      	mov	r1, r6
    493a:	4638      	mov	r0, r7
    493c:	f7fe f97c 	bl	2c38 <_free_r>
    4940:	e7e9      	b.n	4916 <_realloc_r+0x1c>
    4942:	4635      	mov	r5, r6
    4944:	e7e7      	b.n	4916 <_realloc_r+0x1c>

00004946 <__ascii_wctomb>:
    4946:	b149      	cbz	r1, 495c <__ascii_wctomb+0x16>
    4948:	2aff      	cmp	r2, #255	; 0xff
    494a:	bf85      	ittet	hi
    494c:	238a      	movhi	r3, #138	; 0x8a
    494e:	6003      	strhi	r3, [r0, #0]
    4950:	700a      	strbls	r2, [r1, #0]
    4952:	f04f 30ff 	movhi.w	r0, #4294967295
    4956:	bf98      	it	ls
    4958:	2001      	movls	r0, #1
    495a:	4770      	bx	lr
    495c:	4608      	mov	r0, r1
    495e:	4770      	bx	lr

00004960 <_malloc_usable_size_r>:
    4960:	f851 0c04 	ldr.w	r0, [r1, #-4]
    4964:	2800      	cmp	r0, #0
    4966:	f1a0 0004 	sub.w	r0, r0, #4
    496a:	bfbc      	itt	lt
    496c:	580b      	ldrlt	r3, [r1, r0]
    496e:	18c0      	addlt	r0, r0, r3
    4970:	4770      	bx	lr
    4972:	0000      	movs	r0, r0
    4974:	682f2e2e 	.word	0x682f2e2e
    4978:	732f6c61 	.word	0x732f6c61
    497c:	682f6372 	.word	0x682f6372
    4980:	695f6c61 	.word	0x695f6c61
    4984:	00632e6f 	.word	0x00632e6f
    4988:	682f2e2e 	.word	0x682f2e2e
    498c:	732f6c61 	.word	0x732f6c61
    4990:	682f6372 	.word	0x682f6372
    4994:	6d5f6c61 	.word	0x6d5f6c61
    4998:	735f6963 	.word	0x735f6963
    499c:	2e636e79 	.word	0x2e636e79
    49a0:	00000063 	.word	0x00000063
    49a4:	682f2e2e 	.word	0x682f2e2e
    49a8:	732f6c61 	.word	0x732f6c61
    49ac:	682f6372 	.word	0x682f6372
    49b0:	755f6c61 	.word	0x755f6c61
    49b4:	74726173 	.word	0x74726173
    49b8:	6e79735f 	.word	0x6e79735f
    49bc:	00632e63 	.word	0x00632e63
    49c0:	682f2e2e 	.word	0x682f2e2e
    49c4:	732f6c70 	.word	0x732f6c70
    49c8:	2f636864 	.word	0x2f636864
    49cc:	5f6c7068 	.word	0x5f6c7068
    49d0:	63686473 	.word	0x63686473
    49d4:	0000632e 	.word	0x0000632e
    49d8:	40003000 	.word	0x40003000
    49dc:	40003400 	.word	0x40003400
    49e0:	41012000 	.word	0x41012000
    49e4:	41014000 	.word	0x41014000
    49e8:	43000000 	.word	0x43000000
    49ec:	43000400 	.word	0x43000400
    49f0:	43000800 	.word	0x43000800
    49f4:	43000c00 	.word	0x43000c00

000049f8 <_usarts>:
    49f8:	00000000 40100004 00030000 00700002     .......@......p.
    4a08:	0000d8ad 00000000 00000002 40100004     ...............@
    4a18:	00030000 00700002 0000d8ad 00000000     ......p.........

00004a28 <_i2cms>:
	...
    4a40:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4a50:	65735f6c 6d6f6372 0000632e 5b53227b     l_sercom.c..{"S[
    4a60:	75343025 7b3a225d 3a225122 222c7525     %04u]":{"Q":%u,"
    4a70:	253a2241 44222c75 7d752522 000a0d7d     A":%u,"D"%u}}...
    4a80:	5b43227b 75343025 7b3a225d 3a225322     {"C[%04u]":{"S":
    4a90:	222c7525 3a224153 222c7525 3a223141     %u,"SA":%u,"A1":
    4aa0:	222c7525 3a223241 222c7525 3a223144     %u,"A2":%u,"D1":
    4ab0:	222c7525 3a223244 7d7d7525 00000a0d     %u,"D2":%u}}....
    4ac0:	00007325 00786825 65530a0d 7463656c     %s..%hx...Select
    4ad0:	6f206465 6f697470 7369206e 0d642520     ed option is %d.
    4ae0:	0000000a 65520a0d 6e727574 20676e69     ......Returning 
    4af0:	6d206f74 206e6961 756e656d 0000000d     to main menu....
    4b00:	74530a0d 69747261 4c20676e 52414469     ..Starting LiDAR
    4b10:	746f6d20 000d726f 74530a0d 6970706f      motor....Stoppi
    4b20:	4c20676e 52414469 746f6d20 000d726f     ng LiDAR motor..
    4b30:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    4b40:	73205241 0d706f74 00000000 65520a0d     AR stop.......Re
    4b50:	73657571 676e6974 44694c20 72205241     questing LiDAR r
    4b60:	74657365 0000000d 65520a0d 73657571     eset......Reques
    4b70:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    4b80:	61637320 00000d6e 65520a0d 73657571      scan.....Reques
    4b90:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    4ba0:	70786520 73736572 61637320 00000d6e      express scan...
    4bb0:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    4bc0:	73205241 74726174 726f6620 73206563     AR start force s
    4bd0:	0d6e6163 00000000 65520a0d 65697274     can.......Retrie
    4be0:	676e6976 44694c20 69205241 0d6f666e     ving LiDAR info.
    4bf0:	00000000 65520a0d 65697274 676e6976     ......Retrieving
    4c00:	44694c20 68205241 746c6165 00000d68      LiDAR health...
    4c10:	65520a0d 65697274 676e6976 44694c20     ..Retrieving LiD
    4c20:	73205241 6c706d61 74617265 000d7365     AR samplerates..
    4c30:	6e490a0d 696c6176 706f2064 6e6f6974     ..Invalid option
    4c40:	0000000d 63256325 00000000 63256325     ....%c%c....%c%c
    4c50:	00006325 4144694c 74732052 6570706f     %c..LiDAR stoppe
    4c60:	00000d64 4144694c 65722052 0d746573     d...LiDAR reset.
    4c70:	00000000 68746167 64657265 64302520     ....gathered %0d
    4c80:	6430252f 61637320 2e2e736e 000a0d2e     /%0d scans......
    4c90:	20643025 61766e69 2064696c 6e616373     %0d invalid scan
    4ca0:	2d2d2073 74616720 65726568 30252064     s -- gathered %0
    4cb0:	30252f64 63732064 2e736e61 0a0d2e2e     d/%0d scans.....
    4cc0:	00000000 58323025 00000000 52203a20     ....%02X.... : R
    4cd0:	44694c50 4d205241 6c65646f 3a444920     PLiDAR Model ID:
    4ce0:	0d752520 0000000a 46203a20 776d7269      %u..... : Firmw
    4cf0:	20657261 73726556 3a6e6f69 2e752520     are Version: %u.
    4d00:	0a0d7525 00000000 48203a20 77647261     %u...... : Hardw
    4d10:	20657261 73726556 3a6e6f69 0d752520     are Version: %u.
    4d20:	0000000a 53203a20 61697265 754e206c     .... : Serial Nu
    4d30:	7265626d 7830203a 0a0d7325 00000000     mber: 0x%s......
    4d40:	444f4f47 00000000 4e524157 00474e49     GOOD....WARNING.
    4d50:	4f525245 00000052 4e4b4e55 004e574f     ERROR...UNKNOWN.
    4d60:	4c203a20 52414469 61654820 2068746c      : LiDAR Health 
    4d70:	25207369 0a0d2173 00000000 4c203a20     is %s!...... : L
    4d80:	52414469 61654820 2068746c 25207369     iDAR Health is %
    4d90:	0a0d2173 45203a20 726f7272 646f6320     s!.. : Error cod
    4da0:	25203a65 000a0d75 53203a20 646e6174     e: %u... : Stand
    4db0:	20647261 6e616353 6d615320 72656c70     ard Scan Sampler
    4dc0:	3a657461 0d752520 0000000a 45203a20     ate: %u..... : E
    4dd0:	65727078 53207373 206e6163 706d6153     xpress Scan Samp
    4de0:	6172656c 203a6574 0a0d7525 00000000     lerate: %u......
    4df0:	21210a0d 21212121 49202121 6148206e     ..!!!!!!!! In Ha
    4e00:	61466472 5f746c75 646e6148 2072656c     rdFault_Handler 
    4e10:	21212121 21212121 0000000d 0a0d0a0d     !!!!!!!!........
    4e20:	3d3d3d3d 3d3d3d3d 4144694c 75412052     ========LiDAR Au
    4e30:	616d6f74 20646574 7070614d 20676e69     tomated Mapping 
    4e40:	74737953 28206d65 534d414c 3d3d3d29     System (LAMS)===
    4e50:	3d3d3d3d 00000d3d 6e490a0d 696c6176     =====.....Invali
    4e60:	706f2064 6e6f6974 00000d20 6e450a0d     d option .....En
    4e70:	20726574 6c676e61 3e3e2065 00000020     ter angle >> ...
    4e80:	52450a0d 3a524f52 766e4920 64696c61     ..ERROR: Invalid
    4e90:	676e6120 202e656c 6c676e41 756d2065      angle. Angle mu
    4ea0:	62207473 65622065 65657774 2030206e     st be between 0 
    4eb0:	20646e61 0d303831 00000000 65530a0d     and 180.......Se
    4ec0:	6e697474 65732067 206f7672 6c676e61     tting servo angl
    4ed0:	6f742065 64302520 00000a0d 61440a0d     e to %0d......Da
    4ee0:	61206174 65742074 61207473 65726464     ta at test addre
    4ef0:	25207373 73692064 25203d20 000a0d64     ss %d is = %d...
    4f00:	6e490a0d 74726576 74206465 64206568     ..Inverted the d
    4f10:	20617461 74207461 20747365 72646461     ata at test addr
    4f20:	20737365 20646e61 74697277 0d6e6574     ess and written.
    4f30:	00000000 6c500a0d 65736165 6e6f6320     ......Please con
    4f40:	75676966 53206572 204b4c42 65737566     figure SBLK fuse
    4f50:	206f7420 6f6c6c61 65746163 616d5320      to allocate Sma
    4f60:	45457472 4d4f5250 65726120 00000d61     rtEEPROM area...
    4f70:	64323025 00000020 6d530a0d 45747261     %02d .....SmartE
    4f80:	4f525045 6f63204d 6961746e 7620736e     EPROM contains v
    4f90:	64696c61 74616420 000d2061 74530a0d     alid data ....St
    4fa0:	6e69726f 69732067 74616e67 20657275     oring signature 
    4fb0:	53206f74 7472616d 52504545 61204d4f     to SmartEEPROM a
    4fc0:	65726464 30207373 20303078 30206f74     ddress 0x00 to 0
    4fd0:	0d333078 00000000 75460a0d 76206573     x03.......Fuse v
    4fe0:	65756c61 6f662073 42532072 3d204b4c     alues for SBLK =
    4ff0:	2c642520 5a535020 25203d20 53202e64      %d, PSZ = %d. S
    5000:	74206565 74206568 656c6261 6d532720     ee the table 'Sm
    5010:	45747261 4f525045 6956204d 61757472     artEEPROM Virtua
    5020:	0909206c 657a6953 206e6920 65747942     l ..Size in Byte
    5030:	69202773 6874206e 61442065 68736174     s' in the Datash
    5040:	20746565 63206f74 75636c61 6574616c     eet to calculate
    5050:	746f7420 61206c61 6c696176 656c6261      total available
    5060:	74796220 0d207365 0000000a 45450a0d      bytes .......EE
    5070:	4d4f5250 74614420 74612061 72696620     PROM Data at fir
    5080:	25207473 6f6c2064 69746163 3a736e6f     st %d locations:
    5090:	000a0d20 6e450a0d 20726574 72646461      .....Enter addr
    50a0:	20737365 00203e3e 52450a0d 3a524f52     ess >> ...ERROR:
    50b0:	64644120 73736572 766e6920 64696c61      Address invalid
    50c0:	7254202e 67612079 206e6961 0000000d     . Try again ....
    50d0:	6e450a0d 20726574 61746164 203e3e20     ..Enter data >> 
    50e0:	00000000 72570a0d 65747469 6425206e     ......Written %d
    50f0:	20746120 00006425                        at %d..

000050f8 <__sf_fake_stderr>:
	...

00005118 <__sf_fake_stdin>:
	...

00005138 <__sf_fake_stdout>:
	...

00005158 <_global_impure_ptr>:
    5158:	20000270 2b302d23 6c680020 6665004c     p.. #-0+ .hlL.ef
    5168:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    5178:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    5188:	64636261 00006665 000051ae 000051b1     abcdef...Q...Q..
    5198:	000051b4 61462d41 3938662d 33323130     .Q..A-Fa-f890123
    51a8:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    51b8:	534f5000 2e005849 20200000                       .POSIX...

000051c1 <_ctype_>:
    51c1:	20202000 20202020 28282020 20282828     .         ((((( 
    51d1:	20202020 20202020 20202020 20202020                     
    51e1:	10108820 10101010 10101010 10101010      ...............
    51f1:	04040410 04040404 10040404 10101010     ................
    5201:	41411010 41414141 01010101 01010101     ..AAAAAA........
    5211:	01010101 01010101 01010101 10101010     ................
    5221:	42421010 42424242 02020202 02020202     ..BBBBBB........
    5231:	02020202 02020202 02020202 10101010     ................
    5241:	00000020 00000000 00000000 00000000      ...............
	...

000052c4 <_init>:
    52c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52c6:	bf00      	nop
    52c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52ca:	bc08      	pop	{r3}
    52cc:	469e      	mov	lr, r3
    52ce:	4770      	bx	lr

000052d0 <__init_array_start>:
    52d0:	00000289 	.word	0x00000289

000052d4 <_fini>:
    52d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52d6:	bf00      	nop
    52d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52da:	bc08      	pop	{r3}
    52dc:	469e      	mov	lr, r3
    52de:	4770      	bx	lr

000052e0 <__fini_array_start>:
    52e0:	00000265 	.word	0x00000265
