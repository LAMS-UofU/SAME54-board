
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053bc  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  000053bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002043c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002043c  2**0
                  CONTENTS
  4 .bss          000042c0  20000440  00005800  00020440  2**3
                  ALLOC
  5 .stack        00010000  20004700  00009ac0  00020440  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00034cd1  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004684  00000000  00000000  00055194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f730  00000000  00000000  00059818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d20  00000000  00000000  00068f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001100  00000000  00000000  00069c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038a5a  00000000  00000000  0006ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019870  00000000  00000000  000a37c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125b40  00000000  00000000  000bd032  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031a0  00000000  00000000  001e2b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 47 01 20 f1 02 00 00 ed 02 00 00 f1 19 00 00     .G. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	31 0a 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     1...............
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1f4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000440 	.word	0x20000440
     280:	00000000 	.word	0x00000000
     284:	000053bc 	.word	0x000053bc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000053bc 	.word	0x000053bc
     2c4:	20000444 	.word	0x20000444
     2c8:	000053bc 	.word	0x000053bc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	sd_mmc_stack_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	000005f5 	.word	0x000005f5
     2e4:	00002169 	.word	0x00002169
     2e8:	00001afd 	.word	0x00001afd

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	000053bc 	.word	0x000053bc
     36c:	2000043c 	.word	0x2000043c
     370:	20004700 	.word	0x20004700
     374:	20000440 	.word	0x20000440
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	00002cb1 	.word	0x00002cb1
     384:	00001a05 	.word	0x00001a05

00000388 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     388:	4b10      	ldr	r3, [pc, #64]	; (3cc <STDIO_IO_PORT_init+0x44>)
     38a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     38e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     392:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     396:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     39e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3aa:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3be:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3c2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     3ca:	4770      	bx	lr
     3cc:	41008000 	.word	0x41008000

000003d0 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <STDIO_IO_CLOCK_init+0x1c>)
     3d2:	2240      	movs	r2, #64	; 0x40
     3d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     3d8:	2243      	movs	r2, #67	; 0x43
     3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3de:	4a04      	ldr	r2, [pc, #16]	; (3f0 <STDIO_IO_CLOCK_init+0x20>)
     3e0:	6993      	ldr	r3, [r2, #24]
     3e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     3e6:	6193      	str	r3, [r2, #24]
     3e8:	4770      	bx	lr
     3ea:	bf00      	nop
     3ec:	40001c00 	.word	0x40001c00
     3f0:	40000800 	.word	0x40000800

000003f4 <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     3f4:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <STDIO_IO_init+0x18>)
     3f8:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     3fa:	2200      	movs	r2, #0
     3fc:	4904      	ldr	r1, [pc, #16]	; (410 <STDIO_IO_init+0x1c>)
     3fe:	4805      	ldr	r0, [pc, #20]	; (414 <STDIO_IO_init+0x20>)
     400:	4b05      	ldr	r3, [pc, #20]	; (418 <STDIO_IO_init+0x24>)
     402:	4798      	blx	r3
	STDIO_IO_PORT_init();
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <STDIO_IO_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d1 	.word	0x000003d1
     410:	41012000 	.word	0x41012000
     414:	20000698 	.word	0x20000698
     418:	00000861 	.word	0x00000861
     41c:	00000389 	.word	0x00000389

00000420 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     420:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     422:	4b5e      	ldr	r3, [pc, #376]	; (59c <SDHC_IO_BUS_PORT_init+0x17c>)
     424:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     428:	6098      	str	r0, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     42e:	629a      	str	r2, [r3, #40]	; 0x28
     430:	4c5b      	ldr	r4, [pc, #364]	; (5a0 <SDHC_IO_BUS_PORT_init+0x180>)
     432:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     434:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     436:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     43a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     43e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     452:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     456:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     45a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45e:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     462:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
     466:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     468:	629a      	str	r2, [r3, #40]	; 0x28
     46a:	4e4e      	ldr	r6, [pc, #312]	; (5a4 <SDHC_IO_BUS_PORT_init+0x184>)
     46c:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     46e:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     470:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
     474:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     478:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47c:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     480:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     484:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     488:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48c:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     490:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     494:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     498:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     49c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     4a0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4a8:	4f3f      	ldr	r7, [pc, #252]	; (5a8 <SDHC_IO_BUS_PORT_init+0x188>)
     4aa:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ae:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b2:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
     4b6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4ba:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4be:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ca:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ce:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4d6:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4da:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     4e2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ea:	3704      	adds	r7, #4
     4ec:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
     4f8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4fc:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     514:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     518:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     51c:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     520:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     524:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     528:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     52c:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     530:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
     534:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     538:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53c:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     544:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     548:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54c:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     550:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     554:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     558:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     55c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     560:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     564:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     568:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     56c:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     570:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     574:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     578:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     57c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     580:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     584:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     588:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     58c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     594:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB21I_SDHC1_SDDAT3);
}
     598:	bcf0      	pop	{r4, r5, r6, r7}
     59a:	4770      	bx	lr
     59c:	41008000 	.word	0x41008000
     5a0:	c0000020 	.word	0xc0000020
     5a4:	c0000010 	.word	0xc0000010
     5a8:	c0000004 	.word	0xc0000004

000005ac <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     5ac:	4a05      	ldr	r2, [pc, #20]	; (5c4 <SDHC_IO_BUS_CLOCK_init+0x18>)
     5ae:	6913      	ldr	r3, [r2, #16]
     5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     5b4:	6113      	str	r3, [r2, #16]
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <SDHC_IO_BUS_CLOCK_init+0x1c>)
     5b8:	2240      	movs	r2, #64	; 0x40
     5ba:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     5c2:	4770      	bx	lr
     5c4:	40000800 	.word	0x40000800
     5c8:	40001c00 	.word	0x40001c00

000005cc <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     5cc:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <SDHC_IO_BUS_init+0x18>)
     5d0:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     5d2:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     5d6:	4804      	ldr	r0, [pc, #16]	; (5e8 <SDHC_IO_BUS_init+0x1c>)
     5d8:	4b04      	ldr	r3, [pc, #16]	; (5ec <SDHC_IO_BUS_init+0x20>)
     5da:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <SDHC_IO_BUS_init+0x24>)
     5de:	4798      	blx	r3
     5e0:	bd08      	pop	{r3, pc}
     5e2:	bf00      	nop
     5e4:	000005ad 	.word	0x000005ad
     5e8:	200006a8 	.word	0x200006a8
     5ec:	0000075d 	.word	0x0000075d
     5f0:	00000421 	.word	0x00000421

000005f4 <system_init>:
}

void system_init(void)
{
     5f4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5f6:	4b2a      	ldr	r3, [pc, #168]	; (6a0 <system_init+0xac>)
     5f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fa:	4b2a      	ldr	r3, [pc, #168]	; (6a4 <system_init+0xb0>)
     5fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     600:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     604:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     60c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     610:	4a25      	ldr	r2, [pc, #148]	; (6a8 <system_init+0xb4>)
     612:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     622:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     626:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62a:	4920      	ldr	r1, [pc, #128]	; (6ac <system_init+0xb8>)
     62c:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     630:	4a1f      	ldr	r2, [pc, #124]	; (6b0 <system_init+0xbc>)
     632:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     636:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     63a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     63e:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     642:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     646:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     64e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     652:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     656:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     65a:	4a16      	ldr	r2, [pc, #88]	; (6b4 <system_init+0xc0>)
     65c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     660:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     664:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     668:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66c:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     674:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);

	LIDAR_USART_init();
     678:	4b0f      	ldr	r3, [pc, #60]	; (6b8 <system_init+0xc4>)
     67a:	4798      	blx	r3

	STDIO_IO_init();
     67c:	4b0f      	ldr	r3, [pc, #60]	; (6bc <system_init+0xc8>)
     67e:	4798      	blx	r3

	SDHC_IO_BUS_init();
     680:	4b0f      	ldr	r3, [pc, #60]	; (6c0 <system_init+0xcc>)
     682:	4798      	blx	r3

	SERVO_PWM_CLOCK_init();
     684:	4b0f      	ldr	r3, [pc, #60]	; (6c4 <system_init+0xd0>)
     686:	4798      	blx	r3

	SERVO_PWM_PORT_init();
     688:	4b0f      	ldr	r3, [pc, #60]	; (6c8 <system_init+0xd4>)
     68a:	4798      	blx	r3

	SERVO_PWM_init();
     68c:	4b0f      	ldr	r3, [pc, #60]	; (6cc <system_init+0xd8>)
     68e:	4798      	blx	r3

	LIDAR_PWM_CLOCK_init();
     690:	4b0f      	ldr	r3, [pc, #60]	; (6d0 <system_init+0xdc>)
     692:	4798      	blx	r3

	LIDAR_PWM_PORT_init();
     694:	4b0f      	ldr	r3, [pc, #60]	; (6d4 <system_init+0xe0>)
     696:	4798      	blx	r3

	LIDAR_PWM_init();
     698:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <system_init+0xe4>)
     69a:	4798      	blx	r3
     69c:	bd08      	pop	{r3, pc}
     69e:	bf00      	nop
     6a0:	00000991 	.word	0x00000991
     6a4:	41008000 	.word	0x41008000
     6a8:	c0000004 	.word	0xc0000004
     6ac:	40020000 	.word	0x40020000
     6b0:	c0020010 	.word	0xc0020010
     6b4:	c0020020 	.word	0xc0020020
     6b8:	000012e1 	.word	0x000012e1
     6bc:	000003f5 	.word	0x000003f5
     6c0:	000005cd 	.word	0x000005cd
     6c4:	00001b41 	.word	0x00001b41
     6c8:	00001b19 	.word	0x00001b19
     6cc:	00001b5d 	.word	0x00001b5d
     6d0:	000010d5 	.word	0x000010d5
     6d4:	00001095 	.word	0x00001095
     6d8:	000010f1 	.word	0x000010f1

000006dc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6dc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6de:	4b04      	ldr	r3, [pc, #16]	; (6f0 <delay_ms+0x14>)
     6e0:	681c      	ldr	r4, [r3, #0]
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <delay_ms+0x18>)
     6e4:	4798      	blx	r3
     6e6:	4601      	mov	r1, r0
     6e8:	4620      	mov	r0, r4
     6ea:	4b03      	ldr	r3, [pc, #12]	; (6f8 <delay_ms+0x1c>)
     6ec:	4798      	blx	r3
     6ee:	bd10      	pop	{r4, pc}
     6f0:	2000045c 	.word	0x2000045c
     6f4:	00000969 	.word	0x00000969
     6f8:	00000989 	.word	0x00000989

000006fc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6fc:	b570      	push	{r4, r5, r6, lr}
     6fe:	460d      	mov	r5, r1
     700:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     702:	4604      	mov	r4, r0
     704:	b160      	cbz	r0, 720 <io_write+0x24>
     706:	1c08      	adds	r0, r1, #0
     708:	bf18      	it	ne
     70a:	2001      	movne	r0, #1
     70c:	2234      	movs	r2, #52	; 0x34
     70e:	4905      	ldr	r1, [pc, #20]	; (724 <io_write+0x28>)
     710:	4b05      	ldr	r3, [pc, #20]	; (728 <io_write+0x2c>)
     712:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     714:	6823      	ldr	r3, [r4, #0]
     716:	4632      	mov	r2, r6
     718:	4629      	mov	r1, r5
     71a:	4620      	mov	r0, r4
     71c:	4798      	blx	r3
}
     71e:	bd70      	pop	{r4, r5, r6, pc}
     720:	2000      	movs	r0, #0
     722:	e7f3      	b.n	70c <io_write+0x10>
     724:	00004a44 	.word	0x00004a44
     728:	00000925 	.word	0x00000925

0000072c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     72c:	b570      	push	{r4, r5, r6, lr}
     72e:	460d      	mov	r5, r1
     730:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     732:	4604      	mov	r4, r0
     734:	b160      	cbz	r0, 750 <io_read+0x24>
     736:	1c08      	adds	r0, r1, #0
     738:	bf18      	it	ne
     73a:	2001      	movne	r0, #1
     73c:	223d      	movs	r2, #61	; 0x3d
     73e:	4905      	ldr	r1, [pc, #20]	; (754 <io_read+0x28>)
     740:	4b05      	ldr	r3, [pc, #20]	; (758 <io_read+0x2c>)
     742:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     744:	6863      	ldr	r3, [r4, #4]
     746:	4632      	mov	r2, r6
     748:	4629      	mov	r1, r5
     74a:	4620      	mov	r0, r4
     74c:	4798      	blx	r3
}
     74e:	bd70      	pop	{r4, r5, r6, pc}
     750:	2000      	movs	r0, #0
     752:	e7f3      	b.n	73c <io_read+0x10>
     754:	00004a44 	.word	0x00004a44
     758:	00000925 	.word	0x00000925

0000075c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     75c:	b538      	push	{r3, r4, r5, lr}
     75e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     760:	4605      	mov	r5, r0
     762:	b158      	cbz	r0, 77c <mci_sync_init+0x20>
     764:	1c08      	adds	r0, r1, #0
     766:	bf18      	it	ne
     768:	2001      	movne	r0, #1
     76a:	2231      	movs	r2, #49	; 0x31
     76c:	4904      	ldr	r1, [pc, #16]	; (780 <mci_sync_init+0x24>)
     76e:	4b05      	ldr	r3, [pc, #20]	; (784 <mci_sync_init+0x28>)
     770:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     772:	4621      	mov	r1, r4
     774:	4628      	mov	r0, r5
     776:	4b04      	ldr	r3, [pc, #16]	; (788 <mci_sync_init+0x2c>)
     778:	4798      	blx	r3
}
     77a:	bd38      	pop	{r3, r4, r5, pc}
     77c:	2000      	movs	r0, #0
     77e:	e7f4      	b.n	76a <mci_sync_init+0xe>
     780:	00004a58 	.word	0x00004a58
     784:	00000925 	.word	0x00000925
     788:	00000a75 	.word	0x00000a75

0000078c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     790:	460f      	mov	r7, r1
     792:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     794:	4604      	mov	r4, r0
     796:	b328      	cbz	r0, 7e4 <usart_sync_write+0x58>
     798:	b331      	cbz	r1, 7e8 <usart_sync_write+0x5c>
     79a:	1c10      	adds	r0, r2, #0
     79c:	bf18      	it	ne
     79e:	2001      	movne	r0, #1
     7a0:	22f1      	movs	r2, #241	; 0xf1
     7a2:	4912      	ldr	r1, [pc, #72]	; (7ec <usart_sync_write+0x60>)
     7a4:	4b12      	ldr	r3, [pc, #72]	; (7f0 <usart_sync_write+0x64>)
     7a6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     7a8:	3408      	adds	r4, #8
     7aa:	4d12      	ldr	r5, [pc, #72]	; (7f4 <usart_sync_write+0x68>)
     7ac:	4620      	mov	r0, r4
     7ae:	47a8      	blx	r5
     7b0:	2800      	cmp	r0, #0
     7b2:	d0fb      	beq.n	7ac <usart_sync_write+0x20>
     7b4:	3f01      	subs	r7, #1
     7b6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7b8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 7fc <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7bc:	4d0d      	ldr	r5, [pc, #52]	; (7f4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     7c2:	4620      	mov	r0, r4
     7c4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7c6:	4620      	mov	r0, r4
     7c8:	47a8      	blx	r5
     7ca:	2800      	cmp	r0, #0
     7cc:	d0fb      	beq.n	7c6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     7ce:	3601      	adds	r6, #1
     7d0:	4546      	cmp	r6, r8
     7d2:	d3f4      	bcc.n	7be <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     7d4:	4d08      	ldr	r5, [pc, #32]	; (7f8 <usart_sync_write+0x6c>)
     7d6:	4620      	mov	r0, r4
     7d8:	47a8      	blx	r5
     7da:	2800      	cmp	r0, #0
     7dc:	d0fb      	beq.n	7d6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     7de:	4630      	mov	r0, r6
     7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     7e4:	2000      	movs	r0, #0
     7e6:	e7db      	b.n	7a0 <usart_sync_write+0x14>
     7e8:	2000      	movs	r0, #0
     7ea:	e7d9      	b.n	7a0 <usart_sync_write+0x14>
     7ec:	00004a74 	.word	0x00004a74
     7f0:	00000925 	.word	0x00000925
     7f4:	00000c8b 	.word	0x00000c8b
     7f8:	00000c95 	.word	0x00000c95
     7fc:	00000c7d 	.word	0x00000c7d

00000800 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     804:	460f      	mov	r7, r1
     806:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     808:	4604      	mov	r4, r0
     80a:	b1e0      	cbz	r0, 846 <usart_sync_read+0x46>
     80c:	b1e9      	cbz	r1, 84a <usart_sync_read+0x4a>
     80e:	1c10      	adds	r0, r2, #0
     810:	bf18      	it	ne
     812:	2001      	movne	r0, #1
     814:	f44f 7286 	mov.w	r2, #268	; 0x10c
     818:	490d      	ldr	r1, [pc, #52]	; (850 <usart_sync_read+0x50>)
     81a:	4b0e      	ldr	r3, [pc, #56]	; (854 <usart_sync_read+0x54>)
     81c:	4798      	blx	r3
     81e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     820:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     822:	3408      	adds	r4, #8
     824:	4d0c      	ldr	r5, [pc, #48]	; (858 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     826:	f8df 9034 	ldr.w	r9, [pc, #52]	; 85c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     82a:	4620      	mov	r0, r4
     82c:	47a8      	blx	r5
     82e:	2800      	cmp	r0, #0
     830:	d0fb      	beq.n	82a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     832:	4620      	mov	r0, r4
     834:	47c8      	blx	r9
     836:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     83a:	3601      	adds	r6, #1
     83c:	4546      	cmp	r6, r8
     83e:	d3f4      	bcc.n	82a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     840:	4630      	mov	r0, r6
     842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     846:	2000      	movs	r0, #0
     848:	e7e4      	b.n	814 <usart_sync_read+0x14>
     84a:	2000      	movs	r0, #0
     84c:	e7e2      	b.n	814 <usart_sync_read+0x14>
     84e:	bf00      	nop
     850:	00004a74 	.word	0x00004a74
     854:	00000925 	.word	0x00000925
     858:	00000c9f 	.word	0x00000c9f
     85c:	00000c83 	.word	0x00000c83

00000860 <usart_sync_init>:
{
     860:	b538      	push	{r3, r4, r5, lr}
     862:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     864:	4604      	mov	r4, r0
     866:	b198      	cbz	r0, 890 <usart_sync_init+0x30>
     868:	1c08      	adds	r0, r1, #0
     86a:	bf18      	it	ne
     86c:	2001      	movne	r0, #1
     86e:	2234      	movs	r2, #52	; 0x34
     870:	4908      	ldr	r1, [pc, #32]	; (894 <usart_sync_init+0x34>)
     872:	4b09      	ldr	r3, [pc, #36]	; (898 <usart_sync_init+0x38>)
     874:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     876:	4629      	mov	r1, r5
     878:	f104 0008 	add.w	r0, r4, #8
     87c:	4b07      	ldr	r3, [pc, #28]	; (89c <usart_sync_init+0x3c>)
     87e:	4798      	blx	r3
	if (init_status) {
     880:	4603      	mov	r3, r0
     882:	b918      	cbnz	r0, 88c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     884:	4a06      	ldr	r2, [pc, #24]	; (8a0 <usart_sync_init+0x40>)
     886:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     888:	4a06      	ldr	r2, [pc, #24]	; (8a4 <usart_sync_init+0x44>)
     88a:	6022      	str	r2, [r4, #0]
}
     88c:	4618      	mov	r0, r3
     88e:	bd38      	pop	{r3, r4, r5, pc}
     890:	2000      	movs	r0, #0
     892:	e7ec      	b.n	86e <usart_sync_init+0xe>
     894:	00004a74 	.word	0x00004a74
     898:	00000925 	.word	0x00000925
     89c:	00000c3d 	.word	0x00000c3d
     8a0:	00000801 	.word	0x00000801
     8a4:	0000078d 	.word	0x0000078d

000008a8 <usart_sync_enable>:
{
     8a8:	b510      	push	{r4, lr}
	ASSERT(descr);
     8aa:	4604      	mov	r4, r0
     8ac:	2253      	movs	r2, #83	; 0x53
     8ae:	4906      	ldr	r1, [pc, #24]	; (8c8 <usart_sync_enable+0x20>)
     8b0:	3000      	adds	r0, #0
     8b2:	bf18      	it	ne
     8b4:	2001      	movne	r0, #1
     8b6:	4b05      	ldr	r3, [pc, #20]	; (8cc <usart_sync_enable+0x24>)
     8b8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     8ba:	f104 0008 	add.w	r0, r4, #8
     8be:	4b04      	ldr	r3, [pc, #16]	; (8d0 <usart_sync_enable+0x28>)
     8c0:	4798      	blx	r3
}
     8c2:	2000      	movs	r0, #0
     8c4:	bd10      	pop	{r4, pc}
     8c6:	bf00      	nop
     8c8:	00004a74 	.word	0x00004a74
     8cc:	00000925 	.word	0x00000925
     8d0:	00000c69 	.word	0x00000c69

000008d4 <usart_sync_get_io_descriptor>:
{
     8d4:	b538      	push	{r3, r4, r5, lr}
     8d6:	460c      	mov	r4, r1
	ASSERT(descr && io);
     8d8:	4605      	mov	r5, r0
     8da:	b148      	cbz	r0, 8f0 <usart_sync_get_io_descriptor+0x1c>
     8dc:	1c08      	adds	r0, r1, #0
     8de:	bf18      	it	ne
     8e0:	2001      	movne	r0, #1
     8e2:	2269      	movs	r2, #105	; 0x69
     8e4:	4903      	ldr	r1, [pc, #12]	; (8f4 <usart_sync_get_io_descriptor+0x20>)
     8e6:	4b04      	ldr	r3, [pc, #16]	; (8f8 <usart_sync_get_io_descriptor+0x24>)
     8e8:	4798      	blx	r3
	*io = &descr->io;
     8ea:	6025      	str	r5, [r4, #0]
}
     8ec:	2000      	movs	r0, #0
     8ee:	bd38      	pop	{r3, r4, r5, pc}
     8f0:	2000      	movs	r0, #0
     8f2:	e7f6      	b.n	8e2 <usart_sync_get_io_descriptor+0xe>
     8f4:	00004a74 	.word	0x00004a74
     8f8:	00000925 	.word	0x00000925

000008fc <usart_sync_is_rx_not_empty>:
{
     8fc:	b510      	push	{r4, lr}
	ASSERT(descr);
     8fe:	4604      	mov	r4, r0
     900:	22d7      	movs	r2, #215	; 0xd7
     902:	4905      	ldr	r1, [pc, #20]	; (918 <usart_sync_is_rx_not_empty+0x1c>)
     904:	3000      	adds	r0, #0
     906:	bf18      	it	ne
     908:	2001      	movne	r0, #1
     90a:	4b04      	ldr	r3, [pc, #16]	; (91c <usart_sync_is_rx_not_empty+0x20>)
     90c:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
     90e:	f104 0008 	add.w	r0, r4, #8
     912:	4b03      	ldr	r3, [pc, #12]	; (920 <usart_sync_is_rx_not_empty+0x24>)
     914:	4798      	blx	r3
}
     916:	bd10      	pop	{r4, pc}
     918:	00004a74 	.word	0x00004a74
     91c:	00000925 	.word	0x00000925
     920:	00000c9f 	.word	0x00000c9f

00000924 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     924:	b900      	cbnz	r0, 928 <assert+0x4>
		__asm("BKPT #0");
     926:	be00      	bkpt	0x0000
     928:	4770      	bx	lr
	...

0000092c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     92c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     92e:	4a06      	ldr	r2, [pc, #24]	; (948 <_sbrk+0x1c>)
     930:	6812      	ldr	r2, [r2, #0]
     932:	b122      	cbz	r2, 93e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     934:	4a04      	ldr	r2, [pc, #16]	; (948 <_sbrk+0x1c>)
     936:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     938:	4403      	add	r3, r0
     93a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     93c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     93e:	4903      	ldr	r1, [pc, #12]	; (94c <_sbrk+0x20>)
     940:	4a01      	ldr	r2, [pc, #4]	; (948 <_sbrk+0x1c>)
     942:	6011      	str	r1, [r2, #0]
     944:	e7f6      	b.n	934 <_sbrk+0x8>
     946:	bf00      	nop
     948:	20000460 	.word	0x20000460
     94c:	20014700 	.word	0x20014700

00000950 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     950:	f04f 30ff 	mov.w	r0, #4294967295
     954:	4770      	bx	lr

00000956 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     95a:	604b      	str	r3, [r1, #4]

	return 0;
}
     95c:	2000      	movs	r0, #0
     95e:	4770      	bx	lr

00000960 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     960:	2001      	movs	r0, #1
     962:	4770      	bx	lr

00000964 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     964:	2000      	movs	r0, #0
     966:	4770      	bx	lr

00000968 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     968:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     96c:	00c3      	lsls	r3, r0, #3
     96e:	3302      	adds	r3, #2
     970:	4803      	ldr	r0, [pc, #12]	; (980 <_get_cycles_for_ms+0x18>)
     972:	fba0 2303 	umull	r2, r3, r0, r3
     976:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     978:	2064      	movs	r0, #100	; 0x64
     97a:	fb00 f003 	mul.w	r0, r0, r3
     97e:	4770      	bx	lr
     980:	aaaaaaab 	.word	0xaaaaaaab
     984:	00000000 	.word	0x00000000

00000988 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     988:	3901      	subs	r1, #1
     98a:	d8fd      	bhi.n	988 <_delay_cycles>
     98c:	4770      	bx	lr
     98e:	bf00      	nop

00000990 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     990:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     992:	4a08      	ldr	r2, [pc, #32]	; (9b4 <_init_chip+0x24>)
     994:	8813      	ldrh	r3, [r2, #0]
     996:	b29b      	uxth	r3, r3
     998:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     99a:	4b07      	ldr	r3, [pc, #28]	; (9b8 <_init_chip+0x28>)
     99c:	4798      	blx	r3
	_oscctrl_init_sources();
     99e:	4b07      	ldr	r3, [pc, #28]	; (9bc <_init_chip+0x2c>)
     9a0:	4798      	blx	r3
	_mclk_init();
     9a2:	4b07      	ldr	r3, [pc, #28]	; (9c0 <_init_chip+0x30>)
     9a4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     9a6:	4b07      	ldr	r3, [pc, #28]	; (9c4 <_init_chip+0x34>)
     9a8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     9aa:	f640 70ff 	movw	r0, #4095	; 0xfff
     9ae:	4b06      	ldr	r3, [pc, #24]	; (9c8 <_init_chip+0x38>)
     9b0:	4798      	blx	r3
     9b2:	bd08      	pop	{r3, pc}
     9b4:	41004000 	.word	0x41004000
     9b8:	000009fd 	.word	0x000009fd
     9bc:	00000a11 	.word	0x00000a11
     9c0:	000009f1 	.word	0x000009f1
     9c4:	00000a2d 	.word	0x00000a2d
     9c8:	000009cd 	.word	0x000009cd

000009cc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     9cc:	f010 0f01 	tst.w	r0, #1
     9d0:	d008      	beq.n	9e4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     9d2:	4a05      	ldr	r2, [pc, #20]	; (9e8 <_gclk_init_generators_by_fref+0x1c>)
     9d4:	4b05      	ldr	r3, [pc, #20]	; (9ec <_gclk_init_generators_by_fref+0x20>)
     9d6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     9d8:	4619      	mov	r1, r3
     9da:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     9de:	684b      	ldr	r3, [r1, #4]
     9e0:	4213      	tst	r3, r2
     9e2:	d1fc      	bne.n	9de <_gclk_init_generators_by_fref+0x12>
     9e4:	4770      	bx	lr
     9e6:	bf00      	nop
     9e8:	00010101 	.word	0x00010101
     9ec:	40001c00 	.word	0x40001c00

000009f0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     9f0:	2201      	movs	r2, #1
     9f2:	4b01      	ldr	r3, [pc, #4]	; (9f8 <_mclk_init+0x8>)
     9f4:	715a      	strb	r2, [r3, #5]
     9f6:	4770      	bx	lr
     9f8:	40000800 	.word	0x40000800

000009fc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     9fc:	4b03      	ldr	r3, [pc, #12]	; (a0c <_osc32kctrl_init_sources+0x10>)
     9fe:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     a00:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     a04:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     a06:	2201      	movs	r2, #1
     a08:	741a      	strb	r2, [r3, #16]
     a0a:	4770      	bx	lr
     a0c:	40001400 	.word	0x40001400

00000a10 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     a10:	4a04      	ldr	r2, [pc, #16]	; (a24 <_oscctrl_init_sources+0x14>)
     a12:	4b05      	ldr	r3, [pc, #20]	; (a28 <_oscctrl_init_sources+0x18>)
     a14:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     a16:	461a      	mov	r2, r3
     a18:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     a1a:	f013 0f02 	tst.w	r3, #2
     a1e:	d0fb      	beq.n	a18 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     a20:	4770      	bx	lr
     a22:	bf00      	nop
     a24:	03002606 	.word	0x03002606
     a28:	40001000 	.word	0x40001000

00000a2c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     a2c:	4770      	bx	lr
	...

00000a30 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     a30:	b500      	push	{lr}
     a32:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     a34:	4b0d      	ldr	r3, [pc, #52]	; (a6c <RAMECC_Handler+0x3c>)
     a36:	789b      	ldrb	r3, [r3, #2]
     a38:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     a3a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     a3c:	9b01      	ldr	r3, [sp, #4]
     a3e:	f013 0f02 	tst.w	r3, #2
     a42:	d006      	beq.n	a52 <RAMECC_Handler+0x22>
     a44:	4b0a      	ldr	r3, [pc, #40]	; (a70 <RAMECC_Handler+0x40>)
     a46:	681b      	ldr	r3, [r3, #0]
     a48:	b11b      	cbz	r3, a52 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     a4a:	4a08      	ldr	r2, [pc, #32]	; (a6c <RAMECC_Handler+0x3c>)
     a4c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     a4e:	4798      	blx	r3
     a50:	e009      	b.n	a66 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     a52:	9b01      	ldr	r3, [sp, #4]
     a54:	f013 0f01 	tst.w	r3, #1
     a58:	d005      	beq.n	a66 <RAMECC_Handler+0x36>
     a5a:	4b05      	ldr	r3, [pc, #20]	; (a70 <RAMECC_Handler+0x40>)
     a5c:	685b      	ldr	r3, [r3, #4]
     a5e:	b113      	cbz	r3, a66 <RAMECC_Handler+0x36>
     a60:	4a02      	ldr	r2, [pc, #8]	; (a6c <RAMECC_Handler+0x3c>)
     a62:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     a64:	4798      	blx	r3
	} else {
		return;
	}
}
     a66:	b003      	add	sp, #12
     a68:	f85d fb04 	ldr.w	pc, [sp], #4
     a6c:	41020000 	.word	0x41020000
     a70:	200006c0 	.word	0x200006c0

00000a74 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
     a74:	b538      	push	{r3, r4, r5, lr}
     a76:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
     a78:	4605      	mov	r5, r0
     a7a:	b340      	cbz	r0, ace <_mci_sync_init+0x5a>
     a7c:	1c08      	adds	r0, r1, #0
     a7e:	bf18      	it	ne
     a80:	2001      	movne	r0, #1
     a82:	22d8      	movs	r2, #216	; 0xd8
     a84:	4913      	ldr	r1, [pc, #76]	; (ad4 <_mci_sync_init+0x60>)
     a86:	4b14      	ldr	r3, [pc, #80]	; (ad8 <_mci_sync_init+0x64>)
     a88:	4798      	blx	r3

	mci_dev->hw = hw;
     a8a:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
     a8c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
     a90:	f043 0301 	orr.w	r3, r3, #1
     a94:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
     a98:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
     a9c:	f013 0f01 	tst.w	r3, #1
     aa0:	d1fa      	bne.n	a98 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
     aa2:	230e      	movs	r3, #14
     aa4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
     aa8:	230f      	movs	r3, #15
     aaa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
     aae:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     ab0:	b29b      	uxth	r3, r3
     ab2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     ab6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
     aba:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
     abc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
     abe:	b29b      	uxth	r3, r3
     ac0:	ea6f 2393 	mvn.w	r3, r3, lsr #10
     ac4:	ea6f 2383 	mvn.w	r3, r3, lsl #10
     ac8:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
     aca:	2000      	movs	r0, #0
     acc:	bd38      	pop	{r3, r4, r5, pc}
     ace:	2000      	movs	r0, #0
     ad0:	e7d7      	b.n	a82 <_mci_sync_init+0xe>
     ad2:	bf00      	nop
     ad4:	00004a90 	.word	0x00004a90
     ad8:	00000925 	.word	0x00000925

00000adc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     adc:	b470      	push	{r4, r5, r6}
     ade:	b089      	sub	sp, #36	; 0x24
     ae0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     ae2:	466c      	mov	r4, sp
     ae4:	4d0d      	ldr	r5, [pc, #52]	; (b1c <_sercom_get_hardware_index+0x40>)
     ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     aea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     af2:	9b00      	ldr	r3, [sp, #0]
     af4:	42b3      	cmp	r3, r6
     af6:	d00d      	beq.n	b14 <_sercom_get_hardware_index+0x38>
     af8:	4631      	mov	r1, r6
     afa:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     afc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     afe:	f853 2b04 	ldr.w	r2, [r3], #4
     b02:	428a      	cmp	r2, r1
     b04:	d007      	beq.n	b16 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b06:	3001      	adds	r0, #1
     b08:	2808      	cmp	r0, #8
     b0a:	d1f8      	bne.n	afe <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     b0c:	2000      	movs	r0, #0
}
     b0e:	b009      	add	sp, #36	; 0x24
     b10:	bc70      	pop	{r4, r5, r6}
     b12:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b14:	2000      	movs	r0, #0
			return i;
     b16:	b2c0      	uxtb	r0, r0
     b18:	e7f9      	b.n	b0e <_sercom_get_hardware_index+0x32>
     b1a:	bf00      	nop
     b1c:	00004aa8 	.word	0x00004aa8

00000b20 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     b20:	b510      	push	{r4, lr}
     b22:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     b24:	4b41      	ldr	r3, [pc, #260]	; (c2c <_usart_init+0x10c>)
     b26:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     b28:	2800      	cmp	r0, #0
     b2a:	d05c      	beq.n	be6 <_usart_init+0xc6>
     b2c:	2802      	cmp	r0, #2
     b2e:	d05c      	beq.n	bea <_usart_init+0xca>
	ASSERT(false);
     b30:	f240 2247 	movw	r2, #583	; 0x247
     b34:	493e      	ldr	r1, [pc, #248]	; (c30 <_usart_init+0x110>)
     b36:	2000      	movs	r0, #0
     b38:	4b3e      	ldr	r3, [pc, #248]	; (c34 <_usart_init+0x114>)
     b3a:	4798      	blx	r3
	return 0;
     b3c:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     b3e:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     b40:	f013 0f01 	tst.w	r3, #1
     b44:	d122      	bne.n	b8c <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     b46:	004b      	lsls	r3, r1, #1
     b48:	185a      	adds	r2, r3, r1
     b4a:	4b3b      	ldr	r3, [pc, #236]	; (c38 <_usart_init+0x118>)
     b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     b52:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b56:	69e3      	ldr	r3, [r4, #28]
     b58:	f013 0f03 	tst.w	r3, #3
     b5c:	d1fb      	bne.n	b56 <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     b5e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     b60:	f013 0f02 	tst.w	r3, #2
     b64:	d00b      	beq.n	b7e <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     b66:	6823      	ldr	r3, [r4, #0]
     b68:	f023 0302 	bic.w	r3, r3, #2
     b6c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b6e:	69e3      	ldr	r3, [r4, #28]
     b70:	f013 0f03 	tst.w	r3, #3
     b74:	d1fb      	bne.n	b6e <_usart_init+0x4e>
     b76:	69e3      	ldr	r3, [r4, #28]
     b78:	f013 0f02 	tst.w	r3, #2
     b7c:	d1fb      	bne.n	b76 <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     b7e:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b82:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b84:	69e3      	ldr	r3, [r4, #28]
     b86:	f013 0f03 	tst.w	r3, #3
     b8a:	d1fb      	bne.n	b84 <_usart_init+0x64>
     b8c:	69e3      	ldr	r3, [r4, #28]
     b8e:	f013 0f01 	tst.w	r3, #1
     b92:	d1fb      	bne.n	b8c <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     b94:	460a      	mov	r2, r1
     b96:	004b      	lsls	r3, r1, #1
     b98:	440b      	add	r3, r1
     b9a:	4927      	ldr	r1, [pc, #156]	; (c38 <_usart_init+0x118>)
     b9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
     ba0:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ba2:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ba4:	69e3      	ldr	r3, [r4, #28]
     ba6:	f013 0f03 	tst.w	r3, #3
     baa:	d1fb      	bne.n	ba4 <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     bac:	0053      	lsls	r3, r2, #1
     bae:	1899      	adds	r1, r3, r2
     bb0:	4b21      	ldr	r3, [pc, #132]	; (c38 <_usart_init+0x118>)
     bb2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     bb8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bba:	69e3      	ldr	r3, [r4, #28]
     bbc:	f013 0f1f 	tst.w	r3, #31
     bc0:	d1fb      	bne.n	bba <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     bc2:	0053      	lsls	r3, r2, #1
     bc4:	1899      	adds	r1, r3, r2
     bc6:	4b1c      	ldr	r3, [pc, #112]	; (c38 <_usart_init+0x118>)
     bc8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     bce:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     bd0:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
     bd4:	d10b      	bne.n	bee <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     bd6:	0053      	lsls	r3, r2, #1
     bd8:	1899      	adds	r1, r3, r2
     bda:	4b17      	ldr	r3, [pc, #92]	; (c38 <_usart_init+0x118>)
     bdc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     be0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     be2:	81a3      	strh	r3, [r4, #12]
     be4:	e011      	b.n	c0a <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     be6:	2100      	movs	r1, #0
     be8:	e7a9      	b.n	b3e <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
     bea:	2101      	movs	r1, #1
     bec:	e7a7      	b.n	b3e <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     bee:	4b12      	ldr	r3, [pc, #72]	; (c38 <_usart_init+0x118>)
     bf0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     bf4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
     bf6:	89a1      	ldrh	r1, [r4, #12]
     bf8:	f360 010c 	bfi	r1, r0, #0, #13
     bfc:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     bfe:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
     c02:	89a3      	ldrh	r3, [r4, #12]
     c04:	f361 334f 	bfi	r3, r1, #13, #3
     c08:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     c0a:	4b0b      	ldr	r3, [pc, #44]	; (c38 <_usart_init+0x118>)
     c0c:	0051      	lsls	r1, r2, #1
     c0e:	1888      	adds	r0, r1, r2
     c10:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     c14:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     c18:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     c1a:	440a      	add	r2, r1
     c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     c20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     c24:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     c28:	2000      	movs	r0, #0
     c2a:	bd10      	pop	{r4, pc}
     c2c:	00000add 	.word	0x00000add
     c30:	00004b10 	.word	0x00004b10
     c34:	00000925 	.word	0x00000925
     c38:	00004aa8 	.word	0x00004aa8

00000c3c <_usart_sync_init>:
{
     c3c:	b538      	push	{r3, r4, r5, lr}
     c3e:	460c      	mov	r4, r1
	ASSERT(device);
     c40:	4605      	mov	r5, r0
     c42:	22bb      	movs	r2, #187	; 0xbb
     c44:	4905      	ldr	r1, [pc, #20]	; (c5c <_usart_sync_init+0x20>)
     c46:	3000      	adds	r0, #0
     c48:	bf18      	it	ne
     c4a:	2001      	movne	r0, #1
     c4c:	4b04      	ldr	r3, [pc, #16]	; (c60 <_usart_sync_init+0x24>)
     c4e:	4798      	blx	r3
	device->hw = hw;
     c50:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     c52:	4620      	mov	r0, r4
     c54:	4b03      	ldr	r3, [pc, #12]	; (c64 <_usart_sync_init+0x28>)
     c56:	4798      	blx	r3
}
     c58:	bd38      	pop	{r3, r4, r5, pc}
     c5a:	bf00      	nop
     c5c:	00004b10 	.word	0x00004b10
     c60:	00000925 	.word	0x00000925
     c64:	00000b21 	.word	0x00000b21

00000c68 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     c68:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c6a:	6813      	ldr	r3, [r2, #0]
     c6c:	f043 0302 	orr.w	r3, r3, #2
     c70:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c72:	69d3      	ldr	r3, [r2, #28]
     c74:	f013 0f03 	tst.w	r3, #3
     c78:	d1fb      	bne.n	c72 <_usart_sync_enable+0xa>
}
     c7a:	4770      	bx	lr

00000c7c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     c7c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     c7e:	6299      	str	r1, [r3, #40]	; 0x28
     c80:	4770      	bx	lr

00000c82 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     c82:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     c84:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     c86:	b2c0      	uxtb	r0, r0
     c88:	4770      	bx	lr

00000c8a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     c8a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c8c:	7e18      	ldrb	r0, [r3, #24]
}
     c8e:	f000 0001 	and.w	r0, r0, #1
     c92:	4770      	bx	lr

00000c94 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     c94:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     c96:	7e18      	ldrb	r0, [r3, #24]
}
     c98:	f3c0 0040 	ubfx	r0, r0, #1, #1
     c9c:	4770      	bx	lr

00000c9e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     c9e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     ca0:	7e18      	ldrb	r0, [r3, #24]
}
     ca2:	f3c0 0080 	ubfx	r0, r0, #2, #1
     ca6:	4770      	bx	lr

00000ca8 <LIDAR_reset_print_buffer>:
/** 
	*	Resets local print buffer.
	*	@return None
	*/
void LIDAR_reset_print_buffer(void)
{
     ca8:	4a04      	ldr	r2, [pc, #16]	; (cbc <LIDAR_reset_print_buffer+0x14>)
     caa:	1e53      	subs	r3, r2, #1
     cac:	32ff      	adds	r2, #255	; 0xff
	int i;
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
		print_buffer[i] = '\0';
     cae:	2100      	movs	r1, #0
     cb0:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i=0; i<MAX_PRINT_BUFFER_SIZE; i++)
     cb4:	4293      	cmp	r3, r2
     cb6:	d1fb      	bne.n	cb0 <LIDAR_reset_print_buffer+0x8>
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop
     cbc:	20000464 	.word	0x20000464

00000cc0 <LIDAR_reset_response_descriptor>:
	*	Resets response descriptor for new incoming responses.
	*	@return None
	*/
void LIDAR_reset_response_descriptor(void)
{
	resp_desc.start1 = 0;
     cc0:	4b03      	ldr	r3, [pc, #12]	; (cd0 <LIDAR_reset_response_descriptor+0x10>)
     cc2:	2200      	movs	r2, #0
     cc4:	701a      	strb	r2, [r3, #0]
	resp_desc.start2 = 0;
     cc6:	705a      	strb	r2, [r3, #1]
	resp_desc.response_info = 0;
     cc8:	605a      	str	r2, [r3, #4]
	resp_desc.data_type = 0;
     cca:	721a      	strb	r2, [r3, #8]
     ccc:	4770      	bx	lr
     cce:	bf00      	nop
     cd0:	200046e0 	.word	0x200046e0

00000cd4 <LIDAR_print_scans>:
}

void LIDAR_print_scans(void) 
{
     cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     cd8:	b082      	sub	sp, #8
     cda:	4c0a      	ldr	r4, [pc, #40]	; (d04 <LIDAR_print_scans+0x30>)
     cdc:	f504 58c0 	add.w	r8, r4, #6144	; 0x1800
	int i;
	for (i=0; i<MAX_SCANS; i++) {
     ce0:	2500      	movs	r5, #0
		printf("{\"S[%04u]\":{\"Q\":%u,\"A\":%u,\"D\"%u}}\r\n",
     ce2:	4f09      	ldr	r7, [pc, #36]	; (d08 <LIDAR_print_scans+0x34>)
     ce4:	4e09      	ldr	r6, [pc, #36]	; (d0c <LIDAR_print_scans+0x38>)
     ce6:	8863      	ldrh	r3, [r4, #2]
     ce8:	7822      	ldrb	r2, [r4, #0]
     cea:	88a1      	ldrh	r1, [r4, #4]
     cec:	9100      	str	r1, [sp, #0]
     cee:	4629      	mov	r1, r5
     cf0:	4638      	mov	r0, r7
     cf2:	47b0      	blx	r6
	for (i=0; i<MAX_SCANS; i++) {
     cf4:	3501      	adds	r5, #1
     cf6:	3406      	adds	r4, #6
     cf8:	4544      	cmp	r4, r8
     cfa:	d1f4      	bne.n	ce6 <LIDAR_print_scans+0x12>
				i, scans[i].quality, scans[i].angle, scans[i].distance);
	}	
}
     cfc:	b002      	add	sp, #8
     cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d02:	bf00      	nop
     d04:	20002ee0 	.word	0x20002ee0
     d08:	00004b2c 	.word	0x00004b2c
     d0c:	00002e61 	.word	0x00002e61

00000d10 <LIDAR_print_cabins>:
	
void LIDAR_print_cabins(void) 
{
     d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d14:	b084      	sub	sp, #16
     d16:	4c0d      	ldr	r4, [pc, #52]	; (d4c <LIDAR_print_cabins+0x3c>)
     d18:	f504 5820 	add.w	r8, r4, #10240	; 0x2800
	int i;
	for (i=0; i<MAX_SCANS; i++) {
     d1c:	2500      	movs	r5, #0
		printf("{\"C[%04u]\":{\"S\":%u,\"SA\":%u,\"A1\":%u,\"A2\":%u,\"D1\":%u,\"D2\":%u}}\r\n",
     d1e:	4f0c      	ldr	r7, [pc, #48]	; (d50 <LIDAR_print_cabins+0x40>)
     d20:	4e0c      	ldr	r6, [pc, #48]	; (d54 <LIDAR_print_cabins+0x44>)
     d22:	8923      	ldrh	r3, [r4, #8]
     d24:	7822      	ldrb	r2, [r4, #0]
     d26:	88e1      	ldrh	r1, [r4, #6]
     d28:	9103      	str	r1, [sp, #12]
     d2a:	88a1      	ldrh	r1, [r4, #4]
     d2c:	9102      	str	r1, [sp, #8]
     d2e:	78a1      	ldrb	r1, [r4, #2]
     d30:	9101      	str	r1, [sp, #4]
     d32:	7861      	ldrb	r1, [r4, #1]
     d34:	9100      	str	r1, [sp, #0]
     d36:	4629      	mov	r1, r5
     d38:	4638      	mov	r0, r7
     d3a:	47b0      	blx	r6
	for (i=0; i<MAX_SCANS; i++) {
     d3c:	3501      	adds	r5, #1
     d3e:	340a      	adds	r4, #10
     d40:	4544      	cmp	r4, r8
     d42:	d1ee      	bne.n	d22 <LIDAR_print_cabins+0x12>
			   i, cabins[i].S, cabins[i].start_angle, cabins[i].angle_value1, cabins[i].angle_value2, cabins[i].distance1, cabins[i].distance2);
	}
}
     d44:	b004      	add	sp, #16
     d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d4a:	bf00      	nop
     d4c:	200006d8 	.word	0x200006d8
     d50:	00004b50 	.word	0x00004b50
     d54:	00002e61 	.word	0x00002e61

00000d58 <LIDAR_RES_stop>:
	* "STOP" request has no response. Instead using @see SysTick_Handler to wait 
	* 1 ms with precision. 
	* @return None
	*/
void LIDAR_RES_stop(void) 
{
     d58:	b508      	push	{r3, lr}
	//if (!lidar_timer) {
		//byte_count = 0;
		//lidar_timing = 0;
		//printf("lidar_timer = 0\r\nLiDAR stopped\r\n");
	//}
	printf("LiDAR stopped\r\n");
     d5a:	4802      	ldr	r0, [pc, #8]	; (d64 <LIDAR_RES_stop+0xc>)
     d5c:	4b02      	ldr	r3, [pc, #8]	; (d68 <LIDAR_RES_stop+0x10>)
     d5e:	4798      	blx	r3
     d60:	bd08      	pop	{r3, pc}
     d62:	bf00      	nop
     d64:	00004b90 	.word	0x00004b90
     d68:	00002f49 	.word	0x00002f49

00000d6c <LIDAR_RES_reset>:
	* Firmware Ver 1.27 - rc9, HW Ver 5\r\n
	* Model: 28\r\n
	* @return None
	*/
void LIDAR_RES_reset(void) 
{
     d6c:	b508      	push	{r3, lr}
	//if (!lidar_timer) {
		//byte_count = 0;
		//lidar_timing = 0;
		//printf("lidar_timer = 0\r\nLiDAR reset\r\n");
	//}
	printf("LiDAR reset\r\n");
     d6e:	4802      	ldr	r0, [pc, #8]	; (d78 <LIDAR_RES_reset+0xc>)
     d70:	4b02      	ldr	r3, [pc, #8]	; (d7c <LIDAR_RES_reset+0x10>)
     d72:	4798      	blx	r3
     d74:	bd08      	pop	{r3, pc}
     d76:	bf00      	nop
     d78:	00004ba0 	.word	0x00004ba0
     d7c:	00002f49 	.word	0x00002f49

00000d80 <LIDAR_RES_scan>:
	*						+3		distance_q2[7:0]
	*						+4		distance_q2[15:8]
	* @return None
	*/
void LIDAR_RES_scan(void) 
{
     d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* check[0] - start
	   check[1] - ~start
	   check[2] - check	 */
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
     d84:	4b21      	ldr	r3, [pc, #132]	; (e0c <LIDAR_RES_scan+0x8c>)
     d86:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
     d8a:	f893 6101 	ldrb.w	r6, [r3, #257]	; 0x101
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
									 ((uint16_t)DATA_RESPONSE[2] << 7);
     d8e:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
     d92:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
     d96:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
	
	/* Decrement byte_count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= 5;
     d9a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
     d9e:	3a05      	subs	r2, #5
     da0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	uint8_t check = ((DATA_RESPONSE[0] & 0x3) << 1) | (DATA_RESPONSE[1] & 0x1);
     da4:	004b      	lsls	r3, r1, #1
     da6:	f003 0306 	and.w	r3, r3, #6
     daa:	f006 0201 	and.w	r2, r6, #1
     dae:	4313      	orrs	r3, r2
	
	/* Checking: check=1, ~start=0, start=1 */
	if (check == 0x5 || check == 0x6) {
     db0:	3b05      	subs	r3, #5
     db2:	b2db      	uxtb	r3, r3
     db4:	2b01      	cmp	r3, #1
     db6:	d906      	bls.n	dc6 <LIDAR_RES_scan+0x46>
		scans[scan_count].quality = DATA_RESPONSE[0] >> 2;
		scans[scan_count].angle = angle;
		scans[scan_count++].distance = distance;
	}
	
	if (scan_count % 16 == 0)
     db8:	4b15      	ldr	r3, [pc, #84]	; (e10 <LIDAR_RES_scan+0x90>)
     dba:	6819      	ldr	r1, [r3, #0]
     dbc:	f011 0f0f 	tst.w	r1, #15
     dc0:	d01d      	beq.n	dfe <LIDAR_RES_scan+0x7e>
     dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scans[scan_count].quality = DATA_RESPONSE[0] >> 2;
     dc6:	f8df c048 	ldr.w	ip, [pc, #72]	; e10 <LIDAR_RES_scan+0x90>
     dca:	f8dc 7000 	ldr.w	r7, [ip]
     dce:	4b11      	ldr	r3, [pc, #68]	; (e14 <LIDAR_RES_scan+0x94>)
     dd0:	007a      	lsls	r2, r7, #1
     dd2:	eb02 0e07 	add.w	lr, r2, r7
     dd6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
     dda:	eb03 080e 	add.w	r8, r3, lr
     dde:	0889      	lsrs	r1, r1, #2
     de0:	f803 100e 	strb.w	r1, [r3, lr]
									 ((uint16_t)DATA_RESPONSE[2] << 7);
     de4:	01c0      	lsls	r0, r0, #7
	uint16_t angle = ((uint16_t)DATA_RESPONSE[1] >> 1) + 
     de6:	eb00 0056 	add.w	r0, r0, r6, lsr #1
		scans[scan_count].angle = angle;
     dea:	f8a8 0002 	strh.w	r0, [r8, #2]
		scans[scan_count++].distance = distance;
     dee:	1c79      	adds	r1, r7, #1
     df0:	f8cc 1000 	str.w	r1, [ip]
	uint16_t distance = DATA_RESPONSE[3] + ((uint16_t)DATA_RESPONSE[4] << 8);
     df4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
		scans[scan_count++].distance = distance;
     df8:	f8a8 4004 	strh.w	r4, [r8, #4]
     dfc:	e7dc      	b.n	db8 <LIDAR_RES_scan+0x38>
		printf("gathered %0d/%0d scans...\r\n", scan_count, MAX_SCANS);
     dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
     e02:	4805      	ldr	r0, [pc, #20]	; (e18 <LIDAR_RES_scan+0x98>)
     e04:	4b05      	ldr	r3, [pc, #20]	; (e1c <LIDAR_RES_scan+0x9c>)
     e06:	4798      	blx	r3
		 need to print these except for debugging */
	//else {
		//printf("Invalid response: C=%u, !S=%u, S=%u\r\n",
			   //(check >> 3), ((check >> 2) & 0x1), (check & 0x1));
	//}
}
     e08:	e7db      	b.n	dc2 <LIDAR_RES_scan+0x42>
     e0a:	bf00      	nop
     e0c:	20000464 	.word	0x20000464
     e10:	20002edc 	.word	0x20002edc
     e14:	20002ee0 	.word	0x20002ee0
     e18:	00004bb0 	.word	0x00004bb0
     e1c:	00002e61 	.word	0x00002e61

00000e20 <LIDAR_RES_express_scan>:
	*						+3		distance2[14:7]
	*						+4		angle_val2[3:0], angle_val1[3:0]
	* @return None
	*/
void LIDAR_RES_express_scan(void) 
{ 
     e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t calc_checksum;
	uint8_t PAYLOAD_SIZE=84, CABIN_COUNT=16, CABIN_START=4, CABIN_BYTE_COUNT=5;
	uint16_t i, pos;
	
	uint8_t checksum = ((uint8_t)DATA_RESPONSE[1] << 4) | ((uint8_t)DATA_RESPONSE[0] & 0x0F);
     e22:	4834      	ldr	r0, [pc, #208]	; (ef4 <LIDAR_RES_express_scan+0xd4>)
     e24:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     e28:	f890 4100 	ldrb.w	r4, [r0, #256]	; 0x100
     e2c:	f004 040f 	and.w	r4, r4, #15
     e30:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
     e34:	b2e4      	uxtb	r4, r4
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
     e36:	f890 e102 	ldrb.w	lr, [r0, #258]	; 0x102
     e3a:	f890 5103 	ldrb.w	r5, [r0, #259]	; 0x103
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
	/* Decrement byte count so next scan rewrites same DATA_RESPONSE bytes */
	byte_count -= PAYLOAD_SIZE;
     e3e:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
     e42:	3b54      	subs	r3, #84	; 0x54
     e44:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
     e48:	f200 1301 	addw	r3, r0, #257	; 0x101
     e4c:	f200 1053 	addw	r0, r0, #339	; 0x153
		//return;
	//if ((DATA_RESPONSE[1] >> 4) != 0x05)
		//return;
	
	/* Check if data valid */
	calc_checksum = 0;
     e50:	2200      	movs	r2, #0
	for (i=2; i<PAYLOAD_SIZE; i++)
		calc_checksum ^= DATA_RESPONSE[i];
     e52:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     e56:	404a      	eors	r2, r1
	for (i=2; i<PAYLOAD_SIZE; i++)
     e58:	4283      	cmp	r3, r0
     e5a:	d1fa      	bne.n	e52 <LIDAR_RES_express_scan+0x32>
		
	if (checksum != calc_checksum) {
     e5c:	4294      	cmp	r4, r2
     e5e:	d004      	beq.n	e6a <LIDAR_RES_express_scan+0x4a>
			//printf("Invalid checksum! Given: %u -- Calculated: %u\r\n", checksum, calc_checksum);
			//printf("First 8: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\r\n", 
					//DATA_RESPONSE[0], DATA_RESPONSE[1], DATA_RESPONSE[2], DATA_RESPONSE[3], 
					//DATA_RESPONSE[4], DATA_RESPONSE[5], DATA_RESPONSE[6], DATA_RESPONSE[7]);
		//}
		invalid_exp_scans++;
     e60:	4a25      	ldr	r2, [pc, #148]	; (ef8 <LIDAR_RES_express_scan+0xd8>)
     e62:	6813      	ldr	r3, [r2, #0]
     e64:	3301      	adds	r3, #1
     e66:	6013      	str	r3, [r2, #0]
		//printf("%0d invalid scans -- gathered %0d/%0d scans...\r\n", invalid_exp_scans, scan_count, MAX_SCANS);
		//snprintf( print_buffer, MAX_PRINT_BUFFER_SIZE,
							//"Invalid checksum!\r\nGiven: %u\r\nCalculated: %u\r\n",
							//checksum, calc_checksum);
		//printf(print_buffer);
		return;
     e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t S_flag = DATA_RESPONSE[3] >> 7;
     e6a:	09ee      	lsrs	r6, r5, #7
     e6c:	4b23      	ldr	r3, [pc, #140]	; (efc <LIDAR_RES_express_scan+0xdc>)
     e6e:	681f      	ldr	r7, [r3, #0]
	uint16_t start_angle = DATA_RESPONSE[2] | (((uint8_t)DATA_RESPONSE[3] & 0x7F) << 8);
     e70:	022c      	lsls	r4, r5, #8
     e72:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
     e76:	ea44 040e 	orr.w	r4, r4, lr
     e7a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
     e7e:	4920      	ldr	r1, [pc, #128]	; (f00 <LIDAR_RES_express_scan+0xe0>)
     e80:	eb01 0143 	add.w	r1, r1, r3, lsl #1
     e84:	4d1b      	ldr	r5, [pc, #108]	; (ef4 <LIDAR_RES_express_scan+0xd4>)
     e86:	f505 7080 	add.w	r0, r5, #256	; 0x100
     e8a:	f505 75a8 	add.w	r5, r5, #336	; 0x150
						//"{\"A\":%u,", start_angle);
	//printf(print_buffer);
	
	for (i=0; i<CABIN_COUNT; i++) {
		pos = CABIN_START+(CABIN_BYTE_COUNT*i);
		cabins[scan_count].S = S_flag;
     e8e:	700e      	strb	r6, [r1, #0]
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
     e90:	7902      	ldrb	r2, [r0, #4]
											((uint8_t)DATA_RESPONSE[pos+1] << 7);
     e92:	f890 e005 	ldrb.w	lr, [r0, #5]
		cabins[scan_count].distance1 = ((uint8_t)DATA_RESPONSE[pos+0] >> 1) | 
     e96:	0853      	lsrs	r3, r2, #1
     e98:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
     e9c:	808b      	strh	r3, [r1, #4]
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
     e9e:	7983      	ldrb	r3, [r0, #6]
											((uint8_t)DATA_RESPONSE[pos+3] << 7);
     ea0:	f890 c007 	ldrb.w	ip, [r0, #7]
		cabins[scan_count].distance2 = (DATA_RESPONSE[pos+2] >> 1) |
     ea4:	ea4f 0e53 	mov.w	lr, r3, lsr #1
     ea8:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
     eac:	f8a1 e006 	strh.w	lr, [r1, #6]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
											((uint8_t)DATA_RESPONSE[pos+4] >> 4);
     eb0:	f890 e008 	ldrb.w	lr, [r0, #8]
		cabins[scan_count].angle_value1 = (((uint8_t)DATA_RESPONSE[pos+0] & 0x1) << 4) |
     eb4:	0112      	lsls	r2, r2, #4
     eb6:	f002 0210 	and.w	r2, r2, #16
     eba:	ea42 121e 	orr.w	r2, r2, lr, lsr #4
     ebe:	704a      	strb	r2, [r1, #1]
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
     ec0:	011b      	lsls	r3, r3, #4
     ec2:	f003 0310 	and.w	r3, r3, #16
											(DATA_RESPONSE[pos+4] & 0x0F);
     ec6:	f00e 0e0f 	and.w	lr, lr, #15
		cabins[scan_count].angle_value2 = (((uint8_t)DATA_RESPONSE[pos+2] & 0x1) << 4) |
     eca:	ea43 030e 	orr.w	r3, r3, lr
     ece:	708b      	strb	r3, [r1, #2]
		cabins[scan_count++].start_angle = start_angle;
     ed0:	810c      	strh	r4, [r1, #8]
     ed2:	310a      	adds	r1, #10
     ed4:	3005      	adds	r0, #5
	for (i=0; i<CABIN_COUNT; i++) {
     ed6:	42a8      	cmp	r0, r5
     ed8:	d1d9      	bne.n	e8e <LIDAR_RES_express_scan+0x6e>
     eda:	f107 0210 	add.w	r2, r7, #16
     ede:	4b07      	ldr	r3, [pc, #28]	; (efc <LIDAR_RES_express_scan+0xdc>)
     ee0:	601a      	str	r2, [r3, #0]
							//i, cabins[i].angle_value1, cabins[i].angle_value2,
							//cabins[i].distance1, cabins[i].distance2);
		//printf(print_buffer);
	}
	
	printf("%0d invalid scans -- gathered %0d/%0d scans...\r\n", invalid_exp_scans, scan_count, MAX_SCANS);
     ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
     ee6:	4904      	ldr	r1, [pc, #16]	; (ef8 <LIDAR_RES_express_scan+0xd8>)
     ee8:	6809      	ldr	r1, [r1, #0]
     eea:	4806      	ldr	r0, [pc, #24]	; (f04 <LIDAR_RES_express_scan+0xe4>)
     eec:	4c06      	ldr	r4, [pc, #24]	; (f08 <LIDAR_RES_express_scan+0xe8>)
     eee:	47a0      	blx	r4
     ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ef2:	bf00      	nop
     ef4:	20000464 	.word	0x20000464
     ef8:	200006d4 	.word	0x200006d4
     efc:	20002edc 	.word	0x20002edc
     f00:	200006d8 	.word	0x200006d8
     f04:	00004bcc 	.word	0x00004bcc
     f08:	00002e61 	.word	0x00002e61

00000f0c <LIDAR_RES_get_info>:
	* When converting serial_number to text from hex, the least significant byte 
	*	prints first.
	* @return None
	*/
void LIDAR_RES_get_info(void) 
{
     f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f10:	b089      	sub	sp, #36	; 0x24
	printf("DONE\r\n");
     f12:	4827      	ldr	r0, [pc, #156]	; (fb0 <LIDAR_RES_get_info+0xa4>)
     f14:	4b27      	ldr	r3, [pc, #156]	; (fb4 <LIDAR_RES_get_info+0xa8>)
     f16:	4798      	blx	r3
	
	uint8_t model_id 		 = DATA_RESPONSE[0];
     f18:	4e27      	ldr	r6, [pc, #156]	; (fb8 <LIDAR_RES_get_info+0xac>)
     f1a:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
     f1e:	9303      	str	r3, [sp, #12]
	uint8_t firmware_minor	 = DATA_RESPONSE[1];
     f20:	f896 b101 	ldrb.w	fp, [r6, #257]	; 0x101
	uint8_t firmware_major	 = DATA_RESPONSE[2];
     f24:	f896 a102 	ldrb.w	sl, [r6, #258]	; 0x102
	uint8_t hardware_version = DATA_RESPONSE[3];
     f28:	f896 9103 	ldrb.w	r9, [r6, #259]	; 0x103
	char serial_number[16]	 = {0};
     f2c:	2300      	movs	r3, #0
     f2e:	9304      	str	r3, [sp, #16]
     f30:	9305      	str	r3, [sp, #20]
     f32:	9306      	str	r3, [sp, #24]
     f34:	9307      	str	r3, [sp, #28]
     f36:	f206 1513 	addw	r5, r6, #275	; 0x113
     f3a:	ac04      	add	r4, sp, #16
     f3c:	f206 1603 	addw	r6, r6, #259	; 0x103
	
	/** Get hexadecimal string output */
	int i, j=0;
	for (i=15; i>=0; i--) {
		sprintf(&serial_number[j++], "%02X", DATA_RESPONSE[i+4]);
     f40:	f8df 8098 	ldr.w	r8, [pc, #152]	; fdc <LIDAR_RES_get_info+0xd0>
     f44:	4f1d      	ldr	r7, [pc, #116]	; (fbc <LIDAR_RES_get_info+0xb0>)
     f46:	f815 2901 	ldrb.w	r2, [r5], #-1
     f4a:	4641      	mov	r1, r8
     f4c:	4620      	mov	r0, r4
     f4e:	47b8      	blx	r7
     f50:	3401      	adds	r4, #1
	for (i=15; i>=0; i--) {
     f52:	42b5      	cmp	r5, r6
     f54:	d1f7      	bne.n	f46 <LIDAR_RES_get_info+0x3a>
	}
	
	LIDAR_reset_print_buffer();
     f56:	4f1a      	ldr	r7, [pc, #104]	; (fc0 <LIDAR_RES_get_info+0xb4>)
     f58:	47b8      	blx	r7
	snprintf( print_buffer, MAX_PRINT_BUFFER_SIZE,
     f5a:	4c17      	ldr	r4, [pc, #92]	; (fb8 <LIDAR_RES_get_info+0xac>)
     f5c:	9b03      	ldr	r3, [sp, #12]
     f5e:	4a19      	ldr	r2, [pc, #100]	; (fc4 <LIDAR_RES_get_info+0xb8>)
     f60:	f44f 7180 	mov.w	r1, #256	; 0x100
     f64:	4620      	mov	r0, r4
     f66:	4e18      	ldr	r6, [pc, #96]	; (fc8 <LIDAR_RES_get_info+0xbc>)
     f68:	47b0      	blx	r6
						" : RPLiDAR Model ID: %u\r\n", model_id);
	printf(print_buffer);
     f6a:	4620      	mov	r0, r4
     f6c:	4d17      	ldr	r5, [pc, #92]	; (fcc <LIDAR_RES_get_info+0xc0>)
     f6e:	47a8      	blx	r5
	
	LIDAR_reset_print_buffer();
     f70:	47b8      	blx	r7
	snprintf( print_buffer, MAX_PRINT_BUFFER_SIZE,
     f72:	f8cd b000 	str.w	fp, [sp]
     f76:	4653      	mov	r3, sl
     f78:	4a15      	ldr	r2, [pc, #84]	; (fd0 <LIDAR_RES_get_info+0xc4>)
     f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
     f7e:	4620      	mov	r0, r4
     f80:	47b0      	blx	r6
						" : Firmware Version: %u.%u\r\n", 
						firmware_major, firmware_minor);
	printf(print_buffer);
     f82:	4620      	mov	r0, r4
     f84:	47a8      	blx	r5
	
	LIDAR_reset_print_buffer();
     f86:	47b8      	blx	r7
	snprintf( print_buffer, MAX_PRINT_BUFFER_SIZE,
     f88:	464b      	mov	r3, r9
     f8a:	4a12      	ldr	r2, [pc, #72]	; (fd4 <LIDAR_RES_get_info+0xc8>)
     f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
     f90:	4620      	mov	r0, r4
     f92:	47b0      	blx	r6
						" : Hardware Version: %u\r\n", hardware_version);
	printf(print_buffer);
     f94:	4620      	mov	r0, r4
     f96:	47a8      	blx	r5
	
	LIDAR_reset_print_buffer();
     f98:	47b8      	blx	r7
	snprintf( print_buffer, MAX_PRINT_BUFFER_SIZE,
     f9a:	ab04      	add	r3, sp, #16
     f9c:	4a0e      	ldr	r2, [pc, #56]	; (fd8 <LIDAR_RES_get_info+0xcc>)
     f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
     fa2:	4620      	mov	r0, r4
     fa4:	47b0      	blx	r6
						" : Serial Number: 0x%s\r\n", serial_number);
	printf(print_buffer);
     fa6:	4620      	mov	r0, r4
     fa8:	47a8      	blx	r5
}
     faa:	b009      	add	sp, #36	; 0x24
     fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fb0:	00004c00 	.word	0x00004c00
     fb4:	00002f49 	.word	0x00002f49
     fb8:	20000464 	.word	0x20000464
     fbc:	0000317d 	.word	0x0000317d
     fc0:	00000ca9 	.word	0x00000ca9
     fc4:	00004c10 	.word	0x00004c10
     fc8:	00003115 	.word	0x00003115
     fcc:	00002e61 	.word	0x00002e61
     fd0:	00004c2c 	.word	0x00004c2c
     fd4:	00004c4c 	.word	0x00004c4c
     fd8:	00004c68 	.word	0x00004c68
     fdc:	00004c08 	.word	0x00004c08

00000fe0 <LIDAR_RES_get_health>:
	*		Order 8..0		+1		error_code[7:0]
	*						+2		error_code[15:8]	
	* @return None
	*/
void LIDAR_RES_get_health(void) 
{
     fe0:	b508      	push	{r3, lr}
	printf("DONE\r\n");
     fe2:	4810      	ldr	r0, [pc, #64]	; (1024 <LIDAR_RES_get_health+0x44>)
     fe4:	4b10      	ldr	r3, [pc, #64]	; (1028 <LIDAR_RES_get_health+0x48>)
     fe6:	4798      	blx	r3
	
	char* status;
	uint16_t error_code;  
	
	switch(DATA_RESPONSE[0]) {
     fe8:	4b10      	ldr	r3, [pc, #64]	; (102c <LIDAR_RES_get_health+0x4c>)
     fea:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
     fee:	2a01      	cmp	r2, #1
     ff0:	d010      	beq.n	1014 <LIDAR_RES_get_health+0x34>
     ff2:	b18a      	cbz	r2, 1018 <LIDAR_RES_get_health+0x38>
		case 0: status = "GOOD"; break;
		case 1: status = "WARNING"; break;
		case 2: status = "ERROR"; break;
		default: status = "UNKNOWN"; break;
     ff4:	4b0e      	ldr	r3, [pc, #56]	; (1030 <LIDAR_RES_get_health+0x50>)
     ff6:	490f      	ldr	r1, [pc, #60]	; (1034 <LIDAR_RES_get_health+0x54>)
     ff8:	2a02      	cmp	r2, #2
     ffa:	bf18      	it	ne
     ffc:	4619      	movne	r1, r3
	}
	
	error_code = DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8);
     ffe:	4b0b      	ldr	r3, [pc, #44]	; (102c <LIDAR_RES_get_health+0x4c>)
    1000:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
    1004:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    1008:	b292      	uxth	r2, r2
	
	if (error_code == 0)
    100a:	b13a      	cbz	r2, 101c <LIDAR_RES_get_health+0x3c>
		printf(" : LiDAR Health is %s!\r\n", status);
	else
		printf(" : LiDAR Health is %s!\r\n : Error code: %u\r\n", 
    100c:	480a      	ldr	r0, [pc, #40]	; (1038 <LIDAR_RES_get_health+0x58>)
    100e:	4b0b      	ldr	r3, [pc, #44]	; (103c <LIDAR_RES_get_health+0x5c>)
    1010:	4798      	blx	r3
    1012:	bd08      	pop	{r3, pc}
		case 1: status = "WARNING"; break;
    1014:	490a      	ldr	r1, [pc, #40]	; (1040 <LIDAR_RES_get_health+0x60>)
    1016:	e7f2      	b.n	ffe <LIDAR_RES_get_health+0x1e>
		case 0: status = "GOOD"; break;
    1018:	490a      	ldr	r1, [pc, #40]	; (1044 <LIDAR_RES_get_health+0x64>)
    101a:	e7f0      	b.n	ffe <LIDAR_RES_get_health+0x1e>
		printf(" : LiDAR Health is %s!\r\n", status);
    101c:	480a      	ldr	r0, [pc, #40]	; (1048 <LIDAR_RES_get_health+0x68>)
    101e:	4b07      	ldr	r3, [pc, #28]	; (103c <LIDAR_RES_get_health+0x5c>)
    1020:	4798      	blx	r3
    1022:	bd08      	pop	{r3, pc}
    1024:	00004c00 	.word	0x00004c00
    1028:	00002f49 	.word	0x00002f49
    102c:	20000464 	.word	0x20000464
    1030:	00004c9c 	.word	0x00004c9c
    1034:	00004c94 	.word	0x00004c94
    1038:	00004cc0 	.word	0x00004cc0
    103c:	00002e61 	.word	0x00002e61
    1040:	00004c8c 	.word	0x00004c8c
    1044:	00004c84 	.word	0x00004c84
    1048:	00004ca4 	.word	0x00004ca4

0000104c <LIDAR_RES_get_samplerate>:
	*						+2		Texpress[7:0]
	*						+3		Texpress[15:8]	
	* @return None
	*/
void LIDAR_RES_get_samplerate(void)
{
    104c:	b538      	push	{r3, r4, r5, lr}
	printf("DONE\r\n");
    104e:	480b      	ldr	r0, [pc, #44]	; (107c <LIDAR_RES_get_samplerate+0x30>)
    1050:	4b0b      	ldr	r3, [pc, #44]	; (1080 <LIDAR_RES_get_samplerate+0x34>)
    1052:	4798      	blx	r3
	printf(" : Standard Scan Samplerate: %u\r\n", 
			 DATA_RESPONSE[0] + ((unsigned)DATA_RESPONSE[1] << 8));
    1054:	4c0b      	ldr	r4, [pc, #44]	; (1084 <LIDAR_RES_get_samplerate+0x38>)
    1056:	f894 1101 	ldrb.w	r1, [r4, #257]	; 0x101
    105a:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
	printf(" : Standard Scan Samplerate: %u\r\n", 
    105e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    1062:	4809      	ldr	r0, [pc, #36]	; (1088 <LIDAR_RES_get_samplerate+0x3c>)
    1064:	4d09      	ldr	r5, [pc, #36]	; (108c <LIDAR_RES_get_samplerate+0x40>)
    1066:	47a8      	blx	r5
	
	printf(" : Express Scan Samplerate: %u\r\n", 
						DATA_RESPONSE[2] + ((unsigned)DATA_RESPONSE[3] << 8));
    1068:	f894 1103 	ldrb.w	r1, [r4, #259]	; 0x103
    106c:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
	printf(" : Express Scan Samplerate: %u\r\n", 
    1070:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    1074:	4806      	ldr	r0, [pc, #24]	; (1090 <LIDAR_RES_get_samplerate+0x44>)
    1076:	47a8      	blx	r5
    1078:	bd38      	pop	{r3, r4, r5, pc}
    107a:	bf00      	nop
    107c:	00004c00 	.word	0x00004c00
    1080:	00002f49 	.word	0x00002f49
    1084:	20000464 	.word	0x20000464
    1088:	00004cec 	.word	0x00004cec
    108c:	00002e61 	.word	0x00002e61
    1090:	00004d10 	.word	0x00004d10

00001094 <LIDAR_PWM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1094:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <LIDAR_PWM_PORT_init+0x3c>)
    1096:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    109a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    109e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10a2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10a6:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    10aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    10ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10b2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10b6:	f44f 7100 	mov.w	r1, #512	; 0x200
    10ba:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    10be:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    10c2:	f042 0204 	orr.w	r2, r2, #4
    10c6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10ca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    10ce:	4770      	bx	lr
    10d0:	41008000 	.word	0x41008000

000010d4 <LIDAR_PWM_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    10d4:	4a04      	ldr	r2, [pc, #16]	; (10e8 <LIDAR_PWM_CLOCK_init+0x14>)
    10d6:	69d3      	ldr	r3, [r2, #28]
    10d8:	f043 0320 	orr.w	r3, r3, #32
    10dc:	61d3      	str	r3, [r2, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    10de:	2240      	movs	r2, #64	; 0x40
    10e0:	4b02      	ldr	r3, [pc, #8]	; (10ec <LIDAR_PWM_CLOCK_init+0x18>)
    10e2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    10e6:	4770      	bx	lr
    10e8:	40000800 	.word	0x40000800
    10ec:	40001c00 	.word	0x40001c00

000010f0 <LIDAR_PWM_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    10f0:	4b28      	ldr	r3, [pc, #160]	; (1194 <LIDAR_PWM_init+0xa4>)
    10f2:	691b      	ldr	r3, [r3, #16]
							   CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void LIDAR_PWM_init(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    10f4:	f013 0f01 	tst.w	r3, #1
    10f8:	d11f      	bne.n	113a <LIDAR_PWM_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    10fa:	4a26      	ldr	r2, [pc, #152]	; (1194 <LIDAR_PWM_init+0xa4>)
    10fc:	6913      	ldr	r3, [r2, #16]
    10fe:	f013 0f03 	tst.w	r3, #3
    1102:	d1fb      	bne.n	10fc <LIDAR_PWM_init+0xc>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1104:	4b23      	ldr	r3, [pc, #140]	; (1194 <LIDAR_PWM_init+0xa4>)
    1106:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    1108:	f013 0f02 	tst.w	r3, #2
    110c:	d00d      	beq.n	112a <LIDAR_PWM_init+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    110e:	4a21      	ldr	r2, [pc, #132]	; (1194 <LIDAR_PWM_init+0xa4>)
    1110:	6813      	ldr	r3, [r2, #0]
    1112:	f023 0302 	bic.w	r3, r3, #2
    1116:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1118:	6913      	ldr	r3, [r2, #16]
    111a:	f013 0f03 	tst.w	r3, #3
    111e:	d1fb      	bne.n	1118 <LIDAR_PWM_init+0x28>
    1120:	4a1c      	ldr	r2, [pc, #112]	; (1194 <LIDAR_PWM_init+0xa4>)
    1122:	6913      	ldr	r3, [r2, #16]
    1124:	f013 0f02 	tst.w	r3, #2
    1128:	d1fb      	bne.n	1122 <LIDAR_PWM_init+0x32>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    112a:	2201      	movs	r2, #1
    112c:	4b19      	ldr	r3, [pc, #100]	; (1194 <LIDAR_PWM_init+0xa4>)
    112e:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1130:	461a      	mov	r2, r3
    1132:	6913      	ldr	r3, [r2, #16]
    1134:	f013 0f03 	tst.w	r3, #3
    1138:	d1fb      	bne.n	1132 <LIDAR_PWM_init+0x42>
    113a:	4a16      	ldr	r2, [pc, #88]	; (1194 <LIDAR_PWM_init+0xa4>)
    113c:	6913      	ldr	r3, [r2, #16]
    113e:	f013 0f01 	tst.w	r3, #1
    1142:	d1fb      	bne.n	113c <LIDAR_PWM_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1144:	4a14      	ldr	r2, [pc, #80]	; (1198 <LIDAR_PWM_init+0xa8>)
    1146:	4b13      	ldr	r3, [pc, #76]	; (1194 <LIDAR_PWM_init+0xa4>)
    1148:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    114a:	461a      	mov	r2, r3
    114c:	6913      	ldr	r3, [r2, #16]
    114e:	f013 0f03 	tst.w	r3, #3
    1152:	d1fb      	bne.n	114c <LIDAR_PWM_init+0x5c>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1154:	4b0f      	ldr	r3, [pc, #60]	; (1194 <LIDAR_PWM_init+0xa4>)
    1156:	2200      	movs	r2, #0
    1158:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    115a:	22ff      	movs	r2, #255	; 0xff
    115c:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    115e:	2203      	movs	r2, #3
    1160:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1162:	223c      	movs	r2, #60	; 0x3c
    1164:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1166:	461a      	mov	r2, r3
    1168:	6913      	ldr	r3, [r2, #16]
    116a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    116e:	d1fb      	bne.n	1168 <LIDAR_PWM_init+0x78>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1170:	2200      	movs	r2, #0
    1172:	4b08      	ldr	r3, [pc, #32]	; (1194 <LIDAR_PWM_init+0xa4>)
    1174:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1176:	461a      	mov	r2, r3
    1178:	6913      	ldr	r3, [r2, #16]
    117a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    117e:	d1fb      	bne.n	1178 <LIDAR_PWM_init+0x88>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1180:	4a04      	ldr	r2, [pc, #16]	; (1194 <LIDAR_PWM_init+0xa4>)
    1182:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1184:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1188:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    118a:	6913      	ldr	r3, [r2, #16]
    118c:	f013 0f03 	tst.w	r3, #3
    1190:	d1fb      	bne.n	118a <LIDAR_PWM_init+0x9a>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
    1192:	4770      	bx	lr
    1194:	42001400 	.word	0x42001400
    1198:	12000310 	.word	0x12000310

0000119c <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    119c:	4b19      	ldr	r3, [pc, #100]	; (1204 <LIDAR_PWM_start+0x68>)
    119e:	691b      	ldr	r3, [r3, #16]

void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    11a0:	f013 0f01 	tst.w	r3, #1
    11a4:	d117      	bne.n	11d6 <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    11a6:	4a17      	ldr	r2, [pc, #92]	; (1204 <LIDAR_PWM_start+0x68>)
    11a8:	6913      	ldr	r3, [r2, #16]
    11aa:	f013 0f03 	tst.w	r3, #3
    11ae:	d1fb      	bne.n	11a8 <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    11b0:	4b14      	ldr	r3, [pc, #80]	; (1204 <LIDAR_PWM_start+0x68>)
    11b2:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    11b4:	f013 0f02 	tst.w	r3, #2
    11b8:	d00d      	beq.n	11d6 <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    11ba:	4a12      	ldr	r2, [pc, #72]	; (1204 <LIDAR_PWM_start+0x68>)
    11bc:	6813      	ldr	r3, [r2, #0]
    11be:	f023 0302 	bic.w	r3, r3, #2
    11c2:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    11c4:	6913      	ldr	r3, [r2, #16]
    11c6:	f013 0f03 	tst.w	r3, #3
    11ca:	d1fb      	bne.n	11c4 <LIDAR_PWM_start+0x28>
    11cc:	4a0d      	ldr	r2, [pc, #52]	; (1204 <LIDAR_PWM_start+0x68>)
    11ce:	6913      	ldr	r3, [r2, #16]
    11d0:	f013 0f02 	tst.w	r3, #2
    11d4:	d1fb      	bne.n	11ce <LIDAR_PWM_start+0x32>
    11d6:	4a0b      	ldr	r2, [pc, #44]	; (1204 <LIDAR_PWM_start+0x68>)
    11d8:	6913      	ldr	r3, [r2, #16]
    11da:	f013 0f01 	tst.w	r3, #1
    11de:	d1fb      	bne.n	11d8 <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    11e0:	2224      	movs	r2, #36	; 0x24
    11e2:	4b08      	ldr	r3, [pc, #32]	; (1204 <LIDAR_PWM_start+0x68>)
    11e4:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    11e6:	461a      	mov	r2, r3
    11e8:	6913      	ldr	r3, [r2, #16]
    11ea:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    11ee:	d1fb      	bne.n	11e8 <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    11f0:	4a04      	ldr	r2, [pc, #16]	; (1204 <LIDAR_PWM_start+0x68>)
    11f2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    11f4:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    11f8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    11fa:	6913      	ldr	r3, [r2, #16]
    11fc:	f013 0f03 	tst.w	r3, #3
    1200:	d1fb      	bne.n	11fa <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    1202:	4770      	bx	lr
    1204:	42001400 	.word	0x42001400

00001208 <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1208:	4b19      	ldr	r3, [pc, #100]	; (1270 <LIDAR_PWM_stop+0x68>)
    120a:	691b      	ldr	r3, [r3, #16]

void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
    120c:	f013 0f01 	tst.w	r3, #1
    1210:	d117      	bne.n	1242 <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1212:	4a17      	ldr	r2, [pc, #92]	; (1270 <LIDAR_PWM_stop+0x68>)
    1214:	6913      	ldr	r3, [r2, #16]
    1216:	f013 0f03 	tst.w	r3, #3
    121a:	d1fb      	bne.n	1214 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    121c:	4b14      	ldr	r3, [pc, #80]	; (1270 <LIDAR_PWM_stop+0x68>)
    121e:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    1220:	f013 0f02 	tst.w	r3, #2
    1224:	d00d      	beq.n	1242 <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1226:	4a12      	ldr	r2, [pc, #72]	; (1270 <LIDAR_PWM_stop+0x68>)
    1228:	6813      	ldr	r3, [r2, #0]
    122a:	f023 0302 	bic.w	r3, r3, #2
    122e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1230:	6913      	ldr	r3, [r2, #16]
    1232:	f013 0f03 	tst.w	r3, #3
    1236:	d1fb      	bne.n	1230 <LIDAR_PWM_stop+0x28>
    1238:	4a0d      	ldr	r2, [pc, #52]	; (1270 <LIDAR_PWM_stop+0x68>)
    123a:	6913      	ldr	r3, [r2, #16]
    123c:	f013 0f02 	tst.w	r3, #2
    1240:	d1fb      	bne.n	123a <LIDAR_PWM_stop+0x32>
    1242:	4a0b      	ldr	r2, [pc, #44]	; (1270 <LIDAR_PWM_stop+0x68>)
    1244:	6913      	ldr	r3, [r2, #16]
    1246:	f013 0f01 	tst.w	r3, #1
    124a:	d1fb      	bne.n	1244 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    124c:	2200      	movs	r2, #0
    124e:	4b08      	ldr	r3, [pc, #32]	; (1270 <LIDAR_PWM_stop+0x68>)
    1250:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1252:	461a      	mov	r2, r3
    1254:	6913      	ldr	r3, [r2, #16]
    1256:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    125a:	d1fb      	bne.n	1254 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    125c:	4a04      	ldr	r2, [pc, #16]	; (1270 <LIDAR_PWM_stop+0x68>)
    125e:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1260:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1264:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1266:	6913      	ldr	r3, [r2, #16]
    1268:	f013 0f03 	tst.w	r3, #3
    126c:	d1fb      	bne.n	1266 <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
    126e:	4770      	bx	lr
    1270:	42001400 	.word	0x42001400

00001274 <LIDAR_USART_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1274:	4b10      	ldr	r3, [pc, #64]	; (12b8 <LIDAR_USART_PORT_init+0x44>)
    1276:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    127a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    127e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1286:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    128a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    128e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1292:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1296:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    129a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    129e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12a6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12ae:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    12b6:	4770      	bx	lr
    12b8:	41008000 	.word	0x41008000

000012bc <LIDAR_USART_CLOCK_init>:
    12bc:	4b06      	ldr	r3, [pc, #24]	; (12d8 <LIDAR_USART_CLOCK_init+0x1c>)
    12be:	2240      	movs	r2, #64	; 0x40
    12c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    12c4:	2243      	movs	r2, #67	; 0x43
    12c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    12ca:	4a04      	ldr	r2, [pc, #16]	; (12dc <LIDAR_USART_CLOCK_init+0x20>)
    12cc:	6953      	ldr	r3, [r2, #20]
    12ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    12d2:	6153      	str	r3, [r2, #20]
    12d4:	4770      	bx	lr
    12d6:	bf00      	nop
    12d8:	40001c00 	.word	0x40001c00
    12dc:	40000800 	.word	0x40000800

000012e0 <LIDAR_USART_init>:
							   CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void LIDAR_USART_init(void)
{
    12e0:	b510      	push	{r4, lr}
	LIDAR_USART_CLOCK_init();
    12e2:	4b07      	ldr	r3, [pc, #28]	; (1300 <LIDAR_USART_init+0x20>)
    12e4:	4798      	blx	r3
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
    12e6:	4c07      	ldr	r4, [pc, #28]	; (1304 <LIDAR_USART_init+0x24>)
    12e8:	2200      	movs	r2, #0
    12ea:	4907      	ldr	r1, [pc, #28]	; (1308 <LIDAR_USART_init+0x28>)
    12ec:	4620      	mov	r0, r4
    12ee:	4b07      	ldr	r3, [pc, #28]	; (130c <LIDAR_USART_init+0x2c>)
    12f0:	4798      	blx	r3
	//usart_sync_set_baud_rate(&LIDAR_USART, 115200);
	//usart_sync_set_data_order(&LIDAR_USART, USART_DATA_ORDER_LSB);
	//usart_sync_set_parity(&LIDAR_USART, USART_PARITY_NONE);
	//usart_sync_set_stopbits(&LIDAR_USART, USART_STOP_BITS_ONE);
	//usart_sync_set_character_size(&LIDAR_USART, USART_CHARACTER_SIZE_8BITS);
	usart_sync_enable(&LIDAR_USART);
    12f2:	4620      	mov	r0, r4
    12f4:	4b06      	ldr	r3, [pc, #24]	; (1310 <LIDAR_USART_init+0x30>)
    12f6:	4798      	blx	r3
	LIDAR_USART_PORT_init();
    12f8:	4b06      	ldr	r3, [pc, #24]	; (1314 <LIDAR_USART_init+0x34>)
    12fa:	4798      	blx	r3
    12fc:	bd10      	pop	{r4, pc}
    12fe:	bf00      	nop
    1300:	000012bd 	.word	0x000012bd
    1304:	200046ec 	.word	0x200046ec
    1308:	40003000 	.word	0x40003000
    130c:	00000861 	.word	0x00000861
    1310:	000008a9 	.word	0x000008a9
    1314:	00001275 	.word	0x00001275

00001318 <LIDAR_USART_send>:
}

void LIDAR_USART_send(uint8_t* message, uint16_t length)
{
    1318:	b530      	push	{r4, r5, lr}
    131a:	b083      	sub	sp, #12
    131c:	4604      	mov	r4, r0
    131e:	460d      	mov	r5, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    1320:	a901      	add	r1, sp, #4
    1322:	4805      	ldr	r0, [pc, #20]	; (1338 <LIDAR_USART_send+0x20>)
    1324:	4b05      	ldr	r3, [pc, #20]	; (133c <LIDAR_USART_send+0x24>)
    1326:	4798      	blx	r3
	
	io_write(io, message, length);
    1328:	462a      	mov	r2, r5
    132a:	4621      	mov	r1, r4
    132c:	9801      	ldr	r0, [sp, #4]
    132e:	4b04      	ldr	r3, [pc, #16]	; (1340 <LIDAR_USART_send+0x28>)
    1330:	4798      	blx	r3
}
    1332:	b003      	add	sp, #12
    1334:	bd30      	pop	{r4, r5, pc}
    1336:	bf00      	nop
    1338:	200046ec 	.word	0x200046ec
    133c:	000008d5 	.word	0x000008d5
    1340:	000006fd 	.word	0x000006fd

00001344 <LIDAR_REQ_stop>:
{
    1344:	b530      	push	{r4, r5, lr}
    1346:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_STOP;
    1348:	2525      	movs	r5, #37	; 0x25
    134a:	4b0d      	ldr	r3, [pc, #52]	; (1380 <LIDAR_REQ_stop+0x3c>)
    134c:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    134e:	4c0d      	ldr	r4, [pc, #52]	; (1384 <LIDAR_REQ_stop+0x40>)
    1350:	2300      	movs	r3, #0
    1352:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	LIDAR_reset_print_buffer();
    1356:	4b0c      	ldr	r3, [pc, #48]	; (1388 <LIDAR_REQ_stop+0x44>)
    1358:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    135a:	9500      	str	r5, [sp, #0]
    135c:	23a5      	movs	r3, #165	; 0xa5
    135e:	4a0b      	ldr	r2, [pc, #44]	; (138c <LIDAR_REQ_stop+0x48>)
    1360:	f44f 7180 	mov.w	r1, #256	; 0x100
    1364:	4620      	mov	r0, r4
    1366:	4d0a      	ldr	r5, [pc, #40]	; (1390 <LIDAR_REQ_stop+0x4c>)
    1368:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    136a:	b281      	uxth	r1, r0
    136c:	4620      	mov	r0, r4
    136e:	4b09      	ldr	r3, [pc, #36]	; (1394 <LIDAR_REQ_stop+0x50>)
    1370:	4798      	blx	r3
	delay_ms(1);
    1372:	2001      	movs	r0, #1
    1374:	4b08      	ldr	r3, [pc, #32]	; (1398 <LIDAR_REQ_stop+0x54>)
    1376:	4798      	blx	r3
	LIDAR_RES_stop();
    1378:	4b08      	ldr	r3, [pc, #32]	; (139c <LIDAR_REQ_stop+0x58>)
    137a:	4798      	blx	r3
}
    137c:	b003      	add	sp, #12
    137e:	bd30      	pop	{r4, r5, pc}
    1380:	200006d0 	.word	0x200006d0
    1384:	20000464 	.word	0x20000464
    1388:	00000ca9 	.word	0x00000ca9
    138c:	00004d34 	.word	0x00004d34
    1390:	00003115 	.word	0x00003115
    1394:	00001319 	.word	0x00001319
    1398:	000006dd 	.word	0x000006dd
    139c:	00000d59 	.word	0x00000d59

000013a0 <LIDAR_REQ_reset>:
{
    13a0:	b530      	push	{r4, r5, lr}
    13a2:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_RESET;
    13a4:	2540      	movs	r5, #64	; 0x40
    13a6:	4b0d      	ldr	r3, [pc, #52]	; (13dc <LIDAR_REQ_reset+0x3c>)
    13a8:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    13aa:	4c0d      	ldr	r4, [pc, #52]	; (13e0 <LIDAR_REQ_reset+0x40>)
    13ac:	2300      	movs	r3, #0
    13ae:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	LIDAR_reset_print_buffer();
    13b2:	4b0c      	ldr	r3, [pc, #48]	; (13e4 <LIDAR_REQ_reset+0x44>)
    13b4:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    13b6:	9500      	str	r5, [sp, #0]
    13b8:	23a5      	movs	r3, #165	; 0xa5
    13ba:	4a0b      	ldr	r2, [pc, #44]	; (13e8 <LIDAR_REQ_reset+0x48>)
    13bc:	f44f 7180 	mov.w	r1, #256	; 0x100
    13c0:	4620      	mov	r0, r4
    13c2:	4d0a      	ldr	r5, [pc, #40]	; (13ec <LIDAR_REQ_reset+0x4c>)
    13c4:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    13c6:	b281      	uxth	r1, r0
    13c8:	4620      	mov	r0, r4
    13ca:	4b09      	ldr	r3, [pc, #36]	; (13f0 <LIDAR_REQ_reset+0x50>)
    13cc:	4798      	blx	r3
	delay_ms(2);
    13ce:	2002      	movs	r0, #2
    13d0:	4b08      	ldr	r3, [pc, #32]	; (13f4 <LIDAR_REQ_reset+0x54>)
    13d2:	4798      	blx	r3
	LIDAR_RES_reset();
    13d4:	4b08      	ldr	r3, [pc, #32]	; (13f8 <LIDAR_REQ_reset+0x58>)
    13d6:	4798      	blx	r3
}
    13d8:	b003      	add	sp, #12
    13da:	bd30      	pop	{r4, r5, pc}
    13dc:	200006d0 	.word	0x200006d0
    13e0:	20000464 	.word	0x20000464
    13e4:	00000ca9 	.word	0x00000ca9
    13e8:	00004d34 	.word	0x00004d34
    13ec:	00003115 	.word	0x00003115
    13f0:	00001319 	.word	0x00001319
    13f4:	000006dd 	.word	0x000006dd
    13f8:	00000d6d 	.word	0x00000d6d

000013fc <LIDAR_REQ_scan>:
{
    13fc:	b530      	push	{r4, r5, lr}
    13fe:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_SCAN;
    1400:	2520      	movs	r5, #32
    1402:	4b0c      	ldr	r3, [pc, #48]	; (1434 <LIDAR_REQ_scan+0x38>)
    1404:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    1406:	4c0c      	ldr	r4, [pc, #48]	; (1438 <LIDAR_REQ_scan+0x3c>)
    1408:	2300      	movs	r3, #0
    140a:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	scan_count = 0;
    140e:	4a0b      	ldr	r2, [pc, #44]	; (143c <LIDAR_REQ_scan+0x40>)
    1410:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    1412:	4b0b      	ldr	r3, [pc, #44]	; (1440 <LIDAR_REQ_scan+0x44>)
    1414:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1416:	9500      	str	r5, [sp, #0]
    1418:	23a5      	movs	r3, #165	; 0xa5
    141a:	4a0a      	ldr	r2, [pc, #40]	; (1444 <LIDAR_REQ_scan+0x48>)
    141c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1420:	4620      	mov	r0, r4
    1422:	4d09      	ldr	r5, [pc, #36]	; (1448 <LIDAR_REQ_scan+0x4c>)
    1424:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1426:	b281      	uxth	r1, r0
    1428:	4620      	mov	r0, r4
    142a:	4b08      	ldr	r3, [pc, #32]	; (144c <LIDAR_REQ_scan+0x50>)
    142c:	4798      	blx	r3
}
    142e:	b003      	add	sp, #12
    1430:	bd30      	pop	{r4, r5, pc}
    1432:	bf00      	nop
    1434:	200006d0 	.word	0x200006d0
    1438:	20000464 	.word	0x20000464
    143c:	20002edc 	.word	0x20002edc
    1440:	00000ca9 	.word	0x00000ca9
    1444:	00004d34 	.word	0x00004d34
    1448:	00003115 	.word	0x00003115
    144c:	00001319 	.word	0x00001319

00001450 <LIDAR_REQ_express_scan>:
{	
    1450:	b530      	push	{r4, r5, lr}
    1452:	b085      	sub	sp, #20
	char working_mode = 0;
    1454:	2300      	movs	r3, #0
    1456:	f88d 300f 	strb.w	r3, [sp, #15]
	char reserved_fields = 0;
    145a:	f88d 300e 	strb.w	r3, [sp, #14]
	char checksum = 0 ^ LIDAR_START_BYTE ^ LIDAR_REQ_EXPRESS_SCAN ^ payload_size;
    145e:	2222      	movs	r2, #34	; 0x22
    1460:	f88d 200d 	strb.w	r2, [sp, #13]
	scan_count = 0;
    1464:	4a19      	ldr	r2, [pc, #100]	; (14cc <LIDAR_REQ_express_scan+0x7c>)
    1466:	6013      	str	r3, [r2, #0]
	invalid_exp_scans = 0;
    1468:	4a19      	ldr	r2, [pc, #100]	; (14d0 <LIDAR_REQ_express_scan+0x80>)
    146a:	6013      	str	r3, [r2, #0]
	lidar_request = LIDAR_REQ_EXPRESS_SCAN;
    146c:	2582      	movs	r5, #130	; 0x82
    146e:	4a19      	ldr	r2, [pc, #100]	; (14d4 <LIDAR_REQ_express_scan+0x84>)
    1470:	7015      	strb	r5, [r2, #0]
	byte_count = 0;
    1472:	4c19      	ldr	r4, [pc, #100]	; (14d8 <LIDAR_REQ_express_scan+0x88>)
    1474:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	LIDAR_reset_print_buffer();
    1478:	4b18      	ldr	r3, [pc, #96]	; (14dc <LIDAR_REQ_express_scan+0x8c>)
    147a:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    147c:	2305      	movs	r3, #5
    147e:	9301      	str	r3, [sp, #4]
    1480:	9500      	str	r5, [sp, #0]
    1482:	23a5      	movs	r3, #165	; 0xa5
    1484:	4a16      	ldr	r2, [pc, #88]	; (14e0 <LIDAR_REQ_express_scan+0x90>)
    1486:	f44f 7180 	mov.w	r1, #256	; 0x100
    148a:	4620      	mov	r0, r4
    148c:	4d15      	ldr	r5, [pc, #84]	; (14e4 <LIDAR_REQ_express_scan+0x94>)
    148e:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1490:	b281      	uxth	r1, r0
    1492:	4620      	mov	r0, r4
    1494:	4c14      	ldr	r4, [pc, #80]	; (14e8 <LIDAR_REQ_express_scan+0x98>)
    1496:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&working_mode, 1);
    1498:	2101      	movs	r1, #1
    149a:	f10d 000f 	add.w	r0, sp, #15
    149e:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14a0:	2101      	movs	r1, #1
    14a2:	f10d 000e 	add.w	r0, sp, #14
    14a6:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14a8:	2101      	movs	r1, #1
    14aa:	f10d 000e 	add.w	r0, sp, #14
    14ae:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14b0:	2101      	movs	r1, #1
    14b2:	f10d 000e 	add.w	r0, sp, #14
    14b6:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&reserved_fields, 1);
    14b8:	2101      	movs	r1, #1
    14ba:	f10d 000e 	add.w	r0, sp, #14
    14be:	47a0      	blx	r4
	LIDAR_USART_send((uint8_t *)&checksum, 1);
    14c0:	2101      	movs	r1, #1
    14c2:	f10d 000d 	add.w	r0, sp, #13
    14c6:	47a0      	blx	r4
}
    14c8:	b005      	add	sp, #20
    14ca:	bd30      	pop	{r4, r5, pc}
    14cc:	20002edc 	.word	0x20002edc
    14d0:	200006d4 	.word	0x200006d4
    14d4:	200006d0 	.word	0x200006d0
    14d8:	20000464 	.word	0x20000464
    14dc:	00000ca9 	.word	0x00000ca9
    14e0:	00004d3c 	.word	0x00004d3c
    14e4:	00003115 	.word	0x00003115
    14e8:	00001319 	.word	0x00001319

000014ec <LIDAR_REQ_force_scan>:
{
    14ec:	b530      	push	{r4, r5, lr}
    14ee:	b083      	sub	sp, #12
	LIDAR_PWM_start();
    14f0:	4b0d      	ldr	r3, [pc, #52]	; (1528 <LIDAR_REQ_force_scan+0x3c>)
    14f2:	4798      	blx	r3
	lidar_request = LIDAR_REQ_FORCE_SCAN;
    14f4:	2521      	movs	r5, #33	; 0x21
    14f6:	4b0d      	ldr	r3, [pc, #52]	; (152c <LIDAR_REQ_force_scan+0x40>)
    14f8:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    14fa:	4c0d      	ldr	r4, [pc, #52]	; (1530 <LIDAR_REQ_force_scan+0x44>)
    14fc:	2300      	movs	r3, #0
    14fe:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	scan_count = 0;
    1502:	4a0c      	ldr	r2, [pc, #48]	; (1534 <LIDAR_REQ_force_scan+0x48>)
    1504:	6013      	str	r3, [r2, #0]
	LIDAR_reset_print_buffer();
    1506:	4b0c      	ldr	r3, [pc, #48]	; (1538 <LIDAR_REQ_force_scan+0x4c>)
    1508:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    150a:	9500      	str	r5, [sp, #0]
    150c:	23a5      	movs	r3, #165	; 0xa5
    150e:	4a0b      	ldr	r2, [pc, #44]	; (153c <LIDAR_REQ_force_scan+0x50>)
    1510:	f44f 7180 	mov.w	r1, #256	; 0x100
    1514:	4620      	mov	r0, r4
    1516:	4d0a      	ldr	r5, [pc, #40]	; (1540 <LIDAR_REQ_force_scan+0x54>)
    1518:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    151a:	b281      	uxth	r1, r0
    151c:	4620      	mov	r0, r4
    151e:	4b09      	ldr	r3, [pc, #36]	; (1544 <LIDAR_REQ_force_scan+0x58>)
    1520:	4798      	blx	r3
}
    1522:	b003      	add	sp, #12
    1524:	bd30      	pop	{r4, r5, pc}
    1526:	bf00      	nop
    1528:	0000119d 	.word	0x0000119d
    152c:	200006d0 	.word	0x200006d0
    1530:	20000464 	.word	0x20000464
    1534:	20002edc 	.word	0x20002edc
    1538:	00000ca9 	.word	0x00000ca9
    153c:	00004d34 	.word	0x00004d34
    1540:	00003115 	.word	0x00003115
    1544:	00001319 	.word	0x00001319

00001548 <LIDAR_REQ_get_info>:
{
    1548:	b530      	push	{r4, r5, lr}
    154a:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_INFO;
    154c:	2550      	movs	r5, #80	; 0x50
    154e:	4b0c      	ldr	r3, [pc, #48]	; (1580 <LIDAR_REQ_get_info+0x38>)
    1550:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    1552:	4c0c      	ldr	r4, [pc, #48]	; (1584 <LIDAR_REQ_get_info+0x3c>)
    1554:	2300      	movs	r3, #0
    1556:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	LIDAR_reset_print_buffer();
    155a:	4b0b      	ldr	r3, [pc, #44]	; (1588 <LIDAR_REQ_get_info+0x40>)
    155c:	4798      	blx	r3
	LIDAR_reset_response_descriptor();
    155e:	4b0b      	ldr	r3, [pc, #44]	; (158c <LIDAR_REQ_get_info+0x44>)
    1560:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    1562:	9500      	str	r5, [sp, #0]
    1564:	23a5      	movs	r3, #165	; 0xa5
    1566:	4a0a      	ldr	r2, [pc, #40]	; (1590 <LIDAR_REQ_get_info+0x48>)
    1568:	f44f 7180 	mov.w	r1, #256	; 0x100
    156c:	4620      	mov	r0, r4
    156e:	4d09      	ldr	r5, [pc, #36]	; (1594 <LIDAR_REQ_get_info+0x4c>)
    1570:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    1572:	b281      	uxth	r1, r0
    1574:	4620      	mov	r0, r4
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <LIDAR_REQ_get_info+0x50>)
    1578:	4798      	blx	r3
}
    157a:	b003      	add	sp, #12
    157c:	bd30      	pop	{r4, r5, pc}
    157e:	bf00      	nop
    1580:	200006d0 	.word	0x200006d0
    1584:	20000464 	.word	0x20000464
    1588:	00000ca9 	.word	0x00000ca9
    158c:	00000cc1 	.word	0x00000cc1
    1590:	00004d34 	.word	0x00004d34
    1594:	00003115 	.word	0x00003115
    1598:	00001319 	.word	0x00001319

0000159c <LIDAR_REQ_get_health>:
{
    159c:	b530      	push	{r4, r5, lr}
    159e:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_HEALTH;
    15a0:	2552      	movs	r5, #82	; 0x52
    15a2:	4b0c      	ldr	r3, [pc, #48]	; (15d4 <LIDAR_REQ_get_health+0x38>)
    15a4:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    15a6:	4c0c      	ldr	r4, [pc, #48]	; (15d8 <LIDAR_REQ_get_health+0x3c>)
    15a8:	2300      	movs	r3, #0
    15aa:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	LIDAR_reset_print_buffer();
    15ae:	4b0b      	ldr	r3, [pc, #44]	; (15dc <LIDAR_REQ_get_health+0x40>)
    15b0:	4798      	blx	r3
	LIDAR_reset_response_descriptor();
    15b2:	4b0b      	ldr	r3, [pc, #44]	; (15e0 <LIDAR_REQ_get_health+0x44>)
    15b4:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    15b6:	9500      	str	r5, [sp, #0]
    15b8:	23a5      	movs	r3, #165	; 0xa5
    15ba:	4a0a      	ldr	r2, [pc, #40]	; (15e4 <LIDAR_REQ_get_health+0x48>)
    15bc:	f44f 7180 	mov.w	r1, #256	; 0x100
    15c0:	4620      	mov	r0, r4
    15c2:	4d09      	ldr	r5, [pc, #36]	; (15e8 <LIDAR_REQ_get_health+0x4c>)
    15c4:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    15c6:	b281      	uxth	r1, r0
    15c8:	4620      	mov	r0, r4
    15ca:	4b08      	ldr	r3, [pc, #32]	; (15ec <LIDAR_REQ_get_health+0x50>)
    15cc:	4798      	blx	r3
}
    15ce:	b003      	add	sp, #12
    15d0:	bd30      	pop	{r4, r5, pc}
    15d2:	bf00      	nop
    15d4:	200006d0 	.word	0x200006d0
    15d8:	20000464 	.word	0x20000464
    15dc:	00000ca9 	.word	0x00000ca9
    15e0:	00000cc1 	.word	0x00000cc1
    15e4:	00004d34 	.word	0x00004d34
    15e8:	00003115 	.word	0x00003115
    15ec:	00001319 	.word	0x00001319

000015f0 <LIDAR_REQ_get_samplerate>:
{
    15f0:	b530      	push	{r4, r5, lr}
    15f2:	b083      	sub	sp, #12
	lidar_request = LIDAR_REQ_GET_SAMPLERATE;
    15f4:	2559      	movs	r5, #89	; 0x59
    15f6:	4b0c      	ldr	r3, [pc, #48]	; (1628 <LIDAR_REQ_get_samplerate+0x38>)
    15f8:	701d      	strb	r5, [r3, #0]
	byte_count = 0;
    15fa:	4c0c      	ldr	r4, [pc, #48]	; (162c <LIDAR_REQ_get_samplerate+0x3c>)
    15fc:	2300      	movs	r3, #0
    15fe:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	LIDAR_reset_print_buffer();
    1602:	4b0b      	ldr	r3, [pc, #44]	; (1630 <LIDAR_REQ_get_samplerate+0x40>)
    1604:	4798      	blx	r3
	LIDAR_reset_response_descriptor();
    1606:	4b0b      	ldr	r3, [pc, #44]	; (1634 <LIDAR_REQ_get_samplerate+0x44>)
    1608:	4798      	blx	r3
	buffer_length = snprintf(print_buffer, MAX_PRINT_BUFFER_SIZE, 
    160a:	9500      	str	r5, [sp, #0]
    160c:	23a5      	movs	r3, #165	; 0xa5
    160e:	4a0a      	ldr	r2, [pc, #40]	; (1638 <LIDAR_REQ_get_samplerate+0x48>)
    1610:	f44f 7180 	mov.w	r1, #256	; 0x100
    1614:	4620      	mov	r0, r4
    1616:	4d09      	ldr	r5, [pc, #36]	; (163c <LIDAR_REQ_get_samplerate+0x4c>)
    1618:	47a8      	blx	r5
	LIDAR_USART_send((uint8_t *)print_buffer, buffer_length);
    161a:	b281      	uxth	r1, r0
    161c:	4620      	mov	r0, r4
    161e:	4b08      	ldr	r3, [pc, #32]	; (1640 <LIDAR_REQ_get_samplerate+0x50>)
    1620:	4798      	blx	r3
}
    1622:	b003      	add	sp, #12
    1624:	bd30      	pop	{r4, r5, pc}
    1626:	bf00      	nop
    1628:	200006d0 	.word	0x200006d0
    162c:	20000464 	.word	0x20000464
    1630:	00000ca9 	.word	0x00000ca9
    1634:	00000cc1 	.word	0x00000cc1
    1638:	00004d34 	.word	0x00004d34
    163c:	00003115 	.word	0x00003115
    1640:	00001319 	.word	0x00001319

00001644 <LIDAR_USART_read_byte>:

uint8_t LIDAR_USART_read_byte(void)
{
    1644:	b500      	push	{lr}
    1646:	b083      	sub	sp, #12
	uint8_t buf;
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&LIDAR_USART, &io);
    1648:	4669      	mov	r1, sp
    164a:	4807      	ldr	r0, [pc, #28]	; (1668 <LIDAR_USART_read_byte+0x24>)
    164c:	4b07      	ldr	r3, [pc, #28]	; (166c <LIDAR_USART_read_byte+0x28>)
    164e:	4798      	blx	r3
	
	io_read(io, &buf, 1);
    1650:	2201      	movs	r2, #1
    1652:	f10d 0107 	add.w	r1, sp, #7
    1656:	9800      	ldr	r0, [sp, #0]
    1658:	4b05      	ldr	r3, [pc, #20]	; (1670 <LIDAR_USART_read_byte+0x2c>)
    165a:	4798      	blx	r3
	return buf;
}
    165c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1660:	b003      	add	sp, #12
    1662:	f85d fb04 	ldr.w	pc, [sp], #4
    1666:	bf00      	nop
    1668:	200046ec 	.word	0x200046ec
    166c:	000008d5 	.word	0x000008d5
    1670:	0000072d 	.word	0x0000072d

00001674 <LIDAR_process>:
{
    1674:	b538      	push	{r3, r4, r5, lr}
	while (!usart_sync_is_rx_not_empty(&LIDAR_USART));
    1676:	4d69      	ldr	r5, [pc, #420]	; (181c <LIDAR_process+0x1a8>)
    1678:	4c69      	ldr	r4, [pc, #420]	; (1820 <LIDAR_process+0x1ac>)
    167a:	4628      	mov	r0, r5
    167c:	47a0      	blx	r4
    167e:	2800      	cmp	r0, #0
    1680:	d0fb      	beq.n	167a <LIDAR_process+0x6>
	switch (byte_count) {
    1682:	4b68      	ldr	r3, [pc, #416]	; (1824 <LIDAR_process+0x1b0>)
    1684:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
    1688:	2c06      	cmp	r4, #6
    168a:	d85b      	bhi.n	1744 <LIDAR_process+0xd0>
    168c:	e8df f004 	tbb	[pc, r4]
    1690:	251a0f04 	.word	0x251a0f04
    1694:	4133      	.short	0x4133
    1696:	4f          	.byte	0x4f
    1697:	00          	.byte	0x00
			resp_desc.start1 = LIDAR_USART_read_byte();
    1698:	4b63      	ldr	r3, [pc, #396]	; (1828 <LIDAR_process+0x1b4>)
    169a:	4798      	blx	r3
    169c:	4b63      	ldr	r3, [pc, #396]	; (182c <LIDAR_process+0x1b8>)
    169e:	7018      	strb	r0, [r3, #0]
			byte_count++;
    16a0:	4a60      	ldr	r2, [pc, #384]	; (1824 <LIDAR_process+0x1b0>)
    16a2:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    16a6:	3301      	adds	r3, #1
    16a8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			return;
    16ac:	bd38      	pop	{r3, r4, r5, pc}
			resp_desc.start2 = LIDAR_USART_read_byte();
    16ae:	4b5e      	ldr	r3, [pc, #376]	; (1828 <LIDAR_process+0x1b4>)
    16b0:	4798      	blx	r3
    16b2:	4b5e      	ldr	r3, [pc, #376]	; (182c <LIDAR_process+0x1b8>)
    16b4:	7058      	strb	r0, [r3, #1]
			byte_count++;
    16b6:	4a5b      	ldr	r2, [pc, #364]	; (1824 <LIDAR_process+0x1b0>)
    16b8:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    16bc:	3301      	adds	r3, #1
    16be:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			return;
    16c2:	bd38      	pop	{r3, r4, r5, pc}
			resp_desc.response_info = LIDAR_USART_read_byte();
    16c4:	4b58      	ldr	r3, [pc, #352]	; (1828 <LIDAR_process+0x1b4>)
    16c6:	4798      	blx	r3
    16c8:	4b58      	ldr	r3, [pc, #352]	; (182c <LIDAR_process+0x1b8>)
    16ca:	6058      	str	r0, [r3, #4]
			byte_count++;
    16cc:	4a55      	ldr	r2, [pc, #340]	; (1824 <LIDAR_process+0x1b0>)
    16ce:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    16d2:	3301      	adds	r3, #1
    16d4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			return;
    16d8:	bd38      	pop	{r3, r4, r5, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 8);
    16da:	4b53      	ldr	r3, [pc, #332]	; (1828 <LIDAR_process+0x1b4>)
    16dc:	4798      	blx	r3
    16de:	4a53      	ldr	r2, [pc, #332]	; (182c <LIDAR_process+0x1b8>)
    16e0:	6853      	ldr	r3, [r2, #4]
    16e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    16e6:	6053      	str	r3, [r2, #4]
			byte_count++;
    16e8:	4a4e      	ldr	r2, [pc, #312]	; (1824 <LIDAR_process+0x1b0>)
    16ea:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    16ee:	3301      	adds	r3, #1
    16f0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			return;
    16f4:	bd38      	pop	{r3, r4, r5, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 16);
    16f6:	4b4c      	ldr	r3, [pc, #304]	; (1828 <LIDAR_process+0x1b4>)
    16f8:	4798      	blx	r3
    16fa:	4a4c      	ldr	r2, [pc, #304]	; (182c <LIDAR_process+0x1b8>)
    16fc:	6853      	ldr	r3, [r2, #4]
    16fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1702:	6053      	str	r3, [r2, #4]
			byte_count++;
    1704:	4a47      	ldr	r2, [pc, #284]	; (1824 <LIDAR_process+0x1b0>)
    1706:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    170a:	3301      	adds	r3, #1
    170c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			return;
    1710:	bd38      	pop	{r3, r4, r5, pc}
			resp_desc.response_info |= (LIDAR_USART_read_byte() << 24);
    1712:	4b45      	ldr	r3, [pc, #276]	; (1828 <LIDAR_process+0x1b4>)
    1714:	4798      	blx	r3
    1716:	4a45      	ldr	r2, [pc, #276]	; (182c <LIDAR_process+0x1b8>)
    1718:	6853      	ldr	r3, [r2, #4]
    171a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    171e:	6053      	str	r3, [r2, #4]
			byte_count++;
    1720:	4a40      	ldr	r2, [pc, #256]	; (1824 <LIDAR_process+0x1b0>)
    1722:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    1726:	3301      	adds	r3, #1
    1728:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			return;
    172c:	bd38      	pop	{r3, r4, r5, pc}
			resp_desc.data_type = LIDAR_USART_read_byte();
    172e:	4b3e      	ldr	r3, [pc, #248]	; (1828 <LIDAR_process+0x1b4>)
    1730:	4798      	blx	r3
    1732:	4b3e      	ldr	r3, [pc, #248]	; (182c <LIDAR_process+0x1b8>)
    1734:	7218      	strb	r0, [r3, #8]
			byte_count++;
    1736:	4a3b      	ldr	r2, [pc, #236]	; (1824 <LIDAR_process+0x1b0>)
    1738:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    173c:	3301      	adds	r3, #1
    173e:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			return;
    1742:	bd38      	pop	{r3, r4, r5, pc}
			data_idx = byte_count - LIDAR_RESP_DESC_SIZE;
    1744:	3c07      	subs	r4, #7
			DATA_RESPONSE[data_idx] = LIDAR_USART_read_byte();
    1746:	4b38      	ldr	r3, [pc, #224]	; (1828 <LIDAR_process+0x1b4>)
    1748:	4798      	blx	r3
    174a:	4b36      	ldr	r3, [pc, #216]	; (1824 <LIDAR_process+0x1b0>)
    174c:	4423      	add	r3, r4
    174e:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
			if (lidar_request == LIDAR_REQ_EXPRESS_SCAN) {
    1752:	4b37      	ldr	r3, [pc, #220]	; (1830 <LIDAR_process+0x1bc>)
    1754:	7819      	ldrb	r1, [r3, #0]
    1756:	2982      	cmp	r1, #130	; 0x82
    1758:	d00d      	beq.n	1776 <LIDAR_process+0x102>
			byte_count++;
    175a:	4b32      	ldr	r3, [pc, #200]	; (1824 <LIDAR_process+0x1b0>)
    175c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
    1760:	3201      	adds	r2, #1
    1762:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    1766:	4b31      	ldr	r3, [pc, #196]	; (182c <LIDAR_process+0x1b8>)
    1768:	685b      	ldr	r3, [r3, #4]
    176a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    176e:	3307      	adds	r3, #7
    1770:	429a      	cmp	r2, r3
    1772:	d02c      	beq.n	17ce <LIDAR_process+0x15a>
    1774:	bd38      	pop	{r3, r4, r5, pc}
				if (data_idx == 0) { // check sync -- 0xA
    1776:	b91c      	cbnz	r4, 1780 <LIDAR_process+0x10c>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x0A )
    1778:	0900      	lsrs	r0, r0, #4
    177a:	280a      	cmp	r0, #10
    177c:	d1fa      	bne.n	1774 <LIDAR_process+0x100>
    177e:	e001      	b.n	1784 <LIDAR_process+0x110>
				else if (data_idx == 1) { // check sync -- 0x5
    1780:	2c01      	cmp	r4, #1
    1782:	d01a      	beq.n	17ba <LIDAR_process+0x146>
			byte_count++;
    1784:	4b27      	ldr	r3, [pc, #156]	; (1824 <LIDAR_process+0x1b0>)
    1786:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
    178a:	3201      	adds	r2, #1
    178c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	if (byte_count == (resp_desc.response_info & 0x3FFFFFFF) + LIDAR_RESP_DESC_SIZE) {
    1790:	4b26      	ldr	r3, [pc, #152]	; (182c <LIDAR_process+0x1b8>)
    1792:	685b      	ldr	r3, [r3, #4]
    1794:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    1798:	3307      	adds	r3, #7
    179a:	429a      	cmp	r2, r3
    179c:	d1ea      	bne.n	1774 <LIDAR_process+0x100>
				LIDAR_RES_express_scan();
    179e:	4b25      	ldr	r3, [pc, #148]	; (1834 <LIDAR_process+0x1c0>)
    17a0:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    17a2:	4b25      	ldr	r3, [pc, #148]	; (1838 <LIDAR_process+0x1c4>)
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    17aa:	d3e3      	bcc.n	1774 <LIDAR_process+0x100>
					LIDAR_PWM_stop();
    17ac:	4b23      	ldr	r3, [pc, #140]	; (183c <LIDAR_process+0x1c8>)
    17ae:	4798      	blx	r3
					LIDAR_REQ_stop();
    17b0:	4b23      	ldr	r3, [pc, #140]	; (1840 <LIDAR_process+0x1cc>)
    17b2:	4798      	blx	r3
					LIDAR_print_cabins();
    17b4:	4b23      	ldr	r3, [pc, #140]	; (1844 <LIDAR_process+0x1d0>)
    17b6:	4798      	blx	r3
					break;
    17b8:	e026      	b.n	1808 <LIDAR_process+0x194>
					if ((DATA_RESPONSE[data_idx] >> 4) != 0x05) {
    17ba:	0900      	lsrs	r0, r0, #4
    17bc:	2805      	cmp	r0, #5
    17be:	d0e1      	beq.n	1784 <LIDAR_process+0x110>
						byte_count--; // decrement and wait for another 0xA to come back in sync
    17c0:	4a18      	ldr	r2, [pc, #96]	; (1824 <LIDAR_process+0x1b0>)
    17c2:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    17c6:	3b01      	subs	r3, #1
    17c8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
						return;
    17cc:	bd38      	pop	{r3, r4, r5, pc}
		switch(lidar_request) {
    17ce:	2950      	cmp	r1, #80	; 0x50
    17d0:	d018      	beq.n	1804 <LIDAR_process+0x190>
    17d2:	d908      	bls.n	17e6 <LIDAR_process+0x172>
    17d4:	2959      	cmp	r1, #89	; 0x59
    17d6:	d01e      	beq.n	1816 <LIDAR_process+0x1a2>
    17d8:	2982      	cmp	r1, #130	; 0x82
    17da:	d0e0      	beq.n	179e <LIDAR_process+0x12a>
    17dc:	2952      	cmp	r1, #82	; 0x52
    17de:	d110      	bne.n	1802 <LIDAR_process+0x18e>
				LIDAR_RES_get_health();
    17e0:	4b19      	ldr	r3, [pc, #100]	; (1848 <LIDAR_process+0x1d4>)
    17e2:	4798      	blx	r3
				break;
    17e4:	e010      	b.n	1808 <LIDAR_process+0x194>
		switch(lidar_request) {
    17e6:	3920      	subs	r1, #32
    17e8:	2901      	cmp	r1, #1
    17ea:	d809      	bhi.n	1800 <LIDAR_process+0x18c>
				LIDAR_RES_scan();
    17ec:	4b17      	ldr	r3, [pc, #92]	; (184c <LIDAR_process+0x1d8>)
    17ee:	4798      	blx	r3
				if (scan_count >= MAX_SCANS) {
    17f0:	4b11      	ldr	r3, [pc, #68]	; (1838 <LIDAR_process+0x1c4>)
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    17f8:	d3bc      	bcc.n	1774 <LIDAR_process+0x100>
					LIDAR_print_scans();
    17fa:	4b15      	ldr	r3, [pc, #84]	; (1850 <LIDAR_process+0x1dc>)
    17fc:	4798      	blx	r3
					break;
    17fe:	e003      	b.n	1808 <LIDAR_process+0x194>
    1800:	bd38      	pop	{r3, r4, r5, pc}
    1802:	bd38      	pop	{r3, r4, r5, pc}
				LIDAR_RES_get_info();
    1804:	4b13      	ldr	r3, [pc, #76]	; (1854 <LIDAR_process+0x1e0>)
    1806:	4798      	blx	r3
		byte_count = 0;
    1808:	4b06      	ldr	r3, [pc, #24]	; (1824 <LIDAR_process+0x1b0>)
    180a:	2200      	movs	r2, #0
    180c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		processing = 0;
    1810:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
		return;
    1814:	bd38      	pop	{r3, r4, r5, pc}
				LIDAR_RES_get_samplerate();
    1816:	4b10      	ldr	r3, [pc, #64]	; (1858 <LIDAR_process+0x1e4>)
    1818:	4798      	blx	r3
				break;
    181a:	e7f5      	b.n	1808 <LIDAR_process+0x194>
    181c:	200046ec 	.word	0x200046ec
    1820:	000008fd 	.word	0x000008fd
    1824:	20000464 	.word	0x20000464
    1828:	00001645 	.word	0x00001645
    182c:	200046e0 	.word	0x200046e0
    1830:	200006d0 	.word	0x200006d0
    1834:	00000e21 	.word	0x00000e21
    1838:	20002edc 	.word	0x20002edc
    183c:	00001209 	.word	0x00001209
    1840:	00001345 	.word	0x00001345
    1844:	00000d11 	.word	0x00000d11
    1848:	00000fe1 	.word	0x00000fe1
    184c:	00000d81 	.word	0x00000d81
    1850:	00000cd5 	.word	0x00000cd5
    1854:	00000f0d 	.word	0x00000f0d
    1858:	0000104d 	.word	0x0000104d

0000185c <LIDAR_menu>:
{
    185c:	b570      	push	{r4, r5, r6, lr}
    185e:	b082      	sub	sp, #8
	uint16_t user_selection = 0;
    1860:	2300      	movs	r3, #0
    1862:	f8ad 3006 	strh.w	r3, [sp, #6]
		if (processing)
    1866:	4c41      	ldr	r4, [pc, #260]	; (196c <LIDAR_menu+0x110>)
			printf("%s", lidar_menu_txt);
    1868:	4e41      	ldr	r6, [pc, #260]	; (1970 <LIDAR_menu+0x114>)
    186a:	4d42      	ldr	r5, [pc, #264]	; (1974 <LIDAR_menu+0x118>)
    186c:	e001      	b.n	1872 <LIDAR_menu+0x16>
			LIDAR_process();
    186e:	4b42      	ldr	r3, [pc, #264]	; (1978 <LIDAR_menu+0x11c>)
    1870:	4798      	blx	r3
		if (processing)
    1872:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1876:	2b00      	cmp	r3, #0
    1878:	d1f9      	bne.n	186e <LIDAR_menu+0x12>
			printf("%s", lidar_menu_txt);
    187a:	4631      	mov	r1, r6
    187c:	4628      	mov	r0, r5
    187e:	4b3f      	ldr	r3, [pc, #252]	; (197c <LIDAR_menu+0x120>)
    1880:	4798      	blx	r3
			if (scanf("%hx", &user_selection) == 0) {
    1882:	f10d 0106 	add.w	r1, sp, #6
    1886:	483e      	ldr	r0, [pc, #248]	; (1980 <LIDAR_menu+0x124>)
    1888:	4b3e      	ldr	r3, [pc, #248]	; (1984 <LIDAR_menu+0x128>)
    188a:	4798      	blx	r3
    188c:	b188      	cbz	r0, 18b2 <LIDAR_menu+0x56>
			printf("\r\nSelected option is %d\r\n", (int)user_selection);
    188e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    1892:	483d      	ldr	r0, [pc, #244]	; (1988 <LIDAR_menu+0x12c>)
    1894:	4b39      	ldr	r3, [pc, #228]	; (197c <LIDAR_menu+0x120>)
    1896:	4798      	blx	r3
			switch (user_selection) {
    1898:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    189c:	3b01      	subs	r3, #1
    189e:	2b0a      	cmp	r3, #10
    18a0:	d860      	bhi.n	1964 <LIDAR_menu+0x108>
    18a2:	e8df f003 	tbb	[pc, r3]
    18a6:	110c      	.short	0x110c
    18a8:	29231d17 	.word	0x29231d17
    18ac:	4d443b32 	.word	0x4d443b32
    18b0:	56          	.byte	0x56
    18b1:	00          	.byte	0x00
				fflush(stdin);
    18b2:	4b36      	ldr	r3, [pc, #216]	; (198c <LIDAR_menu+0x130>)
    18b4:	681b      	ldr	r3, [r3, #0]
    18b6:	6858      	ldr	r0, [r3, #4]
    18b8:	4b35      	ldr	r3, [pc, #212]	; (1990 <LIDAR_menu+0x134>)
    18ba:	4798      	blx	r3
				continue;
    18bc:	e7d9      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nReturning to main menu\r\n");
    18be:	4835      	ldr	r0, [pc, #212]	; (1994 <LIDAR_menu+0x138>)
    18c0:	4b35      	ldr	r3, [pc, #212]	; (1998 <LIDAR_menu+0x13c>)
    18c2:	4798      	blx	r3
}
    18c4:	b002      	add	sp, #8
    18c6:	bd70      	pop	{r4, r5, r6, pc}
					printf("\r\nStarting LiDAR motor\r\n");
    18c8:	4834      	ldr	r0, [pc, #208]	; (199c <LIDAR_menu+0x140>)
    18ca:	4b33      	ldr	r3, [pc, #204]	; (1998 <LIDAR_menu+0x13c>)
    18cc:	4798      	blx	r3
					LIDAR_PWM_start();
    18ce:	4b34      	ldr	r3, [pc, #208]	; (19a0 <LIDAR_menu+0x144>)
    18d0:	4798      	blx	r3
					break;
    18d2:	e7ce      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nStopping LiDAR motor\r\n");
    18d4:	4833      	ldr	r0, [pc, #204]	; (19a4 <LIDAR_menu+0x148>)
    18d6:	4b30      	ldr	r3, [pc, #192]	; (1998 <LIDAR_menu+0x13c>)
    18d8:	4798      	blx	r3
					LIDAR_PWM_stop();
    18da:	4b33      	ldr	r3, [pc, #204]	; (19a8 <LIDAR_menu+0x14c>)
    18dc:	4798      	blx	r3
					break;
    18de:	e7c8      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRequesting LiDAR stop\r\n");
    18e0:	4832      	ldr	r0, [pc, #200]	; (19ac <LIDAR_menu+0x150>)
    18e2:	4b2d      	ldr	r3, [pc, #180]	; (1998 <LIDAR_menu+0x13c>)
    18e4:	4798      	blx	r3
					LIDAR_REQ_stop();
    18e6:	4b32      	ldr	r3, [pc, #200]	; (19b0 <LIDAR_menu+0x154>)
    18e8:	4798      	blx	r3
					break;
    18ea:	e7c2      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRequesting LiDAR reset\r\n");
    18ec:	4831      	ldr	r0, [pc, #196]	; (19b4 <LIDAR_menu+0x158>)
    18ee:	4b2a      	ldr	r3, [pc, #168]	; (1998 <LIDAR_menu+0x13c>)
    18f0:	4798      	blx	r3
					LIDAR_REQ_reset();
    18f2:	4b31      	ldr	r3, [pc, #196]	; (19b8 <LIDAR_menu+0x15c>)
    18f4:	4798      	blx	r3
					break;
    18f6:	e7bc      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRequesting LiDAR start scan\r\n");
    18f8:	4830      	ldr	r0, [pc, #192]	; (19bc <LIDAR_menu+0x160>)
    18fa:	4b27      	ldr	r3, [pc, #156]	; (1998 <LIDAR_menu+0x13c>)
    18fc:	4798      	blx	r3
					LIDAR_REQ_scan();
    18fe:	4b30      	ldr	r3, [pc, #192]	; (19c0 <LIDAR_menu+0x164>)
    1900:	4798      	blx	r3
					processing = 1;
    1902:	2301      	movs	r3, #1
    1904:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
					break;
    1908:	e7b3      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRequesting LiDAR start express scan\r\n");
    190a:	482e      	ldr	r0, [pc, #184]	; (19c4 <LIDAR_menu+0x168>)
    190c:	4b22      	ldr	r3, [pc, #136]	; (1998 <LIDAR_menu+0x13c>)
    190e:	4798      	blx	r3
					LIDAR_REQ_express_scan();
    1910:	4b2d      	ldr	r3, [pc, #180]	; (19c8 <LIDAR_menu+0x16c>)
    1912:	4798      	blx	r3
					processing = 1;
    1914:	2301      	movs	r3, #1
    1916:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
					break;
    191a:	e7aa      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRequesting LiDAR start force scan\r\n");
    191c:	482b      	ldr	r0, [pc, #172]	; (19cc <LIDAR_menu+0x170>)
    191e:	4b1e      	ldr	r3, [pc, #120]	; (1998 <LIDAR_menu+0x13c>)
    1920:	4798      	blx	r3
					LIDAR_REQ_force_scan();
    1922:	4b2b      	ldr	r3, [pc, #172]	; (19d0 <LIDAR_menu+0x174>)
    1924:	4798      	blx	r3
					processing = 1;
    1926:	2301      	movs	r3, #1
    1928:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
					break;
    192c:	e7a1      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRetrieving LiDAR info\r\n");
    192e:	4829      	ldr	r0, [pc, #164]	; (19d4 <LIDAR_menu+0x178>)
    1930:	4b19      	ldr	r3, [pc, #100]	; (1998 <LIDAR_menu+0x13c>)
    1932:	4798      	blx	r3
					LIDAR_REQ_get_info();
    1934:	4b28      	ldr	r3, [pc, #160]	; (19d8 <LIDAR_menu+0x17c>)
    1936:	4798      	blx	r3
					processing = 1;
    1938:	2301      	movs	r3, #1
    193a:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
					break;
    193e:	e798      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRetrieving LiDAR health\r\n");
    1940:	4826      	ldr	r0, [pc, #152]	; (19dc <LIDAR_menu+0x180>)
    1942:	4b15      	ldr	r3, [pc, #84]	; (1998 <LIDAR_menu+0x13c>)
    1944:	4798      	blx	r3
					LIDAR_REQ_get_health();
    1946:	4b26      	ldr	r3, [pc, #152]	; (19e0 <LIDAR_menu+0x184>)
    1948:	4798      	blx	r3
					processing = 1;
    194a:	2301      	movs	r3, #1
    194c:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
					break;
    1950:	e78f      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nRetrieving LiDAR samplerates\r\n");
    1952:	4824      	ldr	r0, [pc, #144]	; (19e4 <LIDAR_menu+0x188>)
    1954:	4b10      	ldr	r3, [pc, #64]	; (1998 <LIDAR_menu+0x13c>)
    1956:	4798      	blx	r3
					LIDAR_REQ_get_samplerate();
    1958:	4b23      	ldr	r3, [pc, #140]	; (19e8 <LIDAR_menu+0x18c>)
    195a:	4798      	blx	r3
					processing = 1;
    195c:	2301      	movs	r3, #1
    195e:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
					break;
    1962:	e786      	b.n	1872 <LIDAR_menu+0x16>
					printf("\r\nInvalid option\r\n");
    1964:	4821      	ldr	r0, [pc, #132]	; (19ec <LIDAR_menu+0x190>)
    1966:	4b0c      	ldr	r3, [pc, #48]	; (1998 <LIDAR_menu+0x13c>)
    1968:	4798      	blx	r3
					break;
    196a:	e782      	b.n	1872 <LIDAR_menu+0x16>
    196c:	20000464 	.word	0x20000464
    1970:	20000000 	.word	0x20000000
    1974:	00004d44 	.word	0x00004d44
    1978:	00001675 	.word	0x00001675
    197c:	00002e61 	.word	0x00002e61
    1980:	00004d48 	.word	0x00004d48
    1984:	00002f79 	.word	0x00002f79
    1988:	00004d4c 	.word	0x00004d4c
    198c:	2000026c 	.word	0x2000026c
    1990:	00002ac1 	.word	0x00002ac1
    1994:	00004d68 	.word	0x00004d68
    1998:	00002f49 	.word	0x00002f49
    199c:	00004d84 	.word	0x00004d84
    19a0:	0000119d 	.word	0x0000119d
    19a4:	00004d9c 	.word	0x00004d9c
    19a8:	00001209 	.word	0x00001209
    19ac:	00004db4 	.word	0x00004db4
    19b0:	00001345 	.word	0x00001345
    19b4:	00004dd0 	.word	0x00004dd0
    19b8:	000013a1 	.word	0x000013a1
    19bc:	00004dec 	.word	0x00004dec
    19c0:	000013fd 	.word	0x000013fd
    19c4:	00004e0c 	.word	0x00004e0c
    19c8:	00001451 	.word	0x00001451
    19cc:	00004e34 	.word	0x00004e34
    19d0:	000014ed 	.word	0x000014ed
    19d4:	00004e5c 	.word	0x00004e5c
    19d8:	00001549 	.word	0x00001549
    19dc:	00004e78 	.word	0x00004e78
    19e0:	0000159d 	.word	0x0000159d
    19e4:	00004e94 	.word	0x00004e94
    19e8:	000015f1 	.word	0x000015f1
    19ec:	00004eb4 	.word	0x00004eb4

000019f0 <HardFault_Handler>:

/**
  * HardFault Handler
  */
void HardFault_Handler(void)
{
    19f0:	b508      	push	{r3, lr}
	printf("\r\n!!!!!!!! In HardFault_Handler !!!!!!!!\r\n");
    19f2:	4802      	ldr	r0, [pc, #8]	; (19fc <HardFault_Handler+0xc>)
    19f4:	4b02      	ldr	r3, [pc, #8]	; (1a00 <HardFault_Handler+0x10>)
    19f6:	4798      	blx	r3
    19f8:	e7fe      	b.n	19f8 <HardFault_Handler+0x8>
    19fa:	bf00      	nop
    19fc:	00004ec8 	.word	0x00004ec8
    1a00:	00002f49 	.word	0x00002f49

00001a04 <main>:
	while (1);
}

int main(void)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1a08:	4b22      	ldr	r3, [pc, #136]	; (1a94 <main+0x90>)
    1a0a:	4798      	blx	r3
	
	printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
    1a0c:	4822      	ldr	r0, [pc, #136]	; (1a98 <main+0x94>)
    1a0e:	4b23      	ldr	r3, [pc, #140]	; (1a9c <main+0x98>)
    1a10:	4798      	blx	r3

	EEPROM_init();
    1a12:	4b23      	ldr	r3, [pc, #140]	; (1aa0 <main+0x9c>)
    1a14:	4798      	blx	r3
	SERVO_set_angle(0);
    1a16:	2000      	movs	r0, #0
    1a18:	4b22      	ldr	r3, [pc, #136]	; (1aa4 <main+0xa0>)
    1a1a:	4798      	blx	r3

	while (1) 
	{
		uint32_t user_selection = 0;

		printf("%s", menu_txt);
    1a1c:	4f22      	ldr	r7, [pc, #136]	; (1aa8 <main+0xa4>)
    1a1e:	4e23      	ldr	r6, [pc, #140]	; (1aac <main+0xa8>)
    1a20:	4d23      	ldr	r5, [pc, #140]	; (1ab0 <main+0xac>)
    1a22:	e004      	b.n	1a2e <main+0x2a>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    1a24:	4b23      	ldr	r3, [pc, #140]	; (1ab4 <main+0xb0>)
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	6858      	ldr	r0, [r3, #4]
    1a2a:	4b23      	ldr	r3, [pc, #140]	; (1ab8 <main+0xb4>)
    1a2c:	4798      	blx	r3
		uint32_t user_selection = 0;
    1a2e:	ac02      	add	r4, sp, #8
    1a30:	2300      	movs	r3, #0
    1a32:	f844 3d04 	str.w	r3, [r4, #-4]!
		printf("%s", menu_txt);
    1a36:	4639      	mov	r1, r7
    1a38:	4630      	mov	r0, r6
    1a3a:	47a8      	blx	r5
		if (scanf("%d", &user_selection) == 0) {
    1a3c:	4621      	mov	r1, r4
    1a3e:	481f      	ldr	r0, [pc, #124]	; (1abc <main+0xb8>)
    1a40:	4b1f      	ldr	r3, [pc, #124]	; (1ac0 <main+0xbc>)
    1a42:	4798      	blx	r3
    1a44:	2800      	cmp	r0, #0
    1a46:	d0ed      	beq.n	1a24 <main+0x20>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1a48:	9901      	ldr	r1, [sp, #4]
    1a4a:	481e      	ldr	r0, [pc, #120]	; (1ac4 <main+0xc0>)
    1a4c:	47a8      	blx	r5
		
		switch (user_selection) {
    1a4e:	9b01      	ldr	r3, [sp, #4]
    1a50:	3b01      	subs	r3, #1
    1a52:	2b03      	cmp	r3, #3
    1a54:	d819      	bhi.n	1a8a <main+0x86>
    1a56:	e8df f003 	tbb	[pc, r3]
    1a5a:	0f02      	.short	0x0f02
    1a5c:	1512      	.short	0x1512
  __ASM volatile ("dsb 0xF":::"memory");
    1a5e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1a62:	4919      	ldr	r1, [pc, #100]	; (1ac8 <main+0xc4>)
    1a64:	68ca      	ldr	r2, [r1, #12]
    1a66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1a6a:	4b18      	ldr	r3, [pc, #96]	; (1acc <main+0xc8>)
    1a6c:	4313      	orrs	r3, r2
    1a6e:	60cb      	str	r3, [r1, #12]
    1a70:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1a74:	bf00      	nop
    1a76:	e7fd      	b.n	1a74 <main+0x70>
			case 1:
				NVIC_SystemReset();
				break;
			
			case 2:
				EEPROM_menu();
    1a78:	4b15      	ldr	r3, [pc, #84]	; (1ad0 <main+0xcc>)
    1a7a:	4798      	blx	r3
				break;
    1a7c:	e7d7      	b.n	1a2e <main+0x2a>

			case 3:
				SERVO_menu();
    1a7e:	4b15      	ldr	r3, [pc, #84]	; (1ad4 <main+0xd0>)
    1a80:	4798      	blx	r3
				break;
    1a82:	e7d4      	b.n	1a2e <main+0x2a>
			
			case 4:
				LIDAR_menu();
    1a84:	4b14      	ldr	r3, [pc, #80]	; (1ad8 <main+0xd4>)
    1a86:	4798      	blx	r3
				break;
    1a88:	e7d1      	b.n	1a2e <main+0x2a>
			
			default:
				printf("\r\nInvalid option \r\n");
    1a8a:	4814      	ldr	r0, [pc, #80]	; (1adc <main+0xd8>)
    1a8c:	4b03      	ldr	r3, [pc, #12]	; (1a9c <main+0x98>)
    1a8e:	4798      	blx	r3
				break;
    1a90:	e7cd      	b.n	1a2e <main+0x2a>
    1a92:	bf00      	nop
    1a94:	000002d1 	.word	0x000002d1
    1a98:	00004ef4 	.word	0x00004ef4
    1a9c:	00002f49 	.word	0x00002f49
    1aa0:	00001e85 	.word	0x00001e85
    1aa4:	00001c11 	.word	0x00001c11
    1aa8:	20000138 	.word	0x20000138
    1aac:	00004d44 	.word	0x00004d44
    1ab0:	00002e61 	.word	0x00002e61
    1ab4:	2000026c 	.word	0x2000026c
    1ab8:	00002ac1 	.word	0x00002ac1
    1abc:	000051cc 	.word	0x000051cc
    1ac0:	00002f79 	.word	0x00002f79
    1ac4:	00004d4c 	.word	0x00004d4c
    1ac8:	e000ed00 	.word	0xe000ed00
    1acc:	05fa0004 	.word	0x05fa0004
    1ad0:	00001ffd 	.word	0x00001ffd
    1ad4:	00001ce5 	.word	0x00001ce5
    1ad8:	0000185d 	.word	0x0000185d
    1adc:	00004f30 	.word	0x00004f30

00001ae0 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    1ae0:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1ae2:	4b05      	ldr	r3, [pc, #20]	; (1af8 <sd_mmc_init+0x18>)
    1ae4:	2404      	movs	r4, #4
    1ae6:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    1ae8:	24ff      	movs	r4, #255	; 0xff
    1aea:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    1aec:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    1aee:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    1af0:	635a      	str	r2, [r3, #52]	; 0x34
}
    1af2:	f85d 4b04 	ldr.w	r4, [sp], #4
    1af6:	4770      	bx	lr
    1af8:	200005ec 	.word	0x200005ec

00001afc <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    1afc:	b508      	push	{r3, lr}

	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    1afe:	4903      	ldr	r1, [pc, #12]	; (1b0c <sd_mmc_stack_init+0x10>)
    1b00:	460a      	mov	r2, r1
    1b02:	3104      	adds	r1, #4
    1b04:	4802      	ldr	r0, [pc, #8]	; (1b10 <sd_mmc_stack_init+0x14>)
    1b06:	4b03      	ldr	r3, [pc, #12]	; (1b14 <sd_mmc_stack_init+0x18>)
    1b08:	4798      	blx	r3
    1b0a:	bd08      	pop	{r3, pc}
    1b0c:	20000190 	.word	0x20000190
    1b10:	200006a8 	.word	0x200006a8
    1b14:	00001ae1 	.word	0x00001ae1

00001b18 <SERVO_PWM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b18:	4a08      	ldr	r2, [pc, #32]	; (1b3c <SERVO_PWM_PORT_init+0x24>)
    1b1a:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b1e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b22:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b26:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b2a:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b2e:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b36:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
    1b3a:	4770      	bx	lr
    1b3c:	41008000 	.word	0x41008000

00001b40 <SERVO_PWM_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1b40:	4a04      	ldr	r2, [pc, #16]	; (1b54 <SERVO_PWM_CLOCK_init+0x14>)
    1b42:	6953      	ldr	r3, [r2, #20]
    1b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1b48:	6153      	str	r3, [r2, #20]
    1b4a:	2240      	movs	r2, #64	; 0x40
    1b4c:	4b02      	ldr	r3, [pc, #8]	; (1b58 <SERVO_PWM_CLOCK_init+0x18>)
    1b4e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1b52:	4770      	bx	lr
    1b54:	40000800 	.word	0x40000800
    1b58:	40001c00 	.word	0x40001c00

00001b5c <SERVO_PWM_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1b5c:	4b29      	ldr	r3, [pc, #164]	; (1c04 <SERVO_PWM_init+0xa8>)
    1b5e:	691b      	ldr	r3, [r3, #16]

/* Call in driver_init.c
 * Initial servo position at 0 degrees */
void SERVO_PWM_init(void)
{
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1b60:	f013 0f01 	tst.w	r3, #1
    1b64:	d11f      	bne.n	1ba6 <SERVO_PWM_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b66:	4a27      	ldr	r2, [pc, #156]	; (1c04 <SERVO_PWM_init+0xa8>)
    1b68:	6913      	ldr	r3, [r2, #16]
    1b6a:	f013 0f03 	tst.w	r3, #3
    1b6e:	d1fb      	bne.n	1b68 <SERVO_PWM_init+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b70:	4b24      	ldr	r3, [pc, #144]	; (1c04 <SERVO_PWM_init+0xa8>)
    1b72:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1b74:	f013 0f02 	tst.w	r3, #2
    1b78:	d00d      	beq.n	1b96 <SERVO_PWM_init+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1b7a:	4a22      	ldr	r2, [pc, #136]	; (1c04 <SERVO_PWM_init+0xa8>)
    1b7c:	6813      	ldr	r3, [r2, #0]
    1b7e:	f023 0302 	bic.w	r3, r3, #2
    1b82:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b84:	6913      	ldr	r3, [r2, #16]
    1b86:	f013 0f03 	tst.w	r3, #3
    1b8a:	d1fb      	bne.n	1b84 <SERVO_PWM_init+0x28>
    1b8c:	4a1d      	ldr	r2, [pc, #116]	; (1c04 <SERVO_PWM_init+0xa8>)
    1b8e:	6913      	ldr	r3, [r2, #16]
    1b90:	f013 0f02 	tst.w	r3, #2
    1b94:	d1fb      	bne.n	1b8e <SERVO_PWM_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b96:	2201      	movs	r2, #1
    1b98:	4b1a      	ldr	r3, [pc, #104]	; (1c04 <SERVO_PWM_init+0xa8>)
    1b9a:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b9c:	461a      	mov	r2, r3
    1b9e:	6913      	ldr	r3, [r2, #16]
    1ba0:	f013 0f03 	tst.w	r3, #3
    1ba4:	d1fb      	bne.n	1b9e <SERVO_PWM_init+0x42>
    1ba6:	4a17      	ldr	r2, [pc, #92]	; (1c04 <SERVO_PWM_init+0xa8>)
    1ba8:	6913      	ldr	r3, [r2, #16]
    1baa:	f013 0f01 	tst.w	r3, #1
    1bae:	d1fb      	bne.n	1ba8 <SERVO_PWM_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1bb0:	4a15      	ldr	r2, [pc, #84]	; (1c08 <SERVO_PWM_init+0xac>)
    1bb2:	4b14      	ldr	r3, [pc, #80]	; (1c04 <SERVO_PWM_init+0xa8>)
    1bb4:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bb6:	461a      	mov	r2, r3
    1bb8:	6913      	ldr	r3, [r2, #16]
    1bba:	f013 0f03 	tst.w	r3, #3
    1bbe:	d1fb      	bne.n	1bb8 <SERVO_PWM_init+0x5c>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1bc0:	4b10      	ldr	r3, [pc, #64]	; (1c04 <SERVO_PWM_init+0xa8>)
    1bc2:	2200      	movs	r2, #0
    1bc4:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1bc6:	22ff      	movs	r2, #255	; 0xff
    1bc8:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1bca:	2203      	movs	r2, #3
    1bcc:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1bce:	f640 02e1 	movw	r2, #2273	; 0x8e1
    1bd2:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bd4:	461a      	mov	r2, r3
    1bd6:	6913      	ldr	r3, [r2, #16]
    1bd8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1bdc:	d1fb      	bne.n	1bd6 <SERVO_PWM_init+0x7a>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1bde:	f240 1277 	movw	r2, #375	; 0x177
    1be2:	4b08      	ldr	r3, [pc, #32]	; (1c04 <SERVO_PWM_init+0xa8>)
    1be4:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1be6:	461a      	mov	r2, r3
    1be8:	6913      	ldr	r3, [r2, #16]
    1bea:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1bee:	d1fb      	bne.n	1be8 <SERVO_PWM_init+0x8c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bf0:	4a04      	ldr	r2, [pc, #16]	; (1c04 <SERVO_PWM_init+0xa8>)
    1bf2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1bf4:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1bf8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bfa:	6913      	ldr	r3, [r2, #16]
    1bfc:	f013 0f03 	tst.w	r3, #3
    1c00:	d1fb      	bne.n	1bfa <SERVO_PWM_init+0x9e>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    1c02:	4770      	bx	lr
    1c04:	40003c00 	.word	0x40003c00
    1c08:	12000410 	.word	0x12000410
    1c0c:	00000000 	.word	0x00000000

00001c10 <SERVO_set_angle>:

void SERVO_set_angle(int angle)
{
    1c10:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    1c12:	4b2b      	ldr	r3, [pc, #172]	; (1cc0 <SERVO_set_angle+0xb0>)
    1c14:	4798      	blx	r3
    1c16:	4c2b      	ldr	r4, [pc, #172]	; (1cc4 <SERVO_set_angle+0xb4>)
    1c18:	2200      	movs	r2, #0
    1c1a:	4b2b      	ldr	r3, [pc, #172]	; (1cc8 <SERVO_set_angle+0xb8>)
    1c1c:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    1c1e:	4d2b      	ldr	r5, [pc, #172]	; (1ccc <SERVO_set_angle+0xbc>)
    1c20:	2200      	movs	r2, #0
    1c22:	4b2b      	ldr	r3, [pc, #172]	; (1cd0 <SERVO_set_angle+0xc0>)
    1c24:	47a8      	blx	r5
    1c26:	2200      	movs	r2, #0
    1c28:	4b2a      	ldr	r3, [pc, #168]	; (1cd4 <SERVO_set_angle+0xc4>)
    1c2a:	4e2b      	ldr	r6, [pc, #172]	; (1cd8 <SERVO_set_angle+0xc8>)
    1c2c:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    1c2e:	a320      	add	r3, pc, #128	; (adr r3, 1cb0 <SERVO_set_angle+0xa0>)
    1c30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c34:	47a8      	blx	r5
    1c36:	a320      	add	r3, pc, #128	; (adr r3, 1cb8 <SERVO_set_angle+0xa8>)
    1c38:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c3c:	47a0      	blx	r4
    1c3e:	4b27      	ldr	r3, [pc, #156]	; (1cdc <SERVO_set_angle+0xcc>)
    1c40:	4798      	blx	r3
    1c42:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1c44:	4b26      	ldr	r3, [pc, #152]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c46:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1c48:	f013 0f01 	tst.w	r3, #1
    1c4c:	d117      	bne.n	1c7e <SERVO_set_angle+0x6e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c4e:	4a24      	ldr	r2, [pc, #144]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c50:	6913      	ldr	r3, [r2, #16]
    1c52:	f013 0f03 	tst.w	r3, #3
    1c56:	d1fb      	bne.n	1c50 <SERVO_set_angle+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1c58:	4b21      	ldr	r3, [pc, #132]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c5a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1c5c:	f013 0f02 	tst.w	r3, #2
    1c60:	d00d      	beq.n	1c7e <SERVO_set_angle+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1c62:	4a1f      	ldr	r2, [pc, #124]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c64:	6813      	ldr	r3, [r2, #0]
    1c66:	f023 0302 	bic.w	r3, r3, #2
    1c6a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c6c:	6913      	ldr	r3, [r2, #16]
    1c6e:	f013 0f03 	tst.w	r3, #3
    1c72:	d1fb      	bne.n	1c6c <SERVO_set_angle+0x5c>
    1c74:	4a1a      	ldr	r2, [pc, #104]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c76:	6913      	ldr	r3, [r2, #16]
    1c78:	f013 0f02 	tst.w	r3, #2
    1c7c:	d1fb      	bne.n	1c76 <SERVO_set_angle+0x66>
    1c7e:	4a18      	ldr	r2, [pc, #96]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c80:	6913      	ldr	r3, [r2, #16]
    1c82:	f013 0f01 	tst.w	r3, #1
    1c86:	d1fb      	bne.n	1c80 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1c88:	4b15      	ldr	r3, [pc, #84]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c8a:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c8c:	461a      	mov	r2, r3
    1c8e:	6913      	ldr	r3, [r2, #16]
    1c90:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1c94:	d1fb      	bne.n	1c8e <SERVO_set_angle+0x7e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1c96:	4a12      	ldr	r2, [pc, #72]	; (1ce0 <SERVO_set_angle+0xd0>)
    1c98:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1c9a:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1c9e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ca0:	6913      	ldr	r3, [r2, #16]
    1ca2:	f013 0f03 	tst.w	r3, #3
    1ca6:	d1fb      	bne.n	1ca0 <SERVO_set_angle+0x90>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
}
    1ca8:	bd70      	pop	{r4, r5, r6, pc}
    1caa:	bf00      	nop
    1cac:	f3af 8000 	nop.w
    1cb0:	00000000 	.word	0x00000000
    1cb4:	40a1c200 	.word	0x40a1c200
    1cb8:	00000000 	.word	0x00000000
    1cbc:	40a7ac00 	.word	0x40a7ac00
    1cc0:	0000242d 	.word	0x0000242d
    1cc4:	0000274d 	.word	0x0000274d
    1cc8:	40668000 	.word	0x40668000
    1ccc:	000024f9 	.word	0x000024f9
    1cd0:	409f4000 	.word	0x409f4000
    1cd4:	407f4000 	.word	0x407f4000
    1cd8:	00002195 	.word	0x00002195
    1cdc:	0000291d 	.word	0x0000291d
    1ce0:	40003c00 	.word	0x40003c00

00001ce4 <SERVO_menu>:

void SERVO_menu(void)
{
    1ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce6:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
    1ce8:	2300      	movs	r3, #0
    1cea:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    1cec:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    1cee:	4e1d      	ldr	r6, [pc, #116]	; (1d64 <SERVO_menu+0x80>)
    1cf0:	4d1d      	ldr	r5, [pc, #116]	; (1d68 <SERVO_menu+0x84>)
    1cf2:	4c1e      	ldr	r4, [pc, #120]	; (1d6c <SERVO_menu+0x88>)
    1cf4:	e004      	b.n	1d00 <SERVO_menu+0x1c>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    1cf6:	4b1e      	ldr	r3, [pc, #120]	; (1d70 <SERVO_menu+0x8c>)
    1cf8:	681b      	ldr	r3, [r3, #0]
    1cfa:	6858      	ldr	r0, [r3, #4]
    1cfc:	4b1d      	ldr	r3, [pc, #116]	; (1d74 <SERVO_menu+0x90>)
    1cfe:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    1d00:	4631      	mov	r1, r6
    1d02:	4628      	mov	r0, r5
    1d04:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    1d06:	a901      	add	r1, sp, #4
    1d08:	481b      	ldr	r0, [pc, #108]	; (1d78 <SERVO_menu+0x94>)
    1d0a:	4b1c      	ldr	r3, [pc, #112]	; (1d7c <SERVO_menu+0x98>)
    1d0c:	4798      	blx	r3
    1d0e:	2800      	cmp	r0, #0
    1d10:	d0f1      	beq.n	1cf6 <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1d12:	9901      	ldr	r1, [sp, #4]
    1d14:	481a      	ldr	r0, [pc, #104]	; (1d80 <SERVO_menu+0x9c>)
    1d16:	47a0      	blx	r4
		
		switch (user_selection) {
    1d18:	9b01      	ldr	r3, [sp, #4]
    1d1a:	2b01      	cmp	r3, #1
    1d1c:	d005      	beq.n	1d2a <SERVO_menu+0x46>
    1d1e:	2b02      	cmp	r3, #2
    1d20:	d008      	beq.n	1d34 <SERVO_menu+0x50>
				printf("\r\nSetting servo angle to %0d\r\n", servo_angle);
				SERVO_set_angle(servo_angle);
				break;
			
			default:
				printf("\r\nInvalid option\r\n");
    1d22:	4818      	ldr	r0, [pc, #96]	; (1d84 <SERVO_menu+0xa0>)
    1d24:	4b18      	ldr	r3, [pc, #96]	; (1d88 <SERVO_menu+0xa4>)
    1d26:	4798      	blx	r3
				break;
    1d28:	e7ea      	b.n	1d00 <SERVO_menu+0x1c>
				printf("\r\nReturning to main menu\r\n");
    1d2a:	4818      	ldr	r0, [pc, #96]	; (1d8c <SERVO_menu+0xa8>)
    1d2c:	4b16      	ldr	r3, [pc, #88]	; (1d88 <SERVO_menu+0xa4>)
    1d2e:	4798      	blx	r3
		}
	}
}
    1d30:	b003      	add	sp, #12
    1d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nEnter angle >> ");
    1d34:	4816      	ldr	r0, [pc, #88]	; (1d90 <SERVO_menu+0xac>)
    1d36:	47a0      	blx	r4
				scanf("%d", &servo_angle);
    1d38:	4f0f      	ldr	r7, [pc, #60]	; (1d78 <SERVO_menu+0x94>)
    1d3a:	4669      	mov	r1, sp
    1d3c:	4638      	mov	r0, r7
    1d3e:	4b0f      	ldr	r3, [pc, #60]	; (1d7c <SERVO_menu+0x98>)
    1d40:	4798      	blx	r3
				printf("%d", servo_angle);
    1d42:	9900      	ldr	r1, [sp, #0]
    1d44:	4638      	mov	r0, r7
    1d46:	47a0      	blx	r4
				if (servo_angle < 0 || servo_angle > 180) {
    1d48:	9900      	ldr	r1, [sp, #0]
    1d4a:	29b4      	cmp	r1, #180	; 0xb4
    1d4c:	d903      	bls.n	1d56 <SERVO_menu+0x72>
					printf("\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n");
    1d4e:	4811      	ldr	r0, [pc, #68]	; (1d94 <SERVO_menu+0xb0>)
    1d50:	4b0d      	ldr	r3, [pc, #52]	; (1d88 <SERVO_menu+0xa4>)
    1d52:	4798      	blx	r3
					break;
    1d54:	e7d4      	b.n	1d00 <SERVO_menu+0x1c>
				printf("\r\nSetting servo angle to %0d\r\n", servo_angle);
    1d56:	4810      	ldr	r0, [pc, #64]	; (1d98 <SERVO_menu+0xb4>)
    1d58:	47a0      	blx	r4
				SERVO_set_angle(servo_angle);
    1d5a:	9800      	ldr	r0, [sp, #0]
    1d5c:	4b0f      	ldr	r3, [pc, #60]	; (1d9c <SERVO_menu+0xb8>)
    1d5e:	4798      	blx	r3
				break;
    1d60:	e7ce      	b.n	1d00 <SERVO_menu+0x1c>
    1d62:	bf00      	nop
    1d64:	20000198 	.word	0x20000198
    1d68:	00004d44 	.word	0x00004d44
    1d6c:	00002e61 	.word	0x00002e61
    1d70:	2000026c 	.word	0x2000026c
    1d74:	00002ac1 	.word	0x00002ac1
    1d78:	000051cc 	.word	0x000051cc
    1d7c:	00002f79 	.word	0x00002f79
    1d80:	00004d4c 	.word	0x00004d4c
    1d84:	00004eb4 	.word	0x00004eb4
    1d88:	00002f49 	.word	0x00002f49
    1d8c:	00004d68 	.word	0x00004d68
    1d90:	00004f44 	.word	0x00004f44
    1d94:	00004f58 	.word	0x00004f58
    1d98:	00004f94 	.word	0x00004f94
    1d9c:	00001c11 	.word	0x00001c11

00001da0 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1da4:	4a0b      	ldr	r2, [pc, #44]	; (1dd4 <invert_seep_byte+0x34>)
    1da6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1da8:	f013 0f04 	tst.w	r3, #4
    1dac:	d1fb      	bne.n	1da6 <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
    1dae:	4e0a      	ldr	r6, [pc, #40]	; (1dd8 <invert_seep_byte+0x38>)
    1db0:	6833      	ldr	r3, [r6, #0]
    1db2:	5d1a      	ldrb	r2, [r3, r4]
    1db4:	4d09      	ldr	r5, [pc, #36]	; (1ddc <invert_seep_byte+0x3c>)
    1db6:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
    1db8:	4621      	mov	r1, r4
    1dba:	4809      	ldr	r0, [pc, #36]	; (1de0 <invert_seep_byte+0x40>)
    1dbc:	4b09      	ldr	r3, [pc, #36]	; (1de4 <invert_seep_byte+0x44>)
    1dbe:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
    1dc0:	6832      	ldr	r2, [r6, #0]
    1dc2:	782b      	ldrb	r3, [r5, #0]
    1dc4:	fab3 f383 	clz	r3, r3
    1dc8:	095b      	lsrs	r3, r3, #5
    1dca:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
    1dcc:	4806      	ldr	r0, [pc, #24]	; (1de8 <invert_seep_byte+0x48>)
    1dce:	4b07      	ldr	r3, [pc, #28]	; (1dec <invert_seep_byte+0x4c>)
    1dd0:	4798      	blx	r3
    1dd2:	bd70      	pop	{r4, r5, r6, pc}
    1dd4:	41004000 	.word	0x41004000
    1dd8:	200001e8 	.word	0x200001e8
    1ddc:	200046f8 	.word	0x200046f8
    1de0:	00004fb4 	.word	0x00004fb4
    1de4:	00002e61 	.word	0x00002e61
    1de8:	00004fd8 	.word	0x00004fd8
    1dec:	00002f49 	.word	0x00002f49

00001df0 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
    1df0:	b508      	push	{r3, lr}
    1df2:	4a0b      	ldr	r2, [pc, #44]	; (1e20 <verify_seep_signature+0x30>)
    1df4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1df6:	f013 0f04 	tst.w	r3, #4
    1dfa:	d1fb      	bne.n	1df4 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
    1dfc:	4b08      	ldr	r3, [pc, #32]	; (1e20 <verify_seep_signature+0x30>)
    1dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
    1e00:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    1e04:	d008      	beq.n	1e18 <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
    1e06:	4b07      	ldr	r3, [pc, #28]	; (1e24 <verify_seep_signature+0x34>)
    1e08:	685b      	ldr	r3, [r3, #4]
    1e0a:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
    1e0c:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
    1e10:	bf18      	it	ne
    1e12:	f04f 30ff 	movne.w	r0, #4294967295
    1e16:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
    1e18:	4803      	ldr	r0, [pc, #12]	; (1e28 <verify_seep_signature+0x38>)
    1e1a:	4b04      	ldr	r3, [pc, #16]	; (1e2c <verify_seep_signature+0x3c>)
    1e1c:	4798      	blx	r3
    1e1e:	e7fe      	b.n	1e1e <verify_seep_signature+0x2e>
    1e20:	41004000 	.word	0x41004000
    1e24:	200001e8 	.word	0x200001e8
    1e28:	0000500c 	.word	0x0000500c
    1e2c:	00002f49 	.word	0x00002f49

00001e30 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
    1e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
    1e34:	b1c9      	cbz	r1, 1e6a <print_hex_array+0x3a>
    1e36:	460e      	mov	r6, r1
    1e38:	1e45      	subs	r5, r0, #1
    1e3a:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
    1e3c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1e80 <print_hex_array+0x50>
    1e40:	4f0c      	ldr	r7, [pc, #48]	; (1e74 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
    1e42:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1e7c <print_hex_array+0x4c>
    1e46:	e003      	b.n	1e50 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
    1e48:	3401      	adds	r4, #1
    1e4a:	b2a4      	uxth	r4, r4
    1e4c:	42a6      	cmp	r6, r4
    1e4e:	d00c      	beq.n	1e6a <print_hex_array+0x3a>
		printf("%02d ", p[i]);
    1e50:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    1e54:	4640      	mov	r0, r8
    1e56:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
    1e58:	f014 0f07 	tst.w	r4, #7
    1e5c:	d1f4      	bne.n	1e48 <print_hex_array+0x18>
    1e5e:	2c00      	cmp	r4, #0
    1e60:	d0f2      	beq.n	1e48 <print_hex_array+0x18>
			printf("\r\n");
    1e62:	4648      	mov	r0, r9
    1e64:	4b04      	ldr	r3, [pc, #16]	; (1e78 <print_hex_array+0x48>)
    1e66:	4798      	blx	r3
    1e68:	e7ee      	b.n	1e48 <print_hex_array+0x18>
	}
	printf("\r\n");
    1e6a:	4804      	ldr	r0, [pc, #16]	; (1e7c <print_hex_array+0x4c>)
    1e6c:	4b02      	ldr	r3, [pc, #8]	; (1e78 <print_hex_array+0x48>)
    1e6e:	4798      	blx	r3
    1e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e74:	00002e61 	.word	0x00002e61
    1e78:	00002f49 	.word	0x00002f49
    1e7c:	000051a4 	.word	0x000051a4
    1e80:	00005048 	.word	0x00005048

00001e84 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
    1e84:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
    1e86:	4b19      	ldr	r3, [pc, #100]	; (1eec <EEPROM_init+0x68>)
    1e88:	4798      	blx	r3
    1e8a:	b9d0      	cbnz	r0, 1ec2 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
    1e8c:	4818      	ldr	r0, [pc, #96]	; (1ef0 <EEPROM_init+0x6c>)
    1e8e:	4b19      	ldr	r3, [pc, #100]	; (1ef4 <EEPROM_init+0x70>)
    1e90:	4798      	blx	r3
    1e92:	4b19      	ldr	r3, [pc, #100]	; (1ef8 <EEPROM_init+0x74>)
    1e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
    1e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
    1e98:	f3c2 4202 	ubfx	r2, r2, #16, #3
    1e9c:	f3c1 2103 	ubfx	r1, r1, #8, #4
    1ea0:	4816      	ldr	r0, [pc, #88]	; (1efc <EEPROM_init+0x78>)
    1ea2:	4b17      	ldr	r3, [pc, #92]	; (1f00 <EEPROM_init+0x7c>)
    1ea4:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
    1ea6:	2020      	movs	r0, #32
    1ea8:	4b16      	ldr	r3, [pc, #88]	; (1f04 <EEPROM_init+0x80>)
    1eaa:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
    1eac:	4b16      	ldr	r3, [pc, #88]	; (1f08 <EEPROM_init+0x84>)
    1eae:	681b      	ldr	r3, [r3, #0]
    1eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
    1eb4:	b99b      	cbnz	r3, 1ede <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1eb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1eba:	4b14      	ldr	r3, [pc, #80]	; (1f0c <EEPROM_init+0x88>)
    1ebc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1ec0:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
    1ec2:	4813      	ldr	r0, [pc, #76]	; (1f10 <EEPROM_init+0x8c>)
    1ec4:	4b0b      	ldr	r3, [pc, #44]	; (1ef4 <EEPROM_init+0x70>)
    1ec6:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1ec8:	4a0b      	ldr	r2, [pc, #44]	; (1ef8 <EEPROM_init+0x74>)
    1eca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1ecc:	f013 0f04 	tst.w	r3, #4
    1ed0:	d1fb      	bne.n	1eca <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
    1ed2:	4b0d      	ldr	r3, [pc, #52]	; (1f08 <EEPROM_init+0x84>)
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
    1eda:	601a      	str	r2, [r3, #0]
    1edc:	e7d9      	b.n	1e92 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ede:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1ee2:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <EEPROM_init+0x88>)
    1ee4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1ee8:	bd08      	pop	{r3, pc}
    1eea:	bf00      	nop
    1eec:	00001df1 	.word	0x00001df1
    1ef0:	00005050 	.word	0x00005050
    1ef4:	00002f49 	.word	0x00002f49
    1ef8:	41004000 	.word	0x41004000
    1efc:	000050b0 	.word	0x000050b0
    1f00:	00002e61 	.word	0x00002e61
    1f04:	00001da1 	.word	0x00001da1
    1f08:	200001e8 	.word	0x200001e8
    1f0c:	41008000 	.word	0x41008000
    1f10:	00005074 	.word	0x00005074

00001f14 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
    1f14:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1f16:	4b0a      	ldr	r3, [pc, #40]	; (1f40 <EEPROM_read+0x2c>)
    1f18:	681a      	ldr	r2, [r3, #0]
    1f1a:	3a01      	subs	r2, #1
    1f1c:	4809      	ldr	r0, [pc, #36]	; (1f44 <EEPROM_read+0x30>)
    1f1e:	1e43      	subs	r3, r0, #1
    1f20:	3063      	adds	r0, #99	; 0x63
    1f22:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1f26:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    1f2a:	4283      	cmp	r3, r0
    1f2c:	d1f9      	bne.n	1f22 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1f2e:	2164      	movs	r1, #100	; 0x64
    1f30:	4805      	ldr	r0, [pc, #20]	; (1f48 <EEPROM_read+0x34>)
    1f32:	4b06      	ldr	r3, [pc, #24]	; (1f4c <EEPROM_read+0x38>)
    1f34:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    1f36:	2164      	movs	r1, #100	; 0x64
    1f38:	4802      	ldr	r0, [pc, #8]	; (1f44 <EEPROM_read+0x30>)
    1f3a:	4b05      	ldr	r3, [pc, #20]	; (1f50 <EEPROM_read+0x3c>)
    1f3c:	4798      	blx	r3
    1f3e:	bd08      	pop	{r3, pc}
    1f40:	200001e8 	.word	0x200001e8
    1f44:	20000628 	.word	0x20000628
    1f48:	00005144 	.word	0x00005144
    1f4c:	00002e61 	.word	0x00002e61
    1f50:	00001e31 	.word	0x00001e31

00001f54 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
    1f54:	b530      	push	{r4, r5, lr}
    1f56:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
    1f58:	2300      	movs	r3, #0
    1f5a:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
    1f5c:	ac02      	add	r4, sp, #8
    1f5e:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
    1f62:	481a      	ldr	r0, [pc, #104]	; (1fcc <EEPROM_write+0x78>)
    1f64:	4b1a      	ldr	r3, [pc, #104]	; (1fd0 <EEPROM_write+0x7c>)
    1f66:	4798      	blx	r3
	scanf("%d", &ee_addr);
    1f68:	4621      	mov	r1, r4
    1f6a:	481a      	ldr	r0, [pc, #104]	; (1fd4 <EEPROM_write+0x80>)
    1f6c:	4b1a      	ldr	r3, [pc, #104]	; (1fd8 <EEPROM_write+0x84>)
    1f6e:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
    1f70:	9b00      	ldr	r3, [sp, #0]
    1f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    1f76:	d224      	bcs.n	1fc2 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
    1f78:	4818      	ldr	r0, [pc, #96]	; (1fdc <EEPROM_write+0x88>)
    1f7a:	4d15      	ldr	r5, [pc, #84]	; (1fd0 <EEPROM_write+0x7c>)
    1f7c:	47a8      	blx	r5
	scanf("%d", &ee_data);
    1f7e:	a901      	add	r1, sp, #4
    1f80:	4814      	ldr	r0, [pc, #80]	; (1fd4 <EEPROM_write+0x80>)
    1f82:	4b15      	ldr	r3, [pc, #84]	; (1fd8 <EEPROM_write+0x84>)
    1f84:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
    1f86:	4c16      	ldr	r4, [pc, #88]	; (1fe0 <EEPROM_write+0x8c>)
    1f88:	6822      	ldr	r2, [r4, #0]
    1f8a:	9901      	ldr	r1, [sp, #4]
    1f8c:	9b00      	ldr	r3, [sp, #0]
    1f8e:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
    1f90:	9a00      	ldr	r2, [sp, #0]
    1f92:	9901      	ldr	r1, [sp, #4]
    1f94:	4813      	ldr	r0, [pc, #76]	; (1fe4 <EEPROM_write+0x90>)
    1f96:	47a8      	blx	r5
    1f98:	6822      	ldr	r2, [r4, #0]
    1f9a:	3a01      	subs	r2, #1
    1f9c:	4812      	ldr	r0, [pc, #72]	; (1fe8 <EEPROM_write+0x94>)
    1f9e:	1e43      	subs	r3, r0, #1
    1fa0:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1fa2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1fa6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    1faa:	4283      	cmp	r3, r0
    1fac:	d1f9      	bne.n	1fa2 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1fae:	2164      	movs	r1, #100	; 0x64
    1fb0:	480e      	ldr	r0, [pc, #56]	; (1fec <EEPROM_write+0x98>)
    1fb2:	4b07      	ldr	r3, [pc, #28]	; (1fd0 <EEPROM_write+0x7c>)
    1fb4:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    1fb6:	2164      	movs	r1, #100	; 0x64
    1fb8:	480b      	ldr	r0, [pc, #44]	; (1fe8 <EEPROM_write+0x94>)
    1fba:	4b0d      	ldr	r3, [pc, #52]	; (1ff0 <EEPROM_write+0x9c>)
    1fbc:	4798      	blx	r3
}
    1fbe:	b003      	add	sp, #12
    1fc0:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
    1fc2:	480c      	ldr	r0, [pc, #48]	; (1ff4 <EEPROM_write+0xa0>)
    1fc4:	4b0c      	ldr	r3, [pc, #48]	; (1ff8 <EEPROM_write+0xa4>)
    1fc6:	4798      	blx	r3
    1fc8:	e7f9      	b.n	1fbe <EEPROM_write+0x6a>
    1fca:	bf00      	nop
    1fcc:	0000516c 	.word	0x0000516c
    1fd0:	00002e61 	.word	0x00002e61
    1fd4:	000051cc 	.word	0x000051cc
    1fd8:	00002f79 	.word	0x00002f79
    1fdc:	000051a8 	.word	0x000051a8
    1fe0:	200001e8 	.word	0x200001e8
    1fe4:	000051bc 	.word	0x000051bc
    1fe8:	20000628 	.word	0x20000628
    1fec:	00005144 	.word	0x00005144
    1ff0:	00001e31 	.word	0x00001e31
    1ff4:	00005180 	.word	0x00005180
    1ff8:	00002f49 	.word	0x00002f49

00001ffc <EEPROM_menu>:
{
    1ffc:	b570      	push	{r4, r5, r6, lr}
    1ffe:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
    2000:	2300      	movs	r3, #0
    2002:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
    2004:	4e1b      	ldr	r6, [pc, #108]	; (2074 <EEPROM_menu+0x78>)
    2006:	4d1c      	ldr	r5, [pc, #112]	; (2078 <EEPROM_menu+0x7c>)
    2008:	4c1c      	ldr	r4, [pc, #112]	; (207c <EEPROM_menu+0x80>)
    200a:	4631      	mov	r1, r6
    200c:	4628      	mov	r0, r5
    200e:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    2010:	a901      	add	r1, sp, #4
    2012:	481b      	ldr	r0, [pc, #108]	; (2080 <EEPROM_menu+0x84>)
    2014:	4b1b      	ldr	r3, [pc, #108]	; (2084 <EEPROM_menu+0x88>)
    2016:	4798      	blx	r3
    2018:	b150      	cbz	r0, 2030 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    201a:	9901      	ldr	r1, [sp, #4]
    201c:	481a      	ldr	r0, [pc, #104]	; (2088 <EEPROM_menu+0x8c>)
    201e:	47a0      	blx	r4
		switch (user_selection) {
    2020:	9b01      	ldr	r3, [sp, #4]
    2022:	3b01      	subs	r3, #1
    2024:	2b03      	cmp	r3, #3
    2026:	d821      	bhi.n	206c <EEPROM_menu+0x70>
    2028:	e8df f003 	tbb	[pc, r3]
    202c:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
    2030:	4b16      	ldr	r3, [pc, #88]	; (208c <EEPROM_menu+0x90>)
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	6858      	ldr	r0, [r3, #4]
    2036:	4b16      	ldr	r3, [pc, #88]	; (2090 <EEPROM_menu+0x94>)
    2038:	4798      	blx	r3
    203a:	e7ee      	b.n	201a <EEPROM_menu+0x1e>
    203c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2040:	4914      	ldr	r1, [pc, #80]	; (2094 <EEPROM_menu+0x98>)
    2042:	68ca      	ldr	r2, [r1, #12]
    2044:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <EEPROM_menu+0x9c>)
    204a:	4313      	orrs	r3, r2
    204c:	60cb      	str	r3, [r1, #12]
    204e:	f3bf 8f4f 	dsb	sy
    __NOP();
    2052:	bf00      	nop
    2054:	e7fd      	b.n	2052 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
    2056:	4811      	ldr	r0, [pc, #68]	; (209c <EEPROM_menu+0xa0>)
    2058:	4b11      	ldr	r3, [pc, #68]	; (20a0 <EEPROM_menu+0xa4>)
    205a:	4798      	blx	r3
}
    205c:	b002      	add	sp, #8
    205e:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
    2060:	4b10      	ldr	r3, [pc, #64]	; (20a4 <EEPROM_menu+0xa8>)
    2062:	4798      	blx	r3
				break;
    2064:	e7d1      	b.n	200a <EEPROM_menu+0xe>
				EEPROM_write();
    2066:	4b10      	ldr	r3, [pc, #64]	; (20a8 <EEPROM_menu+0xac>)
    2068:	4798      	blx	r3
				break;
    206a:	e7ce      	b.n	200a <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
    206c:	480f      	ldr	r0, [pc, #60]	; (20ac <EEPROM_menu+0xb0>)
    206e:	4b0c      	ldr	r3, [pc, #48]	; (20a0 <EEPROM_menu+0xa4>)
    2070:	4798      	blx	r3
				break;
    2072:	e7ca      	b.n	200a <EEPROM_menu+0xe>
    2074:	200001f0 	.word	0x200001f0
    2078:	00004d44 	.word	0x00004d44
    207c:	00002e61 	.word	0x00002e61
    2080:	000051cc 	.word	0x000051cc
    2084:	00002f79 	.word	0x00002f79
    2088:	00004d4c 	.word	0x00004d4c
    208c:	2000026c 	.word	0x2000026c
    2090:	00002ac1 	.word	0x00002ac1
    2094:	e000ed00 	.word	0xe000ed00
    2098:	05fa0004 	.word	0x05fa0004
    209c:	00004d68 	.word	0x00004d68
    20a0:	00002f49 	.word	0x00002f49
    20a4:	00001f15 	.word	0x00001f15
    20a8:	00001f55 	.word	0x00001f55
    20ac:	00004eb4 	.word	0x00004eb4

000020b0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    20b0:	b940      	cbnz	r0, 20c4 <_read+0x14>
{
    20b2:	b508      	push	{r3, lr}
    20b4:	460b      	mov	r3, r1
    20b6:	4611      	mov	r1, r2
    20b8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    20ba:	4b04      	ldr	r3, [pc, #16]	; (20cc <_read+0x1c>)
    20bc:	4798      	blx	r3
    20be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    20c2:	bd08      	pop	{r3, pc}
		return -1;
    20c4:	f04f 30ff 	mov.w	r0, #4294967295
    20c8:	4770      	bx	lr
    20ca:	bf00      	nop
    20cc:	00002121 	.word	0x00002121

000020d0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    20d0:	3801      	subs	r0, #1
    20d2:	2802      	cmp	r0, #2
    20d4:	d808      	bhi.n	20e8 <_write+0x18>
{
    20d6:	b508      	push	{r3, lr}
    20d8:	460b      	mov	r3, r1
    20da:	4611      	mov	r1, r2
    20dc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    20de:	4b04      	ldr	r3, [pc, #16]	; (20f0 <_write+0x20>)
    20e0:	4798      	blx	r3
    20e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    20e6:	bd08      	pop	{r3, pc}
		return -1;
    20e8:	f04f 30ff 	mov.w	r0, #4294967295
    20ec:	4770      	bx	lr
    20ee:	bf00      	nop
    20f0:	00002145 	.word	0x00002145

000020f4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    20f4:	b570      	push	{r4, r5, r6, lr}
    20f6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    20f8:	4d06      	ldr	r5, [pc, #24]	; (2114 <stdio_io_init+0x20>)
    20fa:	682b      	ldr	r3, [r5, #0]
    20fc:	2100      	movs	r1, #0
    20fe:	6898      	ldr	r0, [r3, #8]
    2100:	4c05      	ldr	r4, [pc, #20]	; (2118 <stdio_io_init+0x24>)
    2102:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2104:	682b      	ldr	r3, [r5, #0]
    2106:	2100      	movs	r1, #0
    2108:	6858      	ldr	r0, [r3, #4]
    210a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    210c:	4b03      	ldr	r3, [pc, #12]	; (211c <stdio_io_init+0x28>)
    210e:	601e      	str	r6, [r3, #0]
    2110:	bd70      	pop	{r4, r5, r6, pc}
    2112:	bf00      	nop
    2114:	2000026c 	.word	0x2000026c
    2118:	00002fa9 	.word	0x00002fa9
    211c:	2000068c 	.word	0x2000068c

00002120 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2120:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    2122:	4b06      	ldr	r3, [pc, #24]	; (213c <stdio_io_read+0x1c>)
    2124:	681b      	ldr	r3, [r3, #0]
    2126:	b133      	cbz	r3, 2136 <stdio_io_read+0x16>
    2128:	460a      	mov	r2, r1
    212a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    212c:	b292      	uxth	r2, r2
    212e:	4618      	mov	r0, r3
    2130:	4b03      	ldr	r3, [pc, #12]	; (2140 <stdio_io_read+0x20>)
    2132:	4798      	blx	r3
    2134:	bd08      	pop	{r3, pc}
		return 0;
    2136:	2000      	movs	r0, #0
}
    2138:	bd08      	pop	{r3, pc}
    213a:	bf00      	nop
    213c:	2000068c 	.word	0x2000068c
    2140:	0000072d 	.word	0x0000072d

00002144 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2144:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    2146:	4b06      	ldr	r3, [pc, #24]	; (2160 <stdio_io_write+0x1c>)
    2148:	681b      	ldr	r3, [r3, #0]
    214a:	b133      	cbz	r3, 215a <stdio_io_write+0x16>
    214c:	460a      	mov	r2, r1
    214e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    2150:	b292      	uxth	r2, r2
    2152:	4618      	mov	r0, r3
    2154:	4b03      	ldr	r3, [pc, #12]	; (2164 <stdio_io_write+0x20>)
    2156:	4798      	blx	r3
    2158:	bd08      	pop	{r3, pc}
		return 0;
    215a:	2000      	movs	r0, #0
}
    215c:	bd08      	pop	{r3, pc}
    215e:	bf00      	nop
    2160:	2000068c 	.word	0x2000068c
    2164:	000006fd 	.word	0x000006fd

00002168 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2168:	b510      	push	{r4, lr}

	usart_sync_enable(&STDIO_IO);
    216a:	4c04      	ldr	r4, [pc, #16]	; (217c <stdio_redirect_init+0x14>)
    216c:	4620      	mov	r0, r4
    216e:	4b04      	ldr	r3, [pc, #16]	; (2180 <stdio_redirect_init+0x18>)
    2170:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    2172:	4620      	mov	r0, r4
    2174:	4b03      	ldr	r3, [pc, #12]	; (2184 <stdio_redirect_init+0x1c>)
    2176:	4798      	blx	r3
    2178:	bd10      	pop	{r4, pc}
    217a:	bf00      	nop
    217c:	20000698 	.word	0x20000698
    2180:	000008a9 	.word	0x000008a9
    2184:	000020f5 	.word	0x000020f5

00002188 <__aeabi_drsub>:
    2188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    218c:	e002      	b.n	2194 <__adddf3>
    218e:	bf00      	nop

00002190 <__aeabi_dsub>:
    2190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00002194 <__adddf3>:
    2194:	b530      	push	{r4, r5, lr}
    2196:	ea4f 0441 	mov.w	r4, r1, lsl #1
    219a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    219e:	ea94 0f05 	teq	r4, r5
    21a2:	bf08      	it	eq
    21a4:	ea90 0f02 	teqeq	r0, r2
    21a8:	bf1f      	itttt	ne
    21aa:	ea54 0c00 	orrsne.w	ip, r4, r0
    21ae:	ea55 0c02 	orrsne.w	ip, r5, r2
    21b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    21b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    21ba:	f000 80e2 	beq.w	2382 <__adddf3+0x1ee>
    21be:	ea4f 5454 	mov.w	r4, r4, lsr #21
    21c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    21c6:	bfb8      	it	lt
    21c8:	426d      	neglt	r5, r5
    21ca:	dd0c      	ble.n	21e6 <__adddf3+0x52>
    21cc:	442c      	add	r4, r5
    21ce:	ea80 0202 	eor.w	r2, r0, r2
    21d2:	ea81 0303 	eor.w	r3, r1, r3
    21d6:	ea82 0000 	eor.w	r0, r2, r0
    21da:	ea83 0101 	eor.w	r1, r3, r1
    21de:	ea80 0202 	eor.w	r2, r0, r2
    21e2:	ea81 0303 	eor.w	r3, r1, r3
    21e6:	2d36      	cmp	r5, #54	; 0x36
    21e8:	bf88      	it	hi
    21ea:	bd30      	pophi	{r4, r5, pc}
    21ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    21f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    21f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    21f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    21fc:	d002      	beq.n	2204 <__adddf3+0x70>
    21fe:	4240      	negs	r0, r0
    2200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    2208:	ea4f 3303 	mov.w	r3, r3, lsl #12
    220c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    2210:	d002      	beq.n	2218 <__adddf3+0x84>
    2212:	4252      	negs	r2, r2
    2214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2218:	ea94 0f05 	teq	r4, r5
    221c:	f000 80a7 	beq.w	236e <__adddf3+0x1da>
    2220:	f1a4 0401 	sub.w	r4, r4, #1
    2224:	f1d5 0e20 	rsbs	lr, r5, #32
    2228:	db0d      	blt.n	2246 <__adddf3+0xb2>
    222a:	fa02 fc0e 	lsl.w	ip, r2, lr
    222e:	fa22 f205 	lsr.w	r2, r2, r5
    2232:	1880      	adds	r0, r0, r2
    2234:	f141 0100 	adc.w	r1, r1, #0
    2238:	fa03 f20e 	lsl.w	r2, r3, lr
    223c:	1880      	adds	r0, r0, r2
    223e:	fa43 f305 	asr.w	r3, r3, r5
    2242:	4159      	adcs	r1, r3
    2244:	e00e      	b.n	2264 <__adddf3+0xd0>
    2246:	f1a5 0520 	sub.w	r5, r5, #32
    224a:	f10e 0e20 	add.w	lr, lr, #32
    224e:	2a01      	cmp	r2, #1
    2250:	fa03 fc0e 	lsl.w	ip, r3, lr
    2254:	bf28      	it	cs
    2256:	f04c 0c02 	orrcs.w	ip, ip, #2
    225a:	fa43 f305 	asr.w	r3, r3, r5
    225e:	18c0      	adds	r0, r0, r3
    2260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    2264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2268:	d507      	bpl.n	227a <__adddf3+0xe6>
    226a:	f04f 0e00 	mov.w	lr, #0
    226e:	f1dc 0c00 	rsbs	ip, ip, #0
    2272:	eb7e 0000 	sbcs.w	r0, lr, r0
    2276:	eb6e 0101 	sbc.w	r1, lr, r1
    227a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    227e:	d31b      	bcc.n	22b8 <__adddf3+0x124>
    2280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    2284:	d30c      	bcc.n	22a0 <__adddf3+0x10c>
    2286:	0849      	lsrs	r1, r1, #1
    2288:	ea5f 0030 	movs.w	r0, r0, rrx
    228c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    2290:	f104 0401 	add.w	r4, r4, #1
    2294:	ea4f 5244 	mov.w	r2, r4, lsl #21
    2298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    229c:	f080 809a 	bcs.w	23d4 <__adddf3+0x240>
    22a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    22a4:	bf08      	it	eq
    22a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    22aa:	f150 0000 	adcs.w	r0, r0, #0
    22ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    22b2:	ea41 0105 	orr.w	r1, r1, r5
    22b6:	bd30      	pop	{r4, r5, pc}
    22b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    22bc:	4140      	adcs	r0, r0
    22be:	eb41 0101 	adc.w	r1, r1, r1
    22c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    22c6:	f1a4 0401 	sub.w	r4, r4, #1
    22ca:	d1e9      	bne.n	22a0 <__adddf3+0x10c>
    22cc:	f091 0f00 	teq	r1, #0
    22d0:	bf04      	itt	eq
    22d2:	4601      	moveq	r1, r0
    22d4:	2000      	moveq	r0, #0
    22d6:	fab1 f381 	clz	r3, r1
    22da:	bf08      	it	eq
    22dc:	3320      	addeq	r3, #32
    22de:	f1a3 030b 	sub.w	r3, r3, #11
    22e2:	f1b3 0220 	subs.w	r2, r3, #32
    22e6:	da0c      	bge.n	2302 <__adddf3+0x16e>
    22e8:	320c      	adds	r2, #12
    22ea:	dd08      	ble.n	22fe <__adddf3+0x16a>
    22ec:	f102 0c14 	add.w	ip, r2, #20
    22f0:	f1c2 020c 	rsb	r2, r2, #12
    22f4:	fa01 f00c 	lsl.w	r0, r1, ip
    22f8:	fa21 f102 	lsr.w	r1, r1, r2
    22fc:	e00c      	b.n	2318 <__adddf3+0x184>
    22fe:	f102 0214 	add.w	r2, r2, #20
    2302:	bfd8      	it	le
    2304:	f1c2 0c20 	rsble	ip, r2, #32
    2308:	fa01 f102 	lsl.w	r1, r1, r2
    230c:	fa20 fc0c 	lsr.w	ip, r0, ip
    2310:	bfdc      	itt	le
    2312:	ea41 010c 	orrle.w	r1, r1, ip
    2316:	4090      	lslle	r0, r2
    2318:	1ae4      	subs	r4, r4, r3
    231a:	bfa2      	ittt	ge
    231c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    2320:	4329      	orrge	r1, r5
    2322:	bd30      	popge	{r4, r5, pc}
    2324:	ea6f 0404 	mvn.w	r4, r4
    2328:	3c1f      	subs	r4, #31
    232a:	da1c      	bge.n	2366 <__adddf3+0x1d2>
    232c:	340c      	adds	r4, #12
    232e:	dc0e      	bgt.n	234e <__adddf3+0x1ba>
    2330:	f104 0414 	add.w	r4, r4, #20
    2334:	f1c4 0220 	rsb	r2, r4, #32
    2338:	fa20 f004 	lsr.w	r0, r0, r4
    233c:	fa01 f302 	lsl.w	r3, r1, r2
    2340:	ea40 0003 	orr.w	r0, r0, r3
    2344:	fa21 f304 	lsr.w	r3, r1, r4
    2348:	ea45 0103 	orr.w	r1, r5, r3
    234c:	bd30      	pop	{r4, r5, pc}
    234e:	f1c4 040c 	rsb	r4, r4, #12
    2352:	f1c4 0220 	rsb	r2, r4, #32
    2356:	fa20 f002 	lsr.w	r0, r0, r2
    235a:	fa01 f304 	lsl.w	r3, r1, r4
    235e:	ea40 0003 	orr.w	r0, r0, r3
    2362:	4629      	mov	r1, r5
    2364:	bd30      	pop	{r4, r5, pc}
    2366:	fa21 f004 	lsr.w	r0, r1, r4
    236a:	4629      	mov	r1, r5
    236c:	bd30      	pop	{r4, r5, pc}
    236e:	f094 0f00 	teq	r4, #0
    2372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    2376:	bf06      	itte	eq
    2378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    237c:	3401      	addeq	r4, #1
    237e:	3d01      	subne	r5, #1
    2380:	e74e      	b.n	2220 <__adddf3+0x8c>
    2382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    2386:	bf18      	it	ne
    2388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    238c:	d029      	beq.n	23e2 <__adddf3+0x24e>
    238e:	ea94 0f05 	teq	r4, r5
    2392:	bf08      	it	eq
    2394:	ea90 0f02 	teqeq	r0, r2
    2398:	d005      	beq.n	23a6 <__adddf3+0x212>
    239a:	ea54 0c00 	orrs.w	ip, r4, r0
    239e:	bf04      	itt	eq
    23a0:	4619      	moveq	r1, r3
    23a2:	4610      	moveq	r0, r2
    23a4:	bd30      	pop	{r4, r5, pc}
    23a6:	ea91 0f03 	teq	r1, r3
    23aa:	bf1e      	ittt	ne
    23ac:	2100      	movne	r1, #0
    23ae:	2000      	movne	r0, #0
    23b0:	bd30      	popne	{r4, r5, pc}
    23b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    23b6:	d105      	bne.n	23c4 <__adddf3+0x230>
    23b8:	0040      	lsls	r0, r0, #1
    23ba:	4149      	adcs	r1, r1
    23bc:	bf28      	it	cs
    23be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    23c2:	bd30      	pop	{r4, r5, pc}
    23c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    23c8:	bf3c      	itt	cc
    23ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    23ce:	bd30      	popcc	{r4, r5, pc}
    23d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    23d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    23d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    23dc:	f04f 0000 	mov.w	r0, #0
    23e0:	bd30      	pop	{r4, r5, pc}
    23e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    23e6:	bf1a      	itte	ne
    23e8:	4619      	movne	r1, r3
    23ea:	4610      	movne	r0, r2
    23ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    23f0:	bf1c      	itt	ne
    23f2:	460b      	movne	r3, r1
    23f4:	4602      	movne	r2, r0
    23f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    23fa:	bf06      	itte	eq
    23fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    2400:	ea91 0f03 	teqeq	r1, r3
    2404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    2408:	bd30      	pop	{r4, r5, pc}
    240a:	bf00      	nop

0000240c <__aeabi_ui2d>:
    240c:	f090 0f00 	teq	r0, #0
    2410:	bf04      	itt	eq
    2412:	2100      	moveq	r1, #0
    2414:	4770      	bxeq	lr
    2416:	b530      	push	{r4, r5, lr}
    2418:	f44f 6480 	mov.w	r4, #1024	; 0x400
    241c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2420:	f04f 0500 	mov.w	r5, #0
    2424:	f04f 0100 	mov.w	r1, #0
    2428:	e750      	b.n	22cc <__adddf3+0x138>
    242a:	bf00      	nop

0000242c <__aeabi_i2d>:
    242c:	f090 0f00 	teq	r0, #0
    2430:	bf04      	itt	eq
    2432:	2100      	moveq	r1, #0
    2434:	4770      	bxeq	lr
    2436:	b530      	push	{r4, r5, lr}
    2438:	f44f 6480 	mov.w	r4, #1024	; 0x400
    243c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    2444:	bf48      	it	mi
    2446:	4240      	negmi	r0, r0
    2448:	f04f 0100 	mov.w	r1, #0
    244c:	e73e      	b.n	22cc <__adddf3+0x138>
    244e:	bf00      	nop

00002450 <__aeabi_f2d>:
    2450:	0042      	lsls	r2, r0, #1
    2452:	ea4f 01e2 	mov.w	r1, r2, asr #3
    2456:	ea4f 0131 	mov.w	r1, r1, rrx
    245a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    245e:	bf1f      	itttt	ne
    2460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    2464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    246c:	4770      	bxne	lr
    246e:	f092 0f00 	teq	r2, #0
    2472:	bf14      	ite	ne
    2474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2478:	4770      	bxeq	lr
    247a:	b530      	push	{r4, r5, lr}
    247c:	f44f 7460 	mov.w	r4, #896	; 0x380
    2480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2488:	e720      	b.n	22cc <__adddf3+0x138>
    248a:	bf00      	nop

0000248c <__aeabi_ul2d>:
    248c:	ea50 0201 	orrs.w	r2, r0, r1
    2490:	bf08      	it	eq
    2492:	4770      	bxeq	lr
    2494:	b530      	push	{r4, r5, lr}
    2496:	f04f 0500 	mov.w	r5, #0
    249a:	e00a      	b.n	24b2 <__aeabi_l2d+0x16>

0000249c <__aeabi_l2d>:
    249c:	ea50 0201 	orrs.w	r2, r0, r1
    24a0:	bf08      	it	eq
    24a2:	4770      	bxeq	lr
    24a4:	b530      	push	{r4, r5, lr}
    24a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    24aa:	d502      	bpl.n	24b2 <__aeabi_l2d+0x16>
    24ac:	4240      	negs	r0, r0
    24ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    24b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    24b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    24ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    24be:	f43f aedc 	beq.w	227a <__adddf3+0xe6>
    24c2:	f04f 0203 	mov.w	r2, #3
    24c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    24ca:	bf18      	it	ne
    24cc:	3203      	addne	r2, #3
    24ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    24d2:	bf18      	it	ne
    24d4:	3203      	addne	r2, #3
    24d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    24da:	f1c2 0320 	rsb	r3, r2, #32
    24de:	fa00 fc03 	lsl.w	ip, r0, r3
    24e2:	fa20 f002 	lsr.w	r0, r0, r2
    24e6:	fa01 fe03 	lsl.w	lr, r1, r3
    24ea:	ea40 000e 	orr.w	r0, r0, lr
    24ee:	fa21 f102 	lsr.w	r1, r1, r2
    24f2:	4414      	add	r4, r2
    24f4:	e6c1      	b.n	227a <__adddf3+0xe6>
    24f6:	bf00      	nop

000024f8 <__aeabi_dmul>:
    24f8:	b570      	push	{r4, r5, r6, lr}
    24fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    24fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    2506:	bf1d      	ittte	ne
    2508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    250c:	ea94 0f0c 	teqne	r4, ip
    2510:	ea95 0f0c 	teqne	r5, ip
    2514:	f000 f8de 	bleq	26d4 <__aeabi_dmul+0x1dc>
    2518:	442c      	add	r4, r5
    251a:	ea81 0603 	eor.w	r6, r1, r3
    251e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    2522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    2526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    252a:	bf18      	it	ne
    252c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    2530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2538:	d038      	beq.n	25ac <__aeabi_dmul+0xb4>
    253a:	fba0 ce02 	umull	ip, lr, r0, r2
    253e:	f04f 0500 	mov.w	r5, #0
    2542:	fbe1 e502 	umlal	lr, r5, r1, r2
    2546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    254a:	fbe0 e503 	umlal	lr, r5, r0, r3
    254e:	f04f 0600 	mov.w	r6, #0
    2552:	fbe1 5603 	umlal	r5, r6, r1, r3
    2556:	f09c 0f00 	teq	ip, #0
    255a:	bf18      	it	ne
    255c:	f04e 0e01 	orrne.w	lr, lr, #1
    2560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    2564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    2568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    256c:	d204      	bcs.n	2578 <__aeabi_dmul+0x80>
    256e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    2572:	416d      	adcs	r5, r5
    2574:	eb46 0606 	adc.w	r6, r6, r6
    2578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    257c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    2580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    2584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    2588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    258c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    2590:	bf88      	it	hi
    2592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    2596:	d81e      	bhi.n	25d6 <__aeabi_dmul+0xde>
    2598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    259c:	bf08      	it	eq
    259e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    25a2:	f150 0000 	adcs.w	r0, r0, #0
    25a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    25aa:	bd70      	pop	{r4, r5, r6, pc}
    25ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    25b0:	ea46 0101 	orr.w	r1, r6, r1
    25b4:	ea40 0002 	orr.w	r0, r0, r2
    25b8:	ea81 0103 	eor.w	r1, r1, r3
    25bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    25c0:	bfc2      	ittt	gt
    25c2:	ebd4 050c 	rsbsgt	r5, r4, ip
    25c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    25ca:	bd70      	popgt	{r4, r5, r6, pc}
    25cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    25d0:	f04f 0e00 	mov.w	lr, #0
    25d4:	3c01      	subs	r4, #1
    25d6:	f300 80ab 	bgt.w	2730 <__aeabi_dmul+0x238>
    25da:	f114 0f36 	cmn.w	r4, #54	; 0x36
    25de:	bfde      	ittt	le
    25e0:	2000      	movle	r0, #0
    25e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    25e6:	bd70      	pople	{r4, r5, r6, pc}
    25e8:	f1c4 0400 	rsb	r4, r4, #0
    25ec:	3c20      	subs	r4, #32
    25ee:	da35      	bge.n	265c <__aeabi_dmul+0x164>
    25f0:	340c      	adds	r4, #12
    25f2:	dc1b      	bgt.n	262c <__aeabi_dmul+0x134>
    25f4:	f104 0414 	add.w	r4, r4, #20
    25f8:	f1c4 0520 	rsb	r5, r4, #32
    25fc:	fa00 f305 	lsl.w	r3, r0, r5
    2600:	fa20 f004 	lsr.w	r0, r0, r4
    2604:	fa01 f205 	lsl.w	r2, r1, r5
    2608:	ea40 0002 	orr.w	r0, r0, r2
    260c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    2610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    2618:	fa21 f604 	lsr.w	r6, r1, r4
    261c:	eb42 0106 	adc.w	r1, r2, r6
    2620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2624:	bf08      	it	eq
    2626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	f1c4 040c 	rsb	r4, r4, #12
    2630:	f1c4 0520 	rsb	r5, r4, #32
    2634:	fa00 f304 	lsl.w	r3, r0, r4
    2638:	fa20 f005 	lsr.w	r0, r0, r5
    263c:	fa01 f204 	lsl.w	r2, r1, r4
    2640:	ea40 0002 	orr.w	r0, r0, r2
    2644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    264c:	f141 0100 	adc.w	r1, r1, #0
    2650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2654:	bf08      	it	eq
    2656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    265a:	bd70      	pop	{r4, r5, r6, pc}
    265c:	f1c4 0520 	rsb	r5, r4, #32
    2660:	fa00 f205 	lsl.w	r2, r0, r5
    2664:	ea4e 0e02 	orr.w	lr, lr, r2
    2668:	fa20 f304 	lsr.w	r3, r0, r4
    266c:	fa01 f205 	lsl.w	r2, r1, r5
    2670:	ea43 0302 	orr.w	r3, r3, r2
    2674:	fa21 f004 	lsr.w	r0, r1, r4
    2678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    267c:	fa21 f204 	lsr.w	r2, r1, r4
    2680:	ea20 0002 	bic.w	r0, r0, r2
    2684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    2688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    268c:	bf08      	it	eq
    268e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    2692:	bd70      	pop	{r4, r5, r6, pc}
    2694:	f094 0f00 	teq	r4, #0
    2698:	d10f      	bne.n	26ba <__aeabi_dmul+0x1c2>
    269a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    269e:	0040      	lsls	r0, r0, #1
    26a0:	eb41 0101 	adc.w	r1, r1, r1
    26a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    26a8:	bf08      	it	eq
    26aa:	3c01      	subeq	r4, #1
    26ac:	d0f7      	beq.n	269e <__aeabi_dmul+0x1a6>
    26ae:	ea41 0106 	orr.w	r1, r1, r6
    26b2:	f095 0f00 	teq	r5, #0
    26b6:	bf18      	it	ne
    26b8:	4770      	bxne	lr
    26ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    26be:	0052      	lsls	r2, r2, #1
    26c0:	eb43 0303 	adc.w	r3, r3, r3
    26c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    26c8:	bf08      	it	eq
    26ca:	3d01      	subeq	r5, #1
    26cc:	d0f7      	beq.n	26be <__aeabi_dmul+0x1c6>
    26ce:	ea43 0306 	orr.w	r3, r3, r6
    26d2:	4770      	bx	lr
    26d4:	ea94 0f0c 	teq	r4, ip
    26d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    26dc:	bf18      	it	ne
    26de:	ea95 0f0c 	teqne	r5, ip
    26e2:	d00c      	beq.n	26fe <__aeabi_dmul+0x206>
    26e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    26e8:	bf18      	it	ne
    26ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    26ee:	d1d1      	bne.n	2694 <__aeabi_dmul+0x19c>
    26f0:	ea81 0103 	eor.w	r1, r1, r3
    26f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    26f8:	f04f 0000 	mov.w	r0, #0
    26fc:	bd70      	pop	{r4, r5, r6, pc}
    26fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2702:	bf06      	itte	eq
    2704:	4610      	moveq	r0, r2
    2706:	4619      	moveq	r1, r3
    2708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    270c:	d019      	beq.n	2742 <__aeabi_dmul+0x24a>
    270e:	ea94 0f0c 	teq	r4, ip
    2712:	d102      	bne.n	271a <__aeabi_dmul+0x222>
    2714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    2718:	d113      	bne.n	2742 <__aeabi_dmul+0x24a>
    271a:	ea95 0f0c 	teq	r5, ip
    271e:	d105      	bne.n	272c <__aeabi_dmul+0x234>
    2720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    2724:	bf1c      	itt	ne
    2726:	4610      	movne	r0, r2
    2728:	4619      	movne	r1, r3
    272a:	d10a      	bne.n	2742 <__aeabi_dmul+0x24a>
    272c:	ea81 0103 	eor.w	r1, r1, r3
    2730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    273c:	f04f 0000 	mov.w	r0, #0
    2740:	bd70      	pop	{r4, r5, r6, pc}
    2742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    274a:	bd70      	pop	{r4, r5, r6, pc}

0000274c <__aeabi_ddiv>:
    274c:	b570      	push	{r4, r5, r6, lr}
    274e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    275a:	bf1d      	ittte	ne
    275c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    2760:	ea94 0f0c 	teqne	r4, ip
    2764:	ea95 0f0c 	teqne	r5, ip
    2768:	f000 f8a7 	bleq	28ba <__aeabi_ddiv+0x16e>
    276c:	eba4 0405 	sub.w	r4, r4, r5
    2770:	ea81 0e03 	eor.w	lr, r1, r3
    2774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    2778:	ea4f 3101 	mov.w	r1, r1, lsl #12
    277c:	f000 8088 	beq.w	2890 <__aeabi_ddiv+0x144>
    2780:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    2788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    278c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    2790:	ea4f 2202 	mov.w	r2, r2, lsl #8
    2794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    2798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    279c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    27a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    27a4:	429d      	cmp	r5, r3
    27a6:	bf08      	it	eq
    27a8:	4296      	cmpeq	r6, r2
    27aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    27ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
    27b2:	d202      	bcs.n	27ba <__aeabi_ddiv+0x6e>
    27b4:	085b      	lsrs	r3, r3, #1
    27b6:	ea4f 0232 	mov.w	r2, r2, rrx
    27ba:	1ab6      	subs	r6, r6, r2
    27bc:	eb65 0503 	sbc.w	r5, r5, r3
    27c0:	085b      	lsrs	r3, r3, #1
    27c2:	ea4f 0232 	mov.w	r2, r2, rrx
    27c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    27ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    27ce:	ebb6 0e02 	subs.w	lr, r6, r2
    27d2:	eb75 0e03 	sbcs.w	lr, r5, r3
    27d6:	bf22      	ittt	cs
    27d8:	1ab6      	subcs	r6, r6, r2
    27da:	4675      	movcs	r5, lr
    27dc:	ea40 000c 	orrcs.w	r0, r0, ip
    27e0:	085b      	lsrs	r3, r3, #1
    27e2:	ea4f 0232 	mov.w	r2, r2, rrx
    27e6:	ebb6 0e02 	subs.w	lr, r6, r2
    27ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    27ee:	bf22      	ittt	cs
    27f0:	1ab6      	subcs	r6, r6, r2
    27f2:	4675      	movcs	r5, lr
    27f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    27f8:	085b      	lsrs	r3, r3, #1
    27fa:	ea4f 0232 	mov.w	r2, r2, rrx
    27fe:	ebb6 0e02 	subs.w	lr, r6, r2
    2802:	eb75 0e03 	sbcs.w	lr, r5, r3
    2806:	bf22      	ittt	cs
    2808:	1ab6      	subcs	r6, r6, r2
    280a:	4675      	movcs	r5, lr
    280c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    2810:	085b      	lsrs	r3, r3, #1
    2812:	ea4f 0232 	mov.w	r2, r2, rrx
    2816:	ebb6 0e02 	subs.w	lr, r6, r2
    281a:	eb75 0e03 	sbcs.w	lr, r5, r3
    281e:	bf22      	ittt	cs
    2820:	1ab6      	subcs	r6, r6, r2
    2822:	4675      	movcs	r5, lr
    2824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    2828:	ea55 0e06 	orrs.w	lr, r5, r6
    282c:	d018      	beq.n	2860 <__aeabi_ddiv+0x114>
    282e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    2832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    2836:	ea4f 1606 	mov.w	r6, r6, lsl #4
    283a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    283e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    2842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    2846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    284a:	d1c0      	bne.n	27ce <__aeabi_ddiv+0x82>
    284c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2850:	d10b      	bne.n	286a <__aeabi_ddiv+0x11e>
    2852:	ea41 0100 	orr.w	r1, r1, r0
    2856:	f04f 0000 	mov.w	r0, #0
    285a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    285e:	e7b6      	b.n	27ce <__aeabi_ddiv+0x82>
    2860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2864:	bf04      	itt	eq
    2866:	4301      	orreq	r1, r0
    2868:	2000      	moveq	r0, #0
    286a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    286e:	bf88      	it	hi
    2870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    2874:	f63f aeaf 	bhi.w	25d6 <__aeabi_dmul+0xde>
    2878:	ebb5 0c03 	subs.w	ip, r5, r3
    287c:	bf04      	itt	eq
    287e:	ebb6 0c02 	subseq.w	ip, r6, r2
    2882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    2886:	f150 0000 	adcs.w	r0, r0, #0
    288a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    288e:	bd70      	pop	{r4, r5, r6, pc}
    2890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    2894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    2898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    289c:	bfc2      	ittt	gt
    289e:	ebd4 050c 	rsbsgt	r5, r4, ip
    28a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    28a6:	bd70      	popgt	{r4, r5, r6, pc}
    28a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    28ac:	f04f 0e00 	mov.w	lr, #0
    28b0:	3c01      	subs	r4, #1
    28b2:	e690      	b.n	25d6 <__aeabi_dmul+0xde>
    28b4:	ea45 0e06 	orr.w	lr, r5, r6
    28b8:	e68d      	b.n	25d6 <__aeabi_dmul+0xde>
    28ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    28be:	ea94 0f0c 	teq	r4, ip
    28c2:	bf08      	it	eq
    28c4:	ea95 0f0c 	teqeq	r5, ip
    28c8:	f43f af3b 	beq.w	2742 <__aeabi_dmul+0x24a>
    28cc:	ea94 0f0c 	teq	r4, ip
    28d0:	d10a      	bne.n	28e8 <__aeabi_ddiv+0x19c>
    28d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    28d6:	f47f af34 	bne.w	2742 <__aeabi_dmul+0x24a>
    28da:	ea95 0f0c 	teq	r5, ip
    28de:	f47f af25 	bne.w	272c <__aeabi_dmul+0x234>
    28e2:	4610      	mov	r0, r2
    28e4:	4619      	mov	r1, r3
    28e6:	e72c      	b.n	2742 <__aeabi_dmul+0x24a>
    28e8:	ea95 0f0c 	teq	r5, ip
    28ec:	d106      	bne.n	28fc <__aeabi_ddiv+0x1b0>
    28ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    28f2:	f43f aefd 	beq.w	26f0 <__aeabi_dmul+0x1f8>
    28f6:	4610      	mov	r0, r2
    28f8:	4619      	mov	r1, r3
    28fa:	e722      	b.n	2742 <__aeabi_dmul+0x24a>
    28fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2900:	bf18      	it	ne
    2902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2906:	f47f aec5 	bne.w	2694 <__aeabi_dmul+0x19c>
    290a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    290e:	f47f af0d 	bne.w	272c <__aeabi_dmul+0x234>
    2912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    2916:	f47f aeeb 	bne.w	26f0 <__aeabi_dmul+0x1f8>
    291a:	e712      	b.n	2742 <__aeabi_dmul+0x24a>

0000291c <__aeabi_d2uiz>:
    291c:	004a      	lsls	r2, r1, #1
    291e:	d211      	bcs.n	2944 <__aeabi_d2uiz+0x28>
    2920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    2924:	d211      	bcs.n	294a <__aeabi_d2uiz+0x2e>
    2926:	d50d      	bpl.n	2944 <__aeabi_d2uiz+0x28>
    2928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    292c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    2930:	d40e      	bmi.n	2950 <__aeabi_d2uiz+0x34>
    2932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    2936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    293a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    293e:	fa23 f002 	lsr.w	r0, r3, r2
    2942:	4770      	bx	lr
    2944:	f04f 0000 	mov.w	r0, #0
    2948:	4770      	bx	lr
    294a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    294e:	d102      	bne.n	2956 <__aeabi_d2uiz+0x3a>
    2950:	f04f 30ff 	mov.w	r0, #4294967295
    2954:	4770      	bx	lr
    2956:	f04f 0000 	mov.w	r0, #0
    295a:	4770      	bx	lr

0000295c <__sflush_r>:
    295c:	898a      	ldrh	r2, [r1, #12]
    295e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2962:	4605      	mov	r5, r0
    2964:	0710      	lsls	r0, r2, #28
    2966:	460c      	mov	r4, r1
    2968:	d45a      	bmi.n	2a20 <__sflush_r+0xc4>
    296a:	684b      	ldr	r3, [r1, #4]
    296c:	2b00      	cmp	r3, #0
    296e:	dc05      	bgt.n	297c <__sflush_r+0x20>
    2970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2972:	2b00      	cmp	r3, #0
    2974:	dc02      	bgt.n	297c <__sflush_r+0x20>
    2976:	2000      	movs	r0, #0
    2978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    297c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    297e:	2e00      	cmp	r6, #0
    2980:	d0f9      	beq.n	2976 <__sflush_r+0x1a>
    2982:	2300      	movs	r3, #0
    2984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    2988:	682f      	ldr	r7, [r5, #0]
    298a:	602b      	str	r3, [r5, #0]
    298c:	d033      	beq.n	29f6 <__sflush_r+0x9a>
    298e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2990:	89a3      	ldrh	r3, [r4, #12]
    2992:	075a      	lsls	r2, r3, #29
    2994:	d505      	bpl.n	29a2 <__sflush_r+0x46>
    2996:	6863      	ldr	r3, [r4, #4]
    2998:	1ac0      	subs	r0, r0, r3
    299a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    299c:	b10b      	cbz	r3, 29a2 <__sflush_r+0x46>
    299e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    29a0:	1ac0      	subs	r0, r0, r3
    29a2:	2300      	movs	r3, #0
    29a4:	4602      	mov	r2, r0
    29a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    29a8:	6a21      	ldr	r1, [r4, #32]
    29aa:	4628      	mov	r0, r5
    29ac:	47b0      	blx	r6
    29ae:	1c43      	adds	r3, r0, #1
    29b0:	89a3      	ldrh	r3, [r4, #12]
    29b2:	d106      	bne.n	29c2 <__sflush_r+0x66>
    29b4:	6829      	ldr	r1, [r5, #0]
    29b6:	291d      	cmp	r1, #29
    29b8:	d84b      	bhi.n	2a52 <__sflush_r+0xf6>
    29ba:	4a2b      	ldr	r2, [pc, #172]	; (2a68 <__sflush_r+0x10c>)
    29bc:	40ca      	lsrs	r2, r1
    29be:	07d6      	lsls	r6, r2, #31
    29c0:	d547      	bpl.n	2a52 <__sflush_r+0xf6>
    29c2:	2200      	movs	r2, #0
    29c4:	6062      	str	r2, [r4, #4]
    29c6:	04d9      	lsls	r1, r3, #19
    29c8:	6922      	ldr	r2, [r4, #16]
    29ca:	6022      	str	r2, [r4, #0]
    29cc:	d504      	bpl.n	29d8 <__sflush_r+0x7c>
    29ce:	1c42      	adds	r2, r0, #1
    29d0:	d101      	bne.n	29d6 <__sflush_r+0x7a>
    29d2:	682b      	ldr	r3, [r5, #0]
    29d4:	b903      	cbnz	r3, 29d8 <__sflush_r+0x7c>
    29d6:	6560      	str	r0, [r4, #84]	; 0x54
    29d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    29da:	602f      	str	r7, [r5, #0]
    29dc:	2900      	cmp	r1, #0
    29de:	d0ca      	beq.n	2976 <__sflush_r+0x1a>
    29e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    29e4:	4299      	cmp	r1, r3
    29e6:	d002      	beq.n	29ee <__sflush_r+0x92>
    29e8:	4628      	mov	r0, r5
    29ea:	f000 f98d 	bl	2d08 <_free_r>
    29ee:	2000      	movs	r0, #0
    29f0:	6360      	str	r0, [r4, #52]	; 0x34
    29f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29f6:	6a21      	ldr	r1, [r4, #32]
    29f8:	2301      	movs	r3, #1
    29fa:	4628      	mov	r0, r5
    29fc:	47b0      	blx	r6
    29fe:	1c41      	adds	r1, r0, #1
    2a00:	d1c6      	bne.n	2990 <__sflush_r+0x34>
    2a02:	682b      	ldr	r3, [r5, #0]
    2a04:	2b00      	cmp	r3, #0
    2a06:	d0c3      	beq.n	2990 <__sflush_r+0x34>
    2a08:	2b1d      	cmp	r3, #29
    2a0a:	d001      	beq.n	2a10 <__sflush_r+0xb4>
    2a0c:	2b16      	cmp	r3, #22
    2a0e:	d101      	bne.n	2a14 <__sflush_r+0xb8>
    2a10:	602f      	str	r7, [r5, #0]
    2a12:	e7b0      	b.n	2976 <__sflush_r+0x1a>
    2a14:	89a3      	ldrh	r3, [r4, #12]
    2a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a1a:	81a3      	strh	r3, [r4, #12]
    2a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a20:	690f      	ldr	r7, [r1, #16]
    2a22:	2f00      	cmp	r7, #0
    2a24:	d0a7      	beq.n	2976 <__sflush_r+0x1a>
    2a26:	0793      	lsls	r3, r2, #30
    2a28:	680e      	ldr	r6, [r1, #0]
    2a2a:	bf08      	it	eq
    2a2c:	694b      	ldreq	r3, [r1, #20]
    2a2e:	600f      	str	r7, [r1, #0]
    2a30:	bf18      	it	ne
    2a32:	2300      	movne	r3, #0
    2a34:	eba6 0807 	sub.w	r8, r6, r7
    2a38:	608b      	str	r3, [r1, #8]
    2a3a:	f1b8 0f00 	cmp.w	r8, #0
    2a3e:	dd9a      	ble.n	2976 <__sflush_r+0x1a>
    2a40:	4643      	mov	r3, r8
    2a42:	463a      	mov	r2, r7
    2a44:	6a21      	ldr	r1, [r4, #32]
    2a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2a48:	4628      	mov	r0, r5
    2a4a:	47b0      	blx	r6
    2a4c:	2800      	cmp	r0, #0
    2a4e:	dc07      	bgt.n	2a60 <__sflush_r+0x104>
    2a50:	89a3      	ldrh	r3, [r4, #12]
    2a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a56:	81a3      	strh	r3, [r4, #12]
    2a58:	f04f 30ff 	mov.w	r0, #4294967295
    2a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a60:	4407      	add	r7, r0
    2a62:	eba8 0800 	sub.w	r8, r8, r0
    2a66:	e7e8      	b.n	2a3a <__sflush_r+0xde>
    2a68:	20400001 	.word	0x20400001

00002a6c <_fflush_r>:
    2a6c:	b538      	push	{r3, r4, r5, lr}
    2a6e:	690b      	ldr	r3, [r1, #16]
    2a70:	4605      	mov	r5, r0
    2a72:	460c      	mov	r4, r1
    2a74:	b1db      	cbz	r3, 2aae <_fflush_r+0x42>
    2a76:	b118      	cbz	r0, 2a80 <_fflush_r+0x14>
    2a78:	6983      	ldr	r3, [r0, #24]
    2a7a:	b90b      	cbnz	r3, 2a80 <_fflush_r+0x14>
    2a7c:	f000 f872 	bl	2b64 <__sinit>
    2a80:	4b0c      	ldr	r3, [pc, #48]	; (2ab4 <_fflush_r+0x48>)
    2a82:	429c      	cmp	r4, r3
    2a84:	d109      	bne.n	2a9a <_fflush_r+0x2e>
    2a86:	686c      	ldr	r4, [r5, #4]
    2a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2a8c:	b17b      	cbz	r3, 2aae <_fflush_r+0x42>
    2a8e:	4621      	mov	r1, r4
    2a90:	4628      	mov	r0, r5
    2a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2a96:	f7ff bf61 	b.w	295c <__sflush_r>
    2a9a:	4b07      	ldr	r3, [pc, #28]	; (2ab8 <_fflush_r+0x4c>)
    2a9c:	429c      	cmp	r4, r3
    2a9e:	d101      	bne.n	2aa4 <_fflush_r+0x38>
    2aa0:	68ac      	ldr	r4, [r5, #8]
    2aa2:	e7f1      	b.n	2a88 <_fflush_r+0x1c>
    2aa4:	4b05      	ldr	r3, [pc, #20]	; (2abc <_fflush_r+0x50>)
    2aa6:	429c      	cmp	r4, r3
    2aa8:	bf08      	it	eq
    2aaa:	68ec      	ldreq	r4, [r5, #12]
    2aac:	e7ec      	b.n	2a88 <_fflush_r+0x1c>
    2aae:	2000      	movs	r0, #0
    2ab0:	bd38      	pop	{r3, r4, r5, pc}
    2ab2:	bf00      	nop
    2ab4:	000051f0 	.word	0x000051f0
    2ab8:	00005210 	.word	0x00005210
    2abc:	000051d0 	.word	0x000051d0

00002ac0 <fflush>:
    2ac0:	4601      	mov	r1, r0
    2ac2:	b920      	cbnz	r0, 2ace <fflush+0xe>
    2ac4:	4b04      	ldr	r3, [pc, #16]	; (2ad8 <fflush+0x18>)
    2ac6:	4905      	ldr	r1, [pc, #20]	; (2adc <fflush+0x1c>)
    2ac8:	6818      	ldr	r0, [r3, #0]
    2aca:	f000 b8d3 	b.w	2c74 <_fwalk_reent>
    2ace:	4b04      	ldr	r3, [pc, #16]	; (2ae0 <fflush+0x20>)
    2ad0:	6818      	ldr	r0, [r3, #0]
    2ad2:	f7ff bfcb 	b.w	2a6c <_fflush_r>
    2ad6:	bf00      	nop
    2ad8:	00005230 	.word	0x00005230
    2adc:	00002a6d 	.word	0x00002a6d
    2ae0:	2000026c 	.word	0x2000026c

00002ae4 <_cleanup_r>:
    2ae4:	4901      	ldr	r1, [pc, #4]	; (2aec <_cleanup_r+0x8>)
    2ae6:	f000 b8c5 	b.w	2c74 <_fwalk_reent>
    2aea:	bf00      	nop
    2aec:	00002a6d 	.word	0x00002a6d

00002af0 <std.isra.0>:
    2af0:	2300      	movs	r3, #0
    2af2:	b510      	push	{r4, lr}
    2af4:	4604      	mov	r4, r0
    2af6:	6003      	str	r3, [r0, #0]
    2af8:	6043      	str	r3, [r0, #4]
    2afa:	6083      	str	r3, [r0, #8]
    2afc:	8181      	strh	r1, [r0, #12]
    2afe:	6643      	str	r3, [r0, #100]	; 0x64
    2b00:	81c2      	strh	r2, [r0, #14]
    2b02:	6103      	str	r3, [r0, #16]
    2b04:	6143      	str	r3, [r0, #20]
    2b06:	6183      	str	r3, [r0, #24]
    2b08:	4619      	mov	r1, r3
    2b0a:	2208      	movs	r2, #8
    2b0c:	305c      	adds	r0, #92	; 0x5c
    2b0e:	f000 f8f3 	bl	2cf8 <memset>
    2b12:	4b05      	ldr	r3, [pc, #20]	; (2b28 <std.isra.0+0x38>)
    2b14:	6263      	str	r3, [r4, #36]	; 0x24
    2b16:	4b05      	ldr	r3, [pc, #20]	; (2b2c <std.isra.0+0x3c>)
    2b18:	62a3      	str	r3, [r4, #40]	; 0x28
    2b1a:	4b05      	ldr	r3, [pc, #20]	; (2b30 <std.isra.0+0x40>)
    2b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
    2b1e:	4b05      	ldr	r3, [pc, #20]	; (2b34 <std.isra.0+0x44>)
    2b20:	6224      	str	r4, [r4, #32]
    2b22:	6323      	str	r3, [r4, #48]	; 0x30
    2b24:	bd10      	pop	{r4, pc}
    2b26:	bf00      	nop
    2b28:	000031c5 	.word	0x000031c5
    2b2c:	000031e7 	.word	0x000031e7
    2b30:	0000321f 	.word	0x0000321f
    2b34:	00003243 	.word	0x00003243

00002b38 <__sfmoreglue>:
    2b38:	b570      	push	{r4, r5, r6, lr}
    2b3a:	1e4a      	subs	r2, r1, #1
    2b3c:	2568      	movs	r5, #104	; 0x68
    2b3e:	4355      	muls	r5, r2
    2b40:	460e      	mov	r6, r1
    2b42:	f105 0174 	add.w	r1, r5, #116	; 0x74
    2b46:	f000 f92d 	bl	2da4 <_malloc_r>
    2b4a:	4604      	mov	r4, r0
    2b4c:	b140      	cbz	r0, 2b60 <__sfmoreglue+0x28>
    2b4e:	2100      	movs	r1, #0
    2b50:	e880 0042 	stmia.w	r0, {r1, r6}
    2b54:	300c      	adds	r0, #12
    2b56:	60a0      	str	r0, [r4, #8]
    2b58:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2b5c:	f000 f8cc 	bl	2cf8 <memset>
    2b60:	4620      	mov	r0, r4
    2b62:	bd70      	pop	{r4, r5, r6, pc}

00002b64 <__sinit>:
    2b64:	6983      	ldr	r3, [r0, #24]
    2b66:	b510      	push	{r4, lr}
    2b68:	4604      	mov	r4, r0
    2b6a:	bb33      	cbnz	r3, 2bba <__sinit+0x56>
    2b6c:	6483      	str	r3, [r0, #72]	; 0x48
    2b6e:	64c3      	str	r3, [r0, #76]	; 0x4c
    2b70:	6503      	str	r3, [r0, #80]	; 0x50
    2b72:	4b12      	ldr	r3, [pc, #72]	; (2bbc <__sinit+0x58>)
    2b74:	4a12      	ldr	r2, [pc, #72]	; (2bc0 <__sinit+0x5c>)
    2b76:	681b      	ldr	r3, [r3, #0]
    2b78:	6282      	str	r2, [r0, #40]	; 0x28
    2b7a:	4298      	cmp	r0, r3
    2b7c:	bf04      	itt	eq
    2b7e:	2301      	moveq	r3, #1
    2b80:	6183      	streq	r3, [r0, #24]
    2b82:	f000 f81f 	bl	2bc4 <__sfp>
    2b86:	6060      	str	r0, [r4, #4]
    2b88:	4620      	mov	r0, r4
    2b8a:	f000 f81b 	bl	2bc4 <__sfp>
    2b8e:	60a0      	str	r0, [r4, #8]
    2b90:	4620      	mov	r0, r4
    2b92:	f000 f817 	bl	2bc4 <__sfp>
    2b96:	2200      	movs	r2, #0
    2b98:	60e0      	str	r0, [r4, #12]
    2b9a:	2104      	movs	r1, #4
    2b9c:	6860      	ldr	r0, [r4, #4]
    2b9e:	f7ff ffa7 	bl	2af0 <std.isra.0>
    2ba2:	2201      	movs	r2, #1
    2ba4:	2109      	movs	r1, #9
    2ba6:	68a0      	ldr	r0, [r4, #8]
    2ba8:	f7ff ffa2 	bl	2af0 <std.isra.0>
    2bac:	2202      	movs	r2, #2
    2bae:	2112      	movs	r1, #18
    2bb0:	68e0      	ldr	r0, [r4, #12]
    2bb2:	f7ff ff9d 	bl	2af0 <std.isra.0>
    2bb6:	2301      	movs	r3, #1
    2bb8:	61a3      	str	r3, [r4, #24]
    2bba:	bd10      	pop	{r4, pc}
    2bbc:	00005230 	.word	0x00005230
    2bc0:	00002ae5 	.word	0x00002ae5

00002bc4 <__sfp>:
    2bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bc6:	4b1c      	ldr	r3, [pc, #112]	; (2c38 <__sfp+0x74>)
    2bc8:	681e      	ldr	r6, [r3, #0]
    2bca:	69b3      	ldr	r3, [r6, #24]
    2bcc:	4607      	mov	r7, r0
    2bce:	b913      	cbnz	r3, 2bd6 <__sfp+0x12>
    2bd0:	4630      	mov	r0, r6
    2bd2:	f7ff ffc7 	bl	2b64 <__sinit>
    2bd6:	3648      	adds	r6, #72	; 0x48
    2bd8:	68b4      	ldr	r4, [r6, #8]
    2bda:	6873      	ldr	r3, [r6, #4]
    2bdc:	3b01      	subs	r3, #1
    2bde:	d503      	bpl.n	2be8 <__sfp+0x24>
    2be0:	6833      	ldr	r3, [r6, #0]
    2be2:	b133      	cbz	r3, 2bf2 <__sfp+0x2e>
    2be4:	6836      	ldr	r6, [r6, #0]
    2be6:	e7f7      	b.n	2bd8 <__sfp+0x14>
    2be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    2bec:	b16d      	cbz	r5, 2c0a <__sfp+0x46>
    2bee:	3468      	adds	r4, #104	; 0x68
    2bf0:	e7f4      	b.n	2bdc <__sfp+0x18>
    2bf2:	2104      	movs	r1, #4
    2bf4:	4638      	mov	r0, r7
    2bf6:	f7ff ff9f 	bl	2b38 <__sfmoreglue>
    2bfa:	6030      	str	r0, [r6, #0]
    2bfc:	2800      	cmp	r0, #0
    2bfe:	d1f1      	bne.n	2be4 <__sfp+0x20>
    2c00:	230c      	movs	r3, #12
    2c02:	603b      	str	r3, [r7, #0]
    2c04:	4604      	mov	r4, r0
    2c06:	4620      	mov	r0, r4
    2c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c0e:	81e3      	strh	r3, [r4, #14]
    2c10:	2301      	movs	r3, #1
    2c12:	81a3      	strh	r3, [r4, #12]
    2c14:	6665      	str	r5, [r4, #100]	; 0x64
    2c16:	6025      	str	r5, [r4, #0]
    2c18:	60a5      	str	r5, [r4, #8]
    2c1a:	6065      	str	r5, [r4, #4]
    2c1c:	6125      	str	r5, [r4, #16]
    2c1e:	6165      	str	r5, [r4, #20]
    2c20:	61a5      	str	r5, [r4, #24]
    2c22:	2208      	movs	r2, #8
    2c24:	4629      	mov	r1, r5
    2c26:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2c2a:	f000 f865 	bl	2cf8 <memset>
    2c2e:	6365      	str	r5, [r4, #52]	; 0x34
    2c30:	63a5      	str	r5, [r4, #56]	; 0x38
    2c32:	64a5      	str	r5, [r4, #72]	; 0x48
    2c34:	64e5      	str	r5, [r4, #76]	; 0x4c
    2c36:	e7e6      	b.n	2c06 <__sfp+0x42>
    2c38:	00005230 	.word	0x00005230

00002c3c <_fwalk>:
    2c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c40:	4688      	mov	r8, r1
    2c42:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2c46:	2600      	movs	r6, #0
    2c48:	b914      	cbnz	r4, 2c50 <_fwalk+0x14>
    2c4a:	4630      	mov	r0, r6
    2c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c50:	68a5      	ldr	r5, [r4, #8]
    2c52:	6867      	ldr	r7, [r4, #4]
    2c54:	3f01      	subs	r7, #1
    2c56:	d501      	bpl.n	2c5c <_fwalk+0x20>
    2c58:	6824      	ldr	r4, [r4, #0]
    2c5a:	e7f5      	b.n	2c48 <_fwalk+0xc>
    2c5c:	89ab      	ldrh	r3, [r5, #12]
    2c5e:	2b01      	cmp	r3, #1
    2c60:	d906      	bls.n	2c70 <_fwalk+0x34>
    2c62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2c66:	3301      	adds	r3, #1
    2c68:	d002      	beq.n	2c70 <_fwalk+0x34>
    2c6a:	4628      	mov	r0, r5
    2c6c:	47c0      	blx	r8
    2c6e:	4306      	orrs	r6, r0
    2c70:	3568      	adds	r5, #104	; 0x68
    2c72:	e7ef      	b.n	2c54 <_fwalk+0x18>

00002c74 <_fwalk_reent>:
    2c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2c78:	4680      	mov	r8, r0
    2c7a:	4689      	mov	r9, r1
    2c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2c80:	2600      	movs	r6, #0
    2c82:	b914      	cbnz	r4, 2c8a <_fwalk_reent+0x16>
    2c84:	4630      	mov	r0, r6
    2c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c8a:	68a5      	ldr	r5, [r4, #8]
    2c8c:	6867      	ldr	r7, [r4, #4]
    2c8e:	3f01      	subs	r7, #1
    2c90:	d501      	bpl.n	2c96 <_fwalk_reent+0x22>
    2c92:	6824      	ldr	r4, [r4, #0]
    2c94:	e7f5      	b.n	2c82 <_fwalk_reent+0xe>
    2c96:	89ab      	ldrh	r3, [r5, #12]
    2c98:	2b01      	cmp	r3, #1
    2c9a:	d907      	bls.n	2cac <_fwalk_reent+0x38>
    2c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2ca0:	3301      	adds	r3, #1
    2ca2:	d003      	beq.n	2cac <_fwalk_reent+0x38>
    2ca4:	4629      	mov	r1, r5
    2ca6:	4640      	mov	r0, r8
    2ca8:	47c8      	blx	r9
    2caa:	4306      	orrs	r6, r0
    2cac:	3568      	adds	r5, #104	; 0x68
    2cae:	e7ee      	b.n	2c8e <_fwalk_reent+0x1a>

00002cb0 <__libc_init_array>:
    2cb0:	b570      	push	{r4, r5, r6, lr}
    2cb2:	4e0d      	ldr	r6, [pc, #52]	; (2ce8 <__libc_init_array+0x38>)
    2cb4:	4c0d      	ldr	r4, [pc, #52]	; (2cec <__libc_init_array+0x3c>)
    2cb6:	1ba4      	subs	r4, r4, r6
    2cb8:	10a4      	asrs	r4, r4, #2
    2cba:	2500      	movs	r5, #0
    2cbc:	42a5      	cmp	r5, r4
    2cbe:	d109      	bne.n	2cd4 <__libc_init_array+0x24>
    2cc0:	4e0b      	ldr	r6, [pc, #44]	; (2cf0 <__libc_init_array+0x40>)
    2cc2:	4c0c      	ldr	r4, [pc, #48]	; (2cf4 <__libc_init_array+0x44>)
    2cc4:	f002 fb6a 	bl	539c <_init>
    2cc8:	1ba4      	subs	r4, r4, r6
    2cca:	10a4      	asrs	r4, r4, #2
    2ccc:	2500      	movs	r5, #0
    2cce:	42a5      	cmp	r5, r4
    2cd0:	d105      	bne.n	2cde <__libc_init_array+0x2e>
    2cd2:	bd70      	pop	{r4, r5, r6, pc}
    2cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2cd8:	4798      	blx	r3
    2cda:	3501      	adds	r5, #1
    2cdc:	e7ee      	b.n	2cbc <__libc_init_array+0xc>
    2cde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2ce2:	4798      	blx	r3
    2ce4:	3501      	adds	r5, #1
    2ce6:	e7f2      	b.n	2cce <__libc_init_array+0x1e>
    2ce8:	000053a8 	.word	0x000053a8
    2cec:	000053a8 	.word	0x000053a8
    2cf0:	000053a8 	.word	0x000053a8
    2cf4:	000053ac 	.word	0x000053ac

00002cf8 <memset>:
    2cf8:	4402      	add	r2, r0
    2cfa:	4603      	mov	r3, r0
    2cfc:	4293      	cmp	r3, r2
    2cfe:	d100      	bne.n	2d02 <memset+0xa>
    2d00:	4770      	bx	lr
    2d02:	f803 1b01 	strb.w	r1, [r3], #1
    2d06:	e7f9      	b.n	2cfc <memset+0x4>

00002d08 <_free_r>:
    2d08:	b538      	push	{r3, r4, r5, lr}
    2d0a:	4605      	mov	r5, r0
    2d0c:	2900      	cmp	r1, #0
    2d0e:	d045      	beq.n	2d9c <_free_r+0x94>
    2d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2d14:	1f0c      	subs	r4, r1, #4
    2d16:	2b00      	cmp	r3, #0
    2d18:	bfb8      	it	lt
    2d1a:	18e4      	addlt	r4, r4, r3
    2d1c:	f000 fbf6 	bl	350c <__malloc_lock>
    2d20:	4a1f      	ldr	r2, [pc, #124]	; (2da0 <_free_r+0x98>)
    2d22:	6813      	ldr	r3, [r2, #0]
    2d24:	4610      	mov	r0, r2
    2d26:	b933      	cbnz	r3, 2d36 <_free_r+0x2e>
    2d28:	6063      	str	r3, [r4, #4]
    2d2a:	6014      	str	r4, [r2, #0]
    2d2c:	4628      	mov	r0, r5
    2d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2d32:	f000 bbec 	b.w	350e <__malloc_unlock>
    2d36:	42a3      	cmp	r3, r4
    2d38:	d90c      	bls.n	2d54 <_free_r+0x4c>
    2d3a:	6821      	ldr	r1, [r4, #0]
    2d3c:	1862      	adds	r2, r4, r1
    2d3e:	4293      	cmp	r3, r2
    2d40:	bf04      	itt	eq
    2d42:	681a      	ldreq	r2, [r3, #0]
    2d44:	685b      	ldreq	r3, [r3, #4]
    2d46:	6063      	str	r3, [r4, #4]
    2d48:	bf04      	itt	eq
    2d4a:	1852      	addeq	r2, r2, r1
    2d4c:	6022      	streq	r2, [r4, #0]
    2d4e:	6004      	str	r4, [r0, #0]
    2d50:	e7ec      	b.n	2d2c <_free_r+0x24>
    2d52:	4613      	mov	r3, r2
    2d54:	685a      	ldr	r2, [r3, #4]
    2d56:	b10a      	cbz	r2, 2d5c <_free_r+0x54>
    2d58:	42a2      	cmp	r2, r4
    2d5a:	d9fa      	bls.n	2d52 <_free_r+0x4a>
    2d5c:	6819      	ldr	r1, [r3, #0]
    2d5e:	1858      	adds	r0, r3, r1
    2d60:	42a0      	cmp	r0, r4
    2d62:	d10b      	bne.n	2d7c <_free_r+0x74>
    2d64:	6820      	ldr	r0, [r4, #0]
    2d66:	4401      	add	r1, r0
    2d68:	1858      	adds	r0, r3, r1
    2d6a:	4282      	cmp	r2, r0
    2d6c:	6019      	str	r1, [r3, #0]
    2d6e:	d1dd      	bne.n	2d2c <_free_r+0x24>
    2d70:	6810      	ldr	r0, [r2, #0]
    2d72:	6852      	ldr	r2, [r2, #4]
    2d74:	605a      	str	r2, [r3, #4]
    2d76:	4401      	add	r1, r0
    2d78:	6019      	str	r1, [r3, #0]
    2d7a:	e7d7      	b.n	2d2c <_free_r+0x24>
    2d7c:	d902      	bls.n	2d84 <_free_r+0x7c>
    2d7e:	230c      	movs	r3, #12
    2d80:	602b      	str	r3, [r5, #0]
    2d82:	e7d3      	b.n	2d2c <_free_r+0x24>
    2d84:	6820      	ldr	r0, [r4, #0]
    2d86:	1821      	adds	r1, r4, r0
    2d88:	428a      	cmp	r2, r1
    2d8a:	bf04      	itt	eq
    2d8c:	6811      	ldreq	r1, [r2, #0]
    2d8e:	6852      	ldreq	r2, [r2, #4]
    2d90:	6062      	str	r2, [r4, #4]
    2d92:	bf04      	itt	eq
    2d94:	1809      	addeq	r1, r1, r0
    2d96:	6021      	streq	r1, [r4, #0]
    2d98:	605c      	str	r4, [r3, #4]
    2d9a:	e7c7      	b.n	2d2c <_free_r+0x24>
    2d9c:	bd38      	pop	{r3, r4, r5, pc}
    2d9e:	bf00      	nop
    2da0:	20000690 	.word	0x20000690

00002da4 <_malloc_r>:
    2da4:	b570      	push	{r4, r5, r6, lr}
    2da6:	1ccd      	adds	r5, r1, #3
    2da8:	f025 0503 	bic.w	r5, r5, #3
    2dac:	3508      	adds	r5, #8
    2dae:	2d0c      	cmp	r5, #12
    2db0:	bf38      	it	cc
    2db2:	250c      	movcc	r5, #12
    2db4:	2d00      	cmp	r5, #0
    2db6:	4606      	mov	r6, r0
    2db8:	db01      	blt.n	2dbe <_malloc_r+0x1a>
    2dba:	42a9      	cmp	r1, r5
    2dbc:	d903      	bls.n	2dc6 <_malloc_r+0x22>
    2dbe:	230c      	movs	r3, #12
    2dc0:	6033      	str	r3, [r6, #0]
    2dc2:	2000      	movs	r0, #0
    2dc4:	bd70      	pop	{r4, r5, r6, pc}
    2dc6:	f000 fba1 	bl	350c <__malloc_lock>
    2dca:	4a23      	ldr	r2, [pc, #140]	; (2e58 <_malloc_r+0xb4>)
    2dcc:	6814      	ldr	r4, [r2, #0]
    2dce:	4621      	mov	r1, r4
    2dd0:	b991      	cbnz	r1, 2df8 <_malloc_r+0x54>
    2dd2:	4c22      	ldr	r4, [pc, #136]	; (2e5c <_malloc_r+0xb8>)
    2dd4:	6823      	ldr	r3, [r4, #0]
    2dd6:	b91b      	cbnz	r3, 2de0 <_malloc_r+0x3c>
    2dd8:	4630      	mov	r0, r6
    2dda:	f000 f8bd 	bl	2f58 <_sbrk_r>
    2dde:	6020      	str	r0, [r4, #0]
    2de0:	4629      	mov	r1, r5
    2de2:	4630      	mov	r0, r6
    2de4:	f000 f8b8 	bl	2f58 <_sbrk_r>
    2de8:	1c43      	adds	r3, r0, #1
    2dea:	d126      	bne.n	2e3a <_malloc_r+0x96>
    2dec:	230c      	movs	r3, #12
    2dee:	6033      	str	r3, [r6, #0]
    2df0:	4630      	mov	r0, r6
    2df2:	f000 fb8c 	bl	350e <__malloc_unlock>
    2df6:	e7e4      	b.n	2dc2 <_malloc_r+0x1e>
    2df8:	680b      	ldr	r3, [r1, #0]
    2dfa:	1b5b      	subs	r3, r3, r5
    2dfc:	d41a      	bmi.n	2e34 <_malloc_r+0x90>
    2dfe:	2b0b      	cmp	r3, #11
    2e00:	d90f      	bls.n	2e22 <_malloc_r+0x7e>
    2e02:	600b      	str	r3, [r1, #0]
    2e04:	50cd      	str	r5, [r1, r3]
    2e06:	18cc      	adds	r4, r1, r3
    2e08:	4630      	mov	r0, r6
    2e0a:	f000 fb80 	bl	350e <__malloc_unlock>
    2e0e:	f104 000b 	add.w	r0, r4, #11
    2e12:	1d23      	adds	r3, r4, #4
    2e14:	f020 0007 	bic.w	r0, r0, #7
    2e18:	1ac3      	subs	r3, r0, r3
    2e1a:	d01b      	beq.n	2e54 <_malloc_r+0xb0>
    2e1c:	425a      	negs	r2, r3
    2e1e:	50e2      	str	r2, [r4, r3]
    2e20:	bd70      	pop	{r4, r5, r6, pc}
    2e22:	428c      	cmp	r4, r1
    2e24:	bf0d      	iteet	eq
    2e26:	6863      	ldreq	r3, [r4, #4]
    2e28:	684b      	ldrne	r3, [r1, #4]
    2e2a:	6063      	strne	r3, [r4, #4]
    2e2c:	6013      	streq	r3, [r2, #0]
    2e2e:	bf18      	it	ne
    2e30:	460c      	movne	r4, r1
    2e32:	e7e9      	b.n	2e08 <_malloc_r+0x64>
    2e34:	460c      	mov	r4, r1
    2e36:	6849      	ldr	r1, [r1, #4]
    2e38:	e7ca      	b.n	2dd0 <_malloc_r+0x2c>
    2e3a:	1cc4      	adds	r4, r0, #3
    2e3c:	f024 0403 	bic.w	r4, r4, #3
    2e40:	42a0      	cmp	r0, r4
    2e42:	d005      	beq.n	2e50 <_malloc_r+0xac>
    2e44:	1a21      	subs	r1, r4, r0
    2e46:	4630      	mov	r0, r6
    2e48:	f000 f886 	bl	2f58 <_sbrk_r>
    2e4c:	3001      	adds	r0, #1
    2e4e:	d0cd      	beq.n	2dec <_malloc_r+0x48>
    2e50:	6025      	str	r5, [r4, #0]
    2e52:	e7d9      	b.n	2e08 <_malloc_r+0x64>
    2e54:	bd70      	pop	{r4, r5, r6, pc}
    2e56:	bf00      	nop
    2e58:	20000690 	.word	0x20000690
    2e5c:	20000694 	.word	0x20000694

00002e60 <iprintf>:
    2e60:	b40f      	push	{r0, r1, r2, r3}
    2e62:	4b0a      	ldr	r3, [pc, #40]	; (2e8c <iprintf+0x2c>)
    2e64:	b513      	push	{r0, r1, r4, lr}
    2e66:	681c      	ldr	r4, [r3, #0]
    2e68:	b124      	cbz	r4, 2e74 <iprintf+0x14>
    2e6a:	69a3      	ldr	r3, [r4, #24]
    2e6c:	b913      	cbnz	r3, 2e74 <iprintf+0x14>
    2e6e:	4620      	mov	r0, r4
    2e70:	f7ff fe78 	bl	2b64 <__sinit>
    2e74:	ab05      	add	r3, sp, #20
    2e76:	9a04      	ldr	r2, [sp, #16]
    2e78:	68a1      	ldr	r1, [r4, #8]
    2e7a:	9301      	str	r3, [sp, #4]
    2e7c:	4620      	mov	r0, r4
    2e7e:	f000 fcbf 	bl	3800 <_vfiprintf_r>
    2e82:	b002      	add	sp, #8
    2e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2e88:	b004      	add	sp, #16
    2e8a:	4770      	bx	lr
    2e8c:	2000026c 	.word	0x2000026c

00002e90 <_puts_r>:
    2e90:	b570      	push	{r4, r5, r6, lr}
    2e92:	460e      	mov	r6, r1
    2e94:	4605      	mov	r5, r0
    2e96:	b118      	cbz	r0, 2ea0 <_puts_r+0x10>
    2e98:	6983      	ldr	r3, [r0, #24]
    2e9a:	b90b      	cbnz	r3, 2ea0 <_puts_r+0x10>
    2e9c:	f7ff fe62 	bl	2b64 <__sinit>
    2ea0:	69ab      	ldr	r3, [r5, #24]
    2ea2:	68ac      	ldr	r4, [r5, #8]
    2ea4:	b913      	cbnz	r3, 2eac <_puts_r+0x1c>
    2ea6:	4628      	mov	r0, r5
    2ea8:	f7ff fe5c 	bl	2b64 <__sinit>
    2eac:	4b23      	ldr	r3, [pc, #140]	; (2f3c <_puts_r+0xac>)
    2eae:	429c      	cmp	r4, r3
    2eb0:	d117      	bne.n	2ee2 <_puts_r+0x52>
    2eb2:	686c      	ldr	r4, [r5, #4]
    2eb4:	89a3      	ldrh	r3, [r4, #12]
    2eb6:	071b      	lsls	r3, r3, #28
    2eb8:	d51d      	bpl.n	2ef6 <_puts_r+0x66>
    2eba:	6923      	ldr	r3, [r4, #16]
    2ebc:	b1db      	cbz	r3, 2ef6 <_puts_r+0x66>
    2ebe:	3e01      	subs	r6, #1
    2ec0:	68a3      	ldr	r3, [r4, #8]
    2ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2ec6:	3b01      	subs	r3, #1
    2ec8:	60a3      	str	r3, [r4, #8]
    2eca:	b9e9      	cbnz	r1, 2f08 <_puts_r+0x78>
    2ecc:	2b00      	cmp	r3, #0
    2ece:	da2e      	bge.n	2f2e <_puts_r+0x9e>
    2ed0:	4622      	mov	r2, r4
    2ed2:	210a      	movs	r1, #10
    2ed4:	4628      	mov	r0, r5
    2ed6:	f000 f9b9 	bl	324c <__swbuf_r>
    2eda:	3001      	adds	r0, #1
    2edc:	d011      	beq.n	2f02 <_puts_r+0x72>
    2ede:	200a      	movs	r0, #10
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    2ee2:	4b17      	ldr	r3, [pc, #92]	; (2f40 <_puts_r+0xb0>)
    2ee4:	429c      	cmp	r4, r3
    2ee6:	d101      	bne.n	2eec <_puts_r+0x5c>
    2ee8:	68ac      	ldr	r4, [r5, #8]
    2eea:	e7e3      	b.n	2eb4 <_puts_r+0x24>
    2eec:	4b15      	ldr	r3, [pc, #84]	; (2f44 <_puts_r+0xb4>)
    2eee:	429c      	cmp	r4, r3
    2ef0:	bf08      	it	eq
    2ef2:	68ec      	ldreq	r4, [r5, #12]
    2ef4:	e7de      	b.n	2eb4 <_puts_r+0x24>
    2ef6:	4621      	mov	r1, r4
    2ef8:	4628      	mov	r0, r5
    2efa:	f000 fa0b 	bl	3314 <__swsetup_r>
    2efe:	2800      	cmp	r0, #0
    2f00:	d0dd      	beq.n	2ebe <_puts_r+0x2e>
    2f02:	f04f 30ff 	mov.w	r0, #4294967295
    2f06:	bd70      	pop	{r4, r5, r6, pc}
    2f08:	2b00      	cmp	r3, #0
    2f0a:	da04      	bge.n	2f16 <_puts_r+0x86>
    2f0c:	69a2      	ldr	r2, [r4, #24]
    2f0e:	4293      	cmp	r3, r2
    2f10:	db06      	blt.n	2f20 <_puts_r+0x90>
    2f12:	290a      	cmp	r1, #10
    2f14:	d004      	beq.n	2f20 <_puts_r+0x90>
    2f16:	6823      	ldr	r3, [r4, #0]
    2f18:	1c5a      	adds	r2, r3, #1
    2f1a:	6022      	str	r2, [r4, #0]
    2f1c:	7019      	strb	r1, [r3, #0]
    2f1e:	e7cf      	b.n	2ec0 <_puts_r+0x30>
    2f20:	4622      	mov	r2, r4
    2f22:	4628      	mov	r0, r5
    2f24:	f000 f992 	bl	324c <__swbuf_r>
    2f28:	3001      	adds	r0, #1
    2f2a:	d1c9      	bne.n	2ec0 <_puts_r+0x30>
    2f2c:	e7e9      	b.n	2f02 <_puts_r+0x72>
    2f2e:	6823      	ldr	r3, [r4, #0]
    2f30:	200a      	movs	r0, #10
    2f32:	1c5a      	adds	r2, r3, #1
    2f34:	6022      	str	r2, [r4, #0]
    2f36:	7018      	strb	r0, [r3, #0]
    2f38:	bd70      	pop	{r4, r5, r6, pc}
    2f3a:	bf00      	nop
    2f3c:	000051f0 	.word	0x000051f0
    2f40:	00005210 	.word	0x00005210
    2f44:	000051d0 	.word	0x000051d0

00002f48 <puts>:
    2f48:	4b02      	ldr	r3, [pc, #8]	; (2f54 <puts+0xc>)
    2f4a:	4601      	mov	r1, r0
    2f4c:	6818      	ldr	r0, [r3, #0]
    2f4e:	f7ff bf9f 	b.w	2e90 <_puts_r>
    2f52:	bf00      	nop
    2f54:	2000026c 	.word	0x2000026c

00002f58 <_sbrk_r>:
    2f58:	b538      	push	{r3, r4, r5, lr}
    2f5a:	4c06      	ldr	r4, [pc, #24]	; (2f74 <_sbrk_r+0x1c>)
    2f5c:	2300      	movs	r3, #0
    2f5e:	4605      	mov	r5, r0
    2f60:	4608      	mov	r0, r1
    2f62:	6023      	str	r3, [r4, #0]
    2f64:	f7fd fce2 	bl	92c <_sbrk>
    2f68:	1c43      	adds	r3, r0, #1
    2f6a:	d102      	bne.n	2f72 <_sbrk_r+0x1a>
    2f6c:	6823      	ldr	r3, [r4, #0]
    2f6e:	b103      	cbz	r3, 2f72 <_sbrk_r+0x1a>
    2f70:	602b      	str	r3, [r5, #0]
    2f72:	bd38      	pop	{r3, r4, r5, pc}
    2f74:	200046fc 	.word	0x200046fc

00002f78 <iscanf>:
    2f78:	b40f      	push	{r0, r1, r2, r3}
    2f7a:	4b0a      	ldr	r3, [pc, #40]	; (2fa4 <iscanf+0x2c>)
    2f7c:	b513      	push	{r0, r1, r4, lr}
    2f7e:	681c      	ldr	r4, [r3, #0]
    2f80:	b124      	cbz	r4, 2f8c <iscanf+0x14>
    2f82:	69a3      	ldr	r3, [r4, #24]
    2f84:	b913      	cbnz	r3, 2f8c <iscanf+0x14>
    2f86:	4620      	mov	r0, r4
    2f88:	f7ff fdec 	bl	2b64 <__sinit>
    2f8c:	ab05      	add	r3, sp, #20
    2f8e:	9a04      	ldr	r2, [sp, #16]
    2f90:	6861      	ldr	r1, [r4, #4]
    2f92:	9301      	str	r3, [sp, #4]
    2f94:	4620      	mov	r0, r4
    2f96:	f001 f833 	bl	4000 <_vfiscanf_r>
    2f9a:	b002      	add	sp, #8
    2f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2fa0:	b004      	add	sp, #16
    2fa2:	4770      	bx	lr
    2fa4:	2000026c 	.word	0x2000026c

00002fa8 <setbuf>:
    2fa8:	2900      	cmp	r1, #0
    2faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2fae:	bf0c      	ite	eq
    2fb0:	2202      	moveq	r2, #2
    2fb2:	2200      	movne	r2, #0
    2fb4:	f000 b800 	b.w	2fb8 <setvbuf>

00002fb8 <setvbuf>:
    2fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2fbc:	461d      	mov	r5, r3
    2fbe:	4b51      	ldr	r3, [pc, #324]	; (3104 <setvbuf+0x14c>)
    2fc0:	681e      	ldr	r6, [r3, #0]
    2fc2:	4604      	mov	r4, r0
    2fc4:	460f      	mov	r7, r1
    2fc6:	4690      	mov	r8, r2
    2fc8:	b126      	cbz	r6, 2fd4 <setvbuf+0x1c>
    2fca:	69b3      	ldr	r3, [r6, #24]
    2fcc:	b913      	cbnz	r3, 2fd4 <setvbuf+0x1c>
    2fce:	4630      	mov	r0, r6
    2fd0:	f7ff fdc8 	bl	2b64 <__sinit>
    2fd4:	4b4c      	ldr	r3, [pc, #304]	; (3108 <setvbuf+0x150>)
    2fd6:	429c      	cmp	r4, r3
    2fd8:	d152      	bne.n	3080 <setvbuf+0xc8>
    2fda:	6874      	ldr	r4, [r6, #4]
    2fdc:	f1b8 0f02 	cmp.w	r8, #2
    2fe0:	d006      	beq.n	2ff0 <setvbuf+0x38>
    2fe2:	f1b8 0f01 	cmp.w	r8, #1
    2fe6:	f200 8089 	bhi.w	30fc <setvbuf+0x144>
    2fea:	2d00      	cmp	r5, #0
    2fec:	f2c0 8086 	blt.w	30fc <setvbuf+0x144>
    2ff0:	4621      	mov	r1, r4
    2ff2:	4630      	mov	r0, r6
    2ff4:	f7ff fd3a 	bl	2a6c <_fflush_r>
    2ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2ffa:	b141      	cbz	r1, 300e <setvbuf+0x56>
    2ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3000:	4299      	cmp	r1, r3
    3002:	d002      	beq.n	300a <setvbuf+0x52>
    3004:	4630      	mov	r0, r6
    3006:	f7ff fe7f 	bl	2d08 <_free_r>
    300a:	2300      	movs	r3, #0
    300c:	6363      	str	r3, [r4, #52]	; 0x34
    300e:	2300      	movs	r3, #0
    3010:	61a3      	str	r3, [r4, #24]
    3012:	6063      	str	r3, [r4, #4]
    3014:	89a3      	ldrh	r3, [r4, #12]
    3016:	061b      	lsls	r3, r3, #24
    3018:	d503      	bpl.n	3022 <setvbuf+0x6a>
    301a:	6921      	ldr	r1, [r4, #16]
    301c:	4630      	mov	r0, r6
    301e:	f7ff fe73 	bl	2d08 <_free_r>
    3022:	89a3      	ldrh	r3, [r4, #12]
    3024:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    3028:	f023 0303 	bic.w	r3, r3, #3
    302c:	f1b8 0f02 	cmp.w	r8, #2
    3030:	81a3      	strh	r3, [r4, #12]
    3032:	d05d      	beq.n	30f0 <setvbuf+0x138>
    3034:	ab01      	add	r3, sp, #4
    3036:	466a      	mov	r2, sp
    3038:	4621      	mov	r1, r4
    303a:	4630      	mov	r0, r6
    303c:	f000 f9fa 	bl	3434 <__swhatbuf_r>
    3040:	89a3      	ldrh	r3, [r4, #12]
    3042:	4318      	orrs	r0, r3
    3044:	81a0      	strh	r0, [r4, #12]
    3046:	bb2d      	cbnz	r5, 3094 <setvbuf+0xdc>
    3048:	9d00      	ldr	r5, [sp, #0]
    304a:	4628      	mov	r0, r5
    304c:	f000 fa56 	bl	34fc <malloc>
    3050:	4607      	mov	r7, r0
    3052:	2800      	cmp	r0, #0
    3054:	d14e      	bne.n	30f4 <setvbuf+0x13c>
    3056:	f8dd 9000 	ldr.w	r9, [sp]
    305a:	45a9      	cmp	r9, r5
    305c:	d13c      	bne.n	30d8 <setvbuf+0x120>
    305e:	f04f 30ff 	mov.w	r0, #4294967295
    3062:	89a3      	ldrh	r3, [r4, #12]
    3064:	f043 0302 	orr.w	r3, r3, #2
    3068:	81a3      	strh	r3, [r4, #12]
    306a:	2300      	movs	r3, #0
    306c:	60a3      	str	r3, [r4, #8]
    306e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    3072:	6023      	str	r3, [r4, #0]
    3074:	6123      	str	r3, [r4, #16]
    3076:	2301      	movs	r3, #1
    3078:	6163      	str	r3, [r4, #20]
    307a:	b003      	add	sp, #12
    307c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3080:	4b22      	ldr	r3, [pc, #136]	; (310c <setvbuf+0x154>)
    3082:	429c      	cmp	r4, r3
    3084:	d101      	bne.n	308a <setvbuf+0xd2>
    3086:	68b4      	ldr	r4, [r6, #8]
    3088:	e7a8      	b.n	2fdc <setvbuf+0x24>
    308a:	4b21      	ldr	r3, [pc, #132]	; (3110 <setvbuf+0x158>)
    308c:	429c      	cmp	r4, r3
    308e:	bf08      	it	eq
    3090:	68f4      	ldreq	r4, [r6, #12]
    3092:	e7a3      	b.n	2fdc <setvbuf+0x24>
    3094:	2f00      	cmp	r7, #0
    3096:	d0d8      	beq.n	304a <setvbuf+0x92>
    3098:	69b3      	ldr	r3, [r6, #24]
    309a:	b913      	cbnz	r3, 30a2 <setvbuf+0xea>
    309c:	4630      	mov	r0, r6
    309e:	f7ff fd61 	bl	2b64 <__sinit>
    30a2:	f1b8 0f01 	cmp.w	r8, #1
    30a6:	bf08      	it	eq
    30a8:	89a3      	ldrheq	r3, [r4, #12]
    30aa:	6027      	str	r7, [r4, #0]
    30ac:	bf04      	itt	eq
    30ae:	f043 0301 	orreq.w	r3, r3, #1
    30b2:	81a3      	strheq	r3, [r4, #12]
    30b4:	89a3      	ldrh	r3, [r4, #12]
    30b6:	6127      	str	r7, [r4, #16]
    30b8:	f013 0008 	ands.w	r0, r3, #8
    30bc:	6165      	str	r5, [r4, #20]
    30be:	d01b      	beq.n	30f8 <setvbuf+0x140>
    30c0:	f013 0001 	ands.w	r0, r3, #1
    30c4:	bf18      	it	ne
    30c6:	426d      	negne	r5, r5
    30c8:	f04f 0300 	mov.w	r3, #0
    30cc:	bf1d      	ittte	ne
    30ce:	60a3      	strne	r3, [r4, #8]
    30d0:	61a5      	strne	r5, [r4, #24]
    30d2:	4618      	movne	r0, r3
    30d4:	60a5      	streq	r5, [r4, #8]
    30d6:	e7d0      	b.n	307a <setvbuf+0xc2>
    30d8:	4648      	mov	r0, r9
    30da:	f000 fa0f 	bl	34fc <malloc>
    30de:	4607      	mov	r7, r0
    30e0:	2800      	cmp	r0, #0
    30e2:	d0bc      	beq.n	305e <setvbuf+0xa6>
    30e4:	89a3      	ldrh	r3, [r4, #12]
    30e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    30ea:	81a3      	strh	r3, [r4, #12]
    30ec:	464d      	mov	r5, r9
    30ee:	e7d3      	b.n	3098 <setvbuf+0xe0>
    30f0:	2000      	movs	r0, #0
    30f2:	e7b6      	b.n	3062 <setvbuf+0xaa>
    30f4:	46a9      	mov	r9, r5
    30f6:	e7f5      	b.n	30e4 <setvbuf+0x12c>
    30f8:	60a0      	str	r0, [r4, #8]
    30fa:	e7be      	b.n	307a <setvbuf+0xc2>
    30fc:	f04f 30ff 	mov.w	r0, #4294967295
    3100:	e7bb      	b.n	307a <setvbuf+0xc2>
    3102:	bf00      	nop
    3104:	2000026c 	.word	0x2000026c
    3108:	000051f0 	.word	0x000051f0
    310c:	00005210 	.word	0x00005210
    3110:	000051d0 	.word	0x000051d0

00003114 <sniprintf>:
    3114:	b40c      	push	{r2, r3}
    3116:	b530      	push	{r4, r5, lr}
    3118:	4b17      	ldr	r3, [pc, #92]	; (3178 <sniprintf+0x64>)
    311a:	1e0c      	subs	r4, r1, #0
    311c:	b09d      	sub	sp, #116	; 0x74
    311e:	681d      	ldr	r5, [r3, #0]
    3120:	da08      	bge.n	3134 <sniprintf+0x20>
    3122:	238b      	movs	r3, #139	; 0x8b
    3124:	602b      	str	r3, [r5, #0]
    3126:	f04f 30ff 	mov.w	r0, #4294967295
    312a:	b01d      	add	sp, #116	; 0x74
    312c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3130:	b002      	add	sp, #8
    3132:	4770      	bx	lr
    3134:	f44f 7302 	mov.w	r3, #520	; 0x208
    3138:	f8ad 3014 	strh.w	r3, [sp, #20]
    313c:	bf14      	ite	ne
    313e:	f104 33ff 	addne.w	r3, r4, #4294967295
    3142:	4623      	moveq	r3, r4
    3144:	9304      	str	r3, [sp, #16]
    3146:	9307      	str	r3, [sp, #28]
    3148:	f64f 73ff 	movw	r3, #65535	; 0xffff
    314c:	9002      	str	r0, [sp, #8]
    314e:	9006      	str	r0, [sp, #24]
    3150:	f8ad 3016 	strh.w	r3, [sp, #22]
    3154:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3156:	ab21      	add	r3, sp, #132	; 0x84
    3158:	a902      	add	r1, sp, #8
    315a:	4628      	mov	r0, r5
    315c:	9301      	str	r3, [sp, #4]
    315e:	f000 fa33 	bl	35c8 <_svfiprintf_r>
    3162:	1c43      	adds	r3, r0, #1
    3164:	bfbc      	itt	lt
    3166:	238b      	movlt	r3, #139	; 0x8b
    3168:	602b      	strlt	r3, [r5, #0]
    316a:	2c00      	cmp	r4, #0
    316c:	d0dd      	beq.n	312a <sniprintf+0x16>
    316e:	9b02      	ldr	r3, [sp, #8]
    3170:	2200      	movs	r2, #0
    3172:	701a      	strb	r2, [r3, #0]
    3174:	e7d9      	b.n	312a <sniprintf+0x16>
    3176:	bf00      	nop
    3178:	2000026c 	.word	0x2000026c

0000317c <siprintf>:
    317c:	b40e      	push	{r1, r2, r3}
    317e:	b500      	push	{lr}
    3180:	b09c      	sub	sp, #112	; 0x70
    3182:	f44f 7102 	mov.w	r1, #520	; 0x208
    3186:	ab1d      	add	r3, sp, #116	; 0x74
    3188:	f8ad 1014 	strh.w	r1, [sp, #20]
    318c:	9002      	str	r0, [sp, #8]
    318e:	9006      	str	r0, [sp, #24]
    3190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3194:	480a      	ldr	r0, [pc, #40]	; (31c0 <siprintf+0x44>)
    3196:	9104      	str	r1, [sp, #16]
    3198:	9107      	str	r1, [sp, #28]
    319a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    319e:	f853 2b04 	ldr.w	r2, [r3], #4
    31a2:	f8ad 1016 	strh.w	r1, [sp, #22]
    31a6:	6800      	ldr	r0, [r0, #0]
    31a8:	9301      	str	r3, [sp, #4]
    31aa:	a902      	add	r1, sp, #8
    31ac:	f000 fa0c 	bl	35c8 <_svfiprintf_r>
    31b0:	9b02      	ldr	r3, [sp, #8]
    31b2:	2200      	movs	r2, #0
    31b4:	701a      	strb	r2, [r3, #0]
    31b6:	b01c      	add	sp, #112	; 0x70
    31b8:	f85d eb04 	ldr.w	lr, [sp], #4
    31bc:	b003      	add	sp, #12
    31be:	4770      	bx	lr
    31c0:	2000026c 	.word	0x2000026c

000031c4 <__sread>:
    31c4:	b510      	push	{r4, lr}
    31c6:	460c      	mov	r4, r1
    31c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    31cc:	f001 f898 	bl	4300 <_read_r>
    31d0:	2800      	cmp	r0, #0
    31d2:	bfab      	itete	ge
    31d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    31d6:	89a3      	ldrhlt	r3, [r4, #12]
    31d8:	181b      	addge	r3, r3, r0
    31da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    31de:	bfac      	ite	ge
    31e0:	6563      	strge	r3, [r4, #84]	; 0x54
    31e2:	81a3      	strhlt	r3, [r4, #12]
    31e4:	bd10      	pop	{r4, pc}

000031e6 <__swrite>:
    31e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31ea:	461f      	mov	r7, r3
    31ec:	898b      	ldrh	r3, [r1, #12]
    31ee:	05db      	lsls	r3, r3, #23
    31f0:	4605      	mov	r5, r0
    31f2:	460c      	mov	r4, r1
    31f4:	4616      	mov	r6, r2
    31f6:	d505      	bpl.n	3204 <__swrite+0x1e>
    31f8:	2302      	movs	r3, #2
    31fa:	2200      	movs	r2, #0
    31fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3200:	f000 f906 	bl	3410 <_lseek_r>
    3204:	89a3      	ldrh	r3, [r4, #12]
    3206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    320a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    320e:	81a3      	strh	r3, [r4, #12]
    3210:	4632      	mov	r2, r6
    3212:	463b      	mov	r3, r7
    3214:	4628      	mov	r0, r5
    3216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    321a:	f000 b869 	b.w	32f0 <_write_r>

0000321e <__sseek>:
    321e:	b510      	push	{r4, lr}
    3220:	460c      	mov	r4, r1
    3222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3226:	f000 f8f3 	bl	3410 <_lseek_r>
    322a:	1c43      	adds	r3, r0, #1
    322c:	89a3      	ldrh	r3, [r4, #12]
    322e:	bf15      	itete	ne
    3230:	6560      	strne	r0, [r4, #84]	; 0x54
    3232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    323a:	81a3      	strheq	r3, [r4, #12]
    323c:	bf18      	it	ne
    323e:	81a3      	strhne	r3, [r4, #12]
    3240:	bd10      	pop	{r4, pc}

00003242 <__sclose>:
    3242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3246:	f000 b8d3 	b.w	33f0 <_close_r>
	...

0000324c <__swbuf_r>:
    324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    324e:	460e      	mov	r6, r1
    3250:	4614      	mov	r4, r2
    3252:	4605      	mov	r5, r0
    3254:	b118      	cbz	r0, 325e <__swbuf_r+0x12>
    3256:	6983      	ldr	r3, [r0, #24]
    3258:	b90b      	cbnz	r3, 325e <__swbuf_r+0x12>
    325a:	f7ff fc83 	bl	2b64 <__sinit>
    325e:	4b21      	ldr	r3, [pc, #132]	; (32e4 <__swbuf_r+0x98>)
    3260:	429c      	cmp	r4, r3
    3262:	d12a      	bne.n	32ba <__swbuf_r+0x6e>
    3264:	686c      	ldr	r4, [r5, #4]
    3266:	69a3      	ldr	r3, [r4, #24]
    3268:	60a3      	str	r3, [r4, #8]
    326a:	89a3      	ldrh	r3, [r4, #12]
    326c:	071a      	lsls	r2, r3, #28
    326e:	d52e      	bpl.n	32ce <__swbuf_r+0x82>
    3270:	6923      	ldr	r3, [r4, #16]
    3272:	b363      	cbz	r3, 32ce <__swbuf_r+0x82>
    3274:	6923      	ldr	r3, [r4, #16]
    3276:	6820      	ldr	r0, [r4, #0]
    3278:	1ac0      	subs	r0, r0, r3
    327a:	6963      	ldr	r3, [r4, #20]
    327c:	b2f6      	uxtb	r6, r6
    327e:	4298      	cmp	r0, r3
    3280:	4637      	mov	r7, r6
    3282:	db04      	blt.n	328e <__swbuf_r+0x42>
    3284:	4621      	mov	r1, r4
    3286:	4628      	mov	r0, r5
    3288:	f7ff fbf0 	bl	2a6c <_fflush_r>
    328c:	bb28      	cbnz	r0, 32da <__swbuf_r+0x8e>
    328e:	68a3      	ldr	r3, [r4, #8]
    3290:	3b01      	subs	r3, #1
    3292:	60a3      	str	r3, [r4, #8]
    3294:	6823      	ldr	r3, [r4, #0]
    3296:	1c5a      	adds	r2, r3, #1
    3298:	6022      	str	r2, [r4, #0]
    329a:	701e      	strb	r6, [r3, #0]
    329c:	6963      	ldr	r3, [r4, #20]
    329e:	3001      	adds	r0, #1
    32a0:	4298      	cmp	r0, r3
    32a2:	d004      	beq.n	32ae <__swbuf_r+0x62>
    32a4:	89a3      	ldrh	r3, [r4, #12]
    32a6:	07db      	lsls	r3, r3, #31
    32a8:	d519      	bpl.n	32de <__swbuf_r+0x92>
    32aa:	2e0a      	cmp	r6, #10
    32ac:	d117      	bne.n	32de <__swbuf_r+0x92>
    32ae:	4621      	mov	r1, r4
    32b0:	4628      	mov	r0, r5
    32b2:	f7ff fbdb 	bl	2a6c <_fflush_r>
    32b6:	b190      	cbz	r0, 32de <__swbuf_r+0x92>
    32b8:	e00f      	b.n	32da <__swbuf_r+0x8e>
    32ba:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <__swbuf_r+0x9c>)
    32bc:	429c      	cmp	r4, r3
    32be:	d101      	bne.n	32c4 <__swbuf_r+0x78>
    32c0:	68ac      	ldr	r4, [r5, #8]
    32c2:	e7d0      	b.n	3266 <__swbuf_r+0x1a>
    32c4:	4b09      	ldr	r3, [pc, #36]	; (32ec <__swbuf_r+0xa0>)
    32c6:	429c      	cmp	r4, r3
    32c8:	bf08      	it	eq
    32ca:	68ec      	ldreq	r4, [r5, #12]
    32cc:	e7cb      	b.n	3266 <__swbuf_r+0x1a>
    32ce:	4621      	mov	r1, r4
    32d0:	4628      	mov	r0, r5
    32d2:	f000 f81f 	bl	3314 <__swsetup_r>
    32d6:	2800      	cmp	r0, #0
    32d8:	d0cc      	beq.n	3274 <__swbuf_r+0x28>
    32da:	f04f 37ff 	mov.w	r7, #4294967295
    32de:	4638      	mov	r0, r7
    32e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32e2:	bf00      	nop
    32e4:	000051f0 	.word	0x000051f0
    32e8:	00005210 	.word	0x00005210
    32ec:	000051d0 	.word	0x000051d0

000032f0 <_write_r>:
    32f0:	b538      	push	{r3, r4, r5, lr}
    32f2:	4c07      	ldr	r4, [pc, #28]	; (3310 <_write_r+0x20>)
    32f4:	4605      	mov	r5, r0
    32f6:	4608      	mov	r0, r1
    32f8:	4611      	mov	r1, r2
    32fa:	2200      	movs	r2, #0
    32fc:	6022      	str	r2, [r4, #0]
    32fe:	461a      	mov	r2, r3
    3300:	f7fe fee6 	bl	20d0 <_write>
    3304:	1c43      	adds	r3, r0, #1
    3306:	d102      	bne.n	330e <_write_r+0x1e>
    3308:	6823      	ldr	r3, [r4, #0]
    330a:	b103      	cbz	r3, 330e <_write_r+0x1e>
    330c:	602b      	str	r3, [r5, #0]
    330e:	bd38      	pop	{r3, r4, r5, pc}
    3310:	200046fc 	.word	0x200046fc

00003314 <__swsetup_r>:
    3314:	4b32      	ldr	r3, [pc, #200]	; (33e0 <__swsetup_r+0xcc>)
    3316:	b570      	push	{r4, r5, r6, lr}
    3318:	681d      	ldr	r5, [r3, #0]
    331a:	4606      	mov	r6, r0
    331c:	460c      	mov	r4, r1
    331e:	b125      	cbz	r5, 332a <__swsetup_r+0x16>
    3320:	69ab      	ldr	r3, [r5, #24]
    3322:	b913      	cbnz	r3, 332a <__swsetup_r+0x16>
    3324:	4628      	mov	r0, r5
    3326:	f7ff fc1d 	bl	2b64 <__sinit>
    332a:	4b2e      	ldr	r3, [pc, #184]	; (33e4 <__swsetup_r+0xd0>)
    332c:	429c      	cmp	r4, r3
    332e:	d10f      	bne.n	3350 <__swsetup_r+0x3c>
    3330:	686c      	ldr	r4, [r5, #4]
    3332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3336:	b29a      	uxth	r2, r3
    3338:	0715      	lsls	r5, r2, #28
    333a:	d42c      	bmi.n	3396 <__swsetup_r+0x82>
    333c:	06d0      	lsls	r0, r2, #27
    333e:	d411      	bmi.n	3364 <__swsetup_r+0x50>
    3340:	2209      	movs	r2, #9
    3342:	6032      	str	r2, [r6, #0]
    3344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3348:	81a3      	strh	r3, [r4, #12]
    334a:	f04f 30ff 	mov.w	r0, #4294967295
    334e:	bd70      	pop	{r4, r5, r6, pc}
    3350:	4b25      	ldr	r3, [pc, #148]	; (33e8 <__swsetup_r+0xd4>)
    3352:	429c      	cmp	r4, r3
    3354:	d101      	bne.n	335a <__swsetup_r+0x46>
    3356:	68ac      	ldr	r4, [r5, #8]
    3358:	e7eb      	b.n	3332 <__swsetup_r+0x1e>
    335a:	4b24      	ldr	r3, [pc, #144]	; (33ec <__swsetup_r+0xd8>)
    335c:	429c      	cmp	r4, r3
    335e:	bf08      	it	eq
    3360:	68ec      	ldreq	r4, [r5, #12]
    3362:	e7e6      	b.n	3332 <__swsetup_r+0x1e>
    3364:	0751      	lsls	r1, r2, #29
    3366:	d512      	bpl.n	338e <__swsetup_r+0x7a>
    3368:	6b61      	ldr	r1, [r4, #52]	; 0x34
    336a:	b141      	cbz	r1, 337e <__swsetup_r+0x6a>
    336c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3370:	4299      	cmp	r1, r3
    3372:	d002      	beq.n	337a <__swsetup_r+0x66>
    3374:	4630      	mov	r0, r6
    3376:	f7ff fcc7 	bl	2d08 <_free_r>
    337a:	2300      	movs	r3, #0
    337c:	6363      	str	r3, [r4, #52]	; 0x34
    337e:	89a3      	ldrh	r3, [r4, #12]
    3380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    3384:	81a3      	strh	r3, [r4, #12]
    3386:	2300      	movs	r3, #0
    3388:	6063      	str	r3, [r4, #4]
    338a:	6923      	ldr	r3, [r4, #16]
    338c:	6023      	str	r3, [r4, #0]
    338e:	89a3      	ldrh	r3, [r4, #12]
    3390:	f043 0308 	orr.w	r3, r3, #8
    3394:	81a3      	strh	r3, [r4, #12]
    3396:	6923      	ldr	r3, [r4, #16]
    3398:	b94b      	cbnz	r3, 33ae <__swsetup_r+0x9a>
    339a:	89a3      	ldrh	r3, [r4, #12]
    339c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    33a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    33a4:	d003      	beq.n	33ae <__swsetup_r+0x9a>
    33a6:	4621      	mov	r1, r4
    33a8:	4630      	mov	r0, r6
    33aa:	f000 f867 	bl	347c <__smakebuf_r>
    33ae:	89a2      	ldrh	r2, [r4, #12]
    33b0:	f012 0301 	ands.w	r3, r2, #1
    33b4:	d00c      	beq.n	33d0 <__swsetup_r+0xbc>
    33b6:	2300      	movs	r3, #0
    33b8:	60a3      	str	r3, [r4, #8]
    33ba:	6963      	ldr	r3, [r4, #20]
    33bc:	425b      	negs	r3, r3
    33be:	61a3      	str	r3, [r4, #24]
    33c0:	6923      	ldr	r3, [r4, #16]
    33c2:	b953      	cbnz	r3, 33da <__swsetup_r+0xc6>
    33c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    33c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    33cc:	d1ba      	bne.n	3344 <__swsetup_r+0x30>
    33ce:	bd70      	pop	{r4, r5, r6, pc}
    33d0:	0792      	lsls	r2, r2, #30
    33d2:	bf58      	it	pl
    33d4:	6963      	ldrpl	r3, [r4, #20]
    33d6:	60a3      	str	r3, [r4, #8]
    33d8:	e7f2      	b.n	33c0 <__swsetup_r+0xac>
    33da:	2000      	movs	r0, #0
    33dc:	e7f7      	b.n	33ce <__swsetup_r+0xba>
    33de:	bf00      	nop
    33e0:	2000026c 	.word	0x2000026c
    33e4:	000051f0 	.word	0x000051f0
    33e8:	00005210 	.word	0x00005210
    33ec:	000051d0 	.word	0x000051d0

000033f0 <_close_r>:
    33f0:	b538      	push	{r3, r4, r5, lr}
    33f2:	4c06      	ldr	r4, [pc, #24]	; (340c <_close_r+0x1c>)
    33f4:	2300      	movs	r3, #0
    33f6:	4605      	mov	r5, r0
    33f8:	4608      	mov	r0, r1
    33fa:	6023      	str	r3, [r4, #0]
    33fc:	f7fd faa8 	bl	950 <_close>
    3400:	1c43      	adds	r3, r0, #1
    3402:	d102      	bne.n	340a <_close_r+0x1a>
    3404:	6823      	ldr	r3, [r4, #0]
    3406:	b103      	cbz	r3, 340a <_close_r+0x1a>
    3408:	602b      	str	r3, [r5, #0]
    340a:	bd38      	pop	{r3, r4, r5, pc}
    340c:	200046fc 	.word	0x200046fc

00003410 <_lseek_r>:
    3410:	b538      	push	{r3, r4, r5, lr}
    3412:	4c07      	ldr	r4, [pc, #28]	; (3430 <_lseek_r+0x20>)
    3414:	4605      	mov	r5, r0
    3416:	4608      	mov	r0, r1
    3418:	4611      	mov	r1, r2
    341a:	2200      	movs	r2, #0
    341c:	6022      	str	r2, [r4, #0]
    341e:	461a      	mov	r2, r3
    3420:	f7fd faa0 	bl	964 <_lseek>
    3424:	1c43      	adds	r3, r0, #1
    3426:	d102      	bne.n	342e <_lseek_r+0x1e>
    3428:	6823      	ldr	r3, [r4, #0]
    342a:	b103      	cbz	r3, 342e <_lseek_r+0x1e>
    342c:	602b      	str	r3, [r5, #0]
    342e:	bd38      	pop	{r3, r4, r5, pc}
    3430:	200046fc 	.word	0x200046fc

00003434 <__swhatbuf_r>:
    3434:	b570      	push	{r4, r5, r6, lr}
    3436:	460e      	mov	r6, r1
    3438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    343c:	2900      	cmp	r1, #0
    343e:	b090      	sub	sp, #64	; 0x40
    3440:	4614      	mov	r4, r2
    3442:	461d      	mov	r5, r3
    3444:	da07      	bge.n	3456 <__swhatbuf_r+0x22>
    3446:	2300      	movs	r3, #0
    3448:	602b      	str	r3, [r5, #0]
    344a:	89b3      	ldrh	r3, [r6, #12]
    344c:	061a      	lsls	r2, r3, #24
    344e:	d410      	bmi.n	3472 <__swhatbuf_r+0x3e>
    3450:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3454:	e00e      	b.n	3474 <__swhatbuf_r+0x40>
    3456:	aa01      	add	r2, sp, #4
    3458:	f001 f9f8 	bl	484c <_fstat_r>
    345c:	2800      	cmp	r0, #0
    345e:	dbf2      	blt.n	3446 <__swhatbuf_r+0x12>
    3460:	9a02      	ldr	r2, [sp, #8]
    3462:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3466:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    346a:	425a      	negs	r2, r3
    346c:	415a      	adcs	r2, r3
    346e:	602a      	str	r2, [r5, #0]
    3470:	e7ee      	b.n	3450 <__swhatbuf_r+0x1c>
    3472:	2340      	movs	r3, #64	; 0x40
    3474:	2000      	movs	r0, #0
    3476:	6023      	str	r3, [r4, #0]
    3478:	b010      	add	sp, #64	; 0x40
    347a:	bd70      	pop	{r4, r5, r6, pc}

0000347c <__smakebuf_r>:
    347c:	898b      	ldrh	r3, [r1, #12]
    347e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3480:	079d      	lsls	r5, r3, #30
    3482:	4606      	mov	r6, r0
    3484:	460c      	mov	r4, r1
    3486:	d507      	bpl.n	3498 <__smakebuf_r+0x1c>
    3488:	f104 0347 	add.w	r3, r4, #71	; 0x47
    348c:	6023      	str	r3, [r4, #0]
    348e:	6123      	str	r3, [r4, #16]
    3490:	2301      	movs	r3, #1
    3492:	6163      	str	r3, [r4, #20]
    3494:	b002      	add	sp, #8
    3496:	bd70      	pop	{r4, r5, r6, pc}
    3498:	ab01      	add	r3, sp, #4
    349a:	466a      	mov	r2, sp
    349c:	f7ff ffca 	bl	3434 <__swhatbuf_r>
    34a0:	9900      	ldr	r1, [sp, #0]
    34a2:	4605      	mov	r5, r0
    34a4:	4630      	mov	r0, r6
    34a6:	f7ff fc7d 	bl	2da4 <_malloc_r>
    34aa:	b948      	cbnz	r0, 34c0 <__smakebuf_r+0x44>
    34ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    34b0:	059a      	lsls	r2, r3, #22
    34b2:	d4ef      	bmi.n	3494 <__smakebuf_r+0x18>
    34b4:	f023 0303 	bic.w	r3, r3, #3
    34b8:	f043 0302 	orr.w	r3, r3, #2
    34bc:	81a3      	strh	r3, [r4, #12]
    34be:	e7e3      	b.n	3488 <__smakebuf_r+0xc>
    34c0:	4b0d      	ldr	r3, [pc, #52]	; (34f8 <__smakebuf_r+0x7c>)
    34c2:	62b3      	str	r3, [r6, #40]	; 0x28
    34c4:	89a3      	ldrh	r3, [r4, #12]
    34c6:	6020      	str	r0, [r4, #0]
    34c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    34cc:	81a3      	strh	r3, [r4, #12]
    34ce:	9b00      	ldr	r3, [sp, #0]
    34d0:	6163      	str	r3, [r4, #20]
    34d2:	9b01      	ldr	r3, [sp, #4]
    34d4:	6120      	str	r0, [r4, #16]
    34d6:	b15b      	cbz	r3, 34f0 <__smakebuf_r+0x74>
    34d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    34dc:	4630      	mov	r0, r6
    34de:	f001 f9c7 	bl	4870 <_isatty_r>
    34e2:	b128      	cbz	r0, 34f0 <__smakebuf_r+0x74>
    34e4:	89a3      	ldrh	r3, [r4, #12]
    34e6:	f023 0303 	bic.w	r3, r3, #3
    34ea:	f043 0301 	orr.w	r3, r3, #1
    34ee:	81a3      	strh	r3, [r4, #12]
    34f0:	89a3      	ldrh	r3, [r4, #12]
    34f2:	431d      	orrs	r5, r3
    34f4:	81a5      	strh	r5, [r4, #12]
    34f6:	e7cd      	b.n	3494 <__smakebuf_r+0x18>
    34f8:	00002ae5 	.word	0x00002ae5

000034fc <malloc>:
    34fc:	4b02      	ldr	r3, [pc, #8]	; (3508 <malloc+0xc>)
    34fe:	4601      	mov	r1, r0
    3500:	6818      	ldr	r0, [r3, #0]
    3502:	f7ff bc4f 	b.w	2da4 <_malloc_r>
    3506:	bf00      	nop
    3508:	2000026c 	.word	0x2000026c

0000350c <__malloc_lock>:
    350c:	4770      	bx	lr

0000350e <__malloc_unlock>:
    350e:	4770      	bx	lr

00003510 <__ssputs_r>:
    3510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3514:	688e      	ldr	r6, [r1, #8]
    3516:	429e      	cmp	r6, r3
    3518:	4682      	mov	sl, r0
    351a:	460c      	mov	r4, r1
    351c:	4691      	mov	r9, r2
    351e:	4698      	mov	r8, r3
    3520:	d835      	bhi.n	358e <__ssputs_r+0x7e>
    3522:	898a      	ldrh	r2, [r1, #12]
    3524:	f412 6f90 	tst.w	r2, #1152	; 0x480
    3528:	d031      	beq.n	358e <__ssputs_r+0x7e>
    352a:	6825      	ldr	r5, [r4, #0]
    352c:	6909      	ldr	r1, [r1, #16]
    352e:	1a6f      	subs	r7, r5, r1
    3530:	6965      	ldr	r5, [r4, #20]
    3532:	2302      	movs	r3, #2
    3534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3538:	fb95 f5f3 	sdiv	r5, r5, r3
    353c:	f108 0301 	add.w	r3, r8, #1
    3540:	443b      	add	r3, r7
    3542:	429d      	cmp	r5, r3
    3544:	bf38      	it	cc
    3546:	461d      	movcc	r5, r3
    3548:	0553      	lsls	r3, r2, #21
    354a:	d531      	bpl.n	35b0 <__ssputs_r+0xa0>
    354c:	4629      	mov	r1, r5
    354e:	f7ff fc29 	bl	2da4 <_malloc_r>
    3552:	4606      	mov	r6, r0
    3554:	b950      	cbnz	r0, 356c <__ssputs_r+0x5c>
    3556:	230c      	movs	r3, #12
    3558:	f8ca 3000 	str.w	r3, [sl]
    355c:	89a3      	ldrh	r3, [r4, #12]
    355e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3562:	81a3      	strh	r3, [r4, #12]
    3564:	f04f 30ff 	mov.w	r0, #4294967295
    3568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    356c:	463a      	mov	r2, r7
    356e:	6921      	ldr	r1, [r4, #16]
    3570:	f001 fa06 	bl	4980 <memcpy>
    3574:	89a3      	ldrh	r3, [r4, #12]
    3576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    357e:	81a3      	strh	r3, [r4, #12]
    3580:	6126      	str	r6, [r4, #16]
    3582:	6165      	str	r5, [r4, #20]
    3584:	443e      	add	r6, r7
    3586:	1bed      	subs	r5, r5, r7
    3588:	6026      	str	r6, [r4, #0]
    358a:	60a5      	str	r5, [r4, #8]
    358c:	4646      	mov	r6, r8
    358e:	4546      	cmp	r6, r8
    3590:	bf28      	it	cs
    3592:	4646      	movcs	r6, r8
    3594:	4632      	mov	r2, r6
    3596:	4649      	mov	r1, r9
    3598:	6820      	ldr	r0, [r4, #0]
    359a:	f001 f9fc 	bl	4996 <memmove>
    359e:	68a3      	ldr	r3, [r4, #8]
    35a0:	1b9b      	subs	r3, r3, r6
    35a2:	60a3      	str	r3, [r4, #8]
    35a4:	6823      	ldr	r3, [r4, #0]
    35a6:	441e      	add	r6, r3
    35a8:	6026      	str	r6, [r4, #0]
    35aa:	2000      	movs	r0, #0
    35ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35b0:	462a      	mov	r2, r5
    35b2:	f001 fa0a 	bl	49ca <_realloc_r>
    35b6:	4606      	mov	r6, r0
    35b8:	2800      	cmp	r0, #0
    35ba:	d1e1      	bne.n	3580 <__ssputs_r+0x70>
    35bc:	6921      	ldr	r1, [r4, #16]
    35be:	4650      	mov	r0, sl
    35c0:	f7ff fba2 	bl	2d08 <_free_r>
    35c4:	e7c7      	b.n	3556 <__ssputs_r+0x46>
	...

000035c8 <_svfiprintf_r>:
    35c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35cc:	b09d      	sub	sp, #116	; 0x74
    35ce:	4680      	mov	r8, r0
    35d0:	9303      	str	r3, [sp, #12]
    35d2:	898b      	ldrh	r3, [r1, #12]
    35d4:	061c      	lsls	r4, r3, #24
    35d6:	460d      	mov	r5, r1
    35d8:	4616      	mov	r6, r2
    35da:	d50f      	bpl.n	35fc <_svfiprintf_r+0x34>
    35dc:	690b      	ldr	r3, [r1, #16]
    35de:	b96b      	cbnz	r3, 35fc <_svfiprintf_r+0x34>
    35e0:	2140      	movs	r1, #64	; 0x40
    35e2:	f7ff fbdf 	bl	2da4 <_malloc_r>
    35e6:	6028      	str	r0, [r5, #0]
    35e8:	6128      	str	r0, [r5, #16]
    35ea:	b928      	cbnz	r0, 35f8 <_svfiprintf_r+0x30>
    35ec:	230c      	movs	r3, #12
    35ee:	f8c8 3000 	str.w	r3, [r8]
    35f2:	f04f 30ff 	mov.w	r0, #4294967295
    35f6:	e0c5      	b.n	3784 <_svfiprintf_r+0x1bc>
    35f8:	2340      	movs	r3, #64	; 0x40
    35fa:	616b      	str	r3, [r5, #20]
    35fc:	2300      	movs	r3, #0
    35fe:	9309      	str	r3, [sp, #36]	; 0x24
    3600:	2320      	movs	r3, #32
    3602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3606:	2330      	movs	r3, #48	; 0x30
    3608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    360c:	f04f 0b01 	mov.w	fp, #1
    3610:	4637      	mov	r7, r6
    3612:	463c      	mov	r4, r7
    3614:	f814 3b01 	ldrb.w	r3, [r4], #1
    3618:	2b00      	cmp	r3, #0
    361a:	d13c      	bne.n	3696 <_svfiprintf_r+0xce>
    361c:	ebb7 0a06 	subs.w	sl, r7, r6
    3620:	d00b      	beq.n	363a <_svfiprintf_r+0x72>
    3622:	4653      	mov	r3, sl
    3624:	4632      	mov	r2, r6
    3626:	4629      	mov	r1, r5
    3628:	4640      	mov	r0, r8
    362a:	f7ff ff71 	bl	3510 <__ssputs_r>
    362e:	3001      	adds	r0, #1
    3630:	f000 80a3 	beq.w	377a <_svfiprintf_r+0x1b2>
    3634:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3636:	4453      	add	r3, sl
    3638:	9309      	str	r3, [sp, #36]	; 0x24
    363a:	783b      	ldrb	r3, [r7, #0]
    363c:	2b00      	cmp	r3, #0
    363e:	f000 809c 	beq.w	377a <_svfiprintf_r+0x1b2>
    3642:	2300      	movs	r3, #0
    3644:	f04f 32ff 	mov.w	r2, #4294967295
    3648:	9304      	str	r3, [sp, #16]
    364a:	9307      	str	r3, [sp, #28]
    364c:	9205      	str	r2, [sp, #20]
    364e:	9306      	str	r3, [sp, #24]
    3650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3654:	931a      	str	r3, [sp, #104]	; 0x68
    3656:	2205      	movs	r2, #5
    3658:	7821      	ldrb	r1, [r4, #0]
    365a:	4850      	ldr	r0, [pc, #320]	; (379c <_svfiprintf_r+0x1d4>)
    365c:	f001 f940 	bl	48e0 <memchr>
    3660:	1c67      	adds	r7, r4, #1
    3662:	9b04      	ldr	r3, [sp, #16]
    3664:	b9d8      	cbnz	r0, 369e <_svfiprintf_r+0xd6>
    3666:	06d9      	lsls	r1, r3, #27
    3668:	bf44      	itt	mi
    366a:	2220      	movmi	r2, #32
    366c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3670:	071a      	lsls	r2, r3, #28
    3672:	bf44      	itt	mi
    3674:	222b      	movmi	r2, #43	; 0x2b
    3676:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    367a:	7822      	ldrb	r2, [r4, #0]
    367c:	2a2a      	cmp	r2, #42	; 0x2a
    367e:	d016      	beq.n	36ae <_svfiprintf_r+0xe6>
    3680:	9a07      	ldr	r2, [sp, #28]
    3682:	2100      	movs	r1, #0
    3684:	200a      	movs	r0, #10
    3686:	4627      	mov	r7, r4
    3688:	3401      	adds	r4, #1
    368a:	783b      	ldrb	r3, [r7, #0]
    368c:	3b30      	subs	r3, #48	; 0x30
    368e:	2b09      	cmp	r3, #9
    3690:	d951      	bls.n	3736 <_svfiprintf_r+0x16e>
    3692:	b1c9      	cbz	r1, 36c8 <_svfiprintf_r+0x100>
    3694:	e011      	b.n	36ba <_svfiprintf_r+0xf2>
    3696:	2b25      	cmp	r3, #37	; 0x25
    3698:	d0c0      	beq.n	361c <_svfiprintf_r+0x54>
    369a:	4627      	mov	r7, r4
    369c:	e7b9      	b.n	3612 <_svfiprintf_r+0x4a>
    369e:	4a3f      	ldr	r2, [pc, #252]	; (379c <_svfiprintf_r+0x1d4>)
    36a0:	1a80      	subs	r0, r0, r2
    36a2:	fa0b f000 	lsl.w	r0, fp, r0
    36a6:	4318      	orrs	r0, r3
    36a8:	9004      	str	r0, [sp, #16]
    36aa:	463c      	mov	r4, r7
    36ac:	e7d3      	b.n	3656 <_svfiprintf_r+0x8e>
    36ae:	9a03      	ldr	r2, [sp, #12]
    36b0:	1d11      	adds	r1, r2, #4
    36b2:	6812      	ldr	r2, [r2, #0]
    36b4:	9103      	str	r1, [sp, #12]
    36b6:	2a00      	cmp	r2, #0
    36b8:	db01      	blt.n	36be <_svfiprintf_r+0xf6>
    36ba:	9207      	str	r2, [sp, #28]
    36bc:	e004      	b.n	36c8 <_svfiprintf_r+0x100>
    36be:	4252      	negs	r2, r2
    36c0:	f043 0302 	orr.w	r3, r3, #2
    36c4:	9207      	str	r2, [sp, #28]
    36c6:	9304      	str	r3, [sp, #16]
    36c8:	783b      	ldrb	r3, [r7, #0]
    36ca:	2b2e      	cmp	r3, #46	; 0x2e
    36cc:	d10e      	bne.n	36ec <_svfiprintf_r+0x124>
    36ce:	787b      	ldrb	r3, [r7, #1]
    36d0:	2b2a      	cmp	r3, #42	; 0x2a
    36d2:	f107 0101 	add.w	r1, r7, #1
    36d6:	d132      	bne.n	373e <_svfiprintf_r+0x176>
    36d8:	9b03      	ldr	r3, [sp, #12]
    36da:	1d1a      	adds	r2, r3, #4
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	9203      	str	r2, [sp, #12]
    36e0:	2b00      	cmp	r3, #0
    36e2:	bfb8      	it	lt
    36e4:	f04f 33ff 	movlt.w	r3, #4294967295
    36e8:	3702      	adds	r7, #2
    36ea:	9305      	str	r3, [sp, #20]
    36ec:	4c2c      	ldr	r4, [pc, #176]	; (37a0 <_svfiprintf_r+0x1d8>)
    36ee:	7839      	ldrb	r1, [r7, #0]
    36f0:	2203      	movs	r2, #3
    36f2:	4620      	mov	r0, r4
    36f4:	f001 f8f4 	bl	48e0 <memchr>
    36f8:	b138      	cbz	r0, 370a <_svfiprintf_r+0x142>
    36fa:	2340      	movs	r3, #64	; 0x40
    36fc:	1b00      	subs	r0, r0, r4
    36fe:	fa03 f000 	lsl.w	r0, r3, r0
    3702:	9b04      	ldr	r3, [sp, #16]
    3704:	4303      	orrs	r3, r0
    3706:	9304      	str	r3, [sp, #16]
    3708:	3701      	adds	r7, #1
    370a:	7839      	ldrb	r1, [r7, #0]
    370c:	4825      	ldr	r0, [pc, #148]	; (37a4 <_svfiprintf_r+0x1dc>)
    370e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3712:	2206      	movs	r2, #6
    3714:	1c7e      	adds	r6, r7, #1
    3716:	f001 f8e3 	bl	48e0 <memchr>
    371a:	2800      	cmp	r0, #0
    371c:	d035      	beq.n	378a <_svfiprintf_r+0x1c2>
    371e:	4b22      	ldr	r3, [pc, #136]	; (37a8 <_svfiprintf_r+0x1e0>)
    3720:	b9fb      	cbnz	r3, 3762 <_svfiprintf_r+0x19a>
    3722:	9b03      	ldr	r3, [sp, #12]
    3724:	3307      	adds	r3, #7
    3726:	f023 0307 	bic.w	r3, r3, #7
    372a:	3308      	adds	r3, #8
    372c:	9303      	str	r3, [sp, #12]
    372e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3730:	444b      	add	r3, r9
    3732:	9309      	str	r3, [sp, #36]	; 0x24
    3734:	e76c      	b.n	3610 <_svfiprintf_r+0x48>
    3736:	fb00 3202 	mla	r2, r0, r2, r3
    373a:	2101      	movs	r1, #1
    373c:	e7a3      	b.n	3686 <_svfiprintf_r+0xbe>
    373e:	2300      	movs	r3, #0
    3740:	9305      	str	r3, [sp, #20]
    3742:	4618      	mov	r0, r3
    3744:	240a      	movs	r4, #10
    3746:	460f      	mov	r7, r1
    3748:	3101      	adds	r1, #1
    374a:	783a      	ldrb	r2, [r7, #0]
    374c:	3a30      	subs	r2, #48	; 0x30
    374e:	2a09      	cmp	r2, #9
    3750:	d903      	bls.n	375a <_svfiprintf_r+0x192>
    3752:	2b00      	cmp	r3, #0
    3754:	d0ca      	beq.n	36ec <_svfiprintf_r+0x124>
    3756:	9005      	str	r0, [sp, #20]
    3758:	e7c8      	b.n	36ec <_svfiprintf_r+0x124>
    375a:	fb04 2000 	mla	r0, r4, r0, r2
    375e:	2301      	movs	r3, #1
    3760:	e7f1      	b.n	3746 <_svfiprintf_r+0x17e>
    3762:	ab03      	add	r3, sp, #12
    3764:	9300      	str	r3, [sp, #0]
    3766:	462a      	mov	r2, r5
    3768:	4b10      	ldr	r3, [pc, #64]	; (37ac <_svfiprintf_r+0x1e4>)
    376a:	a904      	add	r1, sp, #16
    376c:	4640      	mov	r0, r8
    376e:	f3af 8000 	nop.w
    3772:	f1b0 3fff 	cmp.w	r0, #4294967295
    3776:	4681      	mov	r9, r0
    3778:	d1d9      	bne.n	372e <_svfiprintf_r+0x166>
    377a:	89ab      	ldrh	r3, [r5, #12]
    377c:	065b      	lsls	r3, r3, #25
    377e:	f53f af38 	bmi.w	35f2 <_svfiprintf_r+0x2a>
    3782:	9809      	ldr	r0, [sp, #36]	; 0x24
    3784:	b01d      	add	sp, #116	; 0x74
    3786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    378a:	ab03      	add	r3, sp, #12
    378c:	9300      	str	r3, [sp, #0]
    378e:	462a      	mov	r2, r5
    3790:	4b06      	ldr	r3, [pc, #24]	; (37ac <_svfiprintf_r+0x1e4>)
    3792:	a904      	add	r1, sp, #16
    3794:	4640      	mov	r0, r8
    3796:	f000 f9bf 	bl	3b18 <_printf_i>
    379a:	e7ea      	b.n	3772 <_svfiprintf_r+0x1aa>
    379c:	00005234 	.word	0x00005234
    37a0:	0000523a 	.word	0x0000523a
    37a4:	0000523e 	.word	0x0000523e
    37a8:	00000000 	.word	0x00000000
    37ac:	00003511 	.word	0x00003511

000037b0 <__sfputc_r>:
    37b0:	6893      	ldr	r3, [r2, #8]
    37b2:	3b01      	subs	r3, #1
    37b4:	2b00      	cmp	r3, #0
    37b6:	b410      	push	{r4}
    37b8:	6093      	str	r3, [r2, #8]
    37ba:	da08      	bge.n	37ce <__sfputc_r+0x1e>
    37bc:	6994      	ldr	r4, [r2, #24]
    37be:	42a3      	cmp	r3, r4
    37c0:	db02      	blt.n	37c8 <__sfputc_r+0x18>
    37c2:	b2cb      	uxtb	r3, r1
    37c4:	2b0a      	cmp	r3, #10
    37c6:	d102      	bne.n	37ce <__sfputc_r+0x1e>
    37c8:	bc10      	pop	{r4}
    37ca:	f7ff bd3f 	b.w	324c <__swbuf_r>
    37ce:	6813      	ldr	r3, [r2, #0]
    37d0:	1c58      	adds	r0, r3, #1
    37d2:	6010      	str	r0, [r2, #0]
    37d4:	7019      	strb	r1, [r3, #0]
    37d6:	b2c8      	uxtb	r0, r1
    37d8:	bc10      	pop	{r4}
    37da:	4770      	bx	lr

000037dc <__sfputs_r>:
    37dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37de:	4606      	mov	r6, r0
    37e0:	460f      	mov	r7, r1
    37e2:	4614      	mov	r4, r2
    37e4:	18d5      	adds	r5, r2, r3
    37e6:	42ac      	cmp	r4, r5
    37e8:	d101      	bne.n	37ee <__sfputs_r+0x12>
    37ea:	2000      	movs	r0, #0
    37ec:	e007      	b.n	37fe <__sfputs_r+0x22>
    37ee:	463a      	mov	r2, r7
    37f0:	f814 1b01 	ldrb.w	r1, [r4], #1
    37f4:	4630      	mov	r0, r6
    37f6:	f7ff ffdb 	bl	37b0 <__sfputc_r>
    37fa:	1c43      	adds	r3, r0, #1
    37fc:	d1f3      	bne.n	37e6 <__sfputs_r+0xa>
    37fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003800 <_vfiprintf_r>:
    3800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3804:	b09d      	sub	sp, #116	; 0x74
    3806:	460c      	mov	r4, r1
    3808:	4617      	mov	r7, r2
    380a:	9303      	str	r3, [sp, #12]
    380c:	4606      	mov	r6, r0
    380e:	b118      	cbz	r0, 3818 <_vfiprintf_r+0x18>
    3810:	6983      	ldr	r3, [r0, #24]
    3812:	b90b      	cbnz	r3, 3818 <_vfiprintf_r+0x18>
    3814:	f7ff f9a6 	bl	2b64 <__sinit>
    3818:	4b7c      	ldr	r3, [pc, #496]	; (3a0c <_vfiprintf_r+0x20c>)
    381a:	429c      	cmp	r4, r3
    381c:	d157      	bne.n	38ce <_vfiprintf_r+0xce>
    381e:	6874      	ldr	r4, [r6, #4]
    3820:	89a3      	ldrh	r3, [r4, #12]
    3822:	0718      	lsls	r0, r3, #28
    3824:	d55d      	bpl.n	38e2 <_vfiprintf_r+0xe2>
    3826:	6923      	ldr	r3, [r4, #16]
    3828:	2b00      	cmp	r3, #0
    382a:	d05a      	beq.n	38e2 <_vfiprintf_r+0xe2>
    382c:	2300      	movs	r3, #0
    382e:	9309      	str	r3, [sp, #36]	; 0x24
    3830:	2320      	movs	r3, #32
    3832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3836:	2330      	movs	r3, #48	; 0x30
    3838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    383c:	f04f 0b01 	mov.w	fp, #1
    3840:	46b8      	mov	r8, r7
    3842:	4645      	mov	r5, r8
    3844:	f815 3b01 	ldrb.w	r3, [r5], #1
    3848:	2b00      	cmp	r3, #0
    384a:	d155      	bne.n	38f8 <_vfiprintf_r+0xf8>
    384c:	ebb8 0a07 	subs.w	sl, r8, r7
    3850:	d00b      	beq.n	386a <_vfiprintf_r+0x6a>
    3852:	4653      	mov	r3, sl
    3854:	463a      	mov	r2, r7
    3856:	4621      	mov	r1, r4
    3858:	4630      	mov	r0, r6
    385a:	f7ff ffbf 	bl	37dc <__sfputs_r>
    385e:	3001      	adds	r0, #1
    3860:	f000 80c4 	beq.w	39ec <_vfiprintf_r+0x1ec>
    3864:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3866:	4453      	add	r3, sl
    3868:	9309      	str	r3, [sp, #36]	; 0x24
    386a:	f898 3000 	ldrb.w	r3, [r8]
    386e:	2b00      	cmp	r3, #0
    3870:	f000 80bc 	beq.w	39ec <_vfiprintf_r+0x1ec>
    3874:	2300      	movs	r3, #0
    3876:	f04f 32ff 	mov.w	r2, #4294967295
    387a:	9304      	str	r3, [sp, #16]
    387c:	9307      	str	r3, [sp, #28]
    387e:	9205      	str	r2, [sp, #20]
    3880:	9306      	str	r3, [sp, #24]
    3882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3886:	931a      	str	r3, [sp, #104]	; 0x68
    3888:	2205      	movs	r2, #5
    388a:	7829      	ldrb	r1, [r5, #0]
    388c:	4860      	ldr	r0, [pc, #384]	; (3a10 <_vfiprintf_r+0x210>)
    388e:	f001 f827 	bl	48e0 <memchr>
    3892:	f105 0801 	add.w	r8, r5, #1
    3896:	9b04      	ldr	r3, [sp, #16]
    3898:	2800      	cmp	r0, #0
    389a:	d131      	bne.n	3900 <_vfiprintf_r+0x100>
    389c:	06d9      	lsls	r1, r3, #27
    389e:	bf44      	itt	mi
    38a0:	2220      	movmi	r2, #32
    38a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    38a6:	071a      	lsls	r2, r3, #28
    38a8:	bf44      	itt	mi
    38aa:	222b      	movmi	r2, #43	; 0x2b
    38ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    38b0:	782a      	ldrb	r2, [r5, #0]
    38b2:	2a2a      	cmp	r2, #42	; 0x2a
    38b4:	d02c      	beq.n	3910 <_vfiprintf_r+0x110>
    38b6:	9a07      	ldr	r2, [sp, #28]
    38b8:	2100      	movs	r1, #0
    38ba:	200a      	movs	r0, #10
    38bc:	46a8      	mov	r8, r5
    38be:	3501      	adds	r5, #1
    38c0:	f898 3000 	ldrb.w	r3, [r8]
    38c4:	3b30      	subs	r3, #48	; 0x30
    38c6:	2b09      	cmp	r3, #9
    38c8:	d96d      	bls.n	39a6 <_vfiprintf_r+0x1a6>
    38ca:	b371      	cbz	r1, 392a <_vfiprintf_r+0x12a>
    38cc:	e026      	b.n	391c <_vfiprintf_r+0x11c>
    38ce:	4b51      	ldr	r3, [pc, #324]	; (3a14 <_vfiprintf_r+0x214>)
    38d0:	429c      	cmp	r4, r3
    38d2:	d101      	bne.n	38d8 <_vfiprintf_r+0xd8>
    38d4:	68b4      	ldr	r4, [r6, #8]
    38d6:	e7a3      	b.n	3820 <_vfiprintf_r+0x20>
    38d8:	4b4f      	ldr	r3, [pc, #316]	; (3a18 <_vfiprintf_r+0x218>)
    38da:	429c      	cmp	r4, r3
    38dc:	bf08      	it	eq
    38de:	68f4      	ldreq	r4, [r6, #12]
    38e0:	e79e      	b.n	3820 <_vfiprintf_r+0x20>
    38e2:	4621      	mov	r1, r4
    38e4:	4630      	mov	r0, r6
    38e6:	f7ff fd15 	bl	3314 <__swsetup_r>
    38ea:	2800      	cmp	r0, #0
    38ec:	d09e      	beq.n	382c <_vfiprintf_r+0x2c>
    38ee:	f04f 30ff 	mov.w	r0, #4294967295
    38f2:	b01d      	add	sp, #116	; 0x74
    38f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38f8:	2b25      	cmp	r3, #37	; 0x25
    38fa:	d0a7      	beq.n	384c <_vfiprintf_r+0x4c>
    38fc:	46a8      	mov	r8, r5
    38fe:	e7a0      	b.n	3842 <_vfiprintf_r+0x42>
    3900:	4a43      	ldr	r2, [pc, #268]	; (3a10 <_vfiprintf_r+0x210>)
    3902:	1a80      	subs	r0, r0, r2
    3904:	fa0b f000 	lsl.w	r0, fp, r0
    3908:	4318      	orrs	r0, r3
    390a:	9004      	str	r0, [sp, #16]
    390c:	4645      	mov	r5, r8
    390e:	e7bb      	b.n	3888 <_vfiprintf_r+0x88>
    3910:	9a03      	ldr	r2, [sp, #12]
    3912:	1d11      	adds	r1, r2, #4
    3914:	6812      	ldr	r2, [r2, #0]
    3916:	9103      	str	r1, [sp, #12]
    3918:	2a00      	cmp	r2, #0
    391a:	db01      	blt.n	3920 <_vfiprintf_r+0x120>
    391c:	9207      	str	r2, [sp, #28]
    391e:	e004      	b.n	392a <_vfiprintf_r+0x12a>
    3920:	4252      	negs	r2, r2
    3922:	f043 0302 	orr.w	r3, r3, #2
    3926:	9207      	str	r2, [sp, #28]
    3928:	9304      	str	r3, [sp, #16]
    392a:	f898 3000 	ldrb.w	r3, [r8]
    392e:	2b2e      	cmp	r3, #46	; 0x2e
    3930:	d110      	bne.n	3954 <_vfiprintf_r+0x154>
    3932:	f898 3001 	ldrb.w	r3, [r8, #1]
    3936:	2b2a      	cmp	r3, #42	; 0x2a
    3938:	f108 0101 	add.w	r1, r8, #1
    393c:	d137      	bne.n	39ae <_vfiprintf_r+0x1ae>
    393e:	9b03      	ldr	r3, [sp, #12]
    3940:	1d1a      	adds	r2, r3, #4
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	9203      	str	r2, [sp, #12]
    3946:	2b00      	cmp	r3, #0
    3948:	bfb8      	it	lt
    394a:	f04f 33ff 	movlt.w	r3, #4294967295
    394e:	f108 0802 	add.w	r8, r8, #2
    3952:	9305      	str	r3, [sp, #20]
    3954:	4d31      	ldr	r5, [pc, #196]	; (3a1c <_vfiprintf_r+0x21c>)
    3956:	f898 1000 	ldrb.w	r1, [r8]
    395a:	2203      	movs	r2, #3
    395c:	4628      	mov	r0, r5
    395e:	f000 ffbf 	bl	48e0 <memchr>
    3962:	b140      	cbz	r0, 3976 <_vfiprintf_r+0x176>
    3964:	2340      	movs	r3, #64	; 0x40
    3966:	1b40      	subs	r0, r0, r5
    3968:	fa03 f000 	lsl.w	r0, r3, r0
    396c:	9b04      	ldr	r3, [sp, #16]
    396e:	4303      	orrs	r3, r0
    3970:	9304      	str	r3, [sp, #16]
    3972:	f108 0801 	add.w	r8, r8, #1
    3976:	f898 1000 	ldrb.w	r1, [r8]
    397a:	4829      	ldr	r0, [pc, #164]	; (3a20 <_vfiprintf_r+0x220>)
    397c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3980:	2206      	movs	r2, #6
    3982:	f108 0701 	add.w	r7, r8, #1
    3986:	f000 ffab 	bl	48e0 <memchr>
    398a:	2800      	cmp	r0, #0
    398c:	d034      	beq.n	39f8 <_vfiprintf_r+0x1f8>
    398e:	4b25      	ldr	r3, [pc, #148]	; (3a24 <_vfiprintf_r+0x224>)
    3990:	bb03      	cbnz	r3, 39d4 <_vfiprintf_r+0x1d4>
    3992:	9b03      	ldr	r3, [sp, #12]
    3994:	3307      	adds	r3, #7
    3996:	f023 0307 	bic.w	r3, r3, #7
    399a:	3308      	adds	r3, #8
    399c:	9303      	str	r3, [sp, #12]
    399e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    39a0:	444b      	add	r3, r9
    39a2:	9309      	str	r3, [sp, #36]	; 0x24
    39a4:	e74c      	b.n	3840 <_vfiprintf_r+0x40>
    39a6:	fb00 3202 	mla	r2, r0, r2, r3
    39aa:	2101      	movs	r1, #1
    39ac:	e786      	b.n	38bc <_vfiprintf_r+0xbc>
    39ae:	2300      	movs	r3, #0
    39b0:	9305      	str	r3, [sp, #20]
    39b2:	4618      	mov	r0, r3
    39b4:	250a      	movs	r5, #10
    39b6:	4688      	mov	r8, r1
    39b8:	3101      	adds	r1, #1
    39ba:	f898 2000 	ldrb.w	r2, [r8]
    39be:	3a30      	subs	r2, #48	; 0x30
    39c0:	2a09      	cmp	r2, #9
    39c2:	d903      	bls.n	39cc <_vfiprintf_r+0x1cc>
    39c4:	2b00      	cmp	r3, #0
    39c6:	d0c5      	beq.n	3954 <_vfiprintf_r+0x154>
    39c8:	9005      	str	r0, [sp, #20]
    39ca:	e7c3      	b.n	3954 <_vfiprintf_r+0x154>
    39cc:	fb05 2000 	mla	r0, r5, r0, r2
    39d0:	2301      	movs	r3, #1
    39d2:	e7f0      	b.n	39b6 <_vfiprintf_r+0x1b6>
    39d4:	ab03      	add	r3, sp, #12
    39d6:	9300      	str	r3, [sp, #0]
    39d8:	4622      	mov	r2, r4
    39da:	4b13      	ldr	r3, [pc, #76]	; (3a28 <_vfiprintf_r+0x228>)
    39dc:	a904      	add	r1, sp, #16
    39de:	4630      	mov	r0, r6
    39e0:	f3af 8000 	nop.w
    39e4:	f1b0 3fff 	cmp.w	r0, #4294967295
    39e8:	4681      	mov	r9, r0
    39ea:	d1d8      	bne.n	399e <_vfiprintf_r+0x19e>
    39ec:	89a3      	ldrh	r3, [r4, #12]
    39ee:	065b      	lsls	r3, r3, #25
    39f0:	f53f af7d 	bmi.w	38ee <_vfiprintf_r+0xee>
    39f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    39f6:	e77c      	b.n	38f2 <_vfiprintf_r+0xf2>
    39f8:	ab03      	add	r3, sp, #12
    39fa:	9300      	str	r3, [sp, #0]
    39fc:	4622      	mov	r2, r4
    39fe:	4b0a      	ldr	r3, [pc, #40]	; (3a28 <_vfiprintf_r+0x228>)
    3a00:	a904      	add	r1, sp, #16
    3a02:	4630      	mov	r0, r6
    3a04:	f000 f888 	bl	3b18 <_printf_i>
    3a08:	e7ec      	b.n	39e4 <_vfiprintf_r+0x1e4>
    3a0a:	bf00      	nop
    3a0c:	000051f0 	.word	0x000051f0
    3a10:	00005234 	.word	0x00005234
    3a14:	00005210 	.word	0x00005210
    3a18:	000051d0 	.word	0x000051d0
    3a1c:	0000523a 	.word	0x0000523a
    3a20:	0000523e 	.word	0x0000523e
    3a24:	00000000 	.word	0x00000000
    3a28:	000037dd 	.word	0x000037dd

00003a2c <_printf_common>:
    3a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a30:	4691      	mov	r9, r2
    3a32:	461f      	mov	r7, r3
    3a34:	688a      	ldr	r2, [r1, #8]
    3a36:	690b      	ldr	r3, [r1, #16]
    3a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3a3c:	4293      	cmp	r3, r2
    3a3e:	bfb8      	it	lt
    3a40:	4613      	movlt	r3, r2
    3a42:	f8c9 3000 	str.w	r3, [r9]
    3a46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    3a4a:	4606      	mov	r6, r0
    3a4c:	460c      	mov	r4, r1
    3a4e:	b112      	cbz	r2, 3a56 <_printf_common+0x2a>
    3a50:	3301      	adds	r3, #1
    3a52:	f8c9 3000 	str.w	r3, [r9]
    3a56:	6823      	ldr	r3, [r4, #0]
    3a58:	0699      	lsls	r1, r3, #26
    3a5a:	bf42      	ittt	mi
    3a5c:	f8d9 3000 	ldrmi.w	r3, [r9]
    3a60:	3302      	addmi	r3, #2
    3a62:	f8c9 3000 	strmi.w	r3, [r9]
    3a66:	6825      	ldr	r5, [r4, #0]
    3a68:	f015 0506 	ands.w	r5, r5, #6
    3a6c:	d107      	bne.n	3a7e <_printf_common+0x52>
    3a6e:	f104 0a19 	add.w	sl, r4, #25
    3a72:	68e3      	ldr	r3, [r4, #12]
    3a74:	f8d9 2000 	ldr.w	r2, [r9]
    3a78:	1a9b      	subs	r3, r3, r2
    3a7a:	429d      	cmp	r5, r3
    3a7c:	db29      	blt.n	3ad2 <_printf_common+0xa6>
    3a7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    3a82:	6822      	ldr	r2, [r4, #0]
    3a84:	3300      	adds	r3, #0
    3a86:	bf18      	it	ne
    3a88:	2301      	movne	r3, #1
    3a8a:	0692      	lsls	r2, r2, #26
    3a8c:	d42e      	bmi.n	3aec <_printf_common+0xc0>
    3a8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    3a92:	4639      	mov	r1, r7
    3a94:	4630      	mov	r0, r6
    3a96:	47c0      	blx	r8
    3a98:	3001      	adds	r0, #1
    3a9a:	d021      	beq.n	3ae0 <_printf_common+0xb4>
    3a9c:	6823      	ldr	r3, [r4, #0]
    3a9e:	68e5      	ldr	r5, [r4, #12]
    3aa0:	f8d9 2000 	ldr.w	r2, [r9]
    3aa4:	f003 0306 	and.w	r3, r3, #6
    3aa8:	2b04      	cmp	r3, #4
    3aaa:	bf08      	it	eq
    3aac:	1aad      	subeq	r5, r5, r2
    3aae:	68a3      	ldr	r3, [r4, #8]
    3ab0:	6922      	ldr	r2, [r4, #16]
    3ab2:	bf0c      	ite	eq
    3ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3ab8:	2500      	movne	r5, #0
    3aba:	4293      	cmp	r3, r2
    3abc:	bfc4      	itt	gt
    3abe:	1a9b      	subgt	r3, r3, r2
    3ac0:	18ed      	addgt	r5, r5, r3
    3ac2:	f04f 0900 	mov.w	r9, #0
    3ac6:	341a      	adds	r4, #26
    3ac8:	454d      	cmp	r5, r9
    3aca:	d11b      	bne.n	3b04 <_printf_common+0xd8>
    3acc:	2000      	movs	r0, #0
    3ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ad2:	2301      	movs	r3, #1
    3ad4:	4652      	mov	r2, sl
    3ad6:	4639      	mov	r1, r7
    3ad8:	4630      	mov	r0, r6
    3ada:	47c0      	blx	r8
    3adc:	3001      	adds	r0, #1
    3ade:	d103      	bne.n	3ae8 <_printf_common+0xbc>
    3ae0:	f04f 30ff 	mov.w	r0, #4294967295
    3ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ae8:	3501      	adds	r5, #1
    3aea:	e7c2      	b.n	3a72 <_printf_common+0x46>
    3aec:	18e1      	adds	r1, r4, r3
    3aee:	1c5a      	adds	r2, r3, #1
    3af0:	2030      	movs	r0, #48	; 0x30
    3af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    3af6:	4422      	add	r2, r4
    3af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3b00:	3302      	adds	r3, #2
    3b02:	e7c4      	b.n	3a8e <_printf_common+0x62>
    3b04:	2301      	movs	r3, #1
    3b06:	4622      	mov	r2, r4
    3b08:	4639      	mov	r1, r7
    3b0a:	4630      	mov	r0, r6
    3b0c:	47c0      	blx	r8
    3b0e:	3001      	adds	r0, #1
    3b10:	d0e6      	beq.n	3ae0 <_printf_common+0xb4>
    3b12:	f109 0901 	add.w	r9, r9, #1
    3b16:	e7d7      	b.n	3ac8 <_printf_common+0x9c>

00003b18 <_printf_i>:
    3b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b1c:	4617      	mov	r7, r2
    3b1e:	7e0a      	ldrb	r2, [r1, #24]
    3b20:	b085      	sub	sp, #20
    3b22:	2a6e      	cmp	r2, #110	; 0x6e
    3b24:	4698      	mov	r8, r3
    3b26:	4606      	mov	r6, r0
    3b28:	460c      	mov	r4, r1
    3b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3b2c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3b30:	f000 80bc 	beq.w	3cac <_printf_i+0x194>
    3b34:	d81a      	bhi.n	3b6c <_printf_i+0x54>
    3b36:	2a63      	cmp	r2, #99	; 0x63
    3b38:	d02e      	beq.n	3b98 <_printf_i+0x80>
    3b3a:	d80a      	bhi.n	3b52 <_printf_i+0x3a>
    3b3c:	2a00      	cmp	r2, #0
    3b3e:	f000 80c8 	beq.w	3cd2 <_printf_i+0x1ba>
    3b42:	2a58      	cmp	r2, #88	; 0x58
    3b44:	f000 808a 	beq.w	3c5c <_printf_i+0x144>
    3b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3b4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    3b50:	e02a      	b.n	3ba8 <_printf_i+0x90>
    3b52:	2a64      	cmp	r2, #100	; 0x64
    3b54:	d001      	beq.n	3b5a <_printf_i+0x42>
    3b56:	2a69      	cmp	r2, #105	; 0x69
    3b58:	d1f6      	bne.n	3b48 <_printf_i+0x30>
    3b5a:	6821      	ldr	r1, [r4, #0]
    3b5c:	681a      	ldr	r2, [r3, #0]
    3b5e:	f011 0f80 	tst.w	r1, #128	; 0x80
    3b62:	d023      	beq.n	3bac <_printf_i+0x94>
    3b64:	1d11      	adds	r1, r2, #4
    3b66:	6019      	str	r1, [r3, #0]
    3b68:	6813      	ldr	r3, [r2, #0]
    3b6a:	e027      	b.n	3bbc <_printf_i+0xa4>
    3b6c:	2a73      	cmp	r2, #115	; 0x73
    3b6e:	f000 80b4 	beq.w	3cda <_printf_i+0x1c2>
    3b72:	d808      	bhi.n	3b86 <_printf_i+0x6e>
    3b74:	2a6f      	cmp	r2, #111	; 0x6f
    3b76:	d02a      	beq.n	3bce <_printf_i+0xb6>
    3b78:	2a70      	cmp	r2, #112	; 0x70
    3b7a:	d1e5      	bne.n	3b48 <_printf_i+0x30>
    3b7c:	680a      	ldr	r2, [r1, #0]
    3b7e:	f042 0220 	orr.w	r2, r2, #32
    3b82:	600a      	str	r2, [r1, #0]
    3b84:	e003      	b.n	3b8e <_printf_i+0x76>
    3b86:	2a75      	cmp	r2, #117	; 0x75
    3b88:	d021      	beq.n	3bce <_printf_i+0xb6>
    3b8a:	2a78      	cmp	r2, #120	; 0x78
    3b8c:	d1dc      	bne.n	3b48 <_printf_i+0x30>
    3b8e:	2278      	movs	r2, #120	; 0x78
    3b90:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    3b94:	496e      	ldr	r1, [pc, #440]	; (3d50 <_printf_i+0x238>)
    3b96:	e064      	b.n	3c62 <_printf_i+0x14a>
    3b98:	681a      	ldr	r2, [r3, #0]
    3b9a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    3b9e:	1d11      	adds	r1, r2, #4
    3ba0:	6019      	str	r1, [r3, #0]
    3ba2:	6813      	ldr	r3, [r2, #0]
    3ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3ba8:	2301      	movs	r3, #1
    3baa:	e0a3      	b.n	3cf4 <_printf_i+0x1dc>
    3bac:	f011 0f40 	tst.w	r1, #64	; 0x40
    3bb0:	f102 0104 	add.w	r1, r2, #4
    3bb4:	6019      	str	r1, [r3, #0]
    3bb6:	d0d7      	beq.n	3b68 <_printf_i+0x50>
    3bb8:	f9b2 3000 	ldrsh.w	r3, [r2]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	da03      	bge.n	3bc8 <_printf_i+0xb0>
    3bc0:	222d      	movs	r2, #45	; 0x2d
    3bc2:	425b      	negs	r3, r3
    3bc4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3bc8:	4962      	ldr	r1, [pc, #392]	; (3d54 <_printf_i+0x23c>)
    3bca:	220a      	movs	r2, #10
    3bcc:	e017      	b.n	3bfe <_printf_i+0xe6>
    3bce:	6820      	ldr	r0, [r4, #0]
    3bd0:	6819      	ldr	r1, [r3, #0]
    3bd2:	f010 0f80 	tst.w	r0, #128	; 0x80
    3bd6:	d003      	beq.n	3be0 <_printf_i+0xc8>
    3bd8:	1d08      	adds	r0, r1, #4
    3bda:	6018      	str	r0, [r3, #0]
    3bdc:	680b      	ldr	r3, [r1, #0]
    3bde:	e006      	b.n	3bee <_printf_i+0xd6>
    3be0:	f010 0f40 	tst.w	r0, #64	; 0x40
    3be4:	f101 0004 	add.w	r0, r1, #4
    3be8:	6018      	str	r0, [r3, #0]
    3bea:	d0f7      	beq.n	3bdc <_printf_i+0xc4>
    3bec:	880b      	ldrh	r3, [r1, #0]
    3bee:	4959      	ldr	r1, [pc, #356]	; (3d54 <_printf_i+0x23c>)
    3bf0:	2a6f      	cmp	r2, #111	; 0x6f
    3bf2:	bf14      	ite	ne
    3bf4:	220a      	movne	r2, #10
    3bf6:	2208      	moveq	r2, #8
    3bf8:	2000      	movs	r0, #0
    3bfa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3bfe:	6865      	ldr	r5, [r4, #4]
    3c00:	60a5      	str	r5, [r4, #8]
    3c02:	2d00      	cmp	r5, #0
    3c04:	f2c0 809c 	blt.w	3d40 <_printf_i+0x228>
    3c08:	6820      	ldr	r0, [r4, #0]
    3c0a:	f020 0004 	bic.w	r0, r0, #4
    3c0e:	6020      	str	r0, [r4, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d13f      	bne.n	3c94 <_printf_i+0x17c>
    3c14:	2d00      	cmp	r5, #0
    3c16:	f040 8095 	bne.w	3d44 <_printf_i+0x22c>
    3c1a:	4675      	mov	r5, lr
    3c1c:	2a08      	cmp	r2, #8
    3c1e:	d10b      	bne.n	3c38 <_printf_i+0x120>
    3c20:	6823      	ldr	r3, [r4, #0]
    3c22:	07da      	lsls	r2, r3, #31
    3c24:	d508      	bpl.n	3c38 <_printf_i+0x120>
    3c26:	6923      	ldr	r3, [r4, #16]
    3c28:	6862      	ldr	r2, [r4, #4]
    3c2a:	429a      	cmp	r2, r3
    3c2c:	bfde      	ittt	le
    3c2e:	2330      	movle	r3, #48	; 0x30
    3c30:	f805 3c01 	strble.w	r3, [r5, #-1]
    3c34:	f105 35ff 	addle.w	r5, r5, #4294967295
    3c38:	ebae 0305 	sub.w	r3, lr, r5
    3c3c:	6123      	str	r3, [r4, #16]
    3c3e:	f8cd 8000 	str.w	r8, [sp]
    3c42:	463b      	mov	r3, r7
    3c44:	aa03      	add	r2, sp, #12
    3c46:	4621      	mov	r1, r4
    3c48:	4630      	mov	r0, r6
    3c4a:	f7ff feef 	bl	3a2c <_printf_common>
    3c4e:	3001      	adds	r0, #1
    3c50:	d155      	bne.n	3cfe <_printf_i+0x1e6>
    3c52:	f04f 30ff 	mov.w	r0, #4294967295
    3c56:	b005      	add	sp, #20
    3c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c5c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    3c60:	493c      	ldr	r1, [pc, #240]	; (3d54 <_printf_i+0x23c>)
    3c62:	6822      	ldr	r2, [r4, #0]
    3c64:	6818      	ldr	r0, [r3, #0]
    3c66:	f012 0f80 	tst.w	r2, #128	; 0x80
    3c6a:	f100 0504 	add.w	r5, r0, #4
    3c6e:	601d      	str	r5, [r3, #0]
    3c70:	d001      	beq.n	3c76 <_printf_i+0x15e>
    3c72:	6803      	ldr	r3, [r0, #0]
    3c74:	e002      	b.n	3c7c <_printf_i+0x164>
    3c76:	0655      	lsls	r5, r2, #25
    3c78:	d5fb      	bpl.n	3c72 <_printf_i+0x15a>
    3c7a:	8803      	ldrh	r3, [r0, #0]
    3c7c:	07d0      	lsls	r0, r2, #31
    3c7e:	bf44      	itt	mi
    3c80:	f042 0220 	orrmi.w	r2, r2, #32
    3c84:	6022      	strmi	r2, [r4, #0]
    3c86:	b91b      	cbnz	r3, 3c90 <_printf_i+0x178>
    3c88:	6822      	ldr	r2, [r4, #0]
    3c8a:	f022 0220 	bic.w	r2, r2, #32
    3c8e:	6022      	str	r2, [r4, #0]
    3c90:	2210      	movs	r2, #16
    3c92:	e7b1      	b.n	3bf8 <_printf_i+0xe0>
    3c94:	4675      	mov	r5, lr
    3c96:	fbb3 f0f2 	udiv	r0, r3, r2
    3c9a:	fb02 3310 	mls	r3, r2, r0, r3
    3c9e:	5ccb      	ldrb	r3, [r1, r3]
    3ca0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3ca4:	4603      	mov	r3, r0
    3ca6:	2800      	cmp	r0, #0
    3ca8:	d1f5      	bne.n	3c96 <_printf_i+0x17e>
    3caa:	e7b7      	b.n	3c1c <_printf_i+0x104>
    3cac:	6808      	ldr	r0, [r1, #0]
    3cae:	681a      	ldr	r2, [r3, #0]
    3cb0:	6949      	ldr	r1, [r1, #20]
    3cb2:	f010 0f80 	tst.w	r0, #128	; 0x80
    3cb6:	d004      	beq.n	3cc2 <_printf_i+0x1aa>
    3cb8:	1d10      	adds	r0, r2, #4
    3cba:	6018      	str	r0, [r3, #0]
    3cbc:	6813      	ldr	r3, [r2, #0]
    3cbe:	6019      	str	r1, [r3, #0]
    3cc0:	e007      	b.n	3cd2 <_printf_i+0x1ba>
    3cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
    3cc6:	f102 0004 	add.w	r0, r2, #4
    3cca:	6018      	str	r0, [r3, #0]
    3ccc:	6813      	ldr	r3, [r2, #0]
    3cce:	d0f6      	beq.n	3cbe <_printf_i+0x1a6>
    3cd0:	8019      	strh	r1, [r3, #0]
    3cd2:	2300      	movs	r3, #0
    3cd4:	6123      	str	r3, [r4, #16]
    3cd6:	4675      	mov	r5, lr
    3cd8:	e7b1      	b.n	3c3e <_printf_i+0x126>
    3cda:	681a      	ldr	r2, [r3, #0]
    3cdc:	1d11      	adds	r1, r2, #4
    3cde:	6019      	str	r1, [r3, #0]
    3ce0:	6815      	ldr	r5, [r2, #0]
    3ce2:	6862      	ldr	r2, [r4, #4]
    3ce4:	2100      	movs	r1, #0
    3ce6:	4628      	mov	r0, r5
    3ce8:	f000 fdfa 	bl	48e0 <memchr>
    3cec:	b108      	cbz	r0, 3cf2 <_printf_i+0x1da>
    3cee:	1b40      	subs	r0, r0, r5
    3cf0:	6060      	str	r0, [r4, #4]
    3cf2:	6863      	ldr	r3, [r4, #4]
    3cf4:	6123      	str	r3, [r4, #16]
    3cf6:	2300      	movs	r3, #0
    3cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3cfc:	e79f      	b.n	3c3e <_printf_i+0x126>
    3cfe:	6923      	ldr	r3, [r4, #16]
    3d00:	462a      	mov	r2, r5
    3d02:	4639      	mov	r1, r7
    3d04:	4630      	mov	r0, r6
    3d06:	47c0      	blx	r8
    3d08:	3001      	adds	r0, #1
    3d0a:	d0a2      	beq.n	3c52 <_printf_i+0x13a>
    3d0c:	6823      	ldr	r3, [r4, #0]
    3d0e:	079b      	lsls	r3, r3, #30
    3d10:	d507      	bpl.n	3d22 <_printf_i+0x20a>
    3d12:	2500      	movs	r5, #0
    3d14:	f104 0919 	add.w	r9, r4, #25
    3d18:	68e3      	ldr	r3, [r4, #12]
    3d1a:	9a03      	ldr	r2, [sp, #12]
    3d1c:	1a9b      	subs	r3, r3, r2
    3d1e:	429d      	cmp	r5, r3
    3d20:	db05      	blt.n	3d2e <_printf_i+0x216>
    3d22:	68e0      	ldr	r0, [r4, #12]
    3d24:	9b03      	ldr	r3, [sp, #12]
    3d26:	4298      	cmp	r0, r3
    3d28:	bfb8      	it	lt
    3d2a:	4618      	movlt	r0, r3
    3d2c:	e793      	b.n	3c56 <_printf_i+0x13e>
    3d2e:	2301      	movs	r3, #1
    3d30:	464a      	mov	r2, r9
    3d32:	4639      	mov	r1, r7
    3d34:	4630      	mov	r0, r6
    3d36:	47c0      	blx	r8
    3d38:	3001      	adds	r0, #1
    3d3a:	d08a      	beq.n	3c52 <_printf_i+0x13a>
    3d3c:	3501      	adds	r5, #1
    3d3e:	e7eb      	b.n	3d18 <_printf_i+0x200>
    3d40:	2b00      	cmp	r3, #0
    3d42:	d1a7      	bne.n	3c94 <_printf_i+0x17c>
    3d44:	780b      	ldrb	r3, [r1, #0]
    3d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3d4e:	e765      	b.n	3c1c <_printf_i+0x104>
    3d50:	00005256 	.word	0x00005256
    3d54:	00005245 	.word	0x00005245

00003d58 <__svfiscanf_r>:
    3d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d5c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    3d60:	f10d 080c 	add.w	r8, sp, #12
    3d64:	9301      	str	r3, [sp, #4]
    3d66:	2300      	movs	r3, #0
    3d68:	9346      	str	r3, [sp, #280]	; 0x118
    3d6a:	9347      	str	r3, [sp, #284]	; 0x11c
    3d6c:	4ba0      	ldr	r3, [pc, #640]	; (3ff0 <__svfiscanf_r+0x298>)
    3d6e:	93a2      	str	r3, [sp, #648]	; 0x288
    3d70:	f8df 9284 	ldr.w	r9, [pc, #644]	; 3ff8 <__svfiscanf_r+0x2a0>
    3d74:	4b9f      	ldr	r3, [pc, #636]	; (3ff4 <__svfiscanf_r+0x29c>)
    3d76:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    3d7a:	4606      	mov	r6, r0
    3d7c:	460c      	mov	r4, r1
    3d7e:	93a3      	str	r3, [sp, #652]	; 0x28c
    3d80:	4692      	mov	sl, r2
    3d82:	270a      	movs	r7, #10
    3d84:	f89a 3000 	ldrb.w	r3, [sl]
    3d88:	2b00      	cmp	r3, #0
    3d8a:	f000 812f 	beq.w	3fec <__svfiscanf_r+0x294>
    3d8e:	f000 fd83 	bl	4898 <__locale_ctype_ptr>
    3d92:	f89a b000 	ldrb.w	fp, [sl]
    3d96:	4458      	add	r0, fp
    3d98:	7843      	ldrb	r3, [r0, #1]
    3d9a:	f013 0308 	ands.w	r3, r3, #8
    3d9e:	d143      	bne.n	3e28 <__svfiscanf_r+0xd0>
    3da0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    3da4:	f10a 0501 	add.w	r5, sl, #1
    3da8:	f040 8099 	bne.w	3ede <__svfiscanf_r+0x186>
    3dac:	9345      	str	r3, [sp, #276]	; 0x114
    3dae:	9343      	str	r3, [sp, #268]	; 0x10c
    3db0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    3db4:	2b2a      	cmp	r3, #42	; 0x2a
    3db6:	d103      	bne.n	3dc0 <__svfiscanf_r+0x68>
    3db8:	2310      	movs	r3, #16
    3dba:	9343      	str	r3, [sp, #268]	; 0x10c
    3dbc:	f10a 0502 	add.w	r5, sl, #2
    3dc0:	7829      	ldrb	r1, [r5, #0]
    3dc2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    3dc6:	2a09      	cmp	r2, #9
    3dc8:	46aa      	mov	sl, r5
    3dca:	f105 0501 	add.w	r5, r5, #1
    3dce:	d941      	bls.n	3e54 <__svfiscanf_r+0xfc>
    3dd0:	2203      	movs	r2, #3
    3dd2:	4889      	ldr	r0, [pc, #548]	; (3ff8 <__svfiscanf_r+0x2a0>)
    3dd4:	f000 fd84 	bl	48e0 <memchr>
    3dd8:	b138      	cbz	r0, 3dea <__svfiscanf_r+0x92>
    3dda:	eba0 0309 	sub.w	r3, r0, r9
    3dde:	2001      	movs	r0, #1
    3de0:	4098      	lsls	r0, r3
    3de2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3de4:	4318      	orrs	r0, r3
    3de6:	9043      	str	r0, [sp, #268]	; 0x10c
    3de8:	46aa      	mov	sl, r5
    3dea:	f89a 3000 	ldrb.w	r3, [sl]
    3dee:	2b67      	cmp	r3, #103	; 0x67
    3df0:	f10a 0501 	add.w	r5, sl, #1
    3df4:	d84a      	bhi.n	3e8c <__svfiscanf_r+0x134>
    3df6:	2b65      	cmp	r3, #101	; 0x65
    3df8:	f080 80b7 	bcs.w	3f6a <__svfiscanf_r+0x212>
    3dfc:	2b47      	cmp	r3, #71	; 0x47
    3dfe:	d82f      	bhi.n	3e60 <__svfiscanf_r+0x108>
    3e00:	2b45      	cmp	r3, #69	; 0x45
    3e02:	f080 80b2 	bcs.w	3f6a <__svfiscanf_r+0x212>
    3e06:	2b00      	cmp	r3, #0
    3e08:	f000 8082 	beq.w	3f10 <__svfiscanf_r+0x1b8>
    3e0c:	2b25      	cmp	r3, #37	; 0x25
    3e0e:	d066      	beq.n	3ede <__svfiscanf_r+0x186>
    3e10:	2303      	movs	r3, #3
    3e12:	9349      	str	r3, [sp, #292]	; 0x124
    3e14:	9744      	str	r7, [sp, #272]	; 0x110
    3e16:	e045      	b.n	3ea4 <__svfiscanf_r+0x14c>
    3e18:	9947      	ldr	r1, [sp, #284]	; 0x11c
    3e1a:	3101      	adds	r1, #1
    3e1c:	9147      	str	r1, [sp, #284]	; 0x11c
    3e1e:	6861      	ldr	r1, [r4, #4]
    3e20:	3301      	adds	r3, #1
    3e22:	3901      	subs	r1, #1
    3e24:	6061      	str	r1, [r4, #4]
    3e26:	6023      	str	r3, [r4, #0]
    3e28:	6863      	ldr	r3, [r4, #4]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	dd0b      	ble.n	3e46 <__svfiscanf_r+0xee>
    3e2e:	f000 fd33 	bl	4898 <__locale_ctype_ptr>
    3e32:	6823      	ldr	r3, [r4, #0]
    3e34:	7819      	ldrb	r1, [r3, #0]
    3e36:	4408      	add	r0, r1
    3e38:	7841      	ldrb	r1, [r0, #1]
    3e3a:	070d      	lsls	r5, r1, #28
    3e3c:	d4ec      	bmi.n	3e18 <__svfiscanf_r+0xc0>
    3e3e:	f10a 0501 	add.w	r5, sl, #1
    3e42:	46aa      	mov	sl, r5
    3e44:	e79e      	b.n	3d84 <__svfiscanf_r+0x2c>
    3e46:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3e48:	4621      	mov	r1, r4
    3e4a:	4630      	mov	r0, r6
    3e4c:	4798      	blx	r3
    3e4e:	2800      	cmp	r0, #0
    3e50:	d0ed      	beq.n	3e2e <__svfiscanf_r+0xd6>
    3e52:	e7f4      	b.n	3e3e <__svfiscanf_r+0xe6>
    3e54:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3e56:	fb07 1303 	mla	r3, r7, r3, r1
    3e5a:	3b30      	subs	r3, #48	; 0x30
    3e5c:	9345      	str	r3, [sp, #276]	; 0x114
    3e5e:	e7af      	b.n	3dc0 <__svfiscanf_r+0x68>
    3e60:	2b5b      	cmp	r3, #91	; 0x5b
    3e62:	d061      	beq.n	3f28 <__svfiscanf_r+0x1d0>
    3e64:	d80c      	bhi.n	3e80 <__svfiscanf_r+0x128>
    3e66:	2b58      	cmp	r3, #88	; 0x58
    3e68:	d1d2      	bne.n	3e10 <__svfiscanf_r+0xb8>
    3e6a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    3e70:	9243      	str	r2, [sp, #268]	; 0x10c
    3e72:	2210      	movs	r2, #16
    3e74:	9244      	str	r2, [sp, #272]	; 0x110
    3e76:	2b6f      	cmp	r3, #111	; 0x6f
    3e78:	bfb4      	ite	lt
    3e7a:	2303      	movlt	r3, #3
    3e7c:	2304      	movge	r3, #4
    3e7e:	e010      	b.n	3ea2 <__svfiscanf_r+0x14a>
    3e80:	2b63      	cmp	r3, #99	; 0x63
    3e82:	d05c      	beq.n	3f3e <__svfiscanf_r+0x1e6>
    3e84:	2b64      	cmp	r3, #100	; 0x64
    3e86:	d1c3      	bne.n	3e10 <__svfiscanf_r+0xb8>
    3e88:	9744      	str	r7, [sp, #272]	; 0x110
    3e8a:	e7f4      	b.n	3e76 <__svfiscanf_r+0x11e>
    3e8c:	2b70      	cmp	r3, #112	; 0x70
    3e8e:	d042      	beq.n	3f16 <__svfiscanf_r+0x1be>
    3e90:	d81d      	bhi.n	3ece <__svfiscanf_r+0x176>
    3e92:	2b6e      	cmp	r3, #110	; 0x6e
    3e94:	d059      	beq.n	3f4a <__svfiscanf_r+0x1f2>
    3e96:	d843      	bhi.n	3f20 <__svfiscanf_r+0x1c8>
    3e98:	2b69      	cmp	r3, #105	; 0x69
    3e9a:	d1b9      	bne.n	3e10 <__svfiscanf_r+0xb8>
    3e9c:	2300      	movs	r3, #0
    3e9e:	9344      	str	r3, [sp, #272]	; 0x110
    3ea0:	2303      	movs	r3, #3
    3ea2:	9349      	str	r3, [sp, #292]	; 0x124
    3ea4:	6863      	ldr	r3, [r4, #4]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	dd61      	ble.n	3f6e <__svfiscanf_r+0x216>
    3eaa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3eac:	0659      	lsls	r1, r3, #25
    3eae:	d56f      	bpl.n	3f90 <__svfiscanf_r+0x238>
    3eb0:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3eb2:	2b02      	cmp	r3, #2
    3eb4:	dc7c      	bgt.n	3fb0 <__svfiscanf_r+0x258>
    3eb6:	ab01      	add	r3, sp, #4
    3eb8:	4622      	mov	r2, r4
    3eba:	a943      	add	r1, sp, #268	; 0x10c
    3ebc:	4630      	mov	r0, r6
    3ebe:	f000 f8c7 	bl	4050 <_scanf_chars>
    3ec2:	2801      	cmp	r0, #1
    3ec4:	f000 8092 	beq.w	3fec <__svfiscanf_r+0x294>
    3ec8:	2802      	cmp	r0, #2
    3eca:	d1ba      	bne.n	3e42 <__svfiscanf_r+0xea>
    3ecc:	e01d      	b.n	3f0a <__svfiscanf_r+0x1b2>
    3ece:	2b75      	cmp	r3, #117	; 0x75
    3ed0:	d0da      	beq.n	3e88 <__svfiscanf_r+0x130>
    3ed2:	2b78      	cmp	r3, #120	; 0x78
    3ed4:	d0c9      	beq.n	3e6a <__svfiscanf_r+0x112>
    3ed6:	2b73      	cmp	r3, #115	; 0x73
    3ed8:	d19a      	bne.n	3e10 <__svfiscanf_r+0xb8>
    3eda:	2302      	movs	r3, #2
    3edc:	e7e1      	b.n	3ea2 <__svfiscanf_r+0x14a>
    3ede:	6863      	ldr	r3, [r4, #4]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	dd0c      	ble.n	3efe <__svfiscanf_r+0x1a6>
    3ee4:	6823      	ldr	r3, [r4, #0]
    3ee6:	781a      	ldrb	r2, [r3, #0]
    3ee8:	4593      	cmp	fp, r2
    3eea:	d17f      	bne.n	3fec <__svfiscanf_r+0x294>
    3eec:	3301      	adds	r3, #1
    3eee:	6862      	ldr	r2, [r4, #4]
    3ef0:	6023      	str	r3, [r4, #0]
    3ef2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3ef4:	3a01      	subs	r2, #1
    3ef6:	3301      	adds	r3, #1
    3ef8:	6062      	str	r2, [r4, #4]
    3efa:	9347      	str	r3, [sp, #284]	; 0x11c
    3efc:	e7a1      	b.n	3e42 <__svfiscanf_r+0xea>
    3efe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3f00:	4621      	mov	r1, r4
    3f02:	4630      	mov	r0, r6
    3f04:	4798      	blx	r3
    3f06:	2800      	cmp	r0, #0
    3f08:	d0ec      	beq.n	3ee4 <__svfiscanf_r+0x18c>
    3f0a:	9846      	ldr	r0, [sp, #280]	; 0x118
    3f0c:	2800      	cmp	r0, #0
    3f0e:	d163      	bne.n	3fd8 <__svfiscanf_r+0x280>
    3f10:	f04f 30ff 	mov.w	r0, #4294967295
    3f14:	e066      	b.n	3fe4 <__svfiscanf_r+0x28c>
    3f16:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3f18:	f042 0220 	orr.w	r2, r2, #32
    3f1c:	9243      	str	r2, [sp, #268]	; 0x10c
    3f1e:	e7a4      	b.n	3e6a <__svfiscanf_r+0x112>
    3f20:	2308      	movs	r3, #8
    3f22:	9344      	str	r3, [sp, #272]	; 0x110
    3f24:	2304      	movs	r3, #4
    3f26:	e7bc      	b.n	3ea2 <__svfiscanf_r+0x14a>
    3f28:	4629      	mov	r1, r5
    3f2a:	4640      	mov	r0, r8
    3f2c:	f000 fa8e 	bl	444c <__sccl>
    3f30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f36:	9343      	str	r3, [sp, #268]	; 0x10c
    3f38:	4605      	mov	r5, r0
    3f3a:	2301      	movs	r3, #1
    3f3c:	e7b1      	b.n	3ea2 <__svfiscanf_r+0x14a>
    3f3e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f44:	9343      	str	r3, [sp, #268]	; 0x10c
    3f46:	2300      	movs	r3, #0
    3f48:	e7ab      	b.n	3ea2 <__svfiscanf_r+0x14a>
    3f4a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3f4c:	06d0      	lsls	r0, r2, #27
    3f4e:	f53f af78 	bmi.w	3e42 <__svfiscanf_r+0xea>
    3f52:	f012 0f01 	tst.w	r2, #1
    3f56:	9a01      	ldr	r2, [sp, #4]
    3f58:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3f5a:	f102 0104 	add.w	r1, r2, #4
    3f5e:	9101      	str	r1, [sp, #4]
    3f60:	6812      	ldr	r2, [r2, #0]
    3f62:	bf14      	ite	ne
    3f64:	8013      	strhne	r3, [r2, #0]
    3f66:	6013      	streq	r3, [r2, #0]
    3f68:	e76b      	b.n	3e42 <__svfiscanf_r+0xea>
    3f6a:	2305      	movs	r3, #5
    3f6c:	e799      	b.n	3ea2 <__svfiscanf_r+0x14a>
    3f6e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3f70:	4621      	mov	r1, r4
    3f72:	4630      	mov	r0, r6
    3f74:	4798      	blx	r3
    3f76:	2800      	cmp	r0, #0
    3f78:	d097      	beq.n	3eaa <__svfiscanf_r+0x152>
    3f7a:	e7c6      	b.n	3f0a <__svfiscanf_r+0x1b2>
    3f7c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3f7e:	3201      	adds	r2, #1
    3f80:	9247      	str	r2, [sp, #284]	; 0x11c
    3f82:	6862      	ldr	r2, [r4, #4]
    3f84:	3a01      	subs	r2, #1
    3f86:	2a00      	cmp	r2, #0
    3f88:	6062      	str	r2, [r4, #4]
    3f8a:	dd0a      	ble.n	3fa2 <__svfiscanf_r+0x24a>
    3f8c:	3301      	adds	r3, #1
    3f8e:	6023      	str	r3, [r4, #0]
    3f90:	f000 fc82 	bl	4898 <__locale_ctype_ptr>
    3f94:	6823      	ldr	r3, [r4, #0]
    3f96:	781a      	ldrb	r2, [r3, #0]
    3f98:	4410      	add	r0, r2
    3f9a:	7842      	ldrb	r2, [r0, #1]
    3f9c:	0712      	lsls	r2, r2, #28
    3f9e:	d4ed      	bmi.n	3f7c <__svfiscanf_r+0x224>
    3fa0:	e786      	b.n	3eb0 <__svfiscanf_r+0x158>
    3fa2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3fa4:	4621      	mov	r1, r4
    3fa6:	4630      	mov	r0, r6
    3fa8:	4798      	blx	r3
    3faa:	2800      	cmp	r0, #0
    3fac:	d0f0      	beq.n	3f90 <__svfiscanf_r+0x238>
    3fae:	e7ac      	b.n	3f0a <__svfiscanf_r+0x1b2>
    3fb0:	2b04      	cmp	r3, #4
    3fb2:	dc06      	bgt.n	3fc2 <__svfiscanf_r+0x26a>
    3fb4:	ab01      	add	r3, sp, #4
    3fb6:	4622      	mov	r2, r4
    3fb8:	a943      	add	r1, sp, #268	; 0x10c
    3fba:	4630      	mov	r0, r6
    3fbc:	f000 f8ac 	bl	4118 <_scanf_i>
    3fc0:	e77f      	b.n	3ec2 <__svfiscanf_r+0x16a>
    3fc2:	4b0e      	ldr	r3, [pc, #56]	; (3ffc <__svfiscanf_r+0x2a4>)
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	f43f af3c 	beq.w	3e42 <__svfiscanf_r+0xea>
    3fca:	ab01      	add	r3, sp, #4
    3fcc:	4622      	mov	r2, r4
    3fce:	a943      	add	r1, sp, #268	; 0x10c
    3fd0:	4630      	mov	r0, r6
    3fd2:	f3af 8000 	nop.w
    3fd6:	e774      	b.n	3ec2 <__svfiscanf_r+0x16a>
    3fd8:	89a3      	ldrh	r3, [r4, #12]
    3fda:	f013 0f40 	tst.w	r3, #64	; 0x40
    3fde:	bf18      	it	ne
    3fe0:	f04f 30ff 	movne.w	r0, #4294967295
    3fe4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    3fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fec:	9846      	ldr	r0, [sp, #280]	; 0x118
    3fee:	e7f9      	b.n	3fe4 <__svfiscanf_r+0x28c>
    3ff0:	00004769 	.word	0x00004769
    3ff4:	00004339 	.word	0x00004339
    3ff8:	0000523a 	.word	0x0000523a
    3ffc:	00000000 	.word	0x00000000

00004000 <_vfiscanf_r>:
    4000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4004:	460c      	mov	r4, r1
    4006:	4616      	mov	r6, r2
    4008:	461f      	mov	r7, r3
    400a:	4605      	mov	r5, r0
    400c:	b118      	cbz	r0, 4016 <_vfiscanf_r+0x16>
    400e:	6983      	ldr	r3, [r0, #24]
    4010:	b90b      	cbnz	r3, 4016 <_vfiscanf_r+0x16>
    4012:	f7fe fda7 	bl	2b64 <__sinit>
    4016:	4b0b      	ldr	r3, [pc, #44]	; (4044 <_vfiscanf_r+0x44>)
    4018:	429c      	cmp	r4, r3
    401a:	d108      	bne.n	402e <_vfiscanf_r+0x2e>
    401c:	686c      	ldr	r4, [r5, #4]
    401e:	463b      	mov	r3, r7
    4020:	4632      	mov	r2, r6
    4022:	4621      	mov	r1, r4
    4024:	4628      	mov	r0, r5
    4026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    402a:	f7ff be95 	b.w	3d58 <__svfiscanf_r>
    402e:	4b06      	ldr	r3, [pc, #24]	; (4048 <_vfiscanf_r+0x48>)
    4030:	429c      	cmp	r4, r3
    4032:	d101      	bne.n	4038 <_vfiscanf_r+0x38>
    4034:	68ac      	ldr	r4, [r5, #8]
    4036:	e7f2      	b.n	401e <_vfiscanf_r+0x1e>
    4038:	4b04      	ldr	r3, [pc, #16]	; (404c <_vfiscanf_r+0x4c>)
    403a:	429c      	cmp	r4, r3
    403c:	bf08      	it	eq
    403e:	68ec      	ldreq	r4, [r5, #12]
    4040:	e7ed      	b.n	401e <_vfiscanf_r+0x1e>
    4042:	bf00      	nop
    4044:	000051f0 	.word	0x000051f0
    4048:	00005210 	.word	0x00005210
    404c:	000051d0 	.word	0x000051d0

00004050 <_scanf_chars>:
    4050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4054:	4615      	mov	r5, r2
    4056:	688a      	ldr	r2, [r1, #8]
    4058:	4680      	mov	r8, r0
    405a:	460c      	mov	r4, r1
    405c:	b932      	cbnz	r2, 406c <_scanf_chars+0x1c>
    405e:	698a      	ldr	r2, [r1, #24]
    4060:	2a00      	cmp	r2, #0
    4062:	bf0c      	ite	eq
    4064:	2201      	moveq	r2, #1
    4066:	f04f 32ff 	movne.w	r2, #4294967295
    406a:	608a      	str	r2, [r1, #8]
    406c:	6822      	ldr	r2, [r4, #0]
    406e:	06d1      	lsls	r1, r2, #27
    4070:	bf5f      	itttt	pl
    4072:	681a      	ldrpl	r2, [r3, #0]
    4074:	1d11      	addpl	r1, r2, #4
    4076:	6019      	strpl	r1, [r3, #0]
    4078:	6817      	ldrpl	r7, [r2, #0]
    407a:	2600      	movs	r6, #0
    407c:	69a3      	ldr	r3, [r4, #24]
    407e:	b1db      	cbz	r3, 40b8 <_scanf_chars+0x68>
    4080:	2b01      	cmp	r3, #1
    4082:	d107      	bne.n	4094 <_scanf_chars+0x44>
    4084:	682b      	ldr	r3, [r5, #0]
    4086:	6962      	ldr	r2, [r4, #20]
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	5cd3      	ldrb	r3, [r2, r3]
    408c:	b9a3      	cbnz	r3, 40b8 <_scanf_chars+0x68>
    408e:	2e00      	cmp	r6, #0
    4090:	d132      	bne.n	40f8 <_scanf_chars+0xa8>
    4092:	e006      	b.n	40a2 <_scanf_chars+0x52>
    4094:	2b02      	cmp	r3, #2
    4096:	d007      	beq.n	40a8 <_scanf_chars+0x58>
    4098:	2e00      	cmp	r6, #0
    409a:	d12d      	bne.n	40f8 <_scanf_chars+0xa8>
    409c:	69a3      	ldr	r3, [r4, #24]
    409e:	2b01      	cmp	r3, #1
    40a0:	d12a      	bne.n	40f8 <_scanf_chars+0xa8>
    40a2:	2001      	movs	r0, #1
    40a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40a8:	f000 fbf6 	bl	4898 <__locale_ctype_ptr>
    40ac:	682b      	ldr	r3, [r5, #0]
    40ae:	781b      	ldrb	r3, [r3, #0]
    40b0:	4418      	add	r0, r3
    40b2:	7843      	ldrb	r3, [r0, #1]
    40b4:	071b      	lsls	r3, r3, #28
    40b6:	d4ef      	bmi.n	4098 <_scanf_chars+0x48>
    40b8:	6823      	ldr	r3, [r4, #0]
    40ba:	06da      	lsls	r2, r3, #27
    40bc:	bf5e      	ittt	pl
    40be:	682b      	ldrpl	r3, [r5, #0]
    40c0:	781b      	ldrbpl	r3, [r3, #0]
    40c2:	703b      	strbpl	r3, [r7, #0]
    40c4:	682a      	ldr	r2, [r5, #0]
    40c6:	686b      	ldr	r3, [r5, #4]
    40c8:	f102 0201 	add.w	r2, r2, #1
    40cc:	602a      	str	r2, [r5, #0]
    40ce:	68a2      	ldr	r2, [r4, #8]
    40d0:	f103 33ff 	add.w	r3, r3, #4294967295
    40d4:	f102 32ff 	add.w	r2, r2, #4294967295
    40d8:	606b      	str	r3, [r5, #4]
    40da:	f106 0601 	add.w	r6, r6, #1
    40de:	bf58      	it	pl
    40e0:	3701      	addpl	r7, #1
    40e2:	60a2      	str	r2, [r4, #8]
    40e4:	b142      	cbz	r2, 40f8 <_scanf_chars+0xa8>
    40e6:	2b00      	cmp	r3, #0
    40e8:	dcc8      	bgt.n	407c <_scanf_chars+0x2c>
    40ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    40ee:	4629      	mov	r1, r5
    40f0:	4640      	mov	r0, r8
    40f2:	4798      	blx	r3
    40f4:	2800      	cmp	r0, #0
    40f6:	d0c1      	beq.n	407c <_scanf_chars+0x2c>
    40f8:	6823      	ldr	r3, [r4, #0]
    40fa:	f013 0310 	ands.w	r3, r3, #16
    40fe:	d105      	bne.n	410c <_scanf_chars+0xbc>
    4100:	68e2      	ldr	r2, [r4, #12]
    4102:	3201      	adds	r2, #1
    4104:	60e2      	str	r2, [r4, #12]
    4106:	69a2      	ldr	r2, [r4, #24]
    4108:	b102      	cbz	r2, 410c <_scanf_chars+0xbc>
    410a:	703b      	strb	r3, [r7, #0]
    410c:	6923      	ldr	r3, [r4, #16]
    410e:	441e      	add	r6, r3
    4110:	6126      	str	r6, [r4, #16]
    4112:	2000      	movs	r0, #0
    4114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004118 <_scanf_i>:
    4118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    411c:	469a      	mov	sl, r3
    411e:	4b74      	ldr	r3, [pc, #464]	; (42f0 <_scanf_i+0x1d8>)
    4120:	460c      	mov	r4, r1
    4122:	4683      	mov	fp, r0
    4124:	4616      	mov	r6, r2
    4126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    412a:	b087      	sub	sp, #28
    412c:	ab03      	add	r3, sp, #12
    412e:	68a7      	ldr	r7, [r4, #8]
    4130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    4134:	4b6f      	ldr	r3, [pc, #444]	; (42f4 <_scanf_i+0x1dc>)
    4136:	69a1      	ldr	r1, [r4, #24]
    4138:	4a6f      	ldr	r2, [pc, #444]	; (42f8 <_scanf_i+0x1e0>)
    413a:	2903      	cmp	r1, #3
    413c:	bf18      	it	ne
    413e:	461a      	movne	r2, r3
    4140:	1e7b      	subs	r3, r7, #1
    4142:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    4146:	bf84      	itt	hi
    4148:	f240 135d 	movwhi	r3, #349	; 0x15d
    414c:	60a3      	strhi	r3, [r4, #8]
    414e:	6823      	ldr	r3, [r4, #0]
    4150:	9200      	str	r2, [sp, #0]
    4152:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    4156:	bf88      	it	hi
    4158:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    415c:	f104 091c 	add.w	r9, r4, #28
    4160:	6023      	str	r3, [r4, #0]
    4162:	bf8c      	ite	hi
    4164:	197f      	addhi	r7, r7, r5
    4166:	2700      	movls	r7, #0
    4168:	464b      	mov	r3, r9
    416a:	f04f 0800 	mov.w	r8, #0
    416e:	9301      	str	r3, [sp, #4]
    4170:	6831      	ldr	r1, [r6, #0]
    4172:	ab03      	add	r3, sp, #12
    4174:	2202      	movs	r2, #2
    4176:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    417a:	7809      	ldrb	r1, [r1, #0]
    417c:	f000 fbb0 	bl	48e0 <memchr>
    4180:	9b01      	ldr	r3, [sp, #4]
    4182:	b328      	cbz	r0, 41d0 <_scanf_i+0xb8>
    4184:	f1b8 0f01 	cmp.w	r8, #1
    4188:	d156      	bne.n	4238 <_scanf_i+0x120>
    418a:	6862      	ldr	r2, [r4, #4]
    418c:	b92a      	cbnz	r2, 419a <_scanf_i+0x82>
    418e:	2208      	movs	r2, #8
    4190:	6062      	str	r2, [r4, #4]
    4192:	6822      	ldr	r2, [r4, #0]
    4194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4198:	6022      	str	r2, [r4, #0]
    419a:	6822      	ldr	r2, [r4, #0]
    419c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    41a0:	6022      	str	r2, [r4, #0]
    41a2:	68a2      	ldr	r2, [r4, #8]
    41a4:	1e51      	subs	r1, r2, #1
    41a6:	60a1      	str	r1, [r4, #8]
    41a8:	b192      	cbz	r2, 41d0 <_scanf_i+0xb8>
    41aa:	6832      	ldr	r2, [r6, #0]
    41ac:	1c51      	adds	r1, r2, #1
    41ae:	6031      	str	r1, [r6, #0]
    41b0:	7812      	ldrb	r2, [r2, #0]
    41b2:	701a      	strb	r2, [r3, #0]
    41b4:	1c5d      	adds	r5, r3, #1
    41b6:	6873      	ldr	r3, [r6, #4]
    41b8:	3b01      	subs	r3, #1
    41ba:	2b00      	cmp	r3, #0
    41bc:	6073      	str	r3, [r6, #4]
    41be:	dc06      	bgt.n	41ce <_scanf_i+0xb6>
    41c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    41c4:	4631      	mov	r1, r6
    41c6:	4658      	mov	r0, fp
    41c8:	4798      	blx	r3
    41ca:	2800      	cmp	r0, #0
    41cc:	d176      	bne.n	42bc <_scanf_i+0x1a4>
    41ce:	462b      	mov	r3, r5
    41d0:	f108 0801 	add.w	r8, r8, #1
    41d4:	f1b8 0f03 	cmp.w	r8, #3
    41d8:	d1c9      	bne.n	416e <_scanf_i+0x56>
    41da:	6862      	ldr	r2, [r4, #4]
    41dc:	b90a      	cbnz	r2, 41e2 <_scanf_i+0xca>
    41de:	220a      	movs	r2, #10
    41e0:	6062      	str	r2, [r4, #4]
    41e2:	6862      	ldr	r2, [r4, #4]
    41e4:	4945      	ldr	r1, [pc, #276]	; (42fc <_scanf_i+0x1e4>)
    41e6:	6960      	ldr	r0, [r4, #20]
    41e8:	9301      	str	r3, [sp, #4]
    41ea:	1a89      	subs	r1, r1, r2
    41ec:	f000 f92e 	bl	444c <__sccl>
    41f0:	9b01      	ldr	r3, [sp, #4]
    41f2:	f04f 0800 	mov.w	r8, #0
    41f6:	461d      	mov	r5, r3
    41f8:	68a3      	ldr	r3, [r4, #8]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d038      	beq.n	4270 <_scanf_i+0x158>
    41fe:	6831      	ldr	r1, [r6, #0]
    4200:	6960      	ldr	r0, [r4, #20]
    4202:	780a      	ldrb	r2, [r1, #0]
    4204:	5c80      	ldrb	r0, [r0, r2]
    4206:	2800      	cmp	r0, #0
    4208:	d032      	beq.n	4270 <_scanf_i+0x158>
    420a:	2a30      	cmp	r2, #48	; 0x30
    420c:	6822      	ldr	r2, [r4, #0]
    420e:	d121      	bne.n	4254 <_scanf_i+0x13c>
    4210:	0510      	lsls	r0, r2, #20
    4212:	d51f      	bpl.n	4254 <_scanf_i+0x13c>
    4214:	f108 0801 	add.w	r8, r8, #1
    4218:	b117      	cbz	r7, 4220 <_scanf_i+0x108>
    421a:	3301      	adds	r3, #1
    421c:	3f01      	subs	r7, #1
    421e:	60a3      	str	r3, [r4, #8]
    4220:	6873      	ldr	r3, [r6, #4]
    4222:	3b01      	subs	r3, #1
    4224:	2b00      	cmp	r3, #0
    4226:	6073      	str	r3, [r6, #4]
    4228:	dd1b      	ble.n	4262 <_scanf_i+0x14a>
    422a:	6833      	ldr	r3, [r6, #0]
    422c:	3301      	adds	r3, #1
    422e:	6033      	str	r3, [r6, #0]
    4230:	68a3      	ldr	r3, [r4, #8]
    4232:	3b01      	subs	r3, #1
    4234:	60a3      	str	r3, [r4, #8]
    4236:	e7df      	b.n	41f8 <_scanf_i+0xe0>
    4238:	f1b8 0f02 	cmp.w	r8, #2
    423c:	d1b1      	bne.n	41a2 <_scanf_i+0x8a>
    423e:	6822      	ldr	r2, [r4, #0]
    4240:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    4244:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4248:	d1c2      	bne.n	41d0 <_scanf_i+0xb8>
    424a:	2110      	movs	r1, #16
    424c:	6061      	str	r1, [r4, #4]
    424e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    4252:	e7a5      	b.n	41a0 <_scanf_i+0x88>
    4254:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    4258:	6022      	str	r2, [r4, #0]
    425a:	780b      	ldrb	r3, [r1, #0]
    425c:	702b      	strb	r3, [r5, #0]
    425e:	3501      	adds	r5, #1
    4260:	e7de      	b.n	4220 <_scanf_i+0x108>
    4262:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    4266:	4631      	mov	r1, r6
    4268:	4658      	mov	r0, fp
    426a:	4798      	blx	r3
    426c:	2800      	cmp	r0, #0
    426e:	d0df      	beq.n	4230 <_scanf_i+0x118>
    4270:	6823      	ldr	r3, [r4, #0]
    4272:	05d9      	lsls	r1, r3, #23
    4274:	d50c      	bpl.n	4290 <_scanf_i+0x178>
    4276:	454d      	cmp	r5, r9
    4278:	d908      	bls.n	428c <_scanf_i+0x174>
    427a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    427e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    4282:	4632      	mov	r2, r6
    4284:	4658      	mov	r0, fp
    4286:	4798      	blx	r3
    4288:	1e6f      	subs	r7, r5, #1
    428a:	463d      	mov	r5, r7
    428c:	454d      	cmp	r5, r9
    428e:	d02c      	beq.n	42ea <_scanf_i+0x1d2>
    4290:	6822      	ldr	r2, [r4, #0]
    4292:	f012 0210 	ands.w	r2, r2, #16
    4296:	d11e      	bne.n	42d6 <_scanf_i+0x1be>
    4298:	702a      	strb	r2, [r5, #0]
    429a:	6863      	ldr	r3, [r4, #4]
    429c:	9e00      	ldr	r6, [sp, #0]
    429e:	4649      	mov	r1, r9
    42a0:	4658      	mov	r0, fp
    42a2:	47b0      	blx	r6
    42a4:	6822      	ldr	r2, [r4, #0]
    42a6:	f8da 3000 	ldr.w	r3, [sl]
    42aa:	f012 0f20 	tst.w	r2, #32
    42ae:	d008      	beq.n	42c2 <_scanf_i+0x1aa>
    42b0:	1d1a      	adds	r2, r3, #4
    42b2:	f8ca 2000 	str.w	r2, [sl]
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	6018      	str	r0, [r3, #0]
    42ba:	e009      	b.n	42d0 <_scanf_i+0x1b8>
    42bc:	f04f 0800 	mov.w	r8, #0
    42c0:	e7d6      	b.n	4270 <_scanf_i+0x158>
    42c2:	07d2      	lsls	r2, r2, #31
    42c4:	d5f4      	bpl.n	42b0 <_scanf_i+0x198>
    42c6:	1d1a      	adds	r2, r3, #4
    42c8:	f8ca 2000 	str.w	r2, [sl]
    42cc:	681b      	ldr	r3, [r3, #0]
    42ce:	8018      	strh	r0, [r3, #0]
    42d0:	68e3      	ldr	r3, [r4, #12]
    42d2:	3301      	adds	r3, #1
    42d4:	60e3      	str	r3, [r4, #12]
    42d6:	eba5 0509 	sub.w	r5, r5, r9
    42da:	44a8      	add	r8, r5
    42dc:	6925      	ldr	r5, [r4, #16]
    42de:	4445      	add	r5, r8
    42e0:	6125      	str	r5, [r4, #16]
    42e2:	2000      	movs	r0, #0
    42e4:	b007      	add	sp, #28
    42e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42ea:	2001      	movs	r0, #1
    42ec:	e7fa      	b.n	42e4 <_scanf_i+0x1cc>
    42ee:	bf00      	nop
    42f0:	00005268 	.word	0x00005268
    42f4:	000046cd 	.word	0x000046cd
    42f8:	000045ad 	.word	0x000045ad
    42fc:	00005284 	.word	0x00005284

00004300 <_read_r>:
    4300:	b538      	push	{r3, r4, r5, lr}
    4302:	4c07      	ldr	r4, [pc, #28]	; (4320 <_read_r+0x20>)
    4304:	4605      	mov	r5, r0
    4306:	4608      	mov	r0, r1
    4308:	4611      	mov	r1, r2
    430a:	2200      	movs	r2, #0
    430c:	6022      	str	r2, [r4, #0]
    430e:	461a      	mov	r2, r3
    4310:	f7fd fece 	bl	20b0 <_read>
    4314:	1c43      	adds	r3, r0, #1
    4316:	d102      	bne.n	431e <_read_r+0x1e>
    4318:	6823      	ldr	r3, [r4, #0]
    431a:	b103      	cbz	r3, 431e <_read_r+0x1e>
    431c:	602b      	str	r3, [r5, #0]
    431e:	bd38      	pop	{r3, r4, r5, pc}
    4320:	200046fc 	.word	0x200046fc

00004324 <lflush>:
    4324:	8983      	ldrh	r3, [r0, #12]
    4326:	f003 0309 	and.w	r3, r3, #9
    432a:	2b09      	cmp	r3, #9
    432c:	d101      	bne.n	4332 <lflush+0xe>
    432e:	f7fe bbc7 	b.w	2ac0 <fflush>
    4332:	2000      	movs	r0, #0
    4334:	4770      	bx	lr
	...

00004338 <__srefill_r>:
    4338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433a:	460c      	mov	r4, r1
    433c:	4605      	mov	r5, r0
    433e:	b118      	cbz	r0, 4348 <__srefill_r+0x10>
    4340:	6983      	ldr	r3, [r0, #24]
    4342:	b90b      	cbnz	r3, 4348 <__srefill_r+0x10>
    4344:	f7fe fc0e 	bl	2b64 <__sinit>
    4348:	4b3b      	ldr	r3, [pc, #236]	; (4438 <__srefill_r+0x100>)
    434a:	429c      	cmp	r4, r3
    434c:	d10a      	bne.n	4364 <__srefill_r+0x2c>
    434e:	686c      	ldr	r4, [r5, #4]
    4350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    4354:	2300      	movs	r3, #0
    4356:	6063      	str	r3, [r4, #4]
    4358:	b293      	uxth	r3, r2
    435a:	069e      	lsls	r6, r3, #26
    435c:	d50c      	bpl.n	4378 <__srefill_r+0x40>
    435e:	f04f 30ff 	mov.w	r0, #4294967295
    4362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4364:	4b35      	ldr	r3, [pc, #212]	; (443c <__srefill_r+0x104>)
    4366:	429c      	cmp	r4, r3
    4368:	d101      	bne.n	436e <__srefill_r+0x36>
    436a:	68ac      	ldr	r4, [r5, #8]
    436c:	e7f0      	b.n	4350 <__srefill_r+0x18>
    436e:	4b34      	ldr	r3, [pc, #208]	; (4440 <__srefill_r+0x108>)
    4370:	429c      	cmp	r4, r3
    4372:	bf08      	it	eq
    4374:	68ec      	ldreq	r4, [r5, #12]
    4376:	e7eb      	b.n	4350 <__srefill_r+0x18>
    4378:	0758      	lsls	r0, r3, #29
    437a:	d448      	bmi.n	440e <__srefill_r+0xd6>
    437c:	06d9      	lsls	r1, r3, #27
    437e:	d405      	bmi.n	438c <__srefill_r+0x54>
    4380:	2309      	movs	r3, #9
    4382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    4386:	602b      	str	r3, [r5, #0]
    4388:	81a2      	strh	r2, [r4, #12]
    438a:	e7e8      	b.n	435e <__srefill_r+0x26>
    438c:	071a      	lsls	r2, r3, #28
    438e:	d50b      	bpl.n	43a8 <__srefill_r+0x70>
    4390:	4621      	mov	r1, r4
    4392:	4628      	mov	r0, r5
    4394:	f7fe fb6a 	bl	2a6c <_fflush_r>
    4398:	2800      	cmp	r0, #0
    439a:	d1e0      	bne.n	435e <__srefill_r+0x26>
    439c:	89a3      	ldrh	r3, [r4, #12]
    439e:	60a0      	str	r0, [r4, #8]
    43a0:	f023 0308 	bic.w	r3, r3, #8
    43a4:	81a3      	strh	r3, [r4, #12]
    43a6:	61a0      	str	r0, [r4, #24]
    43a8:	89a3      	ldrh	r3, [r4, #12]
    43aa:	f043 0304 	orr.w	r3, r3, #4
    43ae:	81a3      	strh	r3, [r4, #12]
    43b0:	6923      	ldr	r3, [r4, #16]
    43b2:	b91b      	cbnz	r3, 43bc <__srefill_r+0x84>
    43b4:	4621      	mov	r1, r4
    43b6:	4628      	mov	r0, r5
    43b8:	f7ff f860 	bl	347c <__smakebuf_r>
    43bc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    43c0:	b2be      	uxth	r6, r7
    43c2:	07b3      	lsls	r3, r6, #30
    43c4:	d00f      	beq.n	43e6 <__srefill_r+0xae>
    43c6:	2301      	movs	r3, #1
    43c8:	81a3      	strh	r3, [r4, #12]
    43ca:	4b1e      	ldr	r3, [pc, #120]	; (4444 <__srefill_r+0x10c>)
    43cc:	491e      	ldr	r1, [pc, #120]	; (4448 <__srefill_r+0x110>)
    43ce:	6818      	ldr	r0, [r3, #0]
    43d0:	f006 0609 	and.w	r6, r6, #9
    43d4:	f7fe fc32 	bl	2c3c <_fwalk>
    43d8:	2e09      	cmp	r6, #9
    43da:	81a7      	strh	r7, [r4, #12]
    43dc:	d103      	bne.n	43e6 <__srefill_r+0xae>
    43de:	4621      	mov	r1, r4
    43e0:	4628      	mov	r0, r5
    43e2:	f7fe fabb 	bl	295c <__sflush_r>
    43e6:	6922      	ldr	r2, [r4, #16]
    43e8:	6022      	str	r2, [r4, #0]
    43ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
    43ec:	6963      	ldr	r3, [r4, #20]
    43ee:	6a21      	ldr	r1, [r4, #32]
    43f0:	4628      	mov	r0, r5
    43f2:	47b0      	blx	r6
    43f4:	2800      	cmp	r0, #0
    43f6:	6060      	str	r0, [r4, #4]
    43f8:	dc1c      	bgt.n	4434 <__srefill_r+0xfc>
    43fa:	89a3      	ldrh	r3, [r4, #12]
    43fc:	bf17      	itett	ne
    43fe:	2200      	movne	r2, #0
    4400:	f043 0320 	orreq.w	r3, r3, #32
    4404:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    4408:	6062      	strne	r2, [r4, #4]
    440a:	81a3      	strh	r3, [r4, #12]
    440c:	e7a7      	b.n	435e <__srefill_r+0x26>
    440e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4410:	2900      	cmp	r1, #0
    4412:	d0cd      	beq.n	43b0 <__srefill_r+0x78>
    4414:	f104 0344 	add.w	r3, r4, #68	; 0x44
    4418:	4299      	cmp	r1, r3
    441a:	d002      	beq.n	4422 <__srefill_r+0xea>
    441c:	4628      	mov	r0, r5
    441e:	f7fe fc73 	bl	2d08 <_free_r>
    4422:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4424:	6063      	str	r3, [r4, #4]
    4426:	2000      	movs	r0, #0
    4428:	6360      	str	r0, [r4, #52]	; 0x34
    442a:	2b00      	cmp	r3, #0
    442c:	d0c0      	beq.n	43b0 <__srefill_r+0x78>
    442e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4430:	6023      	str	r3, [r4, #0]
    4432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4434:	2000      	movs	r0, #0
    4436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4438:	000051f0 	.word	0x000051f0
    443c:	00005210 	.word	0x00005210
    4440:	000051d0 	.word	0x000051d0
    4444:	00005230 	.word	0x00005230
    4448:	00004325 	.word	0x00004325

0000444c <__sccl>:
    444c:	b570      	push	{r4, r5, r6, lr}
    444e:	780b      	ldrb	r3, [r1, #0]
    4450:	2b5e      	cmp	r3, #94	; 0x5e
    4452:	bf13      	iteet	ne
    4454:	1c4a      	addne	r2, r1, #1
    4456:	1c8a      	addeq	r2, r1, #2
    4458:	784b      	ldrbeq	r3, [r1, #1]
    445a:	2100      	movne	r1, #0
    445c:	bf08      	it	eq
    445e:	2101      	moveq	r1, #1
    4460:	1e44      	subs	r4, r0, #1
    4462:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    4466:	f804 1f01 	strb.w	r1, [r4, #1]!
    446a:	42a5      	cmp	r5, r4
    446c:	d1fb      	bne.n	4466 <__sccl+0x1a>
    446e:	b913      	cbnz	r3, 4476 <__sccl+0x2a>
    4470:	3a01      	subs	r2, #1
    4472:	4610      	mov	r0, r2
    4474:	bd70      	pop	{r4, r5, r6, pc}
    4476:	f081 0401 	eor.w	r4, r1, #1
    447a:	54c4      	strb	r4, [r0, r3]
    447c:	4611      	mov	r1, r2
    447e:	780d      	ldrb	r5, [r1, #0]
    4480:	2d2d      	cmp	r5, #45	; 0x2d
    4482:	f101 0201 	add.w	r2, r1, #1
    4486:	d006      	beq.n	4496 <__sccl+0x4a>
    4488:	2d5d      	cmp	r5, #93	; 0x5d
    448a:	d0f2      	beq.n	4472 <__sccl+0x26>
    448c:	b90d      	cbnz	r5, 4492 <__sccl+0x46>
    448e:	460a      	mov	r2, r1
    4490:	e7ef      	b.n	4472 <__sccl+0x26>
    4492:	462b      	mov	r3, r5
    4494:	e7f1      	b.n	447a <__sccl+0x2e>
    4496:	784e      	ldrb	r6, [r1, #1]
    4498:	2e5d      	cmp	r6, #93	; 0x5d
    449a:	d0fa      	beq.n	4492 <__sccl+0x46>
    449c:	42b3      	cmp	r3, r6
    449e:	dcf8      	bgt.n	4492 <__sccl+0x46>
    44a0:	3102      	adds	r1, #2
    44a2:	3301      	adds	r3, #1
    44a4:	429e      	cmp	r6, r3
    44a6:	54c4      	strb	r4, [r0, r3]
    44a8:	dcfb      	bgt.n	44a2 <__sccl+0x56>
    44aa:	e7e8      	b.n	447e <__sccl+0x32>

000044ac <_strtol_l.isra.0>:
    44ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44b0:	4680      	mov	r8, r0
    44b2:	4689      	mov	r9, r1
    44b4:	4692      	mov	sl, r2
    44b6:	461f      	mov	r7, r3
    44b8:	468b      	mov	fp, r1
    44ba:	465d      	mov	r5, fp
    44bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    44be:	f815 4b01 	ldrb.w	r4, [r5], #1
    44c2:	f000 f9e5 	bl	4890 <__locale_ctype_ptr_l>
    44c6:	4420      	add	r0, r4
    44c8:	7846      	ldrb	r6, [r0, #1]
    44ca:	f016 0608 	ands.w	r6, r6, #8
    44ce:	d10b      	bne.n	44e8 <_strtol_l.isra.0+0x3c>
    44d0:	2c2d      	cmp	r4, #45	; 0x2d
    44d2:	d10b      	bne.n	44ec <_strtol_l.isra.0+0x40>
    44d4:	782c      	ldrb	r4, [r5, #0]
    44d6:	2601      	movs	r6, #1
    44d8:	f10b 0502 	add.w	r5, fp, #2
    44dc:	b167      	cbz	r7, 44f8 <_strtol_l.isra.0+0x4c>
    44de:	2f10      	cmp	r7, #16
    44e0:	d114      	bne.n	450c <_strtol_l.isra.0+0x60>
    44e2:	2c30      	cmp	r4, #48	; 0x30
    44e4:	d00a      	beq.n	44fc <_strtol_l.isra.0+0x50>
    44e6:	e011      	b.n	450c <_strtol_l.isra.0+0x60>
    44e8:	46ab      	mov	fp, r5
    44ea:	e7e6      	b.n	44ba <_strtol_l.isra.0+0xe>
    44ec:	2c2b      	cmp	r4, #43	; 0x2b
    44ee:	bf04      	itt	eq
    44f0:	782c      	ldrbeq	r4, [r5, #0]
    44f2:	f10b 0502 	addeq.w	r5, fp, #2
    44f6:	e7f1      	b.n	44dc <_strtol_l.isra.0+0x30>
    44f8:	2c30      	cmp	r4, #48	; 0x30
    44fa:	d127      	bne.n	454c <_strtol_l.isra.0+0xa0>
    44fc:	782b      	ldrb	r3, [r5, #0]
    44fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4502:	2b58      	cmp	r3, #88	; 0x58
    4504:	d14b      	bne.n	459e <_strtol_l.isra.0+0xf2>
    4506:	786c      	ldrb	r4, [r5, #1]
    4508:	2710      	movs	r7, #16
    450a:	3502      	adds	r5, #2
    450c:	2e00      	cmp	r6, #0
    450e:	bf0c      	ite	eq
    4510:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    4514:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    4518:	2200      	movs	r2, #0
    451a:	fbb1 fef7 	udiv	lr, r1, r7
    451e:	4610      	mov	r0, r2
    4520:	fb07 1c1e 	mls	ip, r7, lr, r1
    4524:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    4528:	2b09      	cmp	r3, #9
    452a:	d811      	bhi.n	4550 <_strtol_l.isra.0+0xa4>
    452c:	461c      	mov	r4, r3
    452e:	42a7      	cmp	r7, r4
    4530:	dd1d      	ble.n	456e <_strtol_l.isra.0+0xc2>
    4532:	1c53      	adds	r3, r2, #1
    4534:	d007      	beq.n	4546 <_strtol_l.isra.0+0x9a>
    4536:	4586      	cmp	lr, r0
    4538:	d316      	bcc.n	4568 <_strtol_l.isra.0+0xbc>
    453a:	d101      	bne.n	4540 <_strtol_l.isra.0+0x94>
    453c:	45a4      	cmp	ip, r4
    453e:	db13      	blt.n	4568 <_strtol_l.isra.0+0xbc>
    4540:	fb00 4007 	mla	r0, r0, r7, r4
    4544:	2201      	movs	r2, #1
    4546:	f815 4b01 	ldrb.w	r4, [r5], #1
    454a:	e7eb      	b.n	4524 <_strtol_l.isra.0+0x78>
    454c:	270a      	movs	r7, #10
    454e:	e7dd      	b.n	450c <_strtol_l.isra.0+0x60>
    4550:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    4554:	2b19      	cmp	r3, #25
    4556:	d801      	bhi.n	455c <_strtol_l.isra.0+0xb0>
    4558:	3c37      	subs	r4, #55	; 0x37
    455a:	e7e8      	b.n	452e <_strtol_l.isra.0+0x82>
    455c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    4560:	2b19      	cmp	r3, #25
    4562:	d804      	bhi.n	456e <_strtol_l.isra.0+0xc2>
    4564:	3c57      	subs	r4, #87	; 0x57
    4566:	e7e2      	b.n	452e <_strtol_l.isra.0+0x82>
    4568:	f04f 32ff 	mov.w	r2, #4294967295
    456c:	e7eb      	b.n	4546 <_strtol_l.isra.0+0x9a>
    456e:	1c53      	adds	r3, r2, #1
    4570:	d108      	bne.n	4584 <_strtol_l.isra.0+0xd8>
    4572:	2322      	movs	r3, #34	; 0x22
    4574:	f8c8 3000 	str.w	r3, [r8]
    4578:	4608      	mov	r0, r1
    457a:	f1ba 0f00 	cmp.w	sl, #0
    457e:	d107      	bne.n	4590 <_strtol_l.isra.0+0xe4>
    4580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4584:	b106      	cbz	r6, 4588 <_strtol_l.isra.0+0xdc>
    4586:	4240      	negs	r0, r0
    4588:	f1ba 0f00 	cmp.w	sl, #0
    458c:	d00c      	beq.n	45a8 <_strtol_l.isra.0+0xfc>
    458e:	b122      	cbz	r2, 459a <_strtol_l.isra.0+0xee>
    4590:	3d01      	subs	r5, #1
    4592:	f8ca 5000 	str.w	r5, [sl]
    4596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    459a:	464d      	mov	r5, r9
    459c:	e7f9      	b.n	4592 <_strtol_l.isra.0+0xe6>
    459e:	2430      	movs	r4, #48	; 0x30
    45a0:	2f00      	cmp	r7, #0
    45a2:	d1b3      	bne.n	450c <_strtol_l.isra.0+0x60>
    45a4:	2708      	movs	r7, #8
    45a6:	e7b1      	b.n	450c <_strtol_l.isra.0+0x60>
    45a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000045ac <_strtol_r>:
    45ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    45ae:	4c06      	ldr	r4, [pc, #24]	; (45c8 <_strtol_r+0x1c>)
    45b0:	4d06      	ldr	r5, [pc, #24]	; (45cc <_strtol_r+0x20>)
    45b2:	6824      	ldr	r4, [r4, #0]
    45b4:	6a24      	ldr	r4, [r4, #32]
    45b6:	2c00      	cmp	r4, #0
    45b8:	bf08      	it	eq
    45ba:	462c      	moveq	r4, r5
    45bc:	9400      	str	r4, [sp, #0]
    45be:	f7ff ff75 	bl	44ac <_strtol_l.isra.0>
    45c2:	b003      	add	sp, #12
    45c4:	bd30      	pop	{r4, r5, pc}
    45c6:	bf00      	nop
    45c8:	2000026c 	.word	0x2000026c
    45cc:	200002d0 	.word	0x200002d0

000045d0 <_strtoul_l.isra.0>:
    45d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45d4:	4680      	mov	r8, r0
    45d6:	4689      	mov	r9, r1
    45d8:	4692      	mov	sl, r2
    45da:	461e      	mov	r6, r3
    45dc:	460f      	mov	r7, r1
    45de:	463d      	mov	r5, r7
    45e0:	9808      	ldr	r0, [sp, #32]
    45e2:	f815 4b01 	ldrb.w	r4, [r5], #1
    45e6:	f000 f953 	bl	4890 <__locale_ctype_ptr_l>
    45ea:	4420      	add	r0, r4
    45ec:	7843      	ldrb	r3, [r0, #1]
    45ee:	f013 0308 	ands.w	r3, r3, #8
    45f2:	d10a      	bne.n	460a <_strtoul_l.isra.0+0x3a>
    45f4:	2c2d      	cmp	r4, #45	; 0x2d
    45f6:	d10a      	bne.n	460e <_strtoul_l.isra.0+0x3e>
    45f8:	782c      	ldrb	r4, [r5, #0]
    45fa:	2301      	movs	r3, #1
    45fc:	1cbd      	adds	r5, r7, #2
    45fe:	b15e      	cbz	r6, 4618 <_strtoul_l.isra.0+0x48>
    4600:	2e10      	cmp	r6, #16
    4602:	d113      	bne.n	462c <_strtoul_l.isra.0+0x5c>
    4604:	2c30      	cmp	r4, #48	; 0x30
    4606:	d009      	beq.n	461c <_strtoul_l.isra.0+0x4c>
    4608:	e010      	b.n	462c <_strtoul_l.isra.0+0x5c>
    460a:	462f      	mov	r7, r5
    460c:	e7e7      	b.n	45de <_strtoul_l.isra.0+0xe>
    460e:	2c2b      	cmp	r4, #43	; 0x2b
    4610:	bf04      	itt	eq
    4612:	782c      	ldrbeq	r4, [r5, #0]
    4614:	1cbd      	addeq	r5, r7, #2
    4616:	e7f2      	b.n	45fe <_strtoul_l.isra.0+0x2e>
    4618:	2c30      	cmp	r4, #48	; 0x30
    461a:	d125      	bne.n	4668 <_strtoul_l.isra.0+0x98>
    461c:	782a      	ldrb	r2, [r5, #0]
    461e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    4622:	2a58      	cmp	r2, #88	; 0x58
    4624:	d14a      	bne.n	46bc <_strtoul_l.isra.0+0xec>
    4626:	786c      	ldrb	r4, [r5, #1]
    4628:	2610      	movs	r6, #16
    462a:	3502      	adds	r5, #2
    462c:	f04f 31ff 	mov.w	r1, #4294967295
    4630:	2700      	movs	r7, #0
    4632:	fbb1 f1f6 	udiv	r1, r1, r6
    4636:	fb06 fe01 	mul.w	lr, r6, r1
    463a:	ea6f 0e0e 	mvn.w	lr, lr
    463e:	4638      	mov	r0, r7
    4640:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    4644:	2a09      	cmp	r2, #9
    4646:	d811      	bhi.n	466c <_strtoul_l.isra.0+0x9c>
    4648:	4614      	mov	r4, r2
    464a:	42a6      	cmp	r6, r4
    464c:	dd1d      	ble.n	468a <_strtoul_l.isra.0+0xba>
    464e:	2f00      	cmp	r7, #0
    4650:	db18      	blt.n	4684 <_strtoul_l.isra.0+0xb4>
    4652:	4281      	cmp	r1, r0
    4654:	d316      	bcc.n	4684 <_strtoul_l.isra.0+0xb4>
    4656:	d101      	bne.n	465c <_strtoul_l.isra.0+0x8c>
    4658:	45a6      	cmp	lr, r4
    465a:	db13      	blt.n	4684 <_strtoul_l.isra.0+0xb4>
    465c:	fb00 4006 	mla	r0, r0, r6, r4
    4660:	2701      	movs	r7, #1
    4662:	f815 4b01 	ldrb.w	r4, [r5], #1
    4666:	e7eb      	b.n	4640 <_strtoul_l.isra.0+0x70>
    4668:	260a      	movs	r6, #10
    466a:	e7df      	b.n	462c <_strtoul_l.isra.0+0x5c>
    466c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    4670:	2a19      	cmp	r2, #25
    4672:	d801      	bhi.n	4678 <_strtoul_l.isra.0+0xa8>
    4674:	3c37      	subs	r4, #55	; 0x37
    4676:	e7e8      	b.n	464a <_strtoul_l.isra.0+0x7a>
    4678:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    467c:	2a19      	cmp	r2, #25
    467e:	d804      	bhi.n	468a <_strtoul_l.isra.0+0xba>
    4680:	3c57      	subs	r4, #87	; 0x57
    4682:	e7e2      	b.n	464a <_strtoul_l.isra.0+0x7a>
    4684:	f04f 37ff 	mov.w	r7, #4294967295
    4688:	e7eb      	b.n	4662 <_strtoul_l.isra.0+0x92>
    468a:	2f00      	cmp	r7, #0
    468c:	da09      	bge.n	46a2 <_strtoul_l.isra.0+0xd2>
    468e:	2322      	movs	r3, #34	; 0x22
    4690:	f8c8 3000 	str.w	r3, [r8]
    4694:	f04f 30ff 	mov.w	r0, #4294967295
    4698:	f1ba 0f00 	cmp.w	sl, #0
    469c:	d107      	bne.n	46ae <_strtoul_l.isra.0+0xde>
    469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46a2:	b103      	cbz	r3, 46a6 <_strtoul_l.isra.0+0xd6>
    46a4:	4240      	negs	r0, r0
    46a6:	f1ba 0f00 	cmp.w	sl, #0
    46aa:	d00c      	beq.n	46c6 <_strtoul_l.isra.0+0xf6>
    46ac:	b127      	cbz	r7, 46b8 <_strtoul_l.isra.0+0xe8>
    46ae:	3d01      	subs	r5, #1
    46b0:	f8ca 5000 	str.w	r5, [sl]
    46b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46b8:	464d      	mov	r5, r9
    46ba:	e7f9      	b.n	46b0 <_strtoul_l.isra.0+0xe0>
    46bc:	2430      	movs	r4, #48	; 0x30
    46be:	2e00      	cmp	r6, #0
    46c0:	d1b4      	bne.n	462c <_strtoul_l.isra.0+0x5c>
    46c2:	2608      	movs	r6, #8
    46c4:	e7b2      	b.n	462c <_strtoul_l.isra.0+0x5c>
    46c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000046cc <_strtoul_r>:
    46cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    46ce:	4c06      	ldr	r4, [pc, #24]	; (46e8 <_strtoul_r+0x1c>)
    46d0:	4d06      	ldr	r5, [pc, #24]	; (46ec <_strtoul_r+0x20>)
    46d2:	6824      	ldr	r4, [r4, #0]
    46d4:	6a24      	ldr	r4, [r4, #32]
    46d6:	2c00      	cmp	r4, #0
    46d8:	bf08      	it	eq
    46da:	462c      	moveq	r4, r5
    46dc:	9400      	str	r4, [sp, #0]
    46de:	f7ff ff77 	bl	45d0 <_strtoul_l.isra.0>
    46e2:	b003      	add	sp, #12
    46e4:	bd30      	pop	{r4, r5, pc}
    46e6:	bf00      	nop
    46e8:	2000026c 	.word	0x2000026c
    46ec:	200002d0 	.word	0x200002d0

000046f0 <__submore>:
    46f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46f4:	460c      	mov	r4, r1
    46f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    46f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    46fc:	4299      	cmp	r1, r3
    46fe:	d11e      	bne.n	473e <__submore+0x4e>
    4700:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4704:	f7fe fb4e 	bl	2da4 <_malloc_r>
    4708:	b918      	cbnz	r0, 4712 <__submore+0x22>
    470a:	f04f 30ff 	mov.w	r0, #4294967295
    470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4712:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4716:	63a3      	str	r3, [r4, #56]	; 0x38
    4718:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    471c:	6360      	str	r0, [r4, #52]	; 0x34
    471e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    4722:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4726:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    472a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    472e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    4732:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    4736:	6020      	str	r0, [r4, #0]
    4738:	2000      	movs	r0, #0
    473a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    473e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    4740:	0077      	lsls	r7, r6, #1
    4742:	463a      	mov	r2, r7
    4744:	f000 f941 	bl	49ca <_realloc_r>
    4748:	4605      	mov	r5, r0
    474a:	2800      	cmp	r0, #0
    474c:	d0dd      	beq.n	470a <__submore+0x1a>
    474e:	eb00 0806 	add.w	r8, r0, r6
    4752:	4601      	mov	r1, r0
    4754:	4632      	mov	r2, r6
    4756:	4640      	mov	r0, r8
    4758:	f000 f912 	bl	4980 <memcpy>
    475c:	f8c4 8000 	str.w	r8, [r4]
    4760:	6365      	str	r5, [r4, #52]	; 0x34
    4762:	63a7      	str	r7, [r4, #56]	; 0x38
    4764:	e7e8      	b.n	4738 <__submore+0x48>
	...

00004768 <_ungetc_r>:
    4768:	1c4b      	adds	r3, r1, #1
    476a:	b570      	push	{r4, r5, r6, lr}
    476c:	4606      	mov	r6, r0
    476e:	460d      	mov	r5, r1
    4770:	4614      	mov	r4, r2
    4772:	d103      	bne.n	477c <_ungetc_r+0x14>
    4774:	f04f 35ff 	mov.w	r5, #4294967295
    4778:	4628      	mov	r0, r5
    477a:	bd70      	pop	{r4, r5, r6, pc}
    477c:	b118      	cbz	r0, 4786 <_ungetc_r+0x1e>
    477e:	6983      	ldr	r3, [r0, #24]
    4780:	b90b      	cbnz	r3, 4786 <_ungetc_r+0x1e>
    4782:	f7fe f9ef 	bl	2b64 <__sinit>
    4786:	4b2e      	ldr	r3, [pc, #184]	; (4840 <_ungetc_r+0xd8>)
    4788:	429c      	cmp	r4, r3
    478a:	d12c      	bne.n	47e6 <_ungetc_r+0x7e>
    478c:	6874      	ldr	r4, [r6, #4]
    478e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4792:	f023 0320 	bic.w	r3, r3, #32
    4796:	81a3      	strh	r3, [r4, #12]
    4798:	b29b      	uxth	r3, r3
    479a:	0759      	lsls	r1, r3, #29
    479c:	d413      	bmi.n	47c6 <_ungetc_r+0x5e>
    479e:	06da      	lsls	r2, r3, #27
    47a0:	d5e8      	bpl.n	4774 <_ungetc_r+0xc>
    47a2:	071b      	lsls	r3, r3, #28
    47a4:	d50b      	bpl.n	47be <_ungetc_r+0x56>
    47a6:	4621      	mov	r1, r4
    47a8:	4630      	mov	r0, r6
    47aa:	f7fe f95f 	bl	2a6c <_fflush_r>
    47ae:	2800      	cmp	r0, #0
    47b0:	d1e0      	bne.n	4774 <_ungetc_r+0xc>
    47b2:	89a3      	ldrh	r3, [r4, #12]
    47b4:	60a0      	str	r0, [r4, #8]
    47b6:	f023 0308 	bic.w	r3, r3, #8
    47ba:	81a3      	strh	r3, [r4, #12]
    47bc:	61a0      	str	r0, [r4, #24]
    47be:	89a3      	ldrh	r3, [r4, #12]
    47c0:	f043 0304 	orr.w	r3, r3, #4
    47c4:	81a3      	strh	r3, [r4, #12]
    47c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    47c8:	6862      	ldr	r2, [r4, #4]
    47ca:	b2ed      	uxtb	r5, r5
    47cc:	b1e3      	cbz	r3, 4808 <_ungetc_r+0xa0>
    47ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    47d0:	429a      	cmp	r2, r3
    47d2:	da12      	bge.n	47fa <_ungetc_r+0x92>
    47d4:	6823      	ldr	r3, [r4, #0]
    47d6:	1e5a      	subs	r2, r3, #1
    47d8:	6022      	str	r2, [r4, #0]
    47da:	f803 5c01 	strb.w	r5, [r3, #-1]
    47de:	6863      	ldr	r3, [r4, #4]
    47e0:	3301      	adds	r3, #1
    47e2:	6063      	str	r3, [r4, #4]
    47e4:	e7c8      	b.n	4778 <_ungetc_r+0x10>
    47e6:	4b17      	ldr	r3, [pc, #92]	; (4844 <_ungetc_r+0xdc>)
    47e8:	429c      	cmp	r4, r3
    47ea:	d101      	bne.n	47f0 <_ungetc_r+0x88>
    47ec:	68b4      	ldr	r4, [r6, #8]
    47ee:	e7ce      	b.n	478e <_ungetc_r+0x26>
    47f0:	4b15      	ldr	r3, [pc, #84]	; (4848 <_ungetc_r+0xe0>)
    47f2:	429c      	cmp	r4, r3
    47f4:	bf08      	it	eq
    47f6:	68f4      	ldreq	r4, [r6, #12]
    47f8:	e7c9      	b.n	478e <_ungetc_r+0x26>
    47fa:	4621      	mov	r1, r4
    47fc:	4630      	mov	r0, r6
    47fe:	f7ff ff77 	bl	46f0 <__submore>
    4802:	2800      	cmp	r0, #0
    4804:	d0e6      	beq.n	47d4 <_ungetc_r+0x6c>
    4806:	e7b5      	b.n	4774 <_ungetc_r+0xc>
    4808:	6921      	ldr	r1, [r4, #16]
    480a:	6823      	ldr	r3, [r4, #0]
    480c:	b151      	cbz	r1, 4824 <_ungetc_r+0xbc>
    480e:	4299      	cmp	r1, r3
    4810:	d208      	bcs.n	4824 <_ungetc_r+0xbc>
    4812:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    4816:	428d      	cmp	r5, r1
    4818:	d104      	bne.n	4824 <_ungetc_r+0xbc>
    481a:	3b01      	subs	r3, #1
    481c:	3201      	adds	r2, #1
    481e:	6023      	str	r3, [r4, #0]
    4820:	6062      	str	r2, [r4, #4]
    4822:	e7a9      	b.n	4778 <_ungetc_r+0x10>
    4824:	63e3      	str	r3, [r4, #60]	; 0x3c
    4826:	f104 0344 	add.w	r3, r4, #68	; 0x44
    482a:	6363      	str	r3, [r4, #52]	; 0x34
    482c:	2303      	movs	r3, #3
    482e:	63a3      	str	r3, [r4, #56]	; 0x38
    4830:	4623      	mov	r3, r4
    4832:	6422      	str	r2, [r4, #64]	; 0x40
    4834:	f803 5f46 	strb.w	r5, [r3, #70]!
    4838:	6023      	str	r3, [r4, #0]
    483a:	2301      	movs	r3, #1
    483c:	e7d1      	b.n	47e2 <_ungetc_r+0x7a>
    483e:	bf00      	nop
    4840:	000051f0 	.word	0x000051f0
    4844:	00005210 	.word	0x00005210
    4848:	000051d0 	.word	0x000051d0

0000484c <_fstat_r>:
    484c:	b538      	push	{r3, r4, r5, lr}
    484e:	4c07      	ldr	r4, [pc, #28]	; (486c <_fstat_r+0x20>)
    4850:	2300      	movs	r3, #0
    4852:	4605      	mov	r5, r0
    4854:	4608      	mov	r0, r1
    4856:	4611      	mov	r1, r2
    4858:	6023      	str	r3, [r4, #0]
    485a:	f7fc f87c 	bl	956 <_fstat>
    485e:	1c43      	adds	r3, r0, #1
    4860:	d102      	bne.n	4868 <_fstat_r+0x1c>
    4862:	6823      	ldr	r3, [r4, #0]
    4864:	b103      	cbz	r3, 4868 <_fstat_r+0x1c>
    4866:	602b      	str	r3, [r5, #0]
    4868:	bd38      	pop	{r3, r4, r5, pc}
    486a:	bf00      	nop
    486c:	200046fc 	.word	0x200046fc

00004870 <_isatty_r>:
    4870:	b538      	push	{r3, r4, r5, lr}
    4872:	4c06      	ldr	r4, [pc, #24]	; (488c <_isatty_r+0x1c>)
    4874:	2300      	movs	r3, #0
    4876:	4605      	mov	r5, r0
    4878:	4608      	mov	r0, r1
    487a:	6023      	str	r3, [r4, #0]
    487c:	f7fc f870 	bl	960 <_isatty>
    4880:	1c43      	adds	r3, r0, #1
    4882:	d102      	bne.n	488a <_isatty_r+0x1a>
    4884:	6823      	ldr	r3, [r4, #0]
    4886:	b103      	cbz	r3, 488a <_isatty_r+0x1a>
    4888:	602b      	str	r3, [r5, #0]
    488a:	bd38      	pop	{r3, r4, r5, pc}
    488c:	200046fc 	.word	0x200046fc

00004890 <__locale_ctype_ptr_l>:
    4890:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    4894:	4770      	bx	lr
	...

00004898 <__locale_ctype_ptr>:
    4898:	4b04      	ldr	r3, [pc, #16]	; (48ac <__locale_ctype_ptr+0x14>)
    489a:	4a05      	ldr	r2, [pc, #20]	; (48b0 <__locale_ctype_ptr+0x18>)
    489c:	681b      	ldr	r3, [r3, #0]
    489e:	6a1b      	ldr	r3, [r3, #32]
    48a0:	2b00      	cmp	r3, #0
    48a2:	bf08      	it	eq
    48a4:	4613      	moveq	r3, r2
    48a6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    48aa:	4770      	bx	lr
    48ac:	2000026c 	.word	0x2000026c
    48b0:	200002d0 	.word	0x200002d0

000048b4 <__ascii_mbtowc>:
    48b4:	b082      	sub	sp, #8
    48b6:	b901      	cbnz	r1, 48ba <__ascii_mbtowc+0x6>
    48b8:	a901      	add	r1, sp, #4
    48ba:	b142      	cbz	r2, 48ce <__ascii_mbtowc+0x1a>
    48bc:	b14b      	cbz	r3, 48d2 <__ascii_mbtowc+0x1e>
    48be:	7813      	ldrb	r3, [r2, #0]
    48c0:	600b      	str	r3, [r1, #0]
    48c2:	7812      	ldrb	r2, [r2, #0]
    48c4:	1c10      	adds	r0, r2, #0
    48c6:	bf18      	it	ne
    48c8:	2001      	movne	r0, #1
    48ca:	b002      	add	sp, #8
    48cc:	4770      	bx	lr
    48ce:	4610      	mov	r0, r2
    48d0:	e7fb      	b.n	48ca <__ascii_mbtowc+0x16>
    48d2:	f06f 0001 	mvn.w	r0, #1
    48d6:	e7f8      	b.n	48ca <__ascii_mbtowc+0x16>
	...

000048e0 <memchr>:
    48e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    48e4:	2a10      	cmp	r2, #16
    48e6:	db2b      	blt.n	4940 <memchr+0x60>
    48e8:	f010 0f07 	tst.w	r0, #7
    48ec:	d008      	beq.n	4900 <memchr+0x20>
    48ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    48f2:	3a01      	subs	r2, #1
    48f4:	428b      	cmp	r3, r1
    48f6:	d02d      	beq.n	4954 <memchr+0x74>
    48f8:	f010 0f07 	tst.w	r0, #7
    48fc:	b342      	cbz	r2, 4950 <memchr+0x70>
    48fe:	d1f6      	bne.n	48ee <memchr+0xe>
    4900:	b4f0      	push	{r4, r5, r6, r7}
    4902:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    4906:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    490a:	f022 0407 	bic.w	r4, r2, #7
    490e:	f07f 0700 	mvns.w	r7, #0
    4912:	2300      	movs	r3, #0
    4914:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    4918:	3c08      	subs	r4, #8
    491a:	ea85 0501 	eor.w	r5, r5, r1
    491e:	ea86 0601 	eor.w	r6, r6, r1
    4922:	fa85 f547 	uadd8	r5, r5, r7
    4926:	faa3 f587 	sel	r5, r3, r7
    492a:	fa86 f647 	uadd8	r6, r6, r7
    492e:	faa5 f687 	sel	r6, r5, r7
    4932:	b98e      	cbnz	r6, 4958 <memchr+0x78>
    4934:	d1ee      	bne.n	4914 <memchr+0x34>
    4936:	bcf0      	pop	{r4, r5, r6, r7}
    4938:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    493c:	f002 0207 	and.w	r2, r2, #7
    4940:	b132      	cbz	r2, 4950 <memchr+0x70>
    4942:	f810 3b01 	ldrb.w	r3, [r0], #1
    4946:	3a01      	subs	r2, #1
    4948:	ea83 0301 	eor.w	r3, r3, r1
    494c:	b113      	cbz	r3, 4954 <memchr+0x74>
    494e:	d1f8      	bne.n	4942 <memchr+0x62>
    4950:	2000      	movs	r0, #0
    4952:	4770      	bx	lr
    4954:	3801      	subs	r0, #1
    4956:	4770      	bx	lr
    4958:	2d00      	cmp	r5, #0
    495a:	bf06      	itte	eq
    495c:	4635      	moveq	r5, r6
    495e:	3803      	subeq	r0, #3
    4960:	3807      	subne	r0, #7
    4962:	f015 0f01 	tst.w	r5, #1
    4966:	d107      	bne.n	4978 <memchr+0x98>
    4968:	3001      	adds	r0, #1
    496a:	f415 7f80 	tst.w	r5, #256	; 0x100
    496e:	bf02      	ittt	eq
    4970:	3001      	addeq	r0, #1
    4972:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    4976:	3001      	addeq	r0, #1
    4978:	bcf0      	pop	{r4, r5, r6, r7}
    497a:	3801      	subs	r0, #1
    497c:	4770      	bx	lr
    497e:	bf00      	nop

00004980 <memcpy>:
    4980:	b510      	push	{r4, lr}
    4982:	1e43      	subs	r3, r0, #1
    4984:	440a      	add	r2, r1
    4986:	4291      	cmp	r1, r2
    4988:	d100      	bne.n	498c <memcpy+0xc>
    498a:	bd10      	pop	{r4, pc}
    498c:	f811 4b01 	ldrb.w	r4, [r1], #1
    4990:	f803 4f01 	strb.w	r4, [r3, #1]!
    4994:	e7f7      	b.n	4986 <memcpy+0x6>

00004996 <memmove>:
    4996:	4288      	cmp	r0, r1
    4998:	b510      	push	{r4, lr}
    499a:	eb01 0302 	add.w	r3, r1, r2
    499e:	d803      	bhi.n	49a8 <memmove+0x12>
    49a0:	1e42      	subs	r2, r0, #1
    49a2:	4299      	cmp	r1, r3
    49a4:	d10c      	bne.n	49c0 <memmove+0x2a>
    49a6:	bd10      	pop	{r4, pc}
    49a8:	4298      	cmp	r0, r3
    49aa:	d2f9      	bcs.n	49a0 <memmove+0xa>
    49ac:	1881      	adds	r1, r0, r2
    49ae:	1ad2      	subs	r2, r2, r3
    49b0:	42d3      	cmn	r3, r2
    49b2:	d100      	bne.n	49b6 <memmove+0x20>
    49b4:	bd10      	pop	{r4, pc}
    49b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    49ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
    49be:	e7f7      	b.n	49b0 <memmove+0x1a>
    49c0:	f811 4b01 	ldrb.w	r4, [r1], #1
    49c4:	f802 4f01 	strb.w	r4, [r2, #1]!
    49c8:	e7eb      	b.n	49a2 <memmove+0xc>

000049ca <_realloc_r>:
    49ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49cc:	4607      	mov	r7, r0
    49ce:	4614      	mov	r4, r2
    49d0:	460e      	mov	r6, r1
    49d2:	b921      	cbnz	r1, 49de <_realloc_r+0x14>
    49d4:	4611      	mov	r1, r2
    49d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    49da:	f7fe b9e3 	b.w	2da4 <_malloc_r>
    49de:	b922      	cbnz	r2, 49ea <_realloc_r+0x20>
    49e0:	f7fe f992 	bl	2d08 <_free_r>
    49e4:	4625      	mov	r5, r4
    49e6:	4628      	mov	r0, r5
    49e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49ea:	f000 f821 	bl	4a30 <_malloc_usable_size_r>
    49ee:	4284      	cmp	r4, r0
    49f0:	d90f      	bls.n	4a12 <_realloc_r+0x48>
    49f2:	4621      	mov	r1, r4
    49f4:	4638      	mov	r0, r7
    49f6:	f7fe f9d5 	bl	2da4 <_malloc_r>
    49fa:	4605      	mov	r5, r0
    49fc:	2800      	cmp	r0, #0
    49fe:	d0f2      	beq.n	49e6 <_realloc_r+0x1c>
    4a00:	4631      	mov	r1, r6
    4a02:	4622      	mov	r2, r4
    4a04:	f7ff ffbc 	bl	4980 <memcpy>
    4a08:	4631      	mov	r1, r6
    4a0a:	4638      	mov	r0, r7
    4a0c:	f7fe f97c 	bl	2d08 <_free_r>
    4a10:	e7e9      	b.n	49e6 <_realloc_r+0x1c>
    4a12:	4635      	mov	r5, r6
    4a14:	e7e7      	b.n	49e6 <_realloc_r+0x1c>

00004a16 <__ascii_wctomb>:
    4a16:	b149      	cbz	r1, 4a2c <__ascii_wctomb+0x16>
    4a18:	2aff      	cmp	r2, #255	; 0xff
    4a1a:	bf85      	ittet	hi
    4a1c:	238a      	movhi	r3, #138	; 0x8a
    4a1e:	6003      	strhi	r3, [r0, #0]
    4a20:	700a      	strbls	r2, [r1, #0]
    4a22:	f04f 30ff 	movhi.w	r0, #4294967295
    4a26:	bf98      	it	ls
    4a28:	2001      	movls	r0, #1
    4a2a:	4770      	bx	lr
    4a2c:	4608      	mov	r0, r1
    4a2e:	4770      	bx	lr

00004a30 <_malloc_usable_size_r>:
    4a30:	f851 0c04 	ldr.w	r0, [r1, #-4]
    4a34:	2800      	cmp	r0, #0
    4a36:	f1a0 0004 	sub.w	r0, r0, #4
    4a3a:	bfbc      	itt	lt
    4a3c:	580b      	ldrlt	r3, [r1, r0]
    4a3e:	18c0      	addlt	r0, r0, r3
    4a40:	4770      	bx	lr
    4a42:	0000      	movs	r0, r0
    4a44:	682f2e2e 	.word	0x682f2e2e
    4a48:	732f6c61 	.word	0x732f6c61
    4a4c:	682f6372 	.word	0x682f6372
    4a50:	695f6c61 	.word	0x695f6c61
    4a54:	00632e6f 	.word	0x00632e6f
    4a58:	682f2e2e 	.word	0x682f2e2e
    4a5c:	732f6c61 	.word	0x732f6c61
    4a60:	682f6372 	.word	0x682f6372
    4a64:	6d5f6c61 	.word	0x6d5f6c61
    4a68:	735f6963 	.word	0x735f6963
    4a6c:	2e636e79 	.word	0x2e636e79
    4a70:	00000063 	.word	0x00000063
    4a74:	682f2e2e 	.word	0x682f2e2e
    4a78:	732f6c61 	.word	0x732f6c61
    4a7c:	682f6372 	.word	0x682f6372
    4a80:	755f6c61 	.word	0x755f6c61
    4a84:	74726173 	.word	0x74726173
    4a88:	6e79735f 	.word	0x6e79735f
    4a8c:	00632e63 	.word	0x00632e63
    4a90:	682f2e2e 	.word	0x682f2e2e
    4a94:	732f6c70 	.word	0x732f6c70
    4a98:	2f636864 	.word	0x2f636864
    4a9c:	5f6c7068 	.word	0x5f6c7068
    4aa0:	63686473 	.word	0x63686473
    4aa4:	0000632e 	.word	0x0000632e
    4aa8:	40003000 	.word	0x40003000
    4aac:	40003400 	.word	0x40003400
    4ab0:	41012000 	.word	0x41012000
    4ab4:	41014000 	.word	0x41014000
    4ab8:	43000000 	.word	0x43000000
    4abc:	43000400 	.word	0x43000400
    4ac0:	43000800 	.word	0x43000800
    4ac4:	43000c00 	.word	0x43000c00

00004ac8 <_usarts>:
    4ac8:	00000000 40100004 00030000 00700002     .......@......p.
    4ad8:	0000d8ad 00000000 00000002 40100004     ...............@
    4ae8:	00030000 00700002 0000d8ad 00000000     ......p.........

00004af8 <_i2cms>:
	...
    4b10:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4b20:	65735f6c 6d6f6372 0000632e 5b53227b     l_sercom.c..{"S[
    4b30:	75343025 7b3a225d 3a225122 222c7525     %04u]":{"Q":%u,"
    4b40:	253a2241 44222c75 7d752522 000a0d7d     A":%u,"D"%u}}...
    4b50:	5b43227b 75343025 7b3a225d 3a225322     {"C[%04u]":{"S":
    4b60:	222c7525 3a224153 222c7525 3a223141     %u,"SA":%u,"A1":
    4b70:	222c7525 3a223241 222c7525 3a223144     %u,"A2":%u,"D1":
    4b80:	222c7525 3a223244 7d7d7525 00000a0d     %u,"D2":%u}}....
    4b90:	4144694c 74732052 6570706f 00000d64     LiDAR stopped...
    4ba0:	4144694c 65722052 0d746573 00000000     LiDAR reset.....
    4bb0:	68746167 64657265 64302520 6430252f     gathered %0d/%0d
    4bc0:	61637320 2e2e736e 000a0d2e 20643025      scans......%0d 
    4bd0:	61766e69 2064696c 6e616373 2d2d2073     invalid scans --
    4be0:	74616720 65726568 30252064 30252f64      gathered %0d/%0
    4bf0:	63732064 2e736e61 0a0d2e2e 00000000     d scans.........
    4c00:	454e4f44 0000000d 58323025 00000000     DONE....%02X....
    4c10:	52203a20 44694c50 4d205241 6c65646f      : RPLiDAR Model
    4c20:	3a444920 0d752520 0000000a 46203a20      ID: %u..... : F
    4c30:	776d7269 20657261 73726556 3a6e6f69     irmware Version:
    4c40:	2e752520 0a0d7525 00000000 48203a20      %u.%u...... : H
    4c50:	77647261 20657261 73726556 3a6e6f69     ardware Version:
    4c60:	0d752520 0000000a 53203a20 61697265      %u..... : Seria
    4c70:	754e206c 7265626d 7830203a 0a0d7325     l Number: 0x%s..
    4c80:	00000000 444f4f47 00000000 4e524157     ....GOOD....WARN
    4c90:	00474e49 4f525245 00000052 4e4b4e55     ING.ERROR...UNKN
    4ca0:	004e574f 4c203a20 52414469 61654820     OWN. : LiDAR Hea
    4cb0:	2068746c 25207369 0a0d2173 00000000     lth is %s!......
    4cc0:	4c203a20 52414469 61654820 2068746c      : LiDAR Health 
    4cd0:	25207369 0a0d2173 45203a20 726f7272     is %s!.. : Error
    4ce0:	646f6320 25203a65 000a0d75 53203a20      code: %u... : S
    4cf0:	646e6174 20647261 6e616353 6d615320     tandard Scan Sam
    4d00:	72656c70 3a657461 0d752520 0000000a     plerate: %u.....
    4d10:	45203a20 65727078 53207373 206e6163      : Express Scan 
    4d20:	706d6153 6172656c 203a6574 0a0d7525     Samplerate: %u..
    4d30:	00000000 63256325 00000000 63256325     ....%c%c....%c%c
    4d40:	00006325 00007325 00786825 65530a0d     %c..%s..%hx...Se
    4d50:	7463656c 6f206465 6f697470 7369206e     lected option is
    4d60:	0d642520 0000000a 65520a0d 6e727574      %d.......Return
    4d70:	20676e69 6d206f74 206e6961 756e656d     ing to main menu
    4d80:	0000000d 74530a0d 69747261 4c20676e     ......Starting L
    4d90:	52414469 746f6d20 000d726f 74530a0d     iDAR motor....St
    4da0:	6970706f 4c20676e 52414469 746f6d20     opping LiDAR mot
    4db0:	000d726f 65520a0d 73657571 676e6974     or....Requesting
    4dc0:	44694c20 73205241 0d706f74 00000000      LiDAR stop.....
    4dd0:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    4de0:	72205241 74657365 0000000d 65520a0d     AR reset......Re
    4df0:	73657571 676e6974 44694c20 73205241     questing LiDAR s
    4e00:	74726174 61637320 00000d6e 65520a0d     tart scan.....Re
    4e10:	73657571 676e6974 44694c20 73205241     questing LiDAR s
    4e20:	74726174 70786520 73736572 61637320     tart express sca
    4e30:	00000d6e 65520a0d 73657571 676e6974     n.....Requesting
    4e40:	44694c20 73205241 74726174 726f6620      LiDAR start for
    4e50:	73206563 0d6e6163 00000000 65520a0d     ce scan.......Re
    4e60:	65697274 676e6976 44694c20 69205241     trieving LiDAR i
    4e70:	0d6f666e 00000000 65520a0d 65697274     nfo.......Retrie
    4e80:	676e6976 44694c20 68205241 746c6165     ving LiDAR healt
    4e90:	00000d68 65520a0d 65697274 676e6976     h.....Retrieving
    4ea0:	44694c20 73205241 6c706d61 74617265      LiDAR samplerat
    4eb0:	000d7365 6e490a0d 696c6176 706f2064     es....Invalid op
    4ec0:	6e6f6974 0000000d 21210a0d 21212121     tion......!!!!!!
    4ed0:	49202121 6148206e 61466472 5f746c75     !! In HardFault_
    4ee0:	646e6148 2072656c 21212121 21212121     Handler !!!!!!!!
    4ef0:	0000000d 0a0d0a0d 3d3d3d3d 3d3d3d3d     ........========
    4f00:	4144694c 75412052 616d6f74 20646574     LiDAR Automated 
    4f10:	7070614d 20676e69 74737953 28206d65     Mapping System (
    4f20:	534d414c 3d3d3d29 3d3d3d3d 00000d3d     LAMS)========...
    4f30:	6e490a0d 696c6176 706f2064 6e6f6974     ..Invalid option
    4f40:	00000d20 6e450a0d 20726574 6c676e61      .....Enter angl
    4f50:	3e3e2065 00000020 52450a0d 3a524f52     e >> .....ERROR:
    4f60:	766e4920 64696c61 676e6120 202e656c      Invalid angle. 
    4f70:	6c676e41 756d2065 62207473 65622065     Angle must be be
    4f80:	65657774 2030206e 20646e61 0d303831     tween 0 and 180.
    4f90:	00000000 65530a0d 6e697474 65732067     ......Setting se
    4fa0:	206f7672 6c676e61 6f742065 64302520     rvo angle to %0d
    4fb0:	00000a0d 61440a0d 61206174 65742074     ......Data at te
    4fc0:	61207473 65726464 25207373 73692064     st address %d is
    4fd0:	25203d20 000a0d64 6e490a0d 74726576      = %d.....Invert
    4fe0:	74206465 64206568 20617461 74207461     ed the data at t
    4ff0:	20747365 72646461 20737365 20646e61     est address and 
    5000:	74697277 0d6e6574 00000000 6c500a0d     written.......Pl
    5010:	65736165 6e6f6320 75676966 53206572     ease configure S
    5020:	204b4c42 65737566 206f7420 6f6c6c61     BLK fuse to allo
    5030:	65746163 616d5320 45457472 4d4f5250     cate SmartEEPROM
    5040:	65726120 00000d61 64323025 00000020      area...%02d ...
    5050:	6d530a0d 45747261 4f525045 6f63204d     ..SmartEEPROM co
    5060:	6961746e 7620736e 64696c61 74616420     ntains valid dat
    5070:	000d2061 74530a0d 6e69726f 69732067     a ....Storing si
    5080:	74616e67 20657275 53206f74 7472616d     gnature to Smart
    5090:	52504545 61204d4f 65726464 30207373     EEPROM address 0
    50a0:	20303078 30206f74 0d333078 00000000     x00 to 0x03.....
    50b0:	75460a0d 76206573 65756c61 6f662073     ..Fuse values fo
    50c0:	42532072 3d204b4c 2c642520 5a535020     r SBLK = %d, PSZ
    50d0:	25203d20 53202e64 74206565 74206568      = %d. See the t
    50e0:	656c6261 6d532720 45747261 4f525045     able 'SmartEEPRO
    50f0:	6956204d 61757472 0909206c 657a6953     M Virtual ..Size
    5100:	206e6920 65747942 69202773 6874206e      in Bytes' in th
    5110:	61442065 68736174 20746565 63206f74     e Datasheet to c
    5120:	75636c61 6574616c 746f7420 61206c61     alculate total a
    5130:	6c696176 656c6261 74796220 0d207365     vailable bytes .
    5140:	0000000a 45450a0d 4d4f5250 74614420     ......EEPROM Dat
    5150:	74612061 72696620 25207473 6f6c2064     a at first %d lo
    5160:	69746163 3a736e6f 000a0d20 6e450a0d     cations: .....En
    5170:	20726574 72646461 20737365 00203e3e     ter address >> .
    5180:	52450a0d 3a524f52 64644120 73736572     ..ERROR: Address
    5190:	766e6920 64696c61 7254202e 67612079      invalid. Try ag
    51a0:	206e6961 0000000d 6e450a0d 20726574     ain ......Enter 
    51b0:	61746164 203e3e20 00000000 72570a0d     data >> ......Wr
    51c0:	65747469 6425206e 20746120 00006425     itten %d at %d..

000051d0 <__sf_fake_stderr>:
	...

000051f0 <__sf_fake_stdin>:
	...

00005210 <__sf_fake_stdout>:
	...

00005230 <_global_impure_ptr>:
    5230:	20000270 2b302d23 6c680020 6665004c     p.. #-0+ .hlL.ef
    5240:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    5250:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    5260:	64636261 00006665 00005286 00005289     abcdef...R...R..
    5270:	0000528c 61462d41 3938662d 33323130     .R..A-Fa-f890123
    5280:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    5290:	534f5000 2e005849 20200000                       .POSIX...

00005299 <_ctype_>:
    5299:	20202000 20202020 28282020 20282828     .         ((((( 
    52a9:	20202020 20202020 20202020 20202020                     
    52b9:	10108820 10101010 10101010 10101010      ...............
    52c9:	04040410 04040404 10040404 10101010     ................
    52d9:	41411010 41414141 01010101 01010101     ..AAAAAA........
    52e9:	01010101 01010101 01010101 10101010     ................
    52f9:	42421010 42424242 02020202 02020202     ..BBBBBB........
    5309:	02020202 02020202 02020202 10101010     ................
    5319:	00000020 00000000 00000000 00000000      ...............
	...

0000539c <_init>:
    539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    539e:	bf00      	nop
    53a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    53a2:	bc08      	pop	{r3}
    53a4:	469e      	mov	lr, r3
    53a6:	4770      	bx	lr

000053a8 <__init_array_start>:
    53a8:	00000289 	.word	0x00000289

000053ac <_fini>:
    53ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ae:	bf00      	nop
    53b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    53b2:	bc08      	pop	{r3}
    53b4:	469e      	mov	lr, r3
    53b6:	4770      	bx	lr

000053b8 <__fini_array_start>:
    53b8:	00000265 	.word	0x00000265
