
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043fc  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000448  20000000  000043fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020448  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020448  2**0
                  CONTENTS
  4 .bss          0000012c  20000448  00004848  00020448  2**3
                  ALLOC
  5 .stack        00010004  20000574  00004974  00020448  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020476  2**0
                  CONTENTS, READONLY
  8 .debug_info   00033076  00000000  00000000  000204cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000041e0  00000000  00000000  00053545  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ec54  00000000  00000000  00057725  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000bb8  00000000  00000000  00066379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fb8  00000000  00000000  00066f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037a78  00000000  00000000  00067ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017819  00000000  00000000  0009f961  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125636  00000000  00000000  000b717a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002c14  00000000  00000000  001dc7b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 05 01 20 f1 02 00 00 ed 02 00 00 bd 0f 00 00     x.. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	99 09 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1f4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000448 	.word	0x20000448
     280:	00000000 	.word	0x00000000
     284:	000043fc 	.word	0x000043fc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000043fc 	.word	0x000043fc
     2c4:	2000044c 	.word	0x2000044c
     2c8:	000043fc 	.word	0x000043fc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	sd_mmc_stack_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	000005f5 	.word	0x000005f5
     2e4:	0000172d 	.word	0x0000172d
     2e8:	000010c9 	.word	0x000010c9

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	000043fc 	.word	0x000043fc
     36c:	20000448 	.word	0x20000448
     370:	20000574 	.word	0x20000574
     374:	20000448 	.word	0x20000448
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	00002275 	.word	0x00002275
     384:	00000fd1 	.word	0x00000fd1

00000388 <STDIO_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     388:	4b10      	ldr	r3, [pc, #64]	; (3cc <STDIO_IO_PORT_init+0x44>)
     38a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     38e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     392:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     396:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     39e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3aa:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3be:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3c2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     3ca:	4770      	bx	lr
     3cc:	41008000 	.word	0x41008000

000003d0 <STDIO_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <STDIO_IO_CLOCK_init+0x1c>)
     3d2:	2240      	movs	r2, #64	; 0x40
     3d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     3d8:	2243      	movs	r2, #67	; 0x43
     3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3de:	4a04      	ldr	r2, [pc, #16]	; (3f0 <STDIO_IO_CLOCK_init+0x20>)
     3e0:	6993      	ldr	r3, [r2, #24]
     3e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     3e6:	6193      	str	r3, [r2, #24]
     3e8:	4770      	bx	lr
     3ea:	bf00      	nop
     3ec:	40001c00 	.word	0x40001c00
     3f0:	40000800 	.word	0x40000800

000003f4 <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     3f4:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <STDIO_IO_init+0x18>)
     3f8:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     3fa:	2200      	movs	r2, #0
     3fc:	4904      	ldr	r1, [pc, #16]	; (410 <STDIO_IO_init+0x1c>)
     3fe:	4805      	ldr	r0, [pc, #20]	; (414 <STDIO_IO_init+0x20>)
     400:	4b05      	ldr	r3, [pc, #20]	; (418 <STDIO_IO_init+0x24>)
     402:	4798      	blx	r3
	STDIO_IO_PORT_init();
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <STDIO_IO_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d1 	.word	0x000003d1
     410:	41012000 	.word	0x41012000
     414:	20000518 	.word	0x20000518
     418:	00000841 	.word	0x00000841
     41c:	00000389 	.word	0x00000389

00000420 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     420:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     422:	4b5e      	ldr	r3, [pc, #376]	; (59c <SDHC_IO_BUS_PORT_init+0x17c>)
     424:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     428:	6098      	str	r0, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     42e:	629a      	str	r2, [r3, #40]	; 0x28
     430:	4c5b      	ldr	r4, [pc, #364]	; (5a0 <SDHC_IO_BUS_PORT_init+0x180>)
     432:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     434:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     436:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     43a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     43e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     452:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     456:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     45a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45e:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     462:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
     466:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     468:	629a      	str	r2, [r3, #40]	; 0x28
     46a:	4e4e      	ldr	r6, [pc, #312]	; (5a4 <SDHC_IO_BUS_PORT_init+0x184>)
     46c:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     46e:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     470:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
     474:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     478:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47c:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     480:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     484:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     488:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48c:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     490:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     494:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     498:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     49c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     4a0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4a8:	4f3f      	ldr	r7, [pc, #252]	; (5a8 <SDHC_IO_BUS_PORT_init+0x188>)
     4aa:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ae:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b2:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
     4b6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4ba:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4be:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ca:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ce:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4d6:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4da:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     4e2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ea:	3704      	adds	r7, #4
     4ec:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
     4f8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4fc:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     514:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     518:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     51c:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     520:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     524:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     528:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     52c:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     530:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
     534:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     538:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53c:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     544:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     548:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54c:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     550:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     554:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     558:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     55c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     560:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     564:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     568:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     56c:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     570:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     574:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     578:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     57c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     580:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     584:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     588:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     58c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     594:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB21I_SDHC1_SDDAT3);
}
     598:	bcf0      	pop	{r4, r5, r6, r7}
     59a:	4770      	bx	lr
     59c:	41008000 	.word	0x41008000
     5a0:	c0000020 	.word	0xc0000020
     5a4:	c0000010 	.word	0xc0000010
     5a8:	c0000004 	.word	0xc0000004

000005ac <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     5ac:	4a05      	ldr	r2, [pc, #20]	; (5c4 <SDHC_IO_BUS_CLOCK_init+0x18>)
     5ae:	6913      	ldr	r3, [r2, #16]
     5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     5b4:	6113      	str	r3, [r2, #16]
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <SDHC_IO_BUS_CLOCK_init+0x1c>)
     5b8:	2240      	movs	r2, #64	; 0x40
     5ba:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     5c2:	4770      	bx	lr
     5c4:	40000800 	.word	0x40000800
     5c8:	40001c00 	.word	0x40001c00

000005cc <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     5cc:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <SDHC_IO_BUS_init+0x18>)
     5d0:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     5d2:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     5d6:	4804      	ldr	r0, [pc, #16]	; (5e8 <SDHC_IO_BUS_init+0x1c>)
     5d8:	4b04      	ldr	r3, [pc, #16]	; (5ec <SDHC_IO_BUS_init+0x20>)
     5da:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <SDHC_IO_BUS_init+0x24>)
     5de:	4798      	blx	r3
     5e0:	bd08      	pop	{r3, pc}
     5e2:	bf00      	nop
     5e4:	000005ad 	.word	0x000005ad
     5e8:	20000528 	.word	0x20000528
     5ec:	0000073d 	.word	0x0000073d
     5f0:	00000421 	.word	0x00000421

000005f4 <system_init>:
}

void system_init(void)
{
     5f4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5f6:	4b2a      	ldr	r3, [pc, #168]	; (6a0 <system_init+0xac>)
     5f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fa:	4b2a      	ldr	r3, [pc, #168]	; (6a4 <system_init+0xb0>)
     5fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     600:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     604:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     60c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     610:	4a25      	ldr	r2, [pc, #148]	; (6a8 <system_init+0xb4>)
     612:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     622:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     626:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62a:	4920      	ldr	r1, [pc, #128]	; (6ac <system_init+0xb8>)
     62c:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     630:	4a1f      	ldr	r2, [pc, #124]	; (6b0 <system_init+0xbc>)
     632:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     636:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
     63a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     63e:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     642:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     646:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     64e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     652:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     656:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     65a:	4a16      	ldr	r2, [pc, #88]	; (6b4 <system_init+0xc0>)
     65c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     660:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     664:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     668:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66c:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     674:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);

	LIDAR_USART_init();
     678:	4b0f      	ldr	r3, [pc, #60]	; (6b8 <system_init+0xc4>)
     67a:	4798      	blx	r3

	STDIO_IO_init();
     67c:	4b0f      	ldr	r3, [pc, #60]	; (6bc <system_init+0xc8>)
     67e:	4798      	blx	r3

	SDHC_IO_BUS_init();
     680:	4b0f      	ldr	r3, [pc, #60]	; (6c0 <system_init+0xcc>)
     682:	4798      	blx	r3

	SERVO_PWM_CLOCK_init();
     684:	4b0f      	ldr	r3, [pc, #60]	; (6c4 <system_init+0xd0>)
     686:	4798      	blx	r3

	SERVO_PWM_PORT_init();
     688:	4b0f      	ldr	r3, [pc, #60]	; (6c8 <system_init+0xd4>)
     68a:	4798      	blx	r3

	SERVO_PWM_init();
     68c:	4b0f      	ldr	r3, [pc, #60]	; (6cc <system_init+0xd8>)
     68e:	4798      	blx	r3

	LIDAR_PWM_CLOCK_init();
     690:	4b0f      	ldr	r3, [pc, #60]	; (6d0 <system_init+0xdc>)
     692:	4798      	blx	r3

	LIDAR_PWM_PORT_init();
     694:	4b0f      	ldr	r3, [pc, #60]	; (6d4 <system_init+0xe0>)
     696:	4798      	blx	r3

	LIDAR_PWM_init();
     698:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <system_init+0xe4>)
     69a:	4798      	blx	r3
     69c:	bd08      	pop	{r3, pc}
     69e:	bf00      	nop
     6a0:	000008f9 	.word	0x000008f9
     6a4:	41008000 	.word	0x41008000
     6a8:	c0000004 	.word	0xc0000004
     6ac:	40020000 	.word	0x40020000
     6b0:	c0020010 	.word	0xc0020010
     6b4:	c0020020 	.word	0xc0020020
     6b8:	00000c7d 	.word	0x00000c7d
     6bc:	000003f5 	.word	0x000003f5
     6c0:	000005cd 	.word	0x000005cd
     6c4:	0000110d 	.word	0x0000110d
     6c8:	000010e5 	.word	0x000010e5
     6cc:	00001129 	.word	0x00001129
     6d0:	00000ce9 	.word	0x00000ce9
     6d4:	00000ca9 	.word	0x00000ca9
     6d8:	00000d05 	.word	0x00000d05

000006dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6dc:	b570      	push	{r4, r5, r6, lr}
     6de:	460d      	mov	r5, r1
     6e0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     6e2:	4604      	mov	r4, r0
     6e4:	b160      	cbz	r0, 700 <io_write+0x24>
     6e6:	1c08      	adds	r0, r1, #0
     6e8:	bf18      	it	ne
     6ea:	2001      	movne	r0, #1
     6ec:	2234      	movs	r2, #52	; 0x34
     6ee:	4905      	ldr	r1, [pc, #20]	; (704 <io_write+0x28>)
     6f0:	4b05      	ldr	r3, [pc, #20]	; (708 <io_write+0x2c>)
     6f2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     6f4:	6823      	ldr	r3, [r4, #0]
     6f6:	4632      	mov	r2, r6
     6f8:	4629      	mov	r1, r5
     6fa:	4620      	mov	r0, r4
     6fc:	4798      	blx	r3
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
     700:	2000      	movs	r0, #0
     702:	e7f3      	b.n	6ec <io_write+0x10>
     704:	00003c80 	.word	0x00003c80
     708:	000008b5 	.word	0x000008b5

0000070c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	460d      	mov	r5, r1
     710:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     712:	4604      	mov	r4, r0
     714:	b160      	cbz	r0, 730 <io_read+0x24>
     716:	1c08      	adds	r0, r1, #0
     718:	bf18      	it	ne
     71a:	2001      	movne	r0, #1
     71c:	223d      	movs	r2, #61	; 0x3d
     71e:	4905      	ldr	r1, [pc, #20]	; (734 <io_read+0x28>)
     720:	4b05      	ldr	r3, [pc, #20]	; (738 <io_read+0x2c>)
     722:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     724:	6863      	ldr	r3, [r4, #4]
     726:	4632      	mov	r2, r6
     728:	4629      	mov	r1, r5
     72a:	4620      	mov	r0, r4
     72c:	4798      	blx	r3
}
     72e:	bd70      	pop	{r4, r5, r6, pc}
     730:	2000      	movs	r0, #0
     732:	e7f3      	b.n	71c <io_read+0x10>
     734:	00003c80 	.word	0x00003c80
     738:	000008b5 	.word	0x000008b5

0000073c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     73c:	b538      	push	{r3, r4, r5, lr}
     73e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     740:	4605      	mov	r5, r0
     742:	b158      	cbz	r0, 75c <mci_sync_init+0x20>
     744:	1c08      	adds	r0, r1, #0
     746:	bf18      	it	ne
     748:	2001      	movne	r0, #1
     74a:	2231      	movs	r2, #49	; 0x31
     74c:	4904      	ldr	r1, [pc, #16]	; (760 <mci_sync_init+0x24>)
     74e:	4b05      	ldr	r3, [pc, #20]	; (764 <mci_sync_init+0x28>)
     750:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     752:	4621      	mov	r1, r4
     754:	4628      	mov	r0, r5
     756:	4b04      	ldr	r3, [pc, #16]	; (768 <mci_sync_init+0x2c>)
     758:	4798      	blx	r3
}
     75a:	bd38      	pop	{r3, r4, r5, pc}
     75c:	2000      	movs	r0, #0
     75e:	e7f4      	b.n	74a <mci_sync_init+0xe>
     760:	00003c94 	.word	0x00003c94
     764:	000008b5 	.word	0x000008b5
     768:	000009dd 	.word	0x000009dd

0000076c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     770:	460f      	mov	r7, r1
     772:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     774:	4604      	mov	r4, r0
     776:	b328      	cbz	r0, 7c4 <usart_sync_write+0x58>
     778:	b331      	cbz	r1, 7c8 <usart_sync_write+0x5c>
     77a:	1c10      	adds	r0, r2, #0
     77c:	bf18      	it	ne
     77e:	2001      	movne	r0, #1
     780:	22f1      	movs	r2, #241	; 0xf1
     782:	4912      	ldr	r1, [pc, #72]	; (7cc <usart_sync_write+0x60>)
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <usart_sync_write+0x64>)
     786:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     788:	3408      	adds	r4, #8
     78a:	4d12      	ldr	r5, [pc, #72]	; (7d4 <usart_sync_write+0x68>)
     78c:	4620      	mov	r0, r4
     78e:	47a8      	blx	r5
     790:	2800      	cmp	r0, #0
     792:	d0fb      	beq.n	78c <usart_sync_write+0x20>
     794:	3f01      	subs	r7, #1
     796:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     798:	f8df 9040 	ldr.w	r9, [pc, #64]	; 7dc <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     79c:	4d0d      	ldr	r5, [pc, #52]	; (7d4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     79e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     7a2:	4620      	mov	r0, r4
     7a4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7a6:	4620      	mov	r0, r4
     7a8:	47a8      	blx	r5
     7aa:	2800      	cmp	r0, #0
     7ac:	d0fb      	beq.n	7a6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     7ae:	3601      	adds	r6, #1
     7b0:	4546      	cmp	r6, r8
     7b2:	d3f4      	bcc.n	79e <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     7b4:	4d08      	ldr	r5, [pc, #32]	; (7d8 <usart_sync_write+0x6c>)
     7b6:	4620      	mov	r0, r4
     7b8:	47a8      	blx	r5
     7ba:	2800      	cmp	r0, #0
     7bc:	d0fb      	beq.n	7b6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     7be:	4630      	mov	r0, r6
     7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     7c4:	2000      	movs	r0, #0
     7c6:	e7db      	b.n	780 <usart_sync_write+0x14>
     7c8:	2000      	movs	r0, #0
     7ca:	e7d9      	b.n	780 <usart_sync_write+0x14>
     7cc:	00003cb0 	.word	0x00003cb0
     7d0:	000008b5 	.word	0x000008b5
     7d4:	00000bf3 	.word	0x00000bf3
     7d8:	00000bfd 	.word	0x00000bfd
     7dc:	00000be5 	.word	0x00000be5

000007e0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7e4:	460f      	mov	r7, r1
     7e6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7e8:	4604      	mov	r4, r0
     7ea:	b1e0      	cbz	r0, 826 <usart_sync_read+0x46>
     7ec:	b1e9      	cbz	r1, 82a <usart_sync_read+0x4a>
     7ee:	1c10      	adds	r0, r2, #0
     7f0:	bf18      	it	ne
     7f2:	2001      	movne	r0, #1
     7f4:	f44f 7286 	mov.w	r2, #268	; 0x10c
     7f8:	490d      	ldr	r1, [pc, #52]	; (830 <usart_sync_read+0x50>)
     7fa:	4b0e      	ldr	r3, [pc, #56]	; (834 <usart_sync_read+0x54>)
     7fc:	4798      	blx	r3
     7fe:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     800:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     802:	3408      	adds	r4, #8
     804:	4d0c      	ldr	r5, [pc, #48]	; (838 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     806:	f8df 9034 	ldr.w	r9, [pc, #52]	; 83c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     80a:	4620      	mov	r0, r4
     80c:	47a8      	blx	r5
     80e:	2800      	cmp	r0, #0
     810:	d0fb      	beq.n	80a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     812:	4620      	mov	r0, r4
     814:	47c8      	blx	r9
     816:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     81a:	3601      	adds	r6, #1
     81c:	4546      	cmp	r6, r8
     81e:	d3f4      	bcc.n	80a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     820:	4630      	mov	r0, r6
     822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     826:	2000      	movs	r0, #0
     828:	e7e4      	b.n	7f4 <usart_sync_read+0x14>
     82a:	2000      	movs	r0, #0
     82c:	e7e2      	b.n	7f4 <usart_sync_read+0x14>
     82e:	bf00      	nop
     830:	00003cb0 	.word	0x00003cb0
     834:	000008b5 	.word	0x000008b5
     838:	00000c07 	.word	0x00000c07
     83c:	00000beb 	.word	0x00000beb

00000840 <usart_sync_init>:
{
     840:	b538      	push	{r3, r4, r5, lr}
     842:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     844:	4604      	mov	r4, r0
     846:	b198      	cbz	r0, 870 <usart_sync_init+0x30>
     848:	1c08      	adds	r0, r1, #0
     84a:	bf18      	it	ne
     84c:	2001      	movne	r0, #1
     84e:	2234      	movs	r2, #52	; 0x34
     850:	4908      	ldr	r1, [pc, #32]	; (874 <usart_sync_init+0x34>)
     852:	4b09      	ldr	r3, [pc, #36]	; (878 <usart_sync_init+0x38>)
     854:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     856:	4629      	mov	r1, r5
     858:	f104 0008 	add.w	r0, r4, #8
     85c:	4b07      	ldr	r3, [pc, #28]	; (87c <usart_sync_init+0x3c>)
     85e:	4798      	blx	r3
	if (init_status) {
     860:	4603      	mov	r3, r0
     862:	b918      	cbnz	r0, 86c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     864:	4a06      	ldr	r2, [pc, #24]	; (880 <usart_sync_init+0x40>)
     866:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     868:	4a06      	ldr	r2, [pc, #24]	; (884 <usart_sync_init+0x44>)
     86a:	6022      	str	r2, [r4, #0]
}
     86c:	4618      	mov	r0, r3
     86e:	bd38      	pop	{r3, r4, r5, pc}
     870:	2000      	movs	r0, #0
     872:	e7ec      	b.n	84e <usart_sync_init+0xe>
     874:	00003cb0 	.word	0x00003cb0
     878:	000008b5 	.word	0x000008b5
     87c:	00000ba5 	.word	0x00000ba5
     880:	000007e1 	.word	0x000007e1
     884:	0000076d 	.word	0x0000076d

00000888 <usart_sync_enable>:
{
     888:	b510      	push	{r4, lr}
	ASSERT(descr);
     88a:	4604      	mov	r4, r0
     88c:	2253      	movs	r2, #83	; 0x53
     88e:	4906      	ldr	r1, [pc, #24]	; (8a8 <usart_sync_enable+0x20>)
     890:	3000      	adds	r0, #0
     892:	bf18      	it	ne
     894:	2001      	movne	r0, #1
     896:	4b05      	ldr	r3, [pc, #20]	; (8ac <usart_sync_enable+0x24>)
     898:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     89a:	f104 0008 	add.w	r0, r4, #8
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <usart_sync_enable+0x28>)
     8a0:	4798      	blx	r3
}
     8a2:	2000      	movs	r0, #0
     8a4:	bd10      	pop	{r4, pc}
     8a6:	bf00      	nop
     8a8:	00003cb0 	.word	0x00003cb0
     8ac:	000008b5 	.word	0x000008b5
     8b0:	00000bd1 	.word	0x00000bd1

000008b4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8b4:	b900      	cbnz	r0, 8b8 <assert+0x4>
		__asm("BKPT #0");
     8b6:	be00      	bkpt	0x0000
     8b8:	4770      	bx	lr
	...

000008bc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     8bc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     8be:	4a06      	ldr	r2, [pc, #24]	; (8d8 <_sbrk+0x1c>)
     8c0:	6812      	ldr	r2, [r2, #0]
     8c2:	b122      	cbz	r2, 8ce <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     8c4:	4a04      	ldr	r2, [pc, #16]	; (8d8 <_sbrk+0x1c>)
     8c6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     8c8:	4403      	add	r3, r0
     8ca:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     8cc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     8ce:	4903      	ldr	r1, [pc, #12]	; (8dc <_sbrk+0x20>)
     8d0:	4a01      	ldr	r2, [pc, #4]	; (8d8 <_sbrk+0x1c>)
     8d2:	6011      	str	r1, [r2, #0]
     8d4:	e7f6      	b.n	8c4 <_sbrk+0x8>
     8d6:	bf00      	nop
     8d8:	20000464 	.word	0x20000464
     8dc:	20010578 	.word	0x20010578

000008e0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     8e0:	f04f 30ff 	mov.w	r0, #4294967295
     8e4:	4770      	bx	lr

000008e6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     8e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     8ea:	604b      	str	r3, [r1, #4]

	return 0;
}
     8ec:	2000      	movs	r0, #0
     8ee:	4770      	bx	lr

000008f0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     8f0:	2001      	movs	r0, #1
     8f2:	4770      	bx	lr

000008f4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     8f4:	2000      	movs	r0, #0
     8f6:	4770      	bx	lr

000008f8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     8f8:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     8fa:	4a08      	ldr	r2, [pc, #32]	; (91c <_init_chip+0x24>)
     8fc:	8813      	ldrh	r3, [r2, #0]
     8fe:	b29b      	uxth	r3, r3
     900:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     902:	4b07      	ldr	r3, [pc, #28]	; (920 <_init_chip+0x28>)
     904:	4798      	blx	r3
	_oscctrl_init_sources();
     906:	4b07      	ldr	r3, [pc, #28]	; (924 <_init_chip+0x2c>)
     908:	4798      	blx	r3
	_mclk_init();
     90a:	4b07      	ldr	r3, [pc, #28]	; (928 <_init_chip+0x30>)
     90c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     90e:	4b07      	ldr	r3, [pc, #28]	; (92c <_init_chip+0x34>)
     910:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     912:	f640 70ff 	movw	r0, #4095	; 0xfff
     916:	4b06      	ldr	r3, [pc, #24]	; (930 <_init_chip+0x38>)
     918:	4798      	blx	r3
     91a:	bd08      	pop	{r3, pc}
     91c:	41004000 	.word	0x41004000
     920:	00000965 	.word	0x00000965
     924:	00000979 	.word	0x00000979
     928:	00000959 	.word	0x00000959
     92c:	00000995 	.word	0x00000995
     930:	00000935 	.word	0x00000935

00000934 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     934:	f010 0f01 	tst.w	r0, #1
     938:	d008      	beq.n	94c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     93a:	4a05      	ldr	r2, [pc, #20]	; (950 <_gclk_init_generators_by_fref+0x1c>)
     93c:	4b05      	ldr	r3, [pc, #20]	; (954 <_gclk_init_generators_by_fref+0x20>)
     93e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     940:	4619      	mov	r1, r3
     942:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     946:	684b      	ldr	r3, [r1, #4]
     948:	4213      	tst	r3, r2
     94a:	d1fc      	bne.n	946 <_gclk_init_generators_by_fref+0x12>
     94c:	4770      	bx	lr
     94e:	bf00      	nop
     950:	00010101 	.word	0x00010101
     954:	40001c00 	.word	0x40001c00

00000958 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     958:	2201      	movs	r2, #1
     95a:	4b01      	ldr	r3, [pc, #4]	; (960 <_mclk_init+0x8>)
     95c:	715a      	strb	r2, [r3, #5]
     95e:	4770      	bx	lr
     960:	40000800 	.word	0x40000800

00000964 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     964:	4b03      	ldr	r3, [pc, #12]	; (974 <_osc32kctrl_init_sources+0x10>)
     966:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     968:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     96c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     96e:	2201      	movs	r2, #1
     970:	741a      	strb	r2, [r3, #16]
     972:	4770      	bx	lr
     974:	40001400 	.word	0x40001400

00000978 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     978:	4a04      	ldr	r2, [pc, #16]	; (98c <_oscctrl_init_sources+0x14>)
     97a:	4b05      	ldr	r3, [pc, #20]	; (990 <_oscctrl_init_sources+0x18>)
     97c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     97e:	461a      	mov	r2, r3
     980:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     982:	f013 0f02 	tst.w	r3, #2
     986:	d0fb      	beq.n	980 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     988:	4770      	bx	lr
     98a:	bf00      	nop
     98c:	03002606 	.word	0x03002606
     990:	40001000 	.word	0x40001000

00000994 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     994:	4770      	bx	lr
	...

00000998 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     998:	b500      	push	{lr}
     99a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     99c:	4b0d      	ldr	r3, [pc, #52]	; (9d4 <RAMECC_Handler+0x3c>)
     99e:	789b      	ldrb	r3, [r3, #2]
     9a0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     9a2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     9a4:	9b01      	ldr	r3, [sp, #4]
     9a6:	f013 0f02 	tst.w	r3, #2
     9aa:	d006      	beq.n	9ba <RAMECC_Handler+0x22>
     9ac:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <RAMECC_Handler+0x40>)
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	b11b      	cbz	r3, 9ba <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     9b2:	4a08      	ldr	r2, [pc, #32]	; (9d4 <RAMECC_Handler+0x3c>)
     9b4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     9b6:	4798      	blx	r3
     9b8:	e009      	b.n	9ce <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     9ba:	9b01      	ldr	r3, [sp, #4]
     9bc:	f013 0f01 	tst.w	r3, #1
     9c0:	d005      	beq.n	9ce <RAMECC_Handler+0x36>
     9c2:	4b05      	ldr	r3, [pc, #20]	; (9d8 <RAMECC_Handler+0x40>)
     9c4:	685b      	ldr	r3, [r3, #4]
     9c6:	b113      	cbz	r3, 9ce <RAMECC_Handler+0x36>
     9c8:	4a02      	ldr	r2, [pc, #8]	; (9d4 <RAMECC_Handler+0x3c>)
     9ca:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     9cc:	4798      	blx	r3
	} else {
		return;
	}
}
     9ce:	b003      	add	sp, #12
     9d0:	f85d fb04 	ldr.w	pc, [sp], #4
     9d4:	41020000 	.word	0x41020000
     9d8:	20000540 	.word	0x20000540

000009dc <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
     9dc:	b538      	push	{r3, r4, r5, lr}
     9de:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
     9e0:	4605      	mov	r5, r0
     9e2:	b340      	cbz	r0, a36 <_mci_sync_init+0x5a>
     9e4:	1c08      	adds	r0, r1, #0
     9e6:	bf18      	it	ne
     9e8:	2001      	movne	r0, #1
     9ea:	22d8      	movs	r2, #216	; 0xd8
     9ec:	4913      	ldr	r1, [pc, #76]	; (a3c <_mci_sync_init+0x60>)
     9ee:	4b14      	ldr	r3, [pc, #80]	; (a40 <_mci_sync_init+0x64>)
     9f0:	4798      	blx	r3

	mci_dev->hw = hw;
     9f2:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
     9f4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
     9f8:	f043 0301 	orr.w	r3, r3, #1
     9fc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
     a00:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
     a04:	f013 0f01 	tst.w	r3, #1
     a08:	d1fa      	bne.n	a00 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
     a0a:	230e      	movs	r3, #14
     a0c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
     a10:	230f      	movs	r3, #15
     a12:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
     a16:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a18:	b29b      	uxth	r3, r3
     a1a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     a1e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
     a22:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
     a24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
     a26:	b29b      	uxth	r3, r3
     a28:	ea6f 2393 	mvn.w	r3, r3, lsr #10
     a2c:	ea6f 2383 	mvn.w	r3, r3, lsl #10
     a30:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
     a32:	2000      	movs	r0, #0
     a34:	bd38      	pop	{r3, r4, r5, pc}
     a36:	2000      	movs	r0, #0
     a38:	e7d7      	b.n	9ea <_mci_sync_init+0xe>
     a3a:	bf00      	nop
     a3c:	00003ccc 	.word	0x00003ccc
     a40:	000008b5 	.word	0x000008b5

00000a44 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     a44:	b470      	push	{r4, r5, r6}
     a46:	b089      	sub	sp, #36	; 0x24
     a48:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     a4a:	466c      	mov	r4, sp
     a4c:	4d0d      	ldr	r5, [pc, #52]	; (a84 <_sercom_get_hardware_index+0x40>)
     a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     a56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     a5a:	9b00      	ldr	r3, [sp, #0]
     a5c:	42b3      	cmp	r3, r6
     a5e:	d00d      	beq.n	a7c <_sercom_get_hardware_index+0x38>
     a60:	4631      	mov	r1, r6
     a62:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a64:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     a66:	f853 2b04 	ldr.w	r2, [r3], #4
     a6a:	428a      	cmp	r2, r1
     a6c:	d007      	beq.n	a7e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a6e:	3001      	adds	r0, #1
     a70:	2808      	cmp	r0, #8
     a72:	d1f8      	bne.n	a66 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     a74:	2000      	movs	r0, #0
}
     a76:	b009      	add	sp, #36	; 0x24
     a78:	bc70      	pop	{r4, r5, r6}
     a7a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a7c:	2000      	movs	r0, #0
			return i;
     a7e:	b2c0      	uxtb	r0, r0
     a80:	e7f9      	b.n	a76 <_sercom_get_hardware_index+0x32>
     a82:	bf00      	nop
     a84:	00003ce4 	.word	0x00003ce4

00000a88 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     a88:	b510      	push	{r4, lr}
     a8a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     a8c:	4b41      	ldr	r3, [pc, #260]	; (b94 <_usart_init+0x10c>)
     a8e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     a90:	2800      	cmp	r0, #0
     a92:	d05c      	beq.n	b4e <_usart_init+0xc6>
     a94:	2802      	cmp	r0, #2
     a96:	d05c      	beq.n	b52 <_usart_init+0xca>
	ASSERT(false);
     a98:	f240 2247 	movw	r2, #583	; 0x247
     a9c:	493e      	ldr	r1, [pc, #248]	; (b98 <_usart_init+0x110>)
     a9e:	2000      	movs	r0, #0
     aa0:	4b3e      	ldr	r3, [pc, #248]	; (b9c <_usart_init+0x114>)
     aa2:	4798      	blx	r3
	return 0;
     aa4:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     aa6:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     aa8:	f013 0f01 	tst.w	r3, #1
     aac:	d122      	bne.n	af4 <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     aae:	004b      	lsls	r3, r1, #1
     ab0:	185a      	adds	r2, r3, r1
     ab2:	4b3b      	ldr	r3, [pc, #236]	; (ba0 <_usart_init+0x118>)
     ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     aba:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     abe:	69e3      	ldr	r3, [r4, #28]
     ac0:	f013 0f03 	tst.w	r3, #3
     ac4:	d1fb      	bne.n	abe <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     ac6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     ac8:	f013 0f02 	tst.w	r3, #2
     acc:	d00b      	beq.n	ae6 <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     ace:	6823      	ldr	r3, [r4, #0]
     ad0:	f023 0302 	bic.w	r3, r3, #2
     ad4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ad6:	69e3      	ldr	r3, [r4, #28]
     ad8:	f013 0f03 	tst.w	r3, #3
     adc:	d1fb      	bne.n	ad6 <_usart_init+0x4e>
     ade:	69e3      	ldr	r3, [r4, #28]
     ae0:	f013 0f02 	tst.w	r3, #2
     ae4:	d1fb      	bne.n	ade <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     ae6:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     aea:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aec:	69e3      	ldr	r3, [r4, #28]
     aee:	f013 0f03 	tst.w	r3, #3
     af2:	d1fb      	bne.n	aec <_usart_init+0x64>
     af4:	69e3      	ldr	r3, [r4, #28]
     af6:	f013 0f01 	tst.w	r3, #1
     afa:	d1fb      	bne.n	af4 <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     afc:	460a      	mov	r2, r1
     afe:	004b      	lsls	r3, r1, #1
     b00:	440b      	add	r3, r1
     b02:	4927      	ldr	r1, [pc, #156]	; (ba0 <_usart_init+0x118>)
     b04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
     b08:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b0a:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b0c:	69e3      	ldr	r3, [r4, #28]
     b0e:	f013 0f03 	tst.w	r3, #3
     b12:	d1fb      	bne.n	b0c <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     b14:	0053      	lsls	r3, r2, #1
     b16:	1899      	adds	r1, r3, r2
     b18:	4b21      	ldr	r3, [pc, #132]	; (ba0 <_usart_init+0x118>)
     b1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     b20:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b22:	69e3      	ldr	r3, [r4, #28]
     b24:	f013 0f1f 	tst.w	r3, #31
     b28:	d1fb      	bne.n	b22 <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     b2a:	0053      	lsls	r3, r2, #1
     b2c:	1899      	adds	r1, r3, r2
     b2e:	4b1c      	ldr	r3, [pc, #112]	; (ba0 <_usart_init+0x118>)
     b30:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     b36:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     b38:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
     b3c:	d10b      	bne.n	b56 <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     b3e:	0053      	lsls	r3, r2, #1
     b40:	1899      	adds	r1, r3, r2
     b42:	4b17      	ldr	r3, [pc, #92]	; (ba0 <_usart_init+0x118>)
     b44:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     b48:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     b4a:	81a3      	strh	r3, [r4, #12]
     b4c:	e011      	b.n	b72 <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     b4e:	2100      	movs	r1, #0
     b50:	e7a9      	b.n	aa6 <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
     b52:	2101      	movs	r1, #1
     b54:	e7a7      	b.n	aa6 <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     b56:	4b12      	ldr	r3, [pc, #72]	; (ba0 <_usart_init+0x118>)
     b58:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     b5c:	8e18      	ldrh	r0, [r3, #48]	; 0x30
     b5e:	89a1      	ldrh	r1, [r4, #12]
     b60:	f360 010c 	bfi	r1, r0, #0, #13
     b64:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     b66:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
     b6a:	89a3      	ldrh	r3, [r4, #12]
     b6c:	f361 334f 	bfi	r3, r1, #13, #3
     b70:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     b72:	4b0b      	ldr	r3, [pc, #44]	; (ba0 <_usart_init+0x118>)
     b74:	0051      	lsls	r1, r2, #1
     b76:	1888      	adds	r0, r1, r2
     b78:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     b7c:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     b80:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     b82:	440a      	add	r2, r1
     b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b8c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     b90:	2000      	movs	r0, #0
     b92:	bd10      	pop	{r4, pc}
     b94:	00000a45 	.word	0x00000a45
     b98:	00003d4c 	.word	0x00003d4c
     b9c:	000008b5 	.word	0x000008b5
     ba0:	00003ce4 	.word	0x00003ce4

00000ba4 <_usart_sync_init>:
{
     ba4:	b538      	push	{r3, r4, r5, lr}
     ba6:	460c      	mov	r4, r1
	ASSERT(device);
     ba8:	4605      	mov	r5, r0
     baa:	22bb      	movs	r2, #187	; 0xbb
     bac:	4905      	ldr	r1, [pc, #20]	; (bc4 <_usart_sync_init+0x20>)
     bae:	3000      	adds	r0, #0
     bb0:	bf18      	it	ne
     bb2:	2001      	movne	r0, #1
     bb4:	4b04      	ldr	r3, [pc, #16]	; (bc8 <_usart_sync_init+0x24>)
     bb6:	4798      	blx	r3
	device->hw = hw;
     bb8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     bba:	4620      	mov	r0, r4
     bbc:	4b03      	ldr	r3, [pc, #12]	; (bcc <_usart_sync_init+0x28>)
     bbe:	4798      	blx	r3
}
     bc0:	bd38      	pop	{r3, r4, r5, pc}
     bc2:	bf00      	nop
     bc4:	00003d4c 	.word	0x00003d4c
     bc8:	000008b5 	.word	0x000008b5
     bcc:	00000a89 	.word	0x00000a89

00000bd0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     bd0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     bd2:	6813      	ldr	r3, [r2, #0]
     bd4:	f043 0302 	orr.w	r3, r3, #2
     bd8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bda:	69d3      	ldr	r3, [r2, #28]
     bdc:	f013 0f03 	tst.w	r3, #3
     be0:	d1fb      	bne.n	bda <_usart_sync_enable+0xa>
}
     be2:	4770      	bx	lr

00000be4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     be4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     be6:	6299      	str	r1, [r3, #40]	; 0x28
     be8:	4770      	bx	lr

00000bea <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     bea:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     bec:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     bee:	b2c0      	uxtb	r0, r0
     bf0:	4770      	bx	lr

00000bf2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     bf2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     bf4:	7e18      	ldrb	r0, [r3, #24]
}
     bf6:	f000 0001 	and.w	r0, r0, #1
     bfa:	4770      	bx	lr

00000bfc <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     bfc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     bfe:	7e18      	ldrb	r0, [r3, #24]
}
     c00:	f3c0 0040 	ubfx	r0, r0, #1, #1
     c04:	4770      	bx	lr

00000c06 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     c06:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     c08:	7e18      	ldrb	r0, [r3, #24]
}
     c0a:	f3c0 0080 	ubfx	r0, r0, #2, #1
     c0e:	4770      	bx	lr

00000c10 <LIDAR_USART_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c10:	4b10      	ldr	r3, [pc, #64]	; (c54 <LIDAR_USART_PORT_init+0x44>)
     c12:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     c16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c1a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c22:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c2a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c2e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c32:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c42:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c46:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c4a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c4e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     c52:	4770      	bx	lr
     c54:	41008000 	.word	0x41008000

00000c58 <LIDAR_USART_CLOCK_init>:
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     c58:	4b06      	ldr	r3, [pc, #24]	; (c74 <LIDAR_USART_CLOCK_init+0x1c>)
     c5a:	2240      	movs	r2, #64	; 0x40
     c5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     c60:	2243      	movs	r2, #67	; 0x43
     c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     c66:	4a04      	ldr	r2, [pc, #16]	; (c78 <LIDAR_USART_CLOCK_init+0x20>)
     c68:	6953      	ldr	r3, [r2, #20]
     c6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     c6e:	6153      	str	r3, [r2, #20]
     c70:	4770      	bx	lr
     c72:	bf00      	nop
     c74:	40001c00 	.word	0x40001c00
     c78:	40000800 	.word	0x40000800

00000c7c <LIDAR_USART_init>:
							   CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void LIDAR_USART_init(void)
{
     c7c:	b508      	push	{r3, lr}
	LIDAR_USART_CLOCK_init();
     c7e:	4b05      	ldr	r3, [pc, #20]	; (c94 <LIDAR_USART_init+0x18>)
     c80:	4798      	blx	r3
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
     c82:	2200      	movs	r2, #0
     c84:	4904      	ldr	r1, [pc, #16]	; (c98 <LIDAR_USART_init+0x1c>)
     c86:	4805      	ldr	r0, [pc, #20]	; (c9c <LIDAR_USART_init+0x20>)
     c88:	4b05      	ldr	r3, [pc, #20]	; (ca0 <LIDAR_USART_init+0x24>)
     c8a:	4798      	blx	r3
	LIDAR_USART_PORT_init();
     c8c:	4b05      	ldr	r3, [pc, #20]	; (ca4 <LIDAR_USART_init+0x28>)
     c8e:	4798      	blx	r3
     c90:	bd08      	pop	{r3, pc}
     c92:	bf00      	nop
     c94:	00000c59 	.word	0x00000c59
     c98:	40003000 	.word	0x40003000
     c9c:	20000560 	.word	0x20000560
     ca0:	00000841 	.word	0x00000841
     ca4:	00000c11 	.word	0x00000c11

00000ca8 <LIDAR_PWM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ca8:	4b0e      	ldr	r3, [pc, #56]	; (ce4 <LIDAR_PWM_PORT_init+0x3c>)
     caa:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     cae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cb2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cba:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cbe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cc6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cca:	f44f 7100 	mov.w	r1, #512	; 0x200
     cce:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cd2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
     cd6:	f042 0204 	orr.w	r2, r2, #4
     cda:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cde:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
     ce2:	4770      	bx	lr
     ce4:	41008000 	.word	0x41008000

00000ce8 <LIDAR_PWM_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     ce8:	4a04      	ldr	r2, [pc, #16]	; (cfc <LIDAR_PWM_CLOCK_init+0x14>)
     cea:	69d3      	ldr	r3, [r2, #28]
     cec:	f043 0320 	orr.w	r3, r3, #32
     cf0:	61d3      	str	r3, [r2, #28]
     cf2:	2240      	movs	r2, #64	; 0x40
     cf4:	4b02      	ldr	r3, [pc, #8]	; (d00 <LIDAR_PWM_CLOCK_init+0x18>)
     cf6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     cfa:	4770      	bx	lr
     cfc:	40000800 	.word	0x40000800
     d00:	40001c00 	.word	0x40001c00

00000d04 <LIDAR_PWM_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     d04:	4b28      	ldr	r3, [pc, #160]	; (da8 <LIDAR_PWM_init+0xa4>)
     d06:	691b      	ldr	r3, [r3, #16]
							   CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void LIDAR_PWM_init(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     d08:	f013 0f01 	tst.w	r3, #1
     d0c:	d11f      	bne.n	d4e <LIDAR_PWM_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d0e:	4a26      	ldr	r2, [pc, #152]	; (da8 <LIDAR_PWM_init+0xa4>)
     d10:	6913      	ldr	r3, [r2, #16]
     d12:	f013 0f03 	tst.w	r3, #3
     d16:	d1fb      	bne.n	d10 <LIDAR_PWM_init+0xc>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     d18:	4b23      	ldr	r3, [pc, #140]	; (da8 <LIDAR_PWM_init+0xa4>)
     d1a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     d1c:	f013 0f02 	tst.w	r3, #2
     d20:	d00d      	beq.n	d3e <LIDAR_PWM_init+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     d22:	4a21      	ldr	r2, [pc, #132]	; (da8 <LIDAR_PWM_init+0xa4>)
     d24:	6813      	ldr	r3, [r2, #0]
     d26:	f023 0302 	bic.w	r3, r3, #2
     d2a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d2c:	6913      	ldr	r3, [r2, #16]
     d2e:	f013 0f03 	tst.w	r3, #3
     d32:	d1fb      	bne.n	d2c <LIDAR_PWM_init+0x28>
     d34:	4a1c      	ldr	r2, [pc, #112]	; (da8 <LIDAR_PWM_init+0xa4>)
     d36:	6913      	ldr	r3, [r2, #16]
     d38:	f013 0f02 	tst.w	r3, #2
     d3c:	d1fb      	bne.n	d36 <LIDAR_PWM_init+0x32>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     d3e:	2201      	movs	r2, #1
     d40:	4b19      	ldr	r3, [pc, #100]	; (da8 <LIDAR_PWM_init+0xa4>)
     d42:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d44:	461a      	mov	r2, r3
     d46:	6913      	ldr	r3, [r2, #16]
     d48:	f013 0f03 	tst.w	r3, #3
     d4c:	d1fb      	bne.n	d46 <LIDAR_PWM_init+0x42>
     d4e:	4a16      	ldr	r2, [pc, #88]	; (da8 <LIDAR_PWM_init+0xa4>)
     d50:	6913      	ldr	r3, [r2, #16]
     d52:	f013 0f01 	tst.w	r3, #1
     d56:	d1fb      	bne.n	d50 <LIDAR_PWM_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     d58:	4a14      	ldr	r2, [pc, #80]	; (dac <LIDAR_PWM_init+0xa8>)
     d5a:	4b13      	ldr	r3, [pc, #76]	; (da8 <LIDAR_PWM_init+0xa4>)
     d5c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d5e:	461a      	mov	r2, r3
     d60:	6913      	ldr	r3, [r2, #16]
     d62:	f013 0f03 	tst.w	r3, #3
     d66:	d1fb      	bne.n	d60 <LIDAR_PWM_init+0x5c>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
     d68:	4b0f      	ldr	r3, [pc, #60]	; (da8 <LIDAR_PWM_init+0xa4>)
     d6a:	2200      	movs	r2, #0
     d6c:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
     d6e:	22ff      	movs	r2, #255	; 0xff
     d70:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
     d72:	2203      	movs	r2, #3
     d74:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     d76:	223c      	movs	r2, #60	; 0x3c
     d78:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d7a:	461a      	mov	r2, r3
     d7c:	6913      	ldr	r3, [r2, #16]
     d7e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     d82:	d1fb      	bne.n	d7c <LIDAR_PWM_init+0x78>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     d84:	2200      	movs	r2, #0
     d86:	4b08      	ldr	r3, [pc, #32]	; (da8 <LIDAR_PWM_init+0xa4>)
     d88:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d8a:	461a      	mov	r2, r3
     d8c:	6913      	ldr	r3, [r2, #16]
     d8e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     d92:	d1fb      	bne.n	d8c <LIDAR_PWM_init+0x88>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     d94:	4a04      	ldr	r2, [pc, #16]	; (da8 <LIDAR_PWM_init+0xa4>)
     d96:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     d98:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     d9c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d9e:	6913      	ldr	r3, [r2, #16]
     da0:	f013 0f03 	tst.w	r3, #3
     da4:	d1fb      	bne.n	d9e <LIDAR_PWM_init+0x9a>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC4, 3);	/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC4, 0, LIDAR_PWM_COUNT); /* Compare/Capture Value: 60 */
	hri_tccount16_write_CC_reg(TC4, 1, 0); /* Compare/Capture Value: 60 - OFF */
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
}
     da6:	4770      	bx	lr
     da8:	42001400 	.word	0x42001400
     dac:	12000310 	.word	0x12000310

00000db0 <LIDAR_PWM_start>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     db0:	4b19      	ldr	r3, [pc, #100]	; (e18 <LIDAR_PWM_start+0x68>)
     db2:	691b      	ldr	r3, [r3, #16]

void LIDAR_PWM_start(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     db4:	f013 0f01 	tst.w	r3, #1
     db8:	d117      	bne.n	dea <LIDAR_PWM_start+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dba:	4a17      	ldr	r2, [pc, #92]	; (e18 <LIDAR_PWM_start+0x68>)
     dbc:	6913      	ldr	r3, [r2, #16]
     dbe:	f013 0f03 	tst.w	r3, #3
     dc2:	d1fb      	bne.n	dbc <LIDAR_PWM_start+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     dc4:	4b14      	ldr	r3, [pc, #80]	; (e18 <LIDAR_PWM_start+0x68>)
     dc6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     dc8:	f013 0f02 	tst.w	r3, #2
     dcc:	d00d      	beq.n	dea <LIDAR_PWM_start+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     dce:	4a12      	ldr	r2, [pc, #72]	; (e18 <LIDAR_PWM_start+0x68>)
     dd0:	6813      	ldr	r3, [r2, #0]
     dd2:	f023 0302 	bic.w	r3, r3, #2
     dd6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dd8:	6913      	ldr	r3, [r2, #16]
     dda:	f013 0f03 	tst.w	r3, #3
     dde:	d1fb      	bne.n	dd8 <LIDAR_PWM_start+0x28>
     de0:	4a0d      	ldr	r2, [pc, #52]	; (e18 <LIDAR_PWM_start+0x68>)
     de2:	6913      	ldr	r3, [r2, #16]
     de4:	f013 0f02 	tst.w	r3, #2
     de8:	d1fb      	bne.n	de2 <LIDAR_PWM_start+0x32>
     dea:	4a0b      	ldr	r2, [pc, #44]	; (e18 <LIDAR_PWM_start+0x68>)
     dec:	6913      	ldr	r3, [r2, #16]
     dee:	f013 0f01 	tst.w	r3, #1
     df2:	d1fb      	bne.n	dec <LIDAR_PWM_start+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     df4:	2224      	movs	r2, #36	; 0x24
     df6:	4b08      	ldr	r3, [pc, #32]	; (e18 <LIDAR_PWM_start+0x68>)
     df8:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dfa:	461a      	mov	r2, r3
     dfc:	6913      	ldr	r3, [r2, #16]
     dfe:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     e02:	d1fb      	bne.n	dfc <LIDAR_PWM_start+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e04:	4a04      	ldr	r2, [pc, #16]	; (e18 <LIDAR_PWM_start+0x68>)
     e06:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     e08:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     e0c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e0e:	6913      	ldr	r3, [r2, #16]
     e10:	f013 0f03 	tst.w	r3, #3
     e14:	d1fb      	bne.n	e0e <LIDAR_PWM_start+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, LIDAR_PWM_CC1);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
     e16:	4770      	bx	lr
     e18:	42001400 	.word	0x42001400

00000e1c <LIDAR_PWM_stop>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     e1c:	4b19      	ldr	r3, [pc, #100]	; (e84 <LIDAR_PWM_stop+0x68>)
     e1e:	691b      	ldr	r3, [r3, #16]

void LIDAR_PWM_stop(void)
{
	if (!hri_tc_is_syncing(TC4, TC_SYNCBUSY_SWRST)) {
     e20:	f013 0f01 	tst.w	r3, #1
     e24:	d117      	bne.n	e56 <LIDAR_PWM_stop+0x3a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e26:	4a17      	ldr	r2, [pc, #92]	; (e84 <LIDAR_PWM_stop+0x68>)
     e28:	6913      	ldr	r3, [r2, #16]
     e2a:	f013 0f03 	tst.w	r3, #3
     e2e:	d1fb      	bne.n	e28 <LIDAR_PWM_stop+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e30:	4b14      	ldr	r3, [pc, #80]	; (e84 <LIDAR_PWM_stop+0x68>)
     e32:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
     e34:	f013 0f02 	tst.w	r3, #2
     e38:	d00d      	beq.n	e56 <LIDAR_PWM_stop+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     e3a:	4a12      	ldr	r2, [pc, #72]	; (e84 <LIDAR_PWM_stop+0x68>)
     e3c:	6813      	ldr	r3, [r2, #0]
     e3e:	f023 0302 	bic.w	r3, r3, #2
     e42:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e44:	6913      	ldr	r3, [r2, #16]
     e46:	f013 0f03 	tst.w	r3, #3
     e4a:	d1fb      	bne.n	e44 <LIDAR_PWM_stop+0x28>
     e4c:	4a0d      	ldr	r2, [pc, #52]	; (e84 <LIDAR_PWM_stop+0x68>)
     e4e:	6913      	ldr	r3, [r2, #16]
     e50:	f013 0f02 	tst.w	r3, #2
     e54:	d1fb      	bne.n	e4e <LIDAR_PWM_stop+0x32>
     e56:	4a0b      	ldr	r2, [pc, #44]	; (e84 <LIDAR_PWM_stop+0x68>)
     e58:	6913      	ldr	r3, [r2, #16]
     e5a:	f013 0f01 	tst.w	r3, #1
     e5e:	d1fb      	bne.n	e58 <LIDAR_PWM_stop+0x3c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e60:	2200      	movs	r2, #0
     e62:	4b08      	ldr	r3, [pc, #32]	; (e84 <LIDAR_PWM_stop+0x68>)
     e64:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e66:	461a      	mov	r2, r3
     e68:	6913      	ldr	r3, [r2, #16]
     e6a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     e6e:	d1fb      	bne.n	e68 <LIDAR_PWM_stop+0x4c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e70:	4a04      	ldr	r2, [pc, #16]	; (e84 <LIDAR_PWM_stop+0x68>)
     e72:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
     e74:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
     e78:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e7a:	6913      	ldr	r3, [r2, #16]
     e7c:	f013 0f03 	tst.w	r3, #3
     e80:	d1fb      	bne.n	e7a <LIDAR_PWM_stop+0x5e>
	}
	hri_tc_wait_for_sync(TC4, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC4, 1, 0);
	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos);
}
     e82:	4770      	bx	lr
     e84:	42001400 	.word	0x42001400

00000e88 <LIDAR_menu>:

void LIDAR_menu(void)
{
     e88:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8a:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
     e8c:	2300      	movs	r3, #0
     e8e:	9301      	str	r3, [sp, #4]
	
	while (1) {
		printf("%s", lidar_menu_txt);
     e90:	4e32      	ldr	r6, [pc, #200]	; (f5c <LIDAR_menu+0xd4>)
     e92:	4d33      	ldr	r5, [pc, #204]	; (f60 <LIDAR_menu+0xd8>)
     e94:	4c33      	ldr	r4, [pc, #204]	; (f64 <LIDAR_menu+0xdc>)
     e96:	e004      	b.n	ea2 <LIDAR_menu+0x1a>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
     e98:	4b33      	ldr	r3, [pc, #204]	; (f68 <LIDAR_menu+0xe0>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	6858      	ldr	r0, [r3, #4]
     e9e:	4b33      	ldr	r3, [pc, #204]	; (f6c <LIDAR_menu+0xe4>)
     ea0:	4798      	blx	r3
		printf("%s", lidar_menu_txt);
     ea2:	4631      	mov	r1, r6
     ea4:	4628      	mov	r0, r5
     ea6:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
     ea8:	a901      	add	r1, sp, #4
     eaa:	4831      	ldr	r0, [pc, #196]	; (f70 <LIDAR_menu+0xe8>)
     eac:	4b31      	ldr	r3, [pc, #196]	; (f74 <LIDAR_menu+0xec>)
     eae:	4798      	blx	r3
     eb0:	2800      	cmp	r0, #0
     eb2:	d0f1      	beq.n	e98 <LIDAR_menu+0x10>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
     eb4:	9901      	ldr	r1, [sp, #4]
     eb6:	4830      	ldr	r0, [pc, #192]	; (f78 <LIDAR_menu+0xf0>)
     eb8:	47a0      	blx	r4
		
		switch (user_selection) {
     eba:	9b01      	ldr	r3, [sp, #4]
     ebc:	3b01      	subs	r3, #1
     ebe:	2b0a      	cmp	r3, #10
     ec0:	d848      	bhi.n	f54 <LIDAR_menu+0xcc>
     ec2:	e8df f003 	tbb	[pc, r3]
     ec6:	0b06      	.short	0x0b06
     ec8:	231d1711 	.word	0x231d1711
     ecc:	3b352f29 	.word	0x3b352f29
     ed0:	41          	.byte	0x41
     ed1:	00          	.byte	0x00
			case 1:
				printf("\r\nReturning to main menu\r\n");
     ed2:	482a      	ldr	r0, [pc, #168]	; (f7c <LIDAR_menu+0xf4>)
     ed4:	4b2a      	ldr	r3, [pc, #168]	; (f80 <LIDAR_menu+0xf8>)
     ed6:	4798      	blx	r3
			default:
				printf("\r\nInvalid option\r\n");
				break;
		}
	}
}
     ed8:	b003      	add	sp, #12
     eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nStarting LiDAR motor\r\n");
     edc:	4829      	ldr	r0, [pc, #164]	; (f84 <LIDAR_menu+0xfc>)
     ede:	4b28      	ldr	r3, [pc, #160]	; (f80 <LIDAR_menu+0xf8>)
     ee0:	4798      	blx	r3
				LIDAR_PWM_start();
     ee2:	4b29      	ldr	r3, [pc, #164]	; (f88 <LIDAR_menu+0x100>)
     ee4:	4798      	blx	r3
				break;
     ee6:	e7dc      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nStopping LiDAR motor\r\n");
     ee8:	4828      	ldr	r0, [pc, #160]	; (f8c <LIDAR_menu+0x104>)
     eea:	4b25      	ldr	r3, [pc, #148]	; (f80 <LIDAR_menu+0xf8>)
     eec:	4798      	blx	r3
				LIDAR_PWM_stop();
     eee:	4b28      	ldr	r3, [pc, #160]	; (f90 <LIDAR_menu+0x108>)
     ef0:	4798      	blx	r3
				break;
     ef2:	e7d6      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRequesting LiDAR stop\r\n");
     ef4:	4827      	ldr	r0, [pc, #156]	; (f94 <LIDAR_menu+0x10c>)
     ef6:	4f22      	ldr	r7, [pc, #136]	; (f80 <LIDAR_menu+0xf8>)
     ef8:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     efa:	4827      	ldr	r0, [pc, #156]	; (f98 <LIDAR_menu+0x110>)
     efc:	47b8      	blx	r7
				break;
     efe:	e7d0      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRequesting LiDAR reset\r\n");
     f00:	4826      	ldr	r0, [pc, #152]	; (f9c <LIDAR_menu+0x114>)
     f02:	4f1f      	ldr	r7, [pc, #124]	; (f80 <LIDAR_menu+0xf8>)
     f04:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     f06:	4824      	ldr	r0, [pc, #144]	; (f98 <LIDAR_menu+0x110>)
     f08:	47b8      	blx	r7
				break;
     f0a:	e7ca      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRequesting LiDAR start scan\r\n");
     f0c:	4824      	ldr	r0, [pc, #144]	; (fa0 <LIDAR_menu+0x118>)
     f0e:	4f1c      	ldr	r7, [pc, #112]	; (f80 <LIDAR_menu+0xf8>)
     f10:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     f12:	4821      	ldr	r0, [pc, #132]	; (f98 <LIDAR_menu+0x110>)
     f14:	47b8      	blx	r7
				break;
     f16:	e7c4      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRequesting LiDAR start express scan\r\n");
     f18:	4822      	ldr	r0, [pc, #136]	; (fa4 <LIDAR_menu+0x11c>)
     f1a:	4f19      	ldr	r7, [pc, #100]	; (f80 <LIDAR_menu+0xf8>)
     f1c:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     f1e:	481e      	ldr	r0, [pc, #120]	; (f98 <LIDAR_menu+0x110>)
     f20:	47b8      	blx	r7
				break;
     f22:	e7be      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRequesting LiDAR start force scan\r\n");
     f24:	4820      	ldr	r0, [pc, #128]	; (fa8 <LIDAR_menu+0x120>)
     f26:	4f16      	ldr	r7, [pc, #88]	; (f80 <LIDAR_menu+0xf8>)
     f28:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     f2a:	481b      	ldr	r0, [pc, #108]	; (f98 <LIDAR_menu+0x110>)
     f2c:	47b8      	blx	r7
				break;
     f2e:	e7b8      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRetrieving LiDAR info\r\n");
     f30:	481e      	ldr	r0, [pc, #120]	; (fac <LIDAR_menu+0x124>)
     f32:	4f13      	ldr	r7, [pc, #76]	; (f80 <LIDAR_menu+0xf8>)
     f34:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     f36:	4818      	ldr	r0, [pc, #96]	; (f98 <LIDAR_menu+0x110>)
     f38:	47b8      	blx	r7
				break;
     f3a:	e7b2      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRetrieving LiDAR health\r\n");
     f3c:	481c      	ldr	r0, [pc, #112]	; (fb0 <LIDAR_menu+0x128>)
     f3e:	4f10      	ldr	r7, [pc, #64]	; (f80 <LIDAR_menu+0xf8>)
     f40:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     f42:	4815      	ldr	r0, [pc, #84]	; (f98 <LIDAR_menu+0x110>)
     f44:	47b8      	blx	r7
				break;
     f46:	e7ac      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nRetrieving LiDAR samplerates\r\n");
     f48:	481a      	ldr	r0, [pc, #104]	; (fb4 <LIDAR_menu+0x12c>)
     f4a:	4f0d      	ldr	r7, [pc, #52]	; (f80 <LIDAR_menu+0xf8>)
     f4c:	47b8      	blx	r7
				printf("\r\nERROR: not implemented yet\r\n");
     f4e:	4812      	ldr	r0, [pc, #72]	; (f98 <LIDAR_menu+0x110>)
     f50:	47b8      	blx	r7
				break;
     f52:	e7a6      	b.n	ea2 <LIDAR_menu+0x1a>
				printf("\r\nInvalid option\r\n");
     f54:	4818      	ldr	r0, [pc, #96]	; (fb8 <LIDAR_menu+0x130>)
     f56:	4b0a      	ldr	r3, [pc, #40]	; (f80 <LIDAR_menu+0xf8>)
     f58:	4798      	blx	r3
				break;
     f5a:	e7a2      	b.n	ea2 <LIDAR_menu+0x1a>
     f5c:	20000000 	.word	0x20000000
     f60:	00003d68 	.word	0x00003d68
     f64:	00002425 	.word	0x00002425
     f68:	20000278 	.word	0x20000278
     f6c:	00002085 	.word	0x00002085
     f70:	0000420c 	.word	0x0000420c
     f74:	0000253d 	.word	0x0000253d
     f78:	00003d6c 	.word	0x00003d6c
     f7c:	00003d88 	.word	0x00003d88
     f80:	0000250d 	.word	0x0000250d
     f84:	00003da4 	.word	0x00003da4
     f88:	00000db1 	.word	0x00000db1
     f8c:	00003dbc 	.word	0x00003dbc
     f90:	00000e1d 	.word	0x00000e1d
     f94:	00003dd4 	.word	0x00003dd4
     f98:	00003df0 	.word	0x00003df0
     f9c:	00003e10 	.word	0x00003e10
     fa0:	00003e2c 	.word	0x00003e2c
     fa4:	00003e4c 	.word	0x00003e4c
     fa8:	00003e74 	.word	0x00003e74
     fac:	00003e9c 	.word	0x00003e9c
     fb0:	00003eb8 	.word	0x00003eb8
     fb4:	00003ed4 	.word	0x00003ed4
     fb8:	00003ef4 	.word	0x00003ef4

00000fbc <HardFault_Handler>:

/**
  * Hardfault Handler
  */
void HardFault_Handler(void)
{
     fbc:	b508      	push	{r3, lr}
	printf("\r\n!!!!!!!! In HardFault_Handler !!!!!!!!\r\n");
     fbe:	4802      	ldr	r0, [pc, #8]	; (fc8 <HardFault_Handler+0xc>)
     fc0:	4b02      	ldr	r3, [pc, #8]	; (fcc <HardFault_Handler+0x10>)
     fc2:	4798      	blx	r3
     fc4:	e7fe      	b.n	fc4 <HardFault_Handler+0x8>
     fc6:	bf00      	nop
     fc8:	00003f08 	.word	0x00003f08
     fcc:	0000250d 	.word	0x0000250d

00000fd0 <main>:
	while (1);
}


int main(void)
{
     fd0:	b580      	push	{r7, lr}
     fd2:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     fd4:	4b22      	ldr	r3, [pc, #136]	; (1060 <main+0x90>)
     fd6:	4798      	blx	r3
	
	printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
     fd8:	4822      	ldr	r0, [pc, #136]	; (1064 <main+0x94>)
     fda:	4b23      	ldr	r3, [pc, #140]	; (1068 <main+0x98>)
     fdc:	4798      	blx	r3

	EEPROM_init();
     fde:	4b23      	ldr	r3, [pc, #140]	; (106c <main+0x9c>)
     fe0:	4798      	blx	r3
	SERVO_set_angle(0);
     fe2:	2000      	movs	r0, #0
     fe4:	4b22      	ldr	r3, [pc, #136]	; (1070 <main+0xa0>)
     fe6:	4798      	blx	r3

	while (1) 
	{
		uint32_t user_selection = 0;

		printf("%s", menu_txt);
     fe8:	4f22      	ldr	r7, [pc, #136]	; (1074 <main+0xa4>)
     fea:	4e23      	ldr	r6, [pc, #140]	; (1078 <main+0xa8>)
     fec:	4d23      	ldr	r5, [pc, #140]	; (107c <main+0xac>)
     fee:	e004      	b.n	ffa <main+0x2a>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
     ff0:	4b23      	ldr	r3, [pc, #140]	; (1080 <main+0xb0>)
     ff2:	681b      	ldr	r3, [r3, #0]
     ff4:	6858      	ldr	r0, [r3, #4]
     ff6:	4b23      	ldr	r3, [pc, #140]	; (1084 <main+0xb4>)
     ff8:	4798      	blx	r3
		uint32_t user_selection = 0;
     ffa:	ac02      	add	r4, sp, #8
     ffc:	2300      	movs	r3, #0
     ffe:	f844 3d04 	str.w	r3, [r4, #-4]!
		printf("%s", menu_txt);
    1002:	4639      	mov	r1, r7
    1004:	4630      	mov	r0, r6
    1006:	47a8      	blx	r5
		if (scanf("%d", &user_selection) == 0) {
    1008:	4621      	mov	r1, r4
    100a:	481f      	ldr	r0, [pc, #124]	; (1088 <main+0xb8>)
    100c:	4b1f      	ldr	r3, [pc, #124]	; (108c <main+0xbc>)
    100e:	4798      	blx	r3
    1010:	2800      	cmp	r0, #0
    1012:	d0ed      	beq.n	ff0 <main+0x20>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1014:	9901      	ldr	r1, [sp, #4]
    1016:	481e      	ldr	r0, [pc, #120]	; (1090 <main+0xc0>)
    1018:	47a8      	blx	r5
		
		switch (user_selection) {
    101a:	9b01      	ldr	r3, [sp, #4]
    101c:	3b01      	subs	r3, #1
    101e:	2b03      	cmp	r3, #3
    1020:	d819      	bhi.n	1056 <main+0x86>
    1022:	e8df f003 	tbb	[pc, r3]
    1026:	0f02      	.short	0x0f02
    1028:	1512      	.short	0x1512
  __ASM volatile ("dsb 0xF":::"memory");
    102a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    102e:	4919      	ldr	r1, [pc, #100]	; (1094 <main+0xc4>)
    1030:	68ca      	ldr	r2, [r1, #12]
    1032:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1036:	4b18      	ldr	r3, [pc, #96]	; (1098 <main+0xc8>)
    1038:	4313      	orrs	r3, r2
    103a:	60cb      	str	r3, [r1, #12]
    103c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1040:	bf00      	nop
    1042:	e7fd      	b.n	1040 <main+0x70>
			case 1:
				NVIC_SystemReset();
				break;
			
			case 2:
				EEPROM_menu();
    1044:	4b15      	ldr	r3, [pc, #84]	; (109c <main+0xcc>)
    1046:	4798      	blx	r3
				break;
    1048:	e7d7      	b.n	ffa <main+0x2a>

			case 3:
				SERVO_menu();
    104a:	4b15      	ldr	r3, [pc, #84]	; (10a0 <main+0xd0>)
    104c:	4798      	blx	r3
				break;
    104e:	e7d4      	b.n	ffa <main+0x2a>
			
			case 4:
				LIDAR_menu();
    1050:	4b14      	ldr	r3, [pc, #80]	; (10a4 <main+0xd4>)
    1052:	4798      	blx	r3
				break;
    1054:	e7d1      	b.n	ffa <main+0x2a>
			
			default:
				printf("\r\nInvalid option \r\n");
    1056:	4814      	ldr	r0, [pc, #80]	; (10a8 <main+0xd8>)
    1058:	4b03      	ldr	r3, [pc, #12]	; (1068 <main+0x98>)
    105a:	4798      	blx	r3
				break;
    105c:	e7cd      	b.n	ffa <main+0x2a>
    105e:	bf00      	nop
    1060:	000002d1 	.word	0x000002d1
    1064:	00003f34 	.word	0x00003f34
    1068:	0000250d 	.word	0x0000250d
    106c:	00001449 	.word	0x00001449
    1070:	000011d9 	.word	0x000011d9
    1074:	20000144 	.word	0x20000144
    1078:	00003d68 	.word	0x00003d68
    107c:	00002425 	.word	0x00002425
    1080:	20000278 	.word	0x20000278
    1084:	00002085 	.word	0x00002085
    1088:	0000420c 	.word	0x0000420c
    108c:	0000253d 	.word	0x0000253d
    1090:	00003d6c 	.word	0x00003d6c
    1094:	e000ed00 	.word	0xe000ed00
    1098:	05fa0004 	.word	0x05fa0004
    109c:	000015c1 	.word	0x000015c1
    10a0:	000012ad 	.word	0x000012ad
    10a4:	00000e89 	.word	0x00000e89
    10a8:	00003f70 	.word	0x00003f70

000010ac <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    10ac:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    10ae:	4b05      	ldr	r3, [pc, #20]	; (10c4 <sd_mmc_init+0x18>)
    10b0:	2404      	movs	r4, #4
    10b2:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    10b4:	24ff      	movs	r4, #255	; 0xff
    10b6:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    10b8:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    10ba:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    10bc:	635a      	str	r2, [r3, #52]	; 0x34
}
    10be:	f85d 4b04 	ldr.w	r4, [sp], #4
    10c2:	4770      	bx	lr
    10c4:	20000468 	.word	0x20000468

000010c8 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    10c8:	b508      	push	{r3, lr}

	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    10ca:	4903      	ldr	r1, [pc, #12]	; (10d8 <sd_mmc_stack_init+0x10>)
    10cc:	460a      	mov	r2, r1
    10ce:	3104      	adds	r1, #4
    10d0:	4802      	ldr	r0, [pc, #8]	; (10dc <sd_mmc_stack_init+0x14>)
    10d2:	4b03      	ldr	r3, [pc, #12]	; (10e0 <sd_mmc_stack_init+0x18>)
    10d4:	4798      	blx	r3
    10d6:	bd08      	pop	{r3, pc}
    10d8:	2000019c 	.word	0x2000019c
    10dc:	20000528 	.word	0x20000528
    10e0:	000010ad 	.word	0x000010ad

000010e4 <SERVO_PWM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10e4:	4a08      	ldr	r2, [pc, #32]	; (1108 <SERVO_PWM_PORT_init+0x24>)
    10e6:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    10ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10ee:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10f2:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10f6:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    10fa:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    10fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1102:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
    1106:	4770      	bx	lr
    1108:	41008000 	.word	0x41008000

0000110c <SERVO_PWM_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    110c:	4a04      	ldr	r2, [pc, #16]	; (1120 <SERVO_PWM_CLOCK_init+0x14>)
    110e:	6953      	ldr	r3, [r2, #20]
    1110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1114:	6153      	str	r3, [r2, #20]
    1116:	2240      	movs	r2, #64	; 0x40
    1118:	4b02      	ldr	r3, [pc, #8]	; (1124 <SERVO_PWM_CLOCK_init+0x18>)
    111a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    111e:	4770      	bx	lr
    1120:	40000800 	.word	0x40000800
    1124:	40001c00 	.word	0x40001c00

00001128 <SERVO_PWM_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1128:	4b29      	ldr	r3, [pc, #164]	; (11d0 <SERVO_PWM_init+0xa8>)
    112a:	691b      	ldr	r3, [r3, #16]

/* Call in driver_init.c
 * Initial servo position at 0 degrees */
void SERVO_PWM_init(void)
{
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    112c:	f013 0f01 	tst.w	r3, #1
    1130:	d11f      	bne.n	1172 <SERVO_PWM_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1132:	4a27      	ldr	r2, [pc, #156]	; (11d0 <SERVO_PWM_init+0xa8>)
    1134:	6913      	ldr	r3, [r2, #16]
    1136:	f013 0f03 	tst.w	r3, #3
    113a:	d1fb      	bne.n	1134 <SERVO_PWM_init+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    113c:	4b24      	ldr	r3, [pc, #144]	; (11d0 <SERVO_PWM_init+0xa8>)
    113e:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1140:	f013 0f02 	tst.w	r3, #2
    1144:	d00d      	beq.n	1162 <SERVO_PWM_init+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1146:	4a22      	ldr	r2, [pc, #136]	; (11d0 <SERVO_PWM_init+0xa8>)
    1148:	6813      	ldr	r3, [r2, #0]
    114a:	f023 0302 	bic.w	r3, r3, #2
    114e:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1150:	6913      	ldr	r3, [r2, #16]
    1152:	f013 0f03 	tst.w	r3, #3
    1156:	d1fb      	bne.n	1150 <SERVO_PWM_init+0x28>
    1158:	4a1d      	ldr	r2, [pc, #116]	; (11d0 <SERVO_PWM_init+0xa8>)
    115a:	6913      	ldr	r3, [r2, #16]
    115c:	f013 0f02 	tst.w	r3, #2
    1160:	d1fb      	bne.n	115a <SERVO_PWM_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1162:	2201      	movs	r2, #1
    1164:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <SERVO_PWM_init+0xa8>)
    1166:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1168:	461a      	mov	r2, r3
    116a:	6913      	ldr	r3, [r2, #16]
    116c:	f013 0f03 	tst.w	r3, #3
    1170:	d1fb      	bne.n	116a <SERVO_PWM_init+0x42>
    1172:	4a17      	ldr	r2, [pc, #92]	; (11d0 <SERVO_PWM_init+0xa8>)
    1174:	6913      	ldr	r3, [r2, #16]
    1176:	f013 0f01 	tst.w	r3, #1
    117a:	d1fb      	bne.n	1174 <SERVO_PWM_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    117c:	4a15      	ldr	r2, [pc, #84]	; (11d4 <SERVO_PWM_init+0xac>)
    117e:	4b14      	ldr	r3, [pc, #80]	; (11d0 <SERVO_PWM_init+0xa8>)
    1180:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1182:	461a      	mov	r2, r3
    1184:	6913      	ldr	r3, [r2, #16]
    1186:	f013 0f03 	tst.w	r3, #3
    118a:	d1fb      	bne.n	1184 <SERVO_PWM_init+0x5c>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    118c:	4b10      	ldr	r3, [pc, #64]	; (11d0 <SERVO_PWM_init+0xa8>)
    118e:	2200      	movs	r2, #0
    1190:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1192:	22ff      	movs	r2, #255	; 0xff
    1194:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1196:	2203      	movs	r2, #3
    1198:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    119a:	f640 02e1 	movw	r2, #2273	; 0x8e1
    119e:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    11a0:	461a      	mov	r2, r3
    11a2:	6913      	ldr	r3, [r2, #16]
    11a4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    11a8:	d1fb      	bne.n	11a2 <SERVO_PWM_init+0x7a>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    11aa:	f240 1277 	movw	r2, #375	; 0x177
    11ae:	4b08      	ldr	r3, [pc, #32]	; (11d0 <SERVO_PWM_init+0xa8>)
    11b0:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    11b2:	461a      	mov	r2, r3
    11b4:	6913      	ldr	r3, [r2, #16]
    11b6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    11ba:	d1fb      	bne.n	11b4 <SERVO_PWM_init+0x8c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    11bc:	4a04      	ldr	r2, [pc, #16]	; (11d0 <SERVO_PWM_init+0xa8>)
    11be:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    11c0:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    11c4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    11c6:	6913      	ldr	r3, [r2, #16]
    11c8:	f013 0f03 	tst.w	r3, #3
    11cc:	d1fb      	bne.n	11c6 <SERVO_PWM_init+0x9e>
			| 0 << TC_CTRLBSET_DIR_Pos);	/* Counter Direction: disabled */
	hri_tc_write_WAVE_reg(TC1,3);			/* Waveform Generation Mode: 3 - MPWM */
	hri_tccount16_write_CC_reg(TC1, 0, SERVO_PWM_COUNT);	/* Compare/Capture Value: 2273 */
	hri_tccount16_write_CC_reg(TC1, 1, SERVO_PWM_CC1_MIN);	/* Compare/Capture Value: 375 */
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos);	/* Enable: enabled */
}
    11ce:	4770      	bx	lr
    11d0:	40003c00 	.word	0x40003c00
    11d4:	12000410 	.word	0x12000410

000011d8 <SERVO_set_angle>:

void SERVO_set_angle(int angle)
{
    11d8:	b570      	push	{r4, r5, r6, lr}
	double angle_ratio = angle / 180.0;
    11da:	4b2b      	ldr	r3, [pc, #172]	; (1288 <SERVO_set_angle+0xb0>)
    11dc:	4798      	blx	r3
    11de:	4c2b      	ldr	r4, [pc, #172]	; (128c <SERVO_set_angle+0xb4>)
    11e0:	2200      	movs	r2, #0
    11e2:	4b2b      	ldr	r3, [pc, #172]	; (1290 <SERVO_set_angle+0xb8>)
    11e4:	47a0      	blx	r4
	uint16_t pwm_spread = SERVO_PWM_MAXIMUM_us - SERVO_PWM_MINIMUM_us;
	double angle_us = SERVO_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    11e6:	4d2b      	ldr	r5, [pc, #172]	; (1294 <SERVO_set_angle+0xbc>)
    11e8:	2200      	movs	r2, #0
    11ea:	4b2b      	ldr	r3, [pc, #172]	; (1298 <SERVO_set_angle+0xc0>)
    11ec:	47a8      	blx	r5
    11ee:	2200      	movs	r2, #0
    11f0:	4b2a      	ldr	r3, [pc, #168]	; (129c <SERVO_set_angle+0xc4>)
    11f2:	4e2b      	ldr	r6, [pc, #172]	; (12a0 <SERVO_set_angle+0xc8>)
    11f4:	47b0      	blx	r6
	uint16_t angle_val = (angle_us * SERVO_PWM_COUNT) / SERVO_PWM_PERIOD_us;
    11f6:	a320      	add	r3, pc, #128	; (adr r3, 1278 <SERVO_set_angle+0xa0>)
    11f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    11fc:	47a8      	blx	r5
    11fe:	a320      	add	r3, pc, #128	; (adr r3, 1280 <SERVO_set_angle+0xa8>)
    1200:	e9d3 2300 	ldrd	r2, r3, [r3]
    1204:	47a0      	blx	r4
    1206:	4b27      	ldr	r3, [pc, #156]	; (12a4 <SERVO_set_angle+0xcc>)
    1208:	4798      	blx	r3
    120a:	b280      	uxth	r0, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    120c:	4b26      	ldr	r3, [pc, #152]	; (12a8 <SERVO_set_angle+0xd0>)
    120e:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1210:	f013 0f01 	tst.w	r3, #1
    1214:	d117      	bne.n	1246 <SERVO_set_angle+0x6e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1216:	4a24      	ldr	r2, [pc, #144]	; (12a8 <SERVO_set_angle+0xd0>)
    1218:	6913      	ldr	r3, [r2, #16]
    121a:	f013 0f03 	tst.w	r3, #3
    121e:	d1fb      	bne.n	1218 <SERVO_set_angle+0x40>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1220:	4b21      	ldr	r3, [pc, #132]	; (12a8 <SERVO_set_angle+0xd0>)
    1222:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1224:	f013 0f02 	tst.w	r3, #2
    1228:	d00d      	beq.n	1246 <SERVO_set_angle+0x6e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    122a:	4a1f      	ldr	r2, [pc, #124]	; (12a8 <SERVO_set_angle+0xd0>)
    122c:	6813      	ldr	r3, [r2, #0]
    122e:	f023 0302 	bic.w	r3, r3, #2
    1232:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1234:	6913      	ldr	r3, [r2, #16]
    1236:	f013 0f03 	tst.w	r3, #3
    123a:	d1fb      	bne.n	1234 <SERVO_set_angle+0x5c>
    123c:	4a1a      	ldr	r2, [pc, #104]	; (12a8 <SERVO_set_angle+0xd0>)
    123e:	6913      	ldr	r3, [r2, #16]
    1240:	f013 0f02 	tst.w	r3, #2
    1244:	d1fb      	bne.n	123e <SERVO_set_angle+0x66>
    1246:	4a18      	ldr	r2, [pc, #96]	; (12a8 <SERVO_set_angle+0xd0>)
    1248:	6913      	ldr	r3, [r2, #16]
    124a:	f013 0f01 	tst.w	r3, #1
    124e:	d1fb      	bne.n	1248 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1250:	4b15      	ldr	r3, [pc, #84]	; (12a8 <SERVO_set_angle+0xd0>)
    1252:	83d8      	strh	r0, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1254:	461a      	mov	r2, r3
    1256:	6913      	ldr	r3, [r2, #16]
    1258:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    125c:	d1fb      	bne.n	1256 <SERVO_set_angle+0x7e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    125e:	4a12      	ldr	r2, [pc, #72]	; (12a8 <SERVO_set_angle+0xd0>)
    1260:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1262:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1266:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1268:	6913      	ldr	r3, [r2, #16]
    126a:	f013 0f03 	tst.w	r3, #3
    126e:	d1fb      	bne.n	1268 <SERVO_set_angle+0x90>
	}
	hri_tc_wait_for_sync(TC1, TC_SYNCBUSY_SWRST);
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
}
    1270:	bd70      	pop	{r4, r5, r6, pc}
    1272:	bf00      	nop
    1274:	f3af 8000 	nop.w
    1278:	00000000 	.word	0x00000000
    127c:	40a1c200 	.word	0x40a1c200
    1280:	00000000 	.word	0x00000000
    1284:	40a7ac00 	.word	0x40a7ac00
    1288:	000019f1 	.word	0x000019f1
    128c:	00001d11 	.word	0x00001d11
    1290:	40668000 	.word	0x40668000
    1294:	00001abd 	.word	0x00001abd
    1298:	409f4000 	.word	0x409f4000
    129c:	407f4000 	.word	0x407f4000
    12a0:	00001759 	.word	0x00001759
    12a4:	00001ee1 	.word	0x00001ee1
    12a8:	40003c00 	.word	0x40003c00

000012ac <SERVO_menu>:

void SERVO_menu(void)
{
    12ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ae:	b083      	sub	sp, #12
	uint32_t user_selection = 0;
    12b0:	2300      	movs	r3, #0
    12b2:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    12b4:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    12b6:	4e1c      	ldr	r6, [pc, #112]	; (1328 <SERVO_menu+0x7c>)
    12b8:	4d1c      	ldr	r5, [pc, #112]	; (132c <SERVO_menu+0x80>)
    12ba:	4c1d      	ldr	r4, [pc, #116]	; (1330 <SERVO_menu+0x84>)
    12bc:	e004      	b.n	12c8 <SERVO_menu+0x1c>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    12be:	4b1d      	ldr	r3, [pc, #116]	; (1334 <SERVO_menu+0x88>)
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	6858      	ldr	r0, [r3, #4]
    12c4:	4b1c      	ldr	r3, [pc, #112]	; (1338 <SERVO_menu+0x8c>)
    12c6:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    12c8:	4631      	mov	r1, r6
    12ca:	4628      	mov	r0, r5
    12cc:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    12ce:	a901      	add	r1, sp, #4
    12d0:	481a      	ldr	r0, [pc, #104]	; (133c <SERVO_menu+0x90>)
    12d2:	4b1b      	ldr	r3, [pc, #108]	; (1340 <SERVO_menu+0x94>)
    12d4:	4798      	blx	r3
    12d6:	2800      	cmp	r0, #0
    12d8:	d0f1      	beq.n	12be <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    12da:	9901      	ldr	r1, [sp, #4]
    12dc:	4819      	ldr	r0, [pc, #100]	; (1344 <SERVO_menu+0x98>)
    12de:	47a0      	blx	r4
		
		switch (user_selection) {
    12e0:	9b01      	ldr	r3, [sp, #4]
    12e2:	2b01      	cmp	r3, #1
    12e4:	d005      	beq.n	12f2 <SERVO_menu+0x46>
    12e6:	2b02      	cmp	r3, #2
    12e8:	d008      	beq.n	12fc <SERVO_menu+0x50>
				printf("\r\nSetting servo angle to %0d\r\n", servo_angle);
				SERVO_set_angle(servo_angle);
				break;
			
			default:
				printf("\r\nInvalid option\r\n");
    12ea:	4817      	ldr	r0, [pc, #92]	; (1348 <SERVO_menu+0x9c>)
    12ec:	4b17      	ldr	r3, [pc, #92]	; (134c <SERVO_menu+0xa0>)
    12ee:	4798      	blx	r3
				break;
    12f0:	e7ea      	b.n	12c8 <SERVO_menu+0x1c>
				printf("\r\nReturning to main menu\r\n");
    12f2:	4817      	ldr	r0, [pc, #92]	; (1350 <SERVO_menu+0xa4>)
    12f4:	4b15      	ldr	r3, [pc, #84]	; (134c <SERVO_menu+0xa0>)
    12f6:	4798      	blx	r3
		}
	}
}
    12f8:	b003      	add	sp, #12
    12fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("\r\nEnter angle >> ");
    12fc:	4815      	ldr	r0, [pc, #84]	; (1354 <SERVO_menu+0xa8>)
    12fe:	47a0      	blx	r4
				scanf("%d", &servo_angle);
    1300:	4f0e      	ldr	r7, [pc, #56]	; (133c <SERVO_menu+0x90>)
    1302:	4669      	mov	r1, sp
    1304:	4638      	mov	r0, r7
    1306:	4b0e      	ldr	r3, [pc, #56]	; (1340 <SERVO_menu+0x94>)
    1308:	4798      	blx	r3
				printf("%d", servo_angle);
    130a:	9900      	ldr	r1, [sp, #0]
    130c:	4638      	mov	r0, r7
    130e:	47a0      	blx	r4
				if (servo_angle < 0 || servo_angle > 180) {
    1310:	9900      	ldr	r1, [sp, #0]
    1312:	29b4      	cmp	r1, #180	; 0xb4
    1314:	d902      	bls.n	131c <SERVO_menu+0x70>
					printf("\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n", 
    1316:	4810      	ldr	r0, [pc, #64]	; (1358 <SERVO_menu+0xac>)
    1318:	47a0      	blx	r4
					break;
    131a:	e7d5      	b.n	12c8 <SERVO_menu+0x1c>
				printf("\r\nSetting servo angle to %0d\r\n", servo_angle);
    131c:	480f      	ldr	r0, [pc, #60]	; (135c <SERVO_menu+0xb0>)
    131e:	47a0      	blx	r4
				SERVO_set_angle(servo_angle);
    1320:	9800      	ldr	r0, [sp, #0]
    1322:	4b0f      	ldr	r3, [pc, #60]	; (1360 <SERVO_menu+0xb4>)
    1324:	4798      	blx	r3
				break;
    1326:	e7cf      	b.n	12c8 <SERVO_menu+0x1c>
    1328:	200001a4 	.word	0x200001a4
    132c:	00003d68 	.word	0x00003d68
    1330:	00002425 	.word	0x00002425
    1334:	20000278 	.word	0x20000278
    1338:	00002085 	.word	0x00002085
    133c:	0000420c 	.word	0x0000420c
    1340:	0000253d 	.word	0x0000253d
    1344:	00003d6c 	.word	0x00003d6c
    1348:	00003ef4 	.word	0x00003ef4
    134c:	0000250d 	.word	0x0000250d
    1350:	00003d88 	.word	0x00003d88
    1354:	00003f84 	.word	0x00003f84
    1358:	00003f98 	.word	0x00003f98
    135c:	00003fd4 	.word	0x00003fd4
    1360:	000011d9 	.word	0x000011d9

00001364 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
    1364:	b570      	push	{r4, r5, r6, lr}
    1366:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1368:	4a0b      	ldr	r2, [pc, #44]	; (1398 <invert_seep_byte+0x34>)
    136a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    136c:	f013 0f04 	tst.w	r3, #4
    1370:	d1fb      	bne.n	136a <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
    1372:	4e0a      	ldr	r6, [pc, #40]	; (139c <invert_seep_byte+0x38>)
    1374:	6833      	ldr	r3, [r6, #0]
    1376:	5d1a      	ldrb	r2, [r3, r4]
    1378:	4d09      	ldr	r5, [pc, #36]	; (13a0 <invert_seep_byte+0x3c>)
    137a:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
    137c:	4621      	mov	r1, r4
    137e:	4809      	ldr	r0, [pc, #36]	; (13a4 <invert_seep_byte+0x40>)
    1380:	4b09      	ldr	r3, [pc, #36]	; (13a8 <invert_seep_byte+0x44>)
    1382:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
    1384:	6832      	ldr	r2, [r6, #0]
    1386:	782b      	ldrb	r3, [r5, #0]
    1388:	fab3 f383 	clz	r3, r3
    138c:	095b      	lsrs	r3, r3, #5
    138e:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
    1390:	4806      	ldr	r0, [pc, #24]	; (13ac <invert_seep_byte+0x48>)
    1392:	4b07      	ldr	r3, [pc, #28]	; (13b0 <invert_seep_byte+0x4c>)
    1394:	4798      	blx	r3
    1396:	bd70      	pop	{r4, r5, r6, pc}
    1398:	41004000 	.word	0x41004000
    139c:	200001f4 	.word	0x200001f4
    13a0:	2000056c 	.word	0x2000056c
    13a4:	00003ff4 	.word	0x00003ff4
    13a8:	00002425 	.word	0x00002425
    13ac:	00004018 	.word	0x00004018
    13b0:	0000250d 	.word	0x0000250d

000013b4 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
    13b4:	b508      	push	{r3, lr}
    13b6:	4a0b      	ldr	r2, [pc, #44]	; (13e4 <verify_seep_signature+0x30>)
    13b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    13ba:	f013 0f04 	tst.w	r3, #4
    13be:	d1fb      	bne.n	13b8 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
    13c0:	4b08      	ldr	r3, [pc, #32]	; (13e4 <verify_seep_signature+0x30>)
    13c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
    13c4:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    13c8:	d008      	beq.n	13dc <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
    13ca:	4b07      	ldr	r3, [pc, #28]	; (13e8 <verify_seep_signature+0x34>)
    13cc:	685b      	ldr	r3, [r3, #4]
    13ce:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
    13d0:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
    13d4:	bf18      	it	ne
    13d6:	f04f 30ff 	movne.w	r0, #4294967295
    13da:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
    13dc:	4803      	ldr	r0, [pc, #12]	; (13ec <verify_seep_signature+0x38>)
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <verify_seep_signature+0x3c>)
    13e0:	4798      	blx	r3
    13e2:	e7fe      	b.n	13e2 <verify_seep_signature+0x2e>
    13e4:	41004000 	.word	0x41004000
    13e8:	200001f4 	.word	0x200001f4
    13ec:	0000404c 	.word	0x0000404c
    13f0:	0000250d 	.word	0x0000250d

000013f4 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
    13f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
    13f8:	b1c9      	cbz	r1, 142e <print_hex_array+0x3a>
    13fa:	460e      	mov	r6, r1
    13fc:	1e45      	subs	r5, r0, #1
    13fe:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
    1400:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1444 <print_hex_array+0x50>
    1404:	4f0c      	ldr	r7, [pc, #48]	; (1438 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
    1406:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1440 <print_hex_array+0x4c>
    140a:	e003      	b.n	1414 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
    140c:	3401      	adds	r4, #1
    140e:	b2a4      	uxth	r4, r4
    1410:	42a6      	cmp	r6, r4
    1412:	d00c      	beq.n	142e <print_hex_array+0x3a>
		printf("%02d ", p[i]);
    1414:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    1418:	4640      	mov	r0, r8
    141a:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
    141c:	f014 0f07 	tst.w	r4, #7
    1420:	d1f4      	bne.n	140c <print_hex_array+0x18>
    1422:	2c00      	cmp	r4, #0
    1424:	d0f2      	beq.n	140c <print_hex_array+0x18>
			printf("\r\n");
    1426:	4648      	mov	r0, r9
    1428:	4b04      	ldr	r3, [pc, #16]	; (143c <print_hex_array+0x48>)
    142a:	4798      	blx	r3
    142c:	e7ee      	b.n	140c <print_hex_array+0x18>
	}
	printf("\r\n");
    142e:	4804      	ldr	r0, [pc, #16]	; (1440 <print_hex_array+0x4c>)
    1430:	4b02      	ldr	r3, [pc, #8]	; (143c <print_hex_array+0x48>)
    1432:	4798      	blx	r3
    1434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1438:	00002425 	.word	0x00002425
    143c:	0000250d 	.word	0x0000250d
    1440:	000041e4 	.word	0x000041e4
    1444:	00004088 	.word	0x00004088

00001448 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
    1448:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
    144a:	4b19      	ldr	r3, [pc, #100]	; (14b0 <EEPROM_init+0x68>)
    144c:	4798      	blx	r3
    144e:	b9d0      	cbnz	r0, 1486 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
    1450:	4818      	ldr	r0, [pc, #96]	; (14b4 <EEPROM_init+0x6c>)
    1452:	4b19      	ldr	r3, [pc, #100]	; (14b8 <EEPROM_init+0x70>)
    1454:	4798      	blx	r3
    1456:	4b19      	ldr	r3, [pc, #100]	; (14bc <EEPROM_init+0x74>)
    1458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
    145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
    145c:	f3c2 4202 	ubfx	r2, r2, #16, #3
    1460:	f3c1 2103 	ubfx	r1, r1, #8, #4
    1464:	4816      	ldr	r0, [pc, #88]	; (14c0 <EEPROM_init+0x78>)
    1466:	4b17      	ldr	r3, [pc, #92]	; (14c4 <EEPROM_init+0x7c>)
    1468:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
    146a:	2020      	movs	r0, #32
    146c:	4b16      	ldr	r3, [pc, #88]	; (14c8 <EEPROM_init+0x80>)
    146e:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
    1470:	4b16      	ldr	r3, [pc, #88]	; (14cc <EEPROM_init+0x84>)
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	f893 3020 	ldrb.w	r3, [r3, #32]
    1478:	b99b      	cbnz	r3, 14a2 <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    147a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    147e:	4b14      	ldr	r3, [pc, #80]	; (14d0 <EEPROM_init+0x88>)
    1480:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1484:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
    1486:	4813      	ldr	r0, [pc, #76]	; (14d4 <EEPROM_init+0x8c>)
    1488:	4b0b      	ldr	r3, [pc, #44]	; (14b8 <EEPROM_init+0x70>)
    148a:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    148c:	4a0b      	ldr	r2, [pc, #44]	; (14bc <EEPROM_init+0x74>)
    148e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    1490:	f013 0f04 	tst.w	r3, #4
    1494:	d1fb      	bne.n	148e <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
    1496:	4b0d      	ldr	r3, [pc, #52]	; (14cc <EEPROM_init+0x84>)
    1498:	685b      	ldr	r3, [r3, #4]
    149a:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
    149e:	601a      	str	r2, [r3, #0]
    14a0:	e7d9      	b.n	1456 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    14a6:	4b0a      	ldr	r3, [pc, #40]	; (14d0 <EEPROM_init+0x88>)
    14a8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    14ac:	bd08      	pop	{r3, pc}
    14ae:	bf00      	nop
    14b0:	000013b5 	.word	0x000013b5
    14b4:	00004090 	.word	0x00004090
    14b8:	0000250d 	.word	0x0000250d
    14bc:	41004000 	.word	0x41004000
    14c0:	000040f0 	.word	0x000040f0
    14c4:	00002425 	.word	0x00002425
    14c8:	00001365 	.word	0x00001365
    14cc:	200001f4 	.word	0x200001f4
    14d0:	41008000 	.word	0x41008000
    14d4:	000040b4 	.word	0x000040b4

000014d8 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
    14d8:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    14da:	4b0a      	ldr	r3, [pc, #40]	; (1504 <EEPROM_read+0x2c>)
    14dc:	681a      	ldr	r2, [r3, #0]
    14de:	3a01      	subs	r2, #1
    14e0:	4809      	ldr	r0, [pc, #36]	; (1508 <EEPROM_read+0x30>)
    14e2:	1e43      	subs	r3, r0, #1
    14e4:	3063      	adds	r0, #99	; 0x63
    14e6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    14ea:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    14ee:	4283      	cmp	r3, r0
    14f0:	d1f9      	bne.n	14e6 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    14f2:	2164      	movs	r1, #100	; 0x64
    14f4:	4805      	ldr	r0, [pc, #20]	; (150c <EEPROM_read+0x34>)
    14f6:	4b06      	ldr	r3, [pc, #24]	; (1510 <EEPROM_read+0x38>)
    14f8:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    14fa:	2164      	movs	r1, #100	; 0x64
    14fc:	4802      	ldr	r0, [pc, #8]	; (1508 <EEPROM_read+0x30>)
    14fe:	4b05      	ldr	r3, [pc, #20]	; (1514 <EEPROM_read+0x3c>)
    1500:	4798      	blx	r3
    1502:	bd08      	pop	{r3, pc}
    1504:	200001f4 	.word	0x200001f4
    1508:	200004a4 	.word	0x200004a4
    150c:	00004184 	.word	0x00004184
    1510:	00002425 	.word	0x00002425
    1514:	000013f5 	.word	0x000013f5

00001518 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
    1518:	b530      	push	{r4, r5, lr}
    151a:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
    151c:	2300      	movs	r3, #0
    151e:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
    1520:	ac02      	add	r4, sp, #8
    1522:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
    1526:	481a      	ldr	r0, [pc, #104]	; (1590 <EEPROM_write+0x78>)
    1528:	4b1a      	ldr	r3, [pc, #104]	; (1594 <EEPROM_write+0x7c>)
    152a:	4798      	blx	r3
	scanf("%d", &ee_addr);
    152c:	4621      	mov	r1, r4
    152e:	481a      	ldr	r0, [pc, #104]	; (1598 <EEPROM_write+0x80>)
    1530:	4b1a      	ldr	r3, [pc, #104]	; (159c <EEPROM_write+0x84>)
    1532:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
    1534:	9b00      	ldr	r3, [sp, #0]
    1536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    153a:	d224      	bcs.n	1586 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
    153c:	4818      	ldr	r0, [pc, #96]	; (15a0 <EEPROM_write+0x88>)
    153e:	4d15      	ldr	r5, [pc, #84]	; (1594 <EEPROM_write+0x7c>)
    1540:	47a8      	blx	r5
	scanf("%d", &ee_data);
    1542:	a901      	add	r1, sp, #4
    1544:	4814      	ldr	r0, [pc, #80]	; (1598 <EEPROM_write+0x80>)
    1546:	4b15      	ldr	r3, [pc, #84]	; (159c <EEPROM_write+0x84>)
    1548:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
    154a:	4c16      	ldr	r4, [pc, #88]	; (15a4 <EEPROM_write+0x8c>)
    154c:	6822      	ldr	r2, [r4, #0]
    154e:	9901      	ldr	r1, [sp, #4]
    1550:	9b00      	ldr	r3, [sp, #0]
    1552:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
    1554:	9a00      	ldr	r2, [sp, #0]
    1556:	9901      	ldr	r1, [sp, #4]
    1558:	4813      	ldr	r0, [pc, #76]	; (15a8 <EEPROM_write+0x90>)
    155a:	47a8      	blx	r5
    155c:	6822      	ldr	r2, [r4, #0]
    155e:	3a01      	subs	r2, #1
    1560:	4812      	ldr	r0, [pc, #72]	; (15ac <EEPROM_write+0x94>)
    1562:	1e43      	subs	r3, r0, #1
    1564:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1566:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    156a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    156e:	4283      	cmp	r3, r0
    1570:	d1f9      	bne.n	1566 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1572:	2164      	movs	r1, #100	; 0x64
    1574:	480e      	ldr	r0, [pc, #56]	; (15b0 <EEPROM_write+0x98>)
    1576:	4b07      	ldr	r3, [pc, #28]	; (1594 <EEPROM_write+0x7c>)
    1578:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    157a:	2164      	movs	r1, #100	; 0x64
    157c:	480b      	ldr	r0, [pc, #44]	; (15ac <EEPROM_write+0x94>)
    157e:	4b0d      	ldr	r3, [pc, #52]	; (15b4 <EEPROM_write+0x9c>)
    1580:	4798      	blx	r3
}
    1582:	b003      	add	sp, #12
    1584:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
    1586:	480c      	ldr	r0, [pc, #48]	; (15b8 <EEPROM_write+0xa0>)
    1588:	4b0c      	ldr	r3, [pc, #48]	; (15bc <EEPROM_write+0xa4>)
    158a:	4798      	blx	r3
    158c:	e7f9      	b.n	1582 <EEPROM_write+0x6a>
    158e:	bf00      	nop
    1590:	000041ac 	.word	0x000041ac
    1594:	00002425 	.word	0x00002425
    1598:	0000420c 	.word	0x0000420c
    159c:	0000253d 	.word	0x0000253d
    15a0:	000041e8 	.word	0x000041e8
    15a4:	200001f4 	.word	0x200001f4
    15a8:	000041fc 	.word	0x000041fc
    15ac:	200004a4 	.word	0x200004a4
    15b0:	00004184 	.word	0x00004184
    15b4:	000013f5 	.word	0x000013f5
    15b8:	000041c0 	.word	0x000041c0
    15bc:	0000250d 	.word	0x0000250d

000015c0 <EEPROM_menu>:
{
    15c0:	b570      	push	{r4, r5, r6, lr}
    15c2:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
    15c4:	2300      	movs	r3, #0
    15c6:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
    15c8:	4e1b      	ldr	r6, [pc, #108]	; (1638 <EEPROM_menu+0x78>)
    15ca:	4d1c      	ldr	r5, [pc, #112]	; (163c <EEPROM_menu+0x7c>)
    15cc:	4c1c      	ldr	r4, [pc, #112]	; (1640 <EEPROM_menu+0x80>)
    15ce:	4631      	mov	r1, r6
    15d0:	4628      	mov	r0, r5
    15d2:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    15d4:	a901      	add	r1, sp, #4
    15d6:	481b      	ldr	r0, [pc, #108]	; (1644 <EEPROM_menu+0x84>)
    15d8:	4b1b      	ldr	r3, [pc, #108]	; (1648 <EEPROM_menu+0x88>)
    15da:	4798      	blx	r3
    15dc:	b150      	cbz	r0, 15f4 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    15de:	9901      	ldr	r1, [sp, #4]
    15e0:	481a      	ldr	r0, [pc, #104]	; (164c <EEPROM_menu+0x8c>)
    15e2:	47a0      	blx	r4
		switch (user_selection) {
    15e4:	9b01      	ldr	r3, [sp, #4]
    15e6:	3b01      	subs	r3, #1
    15e8:	2b03      	cmp	r3, #3
    15ea:	d821      	bhi.n	1630 <EEPROM_menu+0x70>
    15ec:	e8df f003 	tbb	[pc, r3]
    15f0:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
    15f4:	4b16      	ldr	r3, [pc, #88]	; (1650 <EEPROM_menu+0x90>)
    15f6:	681b      	ldr	r3, [r3, #0]
    15f8:	6858      	ldr	r0, [r3, #4]
    15fa:	4b16      	ldr	r3, [pc, #88]	; (1654 <EEPROM_menu+0x94>)
    15fc:	4798      	blx	r3
    15fe:	e7ee      	b.n	15de <EEPROM_menu+0x1e>
    1600:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1604:	4914      	ldr	r1, [pc, #80]	; (1658 <EEPROM_menu+0x98>)
    1606:	68ca      	ldr	r2, [r1, #12]
    1608:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    160c:	4b13      	ldr	r3, [pc, #76]	; (165c <EEPROM_menu+0x9c>)
    160e:	4313      	orrs	r3, r2
    1610:	60cb      	str	r3, [r1, #12]
    1612:	f3bf 8f4f 	dsb	sy
    __NOP();
    1616:	bf00      	nop
    1618:	e7fd      	b.n	1616 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
    161a:	4811      	ldr	r0, [pc, #68]	; (1660 <EEPROM_menu+0xa0>)
    161c:	4b11      	ldr	r3, [pc, #68]	; (1664 <EEPROM_menu+0xa4>)
    161e:	4798      	blx	r3
}
    1620:	b002      	add	sp, #8
    1622:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
    1624:	4b10      	ldr	r3, [pc, #64]	; (1668 <EEPROM_menu+0xa8>)
    1626:	4798      	blx	r3
				break;
    1628:	e7d1      	b.n	15ce <EEPROM_menu+0xe>
				EEPROM_write();
    162a:	4b10      	ldr	r3, [pc, #64]	; (166c <EEPROM_menu+0xac>)
    162c:	4798      	blx	r3
				break;
    162e:	e7ce      	b.n	15ce <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
    1630:	480f      	ldr	r0, [pc, #60]	; (1670 <EEPROM_menu+0xb0>)
    1632:	4b0c      	ldr	r3, [pc, #48]	; (1664 <EEPROM_menu+0xa4>)
    1634:	4798      	blx	r3
				break;
    1636:	e7ca      	b.n	15ce <EEPROM_menu+0xe>
    1638:	200001fc 	.word	0x200001fc
    163c:	00003d68 	.word	0x00003d68
    1640:	00002425 	.word	0x00002425
    1644:	0000420c 	.word	0x0000420c
    1648:	0000253d 	.word	0x0000253d
    164c:	00003d6c 	.word	0x00003d6c
    1650:	20000278 	.word	0x20000278
    1654:	00002085 	.word	0x00002085
    1658:	e000ed00 	.word	0xe000ed00
    165c:	05fa0004 	.word	0x05fa0004
    1660:	00003d88 	.word	0x00003d88
    1664:	0000250d 	.word	0x0000250d
    1668:	000014d9 	.word	0x000014d9
    166c:	00001519 	.word	0x00001519
    1670:	00003ef4 	.word	0x00003ef4

00001674 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    1674:	b940      	cbnz	r0, 1688 <_read+0x14>
{
    1676:	b508      	push	{r3, lr}
    1678:	460b      	mov	r3, r1
    167a:	4611      	mov	r1, r2
    167c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    167e:	4b04      	ldr	r3, [pc, #16]	; (1690 <_read+0x1c>)
    1680:	4798      	blx	r3
    1682:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    1686:	bd08      	pop	{r3, pc}
		return -1;
    1688:	f04f 30ff 	mov.w	r0, #4294967295
    168c:	4770      	bx	lr
    168e:	bf00      	nop
    1690:	000016e5 	.word	0x000016e5

00001694 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1694:	3801      	subs	r0, #1
    1696:	2802      	cmp	r0, #2
    1698:	d808      	bhi.n	16ac <_write+0x18>
{
    169a:	b508      	push	{r3, lr}
    169c:	460b      	mov	r3, r1
    169e:	4611      	mov	r1, r2
    16a0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <_write+0x20>)
    16a4:	4798      	blx	r3
    16a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    16aa:	bd08      	pop	{r3, pc}
		return -1;
    16ac:	f04f 30ff 	mov.w	r0, #4294967295
    16b0:	4770      	bx	lr
    16b2:	bf00      	nop
    16b4:	00001709 	.word	0x00001709

000016b8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    16bc:	4d06      	ldr	r5, [pc, #24]	; (16d8 <stdio_io_init+0x20>)
    16be:	682b      	ldr	r3, [r5, #0]
    16c0:	2100      	movs	r1, #0
    16c2:	6898      	ldr	r0, [r3, #8]
    16c4:	4c05      	ldr	r4, [pc, #20]	; (16dc <stdio_io_init+0x24>)
    16c6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    16c8:	682b      	ldr	r3, [r5, #0]
    16ca:	2100      	movs	r1, #0
    16cc:	6858      	ldr	r0, [r3, #4]
    16ce:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    16d0:	4b03      	ldr	r3, [pc, #12]	; (16e0 <stdio_io_init+0x28>)
    16d2:	601e      	str	r6, [r3, #0]
    16d4:	bd70      	pop	{r4, r5, r6, pc}
    16d6:	bf00      	nop
    16d8:	20000278 	.word	0x20000278
    16dc:	0000256d 	.word	0x0000256d
    16e0:	20000508 	.word	0x20000508

000016e4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    16e4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    16e6:	4b06      	ldr	r3, [pc, #24]	; (1700 <stdio_io_read+0x1c>)
    16e8:	681b      	ldr	r3, [r3, #0]
    16ea:	b133      	cbz	r3, 16fa <stdio_io_read+0x16>
    16ec:	460a      	mov	r2, r1
    16ee:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    16f0:	b292      	uxth	r2, r2
    16f2:	4618      	mov	r0, r3
    16f4:	4b03      	ldr	r3, [pc, #12]	; (1704 <stdio_io_read+0x20>)
    16f6:	4798      	blx	r3
    16f8:	bd08      	pop	{r3, pc}
		return 0;
    16fa:	2000      	movs	r0, #0
}
    16fc:	bd08      	pop	{r3, pc}
    16fe:	bf00      	nop
    1700:	20000508 	.word	0x20000508
    1704:	0000070d 	.word	0x0000070d

00001708 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1708:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    170a:	4b06      	ldr	r3, [pc, #24]	; (1724 <stdio_io_write+0x1c>)
    170c:	681b      	ldr	r3, [r3, #0]
    170e:	b133      	cbz	r3, 171e <stdio_io_write+0x16>
    1710:	460a      	mov	r2, r1
    1712:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1714:	b292      	uxth	r2, r2
    1716:	4618      	mov	r0, r3
    1718:	4b03      	ldr	r3, [pc, #12]	; (1728 <stdio_io_write+0x20>)
    171a:	4798      	blx	r3
    171c:	bd08      	pop	{r3, pc}
		return 0;
    171e:	2000      	movs	r0, #0
}
    1720:	bd08      	pop	{r3, pc}
    1722:	bf00      	nop
    1724:	20000508 	.word	0x20000508
    1728:	000006dd 	.word	0x000006dd

0000172c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    172c:	b510      	push	{r4, lr}

	usart_sync_enable(&STDIO_IO);
    172e:	4c04      	ldr	r4, [pc, #16]	; (1740 <stdio_redirect_init+0x14>)
    1730:	4620      	mov	r0, r4
    1732:	4b04      	ldr	r3, [pc, #16]	; (1744 <stdio_redirect_init+0x18>)
    1734:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    1736:	4620      	mov	r0, r4
    1738:	4b03      	ldr	r3, [pc, #12]	; (1748 <stdio_redirect_init+0x1c>)
    173a:	4798      	blx	r3
    173c:	bd10      	pop	{r4, pc}
    173e:	bf00      	nop
    1740:	20000518 	.word	0x20000518
    1744:	00000889 	.word	0x00000889
    1748:	000016b9 	.word	0x000016b9

0000174c <__aeabi_drsub>:
    174c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1750:	e002      	b.n	1758 <__adddf3>
    1752:	bf00      	nop

00001754 <__aeabi_dsub>:
    1754:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00001758 <__adddf3>:
    1758:	b530      	push	{r4, r5, lr}
    175a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    175e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1762:	ea94 0f05 	teq	r4, r5
    1766:	bf08      	it	eq
    1768:	ea90 0f02 	teqeq	r0, r2
    176c:	bf1f      	itttt	ne
    176e:	ea54 0c00 	orrsne.w	ip, r4, r0
    1772:	ea55 0c02 	orrsne.w	ip, r5, r2
    1776:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    177a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    177e:	f000 80e2 	beq.w	1946 <__adddf3+0x1ee>
    1782:	ea4f 5454 	mov.w	r4, r4, lsr #21
    1786:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    178a:	bfb8      	it	lt
    178c:	426d      	neglt	r5, r5
    178e:	dd0c      	ble.n	17aa <__adddf3+0x52>
    1790:	442c      	add	r4, r5
    1792:	ea80 0202 	eor.w	r2, r0, r2
    1796:	ea81 0303 	eor.w	r3, r1, r3
    179a:	ea82 0000 	eor.w	r0, r2, r0
    179e:	ea83 0101 	eor.w	r1, r3, r1
    17a2:	ea80 0202 	eor.w	r2, r0, r2
    17a6:	ea81 0303 	eor.w	r3, r1, r3
    17aa:	2d36      	cmp	r5, #54	; 0x36
    17ac:	bf88      	it	hi
    17ae:	bd30      	pophi	{r4, r5, pc}
    17b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    17b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    17b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    17bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    17c0:	d002      	beq.n	17c8 <__adddf3+0x70>
    17c2:	4240      	negs	r0, r0
    17c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    17c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    17cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    17d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    17d4:	d002      	beq.n	17dc <__adddf3+0x84>
    17d6:	4252      	negs	r2, r2
    17d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    17dc:	ea94 0f05 	teq	r4, r5
    17e0:	f000 80a7 	beq.w	1932 <__adddf3+0x1da>
    17e4:	f1a4 0401 	sub.w	r4, r4, #1
    17e8:	f1d5 0e20 	rsbs	lr, r5, #32
    17ec:	db0d      	blt.n	180a <__adddf3+0xb2>
    17ee:	fa02 fc0e 	lsl.w	ip, r2, lr
    17f2:	fa22 f205 	lsr.w	r2, r2, r5
    17f6:	1880      	adds	r0, r0, r2
    17f8:	f141 0100 	adc.w	r1, r1, #0
    17fc:	fa03 f20e 	lsl.w	r2, r3, lr
    1800:	1880      	adds	r0, r0, r2
    1802:	fa43 f305 	asr.w	r3, r3, r5
    1806:	4159      	adcs	r1, r3
    1808:	e00e      	b.n	1828 <__adddf3+0xd0>
    180a:	f1a5 0520 	sub.w	r5, r5, #32
    180e:	f10e 0e20 	add.w	lr, lr, #32
    1812:	2a01      	cmp	r2, #1
    1814:	fa03 fc0e 	lsl.w	ip, r3, lr
    1818:	bf28      	it	cs
    181a:	f04c 0c02 	orrcs.w	ip, ip, #2
    181e:	fa43 f305 	asr.w	r3, r3, r5
    1822:	18c0      	adds	r0, r0, r3
    1824:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    1828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    182c:	d507      	bpl.n	183e <__adddf3+0xe6>
    182e:	f04f 0e00 	mov.w	lr, #0
    1832:	f1dc 0c00 	rsbs	ip, ip, #0
    1836:	eb7e 0000 	sbcs.w	r0, lr, r0
    183a:	eb6e 0101 	sbc.w	r1, lr, r1
    183e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1842:	d31b      	bcc.n	187c <__adddf3+0x124>
    1844:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    1848:	d30c      	bcc.n	1864 <__adddf3+0x10c>
    184a:	0849      	lsrs	r1, r1, #1
    184c:	ea5f 0030 	movs.w	r0, r0, rrx
    1850:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1854:	f104 0401 	add.w	r4, r4, #1
    1858:	ea4f 5244 	mov.w	r2, r4, lsl #21
    185c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1860:	f080 809a 	bcs.w	1998 <__adddf3+0x240>
    1864:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1868:	bf08      	it	eq
    186a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    186e:	f150 0000 	adcs.w	r0, r0, #0
    1872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1876:	ea41 0105 	orr.w	r1, r1, r5
    187a:	bd30      	pop	{r4, r5, pc}
    187c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1880:	4140      	adcs	r0, r0
    1882:	eb41 0101 	adc.w	r1, r1, r1
    1886:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    188a:	f1a4 0401 	sub.w	r4, r4, #1
    188e:	d1e9      	bne.n	1864 <__adddf3+0x10c>
    1890:	f091 0f00 	teq	r1, #0
    1894:	bf04      	itt	eq
    1896:	4601      	moveq	r1, r0
    1898:	2000      	moveq	r0, #0
    189a:	fab1 f381 	clz	r3, r1
    189e:	bf08      	it	eq
    18a0:	3320      	addeq	r3, #32
    18a2:	f1a3 030b 	sub.w	r3, r3, #11
    18a6:	f1b3 0220 	subs.w	r2, r3, #32
    18aa:	da0c      	bge.n	18c6 <__adddf3+0x16e>
    18ac:	320c      	adds	r2, #12
    18ae:	dd08      	ble.n	18c2 <__adddf3+0x16a>
    18b0:	f102 0c14 	add.w	ip, r2, #20
    18b4:	f1c2 020c 	rsb	r2, r2, #12
    18b8:	fa01 f00c 	lsl.w	r0, r1, ip
    18bc:	fa21 f102 	lsr.w	r1, r1, r2
    18c0:	e00c      	b.n	18dc <__adddf3+0x184>
    18c2:	f102 0214 	add.w	r2, r2, #20
    18c6:	bfd8      	it	le
    18c8:	f1c2 0c20 	rsble	ip, r2, #32
    18cc:	fa01 f102 	lsl.w	r1, r1, r2
    18d0:	fa20 fc0c 	lsr.w	ip, r0, ip
    18d4:	bfdc      	itt	le
    18d6:	ea41 010c 	orrle.w	r1, r1, ip
    18da:	4090      	lslle	r0, r2
    18dc:	1ae4      	subs	r4, r4, r3
    18de:	bfa2      	ittt	ge
    18e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    18e4:	4329      	orrge	r1, r5
    18e6:	bd30      	popge	{r4, r5, pc}
    18e8:	ea6f 0404 	mvn.w	r4, r4
    18ec:	3c1f      	subs	r4, #31
    18ee:	da1c      	bge.n	192a <__adddf3+0x1d2>
    18f0:	340c      	adds	r4, #12
    18f2:	dc0e      	bgt.n	1912 <__adddf3+0x1ba>
    18f4:	f104 0414 	add.w	r4, r4, #20
    18f8:	f1c4 0220 	rsb	r2, r4, #32
    18fc:	fa20 f004 	lsr.w	r0, r0, r4
    1900:	fa01 f302 	lsl.w	r3, r1, r2
    1904:	ea40 0003 	orr.w	r0, r0, r3
    1908:	fa21 f304 	lsr.w	r3, r1, r4
    190c:	ea45 0103 	orr.w	r1, r5, r3
    1910:	bd30      	pop	{r4, r5, pc}
    1912:	f1c4 040c 	rsb	r4, r4, #12
    1916:	f1c4 0220 	rsb	r2, r4, #32
    191a:	fa20 f002 	lsr.w	r0, r0, r2
    191e:	fa01 f304 	lsl.w	r3, r1, r4
    1922:	ea40 0003 	orr.w	r0, r0, r3
    1926:	4629      	mov	r1, r5
    1928:	bd30      	pop	{r4, r5, pc}
    192a:	fa21 f004 	lsr.w	r0, r1, r4
    192e:	4629      	mov	r1, r5
    1930:	bd30      	pop	{r4, r5, pc}
    1932:	f094 0f00 	teq	r4, #0
    1936:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    193a:	bf06      	itte	eq
    193c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    1940:	3401      	addeq	r4, #1
    1942:	3d01      	subne	r5, #1
    1944:	e74e      	b.n	17e4 <__adddf3+0x8c>
    1946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    194a:	bf18      	it	ne
    194c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1950:	d029      	beq.n	19a6 <__adddf3+0x24e>
    1952:	ea94 0f05 	teq	r4, r5
    1956:	bf08      	it	eq
    1958:	ea90 0f02 	teqeq	r0, r2
    195c:	d005      	beq.n	196a <__adddf3+0x212>
    195e:	ea54 0c00 	orrs.w	ip, r4, r0
    1962:	bf04      	itt	eq
    1964:	4619      	moveq	r1, r3
    1966:	4610      	moveq	r0, r2
    1968:	bd30      	pop	{r4, r5, pc}
    196a:	ea91 0f03 	teq	r1, r3
    196e:	bf1e      	ittt	ne
    1970:	2100      	movne	r1, #0
    1972:	2000      	movne	r0, #0
    1974:	bd30      	popne	{r4, r5, pc}
    1976:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    197a:	d105      	bne.n	1988 <__adddf3+0x230>
    197c:	0040      	lsls	r0, r0, #1
    197e:	4149      	adcs	r1, r1
    1980:	bf28      	it	cs
    1982:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    1986:	bd30      	pop	{r4, r5, pc}
    1988:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    198c:	bf3c      	itt	cc
    198e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1992:	bd30      	popcc	{r4, r5, pc}
    1994:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1998:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    199c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    19a0:	f04f 0000 	mov.w	r0, #0
    19a4:	bd30      	pop	{r4, r5, pc}
    19a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    19aa:	bf1a      	itte	ne
    19ac:	4619      	movne	r1, r3
    19ae:	4610      	movne	r0, r2
    19b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    19b4:	bf1c      	itt	ne
    19b6:	460b      	movne	r3, r1
    19b8:	4602      	movne	r2, r0
    19ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    19be:	bf06      	itte	eq
    19c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    19c4:	ea91 0f03 	teqeq	r1, r3
    19c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    19cc:	bd30      	pop	{r4, r5, pc}
    19ce:	bf00      	nop

000019d0 <__aeabi_ui2d>:
    19d0:	f090 0f00 	teq	r0, #0
    19d4:	bf04      	itt	eq
    19d6:	2100      	moveq	r1, #0
    19d8:	4770      	bxeq	lr
    19da:	b530      	push	{r4, r5, lr}
    19dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    19e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    19e4:	f04f 0500 	mov.w	r5, #0
    19e8:	f04f 0100 	mov.w	r1, #0
    19ec:	e750      	b.n	1890 <__adddf3+0x138>
    19ee:	bf00      	nop

000019f0 <__aeabi_i2d>:
    19f0:	f090 0f00 	teq	r0, #0
    19f4:	bf04      	itt	eq
    19f6:	2100      	moveq	r1, #0
    19f8:	4770      	bxeq	lr
    19fa:	b530      	push	{r4, r5, lr}
    19fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1a00:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1a04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    1a08:	bf48      	it	mi
    1a0a:	4240      	negmi	r0, r0
    1a0c:	f04f 0100 	mov.w	r1, #0
    1a10:	e73e      	b.n	1890 <__adddf3+0x138>
    1a12:	bf00      	nop

00001a14 <__aeabi_f2d>:
    1a14:	0042      	lsls	r2, r0, #1
    1a16:	ea4f 01e2 	mov.w	r1, r2, asr #3
    1a1a:	ea4f 0131 	mov.w	r1, r1, rrx
    1a1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    1a22:	bf1f      	itttt	ne
    1a24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    1a28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1a2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    1a30:	4770      	bxne	lr
    1a32:	f092 0f00 	teq	r2, #0
    1a36:	bf14      	ite	ne
    1a38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1a3c:	4770      	bxeq	lr
    1a3e:	b530      	push	{r4, r5, lr}
    1a40:	f44f 7460 	mov.w	r4, #896	; 0x380
    1a44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1a48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1a4c:	e720      	b.n	1890 <__adddf3+0x138>
    1a4e:	bf00      	nop

00001a50 <__aeabi_ul2d>:
    1a50:	ea50 0201 	orrs.w	r2, r0, r1
    1a54:	bf08      	it	eq
    1a56:	4770      	bxeq	lr
    1a58:	b530      	push	{r4, r5, lr}
    1a5a:	f04f 0500 	mov.w	r5, #0
    1a5e:	e00a      	b.n	1a76 <__aeabi_l2d+0x16>

00001a60 <__aeabi_l2d>:
    1a60:	ea50 0201 	orrs.w	r2, r0, r1
    1a64:	bf08      	it	eq
    1a66:	4770      	bxeq	lr
    1a68:	b530      	push	{r4, r5, lr}
    1a6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    1a6e:	d502      	bpl.n	1a76 <__aeabi_l2d+0x16>
    1a70:	4240      	negs	r0, r0
    1a72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1a76:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1a7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1a7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    1a82:	f43f aedc 	beq.w	183e <__adddf3+0xe6>
    1a86:	f04f 0203 	mov.w	r2, #3
    1a8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1a8e:	bf18      	it	ne
    1a90:	3203      	addne	r2, #3
    1a92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1a96:	bf18      	it	ne
    1a98:	3203      	addne	r2, #3
    1a9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    1a9e:	f1c2 0320 	rsb	r3, r2, #32
    1aa2:	fa00 fc03 	lsl.w	ip, r0, r3
    1aa6:	fa20 f002 	lsr.w	r0, r0, r2
    1aaa:	fa01 fe03 	lsl.w	lr, r1, r3
    1aae:	ea40 000e 	orr.w	r0, r0, lr
    1ab2:	fa21 f102 	lsr.w	r1, r1, r2
    1ab6:	4414      	add	r4, r2
    1ab8:	e6c1      	b.n	183e <__adddf3+0xe6>
    1aba:	bf00      	nop

00001abc <__aeabi_dmul>:
    1abc:	b570      	push	{r4, r5, r6, lr}
    1abe:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1ac2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1ac6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1aca:	bf1d      	ittte	ne
    1acc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1ad0:	ea94 0f0c 	teqne	r4, ip
    1ad4:	ea95 0f0c 	teqne	r5, ip
    1ad8:	f000 f8de 	bleq	1c98 <__aeabi_dmul+0x1dc>
    1adc:	442c      	add	r4, r5
    1ade:	ea81 0603 	eor.w	r6, r1, r3
    1ae2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    1ae6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    1aea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    1aee:	bf18      	it	ne
    1af0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    1af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1afc:	d038      	beq.n	1b70 <__aeabi_dmul+0xb4>
    1afe:	fba0 ce02 	umull	ip, lr, r0, r2
    1b02:	f04f 0500 	mov.w	r5, #0
    1b06:	fbe1 e502 	umlal	lr, r5, r1, r2
    1b0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    1b0e:	fbe0 e503 	umlal	lr, r5, r0, r3
    1b12:	f04f 0600 	mov.w	r6, #0
    1b16:	fbe1 5603 	umlal	r5, r6, r1, r3
    1b1a:	f09c 0f00 	teq	ip, #0
    1b1e:	bf18      	it	ne
    1b20:	f04e 0e01 	orrne.w	lr, lr, #1
    1b24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    1b28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1b2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    1b30:	d204      	bcs.n	1b3c <__aeabi_dmul+0x80>
    1b32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    1b36:	416d      	adcs	r5, r5
    1b38:	eb46 0606 	adc.w	r6, r6, r6
    1b3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    1b40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1b44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1b48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1b4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    1b50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1b54:	bf88      	it	hi
    1b56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1b5a:	d81e      	bhi.n	1b9a <__aeabi_dmul+0xde>
    1b5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    1b60:	bf08      	it	eq
    1b62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1b66:	f150 0000 	adcs.w	r0, r0, #0
    1b6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1b6e:	bd70      	pop	{r4, r5, r6, pc}
    1b70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1b74:	ea46 0101 	orr.w	r1, r6, r1
    1b78:	ea40 0002 	orr.w	r0, r0, r2
    1b7c:	ea81 0103 	eor.w	r1, r1, r3
    1b80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1b84:	bfc2      	ittt	gt
    1b86:	ebd4 050c 	rsbsgt	r5, r4, ip
    1b8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1b8e:	bd70      	popgt	{r4, r5, r6, pc}
    1b90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1b94:	f04f 0e00 	mov.w	lr, #0
    1b98:	3c01      	subs	r4, #1
    1b9a:	f300 80ab 	bgt.w	1cf4 <__aeabi_dmul+0x238>
    1b9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    1ba2:	bfde      	ittt	le
    1ba4:	2000      	movle	r0, #0
    1ba6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1baa:	bd70      	pople	{r4, r5, r6, pc}
    1bac:	f1c4 0400 	rsb	r4, r4, #0
    1bb0:	3c20      	subs	r4, #32
    1bb2:	da35      	bge.n	1c20 <__aeabi_dmul+0x164>
    1bb4:	340c      	adds	r4, #12
    1bb6:	dc1b      	bgt.n	1bf0 <__aeabi_dmul+0x134>
    1bb8:	f104 0414 	add.w	r4, r4, #20
    1bbc:	f1c4 0520 	rsb	r5, r4, #32
    1bc0:	fa00 f305 	lsl.w	r3, r0, r5
    1bc4:	fa20 f004 	lsr.w	r0, r0, r4
    1bc8:	fa01 f205 	lsl.w	r2, r1, r5
    1bcc:	ea40 0002 	orr.w	r0, r0, r2
    1bd0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1bd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1bd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1bdc:	fa21 f604 	lsr.w	r6, r1, r4
    1be0:	eb42 0106 	adc.w	r1, r2, r6
    1be4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1be8:	bf08      	it	eq
    1bea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1bee:	bd70      	pop	{r4, r5, r6, pc}
    1bf0:	f1c4 040c 	rsb	r4, r4, #12
    1bf4:	f1c4 0520 	rsb	r5, r4, #32
    1bf8:	fa00 f304 	lsl.w	r3, r0, r4
    1bfc:	fa20 f005 	lsr.w	r0, r0, r5
    1c00:	fa01 f204 	lsl.w	r2, r1, r4
    1c04:	ea40 0002 	orr.w	r0, r0, r2
    1c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1c0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1c10:	f141 0100 	adc.w	r1, r1, #0
    1c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1c18:	bf08      	it	eq
    1c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1c1e:	bd70      	pop	{r4, r5, r6, pc}
    1c20:	f1c4 0520 	rsb	r5, r4, #32
    1c24:	fa00 f205 	lsl.w	r2, r0, r5
    1c28:	ea4e 0e02 	orr.w	lr, lr, r2
    1c2c:	fa20 f304 	lsr.w	r3, r0, r4
    1c30:	fa01 f205 	lsl.w	r2, r1, r5
    1c34:	ea43 0302 	orr.w	r3, r3, r2
    1c38:	fa21 f004 	lsr.w	r0, r1, r4
    1c3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1c40:	fa21 f204 	lsr.w	r2, r1, r4
    1c44:	ea20 0002 	bic.w	r0, r0, r2
    1c48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1c4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1c50:	bf08      	it	eq
    1c52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1c56:	bd70      	pop	{r4, r5, r6, pc}
    1c58:	f094 0f00 	teq	r4, #0
    1c5c:	d10f      	bne.n	1c7e <__aeabi_dmul+0x1c2>
    1c5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    1c62:	0040      	lsls	r0, r0, #1
    1c64:	eb41 0101 	adc.w	r1, r1, r1
    1c68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1c6c:	bf08      	it	eq
    1c6e:	3c01      	subeq	r4, #1
    1c70:	d0f7      	beq.n	1c62 <__aeabi_dmul+0x1a6>
    1c72:	ea41 0106 	orr.w	r1, r1, r6
    1c76:	f095 0f00 	teq	r5, #0
    1c7a:	bf18      	it	ne
    1c7c:	4770      	bxne	lr
    1c7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    1c82:	0052      	lsls	r2, r2, #1
    1c84:	eb43 0303 	adc.w	r3, r3, r3
    1c88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1c8c:	bf08      	it	eq
    1c8e:	3d01      	subeq	r5, #1
    1c90:	d0f7      	beq.n	1c82 <__aeabi_dmul+0x1c6>
    1c92:	ea43 0306 	orr.w	r3, r3, r6
    1c96:	4770      	bx	lr
    1c98:	ea94 0f0c 	teq	r4, ip
    1c9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    1ca0:	bf18      	it	ne
    1ca2:	ea95 0f0c 	teqne	r5, ip
    1ca6:	d00c      	beq.n	1cc2 <__aeabi_dmul+0x206>
    1ca8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1cac:	bf18      	it	ne
    1cae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1cb2:	d1d1      	bne.n	1c58 <__aeabi_dmul+0x19c>
    1cb4:	ea81 0103 	eor.w	r1, r1, r3
    1cb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1cbc:	f04f 0000 	mov.w	r0, #0
    1cc0:	bd70      	pop	{r4, r5, r6, pc}
    1cc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1cc6:	bf06      	itte	eq
    1cc8:	4610      	moveq	r0, r2
    1cca:	4619      	moveq	r1, r3
    1ccc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1cd0:	d019      	beq.n	1d06 <__aeabi_dmul+0x24a>
    1cd2:	ea94 0f0c 	teq	r4, ip
    1cd6:	d102      	bne.n	1cde <__aeabi_dmul+0x222>
    1cd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1cdc:	d113      	bne.n	1d06 <__aeabi_dmul+0x24a>
    1cde:	ea95 0f0c 	teq	r5, ip
    1ce2:	d105      	bne.n	1cf0 <__aeabi_dmul+0x234>
    1ce4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    1ce8:	bf1c      	itt	ne
    1cea:	4610      	movne	r0, r2
    1cec:	4619      	movne	r1, r3
    1cee:	d10a      	bne.n	1d06 <__aeabi_dmul+0x24a>
    1cf0:	ea81 0103 	eor.w	r1, r1, r3
    1cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1cf8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1cfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1d00:	f04f 0000 	mov.w	r0, #0
    1d04:	bd70      	pop	{r4, r5, r6, pc}
    1d06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1d0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    1d0e:	bd70      	pop	{r4, r5, r6, pc}

00001d10 <__aeabi_ddiv>:
    1d10:	b570      	push	{r4, r5, r6, lr}
    1d12:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1d16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1d1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1d1e:	bf1d      	ittte	ne
    1d20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1d24:	ea94 0f0c 	teqne	r4, ip
    1d28:	ea95 0f0c 	teqne	r5, ip
    1d2c:	f000 f8a7 	bleq	1e7e <__aeabi_ddiv+0x16e>
    1d30:	eba4 0405 	sub.w	r4, r4, r5
    1d34:	ea81 0e03 	eor.w	lr, r1, r3
    1d38:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1d3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1d40:	f000 8088 	beq.w	1e54 <__aeabi_ddiv+0x144>
    1d44:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1d48:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1d4c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    1d50:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1d54:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1d58:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1d5c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    1d60:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1d64:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1d68:	429d      	cmp	r5, r3
    1d6a:	bf08      	it	eq
    1d6c:	4296      	cmpeq	r6, r2
    1d6e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    1d72:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1d76:	d202      	bcs.n	1d7e <__aeabi_ddiv+0x6e>
    1d78:	085b      	lsrs	r3, r3, #1
    1d7a:	ea4f 0232 	mov.w	r2, r2, rrx
    1d7e:	1ab6      	subs	r6, r6, r2
    1d80:	eb65 0503 	sbc.w	r5, r5, r3
    1d84:	085b      	lsrs	r3, r3, #1
    1d86:	ea4f 0232 	mov.w	r2, r2, rrx
    1d8a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1d8e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    1d92:	ebb6 0e02 	subs.w	lr, r6, r2
    1d96:	eb75 0e03 	sbcs.w	lr, r5, r3
    1d9a:	bf22      	ittt	cs
    1d9c:	1ab6      	subcs	r6, r6, r2
    1d9e:	4675      	movcs	r5, lr
    1da0:	ea40 000c 	orrcs.w	r0, r0, ip
    1da4:	085b      	lsrs	r3, r3, #1
    1da6:	ea4f 0232 	mov.w	r2, r2, rrx
    1daa:	ebb6 0e02 	subs.w	lr, r6, r2
    1dae:	eb75 0e03 	sbcs.w	lr, r5, r3
    1db2:	bf22      	ittt	cs
    1db4:	1ab6      	subcs	r6, r6, r2
    1db6:	4675      	movcs	r5, lr
    1db8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1dbc:	085b      	lsrs	r3, r3, #1
    1dbe:	ea4f 0232 	mov.w	r2, r2, rrx
    1dc2:	ebb6 0e02 	subs.w	lr, r6, r2
    1dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
    1dca:	bf22      	ittt	cs
    1dcc:	1ab6      	subcs	r6, r6, r2
    1dce:	4675      	movcs	r5, lr
    1dd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1dd4:	085b      	lsrs	r3, r3, #1
    1dd6:	ea4f 0232 	mov.w	r2, r2, rrx
    1dda:	ebb6 0e02 	subs.w	lr, r6, r2
    1dde:	eb75 0e03 	sbcs.w	lr, r5, r3
    1de2:	bf22      	ittt	cs
    1de4:	1ab6      	subcs	r6, r6, r2
    1de6:	4675      	movcs	r5, lr
    1de8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1dec:	ea55 0e06 	orrs.w	lr, r5, r6
    1df0:	d018      	beq.n	1e24 <__aeabi_ddiv+0x114>
    1df2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    1df6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    1dfa:	ea4f 1606 	mov.w	r6, r6, lsl #4
    1dfe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1e02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    1e06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1e0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    1e0e:	d1c0      	bne.n	1d92 <__aeabi_ddiv+0x82>
    1e10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1e14:	d10b      	bne.n	1e2e <__aeabi_ddiv+0x11e>
    1e16:	ea41 0100 	orr.w	r1, r1, r0
    1e1a:	f04f 0000 	mov.w	r0, #0
    1e1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    1e22:	e7b6      	b.n	1d92 <__aeabi_ddiv+0x82>
    1e24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1e28:	bf04      	itt	eq
    1e2a:	4301      	orreq	r1, r0
    1e2c:	2000      	moveq	r0, #0
    1e2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1e32:	bf88      	it	hi
    1e34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1e38:	f63f aeaf 	bhi.w	1b9a <__aeabi_dmul+0xde>
    1e3c:	ebb5 0c03 	subs.w	ip, r5, r3
    1e40:	bf04      	itt	eq
    1e42:	ebb6 0c02 	subseq.w	ip, r6, r2
    1e46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1e4a:	f150 0000 	adcs.w	r0, r0, #0
    1e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1e52:	bd70      	pop	{r4, r5, r6, pc}
    1e54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    1e58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    1e5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    1e60:	bfc2      	ittt	gt
    1e62:	ebd4 050c 	rsbsgt	r5, r4, ip
    1e66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1e6a:	bd70      	popgt	{r4, r5, r6, pc}
    1e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1e70:	f04f 0e00 	mov.w	lr, #0
    1e74:	3c01      	subs	r4, #1
    1e76:	e690      	b.n	1b9a <__aeabi_dmul+0xde>
    1e78:	ea45 0e06 	orr.w	lr, r5, r6
    1e7c:	e68d      	b.n	1b9a <__aeabi_dmul+0xde>
    1e7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    1e82:	ea94 0f0c 	teq	r4, ip
    1e86:	bf08      	it	eq
    1e88:	ea95 0f0c 	teqeq	r5, ip
    1e8c:	f43f af3b 	beq.w	1d06 <__aeabi_dmul+0x24a>
    1e90:	ea94 0f0c 	teq	r4, ip
    1e94:	d10a      	bne.n	1eac <__aeabi_ddiv+0x19c>
    1e96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1e9a:	f47f af34 	bne.w	1d06 <__aeabi_dmul+0x24a>
    1e9e:	ea95 0f0c 	teq	r5, ip
    1ea2:	f47f af25 	bne.w	1cf0 <__aeabi_dmul+0x234>
    1ea6:	4610      	mov	r0, r2
    1ea8:	4619      	mov	r1, r3
    1eaa:	e72c      	b.n	1d06 <__aeabi_dmul+0x24a>
    1eac:	ea95 0f0c 	teq	r5, ip
    1eb0:	d106      	bne.n	1ec0 <__aeabi_ddiv+0x1b0>
    1eb2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1eb6:	f43f aefd 	beq.w	1cb4 <__aeabi_dmul+0x1f8>
    1eba:	4610      	mov	r0, r2
    1ebc:	4619      	mov	r1, r3
    1ebe:	e722      	b.n	1d06 <__aeabi_dmul+0x24a>
    1ec0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1ec4:	bf18      	it	ne
    1ec6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1eca:	f47f aec5 	bne.w	1c58 <__aeabi_dmul+0x19c>
    1ece:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    1ed2:	f47f af0d 	bne.w	1cf0 <__aeabi_dmul+0x234>
    1ed6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1eda:	f47f aeeb 	bne.w	1cb4 <__aeabi_dmul+0x1f8>
    1ede:	e712      	b.n	1d06 <__aeabi_dmul+0x24a>

00001ee0 <__aeabi_d2uiz>:
    1ee0:	004a      	lsls	r2, r1, #1
    1ee2:	d211      	bcs.n	1f08 <__aeabi_d2uiz+0x28>
    1ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1ee8:	d211      	bcs.n	1f0e <__aeabi_d2uiz+0x2e>
    1eea:	d50d      	bpl.n	1f08 <__aeabi_d2uiz+0x28>
    1eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1ef4:	d40e      	bmi.n	1f14 <__aeabi_d2uiz+0x34>
    1ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1f02:	fa23 f002 	lsr.w	r0, r3, r2
    1f06:	4770      	bx	lr
    1f08:	f04f 0000 	mov.w	r0, #0
    1f0c:	4770      	bx	lr
    1f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1f12:	d102      	bne.n	1f1a <__aeabi_d2uiz+0x3a>
    1f14:	f04f 30ff 	mov.w	r0, #4294967295
    1f18:	4770      	bx	lr
    1f1a:	f04f 0000 	mov.w	r0, #0
    1f1e:	4770      	bx	lr

00001f20 <__sflush_r>:
    1f20:	898a      	ldrh	r2, [r1, #12]
    1f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f26:	4605      	mov	r5, r0
    1f28:	0710      	lsls	r0, r2, #28
    1f2a:	460c      	mov	r4, r1
    1f2c:	d45a      	bmi.n	1fe4 <__sflush_r+0xc4>
    1f2e:	684b      	ldr	r3, [r1, #4]
    1f30:	2b00      	cmp	r3, #0
    1f32:	dc05      	bgt.n	1f40 <__sflush_r+0x20>
    1f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1f36:	2b00      	cmp	r3, #0
    1f38:	dc02      	bgt.n	1f40 <__sflush_r+0x20>
    1f3a:	2000      	movs	r0, #0
    1f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1f42:	2e00      	cmp	r6, #0
    1f44:	d0f9      	beq.n	1f3a <__sflush_r+0x1a>
    1f46:	2300      	movs	r3, #0
    1f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1f4c:	682f      	ldr	r7, [r5, #0]
    1f4e:	602b      	str	r3, [r5, #0]
    1f50:	d033      	beq.n	1fba <__sflush_r+0x9a>
    1f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1f54:	89a3      	ldrh	r3, [r4, #12]
    1f56:	075a      	lsls	r2, r3, #29
    1f58:	d505      	bpl.n	1f66 <__sflush_r+0x46>
    1f5a:	6863      	ldr	r3, [r4, #4]
    1f5c:	1ac0      	subs	r0, r0, r3
    1f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1f60:	b10b      	cbz	r3, 1f66 <__sflush_r+0x46>
    1f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1f64:	1ac0      	subs	r0, r0, r3
    1f66:	2300      	movs	r3, #0
    1f68:	4602      	mov	r2, r0
    1f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1f6c:	6a21      	ldr	r1, [r4, #32]
    1f6e:	4628      	mov	r0, r5
    1f70:	47b0      	blx	r6
    1f72:	1c43      	adds	r3, r0, #1
    1f74:	89a3      	ldrh	r3, [r4, #12]
    1f76:	d106      	bne.n	1f86 <__sflush_r+0x66>
    1f78:	6829      	ldr	r1, [r5, #0]
    1f7a:	291d      	cmp	r1, #29
    1f7c:	d84b      	bhi.n	2016 <__sflush_r+0xf6>
    1f7e:	4a2b      	ldr	r2, [pc, #172]	; (202c <__sflush_r+0x10c>)
    1f80:	40ca      	lsrs	r2, r1
    1f82:	07d6      	lsls	r6, r2, #31
    1f84:	d547      	bpl.n	2016 <__sflush_r+0xf6>
    1f86:	2200      	movs	r2, #0
    1f88:	6062      	str	r2, [r4, #4]
    1f8a:	04d9      	lsls	r1, r3, #19
    1f8c:	6922      	ldr	r2, [r4, #16]
    1f8e:	6022      	str	r2, [r4, #0]
    1f90:	d504      	bpl.n	1f9c <__sflush_r+0x7c>
    1f92:	1c42      	adds	r2, r0, #1
    1f94:	d101      	bne.n	1f9a <__sflush_r+0x7a>
    1f96:	682b      	ldr	r3, [r5, #0]
    1f98:	b903      	cbnz	r3, 1f9c <__sflush_r+0x7c>
    1f9a:	6560      	str	r0, [r4, #84]	; 0x54
    1f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1f9e:	602f      	str	r7, [r5, #0]
    1fa0:	2900      	cmp	r1, #0
    1fa2:	d0ca      	beq.n	1f3a <__sflush_r+0x1a>
    1fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1fa8:	4299      	cmp	r1, r3
    1faa:	d002      	beq.n	1fb2 <__sflush_r+0x92>
    1fac:	4628      	mov	r0, r5
    1fae:	f000 f98d 	bl	22cc <_free_r>
    1fb2:	2000      	movs	r0, #0
    1fb4:	6360      	str	r0, [r4, #52]	; 0x34
    1fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fba:	6a21      	ldr	r1, [r4, #32]
    1fbc:	2301      	movs	r3, #1
    1fbe:	4628      	mov	r0, r5
    1fc0:	47b0      	blx	r6
    1fc2:	1c41      	adds	r1, r0, #1
    1fc4:	d1c6      	bne.n	1f54 <__sflush_r+0x34>
    1fc6:	682b      	ldr	r3, [r5, #0]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d0c3      	beq.n	1f54 <__sflush_r+0x34>
    1fcc:	2b1d      	cmp	r3, #29
    1fce:	d001      	beq.n	1fd4 <__sflush_r+0xb4>
    1fd0:	2b16      	cmp	r3, #22
    1fd2:	d101      	bne.n	1fd8 <__sflush_r+0xb8>
    1fd4:	602f      	str	r7, [r5, #0]
    1fd6:	e7b0      	b.n	1f3a <__sflush_r+0x1a>
    1fd8:	89a3      	ldrh	r3, [r4, #12]
    1fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1fde:	81a3      	strh	r3, [r4, #12]
    1fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe4:	690f      	ldr	r7, [r1, #16]
    1fe6:	2f00      	cmp	r7, #0
    1fe8:	d0a7      	beq.n	1f3a <__sflush_r+0x1a>
    1fea:	0793      	lsls	r3, r2, #30
    1fec:	680e      	ldr	r6, [r1, #0]
    1fee:	bf08      	it	eq
    1ff0:	694b      	ldreq	r3, [r1, #20]
    1ff2:	600f      	str	r7, [r1, #0]
    1ff4:	bf18      	it	ne
    1ff6:	2300      	movne	r3, #0
    1ff8:	eba6 0807 	sub.w	r8, r6, r7
    1ffc:	608b      	str	r3, [r1, #8]
    1ffe:	f1b8 0f00 	cmp.w	r8, #0
    2002:	dd9a      	ble.n	1f3a <__sflush_r+0x1a>
    2004:	4643      	mov	r3, r8
    2006:	463a      	mov	r2, r7
    2008:	6a21      	ldr	r1, [r4, #32]
    200a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    200c:	4628      	mov	r0, r5
    200e:	47b0      	blx	r6
    2010:	2800      	cmp	r0, #0
    2012:	dc07      	bgt.n	2024 <__sflush_r+0x104>
    2014:	89a3      	ldrh	r3, [r4, #12]
    2016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    201a:	81a3      	strh	r3, [r4, #12]
    201c:	f04f 30ff 	mov.w	r0, #4294967295
    2020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2024:	4407      	add	r7, r0
    2026:	eba8 0800 	sub.w	r8, r8, r0
    202a:	e7e8      	b.n	1ffe <__sflush_r+0xde>
    202c:	20400001 	.word	0x20400001

00002030 <_fflush_r>:
    2030:	b538      	push	{r3, r4, r5, lr}
    2032:	690b      	ldr	r3, [r1, #16]
    2034:	4605      	mov	r5, r0
    2036:	460c      	mov	r4, r1
    2038:	b1db      	cbz	r3, 2072 <_fflush_r+0x42>
    203a:	b118      	cbz	r0, 2044 <_fflush_r+0x14>
    203c:	6983      	ldr	r3, [r0, #24]
    203e:	b90b      	cbnz	r3, 2044 <_fflush_r+0x14>
    2040:	f000 f872 	bl	2128 <__sinit>
    2044:	4b0c      	ldr	r3, [pc, #48]	; (2078 <_fflush_r+0x48>)
    2046:	429c      	cmp	r4, r3
    2048:	d109      	bne.n	205e <_fflush_r+0x2e>
    204a:	686c      	ldr	r4, [r5, #4]
    204c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2050:	b17b      	cbz	r3, 2072 <_fflush_r+0x42>
    2052:	4621      	mov	r1, r4
    2054:	4628      	mov	r0, r5
    2056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    205a:	f7ff bf61 	b.w	1f20 <__sflush_r>
    205e:	4b07      	ldr	r3, [pc, #28]	; (207c <_fflush_r+0x4c>)
    2060:	429c      	cmp	r4, r3
    2062:	d101      	bne.n	2068 <_fflush_r+0x38>
    2064:	68ac      	ldr	r4, [r5, #8]
    2066:	e7f1      	b.n	204c <_fflush_r+0x1c>
    2068:	4b05      	ldr	r3, [pc, #20]	; (2080 <_fflush_r+0x50>)
    206a:	429c      	cmp	r4, r3
    206c:	bf08      	it	eq
    206e:	68ec      	ldreq	r4, [r5, #12]
    2070:	e7ec      	b.n	204c <_fflush_r+0x1c>
    2072:	2000      	movs	r0, #0
    2074:	bd38      	pop	{r3, r4, r5, pc}
    2076:	bf00      	nop
    2078:	00004230 	.word	0x00004230
    207c:	00004250 	.word	0x00004250
    2080:	00004210 	.word	0x00004210

00002084 <fflush>:
    2084:	4601      	mov	r1, r0
    2086:	b920      	cbnz	r0, 2092 <fflush+0xe>
    2088:	4b04      	ldr	r3, [pc, #16]	; (209c <fflush+0x18>)
    208a:	4905      	ldr	r1, [pc, #20]	; (20a0 <fflush+0x1c>)
    208c:	6818      	ldr	r0, [r3, #0]
    208e:	f000 b8d3 	b.w	2238 <_fwalk_reent>
    2092:	4b04      	ldr	r3, [pc, #16]	; (20a4 <fflush+0x20>)
    2094:	6818      	ldr	r0, [r3, #0]
    2096:	f7ff bfcb 	b.w	2030 <_fflush_r>
    209a:	bf00      	nop
    209c:	00004270 	.word	0x00004270
    20a0:	00002031 	.word	0x00002031
    20a4:	20000278 	.word	0x20000278

000020a8 <_cleanup_r>:
    20a8:	4901      	ldr	r1, [pc, #4]	; (20b0 <_cleanup_r+0x8>)
    20aa:	f000 b8c5 	b.w	2238 <_fwalk_reent>
    20ae:	bf00      	nop
    20b0:	00002031 	.word	0x00002031

000020b4 <std.isra.0>:
    20b4:	2300      	movs	r3, #0
    20b6:	b510      	push	{r4, lr}
    20b8:	4604      	mov	r4, r0
    20ba:	6003      	str	r3, [r0, #0]
    20bc:	6043      	str	r3, [r0, #4]
    20be:	6083      	str	r3, [r0, #8]
    20c0:	8181      	strh	r1, [r0, #12]
    20c2:	6643      	str	r3, [r0, #100]	; 0x64
    20c4:	81c2      	strh	r2, [r0, #14]
    20c6:	6103      	str	r3, [r0, #16]
    20c8:	6143      	str	r3, [r0, #20]
    20ca:	6183      	str	r3, [r0, #24]
    20cc:	4619      	mov	r1, r3
    20ce:	2208      	movs	r2, #8
    20d0:	305c      	adds	r0, #92	; 0x5c
    20d2:	f000 f8f3 	bl	22bc <memset>
    20d6:	4b05      	ldr	r3, [pc, #20]	; (20ec <std.isra.0+0x38>)
    20d8:	6263      	str	r3, [r4, #36]	; 0x24
    20da:	4b05      	ldr	r3, [pc, #20]	; (20f0 <std.isra.0+0x3c>)
    20dc:	62a3      	str	r3, [r4, #40]	; 0x28
    20de:	4b05      	ldr	r3, [pc, #20]	; (20f4 <std.isra.0+0x40>)
    20e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    20e2:	4b05      	ldr	r3, [pc, #20]	; (20f8 <std.isra.0+0x44>)
    20e4:	6224      	str	r4, [r4, #32]
    20e6:	6323      	str	r3, [r4, #48]	; 0x30
    20e8:	bd10      	pop	{r4, pc}
    20ea:	bf00      	nop
    20ec:	000026d9 	.word	0x000026d9
    20f0:	000026fb 	.word	0x000026fb
    20f4:	00002733 	.word	0x00002733
    20f8:	00002757 	.word	0x00002757

000020fc <__sfmoreglue>:
    20fc:	b570      	push	{r4, r5, r6, lr}
    20fe:	1e4a      	subs	r2, r1, #1
    2100:	2568      	movs	r5, #104	; 0x68
    2102:	4355      	muls	r5, r2
    2104:	460e      	mov	r6, r1
    2106:	f105 0174 	add.w	r1, r5, #116	; 0x74
    210a:	f000 f92d 	bl	2368 <_malloc_r>
    210e:	4604      	mov	r4, r0
    2110:	b140      	cbz	r0, 2124 <__sfmoreglue+0x28>
    2112:	2100      	movs	r1, #0
    2114:	e880 0042 	stmia.w	r0, {r1, r6}
    2118:	300c      	adds	r0, #12
    211a:	60a0      	str	r0, [r4, #8]
    211c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2120:	f000 f8cc 	bl	22bc <memset>
    2124:	4620      	mov	r0, r4
    2126:	bd70      	pop	{r4, r5, r6, pc}

00002128 <__sinit>:
    2128:	6983      	ldr	r3, [r0, #24]
    212a:	b510      	push	{r4, lr}
    212c:	4604      	mov	r4, r0
    212e:	bb33      	cbnz	r3, 217e <__sinit+0x56>
    2130:	6483      	str	r3, [r0, #72]	; 0x48
    2132:	64c3      	str	r3, [r0, #76]	; 0x4c
    2134:	6503      	str	r3, [r0, #80]	; 0x50
    2136:	4b12      	ldr	r3, [pc, #72]	; (2180 <__sinit+0x58>)
    2138:	4a12      	ldr	r2, [pc, #72]	; (2184 <__sinit+0x5c>)
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	6282      	str	r2, [r0, #40]	; 0x28
    213e:	4298      	cmp	r0, r3
    2140:	bf04      	itt	eq
    2142:	2301      	moveq	r3, #1
    2144:	6183      	streq	r3, [r0, #24]
    2146:	f000 f81f 	bl	2188 <__sfp>
    214a:	6060      	str	r0, [r4, #4]
    214c:	4620      	mov	r0, r4
    214e:	f000 f81b 	bl	2188 <__sfp>
    2152:	60a0      	str	r0, [r4, #8]
    2154:	4620      	mov	r0, r4
    2156:	f000 f817 	bl	2188 <__sfp>
    215a:	2200      	movs	r2, #0
    215c:	60e0      	str	r0, [r4, #12]
    215e:	2104      	movs	r1, #4
    2160:	6860      	ldr	r0, [r4, #4]
    2162:	f7ff ffa7 	bl	20b4 <std.isra.0>
    2166:	2201      	movs	r2, #1
    2168:	2109      	movs	r1, #9
    216a:	68a0      	ldr	r0, [r4, #8]
    216c:	f7ff ffa2 	bl	20b4 <std.isra.0>
    2170:	2202      	movs	r2, #2
    2172:	2112      	movs	r1, #18
    2174:	68e0      	ldr	r0, [r4, #12]
    2176:	f7ff ff9d 	bl	20b4 <std.isra.0>
    217a:	2301      	movs	r3, #1
    217c:	61a3      	str	r3, [r4, #24]
    217e:	bd10      	pop	{r4, pc}
    2180:	00004270 	.word	0x00004270
    2184:	000020a9 	.word	0x000020a9

00002188 <__sfp>:
    2188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218a:	4b1c      	ldr	r3, [pc, #112]	; (21fc <__sfp+0x74>)
    218c:	681e      	ldr	r6, [r3, #0]
    218e:	69b3      	ldr	r3, [r6, #24]
    2190:	4607      	mov	r7, r0
    2192:	b913      	cbnz	r3, 219a <__sfp+0x12>
    2194:	4630      	mov	r0, r6
    2196:	f7ff ffc7 	bl	2128 <__sinit>
    219a:	3648      	adds	r6, #72	; 0x48
    219c:	68b4      	ldr	r4, [r6, #8]
    219e:	6873      	ldr	r3, [r6, #4]
    21a0:	3b01      	subs	r3, #1
    21a2:	d503      	bpl.n	21ac <__sfp+0x24>
    21a4:	6833      	ldr	r3, [r6, #0]
    21a6:	b133      	cbz	r3, 21b6 <__sfp+0x2e>
    21a8:	6836      	ldr	r6, [r6, #0]
    21aa:	e7f7      	b.n	219c <__sfp+0x14>
    21ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    21b0:	b16d      	cbz	r5, 21ce <__sfp+0x46>
    21b2:	3468      	adds	r4, #104	; 0x68
    21b4:	e7f4      	b.n	21a0 <__sfp+0x18>
    21b6:	2104      	movs	r1, #4
    21b8:	4638      	mov	r0, r7
    21ba:	f7ff ff9f 	bl	20fc <__sfmoreglue>
    21be:	6030      	str	r0, [r6, #0]
    21c0:	2800      	cmp	r0, #0
    21c2:	d1f1      	bne.n	21a8 <__sfp+0x20>
    21c4:	230c      	movs	r3, #12
    21c6:	603b      	str	r3, [r7, #0]
    21c8:	4604      	mov	r4, r0
    21ca:	4620      	mov	r0, r4
    21cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21d2:	81e3      	strh	r3, [r4, #14]
    21d4:	2301      	movs	r3, #1
    21d6:	81a3      	strh	r3, [r4, #12]
    21d8:	6665      	str	r5, [r4, #100]	; 0x64
    21da:	6025      	str	r5, [r4, #0]
    21dc:	60a5      	str	r5, [r4, #8]
    21de:	6065      	str	r5, [r4, #4]
    21e0:	6125      	str	r5, [r4, #16]
    21e2:	6165      	str	r5, [r4, #20]
    21e4:	61a5      	str	r5, [r4, #24]
    21e6:	2208      	movs	r2, #8
    21e8:	4629      	mov	r1, r5
    21ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    21ee:	f000 f865 	bl	22bc <memset>
    21f2:	6365      	str	r5, [r4, #52]	; 0x34
    21f4:	63a5      	str	r5, [r4, #56]	; 0x38
    21f6:	64a5      	str	r5, [r4, #72]	; 0x48
    21f8:	64e5      	str	r5, [r4, #76]	; 0x4c
    21fa:	e7e6      	b.n	21ca <__sfp+0x42>
    21fc:	00004270 	.word	0x00004270

00002200 <_fwalk>:
    2200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2204:	4688      	mov	r8, r1
    2206:	f100 0448 	add.w	r4, r0, #72	; 0x48
    220a:	2600      	movs	r6, #0
    220c:	b914      	cbnz	r4, 2214 <_fwalk+0x14>
    220e:	4630      	mov	r0, r6
    2210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2214:	68a5      	ldr	r5, [r4, #8]
    2216:	6867      	ldr	r7, [r4, #4]
    2218:	3f01      	subs	r7, #1
    221a:	d501      	bpl.n	2220 <_fwalk+0x20>
    221c:	6824      	ldr	r4, [r4, #0]
    221e:	e7f5      	b.n	220c <_fwalk+0xc>
    2220:	89ab      	ldrh	r3, [r5, #12]
    2222:	2b01      	cmp	r3, #1
    2224:	d906      	bls.n	2234 <_fwalk+0x34>
    2226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    222a:	3301      	adds	r3, #1
    222c:	d002      	beq.n	2234 <_fwalk+0x34>
    222e:	4628      	mov	r0, r5
    2230:	47c0      	blx	r8
    2232:	4306      	orrs	r6, r0
    2234:	3568      	adds	r5, #104	; 0x68
    2236:	e7ef      	b.n	2218 <_fwalk+0x18>

00002238 <_fwalk_reent>:
    2238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    223c:	4680      	mov	r8, r0
    223e:	4689      	mov	r9, r1
    2240:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2244:	2600      	movs	r6, #0
    2246:	b914      	cbnz	r4, 224e <_fwalk_reent+0x16>
    2248:	4630      	mov	r0, r6
    224a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    224e:	68a5      	ldr	r5, [r4, #8]
    2250:	6867      	ldr	r7, [r4, #4]
    2252:	3f01      	subs	r7, #1
    2254:	d501      	bpl.n	225a <_fwalk_reent+0x22>
    2256:	6824      	ldr	r4, [r4, #0]
    2258:	e7f5      	b.n	2246 <_fwalk_reent+0xe>
    225a:	89ab      	ldrh	r3, [r5, #12]
    225c:	2b01      	cmp	r3, #1
    225e:	d907      	bls.n	2270 <_fwalk_reent+0x38>
    2260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2264:	3301      	adds	r3, #1
    2266:	d003      	beq.n	2270 <_fwalk_reent+0x38>
    2268:	4629      	mov	r1, r5
    226a:	4640      	mov	r0, r8
    226c:	47c8      	blx	r9
    226e:	4306      	orrs	r6, r0
    2270:	3568      	adds	r5, #104	; 0x68
    2272:	e7ee      	b.n	2252 <_fwalk_reent+0x1a>

00002274 <__libc_init_array>:
    2274:	b570      	push	{r4, r5, r6, lr}
    2276:	4e0d      	ldr	r6, [pc, #52]	; (22ac <__libc_init_array+0x38>)
    2278:	4c0d      	ldr	r4, [pc, #52]	; (22b0 <__libc_init_array+0x3c>)
    227a:	1ba4      	subs	r4, r4, r6
    227c:	10a4      	asrs	r4, r4, #2
    227e:	2500      	movs	r5, #0
    2280:	42a5      	cmp	r5, r4
    2282:	d109      	bne.n	2298 <__libc_init_array+0x24>
    2284:	4e0b      	ldr	r6, [pc, #44]	; (22b4 <__libc_init_array+0x40>)
    2286:	4c0c      	ldr	r4, [pc, #48]	; (22b8 <__libc_init_array+0x44>)
    2288:	f002 f8a8 	bl	43dc <_init>
    228c:	1ba4      	subs	r4, r4, r6
    228e:	10a4      	asrs	r4, r4, #2
    2290:	2500      	movs	r5, #0
    2292:	42a5      	cmp	r5, r4
    2294:	d105      	bne.n	22a2 <__libc_init_array+0x2e>
    2296:	bd70      	pop	{r4, r5, r6, pc}
    2298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    229c:	4798      	blx	r3
    229e:	3501      	adds	r5, #1
    22a0:	e7ee      	b.n	2280 <__libc_init_array+0xc>
    22a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    22a6:	4798      	blx	r3
    22a8:	3501      	adds	r5, #1
    22aa:	e7f2      	b.n	2292 <__libc_init_array+0x1e>
    22ac:	000043e8 	.word	0x000043e8
    22b0:	000043e8 	.word	0x000043e8
    22b4:	000043e8 	.word	0x000043e8
    22b8:	000043ec 	.word	0x000043ec

000022bc <memset>:
    22bc:	4402      	add	r2, r0
    22be:	4603      	mov	r3, r0
    22c0:	4293      	cmp	r3, r2
    22c2:	d100      	bne.n	22c6 <memset+0xa>
    22c4:	4770      	bx	lr
    22c6:	f803 1b01 	strb.w	r1, [r3], #1
    22ca:	e7f9      	b.n	22c0 <memset+0x4>

000022cc <_free_r>:
    22cc:	b538      	push	{r3, r4, r5, lr}
    22ce:	4605      	mov	r5, r0
    22d0:	2900      	cmp	r1, #0
    22d2:	d045      	beq.n	2360 <_free_r+0x94>
    22d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    22d8:	1f0c      	subs	r4, r1, #4
    22da:	2b00      	cmp	r3, #0
    22dc:	bfb8      	it	lt
    22de:	18e4      	addlt	r4, r4, r3
    22e0:	f000 fb9e 	bl	2a20 <__malloc_lock>
    22e4:	4a1f      	ldr	r2, [pc, #124]	; (2364 <_free_r+0x98>)
    22e6:	6813      	ldr	r3, [r2, #0]
    22e8:	4610      	mov	r0, r2
    22ea:	b933      	cbnz	r3, 22fa <_free_r+0x2e>
    22ec:	6063      	str	r3, [r4, #4]
    22ee:	6014      	str	r4, [r2, #0]
    22f0:	4628      	mov	r0, r5
    22f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    22f6:	f000 bb94 	b.w	2a22 <__malloc_unlock>
    22fa:	42a3      	cmp	r3, r4
    22fc:	d90c      	bls.n	2318 <_free_r+0x4c>
    22fe:	6821      	ldr	r1, [r4, #0]
    2300:	1862      	adds	r2, r4, r1
    2302:	4293      	cmp	r3, r2
    2304:	bf04      	itt	eq
    2306:	681a      	ldreq	r2, [r3, #0]
    2308:	685b      	ldreq	r3, [r3, #4]
    230a:	6063      	str	r3, [r4, #4]
    230c:	bf04      	itt	eq
    230e:	1852      	addeq	r2, r2, r1
    2310:	6022      	streq	r2, [r4, #0]
    2312:	6004      	str	r4, [r0, #0]
    2314:	e7ec      	b.n	22f0 <_free_r+0x24>
    2316:	4613      	mov	r3, r2
    2318:	685a      	ldr	r2, [r3, #4]
    231a:	b10a      	cbz	r2, 2320 <_free_r+0x54>
    231c:	42a2      	cmp	r2, r4
    231e:	d9fa      	bls.n	2316 <_free_r+0x4a>
    2320:	6819      	ldr	r1, [r3, #0]
    2322:	1858      	adds	r0, r3, r1
    2324:	42a0      	cmp	r0, r4
    2326:	d10b      	bne.n	2340 <_free_r+0x74>
    2328:	6820      	ldr	r0, [r4, #0]
    232a:	4401      	add	r1, r0
    232c:	1858      	adds	r0, r3, r1
    232e:	4282      	cmp	r2, r0
    2330:	6019      	str	r1, [r3, #0]
    2332:	d1dd      	bne.n	22f0 <_free_r+0x24>
    2334:	6810      	ldr	r0, [r2, #0]
    2336:	6852      	ldr	r2, [r2, #4]
    2338:	605a      	str	r2, [r3, #4]
    233a:	4401      	add	r1, r0
    233c:	6019      	str	r1, [r3, #0]
    233e:	e7d7      	b.n	22f0 <_free_r+0x24>
    2340:	d902      	bls.n	2348 <_free_r+0x7c>
    2342:	230c      	movs	r3, #12
    2344:	602b      	str	r3, [r5, #0]
    2346:	e7d3      	b.n	22f0 <_free_r+0x24>
    2348:	6820      	ldr	r0, [r4, #0]
    234a:	1821      	adds	r1, r4, r0
    234c:	428a      	cmp	r2, r1
    234e:	bf04      	itt	eq
    2350:	6811      	ldreq	r1, [r2, #0]
    2352:	6852      	ldreq	r2, [r2, #4]
    2354:	6062      	str	r2, [r4, #4]
    2356:	bf04      	itt	eq
    2358:	1809      	addeq	r1, r1, r0
    235a:	6021      	streq	r1, [r4, #0]
    235c:	605c      	str	r4, [r3, #4]
    235e:	e7c7      	b.n	22f0 <_free_r+0x24>
    2360:	bd38      	pop	{r3, r4, r5, pc}
    2362:	bf00      	nop
    2364:	2000050c 	.word	0x2000050c

00002368 <_malloc_r>:
    2368:	b570      	push	{r4, r5, r6, lr}
    236a:	1ccd      	adds	r5, r1, #3
    236c:	f025 0503 	bic.w	r5, r5, #3
    2370:	3508      	adds	r5, #8
    2372:	2d0c      	cmp	r5, #12
    2374:	bf38      	it	cc
    2376:	250c      	movcc	r5, #12
    2378:	2d00      	cmp	r5, #0
    237a:	4606      	mov	r6, r0
    237c:	db01      	blt.n	2382 <_malloc_r+0x1a>
    237e:	42a9      	cmp	r1, r5
    2380:	d903      	bls.n	238a <_malloc_r+0x22>
    2382:	230c      	movs	r3, #12
    2384:	6033      	str	r3, [r6, #0]
    2386:	2000      	movs	r0, #0
    2388:	bd70      	pop	{r4, r5, r6, pc}
    238a:	f000 fb49 	bl	2a20 <__malloc_lock>
    238e:	4a23      	ldr	r2, [pc, #140]	; (241c <_malloc_r+0xb4>)
    2390:	6814      	ldr	r4, [r2, #0]
    2392:	4621      	mov	r1, r4
    2394:	b991      	cbnz	r1, 23bc <_malloc_r+0x54>
    2396:	4c22      	ldr	r4, [pc, #136]	; (2420 <_malloc_r+0xb8>)
    2398:	6823      	ldr	r3, [r4, #0]
    239a:	b91b      	cbnz	r3, 23a4 <_malloc_r+0x3c>
    239c:	4630      	mov	r0, r6
    239e:	f000 f8bd 	bl	251c <_sbrk_r>
    23a2:	6020      	str	r0, [r4, #0]
    23a4:	4629      	mov	r1, r5
    23a6:	4630      	mov	r0, r6
    23a8:	f000 f8b8 	bl	251c <_sbrk_r>
    23ac:	1c43      	adds	r3, r0, #1
    23ae:	d126      	bne.n	23fe <_malloc_r+0x96>
    23b0:	230c      	movs	r3, #12
    23b2:	6033      	str	r3, [r6, #0]
    23b4:	4630      	mov	r0, r6
    23b6:	f000 fb34 	bl	2a22 <__malloc_unlock>
    23ba:	e7e4      	b.n	2386 <_malloc_r+0x1e>
    23bc:	680b      	ldr	r3, [r1, #0]
    23be:	1b5b      	subs	r3, r3, r5
    23c0:	d41a      	bmi.n	23f8 <_malloc_r+0x90>
    23c2:	2b0b      	cmp	r3, #11
    23c4:	d90f      	bls.n	23e6 <_malloc_r+0x7e>
    23c6:	600b      	str	r3, [r1, #0]
    23c8:	50cd      	str	r5, [r1, r3]
    23ca:	18cc      	adds	r4, r1, r3
    23cc:	4630      	mov	r0, r6
    23ce:	f000 fb28 	bl	2a22 <__malloc_unlock>
    23d2:	f104 000b 	add.w	r0, r4, #11
    23d6:	1d23      	adds	r3, r4, #4
    23d8:	f020 0007 	bic.w	r0, r0, #7
    23dc:	1ac3      	subs	r3, r0, r3
    23de:	d01b      	beq.n	2418 <_malloc_r+0xb0>
    23e0:	425a      	negs	r2, r3
    23e2:	50e2      	str	r2, [r4, r3]
    23e4:	bd70      	pop	{r4, r5, r6, pc}
    23e6:	428c      	cmp	r4, r1
    23e8:	bf0d      	iteet	eq
    23ea:	6863      	ldreq	r3, [r4, #4]
    23ec:	684b      	ldrne	r3, [r1, #4]
    23ee:	6063      	strne	r3, [r4, #4]
    23f0:	6013      	streq	r3, [r2, #0]
    23f2:	bf18      	it	ne
    23f4:	460c      	movne	r4, r1
    23f6:	e7e9      	b.n	23cc <_malloc_r+0x64>
    23f8:	460c      	mov	r4, r1
    23fa:	6849      	ldr	r1, [r1, #4]
    23fc:	e7ca      	b.n	2394 <_malloc_r+0x2c>
    23fe:	1cc4      	adds	r4, r0, #3
    2400:	f024 0403 	bic.w	r4, r4, #3
    2404:	42a0      	cmp	r0, r4
    2406:	d005      	beq.n	2414 <_malloc_r+0xac>
    2408:	1a21      	subs	r1, r4, r0
    240a:	4630      	mov	r0, r6
    240c:	f000 f886 	bl	251c <_sbrk_r>
    2410:	3001      	adds	r0, #1
    2412:	d0cd      	beq.n	23b0 <_malloc_r+0x48>
    2414:	6025      	str	r5, [r4, #0]
    2416:	e7d9      	b.n	23cc <_malloc_r+0x64>
    2418:	bd70      	pop	{r4, r5, r6, pc}
    241a:	bf00      	nop
    241c:	2000050c 	.word	0x2000050c
    2420:	20000510 	.word	0x20000510

00002424 <iprintf>:
    2424:	b40f      	push	{r0, r1, r2, r3}
    2426:	4b0a      	ldr	r3, [pc, #40]	; (2450 <iprintf+0x2c>)
    2428:	b513      	push	{r0, r1, r4, lr}
    242a:	681c      	ldr	r4, [r3, #0]
    242c:	b124      	cbz	r4, 2438 <iprintf+0x14>
    242e:	69a3      	ldr	r3, [r4, #24]
    2430:	b913      	cbnz	r3, 2438 <iprintf+0x14>
    2432:	4620      	mov	r0, r4
    2434:	f7ff fe78 	bl	2128 <__sinit>
    2438:	ab05      	add	r3, sp, #20
    243a:	9a04      	ldr	r2, [sp, #16]
    243c:	68a1      	ldr	r1, [r4, #8]
    243e:	9301      	str	r3, [sp, #4]
    2440:	4620      	mov	r0, r4
    2442:	f000 fb17 	bl	2a74 <_vfiprintf_r>
    2446:	b002      	add	sp, #8
    2448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    244c:	b004      	add	sp, #16
    244e:	4770      	bx	lr
    2450:	20000278 	.word	0x20000278

00002454 <_puts_r>:
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	460e      	mov	r6, r1
    2458:	4605      	mov	r5, r0
    245a:	b118      	cbz	r0, 2464 <_puts_r+0x10>
    245c:	6983      	ldr	r3, [r0, #24]
    245e:	b90b      	cbnz	r3, 2464 <_puts_r+0x10>
    2460:	f7ff fe62 	bl	2128 <__sinit>
    2464:	69ab      	ldr	r3, [r5, #24]
    2466:	68ac      	ldr	r4, [r5, #8]
    2468:	b913      	cbnz	r3, 2470 <_puts_r+0x1c>
    246a:	4628      	mov	r0, r5
    246c:	f7ff fe5c 	bl	2128 <__sinit>
    2470:	4b23      	ldr	r3, [pc, #140]	; (2500 <_puts_r+0xac>)
    2472:	429c      	cmp	r4, r3
    2474:	d117      	bne.n	24a6 <_puts_r+0x52>
    2476:	686c      	ldr	r4, [r5, #4]
    2478:	89a3      	ldrh	r3, [r4, #12]
    247a:	071b      	lsls	r3, r3, #28
    247c:	d51d      	bpl.n	24ba <_puts_r+0x66>
    247e:	6923      	ldr	r3, [r4, #16]
    2480:	b1db      	cbz	r3, 24ba <_puts_r+0x66>
    2482:	3e01      	subs	r6, #1
    2484:	68a3      	ldr	r3, [r4, #8]
    2486:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    248a:	3b01      	subs	r3, #1
    248c:	60a3      	str	r3, [r4, #8]
    248e:	b9e9      	cbnz	r1, 24cc <_puts_r+0x78>
    2490:	2b00      	cmp	r3, #0
    2492:	da2e      	bge.n	24f2 <_puts_r+0x9e>
    2494:	4622      	mov	r2, r4
    2496:	210a      	movs	r1, #10
    2498:	4628      	mov	r0, r5
    249a:	f000 f961 	bl	2760 <__swbuf_r>
    249e:	3001      	adds	r0, #1
    24a0:	d011      	beq.n	24c6 <_puts_r+0x72>
    24a2:	200a      	movs	r0, #10
    24a4:	bd70      	pop	{r4, r5, r6, pc}
    24a6:	4b17      	ldr	r3, [pc, #92]	; (2504 <_puts_r+0xb0>)
    24a8:	429c      	cmp	r4, r3
    24aa:	d101      	bne.n	24b0 <_puts_r+0x5c>
    24ac:	68ac      	ldr	r4, [r5, #8]
    24ae:	e7e3      	b.n	2478 <_puts_r+0x24>
    24b0:	4b15      	ldr	r3, [pc, #84]	; (2508 <_puts_r+0xb4>)
    24b2:	429c      	cmp	r4, r3
    24b4:	bf08      	it	eq
    24b6:	68ec      	ldreq	r4, [r5, #12]
    24b8:	e7de      	b.n	2478 <_puts_r+0x24>
    24ba:	4621      	mov	r1, r4
    24bc:	4628      	mov	r0, r5
    24be:	f000 f9b3 	bl	2828 <__swsetup_r>
    24c2:	2800      	cmp	r0, #0
    24c4:	d0dd      	beq.n	2482 <_puts_r+0x2e>
    24c6:	f04f 30ff 	mov.w	r0, #4294967295
    24ca:	bd70      	pop	{r4, r5, r6, pc}
    24cc:	2b00      	cmp	r3, #0
    24ce:	da04      	bge.n	24da <_puts_r+0x86>
    24d0:	69a2      	ldr	r2, [r4, #24]
    24d2:	4293      	cmp	r3, r2
    24d4:	db06      	blt.n	24e4 <_puts_r+0x90>
    24d6:	290a      	cmp	r1, #10
    24d8:	d004      	beq.n	24e4 <_puts_r+0x90>
    24da:	6823      	ldr	r3, [r4, #0]
    24dc:	1c5a      	adds	r2, r3, #1
    24de:	6022      	str	r2, [r4, #0]
    24e0:	7019      	strb	r1, [r3, #0]
    24e2:	e7cf      	b.n	2484 <_puts_r+0x30>
    24e4:	4622      	mov	r2, r4
    24e6:	4628      	mov	r0, r5
    24e8:	f000 f93a 	bl	2760 <__swbuf_r>
    24ec:	3001      	adds	r0, #1
    24ee:	d1c9      	bne.n	2484 <_puts_r+0x30>
    24f0:	e7e9      	b.n	24c6 <_puts_r+0x72>
    24f2:	6823      	ldr	r3, [r4, #0]
    24f4:	200a      	movs	r0, #10
    24f6:	1c5a      	adds	r2, r3, #1
    24f8:	6022      	str	r2, [r4, #0]
    24fa:	7018      	strb	r0, [r3, #0]
    24fc:	bd70      	pop	{r4, r5, r6, pc}
    24fe:	bf00      	nop
    2500:	00004230 	.word	0x00004230
    2504:	00004250 	.word	0x00004250
    2508:	00004210 	.word	0x00004210

0000250c <puts>:
    250c:	4b02      	ldr	r3, [pc, #8]	; (2518 <puts+0xc>)
    250e:	4601      	mov	r1, r0
    2510:	6818      	ldr	r0, [r3, #0]
    2512:	f7ff bf9f 	b.w	2454 <_puts_r>
    2516:	bf00      	nop
    2518:	20000278 	.word	0x20000278

0000251c <_sbrk_r>:
    251c:	b538      	push	{r3, r4, r5, lr}
    251e:	4c06      	ldr	r4, [pc, #24]	; (2538 <_sbrk_r+0x1c>)
    2520:	2300      	movs	r3, #0
    2522:	4605      	mov	r5, r0
    2524:	4608      	mov	r0, r1
    2526:	6023      	str	r3, [r4, #0]
    2528:	f7fe f9c8 	bl	8bc <_sbrk>
    252c:	1c43      	adds	r3, r0, #1
    252e:	d102      	bne.n	2536 <_sbrk_r+0x1a>
    2530:	6823      	ldr	r3, [r4, #0]
    2532:	b103      	cbz	r3, 2536 <_sbrk_r+0x1a>
    2534:	602b      	str	r3, [r5, #0]
    2536:	bd38      	pop	{r3, r4, r5, pc}
    2538:	20000570 	.word	0x20000570

0000253c <iscanf>:
    253c:	b40f      	push	{r0, r1, r2, r3}
    253e:	4b0a      	ldr	r3, [pc, #40]	; (2568 <iscanf+0x2c>)
    2540:	b513      	push	{r0, r1, r4, lr}
    2542:	681c      	ldr	r4, [r3, #0]
    2544:	b124      	cbz	r4, 2550 <iscanf+0x14>
    2546:	69a3      	ldr	r3, [r4, #24]
    2548:	b913      	cbnz	r3, 2550 <iscanf+0x14>
    254a:	4620      	mov	r0, r4
    254c:	f7ff fdec 	bl	2128 <__sinit>
    2550:	ab05      	add	r3, sp, #20
    2552:	9a04      	ldr	r2, [sp, #16]
    2554:	6861      	ldr	r1, [r4, #4]
    2556:	9301      	str	r3, [sp, #4]
    2558:	4620      	mov	r0, r4
    255a:	f000 fe8b 	bl	3274 <_vfiscanf_r>
    255e:	b002      	add	sp, #8
    2560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2564:	b004      	add	sp, #16
    2566:	4770      	bx	lr
    2568:	20000278 	.word	0x20000278

0000256c <setbuf>:
    256c:	2900      	cmp	r1, #0
    256e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2572:	bf0c      	ite	eq
    2574:	2202      	moveq	r2, #2
    2576:	2200      	movne	r2, #0
    2578:	f000 b800 	b.w	257c <setvbuf>

0000257c <setvbuf>:
    257c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2580:	461d      	mov	r5, r3
    2582:	4b51      	ldr	r3, [pc, #324]	; (26c8 <setvbuf+0x14c>)
    2584:	681e      	ldr	r6, [r3, #0]
    2586:	4604      	mov	r4, r0
    2588:	460f      	mov	r7, r1
    258a:	4690      	mov	r8, r2
    258c:	b126      	cbz	r6, 2598 <setvbuf+0x1c>
    258e:	69b3      	ldr	r3, [r6, #24]
    2590:	b913      	cbnz	r3, 2598 <setvbuf+0x1c>
    2592:	4630      	mov	r0, r6
    2594:	f7ff fdc8 	bl	2128 <__sinit>
    2598:	4b4c      	ldr	r3, [pc, #304]	; (26cc <setvbuf+0x150>)
    259a:	429c      	cmp	r4, r3
    259c:	d152      	bne.n	2644 <setvbuf+0xc8>
    259e:	6874      	ldr	r4, [r6, #4]
    25a0:	f1b8 0f02 	cmp.w	r8, #2
    25a4:	d006      	beq.n	25b4 <setvbuf+0x38>
    25a6:	f1b8 0f01 	cmp.w	r8, #1
    25aa:	f200 8089 	bhi.w	26c0 <setvbuf+0x144>
    25ae:	2d00      	cmp	r5, #0
    25b0:	f2c0 8086 	blt.w	26c0 <setvbuf+0x144>
    25b4:	4621      	mov	r1, r4
    25b6:	4630      	mov	r0, r6
    25b8:	f7ff fd3a 	bl	2030 <_fflush_r>
    25bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    25be:	b141      	cbz	r1, 25d2 <setvbuf+0x56>
    25c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    25c4:	4299      	cmp	r1, r3
    25c6:	d002      	beq.n	25ce <setvbuf+0x52>
    25c8:	4630      	mov	r0, r6
    25ca:	f7ff fe7f 	bl	22cc <_free_r>
    25ce:	2300      	movs	r3, #0
    25d0:	6363      	str	r3, [r4, #52]	; 0x34
    25d2:	2300      	movs	r3, #0
    25d4:	61a3      	str	r3, [r4, #24]
    25d6:	6063      	str	r3, [r4, #4]
    25d8:	89a3      	ldrh	r3, [r4, #12]
    25da:	061b      	lsls	r3, r3, #24
    25dc:	d503      	bpl.n	25e6 <setvbuf+0x6a>
    25de:	6921      	ldr	r1, [r4, #16]
    25e0:	4630      	mov	r0, r6
    25e2:	f7ff fe73 	bl	22cc <_free_r>
    25e6:	89a3      	ldrh	r3, [r4, #12]
    25e8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    25ec:	f023 0303 	bic.w	r3, r3, #3
    25f0:	f1b8 0f02 	cmp.w	r8, #2
    25f4:	81a3      	strh	r3, [r4, #12]
    25f6:	d05d      	beq.n	26b4 <setvbuf+0x138>
    25f8:	ab01      	add	r3, sp, #4
    25fa:	466a      	mov	r2, sp
    25fc:	4621      	mov	r1, r4
    25fe:	4630      	mov	r0, r6
    2600:	f000 f9a2 	bl	2948 <__swhatbuf_r>
    2604:	89a3      	ldrh	r3, [r4, #12]
    2606:	4318      	orrs	r0, r3
    2608:	81a0      	strh	r0, [r4, #12]
    260a:	bb2d      	cbnz	r5, 2658 <setvbuf+0xdc>
    260c:	9d00      	ldr	r5, [sp, #0]
    260e:	4628      	mov	r0, r5
    2610:	f000 f9fe 	bl	2a10 <malloc>
    2614:	4607      	mov	r7, r0
    2616:	2800      	cmp	r0, #0
    2618:	d14e      	bne.n	26b8 <setvbuf+0x13c>
    261a:	f8dd 9000 	ldr.w	r9, [sp]
    261e:	45a9      	cmp	r9, r5
    2620:	d13c      	bne.n	269c <setvbuf+0x120>
    2622:	f04f 30ff 	mov.w	r0, #4294967295
    2626:	89a3      	ldrh	r3, [r4, #12]
    2628:	f043 0302 	orr.w	r3, r3, #2
    262c:	81a3      	strh	r3, [r4, #12]
    262e:	2300      	movs	r3, #0
    2630:	60a3      	str	r3, [r4, #8]
    2632:	f104 0347 	add.w	r3, r4, #71	; 0x47
    2636:	6023      	str	r3, [r4, #0]
    2638:	6123      	str	r3, [r4, #16]
    263a:	2301      	movs	r3, #1
    263c:	6163      	str	r3, [r4, #20]
    263e:	b003      	add	sp, #12
    2640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2644:	4b22      	ldr	r3, [pc, #136]	; (26d0 <setvbuf+0x154>)
    2646:	429c      	cmp	r4, r3
    2648:	d101      	bne.n	264e <setvbuf+0xd2>
    264a:	68b4      	ldr	r4, [r6, #8]
    264c:	e7a8      	b.n	25a0 <setvbuf+0x24>
    264e:	4b21      	ldr	r3, [pc, #132]	; (26d4 <setvbuf+0x158>)
    2650:	429c      	cmp	r4, r3
    2652:	bf08      	it	eq
    2654:	68f4      	ldreq	r4, [r6, #12]
    2656:	e7a3      	b.n	25a0 <setvbuf+0x24>
    2658:	2f00      	cmp	r7, #0
    265a:	d0d8      	beq.n	260e <setvbuf+0x92>
    265c:	69b3      	ldr	r3, [r6, #24]
    265e:	b913      	cbnz	r3, 2666 <setvbuf+0xea>
    2660:	4630      	mov	r0, r6
    2662:	f7ff fd61 	bl	2128 <__sinit>
    2666:	f1b8 0f01 	cmp.w	r8, #1
    266a:	bf08      	it	eq
    266c:	89a3      	ldrheq	r3, [r4, #12]
    266e:	6027      	str	r7, [r4, #0]
    2670:	bf04      	itt	eq
    2672:	f043 0301 	orreq.w	r3, r3, #1
    2676:	81a3      	strheq	r3, [r4, #12]
    2678:	89a3      	ldrh	r3, [r4, #12]
    267a:	6127      	str	r7, [r4, #16]
    267c:	f013 0008 	ands.w	r0, r3, #8
    2680:	6165      	str	r5, [r4, #20]
    2682:	d01b      	beq.n	26bc <setvbuf+0x140>
    2684:	f013 0001 	ands.w	r0, r3, #1
    2688:	bf18      	it	ne
    268a:	426d      	negne	r5, r5
    268c:	f04f 0300 	mov.w	r3, #0
    2690:	bf1d      	ittte	ne
    2692:	60a3      	strne	r3, [r4, #8]
    2694:	61a5      	strne	r5, [r4, #24]
    2696:	4618      	movne	r0, r3
    2698:	60a5      	streq	r5, [r4, #8]
    269a:	e7d0      	b.n	263e <setvbuf+0xc2>
    269c:	4648      	mov	r0, r9
    269e:	f000 f9b7 	bl	2a10 <malloc>
    26a2:	4607      	mov	r7, r0
    26a4:	2800      	cmp	r0, #0
    26a6:	d0bc      	beq.n	2622 <setvbuf+0xa6>
    26a8:	89a3      	ldrh	r3, [r4, #12]
    26aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    26ae:	81a3      	strh	r3, [r4, #12]
    26b0:	464d      	mov	r5, r9
    26b2:	e7d3      	b.n	265c <setvbuf+0xe0>
    26b4:	2000      	movs	r0, #0
    26b6:	e7b6      	b.n	2626 <setvbuf+0xaa>
    26b8:	46a9      	mov	r9, r5
    26ba:	e7f5      	b.n	26a8 <setvbuf+0x12c>
    26bc:	60a0      	str	r0, [r4, #8]
    26be:	e7be      	b.n	263e <setvbuf+0xc2>
    26c0:	f04f 30ff 	mov.w	r0, #4294967295
    26c4:	e7bb      	b.n	263e <setvbuf+0xc2>
    26c6:	bf00      	nop
    26c8:	20000278 	.word	0x20000278
    26cc:	00004230 	.word	0x00004230
    26d0:	00004250 	.word	0x00004250
    26d4:	00004210 	.word	0x00004210

000026d8 <__sread>:
    26d8:	b510      	push	{r4, lr}
    26da:	460c      	mov	r4, r1
    26dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    26e0:	f000 ff48 	bl	3574 <_read_r>
    26e4:	2800      	cmp	r0, #0
    26e6:	bfab      	itete	ge
    26e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    26ea:	89a3      	ldrhlt	r3, [r4, #12]
    26ec:	181b      	addge	r3, r3, r0
    26ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    26f2:	bfac      	ite	ge
    26f4:	6563      	strge	r3, [r4, #84]	; 0x54
    26f6:	81a3      	strhlt	r3, [r4, #12]
    26f8:	bd10      	pop	{r4, pc}

000026fa <__swrite>:
    26fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26fe:	461f      	mov	r7, r3
    2700:	898b      	ldrh	r3, [r1, #12]
    2702:	05db      	lsls	r3, r3, #23
    2704:	4605      	mov	r5, r0
    2706:	460c      	mov	r4, r1
    2708:	4616      	mov	r6, r2
    270a:	d505      	bpl.n	2718 <__swrite+0x1e>
    270c:	2302      	movs	r3, #2
    270e:	2200      	movs	r2, #0
    2710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2714:	f000 f906 	bl	2924 <_lseek_r>
    2718:	89a3      	ldrh	r3, [r4, #12]
    271a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    271e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2722:	81a3      	strh	r3, [r4, #12]
    2724:	4632      	mov	r2, r6
    2726:	463b      	mov	r3, r7
    2728:	4628      	mov	r0, r5
    272a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    272e:	f000 b869 	b.w	2804 <_write_r>

00002732 <__sseek>:
    2732:	b510      	push	{r4, lr}
    2734:	460c      	mov	r4, r1
    2736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    273a:	f000 f8f3 	bl	2924 <_lseek_r>
    273e:	1c43      	adds	r3, r0, #1
    2740:	89a3      	ldrh	r3, [r4, #12]
    2742:	bf15      	itete	ne
    2744:	6560      	strne	r0, [r4, #84]	; 0x54
    2746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    274a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    274e:	81a3      	strheq	r3, [r4, #12]
    2750:	bf18      	it	ne
    2752:	81a3      	strhne	r3, [r4, #12]
    2754:	bd10      	pop	{r4, pc}

00002756 <__sclose>:
    2756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    275a:	f000 b8d3 	b.w	2904 <_close_r>
	...

00002760 <__swbuf_r>:
    2760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2762:	460e      	mov	r6, r1
    2764:	4614      	mov	r4, r2
    2766:	4605      	mov	r5, r0
    2768:	b118      	cbz	r0, 2772 <__swbuf_r+0x12>
    276a:	6983      	ldr	r3, [r0, #24]
    276c:	b90b      	cbnz	r3, 2772 <__swbuf_r+0x12>
    276e:	f7ff fcdb 	bl	2128 <__sinit>
    2772:	4b21      	ldr	r3, [pc, #132]	; (27f8 <__swbuf_r+0x98>)
    2774:	429c      	cmp	r4, r3
    2776:	d12a      	bne.n	27ce <__swbuf_r+0x6e>
    2778:	686c      	ldr	r4, [r5, #4]
    277a:	69a3      	ldr	r3, [r4, #24]
    277c:	60a3      	str	r3, [r4, #8]
    277e:	89a3      	ldrh	r3, [r4, #12]
    2780:	071a      	lsls	r2, r3, #28
    2782:	d52e      	bpl.n	27e2 <__swbuf_r+0x82>
    2784:	6923      	ldr	r3, [r4, #16]
    2786:	b363      	cbz	r3, 27e2 <__swbuf_r+0x82>
    2788:	6923      	ldr	r3, [r4, #16]
    278a:	6820      	ldr	r0, [r4, #0]
    278c:	1ac0      	subs	r0, r0, r3
    278e:	6963      	ldr	r3, [r4, #20]
    2790:	b2f6      	uxtb	r6, r6
    2792:	4298      	cmp	r0, r3
    2794:	4637      	mov	r7, r6
    2796:	db04      	blt.n	27a2 <__swbuf_r+0x42>
    2798:	4621      	mov	r1, r4
    279a:	4628      	mov	r0, r5
    279c:	f7ff fc48 	bl	2030 <_fflush_r>
    27a0:	bb28      	cbnz	r0, 27ee <__swbuf_r+0x8e>
    27a2:	68a3      	ldr	r3, [r4, #8]
    27a4:	3b01      	subs	r3, #1
    27a6:	60a3      	str	r3, [r4, #8]
    27a8:	6823      	ldr	r3, [r4, #0]
    27aa:	1c5a      	adds	r2, r3, #1
    27ac:	6022      	str	r2, [r4, #0]
    27ae:	701e      	strb	r6, [r3, #0]
    27b0:	6963      	ldr	r3, [r4, #20]
    27b2:	3001      	adds	r0, #1
    27b4:	4298      	cmp	r0, r3
    27b6:	d004      	beq.n	27c2 <__swbuf_r+0x62>
    27b8:	89a3      	ldrh	r3, [r4, #12]
    27ba:	07db      	lsls	r3, r3, #31
    27bc:	d519      	bpl.n	27f2 <__swbuf_r+0x92>
    27be:	2e0a      	cmp	r6, #10
    27c0:	d117      	bne.n	27f2 <__swbuf_r+0x92>
    27c2:	4621      	mov	r1, r4
    27c4:	4628      	mov	r0, r5
    27c6:	f7ff fc33 	bl	2030 <_fflush_r>
    27ca:	b190      	cbz	r0, 27f2 <__swbuf_r+0x92>
    27cc:	e00f      	b.n	27ee <__swbuf_r+0x8e>
    27ce:	4b0b      	ldr	r3, [pc, #44]	; (27fc <__swbuf_r+0x9c>)
    27d0:	429c      	cmp	r4, r3
    27d2:	d101      	bne.n	27d8 <__swbuf_r+0x78>
    27d4:	68ac      	ldr	r4, [r5, #8]
    27d6:	e7d0      	b.n	277a <__swbuf_r+0x1a>
    27d8:	4b09      	ldr	r3, [pc, #36]	; (2800 <__swbuf_r+0xa0>)
    27da:	429c      	cmp	r4, r3
    27dc:	bf08      	it	eq
    27de:	68ec      	ldreq	r4, [r5, #12]
    27e0:	e7cb      	b.n	277a <__swbuf_r+0x1a>
    27e2:	4621      	mov	r1, r4
    27e4:	4628      	mov	r0, r5
    27e6:	f000 f81f 	bl	2828 <__swsetup_r>
    27ea:	2800      	cmp	r0, #0
    27ec:	d0cc      	beq.n	2788 <__swbuf_r+0x28>
    27ee:	f04f 37ff 	mov.w	r7, #4294967295
    27f2:	4638      	mov	r0, r7
    27f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27f6:	bf00      	nop
    27f8:	00004230 	.word	0x00004230
    27fc:	00004250 	.word	0x00004250
    2800:	00004210 	.word	0x00004210

00002804 <_write_r>:
    2804:	b538      	push	{r3, r4, r5, lr}
    2806:	4c07      	ldr	r4, [pc, #28]	; (2824 <_write_r+0x20>)
    2808:	4605      	mov	r5, r0
    280a:	4608      	mov	r0, r1
    280c:	4611      	mov	r1, r2
    280e:	2200      	movs	r2, #0
    2810:	6022      	str	r2, [r4, #0]
    2812:	461a      	mov	r2, r3
    2814:	f7fe ff3e 	bl	1694 <_write>
    2818:	1c43      	adds	r3, r0, #1
    281a:	d102      	bne.n	2822 <_write_r+0x1e>
    281c:	6823      	ldr	r3, [r4, #0]
    281e:	b103      	cbz	r3, 2822 <_write_r+0x1e>
    2820:	602b      	str	r3, [r5, #0]
    2822:	bd38      	pop	{r3, r4, r5, pc}
    2824:	20000570 	.word	0x20000570

00002828 <__swsetup_r>:
    2828:	4b32      	ldr	r3, [pc, #200]	; (28f4 <__swsetup_r+0xcc>)
    282a:	b570      	push	{r4, r5, r6, lr}
    282c:	681d      	ldr	r5, [r3, #0]
    282e:	4606      	mov	r6, r0
    2830:	460c      	mov	r4, r1
    2832:	b125      	cbz	r5, 283e <__swsetup_r+0x16>
    2834:	69ab      	ldr	r3, [r5, #24]
    2836:	b913      	cbnz	r3, 283e <__swsetup_r+0x16>
    2838:	4628      	mov	r0, r5
    283a:	f7ff fc75 	bl	2128 <__sinit>
    283e:	4b2e      	ldr	r3, [pc, #184]	; (28f8 <__swsetup_r+0xd0>)
    2840:	429c      	cmp	r4, r3
    2842:	d10f      	bne.n	2864 <__swsetup_r+0x3c>
    2844:	686c      	ldr	r4, [r5, #4]
    2846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    284a:	b29a      	uxth	r2, r3
    284c:	0715      	lsls	r5, r2, #28
    284e:	d42c      	bmi.n	28aa <__swsetup_r+0x82>
    2850:	06d0      	lsls	r0, r2, #27
    2852:	d411      	bmi.n	2878 <__swsetup_r+0x50>
    2854:	2209      	movs	r2, #9
    2856:	6032      	str	r2, [r6, #0]
    2858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    285c:	81a3      	strh	r3, [r4, #12]
    285e:	f04f 30ff 	mov.w	r0, #4294967295
    2862:	bd70      	pop	{r4, r5, r6, pc}
    2864:	4b25      	ldr	r3, [pc, #148]	; (28fc <__swsetup_r+0xd4>)
    2866:	429c      	cmp	r4, r3
    2868:	d101      	bne.n	286e <__swsetup_r+0x46>
    286a:	68ac      	ldr	r4, [r5, #8]
    286c:	e7eb      	b.n	2846 <__swsetup_r+0x1e>
    286e:	4b24      	ldr	r3, [pc, #144]	; (2900 <__swsetup_r+0xd8>)
    2870:	429c      	cmp	r4, r3
    2872:	bf08      	it	eq
    2874:	68ec      	ldreq	r4, [r5, #12]
    2876:	e7e6      	b.n	2846 <__swsetup_r+0x1e>
    2878:	0751      	lsls	r1, r2, #29
    287a:	d512      	bpl.n	28a2 <__swsetup_r+0x7a>
    287c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    287e:	b141      	cbz	r1, 2892 <__swsetup_r+0x6a>
    2880:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2884:	4299      	cmp	r1, r3
    2886:	d002      	beq.n	288e <__swsetup_r+0x66>
    2888:	4630      	mov	r0, r6
    288a:	f7ff fd1f 	bl	22cc <_free_r>
    288e:	2300      	movs	r3, #0
    2890:	6363      	str	r3, [r4, #52]	; 0x34
    2892:	89a3      	ldrh	r3, [r4, #12]
    2894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    2898:	81a3      	strh	r3, [r4, #12]
    289a:	2300      	movs	r3, #0
    289c:	6063      	str	r3, [r4, #4]
    289e:	6923      	ldr	r3, [r4, #16]
    28a0:	6023      	str	r3, [r4, #0]
    28a2:	89a3      	ldrh	r3, [r4, #12]
    28a4:	f043 0308 	orr.w	r3, r3, #8
    28a8:	81a3      	strh	r3, [r4, #12]
    28aa:	6923      	ldr	r3, [r4, #16]
    28ac:	b94b      	cbnz	r3, 28c2 <__swsetup_r+0x9a>
    28ae:	89a3      	ldrh	r3, [r4, #12]
    28b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    28b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    28b8:	d003      	beq.n	28c2 <__swsetup_r+0x9a>
    28ba:	4621      	mov	r1, r4
    28bc:	4630      	mov	r0, r6
    28be:	f000 f867 	bl	2990 <__smakebuf_r>
    28c2:	89a2      	ldrh	r2, [r4, #12]
    28c4:	f012 0301 	ands.w	r3, r2, #1
    28c8:	d00c      	beq.n	28e4 <__swsetup_r+0xbc>
    28ca:	2300      	movs	r3, #0
    28cc:	60a3      	str	r3, [r4, #8]
    28ce:	6963      	ldr	r3, [r4, #20]
    28d0:	425b      	negs	r3, r3
    28d2:	61a3      	str	r3, [r4, #24]
    28d4:	6923      	ldr	r3, [r4, #16]
    28d6:	b953      	cbnz	r3, 28ee <__swsetup_r+0xc6>
    28d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    28dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    28e0:	d1ba      	bne.n	2858 <__swsetup_r+0x30>
    28e2:	bd70      	pop	{r4, r5, r6, pc}
    28e4:	0792      	lsls	r2, r2, #30
    28e6:	bf58      	it	pl
    28e8:	6963      	ldrpl	r3, [r4, #20]
    28ea:	60a3      	str	r3, [r4, #8]
    28ec:	e7f2      	b.n	28d4 <__swsetup_r+0xac>
    28ee:	2000      	movs	r0, #0
    28f0:	e7f7      	b.n	28e2 <__swsetup_r+0xba>
    28f2:	bf00      	nop
    28f4:	20000278 	.word	0x20000278
    28f8:	00004230 	.word	0x00004230
    28fc:	00004250 	.word	0x00004250
    2900:	00004210 	.word	0x00004210

00002904 <_close_r>:
    2904:	b538      	push	{r3, r4, r5, lr}
    2906:	4c06      	ldr	r4, [pc, #24]	; (2920 <_close_r+0x1c>)
    2908:	2300      	movs	r3, #0
    290a:	4605      	mov	r5, r0
    290c:	4608      	mov	r0, r1
    290e:	6023      	str	r3, [r4, #0]
    2910:	f7fd ffe6 	bl	8e0 <_close>
    2914:	1c43      	adds	r3, r0, #1
    2916:	d102      	bne.n	291e <_close_r+0x1a>
    2918:	6823      	ldr	r3, [r4, #0]
    291a:	b103      	cbz	r3, 291e <_close_r+0x1a>
    291c:	602b      	str	r3, [r5, #0]
    291e:	bd38      	pop	{r3, r4, r5, pc}
    2920:	20000570 	.word	0x20000570

00002924 <_lseek_r>:
    2924:	b538      	push	{r3, r4, r5, lr}
    2926:	4c07      	ldr	r4, [pc, #28]	; (2944 <_lseek_r+0x20>)
    2928:	4605      	mov	r5, r0
    292a:	4608      	mov	r0, r1
    292c:	4611      	mov	r1, r2
    292e:	2200      	movs	r2, #0
    2930:	6022      	str	r2, [r4, #0]
    2932:	461a      	mov	r2, r3
    2934:	f7fd ffde 	bl	8f4 <_lseek>
    2938:	1c43      	adds	r3, r0, #1
    293a:	d102      	bne.n	2942 <_lseek_r+0x1e>
    293c:	6823      	ldr	r3, [r4, #0]
    293e:	b103      	cbz	r3, 2942 <_lseek_r+0x1e>
    2940:	602b      	str	r3, [r5, #0]
    2942:	bd38      	pop	{r3, r4, r5, pc}
    2944:	20000570 	.word	0x20000570

00002948 <__swhatbuf_r>:
    2948:	b570      	push	{r4, r5, r6, lr}
    294a:	460e      	mov	r6, r1
    294c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2950:	2900      	cmp	r1, #0
    2952:	b090      	sub	sp, #64	; 0x40
    2954:	4614      	mov	r4, r2
    2956:	461d      	mov	r5, r3
    2958:	da07      	bge.n	296a <__swhatbuf_r+0x22>
    295a:	2300      	movs	r3, #0
    295c:	602b      	str	r3, [r5, #0]
    295e:	89b3      	ldrh	r3, [r6, #12]
    2960:	061a      	lsls	r2, r3, #24
    2962:	d410      	bmi.n	2986 <__swhatbuf_r+0x3e>
    2964:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2968:	e00e      	b.n	2988 <__swhatbuf_r+0x40>
    296a:	aa01      	add	r2, sp, #4
    296c:	f001 f8a8 	bl	3ac0 <_fstat_r>
    2970:	2800      	cmp	r0, #0
    2972:	dbf2      	blt.n	295a <__swhatbuf_r+0x12>
    2974:	9a02      	ldr	r2, [sp, #8]
    2976:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    297a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    297e:	425a      	negs	r2, r3
    2980:	415a      	adcs	r2, r3
    2982:	602a      	str	r2, [r5, #0]
    2984:	e7ee      	b.n	2964 <__swhatbuf_r+0x1c>
    2986:	2340      	movs	r3, #64	; 0x40
    2988:	2000      	movs	r0, #0
    298a:	6023      	str	r3, [r4, #0]
    298c:	b010      	add	sp, #64	; 0x40
    298e:	bd70      	pop	{r4, r5, r6, pc}

00002990 <__smakebuf_r>:
    2990:	898b      	ldrh	r3, [r1, #12]
    2992:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2994:	079d      	lsls	r5, r3, #30
    2996:	4606      	mov	r6, r0
    2998:	460c      	mov	r4, r1
    299a:	d507      	bpl.n	29ac <__smakebuf_r+0x1c>
    299c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    29a0:	6023      	str	r3, [r4, #0]
    29a2:	6123      	str	r3, [r4, #16]
    29a4:	2301      	movs	r3, #1
    29a6:	6163      	str	r3, [r4, #20]
    29a8:	b002      	add	sp, #8
    29aa:	bd70      	pop	{r4, r5, r6, pc}
    29ac:	ab01      	add	r3, sp, #4
    29ae:	466a      	mov	r2, sp
    29b0:	f7ff ffca 	bl	2948 <__swhatbuf_r>
    29b4:	9900      	ldr	r1, [sp, #0]
    29b6:	4605      	mov	r5, r0
    29b8:	4630      	mov	r0, r6
    29ba:	f7ff fcd5 	bl	2368 <_malloc_r>
    29be:	b948      	cbnz	r0, 29d4 <__smakebuf_r+0x44>
    29c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    29c4:	059a      	lsls	r2, r3, #22
    29c6:	d4ef      	bmi.n	29a8 <__smakebuf_r+0x18>
    29c8:	f023 0303 	bic.w	r3, r3, #3
    29cc:	f043 0302 	orr.w	r3, r3, #2
    29d0:	81a3      	strh	r3, [r4, #12]
    29d2:	e7e3      	b.n	299c <__smakebuf_r+0xc>
    29d4:	4b0d      	ldr	r3, [pc, #52]	; (2a0c <__smakebuf_r+0x7c>)
    29d6:	62b3      	str	r3, [r6, #40]	; 0x28
    29d8:	89a3      	ldrh	r3, [r4, #12]
    29da:	6020      	str	r0, [r4, #0]
    29dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    29e0:	81a3      	strh	r3, [r4, #12]
    29e2:	9b00      	ldr	r3, [sp, #0]
    29e4:	6163      	str	r3, [r4, #20]
    29e6:	9b01      	ldr	r3, [sp, #4]
    29e8:	6120      	str	r0, [r4, #16]
    29ea:	b15b      	cbz	r3, 2a04 <__smakebuf_r+0x74>
    29ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    29f0:	4630      	mov	r0, r6
    29f2:	f001 f877 	bl	3ae4 <_isatty_r>
    29f6:	b128      	cbz	r0, 2a04 <__smakebuf_r+0x74>
    29f8:	89a3      	ldrh	r3, [r4, #12]
    29fa:	f023 0303 	bic.w	r3, r3, #3
    29fe:	f043 0301 	orr.w	r3, r3, #1
    2a02:	81a3      	strh	r3, [r4, #12]
    2a04:	89a3      	ldrh	r3, [r4, #12]
    2a06:	431d      	orrs	r5, r3
    2a08:	81a5      	strh	r5, [r4, #12]
    2a0a:	e7cd      	b.n	29a8 <__smakebuf_r+0x18>
    2a0c:	000020a9 	.word	0x000020a9

00002a10 <malloc>:
    2a10:	4b02      	ldr	r3, [pc, #8]	; (2a1c <malloc+0xc>)
    2a12:	4601      	mov	r1, r0
    2a14:	6818      	ldr	r0, [r3, #0]
    2a16:	f7ff bca7 	b.w	2368 <_malloc_r>
    2a1a:	bf00      	nop
    2a1c:	20000278 	.word	0x20000278

00002a20 <__malloc_lock>:
    2a20:	4770      	bx	lr

00002a22 <__malloc_unlock>:
    2a22:	4770      	bx	lr

00002a24 <__sfputc_r>:
    2a24:	6893      	ldr	r3, [r2, #8]
    2a26:	3b01      	subs	r3, #1
    2a28:	2b00      	cmp	r3, #0
    2a2a:	b410      	push	{r4}
    2a2c:	6093      	str	r3, [r2, #8]
    2a2e:	da08      	bge.n	2a42 <__sfputc_r+0x1e>
    2a30:	6994      	ldr	r4, [r2, #24]
    2a32:	42a3      	cmp	r3, r4
    2a34:	db02      	blt.n	2a3c <__sfputc_r+0x18>
    2a36:	b2cb      	uxtb	r3, r1
    2a38:	2b0a      	cmp	r3, #10
    2a3a:	d102      	bne.n	2a42 <__sfputc_r+0x1e>
    2a3c:	bc10      	pop	{r4}
    2a3e:	f7ff be8f 	b.w	2760 <__swbuf_r>
    2a42:	6813      	ldr	r3, [r2, #0]
    2a44:	1c58      	adds	r0, r3, #1
    2a46:	6010      	str	r0, [r2, #0]
    2a48:	7019      	strb	r1, [r3, #0]
    2a4a:	b2c8      	uxtb	r0, r1
    2a4c:	bc10      	pop	{r4}
    2a4e:	4770      	bx	lr

00002a50 <__sfputs_r>:
    2a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a52:	4606      	mov	r6, r0
    2a54:	460f      	mov	r7, r1
    2a56:	4614      	mov	r4, r2
    2a58:	18d5      	adds	r5, r2, r3
    2a5a:	42ac      	cmp	r4, r5
    2a5c:	d101      	bne.n	2a62 <__sfputs_r+0x12>
    2a5e:	2000      	movs	r0, #0
    2a60:	e007      	b.n	2a72 <__sfputs_r+0x22>
    2a62:	463a      	mov	r2, r7
    2a64:	f814 1b01 	ldrb.w	r1, [r4], #1
    2a68:	4630      	mov	r0, r6
    2a6a:	f7ff ffdb 	bl	2a24 <__sfputc_r>
    2a6e:	1c43      	adds	r3, r0, #1
    2a70:	d1f3      	bne.n	2a5a <__sfputs_r+0xa>
    2a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002a74 <_vfiprintf_r>:
    2a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a78:	b09d      	sub	sp, #116	; 0x74
    2a7a:	460c      	mov	r4, r1
    2a7c:	4617      	mov	r7, r2
    2a7e:	9303      	str	r3, [sp, #12]
    2a80:	4606      	mov	r6, r0
    2a82:	b118      	cbz	r0, 2a8c <_vfiprintf_r+0x18>
    2a84:	6983      	ldr	r3, [r0, #24]
    2a86:	b90b      	cbnz	r3, 2a8c <_vfiprintf_r+0x18>
    2a88:	f7ff fb4e 	bl	2128 <__sinit>
    2a8c:	4b7c      	ldr	r3, [pc, #496]	; (2c80 <_vfiprintf_r+0x20c>)
    2a8e:	429c      	cmp	r4, r3
    2a90:	d157      	bne.n	2b42 <_vfiprintf_r+0xce>
    2a92:	6874      	ldr	r4, [r6, #4]
    2a94:	89a3      	ldrh	r3, [r4, #12]
    2a96:	0718      	lsls	r0, r3, #28
    2a98:	d55d      	bpl.n	2b56 <_vfiprintf_r+0xe2>
    2a9a:	6923      	ldr	r3, [r4, #16]
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d05a      	beq.n	2b56 <_vfiprintf_r+0xe2>
    2aa0:	2300      	movs	r3, #0
    2aa2:	9309      	str	r3, [sp, #36]	; 0x24
    2aa4:	2320      	movs	r3, #32
    2aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2aaa:	2330      	movs	r3, #48	; 0x30
    2aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2ab0:	f04f 0b01 	mov.w	fp, #1
    2ab4:	46b8      	mov	r8, r7
    2ab6:	4645      	mov	r5, r8
    2ab8:	f815 3b01 	ldrb.w	r3, [r5], #1
    2abc:	2b00      	cmp	r3, #0
    2abe:	d155      	bne.n	2b6c <_vfiprintf_r+0xf8>
    2ac0:	ebb8 0a07 	subs.w	sl, r8, r7
    2ac4:	d00b      	beq.n	2ade <_vfiprintf_r+0x6a>
    2ac6:	4653      	mov	r3, sl
    2ac8:	463a      	mov	r2, r7
    2aca:	4621      	mov	r1, r4
    2acc:	4630      	mov	r0, r6
    2ace:	f7ff ffbf 	bl	2a50 <__sfputs_r>
    2ad2:	3001      	adds	r0, #1
    2ad4:	f000 80c4 	beq.w	2c60 <_vfiprintf_r+0x1ec>
    2ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ada:	4453      	add	r3, sl
    2adc:	9309      	str	r3, [sp, #36]	; 0x24
    2ade:	f898 3000 	ldrb.w	r3, [r8]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	f000 80bc 	beq.w	2c60 <_vfiprintf_r+0x1ec>
    2ae8:	2300      	movs	r3, #0
    2aea:	f04f 32ff 	mov.w	r2, #4294967295
    2aee:	9304      	str	r3, [sp, #16]
    2af0:	9307      	str	r3, [sp, #28]
    2af2:	9205      	str	r2, [sp, #20]
    2af4:	9306      	str	r3, [sp, #24]
    2af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2afa:	931a      	str	r3, [sp, #104]	; 0x68
    2afc:	2205      	movs	r2, #5
    2afe:	7829      	ldrb	r1, [r5, #0]
    2b00:	4860      	ldr	r0, [pc, #384]	; (2c84 <_vfiprintf_r+0x210>)
    2b02:	f001 f825 	bl	3b50 <memchr>
    2b06:	f105 0801 	add.w	r8, r5, #1
    2b0a:	9b04      	ldr	r3, [sp, #16]
    2b0c:	2800      	cmp	r0, #0
    2b0e:	d131      	bne.n	2b74 <_vfiprintf_r+0x100>
    2b10:	06d9      	lsls	r1, r3, #27
    2b12:	bf44      	itt	mi
    2b14:	2220      	movmi	r2, #32
    2b16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2b1a:	071a      	lsls	r2, r3, #28
    2b1c:	bf44      	itt	mi
    2b1e:	222b      	movmi	r2, #43	; 0x2b
    2b20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2b24:	782a      	ldrb	r2, [r5, #0]
    2b26:	2a2a      	cmp	r2, #42	; 0x2a
    2b28:	d02c      	beq.n	2b84 <_vfiprintf_r+0x110>
    2b2a:	9a07      	ldr	r2, [sp, #28]
    2b2c:	2100      	movs	r1, #0
    2b2e:	200a      	movs	r0, #10
    2b30:	46a8      	mov	r8, r5
    2b32:	3501      	adds	r5, #1
    2b34:	f898 3000 	ldrb.w	r3, [r8]
    2b38:	3b30      	subs	r3, #48	; 0x30
    2b3a:	2b09      	cmp	r3, #9
    2b3c:	d96d      	bls.n	2c1a <_vfiprintf_r+0x1a6>
    2b3e:	b371      	cbz	r1, 2b9e <_vfiprintf_r+0x12a>
    2b40:	e026      	b.n	2b90 <_vfiprintf_r+0x11c>
    2b42:	4b51      	ldr	r3, [pc, #324]	; (2c88 <_vfiprintf_r+0x214>)
    2b44:	429c      	cmp	r4, r3
    2b46:	d101      	bne.n	2b4c <_vfiprintf_r+0xd8>
    2b48:	68b4      	ldr	r4, [r6, #8]
    2b4a:	e7a3      	b.n	2a94 <_vfiprintf_r+0x20>
    2b4c:	4b4f      	ldr	r3, [pc, #316]	; (2c8c <_vfiprintf_r+0x218>)
    2b4e:	429c      	cmp	r4, r3
    2b50:	bf08      	it	eq
    2b52:	68f4      	ldreq	r4, [r6, #12]
    2b54:	e79e      	b.n	2a94 <_vfiprintf_r+0x20>
    2b56:	4621      	mov	r1, r4
    2b58:	4630      	mov	r0, r6
    2b5a:	f7ff fe65 	bl	2828 <__swsetup_r>
    2b5e:	2800      	cmp	r0, #0
    2b60:	d09e      	beq.n	2aa0 <_vfiprintf_r+0x2c>
    2b62:	f04f 30ff 	mov.w	r0, #4294967295
    2b66:	b01d      	add	sp, #116	; 0x74
    2b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b6c:	2b25      	cmp	r3, #37	; 0x25
    2b6e:	d0a7      	beq.n	2ac0 <_vfiprintf_r+0x4c>
    2b70:	46a8      	mov	r8, r5
    2b72:	e7a0      	b.n	2ab6 <_vfiprintf_r+0x42>
    2b74:	4a43      	ldr	r2, [pc, #268]	; (2c84 <_vfiprintf_r+0x210>)
    2b76:	1a80      	subs	r0, r0, r2
    2b78:	fa0b f000 	lsl.w	r0, fp, r0
    2b7c:	4318      	orrs	r0, r3
    2b7e:	9004      	str	r0, [sp, #16]
    2b80:	4645      	mov	r5, r8
    2b82:	e7bb      	b.n	2afc <_vfiprintf_r+0x88>
    2b84:	9a03      	ldr	r2, [sp, #12]
    2b86:	1d11      	adds	r1, r2, #4
    2b88:	6812      	ldr	r2, [r2, #0]
    2b8a:	9103      	str	r1, [sp, #12]
    2b8c:	2a00      	cmp	r2, #0
    2b8e:	db01      	blt.n	2b94 <_vfiprintf_r+0x120>
    2b90:	9207      	str	r2, [sp, #28]
    2b92:	e004      	b.n	2b9e <_vfiprintf_r+0x12a>
    2b94:	4252      	negs	r2, r2
    2b96:	f043 0302 	orr.w	r3, r3, #2
    2b9a:	9207      	str	r2, [sp, #28]
    2b9c:	9304      	str	r3, [sp, #16]
    2b9e:	f898 3000 	ldrb.w	r3, [r8]
    2ba2:	2b2e      	cmp	r3, #46	; 0x2e
    2ba4:	d110      	bne.n	2bc8 <_vfiprintf_r+0x154>
    2ba6:	f898 3001 	ldrb.w	r3, [r8, #1]
    2baa:	2b2a      	cmp	r3, #42	; 0x2a
    2bac:	f108 0101 	add.w	r1, r8, #1
    2bb0:	d137      	bne.n	2c22 <_vfiprintf_r+0x1ae>
    2bb2:	9b03      	ldr	r3, [sp, #12]
    2bb4:	1d1a      	adds	r2, r3, #4
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	9203      	str	r2, [sp, #12]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	bfb8      	it	lt
    2bbe:	f04f 33ff 	movlt.w	r3, #4294967295
    2bc2:	f108 0802 	add.w	r8, r8, #2
    2bc6:	9305      	str	r3, [sp, #20]
    2bc8:	4d31      	ldr	r5, [pc, #196]	; (2c90 <_vfiprintf_r+0x21c>)
    2bca:	f898 1000 	ldrb.w	r1, [r8]
    2bce:	2203      	movs	r2, #3
    2bd0:	4628      	mov	r0, r5
    2bd2:	f000 ffbd 	bl	3b50 <memchr>
    2bd6:	b140      	cbz	r0, 2bea <_vfiprintf_r+0x176>
    2bd8:	2340      	movs	r3, #64	; 0x40
    2bda:	1b40      	subs	r0, r0, r5
    2bdc:	fa03 f000 	lsl.w	r0, r3, r0
    2be0:	9b04      	ldr	r3, [sp, #16]
    2be2:	4303      	orrs	r3, r0
    2be4:	9304      	str	r3, [sp, #16]
    2be6:	f108 0801 	add.w	r8, r8, #1
    2bea:	f898 1000 	ldrb.w	r1, [r8]
    2bee:	4829      	ldr	r0, [pc, #164]	; (2c94 <_vfiprintf_r+0x220>)
    2bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2bf4:	2206      	movs	r2, #6
    2bf6:	f108 0701 	add.w	r7, r8, #1
    2bfa:	f000 ffa9 	bl	3b50 <memchr>
    2bfe:	2800      	cmp	r0, #0
    2c00:	d034      	beq.n	2c6c <_vfiprintf_r+0x1f8>
    2c02:	4b25      	ldr	r3, [pc, #148]	; (2c98 <_vfiprintf_r+0x224>)
    2c04:	bb03      	cbnz	r3, 2c48 <_vfiprintf_r+0x1d4>
    2c06:	9b03      	ldr	r3, [sp, #12]
    2c08:	3307      	adds	r3, #7
    2c0a:	f023 0307 	bic.w	r3, r3, #7
    2c0e:	3308      	adds	r3, #8
    2c10:	9303      	str	r3, [sp, #12]
    2c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c14:	444b      	add	r3, r9
    2c16:	9309      	str	r3, [sp, #36]	; 0x24
    2c18:	e74c      	b.n	2ab4 <_vfiprintf_r+0x40>
    2c1a:	fb00 3202 	mla	r2, r0, r2, r3
    2c1e:	2101      	movs	r1, #1
    2c20:	e786      	b.n	2b30 <_vfiprintf_r+0xbc>
    2c22:	2300      	movs	r3, #0
    2c24:	9305      	str	r3, [sp, #20]
    2c26:	4618      	mov	r0, r3
    2c28:	250a      	movs	r5, #10
    2c2a:	4688      	mov	r8, r1
    2c2c:	3101      	adds	r1, #1
    2c2e:	f898 2000 	ldrb.w	r2, [r8]
    2c32:	3a30      	subs	r2, #48	; 0x30
    2c34:	2a09      	cmp	r2, #9
    2c36:	d903      	bls.n	2c40 <_vfiprintf_r+0x1cc>
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d0c5      	beq.n	2bc8 <_vfiprintf_r+0x154>
    2c3c:	9005      	str	r0, [sp, #20]
    2c3e:	e7c3      	b.n	2bc8 <_vfiprintf_r+0x154>
    2c40:	fb05 2000 	mla	r0, r5, r0, r2
    2c44:	2301      	movs	r3, #1
    2c46:	e7f0      	b.n	2c2a <_vfiprintf_r+0x1b6>
    2c48:	ab03      	add	r3, sp, #12
    2c4a:	9300      	str	r3, [sp, #0]
    2c4c:	4622      	mov	r2, r4
    2c4e:	4b13      	ldr	r3, [pc, #76]	; (2c9c <_vfiprintf_r+0x228>)
    2c50:	a904      	add	r1, sp, #16
    2c52:	4630      	mov	r0, r6
    2c54:	f3af 8000 	nop.w
    2c58:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c5c:	4681      	mov	r9, r0
    2c5e:	d1d8      	bne.n	2c12 <_vfiprintf_r+0x19e>
    2c60:	89a3      	ldrh	r3, [r4, #12]
    2c62:	065b      	lsls	r3, r3, #25
    2c64:	f53f af7d 	bmi.w	2b62 <_vfiprintf_r+0xee>
    2c68:	9809      	ldr	r0, [sp, #36]	; 0x24
    2c6a:	e77c      	b.n	2b66 <_vfiprintf_r+0xf2>
    2c6c:	ab03      	add	r3, sp, #12
    2c6e:	9300      	str	r3, [sp, #0]
    2c70:	4622      	mov	r2, r4
    2c72:	4b0a      	ldr	r3, [pc, #40]	; (2c9c <_vfiprintf_r+0x228>)
    2c74:	a904      	add	r1, sp, #16
    2c76:	4630      	mov	r0, r6
    2c78:	f000 f888 	bl	2d8c <_printf_i>
    2c7c:	e7ec      	b.n	2c58 <_vfiprintf_r+0x1e4>
    2c7e:	bf00      	nop
    2c80:	00004230 	.word	0x00004230
    2c84:	00004274 	.word	0x00004274
    2c88:	00004250 	.word	0x00004250
    2c8c:	00004210 	.word	0x00004210
    2c90:	0000427a 	.word	0x0000427a
    2c94:	0000427e 	.word	0x0000427e
    2c98:	00000000 	.word	0x00000000
    2c9c:	00002a51 	.word	0x00002a51

00002ca0 <_printf_common>:
    2ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ca4:	4691      	mov	r9, r2
    2ca6:	461f      	mov	r7, r3
    2ca8:	688a      	ldr	r2, [r1, #8]
    2caa:	690b      	ldr	r3, [r1, #16]
    2cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2cb0:	4293      	cmp	r3, r2
    2cb2:	bfb8      	it	lt
    2cb4:	4613      	movlt	r3, r2
    2cb6:	f8c9 3000 	str.w	r3, [r9]
    2cba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2cbe:	4606      	mov	r6, r0
    2cc0:	460c      	mov	r4, r1
    2cc2:	b112      	cbz	r2, 2cca <_printf_common+0x2a>
    2cc4:	3301      	adds	r3, #1
    2cc6:	f8c9 3000 	str.w	r3, [r9]
    2cca:	6823      	ldr	r3, [r4, #0]
    2ccc:	0699      	lsls	r1, r3, #26
    2cce:	bf42      	ittt	mi
    2cd0:	f8d9 3000 	ldrmi.w	r3, [r9]
    2cd4:	3302      	addmi	r3, #2
    2cd6:	f8c9 3000 	strmi.w	r3, [r9]
    2cda:	6825      	ldr	r5, [r4, #0]
    2cdc:	f015 0506 	ands.w	r5, r5, #6
    2ce0:	d107      	bne.n	2cf2 <_printf_common+0x52>
    2ce2:	f104 0a19 	add.w	sl, r4, #25
    2ce6:	68e3      	ldr	r3, [r4, #12]
    2ce8:	f8d9 2000 	ldr.w	r2, [r9]
    2cec:	1a9b      	subs	r3, r3, r2
    2cee:	429d      	cmp	r5, r3
    2cf0:	db29      	blt.n	2d46 <_printf_common+0xa6>
    2cf2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2cf6:	6822      	ldr	r2, [r4, #0]
    2cf8:	3300      	adds	r3, #0
    2cfa:	bf18      	it	ne
    2cfc:	2301      	movne	r3, #1
    2cfe:	0692      	lsls	r2, r2, #26
    2d00:	d42e      	bmi.n	2d60 <_printf_common+0xc0>
    2d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2d06:	4639      	mov	r1, r7
    2d08:	4630      	mov	r0, r6
    2d0a:	47c0      	blx	r8
    2d0c:	3001      	adds	r0, #1
    2d0e:	d021      	beq.n	2d54 <_printf_common+0xb4>
    2d10:	6823      	ldr	r3, [r4, #0]
    2d12:	68e5      	ldr	r5, [r4, #12]
    2d14:	f8d9 2000 	ldr.w	r2, [r9]
    2d18:	f003 0306 	and.w	r3, r3, #6
    2d1c:	2b04      	cmp	r3, #4
    2d1e:	bf08      	it	eq
    2d20:	1aad      	subeq	r5, r5, r2
    2d22:	68a3      	ldr	r3, [r4, #8]
    2d24:	6922      	ldr	r2, [r4, #16]
    2d26:	bf0c      	ite	eq
    2d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2d2c:	2500      	movne	r5, #0
    2d2e:	4293      	cmp	r3, r2
    2d30:	bfc4      	itt	gt
    2d32:	1a9b      	subgt	r3, r3, r2
    2d34:	18ed      	addgt	r5, r5, r3
    2d36:	f04f 0900 	mov.w	r9, #0
    2d3a:	341a      	adds	r4, #26
    2d3c:	454d      	cmp	r5, r9
    2d3e:	d11b      	bne.n	2d78 <_printf_common+0xd8>
    2d40:	2000      	movs	r0, #0
    2d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d46:	2301      	movs	r3, #1
    2d48:	4652      	mov	r2, sl
    2d4a:	4639      	mov	r1, r7
    2d4c:	4630      	mov	r0, r6
    2d4e:	47c0      	blx	r8
    2d50:	3001      	adds	r0, #1
    2d52:	d103      	bne.n	2d5c <_printf_common+0xbc>
    2d54:	f04f 30ff 	mov.w	r0, #4294967295
    2d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d5c:	3501      	adds	r5, #1
    2d5e:	e7c2      	b.n	2ce6 <_printf_common+0x46>
    2d60:	18e1      	adds	r1, r4, r3
    2d62:	1c5a      	adds	r2, r3, #1
    2d64:	2030      	movs	r0, #48	; 0x30
    2d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2d6a:	4422      	add	r2, r4
    2d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2d74:	3302      	adds	r3, #2
    2d76:	e7c4      	b.n	2d02 <_printf_common+0x62>
    2d78:	2301      	movs	r3, #1
    2d7a:	4622      	mov	r2, r4
    2d7c:	4639      	mov	r1, r7
    2d7e:	4630      	mov	r0, r6
    2d80:	47c0      	blx	r8
    2d82:	3001      	adds	r0, #1
    2d84:	d0e6      	beq.n	2d54 <_printf_common+0xb4>
    2d86:	f109 0901 	add.w	r9, r9, #1
    2d8a:	e7d7      	b.n	2d3c <_printf_common+0x9c>

00002d8c <_printf_i>:
    2d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d90:	4617      	mov	r7, r2
    2d92:	7e0a      	ldrb	r2, [r1, #24]
    2d94:	b085      	sub	sp, #20
    2d96:	2a6e      	cmp	r2, #110	; 0x6e
    2d98:	4698      	mov	r8, r3
    2d9a:	4606      	mov	r6, r0
    2d9c:	460c      	mov	r4, r1
    2d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2da0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    2da4:	f000 80bc 	beq.w	2f20 <_printf_i+0x194>
    2da8:	d81a      	bhi.n	2de0 <_printf_i+0x54>
    2daa:	2a63      	cmp	r2, #99	; 0x63
    2dac:	d02e      	beq.n	2e0c <_printf_i+0x80>
    2dae:	d80a      	bhi.n	2dc6 <_printf_i+0x3a>
    2db0:	2a00      	cmp	r2, #0
    2db2:	f000 80c8 	beq.w	2f46 <_printf_i+0x1ba>
    2db6:	2a58      	cmp	r2, #88	; 0x58
    2db8:	f000 808a 	beq.w	2ed0 <_printf_i+0x144>
    2dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2dc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    2dc4:	e02a      	b.n	2e1c <_printf_i+0x90>
    2dc6:	2a64      	cmp	r2, #100	; 0x64
    2dc8:	d001      	beq.n	2dce <_printf_i+0x42>
    2dca:	2a69      	cmp	r2, #105	; 0x69
    2dcc:	d1f6      	bne.n	2dbc <_printf_i+0x30>
    2dce:	6821      	ldr	r1, [r4, #0]
    2dd0:	681a      	ldr	r2, [r3, #0]
    2dd2:	f011 0f80 	tst.w	r1, #128	; 0x80
    2dd6:	d023      	beq.n	2e20 <_printf_i+0x94>
    2dd8:	1d11      	adds	r1, r2, #4
    2dda:	6019      	str	r1, [r3, #0]
    2ddc:	6813      	ldr	r3, [r2, #0]
    2dde:	e027      	b.n	2e30 <_printf_i+0xa4>
    2de0:	2a73      	cmp	r2, #115	; 0x73
    2de2:	f000 80b4 	beq.w	2f4e <_printf_i+0x1c2>
    2de6:	d808      	bhi.n	2dfa <_printf_i+0x6e>
    2de8:	2a6f      	cmp	r2, #111	; 0x6f
    2dea:	d02a      	beq.n	2e42 <_printf_i+0xb6>
    2dec:	2a70      	cmp	r2, #112	; 0x70
    2dee:	d1e5      	bne.n	2dbc <_printf_i+0x30>
    2df0:	680a      	ldr	r2, [r1, #0]
    2df2:	f042 0220 	orr.w	r2, r2, #32
    2df6:	600a      	str	r2, [r1, #0]
    2df8:	e003      	b.n	2e02 <_printf_i+0x76>
    2dfa:	2a75      	cmp	r2, #117	; 0x75
    2dfc:	d021      	beq.n	2e42 <_printf_i+0xb6>
    2dfe:	2a78      	cmp	r2, #120	; 0x78
    2e00:	d1dc      	bne.n	2dbc <_printf_i+0x30>
    2e02:	2278      	movs	r2, #120	; 0x78
    2e04:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    2e08:	496e      	ldr	r1, [pc, #440]	; (2fc4 <_printf_i+0x238>)
    2e0a:	e064      	b.n	2ed6 <_printf_i+0x14a>
    2e0c:	681a      	ldr	r2, [r3, #0]
    2e0e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    2e12:	1d11      	adds	r1, r2, #4
    2e14:	6019      	str	r1, [r3, #0]
    2e16:	6813      	ldr	r3, [r2, #0]
    2e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2e1c:	2301      	movs	r3, #1
    2e1e:	e0a3      	b.n	2f68 <_printf_i+0x1dc>
    2e20:	f011 0f40 	tst.w	r1, #64	; 0x40
    2e24:	f102 0104 	add.w	r1, r2, #4
    2e28:	6019      	str	r1, [r3, #0]
    2e2a:	d0d7      	beq.n	2ddc <_printf_i+0x50>
    2e2c:	f9b2 3000 	ldrsh.w	r3, [r2]
    2e30:	2b00      	cmp	r3, #0
    2e32:	da03      	bge.n	2e3c <_printf_i+0xb0>
    2e34:	222d      	movs	r2, #45	; 0x2d
    2e36:	425b      	negs	r3, r3
    2e38:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2e3c:	4962      	ldr	r1, [pc, #392]	; (2fc8 <_printf_i+0x23c>)
    2e3e:	220a      	movs	r2, #10
    2e40:	e017      	b.n	2e72 <_printf_i+0xe6>
    2e42:	6820      	ldr	r0, [r4, #0]
    2e44:	6819      	ldr	r1, [r3, #0]
    2e46:	f010 0f80 	tst.w	r0, #128	; 0x80
    2e4a:	d003      	beq.n	2e54 <_printf_i+0xc8>
    2e4c:	1d08      	adds	r0, r1, #4
    2e4e:	6018      	str	r0, [r3, #0]
    2e50:	680b      	ldr	r3, [r1, #0]
    2e52:	e006      	b.n	2e62 <_printf_i+0xd6>
    2e54:	f010 0f40 	tst.w	r0, #64	; 0x40
    2e58:	f101 0004 	add.w	r0, r1, #4
    2e5c:	6018      	str	r0, [r3, #0]
    2e5e:	d0f7      	beq.n	2e50 <_printf_i+0xc4>
    2e60:	880b      	ldrh	r3, [r1, #0]
    2e62:	4959      	ldr	r1, [pc, #356]	; (2fc8 <_printf_i+0x23c>)
    2e64:	2a6f      	cmp	r2, #111	; 0x6f
    2e66:	bf14      	ite	ne
    2e68:	220a      	movne	r2, #10
    2e6a:	2208      	moveq	r2, #8
    2e6c:	2000      	movs	r0, #0
    2e6e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    2e72:	6865      	ldr	r5, [r4, #4]
    2e74:	60a5      	str	r5, [r4, #8]
    2e76:	2d00      	cmp	r5, #0
    2e78:	f2c0 809c 	blt.w	2fb4 <_printf_i+0x228>
    2e7c:	6820      	ldr	r0, [r4, #0]
    2e7e:	f020 0004 	bic.w	r0, r0, #4
    2e82:	6020      	str	r0, [r4, #0]
    2e84:	2b00      	cmp	r3, #0
    2e86:	d13f      	bne.n	2f08 <_printf_i+0x17c>
    2e88:	2d00      	cmp	r5, #0
    2e8a:	f040 8095 	bne.w	2fb8 <_printf_i+0x22c>
    2e8e:	4675      	mov	r5, lr
    2e90:	2a08      	cmp	r2, #8
    2e92:	d10b      	bne.n	2eac <_printf_i+0x120>
    2e94:	6823      	ldr	r3, [r4, #0]
    2e96:	07da      	lsls	r2, r3, #31
    2e98:	d508      	bpl.n	2eac <_printf_i+0x120>
    2e9a:	6923      	ldr	r3, [r4, #16]
    2e9c:	6862      	ldr	r2, [r4, #4]
    2e9e:	429a      	cmp	r2, r3
    2ea0:	bfde      	ittt	le
    2ea2:	2330      	movle	r3, #48	; 0x30
    2ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
    2ea8:	f105 35ff 	addle.w	r5, r5, #4294967295
    2eac:	ebae 0305 	sub.w	r3, lr, r5
    2eb0:	6123      	str	r3, [r4, #16]
    2eb2:	f8cd 8000 	str.w	r8, [sp]
    2eb6:	463b      	mov	r3, r7
    2eb8:	aa03      	add	r2, sp, #12
    2eba:	4621      	mov	r1, r4
    2ebc:	4630      	mov	r0, r6
    2ebe:	f7ff feef 	bl	2ca0 <_printf_common>
    2ec2:	3001      	adds	r0, #1
    2ec4:	d155      	bne.n	2f72 <_printf_i+0x1e6>
    2ec6:	f04f 30ff 	mov.w	r0, #4294967295
    2eca:	b005      	add	sp, #20
    2ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2ed0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    2ed4:	493c      	ldr	r1, [pc, #240]	; (2fc8 <_printf_i+0x23c>)
    2ed6:	6822      	ldr	r2, [r4, #0]
    2ed8:	6818      	ldr	r0, [r3, #0]
    2eda:	f012 0f80 	tst.w	r2, #128	; 0x80
    2ede:	f100 0504 	add.w	r5, r0, #4
    2ee2:	601d      	str	r5, [r3, #0]
    2ee4:	d001      	beq.n	2eea <_printf_i+0x15e>
    2ee6:	6803      	ldr	r3, [r0, #0]
    2ee8:	e002      	b.n	2ef0 <_printf_i+0x164>
    2eea:	0655      	lsls	r5, r2, #25
    2eec:	d5fb      	bpl.n	2ee6 <_printf_i+0x15a>
    2eee:	8803      	ldrh	r3, [r0, #0]
    2ef0:	07d0      	lsls	r0, r2, #31
    2ef2:	bf44      	itt	mi
    2ef4:	f042 0220 	orrmi.w	r2, r2, #32
    2ef8:	6022      	strmi	r2, [r4, #0]
    2efa:	b91b      	cbnz	r3, 2f04 <_printf_i+0x178>
    2efc:	6822      	ldr	r2, [r4, #0]
    2efe:	f022 0220 	bic.w	r2, r2, #32
    2f02:	6022      	str	r2, [r4, #0]
    2f04:	2210      	movs	r2, #16
    2f06:	e7b1      	b.n	2e6c <_printf_i+0xe0>
    2f08:	4675      	mov	r5, lr
    2f0a:	fbb3 f0f2 	udiv	r0, r3, r2
    2f0e:	fb02 3310 	mls	r3, r2, r0, r3
    2f12:	5ccb      	ldrb	r3, [r1, r3]
    2f14:	f805 3d01 	strb.w	r3, [r5, #-1]!
    2f18:	4603      	mov	r3, r0
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d1f5      	bne.n	2f0a <_printf_i+0x17e>
    2f1e:	e7b7      	b.n	2e90 <_printf_i+0x104>
    2f20:	6808      	ldr	r0, [r1, #0]
    2f22:	681a      	ldr	r2, [r3, #0]
    2f24:	6949      	ldr	r1, [r1, #20]
    2f26:	f010 0f80 	tst.w	r0, #128	; 0x80
    2f2a:	d004      	beq.n	2f36 <_printf_i+0x1aa>
    2f2c:	1d10      	adds	r0, r2, #4
    2f2e:	6018      	str	r0, [r3, #0]
    2f30:	6813      	ldr	r3, [r2, #0]
    2f32:	6019      	str	r1, [r3, #0]
    2f34:	e007      	b.n	2f46 <_printf_i+0x1ba>
    2f36:	f010 0f40 	tst.w	r0, #64	; 0x40
    2f3a:	f102 0004 	add.w	r0, r2, #4
    2f3e:	6018      	str	r0, [r3, #0]
    2f40:	6813      	ldr	r3, [r2, #0]
    2f42:	d0f6      	beq.n	2f32 <_printf_i+0x1a6>
    2f44:	8019      	strh	r1, [r3, #0]
    2f46:	2300      	movs	r3, #0
    2f48:	6123      	str	r3, [r4, #16]
    2f4a:	4675      	mov	r5, lr
    2f4c:	e7b1      	b.n	2eb2 <_printf_i+0x126>
    2f4e:	681a      	ldr	r2, [r3, #0]
    2f50:	1d11      	adds	r1, r2, #4
    2f52:	6019      	str	r1, [r3, #0]
    2f54:	6815      	ldr	r5, [r2, #0]
    2f56:	6862      	ldr	r2, [r4, #4]
    2f58:	2100      	movs	r1, #0
    2f5a:	4628      	mov	r0, r5
    2f5c:	f000 fdf8 	bl	3b50 <memchr>
    2f60:	b108      	cbz	r0, 2f66 <_printf_i+0x1da>
    2f62:	1b40      	subs	r0, r0, r5
    2f64:	6060      	str	r0, [r4, #4]
    2f66:	6863      	ldr	r3, [r4, #4]
    2f68:	6123      	str	r3, [r4, #16]
    2f6a:	2300      	movs	r3, #0
    2f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2f70:	e79f      	b.n	2eb2 <_printf_i+0x126>
    2f72:	6923      	ldr	r3, [r4, #16]
    2f74:	462a      	mov	r2, r5
    2f76:	4639      	mov	r1, r7
    2f78:	4630      	mov	r0, r6
    2f7a:	47c0      	blx	r8
    2f7c:	3001      	adds	r0, #1
    2f7e:	d0a2      	beq.n	2ec6 <_printf_i+0x13a>
    2f80:	6823      	ldr	r3, [r4, #0]
    2f82:	079b      	lsls	r3, r3, #30
    2f84:	d507      	bpl.n	2f96 <_printf_i+0x20a>
    2f86:	2500      	movs	r5, #0
    2f88:	f104 0919 	add.w	r9, r4, #25
    2f8c:	68e3      	ldr	r3, [r4, #12]
    2f8e:	9a03      	ldr	r2, [sp, #12]
    2f90:	1a9b      	subs	r3, r3, r2
    2f92:	429d      	cmp	r5, r3
    2f94:	db05      	blt.n	2fa2 <_printf_i+0x216>
    2f96:	68e0      	ldr	r0, [r4, #12]
    2f98:	9b03      	ldr	r3, [sp, #12]
    2f9a:	4298      	cmp	r0, r3
    2f9c:	bfb8      	it	lt
    2f9e:	4618      	movlt	r0, r3
    2fa0:	e793      	b.n	2eca <_printf_i+0x13e>
    2fa2:	2301      	movs	r3, #1
    2fa4:	464a      	mov	r2, r9
    2fa6:	4639      	mov	r1, r7
    2fa8:	4630      	mov	r0, r6
    2faa:	47c0      	blx	r8
    2fac:	3001      	adds	r0, #1
    2fae:	d08a      	beq.n	2ec6 <_printf_i+0x13a>
    2fb0:	3501      	adds	r5, #1
    2fb2:	e7eb      	b.n	2f8c <_printf_i+0x200>
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d1a7      	bne.n	2f08 <_printf_i+0x17c>
    2fb8:	780b      	ldrb	r3, [r1, #0]
    2fba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2fbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2fc2:	e765      	b.n	2e90 <_printf_i+0x104>
    2fc4:	00004296 	.word	0x00004296
    2fc8:	00004285 	.word	0x00004285

00002fcc <__svfiscanf_r>:
    2fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fd0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    2fd4:	f10d 080c 	add.w	r8, sp, #12
    2fd8:	9301      	str	r3, [sp, #4]
    2fda:	2300      	movs	r3, #0
    2fdc:	9346      	str	r3, [sp, #280]	; 0x118
    2fde:	9347      	str	r3, [sp, #284]	; 0x11c
    2fe0:	4ba0      	ldr	r3, [pc, #640]	; (3264 <__svfiscanf_r+0x298>)
    2fe2:	93a2      	str	r3, [sp, #648]	; 0x288
    2fe4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 326c <__svfiscanf_r+0x2a0>
    2fe8:	4b9f      	ldr	r3, [pc, #636]	; (3268 <__svfiscanf_r+0x29c>)
    2fea:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    2fee:	4606      	mov	r6, r0
    2ff0:	460c      	mov	r4, r1
    2ff2:	93a3      	str	r3, [sp, #652]	; 0x28c
    2ff4:	4692      	mov	sl, r2
    2ff6:	270a      	movs	r7, #10
    2ff8:	f89a 3000 	ldrb.w	r3, [sl]
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	f000 812f 	beq.w	3260 <__svfiscanf_r+0x294>
    3002:	f000 fd83 	bl	3b0c <__locale_ctype_ptr>
    3006:	f89a b000 	ldrb.w	fp, [sl]
    300a:	4458      	add	r0, fp
    300c:	7843      	ldrb	r3, [r0, #1]
    300e:	f013 0308 	ands.w	r3, r3, #8
    3012:	d143      	bne.n	309c <__svfiscanf_r+0xd0>
    3014:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    3018:	f10a 0501 	add.w	r5, sl, #1
    301c:	f040 8099 	bne.w	3152 <__svfiscanf_r+0x186>
    3020:	9345      	str	r3, [sp, #276]	; 0x114
    3022:	9343      	str	r3, [sp, #268]	; 0x10c
    3024:	f89a 3001 	ldrb.w	r3, [sl, #1]
    3028:	2b2a      	cmp	r3, #42	; 0x2a
    302a:	d103      	bne.n	3034 <__svfiscanf_r+0x68>
    302c:	2310      	movs	r3, #16
    302e:	9343      	str	r3, [sp, #268]	; 0x10c
    3030:	f10a 0502 	add.w	r5, sl, #2
    3034:	7829      	ldrb	r1, [r5, #0]
    3036:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    303a:	2a09      	cmp	r2, #9
    303c:	46aa      	mov	sl, r5
    303e:	f105 0501 	add.w	r5, r5, #1
    3042:	d941      	bls.n	30c8 <__svfiscanf_r+0xfc>
    3044:	2203      	movs	r2, #3
    3046:	4889      	ldr	r0, [pc, #548]	; (326c <__svfiscanf_r+0x2a0>)
    3048:	f000 fd82 	bl	3b50 <memchr>
    304c:	b138      	cbz	r0, 305e <__svfiscanf_r+0x92>
    304e:	eba0 0309 	sub.w	r3, r0, r9
    3052:	2001      	movs	r0, #1
    3054:	4098      	lsls	r0, r3
    3056:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3058:	4318      	orrs	r0, r3
    305a:	9043      	str	r0, [sp, #268]	; 0x10c
    305c:	46aa      	mov	sl, r5
    305e:	f89a 3000 	ldrb.w	r3, [sl]
    3062:	2b67      	cmp	r3, #103	; 0x67
    3064:	f10a 0501 	add.w	r5, sl, #1
    3068:	d84a      	bhi.n	3100 <__svfiscanf_r+0x134>
    306a:	2b65      	cmp	r3, #101	; 0x65
    306c:	f080 80b7 	bcs.w	31de <__svfiscanf_r+0x212>
    3070:	2b47      	cmp	r3, #71	; 0x47
    3072:	d82f      	bhi.n	30d4 <__svfiscanf_r+0x108>
    3074:	2b45      	cmp	r3, #69	; 0x45
    3076:	f080 80b2 	bcs.w	31de <__svfiscanf_r+0x212>
    307a:	2b00      	cmp	r3, #0
    307c:	f000 8082 	beq.w	3184 <__svfiscanf_r+0x1b8>
    3080:	2b25      	cmp	r3, #37	; 0x25
    3082:	d066      	beq.n	3152 <__svfiscanf_r+0x186>
    3084:	2303      	movs	r3, #3
    3086:	9349      	str	r3, [sp, #292]	; 0x124
    3088:	9744      	str	r7, [sp, #272]	; 0x110
    308a:	e045      	b.n	3118 <__svfiscanf_r+0x14c>
    308c:	9947      	ldr	r1, [sp, #284]	; 0x11c
    308e:	3101      	adds	r1, #1
    3090:	9147      	str	r1, [sp, #284]	; 0x11c
    3092:	6861      	ldr	r1, [r4, #4]
    3094:	3301      	adds	r3, #1
    3096:	3901      	subs	r1, #1
    3098:	6061      	str	r1, [r4, #4]
    309a:	6023      	str	r3, [r4, #0]
    309c:	6863      	ldr	r3, [r4, #4]
    309e:	2b00      	cmp	r3, #0
    30a0:	dd0b      	ble.n	30ba <__svfiscanf_r+0xee>
    30a2:	f000 fd33 	bl	3b0c <__locale_ctype_ptr>
    30a6:	6823      	ldr	r3, [r4, #0]
    30a8:	7819      	ldrb	r1, [r3, #0]
    30aa:	4408      	add	r0, r1
    30ac:	7841      	ldrb	r1, [r0, #1]
    30ae:	070d      	lsls	r5, r1, #28
    30b0:	d4ec      	bmi.n	308c <__svfiscanf_r+0xc0>
    30b2:	f10a 0501 	add.w	r5, sl, #1
    30b6:	46aa      	mov	sl, r5
    30b8:	e79e      	b.n	2ff8 <__svfiscanf_r+0x2c>
    30ba:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    30bc:	4621      	mov	r1, r4
    30be:	4630      	mov	r0, r6
    30c0:	4798      	blx	r3
    30c2:	2800      	cmp	r0, #0
    30c4:	d0ed      	beq.n	30a2 <__svfiscanf_r+0xd6>
    30c6:	e7f4      	b.n	30b2 <__svfiscanf_r+0xe6>
    30c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    30ca:	fb07 1303 	mla	r3, r7, r3, r1
    30ce:	3b30      	subs	r3, #48	; 0x30
    30d0:	9345      	str	r3, [sp, #276]	; 0x114
    30d2:	e7af      	b.n	3034 <__svfiscanf_r+0x68>
    30d4:	2b5b      	cmp	r3, #91	; 0x5b
    30d6:	d061      	beq.n	319c <__svfiscanf_r+0x1d0>
    30d8:	d80c      	bhi.n	30f4 <__svfiscanf_r+0x128>
    30da:	2b58      	cmp	r3, #88	; 0x58
    30dc:	d1d2      	bne.n	3084 <__svfiscanf_r+0xb8>
    30de:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    30e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    30e4:	9243      	str	r2, [sp, #268]	; 0x10c
    30e6:	2210      	movs	r2, #16
    30e8:	9244      	str	r2, [sp, #272]	; 0x110
    30ea:	2b6f      	cmp	r3, #111	; 0x6f
    30ec:	bfb4      	ite	lt
    30ee:	2303      	movlt	r3, #3
    30f0:	2304      	movge	r3, #4
    30f2:	e010      	b.n	3116 <__svfiscanf_r+0x14a>
    30f4:	2b63      	cmp	r3, #99	; 0x63
    30f6:	d05c      	beq.n	31b2 <__svfiscanf_r+0x1e6>
    30f8:	2b64      	cmp	r3, #100	; 0x64
    30fa:	d1c3      	bne.n	3084 <__svfiscanf_r+0xb8>
    30fc:	9744      	str	r7, [sp, #272]	; 0x110
    30fe:	e7f4      	b.n	30ea <__svfiscanf_r+0x11e>
    3100:	2b70      	cmp	r3, #112	; 0x70
    3102:	d042      	beq.n	318a <__svfiscanf_r+0x1be>
    3104:	d81d      	bhi.n	3142 <__svfiscanf_r+0x176>
    3106:	2b6e      	cmp	r3, #110	; 0x6e
    3108:	d059      	beq.n	31be <__svfiscanf_r+0x1f2>
    310a:	d843      	bhi.n	3194 <__svfiscanf_r+0x1c8>
    310c:	2b69      	cmp	r3, #105	; 0x69
    310e:	d1b9      	bne.n	3084 <__svfiscanf_r+0xb8>
    3110:	2300      	movs	r3, #0
    3112:	9344      	str	r3, [sp, #272]	; 0x110
    3114:	2303      	movs	r3, #3
    3116:	9349      	str	r3, [sp, #292]	; 0x124
    3118:	6863      	ldr	r3, [r4, #4]
    311a:	2b00      	cmp	r3, #0
    311c:	dd61      	ble.n	31e2 <__svfiscanf_r+0x216>
    311e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3120:	0659      	lsls	r1, r3, #25
    3122:	d56f      	bpl.n	3204 <__svfiscanf_r+0x238>
    3124:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3126:	2b02      	cmp	r3, #2
    3128:	dc7c      	bgt.n	3224 <__svfiscanf_r+0x258>
    312a:	ab01      	add	r3, sp, #4
    312c:	4622      	mov	r2, r4
    312e:	a943      	add	r1, sp, #268	; 0x10c
    3130:	4630      	mov	r0, r6
    3132:	f000 f8c7 	bl	32c4 <_scanf_chars>
    3136:	2801      	cmp	r0, #1
    3138:	f000 8092 	beq.w	3260 <__svfiscanf_r+0x294>
    313c:	2802      	cmp	r0, #2
    313e:	d1ba      	bne.n	30b6 <__svfiscanf_r+0xea>
    3140:	e01d      	b.n	317e <__svfiscanf_r+0x1b2>
    3142:	2b75      	cmp	r3, #117	; 0x75
    3144:	d0da      	beq.n	30fc <__svfiscanf_r+0x130>
    3146:	2b78      	cmp	r3, #120	; 0x78
    3148:	d0c9      	beq.n	30de <__svfiscanf_r+0x112>
    314a:	2b73      	cmp	r3, #115	; 0x73
    314c:	d19a      	bne.n	3084 <__svfiscanf_r+0xb8>
    314e:	2302      	movs	r3, #2
    3150:	e7e1      	b.n	3116 <__svfiscanf_r+0x14a>
    3152:	6863      	ldr	r3, [r4, #4]
    3154:	2b00      	cmp	r3, #0
    3156:	dd0c      	ble.n	3172 <__svfiscanf_r+0x1a6>
    3158:	6823      	ldr	r3, [r4, #0]
    315a:	781a      	ldrb	r2, [r3, #0]
    315c:	4593      	cmp	fp, r2
    315e:	d17f      	bne.n	3260 <__svfiscanf_r+0x294>
    3160:	3301      	adds	r3, #1
    3162:	6862      	ldr	r2, [r4, #4]
    3164:	6023      	str	r3, [r4, #0]
    3166:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3168:	3a01      	subs	r2, #1
    316a:	3301      	adds	r3, #1
    316c:	6062      	str	r2, [r4, #4]
    316e:	9347      	str	r3, [sp, #284]	; 0x11c
    3170:	e7a1      	b.n	30b6 <__svfiscanf_r+0xea>
    3172:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3174:	4621      	mov	r1, r4
    3176:	4630      	mov	r0, r6
    3178:	4798      	blx	r3
    317a:	2800      	cmp	r0, #0
    317c:	d0ec      	beq.n	3158 <__svfiscanf_r+0x18c>
    317e:	9846      	ldr	r0, [sp, #280]	; 0x118
    3180:	2800      	cmp	r0, #0
    3182:	d163      	bne.n	324c <__svfiscanf_r+0x280>
    3184:	f04f 30ff 	mov.w	r0, #4294967295
    3188:	e066      	b.n	3258 <__svfiscanf_r+0x28c>
    318a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    318c:	f042 0220 	orr.w	r2, r2, #32
    3190:	9243      	str	r2, [sp, #268]	; 0x10c
    3192:	e7a4      	b.n	30de <__svfiscanf_r+0x112>
    3194:	2308      	movs	r3, #8
    3196:	9344      	str	r3, [sp, #272]	; 0x110
    3198:	2304      	movs	r3, #4
    319a:	e7bc      	b.n	3116 <__svfiscanf_r+0x14a>
    319c:	4629      	mov	r1, r5
    319e:	4640      	mov	r0, r8
    31a0:	f000 fa8e 	bl	36c0 <__sccl>
    31a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    31a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    31aa:	9343      	str	r3, [sp, #268]	; 0x10c
    31ac:	4605      	mov	r5, r0
    31ae:	2301      	movs	r3, #1
    31b0:	e7b1      	b.n	3116 <__svfiscanf_r+0x14a>
    31b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    31b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    31b8:	9343      	str	r3, [sp, #268]	; 0x10c
    31ba:	2300      	movs	r3, #0
    31bc:	e7ab      	b.n	3116 <__svfiscanf_r+0x14a>
    31be:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    31c0:	06d0      	lsls	r0, r2, #27
    31c2:	f53f af78 	bmi.w	30b6 <__svfiscanf_r+0xea>
    31c6:	f012 0f01 	tst.w	r2, #1
    31ca:	9a01      	ldr	r2, [sp, #4]
    31cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    31ce:	f102 0104 	add.w	r1, r2, #4
    31d2:	9101      	str	r1, [sp, #4]
    31d4:	6812      	ldr	r2, [r2, #0]
    31d6:	bf14      	ite	ne
    31d8:	8013      	strhne	r3, [r2, #0]
    31da:	6013      	streq	r3, [r2, #0]
    31dc:	e76b      	b.n	30b6 <__svfiscanf_r+0xea>
    31de:	2305      	movs	r3, #5
    31e0:	e799      	b.n	3116 <__svfiscanf_r+0x14a>
    31e2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    31e4:	4621      	mov	r1, r4
    31e6:	4630      	mov	r0, r6
    31e8:	4798      	blx	r3
    31ea:	2800      	cmp	r0, #0
    31ec:	d097      	beq.n	311e <__svfiscanf_r+0x152>
    31ee:	e7c6      	b.n	317e <__svfiscanf_r+0x1b2>
    31f0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    31f2:	3201      	adds	r2, #1
    31f4:	9247      	str	r2, [sp, #284]	; 0x11c
    31f6:	6862      	ldr	r2, [r4, #4]
    31f8:	3a01      	subs	r2, #1
    31fa:	2a00      	cmp	r2, #0
    31fc:	6062      	str	r2, [r4, #4]
    31fe:	dd0a      	ble.n	3216 <__svfiscanf_r+0x24a>
    3200:	3301      	adds	r3, #1
    3202:	6023      	str	r3, [r4, #0]
    3204:	f000 fc82 	bl	3b0c <__locale_ctype_ptr>
    3208:	6823      	ldr	r3, [r4, #0]
    320a:	781a      	ldrb	r2, [r3, #0]
    320c:	4410      	add	r0, r2
    320e:	7842      	ldrb	r2, [r0, #1]
    3210:	0712      	lsls	r2, r2, #28
    3212:	d4ed      	bmi.n	31f0 <__svfiscanf_r+0x224>
    3214:	e786      	b.n	3124 <__svfiscanf_r+0x158>
    3216:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3218:	4621      	mov	r1, r4
    321a:	4630      	mov	r0, r6
    321c:	4798      	blx	r3
    321e:	2800      	cmp	r0, #0
    3220:	d0f0      	beq.n	3204 <__svfiscanf_r+0x238>
    3222:	e7ac      	b.n	317e <__svfiscanf_r+0x1b2>
    3224:	2b04      	cmp	r3, #4
    3226:	dc06      	bgt.n	3236 <__svfiscanf_r+0x26a>
    3228:	ab01      	add	r3, sp, #4
    322a:	4622      	mov	r2, r4
    322c:	a943      	add	r1, sp, #268	; 0x10c
    322e:	4630      	mov	r0, r6
    3230:	f000 f8ac 	bl	338c <_scanf_i>
    3234:	e77f      	b.n	3136 <__svfiscanf_r+0x16a>
    3236:	4b0e      	ldr	r3, [pc, #56]	; (3270 <__svfiscanf_r+0x2a4>)
    3238:	2b00      	cmp	r3, #0
    323a:	f43f af3c 	beq.w	30b6 <__svfiscanf_r+0xea>
    323e:	ab01      	add	r3, sp, #4
    3240:	4622      	mov	r2, r4
    3242:	a943      	add	r1, sp, #268	; 0x10c
    3244:	4630      	mov	r0, r6
    3246:	f3af 8000 	nop.w
    324a:	e774      	b.n	3136 <__svfiscanf_r+0x16a>
    324c:	89a3      	ldrh	r3, [r4, #12]
    324e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3252:	bf18      	it	ne
    3254:	f04f 30ff 	movne.w	r0, #4294967295
    3258:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3260:	9846      	ldr	r0, [sp, #280]	; 0x118
    3262:	e7f9      	b.n	3258 <__svfiscanf_r+0x28c>
    3264:	000039dd 	.word	0x000039dd
    3268:	000035ad 	.word	0x000035ad
    326c:	0000427a 	.word	0x0000427a
    3270:	00000000 	.word	0x00000000

00003274 <_vfiscanf_r>:
    3274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3278:	460c      	mov	r4, r1
    327a:	4616      	mov	r6, r2
    327c:	461f      	mov	r7, r3
    327e:	4605      	mov	r5, r0
    3280:	b118      	cbz	r0, 328a <_vfiscanf_r+0x16>
    3282:	6983      	ldr	r3, [r0, #24]
    3284:	b90b      	cbnz	r3, 328a <_vfiscanf_r+0x16>
    3286:	f7fe ff4f 	bl	2128 <__sinit>
    328a:	4b0b      	ldr	r3, [pc, #44]	; (32b8 <_vfiscanf_r+0x44>)
    328c:	429c      	cmp	r4, r3
    328e:	d108      	bne.n	32a2 <_vfiscanf_r+0x2e>
    3290:	686c      	ldr	r4, [r5, #4]
    3292:	463b      	mov	r3, r7
    3294:	4632      	mov	r2, r6
    3296:	4621      	mov	r1, r4
    3298:	4628      	mov	r0, r5
    329a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    329e:	f7ff be95 	b.w	2fcc <__svfiscanf_r>
    32a2:	4b06      	ldr	r3, [pc, #24]	; (32bc <_vfiscanf_r+0x48>)
    32a4:	429c      	cmp	r4, r3
    32a6:	d101      	bne.n	32ac <_vfiscanf_r+0x38>
    32a8:	68ac      	ldr	r4, [r5, #8]
    32aa:	e7f2      	b.n	3292 <_vfiscanf_r+0x1e>
    32ac:	4b04      	ldr	r3, [pc, #16]	; (32c0 <_vfiscanf_r+0x4c>)
    32ae:	429c      	cmp	r4, r3
    32b0:	bf08      	it	eq
    32b2:	68ec      	ldreq	r4, [r5, #12]
    32b4:	e7ed      	b.n	3292 <_vfiscanf_r+0x1e>
    32b6:	bf00      	nop
    32b8:	00004230 	.word	0x00004230
    32bc:	00004250 	.word	0x00004250
    32c0:	00004210 	.word	0x00004210

000032c4 <_scanf_chars>:
    32c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32c8:	4615      	mov	r5, r2
    32ca:	688a      	ldr	r2, [r1, #8]
    32cc:	4680      	mov	r8, r0
    32ce:	460c      	mov	r4, r1
    32d0:	b932      	cbnz	r2, 32e0 <_scanf_chars+0x1c>
    32d2:	698a      	ldr	r2, [r1, #24]
    32d4:	2a00      	cmp	r2, #0
    32d6:	bf0c      	ite	eq
    32d8:	2201      	moveq	r2, #1
    32da:	f04f 32ff 	movne.w	r2, #4294967295
    32de:	608a      	str	r2, [r1, #8]
    32e0:	6822      	ldr	r2, [r4, #0]
    32e2:	06d1      	lsls	r1, r2, #27
    32e4:	bf5f      	itttt	pl
    32e6:	681a      	ldrpl	r2, [r3, #0]
    32e8:	1d11      	addpl	r1, r2, #4
    32ea:	6019      	strpl	r1, [r3, #0]
    32ec:	6817      	ldrpl	r7, [r2, #0]
    32ee:	2600      	movs	r6, #0
    32f0:	69a3      	ldr	r3, [r4, #24]
    32f2:	b1db      	cbz	r3, 332c <_scanf_chars+0x68>
    32f4:	2b01      	cmp	r3, #1
    32f6:	d107      	bne.n	3308 <_scanf_chars+0x44>
    32f8:	682b      	ldr	r3, [r5, #0]
    32fa:	6962      	ldr	r2, [r4, #20]
    32fc:	781b      	ldrb	r3, [r3, #0]
    32fe:	5cd3      	ldrb	r3, [r2, r3]
    3300:	b9a3      	cbnz	r3, 332c <_scanf_chars+0x68>
    3302:	2e00      	cmp	r6, #0
    3304:	d132      	bne.n	336c <_scanf_chars+0xa8>
    3306:	e006      	b.n	3316 <_scanf_chars+0x52>
    3308:	2b02      	cmp	r3, #2
    330a:	d007      	beq.n	331c <_scanf_chars+0x58>
    330c:	2e00      	cmp	r6, #0
    330e:	d12d      	bne.n	336c <_scanf_chars+0xa8>
    3310:	69a3      	ldr	r3, [r4, #24]
    3312:	2b01      	cmp	r3, #1
    3314:	d12a      	bne.n	336c <_scanf_chars+0xa8>
    3316:	2001      	movs	r0, #1
    3318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    331c:	f000 fbf6 	bl	3b0c <__locale_ctype_ptr>
    3320:	682b      	ldr	r3, [r5, #0]
    3322:	781b      	ldrb	r3, [r3, #0]
    3324:	4418      	add	r0, r3
    3326:	7843      	ldrb	r3, [r0, #1]
    3328:	071b      	lsls	r3, r3, #28
    332a:	d4ef      	bmi.n	330c <_scanf_chars+0x48>
    332c:	6823      	ldr	r3, [r4, #0]
    332e:	06da      	lsls	r2, r3, #27
    3330:	bf5e      	ittt	pl
    3332:	682b      	ldrpl	r3, [r5, #0]
    3334:	781b      	ldrbpl	r3, [r3, #0]
    3336:	703b      	strbpl	r3, [r7, #0]
    3338:	682a      	ldr	r2, [r5, #0]
    333a:	686b      	ldr	r3, [r5, #4]
    333c:	f102 0201 	add.w	r2, r2, #1
    3340:	602a      	str	r2, [r5, #0]
    3342:	68a2      	ldr	r2, [r4, #8]
    3344:	f103 33ff 	add.w	r3, r3, #4294967295
    3348:	f102 32ff 	add.w	r2, r2, #4294967295
    334c:	606b      	str	r3, [r5, #4]
    334e:	f106 0601 	add.w	r6, r6, #1
    3352:	bf58      	it	pl
    3354:	3701      	addpl	r7, #1
    3356:	60a2      	str	r2, [r4, #8]
    3358:	b142      	cbz	r2, 336c <_scanf_chars+0xa8>
    335a:	2b00      	cmp	r3, #0
    335c:	dcc8      	bgt.n	32f0 <_scanf_chars+0x2c>
    335e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    3362:	4629      	mov	r1, r5
    3364:	4640      	mov	r0, r8
    3366:	4798      	blx	r3
    3368:	2800      	cmp	r0, #0
    336a:	d0c1      	beq.n	32f0 <_scanf_chars+0x2c>
    336c:	6823      	ldr	r3, [r4, #0]
    336e:	f013 0310 	ands.w	r3, r3, #16
    3372:	d105      	bne.n	3380 <_scanf_chars+0xbc>
    3374:	68e2      	ldr	r2, [r4, #12]
    3376:	3201      	adds	r2, #1
    3378:	60e2      	str	r2, [r4, #12]
    337a:	69a2      	ldr	r2, [r4, #24]
    337c:	b102      	cbz	r2, 3380 <_scanf_chars+0xbc>
    337e:	703b      	strb	r3, [r7, #0]
    3380:	6923      	ldr	r3, [r4, #16]
    3382:	441e      	add	r6, r3
    3384:	6126      	str	r6, [r4, #16]
    3386:	2000      	movs	r0, #0
    3388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000338c <_scanf_i>:
    338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3390:	469a      	mov	sl, r3
    3392:	4b74      	ldr	r3, [pc, #464]	; (3564 <_scanf_i+0x1d8>)
    3394:	460c      	mov	r4, r1
    3396:	4683      	mov	fp, r0
    3398:	4616      	mov	r6, r2
    339a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    339e:	b087      	sub	sp, #28
    33a0:	ab03      	add	r3, sp, #12
    33a2:	68a7      	ldr	r7, [r4, #8]
    33a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    33a8:	4b6f      	ldr	r3, [pc, #444]	; (3568 <_scanf_i+0x1dc>)
    33aa:	69a1      	ldr	r1, [r4, #24]
    33ac:	4a6f      	ldr	r2, [pc, #444]	; (356c <_scanf_i+0x1e0>)
    33ae:	2903      	cmp	r1, #3
    33b0:	bf18      	it	ne
    33b2:	461a      	movne	r2, r3
    33b4:	1e7b      	subs	r3, r7, #1
    33b6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    33ba:	bf84      	itt	hi
    33bc:	f240 135d 	movwhi	r3, #349	; 0x15d
    33c0:	60a3      	strhi	r3, [r4, #8]
    33c2:	6823      	ldr	r3, [r4, #0]
    33c4:	9200      	str	r2, [sp, #0]
    33c6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    33ca:	bf88      	it	hi
    33cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    33d0:	f104 091c 	add.w	r9, r4, #28
    33d4:	6023      	str	r3, [r4, #0]
    33d6:	bf8c      	ite	hi
    33d8:	197f      	addhi	r7, r7, r5
    33da:	2700      	movls	r7, #0
    33dc:	464b      	mov	r3, r9
    33de:	f04f 0800 	mov.w	r8, #0
    33e2:	9301      	str	r3, [sp, #4]
    33e4:	6831      	ldr	r1, [r6, #0]
    33e6:	ab03      	add	r3, sp, #12
    33e8:	2202      	movs	r2, #2
    33ea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    33ee:	7809      	ldrb	r1, [r1, #0]
    33f0:	f000 fbae 	bl	3b50 <memchr>
    33f4:	9b01      	ldr	r3, [sp, #4]
    33f6:	b328      	cbz	r0, 3444 <_scanf_i+0xb8>
    33f8:	f1b8 0f01 	cmp.w	r8, #1
    33fc:	d156      	bne.n	34ac <_scanf_i+0x120>
    33fe:	6862      	ldr	r2, [r4, #4]
    3400:	b92a      	cbnz	r2, 340e <_scanf_i+0x82>
    3402:	2208      	movs	r2, #8
    3404:	6062      	str	r2, [r4, #4]
    3406:	6822      	ldr	r2, [r4, #0]
    3408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    340c:	6022      	str	r2, [r4, #0]
    340e:	6822      	ldr	r2, [r4, #0]
    3410:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    3414:	6022      	str	r2, [r4, #0]
    3416:	68a2      	ldr	r2, [r4, #8]
    3418:	1e51      	subs	r1, r2, #1
    341a:	60a1      	str	r1, [r4, #8]
    341c:	b192      	cbz	r2, 3444 <_scanf_i+0xb8>
    341e:	6832      	ldr	r2, [r6, #0]
    3420:	1c51      	adds	r1, r2, #1
    3422:	6031      	str	r1, [r6, #0]
    3424:	7812      	ldrb	r2, [r2, #0]
    3426:	701a      	strb	r2, [r3, #0]
    3428:	1c5d      	adds	r5, r3, #1
    342a:	6873      	ldr	r3, [r6, #4]
    342c:	3b01      	subs	r3, #1
    342e:	2b00      	cmp	r3, #0
    3430:	6073      	str	r3, [r6, #4]
    3432:	dc06      	bgt.n	3442 <_scanf_i+0xb6>
    3434:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    3438:	4631      	mov	r1, r6
    343a:	4658      	mov	r0, fp
    343c:	4798      	blx	r3
    343e:	2800      	cmp	r0, #0
    3440:	d176      	bne.n	3530 <_scanf_i+0x1a4>
    3442:	462b      	mov	r3, r5
    3444:	f108 0801 	add.w	r8, r8, #1
    3448:	f1b8 0f03 	cmp.w	r8, #3
    344c:	d1c9      	bne.n	33e2 <_scanf_i+0x56>
    344e:	6862      	ldr	r2, [r4, #4]
    3450:	b90a      	cbnz	r2, 3456 <_scanf_i+0xca>
    3452:	220a      	movs	r2, #10
    3454:	6062      	str	r2, [r4, #4]
    3456:	6862      	ldr	r2, [r4, #4]
    3458:	4945      	ldr	r1, [pc, #276]	; (3570 <_scanf_i+0x1e4>)
    345a:	6960      	ldr	r0, [r4, #20]
    345c:	9301      	str	r3, [sp, #4]
    345e:	1a89      	subs	r1, r1, r2
    3460:	f000 f92e 	bl	36c0 <__sccl>
    3464:	9b01      	ldr	r3, [sp, #4]
    3466:	f04f 0800 	mov.w	r8, #0
    346a:	461d      	mov	r5, r3
    346c:	68a3      	ldr	r3, [r4, #8]
    346e:	2b00      	cmp	r3, #0
    3470:	d038      	beq.n	34e4 <_scanf_i+0x158>
    3472:	6831      	ldr	r1, [r6, #0]
    3474:	6960      	ldr	r0, [r4, #20]
    3476:	780a      	ldrb	r2, [r1, #0]
    3478:	5c80      	ldrb	r0, [r0, r2]
    347a:	2800      	cmp	r0, #0
    347c:	d032      	beq.n	34e4 <_scanf_i+0x158>
    347e:	2a30      	cmp	r2, #48	; 0x30
    3480:	6822      	ldr	r2, [r4, #0]
    3482:	d121      	bne.n	34c8 <_scanf_i+0x13c>
    3484:	0510      	lsls	r0, r2, #20
    3486:	d51f      	bpl.n	34c8 <_scanf_i+0x13c>
    3488:	f108 0801 	add.w	r8, r8, #1
    348c:	b117      	cbz	r7, 3494 <_scanf_i+0x108>
    348e:	3301      	adds	r3, #1
    3490:	3f01      	subs	r7, #1
    3492:	60a3      	str	r3, [r4, #8]
    3494:	6873      	ldr	r3, [r6, #4]
    3496:	3b01      	subs	r3, #1
    3498:	2b00      	cmp	r3, #0
    349a:	6073      	str	r3, [r6, #4]
    349c:	dd1b      	ble.n	34d6 <_scanf_i+0x14a>
    349e:	6833      	ldr	r3, [r6, #0]
    34a0:	3301      	adds	r3, #1
    34a2:	6033      	str	r3, [r6, #0]
    34a4:	68a3      	ldr	r3, [r4, #8]
    34a6:	3b01      	subs	r3, #1
    34a8:	60a3      	str	r3, [r4, #8]
    34aa:	e7df      	b.n	346c <_scanf_i+0xe0>
    34ac:	f1b8 0f02 	cmp.w	r8, #2
    34b0:	d1b1      	bne.n	3416 <_scanf_i+0x8a>
    34b2:	6822      	ldr	r2, [r4, #0]
    34b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    34b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    34bc:	d1c2      	bne.n	3444 <_scanf_i+0xb8>
    34be:	2110      	movs	r1, #16
    34c0:	6061      	str	r1, [r4, #4]
    34c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    34c6:	e7a5      	b.n	3414 <_scanf_i+0x88>
    34c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    34cc:	6022      	str	r2, [r4, #0]
    34ce:	780b      	ldrb	r3, [r1, #0]
    34d0:	702b      	strb	r3, [r5, #0]
    34d2:	3501      	adds	r5, #1
    34d4:	e7de      	b.n	3494 <_scanf_i+0x108>
    34d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    34da:	4631      	mov	r1, r6
    34dc:	4658      	mov	r0, fp
    34de:	4798      	blx	r3
    34e0:	2800      	cmp	r0, #0
    34e2:	d0df      	beq.n	34a4 <_scanf_i+0x118>
    34e4:	6823      	ldr	r3, [r4, #0]
    34e6:	05d9      	lsls	r1, r3, #23
    34e8:	d50c      	bpl.n	3504 <_scanf_i+0x178>
    34ea:	454d      	cmp	r5, r9
    34ec:	d908      	bls.n	3500 <_scanf_i+0x174>
    34ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    34f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    34f6:	4632      	mov	r2, r6
    34f8:	4658      	mov	r0, fp
    34fa:	4798      	blx	r3
    34fc:	1e6f      	subs	r7, r5, #1
    34fe:	463d      	mov	r5, r7
    3500:	454d      	cmp	r5, r9
    3502:	d02c      	beq.n	355e <_scanf_i+0x1d2>
    3504:	6822      	ldr	r2, [r4, #0]
    3506:	f012 0210 	ands.w	r2, r2, #16
    350a:	d11e      	bne.n	354a <_scanf_i+0x1be>
    350c:	702a      	strb	r2, [r5, #0]
    350e:	6863      	ldr	r3, [r4, #4]
    3510:	9e00      	ldr	r6, [sp, #0]
    3512:	4649      	mov	r1, r9
    3514:	4658      	mov	r0, fp
    3516:	47b0      	blx	r6
    3518:	6822      	ldr	r2, [r4, #0]
    351a:	f8da 3000 	ldr.w	r3, [sl]
    351e:	f012 0f20 	tst.w	r2, #32
    3522:	d008      	beq.n	3536 <_scanf_i+0x1aa>
    3524:	1d1a      	adds	r2, r3, #4
    3526:	f8ca 2000 	str.w	r2, [sl]
    352a:	681b      	ldr	r3, [r3, #0]
    352c:	6018      	str	r0, [r3, #0]
    352e:	e009      	b.n	3544 <_scanf_i+0x1b8>
    3530:	f04f 0800 	mov.w	r8, #0
    3534:	e7d6      	b.n	34e4 <_scanf_i+0x158>
    3536:	07d2      	lsls	r2, r2, #31
    3538:	d5f4      	bpl.n	3524 <_scanf_i+0x198>
    353a:	1d1a      	adds	r2, r3, #4
    353c:	f8ca 2000 	str.w	r2, [sl]
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	8018      	strh	r0, [r3, #0]
    3544:	68e3      	ldr	r3, [r4, #12]
    3546:	3301      	adds	r3, #1
    3548:	60e3      	str	r3, [r4, #12]
    354a:	eba5 0509 	sub.w	r5, r5, r9
    354e:	44a8      	add	r8, r5
    3550:	6925      	ldr	r5, [r4, #16]
    3552:	4445      	add	r5, r8
    3554:	6125      	str	r5, [r4, #16]
    3556:	2000      	movs	r0, #0
    3558:	b007      	add	sp, #28
    355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    355e:	2001      	movs	r0, #1
    3560:	e7fa      	b.n	3558 <_scanf_i+0x1cc>
    3562:	bf00      	nop
    3564:	000042a8 	.word	0x000042a8
    3568:	00003941 	.word	0x00003941
    356c:	00003821 	.word	0x00003821
    3570:	000042c4 	.word	0x000042c4

00003574 <_read_r>:
    3574:	b538      	push	{r3, r4, r5, lr}
    3576:	4c07      	ldr	r4, [pc, #28]	; (3594 <_read_r+0x20>)
    3578:	4605      	mov	r5, r0
    357a:	4608      	mov	r0, r1
    357c:	4611      	mov	r1, r2
    357e:	2200      	movs	r2, #0
    3580:	6022      	str	r2, [r4, #0]
    3582:	461a      	mov	r2, r3
    3584:	f7fe f876 	bl	1674 <_read>
    3588:	1c43      	adds	r3, r0, #1
    358a:	d102      	bne.n	3592 <_read_r+0x1e>
    358c:	6823      	ldr	r3, [r4, #0]
    358e:	b103      	cbz	r3, 3592 <_read_r+0x1e>
    3590:	602b      	str	r3, [r5, #0]
    3592:	bd38      	pop	{r3, r4, r5, pc}
    3594:	20000570 	.word	0x20000570

00003598 <lflush>:
    3598:	8983      	ldrh	r3, [r0, #12]
    359a:	f003 0309 	and.w	r3, r3, #9
    359e:	2b09      	cmp	r3, #9
    35a0:	d101      	bne.n	35a6 <lflush+0xe>
    35a2:	f7fe bd6f 	b.w	2084 <fflush>
    35a6:	2000      	movs	r0, #0
    35a8:	4770      	bx	lr
	...

000035ac <__srefill_r>:
    35ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ae:	460c      	mov	r4, r1
    35b0:	4605      	mov	r5, r0
    35b2:	b118      	cbz	r0, 35bc <__srefill_r+0x10>
    35b4:	6983      	ldr	r3, [r0, #24]
    35b6:	b90b      	cbnz	r3, 35bc <__srefill_r+0x10>
    35b8:	f7fe fdb6 	bl	2128 <__sinit>
    35bc:	4b3b      	ldr	r3, [pc, #236]	; (36ac <__srefill_r+0x100>)
    35be:	429c      	cmp	r4, r3
    35c0:	d10a      	bne.n	35d8 <__srefill_r+0x2c>
    35c2:	686c      	ldr	r4, [r5, #4]
    35c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    35c8:	2300      	movs	r3, #0
    35ca:	6063      	str	r3, [r4, #4]
    35cc:	b293      	uxth	r3, r2
    35ce:	069e      	lsls	r6, r3, #26
    35d0:	d50c      	bpl.n	35ec <__srefill_r+0x40>
    35d2:	f04f 30ff 	mov.w	r0, #4294967295
    35d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35d8:	4b35      	ldr	r3, [pc, #212]	; (36b0 <__srefill_r+0x104>)
    35da:	429c      	cmp	r4, r3
    35dc:	d101      	bne.n	35e2 <__srefill_r+0x36>
    35de:	68ac      	ldr	r4, [r5, #8]
    35e0:	e7f0      	b.n	35c4 <__srefill_r+0x18>
    35e2:	4b34      	ldr	r3, [pc, #208]	; (36b4 <__srefill_r+0x108>)
    35e4:	429c      	cmp	r4, r3
    35e6:	bf08      	it	eq
    35e8:	68ec      	ldreq	r4, [r5, #12]
    35ea:	e7eb      	b.n	35c4 <__srefill_r+0x18>
    35ec:	0758      	lsls	r0, r3, #29
    35ee:	d448      	bmi.n	3682 <__srefill_r+0xd6>
    35f0:	06d9      	lsls	r1, r3, #27
    35f2:	d405      	bmi.n	3600 <__srefill_r+0x54>
    35f4:	2309      	movs	r3, #9
    35f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    35fa:	602b      	str	r3, [r5, #0]
    35fc:	81a2      	strh	r2, [r4, #12]
    35fe:	e7e8      	b.n	35d2 <__srefill_r+0x26>
    3600:	071a      	lsls	r2, r3, #28
    3602:	d50b      	bpl.n	361c <__srefill_r+0x70>
    3604:	4621      	mov	r1, r4
    3606:	4628      	mov	r0, r5
    3608:	f7fe fd12 	bl	2030 <_fflush_r>
    360c:	2800      	cmp	r0, #0
    360e:	d1e0      	bne.n	35d2 <__srefill_r+0x26>
    3610:	89a3      	ldrh	r3, [r4, #12]
    3612:	60a0      	str	r0, [r4, #8]
    3614:	f023 0308 	bic.w	r3, r3, #8
    3618:	81a3      	strh	r3, [r4, #12]
    361a:	61a0      	str	r0, [r4, #24]
    361c:	89a3      	ldrh	r3, [r4, #12]
    361e:	f043 0304 	orr.w	r3, r3, #4
    3622:	81a3      	strh	r3, [r4, #12]
    3624:	6923      	ldr	r3, [r4, #16]
    3626:	b91b      	cbnz	r3, 3630 <__srefill_r+0x84>
    3628:	4621      	mov	r1, r4
    362a:	4628      	mov	r0, r5
    362c:	f7ff f9b0 	bl	2990 <__smakebuf_r>
    3630:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    3634:	b2be      	uxth	r6, r7
    3636:	07b3      	lsls	r3, r6, #30
    3638:	d00f      	beq.n	365a <__srefill_r+0xae>
    363a:	2301      	movs	r3, #1
    363c:	81a3      	strh	r3, [r4, #12]
    363e:	4b1e      	ldr	r3, [pc, #120]	; (36b8 <__srefill_r+0x10c>)
    3640:	491e      	ldr	r1, [pc, #120]	; (36bc <__srefill_r+0x110>)
    3642:	6818      	ldr	r0, [r3, #0]
    3644:	f006 0609 	and.w	r6, r6, #9
    3648:	f7fe fdda 	bl	2200 <_fwalk>
    364c:	2e09      	cmp	r6, #9
    364e:	81a7      	strh	r7, [r4, #12]
    3650:	d103      	bne.n	365a <__srefill_r+0xae>
    3652:	4621      	mov	r1, r4
    3654:	4628      	mov	r0, r5
    3656:	f7fe fc63 	bl	1f20 <__sflush_r>
    365a:	6922      	ldr	r2, [r4, #16]
    365c:	6022      	str	r2, [r4, #0]
    365e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3660:	6963      	ldr	r3, [r4, #20]
    3662:	6a21      	ldr	r1, [r4, #32]
    3664:	4628      	mov	r0, r5
    3666:	47b0      	blx	r6
    3668:	2800      	cmp	r0, #0
    366a:	6060      	str	r0, [r4, #4]
    366c:	dc1c      	bgt.n	36a8 <__srefill_r+0xfc>
    366e:	89a3      	ldrh	r3, [r4, #12]
    3670:	bf17      	itett	ne
    3672:	2200      	movne	r2, #0
    3674:	f043 0320 	orreq.w	r3, r3, #32
    3678:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    367c:	6062      	strne	r2, [r4, #4]
    367e:	81a3      	strh	r3, [r4, #12]
    3680:	e7a7      	b.n	35d2 <__srefill_r+0x26>
    3682:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3684:	2900      	cmp	r1, #0
    3686:	d0cd      	beq.n	3624 <__srefill_r+0x78>
    3688:	f104 0344 	add.w	r3, r4, #68	; 0x44
    368c:	4299      	cmp	r1, r3
    368e:	d002      	beq.n	3696 <__srefill_r+0xea>
    3690:	4628      	mov	r0, r5
    3692:	f7fe fe1b 	bl	22cc <_free_r>
    3696:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3698:	6063      	str	r3, [r4, #4]
    369a:	2000      	movs	r0, #0
    369c:	6360      	str	r0, [r4, #52]	; 0x34
    369e:	2b00      	cmp	r3, #0
    36a0:	d0c0      	beq.n	3624 <__srefill_r+0x78>
    36a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    36a4:	6023      	str	r3, [r4, #0]
    36a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36a8:	2000      	movs	r0, #0
    36aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36ac:	00004230 	.word	0x00004230
    36b0:	00004250 	.word	0x00004250
    36b4:	00004210 	.word	0x00004210
    36b8:	00004270 	.word	0x00004270
    36bc:	00003599 	.word	0x00003599

000036c0 <__sccl>:
    36c0:	b570      	push	{r4, r5, r6, lr}
    36c2:	780b      	ldrb	r3, [r1, #0]
    36c4:	2b5e      	cmp	r3, #94	; 0x5e
    36c6:	bf13      	iteet	ne
    36c8:	1c4a      	addne	r2, r1, #1
    36ca:	1c8a      	addeq	r2, r1, #2
    36cc:	784b      	ldrbeq	r3, [r1, #1]
    36ce:	2100      	movne	r1, #0
    36d0:	bf08      	it	eq
    36d2:	2101      	moveq	r1, #1
    36d4:	1e44      	subs	r4, r0, #1
    36d6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    36da:	f804 1f01 	strb.w	r1, [r4, #1]!
    36de:	42a5      	cmp	r5, r4
    36e0:	d1fb      	bne.n	36da <__sccl+0x1a>
    36e2:	b913      	cbnz	r3, 36ea <__sccl+0x2a>
    36e4:	3a01      	subs	r2, #1
    36e6:	4610      	mov	r0, r2
    36e8:	bd70      	pop	{r4, r5, r6, pc}
    36ea:	f081 0401 	eor.w	r4, r1, #1
    36ee:	54c4      	strb	r4, [r0, r3]
    36f0:	4611      	mov	r1, r2
    36f2:	780d      	ldrb	r5, [r1, #0]
    36f4:	2d2d      	cmp	r5, #45	; 0x2d
    36f6:	f101 0201 	add.w	r2, r1, #1
    36fa:	d006      	beq.n	370a <__sccl+0x4a>
    36fc:	2d5d      	cmp	r5, #93	; 0x5d
    36fe:	d0f2      	beq.n	36e6 <__sccl+0x26>
    3700:	b90d      	cbnz	r5, 3706 <__sccl+0x46>
    3702:	460a      	mov	r2, r1
    3704:	e7ef      	b.n	36e6 <__sccl+0x26>
    3706:	462b      	mov	r3, r5
    3708:	e7f1      	b.n	36ee <__sccl+0x2e>
    370a:	784e      	ldrb	r6, [r1, #1]
    370c:	2e5d      	cmp	r6, #93	; 0x5d
    370e:	d0fa      	beq.n	3706 <__sccl+0x46>
    3710:	42b3      	cmp	r3, r6
    3712:	dcf8      	bgt.n	3706 <__sccl+0x46>
    3714:	3102      	adds	r1, #2
    3716:	3301      	adds	r3, #1
    3718:	429e      	cmp	r6, r3
    371a:	54c4      	strb	r4, [r0, r3]
    371c:	dcfb      	bgt.n	3716 <__sccl+0x56>
    371e:	e7e8      	b.n	36f2 <__sccl+0x32>

00003720 <_strtol_l.isra.0>:
    3720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3724:	4680      	mov	r8, r0
    3726:	4689      	mov	r9, r1
    3728:	4692      	mov	sl, r2
    372a:	461f      	mov	r7, r3
    372c:	468b      	mov	fp, r1
    372e:	465d      	mov	r5, fp
    3730:	980a      	ldr	r0, [sp, #40]	; 0x28
    3732:	f815 4b01 	ldrb.w	r4, [r5], #1
    3736:	f000 f9e5 	bl	3b04 <__locale_ctype_ptr_l>
    373a:	4420      	add	r0, r4
    373c:	7846      	ldrb	r6, [r0, #1]
    373e:	f016 0608 	ands.w	r6, r6, #8
    3742:	d10b      	bne.n	375c <_strtol_l.isra.0+0x3c>
    3744:	2c2d      	cmp	r4, #45	; 0x2d
    3746:	d10b      	bne.n	3760 <_strtol_l.isra.0+0x40>
    3748:	782c      	ldrb	r4, [r5, #0]
    374a:	2601      	movs	r6, #1
    374c:	f10b 0502 	add.w	r5, fp, #2
    3750:	b167      	cbz	r7, 376c <_strtol_l.isra.0+0x4c>
    3752:	2f10      	cmp	r7, #16
    3754:	d114      	bne.n	3780 <_strtol_l.isra.0+0x60>
    3756:	2c30      	cmp	r4, #48	; 0x30
    3758:	d00a      	beq.n	3770 <_strtol_l.isra.0+0x50>
    375a:	e011      	b.n	3780 <_strtol_l.isra.0+0x60>
    375c:	46ab      	mov	fp, r5
    375e:	e7e6      	b.n	372e <_strtol_l.isra.0+0xe>
    3760:	2c2b      	cmp	r4, #43	; 0x2b
    3762:	bf04      	itt	eq
    3764:	782c      	ldrbeq	r4, [r5, #0]
    3766:	f10b 0502 	addeq.w	r5, fp, #2
    376a:	e7f1      	b.n	3750 <_strtol_l.isra.0+0x30>
    376c:	2c30      	cmp	r4, #48	; 0x30
    376e:	d127      	bne.n	37c0 <_strtol_l.isra.0+0xa0>
    3770:	782b      	ldrb	r3, [r5, #0]
    3772:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    3776:	2b58      	cmp	r3, #88	; 0x58
    3778:	d14b      	bne.n	3812 <_strtol_l.isra.0+0xf2>
    377a:	786c      	ldrb	r4, [r5, #1]
    377c:	2710      	movs	r7, #16
    377e:	3502      	adds	r5, #2
    3780:	2e00      	cmp	r6, #0
    3782:	bf0c      	ite	eq
    3784:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    3788:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    378c:	2200      	movs	r2, #0
    378e:	fbb1 fef7 	udiv	lr, r1, r7
    3792:	4610      	mov	r0, r2
    3794:	fb07 1c1e 	mls	ip, r7, lr, r1
    3798:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    379c:	2b09      	cmp	r3, #9
    379e:	d811      	bhi.n	37c4 <_strtol_l.isra.0+0xa4>
    37a0:	461c      	mov	r4, r3
    37a2:	42a7      	cmp	r7, r4
    37a4:	dd1d      	ble.n	37e2 <_strtol_l.isra.0+0xc2>
    37a6:	1c53      	adds	r3, r2, #1
    37a8:	d007      	beq.n	37ba <_strtol_l.isra.0+0x9a>
    37aa:	4586      	cmp	lr, r0
    37ac:	d316      	bcc.n	37dc <_strtol_l.isra.0+0xbc>
    37ae:	d101      	bne.n	37b4 <_strtol_l.isra.0+0x94>
    37b0:	45a4      	cmp	ip, r4
    37b2:	db13      	blt.n	37dc <_strtol_l.isra.0+0xbc>
    37b4:	fb00 4007 	mla	r0, r0, r7, r4
    37b8:	2201      	movs	r2, #1
    37ba:	f815 4b01 	ldrb.w	r4, [r5], #1
    37be:	e7eb      	b.n	3798 <_strtol_l.isra.0+0x78>
    37c0:	270a      	movs	r7, #10
    37c2:	e7dd      	b.n	3780 <_strtol_l.isra.0+0x60>
    37c4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    37c8:	2b19      	cmp	r3, #25
    37ca:	d801      	bhi.n	37d0 <_strtol_l.isra.0+0xb0>
    37cc:	3c37      	subs	r4, #55	; 0x37
    37ce:	e7e8      	b.n	37a2 <_strtol_l.isra.0+0x82>
    37d0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    37d4:	2b19      	cmp	r3, #25
    37d6:	d804      	bhi.n	37e2 <_strtol_l.isra.0+0xc2>
    37d8:	3c57      	subs	r4, #87	; 0x57
    37da:	e7e2      	b.n	37a2 <_strtol_l.isra.0+0x82>
    37dc:	f04f 32ff 	mov.w	r2, #4294967295
    37e0:	e7eb      	b.n	37ba <_strtol_l.isra.0+0x9a>
    37e2:	1c53      	adds	r3, r2, #1
    37e4:	d108      	bne.n	37f8 <_strtol_l.isra.0+0xd8>
    37e6:	2322      	movs	r3, #34	; 0x22
    37e8:	f8c8 3000 	str.w	r3, [r8]
    37ec:	4608      	mov	r0, r1
    37ee:	f1ba 0f00 	cmp.w	sl, #0
    37f2:	d107      	bne.n	3804 <_strtol_l.isra.0+0xe4>
    37f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37f8:	b106      	cbz	r6, 37fc <_strtol_l.isra.0+0xdc>
    37fa:	4240      	negs	r0, r0
    37fc:	f1ba 0f00 	cmp.w	sl, #0
    3800:	d00c      	beq.n	381c <_strtol_l.isra.0+0xfc>
    3802:	b122      	cbz	r2, 380e <_strtol_l.isra.0+0xee>
    3804:	3d01      	subs	r5, #1
    3806:	f8ca 5000 	str.w	r5, [sl]
    380a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    380e:	464d      	mov	r5, r9
    3810:	e7f9      	b.n	3806 <_strtol_l.isra.0+0xe6>
    3812:	2430      	movs	r4, #48	; 0x30
    3814:	2f00      	cmp	r7, #0
    3816:	d1b3      	bne.n	3780 <_strtol_l.isra.0+0x60>
    3818:	2708      	movs	r7, #8
    381a:	e7b1      	b.n	3780 <_strtol_l.isra.0+0x60>
    381c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003820 <_strtol_r>:
    3820:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3822:	4c06      	ldr	r4, [pc, #24]	; (383c <_strtol_r+0x1c>)
    3824:	4d06      	ldr	r5, [pc, #24]	; (3840 <_strtol_r+0x20>)
    3826:	6824      	ldr	r4, [r4, #0]
    3828:	6a24      	ldr	r4, [r4, #32]
    382a:	2c00      	cmp	r4, #0
    382c:	bf08      	it	eq
    382e:	462c      	moveq	r4, r5
    3830:	9400      	str	r4, [sp, #0]
    3832:	f7ff ff75 	bl	3720 <_strtol_l.isra.0>
    3836:	b003      	add	sp, #12
    3838:	bd30      	pop	{r4, r5, pc}
    383a:	bf00      	nop
    383c:	20000278 	.word	0x20000278
    3840:	200002dc 	.word	0x200002dc

00003844 <_strtoul_l.isra.0>:
    3844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3848:	4680      	mov	r8, r0
    384a:	4689      	mov	r9, r1
    384c:	4692      	mov	sl, r2
    384e:	461e      	mov	r6, r3
    3850:	460f      	mov	r7, r1
    3852:	463d      	mov	r5, r7
    3854:	9808      	ldr	r0, [sp, #32]
    3856:	f815 4b01 	ldrb.w	r4, [r5], #1
    385a:	f000 f953 	bl	3b04 <__locale_ctype_ptr_l>
    385e:	4420      	add	r0, r4
    3860:	7843      	ldrb	r3, [r0, #1]
    3862:	f013 0308 	ands.w	r3, r3, #8
    3866:	d10a      	bne.n	387e <_strtoul_l.isra.0+0x3a>
    3868:	2c2d      	cmp	r4, #45	; 0x2d
    386a:	d10a      	bne.n	3882 <_strtoul_l.isra.0+0x3e>
    386c:	782c      	ldrb	r4, [r5, #0]
    386e:	2301      	movs	r3, #1
    3870:	1cbd      	adds	r5, r7, #2
    3872:	b15e      	cbz	r6, 388c <_strtoul_l.isra.0+0x48>
    3874:	2e10      	cmp	r6, #16
    3876:	d113      	bne.n	38a0 <_strtoul_l.isra.0+0x5c>
    3878:	2c30      	cmp	r4, #48	; 0x30
    387a:	d009      	beq.n	3890 <_strtoul_l.isra.0+0x4c>
    387c:	e010      	b.n	38a0 <_strtoul_l.isra.0+0x5c>
    387e:	462f      	mov	r7, r5
    3880:	e7e7      	b.n	3852 <_strtoul_l.isra.0+0xe>
    3882:	2c2b      	cmp	r4, #43	; 0x2b
    3884:	bf04      	itt	eq
    3886:	782c      	ldrbeq	r4, [r5, #0]
    3888:	1cbd      	addeq	r5, r7, #2
    388a:	e7f2      	b.n	3872 <_strtoul_l.isra.0+0x2e>
    388c:	2c30      	cmp	r4, #48	; 0x30
    388e:	d125      	bne.n	38dc <_strtoul_l.isra.0+0x98>
    3890:	782a      	ldrb	r2, [r5, #0]
    3892:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    3896:	2a58      	cmp	r2, #88	; 0x58
    3898:	d14a      	bne.n	3930 <_strtoul_l.isra.0+0xec>
    389a:	786c      	ldrb	r4, [r5, #1]
    389c:	2610      	movs	r6, #16
    389e:	3502      	adds	r5, #2
    38a0:	f04f 31ff 	mov.w	r1, #4294967295
    38a4:	2700      	movs	r7, #0
    38a6:	fbb1 f1f6 	udiv	r1, r1, r6
    38aa:	fb06 fe01 	mul.w	lr, r6, r1
    38ae:	ea6f 0e0e 	mvn.w	lr, lr
    38b2:	4638      	mov	r0, r7
    38b4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    38b8:	2a09      	cmp	r2, #9
    38ba:	d811      	bhi.n	38e0 <_strtoul_l.isra.0+0x9c>
    38bc:	4614      	mov	r4, r2
    38be:	42a6      	cmp	r6, r4
    38c0:	dd1d      	ble.n	38fe <_strtoul_l.isra.0+0xba>
    38c2:	2f00      	cmp	r7, #0
    38c4:	db18      	blt.n	38f8 <_strtoul_l.isra.0+0xb4>
    38c6:	4281      	cmp	r1, r0
    38c8:	d316      	bcc.n	38f8 <_strtoul_l.isra.0+0xb4>
    38ca:	d101      	bne.n	38d0 <_strtoul_l.isra.0+0x8c>
    38cc:	45a6      	cmp	lr, r4
    38ce:	db13      	blt.n	38f8 <_strtoul_l.isra.0+0xb4>
    38d0:	fb00 4006 	mla	r0, r0, r6, r4
    38d4:	2701      	movs	r7, #1
    38d6:	f815 4b01 	ldrb.w	r4, [r5], #1
    38da:	e7eb      	b.n	38b4 <_strtoul_l.isra.0+0x70>
    38dc:	260a      	movs	r6, #10
    38de:	e7df      	b.n	38a0 <_strtoul_l.isra.0+0x5c>
    38e0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    38e4:	2a19      	cmp	r2, #25
    38e6:	d801      	bhi.n	38ec <_strtoul_l.isra.0+0xa8>
    38e8:	3c37      	subs	r4, #55	; 0x37
    38ea:	e7e8      	b.n	38be <_strtoul_l.isra.0+0x7a>
    38ec:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    38f0:	2a19      	cmp	r2, #25
    38f2:	d804      	bhi.n	38fe <_strtoul_l.isra.0+0xba>
    38f4:	3c57      	subs	r4, #87	; 0x57
    38f6:	e7e2      	b.n	38be <_strtoul_l.isra.0+0x7a>
    38f8:	f04f 37ff 	mov.w	r7, #4294967295
    38fc:	e7eb      	b.n	38d6 <_strtoul_l.isra.0+0x92>
    38fe:	2f00      	cmp	r7, #0
    3900:	da09      	bge.n	3916 <_strtoul_l.isra.0+0xd2>
    3902:	2322      	movs	r3, #34	; 0x22
    3904:	f8c8 3000 	str.w	r3, [r8]
    3908:	f04f 30ff 	mov.w	r0, #4294967295
    390c:	f1ba 0f00 	cmp.w	sl, #0
    3910:	d107      	bne.n	3922 <_strtoul_l.isra.0+0xde>
    3912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3916:	b103      	cbz	r3, 391a <_strtoul_l.isra.0+0xd6>
    3918:	4240      	negs	r0, r0
    391a:	f1ba 0f00 	cmp.w	sl, #0
    391e:	d00c      	beq.n	393a <_strtoul_l.isra.0+0xf6>
    3920:	b127      	cbz	r7, 392c <_strtoul_l.isra.0+0xe8>
    3922:	3d01      	subs	r5, #1
    3924:	f8ca 5000 	str.w	r5, [sl]
    3928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    392c:	464d      	mov	r5, r9
    392e:	e7f9      	b.n	3924 <_strtoul_l.isra.0+0xe0>
    3930:	2430      	movs	r4, #48	; 0x30
    3932:	2e00      	cmp	r6, #0
    3934:	d1b4      	bne.n	38a0 <_strtoul_l.isra.0+0x5c>
    3936:	2608      	movs	r6, #8
    3938:	e7b2      	b.n	38a0 <_strtoul_l.isra.0+0x5c>
    393a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00003940 <_strtoul_r>:
    3940:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3942:	4c06      	ldr	r4, [pc, #24]	; (395c <_strtoul_r+0x1c>)
    3944:	4d06      	ldr	r5, [pc, #24]	; (3960 <_strtoul_r+0x20>)
    3946:	6824      	ldr	r4, [r4, #0]
    3948:	6a24      	ldr	r4, [r4, #32]
    394a:	2c00      	cmp	r4, #0
    394c:	bf08      	it	eq
    394e:	462c      	moveq	r4, r5
    3950:	9400      	str	r4, [sp, #0]
    3952:	f7ff ff77 	bl	3844 <_strtoul_l.isra.0>
    3956:	b003      	add	sp, #12
    3958:	bd30      	pop	{r4, r5, pc}
    395a:	bf00      	nop
    395c:	20000278 	.word	0x20000278
    3960:	200002dc 	.word	0x200002dc

00003964 <__submore>:
    3964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3968:	460c      	mov	r4, r1
    396a:	6b49      	ldr	r1, [r1, #52]	; 0x34
    396c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3970:	4299      	cmp	r1, r3
    3972:	d11e      	bne.n	39b2 <__submore+0x4e>
    3974:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3978:	f7fe fcf6 	bl	2368 <_malloc_r>
    397c:	b918      	cbnz	r0, 3986 <__submore+0x22>
    397e:	f04f 30ff 	mov.w	r0, #4294967295
    3982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3986:	f44f 6380 	mov.w	r3, #1024	; 0x400
    398a:	63a3      	str	r3, [r4, #56]	; 0x38
    398c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    3990:	6360      	str	r0, [r4, #52]	; 0x34
    3992:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    3996:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    399a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    399e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    39a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    39a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    39aa:	6020      	str	r0, [r4, #0]
    39ac:	2000      	movs	r0, #0
    39ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39b2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    39b4:	0077      	lsls	r7, r6, #1
    39b6:	463a      	mov	r2, r7
    39b8:	f000 f925 	bl	3c06 <_realloc_r>
    39bc:	4605      	mov	r5, r0
    39be:	2800      	cmp	r0, #0
    39c0:	d0dd      	beq.n	397e <__submore+0x1a>
    39c2:	eb00 0806 	add.w	r8, r0, r6
    39c6:	4601      	mov	r1, r0
    39c8:	4632      	mov	r2, r6
    39ca:	4640      	mov	r0, r8
    39cc:	f000 f910 	bl	3bf0 <memcpy>
    39d0:	f8c4 8000 	str.w	r8, [r4]
    39d4:	6365      	str	r5, [r4, #52]	; 0x34
    39d6:	63a7      	str	r7, [r4, #56]	; 0x38
    39d8:	e7e8      	b.n	39ac <__submore+0x48>
	...

000039dc <_ungetc_r>:
    39dc:	1c4b      	adds	r3, r1, #1
    39de:	b570      	push	{r4, r5, r6, lr}
    39e0:	4606      	mov	r6, r0
    39e2:	460d      	mov	r5, r1
    39e4:	4614      	mov	r4, r2
    39e6:	d103      	bne.n	39f0 <_ungetc_r+0x14>
    39e8:	f04f 35ff 	mov.w	r5, #4294967295
    39ec:	4628      	mov	r0, r5
    39ee:	bd70      	pop	{r4, r5, r6, pc}
    39f0:	b118      	cbz	r0, 39fa <_ungetc_r+0x1e>
    39f2:	6983      	ldr	r3, [r0, #24]
    39f4:	b90b      	cbnz	r3, 39fa <_ungetc_r+0x1e>
    39f6:	f7fe fb97 	bl	2128 <__sinit>
    39fa:	4b2e      	ldr	r3, [pc, #184]	; (3ab4 <_ungetc_r+0xd8>)
    39fc:	429c      	cmp	r4, r3
    39fe:	d12c      	bne.n	3a5a <_ungetc_r+0x7e>
    3a00:	6874      	ldr	r4, [r6, #4]
    3a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3a06:	f023 0320 	bic.w	r3, r3, #32
    3a0a:	81a3      	strh	r3, [r4, #12]
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	0759      	lsls	r1, r3, #29
    3a10:	d413      	bmi.n	3a3a <_ungetc_r+0x5e>
    3a12:	06da      	lsls	r2, r3, #27
    3a14:	d5e8      	bpl.n	39e8 <_ungetc_r+0xc>
    3a16:	071b      	lsls	r3, r3, #28
    3a18:	d50b      	bpl.n	3a32 <_ungetc_r+0x56>
    3a1a:	4621      	mov	r1, r4
    3a1c:	4630      	mov	r0, r6
    3a1e:	f7fe fb07 	bl	2030 <_fflush_r>
    3a22:	2800      	cmp	r0, #0
    3a24:	d1e0      	bne.n	39e8 <_ungetc_r+0xc>
    3a26:	89a3      	ldrh	r3, [r4, #12]
    3a28:	60a0      	str	r0, [r4, #8]
    3a2a:	f023 0308 	bic.w	r3, r3, #8
    3a2e:	81a3      	strh	r3, [r4, #12]
    3a30:	61a0      	str	r0, [r4, #24]
    3a32:	89a3      	ldrh	r3, [r4, #12]
    3a34:	f043 0304 	orr.w	r3, r3, #4
    3a38:	81a3      	strh	r3, [r4, #12]
    3a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3a3c:	6862      	ldr	r2, [r4, #4]
    3a3e:	b2ed      	uxtb	r5, r5
    3a40:	b1e3      	cbz	r3, 3a7c <_ungetc_r+0xa0>
    3a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a44:	429a      	cmp	r2, r3
    3a46:	da12      	bge.n	3a6e <_ungetc_r+0x92>
    3a48:	6823      	ldr	r3, [r4, #0]
    3a4a:	1e5a      	subs	r2, r3, #1
    3a4c:	6022      	str	r2, [r4, #0]
    3a4e:	f803 5c01 	strb.w	r5, [r3, #-1]
    3a52:	6863      	ldr	r3, [r4, #4]
    3a54:	3301      	adds	r3, #1
    3a56:	6063      	str	r3, [r4, #4]
    3a58:	e7c8      	b.n	39ec <_ungetc_r+0x10>
    3a5a:	4b17      	ldr	r3, [pc, #92]	; (3ab8 <_ungetc_r+0xdc>)
    3a5c:	429c      	cmp	r4, r3
    3a5e:	d101      	bne.n	3a64 <_ungetc_r+0x88>
    3a60:	68b4      	ldr	r4, [r6, #8]
    3a62:	e7ce      	b.n	3a02 <_ungetc_r+0x26>
    3a64:	4b15      	ldr	r3, [pc, #84]	; (3abc <_ungetc_r+0xe0>)
    3a66:	429c      	cmp	r4, r3
    3a68:	bf08      	it	eq
    3a6a:	68f4      	ldreq	r4, [r6, #12]
    3a6c:	e7c9      	b.n	3a02 <_ungetc_r+0x26>
    3a6e:	4621      	mov	r1, r4
    3a70:	4630      	mov	r0, r6
    3a72:	f7ff ff77 	bl	3964 <__submore>
    3a76:	2800      	cmp	r0, #0
    3a78:	d0e6      	beq.n	3a48 <_ungetc_r+0x6c>
    3a7a:	e7b5      	b.n	39e8 <_ungetc_r+0xc>
    3a7c:	6921      	ldr	r1, [r4, #16]
    3a7e:	6823      	ldr	r3, [r4, #0]
    3a80:	b151      	cbz	r1, 3a98 <_ungetc_r+0xbc>
    3a82:	4299      	cmp	r1, r3
    3a84:	d208      	bcs.n	3a98 <_ungetc_r+0xbc>
    3a86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    3a8a:	428d      	cmp	r5, r1
    3a8c:	d104      	bne.n	3a98 <_ungetc_r+0xbc>
    3a8e:	3b01      	subs	r3, #1
    3a90:	3201      	adds	r2, #1
    3a92:	6023      	str	r3, [r4, #0]
    3a94:	6062      	str	r2, [r4, #4]
    3a96:	e7a9      	b.n	39ec <_ungetc_r+0x10>
    3a98:	63e3      	str	r3, [r4, #60]	; 0x3c
    3a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3a9e:	6363      	str	r3, [r4, #52]	; 0x34
    3aa0:	2303      	movs	r3, #3
    3aa2:	63a3      	str	r3, [r4, #56]	; 0x38
    3aa4:	4623      	mov	r3, r4
    3aa6:	6422      	str	r2, [r4, #64]	; 0x40
    3aa8:	f803 5f46 	strb.w	r5, [r3, #70]!
    3aac:	6023      	str	r3, [r4, #0]
    3aae:	2301      	movs	r3, #1
    3ab0:	e7d1      	b.n	3a56 <_ungetc_r+0x7a>
    3ab2:	bf00      	nop
    3ab4:	00004230 	.word	0x00004230
    3ab8:	00004250 	.word	0x00004250
    3abc:	00004210 	.word	0x00004210

00003ac0 <_fstat_r>:
    3ac0:	b538      	push	{r3, r4, r5, lr}
    3ac2:	4c07      	ldr	r4, [pc, #28]	; (3ae0 <_fstat_r+0x20>)
    3ac4:	2300      	movs	r3, #0
    3ac6:	4605      	mov	r5, r0
    3ac8:	4608      	mov	r0, r1
    3aca:	4611      	mov	r1, r2
    3acc:	6023      	str	r3, [r4, #0]
    3ace:	f7fc ff0a 	bl	8e6 <_fstat>
    3ad2:	1c43      	adds	r3, r0, #1
    3ad4:	d102      	bne.n	3adc <_fstat_r+0x1c>
    3ad6:	6823      	ldr	r3, [r4, #0]
    3ad8:	b103      	cbz	r3, 3adc <_fstat_r+0x1c>
    3ada:	602b      	str	r3, [r5, #0]
    3adc:	bd38      	pop	{r3, r4, r5, pc}
    3ade:	bf00      	nop
    3ae0:	20000570 	.word	0x20000570

00003ae4 <_isatty_r>:
    3ae4:	b538      	push	{r3, r4, r5, lr}
    3ae6:	4c06      	ldr	r4, [pc, #24]	; (3b00 <_isatty_r+0x1c>)
    3ae8:	2300      	movs	r3, #0
    3aea:	4605      	mov	r5, r0
    3aec:	4608      	mov	r0, r1
    3aee:	6023      	str	r3, [r4, #0]
    3af0:	f7fc fefe 	bl	8f0 <_isatty>
    3af4:	1c43      	adds	r3, r0, #1
    3af6:	d102      	bne.n	3afe <_isatty_r+0x1a>
    3af8:	6823      	ldr	r3, [r4, #0]
    3afa:	b103      	cbz	r3, 3afe <_isatty_r+0x1a>
    3afc:	602b      	str	r3, [r5, #0]
    3afe:	bd38      	pop	{r3, r4, r5, pc}
    3b00:	20000570 	.word	0x20000570

00003b04 <__locale_ctype_ptr_l>:
    3b04:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    3b08:	4770      	bx	lr
	...

00003b0c <__locale_ctype_ptr>:
    3b0c:	4b04      	ldr	r3, [pc, #16]	; (3b20 <__locale_ctype_ptr+0x14>)
    3b0e:	4a05      	ldr	r2, [pc, #20]	; (3b24 <__locale_ctype_ptr+0x18>)
    3b10:	681b      	ldr	r3, [r3, #0]
    3b12:	6a1b      	ldr	r3, [r3, #32]
    3b14:	2b00      	cmp	r3, #0
    3b16:	bf08      	it	eq
    3b18:	4613      	moveq	r3, r2
    3b1a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    3b1e:	4770      	bx	lr
    3b20:	20000278 	.word	0x20000278
    3b24:	200002dc 	.word	0x200002dc

00003b28 <__ascii_mbtowc>:
    3b28:	b082      	sub	sp, #8
    3b2a:	b901      	cbnz	r1, 3b2e <__ascii_mbtowc+0x6>
    3b2c:	a901      	add	r1, sp, #4
    3b2e:	b142      	cbz	r2, 3b42 <__ascii_mbtowc+0x1a>
    3b30:	b14b      	cbz	r3, 3b46 <__ascii_mbtowc+0x1e>
    3b32:	7813      	ldrb	r3, [r2, #0]
    3b34:	600b      	str	r3, [r1, #0]
    3b36:	7812      	ldrb	r2, [r2, #0]
    3b38:	1c10      	adds	r0, r2, #0
    3b3a:	bf18      	it	ne
    3b3c:	2001      	movne	r0, #1
    3b3e:	b002      	add	sp, #8
    3b40:	4770      	bx	lr
    3b42:	4610      	mov	r0, r2
    3b44:	e7fb      	b.n	3b3e <__ascii_mbtowc+0x16>
    3b46:	f06f 0001 	mvn.w	r0, #1
    3b4a:	e7f8      	b.n	3b3e <__ascii_mbtowc+0x16>
    3b4c:	0000      	movs	r0, r0
	...

00003b50 <memchr>:
    3b50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3b54:	2a10      	cmp	r2, #16
    3b56:	db2b      	blt.n	3bb0 <memchr+0x60>
    3b58:	f010 0f07 	tst.w	r0, #7
    3b5c:	d008      	beq.n	3b70 <memchr+0x20>
    3b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3b62:	3a01      	subs	r2, #1
    3b64:	428b      	cmp	r3, r1
    3b66:	d02d      	beq.n	3bc4 <memchr+0x74>
    3b68:	f010 0f07 	tst.w	r0, #7
    3b6c:	b342      	cbz	r2, 3bc0 <memchr+0x70>
    3b6e:	d1f6      	bne.n	3b5e <memchr+0xe>
    3b70:	b4f0      	push	{r4, r5, r6, r7}
    3b72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3b76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    3b7a:	f022 0407 	bic.w	r4, r2, #7
    3b7e:	f07f 0700 	mvns.w	r7, #0
    3b82:	2300      	movs	r3, #0
    3b84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3b88:	3c08      	subs	r4, #8
    3b8a:	ea85 0501 	eor.w	r5, r5, r1
    3b8e:	ea86 0601 	eor.w	r6, r6, r1
    3b92:	fa85 f547 	uadd8	r5, r5, r7
    3b96:	faa3 f587 	sel	r5, r3, r7
    3b9a:	fa86 f647 	uadd8	r6, r6, r7
    3b9e:	faa5 f687 	sel	r6, r5, r7
    3ba2:	b98e      	cbnz	r6, 3bc8 <memchr+0x78>
    3ba4:	d1ee      	bne.n	3b84 <memchr+0x34>
    3ba6:	bcf0      	pop	{r4, r5, r6, r7}
    3ba8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3bac:	f002 0207 	and.w	r2, r2, #7
    3bb0:	b132      	cbz	r2, 3bc0 <memchr+0x70>
    3bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
    3bb6:	3a01      	subs	r2, #1
    3bb8:	ea83 0301 	eor.w	r3, r3, r1
    3bbc:	b113      	cbz	r3, 3bc4 <memchr+0x74>
    3bbe:	d1f8      	bne.n	3bb2 <memchr+0x62>
    3bc0:	2000      	movs	r0, #0
    3bc2:	4770      	bx	lr
    3bc4:	3801      	subs	r0, #1
    3bc6:	4770      	bx	lr
    3bc8:	2d00      	cmp	r5, #0
    3bca:	bf06      	itte	eq
    3bcc:	4635      	moveq	r5, r6
    3bce:	3803      	subeq	r0, #3
    3bd0:	3807      	subne	r0, #7
    3bd2:	f015 0f01 	tst.w	r5, #1
    3bd6:	d107      	bne.n	3be8 <memchr+0x98>
    3bd8:	3001      	adds	r0, #1
    3bda:	f415 7f80 	tst.w	r5, #256	; 0x100
    3bde:	bf02      	ittt	eq
    3be0:	3001      	addeq	r0, #1
    3be2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3be6:	3001      	addeq	r0, #1
    3be8:	bcf0      	pop	{r4, r5, r6, r7}
    3bea:	3801      	subs	r0, #1
    3bec:	4770      	bx	lr
    3bee:	bf00      	nop

00003bf0 <memcpy>:
    3bf0:	b510      	push	{r4, lr}
    3bf2:	1e43      	subs	r3, r0, #1
    3bf4:	440a      	add	r2, r1
    3bf6:	4291      	cmp	r1, r2
    3bf8:	d100      	bne.n	3bfc <memcpy+0xc>
    3bfa:	bd10      	pop	{r4, pc}
    3bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c00:	f803 4f01 	strb.w	r4, [r3, #1]!
    3c04:	e7f7      	b.n	3bf6 <memcpy+0x6>

00003c06 <_realloc_r>:
    3c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c08:	4607      	mov	r7, r0
    3c0a:	4614      	mov	r4, r2
    3c0c:	460e      	mov	r6, r1
    3c0e:	b921      	cbnz	r1, 3c1a <_realloc_r+0x14>
    3c10:	4611      	mov	r1, r2
    3c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3c16:	f7fe bba7 	b.w	2368 <_malloc_r>
    3c1a:	b922      	cbnz	r2, 3c26 <_realloc_r+0x20>
    3c1c:	f7fe fb56 	bl	22cc <_free_r>
    3c20:	4625      	mov	r5, r4
    3c22:	4628      	mov	r0, r5
    3c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c26:	f000 f821 	bl	3c6c <_malloc_usable_size_r>
    3c2a:	4284      	cmp	r4, r0
    3c2c:	d90f      	bls.n	3c4e <_realloc_r+0x48>
    3c2e:	4621      	mov	r1, r4
    3c30:	4638      	mov	r0, r7
    3c32:	f7fe fb99 	bl	2368 <_malloc_r>
    3c36:	4605      	mov	r5, r0
    3c38:	2800      	cmp	r0, #0
    3c3a:	d0f2      	beq.n	3c22 <_realloc_r+0x1c>
    3c3c:	4631      	mov	r1, r6
    3c3e:	4622      	mov	r2, r4
    3c40:	f7ff ffd6 	bl	3bf0 <memcpy>
    3c44:	4631      	mov	r1, r6
    3c46:	4638      	mov	r0, r7
    3c48:	f7fe fb40 	bl	22cc <_free_r>
    3c4c:	e7e9      	b.n	3c22 <_realloc_r+0x1c>
    3c4e:	4635      	mov	r5, r6
    3c50:	e7e7      	b.n	3c22 <_realloc_r+0x1c>

00003c52 <__ascii_wctomb>:
    3c52:	b149      	cbz	r1, 3c68 <__ascii_wctomb+0x16>
    3c54:	2aff      	cmp	r2, #255	; 0xff
    3c56:	bf85      	ittet	hi
    3c58:	238a      	movhi	r3, #138	; 0x8a
    3c5a:	6003      	strhi	r3, [r0, #0]
    3c5c:	700a      	strbls	r2, [r1, #0]
    3c5e:	f04f 30ff 	movhi.w	r0, #4294967295
    3c62:	bf98      	it	ls
    3c64:	2001      	movls	r0, #1
    3c66:	4770      	bx	lr
    3c68:	4608      	mov	r0, r1
    3c6a:	4770      	bx	lr

00003c6c <_malloc_usable_size_r>:
    3c6c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    3c70:	2800      	cmp	r0, #0
    3c72:	f1a0 0004 	sub.w	r0, r0, #4
    3c76:	bfbc      	itt	lt
    3c78:	580b      	ldrlt	r3, [r1, r0]
    3c7a:	18c0      	addlt	r0, r0, r3
    3c7c:	4770      	bx	lr
    3c7e:	0000      	movs	r0, r0
    3c80:	682f2e2e 	.word	0x682f2e2e
    3c84:	732f6c61 	.word	0x732f6c61
    3c88:	682f6372 	.word	0x682f6372
    3c8c:	695f6c61 	.word	0x695f6c61
    3c90:	00632e6f 	.word	0x00632e6f
    3c94:	682f2e2e 	.word	0x682f2e2e
    3c98:	732f6c61 	.word	0x732f6c61
    3c9c:	682f6372 	.word	0x682f6372
    3ca0:	6d5f6c61 	.word	0x6d5f6c61
    3ca4:	735f6963 	.word	0x735f6963
    3ca8:	2e636e79 	.word	0x2e636e79
    3cac:	00000063 	.word	0x00000063
    3cb0:	682f2e2e 	.word	0x682f2e2e
    3cb4:	732f6c61 	.word	0x732f6c61
    3cb8:	682f6372 	.word	0x682f6372
    3cbc:	755f6c61 	.word	0x755f6c61
    3cc0:	74726173 	.word	0x74726173
    3cc4:	6e79735f 	.word	0x6e79735f
    3cc8:	00632e63 	.word	0x00632e63
    3ccc:	682f2e2e 	.word	0x682f2e2e
    3cd0:	732f6c70 	.word	0x732f6c70
    3cd4:	2f636864 	.word	0x2f636864
    3cd8:	5f6c7068 	.word	0x5f6c7068
    3cdc:	63686473 	.word	0x63686473
    3ce0:	0000632e 	.word	0x0000632e
    3ce4:	40003000 	.word	0x40003000
    3ce8:	40003400 	.word	0x40003400
    3cec:	41012000 	.word	0x41012000
    3cf0:	41014000 	.word	0x41014000
    3cf4:	43000000 	.word	0x43000000
    3cf8:	43000400 	.word	0x43000400
    3cfc:	43000800 	.word	0x43000800
    3d00:	43000c00 	.word	0x43000c00

00003d04 <_usarts>:
    3d04:	00000000 40100004 00030000 00700002     .......@......p.
    3d14:	0000d8ad 00000000 00000002 40100004     ...............@
    3d24:	00030000 00700002 0000d8ad 00000000     ......p.........

00003d34 <_i2cms>:
	...
    3d4c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3d5c:	65735f6c 6d6f6372 0000632e 00007325     l_sercom.c..%s..
    3d6c:	65530a0d 7463656c 6f206465 6f697470     ..Selected optio
    3d7c:	7369206e 0d642520 0000000a 65520a0d     n is %d.......Re
    3d8c:	6e727574 20676e69 6d206f74 206e6961     turning to main 
    3d9c:	756e656d 0000000d 74530a0d 69747261     menu......Starti
    3dac:	4c20676e 52414469 746f6d20 000d726f     ng LiDAR motor..
    3dbc:	74530a0d 6970706f 4c20676e 52414469     ..Stopping LiDAR
    3dcc:	746f6d20 000d726f 65520a0d 73657571      motor....Reques
    3ddc:	676e6974 44694c20 73205241 0d706f74     ting LiDAR stop.
    3dec:	00000000 52450a0d 3a524f52 746f6e20     ......ERROR: not
    3dfc:	706d6920 656d656c 6465746e 74657920      implemented yet
    3e0c:	0000000d 65520a0d 73657571 676e6974     ......Requesting
    3e1c:	44694c20 72205241 74657365 0000000d      LiDAR reset....
    3e2c:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    3e3c:	73205241 74726174 61637320 00000d6e     AR start scan...
    3e4c:	65520a0d 73657571 676e6974 44694c20     ..Requesting LiD
    3e5c:	73205241 74726174 70786520 73736572     AR start express
    3e6c:	61637320 00000d6e 65520a0d 73657571      scan.....Reques
    3e7c:	676e6974 44694c20 73205241 74726174     ting LiDAR start
    3e8c:	726f6620 73206563 0d6e6163 00000000      force scan.....
    3e9c:	65520a0d 65697274 676e6976 44694c20     ..Retrieving LiD
    3eac:	69205241 0d6f666e 00000000 65520a0d     AR info.......Re
    3ebc:	65697274 676e6976 44694c20 68205241     trieving LiDAR h
    3ecc:	746c6165 00000d68 65520a0d 65697274     ealth.....Retrie
    3edc:	676e6976 44694c20 73205241 6c706d61     ving LiDAR sampl
    3eec:	74617265 000d7365 6e490a0d 696c6176     erates....Invali
    3efc:	706f2064 6e6f6974 0000000d 21210a0d     d option......!!
    3f0c:	21212121 49202121 6148206e 61466472     !!!!!! In HardFa
    3f1c:	5f746c75 646e6148 2072656c 21212121     ult_Handler !!!!
    3f2c:	21212121 0000000d 0a0d0a0d 3d3d3d3d     !!!!........====
    3f3c:	3d3d3d3d 4144694c 75412052 616d6f74     ====LiDAR Automa
    3f4c:	20646574 7070614d 20676e69 74737953     ted Mapping Syst
    3f5c:	28206d65 534d414c 3d3d3d29 3d3d3d3d     em (LAMS)=======
    3f6c:	00000d3d 6e490a0d 696c6176 706f2064     =.....Invalid op
    3f7c:	6e6f6974 00000d20 6e450a0d 20726574     tion .....Enter 
    3f8c:	6c676e61 3e3e2065 00000020 52450a0d     angle >> .....ER
    3f9c:	3a524f52 766e4920 64696c61 676e6120     ROR: Invalid ang
    3fac:	202e656c 6c676e41 756d2065 62207473     le. Angle must b
    3fbc:	65622065 65657774 2030206e 20646e61     e between 0 and 
    3fcc:	0d303831 0000000a 65530a0d 6e697474     180.......Settin
    3fdc:	65732067 206f7672 6c676e61 6f742065     g servo angle to
    3fec:	64302520 00000a0d 61440a0d 61206174      %0d......Data a
    3ffc:	65742074 61207473 65726464 25207373     t test address %
    400c:	73692064 25203d20 000a0d64 6e490a0d     d is = %d.....In
    401c:	74726576 74206465 64206568 20617461     verted the data 
    402c:	74207461 20747365 72646461 20737365     at test address 
    403c:	20646e61 74697277 0d6e6574 00000000     and written.....
    404c:	6c500a0d 65736165 6e6f6320 75676966     ..Please configu
    405c:	53206572 204b4c42 65737566 206f7420     re SBLK fuse to 
    406c:	6f6c6c61 65746163 616d5320 45457472     allocate SmartEE
    407c:	4d4f5250 65726120 00000d61 64323025     PROM area...%02d
    408c:	00000020 6d530a0d 45747261 4f525045      .....SmartEEPRO
    409c:	6f63204d 6961746e 7620736e 64696c61     M contains valid
    40ac:	74616420 000d2061 74530a0d 6e69726f      data ....Storin
    40bc:	69732067 74616e67 20657275 53206f74     g signature to S
    40cc:	7472616d 52504545 61204d4f 65726464     martEEPROM addre
    40dc:	30207373 20303078 30206f74 0d333078     ss 0x00 to 0x03.
    40ec:	00000000 75460a0d 76206573 65756c61     ......Fuse value
    40fc:	6f662073 42532072 3d204b4c 2c642520     s for SBLK = %d,
    410c:	5a535020 25203d20 53202e64 74206565      PSZ = %d. See t
    411c:	74206568 656c6261 6d532720 45747261     he table 'SmartE
    412c:	4f525045 6956204d 61757472 0909206c     EPROM Virtual ..
    413c:	657a6953 206e6920 65747942 69202773     Size in Bytes' i
    414c:	6874206e 61442065 68736174 20746565     n the Datasheet 
    415c:	63206f74 75636c61 6574616c 746f7420     to calculate tot
    416c:	61206c61 6c696176 656c6261 74796220     al available byt
    417c:	0d207365 0000000a 45450a0d 4d4f5250     es .......EEPROM
    418c:	74614420 74612061 72696620 25207473      Data at first %
    419c:	6f6c2064 69746163 3a736e6f 000a0d20     d locations: ...
    41ac:	6e450a0d 20726574 72646461 20737365     ..Enter address 
    41bc:	00203e3e 52450a0d 3a524f52 64644120     >> ...ERROR: Add
    41cc:	73736572 766e6920 64696c61 7254202e     ress invalid. Tr
    41dc:	67612079 206e6961 0000000d 6e450a0d     y again ......En
    41ec:	20726574 61746164 203e3e20 00000000     ter data >> ....
    41fc:	72570a0d 65747469 6425206e 20746120     ..Written %d at 
    420c:	00006425                                %d..

00004210 <__sf_fake_stderr>:
	...

00004230 <__sf_fake_stdin>:
	...

00004250 <__sf_fake_stdout>:
	...

00004270 <_global_impure_ptr>:
    4270:	2000027c 2b302d23 6c680020 6665004c     |.. #-0+ .hlL.ef
    4280:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    4290:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    42a0:	64636261 00006665 000042c6 000042c9     abcdef...B...B..
    42b0:	000042cc 61462d41 3938662d 33323130     .B..A-Fa-f890123
    42c0:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    42d0:	534f5000 2e005849 20200000                       .POSIX...

000042d9 <_ctype_>:
    42d9:	20202000 20202020 28282020 20282828     .         ((((( 
    42e9:	20202020 20202020 20202020 20202020                     
    42f9:	10108820 10101010 10101010 10101010      ...............
    4309:	04040410 04040404 10040404 10101010     ................
    4319:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4329:	01010101 01010101 01010101 10101010     ................
    4339:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4349:	02020202 02020202 02020202 10101010     ................
    4359:	00000020 00000000 00000000 00000000      ...............
	...

000043dc <_init>:
    43dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43de:	bf00      	nop
    43e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    43e2:	bc08      	pop	{r3}
    43e4:	469e      	mov	lr, r3
    43e6:	4770      	bx	lr

000043e8 <__init_array_start>:
    43e8:	00000289 	.word	0x00000289

000043ec <_fini>:
    43ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43ee:	bf00      	nop
    43f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    43f2:	bc08      	pop	{r3}
    43f4:	469e      	mov	lr, r3
    43f6:	4770      	bx	lr

000043f8 <__fini_array_start>:
    43f8:	00000265 	.word	0x00000265
