
lams-xplained-pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004324  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000318  20000000  00004324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020318  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020318  2**0
                  CONTENTS
  4 .bss          00000134  20000318  00004640  00020318  2**3
                  ALLOC
  5 .stack        00010004  2000044c  00004774  00020318  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020346  2**0
                  CONTENTS, READONLY
  8 .debug_info   00031e06  00000000  00000000  0002039f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004649  00000000  00000000  000521a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f951  00000000  00000000  000567ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c80  00000000  00000000  0006613f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010a8  00000000  00000000  00066dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000386c7  00000000  00000000  00067e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019106  00000000  00000000  000a052e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125f25  00000000  00000000  000b9634  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002e00  00000000  00000000  001df55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 04 01 20 f1 02 00 00 ed 02 00 00 d9 10 00 00     P.. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	89 0b 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 dd 0f 00 00 ed 02 00 00     ................
     1f4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000318 	.word	0x20000318
     280:	00000000 	.word	0x00000000
     284:	00004324 	.word	0x00004324

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004324 	.word	0x00004324
     2c4:	2000031c 	.word	0x2000031c
     2c8:	00004324 	.word	0x00004324
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	sd_mmc_stack_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000769 	.word	0x00000769
     2e4:	0000174d 	.word	0x0000174d
     2e8:	000011d9 	.word	0x000011d9

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	00004324 	.word	0x00004324
     36c:	20000318 	.word	0x20000318
     370:	2000044c 	.word	0x2000044c
     374:	20000318 	.word	0x20000318
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	00002295 	.word	0x00002295
     384:	000010ed 	.word	0x000010ed

00000388 <LIDAR_USART_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     388:	4b10      	ldr	r3, [pc, #64]	; (3cc <LIDAR_USART_PORT_init+0x44>)
     38a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     38e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     392:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     39e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3be:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3c2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     3ca:	4770      	bx	lr
     3cc:	41008000 	.word	0x41008000

000003d0 <LIDAR_USART_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <LIDAR_USART_CLOCK_init+0x1c>)
     3d2:	2240      	movs	r2, #64	; 0x40
     3d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     3d8:	2243      	movs	r2, #67	; 0x43
     3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     3de:	4a04      	ldr	r2, [pc, #16]	; (3f0 <LIDAR_USART_CLOCK_init+0x20>)
     3e0:	6953      	ldr	r3, [r2, #20]
     3e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     3e6:	6153      	str	r3, [r2, #20]
     3e8:	4770      	bx	lr
     3ea:	bf00      	nop
     3ec:	40001c00 	.word	0x40001c00
     3f0:	40000800 	.word	0x40000800

000003f4 <LIDAR_USART_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void LIDAR_USART_init(void)
{
     3f4:	b508      	push	{r3, lr}
	LIDAR_USART_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <LIDAR_USART_init+0x18>)
     3f8:	4798      	blx	r3
	usart_sync_init(&LIDAR_USART, SERCOM0, (void *)NULL);
     3fa:	2200      	movs	r2, #0
     3fc:	4904      	ldr	r1, [pc, #16]	; (410 <LIDAR_USART_init+0x1c>)
     3fe:	4805      	ldr	r0, [pc, #20]	; (414 <LIDAR_USART_init+0x20>)
     400:	4b05      	ldr	r3, [pc, #20]	; (418 <LIDAR_USART_init+0x24>)
     402:	4798      	blx	r3
	LIDAR_USART_PORT_init();
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <LIDAR_USART_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d1 	.word	0x000003d1
     410:	40003000 	.word	0x40003000
     414:	20000428 	.word	0x20000428
     418:	00000a31 	.word	0x00000a31
     41c:	00000389 	.word	0x00000389

00000420 <STDIO_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     420:	4b10      	ldr	r3, [pc, #64]	; (464 <STDIO_IO_PORT_init+0x44>)
     422:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     426:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     432:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     436:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     43a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     452:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     456:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     45a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     462:	4770      	bx	lr
     464:	41008000 	.word	0x41008000

00000468 <STDIO_IO_CLOCK_init>:
     468:	4b06      	ldr	r3, [pc, #24]	; (484 <STDIO_IO_CLOCK_init+0x1c>)
     46a:	2240      	movs	r2, #64	; 0x40
     46c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     470:	2243      	movs	r2, #67	; 0x43
     472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     476:	4a04      	ldr	r2, [pc, #16]	; (488 <STDIO_IO_CLOCK_init+0x20>)
     478:	6993      	ldr	r3, [r2, #24]
     47a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     47e:	6193      	str	r3, [r2, #24]
     480:	4770      	bx	lr
     482:	bf00      	nop
     484:	40001c00 	.word	0x40001c00
     488:	40000800 	.word	0x40000800

0000048c <STDIO_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void STDIO_IO_init(void)
{
     48c:	b508      	push	{r3, lr}
	STDIO_IO_CLOCK_init();
     48e:	4b05      	ldr	r3, [pc, #20]	; (4a4 <STDIO_IO_init+0x18>)
     490:	4798      	blx	r3
	usart_sync_init(&STDIO_IO, SERCOM2, (void *)NULL);
     492:	2200      	movs	r2, #0
     494:	4904      	ldr	r1, [pc, #16]	; (4a8 <STDIO_IO_init+0x1c>)
     496:	4805      	ldr	r0, [pc, #20]	; (4ac <STDIO_IO_init+0x20>)
     498:	4b05      	ldr	r3, [pc, #20]	; (4b0 <STDIO_IO_init+0x24>)
     49a:	4798      	blx	r3
	STDIO_IO_PORT_init();
     49c:	4b05      	ldr	r3, [pc, #20]	; (4b4 <STDIO_IO_init+0x28>)
     49e:	4798      	blx	r3
     4a0:	bd08      	pop	{r3, pc}
     4a2:	bf00      	nop
     4a4:	00000469 	.word	0x00000469
     4a8:	41012000 	.word	0x41012000
     4ac:	200003e8 	.word	0x200003e8
     4b0:	00000a31 	.word	0x00000a31
     4b4:	00000421 	.word	0x00000421

000004b8 <SDHC_IO_BUS_PORT_init>:
}

void SDHC_IO_BUS_PORT_init(void)
{
     4b8:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ba:	4b5e      	ldr	r3, [pc, #376]	; (634 <SDHC_IO_BUS_PORT_init+0x17c>)
     4bc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     4c0:	6098      	str	r0, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     4c6:	629a      	str	r2, [r3, #40]	; 0x28
     4c8:	4c5b      	ldr	r4, [pc, #364]	; (638 <SDHC_IO_BUS_PORT_init+0x180>)
     4ca:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4cc:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4ce:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     4d2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4d6:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4da:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     4de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e6:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ea:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ee:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4f2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f6:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4fa:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
     4fe:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     500:	629a      	str	r2, [r3, #40]	; 0x28
     502:	4e4e      	ldr	r6, [pc, #312]	; (63c <SDHC_IO_BUS_PORT_init+0x184>)
     504:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     506:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     508:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
     50c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     510:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     514:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     518:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     520:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     524:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     528:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     52c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     530:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     534:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     538:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     53c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     540:	4f3f      	ldr	r7, [pc, #252]	; (640 <SDHC_IO_BUS_PORT_init+0x188>)
     542:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     546:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     54a:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
     54e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     552:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     556:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     562:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     566:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     56a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     56e:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     572:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     576:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     57a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     57e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     582:	3704      	adds	r7, #4
     584:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     588:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     58c:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
     590:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     594:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     598:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     59c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5a0:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a4:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a8:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ac:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b4:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5b8:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5c0:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5c4:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5c8:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
     5cc:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     5d0:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d4:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5dc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e0:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e4:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5e8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ec:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f0:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5f4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5fc:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     600:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     604:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     608:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     60c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     614:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     618:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     620:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     624:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     628:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB21I_SDHC1_SDDAT3);
}
     630:	bcf0      	pop	{r4, r5, r6, r7}
     632:	4770      	bx	lr
     634:	41008000 	.word	0x41008000
     638:	c0000020 	.word	0xc0000020
     63c:	c0000010 	.word	0xc0000010
     640:	c0000004 	.word	0xc0000004

00000644 <SDHC_IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     644:	4a05      	ldr	r2, [pc, #20]	; (65c <SDHC_IO_BUS_CLOCK_init+0x18>)
     646:	6913      	ldr	r3, [r2, #16]
     648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     64c:	6113      	str	r3, [r2, #16]
     64e:	4b04      	ldr	r3, [pc, #16]	; (660 <SDHC_IO_BUS_CLOCK_init+0x1c>)
     650:	2240      	movs	r2, #64	; 0x40
     652:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
     656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     65a:	4770      	bx	lr
     65c:	40000800 	.word	0x40000800
     660:	40001c00 	.word	0x40001c00

00000664 <SDHC_IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void SDHC_IO_BUS_init(void)
{
     664:	b508      	push	{r3, lr}
	SDHC_IO_BUS_CLOCK_init();
     666:	4b05      	ldr	r3, [pc, #20]	; (67c <SDHC_IO_BUS_init+0x18>)
     668:	4798      	blx	r3
	mci_sync_init(&SDHC_IO_BUS, SDHC1);
     66a:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
     66e:	4804      	ldr	r0, [pc, #16]	; (680 <SDHC_IO_BUS_init+0x1c>)
     670:	4b04      	ldr	r3, [pc, #16]	; (684 <SDHC_IO_BUS_init+0x20>)
     672:	4798      	blx	r3
	SDHC_IO_BUS_PORT_init();
     674:	4b04      	ldr	r3, [pc, #16]	; (688 <SDHC_IO_BUS_init+0x24>)
     676:	4798      	blx	r3
     678:	bd08      	pop	{r3, pc}
     67a:	bf00      	nop
     67c:	00000645 	.word	0x00000645
     680:	20000410 	.word	0x20000410
     684:	000008d5 	.word	0x000008d5
     688:	000004b9 	.word	0x000004b9

0000068c <LIDAR_PWM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68c:	4a08      	ldr	r2, [pc, #32]	; (6b0 <LIDAR_PWM_PORT_init+0x24>)
     68e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6a6:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <LIDAR_PWM_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     6b4:	4a04      	ldr	r2, [pc, #16]	; (6c8 <LIDAR_PWM_CLOCK_init+0x14>)
     6b6:	6953      	ldr	r3, [r2, #20]
     6b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     6bc:	6153      	str	r3, [r2, #20]
     6be:	2240      	movs	r2, #64	; 0x40
     6c0:	4b02      	ldr	r3, [pc, #8]	; (6cc <LIDAR_PWM_CLOCK_init+0x18>)
     6c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     6c6:	4770      	bx	lr
     6c8:	40000800 	.word	0x40000800
     6cc:	40001c00 	.word	0x40001c00

000006d0 <LIDAR_PWM_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void LIDAR_PWM_init(void)
{
     6d0:	b508      	push	{r3, lr}
	LIDAR_PWM_CLOCK_init();
     6d2:	4b06      	ldr	r3, [pc, #24]	; (6ec <LIDAR_PWM_init+0x1c>)
     6d4:	4798      	blx	r3
	LIDAR_PWM_PORT_init();
     6d6:	4b06      	ldr	r3, [pc, #24]	; (6f0 <LIDAR_PWM_init+0x20>)
     6d8:	4798      	blx	r3
	pwm_init(&LIDAR_PWM, TC0, _tc_get_pwm());
     6da:	4b06      	ldr	r3, [pc, #24]	; (6f4 <LIDAR_PWM_init+0x24>)
     6dc:	4798      	blx	r3
     6de:	4602      	mov	r2, r0
     6e0:	4905      	ldr	r1, [pc, #20]	; (6f8 <LIDAR_PWM_init+0x28>)
     6e2:	4806      	ldr	r0, [pc, #24]	; (6fc <LIDAR_PWM_init+0x2c>)
     6e4:	4b06      	ldr	r3, [pc, #24]	; (700 <LIDAR_PWM_init+0x30>)
     6e6:	4798      	blx	r3
     6e8:	bd08      	pop	{r3, pc}
     6ea:	bf00      	nop
     6ec:	000006b5 	.word	0x000006b5
     6f0:	0000068d 	.word	0x0000068d
     6f4:	00000fd9 	.word	0x00000fd9
     6f8:	40003800 	.word	0x40003800
     6fc:	200003f4 	.word	0x200003f4
     700:	00000919 	.word	0x00000919

00000704 <SERVO_PWM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     704:	4b10      	ldr	r3, [pc, #64]	; (748 <SERVO_PWM_PORT_init+0x44>)
     706:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     70a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     716:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     71a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     71e:	f042 0204 	orr.w	r2, r2, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     722:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     726:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     72a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     72e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     736:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     73a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     73e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     742:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     746:	4770      	bx	lr
     748:	41008000 	.word	0x41008000

0000074c <SERVO_PWM_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     74c:	4a04      	ldr	r2, [pc, #16]	; (760 <SERVO_PWM_CLOCK_init+0x14>)
     74e:	6953      	ldr	r3, [r2, #20]
     750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     754:	6153      	str	r3, [r2, #20]
     756:	2240      	movs	r2, #64	; 0x40
     758:	4b02      	ldr	r3, [pc, #8]	; (764 <SERVO_PWM_CLOCK_init+0x18>)
     75a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     75e:	4770      	bx	lr
     760:	40000800 	.word	0x40000800
     764:	40001c00 	.word	0x40001c00

00000768 <system_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     768:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     76a:	4b35      	ldr	r3, [pc, #212]	; (840 <system_init+0xd8>)
     76c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     76e:	4b35      	ldr	r3, [pc, #212]	; (844 <system_init+0xdc>)
     770:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     774:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     778:	4a33      	ldr	r2, [pc, #204]	; (848 <system_init+0xe0>)
     77a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     77e:	4833      	ldr	r0, [pc, #204]	; (84c <system_init+0xe4>)
     780:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     784:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     788:	f893 00df 	ldrb.w	r0, [r3, #223]	; 0xdf
     78c:	f040 0004 	orr.w	r0, r0, #4
     790:	f883 00df 	strb.w	r0, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     794:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     798:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     79c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7a0:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7a4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     7a8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     7b4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     7b8:	4925      	ldr	r1, [pc, #148]	; (850 <system_init+0xe8>)
     7ba:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7be:	f893 1152 	ldrb.w	r1, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7ca:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     7ce:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7d2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     7d6:	491f      	ldr	r1, [pc, #124]	; (854 <system_init+0xec>)
     7d8:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7dc:	f893 11d4 	ldrb.w	r1, [r3, #468]	; 0x1d4
     7e0:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7e4:	f883 11d4 	strb.w	r1, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	f893 11d4 	ldrb.w	r1, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ec:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f0:	f883 11d4 	strb.w	r1, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     7f8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7fc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     800:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     804:	3220      	adds	r2, #32
     806:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     80a:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
     80e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     812:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     816:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
     81a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     81e:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);

	LIDAR_USART_init();
     822:	4b0d      	ldr	r3, [pc, #52]	; (858 <system_init+0xf0>)
     824:	4798      	blx	r3

	STDIO_IO_init();
     826:	4b0d      	ldr	r3, [pc, #52]	; (85c <system_init+0xf4>)
     828:	4798      	blx	r3

	SDHC_IO_BUS_init();
     82a:	4b0d      	ldr	r3, [pc, #52]	; (860 <system_init+0xf8>)
     82c:	4798      	blx	r3

	LIDAR_PWM_init();
     82e:	4b0d      	ldr	r3, [pc, #52]	; (864 <system_init+0xfc>)
     830:	4798      	blx	r3

	SERVO_PWM_CLOCK_init();
     832:	4b0d      	ldr	r3, [pc, #52]	; (868 <system_init+0x100>)
     834:	4798      	blx	r3

	SERVO_PWM_PORT_init();
     836:	4b0d      	ldr	r3, [pc, #52]	; (86c <system_init+0x104>)
     838:	4798      	blx	r3

	SERVO_PWM_init();
     83a:	4b0d      	ldr	r3, [pc, #52]	; (870 <system_init+0x108>)
     83c:	4798      	blx	r3
     83e:	bd08      	pop	{r3, pc}
     840:	00000ae9 	.word	0x00000ae9
     844:	41008000 	.word	0x41008000
     848:	40020000 	.word	0x40020000
     84c:	c0028000 	.word	0xc0028000
     850:	c0000004 	.word	0xc0000004
     854:	c0020010 	.word	0xc0020010
     858:	000003f5 	.word	0x000003f5
     85c:	0000048d 	.word	0x0000048d
     860:	00000665 	.word	0x00000665
     864:	000006d1 	.word	0x000006d1
     868:	0000074d 	.word	0x0000074d
     86c:	00000705 	.word	0x00000705
     870:	00001015 	.word	0x00001015

00000874 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     874:	b570      	push	{r4, r5, r6, lr}
     876:	460d      	mov	r5, r1
     878:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     87a:	4604      	mov	r4, r0
     87c:	b160      	cbz	r0, 898 <io_write+0x24>
     87e:	1c08      	adds	r0, r1, #0
     880:	bf18      	it	ne
     882:	2001      	movne	r0, #1
     884:	2234      	movs	r2, #52	; 0x34
     886:	4905      	ldr	r1, [pc, #20]	; (89c <io_write+0x28>)
     888:	4b05      	ldr	r3, [pc, #20]	; (8a0 <io_write+0x2c>)
     88a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     88c:	6823      	ldr	r3, [r4, #0]
     88e:	4632      	mov	r2, r6
     890:	4629      	mov	r1, r5
     892:	4620      	mov	r0, r4
     894:	4798      	blx	r3
}
     896:	bd70      	pop	{r4, r5, r6, pc}
     898:	2000      	movs	r0, #0
     89a:	e7f3      	b.n	884 <io_write+0x10>
     89c:	00003ca0 	.word	0x00003ca0
     8a0:	00000aa5 	.word	0x00000aa5

000008a4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     8a4:	b570      	push	{r4, r5, r6, lr}
     8a6:	460d      	mov	r5, r1
     8a8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     8aa:	4604      	mov	r4, r0
     8ac:	b160      	cbz	r0, 8c8 <io_read+0x24>
     8ae:	1c08      	adds	r0, r1, #0
     8b0:	bf18      	it	ne
     8b2:	2001      	movne	r0, #1
     8b4:	223d      	movs	r2, #61	; 0x3d
     8b6:	4905      	ldr	r1, [pc, #20]	; (8cc <io_read+0x28>)
     8b8:	4b05      	ldr	r3, [pc, #20]	; (8d0 <io_read+0x2c>)
     8ba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     8bc:	6863      	ldr	r3, [r4, #4]
     8be:	4632      	mov	r2, r6
     8c0:	4629      	mov	r1, r5
     8c2:	4620      	mov	r0, r4
     8c4:	4798      	blx	r3
}
     8c6:	bd70      	pop	{r4, r5, r6, pc}
     8c8:	2000      	movs	r0, #0
     8ca:	e7f3      	b.n	8b4 <io_read+0x10>
     8cc:	00003ca0 	.word	0x00003ca0
     8d0:	00000aa5 	.word	0x00000aa5

000008d4 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     8d4:	b538      	push	{r3, r4, r5, lr}
     8d6:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     8d8:	4605      	mov	r5, r0
     8da:	b158      	cbz	r0, 8f4 <mci_sync_init+0x20>
     8dc:	1c08      	adds	r0, r1, #0
     8de:	bf18      	it	ne
     8e0:	2001      	movne	r0, #1
     8e2:	2231      	movs	r2, #49	; 0x31
     8e4:	4904      	ldr	r1, [pc, #16]	; (8f8 <mci_sync_init+0x24>)
     8e6:	4b05      	ldr	r3, [pc, #20]	; (8fc <mci_sync_init+0x28>)
     8e8:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     8ea:	4621      	mov	r1, r4
     8ec:	4628      	mov	r0, r5
     8ee:	4b04      	ldr	r3, [pc, #16]	; (900 <mci_sync_init+0x2c>)
     8f0:	4798      	blx	r3
}
     8f2:	bd38      	pop	{r3, r4, r5, pc}
     8f4:	2000      	movs	r0, #0
     8f6:	e7f4      	b.n	8e2 <mci_sync_init+0xe>
     8f8:	00003cb4 	.word	0x00003cb4
     8fc:	00000aa5 	.word	0x00000aa5
     900:	00000bcd 	.word	0x00000bcd

00000904 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     904:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     906:	6943      	ldr	r3, [r0, #20]
     908:	b103      	cbz	r3, 90c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     90a:	4798      	blx	r3
     90c:	bd08      	pop	{r3, pc}

0000090e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     90e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     910:	6983      	ldr	r3, [r0, #24]
     912:	b103      	cbz	r3, 916 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     914:	4798      	blx	r3
     916:	bd08      	pop	{r3, pc}

00000918 <pwm_init>:
{
     918:	b538      	push	{r3, r4, r5, lr}
     91a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     91c:	4604      	mov	r4, r0
     91e:	b180      	cbz	r0, 942 <pwm_init+0x2a>
     920:	1c08      	adds	r0, r1, #0
     922:	bf18      	it	ne
     924:	2001      	movne	r0, #1
     926:	2233      	movs	r2, #51	; 0x33
     928:	4907      	ldr	r1, [pc, #28]	; (948 <pwm_init+0x30>)
     92a:	4b08      	ldr	r3, [pc, #32]	; (94c <pwm_init+0x34>)
     92c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     92e:	4629      	mov	r1, r5
     930:	4620      	mov	r0, r4
     932:	4b07      	ldr	r3, [pc, #28]	; (950 <pwm_init+0x38>)
     934:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     936:	4b07      	ldr	r3, [pc, #28]	; (954 <pwm_init+0x3c>)
     938:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     93a:	4b07      	ldr	r3, [pc, #28]	; (958 <pwm_init+0x40>)
     93c:	6063      	str	r3, [r4, #4]
}
     93e:	2000      	movs	r0, #0
     940:	bd38      	pop	{r3, r4, r5, pc}
     942:	2000      	movs	r0, #0
     944:	e7ef      	b.n	926 <pwm_init+0xe>
     946:	bf00      	nop
     948:	00003cd0 	.word	0x00003cd0
     94c:	00000aa5 	.word	0x00000aa5
     950:	00000e69 	.word	0x00000e69
     954:	00000905 	.word	0x00000905
     958:	0000090f 	.word	0x0000090f

0000095c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     960:	460f      	mov	r7, r1
     962:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     964:	4604      	mov	r4, r0
     966:	b328      	cbz	r0, 9b4 <usart_sync_write+0x58>
     968:	b331      	cbz	r1, 9b8 <usart_sync_write+0x5c>
     96a:	1c10      	adds	r0, r2, #0
     96c:	bf18      	it	ne
     96e:	2001      	movne	r0, #1
     970:	22f1      	movs	r2, #241	; 0xf1
     972:	4912      	ldr	r1, [pc, #72]	; (9bc <usart_sync_write+0x60>)
     974:	4b12      	ldr	r3, [pc, #72]	; (9c0 <usart_sync_write+0x64>)
     976:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     978:	3408      	adds	r4, #8
     97a:	4d12      	ldr	r5, [pc, #72]	; (9c4 <usart_sync_write+0x68>)
     97c:	4620      	mov	r0, r4
     97e:	47a8      	blx	r5
     980:	2800      	cmp	r0, #0
     982:	d0fb      	beq.n	97c <usart_sync_write+0x20>
     984:	3f01      	subs	r7, #1
     986:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     988:	f8df 9040 	ldr.w	r9, [pc, #64]	; 9cc <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     98c:	4d0d      	ldr	r5, [pc, #52]	; (9c4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     98e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     992:	4620      	mov	r0, r4
     994:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     996:	4620      	mov	r0, r4
     998:	47a8      	blx	r5
     99a:	2800      	cmp	r0, #0
     99c:	d0fb      	beq.n	996 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     99e:	3601      	adds	r6, #1
     9a0:	4546      	cmp	r6, r8
     9a2:	d3f4      	bcc.n	98e <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     9a4:	4d08      	ldr	r5, [pc, #32]	; (9c8 <usart_sync_write+0x6c>)
     9a6:	4620      	mov	r0, r4
     9a8:	47a8      	blx	r5
     9aa:	2800      	cmp	r0, #0
     9ac:	d0fb      	beq.n	9a6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     9ae:	4630      	mov	r0, r6
     9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     9b4:	2000      	movs	r0, #0
     9b6:	e7db      	b.n	970 <usart_sync_write+0x14>
     9b8:	2000      	movs	r0, #0
     9ba:	e7d9      	b.n	970 <usart_sync_write+0x14>
     9bc:	00003ce8 	.word	0x00003ce8
     9c0:	00000aa5 	.word	0x00000aa5
     9c4:	00000de3 	.word	0x00000de3
     9c8:	00000ded 	.word	0x00000ded
     9cc:	00000dd5 	.word	0x00000dd5

000009d0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     9d4:	460f      	mov	r7, r1
     9d6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     9d8:	4604      	mov	r4, r0
     9da:	b1e0      	cbz	r0, a16 <usart_sync_read+0x46>
     9dc:	b1e9      	cbz	r1, a1a <usart_sync_read+0x4a>
     9de:	1c10      	adds	r0, r2, #0
     9e0:	bf18      	it	ne
     9e2:	2001      	movne	r0, #1
     9e4:	f44f 7286 	mov.w	r2, #268	; 0x10c
     9e8:	490d      	ldr	r1, [pc, #52]	; (a20 <usart_sync_read+0x50>)
     9ea:	4b0e      	ldr	r3, [pc, #56]	; (a24 <usart_sync_read+0x54>)
     9ec:	4798      	blx	r3
     9ee:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     9f0:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     9f2:	3408      	adds	r4, #8
     9f4:	4d0c      	ldr	r5, [pc, #48]	; (a28 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     9f6:	f8df 9034 	ldr.w	r9, [pc, #52]	; a2c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     9fa:	4620      	mov	r0, r4
     9fc:	47a8      	blx	r5
     9fe:	2800      	cmp	r0, #0
     a00:	d0fb      	beq.n	9fa <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     a02:	4620      	mov	r0, r4
     a04:	47c8      	blx	r9
     a06:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     a0a:	3601      	adds	r6, #1
     a0c:	4546      	cmp	r6, r8
     a0e:	d3f4      	bcc.n	9fa <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     a10:	4630      	mov	r0, r6
     a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     a16:	2000      	movs	r0, #0
     a18:	e7e4      	b.n	9e4 <usart_sync_read+0x14>
     a1a:	2000      	movs	r0, #0
     a1c:	e7e2      	b.n	9e4 <usart_sync_read+0x14>
     a1e:	bf00      	nop
     a20:	00003ce8 	.word	0x00003ce8
     a24:	00000aa5 	.word	0x00000aa5
     a28:	00000df7 	.word	0x00000df7
     a2c:	00000ddb 	.word	0x00000ddb

00000a30 <usart_sync_init>:
{
     a30:	b538      	push	{r3, r4, r5, lr}
     a32:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     a34:	4604      	mov	r4, r0
     a36:	b198      	cbz	r0, a60 <usart_sync_init+0x30>
     a38:	1c08      	adds	r0, r1, #0
     a3a:	bf18      	it	ne
     a3c:	2001      	movne	r0, #1
     a3e:	2234      	movs	r2, #52	; 0x34
     a40:	4908      	ldr	r1, [pc, #32]	; (a64 <usart_sync_init+0x34>)
     a42:	4b09      	ldr	r3, [pc, #36]	; (a68 <usart_sync_init+0x38>)
     a44:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     a46:	4629      	mov	r1, r5
     a48:	f104 0008 	add.w	r0, r4, #8
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <usart_sync_init+0x3c>)
     a4e:	4798      	blx	r3
	if (init_status) {
     a50:	4603      	mov	r3, r0
     a52:	b918      	cbnz	r0, a5c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     a54:	4a06      	ldr	r2, [pc, #24]	; (a70 <usart_sync_init+0x40>)
     a56:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     a58:	4a06      	ldr	r2, [pc, #24]	; (a74 <usart_sync_init+0x44>)
     a5a:	6022      	str	r2, [r4, #0]
}
     a5c:	4618      	mov	r0, r3
     a5e:	bd38      	pop	{r3, r4, r5, pc}
     a60:	2000      	movs	r0, #0
     a62:	e7ec      	b.n	a3e <usart_sync_init+0xe>
     a64:	00003ce8 	.word	0x00003ce8
     a68:	00000aa5 	.word	0x00000aa5
     a6c:	00000d95 	.word	0x00000d95
     a70:	000009d1 	.word	0x000009d1
     a74:	0000095d 	.word	0x0000095d

00000a78 <usart_sync_enable>:
{
     a78:	b510      	push	{r4, lr}
	ASSERT(descr);
     a7a:	4604      	mov	r4, r0
     a7c:	2253      	movs	r2, #83	; 0x53
     a7e:	4906      	ldr	r1, [pc, #24]	; (a98 <usart_sync_enable+0x20>)
     a80:	3000      	adds	r0, #0
     a82:	bf18      	it	ne
     a84:	2001      	movne	r0, #1
     a86:	4b05      	ldr	r3, [pc, #20]	; (a9c <usart_sync_enable+0x24>)
     a88:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     a8a:	f104 0008 	add.w	r0, r4, #8
     a8e:	4b04      	ldr	r3, [pc, #16]	; (aa0 <usart_sync_enable+0x28>)
     a90:	4798      	blx	r3
}
     a92:	2000      	movs	r0, #0
     a94:	bd10      	pop	{r4, pc}
     a96:	bf00      	nop
     a98:	00003ce8 	.word	0x00003ce8
     a9c:	00000aa5 	.word	0x00000aa5
     aa0:	00000dc1 	.word	0x00000dc1

00000aa4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     aa4:	b900      	cbnz	r0, aa8 <assert+0x4>
		__asm("BKPT #0");
     aa6:	be00      	bkpt	0x0000
     aa8:	4770      	bx	lr
	...

00000aac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     aac:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <_sbrk+0x1c>)
     ab0:	6812      	ldr	r2, [r2, #0]
     ab2:	b122      	cbz	r2, abe <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     ab4:	4a04      	ldr	r2, [pc, #16]	; (ac8 <_sbrk+0x1c>)
     ab6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     ab8:	4403      	add	r3, r0
     aba:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     abc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     abe:	4903      	ldr	r1, [pc, #12]	; (acc <_sbrk+0x20>)
     ac0:	4a01      	ldr	r2, [pc, #4]	; (ac8 <_sbrk+0x1c>)
     ac2:	6011      	str	r1, [r2, #0]
     ac4:	e7f6      	b.n	ab4 <_sbrk+0x8>
     ac6:	bf00      	nop
     ac8:	20000334 	.word	0x20000334
     acc:	20010450 	.word	0x20010450

00000ad0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     ad0:	f04f 30ff 	mov.w	r0, #4294967295
     ad4:	4770      	bx	lr

00000ad6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     ada:	604b      	str	r3, [r1, #4]

	return 0;
}
     adc:	2000      	movs	r0, #0
     ade:	4770      	bx	lr

00000ae0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     ae0:	2001      	movs	r0, #1
     ae2:	4770      	bx	lr

00000ae4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     ae4:	2000      	movs	r0, #0
     ae6:	4770      	bx	lr

00000ae8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     ae8:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     aea:	4a08      	ldr	r2, [pc, #32]	; (b0c <_init_chip+0x24>)
     aec:	8813      	ldrh	r3, [r2, #0]
     aee:	b29b      	uxth	r3, r3
     af0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     af2:	4b07      	ldr	r3, [pc, #28]	; (b10 <_init_chip+0x28>)
     af4:	4798      	blx	r3
	_oscctrl_init_sources();
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <_init_chip+0x2c>)
     af8:	4798      	blx	r3
	_mclk_init();
     afa:	4b07      	ldr	r3, [pc, #28]	; (b18 <_init_chip+0x30>)
     afc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     afe:	4b07      	ldr	r3, [pc, #28]	; (b1c <_init_chip+0x34>)
     b00:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     b02:	f640 70ff 	movw	r0, #4095	; 0xfff
     b06:	4b06      	ldr	r3, [pc, #24]	; (b20 <_init_chip+0x38>)
     b08:	4798      	blx	r3
     b0a:	bd08      	pop	{r3, pc}
     b0c:	41004000 	.word	0x41004000
     b10:	00000b55 	.word	0x00000b55
     b14:	00000b69 	.word	0x00000b69
     b18:	00000b49 	.word	0x00000b49
     b1c:	00000b85 	.word	0x00000b85
     b20:	00000b25 	.word	0x00000b25

00000b24 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     b24:	f010 0f01 	tst.w	r0, #1
     b28:	d008      	beq.n	b3c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     b2a:	4a05      	ldr	r2, [pc, #20]	; (b40 <_gclk_init_generators_by_fref+0x1c>)
     b2c:	4b05      	ldr	r3, [pc, #20]	; (b44 <_gclk_init_generators_by_fref+0x20>)
     b2e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     b30:	4619      	mov	r1, r3
     b32:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     b36:	684b      	ldr	r3, [r1, #4]
     b38:	4213      	tst	r3, r2
     b3a:	d1fc      	bne.n	b36 <_gclk_init_generators_by_fref+0x12>
     b3c:	4770      	bx	lr
     b3e:	bf00      	nop
     b40:	00010101 	.word	0x00010101
     b44:	40001c00 	.word	0x40001c00

00000b48 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     b48:	2201      	movs	r2, #1
     b4a:	4b01      	ldr	r3, [pc, #4]	; (b50 <_mclk_init+0x8>)
     b4c:	715a      	strb	r2, [r3, #5]
     b4e:	4770      	bx	lr
     b50:	40000800 	.word	0x40000800

00000b54 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <_osc32kctrl_init_sources+0x10>)
     b56:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     b58:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     b5c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     b5e:	2201      	movs	r2, #1
     b60:	741a      	strb	r2, [r3, #16]
     b62:	4770      	bx	lr
     b64:	40001400 	.word	0x40001400

00000b68 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     b68:	4a04      	ldr	r2, [pc, #16]	; (b7c <_oscctrl_init_sources+0x14>)
     b6a:	4b05      	ldr	r3, [pc, #20]	; (b80 <_oscctrl_init_sources+0x18>)
     b6c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     b6e:	461a      	mov	r2, r3
     b70:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     b72:	f013 0f02 	tst.w	r3, #2
     b76:	d0fb      	beq.n	b70 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     b78:	4770      	bx	lr
     b7a:	bf00      	nop
     b7c:	03002606 	.word	0x03002606
     b80:	40001000 	.word	0x40001000

00000b84 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     b84:	4770      	bx	lr
	...

00000b88 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     b88:	b500      	push	{lr}
     b8a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     b8c:	4b0d      	ldr	r3, [pc, #52]	; (bc4 <RAMECC_Handler+0x3c>)
     b8e:	789b      	ldrb	r3, [r3, #2]
     b90:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     b92:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     b94:	9b01      	ldr	r3, [sp, #4]
     b96:	f013 0f02 	tst.w	r3, #2
     b9a:	d006      	beq.n	baa <RAMECC_Handler+0x22>
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <RAMECC_Handler+0x40>)
     b9e:	681b      	ldr	r3, [r3, #0]
     ba0:	b11b      	cbz	r3, baa <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     ba2:	4a08      	ldr	r2, [pc, #32]	; (bc4 <RAMECC_Handler+0x3c>)
     ba4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     ba6:	4798      	blx	r3
     ba8:	e009      	b.n	bbe <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     baa:	9b01      	ldr	r3, [sp, #4]
     bac:	f013 0f01 	tst.w	r3, #1
     bb0:	d005      	beq.n	bbe <RAMECC_Handler+0x36>
     bb2:	4b05      	ldr	r3, [pc, #20]	; (bc8 <RAMECC_Handler+0x40>)
     bb4:	685b      	ldr	r3, [r3, #4]
     bb6:	b113      	cbz	r3, bbe <RAMECC_Handler+0x36>
     bb8:	4a02      	ldr	r2, [pc, #8]	; (bc4 <RAMECC_Handler+0x3c>)
     bba:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     bbc:	4798      	blx	r3
	} else {
		return;
	}
}
     bbe:	b003      	add	sp, #12
     bc0:	f85d fb04 	ldr.w	pc, [sp], #4
     bc4:	41020000 	.word	0x41020000
     bc8:	20000434 	.word	0x20000434

00000bcc <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
     bcc:	b538      	push	{r3, r4, r5, lr}
     bce:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
     bd0:	4605      	mov	r5, r0
     bd2:	b340      	cbz	r0, c26 <_mci_sync_init+0x5a>
     bd4:	1c08      	adds	r0, r1, #0
     bd6:	bf18      	it	ne
     bd8:	2001      	movne	r0, #1
     bda:	22d8      	movs	r2, #216	; 0xd8
     bdc:	4913      	ldr	r1, [pc, #76]	; (c2c <_mci_sync_init+0x60>)
     bde:	4b14      	ldr	r3, [pc, #80]	; (c30 <_mci_sync_init+0x64>)
     be0:	4798      	blx	r3

	mci_dev->hw = hw;
     be2:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
     be4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
     be8:	f043 0301 	orr.w	r3, r3, #1
     bec:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
     bf0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
     bf4:	f013 0f01 	tst.w	r3, #1
     bf8:	d1fa      	bne.n	bf0 <_mci_sync_init+0x24>
	((Sdhc *)hw)->TCR.reg = data;
     bfa:	230e      	movs	r3, #14
     bfc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
     c00:	230f      	movs	r3, #15
     c02:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
     c06:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     c08:	b29b      	uxth	r3, r3
     c0a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     c0e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
     c12:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
     c14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
     c16:	b29b      	uxth	r3, r3
     c18:	ea6f 2393 	mvn.w	r3, r3, lsr #10
     c1c:	ea6f 2383 	mvn.w	r3, r3, lsl #10
     c20:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
     c22:	2000      	movs	r0, #0
     c24:	bd38      	pop	{r3, r4, r5, pc}
     c26:	2000      	movs	r0, #0
     c28:	e7d7      	b.n	bda <_mci_sync_init+0xe>
     c2a:	bf00      	nop
     c2c:	00003d04 	.word	0x00003d04
     c30:	00000aa5 	.word	0x00000aa5

00000c34 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     c34:	b470      	push	{r4, r5, r6}
     c36:	b089      	sub	sp, #36	; 0x24
     c38:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     c3a:	466c      	mov	r4, sp
     c3c:	4d0d      	ldr	r5, [pc, #52]	; (c74 <_sercom_get_hardware_index+0x40>)
     c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     c42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     c46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     c4a:	9b00      	ldr	r3, [sp, #0]
     c4c:	42b3      	cmp	r3, r6
     c4e:	d00d      	beq.n	c6c <_sercom_get_hardware_index+0x38>
     c50:	4631      	mov	r1, r6
     c52:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c54:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     c56:	f853 2b04 	ldr.w	r2, [r3], #4
     c5a:	428a      	cmp	r2, r1
     c5c:	d007      	beq.n	c6e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c5e:	3001      	adds	r0, #1
     c60:	2808      	cmp	r0, #8
     c62:	d1f8      	bne.n	c56 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     c64:	2000      	movs	r0, #0
}
     c66:	b009      	add	sp, #36	; 0x24
     c68:	bc70      	pop	{r4, r5, r6}
     c6a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c6c:	2000      	movs	r0, #0
			return i;
     c6e:	b2c0      	uxtb	r0, r0
     c70:	e7f9      	b.n	c66 <_sercom_get_hardware_index+0x32>
     c72:	bf00      	nop
     c74:	00003d1c 	.word	0x00003d1c

00000c78 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     c78:	b510      	push	{r4, lr}
     c7a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     c7c:	4b41      	ldr	r3, [pc, #260]	; (d84 <_usart_init+0x10c>)
     c7e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     c80:	2800      	cmp	r0, #0
     c82:	d05c      	beq.n	d3e <_usart_init+0xc6>
     c84:	2802      	cmp	r0, #2
     c86:	d05c      	beq.n	d42 <_usart_init+0xca>
	ASSERT(false);
     c88:	f240 2247 	movw	r2, #583	; 0x247
     c8c:	493e      	ldr	r1, [pc, #248]	; (d88 <_usart_init+0x110>)
     c8e:	2000      	movs	r0, #0
     c90:	4b3e      	ldr	r3, [pc, #248]	; (d8c <_usart_init+0x114>)
     c92:	4798      	blx	r3
	return 0;
     c94:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     c96:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     c98:	f013 0f01 	tst.w	r3, #1
     c9c:	d122      	bne.n	ce4 <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     c9e:	004b      	lsls	r3, r1, #1
     ca0:	185a      	adds	r2, r3, r1
     ca2:	4b3b      	ldr	r3, [pc, #236]	; (d90 <_usart_init+0x118>)
     ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     caa:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cae:	69e3      	ldr	r3, [r4, #28]
     cb0:	f013 0f03 	tst.w	r3, #3
     cb4:	d1fb      	bne.n	cae <_usart_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     cb6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     cb8:	f013 0f02 	tst.w	r3, #2
     cbc:	d00b      	beq.n	cd6 <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     cbe:	6823      	ldr	r3, [r4, #0]
     cc0:	f023 0302 	bic.w	r3, r3, #2
     cc4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cc6:	69e3      	ldr	r3, [r4, #28]
     cc8:	f013 0f03 	tst.w	r3, #3
     ccc:	d1fb      	bne.n	cc6 <_usart_init+0x4e>
     cce:	69e3      	ldr	r3, [r4, #28]
     cd0:	f013 0f02 	tst.w	r3, #2
     cd4:	d1fb      	bne.n	cce <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     cd6:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cda:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cdc:	69e3      	ldr	r3, [r4, #28]
     cde:	f013 0f03 	tst.w	r3, #3
     ce2:	d1fb      	bne.n	cdc <_usart_init+0x64>
     ce4:	69e3      	ldr	r3, [r4, #28]
     ce6:	f013 0f01 	tst.w	r3, #1
     cea:	d1fb      	bne.n	ce4 <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     cec:	460a      	mov	r2, r1
     cee:	004b      	lsls	r3, r1, #1
     cf0:	440b      	add	r3, r1
     cf2:	4927      	ldr	r1, [pc, #156]	; (d90 <_usart_init+0x118>)
     cf4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
     cf8:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cfa:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cfc:	69e3      	ldr	r3, [r4, #28]
     cfe:	f013 0f03 	tst.w	r3, #3
     d02:	d1fb      	bne.n	cfc <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     d04:	0053      	lsls	r3, r2, #1
     d06:	1899      	adds	r1, r3, r2
     d08:	4b21      	ldr	r3, [pc, #132]	; (d90 <_usart_init+0x118>)
     d0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     d10:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d12:	69e3      	ldr	r3, [r4, #28]
     d14:	f013 0f1f 	tst.w	r3, #31
     d18:	d1fb      	bne.n	d12 <_usart_init+0x9a>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     d1a:	0053      	lsls	r3, r2, #1
     d1c:	1899      	adds	r1, r3, r2
     d1e:	4b1c      	ldr	r3, [pc, #112]	; (d90 <_usart_init+0x118>)
     d20:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     d26:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     d28:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
     d2c:	d10b      	bne.n	d46 <_usart_init+0xce>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     d2e:	0053      	lsls	r3, r2, #1
     d30:	1899      	adds	r1, r3, r2
     d32:	4b17      	ldr	r3, [pc, #92]	; (d90 <_usart_init+0x118>)
     d34:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     d38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     d3a:	81a3      	strh	r3, [r4, #12]
     d3c:	e011      	b.n	d62 <_usart_init+0xea>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     d3e:	2100      	movs	r1, #0
     d40:	e7a9      	b.n	c96 <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
     d42:	2101      	movs	r1, #1
     d44:	e7a7      	b.n	c96 <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     d46:	4b12      	ldr	r3, [pc, #72]	; (d90 <_usart_init+0x118>)
     d48:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     d4c:	8e18      	ldrh	r0, [r3, #48]	; 0x30
     d4e:	89a1      	ldrh	r1, [r4, #12]
     d50:	f360 010c 	bfi	r1, r0, #0, #13
     d54:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     d56:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
     d5a:	89a3      	ldrh	r3, [r4, #12]
     d5c:	f361 334f 	bfi	r3, r1, #13, #3
     d60:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     d62:	4b0b      	ldr	r3, [pc, #44]	; (d90 <_usart_init+0x118>)
     d64:	0051      	lsls	r1, r2, #1
     d66:	1888      	adds	r0, r1, r2
     d68:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     d6c:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     d70:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     d72:	440a      	add	r2, r1
     d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     d78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     d7c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     d80:	2000      	movs	r0, #0
     d82:	bd10      	pop	{r4, pc}
     d84:	00000c35 	.word	0x00000c35
     d88:	00003d84 	.word	0x00003d84
     d8c:	00000aa5 	.word	0x00000aa5
     d90:	00003d1c 	.word	0x00003d1c

00000d94 <_usart_sync_init>:
{
     d94:	b538      	push	{r3, r4, r5, lr}
     d96:	460c      	mov	r4, r1
	ASSERT(device);
     d98:	4605      	mov	r5, r0
     d9a:	22bb      	movs	r2, #187	; 0xbb
     d9c:	4905      	ldr	r1, [pc, #20]	; (db4 <_usart_sync_init+0x20>)
     d9e:	3000      	adds	r0, #0
     da0:	bf18      	it	ne
     da2:	2001      	movne	r0, #1
     da4:	4b04      	ldr	r3, [pc, #16]	; (db8 <_usart_sync_init+0x24>)
     da6:	4798      	blx	r3
	device->hw = hw;
     da8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     daa:	4620      	mov	r0, r4
     dac:	4b03      	ldr	r3, [pc, #12]	; (dbc <_usart_sync_init+0x28>)
     dae:	4798      	blx	r3
}
     db0:	bd38      	pop	{r3, r4, r5, pc}
     db2:	bf00      	nop
     db4:	00003d84 	.word	0x00003d84
     db8:	00000aa5 	.word	0x00000aa5
     dbc:	00000c79 	.word	0x00000c79

00000dc0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     dc0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     dc2:	6813      	ldr	r3, [r2, #0]
     dc4:	f043 0302 	orr.w	r3, r3, #2
     dc8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dca:	69d3      	ldr	r3, [r2, #28]
     dcc:	f013 0f03 	tst.w	r3, #3
     dd0:	d1fb      	bne.n	dca <_usart_sync_enable+0xa>
}
     dd2:	4770      	bx	lr

00000dd4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     dd4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     dd6:	6299      	str	r1, [r3, #40]	; 0x28
     dd8:	4770      	bx	lr

00000dda <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     dda:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     ddc:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     dde:	b2c0      	uxtb	r0, r0
     de0:	4770      	bx	lr

00000de2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     de2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     de4:	7e18      	ldrb	r0, [r3, #24]
}
     de6:	f000 0001 	and.w	r0, r0, #1
     dea:	4770      	bx	lr

00000dec <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     dec:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     dee:	7e18      	ldrb	r0, [r3, #24]
}
     df0:	f3c0 0040 	ubfx	r0, r0, #1, #1
     df4:	4770      	bx	lr

00000df6 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     df6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     df8:	7e18      	ldrb	r0, [r3, #24]
}
     dfa:	f3c0 0080 	ubfx	r0, r0, #2, #1
     dfe:	4770      	bx	lr

00000e00 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
     e00:	b570      	push	{r4, r5, r6, lr}
     e02:	b088      	sub	sp, #32
     e04:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     e06:	466c      	mov	r4, sp
     e08:	4d13      	ldr	r5, [pc, #76]	; (e58 <get_tc_index+0x58>)
     e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     e0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
     e16:	9b00      	ldr	r3, [sp, #0]
     e18:	42b3      	cmp	r3, r6
     e1a:	d01a      	beq.n	e52 <get_tc_index+0x52>
     e1c:	4630      	mov	r0, r6
     e1e:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     e20:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
     e22:	f852 1b04 	ldr.w	r1, [r2], #4
     e26:	4281      	cmp	r1, r0
     e28:	d014      	beq.n	e54 <get_tc_index+0x54>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     e2a:	3301      	adds	r3, #1
     e2c:	2b08      	cmp	r3, #8
     e2e:	d1f8      	bne.n	e22 <get_tc_index+0x22>
			return i;
		}
	}
	return 0;
     e30:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
     e32:	4a0a      	ldr	r2, [pc, #40]	; (e5c <get_tc_index+0x5c>)
     e34:	7812      	ldrb	r2, [r2, #0]
     e36:	429a      	cmp	r2, r3
			return i;
     e38:	bf08      	it	eq
     e3a:	2000      	moveq	r0, #0
		if (_tcs[i].number == index) {
     e3c:	d007      	beq.n	e4e <get_tc_index+0x4e>
	ASSERT(false);
     e3e:	f44f 72aa 	mov.w	r2, #340	; 0x154
     e42:	4907      	ldr	r1, [pc, #28]	; (e60 <get_tc_index+0x60>)
     e44:	2000      	movs	r0, #0
     e46:	4b07      	ldr	r3, [pc, #28]	; (e64 <get_tc_index+0x64>)
     e48:	4798      	blx	r3
	return -1;
     e4a:	f04f 30ff 	mov.w	r0, #4294967295
}
     e4e:	b008      	add	sp, #32
     e50:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     e52:	2300      	movs	r3, #0
			return i;
     e54:	b2db      	uxtb	r3, r3
     e56:	e7ec      	b.n	e32 <get_tc_index+0x32>
     e58:	00003da0 	.word	0x00003da0
     e5c:	20000000 	.word	0x20000000
     e60:	00003dc0 	.word	0x00003dc0
     e64:	00000aa5 	.word	0x00000aa5

00000e68 <_pwm_init>:
{
     e68:	b538      	push	{r3, r4, r5, lr}
     e6a:	4605      	mov	r5, r0
     e6c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
     e6e:	4608      	mov	r0, r1
     e70:	4b54      	ldr	r3, [pc, #336]	; (fc4 <_pwm_init+0x15c>)
     e72:	4798      	blx	r3
	device->hw = hw;
     e74:	612c      	str	r4, [r5, #16]
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     e76:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
     e78:	f013 0f01 	tst.w	r3, #1
     e7c:	d119      	bne.n	eb2 <_pwm_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e7e:	6923      	ldr	r3, [r4, #16]
     e80:	f013 0f03 	tst.w	r3, #3
     e84:	d1fb      	bne.n	e7e <_pwm_init+0x16>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e86:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
     e88:	f013 0f02 	tst.w	r3, #2
     e8c:	d00b      	beq.n	ea6 <_pwm_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     e8e:	6823      	ldr	r3, [r4, #0]
     e90:	f023 0302 	bic.w	r3, r3, #2
     e94:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e96:	6923      	ldr	r3, [r4, #16]
     e98:	f013 0f03 	tst.w	r3, #3
     e9c:	d1fb      	bne.n	e96 <_pwm_init+0x2e>
     e9e:	6923      	ldr	r3, [r4, #16]
     ea0:	f013 0f02 	tst.w	r3, #2
     ea4:	d1fb      	bne.n	e9e <_pwm_init+0x36>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     ea6:	2301      	movs	r3, #1
     ea8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     eaa:	6923      	ldr	r3, [r4, #16]
     eac:	f013 0f03 	tst.w	r3, #3
     eb0:	d1fb      	bne.n	eaa <_pwm_init+0x42>
     eb2:	6923      	ldr	r3, [r4, #16]
     eb4:	f013 0f01 	tst.w	r3, #1
     eb8:	d1fb      	bne.n	eb2 <_pwm_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
     eba:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     ebe:	4a42      	ldr	r2, [pc, #264]	; (fc8 <_pwm_init+0x160>)
     ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     ec4:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     ec6:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     ec8:	6923      	ldr	r3, [r4, #16]
     eca:	f013 0f03 	tst.w	r3, #3
     ece:	d1fb      	bne.n	ec8 <_pwm_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
     ed0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     ed4:	493c      	ldr	r1, [pc, #240]	; (fc8 <_pwm_init+0x160>)
     ed6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     eda:	7a99      	ldrb	r1, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
     edc:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
     ede:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
     ee0:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
     ee2:	2303      	movs	r3, #3
     ee4:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
     ee6:	f002 020c 	and.w	r2, r2, #12
     eea:	2a08      	cmp	r2, #8
     eec:	d04b      	beq.n	f86 <_pwm_init+0x11e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
     eee:	2a00      	cmp	r2, #0
     ef0:	d160      	bne.n	fb4 <_pwm_init+0x14c>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
     ef2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     ef6:	4a34      	ldr	r2, [pc, #208]	; (fc8 <_pwm_init+0x160>)
     ef8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     efc:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     efe:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f00:	6923      	ldr	r3, [r4, #16]
     f02:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     f06:	d1fb      	bne.n	f00 <_pwm_init+0x98>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
     f08:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     f0c:	4a2e      	ldr	r2, [pc, #184]	; (fc8 <_pwm_init+0x160>)
     f0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f12:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     f14:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f16:	6923      	ldr	r3, [r4, #16]
     f18:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     f1c:	d1fb      	bne.n	f16 <_pwm_init+0xae>
	if (hw == TC0) {
     f1e:	4b2b      	ldr	r3, [pc, #172]	; (fcc <_pwm_init+0x164>)
     f20:	429c      	cmp	r4, r3
		_tc0_dev = (struct _pwm_device *)dev;
     f22:	bf04      	itt	eq
     f24:	4b2a      	ldreq	r3, [pc, #168]	; (fd0 <_pwm_init+0x168>)
     f26:	601d      	streq	r5, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
     f28:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     f2c:	4a26      	ldr	r2, [pc, #152]	; (fc8 <_pwm_init+0x160>)
     f2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     f36:	2b00      	cmp	r3, #0
     f38:	db3f      	blt.n	fba <_pwm_init+0x152>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f3a:	095a      	lsrs	r2, r3, #5
     f3c:	f003 031f 	and.w	r3, r3, #31
     f40:	2101      	movs	r1, #1
     f42:	fa01 f303 	lsl.w	r3, r1, r3
     f46:	3220      	adds	r2, #32
     f48:	4922      	ldr	r1, [pc, #136]	; (fd4 <_pwm_init+0x16c>)
     f4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f52:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
     f56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     f5a:	4b1b      	ldr	r3, [pc, #108]	; (fc8 <_pwm_init+0x160>)
     f5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f60:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     f64:	2b00      	cmp	r3, #0
     f66:	db2a      	blt.n	fbe <_pwm_init+0x156>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f68:	0959      	lsrs	r1, r3, #5
     f6a:	f003 031f 	and.w	r3, r3, #31
     f6e:	2201      	movs	r2, #1
     f70:	fa02 f303 	lsl.w	r3, r2, r3
     f74:	4a17      	ldr	r2, [pc, #92]	; (fd4 <_pwm_init+0x16c>)
     f76:	f101 0060 	add.w	r0, r1, #96	; 0x60
     f7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
     f82:	2000      	movs	r0, #0
     f84:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
     f86:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     f8a:	4a0f      	ldr	r2, [pc, #60]	; (fc8 <_pwm_init+0x160>)
     f8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f90:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     f92:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f94:	6923      	ldr	r3, [r4, #16]
     f96:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     f9a:	d1fb      	bne.n	f94 <_pwm_init+0x12c>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
     f9c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     fa0:	4a09      	ldr	r2, [pc, #36]	; (fc8 <_pwm_init+0x160>)
     fa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     fa6:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     fa8:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     faa:	6923      	ldr	r3, [r4, #16]
     fac:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     fb0:	d1fb      	bne.n	faa <_pwm_init+0x142>
     fb2:	e7b4      	b.n	f1e <_pwm_init+0xb6>
		return -1;
     fb4:	f04f 30ff 	mov.w	r0, #4294967295
     fb8:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
     fba:	2000      	movs	r0, #0
     fbc:	bd38      	pop	{r3, r4, r5, pc}
     fbe:	2000      	movs	r0, #0
}
     fc0:	bd38      	pop	{r3, r4, r5, pc}
     fc2:	bf00      	nop
     fc4:	00000e01 	.word	0x00000e01
     fc8:	20000000 	.word	0x20000000
     fcc:	40003800 	.word	0x40003800
     fd0:	20000338 	.word	0x20000338
     fd4:	e000e100 	.word	0xe000e100

00000fd8 <_tc_get_pwm>:
}
     fd8:	2000      	movs	r0, #0
     fda:	4770      	bx	lr

00000fdc <TC0_Handler>:
{
     fdc:	b538      	push	{r3, r4, r5, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
     fde:	4b0c      	ldr	r3, [pc, #48]	; (1010 <TC0_Handler+0x34>)
     fe0:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
     fe2:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
     fe4:	7aa3      	ldrb	r3, [r4, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     fe6:	f013 0f01 	tst.w	r3, #1
     fea:	d005      	beq.n	ff8 <TC0_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
     fec:	2301      	movs	r3, #1
     fee:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_period_cb) {
     ff0:	682b      	ldr	r3, [r5, #0]
     ff2:	b10b      	cbz	r3, ff8 <TC0_Handler+0x1c>
			device->callback.pwm_period_cb(device);
     ff4:	4628      	mov	r0, r5
     ff6:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
     ff8:	7a63      	ldrb	r3, [r4, #9]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
     ffa:	f013 0f02 	tst.w	r3, #2
     ffe:	d005      	beq.n	100c <TC0_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1000:	2302      	movs	r3, #2
    1002:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_error_cb) {
    1004:	686b      	ldr	r3, [r5, #4]
    1006:	b10b      	cbz	r3, 100c <TC0_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1008:	4628      	mov	r0, r5
    100a:	4798      	blx	r3
    100c:	bd38      	pop	{r3, r4, r5, pc}
    100e:	bf00      	nop
    1010:	20000338 	.word	0x20000338

00001014 <SERVO_PWM_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1014:	4b2e      	ldr	r3, [pc, #184]	; (10d0 <SERVO_PWM_init+0xbc>)
    1016:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t SERVO_PWM_init()
{

	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1018:	f013 0f01 	tst.w	r3, #1
    101c:	d11f      	bne.n	105e <SERVO_PWM_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    101e:	4a2c      	ldr	r2, [pc, #176]	; (10d0 <SERVO_PWM_init+0xbc>)
    1020:	6913      	ldr	r3, [r2, #16]
    1022:	f013 0f03 	tst.w	r3, #3
    1026:	d1fb      	bne.n	1020 <SERVO_PWM_init+0xc>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1028:	4b29      	ldr	r3, [pc, #164]	; (10d0 <SERVO_PWM_init+0xbc>)
    102a:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    102c:	f013 0f02 	tst.w	r3, #2
    1030:	d00d      	beq.n	104e <SERVO_PWM_init+0x3a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1032:	4a27      	ldr	r2, [pc, #156]	; (10d0 <SERVO_PWM_init+0xbc>)
    1034:	6813      	ldr	r3, [r2, #0]
    1036:	f023 0302 	bic.w	r3, r3, #2
    103a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    103c:	6913      	ldr	r3, [r2, #16]
    103e:	f013 0f03 	tst.w	r3, #3
    1042:	d1fb      	bne.n	103c <SERVO_PWM_init+0x28>
    1044:	4a22      	ldr	r2, [pc, #136]	; (10d0 <SERVO_PWM_init+0xbc>)
    1046:	6913      	ldr	r3, [r2, #16]
    1048:	f013 0f02 	tst.w	r3, #2
    104c:	d1fb      	bne.n	1046 <SERVO_PWM_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    104e:	2201      	movs	r2, #1
    1050:	4b1f      	ldr	r3, [pc, #124]	; (10d0 <SERVO_PWM_init+0xbc>)
    1052:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1054:	461a      	mov	r2, r3
    1056:	6913      	ldr	r3, [r2, #16]
    1058:	f013 0f03 	tst.w	r3, #3
    105c:	d1fb      	bne.n	1056 <SERVO_PWM_init+0x42>
    105e:	4a1c      	ldr	r2, [pc, #112]	; (10d0 <SERVO_PWM_init+0xbc>)
    1060:	6913      	ldr	r3, [r2, #16]
    1062:	f013 0f01 	tst.w	r3, #1
    1066:	d1fb      	bne.n	1060 <SERVO_PWM_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1068:	4a1a      	ldr	r2, [pc, #104]	; (10d4 <SERVO_PWM_init+0xc0>)
    106a:	4b19      	ldr	r3, [pc, #100]	; (10d0 <SERVO_PWM_init+0xbc>)
    106c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    106e:	461a      	mov	r2, r3
    1070:	6913      	ldr	r3, [r2, #16]
    1072:	f013 0f03 	tst.w	r3, #3
    1076:	d1fb      	bne.n	1070 <SERVO_PWM_init+0x5c>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1078:	4b15      	ldr	r3, [pc, #84]	; (10d0 <SERVO_PWM_init+0xbc>)
    107a:	2200      	movs	r2, #0
    107c:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    107e:	22ff      	movs	r2, #255	; 0xff
    1080:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1082:	2203      	movs	r2, #3
    1084:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1086:	f640 02e1 	movw	r2, #2273	; 0x8e1
    108a:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    108c:	461a      	mov	r2, r3
    108e:	6913      	ldr	r3, [r2, #16]
    1090:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1094:	d1fb      	bne.n	108e <SERVO_PWM_init+0x7a>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1096:	f240 1277 	movw	r2, #375	; 0x177
    109a:	4b0d      	ldr	r3, [pc, #52]	; (10d0 <SERVO_PWM_init+0xbc>)
    109c:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    109e:	461a      	mov	r2, r3
    10a0:	6913      	ldr	r3, [r2, #16]
    10a2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    10a6:	d1fb      	bne.n	10a0 <SERVO_PWM_init+0x8c>
	((Tc *)hw)->COUNT16.COUNT.reg = data;
    10a8:	f640 02e1 	movw	r2, #2273	; 0x8e1
    10ac:	4b08      	ldr	r3, [pc, #32]	; (10d0 <SERVO_PWM_init+0xbc>)
    10ae:	829a      	strh	r2, [r3, #20]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    10b0:	461a      	mov	r2, r3
    10b2:	6913      	ldr	r3, [r2, #16]
    10b4:	f013 0f10 	tst.w	r3, #16
    10b8:	d1fb      	bne.n	10b2 <SERVO_PWM_init+0x9e>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    10ba:	4a05      	ldr	r2, [pc, #20]	; (10d0 <SERVO_PWM_init+0xbc>)
    10bc:	6813      	ldr	r3, [r2, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    10be:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    10c2:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    10c4:	6913      	ldr	r3, [r2, #16]
    10c6:	f013 0f03 	tst.w	r3, #3
    10ca:	d1fb      	bne.n	10c4 <SERVO_PWM_init+0xb0>
	//		 | 0 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    10cc:	2000      	movs	r0, #0
    10ce:	4770      	bx	lr
    10d0:	40003c00 	.word	0x40003c00
    10d4:	12000410 	.word	0x12000410

000010d8 <HardFault_Handler>:

/**
  * Hardfault Handler
  */
void HardFault_Handler(void)
{
    10d8:	b508      	push	{r3, lr}
	printf("\r\n!!!!!!!! In HardFault_Handler !!!!!!!!\r\n");
    10da:	4802      	ldr	r0, [pc, #8]	; (10e4 <HardFault_Handler+0xc>)
    10dc:	4b02      	ldr	r3, [pc, #8]	; (10e8 <HardFault_Handler+0x10>)
    10de:	4798      	blx	r3
    10e0:	e7fe      	b.n	10e0 <HardFault_Handler+0x8>
    10e2:	bf00      	nop
    10e4:	00003dd4 	.word	0x00003dd4
    10e8:	0000252d 	.word	0x0000252d

000010ec <main>:
	while (1);
}


int main(void)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    10f0:	4b20      	ldr	r3, [pc, #128]	; (1174 <main+0x88>)
    10f2:	4798      	blx	r3
	
	printf("\r\n\r\n========LiDAR Automated Mapping System (LAMS)========\r\n");
    10f4:	4820      	ldr	r0, [pc, #128]	; (1178 <main+0x8c>)
    10f6:	4b21      	ldr	r3, [pc, #132]	; (117c <main+0x90>)
    10f8:	4798      	blx	r3

	EEPROM_init();
    10fa:	4b21      	ldr	r3, [pc, #132]	; (1180 <main+0x94>)
    10fc:	4798      	blx	r3
	SERVO_set_angle(0);
    10fe:	2000      	movs	r0, #0
    1100:	4b20      	ldr	r3, [pc, #128]	; (1184 <main+0x98>)
    1102:	4798      	blx	r3

	while (1) 
	{
		uint32_t user_selection = 0;

		printf("%s", menu_txt);
    1104:	4f20      	ldr	r7, [pc, #128]	; (1188 <main+0x9c>)
    1106:	4e21      	ldr	r6, [pc, #132]	; (118c <main+0xa0>)
    1108:	4d21      	ldr	r5, [pc, #132]	; (1190 <main+0xa4>)
    110a:	e004      	b.n	1116 <main+0x2a>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    110c:	4b21      	ldr	r3, [pc, #132]	; (1194 <main+0xa8>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	6858      	ldr	r0, [r3, #4]
    1112:	4b21      	ldr	r3, [pc, #132]	; (1198 <main+0xac>)
    1114:	4798      	blx	r3
		uint32_t user_selection = 0;
    1116:	ac02      	add	r4, sp, #8
    1118:	2300      	movs	r3, #0
    111a:	f844 3d04 	str.w	r3, [r4, #-4]!
		printf("%s", menu_txt);
    111e:	4639      	mov	r1, r7
    1120:	4630      	mov	r0, r6
    1122:	47a8      	blx	r5
		if (scanf("%d", &user_selection) == 0) {
    1124:	4621      	mov	r1, r4
    1126:	481d      	ldr	r0, [pc, #116]	; (119c <main+0xb0>)
    1128:	4b1d      	ldr	r3, [pc, #116]	; (11a0 <main+0xb4>)
    112a:	4798      	blx	r3
    112c:	2800      	cmp	r0, #0
    112e:	d0ed      	beq.n	110c <main+0x20>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    1130:	9901      	ldr	r1, [sp, #4]
    1132:	481c      	ldr	r0, [pc, #112]	; (11a4 <main+0xb8>)
    1134:	47a8      	blx	r5
		
		switch (user_selection) {
    1136:	9b01      	ldr	r3, [sp, #4]
    1138:	2b02      	cmp	r3, #2
    113a:	d010      	beq.n	115e <main+0x72>
    113c:	2b03      	cmp	r3, #3
    113e:	d011      	beq.n	1164 <main+0x78>
    1140:	2b01      	cmp	r3, #1
    1142:	d112      	bne.n	116a <main+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
    1144:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1148:	4917      	ldr	r1, [pc, #92]	; (11a8 <main+0xbc>)
    114a:	68ca      	ldr	r2, [r1, #12]
    114c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1150:	4b16      	ldr	r3, [pc, #88]	; (11ac <main+0xc0>)
    1152:	4313      	orrs	r3, r2
    1154:	60cb      	str	r3, [r1, #12]
    1156:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    115a:	bf00      	nop
    115c:	e7fd      	b.n	115a <main+0x6e>
			case 1:
				NVIC_SystemReset();
				break;
			
			case 2:
				EEPROM_menu();
    115e:	4b14      	ldr	r3, [pc, #80]	; (11b0 <main+0xc4>)
    1160:	4798      	blx	r3
				break;
    1162:	e7d8      	b.n	1116 <main+0x2a>

			case 3:
				SERVO_menu();
    1164:	4b13      	ldr	r3, [pc, #76]	; (11b4 <main+0xc8>)
    1166:	4798      	blx	r3
				break;
    1168:	e7d5      	b.n	1116 <main+0x2a>
			//case 4:
				//LIDAR_menu();
				//break;
			
			default:
				printf("\r\nInvalid option \r\n");
    116a:	4813      	ldr	r0, [pc, #76]	; (11b8 <main+0xcc>)
    116c:	4b03      	ldr	r3, [pc, #12]	; (117c <main+0x90>)
    116e:	4798      	blx	r3
				break;
    1170:	e7d1      	b.n	1116 <main+0x2a>
    1172:	bf00      	nop
    1174:	000002d1 	.word	0x000002d1
    1178:	00003e00 	.word	0x00003e00
    117c:	0000252d 	.word	0x0000252d
    1180:	00001469 	.word	0x00001469
    1184:	000011f9 	.word	0x000011f9
    1188:	20000014 	.word	0x20000014
    118c:	00003e3c 	.word	0x00003e3c
    1190:	00002445 	.word	0x00002445
    1194:	20000148 	.word	0x20000148
    1198:	000020a5 	.word	0x000020a5
    119c:	00004134 	.word	0x00004134
    11a0:	0000255d 	.word	0x0000255d
    11a4:	00003e40 	.word	0x00003e40
    11a8:	e000ed00 	.word	0xe000ed00
    11ac:	05fa0004 	.word	0x05fa0004
    11b0:	000015e1 	.word	0x000015e1
    11b4:	000012dd 	.word	0x000012dd
    11b8:	00003e5c 	.word	0x00003e5c

000011bc <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    11bc:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    11be:	4b05      	ldr	r3, [pc, #20]	; (11d4 <sd_mmc_init+0x18>)
    11c0:	2404      	movs	r4, #4
    11c2:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    11c4:	24ff      	movs	r4, #255	; 0xff
    11c6:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    11c8:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    11ca:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    11cc:	635a      	str	r2, [r3, #52]	; 0x34
}
    11ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    11d2:	4770      	bx	lr
    11d4:	2000033c 	.word	0x2000033c

000011d8 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    11d8:	b508      	push	{r3, lr}

	sd_mmc_init(&SDHC_IO_BUS, SDMMC_ACCESS_cd, SDMMC_ACCESS_wp);
    11da:	4903      	ldr	r1, [pc, #12]	; (11e8 <sd_mmc_stack_init+0x10>)
    11dc:	460a      	mov	r2, r1
    11de:	3104      	adds	r1, #4
    11e0:	4802      	ldr	r0, [pc, #8]	; (11ec <sd_mmc_stack_init+0x14>)
    11e2:	4b03      	ldr	r3, [pc, #12]	; (11f0 <sd_mmc_stack_init+0x18>)
    11e4:	4798      	blx	r3
    11e6:	bd08      	pop	{r3, pc}
    11e8:	2000006c 	.word	0x2000006c
    11ec:	20000410 	.word	0x20000410
    11f0:	000011bd 	.word	0x000011bd
    11f4:	00000000 	.word	0x00000000

000011f8 <SERVO_set_angle>:
1. Back to main menu\r\n \
2. Set servo angle\r\n";


void SERVO_set_angle(int angle)
{
    11f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11fa:	4604      	mov	r4, r0
	double angle_ratio = angle / 180.0;
    11fc:	4b2c      	ldr	r3, [pc, #176]	; (12b0 <SERVO_set_angle+0xb8>)
    11fe:	4798      	blx	r3
    1200:	4d2c      	ldr	r5, [pc, #176]	; (12b4 <SERVO_set_angle+0xbc>)
    1202:	2200      	movs	r2, #0
    1204:	4b2c      	ldr	r3, [pc, #176]	; (12b8 <SERVO_set_angle+0xc0>)
    1206:	47a8      	blx	r5
	uint16_t pwm_spread = TC1_PWM_MAXIMUM_us - TC1_PWM_MINIMUM_us;
	double angle_us = TC1_PWM_MINIMUM_us + (double)(angle_ratio * pwm_spread);
    1208:	4e2c      	ldr	r6, [pc, #176]	; (12bc <SERVO_set_angle+0xc4>)
    120a:	2200      	movs	r2, #0
    120c:	4b2c      	ldr	r3, [pc, #176]	; (12c0 <SERVO_set_angle+0xc8>)
    120e:	47b0      	blx	r6
    1210:	2200      	movs	r2, #0
    1212:	4b2c      	ldr	r3, [pc, #176]	; (12c4 <SERVO_set_angle+0xcc>)
    1214:	4f2c      	ldr	r7, [pc, #176]	; (12c8 <SERVO_set_angle+0xd0>)
    1216:	47b8      	blx	r7
	uint16_t angle_val = (angle_us * TC1_COUNT) / TC1_PWM_PERIOD_us;
    1218:	a321      	add	r3, pc, #132	; (adr r3, 12a0 <SERVO_set_angle+0xa8>)
    121a:	e9d3 2300 	ldrd	r2, r3, [r3]
    121e:	47b0      	blx	r6
    1220:	a321      	add	r3, pc, #132	; (adr r3, 12a8 <SERVO_set_angle+0xb0>)
    1222:	e9d3 2300 	ldrd	r2, r3, [r3]
    1226:	47a8      	blx	r5
    1228:	4b28      	ldr	r3, [pc, #160]	; (12cc <SERVO_set_angle+0xd4>)
    122a:	4798      	blx	r3
    122c:	b282      	uxth	r2, r0
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    122e:	4b28      	ldr	r3, [pc, #160]	; (12d0 <SERVO_set_angle+0xd8>)
    1230:	691b      	ldr	r3, [r3, #16]
	
	if (!hri_tc_is_syncing(TC1, TC_SYNCBUSY_SWRST)) {
    1232:	f013 0f01 	tst.w	r3, #1
    1236:	d117      	bne.n	1268 <SERVO_set_angle+0x70>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1238:	4925      	ldr	r1, [pc, #148]	; (12d0 <SERVO_set_angle+0xd8>)
    123a:	690b      	ldr	r3, [r1, #16]
    123c:	f013 0f03 	tst.w	r3, #3
    1240:	d1fb      	bne.n	123a <SERVO_set_angle+0x42>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1242:	4b23      	ldr	r3, [pc, #140]	; (12d0 <SERVO_set_angle+0xd8>)
    1244:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC1, TC_CTRLA_ENABLE)) {
    1246:	f013 0f02 	tst.w	r3, #2
    124a:	d00d      	beq.n	1268 <SERVO_set_angle+0x70>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    124c:	4920      	ldr	r1, [pc, #128]	; (12d0 <SERVO_set_angle+0xd8>)
    124e:	680b      	ldr	r3, [r1, #0]
    1250:	f023 0302 	bic.w	r3, r3, #2
    1254:	600b      	str	r3, [r1, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1256:	690b      	ldr	r3, [r1, #16]
    1258:	f013 0f03 	tst.w	r3, #3
    125c:	d1fb      	bne.n	1256 <SERVO_set_angle+0x5e>
    125e:	491c      	ldr	r1, [pc, #112]	; (12d0 <SERVO_set_angle+0xd8>)
    1260:	690b      	ldr	r3, [r1, #16]
    1262:	f013 0f02 	tst.w	r3, #2
    1266:	d1fb      	bne.n	1260 <SERVO_set_angle+0x68>
    1268:	4919      	ldr	r1, [pc, #100]	; (12d0 <SERVO_set_angle+0xd8>)
    126a:	690b      	ldr	r3, [r1, #16]
    126c:	f013 0f01 	tst.w	r3, #1
    1270:	d1fb      	bne.n	126a <SERVO_set_angle+0x72>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1272:	4b17      	ldr	r3, [pc, #92]	; (12d0 <SERVO_set_angle+0xd8>)
    1274:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1276:	4619      	mov	r1, r3
    1278:	690b      	ldr	r3, [r1, #16]
    127a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    127e:	d1fb      	bne.n	1278 <SERVO_set_angle+0x80>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1280:	4913      	ldr	r1, [pc, #76]	; (12d0 <SERVO_set_angle+0xd8>)
    1282:	680b      	ldr	r3, [r1, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1284:	f043 0302 	orr.w	r3, r3, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1288:	600b      	str	r3, [r1, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    128a:	690b      	ldr	r3, [r1, #16]
    128c:	f013 0f03 	tst.w	r3, #3
    1290:	d1fb      	bne.n	128a <SERVO_set_angle+0x92>
	
	hri_tccount16_write_CC_reg(TC1, 1, angle_val);
	
	hri_tc_write_CTRLA_ENABLE_bit(TC1, 1 << TC_CTRLA_ENABLE_Pos); 
	
	printf("\r\nSetting servo angle to %0d (%0d/2273)\r\n", angle, angle_val);
    1292:	4621      	mov	r1, r4
    1294:	480f      	ldr	r0, [pc, #60]	; (12d4 <SERVO_set_angle+0xdc>)
    1296:	4b10      	ldr	r3, [pc, #64]	; (12d8 <SERVO_set_angle+0xe0>)
    1298:	4798      	blx	r3
    129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    129c:	f3af 8000 	nop.w
    12a0:	00000000 	.word	0x00000000
    12a4:	40a1c200 	.word	0x40a1c200
    12a8:	00000000 	.word	0x00000000
    12ac:	40a7ac00 	.word	0x40a7ac00
    12b0:	00001a11 	.word	0x00001a11
    12b4:	00001d31 	.word	0x00001d31
    12b8:	40668000 	.word	0x40668000
    12bc:	00001add 	.word	0x00001add
    12c0:	409f4000 	.word	0x409f4000
    12c4:	407f4000 	.word	0x407f4000
    12c8:	00001779 	.word	0x00001779
    12cc:	00001f01 	.word	0x00001f01
    12d0:	40003c00 	.word	0x40003c00
    12d4:	00003e70 	.word	0x00003e70
    12d8:	00002445 	.word	0x00002445

000012dc <SERVO_menu>:
	
}

void SERVO_menu(void)
{
    12dc:	b570      	push	{r4, r5, r6, lr}
    12de:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
    12e0:	2300      	movs	r3, #0
    12e2:	9301      	str	r3, [sp, #4]
	uint32_t servo_angle	= 0;
    12e4:	9300      	str	r3, [sp, #0]
	
	while (1) {
		printf("%s", servo_menu_txt);
    12e6:	4e19      	ldr	r6, [pc, #100]	; (134c <SERVO_menu+0x70>)
    12e8:	4d19      	ldr	r5, [pc, #100]	; (1350 <SERVO_menu+0x74>)
    12ea:	4c1a      	ldr	r4, [pc, #104]	; (1354 <SERVO_menu+0x78>)
    12ec:	e004      	b.n	12f8 <SERVO_menu+0x1c>
		
		if (scanf("%d", &user_selection) == 0) {
			/* If its not a number, flush stdin */
			fflush(stdin);
    12ee:	4b1a      	ldr	r3, [pc, #104]	; (1358 <SERVO_menu+0x7c>)
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	6858      	ldr	r0, [r3, #4]
    12f4:	4b19      	ldr	r3, [pc, #100]	; (135c <SERVO_menu+0x80>)
    12f6:	4798      	blx	r3
		printf("%s", servo_menu_txt);
    12f8:	4631      	mov	r1, r6
    12fa:	4628      	mov	r0, r5
    12fc:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    12fe:	a901      	add	r1, sp, #4
    1300:	4817      	ldr	r0, [pc, #92]	; (1360 <SERVO_menu+0x84>)
    1302:	4b18      	ldr	r3, [pc, #96]	; (1364 <SERVO_menu+0x88>)
    1304:	4798      	blx	r3
    1306:	2800      	cmp	r0, #0
    1308:	d0f1      	beq.n	12ee <SERVO_menu+0x12>
			continue;
		}
		
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    130a:	9901      	ldr	r1, [sp, #4]
    130c:	4816      	ldr	r0, [pc, #88]	; (1368 <SERVO_menu+0x8c>)
    130e:	47a0      	blx	r4
		
		switch (user_selection) {
    1310:	9b01      	ldr	r3, [sp, #4]
    1312:	2b01      	cmp	r3, #1
    1314:	d005      	beq.n	1322 <SERVO_menu+0x46>
    1316:	2b02      	cmp	r3, #2
    1318:	d008      	beq.n	132c <SERVO_menu+0x50>
			
			SERVO_set_angle(servo_angle);
			break;
			
			default:
			printf("\r\nInvalid option\r\n");
    131a:	4814      	ldr	r0, [pc, #80]	; (136c <SERVO_menu+0x90>)
    131c:	4b14      	ldr	r3, [pc, #80]	; (1370 <SERVO_menu+0x94>)
    131e:	4798      	blx	r3
			break;
    1320:	e7ea      	b.n	12f8 <SERVO_menu+0x1c>
			printf("\r\nReturning to main menu\r\n");
    1322:	4814      	ldr	r0, [pc, #80]	; (1374 <SERVO_menu+0x98>)
    1324:	4b12      	ldr	r3, [pc, #72]	; (1370 <SERVO_menu+0x94>)
    1326:	4798      	blx	r3
		}
	}
}
    1328:	b002      	add	sp, #8
    132a:	bd70      	pop	{r4, r5, r6, pc}
			printf("\r\nEnter angle >> ");
    132c:	4812      	ldr	r0, [pc, #72]	; (1378 <SERVO_menu+0x9c>)
    132e:	47a0      	blx	r4
			scanf("%d", &servo_angle);
    1330:	4669      	mov	r1, sp
    1332:	480b      	ldr	r0, [pc, #44]	; (1360 <SERVO_menu+0x84>)
    1334:	4b0b      	ldr	r3, [pc, #44]	; (1364 <SERVO_menu+0x88>)
    1336:	4798      	blx	r3
			if (servo_angle < 0 || servo_angle > 180) {
    1338:	9900      	ldr	r1, [sp, #0]
    133a:	29b4      	cmp	r1, #180	; 0xb4
    133c:	d902      	bls.n	1344 <SERVO_menu+0x68>
				printf("%d\r\nERROR: Invalid angle. Angle must be between 0 and 180\r\n", 
    133e:	480f      	ldr	r0, [pc, #60]	; (137c <SERVO_menu+0xa0>)
    1340:	47a0      	blx	r4
				break;
    1342:	e7d9      	b.n	12f8 <SERVO_menu+0x1c>
			SERVO_set_angle(servo_angle);
    1344:	4608      	mov	r0, r1
    1346:	4b0e      	ldr	r3, [pc, #56]	; (1380 <SERVO_menu+0xa4>)
    1348:	4798      	blx	r3
			break;
    134a:	e7d5      	b.n	12f8 <SERVO_menu+0x1c>
    134c:	20000074 	.word	0x20000074
    1350:	00003e3c 	.word	0x00003e3c
    1354:	00002445 	.word	0x00002445
    1358:	20000148 	.word	0x20000148
    135c:	000020a5 	.word	0x000020a5
    1360:	00004134 	.word	0x00004134
    1364:	0000255d 	.word	0x0000255d
    1368:	00003e40 	.word	0x00003e40
    136c:	00003f08 	.word	0x00003f08
    1370:	0000252d 	.word	0x0000252d
    1374:	00003e9c 	.word	0x00003e9c
    1378:	00003eb8 	.word	0x00003eb8
    137c:	00003ecc 	.word	0x00003ecc
    1380:	000011f9 	.word	0x000011f9

00001384 <invert_seep_byte>:

/**
  * To invert the data at the given index in SmartEEPROM
  */
void invert_seep_byte(uint8_t index)
{
    1384:	b570      	push	{r4, r5, r6, lr}
    1386:	4604      	mov	r4, r0
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    1388:	4a0b      	ldr	r2, [pc, #44]	; (13b8 <invert_seep_byte+0x34>)
    138a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	/* Wait till the SmartEEPROM is free */
	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    138c:	f013 0f04 	tst.w	r3, #4
    1390:	d1fb      	bne.n	138a <invert_seep_byte+0x6>

	/* Read the data, invert it, and write it back */
	data_8 = SmartEEPROM8[index];
    1392:	4e0a      	ldr	r6, [pc, #40]	; (13bc <invert_seep_byte+0x38>)
    1394:	6833      	ldr	r3, [r6, #0]
    1396:	5d1a      	ldrb	r2, [r3, r4]
    1398:	4d09      	ldr	r5, [pc, #36]	; (13c0 <invert_seep_byte+0x3c>)
    139a:	702a      	strb	r2, [r5, #0]
	printf("\r\nData at test address %d is = %d\r\n", index, (int)data_8);
    139c:	4621      	mov	r1, r4
    139e:	4809      	ldr	r0, [pc, #36]	; (13c4 <invert_seep_byte+0x40>)
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <invert_seep_byte+0x44>)
    13a2:	4798      	blx	r3
	SmartEEPROM8[index] = !data_8;
    13a4:	6832      	ldr	r2, [r6, #0]
    13a6:	782b      	ldrb	r3, [r5, #0]
    13a8:	fab3 f383 	clz	r3, r3
    13ac:	095b      	lsrs	r3, r3, #5
    13ae:	5513      	strb	r3, [r2, r4]
	printf("\r\nInverted the data at test address and written\r\n");
    13b0:	4806      	ldr	r0, [pc, #24]	; (13cc <invert_seep_byte+0x48>)
    13b2:	4b07      	ldr	r3, [pc, #28]	; (13d0 <invert_seep_byte+0x4c>)
    13b4:	4798      	blx	r3
    13b6:	bd70      	pop	{r4, r5, r6, pc}
    13b8:	41004000 	.word	0x41004000
    13bc:	200000c4 	.word	0x200000c4
    13c0:	20000444 	.word	0x20000444
    13c4:	00003f1c 	.word	0x00003f1c
    13c8:	00002445 	.word	0x00002445
    13cc:	00003f40 	.word	0x00003f40
    13d0:	0000252d 	.word	0x0000252d

000013d4 <verify_seep_signature>:

/**
  * Verify the custom data at initial 4 bytes of SmartEEPROM
  */
int8_t verify_seep_signature(void)
{
    13d4:	b508      	push	{r3, lr}
    13d6:	4a0b      	ldr	r2, [pc, #44]	; (1404 <verify_seep_signature+0x30>)
    13d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	int8_t ret_val = ERR_INVALID_DATA;

	while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    13da:	f013 0f04 	tst.w	r3, #4
    13de:	d1fb      	bne.n	13d8 <verify_seep_signature+0x4>
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_SBLK_Msk) >> NVMCTRL_SEESTAT_SBLK_Pos;
    13e0:	4b08      	ldr	r3, [pc, #32]	; (1404 <verify_seep_signature+0x30>)
    13e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	/* If SBLK fuse is not configured, inform the user and wait here */
	if (!(hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL))) {
    13e4:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    13e8:	d008      	beq.n	13fc <verify_seep_signature+0x28>
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
		while (1);
	}

	if (SMEE_CUSTOM_SIG == SmartEEPROM32[0]) {
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <verify_seep_signature+0x34>)
    13ec:	685b      	ldr	r3, [r3, #4]
    13ee:	6818      	ldr	r0, [r3, #0]
		ret_val = ERR_NONE;
	}

	return ret_val;
}
    13f0:	f1b0 305a 	subs.w	r0, r0, #1515870810	; 0x5a5a5a5a
    13f4:	bf18      	it	ne
    13f6:	f04f 30ff 	movne.w	r0, #4294967295
    13fa:	bd08      	pop	{r3, pc}
		printf("\r\nPlease configure SBLK fuse to allocate SmartEEPROM area\r\n");
    13fc:	4803      	ldr	r0, [pc, #12]	; (140c <verify_seep_signature+0x38>)
    13fe:	4b04      	ldr	r3, [pc, #16]	; (1410 <verify_seep_signature+0x3c>)
    1400:	4798      	blx	r3
    1402:	e7fe      	b.n	1402 <verify_seep_signature+0x2e>
    1404:	41004000 	.word	0x41004000
    1408:	200000c4 	.word	0x200000c4
    140c:	00003f74 	.word	0x00003f74
    1410:	0000252d 	.word	0x0000252d

00001414 <print_hex_array>:

/**
  * Print a given array as a hex values
  */
void print_hex_array(void *mem, uint16_t len)
{
    1414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t       i;
	unsigned char *p = (unsigned char *)mem;

	for (i = 0; i < len; i++) {
    1418:	b1c9      	cbz	r1, 144e <print_hex_array+0x3a>
    141a:	460e      	mov	r6, r1
    141c:	1e45      	subs	r5, r0, #1
    141e:	2400      	movs	r4, #0
		printf("%02d ", p[i]);
    1420:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1464 <print_hex_array+0x50>
    1424:	4f0c      	ldr	r7, [pc, #48]	; (1458 <print_hex_array+0x44>)
		if ((i % 8 == 0) && i)
			printf("\r\n");
    1426:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1460 <print_hex_array+0x4c>
    142a:	e003      	b.n	1434 <print_hex_array+0x20>
	for (i = 0; i < len; i++) {
    142c:	3401      	adds	r4, #1
    142e:	b2a4      	uxth	r4, r4
    1430:	42a6      	cmp	r6, r4
    1432:	d00c      	beq.n	144e <print_hex_array+0x3a>
		printf("%02d ", p[i]);
    1434:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    1438:	4640      	mov	r0, r8
    143a:	47b8      	blx	r7
		if ((i % 8 == 0) && i)
    143c:	f014 0f07 	tst.w	r4, #7
    1440:	d1f4      	bne.n	142c <print_hex_array+0x18>
    1442:	2c00      	cmp	r4, #0
    1444:	d0f2      	beq.n	142c <print_hex_array+0x18>
			printf("\r\n");
    1446:	4648      	mov	r0, r9
    1448:	4b04      	ldr	r3, [pc, #16]	; (145c <print_hex_array+0x48>)
    144a:	4798      	blx	r3
    144c:	e7ee      	b.n	142c <print_hex_array+0x18>
	}
	printf("\r\n");
    144e:	4804      	ldr	r0, [pc, #16]	; (1460 <print_hex_array+0x4c>)
    1450:	4b02      	ldr	r3, [pc, #8]	; (145c <print_hex_array+0x48>)
    1452:	4798      	blx	r3
    1454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1458:	00002445 	.word	0x00002445
    145c:	0000252d 	.word	0x0000252d
    1460:	0000410c 	.word	0x0000410c
    1464:	00003fb0 	.word	0x00003fb0

00001468 <EEPROM_init>:

/**
  * Initialize EEPROM usage for menu
  */
void EEPROM_init(void)
{
    1468:	b508      	push	{r3, lr}
	if (ERR_NONE == verify_seep_signature()) {
    146a:	4b19      	ldr	r3, [pc, #100]	; (14d0 <EEPROM_init+0x68>)
    146c:	4798      	blx	r3
    146e:	b9d0      	cbnz	r0, 14a6 <EEPROM_init+0x3e>
		printf("\r\nSmartEEPROM contains valid data \r\n");
    1470:	4818      	ldr	r0, [pc, #96]	; (14d4 <EEPROM_init+0x6c>)
    1472:	4b19      	ldr	r3, [pc, #100]	; (14d8 <EEPROM_init+0x70>)
    1474:	4798      	blx	r3
    1476:	4b19      	ldr	r3, [pc, #100]	; (14dc <EEPROM_init+0x74>)
    1478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_PSZ_Msk) >> NVMCTRL_SEESTAT_PSZ_Pos;
    147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	} else {
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
	}
	printf("\r\nFuse values for SBLK = %d, PSZ = %d. See the table 'SmartEEPROM Virtual \
    147c:	f3c2 4202 	ubfx	r2, r2, #16, #3
    1480:	f3c1 2103 	ubfx	r1, r1, #8, #4
    1484:	4816      	ldr	r0, [pc, #88]	; (14e0 <EEPROM_init+0x78>)
    1486:	4b17      	ldr	r3, [pc, #92]	; (14e4 <EEPROM_init+0x7c>)
    1488:	4798      	blx	r3
		Size in Bytes' in the Datasheet to calculate total available bytes \r\n",
		(int)hri_nvmctrl_read_SEESTAT_SBLK_bf(NVMCTRL),
		(int)hri_nvmctrl_read_SEESTAT_PSZ_bf(NVMCTRL));

	/* Toggle a SmartEEPROM byte and give indication with LED0 on SAM E54 Xpro */
	invert_seep_byte(SEEP_TEST_ADDR);
    148a:	2020      	movs	r0, #32
    148c:	4b16      	ldr	r3, [pc, #88]	; (14e8 <EEPROM_init+0x80>)
    148e:	4798      	blx	r3

	/* Check the data at test address and show indication on LED0 */
	if (SmartEEPROM8[SEEP_TEST_ADDR]) {
    1490:	4b16      	ldr	r3, [pc, #88]	; (14ec <EEPROM_init+0x84>)
    1492:	681b      	ldr	r3, [r3, #0]
    1494:	f893 3020 	ldrb.w	r3, [r3, #32]
    1498:	b99b      	cbnz	r3, 14c2 <EEPROM_init+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    149a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    149e:	4b14      	ldr	r3, [pc, #80]	; (14f0 <EEPROM_init+0x88>)
    14a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    14a4:	bd08      	pop	{r3, pc}
		printf("\r\nStoring signature to SmartEEPROM address 0x00 to 0x03\r\n");
    14a6:	4813      	ldr	r0, [pc, #76]	; (14f4 <EEPROM_init+0x8c>)
    14a8:	4b0b      	ldr	r3, [pc, #44]	; (14d8 <EEPROM_init+0x70>)
    14aa:	4798      	blx	r3
	return (((Nvmctrl *)hw)->SEESTAT.reg & NVMCTRL_SEESTAT_BUSY) >> NVMCTRL_SEESTAT_BUSY_Pos;
    14ac:	4a0b      	ldr	r2, [pc, #44]	; (14dc <EEPROM_init+0x74>)
    14ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		while (hri_nvmctrl_get_SEESTAT_BUSY_bit(NVMCTRL));
    14b0:	f013 0f04 	tst.w	r3, #4
    14b4:	d1fb      	bne.n	14ae <EEPROM_init+0x46>
		SmartEEPROM32[0] = SMEE_CUSTOM_SIG;
    14b6:	4b0d      	ldr	r3, [pc, #52]	; (14ec <EEPROM_init+0x84>)
    14b8:	685b      	ldr	r3, [r3, #4]
    14ba:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
    14be:	601a      	str	r2, [r3, #0]
    14c0:	e7d9      	b.n	1476 <EEPROM_init+0xe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    14c6:	4b0a      	ldr	r3, [pc, #40]	; (14f0 <EEPROM_init+0x88>)
    14c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    14cc:	bd08      	pop	{r3, pc}
    14ce:	bf00      	nop
    14d0:	000013d5 	.word	0x000013d5
    14d4:	00003fb8 	.word	0x00003fb8
    14d8:	0000252d 	.word	0x0000252d
    14dc:	41004000 	.word	0x41004000
    14e0:	00004018 	.word	0x00004018
    14e4:	00002445 	.word	0x00002445
    14e8:	00001385 	.word	0x00001385
    14ec:	200000c4 	.word	0x200000c4
    14f0:	41008000 	.word	0x41008000
    14f4:	00003fdc 	.word	0x00003fdc

000014f8 <EEPROM_read>:

/** 
  * Code to read from EEPROM 
  */
void EEPROM_read(void) 
{
    14f8:	b508      	push	{r3, lr}
	uint8_t i = 0;
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    14fa:	4b0a      	ldr	r3, [pc, #40]	; (1524 <EEPROM_read+0x2c>)
    14fc:	681a      	ldr	r2, [r3, #0]
    14fe:	3a01      	subs	r2, #1
    1500:	4809      	ldr	r0, [pc, #36]	; (1528 <EEPROM_read+0x30>)
    1502:	1e43      	subs	r3, r0, #1
    1504:	3063      	adds	r0, #99	; 0x63
    1506:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    150a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    150e:	4283      	cmp	r3, r0
    1510:	d1f9      	bne.n	1506 <EEPROM_read+0xe>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1512:	2164      	movs	r1, #100	; 0x64
    1514:	4805      	ldr	r0, [pc, #20]	; (152c <EEPROM_read+0x34>)
    1516:	4b06      	ldr	r3, [pc, #24]	; (1530 <EEPROM_read+0x38>)
    1518:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    151a:	2164      	movs	r1, #100	; 0x64
    151c:	4802      	ldr	r0, [pc, #8]	; (1528 <EEPROM_read+0x30>)
    151e:	4b05      	ldr	r3, [pc, #20]	; (1534 <EEPROM_read+0x3c>)
    1520:	4798      	blx	r3
    1522:	bd08      	pop	{r3, pc}
    1524:	200000c4 	.word	0x200000c4
    1528:	20000378 	.word	0x20000378
    152c:	000040ac 	.word	0x000040ac
    1530:	00002445 	.word	0x00002445
    1534:	00001415 	.word	0x00001415

00001538 <EEPROM_write>:
/**
  * Code to write EEPROM. Tested with SBLK = 1 and PSZ = 03
  * Thus the highest address is 4095 (See datasheet for the more details).
  */
void EEPROM_write(void)
{
    1538:	b530      	push	{r4, r5, lr}
    153a:	b083      	sub	sp, #12
	uint32_t ee_data = 0;
    153c:	2300      	movs	r3, #0
    153e:	9301      	str	r3, [sp, #4]
	uint32_t ee_addr = 0;
    1540:	ac02      	add	r4, sp, #8
    1542:	f844 3d08 	str.w	r3, [r4, #-8]!
	uint8_t i        = 0;
	
	printf("\r\nEnter address >> ");
    1546:	481a      	ldr	r0, [pc, #104]	; (15b0 <EEPROM_write+0x78>)
    1548:	4b1a      	ldr	r3, [pc, #104]	; (15b4 <EEPROM_write+0x7c>)
    154a:	4798      	blx	r3
	scanf("%d", &ee_addr);
    154c:	4621      	mov	r1, r4
    154e:	481a      	ldr	r0, [pc, #104]	; (15b8 <EEPROM_write+0x80>)
    1550:	4b1a      	ldr	r3, [pc, #104]	; (15bc <EEPROM_write+0x84>)
    1552:	4798      	blx	r3
	
	if (ee_addr > SEEP_FINAL_BYTE_INDEX) {
    1554:	9b00      	ldr	r3, [sp, #0]
    1556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    155a:	d224      	bcs.n	15a6 <EEPROM_write+0x6e>
		printf("\r\nERROR: Address invalid. Try again \r\n");
		return;
	}
	printf("\r\nEnter data >> ");
    155c:	4818      	ldr	r0, [pc, #96]	; (15c0 <EEPROM_write+0x88>)
    155e:	4d15      	ldr	r5, [pc, #84]	; (15b4 <EEPROM_write+0x7c>)
    1560:	47a8      	blx	r5
	scanf("%d", &ee_data);
    1562:	a901      	add	r1, sp, #4
    1564:	4814      	ldr	r0, [pc, #80]	; (15b8 <EEPROM_write+0x80>)
    1566:	4b15      	ldr	r3, [pc, #84]	; (15bc <EEPROM_write+0x84>)
    1568:	4798      	blx	r3
	
	SmartEEPROM8[ee_addr] = ee_data;
    156a:	4c16      	ldr	r4, [pc, #88]	; (15c4 <EEPROM_write+0x8c>)
    156c:	6822      	ldr	r2, [r4, #0]
    156e:	9901      	ldr	r1, [sp, #4]
    1570:	9b00      	ldr	r3, [sp, #0]
    1572:	54d1      	strb	r1, [r2, r3]
	
	printf("\r\nWritten %d at %d", (int)ee_data, (int)ee_addr);
    1574:	9a00      	ldr	r2, [sp, #0]
    1576:	9901      	ldr	r1, [sp, #4]
    1578:	4813      	ldr	r0, [pc, #76]	; (15c8 <EEPROM_write+0x90>)
    157a:	47a8      	blx	r5
    157c:	6822      	ldr	r2, [r4, #0]
    157e:	3a01      	subs	r2, #1
    1580:	4812      	ldr	r0, [pc, #72]	; (15cc <EEPROM_write+0x94>)
    1582:	1e43      	subs	r3, r0, #1
    1584:	3063      	adds	r0, #99	; 0x63
	
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
		ee_data_buffer[i] = SmartEEPROM8[i];
    1586:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    158a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TEST_BUFF_SIZE; i++) {
    158e:	4283      	cmp	r3, r0
    1590:	d1f9      	bne.n	1586 <EEPROM_write+0x4e>
	}
	printf("\r\nEEPROM Data at first %d locations: \r\n", TEST_BUFF_SIZE);
    1592:	2164      	movs	r1, #100	; 0x64
    1594:	480e      	ldr	r0, [pc, #56]	; (15d0 <EEPROM_write+0x98>)
    1596:	4b07      	ldr	r3, [pc, #28]	; (15b4 <EEPROM_write+0x7c>)
    1598:	4798      	blx	r3
	print_hex_array(ee_data_buffer, TEST_BUFF_SIZE);
    159a:	2164      	movs	r1, #100	; 0x64
    159c:	480b      	ldr	r0, [pc, #44]	; (15cc <EEPROM_write+0x94>)
    159e:	4b0d      	ldr	r3, [pc, #52]	; (15d4 <EEPROM_write+0x9c>)
    15a0:	4798      	blx	r3
}
    15a2:	b003      	add	sp, #12
    15a4:	bd30      	pop	{r4, r5, pc}
		printf("\r\nERROR: Address invalid. Try again \r\n");
    15a6:	480c      	ldr	r0, [pc, #48]	; (15d8 <EEPROM_write+0xa0>)
    15a8:	4b0c      	ldr	r3, [pc, #48]	; (15dc <EEPROM_write+0xa4>)
    15aa:	4798      	blx	r3
    15ac:	e7f9      	b.n	15a2 <EEPROM_write+0x6a>
    15ae:	bf00      	nop
    15b0:	000040d4 	.word	0x000040d4
    15b4:	00002445 	.word	0x00002445
    15b8:	00004134 	.word	0x00004134
    15bc:	0000255d 	.word	0x0000255d
    15c0:	00004110 	.word	0x00004110
    15c4:	200000c4 	.word	0x200000c4
    15c8:	00004124 	.word	0x00004124
    15cc:	20000378 	.word	0x20000378
    15d0:	000040ac 	.word	0x000040ac
    15d4:	00001415 	.word	0x00001415
    15d8:	000040e8 	.word	0x000040e8
    15dc:	0000252d 	.word	0x0000252d

000015e0 <EEPROM_menu>:
{
    15e0:	b570      	push	{r4, r5, r6, lr}
    15e2:	b082      	sub	sp, #8
	uint32_t user_selection = 0;
    15e4:	2300      	movs	r3, #0
    15e6:	9301      	str	r3, [sp, #4]
		printf("%s", eeprom_menu_txt);
    15e8:	4e1b      	ldr	r6, [pc, #108]	; (1658 <EEPROM_menu+0x78>)
    15ea:	4d1c      	ldr	r5, [pc, #112]	; (165c <EEPROM_menu+0x7c>)
    15ec:	4c1c      	ldr	r4, [pc, #112]	; (1660 <EEPROM_menu+0x80>)
    15ee:	4631      	mov	r1, r6
    15f0:	4628      	mov	r0, r5
    15f2:	47a0      	blx	r4
		if (scanf("%d", &user_selection) == 0) {
    15f4:	a901      	add	r1, sp, #4
    15f6:	481b      	ldr	r0, [pc, #108]	; (1664 <EEPROM_menu+0x84>)
    15f8:	4b1b      	ldr	r3, [pc, #108]	; (1668 <EEPROM_menu+0x88>)
    15fa:	4798      	blx	r3
    15fc:	b150      	cbz	r0, 1614 <EEPROM_menu+0x34>
		printf("\r\nSelected option is %d\r\n", (int)user_selection);
    15fe:	9901      	ldr	r1, [sp, #4]
    1600:	481a      	ldr	r0, [pc, #104]	; (166c <EEPROM_menu+0x8c>)
    1602:	47a0      	blx	r4
		switch (user_selection) {
    1604:	9b01      	ldr	r3, [sp, #4]
    1606:	3b01      	subs	r3, #1
    1608:	2b03      	cmp	r3, #3
    160a:	d821      	bhi.n	1650 <EEPROM_menu+0x70>
    160c:	e8df f003 	tbb	[pc, r3]
    1610:	1d1a1508 	.word	0x1d1a1508
			fflush(stdin);
    1614:	4b16      	ldr	r3, [pc, #88]	; (1670 <EEPROM_menu+0x90>)
    1616:	681b      	ldr	r3, [r3, #0]
    1618:	6858      	ldr	r0, [r3, #4]
    161a:	4b16      	ldr	r3, [pc, #88]	; (1674 <EEPROM_menu+0x94>)
    161c:	4798      	blx	r3
    161e:	e7ee      	b.n	15fe <EEPROM_menu+0x1e>
    1620:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1624:	4914      	ldr	r1, [pc, #80]	; (1678 <EEPROM_menu+0x98>)
    1626:	68ca      	ldr	r2, [r1, #12]
    1628:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    162c:	4b13      	ldr	r3, [pc, #76]	; (167c <EEPROM_menu+0x9c>)
    162e:	4313      	orrs	r3, r2
    1630:	60cb      	str	r3, [r1, #12]
    1632:	f3bf 8f4f 	dsb	sy
    __NOP();
    1636:	bf00      	nop
    1638:	e7fd      	b.n	1636 <EEPROM_menu+0x56>
				printf("\r\nReturning to main menu\r\n");
    163a:	4811      	ldr	r0, [pc, #68]	; (1680 <EEPROM_menu+0xa0>)
    163c:	4b11      	ldr	r3, [pc, #68]	; (1684 <EEPROM_menu+0xa4>)
    163e:	4798      	blx	r3
}
    1640:	b002      	add	sp, #8
    1642:	bd70      	pop	{r4, r5, r6, pc}
				EEPROM_read();
    1644:	4b10      	ldr	r3, [pc, #64]	; (1688 <EEPROM_menu+0xa8>)
    1646:	4798      	blx	r3
				break;
    1648:	e7d1      	b.n	15ee <EEPROM_menu+0xe>
				EEPROM_write();
    164a:	4b10      	ldr	r3, [pc, #64]	; (168c <EEPROM_menu+0xac>)
    164c:	4798      	blx	r3
				break;
    164e:	e7ce      	b.n	15ee <EEPROM_menu+0xe>
				printf("\r\nInvalid option\r\n");
    1650:	480f      	ldr	r0, [pc, #60]	; (1690 <EEPROM_menu+0xb0>)
    1652:	4b0c      	ldr	r3, [pc, #48]	; (1684 <EEPROM_menu+0xa4>)
    1654:	4798      	blx	r3
				break;
    1656:	e7ca      	b.n	15ee <EEPROM_menu+0xe>
    1658:	200000cc 	.word	0x200000cc
    165c:	00003e3c 	.word	0x00003e3c
    1660:	00002445 	.word	0x00002445
    1664:	00004134 	.word	0x00004134
    1668:	0000255d 	.word	0x0000255d
    166c:	00003e40 	.word	0x00003e40
    1670:	20000148 	.word	0x20000148
    1674:	000020a5 	.word	0x000020a5
    1678:	e000ed00 	.word	0xe000ed00
    167c:	05fa0004 	.word	0x05fa0004
    1680:	00003e9c 	.word	0x00003e9c
    1684:	0000252d 	.word	0x0000252d
    1688:	000014f9 	.word	0x000014f9
    168c:	00001539 	.word	0x00001539
    1690:	00003f08 	.word	0x00003f08

00001694 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    1694:	b940      	cbnz	r0, 16a8 <_read+0x14>
{
    1696:	b508      	push	{r3, lr}
    1698:	460b      	mov	r3, r1
    169a:	4611      	mov	r1, r2
    169c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    169e:	4b04      	ldr	r3, [pc, #16]	; (16b0 <_read+0x1c>)
    16a0:	4798      	blx	r3
    16a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    16a6:	bd08      	pop	{r3, pc}
		return -1;
    16a8:	f04f 30ff 	mov.w	r0, #4294967295
    16ac:	4770      	bx	lr
    16ae:	bf00      	nop
    16b0:	00001705 	.word	0x00001705

000016b4 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    16b4:	3801      	subs	r0, #1
    16b6:	2802      	cmp	r0, #2
    16b8:	d808      	bhi.n	16cc <_write+0x18>
{
    16ba:	b508      	push	{r3, lr}
    16bc:	460b      	mov	r3, r1
    16be:	4611      	mov	r1, r2
    16c0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    16c2:	4b04      	ldr	r3, [pc, #16]	; (16d4 <_write+0x20>)
    16c4:	4798      	blx	r3
    16c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    16ca:	bd08      	pop	{r3, pc}
		return -1;
    16cc:	f04f 30ff 	mov.w	r0, #4294967295
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop
    16d4:	00001729 	.word	0x00001729

000016d8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    16d8:	b570      	push	{r4, r5, r6, lr}
    16da:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    16dc:	4d06      	ldr	r5, [pc, #24]	; (16f8 <stdio_io_init+0x20>)
    16de:	682b      	ldr	r3, [r5, #0]
    16e0:	2100      	movs	r1, #0
    16e2:	6898      	ldr	r0, [r3, #8]
    16e4:	4c05      	ldr	r4, [pc, #20]	; (16fc <stdio_io_init+0x24>)
    16e6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    16e8:	682b      	ldr	r3, [r5, #0]
    16ea:	2100      	movs	r1, #0
    16ec:	6858      	ldr	r0, [r3, #4]
    16ee:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    16f0:	4b03      	ldr	r3, [pc, #12]	; (1700 <stdio_io_init+0x28>)
    16f2:	601e      	str	r6, [r3, #0]
    16f4:	bd70      	pop	{r4, r5, r6, pc}
    16f6:	bf00      	nop
    16f8:	20000148 	.word	0x20000148
    16fc:	0000258d 	.word	0x0000258d
    1700:	200003dc 	.word	0x200003dc

00001704 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1704:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1706:	4b06      	ldr	r3, [pc, #24]	; (1720 <stdio_io_read+0x1c>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	b133      	cbz	r3, 171a <stdio_io_read+0x16>
    170c:	460a      	mov	r2, r1
    170e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1710:	b292      	uxth	r2, r2
    1712:	4618      	mov	r0, r3
    1714:	4b03      	ldr	r3, [pc, #12]	; (1724 <stdio_io_read+0x20>)
    1716:	4798      	blx	r3
    1718:	bd08      	pop	{r3, pc}
		return 0;
    171a:	2000      	movs	r0, #0
}
    171c:	bd08      	pop	{r3, pc}
    171e:	bf00      	nop
    1720:	200003dc 	.word	0x200003dc
    1724:	000008a5 	.word	0x000008a5

00001728 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1728:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    172a:	4b06      	ldr	r3, [pc, #24]	; (1744 <stdio_io_write+0x1c>)
    172c:	681b      	ldr	r3, [r3, #0]
    172e:	b133      	cbz	r3, 173e <stdio_io_write+0x16>
    1730:	460a      	mov	r2, r1
    1732:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1734:	b292      	uxth	r2, r2
    1736:	4618      	mov	r0, r3
    1738:	4b03      	ldr	r3, [pc, #12]	; (1748 <stdio_io_write+0x20>)
    173a:	4798      	blx	r3
    173c:	bd08      	pop	{r3, pc}
		return 0;
    173e:	2000      	movs	r0, #0
}
    1740:	bd08      	pop	{r3, pc}
    1742:	bf00      	nop
    1744:	200003dc 	.word	0x200003dc
    1748:	00000875 	.word	0x00000875

0000174c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    174c:	b510      	push	{r4, lr}

	usart_sync_enable(&STDIO_IO);
    174e:	4c04      	ldr	r4, [pc, #16]	; (1760 <stdio_redirect_init+0x14>)
    1750:	4620      	mov	r0, r4
    1752:	4b04      	ldr	r3, [pc, #16]	; (1764 <stdio_redirect_init+0x18>)
    1754:	4798      	blx	r3
	stdio_io_init(&STDIO_IO.io);
    1756:	4620      	mov	r0, r4
    1758:	4b03      	ldr	r3, [pc, #12]	; (1768 <stdio_redirect_init+0x1c>)
    175a:	4798      	blx	r3
    175c:	bd10      	pop	{r4, pc}
    175e:	bf00      	nop
    1760:	200003e8 	.word	0x200003e8
    1764:	00000a79 	.word	0x00000a79
    1768:	000016d9 	.word	0x000016d9

0000176c <__aeabi_drsub>:
    176c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1770:	e002      	b.n	1778 <__adddf3>
    1772:	bf00      	nop

00001774 <__aeabi_dsub>:
    1774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00001778 <__adddf3>:
    1778:	b530      	push	{r4, r5, lr}
    177a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    177e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1782:	ea94 0f05 	teq	r4, r5
    1786:	bf08      	it	eq
    1788:	ea90 0f02 	teqeq	r0, r2
    178c:	bf1f      	itttt	ne
    178e:	ea54 0c00 	orrsne.w	ip, r4, r0
    1792:	ea55 0c02 	orrsne.w	ip, r5, r2
    1796:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    179a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    179e:	f000 80e2 	beq.w	1966 <__adddf3+0x1ee>
    17a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    17a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    17aa:	bfb8      	it	lt
    17ac:	426d      	neglt	r5, r5
    17ae:	dd0c      	ble.n	17ca <__adddf3+0x52>
    17b0:	442c      	add	r4, r5
    17b2:	ea80 0202 	eor.w	r2, r0, r2
    17b6:	ea81 0303 	eor.w	r3, r1, r3
    17ba:	ea82 0000 	eor.w	r0, r2, r0
    17be:	ea83 0101 	eor.w	r1, r3, r1
    17c2:	ea80 0202 	eor.w	r2, r0, r2
    17c6:	ea81 0303 	eor.w	r3, r1, r3
    17ca:	2d36      	cmp	r5, #54	; 0x36
    17cc:	bf88      	it	hi
    17ce:	bd30      	pophi	{r4, r5, pc}
    17d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    17d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    17d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    17dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    17e0:	d002      	beq.n	17e8 <__adddf3+0x70>
    17e2:	4240      	negs	r0, r0
    17e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    17e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    17ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
    17f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    17f4:	d002      	beq.n	17fc <__adddf3+0x84>
    17f6:	4252      	negs	r2, r2
    17f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    17fc:	ea94 0f05 	teq	r4, r5
    1800:	f000 80a7 	beq.w	1952 <__adddf3+0x1da>
    1804:	f1a4 0401 	sub.w	r4, r4, #1
    1808:	f1d5 0e20 	rsbs	lr, r5, #32
    180c:	db0d      	blt.n	182a <__adddf3+0xb2>
    180e:	fa02 fc0e 	lsl.w	ip, r2, lr
    1812:	fa22 f205 	lsr.w	r2, r2, r5
    1816:	1880      	adds	r0, r0, r2
    1818:	f141 0100 	adc.w	r1, r1, #0
    181c:	fa03 f20e 	lsl.w	r2, r3, lr
    1820:	1880      	adds	r0, r0, r2
    1822:	fa43 f305 	asr.w	r3, r3, r5
    1826:	4159      	adcs	r1, r3
    1828:	e00e      	b.n	1848 <__adddf3+0xd0>
    182a:	f1a5 0520 	sub.w	r5, r5, #32
    182e:	f10e 0e20 	add.w	lr, lr, #32
    1832:	2a01      	cmp	r2, #1
    1834:	fa03 fc0e 	lsl.w	ip, r3, lr
    1838:	bf28      	it	cs
    183a:	f04c 0c02 	orrcs.w	ip, ip, #2
    183e:	fa43 f305 	asr.w	r3, r3, r5
    1842:	18c0      	adds	r0, r0, r3
    1844:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    1848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    184c:	d507      	bpl.n	185e <__adddf3+0xe6>
    184e:	f04f 0e00 	mov.w	lr, #0
    1852:	f1dc 0c00 	rsbs	ip, ip, #0
    1856:	eb7e 0000 	sbcs.w	r0, lr, r0
    185a:	eb6e 0101 	sbc.w	r1, lr, r1
    185e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1862:	d31b      	bcc.n	189c <__adddf3+0x124>
    1864:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    1868:	d30c      	bcc.n	1884 <__adddf3+0x10c>
    186a:	0849      	lsrs	r1, r1, #1
    186c:	ea5f 0030 	movs.w	r0, r0, rrx
    1870:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1874:	f104 0401 	add.w	r4, r4, #1
    1878:	ea4f 5244 	mov.w	r2, r4, lsl #21
    187c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1880:	f080 809a 	bcs.w	19b8 <__adddf3+0x240>
    1884:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1888:	bf08      	it	eq
    188a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    188e:	f150 0000 	adcs.w	r0, r0, #0
    1892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1896:	ea41 0105 	orr.w	r1, r1, r5
    189a:	bd30      	pop	{r4, r5, pc}
    189c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    18a0:	4140      	adcs	r0, r0
    18a2:	eb41 0101 	adc.w	r1, r1, r1
    18a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    18aa:	f1a4 0401 	sub.w	r4, r4, #1
    18ae:	d1e9      	bne.n	1884 <__adddf3+0x10c>
    18b0:	f091 0f00 	teq	r1, #0
    18b4:	bf04      	itt	eq
    18b6:	4601      	moveq	r1, r0
    18b8:	2000      	moveq	r0, #0
    18ba:	fab1 f381 	clz	r3, r1
    18be:	bf08      	it	eq
    18c0:	3320      	addeq	r3, #32
    18c2:	f1a3 030b 	sub.w	r3, r3, #11
    18c6:	f1b3 0220 	subs.w	r2, r3, #32
    18ca:	da0c      	bge.n	18e6 <__adddf3+0x16e>
    18cc:	320c      	adds	r2, #12
    18ce:	dd08      	ble.n	18e2 <__adddf3+0x16a>
    18d0:	f102 0c14 	add.w	ip, r2, #20
    18d4:	f1c2 020c 	rsb	r2, r2, #12
    18d8:	fa01 f00c 	lsl.w	r0, r1, ip
    18dc:	fa21 f102 	lsr.w	r1, r1, r2
    18e0:	e00c      	b.n	18fc <__adddf3+0x184>
    18e2:	f102 0214 	add.w	r2, r2, #20
    18e6:	bfd8      	it	le
    18e8:	f1c2 0c20 	rsble	ip, r2, #32
    18ec:	fa01 f102 	lsl.w	r1, r1, r2
    18f0:	fa20 fc0c 	lsr.w	ip, r0, ip
    18f4:	bfdc      	itt	le
    18f6:	ea41 010c 	orrle.w	r1, r1, ip
    18fa:	4090      	lslle	r0, r2
    18fc:	1ae4      	subs	r4, r4, r3
    18fe:	bfa2      	ittt	ge
    1900:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1904:	4329      	orrge	r1, r5
    1906:	bd30      	popge	{r4, r5, pc}
    1908:	ea6f 0404 	mvn.w	r4, r4
    190c:	3c1f      	subs	r4, #31
    190e:	da1c      	bge.n	194a <__adddf3+0x1d2>
    1910:	340c      	adds	r4, #12
    1912:	dc0e      	bgt.n	1932 <__adddf3+0x1ba>
    1914:	f104 0414 	add.w	r4, r4, #20
    1918:	f1c4 0220 	rsb	r2, r4, #32
    191c:	fa20 f004 	lsr.w	r0, r0, r4
    1920:	fa01 f302 	lsl.w	r3, r1, r2
    1924:	ea40 0003 	orr.w	r0, r0, r3
    1928:	fa21 f304 	lsr.w	r3, r1, r4
    192c:	ea45 0103 	orr.w	r1, r5, r3
    1930:	bd30      	pop	{r4, r5, pc}
    1932:	f1c4 040c 	rsb	r4, r4, #12
    1936:	f1c4 0220 	rsb	r2, r4, #32
    193a:	fa20 f002 	lsr.w	r0, r0, r2
    193e:	fa01 f304 	lsl.w	r3, r1, r4
    1942:	ea40 0003 	orr.w	r0, r0, r3
    1946:	4629      	mov	r1, r5
    1948:	bd30      	pop	{r4, r5, pc}
    194a:	fa21 f004 	lsr.w	r0, r1, r4
    194e:	4629      	mov	r1, r5
    1950:	bd30      	pop	{r4, r5, pc}
    1952:	f094 0f00 	teq	r4, #0
    1956:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    195a:	bf06      	itte	eq
    195c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    1960:	3401      	addeq	r4, #1
    1962:	3d01      	subne	r5, #1
    1964:	e74e      	b.n	1804 <__adddf3+0x8c>
    1966:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    196a:	bf18      	it	ne
    196c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1970:	d029      	beq.n	19c6 <__adddf3+0x24e>
    1972:	ea94 0f05 	teq	r4, r5
    1976:	bf08      	it	eq
    1978:	ea90 0f02 	teqeq	r0, r2
    197c:	d005      	beq.n	198a <__adddf3+0x212>
    197e:	ea54 0c00 	orrs.w	ip, r4, r0
    1982:	bf04      	itt	eq
    1984:	4619      	moveq	r1, r3
    1986:	4610      	moveq	r0, r2
    1988:	bd30      	pop	{r4, r5, pc}
    198a:	ea91 0f03 	teq	r1, r3
    198e:	bf1e      	ittt	ne
    1990:	2100      	movne	r1, #0
    1992:	2000      	movne	r0, #0
    1994:	bd30      	popne	{r4, r5, pc}
    1996:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    199a:	d105      	bne.n	19a8 <__adddf3+0x230>
    199c:	0040      	lsls	r0, r0, #1
    199e:	4149      	adcs	r1, r1
    19a0:	bf28      	it	cs
    19a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    19a6:	bd30      	pop	{r4, r5, pc}
    19a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    19ac:	bf3c      	itt	cc
    19ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    19b2:	bd30      	popcc	{r4, r5, pc}
    19b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    19b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    19bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    19c0:	f04f 0000 	mov.w	r0, #0
    19c4:	bd30      	pop	{r4, r5, pc}
    19c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    19ca:	bf1a      	itte	ne
    19cc:	4619      	movne	r1, r3
    19ce:	4610      	movne	r0, r2
    19d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    19d4:	bf1c      	itt	ne
    19d6:	460b      	movne	r3, r1
    19d8:	4602      	movne	r2, r0
    19da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    19de:	bf06      	itte	eq
    19e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    19e4:	ea91 0f03 	teqeq	r1, r3
    19e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    19ec:	bd30      	pop	{r4, r5, pc}
    19ee:	bf00      	nop

000019f0 <__aeabi_ui2d>:
    19f0:	f090 0f00 	teq	r0, #0
    19f4:	bf04      	itt	eq
    19f6:	2100      	moveq	r1, #0
    19f8:	4770      	bxeq	lr
    19fa:	b530      	push	{r4, r5, lr}
    19fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1a00:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1a04:	f04f 0500 	mov.w	r5, #0
    1a08:	f04f 0100 	mov.w	r1, #0
    1a0c:	e750      	b.n	18b0 <__adddf3+0x138>
    1a0e:	bf00      	nop

00001a10 <__aeabi_i2d>:
    1a10:	f090 0f00 	teq	r0, #0
    1a14:	bf04      	itt	eq
    1a16:	2100      	moveq	r1, #0
    1a18:	4770      	bxeq	lr
    1a1a:	b530      	push	{r4, r5, lr}
    1a1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1a20:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1a24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    1a28:	bf48      	it	mi
    1a2a:	4240      	negmi	r0, r0
    1a2c:	f04f 0100 	mov.w	r1, #0
    1a30:	e73e      	b.n	18b0 <__adddf3+0x138>
    1a32:	bf00      	nop

00001a34 <__aeabi_f2d>:
    1a34:	0042      	lsls	r2, r0, #1
    1a36:	ea4f 01e2 	mov.w	r1, r2, asr #3
    1a3a:	ea4f 0131 	mov.w	r1, r1, rrx
    1a3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    1a42:	bf1f      	itttt	ne
    1a44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    1a48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1a4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    1a50:	4770      	bxne	lr
    1a52:	f092 0f00 	teq	r2, #0
    1a56:	bf14      	ite	ne
    1a58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1a5c:	4770      	bxeq	lr
    1a5e:	b530      	push	{r4, r5, lr}
    1a60:	f44f 7460 	mov.w	r4, #896	; 0x380
    1a64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1a68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1a6c:	e720      	b.n	18b0 <__adddf3+0x138>
    1a6e:	bf00      	nop

00001a70 <__aeabi_ul2d>:
    1a70:	ea50 0201 	orrs.w	r2, r0, r1
    1a74:	bf08      	it	eq
    1a76:	4770      	bxeq	lr
    1a78:	b530      	push	{r4, r5, lr}
    1a7a:	f04f 0500 	mov.w	r5, #0
    1a7e:	e00a      	b.n	1a96 <__aeabi_l2d+0x16>

00001a80 <__aeabi_l2d>:
    1a80:	ea50 0201 	orrs.w	r2, r0, r1
    1a84:	bf08      	it	eq
    1a86:	4770      	bxeq	lr
    1a88:	b530      	push	{r4, r5, lr}
    1a8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    1a8e:	d502      	bpl.n	1a96 <__aeabi_l2d+0x16>
    1a90:	4240      	negs	r0, r0
    1a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1a96:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1a9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1a9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    1aa2:	f43f aedc 	beq.w	185e <__adddf3+0xe6>
    1aa6:	f04f 0203 	mov.w	r2, #3
    1aaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1aae:	bf18      	it	ne
    1ab0:	3203      	addne	r2, #3
    1ab2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1ab6:	bf18      	it	ne
    1ab8:	3203      	addne	r2, #3
    1aba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    1abe:	f1c2 0320 	rsb	r3, r2, #32
    1ac2:	fa00 fc03 	lsl.w	ip, r0, r3
    1ac6:	fa20 f002 	lsr.w	r0, r0, r2
    1aca:	fa01 fe03 	lsl.w	lr, r1, r3
    1ace:	ea40 000e 	orr.w	r0, r0, lr
    1ad2:	fa21 f102 	lsr.w	r1, r1, r2
    1ad6:	4414      	add	r4, r2
    1ad8:	e6c1      	b.n	185e <__adddf3+0xe6>
    1ada:	bf00      	nop

00001adc <__aeabi_dmul>:
    1adc:	b570      	push	{r4, r5, r6, lr}
    1ade:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1ae2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1ae6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1aea:	bf1d      	ittte	ne
    1aec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1af0:	ea94 0f0c 	teqne	r4, ip
    1af4:	ea95 0f0c 	teqne	r5, ip
    1af8:	f000 f8de 	bleq	1cb8 <__aeabi_dmul+0x1dc>
    1afc:	442c      	add	r4, r5
    1afe:	ea81 0603 	eor.w	r6, r1, r3
    1b02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    1b06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    1b0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    1b0e:	bf18      	it	ne
    1b10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    1b14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1b1c:	d038      	beq.n	1b90 <__aeabi_dmul+0xb4>
    1b1e:	fba0 ce02 	umull	ip, lr, r0, r2
    1b22:	f04f 0500 	mov.w	r5, #0
    1b26:	fbe1 e502 	umlal	lr, r5, r1, r2
    1b2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    1b2e:	fbe0 e503 	umlal	lr, r5, r0, r3
    1b32:	f04f 0600 	mov.w	r6, #0
    1b36:	fbe1 5603 	umlal	r5, r6, r1, r3
    1b3a:	f09c 0f00 	teq	ip, #0
    1b3e:	bf18      	it	ne
    1b40:	f04e 0e01 	orrne.w	lr, lr, #1
    1b44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    1b48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1b4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    1b50:	d204      	bcs.n	1b5c <__aeabi_dmul+0x80>
    1b52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    1b56:	416d      	adcs	r5, r5
    1b58:	eb46 0606 	adc.w	r6, r6, r6
    1b5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    1b60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1b64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1b68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1b6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    1b70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1b74:	bf88      	it	hi
    1b76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1b7a:	d81e      	bhi.n	1bba <__aeabi_dmul+0xde>
    1b7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    1b80:	bf08      	it	eq
    1b82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1b86:	f150 0000 	adcs.w	r0, r0, #0
    1b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1b8e:	bd70      	pop	{r4, r5, r6, pc}
    1b90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1b94:	ea46 0101 	orr.w	r1, r6, r1
    1b98:	ea40 0002 	orr.w	r0, r0, r2
    1b9c:	ea81 0103 	eor.w	r1, r1, r3
    1ba0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1ba4:	bfc2      	ittt	gt
    1ba6:	ebd4 050c 	rsbsgt	r5, r4, ip
    1baa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1bae:	bd70      	popgt	{r4, r5, r6, pc}
    1bb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1bb4:	f04f 0e00 	mov.w	lr, #0
    1bb8:	3c01      	subs	r4, #1
    1bba:	f300 80ab 	bgt.w	1d14 <__aeabi_dmul+0x238>
    1bbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
    1bc2:	bfde      	ittt	le
    1bc4:	2000      	movle	r0, #0
    1bc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1bca:	bd70      	pople	{r4, r5, r6, pc}
    1bcc:	f1c4 0400 	rsb	r4, r4, #0
    1bd0:	3c20      	subs	r4, #32
    1bd2:	da35      	bge.n	1c40 <__aeabi_dmul+0x164>
    1bd4:	340c      	adds	r4, #12
    1bd6:	dc1b      	bgt.n	1c10 <__aeabi_dmul+0x134>
    1bd8:	f104 0414 	add.w	r4, r4, #20
    1bdc:	f1c4 0520 	rsb	r5, r4, #32
    1be0:	fa00 f305 	lsl.w	r3, r0, r5
    1be4:	fa20 f004 	lsr.w	r0, r0, r4
    1be8:	fa01 f205 	lsl.w	r2, r1, r5
    1bec:	ea40 0002 	orr.w	r0, r0, r2
    1bf0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1bf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1bf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1bfc:	fa21 f604 	lsr.w	r6, r1, r4
    1c00:	eb42 0106 	adc.w	r1, r2, r6
    1c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1c08:	bf08      	it	eq
    1c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1c0e:	bd70      	pop	{r4, r5, r6, pc}
    1c10:	f1c4 040c 	rsb	r4, r4, #12
    1c14:	f1c4 0520 	rsb	r5, r4, #32
    1c18:	fa00 f304 	lsl.w	r3, r0, r4
    1c1c:	fa20 f005 	lsr.w	r0, r0, r5
    1c20:	fa01 f204 	lsl.w	r2, r1, r4
    1c24:	ea40 0002 	orr.w	r0, r0, r2
    1c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1c30:	f141 0100 	adc.w	r1, r1, #0
    1c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1c38:	bf08      	it	eq
    1c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1c3e:	bd70      	pop	{r4, r5, r6, pc}
    1c40:	f1c4 0520 	rsb	r5, r4, #32
    1c44:	fa00 f205 	lsl.w	r2, r0, r5
    1c48:	ea4e 0e02 	orr.w	lr, lr, r2
    1c4c:	fa20 f304 	lsr.w	r3, r0, r4
    1c50:	fa01 f205 	lsl.w	r2, r1, r5
    1c54:	ea43 0302 	orr.w	r3, r3, r2
    1c58:	fa21 f004 	lsr.w	r0, r1, r4
    1c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1c60:	fa21 f204 	lsr.w	r2, r1, r4
    1c64:	ea20 0002 	bic.w	r0, r0, r2
    1c68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1c6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1c70:	bf08      	it	eq
    1c72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1c76:	bd70      	pop	{r4, r5, r6, pc}
    1c78:	f094 0f00 	teq	r4, #0
    1c7c:	d10f      	bne.n	1c9e <__aeabi_dmul+0x1c2>
    1c7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    1c82:	0040      	lsls	r0, r0, #1
    1c84:	eb41 0101 	adc.w	r1, r1, r1
    1c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1c8c:	bf08      	it	eq
    1c8e:	3c01      	subeq	r4, #1
    1c90:	d0f7      	beq.n	1c82 <__aeabi_dmul+0x1a6>
    1c92:	ea41 0106 	orr.w	r1, r1, r6
    1c96:	f095 0f00 	teq	r5, #0
    1c9a:	bf18      	it	ne
    1c9c:	4770      	bxne	lr
    1c9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    1ca2:	0052      	lsls	r2, r2, #1
    1ca4:	eb43 0303 	adc.w	r3, r3, r3
    1ca8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1cac:	bf08      	it	eq
    1cae:	3d01      	subeq	r5, #1
    1cb0:	d0f7      	beq.n	1ca2 <__aeabi_dmul+0x1c6>
    1cb2:	ea43 0306 	orr.w	r3, r3, r6
    1cb6:	4770      	bx	lr
    1cb8:	ea94 0f0c 	teq	r4, ip
    1cbc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    1cc0:	bf18      	it	ne
    1cc2:	ea95 0f0c 	teqne	r5, ip
    1cc6:	d00c      	beq.n	1ce2 <__aeabi_dmul+0x206>
    1cc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1ccc:	bf18      	it	ne
    1cce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1cd2:	d1d1      	bne.n	1c78 <__aeabi_dmul+0x19c>
    1cd4:	ea81 0103 	eor.w	r1, r1, r3
    1cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1cdc:	f04f 0000 	mov.w	r0, #0
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
    1ce2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1ce6:	bf06      	itte	eq
    1ce8:	4610      	moveq	r0, r2
    1cea:	4619      	moveq	r1, r3
    1cec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1cf0:	d019      	beq.n	1d26 <__aeabi_dmul+0x24a>
    1cf2:	ea94 0f0c 	teq	r4, ip
    1cf6:	d102      	bne.n	1cfe <__aeabi_dmul+0x222>
    1cf8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1cfc:	d113      	bne.n	1d26 <__aeabi_dmul+0x24a>
    1cfe:	ea95 0f0c 	teq	r5, ip
    1d02:	d105      	bne.n	1d10 <__aeabi_dmul+0x234>
    1d04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    1d08:	bf1c      	itt	ne
    1d0a:	4610      	movne	r0, r2
    1d0c:	4619      	movne	r1, r3
    1d0e:	d10a      	bne.n	1d26 <__aeabi_dmul+0x24a>
    1d10:	ea81 0103 	eor.w	r1, r1, r3
    1d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1d18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1d1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1d20:	f04f 0000 	mov.w	r0, #0
    1d24:	bd70      	pop	{r4, r5, r6, pc}
    1d26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1d2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    1d2e:	bd70      	pop	{r4, r5, r6, pc}

00001d30 <__aeabi_ddiv>:
    1d30:	b570      	push	{r4, r5, r6, lr}
    1d32:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1d36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1d3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1d3e:	bf1d      	ittte	ne
    1d40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1d44:	ea94 0f0c 	teqne	r4, ip
    1d48:	ea95 0f0c 	teqne	r5, ip
    1d4c:	f000 f8a7 	bleq	1e9e <__aeabi_ddiv+0x16e>
    1d50:	eba4 0405 	sub.w	r4, r4, r5
    1d54:	ea81 0e03 	eor.w	lr, r1, r3
    1d58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1d5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1d60:	f000 8088 	beq.w	1e74 <__aeabi_ddiv+0x144>
    1d64:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1d68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1d6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    1d70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1d74:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1d78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1d7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    1d80:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1d84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1d88:	429d      	cmp	r5, r3
    1d8a:	bf08      	it	eq
    1d8c:	4296      	cmpeq	r6, r2
    1d8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    1d92:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1d96:	d202      	bcs.n	1d9e <__aeabi_ddiv+0x6e>
    1d98:	085b      	lsrs	r3, r3, #1
    1d9a:	ea4f 0232 	mov.w	r2, r2, rrx
    1d9e:	1ab6      	subs	r6, r6, r2
    1da0:	eb65 0503 	sbc.w	r5, r5, r3
    1da4:	085b      	lsrs	r3, r3, #1
    1da6:	ea4f 0232 	mov.w	r2, r2, rrx
    1daa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1dae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    1db2:	ebb6 0e02 	subs.w	lr, r6, r2
    1db6:	eb75 0e03 	sbcs.w	lr, r5, r3
    1dba:	bf22      	ittt	cs
    1dbc:	1ab6      	subcs	r6, r6, r2
    1dbe:	4675      	movcs	r5, lr
    1dc0:	ea40 000c 	orrcs.w	r0, r0, ip
    1dc4:	085b      	lsrs	r3, r3, #1
    1dc6:	ea4f 0232 	mov.w	r2, r2, rrx
    1dca:	ebb6 0e02 	subs.w	lr, r6, r2
    1dce:	eb75 0e03 	sbcs.w	lr, r5, r3
    1dd2:	bf22      	ittt	cs
    1dd4:	1ab6      	subcs	r6, r6, r2
    1dd6:	4675      	movcs	r5, lr
    1dd8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1ddc:	085b      	lsrs	r3, r3, #1
    1dde:	ea4f 0232 	mov.w	r2, r2, rrx
    1de2:	ebb6 0e02 	subs.w	lr, r6, r2
    1de6:	eb75 0e03 	sbcs.w	lr, r5, r3
    1dea:	bf22      	ittt	cs
    1dec:	1ab6      	subcs	r6, r6, r2
    1dee:	4675      	movcs	r5, lr
    1df0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1df4:	085b      	lsrs	r3, r3, #1
    1df6:	ea4f 0232 	mov.w	r2, r2, rrx
    1dfa:	ebb6 0e02 	subs.w	lr, r6, r2
    1dfe:	eb75 0e03 	sbcs.w	lr, r5, r3
    1e02:	bf22      	ittt	cs
    1e04:	1ab6      	subcs	r6, r6, r2
    1e06:	4675      	movcs	r5, lr
    1e08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1e0c:	ea55 0e06 	orrs.w	lr, r5, r6
    1e10:	d018      	beq.n	1e44 <__aeabi_ddiv+0x114>
    1e12:	ea4f 1505 	mov.w	r5, r5, lsl #4
    1e16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    1e1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    1e1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1e22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    1e26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1e2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    1e2e:	d1c0      	bne.n	1db2 <__aeabi_ddiv+0x82>
    1e30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1e34:	d10b      	bne.n	1e4e <__aeabi_ddiv+0x11e>
    1e36:	ea41 0100 	orr.w	r1, r1, r0
    1e3a:	f04f 0000 	mov.w	r0, #0
    1e3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    1e42:	e7b6      	b.n	1db2 <__aeabi_ddiv+0x82>
    1e44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1e48:	bf04      	itt	eq
    1e4a:	4301      	orreq	r1, r0
    1e4c:	2000      	moveq	r0, #0
    1e4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1e52:	bf88      	it	hi
    1e54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1e58:	f63f aeaf 	bhi.w	1bba <__aeabi_dmul+0xde>
    1e5c:	ebb5 0c03 	subs.w	ip, r5, r3
    1e60:	bf04      	itt	eq
    1e62:	ebb6 0c02 	subseq.w	ip, r6, r2
    1e66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1e6a:	f150 0000 	adcs.w	r0, r0, #0
    1e6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1e72:	bd70      	pop	{r4, r5, r6, pc}
    1e74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    1e78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    1e7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    1e80:	bfc2      	ittt	gt
    1e82:	ebd4 050c 	rsbsgt	r5, r4, ip
    1e86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1e8a:	bd70      	popgt	{r4, r5, r6, pc}
    1e8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1e90:	f04f 0e00 	mov.w	lr, #0
    1e94:	3c01      	subs	r4, #1
    1e96:	e690      	b.n	1bba <__aeabi_dmul+0xde>
    1e98:	ea45 0e06 	orr.w	lr, r5, r6
    1e9c:	e68d      	b.n	1bba <__aeabi_dmul+0xde>
    1e9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    1ea2:	ea94 0f0c 	teq	r4, ip
    1ea6:	bf08      	it	eq
    1ea8:	ea95 0f0c 	teqeq	r5, ip
    1eac:	f43f af3b 	beq.w	1d26 <__aeabi_dmul+0x24a>
    1eb0:	ea94 0f0c 	teq	r4, ip
    1eb4:	d10a      	bne.n	1ecc <__aeabi_ddiv+0x19c>
    1eb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1eba:	f47f af34 	bne.w	1d26 <__aeabi_dmul+0x24a>
    1ebe:	ea95 0f0c 	teq	r5, ip
    1ec2:	f47f af25 	bne.w	1d10 <__aeabi_dmul+0x234>
    1ec6:	4610      	mov	r0, r2
    1ec8:	4619      	mov	r1, r3
    1eca:	e72c      	b.n	1d26 <__aeabi_dmul+0x24a>
    1ecc:	ea95 0f0c 	teq	r5, ip
    1ed0:	d106      	bne.n	1ee0 <__aeabi_ddiv+0x1b0>
    1ed2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1ed6:	f43f aefd 	beq.w	1cd4 <__aeabi_dmul+0x1f8>
    1eda:	4610      	mov	r0, r2
    1edc:	4619      	mov	r1, r3
    1ede:	e722      	b.n	1d26 <__aeabi_dmul+0x24a>
    1ee0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1ee4:	bf18      	it	ne
    1ee6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1eea:	f47f aec5 	bne.w	1c78 <__aeabi_dmul+0x19c>
    1eee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    1ef2:	f47f af0d 	bne.w	1d10 <__aeabi_dmul+0x234>
    1ef6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1efa:	f47f aeeb 	bne.w	1cd4 <__aeabi_dmul+0x1f8>
    1efe:	e712      	b.n	1d26 <__aeabi_dmul+0x24a>

00001f00 <__aeabi_d2uiz>:
    1f00:	004a      	lsls	r2, r1, #1
    1f02:	d211      	bcs.n	1f28 <__aeabi_d2uiz+0x28>
    1f04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1f08:	d211      	bcs.n	1f2e <__aeabi_d2uiz+0x2e>
    1f0a:	d50d      	bpl.n	1f28 <__aeabi_d2uiz+0x28>
    1f0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1f10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1f14:	d40e      	bmi.n	1f34 <__aeabi_d2uiz+0x34>
    1f16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1f1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1f22:	fa23 f002 	lsr.w	r0, r3, r2
    1f26:	4770      	bx	lr
    1f28:	f04f 0000 	mov.w	r0, #0
    1f2c:	4770      	bx	lr
    1f2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1f32:	d102      	bne.n	1f3a <__aeabi_d2uiz+0x3a>
    1f34:	f04f 30ff 	mov.w	r0, #4294967295
    1f38:	4770      	bx	lr
    1f3a:	f04f 0000 	mov.w	r0, #0
    1f3e:	4770      	bx	lr

00001f40 <__sflush_r>:
    1f40:	898a      	ldrh	r2, [r1, #12]
    1f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f46:	4605      	mov	r5, r0
    1f48:	0710      	lsls	r0, r2, #28
    1f4a:	460c      	mov	r4, r1
    1f4c:	d45a      	bmi.n	2004 <__sflush_r+0xc4>
    1f4e:	684b      	ldr	r3, [r1, #4]
    1f50:	2b00      	cmp	r3, #0
    1f52:	dc05      	bgt.n	1f60 <__sflush_r+0x20>
    1f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1f56:	2b00      	cmp	r3, #0
    1f58:	dc02      	bgt.n	1f60 <__sflush_r+0x20>
    1f5a:	2000      	movs	r0, #0
    1f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1f62:	2e00      	cmp	r6, #0
    1f64:	d0f9      	beq.n	1f5a <__sflush_r+0x1a>
    1f66:	2300      	movs	r3, #0
    1f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1f6c:	682f      	ldr	r7, [r5, #0]
    1f6e:	602b      	str	r3, [r5, #0]
    1f70:	d033      	beq.n	1fda <__sflush_r+0x9a>
    1f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1f74:	89a3      	ldrh	r3, [r4, #12]
    1f76:	075a      	lsls	r2, r3, #29
    1f78:	d505      	bpl.n	1f86 <__sflush_r+0x46>
    1f7a:	6863      	ldr	r3, [r4, #4]
    1f7c:	1ac0      	subs	r0, r0, r3
    1f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1f80:	b10b      	cbz	r3, 1f86 <__sflush_r+0x46>
    1f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1f84:	1ac0      	subs	r0, r0, r3
    1f86:	2300      	movs	r3, #0
    1f88:	4602      	mov	r2, r0
    1f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1f8c:	6a21      	ldr	r1, [r4, #32]
    1f8e:	4628      	mov	r0, r5
    1f90:	47b0      	blx	r6
    1f92:	1c43      	adds	r3, r0, #1
    1f94:	89a3      	ldrh	r3, [r4, #12]
    1f96:	d106      	bne.n	1fa6 <__sflush_r+0x66>
    1f98:	6829      	ldr	r1, [r5, #0]
    1f9a:	291d      	cmp	r1, #29
    1f9c:	d84b      	bhi.n	2036 <__sflush_r+0xf6>
    1f9e:	4a2b      	ldr	r2, [pc, #172]	; (204c <__sflush_r+0x10c>)
    1fa0:	40ca      	lsrs	r2, r1
    1fa2:	07d6      	lsls	r6, r2, #31
    1fa4:	d547      	bpl.n	2036 <__sflush_r+0xf6>
    1fa6:	2200      	movs	r2, #0
    1fa8:	6062      	str	r2, [r4, #4]
    1faa:	04d9      	lsls	r1, r3, #19
    1fac:	6922      	ldr	r2, [r4, #16]
    1fae:	6022      	str	r2, [r4, #0]
    1fb0:	d504      	bpl.n	1fbc <__sflush_r+0x7c>
    1fb2:	1c42      	adds	r2, r0, #1
    1fb4:	d101      	bne.n	1fba <__sflush_r+0x7a>
    1fb6:	682b      	ldr	r3, [r5, #0]
    1fb8:	b903      	cbnz	r3, 1fbc <__sflush_r+0x7c>
    1fba:	6560      	str	r0, [r4, #84]	; 0x54
    1fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1fbe:	602f      	str	r7, [r5, #0]
    1fc0:	2900      	cmp	r1, #0
    1fc2:	d0ca      	beq.n	1f5a <__sflush_r+0x1a>
    1fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1fc8:	4299      	cmp	r1, r3
    1fca:	d002      	beq.n	1fd2 <__sflush_r+0x92>
    1fcc:	4628      	mov	r0, r5
    1fce:	f000 f98d 	bl	22ec <_free_r>
    1fd2:	2000      	movs	r0, #0
    1fd4:	6360      	str	r0, [r4, #52]	; 0x34
    1fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fda:	6a21      	ldr	r1, [r4, #32]
    1fdc:	2301      	movs	r3, #1
    1fde:	4628      	mov	r0, r5
    1fe0:	47b0      	blx	r6
    1fe2:	1c41      	adds	r1, r0, #1
    1fe4:	d1c6      	bne.n	1f74 <__sflush_r+0x34>
    1fe6:	682b      	ldr	r3, [r5, #0]
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d0c3      	beq.n	1f74 <__sflush_r+0x34>
    1fec:	2b1d      	cmp	r3, #29
    1fee:	d001      	beq.n	1ff4 <__sflush_r+0xb4>
    1ff0:	2b16      	cmp	r3, #22
    1ff2:	d101      	bne.n	1ff8 <__sflush_r+0xb8>
    1ff4:	602f      	str	r7, [r5, #0]
    1ff6:	e7b0      	b.n	1f5a <__sflush_r+0x1a>
    1ff8:	89a3      	ldrh	r3, [r4, #12]
    1ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ffe:	81a3      	strh	r3, [r4, #12]
    2000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2004:	690f      	ldr	r7, [r1, #16]
    2006:	2f00      	cmp	r7, #0
    2008:	d0a7      	beq.n	1f5a <__sflush_r+0x1a>
    200a:	0793      	lsls	r3, r2, #30
    200c:	680e      	ldr	r6, [r1, #0]
    200e:	bf08      	it	eq
    2010:	694b      	ldreq	r3, [r1, #20]
    2012:	600f      	str	r7, [r1, #0]
    2014:	bf18      	it	ne
    2016:	2300      	movne	r3, #0
    2018:	eba6 0807 	sub.w	r8, r6, r7
    201c:	608b      	str	r3, [r1, #8]
    201e:	f1b8 0f00 	cmp.w	r8, #0
    2022:	dd9a      	ble.n	1f5a <__sflush_r+0x1a>
    2024:	4643      	mov	r3, r8
    2026:	463a      	mov	r2, r7
    2028:	6a21      	ldr	r1, [r4, #32]
    202a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    202c:	4628      	mov	r0, r5
    202e:	47b0      	blx	r6
    2030:	2800      	cmp	r0, #0
    2032:	dc07      	bgt.n	2044 <__sflush_r+0x104>
    2034:	89a3      	ldrh	r3, [r4, #12]
    2036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    203a:	81a3      	strh	r3, [r4, #12]
    203c:	f04f 30ff 	mov.w	r0, #4294967295
    2040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2044:	4407      	add	r7, r0
    2046:	eba8 0800 	sub.w	r8, r8, r0
    204a:	e7e8      	b.n	201e <__sflush_r+0xde>
    204c:	20400001 	.word	0x20400001

00002050 <_fflush_r>:
    2050:	b538      	push	{r3, r4, r5, lr}
    2052:	690b      	ldr	r3, [r1, #16]
    2054:	4605      	mov	r5, r0
    2056:	460c      	mov	r4, r1
    2058:	b1db      	cbz	r3, 2092 <_fflush_r+0x42>
    205a:	b118      	cbz	r0, 2064 <_fflush_r+0x14>
    205c:	6983      	ldr	r3, [r0, #24]
    205e:	b90b      	cbnz	r3, 2064 <_fflush_r+0x14>
    2060:	f000 f872 	bl	2148 <__sinit>
    2064:	4b0c      	ldr	r3, [pc, #48]	; (2098 <_fflush_r+0x48>)
    2066:	429c      	cmp	r4, r3
    2068:	d109      	bne.n	207e <_fflush_r+0x2e>
    206a:	686c      	ldr	r4, [r5, #4]
    206c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2070:	b17b      	cbz	r3, 2092 <_fflush_r+0x42>
    2072:	4621      	mov	r1, r4
    2074:	4628      	mov	r0, r5
    2076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    207a:	f7ff bf61 	b.w	1f40 <__sflush_r>
    207e:	4b07      	ldr	r3, [pc, #28]	; (209c <_fflush_r+0x4c>)
    2080:	429c      	cmp	r4, r3
    2082:	d101      	bne.n	2088 <_fflush_r+0x38>
    2084:	68ac      	ldr	r4, [r5, #8]
    2086:	e7f1      	b.n	206c <_fflush_r+0x1c>
    2088:	4b05      	ldr	r3, [pc, #20]	; (20a0 <_fflush_r+0x50>)
    208a:	429c      	cmp	r4, r3
    208c:	bf08      	it	eq
    208e:	68ec      	ldreq	r4, [r5, #12]
    2090:	e7ec      	b.n	206c <_fflush_r+0x1c>
    2092:	2000      	movs	r0, #0
    2094:	bd38      	pop	{r3, r4, r5, pc}
    2096:	bf00      	nop
    2098:	00004158 	.word	0x00004158
    209c:	00004178 	.word	0x00004178
    20a0:	00004138 	.word	0x00004138

000020a4 <fflush>:
    20a4:	4601      	mov	r1, r0
    20a6:	b920      	cbnz	r0, 20b2 <fflush+0xe>
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <fflush+0x18>)
    20aa:	4905      	ldr	r1, [pc, #20]	; (20c0 <fflush+0x1c>)
    20ac:	6818      	ldr	r0, [r3, #0]
    20ae:	f000 b8d3 	b.w	2258 <_fwalk_reent>
    20b2:	4b04      	ldr	r3, [pc, #16]	; (20c4 <fflush+0x20>)
    20b4:	6818      	ldr	r0, [r3, #0]
    20b6:	f7ff bfcb 	b.w	2050 <_fflush_r>
    20ba:	bf00      	nop
    20bc:	00004198 	.word	0x00004198
    20c0:	00002051 	.word	0x00002051
    20c4:	20000148 	.word	0x20000148

000020c8 <_cleanup_r>:
    20c8:	4901      	ldr	r1, [pc, #4]	; (20d0 <_cleanup_r+0x8>)
    20ca:	f000 b8c5 	b.w	2258 <_fwalk_reent>
    20ce:	bf00      	nop
    20d0:	00002051 	.word	0x00002051

000020d4 <std.isra.0>:
    20d4:	2300      	movs	r3, #0
    20d6:	b510      	push	{r4, lr}
    20d8:	4604      	mov	r4, r0
    20da:	6003      	str	r3, [r0, #0]
    20dc:	6043      	str	r3, [r0, #4]
    20de:	6083      	str	r3, [r0, #8]
    20e0:	8181      	strh	r1, [r0, #12]
    20e2:	6643      	str	r3, [r0, #100]	; 0x64
    20e4:	81c2      	strh	r2, [r0, #14]
    20e6:	6103      	str	r3, [r0, #16]
    20e8:	6143      	str	r3, [r0, #20]
    20ea:	6183      	str	r3, [r0, #24]
    20ec:	4619      	mov	r1, r3
    20ee:	2208      	movs	r2, #8
    20f0:	305c      	adds	r0, #92	; 0x5c
    20f2:	f000 f8f3 	bl	22dc <memset>
    20f6:	4b05      	ldr	r3, [pc, #20]	; (210c <std.isra.0+0x38>)
    20f8:	6263      	str	r3, [r4, #36]	; 0x24
    20fa:	4b05      	ldr	r3, [pc, #20]	; (2110 <std.isra.0+0x3c>)
    20fc:	62a3      	str	r3, [r4, #40]	; 0x28
    20fe:	4b05      	ldr	r3, [pc, #20]	; (2114 <std.isra.0+0x40>)
    2100:	62e3      	str	r3, [r4, #44]	; 0x2c
    2102:	4b05      	ldr	r3, [pc, #20]	; (2118 <std.isra.0+0x44>)
    2104:	6224      	str	r4, [r4, #32]
    2106:	6323      	str	r3, [r4, #48]	; 0x30
    2108:	bd10      	pop	{r4, pc}
    210a:	bf00      	nop
    210c:	000026f9 	.word	0x000026f9
    2110:	0000271b 	.word	0x0000271b
    2114:	00002753 	.word	0x00002753
    2118:	00002777 	.word	0x00002777

0000211c <__sfmoreglue>:
    211c:	b570      	push	{r4, r5, r6, lr}
    211e:	1e4a      	subs	r2, r1, #1
    2120:	2568      	movs	r5, #104	; 0x68
    2122:	4355      	muls	r5, r2
    2124:	460e      	mov	r6, r1
    2126:	f105 0174 	add.w	r1, r5, #116	; 0x74
    212a:	f000 f92d 	bl	2388 <_malloc_r>
    212e:	4604      	mov	r4, r0
    2130:	b140      	cbz	r0, 2144 <__sfmoreglue+0x28>
    2132:	2100      	movs	r1, #0
    2134:	e880 0042 	stmia.w	r0, {r1, r6}
    2138:	300c      	adds	r0, #12
    213a:	60a0      	str	r0, [r4, #8]
    213c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2140:	f000 f8cc 	bl	22dc <memset>
    2144:	4620      	mov	r0, r4
    2146:	bd70      	pop	{r4, r5, r6, pc}

00002148 <__sinit>:
    2148:	6983      	ldr	r3, [r0, #24]
    214a:	b510      	push	{r4, lr}
    214c:	4604      	mov	r4, r0
    214e:	bb33      	cbnz	r3, 219e <__sinit+0x56>
    2150:	6483      	str	r3, [r0, #72]	; 0x48
    2152:	64c3      	str	r3, [r0, #76]	; 0x4c
    2154:	6503      	str	r3, [r0, #80]	; 0x50
    2156:	4b12      	ldr	r3, [pc, #72]	; (21a0 <__sinit+0x58>)
    2158:	4a12      	ldr	r2, [pc, #72]	; (21a4 <__sinit+0x5c>)
    215a:	681b      	ldr	r3, [r3, #0]
    215c:	6282      	str	r2, [r0, #40]	; 0x28
    215e:	4298      	cmp	r0, r3
    2160:	bf04      	itt	eq
    2162:	2301      	moveq	r3, #1
    2164:	6183      	streq	r3, [r0, #24]
    2166:	f000 f81f 	bl	21a8 <__sfp>
    216a:	6060      	str	r0, [r4, #4]
    216c:	4620      	mov	r0, r4
    216e:	f000 f81b 	bl	21a8 <__sfp>
    2172:	60a0      	str	r0, [r4, #8]
    2174:	4620      	mov	r0, r4
    2176:	f000 f817 	bl	21a8 <__sfp>
    217a:	2200      	movs	r2, #0
    217c:	60e0      	str	r0, [r4, #12]
    217e:	2104      	movs	r1, #4
    2180:	6860      	ldr	r0, [r4, #4]
    2182:	f7ff ffa7 	bl	20d4 <std.isra.0>
    2186:	2201      	movs	r2, #1
    2188:	2109      	movs	r1, #9
    218a:	68a0      	ldr	r0, [r4, #8]
    218c:	f7ff ffa2 	bl	20d4 <std.isra.0>
    2190:	2202      	movs	r2, #2
    2192:	2112      	movs	r1, #18
    2194:	68e0      	ldr	r0, [r4, #12]
    2196:	f7ff ff9d 	bl	20d4 <std.isra.0>
    219a:	2301      	movs	r3, #1
    219c:	61a3      	str	r3, [r4, #24]
    219e:	bd10      	pop	{r4, pc}
    21a0:	00004198 	.word	0x00004198
    21a4:	000020c9 	.word	0x000020c9

000021a8 <__sfp>:
    21a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21aa:	4b1c      	ldr	r3, [pc, #112]	; (221c <__sfp+0x74>)
    21ac:	681e      	ldr	r6, [r3, #0]
    21ae:	69b3      	ldr	r3, [r6, #24]
    21b0:	4607      	mov	r7, r0
    21b2:	b913      	cbnz	r3, 21ba <__sfp+0x12>
    21b4:	4630      	mov	r0, r6
    21b6:	f7ff ffc7 	bl	2148 <__sinit>
    21ba:	3648      	adds	r6, #72	; 0x48
    21bc:	68b4      	ldr	r4, [r6, #8]
    21be:	6873      	ldr	r3, [r6, #4]
    21c0:	3b01      	subs	r3, #1
    21c2:	d503      	bpl.n	21cc <__sfp+0x24>
    21c4:	6833      	ldr	r3, [r6, #0]
    21c6:	b133      	cbz	r3, 21d6 <__sfp+0x2e>
    21c8:	6836      	ldr	r6, [r6, #0]
    21ca:	e7f7      	b.n	21bc <__sfp+0x14>
    21cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    21d0:	b16d      	cbz	r5, 21ee <__sfp+0x46>
    21d2:	3468      	adds	r4, #104	; 0x68
    21d4:	e7f4      	b.n	21c0 <__sfp+0x18>
    21d6:	2104      	movs	r1, #4
    21d8:	4638      	mov	r0, r7
    21da:	f7ff ff9f 	bl	211c <__sfmoreglue>
    21de:	6030      	str	r0, [r6, #0]
    21e0:	2800      	cmp	r0, #0
    21e2:	d1f1      	bne.n	21c8 <__sfp+0x20>
    21e4:	230c      	movs	r3, #12
    21e6:	603b      	str	r3, [r7, #0]
    21e8:	4604      	mov	r4, r0
    21ea:	4620      	mov	r0, r4
    21ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21f2:	81e3      	strh	r3, [r4, #14]
    21f4:	2301      	movs	r3, #1
    21f6:	81a3      	strh	r3, [r4, #12]
    21f8:	6665      	str	r5, [r4, #100]	; 0x64
    21fa:	6025      	str	r5, [r4, #0]
    21fc:	60a5      	str	r5, [r4, #8]
    21fe:	6065      	str	r5, [r4, #4]
    2200:	6125      	str	r5, [r4, #16]
    2202:	6165      	str	r5, [r4, #20]
    2204:	61a5      	str	r5, [r4, #24]
    2206:	2208      	movs	r2, #8
    2208:	4629      	mov	r1, r5
    220a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    220e:	f000 f865 	bl	22dc <memset>
    2212:	6365      	str	r5, [r4, #52]	; 0x34
    2214:	63a5      	str	r5, [r4, #56]	; 0x38
    2216:	64a5      	str	r5, [r4, #72]	; 0x48
    2218:	64e5      	str	r5, [r4, #76]	; 0x4c
    221a:	e7e6      	b.n	21ea <__sfp+0x42>
    221c:	00004198 	.word	0x00004198

00002220 <_fwalk>:
    2220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2224:	4688      	mov	r8, r1
    2226:	f100 0448 	add.w	r4, r0, #72	; 0x48
    222a:	2600      	movs	r6, #0
    222c:	b914      	cbnz	r4, 2234 <_fwalk+0x14>
    222e:	4630      	mov	r0, r6
    2230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2234:	68a5      	ldr	r5, [r4, #8]
    2236:	6867      	ldr	r7, [r4, #4]
    2238:	3f01      	subs	r7, #1
    223a:	d501      	bpl.n	2240 <_fwalk+0x20>
    223c:	6824      	ldr	r4, [r4, #0]
    223e:	e7f5      	b.n	222c <_fwalk+0xc>
    2240:	89ab      	ldrh	r3, [r5, #12]
    2242:	2b01      	cmp	r3, #1
    2244:	d906      	bls.n	2254 <_fwalk+0x34>
    2246:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    224a:	3301      	adds	r3, #1
    224c:	d002      	beq.n	2254 <_fwalk+0x34>
    224e:	4628      	mov	r0, r5
    2250:	47c0      	blx	r8
    2252:	4306      	orrs	r6, r0
    2254:	3568      	adds	r5, #104	; 0x68
    2256:	e7ef      	b.n	2238 <_fwalk+0x18>

00002258 <_fwalk_reent>:
    2258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    225c:	4680      	mov	r8, r0
    225e:	4689      	mov	r9, r1
    2260:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2264:	2600      	movs	r6, #0
    2266:	b914      	cbnz	r4, 226e <_fwalk_reent+0x16>
    2268:	4630      	mov	r0, r6
    226a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    226e:	68a5      	ldr	r5, [r4, #8]
    2270:	6867      	ldr	r7, [r4, #4]
    2272:	3f01      	subs	r7, #1
    2274:	d501      	bpl.n	227a <_fwalk_reent+0x22>
    2276:	6824      	ldr	r4, [r4, #0]
    2278:	e7f5      	b.n	2266 <_fwalk_reent+0xe>
    227a:	89ab      	ldrh	r3, [r5, #12]
    227c:	2b01      	cmp	r3, #1
    227e:	d907      	bls.n	2290 <_fwalk_reent+0x38>
    2280:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2284:	3301      	adds	r3, #1
    2286:	d003      	beq.n	2290 <_fwalk_reent+0x38>
    2288:	4629      	mov	r1, r5
    228a:	4640      	mov	r0, r8
    228c:	47c8      	blx	r9
    228e:	4306      	orrs	r6, r0
    2290:	3568      	adds	r5, #104	; 0x68
    2292:	e7ee      	b.n	2272 <_fwalk_reent+0x1a>

00002294 <__libc_init_array>:
    2294:	b570      	push	{r4, r5, r6, lr}
    2296:	4e0d      	ldr	r6, [pc, #52]	; (22cc <__libc_init_array+0x38>)
    2298:	4c0d      	ldr	r4, [pc, #52]	; (22d0 <__libc_init_array+0x3c>)
    229a:	1ba4      	subs	r4, r4, r6
    229c:	10a4      	asrs	r4, r4, #2
    229e:	2500      	movs	r5, #0
    22a0:	42a5      	cmp	r5, r4
    22a2:	d109      	bne.n	22b8 <__libc_init_array+0x24>
    22a4:	4e0b      	ldr	r6, [pc, #44]	; (22d4 <__libc_init_array+0x40>)
    22a6:	4c0c      	ldr	r4, [pc, #48]	; (22d8 <__libc_init_array+0x44>)
    22a8:	f002 f82c 	bl	4304 <_init>
    22ac:	1ba4      	subs	r4, r4, r6
    22ae:	10a4      	asrs	r4, r4, #2
    22b0:	2500      	movs	r5, #0
    22b2:	42a5      	cmp	r5, r4
    22b4:	d105      	bne.n	22c2 <__libc_init_array+0x2e>
    22b6:	bd70      	pop	{r4, r5, r6, pc}
    22b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    22bc:	4798      	blx	r3
    22be:	3501      	adds	r5, #1
    22c0:	e7ee      	b.n	22a0 <__libc_init_array+0xc>
    22c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    22c6:	4798      	blx	r3
    22c8:	3501      	adds	r5, #1
    22ca:	e7f2      	b.n	22b2 <__libc_init_array+0x1e>
    22cc:	00004310 	.word	0x00004310
    22d0:	00004310 	.word	0x00004310
    22d4:	00004310 	.word	0x00004310
    22d8:	00004314 	.word	0x00004314

000022dc <memset>:
    22dc:	4402      	add	r2, r0
    22de:	4603      	mov	r3, r0
    22e0:	4293      	cmp	r3, r2
    22e2:	d100      	bne.n	22e6 <memset+0xa>
    22e4:	4770      	bx	lr
    22e6:	f803 1b01 	strb.w	r1, [r3], #1
    22ea:	e7f9      	b.n	22e0 <memset+0x4>

000022ec <_free_r>:
    22ec:	b538      	push	{r3, r4, r5, lr}
    22ee:	4605      	mov	r5, r0
    22f0:	2900      	cmp	r1, #0
    22f2:	d045      	beq.n	2380 <_free_r+0x94>
    22f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    22f8:	1f0c      	subs	r4, r1, #4
    22fa:	2b00      	cmp	r3, #0
    22fc:	bfb8      	it	lt
    22fe:	18e4      	addlt	r4, r4, r3
    2300:	f000 fb9e 	bl	2a40 <__malloc_lock>
    2304:	4a1f      	ldr	r2, [pc, #124]	; (2384 <_free_r+0x98>)
    2306:	6813      	ldr	r3, [r2, #0]
    2308:	4610      	mov	r0, r2
    230a:	b933      	cbnz	r3, 231a <_free_r+0x2e>
    230c:	6063      	str	r3, [r4, #4]
    230e:	6014      	str	r4, [r2, #0]
    2310:	4628      	mov	r0, r5
    2312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2316:	f000 bb94 	b.w	2a42 <__malloc_unlock>
    231a:	42a3      	cmp	r3, r4
    231c:	d90c      	bls.n	2338 <_free_r+0x4c>
    231e:	6821      	ldr	r1, [r4, #0]
    2320:	1862      	adds	r2, r4, r1
    2322:	4293      	cmp	r3, r2
    2324:	bf04      	itt	eq
    2326:	681a      	ldreq	r2, [r3, #0]
    2328:	685b      	ldreq	r3, [r3, #4]
    232a:	6063      	str	r3, [r4, #4]
    232c:	bf04      	itt	eq
    232e:	1852      	addeq	r2, r2, r1
    2330:	6022      	streq	r2, [r4, #0]
    2332:	6004      	str	r4, [r0, #0]
    2334:	e7ec      	b.n	2310 <_free_r+0x24>
    2336:	4613      	mov	r3, r2
    2338:	685a      	ldr	r2, [r3, #4]
    233a:	b10a      	cbz	r2, 2340 <_free_r+0x54>
    233c:	42a2      	cmp	r2, r4
    233e:	d9fa      	bls.n	2336 <_free_r+0x4a>
    2340:	6819      	ldr	r1, [r3, #0]
    2342:	1858      	adds	r0, r3, r1
    2344:	42a0      	cmp	r0, r4
    2346:	d10b      	bne.n	2360 <_free_r+0x74>
    2348:	6820      	ldr	r0, [r4, #0]
    234a:	4401      	add	r1, r0
    234c:	1858      	adds	r0, r3, r1
    234e:	4282      	cmp	r2, r0
    2350:	6019      	str	r1, [r3, #0]
    2352:	d1dd      	bne.n	2310 <_free_r+0x24>
    2354:	6810      	ldr	r0, [r2, #0]
    2356:	6852      	ldr	r2, [r2, #4]
    2358:	605a      	str	r2, [r3, #4]
    235a:	4401      	add	r1, r0
    235c:	6019      	str	r1, [r3, #0]
    235e:	e7d7      	b.n	2310 <_free_r+0x24>
    2360:	d902      	bls.n	2368 <_free_r+0x7c>
    2362:	230c      	movs	r3, #12
    2364:	602b      	str	r3, [r5, #0]
    2366:	e7d3      	b.n	2310 <_free_r+0x24>
    2368:	6820      	ldr	r0, [r4, #0]
    236a:	1821      	adds	r1, r4, r0
    236c:	428a      	cmp	r2, r1
    236e:	bf04      	itt	eq
    2370:	6811      	ldreq	r1, [r2, #0]
    2372:	6852      	ldreq	r2, [r2, #4]
    2374:	6062      	str	r2, [r4, #4]
    2376:	bf04      	itt	eq
    2378:	1809      	addeq	r1, r1, r0
    237a:	6021      	streq	r1, [r4, #0]
    237c:	605c      	str	r4, [r3, #4]
    237e:	e7c7      	b.n	2310 <_free_r+0x24>
    2380:	bd38      	pop	{r3, r4, r5, pc}
    2382:	bf00      	nop
    2384:	200003e0 	.word	0x200003e0

00002388 <_malloc_r>:
    2388:	b570      	push	{r4, r5, r6, lr}
    238a:	1ccd      	adds	r5, r1, #3
    238c:	f025 0503 	bic.w	r5, r5, #3
    2390:	3508      	adds	r5, #8
    2392:	2d0c      	cmp	r5, #12
    2394:	bf38      	it	cc
    2396:	250c      	movcc	r5, #12
    2398:	2d00      	cmp	r5, #0
    239a:	4606      	mov	r6, r0
    239c:	db01      	blt.n	23a2 <_malloc_r+0x1a>
    239e:	42a9      	cmp	r1, r5
    23a0:	d903      	bls.n	23aa <_malloc_r+0x22>
    23a2:	230c      	movs	r3, #12
    23a4:	6033      	str	r3, [r6, #0]
    23a6:	2000      	movs	r0, #0
    23a8:	bd70      	pop	{r4, r5, r6, pc}
    23aa:	f000 fb49 	bl	2a40 <__malloc_lock>
    23ae:	4a23      	ldr	r2, [pc, #140]	; (243c <_malloc_r+0xb4>)
    23b0:	6814      	ldr	r4, [r2, #0]
    23b2:	4621      	mov	r1, r4
    23b4:	b991      	cbnz	r1, 23dc <_malloc_r+0x54>
    23b6:	4c22      	ldr	r4, [pc, #136]	; (2440 <_malloc_r+0xb8>)
    23b8:	6823      	ldr	r3, [r4, #0]
    23ba:	b91b      	cbnz	r3, 23c4 <_malloc_r+0x3c>
    23bc:	4630      	mov	r0, r6
    23be:	f000 f8bd 	bl	253c <_sbrk_r>
    23c2:	6020      	str	r0, [r4, #0]
    23c4:	4629      	mov	r1, r5
    23c6:	4630      	mov	r0, r6
    23c8:	f000 f8b8 	bl	253c <_sbrk_r>
    23cc:	1c43      	adds	r3, r0, #1
    23ce:	d126      	bne.n	241e <_malloc_r+0x96>
    23d0:	230c      	movs	r3, #12
    23d2:	6033      	str	r3, [r6, #0]
    23d4:	4630      	mov	r0, r6
    23d6:	f000 fb34 	bl	2a42 <__malloc_unlock>
    23da:	e7e4      	b.n	23a6 <_malloc_r+0x1e>
    23dc:	680b      	ldr	r3, [r1, #0]
    23de:	1b5b      	subs	r3, r3, r5
    23e0:	d41a      	bmi.n	2418 <_malloc_r+0x90>
    23e2:	2b0b      	cmp	r3, #11
    23e4:	d90f      	bls.n	2406 <_malloc_r+0x7e>
    23e6:	600b      	str	r3, [r1, #0]
    23e8:	50cd      	str	r5, [r1, r3]
    23ea:	18cc      	adds	r4, r1, r3
    23ec:	4630      	mov	r0, r6
    23ee:	f000 fb28 	bl	2a42 <__malloc_unlock>
    23f2:	f104 000b 	add.w	r0, r4, #11
    23f6:	1d23      	adds	r3, r4, #4
    23f8:	f020 0007 	bic.w	r0, r0, #7
    23fc:	1ac3      	subs	r3, r0, r3
    23fe:	d01b      	beq.n	2438 <_malloc_r+0xb0>
    2400:	425a      	negs	r2, r3
    2402:	50e2      	str	r2, [r4, r3]
    2404:	bd70      	pop	{r4, r5, r6, pc}
    2406:	428c      	cmp	r4, r1
    2408:	bf0d      	iteet	eq
    240a:	6863      	ldreq	r3, [r4, #4]
    240c:	684b      	ldrne	r3, [r1, #4]
    240e:	6063      	strne	r3, [r4, #4]
    2410:	6013      	streq	r3, [r2, #0]
    2412:	bf18      	it	ne
    2414:	460c      	movne	r4, r1
    2416:	e7e9      	b.n	23ec <_malloc_r+0x64>
    2418:	460c      	mov	r4, r1
    241a:	6849      	ldr	r1, [r1, #4]
    241c:	e7ca      	b.n	23b4 <_malloc_r+0x2c>
    241e:	1cc4      	adds	r4, r0, #3
    2420:	f024 0403 	bic.w	r4, r4, #3
    2424:	42a0      	cmp	r0, r4
    2426:	d005      	beq.n	2434 <_malloc_r+0xac>
    2428:	1a21      	subs	r1, r4, r0
    242a:	4630      	mov	r0, r6
    242c:	f000 f886 	bl	253c <_sbrk_r>
    2430:	3001      	adds	r0, #1
    2432:	d0cd      	beq.n	23d0 <_malloc_r+0x48>
    2434:	6025      	str	r5, [r4, #0]
    2436:	e7d9      	b.n	23ec <_malloc_r+0x64>
    2438:	bd70      	pop	{r4, r5, r6, pc}
    243a:	bf00      	nop
    243c:	200003e0 	.word	0x200003e0
    2440:	200003e4 	.word	0x200003e4

00002444 <iprintf>:
    2444:	b40f      	push	{r0, r1, r2, r3}
    2446:	4b0a      	ldr	r3, [pc, #40]	; (2470 <iprintf+0x2c>)
    2448:	b513      	push	{r0, r1, r4, lr}
    244a:	681c      	ldr	r4, [r3, #0]
    244c:	b124      	cbz	r4, 2458 <iprintf+0x14>
    244e:	69a3      	ldr	r3, [r4, #24]
    2450:	b913      	cbnz	r3, 2458 <iprintf+0x14>
    2452:	4620      	mov	r0, r4
    2454:	f7ff fe78 	bl	2148 <__sinit>
    2458:	ab05      	add	r3, sp, #20
    245a:	9a04      	ldr	r2, [sp, #16]
    245c:	68a1      	ldr	r1, [r4, #8]
    245e:	9301      	str	r3, [sp, #4]
    2460:	4620      	mov	r0, r4
    2462:	f000 fb17 	bl	2a94 <_vfiprintf_r>
    2466:	b002      	add	sp, #8
    2468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    246c:	b004      	add	sp, #16
    246e:	4770      	bx	lr
    2470:	20000148 	.word	0x20000148

00002474 <_puts_r>:
    2474:	b570      	push	{r4, r5, r6, lr}
    2476:	460e      	mov	r6, r1
    2478:	4605      	mov	r5, r0
    247a:	b118      	cbz	r0, 2484 <_puts_r+0x10>
    247c:	6983      	ldr	r3, [r0, #24]
    247e:	b90b      	cbnz	r3, 2484 <_puts_r+0x10>
    2480:	f7ff fe62 	bl	2148 <__sinit>
    2484:	69ab      	ldr	r3, [r5, #24]
    2486:	68ac      	ldr	r4, [r5, #8]
    2488:	b913      	cbnz	r3, 2490 <_puts_r+0x1c>
    248a:	4628      	mov	r0, r5
    248c:	f7ff fe5c 	bl	2148 <__sinit>
    2490:	4b23      	ldr	r3, [pc, #140]	; (2520 <_puts_r+0xac>)
    2492:	429c      	cmp	r4, r3
    2494:	d117      	bne.n	24c6 <_puts_r+0x52>
    2496:	686c      	ldr	r4, [r5, #4]
    2498:	89a3      	ldrh	r3, [r4, #12]
    249a:	071b      	lsls	r3, r3, #28
    249c:	d51d      	bpl.n	24da <_puts_r+0x66>
    249e:	6923      	ldr	r3, [r4, #16]
    24a0:	b1db      	cbz	r3, 24da <_puts_r+0x66>
    24a2:	3e01      	subs	r6, #1
    24a4:	68a3      	ldr	r3, [r4, #8]
    24a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    24aa:	3b01      	subs	r3, #1
    24ac:	60a3      	str	r3, [r4, #8]
    24ae:	b9e9      	cbnz	r1, 24ec <_puts_r+0x78>
    24b0:	2b00      	cmp	r3, #0
    24b2:	da2e      	bge.n	2512 <_puts_r+0x9e>
    24b4:	4622      	mov	r2, r4
    24b6:	210a      	movs	r1, #10
    24b8:	4628      	mov	r0, r5
    24ba:	f000 f961 	bl	2780 <__swbuf_r>
    24be:	3001      	adds	r0, #1
    24c0:	d011      	beq.n	24e6 <_puts_r+0x72>
    24c2:	200a      	movs	r0, #10
    24c4:	bd70      	pop	{r4, r5, r6, pc}
    24c6:	4b17      	ldr	r3, [pc, #92]	; (2524 <_puts_r+0xb0>)
    24c8:	429c      	cmp	r4, r3
    24ca:	d101      	bne.n	24d0 <_puts_r+0x5c>
    24cc:	68ac      	ldr	r4, [r5, #8]
    24ce:	e7e3      	b.n	2498 <_puts_r+0x24>
    24d0:	4b15      	ldr	r3, [pc, #84]	; (2528 <_puts_r+0xb4>)
    24d2:	429c      	cmp	r4, r3
    24d4:	bf08      	it	eq
    24d6:	68ec      	ldreq	r4, [r5, #12]
    24d8:	e7de      	b.n	2498 <_puts_r+0x24>
    24da:	4621      	mov	r1, r4
    24dc:	4628      	mov	r0, r5
    24de:	f000 f9b3 	bl	2848 <__swsetup_r>
    24e2:	2800      	cmp	r0, #0
    24e4:	d0dd      	beq.n	24a2 <_puts_r+0x2e>
    24e6:	f04f 30ff 	mov.w	r0, #4294967295
    24ea:	bd70      	pop	{r4, r5, r6, pc}
    24ec:	2b00      	cmp	r3, #0
    24ee:	da04      	bge.n	24fa <_puts_r+0x86>
    24f0:	69a2      	ldr	r2, [r4, #24]
    24f2:	4293      	cmp	r3, r2
    24f4:	db06      	blt.n	2504 <_puts_r+0x90>
    24f6:	290a      	cmp	r1, #10
    24f8:	d004      	beq.n	2504 <_puts_r+0x90>
    24fa:	6823      	ldr	r3, [r4, #0]
    24fc:	1c5a      	adds	r2, r3, #1
    24fe:	6022      	str	r2, [r4, #0]
    2500:	7019      	strb	r1, [r3, #0]
    2502:	e7cf      	b.n	24a4 <_puts_r+0x30>
    2504:	4622      	mov	r2, r4
    2506:	4628      	mov	r0, r5
    2508:	f000 f93a 	bl	2780 <__swbuf_r>
    250c:	3001      	adds	r0, #1
    250e:	d1c9      	bne.n	24a4 <_puts_r+0x30>
    2510:	e7e9      	b.n	24e6 <_puts_r+0x72>
    2512:	6823      	ldr	r3, [r4, #0]
    2514:	200a      	movs	r0, #10
    2516:	1c5a      	adds	r2, r3, #1
    2518:	6022      	str	r2, [r4, #0]
    251a:	7018      	strb	r0, [r3, #0]
    251c:	bd70      	pop	{r4, r5, r6, pc}
    251e:	bf00      	nop
    2520:	00004158 	.word	0x00004158
    2524:	00004178 	.word	0x00004178
    2528:	00004138 	.word	0x00004138

0000252c <puts>:
    252c:	4b02      	ldr	r3, [pc, #8]	; (2538 <puts+0xc>)
    252e:	4601      	mov	r1, r0
    2530:	6818      	ldr	r0, [r3, #0]
    2532:	f7ff bf9f 	b.w	2474 <_puts_r>
    2536:	bf00      	nop
    2538:	20000148 	.word	0x20000148

0000253c <_sbrk_r>:
    253c:	b538      	push	{r3, r4, r5, lr}
    253e:	4c06      	ldr	r4, [pc, #24]	; (2558 <_sbrk_r+0x1c>)
    2540:	2300      	movs	r3, #0
    2542:	4605      	mov	r5, r0
    2544:	4608      	mov	r0, r1
    2546:	6023      	str	r3, [r4, #0]
    2548:	f7fe fab0 	bl	aac <_sbrk>
    254c:	1c43      	adds	r3, r0, #1
    254e:	d102      	bne.n	2556 <_sbrk_r+0x1a>
    2550:	6823      	ldr	r3, [r4, #0]
    2552:	b103      	cbz	r3, 2556 <_sbrk_r+0x1a>
    2554:	602b      	str	r3, [r5, #0]
    2556:	bd38      	pop	{r3, r4, r5, pc}
    2558:	20000448 	.word	0x20000448

0000255c <iscanf>:
    255c:	b40f      	push	{r0, r1, r2, r3}
    255e:	4b0a      	ldr	r3, [pc, #40]	; (2588 <iscanf+0x2c>)
    2560:	b513      	push	{r0, r1, r4, lr}
    2562:	681c      	ldr	r4, [r3, #0]
    2564:	b124      	cbz	r4, 2570 <iscanf+0x14>
    2566:	69a3      	ldr	r3, [r4, #24]
    2568:	b913      	cbnz	r3, 2570 <iscanf+0x14>
    256a:	4620      	mov	r0, r4
    256c:	f7ff fdec 	bl	2148 <__sinit>
    2570:	ab05      	add	r3, sp, #20
    2572:	9a04      	ldr	r2, [sp, #16]
    2574:	6861      	ldr	r1, [r4, #4]
    2576:	9301      	str	r3, [sp, #4]
    2578:	4620      	mov	r0, r4
    257a:	f000 fe8b 	bl	3294 <_vfiscanf_r>
    257e:	b002      	add	sp, #8
    2580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2584:	b004      	add	sp, #16
    2586:	4770      	bx	lr
    2588:	20000148 	.word	0x20000148

0000258c <setbuf>:
    258c:	2900      	cmp	r1, #0
    258e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2592:	bf0c      	ite	eq
    2594:	2202      	moveq	r2, #2
    2596:	2200      	movne	r2, #0
    2598:	f000 b800 	b.w	259c <setvbuf>

0000259c <setvbuf>:
    259c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    25a0:	461d      	mov	r5, r3
    25a2:	4b51      	ldr	r3, [pc, #324]	; (26e8 <setvbuf+0x14c>)
    25a4:	681e      	ldr	r6, [r3, #0]
    25a6:	4604      	mov	r4, r0
    25a8:	460f      	mov	r7, r1
    25aa:	4690      	mov	r8, r2
    25ac:	b126      	cbz	r6, 25b8 <setvbuf+0x1c>
    25ae:	69b3      	ldr	r3, [r6, #24]
    25b0:	b913      	cbnz	r3, 25b8 <setvbuf+0x1c>
    25b2:	4630      	mov	r0, r6
    25b4:	f7ff fdc8 	bl	2148 <__sinit>
    25b8:	4b4c      	ldr	r3, [pc, #304]	; (26ec <setvbuf+0x150>)
    25ba:	429c      	cmp	r4, r3
    25bc:	d152      	bne.n	2664 <setvbuf+0xc8>
    25be:	6874      	ldr	r4, [r6, #4]
    25c0:	f1b8 0f02 	cmp.w	r8, #2
    25c4:	d006      	beq.n	25d4 <setvbuf+0x38>
    25c6:	f1b8 0f01 	cmp.w	r8, #1
    25ca:	f200 8089 	bhi.w	26e0 <setvbuf+0x144>
    25ce:	2d00      	cmp	r5, #0
    25d0:	f2c0 8086 	blt.w	26e0 <setvbuf+0x144>
    25d4:	4621      	mov	r1, r4
    25d6:	4630      	mov	r0, r6
    25d8:	f7ff fd3a 	bl	2050 <_fflush_r>
    25dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    25de:	b141      	cbz	r1, 25f2 <setvbuf+0x56>
    25e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    25e4:	4299      	cmp	r1, r3
    25e6:	d002      	beq.n	25ee <setvbuf+0x52>
    25e8:	4630      	mov	r0, r6
    25ea:	f7ff fe7f 	bl	22ec <_free_r>
    25ee:	2300      	movs	r3, #0
    25f0:	6363      	str	r3, [r4, #52]	; 0x34
    25f2:	2300      	movs	r3, #0
    25f4:	61a3      	str	r3, [r4, #24]
    25f6:	6063      	str	r3, [r4, #4]
    25f8:	89a3      	ldrh	r3, [r4, #12]
    25fa:	061b      	lsls	r3, r3, #24
    25fc:	d503      	bpl.n	2606 <setvbuf+0x6a>
    25fe:	6921      	ldr	r1, [r4, #16]
    2600:	4630      	mov	r0, r6
    2602:	f7ff fe73 	bl	22ec <_free_r>
    2606:	89a3      	ldrh	r3, [r4, #12]
    2608:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    260c:	f023 0303 	bic.w	r3, r3, #3
    2610:	f1b8 0f02 	cmp.w	r8, #2
    2614:	81a3      	strh	r3, [r4, #12]
    2616:	d05d      	beq.n	26d4 <setvbuf+0x138>
    2618:	ab01      	add	r3, sp, #4
    261a:	466a      	mov	r2, sp
    261c:	4621      	mov	r1, r4
    261e:	4630      	mov	r0, r6
    2620:	f000 f9a2 	bl	2968 <__swhatbuf_r>
    2624:	89a3      	ldrh	r3, [r4, #12]
    2626:	4318      	orrs	r0, r3
    2628:	81a0      	strh	r0, [r4, #12]
    262a:	bb2d      	cbnz	r5, 2678 <setvbuf+0xdc>
    262c:	9d00      	ldr	r5, [sp, #0]
    262e:	4628      	mov	r0, r5
    2630:	f000 f9fe 	bl	2a30 <malloc>
    2634:	4607      	mov	r7, r0
    2636:	2800      	cmp	r0, #0
    2638:	d14e      	bne.n	26d8 <setvbuf+0x13c>
    263a:	f8dd 9000 	ldr.w	r9, [sp]
    263e:	45a9      	cmp	r9, r5
    2640:	d13c      	bne.n	26bc <setvbuf+0x120>
    2642:	f04f 30ff 	mov.w	r0, #4294967295
    2646:	89a3      	ldrh	r3, [r4, #12]
    2648:	f043 0302 	orr.w	r3, r3, #2
    264c:	81a3      	strh	r3, [r4, #12]
    264e:	2300      	movs	r3, #0
    2650:	60a3      	str	r3, [r4, #8]
    2652:	f104 0347 	add.w	r3, r4, #71	; 0x47
    2656:	6023      	str	r3, [r4, #0]
    2658:	6123      	str	r3, [r4, #16]
    265a:	2301      	movs	r3, #1
    265c:	6163      	str	r3, [r4, #20]
    265e:	b003      	add	sp, #12
    2660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2664:	4b22      	ldr	r3, [pc, #136]	; (26f0 <setvbuf+0x154>)
    2666:	429c      	cmp	r4, r3
    2668:	d101      	bne.n	266e <setvbuf+0xd2>
    266a:	68b4      	ldr	r4, [r6, #8]
    266c:	e7a8      	b.n	25c0 <setvbuf+0x24>
    266e:	4b21      	ldr	r3, [pc, #132]	; (26f4 <setvbuf+0x158>)
    2670:	429c      	cmp	r4, r3
    2672:	bf08      	it	eq
    2674:	68f4      	ldreq	r4, [r6, #12]
    2676:	e7a3      	b.n	25c0 <setvbuf+0x24>
    2678:	2f00      	cmp	r7, #0
    267a:	d0d8      	beq.n	262e <setvbuf+0x92>
    267c:	69b3      	ldr	r3, [r6, #24]
    267e:	b913      	cbnz	r3, 2686 <setvbuf+0xea>
    2680:	4630      	mov	r0, r6
    2682:	f7ff fd61 	bl	2148 <__sinit>
    2686:	f1b8 0f01 	cmp.w	r8, #1
    268a:	bf08      	it	eq
    268c:	89a3      	ldrheq	r3, [r4, #12]
    268e:	6027      	str	r7, [r4, #0]
    2690:	bf04      	itt	eq
    2692:	f043 0301 	orreq.w	r3, r3, #1
    2696:	81a3      	strheq	r3, [r4, #12]
    2698:	89a3      	ldrh	r3, [r4, #12]
    269a:	6127      	str	r7, [r4, #16]
    269c:	f013 0008 	ands.w	r0, r3, #8
    26a0:	6165      	str	r5, [r4, #20]
    26a2:	d01b      	beq.n	26dc <setvbuf+0x140>
    26a4:	f013 0001 	ands.w	r0, r3, #1
    26a8:	bf18      	it	ne
    26aa:	426d      	negne	r5, r5
    26ac:	f04f 0300 	mov.w	r3, #0
    26b0:	bf1d      	ittte	ne
    26b2:	60a3      	strne	r3, [r4, #8]
    26b4:	61a5      	strne	r5, [r4, #24]
    26b6:	4618      	movne	r0, r3
    26b8:	60a5      	streq	r5, [r4, #8]
    26ba:	e7d0      	b.n	265e <setvbuf+0xc2>
    26bc:	4648      	mov	r0, r9
    26be:	f000 f9b7 	bl	2a30 <malloc>
    26c2:	4607      	mov	r7, r0
    26c4:	2800      	cmp	r0, #0
    26c6:	d0bc      	beq.n	2642 <setvbuf+0xa6>
    26c8:	89a3      	ldrh	r3, [r4, #12]
    26ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    26ce:	81a3      	strh	r3, [r4, #12]
    26d0:	464d      	mov	r5, r9
    26d2:	e7d3      	b.n	267c <setvbuf+0xe0>
    26d4:	2000      	movs	r0, #0
    26d6:	e7b6      	b.n	2646 <setvbuf+0xaa>
    26d8:	46a9      	mov	r9, r5
    26da:	e7f5      	b.n	26c8 <setvbuf+0x12c>
    26dc:	60a0      	str	r0, [r4, #8]
    26de:	e7be      	b.n	265e <setvbuf+0xc2>
    26e0:	f04f 30ff 	mov.w	r0, #4294967295
    26e4:	e7bb      	b.n	265e <setvbuf+0xc2>
    26e6:	bf00      	nop
    26e8:	20000148 	.word	0x20000148
    26ec:	00004158 	.word	0x00004158
    26f0:	00004178 	.word	0x00004178
    26f4:	00004138 	.word	0x00004138

000026f8 <__sread>:
    26f8:	b510      	push	{r4, lr}
    26fa:	460c      	mov	r4, r1
    26fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2700:	f000 ff48 	bl	3594 <_read_r>
    2704:	2800      	cmp	r0, #0
    2706:	bfab      	itete	ge
    2708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    270a:	89a3      	ldrhlt	r3, [r4, #12]
    270c:	181b      	addge	r3, r3, r0
    270e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2712:	bfac      	ite	ge
    2714:	6563      	strge	r3, [r4, #84]	; 0x54
    2716:	81a3      	strhlt	r3, [r4, #12]
    2718:	bd10      	pop	{r4, pc}

0000271a <__swrite>:
    271a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    271e:	461f      	mov	r7, r3
    2720:	898b      	ldrh	r3, [r1, #12]
    2722:	05db      	lsls	r3, r3, #23
    2724:	4605      	mov	r5, r0
    2726:	460c      	mov	r4, r1
    2728:	4616      	mov	r6, r2
    272a:	d505      	bpl.n	2738 <__swrite+0x1e>
    272c:	2302      	movs	r3, #2
    272e:	2200      	movs	r2, #0
    2730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2734:	f000 f906 	bl	2944 <_lseek_r>
    2738:	89a3      	ldrh	r3, [r4, #12]
    273a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    273e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2742:	81a3      	strh	r3, [r4, #12]
    2744:	4632      	mov	r2, r6
    2746:	463b      	mov	r3, r7
    2748:	4628      	mov	r0, r5
    274a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    274e:	f000 b869 	b.w	2824 <_write_r>

00002752 <__sseek>:
    2752:	b510      	push	{r4, lr}
    2754:	460c      	mov	r4, r1
    2756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    275a:	f000 f8f3 	bl	2944 <_lseek_r>
    275e:	1c43      	adds	r3, r0, #1
    2760:	89a3      	ldrh	r3, [r4, #12]
    2762:	bf15      	itete	ne
    2764:	6560      	strne	r0, [r4, #84]	; 0x54
    2766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    276a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    276e:	81a3      	strheq	r3, [r4, #12]
    2770:	bf18      	it	ne
    2772:	81a3      	strhne	r3, [r4, #12]
    2774:	bd10      	pop	{r4, pc}

00002776 <__sclose>:
    2776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    277a:	f000 b8d3 	b.w	2924 <_close_r>
	...

00002780 <__swbuf_r>:
    2780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2782:	460e      	mov	r6, r1
    2784:	4614      	mov	r4, r2
    2786:	4605      	mov	r5, r0
    2788:	b118      	cbz	r0, 2792 <__swbuf_r+0x12>
    278a:	6983      	ldr	r3, [r0, #24]
    278c:	b90b      	cbnz	r3, 2792 <__swbuf_r+0x12>
    278e:	f7ff fcdb 	bl	2148 <__sinit>
    2792:	4b21      	ldr	r3, [pc, #132]	; (2818 <__swbuf_r+0x98>)
    2794:	429c      	cmp	r4, r3
    2796:	d12a      	bne.n	27ee <__swbuf_r+0x6e>
    2798:	686c      	ldr	r4, [r5, #4]
    279a:	69a3      	ldr	r3, [r4, #24]
    279c:	60a3      	str	r3, [r4, #8]
    279e:	89a3      	ldrh	r3, [r4, #12]
    27a0:	071a      	lsls	r2, r3, #28
    27a2:	d52e      	bpl.n	2802 <__swbuf_r+0x82>
    27a4:	6923      	ldr	r3, [r4, #16]
    27a6:	b363      	cbz	r3, 2802 <__swbuf_r+0x82>
    27a8:	6923      	ldr	r3, [r4, #16]
    27aa:	6820      	ldr	r0, [r4, #0]
    27ac:	1ac0      	subs	r0, r0, r3
    27ae:	6963      	ldr	r3, [r4, #20]
    27b0:	b2f6      	uxtb	r6, r6
    27b2:	4298      	cmp	r0, r3
    27b4:	4637      	mov	r7, r6
    27b6:	db04      	blt.n	27c2 <__swbuf_r+0x42>
    27b8:	4621      	mov	r1, r4
    27ba:	4628      	mov	r0, r5
    27bc:	f7ff fc48 	bl	2050 <_fflush_r>
    27c0:	bb28      	cbnz	r0, 280e <__swbuf_r+0x8e>
    27c2:	68a3      	ldr	r3, [r4, #8]
    27c4:	3b01      	subs	r3, #1
    27c6:	60a3      	str	r3, [r4, #8]
    27c8:	6823      	ldr	r3, [r4, #0]
    27ca:	1c5a      	adds	r2, r3, #1
    27cc:	6022      	str	r2, [r4, #0]
    27ce:	701e      	strb	r6, [r3, #0]
    27d0:	6963      	ldr	r3, [r4, #20]
    27d2:	3001      	adds	r0, #1
    27d4:	4298      	cmp	r0, r3
    27d6:	d004      	beq.n	27e2 <__swbuf_r+0x62>
    27d8:	89a3      	ldrh	r3, [r4, #12]
    27da:	07db      	lsls	r3, r3, #31
    27dc:	d519      	bpl.n	2812 <__swbuf_r+0x92>
    27de:	2e0a      	cmp	r6, #10
    27e0:	d117      	bne.n	2812 <__swbuf_r+0x92>
    27e2:	4621      	mov	r1, r4
    27e4:	4628      	mov	r0, r5
    27e6:	f7ff fc33 	bl	2050 <_fflush_r>
    27ea:	b190      	cbz	r0, 2812 <__swbuf_r+0x92>
    27ec:	e00f      	b.n	280e <__swbuf_r+0x8e>
    27ee:	4b0b      	ldr	r3, [pc, #44]	; (281c <__swbuf_r+0x9c>)
    27f0:	429c      	cmp	r4, r3
    27f2:	d101      	bne.n	27f8 <__swbuf_r+0x78>
    27f4:	68ac      	ldr	r4, [r5, #8]
    27f6:	e7d0      	b.n	279a <__swbuf_r+0x1a>
    27f8:	4b09      	ldr	r3, [pc, #36]	; (2820 <__swbuf_r+0xa0>)
    27fa:	429c      	cmp	r4, r3
    27fc:	bf08      	it	eq
    27fe:	68ec      	ldreq	r4, [r5, #12]
    2800:	e7cb      	b.n	279a <__swbuf_r+0x1a>
    2802:	4621      	mov	r1, r4
    2804:	4628      	mov	r0, r5
    2806:	f000 f81f 	bl	2848 <__swsetup_r>
    280a:	2800      	cmp	r0, #0
    280c:	d0cc      	beq.n	27a8 <__swbuf_r+0x28>
    280e:	f04f 37ff 	mov.w	r7, #4294967295
    2812:	4638      	mov	r0, r7
    2814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2816:	bf00      	nop
    2818:	00004158 	.word	0x00004158
    281c:	00004178 	.word	0x00004178
    2820:	00004138 	.word	0x00004138

00002824 <_write_r>:
    2824:	b538      	push	{r3, r4, r5, lr}
    2826:	4c07      	ldr	r4, [pc, #28]	; (2844 <_write_r+0x20>)
    2828:	4605      	mov	r5, r0
    282a:	4608      	mov	r0, r1
    282c:	4611      	mov	r1, r2
    282e:	2200      	movs	r2, #0
    2830:	6022      	str	r2, [r4, #0]
    2832:	461a      	mov	r2, r3
    2834:	f7fe ff3e 	bl	16b4 <_write>
    2838:	1c43      	adds	r3, r0, #1
    283a:	d102      	bne.n	2842 <_write_r+0x1e>
    283c:	6823      	ldr	r3, [r4, #0]
    283e:	b103      	cbz	r3, 2842 <_write_r+0x1e>
    2840:	602b      	str	r3, [r5, #0]
    2842:	bd38      	pop	{r3, r4, r5, pc}
    2844:	20000448 	.word	0x20000448

00002848 <__swsetup_r>:
    2848:	4b32      	ldr	r3, [pc, #200]	; (2914 <__swsetup_r+0xcc>)
    284a:	b570      	push	{r4, r5, r6, lr}
    284c:	681d      	ldr	r5, [r3, #0]
    284e:	4606      	mov	r6, r0
    2850:	460c      	mov	r4, r1
    2852:	b125      	cbz	r5, 285e <__swsetup_r+0x16>
    2854:	69ab      	ldr	r3, [r5, #24]
    2856:	b913      	cbnz	r3, 285e <__swsetup_r+0x16>
    2858:	4628      	mov	r0, r5
    285a:	f7ff fc75 	bl	2148 <__sinit>
    285e:	4b2e      	ldr	r3, [pc, #184]	; (2918 <__swsetup_r+0xd0>)
    2860:	429c      	cmp	r4, r3
    2862:	d10f      	bne.n	2884 <__swsetup_r+0x3c>
    2864:	686c      	ldr	r4, [r5, #4]
    2866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    286a:	b29a      	uxth	r2, r3
    286c:	0715      	lsls	r5, r2, #28
    286e:	d42c      	bmi.n	28ca <__swsetup_r+0x82>
    2870:	06d0      	lsls	r0, r2, #27
    2872:	d411      	bmi.n	2898 <__swsetup_r+0x50>
    2874:	2209      	movs	r2, #9
    2876:	6032      	str	r2, [r6, #0]
    2878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    287c:	81a3      	strh	r3, [r4, #12]
    287e:	f04f 30ff 	mov.w	r0, #4294967295
    2882:	bd70      	pop	{r4, r5, r6, pc}
    2884:	4b25      	ldr	r3, [pc, #148]	; (291c <__swsetup_r+0xd4>)
    2886:	429c      	cmp	r4, r3
    2888:	d101      	bne.n	288e <__swsetup_r+0x46>
    288a:	68ac      	ldr	r4, [r5, #8]
    288c:	e7eb      	b.n	2866 <__swsetup_r+0x1e>
    288e:	4b24      	ldr	r3, [pc, #144]	; (2920 <__swsetup_r+0xd8>)
    2890:	429c      	cmp	r4, r3
    2892:	bf08      	it	eq
    2894:	68ec      	ldreq	r4, [r5, #12]
    2896:	e7e6      	b.n	2866 <__swsetup_r+0x1e>
    2898:	0751      	lsls	r1, r2, #29
    289a:	d512      	bpl.n	28c2 <__swsetup_r+0x7a>
    289c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    289e:	b141      	cbz	r1, 28b2 <__swsetup_r+0x6a>
    28a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    28a4:	4299      	cmp	r1, r3
    28a6:	d002      	beq.n	28ae <__swsetup_r+0x66>
    28a8:	4630      	mov	r0, r6
    28aa:	f7ff fd1f 	bl	22ec <_free_r>
    28ae:	2300      	movs	r3, #0
    28b0:	6363      	str	r3, [r4, #52]	; 0x34
    28b2:	89a3      	ldrh	r3, [r4, #12]
    28b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    28b8:	81a3      	strh	r3, [r4, #12]
    28ba:	2300      	movs	r3, #0
    28bc:	6063      	str	r3, [r4, #4]
    28be:	6923      	ldr	r3, [r4, #16]
    28c0:	6023      	str	r3, [r4, #0]
    28c2:	89a3      	ldrh	r3, [r4, #12]
    28c4:	f043 0308 	orr.w	r3, r3, #8
    28c8:	81a3      	strh	r3, [r4, #12]
    28ca:	6923      	ldr	r3, [r4, #16]
    28cc:	b94b      	cbnz	r3, 28e2 <__swsetup_r+0x9a>
    28ce:	89a3      	ldrh	r3, [r4, #12]
    28d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    28d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    28d8:	d003      	beq.n	28e2 <__swsetup_r+0x9a>
    28da:	4621      	mov	r1, r4
    28dc:	4630      	mov	r0, r6
    28de:	f000 f867 	bl	29b0 <__smakebuf_r>
    28e2:	89a2      	ldrh	r2, [r4, #12]
    28e4:	f012 0301 	ands.w	r3, r2, #1
    28e8:	d00c      	beq.n	2904 <__swsetup_r+0xbc>
    28ea:	2300      	movs	r3, #0
    28ec:	60a3      	str	r3, [r4, #8]
    28ee:	6963      	ldr	r3, [r4, #20]
    28f0:	425b      	negs	r3, r3
    28f2:	61a3      	str	r3, [r4, #24]
    28f4:	6923      	ldr	r3, [r4, #16]
    28f6:	b953      	cbnz	r3, 290e <__swsetup_r+0xc6>
    28f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    28fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    2900:	d1ba      	bne.n	2878 <__swsetup_r+0x30>
    2902:	bd70      	pop	{r4, r5, r6, pc}
    2904:	0792      	lsls	r2, r2, #30
    2906:	bf58      	it	pl
    2908:	6963      	ldrpl	r3, [r4, #20]
    290a:	60a3      	str	r3, [r4, #8]
    290c:	e7f2      	b.n	28f4 <__swsetup_r+0xac>
    290e:	2000      	movs	r0, #0
    2910:	e7f7      	b.n	2902 <__swsetup_r+0xba>
    2912:	bf00      	nop
    2914:	20000148 	.word	0x20000148
    2918:	00004158 	.word	0x00004158
    291c:	00004178 	.word	0x00004178
    2920:	00004138 	.word	0x00004138

00002924 <_close_r>:
    2924:	b538      	push	{r3, r4, r5, lr}
    2926:	4c06      	ldr	r4, [pc, #24]	; (2940 <_close_r+0x1c>)
    2928:	2300      	movs	r3, #0
    292a:	4605      	mov	r5, r0
    292c:	4608      	mov	r0, r1
    292e:	6023      	str	r3, [r4, #0]
    2930:	f7fe f8ce 	bl	ad0 <_close>
    2934:	1c43      	adds	r3, r0, #1
    2936:	d102      	bne.n	293e <_close_r+0x1a>
    2938:	6823      	ldr	r3, [r4, #0]
    293a:	b103      	cbz	r3, 293e <_close_r+0x1a>
    293c:	602b      	str	r3, [r5, #0]
    293e:	bd38      	pop	{r3, r4, r5, pc}
    2940:	20000448 	.word	0x20000448

00002944 <_lseek_r>:
    2944:	b538      	push	{r3, r4, r5, lr}
    2946:	4c07      	ldr	r4, [pc, #28]	; (2964 <_lseek_r+0x20>)
    2948:	4605      	mov	r5, r0
    294a:	4608      	mov	r0, r1
    294c:	4611      	mov	r1, r2
    294e:	2200      	movs	r2, #0
    2950:	6022      	str	r2, [r4, #0]
    2952:	461a      	mov	r2, r3
    2954:	f7fe f8c6 	bl	ae4 <_lseek>
    2958:	1c43      	adds	r3, r0, #1
    295a:	d102      	bne.n	2962 <_lseek_r+0x1e>
    295c:	6823      	ldr	r3, [r4, #0]
    295e:	b103      	cbz	r3, 2962 <_lseek_r+0x1e>
    2960:	602b      	str	r3, [r5, #0]
    2962:	bd38      	pop	{r3, r4, r5, pc}
    2964:	20000448 	.word	0x20000448

00002968 <__swhatbuf_r>:
    2968:	b570      	push	{r4, r5, r6, lr}
    296a:	460e      	mov	r6, r1
    296c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2970:	2900      	cmp	r1, #0
    2972:	b090      	sub	sp, #64	; 0x40
    2974:	4614      	mov	r4, r2
    2976:	461d      	mov	r5, r3
    2978:	da07      	bge.n	298a <__swhatbuf_r+0x22>
    297a:	2300      	movs	r3, #0
    297c:	602b      	str	r3, [r5, #0]
    297e:	89b3      	ldrh	r3, [r6, #12]
    2980:	061a      	lsls	r2, r3, #24
    2982:	d410      	bmi.n	29a6 <__swhatbuf_r+0x3e>
    2984:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2988:	e00e      	b.n	29a8 <__swhatbuf_r+0x40>
    298a:	aa01      	add	r2, sp, #4
    298c:	f001 f8a8 	bl	3ae0 <_fstat_r>
    2990:	2800      	cmp	r0, #0
    2992:	dbf2      	blt.n	297a <__swhatbuf_r+0x12>
    2994:	9a02      	ldr	r2, [sp, #8]
    2996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    299a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    299e:	425a      	negs	r2, r3
    29a0:	415a      	adcs	r2, r3
    29a2:	602a      	str	r2, [r5, #0]
    29a4:	e7ee      	b.n	2984 <__swhatbuf_r+0x1c>
    29a6:	2340      	movs	r3, #64	; 0x40
    29a8:	2000      	movs	r0, #0
    29aa:	6023      	str	r3, [r4, #0]
    29ac:	b010      	add	sp, #64	; 0x40
    29ae:	bd70      	pop	{r4, r5, r6, pc}

000029b0 <__smakebuf_r>:
    29b0:	898b      	ldrh	r3, [r1, #12]
    29b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    29b4:	079d      	lsls	r5, r3, #30
    29b6:	4606      	mov	r6, r0
    29b8:	460c      	mov	r4, r1
    29ba:	d507      	bpl.n	29cc <__smakebuf_r+0x1c>
    29bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
    29c0:	6023      	str	r3, [r4, #0]
    29c2:	6123      	str	r3, [r4, #16]
    29c4:	2301      	movs	r3, #1
    29c6:	6163      	str	r3, [r4, #20]
    29c8:	b002      	add	sp, #8
    29ca:	bd70      	pop	{r4, r5, r6, pc}
    29cc:	ab01      	add	r3, sp, #4
    29ce:	466a      	mov	r2, sp
    29d0:	f7ff ffca 	bl	2968 <__swhatbuf_r>
    29d4:	9900      	ldr	r1, [sp, #0]
    29d6:	4605      	mov	r5, r0
    29d8:	4630      	mov	r0, r6
    29da:	f7ff fcd5 	bl	2388 <_malloc_r>
    29de:	b948      	cbnz	r0, 29f4 <__smakebuf_r+0x44>
    29e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    29e4:	059a      	lsls	r2, r3, #22
    29e6:	d4ef      	bmi.n	29c8 <__smakebuf_r+0x18>
    29e8:	f023 0303 	bic.w	r3, r3, #3
    29ec:	f043 0302 	orr.w	r3, r3, #2
    29f0:	81a3      	strh	r3, [r4, #12]
    29f2:	e7e3      	b.n	29bc <__smakebuf_r+0xc>
    29f4:	4b0d      	ldr	r3, [pc, #52]	; (2a2c <__smakebuf_r+0x7c>)
    29f6:	62b3      	str	r3, [r6, #40]	; 0x28
    29f8:	89a3      	ldrh	r3, [r4, #12]
    29fa:	6020      	str	r0, [r4, #0]
    29fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2a00:	81a3      	strh	r3, [r4, #12]
    2a02:	9b00      	ldr	r3, [sp, #0]
    2a04:	6163      	str	r3, [r4, #20]
    2a06:	9b01      	ldr	r3, [sp, #4]
    2a08:	6120      	str	r0, [r4, #16]
    2a0a:	b15b      	cbz	r3, 2a24 <__smakebuf_r+0x74>
    2a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2a10:	4630      	mov	r0, r6
    2a12:	f001 f877 	bl	3b04 <_isatty_r>
    2a16:	b128      	cbz	r0, 2a24 <__smakebuf_r+0x74>
    2a18:	89a3      	ldrh	r3, [r4, #12]
    2a1a:	f023 0303 	bic.w	r3, r3, #3
    2a1e:	f043 0301 	orr.w	r3, r3, #1
    2a22:	81a3      	strh	r3, [r4, #12]
    2a24:	89a3      	ldrh	r3, [r4, #12]
    2a26:	431d      	orrs	r5, r3
    2a28:	81a5      	strh	r5, [r4, #12]
    2a2a:	e7cd      	b.n	29c8 <__smakebuf_r+0x18>
    2a2c:	000020c9 	.word	0x000020c9

00002a30 <malloc>:
    2a30:	4b02      	ldr	r3, [pc, #8]	; (2a3c <malloc+0xc>)
    2a32:	4601      	mov	r1, r0
    2a34:	6818      	ldr	r0, [r3, #0]
    2a36:	f7ff bca7 	b.w	2388 <_malloc_r>
    2a3a:	bf00      	nop
    2a3c:	20000148 	.word	0x20000148

00002a40 <__malloc_lock>:
    2a40:	4770      	bx	lr

00002a42 <__malloc_unlock>:
    2a42:	4770      	bx	lr

00002a44 <__sfputc_r>:
    2a44:	6893      	ldr	r3, [r2, #8]
    2a46:	3b01      	subs	r3, #1
    2a48:	2b00      	cmp	r3, #0
    2a4a:	b410      	push	{r4}
    2a4c:	6093      	str	r3, [r2, #8]
    2a4e:	da08      	bge.n	2a62 <__sfputc_r+0x1e>
    2a50:	6994      	ldr	r4, [r2, #24]
    2a52:	42a3      	cmp	r3, r4
    2a54:	db02      	blt.n	2a5c <__sfputc_r+0x18>
    2a56:	b2cb      	uxtb	r3, r1
    2a58:	2b0a      	cmp	r3, #10
    2a5a:	d102      	bne.n	2a62 <__sfputc_r+0x1e>
    2a5c:	bc10      	pop	{r4}
    2a5e:	f7ff be8f 	b.w	2780 <__swbuf_r>
    2a62:	6813      	ldr	r3, [r2, #0]
    2a64:	1c58      	adds	r0, r3, #1
    2a66:	6010      	str	r0, [r2, #0]
    2a68:	7019      	strb	r1, [r3, #0]
    2a6a:	b2c8      	uxtb	r0, r1
    2a6c:	bc10      	pop	{r4}
    2a6e:	4770      	bx	lr

00002a70 <__sfputs_r>:
    2a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a72:	4606      	mov	r6, r0
    2a74:	460f      	mov	r7, r1
    2a76:	4614      	mov	r4, r2
    2a78:	18d5      	adds	r5, r2, r3
    2a7a:	42ac      	cmp	r4, r5
    2a7c:	d101      	bne.n	2a82 <__sfputs_r+0x12>
    2a7e:	2000      	movs	r0, #0
    2a80:	e007      	b.n	2a92 <__sfputs_r+0x22>
    2a82:	463a      	mov	r2, r7
    2a84:	f814 1b01 	ldrb.w	r1, [r4], #1
    2a88:	4630      	mov	r0, r6
    2a8a:	f7ff ffdb 	bl	2a44 <__sfputc_r>
    2a8e:	1c43      	adds	r3, r0, #1
    2a90:	d1f3      	bne.n	2a7a <__sfputs_r+0xa>
    2a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002a94 <_vfiprintf_r>:
    2a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a98:	b09d      	sub	sp, #116	; 0x74
    2a9a:	460c      	mov	r4, r1
    2a9c:	4617      	mov	r7, r2
    2a9e:	9303      	str	r3, [sp, #12]
    2aa0:	4606      	mov	r6, r0
    2aa2:	b118      	cbz	r0, 2aac <_vfiprintf_r+0x18>
    2aa4:	6983      	ldr	r3, [r0, #24]
    2aa6:	b90b      	cbnz	r3, 2aac <_vfiprintf_r+0x18>
    2aa8:	f7ff fb4e 	bl	2148 <__sinit>
    2aac:	4b7c      	ldr	r3, [pc, #496]	; (2ca0 <_vfiprintf_r+0x20c>)
    2aae:	429c      	cmp	r4, r3
    2ab0:	d157      	bne.n	2b62 <_vfiprintf_r+0xce>
    2ab2:	6874      	ldr	r4, [r6, #4]
    2ab4:	89a3      	ldrh	r3, [r4, #12]
    2ab6:	0718      	lsls	r0, r3, #28
    2ab8:	d55d      	bpl.n	2b76 <_vfiprintf_r+0xe2>
    2aba:	6923      	ldr	r3, [r4, #16]
    2abc:	2b00      	cmp	r3, #0
    2abe:	d05a      	beq.n	2b76 <_vfiprintf_r+0xe2>
    2ac0:	2300      	movs	r3, #0
    2ac2:	9309      	str	r3, [sp, #36]	; 0x24
    2ac4:	2320      	movs	r3, #32
    2ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2aca:	2330      	movs	r3, #48	; 0x30
    2acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2ad0:	f04f 0b01 	mov.w	fp, #1
    2ad4:	46b8      	mov	r8, r7
    2ad6:	4645      	mov	r5, r8
    2ad8:	f815 3b01 	ldrb.w	r3, [r5], #1
    2adc:	2b00      	cmp	r3, #0
    2ade:	d155      	bne.n	2b8c <_vfiprintf_r+0xf8>
    2ae0:	ebb8 0a07 	subs.w	sl, r8, r7
    2ae4:	d00b      	beq.n	2afe <_vfiprintf_r+0x6a>
    2ae6:	4653      	mov	r3, sl
    2ae8:	463a      	mov	r2, r7
    2aea:	4621      	mov	r1, r4
    2aec:	4630      	mov	r0, r6
    2aee:	f7ff ffbf 	bl	2a70 <__sfputs_r>
    2af2:	3001      	adds	r0, #1
    2af4:	f000 80c4 	beq.w	2c80 <_vfiprintf_r+0x1ec>
    2af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2afa:	4453      	add	r3, sl
    2afc:	9309      	str	r3, [sp, #36]	; 0x24
    2afe:	f898 3000 	ldrb.w	r3, [r8]
    2b02:	2b00      	cmp	r3, #0
    2b04:	f000 80bc 	beq.w	2c80 <_vfiprintf_r+0x1ec>
    2b08:	2300      	movs	r3, #0
    2b0a:	f04f 32ff 	mov.w	r2, #4294967295
    2b0e:	9304      	str	r3, [sp, #16]
    2b10:	9307      	str	r3, [sp, #28]
    2b12:	9205      	str	r2, [sp, #20]
    2b14:	9306      	str	r3, [sp, #24]
    2b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2b1a:	931a      	str	r3, [sp, #104]	; 0x68
    2b1c:	2205      	movs	r2, #5
    2b1e:	7829      	ldrb	r1, [r5, #0]
    2b20:	4860      	ldr	r0, [pc, #384]	; (2ca4 <_vfiprintf_r+0x210>)
    2b22:	f001 f825 	bl	3b70 <memchr>
    2b26:	f105 0801 	add.w	r8, r5, #1
    2b2a:	9b04      	ldr	r3, [sp, #16]
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d131      	bne.n	2b94 <_vfiprintf_r+0x100>
    2b30:	06d9      	lsls	r1, r3, #27
    2b32:	bf44      	itt	mi
    2b34:	2220      	movmi	r2, #32
    2b36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2b3a:	071a      	lsls	r2, r3, #28
    2b3c:	bf44      	itt	mi
    2b3e:	222b      	movmi	r2, #43	; 0x2b
    2b40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2b44:	782a      	ldrb	r2, [r5, #0]
    2b46:	2a2a      	cmp	r2, #42	; 0x2a
    2b48:	d02c      	beq.n	2ba4 <_vfiprintf_r+0x110>
    2b4a:	9a07      	ldr	r2, [sp, #28]
    2b4c:	2100      	movs	r1, #0
    2b4e:	200a      	movs	r0, #10
    2b50:	46a8      	mov	r8, r5
    2b52:	3501      	adds	r5, #1
    2b54:	f898 3000 	ldrb.w	r3, [r8]
    2b58:	3b30      	subs	r3, #48	; 0x30
    2b5a:	2b09      	cmp	r3, #9
    2b5c:	d96d      	bls.n	2c3a <_vfiprintf_r+0x1a6>
    2b5e:	b371      	cbz	r1, 2bbe <_vfiprintf_r+0x12a>
    2b60:	e026      	b.n	2bb0 <_vfiprintf_r+0x11c>
    2b62:	4b51      	ldr	r3, [pc, #324]	; (2ca8 <_vfiprintf_r+0x214>)
    2b64:	429c      	cmp	r4, r3
    2b66:	d101      	bne.n	2b6c <_vfiprintf_r+0xd8>
    2b68:	68b4      	ldr	r4, [r6, #8]
    2b6a:	e7a3      	b.n	2ab4 <_vfiprintf_r+0x20>
    2b6c:	4b4f      	ldr	r3, [pc, #316]	; (2cac <_vfiprintf_r+0x218>)
    2b6e:	429c      	cmp	r4, r3
    2b70:	bf08      	it	eq
    2b72:	68f4      	ldreq	r4, [r6, #12]
    2b74:	e79e      	b.n	2ab4 <_vfiprintf_r+0x20>
    2b76:	4621      	mov	r1, r4
    2b78:	4630      	mov	r0, r6
    2b7a:	f7ff fe65 	bl	2848 <__swsetup_r>
    2b7e:	2800      	cmp	r0, #0
    2b80:	d09e      	beq.n	2ac0 <_vfiprintf_r+0x2c>
    2b82:	f04f 30ff 	mov.w	r0, #4294967295
    2b86:	b01d      	add	sp, #116	; 0x74
    2b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b8c:	2b25      	cmp	r3, #37	; 0x25
    2b8e:	d0a7      	beq.n	2ae0 <_vfiprintf_r+0x4c>
    2b90:	46a8      	mov	r8, r5
    2b92:	e7a0      	b.n	2ad6 <_vfiprintf_r+0x42>
    2b94:	4a43      	ldr	r2, [pc, #268]	; (2ca4 <_vfiprintf_r+0x210>)
    2b96:	1a80      	subs	r0, r0, r2
    2b98:	fa0b f000 	lsl.w	r0, fp, r0
    2b9c:	4318      	orrs	r0, r3
    2b9e:	9004      	str	r0, [sp, #16]
    2ba0:	4645      	mov	r5, r8
    2ba2:	e7bb      	b.n	2b1c <_vfiprintf_r+0x88>
    2ba4:	9a03      	ldr	r2, [sp, #12]
    2ba6:	1d11      	adds	r1, r2, #4
    2ba8:	6812      	ldr	r2, [r2, #0]
    2baa:	9103      	str	r1, [sp, #12]
    2bac:	2a00      	cmp	r2, #0
    2bae:	db01      	blt.n	2bb4 <_vfiprintf_r+0x120>
    2bb0:	9207      	str	r2, [sp, #28]
    2bb2:	e004      	b.n	2bbe <_vfiprintf_r+0x12a>
    2bb4:	4252      	negs	r2, r2
    2bb6:	f043 0302 	orr.w	r3, r3, #2
    2bba:	9207      	str	r2, [sp, #28]
    2bbc:	9304      	str	r3, [sp, #16]
    2bbe:	f898 3000 	ldrb.w	r3, [r8]
    2bc2:	2b2e      	cmp	r3, #46	; 0x2e
    2bc4:	d110      	bne.n	2be8 <_vfiprintf_r+0x154>
    2bc6:	f898 3001 	ldrb.w	r3, [r8, #1]
    2bca:	2b2a      	cmp	r3, #42	; 0x2a
    2bcc:	f108 0101 	add.w	r1, r8, #1
    2bd0:	d137      	bne.n	2c42 <_vfiprintf_r+0x1ae>
    2bd2:	9b03      	ldr	r3, [sp, #12]
    2bd4:	1d1a      	adds	r2, r3, #4
    2bd6:	681b      	ldr	r3, [r3, #0]
    2bd8:	9203      	str	r2, [sp, #12]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	bfb8      	it	lt
    2bde:	f04f 33ff 	movlt.w	r3, #4294967295
    2be2:	f108 0802 	add.w	r8, r8, #2
    2be6:	9305      	str	r3, [sp, #20]
    2be8:	4d31      	ldr	r5, [pc, #196]	; (2cb0 <_vfiprintf_r+0x21c>)
    2bea:	f898 1000 	ldrb.w	r1, [r8]
    2bee:	2203      	movs	r2, #3
    2bf0:	4628      	mov	r0, r5
    2bf2:	f000 ffbd 	bl	3b70 <memchr>
    2bf6:	b140      	cbz	r0, 2c0a <_vfiprintf_r+0x176>
    2bf8:	2340      	movs	r3, #64	; 0x40
    2bfa:	1b40      	subs	r0, r0, r5
    2bfc:	fa03 f000 	lsl.w	r0, r3, r0
    2c00:	9b04      	ldr	r3, [sp, #16]
    2c02:	4303      	orrs	r3, r0
    2c04:	9304      	str	r3, [sp, #16]
    2c06:	f108 0801 	add.w	r8, r8, #1
    2c0a:	f898 1000 	ldrb.w	r1, [r8]
    2c0e:	4829      	ldr	r0, [pc, #164]	; (2cb4 <_vfiprintf_r+0x220>)
    2c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2c14:	2206      	movs	r2, #6
    2c16:	f108 0701 	add.w	r7, r8, #1
    2c1a:	f000 ffa9 	bl	3b70 <memchr>
    2c1e:	2800      	cmp	r0, #0
    2c20:	d034      	beq.n	2c8c <_vfiprintf_r+0x1f8>
    2c22:	4b25      	ldr	r3, [pc, #148]	; (2cb8 <_vfiprintf_r+0x224>)
    2c24:	bb03      	cbnz	r3, 2c68 <_vfiprintf_r+0x1d4>
    2c26:	9b03      	ldr	r3, [sp, #12]
    2c28:	3307      	adds	r3, #7
    2c2a:	f023 0307 	bic.w	r3, r3, #7
    2c2e:	3308      	adds	r3, #8
    2c30:	9303      	str	r3, [sp, #12]
    2c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c34:	444b      	add	r3, r9
    2c36:	9309      	str	r3, [sp, #36]	; 0x24
    2c38:	e74c      	b.n	2ad4 <_vfiprintf_r+0x40>
    2c3a:	fb00 3202 	mla	r2, r0, r2, r3
    2c3e:	2101      	movs	r1, #1
    2c40:	e786      	b.n	2b50 <_vfiprintf_r+0xbc>
    2c42:	2300      	movs	r3, #0
    2c44:	9305      	str	r3, [sp, #20]
    2c46:	4618      	mov	r0, r3
    2c48:	250a      	movs	r5, #10
    2c4a:	4688      	mov	r8, r1
    2c4c:	3101      	adds	r1, #1
    2c4e:	f898 2000 	ldrb.w	r2, [r8]
    2c52:	3a30      	subs	r2, #48	; 0x30
    2c54:	2a09      	cmp	r2, #9
    2c56:	d903      	bls.n	2c60 <_vfiprintf_r+0x1cc>
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d0c5      	beq.n	2be8 <_vfiprintf_r+0x154>
    2c5c:	9005      	str	r0, [sp, #20]
    2c5e:	e7c3      	b.n	2be8 <_vfiprintf_r+0x154>
    2c60:	fb05 2000 	mla	r0, r5, r0, r2
    2c64:	2301      	movs	r3, #1
    2c66:	e7f0      	b.n	2c4a <_vfiprintf_r+0x1b6>
    2c68:	ab03      	add	r3, sp, #12
    2c6a:	9300      	str	r3, [sp, #0]
    2c6c:	4622      	mov	r2, r4
    2c6e:	4b13      	ldr	r3, [pc, #76]	; (2cbc <_vfiprintf_r+0x228>)
    2c70:	a904      	add	r1, sp, #16
    2c72:	4630      	mov	r0, r6
    2c74:	f3af 8000 	nop.w
    2c78:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c7c:	4681      	mov	r9, r0
    2c7e:	d1d8      	bne.n	2c32 <_vfiprintf_r+0x19e>
    2c80:	89a3      	ldrh	r3, [r4, #12]
    2c82:	065b      	lsls	r3, r3, #25
    2c84:	f53f af7d 	bmi.w	2b82 <_vfiprintf_r+0xee>
    2c88:	9809      	ldr	r0, [sp, #36]	; 0x24
    2c8a:	e77c      	b.n	2b86 <_vfiprintf_r+0xf2>
    2c8c:	ab03      	add	r3, sp, #12
    2c8e:	9300      	str	r3, [sp, #0]
    2c90:	4622      	mov	r2, r4
    2c92:	4b0a      	ldr	r3, [pc, #40]	; (2cbc <_vfiprintf_r+0x228>)
    2c94:	a904      	add	r1, sp, #16
    2c96:	4630      	mov	r0, r6
    2c98:	f000 f888 	bl	2dac <_printf_i>
    2c9c:	e7ec      	b.n	2c78 <_vfiprintf_r+0x1e4>
    2c9e:	bf00      	nop
    2ca0:	00004158 	.word	0x00004158
    2ca4:	0000419c 	.word	0x0000419c
    2ca8:	00004178 	.word	0x00004178
    2cac:	00004138 	.word	0x00004138
    2cb0:	000041a2 	.word	0x000041a2
    2cb4:	000041a6 	.word	0x000041a6
    2cb8:	00000000 	.word	0x00000000
    2cbc:	00002a71 	.word	0x00002a71

00002cc0 <_printf_common>:
    2cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cc4:	4691      	mov	r9, r2
    2cc6:	461f      	mov	r7, r3
    2cc8:	688a      	ldr	r2, [r1, #8]
    2cca:	690b      	ldr	r3, [r1, #16]
    2ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2cd0:	4293      	cmp	r3, r2
    2cd2:	bfb8      	it	lt
    2cd4:	4613      	movlt	r3, r2
    2cd6:	f8c9 3000 	str.w	r3, [r9]
    2cda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2cde:	4606      	mov	r6, r0
    2ce0:	460c      	mov	r4, r1
    2ce2:	b112      	cbz	r2, 2cea <_printf_common+0x2a>
    2ce4:	3301      	adds	r3, #1
    2ce6:	f8c9 3000 	str.w	r3, [r9]
    2cea:	6823      	ldr	r3, [r4, #0]
    2cec:	0699      	lsls	r1, r3, #26
    2cee:	bf42      	ittt	mi
    2cf0:	f8d9 3000 	ldrmi.w	r3, [r9]
    2cf4:	3302      	addmi	r3, #2
    2cf6:	f8c9 3000 	strmi.w	r3, [r9]
    2cfa:	6825      	ldr	r5, [r4, #0]
    2cfc:	f015 0506 	ands.w	r5, r5, #6
    2d00:	d107      	bne.n	2d12 <_printf_common+0x52>
    2d02:	f104 0a19 	add.w	sl, r4, #25
    2d06:	68e3      	ldr	r3, [r4, #12]
    2d08:	f8d9 2000 	ldr.w	r2, [r9]
    2d0c:	1a9b      	subs	r3, r3, r2
    2d0e:	429d      	cmp	r5, r3
    2d10:	db29      	blt.n	2d66 <_printf_common+0xa6>
    2d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2d16:	6822      	ldr	r2, [r4, #0]
    2d18:	3300      	adds	r3, #0
    2d1a:	bf18      	it	ne
    2d1c:	2301      	movne	r3, #1
    2d1e:	0692      	lsls	r2, r2, #26
    2d20:	d42e      	bmi.n	2d80 <_printf_common+0xc0>
    2d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2d26:	4639      	mov	r1, r7
    2d28:	4630      	mov	r0, r6
    2d2a:	47c0      	blx	r8
    2d2c:	3001      	adds	r0, #1
    2d2e:	d021      	beq.n	2d74 <_printf_common+0xb4>
    2d30:	6823      	ldr	r3, [r4, #0]
    2d32:	68e5      	ldr	r5, [r4, #12]
    2d34:	f8d9 2000 	ldr.w	r2, [r9]
    2d38:	f003 0306 	and.w	r3, r3, #6
    2d3c:	2b04      	cmp	r3, #4
    2d3e:	bf08      	it	eq
    2d40:	1aad      	subeq	r5, r5, r2
    2d42:	68a3      	ldr	r3, [r4, #8]
    2d44:	6922      	ldr	r2, [r4, #16]
    2d46:	bf0c      	ite	eq
    2d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2d4c:	2500      	movne	r5, #0
    2d4e:	4293      	cmp	r3, r2
    2d50:	bfc4      	itt	gt
    2d52:	1a9b      	subgt	r3, r3, r2
    2d54:	18ed      	addgt	r5, r5, r3
    2d56:	f04f 0900 	mov.w	r9, #0
    2d5a:	341a      	adds	r4, #26
    2d5c:	454d      	cmp	r5, r9
    2d5e:	d11b      	bne.n	2d98 <_printf_common+0xd8>
    2d60:	2000      	movs	r0, #0
    2d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d66:	2301      	movs	r3, #1
    2d68:	4652      	mov	r2, sl
    2d6a:	4639      	mov	r1, r7
    2d6c:	4630      	mov	r0, r6
    2d6e:	47c0      	blx	r8
    2d70:	3001      	adds	r0, #1
    2d72:	d103      	bne.n	2d7c <_printf_common+0xbc>
    2d74:	f04f 30ff 	mov.w	r0, #4294967295
    2d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d7c:	3501      	adds	r5, #1
    2d7e:	e7c2      	b.n	2d06 <_printf_common+0x46>
    2d80:	18e1      	adds	r1, r4, r3
    2d82:	1c5a      	adds	r2, r3, #1
    2d84:	2030      	movs	r0, #48	; 0x30
    2d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2d8a:	4422      	add	r2, r4
    2d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2d94:	3302      	adds	r3, #2
    2d96:	e7c4      	b.n	2d22 <_printf_common+0x62>
    2d98:	2301      	movs	r3, #1
    2d9a:	4622      	mov	r2, r4
    2d9c:	4639      	mov	r1, r7
    2d9e:	4630      	mov	r0, r6
    2da0:	47c0      	blx	r8
    2da2:	3001      	adds	r0, #1
    2da4:	d0e6      	beq.n	2d74 <_printf_common+0xb4>
    2da6:	f109 0901 	add.w	r9, r9, #1
    2daa:	e7d7      	b.n	2d5c <_printf_common+0x9c>

00002dac <_printf_i>:
    2dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2db0:	4617      	mov	r7, r2
    2db2:	7e0a      	ldrb	r2, [r1, #24]
    2db4:	b085      	sub	sp, #20
    2db6:	2a6e      	cmp	r2, #110	; 0x6e
    2db8:	4698      	mov	r8, r3
    2dba:	4606      	mov	r6, r0
    2dbc:	460c      	mov	r4, r1
    2dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2dc0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    2dc4:	f000 80bc 	beq.w	2f40 <_printf_i+0x194>
    2dc8:	d81a      	bhi.n	2e00 <_printf_i+0x54>
    2dca:	2a63      	cmp	r2, #99	; 0x63
    2dcc:	d02e      	beq.n	2e2c <_printf_i+0x80>
    2dce:	d80a      	bhi.n	2de6 <_printf_i+0x3a>
    2dd0:	2a00      	cmp	r2, #0
    2dd2:	f000 80c8 	beq.w	2f66 <_printf_i+0x1ba>
    2dd6:	2a58      	cmp	r2, #88	; 0x58
    2dd8:	f000 808a 	beq.w	2ef0 <_printf_i+0x144>
    2ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2de0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    2de4:	e02a      	b.n	2e3c <_printf_i+0x90>
    2de6:	2a64      	cmp	r2, #100	; 0x64
    2de8:	d001      	beq.n	2dee <_printf_i+0x42>
    2dea:	2a69      	cmp	r2, #105	; 0x69
    2dec:	d1f6      	bne.n	2ddc <_printf_i+0x30>
    2dee:	6821      	ldr	r1, [r4, #0]
    2df0:	681a      	ldr	r2, [r3, #0]
    2df2:	f011 0f80 	tst.w	r1, #128	; 0x80
    2df6:	d023      	beq.n	2e40 <_printf_i+0x94>
    2df8:	1d11      	adds	r1, r2, #4
    2dfa:	6019      	str	r1, [r3, #0]
    2dfc:	6813      	ldr	r3, [r2, #0]
    2dfe:	e027      	b.n	2e50 <_printf_i+0xa4>
    2e00:	2a73      	cmp	r2, #115	; 0x73
    2e02:	f000 80b4 	beq.w	2f6e <_printf_i+0x1c2>
    2e06:	d808      	bhi.n	2e1a <_printf_i+0x6e>
    2e08:	2a6f      	cmp	r2, #111	; 0x6f
    2e0a:	d02a      	beq.n	2e62 <_printf_i+0xb6>
    2e0c:	2a70      	cmp	r2, #112	; 0x70
    2e0e:	d1e5      	bne.n	2ddc <_printf_i+0x30>
    2e10:	680a      	ldr	r2, [r1, #0]
    2e12:	f042 0220 	orr.w	r2, r2, #32
    2e16:	600a      	str	r2, [r1, #0]
    2e18:	e003      	b.n	2e22 <_printf_i+0x76>
    2e1a:	2a75      	cmp	r2, #117	; 0x75
    2e1c:	d021      	beq.n	2e62 <_printf_i+0xb6>
    2e1e:	2a78      	cmp	r2, #120	; 0x78
    2e20:	d1dc      	bne.n	2ddc <_printf_i+0x30>
    2e22:	2278      	movs	r2, #120	; 0x78
    2e24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    2e28:	496e      	ldr	r1, [pc, #440]	; (2fe4 <_printf_i+0x238>)
    2e2a:	e064      	b.n	2ef6 <_printf_i+0x14a>
    2e2c:	681a      	ldr	r2, [r3, #0]
    2e2e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    2e32:	1d11      	adds	r1, r2, #4
    2e34:	6019      	str	r1, [r3, #0]
    2e36:	6813      	ldr	r3, [r2, #0]
    2e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2e3c:	2301      	movs	r3, #1
    2e3e:	e0a3      	b.n	2f88 <_printf_i+0x1dc>
    2e40:	f011 0f40 	tst.w	r1, #64	; 0x40
    2e44:	f102 0104 	add.w	r1, r2, #4
    2e48:	6019      	str	r1, [r3, #0]
    2e4a:	d0d7      	beq.n	2dfc <_printf_i+0x50>
    2e4c:	f9b2 3000 	ldrsh.w	r3, [r2]
    2e50:	2b00      	cmp	r3, #0
    2e52:	da03      	bge.n	2e5c <_printf_i+0xb0>
    2e54:	222d      	movs	r2, #45	; 0x2d
    2e56:	425b      	negs	r3, r3
    2e58:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2e5c:	4962      	ldr	r1, [pc, #392]	; (2fe8 <_printf_i+0x23c>)
    2e5e:	220a      	movs	r2, #10
    2e60:	e017      	b.n	2e92 <_printf_i+0xe6>
    2e62:	6820      	ldr	r0, [r4, #0]
    2e64:	6819      	ldr	r1, [r3, #0]
    2e66:	f010 0f80 	tst.w	r0, #128	; 0x80
    2e6a:	d003      	beq.n	2e74 <_printf_i+0xc8>
    2e6c:	1d08      	adds	r0, r1, #4
    2e6e:	6018      	str	r0, [r3, #0]
    2e70:	680b      	ldr	r3, [r1, #0]
    2e72:	e006      	b.n	2e82 <_printf_i+0xd6>
    2e74:	f010 0f40 	tst.w	r0, #64	; 0x40
    2e78:	f101 0004 	add.w	r0, r1, #4
    2e7c:	6018      	str	r0, [r3, #0]
    2e7e:	d0f7      	beq.n	2e70 <_printf_i+0xc4>
    2e80:	880b      	ldrh	r3, [r1, #0]
    2e82:	4959      	ldr	r1, [pc, #356]	; (2fe8 <_printf_i+0x23c>)
    2e84:	2a6f      	cmp	r2, #111	; 0x6f
    2e86:	bf14      	ite	ne
    2e88:	220a      	movne	r2, #10
    2e8a:	2208      	moveq	r2, #8
    2e8c:	2000      	movs	r0, #0
    2e8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    2e92:	6865      	ldr	r5, [r4, #4]
    2e94:	60a5      	str	r5, [r4, #8]
    2e96:	2d00      	cmp	r5, #0
    2e98:	f2c0 809c 	blt.w	2fd4 <_printf_i+0x228>
    2e9c:	6820      	ldr	r0, [r4, #0]
    2e9e:	f020 0004 	bic.w	r0, r0, #4
    2ea2:	6020      	str	r0, [r4, #0]
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d13f      	bne.n	2f28 <_printf_i+0x17c>
    2ea8:	2d00      	cmp	r5, #0
    2eaa:	f040 8095 	bne.w	2fd8 <_printf_i+0x22c>
    2eae:	4675      	mov	r5, lr
    2eb0:	2a08      	cmp	r2, #8
    2eb2:	d10b      	bne.n	2ecc <_printf_i+0x120>
    2eb4:	6823      	ldr	r3, [r4, #0]
    2eb6:	07da      	lsls	r2, r3, #31
    2eb8:	d508      	bpl.n	2ecc <_printf_i+0x120>
    2eba:	6923      	ldr	r3, [r4, #16]
    2ebc:	6862      	ldr	r2, [r4, #4]
    2ebe:	429a      	cmp	r2, r3
    2ec0:	bfde      	ittt	le
    2ec2:	2330      	movle	r3, #48	; 0x30
    2ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
    2ec8:	f105 35ff 	addle.w	r5, r5, #4294967295
    2ecc:	ebae 0305 	sub.w	r3, lr, r5
    2ed0:	6123      	str	r3, [r4, #16]
    2ed2:	f8cd 8000 	str.w	r8, [sp]
    2ed6:	463b      	mov	r3, r7
    2ed8:	aa03      	add	r2, sp, #12
    2eda:	4621      	mov	r1, r4
    2edc:	4630      	mov	r0, r6
    2ede:	f7ff feef 	bl	2cc0 <_printf_common>
    2ee2:	3001      	adds	r0, #1
    2ee4:	d155      	bne.n	2f92 <_printf_i+0x1e6>
    2ee6:	f04f 30ff 	mov.w	r0, #4294967295
    2eea:	b005      	add	sp, #20
    2eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2ef0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    2ef4:	493c      	ldr	r1, [pc, #240]	; (2fe8 <_printf_i+0x23c>)
    2ef6:	6822      	ldr	r2, [r4, #0]
    2ef8:	6818      	ldr	r0, [r3, #0]
    2efa:	f012 0f80 	tst.w	r2, #128	; 0x80
    2efe:	f100 0504 	add.w	r5, r0, #4
    2f02:	601d      	str	r5, [r3, #0]
    2f04:	d001      	beq.n	2f0a <_printf_i+0x15e>
    2f06:	6803      	ldr	r3, [r0, #0]
    2f08:	e002      	b.n	2f10 <_printf_i+0x164>
    2f0a:	0655      	lsls	r5, r2, #25
    2f0c:	d5fb      	bpl.n	2f06 <_printf_i+0x15a>
    2f0e:	8803      	ldrh	r3, [r0, #0]
    2f10:	07d0      	lsls	r0, r2, #31
    2f12:	bf44      	itt	mi
    2f14:	f042 0220 	orrmi.w	r2, r2, #32
    2f18:	6022      	strmi	r2, [r4, #0]
    2f1a:	b91b      	cbnz	r3, 2f24 <_printf_i+0x178>
    2f1c:	6822      	ldr	r2, [r4, #0]
    2f1e:	f022 0220 	bic.w	r2, r2, #32
    2f22:	6022      	str	r2, [r4, #0]
    2f24:	2210      	movs	r2, #16
    2f26:	e7b1      	b.n	2e8c <_printf_i+0xe0>
    2f28:	4675      	mov	r5, lr
    2f2a:	fbb3 f0f2 	udiv	r0, r3, r2
    2f2e:	fb02 3310 	mls	r3, r2, r0, r3
    2f32:	5ccb      	ldrb	r3, [r1, r3]
    2f34:	f805 3d01 	strb.w	r3, [r5, #-1]!
    2f38:	4603      	mov	r3, r0
    2f3a:	2800      	cmp	r0, #0
    2f3c:	d1f5      	bne.n	2f2a <_printf_i+0x17e>
    2f3e:	e7b7      	b.n	2eb0 <_printf_i+0x104>
    2f40:	6808      	ldr	r0, [r1, #0]
    2f42:	681a      	ldr	r2, [r3, #0]
    2f44:	6949      	ldr	r1, [r1, #20]
    2f46:	f010 0f80 	tst.w	r0, #128	; 0x80
    2f4a:	d004      	beq.n	2f56 <_printf_i+0x1aa>
    2f4c:	1d10      	adds	r0, r2, #4
    2f4e:	6018      	str	r0, [r3, #0]
    2f50:	6813      	ldr	r3, [r2, #0]
    2f52:	6019      	str	r1, [r3, #0]
    2f54:	e007      	b.n	2f66 <_printf_i+0x1ba>
    2f56:	f010 0f40 	tst.w	r0, #64	; 0x40
    2f5a:	f102 0004 	add.w	r0, r2, #4
    2f5e:	6018      	str	r0, [r3, #0]
    2f60:	6813      	ldr	r3, [r2, #0]
    2f62:	d0f6      	beq.n	2f52 <_printf_i+0x1a6>
    2f64:	8019      	strh	r1, [r3, #0]
    2f66:	2300      	movs	r3, #0
    2f68:	6123      	str	r3, [r4, #16]
    2f6a:	4675      	mov	r5, lr
    2f6c:	e7b1      	b.n	2ed2 <_printf_i+0x126>
    2f6e:	681a      	ldr	r2, [r3, #0]
    2f70:	1d11      	adds	r1, r2, #4
    2f72:	6019      	str	r1, [r3, #0]
    2f74:	6815      	ldr	r5, [r2, #0]
    2f76:	6862      	ldr	r2, [r4, #4]
    2f78:	2100      	movs	r1, #0
    2f7a:	4628      	mov	r0, r5
    2f7c:	f000 fdf8 	bl	3b70 <memchr>
    2f80:	b108      	cbz	r0, 2f86 <_printf_i+0x1da>
    2f82:	1b40      	subs	r0, r0, r5
    2f84:	6060      	str	r0, [r4, #4]
    2f86:	6863      	ldr	r3, [r4, #4]
    2f88:	6123      	str	r3, [r4, #16]
    2f8a:	2300      	movs	r3, #0
    2f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2f90:	e79f      	b.n	2ed2 <_printf_i+0x126>
    2f92:	6923      	ldr	r3, [r4, #16]
    2f94:	462a      	mov	r2, r5
    2f96:	4639      	mov	r1, r7
    2f98:	4630      	mov	r0, r6
    2f9a:	47c0      	blx	r8
    2f9c:	3001      	adds	r0, #1
    2f9e:	d0a2      	beq.n	2ee6 <_printf_i+0x13a>
    2fa0:	6823      	ldr	r3, [r4, #0]
    2fa2:	079b      	lsls	r3, r3, #30
    2fa4:	d507      	bpl.n	2fb6 <_printf_i+0x20a>
    2fa6:	2500      	movs	r5, #0
    2fa8:	f104 0919 	add.w	r9, r4, #25
    2fac:	68e3      	ldr	r3, [r4, #12]
    2fae:	9a03      	ldr	r2, [sp, #12]
    2fb0:	1a9b      	subs	r3, r3, r2
    2fb2:	429d      	cmp	r5, r3
    2fb4:	db05      	blt.n	2fc2 <_printf_i+0x216>
    2fb6:	68e0      	ldr	r0, [r4, #12]
    2fb8:	9b03      	ldr	r3, [sp, #12]
    2fba:	4298      	cmp	r0, r3
    2fbc:	bfb8      	it	lt
    2fbe:	4618      	movlt	r0, r3
    2fc0:	e793      	b.n	2eea <_printf_i+0x13e>
    2fc2:	2301      	movs	r3, #1
    2fc4:	464a      	mov	r2, r9
    2fc6:	4639      	mov	r1, r7
    2fc8:	4630      	mov	r0, r6
    2fca:	47c0      	blx	r8
    2fcc:	3001      	adds	r0, #1
    2fce:	d08a      	beq.n	2ee6 <_printf_i+0x13a>
    2fd0:	3501      	adds	r5, #1
    2fd2:	e7eb      	b.n	2fac <_printf_i+0x200>
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d1a7      	bne.n	2f28 <_printf_i+0x17c>
    2fd8:	780b      	ldrb	r3, [r1, #0]
    2fda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2fde:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2fe2:	e765      	b.n	2eb0 <_printf_i+0x104>
    2fe4:	000041be 	.word	0x000041be
    2fe8:	000041ad 	.word	0x000041ad

00002fec <__svfiscanf_r>:
    2fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ff0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    2ff4:	f10d 080c 	add.w	r8, sp, #12
    2ff8:	9301      	str	r3, [sp, #4]
    2ffa:	2300      	movs	r3, #0
    2ffc:	9346      	str	r3, [sp, #280]	; 0x118
    2ffe:	9347      	str	r3, [sp, #284]	; 0x11c
    3000:	4ba0      	ldr	r3, [pc, #640]	; (3284 <__svfiscanf_r+0x298>)
    3002:	93a2      	str	r3, [sp, #648]	; 0x288
    3004:	f8df 9284 	ldr.w	r9, [pc, #644]	; 328c <__svfiscanf_r+0x2a0>
    3008:	4b9f      	ldr	r3, [pc, #636]	; (3288 <__svfiscanf_r+0x29c>)
    300a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    300e:	4606      	mov	r6, r0
    3010:	460c      	mov	r4, r1
    3012:	93a3      	str	r3, [sp, #652]	; 0x28c
    3014:	4692      	mov	sl, r2
    3016:	270a      	movs	r7, #10
    3018:	f89a 3000 	ldrb.w	r3, [sl]
    301c:	2b00      	cmp	r3, #0
    301e:	f000 812f 	beq.w	3280 <__svfiscanf_r+0x294>
    3022:	f000 fd83 	bl	3b2c <__locale_ctype_ptr>
    3026:	f89a b000 	ldrb.w	fp, [sl]
    302a:	4458      	add	r0, fp
    302c:	7843      	ldrb	r3, [r0, #1]
    302e:	f013 0308 	ands.w	r3, r3, #8
    3032:	d143      	bne.n	30bc <__svfiscanf_r+0xd0>
    3034:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    3038:	f10a 0501 	add.w	r5, sl, #1
    303c:	f040 8099 	bne.w	3172 <__svfiscanf_r+0x186>
    3040:	9345      	str	r3, [sp, #276]	; 0x114
    3042:	9343      	str	r3, [sp, #268]	; 0x10c
    3044:	f89a 3001 	ldrb.w	r3, [sl, #1]
    3048:	2b2a      	cmp	r3, #42	; 0x2a
    304a:	d103      	bne.n	3054 <__svfiscanf_r+0x68>
    304c:	2310      	movs	r3, #16
    304e:	9343      	str	r3, [sp, #268]	; 0x10c
    3050:	f10a 0502 	add.w	r5, sl, #2
    3054:	7829      	ldrb	r1, [r5, #0]
    3056:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    305a:	2a09      	cmp	r2, #9
    305c:	46aa      	mov	sl, r5
    305e:	f105 0501 	add.w	r5, r5, #1
    3062:	d941      	bls.n	30e8 <__svfiscanf_r+0xfc>
    3064:	2203      	movs	r2, #3
    3066:	4889      	ldr	r0, [pc, #548]	; (328c <__svfiscanf_r+0x2a0>)
    3068:	f000 fd82 	bl	3b70 <memchr>
    306c:	b138      	cbz	r0, 307e <__svfiscanf_r+0x92>
    306e:	eba0 0309 	sub.w	r3, r0, r9
    3072:	2001      	movs	r0, #1
    3074:	4098      	lsls	r0, r3
    3076:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3078:	4318      	orrs	r0, r3
    307a:	9043      	str	r0, [sp, #268]	; 0x10c
    307c:	46aa      	mov	sl, r5
    307e:	f89a 3000 	ldrb.w	r3, [sl]
    3082:	2b67      	cmp	r3, #103	; 0x67
    3084:	f10a 0501 	add.w	r5, sl, #1
    3088:	d84a      	bhi.n	3120 <__svfiscanf_r+0x134>
    308a:	2b65      	cmp	r3, #101	; 0x65
    308c:	f080 80b7 	bcs.w	31fe <__svfiscanf_r+0x212>
    3090:	2b47      	cmp	r3, #71	; 0x47
    3092:	d82f      	bhi.n	30f4 <__svfiscanf_r+0x108>
    3094:	2b45      	cmp	r3, #69	; 0x45
    3096:	f080 80b2 	bcs.w	31fe <__svfiscanf_r+0x212>
    309a:	2b00      	cmp	r3, #0
    309c:	f000 8082 	beq.w	31a4 <__svfiscanf_r+0x1b8>
    30a0:	2b25      	cmp	r3, #37	; 0x25
    30a2:	d066      	beq.n	3172 <__svfiscanf_r+0x186>
    30a4:	2303      	movs	r3, #3
    30a6:	9349      	str	r3, [sp, #292]	; 0x124
    30a8:	9744      	str	r7, [sp, #272]	; 0x110
    30aa:	e045      	b.n	3138 <__svfiscanf_r+0x14c>
    30ac:	9947      	ldr	r1, [sp, #284]	; 0x11c
    30ae:	3101      	adds	r1, #1
    30b0:	9147      	str	r1, [sp, #284]	; 0x11c
    30b2:	6861      	ldr	r1, [r4, #4]
    30b4:	3301      	adds	r3, #1
    30b6:	3901      	subs	r1, #1
    30b8:	6061      	str	r1, [r4, #4]
    30ba:	6023      	str	r3, [r4, #0]
    30bc:	6863      	ldr	r3, [r4, #4]
    30be:	2b00      	cmp	r3, #0
    30c0:	dd0b      	ble.n	30da <__svfiscanf_r+0xee>
    30c2:	f000 fd33 	bl	3b2c <__locale_ctype_ptr>
    30c6:	6823      	ldr	r3, [r4, #0]
    30c8:	7819      	ldrb	r1, [r3, #0]
    30ca:	4408      	add	r0, r1
    30cc:	7841      	ldrb	r1, [r0, #1]
    30ce:	070d      	lsls	r5, r1, #28
    30d0:	d4ec      	bmi.n	30ac <__svfiscanf_r+0xc0>
    30d2:	f10a 0501 	add.w	r5, sl, #1
    30d6:	46aa      	mov	sl, r5
    30d8:	e79e      	b.n	3018 <__svfiscanf_r+0x2c>
    30da:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    30dc:	4621      	mov	r1, r4
    30de:	4630      	mov	r0, r6
    30e0:	4798      	blx	r3
    30e2:	2800      	cmp	r0, #0
    30e4:	d0ed      	beq.n	30c2 <__svfiscanf_r+0xd6>
    30e6:	e7f4      	b.n	30d2 <__svfiscanf_r+0xe6>
    30e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    30ea:	fb07 1303 	mla	r3, r7, r3, r1
    30ee:	3b30      	subs	r3, #48	; 0x30
    30f0:	9345      	str	r3, [sp, #276]	; 0x114
    30f2:	e7af      	b.n	3054 <__svfiscanf_r+0x68>
    30f4:	2b5b      	cmp	r3, #91	; 0x5b
    30f6:	d061      	beq.n	31bc <__svfiscanf_r+0x1d0>
    30f8:	d80c      	bhi.n	3114 <__svfiscanf_r+0x128>
    30fa:	2b58      	cmp	r3, #88	; 0x58
    30fc:	d1d2      	bne.n	30a4 <__svfiscanf_r+0xb8>
    30fe:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    3104:	9243      	str	r2, [sp, #268]	; 0x10c
    3106:	2210      	movs	r2, #16
    3108:	9244      	str	r2, [sp, #272]	; 0x110
    310a:	2b6f      	cmp	r3, #111	; 0x6f
    310c:	bfb4      	ite	lt
    310e:	2303      	movlt	r3, #3
    3110:	2304      	movge	r3, #4
    3112:	e010      	b.n	3136 <__svfiscanf_r+0x14a>
    3114:	2b63      	cmp	r3, #99	; 0x63
    3116:	d05c      	beq.n	31d2 <__svfiscanf_r+0x1e6>
    3118:	2b64      	cmp	r3, #100	; 0x64
    311a:	d1c3      	bne.n	30a4 <__svfiscanf_r+0xb8>
    311c:	9744      	str	r7, [sp, #272]	; 0x110
    311e:	e7f4      	b.n	310a <__svfiscanf_r+0x11e>
    3120:	2b70      	cmp	r3, #112	; 0x70
    3122:	d042      	beq.n	31aa <__svfiscanf_r+0x1be>
    3124:	d81d      	bhi.n	3162 <__svfiscanf_r+0x176>
    3126:	2b6e      	cmp	r3, #110	; 0x6e
    3128:	d059      	beq.n	31de <__svfiscanf_r+0x1f2>
    312a:	d843      	bhi.n	31b4 <__svfiscanf_r+0x1c8>
    312c:	2b69      	cmp	r3, #105	; 0x69
    312e:	d1b9      	bne.n	30a4 <__svfiscanf_r+0xb8>
    3130:	2300      	movs	r3, #0
    3132:	9344      	str	r3, [sp, #272]	; 0x110
    3134:	2303      	movs	r3, #3
    3136:	9349      	str	r3, [sp, #292]	; 0x124
    3138:	6863      	ldr	r3, [r4, #4]
    313a:	2b00      	cmp	r3, #0
    313c:	dd61      	ble.n	3202 <__svfiscanf_r+0x216>
    313e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    3140:	0659      	lsls	r1, r3, #25
    3142:	d56f      	bpl.n	3224 <__svfiscanf_r+0x238>
    3144:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3146:	2b02      	cmp	r3, #2
    3148:	dc7c      	bgt.n	3244 <__svfiscanf_r+0x258>
    314a:	ab01      	add	r3, sp, #4
    314c:	4622      	mov	r2, r4
    314e:	a943      	add	r1, sp, #268	; 0x10c
    3150:	4630      	mov	r0, r6
    3152:	f000 f8c7 	bl	32e4 <_scanf_chars>
    3156:	2801      	cmp	r0, #1
    3158:	f000 8092 	beq.w	3280 <__svfiscanf_r+0x294>
    315c:	2802      	cmp	r0, #2
    315e:	d1ba      	bne.n	30d6 <__svfiscanf_r+0xea>
    3160:	e01d      	b.n	319e <__svfiscanf_r+0x1b2>
    3162:	2b75      	cmp	r3, #117	; 0x75
    3164:	d0da      	beq.n	311c <__svfiscanf_r+0x130>
    3166:	2b78      	cmp	r3, #120	; 0x78
    3168:	d0c9      	beq.n	30fe <__svfiscanf_r+0x112>
    316a:	2b73      	cmp	r3, #115	; 0x73
    316c:	d19a      	bne.n	30a4 <__svfiscanf_r+0xb8>
    316e:	2302      	movs	r3, #2
    3170:	e7e1      	b.n	3136 <__svfiscanf_r+0x14a>
    3172:	6863      	ldr	r3, [r4, #4]
    3174:	2b00      	cmp	r3, #0
    3176:	dd0c      	ble.n	3192 <__svfiscanf_r+0x1a6>
    3178:	6823      	ldr	r3, [r4, #0]
    317a:	781a      	ldrb	r2, [r3, #0]
    317c:	4593      	cmp	fp, r2
    317e:	d17f      	bne.n	3280 <__svfiscanf_r+0x294>
    3180:	3301      	adds	r3, #1
    3182:	6862      	ldr	r2, [r4, #4]
    3184:	6023      	str	r3, [r4, #0]
    3186:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3188:	3a01      	subs	r2, #1
    318a:	3301      	adds	r3, #1
    318c:	6062      	str	r2, [r4, #4]
    318e:	9347      	str	r3, [sp, #284]	; 0x11c
    3190:	e7a1      	b.n	30d6 <__svfiscanf_r+0xea>
    3192:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3194:	4621      	mov	r1, r4
    3196:	4630      	mov	r0, r6
    3198:	4798      	blx	r3
    319a:	2800      	cmp	r0, #0
    319c:	d0ec      	beq.n	3178 <__svfiscanf_r+0x18c>
    319e:	9846      	ldr	r0, [sp, #280]	; 0x118
    31a0:	2800      	cmp	r0, #0
    31a2:	d163      	bne.n	326c <__svfiscanf_r+0x280>
    31a4:	f04f 30ff 	mov.w	r0, #4294967295
    31a8:	e066      	b.n	3278 <__svfiscanf_r+0x28c>
    31aa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    31ac:	f042 0220 	orr.w	r2, r2, #32
    31b0:	9243      	str	r2, [sp, #268]	; 0x10c
    31b2:	e7a4      	b.n	30fe <__svfiscanf_r+0x112>
    31b4:	2308      	movs	r3, #8
    31b6:	9344      	str	r3, [sp, #272]	; 0x110
    31b8:	2304      	movs	r3, #4
    31ba:	e7bc      	b.n	3136 <__svfiscanf_r+0x14a>
    31bc:	4629      	mov	r1, r5
    31be:	4640      	mov	r0, r8
    31c0:	f000 fa8e 	bl	36e0 <__sccl>
    31c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    31c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    31ca:	9343      	str	r3, [sp, #268]	; 0x10c
    31cc:	4605      	mov	r5, r0
    31ce:	2301      	movs	r3, #1
    31d0:	e7b1      	b.n	3136 <__svfiscanf_r+0x14a>
    31d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    31d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    31d8:	9343      	str	r3, [sp, #268]	; 0x10c
    31da:	2300      	movs	r3, #0
    31dc:	e7ab      	b.n	3136 <__svfiscanf_r+0x14a>
    31de:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    31e0:	06d0      	lsls	r0, r2, #27
    31e2:	f53f af78 	bmi.w	30d6 <__svfiscanf_r+0xea>
    31e6:	f012 0f01 	tst.w	r2, #1
    31ea:	9a01      	ldr	r2, [sp, #4]
    31ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    31ee:	f102 0104 	add.w	r1, r2, #4
    31f2:	9101      	str	r1, [sp, #4]
    31f4:	6812      	ldr	r2, [r2, #0]
    31f6:	bf14      	ite	ne
    31f8:	8013      	strhne	r3, [r2, #0]
    31fa:	6013      	streq	r3, [r2, #0]
    31fc:	e76b      	b.n	30d6 <__svfiscanf_r+0xea>
    31fe:	2305      	movs	r3, #5
    3200:	e799      	b.n	3136 <__svfiscanf_r+0x14a>
    3202:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3204:	4621      	mov	r1, r4
    3206:	4630      	mov	r0, r6
    3208:	4798      	blx	r3
    320a:	2800      	cmp	r0, #0
    320c:	d097      	beq.n	313e <__svfiscanf_r+0x152>
    320e:	e7c6      	b.n	319e <__svfiscanf_r+0x1b2>
    3210:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3212:	3201      	adds	r2, #1
    3214:	9247      	str	r2, [sp, #284]	; 0x11c
    3216:	6862      	ldr	r2, [r4, #4]
    3218:	3a01      	subs	r2, #1
    321a:	2a00      	cmp	r2, #0
    321c:	6062      	str	r2, [r4, #4]
    321e:	dd0a      	ble.n	3236 <__svfiscanf_r+0x24a>
    3220:	3301      	adds	r3, #1
    3222:	6023      	str	r3, [r4, #0]
    3224:	f000 fc82 	bl	3b2c <__locale_ctype_ptr>
    3228:	6823      	ldr	r3, [r4, #0]
    322a:	781a      	ldrb	r2, [r3, #0]
    322c:	4410      	add	r0, r2
    322e:	7842      	ldrb	r2, [r0, #1]
    3230:	0712      	lsls	r2, r2, #28
    3232:	d4ed      	bmi.n	3210 <__svfiscanf_r+0x224>
    3234:	e786      	b.n	3144 <__svfiscanf_r+0x158>
    3236:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3238:	4621      	mov	r1, r4
    323a:	4630      	mov	r0, r6
    323c:	4798      	blx	r3
    323e:	2800      	cmp	r0, #0
    3240:	d0f0      	beq.n	3224 <__svfiscanf_r+0x238>
    3242:	e7ac      	b.n	319e <__svfiscanf_r+0x1b2>
    3244:	2b04      	cmp	r3, #4
    3246:	dc06      	bgt.n	3256 <__svfiscanf_r+0x26a>
    3248:	ab01      	add	r3, sp, #4
    324a:	4622      	mov	r2, r4
    324c:	a943      	add	r1, sp, #268	; 0x10c
    324e:	4630      	mov	r0, r6
    3250:	f000 f8ac 	bl	33ac <_scanf_i>
    3254:	e77f      	b.n	3156 <__svfiscanf_r+0x16a>
    3256:	4b0e      	ldr	r3, [pc, #56]	; (3290 <__svfiscanf_r+0x2a4>)
    3258:	2b00      	cmp	r3, #0
    325a:	f43f af3c 	beq.w	30d6 <__svfiscanf_r+0xea>
    325e:	ab01      	add	r3, sp, #4
    3260:	4622      	mov	r2, r4
    3262:	a943      	add	r1, sp, #268	; 0x10c
    3264:	4630      	mov	r0, r6
    3266:	f3af 8000 	nop.w
    326a:	e774      	b.n	3156 <__svfiscanf_r+0x16a>
    326c:	89a3      	ldrh	r3, [r4, #12]
    326e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3272:	bf18      	it	ne
    3274:	f04f 30ff 	movne.w	r0, #4294967295
    3278:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    327c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3280:	9846      	ldr	r0, [sp, #280]	; 0x118
    3282:	e7f9      	b.n	3278 <__svfiscanf_r+0x28c>
    3284:	000039fd 	.word	0x000039fd
    3288:	000035cd 	.word	0x000035cd
    328c:	000041a2 	.word	0x000041a2
    3290:	00000000 	.word	0x00000000

00003294 <_vfiscanf_r>:
    3294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3298:	460c      	mov	r4, r1
    329a:	4616      	mov	r6, r2
    329c:	461f      	mov	r7, r3
    329e:	4605      	mov	r5, r0
    32a0:	b118      	cbz	r0, 32aa <_vfiscanf_r+0x16>
    32a2:	6983      	ldr	r3, [r0, #24]
    32a4:	b90b      	cbnz	r3, 32aa <_vfiscanf_r+0x16>
    32a6:	f7fe ff4f 	bl	2148 <__sinit>
    32aa:	4b0b      	ldr	r3, [pc, #44]	; (32d8 <_vfiscanf_r+0x44>)
    32ac:	429c      	cmp	r4, r3
    32ae:	d108      	bne.n	32c2 <_vfiscanf_r+0x2e>
    32b0:	686c      	ldr	r4, [r5, #4]
    32b2:	463b      	mov	r3, r7
    32b4:	4632      	mov	r2, r6
    32b6:	4621      	mov	r1, r4
    32b8:	4628      	mov	r0, r5
    32ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32be:	f7ff be95 	b.w	2fec <__svfiscanf_r>
    32c2:	4b06      	ldr	r3, [pc, #24]	; (32dc <_vfiscanf_r+0x48>)
    32c4:	429c      	cmp	r4, r3
    32c6:	d101      	bne.n	32cc <_vfiscanf_r+0x38>
    32c8:	68ac      	ldr	r4, [r5, #8]
    32ca:	e7f2      	b.n	32b2 <_vfiscanf_r+0x1e>
    32cc:	4b04      	ldr	r3, [pc, #16]	; (32e0 <_vfiscanf_r+0x4c>)
    32ce:	429c      	cmp	r4, r3
    32d0:	bf08      	it	eq
    32d2:	68ec      	ldreq	r4, [r5, #12]
    32d4:	e7ed      	b.n	32b2 <_vfiscanf_r+0x1e>
    32d6:	bf00      	nop
    32d8:	00004158 	.word	0x00004158
    32dc:	00004178 	.word	0x00004178
    32e0:	00004138 	.word	0x00004138

000032e4 <_scanf_chars>:
    32e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32e8:	4615      	mov	r5, r2
    32ea:	688a      	ldr	r2, [r1, #8]
    32ec:	4680      	mov	r8, r0
    32ee:	460c      	mov	r4, r1
    32f0:	b932      	cbnz	r2, 3300 <_scanf_chars+0x1c>
    32f2:	698a      	ldr	r2, [r1, #24]
    32f4:	2a00      	cmp	r2, #0
    32f6:	bf0c      	ite	eq
    32f8:	2201      	moveq	r2, #1
    32fa:	f04f 32ff 	movne.w	r2, #4294967295
    32fe:	608a      	str	r2, [r1, #8]
    3300:	6822      	ldr	r2, [r4, #0]
    3302:	06d1      	lsls	r1, r2, #27
    3304:	bf5f      	itttt	pl
    3306:	681a      	ldrpl	r2, [r3, #0]
    3308:	1d11      	addpl	r1, r2, #4
    330a:	6019      	strpl	r1, [r3, #0]
    330c:	6817      	ldrpl	r7, [r2, #0]
    330e:	2600      	movs	r6, #0
    3310:	69a3      	ldr	r3, [r4, #24]
    3312:	b1db      	cbz	r3, 334c <_scanf_chars+0x68>
    3314:	2b01      	cmp	r3, #1
    3316:	d107      	bne.n	3328 <_scanf_chars+0x44>
    3318:	682b      	ldr	r3, [r5, #0]
    331a:	6962      	ldr	r2, [r4, #20]
    331c:	781b      	ldrb	r3, [r3, #0]
    331e:	5cd3      	ldrb	r3, [r2, r3]
    3320:	b9a3      	cbnz	r3, 334c <_scanf_chars+0x68>
    3322:	2e00      	cmp	r6, #0
    3324:	d132      	bne.n	338c <_scanf_chars+0xa8>
    3326:	e006      	b.n	3336 <_scanf_chars+0x52>
    3328:	2b02      	cmp	r3, #2
    332a:	d007      	beq.n	333c <_scanf_chars+0x58>
    332c:	2e00      	cmp	r6, #0
    332e:	d12d      	bne.n	338c <_scanf_chars+0xa8>
    3330:	69a3      	ldr	r3, [r4, #24]
    3332:	2b01      	cmp	r3, #1
    3334:	d12a      	bne.n	338c <_scanf_chars+0xa8>
    3336:	2001      	movs	r0, #1
    3338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    333c:	f000 fbf6 	bl	3b2c <__locale_ctype_ptr>
    3340:	682b      	ldr	r3, [r5, #0]
    3342:	781b      	ldrb	r3, [r3, #0]
    3344:	4418      	add	r0, r3
    3346:	7843      	ldrb	r3, [r0, #1]
    3348:	071b      	lsls	r3, r3, #28
    334a:	d4ef      	bmi.n	332c <_scanf_chars+0x48>
    334c:	6823      	ldr	r3, [r4, #0]
    334e:	06da      	lsls	r2, r3, #27
    3350:	bf5e      	ittt	pl
    3352:	682b      	ldrpl	r3, [r5, #0]
    3354:	781b      	ldrbpl	r3, [r3, #0]
    3356:	703b      	strbpl	r3, [r7, #0]
    3358:	682a      	ldr	r2, [r5, #0]
    335a:	686b      	ldr	r3, [r5, #4]
    335c:	f102 0201 	add.w	r2, r2, #1
    3360:	602a      	str	r2, [r5, #0]
    3362:	68a2      	ldr	r2, [r4, #8]
    3364:	f103 33ff 	add.w	r3, r3, #4294967295
    3368:	f102 32ff 	add.w	r2, r2, #4294967295
    336c:	606b      	str	r3, [r5, #4]
    336e:	f106 0601 	add.w	r6, r6, #1
    3372:	bf58      	it	pl
    3374:	3701      	addpl	r7, #1
    3376:	60a2      	str	r2, [r4, #8]
    3378:	b142      	cbz	r2, 338c <_scanf_chars+0xa8>
    337a:	2b00      	cmp	r3, #0
    337c:	dcc8      	bgt.n	3310 <_scanf_chars+0x2c>
    337e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    3382:	4629      	mov	r1, r5
    3384:	4640      	mov	r0, r8
    3386:	4798      	blx	r3
    3388:	2800      	cmp	r0, #0
    338a:	d0c1      	beq.n	3310 <_scanf_chars+0x2c>
    338c:	6823      	ldr	r3, [r4, #0]
    338e:	f013 0310 	ands.w	r3, r3, #16
    3392:	d105      	bne.n	33a0 <_scanf_chars+0xbc>
    3394:	68e2      	ldr	r2, [r4, #12]
    3396:	3201      	adds	r2, #1
    3398:	60e2      	str	r2, [r4, #12]
    339a:	69a2      	ldr	r2, [r4, #24]
    339c:	b102      	cbz	r2, 33a0 <_scanf_chars+0xbc>
    339e:	703b      	strb	r3, [r7, #0]
    33a0:	6923      	ldr	r3, [r4, #16]
    33a2:	441e      	add	r6, r3
    33a4:	6126      	str	r6, [r4, #16]
    33a6:	2000      	movs	r0, #0
    33a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000033ac <_scanf_i>:
    33ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33b0:	469a      	mov	sl, r3
    33b2:	4b74      	ldr	r3, [pc, #464]	; (3584 <_scanf_i+0x1d8>)
    33b4:	460c      	mov	r4, r1
    33b6:	4683      	mov	fp, r0
    33b8:	4616      	mov	r6, r2
    33ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    33be:	b087      	sub	sp, #28
    33c0:	ab03      	add	r3, sp, #12
    33c2:	68a7      	ldr	r7, [r4, #8]
    33c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    33c8:	4b6f      	ldr	r3, [pc, #444]	; (3588 <_scanf_i+0x1dc>)
    33ca:	69a1      	ldr	r1, [r4, #24]
    33cc:	4a6f      	ldr	r2, [pc, #444]	; (358c <_scanf_i+0x1e0>)
    33ce:	2903      	cmp	r1, #3
    33d0:	bf18      	it	ne
    33d2:	461a      	movne	r2, r3
    33d4:	1e7b      	subs	r3, r7, #1
    33d6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    33da:	bf84      	itt	hi
    33dc:	f240 135d 	movwhi	r3, #349	; 0x15d
    33e0:	60a3      	strhi	r3, [r4, #8]
    33e2:	6823      	ldr	r3, [r4, #0]
    33e4:	9200      	str	r2, [sp, #0]
    33e6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    33ea:	bf88      	it	hi
    33ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    33f0:	f104 091c 	add.w	r9, r4, #28
    33f4:	6023      	str	r3, [r4, #0]
    33f6:	bf8c      	ite	hi
    33f8:	197f      	addhi	r7, r7, r5
    33fa:	2700      	movls	r7, #0
    33fc:	464b      	mov	r3, r9
    33fe:	f04f 0800 	mov.w	r8, #0
    3402:	9301      	str	r3, [sp, #4]
    3404:	6831      	ldr	r1, [r6, #0]
    3406:	ab03      	add	r3, sp, #12
    3408:	2202      	movs	r2, #2
    340a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    340e:	7809      	ldrb	r1, [r1, #0]
    3410:	f000 fbae 	bl	3b70 <memchr>
    3414:	9b01      	ldr	r3, [sp, #4]
    3416:	b328      	cbz	r0, 3464 <_scanf_i+0xb8>
    3418:	f1b8 0f01 	cmp.w	r8, #1
    341c:	d156      	bne.n	34cc <_scanf_i+0x120>
    341e:	6862      	ldr	r2, [r4, #4]
    3420:	b92a      	cbnz	r2, 342e <_scanf_i+0x82>
    3422:	2208      	movs	r2, #8
    3424:	6062      	str	r2, [r4, #4]
    3426:	6822      	ldr	r2, [r4, #0]
    3428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    342c:	6022      	str	r2, [r4, #0]
    342e:	6822      	ldr	r2, [r4, #0]
    3430:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    3434:	6022      	str	r2, [r4, #0]
    3436:	68a2      	ldr	r2, [r4, #8]
    3438:	1e51      	subs	r1, r2, #1
    343a:	60a1      	str	r1, [r4, #8]
    343c:	b192      	cbz	r2, 3464 <_scanf_i+0xb8>
    343e:	6832      	ldr	r2, [r6, #0]
    3440:	1c51      	adds	r1, r2, #1
    3442:	6031      	str	r1, [r6, #0]
    3444:	7812      	ldrb	r2, [r2, #0]
    3446:	701a      	strb	r2, [r3, #0]
    3448:	1c5d      	adds	r5, r3, #1
    344a:	6873      	ldr	r3, [r6, #4]
    344c:	3b01      	subs	r3, #1
    344e:	2b00      	cmp	r3, #0
    3450:	6073      	str	r3, [r6, #4]
    3452:	dc06      	bgt.n	3462 <_scanf_i+0xb6>
    3454:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    3458:	4631      	mov	r1, r6
    345a:	4658      	mov	r0, fp
    345c:	4798      	blx	r3
    345e:	2800      	cmp	r0, #0
    3460:	d176      	bne.n	3550 <_scanf_i+0x1a4>
    3462:	462b      	mov	r3, r5
    3464:	f108 0801 	add.w	r8, r8, #1
    3468:	f1b8 0f03 	cmp.w	r8, #3
    346c:	d1c9      	bne.n	3402 <_scanf_i+0x56>
    346e:	6862      	ldr	r2, [r4, #4]
    3470:	b90a      	cbnz	r2, 3476 <_scanf_i+0xca>
    3472:	220a      	movs	r2, #10
    3474:	6062      	str	r2, [r4, #4]
    3476:	6862      	ldr	r2, [r4, #4]
    3478:	4945      	ldr	r1, [pc, #276]	; (3590 <_scanf_i+0x1e4>)
    347a:	6960      	ldr	r0, [r4, #20]
    347c:	9301      	str	r3, [sp, #4]
    347e:	1a89      	subs	r1, r1, r2
    3480:	f000 f92e 	bl	36e0 <__sccl>
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	f04f 0800 	mov.w	r8, #0
    348a:	461d      	mov	r5, r3
    348c:	68a3      	ldr	r3, [r4, #8]
    348e:	2b00      	cmp	r3, #0
    3490:	d038      	beq.n	3504 <_scanf_i+0x158>
    3492:	6831      	ldr	r1, [r6, #0]
    3494:	6960      	ldr	r0, [r4, #20]
    3496:	780a      	ldrb	r2, [r1, #0]
    3498:	5c80      	ldrb	r0, [r0, r2]
    349a:	2800      	cmp	r0, #0
    349c:	d032      	beq.n	3504 <_scanf_i+0x158>
    349e:	2a30      	cmp	r2, #48	; 0x30
    34a0:	6822      	ldr	r2, [r4, #0]
    34a2:	d121      	bne.n	34e8 <_scanf_i+0x13c>
    34a4:	0510      	lsls	r0, r2, #20
    34a6:	d51f      	bpl.n	34e8 <_scanf_i+0x13c>
    34a8:	f108 0801 	add.w	r8, r8, #1
    34ac:	b117      	cbz	r7, 34b4 <_scanf_i+0x108>
    34ae:	3301      	adds	r3, #1
    34b0:	3f01      	subs	r7, #1
    34b2:	60a3      	str	r3, [r4, #8]
    34b4:	6873      	ldr	r3, [r6, #4]
    34b6:	3b01      	subs	r3, #1
    34b8:	2b00      	cmp	r3, #0
    34ba:	6073      	str	r3, [r6, #4]
    34bc:	dd1b      	ble.n	34f6 <_scanf_i+0x14a>
    34be:	6833      	ldr	r3, [r6, #0]
    34c0:	3301      	adds	r3, #1
    34c2:	6033      	str	r3, [r6, #0]
    34c4:	68a3      	ldr	r3, [r4, #8]
    34c6:	3b01      	subs	r3, #1
    34c8:	60a3      	str	r3, [r4, #8]
    34ca:	e7df      	b.n	348c <_scanf_i+0xe0>
    34cc:	f1b8 0f02 	cmp.w	r8, #2
    34d0:	d1b1      	bne.n	3436 <_scanf_i+0x8a>
    34d2:	6822      	ldr	r2, [r4, #0]
    34d4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    34d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    34dc:	d1c2      	bne.n	3464 <_scanf_i+0xb8>
    34de:	2110      	movs	r1, #16
    34e0:	6061      	str	r1, [r4, #4]
    34e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    34e6:	e7a5      	b.n	3434 <_scanf_i+0x88>
    34e8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    34ec:	6022      	str	r2, [r4, #0]
    34ee:	780b      	ldrb	r3, [r1, #0]
    34f0:	702b      	strb	r3, [r5, #0]
    34f2:	3501      	adds	r5, #1
    34f4:	e7de      	b.n	34b4 <_scanf_i+0x108>
    34f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    34fa:	4631      	mov	r1, r6
    34fc:	4658      	mov	r0, fp
    34fe:	4798      	blx	r3
    3500:	2800      	cmp	r0, #0
    3502:	d0df      	beq.n	34c4 <_scanf_i+0x118>
    3504:	6823      	ldr	r3, [r4, #0]
    3506:	05d9      	lsls	r1, r3, #23
    3508:	d50c      	bpl.n	3524 <_scanf_i+0x178>
    350a:	454d      	cmp	r5, r9
    350c:	d908      	bls.n	3520 <_scanf_i+0x174>
    350e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    3512:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    3516:	4632      	mov	r2, r6
    3518:	4658      	mov	r0, fp
    351a:	4798      	blx	r3
    351c:	1e6f      	subs	r7, r5, #1
    351e:	463d      	mov	r5, r7
    3520:	454d      	cmp	r5, r9
    3522:	d02c      	beq.n	357e <_scanf_i+0x1d2>
    3524:	6822      	ldr	r2, [r4, #0]
    3526:	f012 0210 	ands.w	r2, r2, #16
    352a:	d11e      	bne.n	356a <_scanf_i+0x1be>
    352c:	702a      	strb	r2, [r5, #0]
    352e:	6863      	ldr	r3, [r4, #4]
    3530:	9e00      	ldr	r6, [sp, #0]
    3532:	4649      	mov	r1, r9
    3534:	4658      	mov	r0, fp
    3536:	47b0      	blx	r6
    3538:	6822      	ldr	r2, [r4, #0]
    353a:	f8da 3000 	ldr.w	r3, [sl]
    353e:	f012 0f20 	tst.w	r2, #32
    3542:	d008      	beq.n	3556 <_scanf_i+0x1aa>
    3544:	1d1a      	adds	r2, r3, #4
    3546:	f8ca 2000 	str.w	r2, [sl]
    354a:	681b      	ldr	r3, [r3, #0]
    354c:	6018      	str	r0, [r3, #0]
    354e:	e009      	b.n	3564 <_scanf_i+0x1b8>
    3550:	f04f 0800 	mov.w	r8, #0
    3554:	e7d6      	b.n	3504 <_scanf_i+0x158>
    3556:	07d2      	lsls	r2, r2, #31
    3558:	d5f4      	bpl.n	3544 <_scanf_i+0x198>
    355a:	1d1a      	adds	r2, r3, #4
    355c:	f8ca 2000 	str.w	r2, [sl]
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	8018      	strh	r0, [r3, #0]
    3564:	68e3      	ldr	r3, [r4, #12]
    3566:	3301      	adds	r3, #1
    3568:	60e3      	str	r3, [r4, #12]
    356a:	eba5 0509 	sub.w	r5, r5, r9
    356e:	44a8      	add	r8, r5
    3570:	6925      	ldr	r5, [r4, #16]
    3572:	4445      	add	r5, r8
    3574:	6125      	str	r5, [r4, #16]
    3576:	2000      	movs	r0, #0
    3578:	b007      	add	sp, #28
    357a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    357e:	2001      	movs	r0, #1
    3580:	e7fa      	b.n	3578 <_scanf_i+0x1cc>
    3582:	bf00      	nop
    3584:	000041d0 	.word	0x000041d0
    3588:	00003961 	.word	0x00003961
    358c:	00003841 	.word	0x00003841
    3590:	000041ec 	.word	0x000041ec

00003594 <_read_r>:
    3594:	b538      	push	{r3, r4, r5, lr}
    3596:	4c07      	ldr	r4, [pc, #28]	; (35b4 <_read_r+0x20>)
    3598:	4605      	mov	r5, r0
    359a:	4608      	mov	r0, r1
    359c:	4611      	mov	r1, r2
    359e:	2200      	movs	r2, #0
    35a0:	6022      	str	r2, [r4, #0]
    35a2:	461a      	mov	r2, r3
    35a4:	f7fe f876 	bl	1694 <_read>
    35a8:	1c43      	adds	r3, r0, #1
    35aa:	d102      	bne.n	35b2 <_read_r+0x1e>
    35ac:	6823      	ldr	r3, [r4, #0]
    35ae:	b103      	cbz	r3, 35b2 <_read_r+0x1e>
    35b0:	602b      	str	r3, [r5, #0]
    35b2:	bd38      	pop	{r3, r4, r5, pc}
    35b4:	20000448 	.word	0x20000448

000035b8 <lflush>:
    35b8:	8983      	ldrh	r3, [r0, #12]
    35ba:	f003 0309 	and.w	r3, r3, #9
    35be:	2b09      	cmp	r3, #9
    35c0:	d101      	bne.n	35c6 <lflush+0xe>
    35c2:	f7fe bd6f 	b.w	20a4 <fflush>
    35c6:	2000      	movs	r0, #0
    35c8:	4770      	bx	lr
	...

000035cc <__srefill_r>:
    35cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ce:	460c      	mov	r4, r1
    35d0:	4605      	mov	r5, r0
    35d2:	b118      	cbz	r0, 35dc <__srefill_r+0x10>
    35d4:	6983      	ldr	r3, [r0, #24]
    35d6:	b90b      	cbnz	r3, 35dc <__srefill_r+0x10>
    35d8:	f7fe fdb6 	bl	2148 <__sinit>
    35dc:	4b3b      	ldr	r3, [pc, #236]	; (36cc <__srefill_r+0x100>)
    35de:	429c      	cmp	r4, r3
    35e0:	d10a      	bne.n	35f8 <__srefill_r+0x2c>
    35e2:	686c      	ldr	r4, [r5, #4]
    35e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    35e8:	2300      	movs	r3, #0
    35ea:	6063      	str	r3, [r4, #4]
    35ec:	b293      	uxth	r3, r2
    35ee:	069e      	lsls	r6, r3, #26
    35f0:	d50c      	bpl.n	360c <__srefill_r+0x40>
    35f2:	f04f 30ff 	mov.w	r0, #4294967295
    35f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35f8:	4b35      	ldr	r3, [pc, #212]	; (36d0 <__srefill_r+0x104>)
    35fa:	429c      	cmp	r4, r3
    35fc:	d101      	bne.n	3602 <__srefill_r+0x36>
    35fe:	68ac      	ldr	r4, [r5, #8]
    3600:	e7f0      	b.n	35e4 <__srefill_r+0x18>
    3602:	4b34      	ldr	r3, [pc, #208]	; (36d4 <__srefill_r+0x108>)
    3604:	429c      	cmp	r4, r3
    3606:	bf08      	it	eq
    3608:	68ec      	ldreq	r4, [r5, #12]
    360a:	e7eb      	b.n	35e4 <__srefill_r+0x18>
    360c:	0758      	lsls	r0, r3, #29
    360e:	d448      	bmi.n	36a2 <__srefill_r+0xd6>
    3610:	06d9      	lsls	r1, r3, #27
    3612:	d405      	bmi.n	3620 <__srefill_r+0x54>
    3614:	2309      	movs	r3, #9
    3616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    361a:	602b      	str	r3, [r5, #0]
    361c:	81a2      	strh	r2, [r4, #12]
    361e:	e7e8      	b.n	35f2 <__srefill_r+0x26>
    3620:	071a      	lsls	r2, r3, #28
    3622:	d50b      	bpl.n	363c <__srefill_r+0x70>
    3624:	4621      	mov	r1, r4
    3626:	4628      	mov	r0, r5
    3628:	f7fe fd12 	bl	2050 <_fflush_r>
    362c:	2800      	cmp	r0, #0
    362e:	d1e0      	bne.n	35f2 <__srefill_r+0x26>
    3630:	89a3      	ldrh	r3, [r4, #12]
    3632:	60a0      	str	r0, [r4, #8]
    3634:	f023 0308 	bic.w	r3, r3, #8
    3638:	81a3      	strh	r3, [r4, #12]
    363a:	61a0      	str	r0, [r4, #24]
    363c:	89a3      	ldrh	r3, [r4, #12]
    363e:	f043 0304 	orr.w	r3, r3, #4
    3642:	81a3      	strh	r3, [r4, #12]
    3644:	6923      	ldr	r3, [r4, #16]
    3646:	b91b      	cbnz	r3, 3650 <__srefill_r+0x84>
    3648:	4621      	mov	r1, r4
    364a:	4628      	mov	r0, r5
    364c:	f7ff f9b0 	bl	29b0 <__smakebuf_r>
    3650:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    3654:	b2be      	uxth	r6, r7
    3656:	07b3      	lsls	r3, r6, #30
    3658:	d00f      	beq.n	367a <__srefill_r+0xae>
    365a:	2301      	movs	r3, #1
    365c:	81a3      	strh	r3, [r4, #12]
    365e:	4b1e      	ldr	r3, [pc, #120]	; (36d8 <__srefill_r+0x10c>)
    3660:	491e      	ldr	r1, [pc, #120]	; (36dc <__srefill_r+0x110>)
    3662:	6818      	ldr	r0, [r3, #0]
    3664:	f006 0609 	and.w	r6, r6, #9
    3668:	f7fe fdda 	bl	2220 <_fwalk>
    366c:	2e09      	cmp	r6, #9
    366e:	81a7      	strh	r7, [r4, #12]
    3670:	d103      	bne.n	367a <__srefill_r+0xae>
    3672:	4621      	mov	r1, r4
    3674:	4628      	mov	r0, r5
    3676:	f7fe fc63 	bl	1f40 <__sflush_r>
    367a:	6922      	ldr	r2, [r4, #16]
    367c:	6022      	str	r2, [r4, #0]
    367e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3680:	6963      	ldr	r3, [r4, #20]
    3682:	6a21      	ldr	r1, [r4, #32]
    3684:	4628      	mov	r0, r5
    3686:	47b0      	blx	r6
    3688:	2800      	cmp	r0, #0
    368a:	6060      	str	r0, [r4, #4]
    368c:	dc1c      	bgt.n	36c8 <__srefill_r+0xfc>
    368e:	89a3      	ldrh	r3, [r4, #12]
    3690:	bf17      	itett	ne
    3692:	2200      	movne	r2, #0
    3694:	f043 0320 	orreq.w	r3, r3, #32
    3698:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    369c:	6062      	strne	r2, [r4, #4]
    369e:	81a3      	strh	r3, [r4, #12]
    36a0:	e7a7      	b.n	35f2 <__srefill_r+0x26>
    36a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    36a4:	2900      	cmp	r1, #0
    36a6:	d0cd      	beq.n	3644 <__srefill_r+0x78>
    36a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    36ac:	4299      	cmp	r1, r3
    36ae:	d002      	beq.n	36b6 <__srefill_r+0xea>
    36b0:	4628      	mov	r0, r5
    36b2:	f7fe fe1b 	bl	22ec <_free_r>
    36b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    36b8:	6063      	str	r3, [r4, #4]
    36ba:	2000      	movs	r0, #0
    36bc:	6360      	str	r0, [r4, #52]	; 0x34
    36be:	2b00      	cmp	r3, #0
    36c0:	d0c0      	beq.n	3644 <__srefill_r+0x78>
    36c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    36c4:	6023      	str	r3, [r4, #0]
    36c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36c8:	2000      	movs	r0, #0
    36ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36cc:	00004158 	.word	0x00004158
    36d0:	00004178 	.word	0x00004178
    36d4:	00004138 	.word	0x00004138
    36d8:	00004198 	.word	0x00004198
    36dc:	000035b9 	.word	0x000035b9

000036e0 <__sccl>:
    36e0:	b570      	push	{r4, r5, r6, lr}
    36e2:	780b      	ldrb	r3, [r1, #0]
    36e4:	2b5e      	cmp	r3, #94	; 0x5e
    36e6:	bf13      	iteet	ne
    36e8:	1c4a      	addne	r2, r1, #1
    36ea:	1c8a      	addeq	r2, r1, #2
    36ec:	784b      	ldrbeq	r3, [r1, #1]
    36ee:	2100      	movne	r1, #0
    36f0:	bf08      	it	eq
    36f2:	2101      	moveq	r1, #1
    36f4:	1e44      	subs	r4, r0, #1
    36f6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    36fa:	f804 1f01 	strb.w	r1, [r4, #1]!
    36fe:	42a5      	cmp	r5, r4
    3700:	d1fb      	bne.n	36fa <__sccl+0x1a>
    3702:	b913      	cbnz	r3, 370a <__sccl+0x2a>
    3704:	3a01      	subs	r2, #1
    3706:	4610      	mov	r0, r2
    3708:	bd70      	pop	{r4, r5, r6, pc}
    370a:	f081 0401 	eor.w	r4, r1, #1
    370e:	54c4      	strb	r4, [r0, r3]
    3710:	4611      	mov	r1, r2
    3712:	780d      	ldrb	r5, [r1, #0]
    3714:	2d2d      	cmp	r5, #45	; 0x2d
    3716:	f101 0201 	add.w	r2, r1, #1
    371a:	d006      	beq.n	372a <__sccl+0x4a>
    371c:	2d5d      	cmp	r5, #93	; 0x5d
    371e:	d0f2      	beq.n	3706 <__sccl+0x26>
    3720:	b90d      	cbnz	r5, 3726 <__sccl+0x46>
    3722:	460a      	mov	r2, r1
    3724:	e7ef      	b.n	3706 <__sccl+0x26>
    3726:	462b      	mov	r3, r5
    3728:	e7f1      	b.n	370e <__sccl+0x2e>
    372a:	784e      	ldrb	r6, [r1, #1]
    372c:	2e5d      	cmp	r6, #93	; 0x5d
    372e:	d0fa      	beq.n	3726 <__sccl+0x46>
    3730:	42b3      	cmp	r3, r6
    3732:	dcf8      	bgt.n	3726 <__sccl+0x46>
    3734:	3102      	adds	r1, #2
    3736:	3301      	adds	r3, #1
    3738:	429e      	cmp	r6, r3
    373a:	54c4      	strb	r4, [r0, r3]
    373c:	dcfb      	bgt.n	3736 <__sccl+0x56>
    373e:	e7e8      	b.n	3712 <__sccl+0x32>

00003740 <_strtol_l.isra.0>:
    3740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3744:	4680      	mov	r8, r0
    3746:	4689      	mov	r9, r1
    3748:	4692      	mov	sl, r2
    374a:	461f      	mov	r7, r3
    374c:	468b      	mov	fp, r1
    374e:	465d      	mov	r5, fp
    3750:	980a      	ldr	r0, [sp, #40]	; 0x28
    3752:	f815 4b01 	ldrb.w	r4, [r5], #1
    3756:	f000 f9e5 	bl	3b24 <__locale_ctype_ptr_l>
    375a:	4420      	add	r0, r4
    375c:	7846      	ldrb	r6, [r0, #1]
    375e:	f016 0608 	ands.w	r6, r6, #8
    3762:	d10b      	bne.n	377c <_strtol_l.isra.0+0x3c>
    3764:	2c2d      	cmp	r4, #45	; 0x2d
    3766:	d10b      	bne.n	3780 <_strtol_l.isra.0+0x40>
    3768:	782c      	ldrb	r4, [r5, #0]
    376a:	2601      	movs	r6, #1
    376c:	f10b 0502 	add.w	r5, fp, #2
    3770:	b167      	cbz	r7, 378c <_strtol_l.isra.0+0x4c>
    3772:	2f10      	cmp	r7, #16
    3774:	d114      	bne.n	37a0 <_strtol_l.isra.0+0x60>
    3776:	2c30      	cmp	r4, #48	; 0x30
    3778:	d00a      	beq.n	3790 <_strtol_l.isra.0+0x50>
    377a:	e011      	b.n	37a0 <_strtol_l.isra.0+0x60>
    377c:	46ab      	mov	fp, r5
    377e:	e7e6      	b.n	374e <_strtol_l.isra.0+0xe>
    3780:	2c2b      	cmp	r4, #43	; 0x2b
    3782:	bf04      	itt	eq
    3784:	782c      	ldrbeq	r4, [r5, #0]
    3786:	f10b 0502 	addeq.w	r5, fp, #2
    378a:	e7f1      	b.n	3770 <_strtol_l.isra.0+0x30>
    378c:	2c30      	cmp	r4, #48	; 0x30
    378e:	d127      	bne.n	37e0 <_strtol_l.isra.0+0xa0>
    3790:	782b      	ldrb	r3, [r5, #0]
    3792:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    3796:	2b58      	cmp	r3, #88	; 0x58
    3798:	d14b      	bne.n	3832 <_strtol_l.isra.0+0xf2>
    379a:	786c      	ldrb	r4, [r5, #1]
    379c:	2710      	movs	r7, #16
    379e:	3502      	adds	r5, #2
    37a0:	2e00      	cmp	r6, #0
    37a2:	bf0c      	ite	eq
    37a4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    37a8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    37ac:	2200      	movs	r2, #0
    37ae:	fbb1 fef7 	udiv	lr, r1, r7
    37b2:	4610      	mov	r0, r2
    37b4:	fb07 1c1e 	mls	ip, r7, lr, r1
    37b8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    37bc:	2b09      	cmp	r3, #9
    37be:	d811      	bhi.n	37e4 <_strtol_l.isra.0+0xa4>
    37c0:	461c      	mov	r4, r3
    37c2:	42a7      	cmp	r7, r4
    37c4:	dd1d      	ble.n	3802 <_strtol_l.isra.0+0xc2>
    37c6:	1c53      	adds	r3, r2, #1
    37c8:	d007      	beq.n	37da <_strtol_l.isra.0+0x9a>
    37ca:	4586      	cmp	lr, r0
    37cc:	d316      	bcc.n	37fc <_strtol_l.isra.0+0xbc>
    37ce:	d101      	bne.n	37d4 <_strtol_l.isra.0+0x94>
    37d0:	45a4      	cmp	ip, r4
    37d2:	db13      	blt.n	37fc <_strtol_l.isra.0+0xbc>
    37d4:	fb00 4007 	mla	r0, r0, r7, r4
    37d8:	2201      	movs	r2, #1
    37da:	f815 4b01 	ldrb.w	r4, [r5], #1
    37de:	e7eb      	b.n	37b8 <_strtol_l.isra.0+0x78>
    37e0:	270a      	movs	r7, #10
    37e2:	e7dd      	b.n	37a0 <_strtol_l.isra.0+0x60>
    37e4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    37e8:	2b19      	cmp	r3, #25
    37ea:	d801      	bhi.n	37f0 <_strtol_l.isra.0+0xb0>
    37ec:	3c37      	subs	r4, #55	; 0x37
    37ee:	e7e8      	b.n	37c2 <_strtol_l.isra.0+0x82>
    37f0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    37f4:	2b19      	cmp	r3, #25
    37f6:	d804      	bhi.n	3802 <_strtol_l.isra.0+0xc2>
    37f8:	3c57      	subs	r4, #87	; 0x57
    37fa:	e7e2      	b.n	37c2 <_strtol_l.isra.0+0x82>
    37fc:	f04f 32ff 	mov.w	r2, #4294967295
    3800:	e7eb      	b.n	37da <_strtol_l.isra.0+0x9a>
    3802:	1c53      	adds	r3, r2, #1
    3804:	d108      	bne.n	3818 <_strtol_l.isra.0+0xd8>
    3806:	2322      	movs	r3, #34	; 0x22
    3808:	f8c8 3000 	str.w	r3, [r8]
    380c:	4608      	mov	r0, r1
    380e:	f1ba 0f00 	cmp.w	sl, #0
    3812:	d107      	bne.n	3824 <_strtol_l.isra.0+0xe4>
    3814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3818:	b106      	cbz	r6, 381c <_strtol_l.isra.0+0xdc>
    381a:	4240      	negs	r0, r0
    381c:	f1ba 0f00 	cmp.w	sl, #0
    3820:	d00c      	beq.n	383c <_strtol_l.isra.0+0xfc>
    3822:	b122      	cbz	r2, 382e <_strtol_l.isra.0+0xee>
    3824:	3d01      	subs	r5, #1
    3826:	f8ca 5000 	str.w	r5, [sl]
    382a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    382e:	464d      	mov	r5, r9
    3830:	e7f9      	b.n	3826 <_strtol_l.isra.0+0xe6>
    3832:	2430      	movs	r4, #48	; 0x30
    3834:	2f00      	cmp	r7, #0
    3836:	d1b3      	bne.n	37a0 <_strtol_l.isra.0+0x60>
    3838:	2708      	movs	r7, #8
    383a:	e7b1      	b.n	37a0 <_strtol_l.isra.0+0x60>
    383c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003840 <_strtol_r>:
    3840:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3842:	4c06      	ldr	r4, [pc, #24]	; (385c <_strtol_r+0x1c>)
    3844:	4d06      	ldr	r5, [pc, #24]	; (3860 <_strtol_r+0x20>)
    3846:	6824      	ldr	r4, [r4, #0]
    3848:	6a24      	ldr	r4, [r4, #32]
    384a:	2c00      	cmp	r4, #0
    384c:	bf08      	it	eq
    384e:	462c      	moveq	r4, r5
    3850:	9400      	str	r4, [sp, #0]
    3852:	f7ff ff75 	bl	3740 <_strtol_l.isra.0>
    3856:	b003      	add	sp, #12
    3858:	bd30      	pop	{r4, r5, pc}
    385a:	bf00      	nop
    385c:	20000148 	.word	0x20000148
    3860:	200001ac 	.word	0x200001ac

00003864 <_strtoul_l.isra.0>:
    3864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3868:	4680      	mov	r8, r0
    386a:	4689      	mov	r9, r1
    386c:	4692      	mov	sl, r2
    386e:	461e      	mov	r6, r3
    3870:	460f      	mov	r7, r1
    3872:	463d      	mov	r5, r7
    3874:	9808      	ldr	r0, [sp, #32]
    3876:	f815 4b01 	ldrb.w	r4, [r5], #1
    387a:	f000 f953 	bl	3b24 <__locale_ctype_ptr_l>
    387e:	4420      	add	r0, r4
    3880:	7843      	ldrb	r3, [r0, #1]
    3882:	f013 0308 	ands.w	r3, r3, #8
    3886:	d10a      	bne.n	389e <_strtoul_l.isra.0+0x3a>
    3888:	2c2d      	cmp	r4, #45	; 0x2d
    388a:	d10a      	bne.n	38a2 <_strtoul_l.isra.0+0x3e>
    388c:	782c      	ldrb	r4, [r5, #0]
    388e:	2301      	movs	r3, #1
    3890:	1cbd      	adds	r5, r7, #2
    3892:	b15e      	cbz	r6, 38ac <_strtoul_l.isra.0+0x48>
    3894:	2e10      	cmp	r6, #16
    3896:	d113      	bne.n	38c0 <_strtoul_l.isra.0+0x5c>
    3898:	2c30      	cmp	r4, #48	; 0x30
    389a:	d009      	beq.n	38b0 <_strtoul_l.isra.0+0x4c>
    389c:	e010      	b.n	38c0 <_strtoul_l.isra.0+0x5c>
    389e:	462f      	mov	r7, r5
    38a0:	e7e7      	b.n	3872 <_strtoul_l.isra.0+0xe>
    38a2:	2c2b      	cmp	r4, #43	; 0x2b
    38a4:	bf04      	itt	eq
    38a6:	782c      	ldrbeq	r4, [r5, #0]
    38a8:	1cbd      	addeq	r5, r7, #2
    38aa:	e7f2      	b.n	3892 <_strtoul_l.isra.0+0x2e>
    38ac:	2c30      	cmp	r4, #48	; 0x30
    38ae:	d125      	bne.n	38fc <_strtoul_l.isra.0+0x98>
    38b0:	782a      	ldrb	r2, [r5, #0]
    38b2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    38b6:	2a58      	cmp	r2, #88	; 0x58
    38b8:	d14a      	bne.n	3950 <_strtoul_l.isra.0+0xec>
    38ba:	786c      	ldrb	r4, [r5, #1]
    38bc:	2610      	movs	r6, #16
    38be:	3502      	adds	r5, #2
    38c0:	f04f 31ff 	mov.w	r1, #4294967295
    38c4:	2700      	movs	r7, #0
    38c6:	fbb1 f1f6 	udiv	r1, r1, r6
    38ca:	fb06 fe01 	mul.w	lr, r6, r1
    38ce:	ea6f 0e0e 	mvn.w	lr, lr
    38d2:	4638      	mov	r0, r7
    38d4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    38d8:	2a09      	cmp	r2, #9
    38da:	d811      	bhi.n	3900 <_strtoul_l.isra.0+0x9c>
    38dc:	4614      	mov	r4, r2
    38de:	42a6      	cmp	r6, r4
    38e0:	dd1d      	ble.n	391e <_strtoul_l.isra.0+0xba>
    38e2:	2f00      	cmp	r7, #0
    38e4:	db18      	blt.n	3918 <_strtoul_l.isra.0+0xb4>
    38e6:	4281      	cmp	r1, r0
    38e8:	d316      	bcc.n	3918 <_strtoul_l.isra.0+0xb4>
    38ea:	d101      	bne.n	38f0 <_strtoul_l.isra.0+0x8c>
    38ec:	45a6      	cmp	lr, r4
    38ee:	db13      	blt.n	3918 <_strtoul_l.isra.0+0xb4>
    38f0:	fb00 4006 	mla	r0, r0, r6, r4
    38f4:	2701      	movs	r7, #1
    38f6:	f815 4b01 	ldrb.w	r4, [r5], #1
    38fa:	e7eb      	b.n	38d4 <_strtoul_l.isra.0+0x70>
    38fc:	260a      	movs	r6, #10
    38fe:	e7df      	b.n	38c0 <_strtoul_l.isra.0+0x5c>
    3900:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    3904:	2a19      	cmp	r2, #25
    3906:	d801      	bhi.n	390c <_strtoul_l.isra.0+0xa8>
    3908:	3c37      	subs	r4, #55	; 0x37
    390a:	e7e8      	b.n	38de <_strtoul_l.isra.0+0x7a>
    390c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    3910:	2a19      	cmp	r2, #25
    3912:	d804      	bhi.n	391e <_strtoul_l.isra.0+0xba>
    3914:	3c57      	subs	r4, #87	; 0x57
    3916:	e7e2      	b.n	38de <_strtoul_l.isra.0+0x7a>
    3918:	f04f 37ff 	mov.w	r7, #4294967295
    391c:	e7eb      	b.n	38f6 <_strtoul_l.isra.0+0x92>
    391e:	2f00      	cmp	r7, #0
    3920:	da09      	bge.n	3936 <_strtoul_l.isra.0+0xd2>
    3922:	2322      	movs	r3, #34	; 0x22
    3924:	f8c8 3000 	str.w	r3, [r8]
    3928:	f04f 30ff 	mov.w	r0, #4294967295
    392c:	f1ba 0f00 	cmp.w	sl, #0
    3930:	d107      	bne.n	3942 <_strtoul_l.isra.0+0xde>
    3932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3936:	b103      	cbz	r3, 393a <_strtoul_l.isra.0+0xd6>
    3938:	4240      	negs	r0, r0
    393a:	f1ba 0f00 	cmp.w	sl, #0
    393e:	d00c      	beq.n	395a <_strtoul_l.isra.0+0xf6>
    3940:	b127      	cbz	r7, 394c <_strtoul_l.isra.0+0xe8>
    3942:	3d01      	subs	r5, #1
    3944:	f8ca 5000 	str.w	r5, [sl]
    3948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    394c:	464d      	mov	r5, r9
    394e:	e7f9      	b.n	3944 <_strtoul_l.isra.0+0xe0>
    3950:	2430      	movs	r4, #48	; 0x30
    3952:	2e00      	cmp	r6, #0
    3954:	d1b4      	bne.n	38c0 <_strtoul_l.isra.0+0x5c>
    3956:	2608      	movs	r6, #8
    3958:	e7b2      	b.n	38c0 <_strtoul_l.isra.0+0x5c>
    395a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00003960 <_strtoul_r>:
    3960:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3962:	4c06      	ldr	r4, [pc, #24]	; (397c <_strtoul_r+0x1c>)
    3964:	4d06      	ldr	r5, [pc, #24]	; (3980 <_strtoul_r+0x20>)
    3966:	6824      	ldr	r4, [r4, #0]
    3968:	6a24      	ldr	r4, [r4, #32]
    396a:	2c00      	cmp	r4, #0
    396c:	bf08      	it	eq
    396e:	462c      	moveq	r4, r5
    3970:	9400      	str	r4, [sp, #0]
    3972:	f7ff ff77 	bl	3864 <_strtoul_l.isra.0>
    3976:	b003      	add	sp, #12
    3978:	bd30      	pop	{r4, r5, pc}
    397a:	bf00      	nop
    397c:	20000148 	.word	0x20000148
    3980:	200001ac 	.word	0x200001ac

00003984 <__submore>:
    3984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3988:	460c      	mov	r4, r1
    398a:	6b49      	ldr	r1, [r1, #52]	; 0x34
    398c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3990:	4299      	cmp	r1, r3
    3992:	d11e      	bne.n	39d2 <__submore+0x4e>
    3994:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3998:	f7fe fcf6 	bl	2388 <_malloc_r>
    399c:	b918      	cbnz	r0, 39a6 <__submore+0x22>
    399e:	f04f 30ff 	mov.w	r0, #4294967295
    39a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    39aa:	63a3      	str	r3, [r4, #56]	; 0x38
    39ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    39b0:	6360      	str	r0, [r4, #52]	; 0x34
    39b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    39b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    39ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    39be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    39c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    39c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    39ca:	6020      	str	r0, [r4, #0]
    39cc:	2000      	movs	r0, #0
    39ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39d2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    39d4:	0077      	lsls	r7, r6, #1
    39d6:	463a      	mov	r2, r7
    39d8:	f000 f925 	bl	3c26 <_realloc_r>
    39dc:	4605      	mov	r5, r0
    39de:	2800      	cmp	r0, #0
    39e0:	d0dd      	beq.n	399e <__submore+0x1a>
    39e2:	eb00 0806 	add.w	r8, r0, r6
    39e6:	4601      	mov	r1, r0
    39e8:	4632      	mov	r2, r6
    39ea:	4640      	mov	r0, r8
    39ec:	f000 f910 	bl	3c10 <memcpy>
    39f0:	f8c4 8000 	str.w	r8, [r4]
    39f4:	6365      	str	r5, [r4, #52]	; 0x34
    39f6:	63a7      	str	r7, [r4, #56]	; 0x38
    39f8:	e7e8      	b.n	39cc <__submore+0x48>
	...

000039fc <_ungetc_r>:
    39fc:	1c4b      	adds	r3, r1, #1
    39fe:	b570      	push	{r4, r5, r6, lr}
    3a00:	4606      	mov	r6, r0
    3a02:	460d      	mov	r5, r1
    3a04:	4614      	mov	r4, r2
    3a06:	d103      	bne.n	3a10 <_ungetc_r+0x14>
    3a08:	f04f 35ff 	mov.w	r5, #4294967295
    3a0c:	4628      	mov	r0, r5
    3a0e:	bd70      	pop	{r4, r5, r6, pc}
    3a10:	b118      	cbz	r0, 3a1a <_ungetc_r+0x1e>
    3a12:	6983      	ldr	r3, [r0, #24]
    3a14:	b90b      	cbnz	r3, 3a1a <_ungetc_r+0x1e>
    3a16:	f7fe fb97 	bl	2148 <__sinit>
    3a1a:	4b2e      	ldr	r3, [pc, #184]	; (3ad4 <_ungetc_r+0xd8>)
    3a1c:	429c      	cmp	r4, r3
    3a1e:	d12c      	bne.n	3a7a <_ungetc_r+0x7e>
    3a20:	6874      	ldr	r4, [r6, #4]
    3a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3a26:	f023 0320 	bic.w	r3, r3, #32
    3a2a:	81a3      	strh	r3, [r4, #12]
    3a2c:	b29b      	uxth	r3, r3
    3a2e:	0759      	lsls	r1, r3, #29
    3a30:	d413      	bmi.n	3a5a <_ungetc_r+0x5e>
    3a32:	06da      	lsls	r2, r3, #27
    3a34:	d5e8      	bpl.n	3a08 <_ungetc_r+0xc>
    3a36:	071b      	lsls	r3, r3, #28
    3a38:	d50b      	bpl.n	3a52 <_ungetc_r+0x56>
    3a3a:	4621      	mov	r1, r4
    3a3c:	4630      	mov	r0, r6
    3a3e:	f7fe fb07 	bl	2050 <_fflush_r>
    3a42:	2800      	cmp	r0, #0
    3a44:	d1e0      	bne.n	3a08 <_ungetc_r+0xc>
    3a46:	89a3      	ldrh	r3, [r4, #12]
    3a48:	60a0      	str	r0, [r4, #8]
    3a4a:	f023 0308 	bic.w	r3, r3, #8
    3a4e:	81a3      	strh	r3, [r4, #12]
    3a50:	61a0      	str	r0, [r4, #24]
    3a52:	89a3      	ldrh	r3, [r4, #12]
    3a54:	f043 0304 	orr.w	r3, r3, #4
    3a58:	81a3      	strh	r3, [r4, #12]
    3a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3a5c:	6862      	ldr	r2, [r4, #4]
    3a5e:	b2ed      	uxtb	r5, r5
    3a60:	b1e3      	cbz	r3, 3a9c <_ungetc_r+0xa0>
    3a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a64:	429a      	cmp	r2, r3
    3a66:	da12      	bge.n	3a8e <_ungetc_r+0x92>
    3a68:	6823      	ldr	r3, [r4, #0]
    3a6a:	1e5a      	subs	r2, r3, #1
    3a6c:	6022      	str	r2, [r4, #0]
    3a6e:	f803 5c01 	strb.w	r5, [r3, #-1]
    3a72:	6863      	ldr	r3, [r4, #4]
    3a74:	3301      	adds	r3, #1
    3a76:	6063      	str	r3, [r4, #4]
    3a78:	e7c8      	b.n	3a0c <_ungetc_r+0x10>
    3a7a:	4b17      	ldr	r3, [pc, #92]	; (3ad8 <_ungetc_r+0xdc>)
    3a7c:	429c      	cmp	r4, r3
    3a7e:	d101      	bne.n	3a84 <_ungetc_r+0x88>
    3a80:	68b4      	ldr	r4, [r6, #8]
    3a82:	e7ce      	b.n	3a22 <_ungetc_r+0x26>
    3a84:	4b15      	ldr	r3, [pc, #84]	; (3adc <_ungetc_r+0xe0>)
    3a86:	429c      	cmp	r4, r3
    3a88:	bf08      	it	eq
    3a8a:	68f4      	ldreq	r4, [r6, #12]
    3a8c:	e7c9      	b.n	3a22 <_ungetc_r+0x26>
    3a8e:	4621      	mov	r1, r4
    3a90:	4630      	mov	r0, r6
    3a92:	f7ff ff77 	bl	3984 <__submore>
    3a96:	2800      	cmp	r0, #0
    3a98:	d0e6      	beq.n	3a68 <_ungetc_r+0x6c>
    3a9a:	e7b5      	b.n	3a08 <_ungetc_r+0xc>
    3a9c:	6921      	ldr	r1, [r4, #16]
    3a9e:	6823      	ldr	r3, [r4, #0]
    3aa0:	b151      	cbz	r1, 3ab8 <_ungetc_r+0xbc>
    3aa2:	4299      	cmp	r1, r3
    3aa4:	d208      	bcs.n	3ab8 <_ungetc_r+0xbc>
    3aa6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    3aaa:	428d      	cmp	r5, r1
    3aac:	d104      	bne.n	3ab8 <_ungetc_r+0xbc>
    3aae:	3b01      	subs	r3, #1
    3ab0:	3201      	adds	r2, #1
    3ab2:	6023      	str	r3, [r4, #0]
    3ab4:	6062      	str	r2, [r4, #4]
    3ab6:	e7a9      	b.n	3a0c <_ungetc_r+0x10>
    3ab8:	63e3      	str	r3, [r4, #60]	; 0x3c
    3aba:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3abe:	6363      	str	r3, [r4, #52]	; 0x34
    3ac0:	2303      	movs	r3, #3
    3ac2:	63a3      	str	r3, [r4, #56]	; 0x38
    3ac4:	4623      	mov	r3, r4
    3ac6:	6422      	str	r2, [r4, #64]	; 0x40
    3ac8:	f803 5f46 	strb.w	r5, [r3, #70]!
    3acc:	6023      	str	r3, [r4, #0]
    3ace:	2301      	movs	r3, #1
    3ad0:	e7d1      	b.n	3a76 <_ungetc_r+0x7a>
    3ad2:	bf00      	nop
    3ad4:	00004158 	.word	0x00004158
    3ad8:	00004178 	.word	0x00004178
    3adc:	00004138 	.word	0x00004138

00003ae0 <_fstat_r>:
    3ae0:	b538      	push	{r3, r4, r5, lr}
    3ae2:	4c07      	ldr	r4, [pc, #28]	; (3b00 <_fstat_r+0x20>)
    3ae4:	2300      	movs	r3, #0
    3ae6:	4605      	mov	r5, r0
    3ae8:	4608      	mov	r0, r1
    3aea:	4611      	mov	r1, r2
    3aec:	6023      	str	r3, [r4, #0]
    3aee:	f7fc fff2 	bl	ad6 <_fstat>
    3af2:	1c43      	adds	r3, r0, #1
    3af4:	d102      	bne.n	3afc <_fstat_r+0x1c>
    3af6:	6823      	ldr	r3, [r4, #0]
    3af8:	b103      	cbz	r3, 3afc <_fstat_r+0x1c>
    3afa:	602b      	str	r3, [r5, #0]
    3afc:	bd38      	pop	{r3, r4, r5, pc}
    3afe:	bf00      	nop
    3b00:	20000448 	.word	0x20000448

00003b04 <_isatty_r>:
    3b04:	b538      	push	{r3, r4, r5, lr}
    3b06:	4c06      	ldr	r4, [pc, #24]	; (3b20 <_isatty_r+0x1c>)
    3b08:	2300      	movs	r3, #0
    3b0a:	4605      	mov	r5, r0
    3b0c:	4608      	mov	r0, r1
    3b0e:	6023      	str	r3, [r4, #0]
    3b10:	f7fc ffe6 	bl	ae0 <_isatty>
    3b14:	1c43      	adds	r3, r0, #1
    3b16:	d102      	bne.n	3b1e <_isatty_r+0x1a>
    3b18:	6823      	ldr	r3, [r4, #0]
    3b1a:	b103      	cbz	r3, 3b1e <_isatty_r+0x1a>
    3b1c:	602b      	str	r3, [r5, #0]
    3b1e:	bd38      	pop	{r3, r4, r5, pc}
    3b20:	20000448 	.word	0x20000448

00003b24 <__locale_ctype_ptr_l>:
    3b24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    3b28:	4770      	bx	lr
	...

00003b2c <__locale_ctype_ptr>:
    3b2c:	4b04      	ldr	r3, [pc, #16]	; (3b40 <__locale_ctype_ptr+0x14>)
    3b2e:	4a05      	ldr	r2, [pc, #20]	; (3b44 <__locale_ctype_ptr+0x18>)
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	6a1b      	ldr	r3, [r3, #32]
    3b34:	2b00      	cmp	r3, #0
    3b36:	bf08      	it	eq
    3b38:	4613      	moveq	r3, r2
    3b3a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    3b3e:	4770      	bx	lr
    3b40:	20000148 	.word	0x20000148
    3b44:	200001ac 	.word	0x200001ac

00003b48 <__ascii_mbtowc>:
    3b48:	b082      	sub	sp, #8
    3b4a:	b901      	cbnz	r1, 3b4e <__ascii_mbtowc+0x6>
    3b4c:	a901      	add	r1, sp, #4
    3b4e:	b142      	cbz	r2, 3b62 <__ascii_mbtowc+0x1a>
    3b50:	b14b      	cbz	r3, 3b66 <__ascii_mbtowc+0x1e>
    3b52:	7813      	ldrb	r3, [r2, #0]
    3b54:	600b      	str	r3, [r1, #0]
    3b56:	7812      	ldrb	r2, [r2, #0]
    3b58:	1c10      	adds	r0, r2, #0
    3b5a:	bf18      	it	ne
    3b5c:	2001      	movne	r0, #1
    3b5e:	b002      	add	sp, #8
    3b60:	4770      	bx	lr
    3b62:	4610      	mov	r0, r2
    3b64:	e7fb      	b.n	3b5e <__ascii_mbtowc+0x16>
    3b66:	f06f 0001 	mvn.w	r0, #1
    3b6a:	e7f8      	b.n	3b5e <__ascii_mbtowc+0x16>
    3b6c:	0000      	movs	r0, r0
	...

00003b70 <memchr>:
    3b70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3b74:	2a10      	cmp	r2, #16
    3b76:	db2b      	blt.n	3bd0 <memchr+0x60>
    3b78:	f010 0f07 	tst.w	r0, #7
    3b7c:	d008      	beq.n	3b90 <memchr+0x20>
    3b7e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3b82:	3a01      	subs	r2, #1
    3b84:	428b      	cmp	r3, r1
    3b86:	d02d      	beq.n	3be4 <memchr+0x74>
    3b88:	f010 0f07 	tst.w	r0, #7
    3b8c:	b342      	cbz	r2, 3be0 <memchr+0x70>
    3b8e:	d1f6      	bne.n	3b7e <memchr+0xe>
    3b90:	b4f0      	push	{r4, r5, r6, r7}
    3b92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3b96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    3b9a:	f022 0407 	bic.w	r4, r2, #7
    3b9e:	f07f 0700 	mvns.w	r7, #0
    3ba2:	2300      	movs	r3, #0
    3ba4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3ba8:	3c08      	subs	r4, #8
    3baa:	ea85 0501 	eor.w	r5, r5, r1
    3bae:	ea86 0601 	eor.w	r6, r6, r1
    3bb2:	fa85 f547 	uadd8	r5, r5, r7
    3bb6:	faa3 f587 	sel	r5, r3, r7
    3bba:	fa86 f647 	uadd8	r6, r6, r7
    3bbe:	faa5 f687 	sel	r6, r5, r7
    3bc2:	b98e      	cbnz	r6, 3be8 <memchr+0x78>
    3bc4:	d1ee      	bne.n	3ba4 <memchr+0x34>
    3bc6:	bcf0      	pop	{r4, r5, r6, r7}
    3bc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3bcc:	f002 0207 	and.w	r2, r2, #7
    3bd0:	b132      	cbz	r2, 3be0 <memchr+0x70>
    3bd2:	f810 3b01 	ldrb.w	r3, [r0], #1
    3bd6:	3a01      	subs	r2, #1
    3bd8:	ea83 0301 	eor.w	r3, r3, r1
    3bdc:	b113      	cbz	r3, 3be4 <memchr+0x74>
    3bde:	d1f8      	bne.n	3bd2 <memchr+0x62>
    3be0:	2000      	movs	r0, #0
    3be2:	4770      	bx	lr
    3be4:	3801      	subs	r0, #1
    3be6:	4770      	bx	lr
    3be8:	2d00      	cmp	r5, #0
    3bea:	bf06      	itte	eq
    3bec:	4635      	moveq	r5, r6
    3bee:	3803      	subeq	r0, #3
    3bf0:	3807      	subne	r0, #7
    3bf2:	f015 0f01 	tst.w	r5, #1
    3bf6:	d107      	bne.n	3c08 <memchr+0x98>
    3bf8:	3001      	adds	r0, #1
    3bfa:	f415 7f80 	tst.w	r5, #256	; 0x100
    3bfe:	bf02      	ittt	eq
    3c00:	3001      	addeq	r0, #1
    3c02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3c06:	3001      	addeq	r0, #1
    3c08:	bcf0      	pop	{r4, r5, r6, r7}
    3c0a:	3801      	subs	r0, #1
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop

00003c10 <memcpy>:
    3c10:	b510      	push	{r4, lr}
    3c12:	1e43      	subs	r3, r0, #1
    3c14:	440a      	add	r2, r1
    3c16:	4291      	cmp	r1, r2
    3c18:	d100      	bne.n	3c1c <memcpy+0xc>
    3c1a:	bd10      	pop	{r4, pc}
    3c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c20:	f803 4f01 	strb.w	r4, [r3, #1]!
    3c24:	e7f7      	b.n	3c16 <memcpy+0x6>

00003c26 <_realloc_r>:
    3c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c28:	4607      	mov	r7, r0
    3c2a:	4614      	mov	r4, r2
    3c2c:	460e      	mov	r6, r1
    3c2e:	b921      	cbnz	r1, 3c3a <_realloc_r+0x14>
    3c30:	4611      	mov	r1, r2
    3c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3c36:	f7fe bba7 	b.w	2388 <_malloc_r>
    3c3a:	b922      	cbnz	r2, 3c46 <_realloc_r+0x20>
    3c3c:	f7fe fb56 	bl	22ec <_free_r>
    3c40:	4625      	mov	r5, r4
    3c42:	4628      	mov	r0, r5
    3c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c46:	f000 f821 	bl	3c8c <_malloc_usable_size_r>
    3c4a:	4284      	cmp	r4, r0
    3c4c:	d90f      	bls.n	3c6e <_realloc_r+0x48>
    3c4e:	4621      	mov	r1, r4
    3c50:	4638      	mov	r0, r7
    3c52:	f7fe fb99 	bl	2388 <_malloc_r>
    3c56:	4605      	mov	r5, r0
    3c58:	2800      	cmp	r0, #0
    3c5a:	d0f2      	beq.n	3c42 <_realloc_r+0x1c>
    3c5c:	4631      	mov	r1, r6
    3c5e:	4622      	mov	r2, r4
    3c60:	f7ff ffd6 	bl	3c10 <memcpy>
    3c64:	4631      	mov	r1, r6
    3c66:	4638      	mov	r0, r7
    3c68:	f7fe fb40 	bl	22ec <_free_r>
    3c6c:	e7e9      	b.n	3c42 <_realloc_r+0x1c>
    3c6e:	4635      	mov	r5, r6
    3c70:	e7e7      	b.n	3c42 <_realloc_r+0x1c>

00003c72 <__ascii_wctomb>:
    3c72:	b149      	cbz	r1, 3c88 <__ascii_wctomb+0x16>
    3c74:	2aff      	cmp	r2, #255	; 0xff
    3c76:	bf85      	ittet	hi
    3c78:	238a      	movhi	r3, #138	; 0x8a
    3c7a:	6003      	strhi	r3, [r0, #0]
    3c7c:	700a      	strbls	r2, [r1, #0]
    3c7e:	f04f 30ff 	movhi.w	r0, #4294967295
    3c82:	bf98      	it	ls
    3c84:	2001      	movls	r0, #1
    3c86:	4770      	bx	lr
    3c88:	4608      	mov	r0, r1
    3c8a:	4770      	bx	lr

00003c8c <_malloc_usable_size_r>:
    3c8c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    3c90:	2800      	cmp	r0, #0
    3c92:	f1a0 0004 	sub.w	r0, r0, #4
    3c96:	bfbc      	itt	lt
    3c98:	580b      	ldrlt	r3, [r1, r0]
    3c9a:	18c0      	addlt	r0, r0, r3
    3c9c:	4770      	bx	lr
    3c9e:	0000      	movs	r0, r0
    3ca0:	682f2e2e 	.word	0x682f2e2e
    3ca4:	732f6c61 	.word	0x732f6c61
    3ca8:	682f6372 	.word	0x682f6372
    3cac:	695f6c61 	.word	0x695f6c61
    3cb0:	00632e6f 	.word	0x00632e6f
    3cb4:	682f2e2e 	.word	0x682f2e2e
    3cb8:	732f6c61 	.word	0x732f6c61
    3cbc:	682f6372 	.word	0x682f6372
    3cc0:	6d5f6c61 	.word	0x6d5f6c61
    3cc4:	735f6963 	.word	0x735f6963
    3cc8:	2e636e79 	.word	0x2e636e79
    3ccc:	00000063 	.word	0x00000063
    3cd0:	682f2e2e 	.word	0x682f2e2e
    3cd4:	732f6c61 	.word	0x732f6c61
    3cd8:	682f6372 	.word	0x682f6372
    3cdc:	705f6c61 	.word	0x705f6c61
    3ce0:	632e6d77 	.word	0x632e6d77
    3ce4:	00000000 	.word	0x00000000
    3ce8:	682f2e2e 	.word	0x682f2e2e
    3cec:	732f6c61 	.word	0x732f6c61
    3cf0:	682f6372 	.word	0x682f6372
    3cf4:	755f6c61 	.word	0x755f6c61
    3cf8:	74726173 	.word	0x74726173
    3cfc:	6e79735f 	.word	0x6e79735f
    3d00:	00632e63 	.word	0x00632e63
    3d04:	682f2e2e 	.word	0x682f2e2e
    3d08:	732f6c70 	.word	0x732f6c70
    3d0c:	2f636864 	.word	0x2f636864
    3d10:	5f6c7068 	.word	0x5f6c7068
    3d14:	63686473 	.word	0x63686473
    3d18:	0000632e 	.word	0x0000632e
    3d1c:	40003000 	.word	0x40003000
    3d20:	40003400 	.word	0x40003400
    3d24:	41012000 	.word	0x41012000
    3d28:	41014000 	.word	0x41014000
    3d2c:	43000000 	.word	0x43000000
    3d30:	43000400 	.word	0x43000400
    3d34:	43000800 	.word	0x43000800
    3d38:	43000c00 	.word	0x43000c00

00003d3c <_usarts>:
    3d3c:	00000000 40100004 00030000 00700002     .......@......p.
    3d4c:	0000d8ad 00000000 00000002 40100004     ...............@
    3d5c:	00030000 00700002 0000d8ad 00000000     ......p.........

00003d6c <_i2cms>:
	...
    3d84:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3d94:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    3da4:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    3db4:	42001800 43001400 43001800 682f2e2e     ...B...C...C../h
    3dc4:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    3dd4:	21210a0d 21212121 49202121 6148206e     ..!!!!!!!! In Ha
    3de4:	61466472 5f746c75 646e6148 2072656c     rdFault_Handler 
    3df4:	21212121 21212121 0000000d 0a0d0a0d     !!!!!!!!........
    3e04:	3d3d3d3d 3d3d3d3d 4144694c 75412052     ========LiDAR Au
    3e14:	616d6f74 20646574 7070614d 20676e69     tomated Mapping 
    3e24:	74737953 28206d65 534d414c 3d3d3d29     System (LAMS)===
    3e34:	3d3d3d3d 00000d3d 00007325 65530a0d     =====...%s....Se
    3e44:	7463656c 6f206465 6f697470 7369206e     lected option is
    3e54:	0d642520 0000000a 6e490a0d 696c6176      %d.......Invali
    3e64:	706f2064 6e6f6974 00000d20 65530a0d     d option .....Se
    3e74:	6e697474 65732067 206f7672 6c676e61     tting servo angl
    3e84:	6f742065 64302520 30252820 32322f64     e to %0d (%0d/22
    3e94:	0d293337 0000000a 65520a0d 6e727574     73).......Return
    3ea4:	20676e69 6d206f74 206e6961 756e656d     ing to main menu
    3eb4:	0000000d 6e450a0d 20726574 6c676e61     ......Enter angl
    3ec4:	3e3e2065 00000020 0a0d6425 4f525245     e >> ...%d..ERRO
    3ed4:	49203a52 6c61766e 61206469 656c676e     R: Invalid angle
    3ee4:	6e41202e 20656c67 7473756d 20656220     . Angle must be 
    3ef4:	77746562 206e6565 6e612030 38312064     between 0 and 18
    3f04:	000a0d30 6e490a0d 696c6176 706f2064     0.....Invalid op
    3f14:	6e6f6974 0000000d 61440a0d 61206174     tion......Data a
    3f24:	65742074 61207473 65726464 25207373     t test address %
    3f34:	73692064 25203d20 000a0d64 6e490a0d     d is = %d.....In
    3f44:	74726576 74206465 64206568 20617461     verted the data 
    3f54:	74207461 20747365 72646461 20737365     at test address 
    3f64:	20646e61 74697277 0d6e6574 00000000     and written.....
    3f74:	6c500a0d 65736165 6e6f6320 75676966     ..Please configu
    3f84:	53206572 204b4c42 65737566 206f7420     re SBLK fuse to 
    3f94:	6f6c6c61 65746163 616d5320 45457472     allocate SmartEE
    3fa4:	4d4f5250 65726120 00000d61 64323025     PROM area...%02d
    3fb4:	00000020 6d530a0d 45747261 4f525045      .....SmartEEPRO
    3fc4:	6f63204d 6961746e 7620736e 64696c61     M contains valid
    3fd4:	74616420 000d2061 74530a0d 6e69726f      data ....Storin
    3fe4:	69732067 74616e67 20657275 53206f74     g signature to S
    3ff4:	7472616d 52504545 61204d4f 65726464     martEEPROM addre
    4004:	30207373 20303078 30206f74 0d333078     ss 0x00 to 0x03.
    4014:	00000000 75460a0d 76206573 65756c61     ......Fuse value
    4024:	6f662073 42532072 3d204b4c 2c642520     s for SBLK = %d,
    4034:	5a535020 25203d20 53202e64 74206565      PSZ = %d. See t
    4044:	74206568 656c6261 6d532720 45747261     he table 'SmartE
    4054:	4f525045 6956204d 61757472 0909206c     EPROM Virtual ..
    4064:	657a6953 206e6920 65747942 69202773     Size in Bytes' i
    4074:	6874206e 61442065 68736174 20746565     n the Datasheet 
    4084:	63206f74 75636c61 6574616c 746f7420     to calculate tot
    4094:	61206c61 6c696176 656c6261 74796220     al available byt
    40a4:	0d207365 0000000a 45450a0d 4d4f5250     es .......EEPROM
    40b4:	74614420 74612061 72696620 25207473      Data at first %
    40c4:	6f6c2064 69746163 3a736e6f 000a0d20     d locations: ...
    40d4:	6e450a0d 20726574 72646461 20737365     ..Enter address 
    40e4:	00203e3e 52450a0d 3a524f52 64644120     >> ...ERROR: Add
    40f4:	73736572 766e6920 64696c61 7254202e     ress invalid. Tr
    4104:	67612079 206e6961 0000000d 6e450a0d     y again ......En
    4114:	20726574 61746164 203e3e20 00000000     ter data >> ....
    4124:	72570a0d 65747469 6425206e 20746120     ..Written %d at 
    4134:	00006425                                %d..

00004138 <__sf_fake_stderr>:
	...

00004158 <__sf_fake_stdin>:
	...

00004178 <__sf_fake_stdout>:
	...

00004198 <_global_impure_ptr>:
    4198:	2000014c 2b302d23 6c680020 6665004c     L.. #-0+ .hlL.ef
    41a8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    41b8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    41c8:	64636261 00006665 000041ee 000041f1     abcdef...A...A..
    41d8:	000041f4 61462d41 3938662d 33323130     .A..A-Fa-f890123
    41e8:	37363534 2d2b005d 00303000 43005878     4567].+-.00.xX.C
    41f8:	534f5000 2e005849 20200000                       .POSIX...

00004201 <_ctype_>:
    4201:	20202000 20202020 28282020 20282828     .         ((((( 
    4211:	20202020 20202020 20202020 20202020                     
    4221:	10108820 10101010 10101010 10101010      ...............
    4231:	04040410 04040404 10040404 10101010     ................
    4241:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4251:	01010101 01010101 01010101 10101010     ................
    4261:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4271:	02020202 02020202 02020202 10101010     ................
    4281:	00000020 00000000 00000000 00000000      ...............
	...

00004304 <_init>:
    4304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4306:	bf00      	nop
    4308:	bcf8      	pop	{r3, r4, r5, r6, r7}
    430a:	bc08      	pop	{r3}
    430c:	469e      	mov	lr, r3
    430e:	4770      	bx	lr

00004310 <__init_array_start>:
    4310:	00000289 	.word	0x00000289

00004314 <_fini>:
    4314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4316:	bf00      	nop
    4318:	bcf8      	pop	{r3, r4, r5, r6, r7}
    431a:	bc08      	pop	{r3}
    431c:	469e      	mov	lr, r3
    431e:	4770      	bx	lr

00004320 <__fini_array_start>:
    4320:	00000265 	.word	0x00000265
