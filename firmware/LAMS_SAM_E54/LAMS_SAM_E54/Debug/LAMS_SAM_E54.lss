
LAMS_SAM_E54.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000104a0  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  000104a0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000104a0  2**0
                  CONTENTS
  4 .bss          0000002c  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        00010004  2000002c  2000002c  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000104a0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000104ce  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004b26  00000000  00000000  00010527  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000dd8  00000000  00000000  0001504d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000308  00000000  00000000  00015e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000168  00000000  00000000  0001612d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00016295  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002caf3  00000000  00000000  00016375  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000077e9  00000000  00000000  00042e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a74e  00000000  00000000  0004a651  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000001f0  00000000  00000000  00154da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	30 00 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     0.. ............
  10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
  2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
  3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
  f4:	e9 03 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
 264:	b510      	push	{r4, lr}
 266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
 268:	7823      	ldrb	r3, [r4, #0]
 26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
 26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
 26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
 270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
 272:	f3af 8000 	nop.w
 276:	2301      	movs	r3, #1
 278:	7023      	strb	r3, [r4, #0]
 27a:	bd10      	pop	{r4, pc}
 27c:	20000000 	.word	0x20000000
 280:	00000000 	.word	0x00000000
 284:	000004a0 	.word	0x000004a0

00000288 <frame_dummy>:
 288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
 28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
 28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
 28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
 290:	b510      	push	{r4, lr}
 292:	f3af 8000 	nop.w
 296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
 298:	6803      	ldr	r3, [r0, #0]
 29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
 29c:	bd10      	pop	{r4, pc}
 29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
 2a0:	6803      	ldr	r3, [r0, #0]
 2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
 2a4:	4770      	bx	lr
 2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
 2a8:	2b00      	cmp	r3, #0
 2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
 2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 2b0:	4718      	bx	r3
 2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
 2b4:	2b00      	cmp	r3, #0
 2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
 2b8:	4718      	bx	r3
 2ba:	bf00      	nop
 2bc:	00000000 	.word	0x00000000
 2c0:	000004a0 	.word	0x000004a0
 2c4:	20000004 	.word	0x20000004
 2c8:	000004a0 	.word	0x000004a0
 2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 2d0:	b508      	push	{r3, lr}
	system_init();
 2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
 2d4:	4798      	blx	r3
 2d6:	bd08      	pop	{r3, pc}
 2d8:	00000379 	.word	0x00000379

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
 2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
 2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
 2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
 2e6:	429a      	cmp	r2, r3
 2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
 2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
 2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
 2ee:	429a      	cmp	r2, r3
 2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
 2f2:	3b01      	subs	r3, #1
 2f4:	1a9b      	subs	r3, r3, r2
 2f6:	f023 0303 	bic.w	r3, r3, #3
 2fa:	3304      	adds	r3, #4
 2fc:	4413      	add	r3, r2
 2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
 300:	f851 0b04 	ldr.w	r0, [r1], #4
 304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
 308:	429a      	cmp	r2, r3
 30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
 30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
 30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
 310:	429a      	cmp	r2, r3
 312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
 314:	3b01      	subs	r3, #1
 316:	1a9b      	subs	r3, r3, r2
 318:	f023 0303 	bic.w	r3, r3, #3
 31c:	3304      	adds	r3, #4
 31e:	4413      	add	r3, r2
                *pDest++ = 0;
 320:	2100      	movs	r1, #0
 322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
 326:	4293      	cmp	r3, r2
 328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
 32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
 32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
 334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
 348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
 34a:	4798      	blx	r3
        main();
 34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
 34e:	4798      	blx	r3
 350:	e7fe      	b.n	350 <Reset_Handler+0x70>
 352:	bf00      	nop
 354:	20000000 	.word	0x20000000
 358:	000004a0 	.word	0x000004a0
 35c:	20000000 	.word	0x20000000
 360:	2000002c 	.word	0x2000002c
 364:	20000000 	.word	0x20000000
 368:	e000ed00 	.word	0xe000ed00
 36c:	00000000 	.word	0x00000000
 370:	00000439 	.word	0x00000439
 374:	0000042d 	.word	0x0000042d

00000378 <system_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void system_init(void)
{
 378:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 37a:	4b01      	ldr	r3, [pc, #4]	; (380 <system_init+0x8>)
 37c:	4798      	blx	r3
 37e:	bd08      	pop	{r3, pc}
 380:	00000385 	.word	0x00000385

00000384 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 384:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
 386:	4a08      	ldr	r2, [pc, #32]	; (3a8 <_init_chip+0x24>)
 388:	8813      	ldrh	r3, [r2, #0]
 38a:	b29b      	uxth	r3, r3
 38c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
 38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <_init_chip+0x28>)
 390:	4798      	blx	r3
	_oscctrl_init_sources();
 392:	4b07      	ldr	r3, [pc, #28]	; (3b0 <_init_chip+0x2c>)
 394:	4798      	blx	r3
	_mclk_init();
 396:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_init_chip+0x30>)
 398:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 39a:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_init_chip+0x34>)
 39c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 39e:	f640 70ff 	movw	r0, #4095	; 0xfff
 3a2:	4b06      	ldr	r3, [pc, #24]	; (3bc <_init_chip+0x38>)
 3a4:	4798      	blx	r3
 3a6:	bd08      	pop	{r3, pc}
 3a8:	41004000 	.word	0x41004000
 3ac:	000003d1 	.word	0x000003d1
 3b0:	000003e5 	.word	0x000003e5
 3b4:	000003c5 	.word	0x000003c5
 3b8:	000003e7 	.word	0x000003e7
 3bc:	000003c1 	.word	0x000003c1

000003c0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
 3c0:	4770      	bx	lr
	...

000003c4 <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
 3c4:	2201      	movs	r2, #1
 3c6:	4b01      	ldr	r3, [pc, #4]	; (3cc <_mclk_init+0x8>)
 3c8:	715a      	strb	r2, [r3, #5]
 3ca:	4770      	bx	lr
 3cc:	40000800 	.word	0x40000800

000003d0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 3d0:	4b03      	ldr	r3, [pc, #12]	; (3e0 <_osc32kctrl_init_sources+0x10>)
 3d2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 3d4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 3d8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 3da:	2201      	movs	r2, #1
 3dc:	741a      	strb	r2, [r3, #16]
 3de:	4770      	bx	lr
 3e0:	40001400 	.word	0x40001400

000003e4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
 3e4:	4770      	bx	lr

000003e6 <_oscctrl_init_referenced_generators>:

	(void)hw;
}

void _oscctrl_init_referenced_generators(void)
{
 3e6:	4770      	bx	lr

000003e8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
 3e8:	b500      	push	{lr}
 3ea:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
 3ec:	4b0d      	ldr	r3, [pc, #52]	; (424 <RAMECC_Handler+0x3c>)
 3ee:	789b      	ldrb	r3, [r3, #2]
 3f0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
 3f2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
 3f4:	9b01      	ldr	r3, [sp, #4]
 3f6:	f013 0f02 	tst.w	r3, #2
 3fa:	d006      	beq.n	40a <RAMECC_Handler+0x22>
 3fc:	4b0a      	ldr	r3, [pc, #40]	; (428 <RAMECC_Handler+0x40>)
 3fe:	681b      	ldr	r3, [r3, #0]
 400:	b11b      	cbz	r3, 40a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
 402:	4a08      	ldr	r2, [pc, #32]	; (424 <RAMECC_Handler+0x3c>)
 404:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
 406:	4798      	blx	r3
 408:	e009      	b.n	41e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
 40a:	9b01      	ldr	r3, [sp, #4]
 40c:	f013 0f01 	tst.w	r3, #1
 410:	d005      	beq.n	41e <RAMECC_Handler+0x36>
 412:	4b05      	ldr	r3, [pc, #20]	; (428 <RAMECC_Handler+0x40>)
 414:	685b      	ldr	r3, [r3, #4]
 416:	b113      	cbz	r3, 41e <RAMECC_Handler+0x36>
 418:	4a02      	ldr	r2, [pc, #8]	; (424 <RAMECC_Handler+0x3c>)
 41a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
 41c:	4798      	blx	r3
	} else {
		return;
	}
}
 41e:	b003      	add	sp, #12
 420:	f85d fb04 	ldr.w	pc, [sp], #4
 424:	41020000 	.word	0x41020000
 428:	2000001c 	.word	0x2000001c

0000042c <main>:
#include <atmel_start.h>

int main(void)
{
 42c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 42e:	4b01      	ldr	r3, [pc, #4]	; (434 <main+0x8>)
 430:	4798      	blx	r3
 432:	e7fe      	b.n	432 <main+0x6>
 434:	000002d1 	.word	0x000002d1

00000438 <__libc_init_array>:
 438:	b570      	push	{r4, r5, r6, lr}
 43a:	4e0d      	ldr	r6, [pc, #52]	; (470 <__libc_init_array+0x38>)
 43c:	4c0d      	ldr	r4, [pc, #52]	; (474 <__libc_init_array+0x3c>)
 43e:	1ba4      	subs	r4, r4, r6
 440:	10a4      	asrs	r4, r4, #2
 442:	2500      	movs	r5, #0
 444:	42a5      	cmp	r5, r4
 446:	d109      	bne.n	45c <__libc_init_array+0x24>
 448:	4e0b      	ldr	r6, [pc, #44]	; (478 <__libc_init_array+0x40>)
 44a:	4c0c      	ldr	r4, [pc, #48]	; (47c <__libc_init_array+0x44>)
 44c:	f000 f818 	bl	480 <_init>
 450:	1ba4      	subs	r4, r4, r6
 452:	10a4      	asrs	r4, r4, #2
 454:	2500      	movs	r5, #0
 456:	42a5      	cmp	r5, r4
 458:	d105      	bne.n	466 <__libc_init_array+0x2e>
 45a:	bd70      	pop	{r4, r5, r6, pc}
 45c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 460:	4798      	blx	r3
 462:	3501      	adds	r5, #1
 464:	e7ee      	b.n	444 <__libc_init_array+0xc>
 466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 46a:	4798      	blx	r3
 46c:	3501      	adds	r5, #1
 46e:	e7f2      	b.n	456 <__libc_init_array+0x1e>
 470:	0000048c 	.word	0x0000048c
 474:	0000048c 	.word	0x0000048c
 478:	0000048c 	.word	0x0000048c
 47c:	00000490 	.word	0x00000490

00000480 <_init>:
 480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 482:	bf00      	nop
 484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 486:	bc08      	pop	{r3}
 488:	469e      	mov	lr, r3
 48a:	4770      	bx	lr

0000048c <__init_array_start>:
 48c:	00000289 	.word	0x00000289

00000490 <_fini>:
 490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 492:	bf00      	nop
 494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 496:	bc08      	pop	{r3}
 498:	469e      	mov	lr, r3
 49a:	4770      	bx	lr

0000049c <__fini_array_start>:
 49c:	00000265 	.word	0x00000265
